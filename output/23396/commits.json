[
  {
    "sha": "b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
    "node_id": "C_kwDOABII59oAKGIzMWFiNmRmZWI0MWQ5ZDliMGFiYjcwZmFiMTRiMjM2N2FmNTYzYzg",
    "commit": {
      "author": {
        "name": "dev",
        "email": "dev@bitcoinstaking.org",
        "date": "2021-10-30T15:51:47Z"
      },
      "committer": {
        "name": "dev",
        "email": "dev@bitcoinstaking.org",
        "date": "2021-10-30T15:51:47Z"
      },
      "message": "BTC transitioned to PoS",
      "tree": {
        "sha": "4c77f70346c1c882500ff7d4eb82ca179f13e75f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c77f70346c1c882500ff7d4eb82ca179f13e75f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEJDVYFPVQCNO4Au+eZlkJnXmOnnwFAmF9ahMACgkQZlkJnXmO\nnny7cQ//coeZmnKsmam8LlhB1eUOkYzbNLeru+ZiPOgcAmhKBqX1s5KhSyd8B9ZC\n64DCnPJlHVpCPZ3Ge6cVF99egHO9evleuQtrxDcC4s8YYBsK32Fhl3ZRxMoGnWrj\nl2QEkTWFFHz65oswbkMqdMlG9rXSXOrGG+o1xYccIUdgNqi/87Qa1bgSXx4Ygf4z\ngaKgWxCO6fvY+YzI+W6A7mZjy5v7ACdPDMqI8ciKWG8xuY7/fgA1mUbC7IkFUs4k\n+SLFW2BtO+s5If0zmvvjMp3YP6kNWCep8gjnCCuCCoYwMlFka27UVpPUnqTs5s/Y\nyfuc2/xEl6dG9TcXc+mNs63/wOndVSxmZEYyIMhPc9fyPfF3YP+Lepyy5KbWhZZS\nFpHnWc5xDvF1s7vHV9PhGBno15BVwmpQxuvRboGKtZ0yr3ixKEH4Zo7kzEaFrDqt\nd9K2+aL7jNcWuyDSzpBHT2js3Zsy9x0rq5tqpRPbCLLuWUpiGN//GMSSxcaRLJlf\nScJnlGj1owPNyjUAgadeVb3XTUzAsePZZtUhZ7uBXL+ppo2iWEqq1bQ8ugAqQSEs\nRMvsXDs5LVIpraxE/SCBhBIxOgInRGA/+nJS68XQ4aTC5qg6L2LJGlrmWNcT/cf6\nc04Or4JMdkKQu+ptuQ7NLud6swMPlLns6wu9OWWRtqJRTXhYJFI=\n=ZMBQ\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c77f70346c1c882500ff7d4eb82ca179f13e75f\nparent 7efc628539573af4b4a76d93b853cc46e9e52eae\nauthor dev <dev@bitcoinstaking.org> 1635609107 -0500\ncommitter dev <dev@bitcoinstaking.org> 1635609107 -0500\n\nBTC transitioned to PoS\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/comments",
    "author": {
      "login": "BitcoinStaking",
      "id": 84234395,
      "node_id": "MDQ6VXNlcjg0MjM0Mzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84234395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinStaking",
      "html_url": "https://github.com/BitcoinStaking",
      "followers_url": "https://api.github.com/users/BitcoinStaking/followers",
      "following_url": "https://api.github.com/users/BitcoinStaking/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinStaking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinStaking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinStaking/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinStaking/orgs",
      "repos_url": "https://api.github.com/users/BitcoinStaking/repos",
      "events_url": "https://api.github.com/users/BitcoinStaking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinStaking/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "BitcoinStaking",
      "id": 84234395,
      "node_id": "MDQ6VXNlcjg0MjM0Mzk1",
      "avatar_url": "https://avatars.githubusercontent.com/u/84234395?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/BitcoinStaking",
      "html_url": "https://github.com/BitcoinStaking",
      "followers_url": "https://api.github.com/users/BitcoinStaking/followers",
      "following_url": "https://api.github.com/users/BitcoinStaking/following{/other_user}",
      "gists_url": "https://api.github.com/users/BitcoinStaking/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/BitcoinStaking/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/BitcoinStaking/subscriptions",
      "organizations_url": "https://api.github.com/users/BitcoinStaking/orgs",
      "repos_url": "https://api.github.com/users/BitcoinStaking/repos",
      "events_url": "https://api.github.com/users/BitcoinStaking/events{/privacy}",
      "received_events_url": "https://api.github.com/users/BitcoinStaking/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7efc628539573af4b4a76d93b853cc46e9e52eae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7efc628539573af4b4a76d93b853cc46e9e52eae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7efc628539573af4b4a76d93b853cc46e9e52eae"
      }
    ],
    "stats": {
      "total": 243146,
      "additions": 71592,
      "deletions": 171554
    },
    "files": [
      {
        "sha": "18dc78fe5f2c9a1dfcc2d612c2384c911cc1352c",
        "filename": ".appveyor.yml",
        "status": "added",
        "additions": 92,
        "deletions": 0,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.appveyor.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,92 @@\n+version: '{branch}.{build}'\n+skip_tags: true\n+image: Visual Studio 2019\n+configuration: Release\n+platform: x64\n+clone_depth: 5\n+environment:\n+  APPVEYOR_SAVE_CACHE_ON_ERROR: true\n+  CLCACHE_SERVER: 1\n+  PATH: 'C:\\Python37-x64;C:\\Python37-x64\\Scripts;%PATH%'\n+  PYTHONUTF8: 1\n+  QT_DOWNLOAD_URL: 'https://github.com/sipsorcery/qt_win_binary/releases/download/v1.6/Qt5.9.8_x64_static_vs2019.zip'\n+  QT_DOWNLOAD_HASH: '9a8c6eb20967873785057fdcd329a657c7f922b0af08c5fde105cc597dd37e21'\n+  QT_LOCAL_PATH: 'C:\\Qt5.9.8_x64_static_vs2019'\n+  VCPKG_INSTALL_PATH: 'C:\\tools\\vcpkg\\installed'\n+  VCPKG_COMMIT_ID: 'ed0df8ecc4ed7e755ea03e18aaf285fd9b4b4a74'\n+cache:\n+- C:\\tools\\vcpkg\\installed -> build_msvc\\vcpkg-packages.txt\n+- C:\\Users\\appveyor\\clcache -> .appveyor.yml, build_msvc\\**, **\\Makefile.am, **\\*.vcxproj.in\n+- C:\\Qt5.9.8_x64_static_vs2019\n+install:\n+- cmd: pip install --quiet git+https://github.com/frerich/clcache.git@v4.2.0\n+# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n+# - cmd: pip install zmq\n+# Powershell block below is to install the c++ dependencies via vcpkg. The pseudo code is:\n+# 1. Check whether the vcpkg install directory exists (note that updating the vcpkg-packages.txt file\n+#    will cause the appveyor cache rules to invalidate the directory)\n+# 2. If the directory is missing:\n+#    a. Checkout the vcpkg source (including port files) for the specific checkout and build the vcpkg binary,\n+#    b. Install the missing packages.\n+- ps: |\n+      $env:PACKAGES = Get-Content -Path build_msvc\\vcpkg-packages.txt\n+      Write-Host \"vcpkg list: $env:PACKAGES\"\n+      if(!(Test-Path -Path ($env:VCPKG_INSTALL_PATH))) {\n+          cd c:\\tools\\vcpkg\n+          $env:GIT_REDIRECT_STDERR = '2>&1' # git is writing non-errors to STDERR when doing git pull. Send to STDOUT instead.\n+          git pull origin master\n+          git checkout $env:VCPKG_COMMIT_ID\n+          .\\bootstrap-vcpkg.bat\n+          Add-Content \"C:\\tools\\vcpkg\\triplets\\$env:PLATFORM-windows-static.cmake\" \"set(VCPKG_BUILD_TYPE release)\"\n+          .\\vcpkg install --triplet $env:PLATFORM-windows-static $env:PACKAGES.split() > $null\n+          cd \"$env:APPVEYOR_BUILD_FOLDER\"\n+      }\n+      else {\n+        Write-Host \"required vcpkg packages already installed.\"\n+      }\n+      c:\\tools\\vcpkg\\vcpkg integrate install\n+before_build:\n+- ps:  clcache -M 536870912\n+# Powershell block below is to download and extract the Qt static libraries. The pseudo code is:\n+# 1. If the Qt destination directory exists assume it is correct and do nothing. To\n+#    force a fresh install of the packages delete the job's appveyor cache.\n+# 2. Otherwise:\n+#    a. Download the zip file with the prebuilt Qt static libraries.\n+#    b. Check that the downloaded file matches the expected hash.\n+#    c. Extract the zip file to the specific destination path expected by the msbuild projects.\n+- ps: |\n+      if(!(Test-Path -Path ($env:QT_LOCAL_PATH))) {\n+        Write-Host \"Downloading Qt binaries.\";\n+        Invoke-WebRequest -Uri $env:QT_DOWNLOAD_URL -Out qtdownload.zip;\n+        Write-Host \"Qt binaries successfully downloaded, checking hash against $env:QT_DOWNLOAD_HASH...\";\n+        if((Get-FileHash qtdownload.zip).Hash -eq $env:QT_DOWNLOAD_HASH) {\n+          Expand-Archive qtdownload.zip -DestinationPath $env:QT_LOCAL_PATH;\n+          Write-Host \"Qt binary download matched the expected hash.\";\n+        }\n+        else {\n+          Write-Host \"ERROR: Qt binary download did not match the expected hash.\";\n+          Exit-AppveyorBuild;\n+        }\n+      }\n+      else {\n+         Write-Host \"Qt binaries already present.\";\n+      }\n+- cmd: python build_msvc\\msvc-autogen.py\n+- ps:  Start-Process clcache-server\n+- ps:  fsutil behavior set disablelastaccess 0 # Enable Access time feature on Windows (for clcache)\n+build_script:\n+- cmd: msbuild /p:TrackFileAccess=false /p:CLToolExe=clcache.exe build_msvc\\bitcoin.sln /m /v:q /nologo\n+after_build:\n+- ps:  fsutil behavior set disablelastaccess 1 # Disable Access time feature on Windows (better performance)\n+- ps:  clcache -z\n+#- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n+test_script:\n+- cmd: src\\test_bitcoin.exe -l test_suite\n+- cmd: src\\bench_bitcoin.exe -evals=1 -scaling=0 > NUL\n+- ps:  python test\\util\\bitcoin-util-test.py\n+- cmd: python test\\util\\rpcauth-test.py\n+# Fee estimation test failing on appveyor with: WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted.\n+- cmd: python test\\functional\\test_runner.py --ci --quiet --combinedlogslen=4000 --failfast --exclude feature_fee_estimation\n+artifacts:\n+#- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n+deploy: off"
      },
      {
        "sha": "f9c3d844bef60d82b6b9344037c3577953cfbbbf",
        "filename": ".cirrus.yml",
        "status": "modified",
        "additions": 48,
        "deletions": 305,
        "changes": 353,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.cirrus.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.cirrus.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.cirrus.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,310 +1,53 @@\n-env:  # Global defaults\n-  PACKAGE_MANAGER_INSTALL: \"apt-get update && apt-get install -y\"\n-  MAKEJOBS: \"-j4\"\n-  TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n-  CCACHE_SIZE: \"200M\"\n-  CCACHE_DIR: \"/tmp/ccache_dir\"\n-  CCACHE_NOHASHDIR: \"1\"  # Debug info might contain a stale path if the build dir changes, but this is fine\n-\n-cirrus_ephemeral_worker_template_env: &CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-  DANGER_RUN_CI_ON_HOST: \"1\"  # Containers will be discarded after the run, so there is no risk that the ci scripts modify the system\n-\n-persistent_worker_template_env: &PERSISTENT_WORKER_TEMPLATE_ENV\n-  RESTART_CI_DOCKER_BEFORE_RUN: \"1\"\n-\n-persistent_worker_template: &PERSISTENT_WORKER_TEMPLATE\n-  persistent_worker: {}  # https://cirrus-ci.org/guide/persistent-workers/\n-\n-# https://cirrus-ci.org/guide/tips-and-tricks/#sharing-configuration-between-tasks\n-filter_template: &FILTER_TEMPLATE\n-  skip: $CIRRUS_REPO_FULL_NAME == \"bitcoin-core/gui\" && $CIRRUS_PR == \"\"  # No need to run on the read-only mirror, unless it is a PR. https://cirrus-ci.org/guide/writing-tasks/#conditional-task-execution\n-  stateful: false  # https://cirrus-ci.org/guide/writing-tasks/#stateful-tasks\n-\n-base_template: &BASE_TEMPLATE\n-  << : *FILTER_TEMPLATE\n-  merge_base_script:\n-    # Unconditionally install git (used in fingerprint_script) and set the\n-    # default git author name (used in verify-commits.py)\n-    - bash -c \"$PACKAGE_MANAGER_INSTALL git\"\n-    - git config --global user.email \"ci@ci.ci\"\n-    - git config --global user.name \"ci\"\n-    - if [ \"$CIRRUS_PR\" = \"\" ]; then exit 0; fi\n-    - git fetch $CIRRUS_REPO_CLONE_URL $CIRRUS_BASE_BRANCH\n-    - git merge FETCH_HEAD  # Merge base to detect silent merge conflicts\n-\n-main_template: &MAIN_TEMPLATE\n-  timeout_in: 120m  # https://cirrus-ci.org/faq/#instance-timed-out\n-  container:\n-    # https://cirrus-ci.org/faq/#are-there-any-limits\n-    # Each project has 16 CPU in total, assign 2 to each container, so that 8 tasks run in parallel\n-    cpu: 2\n-    memory: 8G  # Set to 8GB to avoid OOM. https://cirrus-ci.org/guide/linux/#linux-containers\n+task:\n+  name: \"FreeBsd 12.0 amd64  [GOAL: install]  [no depends, only system libs]\"\n+  freebsd_instance:\n+    image: freebsd-12-0-release-amd64\n+    cpu: 8\n+    memory: 8G\n+  timeout_in: 60m\n+  env:\n+    MAKEJOBS: \"-j9\"\n+    CONFIGURE_OPTS: \"--disable-dependency-tracking\"\n+    GOAL: \"install\"\n+    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n+    CCACHE_SIZE: \"200M\"\n+    CCACHE_COMPRESS: 1\n+    CCACHE_DIR: \"/tmp/ccache_dir\"\n+  ccache_cache:\n+    folder: \"/tmp/ccache_dir\"\n+  install_script:\n+    - pkg install -y autoconf automake boost-libs git gmake libevent libtool pkgconf python3 ccache\n+    - ./contrib/install_db4.sh $(pwd)\n+    - ccache --max-size=${CCACHE_SIZE}\n+  configure_script:\n+    - ./autogen.sh\n+    - ./configure ${CONFIGURE_OPTS} BDB_LIBS=\"-L$(pwd)/db4/lib -ldb_cxx-4.8\" BDB_CFLAGS=\"-I$(pwd)/db4/include\" || ( cat config.log && false)\n+  make_script:\n+    - gmake ${MAKEJOBS} ${GOAL} || ( echo \"Build failure. Verbose build follows.\" && gmake ${GOAL} V=1 ; false )\n+  check_script:\n+    - gmake check ${MAKEJOBS} VERBOSE=1\n+  functional_test_script:\n+    - ./test/functional/test_runner.py --jobs 9 --ci --extended --exclude feature_dbcrash --combinedlogslen=1000 --quiet --failfast\n+task:\n+  name: \"x86_64 Linux  [GOAL: install]  [bionic]  [Using ./ci/ system]\"\n+  container:\n+    image: ubuntu:18.04\n+    cpu: 8\n+    memory: 8G\n+  timeout_in: 60m\n+  env:\n+    MAKEJOBS: \"-j9\"\n+    DANGER_RUN_CI_ON_HOST: \"1\"\n+    TEST_RUNNER_PORT_MIN: \"14000\"  # Must be larger than 12321, which is used for the http cache. See https://cirrus-ci.org/guide/writing-tasks/#http-cache\n+    CCACHE_SIZE: \"200M\"\n+    CCACHE_DIR: \"/tmp/ccache_dir\"\n   ccache_cache:\n     folder: \"/tmp/ccache_dir\"\n   depends_built_cache:\n-    folder: \"depends/built\"\n-    fingerprint_script: echo $CIRRUS_TASK_NAME $(git rev-list -1 HEAD ./depends)\n+    folder: \"/tmp/cirrus-ci-build/depends/built\"\n+  install_script:\n+    - apt-get update\n+    - apt-get -y install git bash ccache\n+    - ccache --max-size=${CCACHE_SIZE}\n   ci_script:\n     - ./ci/test_run_all.sh\n-\n-global_task_template: &GLOBAL_TASK_TEMPLATE\n-  << : *BASE_TEMPLATE\n-  << : *MAIN_TEMPLATE\n-\n-depends_sdk_cache_template: &DEPENDS_SDK_CACHE_TEMPLATE\n-  depends_sdk_cache:\n-    folder: \"depends/sdk-sources\"\n-\n-compute_credits_template: &CREDITS_TEMPLATE\n-  # https://cirrus-ci.org/pricing/#compute-credits\n-  # Only use credits for pull requests to the main repo\n-  use_compute_credits: $CIRRUS_REPO_FULL_NAME == 'bitcoin/bitcoin' && $CIRRUS_PR != \"\"\n-\n-task:\n-  name: 'lint [bionic]'\n-  << : *BASE_TEMPLATE\n-  container:\n-    image: ubuntu:bionic  # For python 3.6, oldest supported version according to doc/dependencies.md\n-    cpu: 1\n-    memory: 1G\n-  # For faster CI feedback, immediately schedule the linters\n-  << : *CREDITS_TEMPLATE\n-  lint_script:\n-    - ./ci/lint_run_all.sh\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-\n-task:\n-  name: \"Win64 native [msvc]\"\n-  << : *FILTER_TEMPLATE\n-  windows_container:\n-    cpu: 4\n-    memory: 8G\n-    image: cirrusci/windowsservercore:visualstudio2019\n-  timeout_in: 120m\n-  env:\n-    PATH: 'C:\\jom;C:\\Python39;C:\\Python39\\Scripts;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\MSBuild\\Current\\Bin;%PATH%'\n-    PYTHONUTF8: 1\n-    CI_VCPKG_TAG: '2021.05.12'\n-    VCPKG_DOWNLOADS: 'C:\\Users\\ContainerAdministrator\\AppData\\Local\\vcpkg\\downloads'\n-    VCPKG_DEFAULT_BINARY_CACHE: 'C:\\Users\\ContainerAdministrator\\AppData\\Local\\vcpkg\\archives'\n-    QT_DOWNLOAD_URL: 'https://download.qt.io/official_releases/qt/5.12/5.12.11/single/qt-everywhere-src-5.12.11.zip'\n-    QT_LOCAL_PATH: 'C:\\qt-everywhere-src-5.12.11.zip'\n-    QT_SOURCE_DIR: 'C:\\qt-everywhere-src-5.12.11'\n-    QTBASEDIR: 'C:\\Qt_static'\n-    x64_NATIVE_TOOLS: '\"C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Auxiliary\\Build\\vcvars64.bat\"'\n-    IgnoreWarnIntDirInTempDetected: 'true'\n-  merge_script:\n-    - git config --global user.email \"ci@ci.ci\"\n-    - git config --global user.name \"ci\"\n-    # Windows filesystem loses the executable bit, and all of the executable\n-    # files are considered \"modified\" now. It will break the following `git merge`\n-    # command. The next two commands make git ignore this issue.\n-    - git config core.filemode false\n-    - git reset --hard\n-    - PowerShell -NoLogo -Command if ($env:CIRRUS_PR -ne $null) { git fetch $env:CIRRUS_REPO_CLONE_URL $env:CIRRUS_BASE_BRANCH; git merge FETCH_HEAD; }\n-  msvc_qt_built_cache:\n-    folder: \"%QTBASEDIR%\"\n-    reupload_on_changes: false\n-    fingerprint_script:\n-      - echo %QT_DOWNLOAD_URL%\n-      - msbuild -version\n-    populate_script:\n-      - curl -L -o C:\\jom.zip http://download.qt.io/official_releases/jom/jom.zip\n-      - mkdir C:\\jom\n-      - tar -xf C:\\jom.zip -C C:\\jom\n-      - curl -L -o %QT_LOCAL_PATH% %QT_DOWNLOAD_URL%\n-      - tar -xf %QT_LOCAL_PATH% -C C:\\\n-      - '%x64_NATIVE_TOOLS%'\n-      - cd %QT_SOURCE_DIR%\n-      - mkdir build\n-      - cd build\n-      - ..\\configure -release -silent -opensource -confirm-license -opengl desktop -no-shared -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -no-libjpeg -nomake examples -nomake tests -nomake tools -no-dbus -no-libudev -no-icu -no-gtk -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -no-libudev -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-sql -no-feature-sqlmodel -prefix %QTBASEDIR%\n-      - jom\n-      - jom install\n-  vcpkg_tools_cache:\n-    folder: '%VCPKG_DOWNLOADS%\\tools'\n-    reupload_on_changes: false\n-    fingerprint_script:\n-      - echo %CI_VCPKG_TAG%\n-      - msbuild -version\n-  vcpkg_binary_cache:\n-    folder: '%VCPKG_DEFAULT_BINARY_CACHE%'\n-    reupload_on_changes: true\n-    fingerprint_script:\n-      - echo %CI_VCPKG_TAG%\n-      - msbuild -version\n-    populate_script:\n-      - mkdir %VCPKG_DEFAULT_BINARY_CACHE%\n-  install_python_script:\n-    - choco install --yes --no-progress python3 --version=3.9.6\n-    - pip install zmq\n-    - python -VV\n-  install_vcpkg_script:\n-    - cd ..\n-    - git clone --quiet https://github.com/microsoft/vcpkg.git\n-    - cd vcpkg\n-    - git -c advice.detachedHead=false checkout %CI_VCPKG_TAG%\n-    - .\\bootstrap-vcpkg -disableMetrics\n-    - echo set(VCPKG_BUILD_TYPE release) >> triplets\\x64-windows-static.cmake\n-    - .\\vcpkg integrate install\n-    - .\\vcpkg version\n-  build_script:\n-    - cd %CIRRUS_WORKING_DIR%\n-    - python build_msvc\\msvc-autogen.py\n-    - msbuild build_msvc\\bitcoin.sln -property:Configuration=Release -maxCpuCount -verbosity:minimal -noLogo\n-  unit_tests_script:\n-    - src\\test_bitcoin.exe -l test_suite\n-    - src\\bench_bitcoin.exe > NUL\n-    - python test\\util\\test_runner.py\n-    - python test\\util\\rpcauth-test.py\n-  functional_tests_script:\n-    # Increase the dynamic port range to the maximum allowed value to mitigate \"OSError: [WinError 10048] Only one usage of each socket address (protocol/network address/port) is normally permitted\".\n-    # See: https://docs.microsoft.com/en-us/biztalk/technical-guides/settings-that-can-be-modified-to-improve-network-performance\n-    - netsh int ipv4 set dynamicport tcp start=1025 num=64511\n-    - netsh int ipv6 set dynamicport tcp start=1025 num=64511\n-    # Exclude feature_dbcrash for now due to timeout\n-    - python test\\functional\\test_runner.py --nocleanup --ci --quiet --combinedlogslen=4000 --jobs=4 --timeout-factor=8 --failfast --extended --exclude feature_dbcrash\n-\n-task:\n-  name: 'ARM [unit tests, no functional tests] [bullseye]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  arm_container:\n-    image: debian:bullseye\n-    cpu: 2\n-    memory: 8G\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_arm.sh\"\n-    QEMU_USER_CMD: \"\"  # Disable qemu and run the test natively\n-\n-task:\n-  name: 'Win64 [unit tests, no gui tests, no boost::process, no functional tests] [focal]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_win64.sh\"\n-\n-task:\n-  name: '32-bit + dash [gui] [CentOS 8]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: centos:8\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    PACKAGE_MANAGER_INSTALL: \"yum install -y\"\n-    FILE_ENV: \"./ci/test/00_setup_env_i686_centos.sh\"\n-\n-task:\n-  name: '[previous releases, uses qt5 dev package and some depends packages, DEBUG] [unsigned char] [bionic]'\n-  previous_releases_cache:\n-    folder: \"releases\"\n-  << : *GLOBAL_TASK_TEMPLATE\n-  << : *PERSISTENT_WORKER_TEMPLATE\n-  env:\n-    << : *PERSISTENT_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_native_qt5.sh\"\n-\n-task:\n-  name: '[depends, sanitizers: thread (TSan), no gui] [hirsute]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:hirsute\n-    cpu: 6  # Increase CPU and Memory to avoid timeout\n-    memory: 24G\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    MAKEJOBS: \"-j8\"\n-    FILE_ENV: \"./ci/test/00_setup_env_native_tsan.sh\"\n-\n-task:\n-  name: '[depends, sanitizers: memory (MSan)] [focal]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_native_msan.sh\"\n-\n-task:\n-  name: '[no depends, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer] [hirsute]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:hirsute\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_native_asan.sh\"\n-\n-task:\n-  name: '[no depends, sanitizers: fuzzer,address,undefined,integer] [focal]'\n-  only_if: $CIRRUS_BRANCH == $CIRRUS_DEFAULT_BRANCH || $CIRRUS_BASE_BRANCH == $CIRRUS_DEFAULT_BRANCH\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-    cpu: 4  # Increase CPU and memory to avoid timeout\n-    memory: 16G\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    MAKEJOBS: \"-j8\"\n-    FILE_ENV: \"./ci/test/00_setup_env_native_fuzz.sh\"\n-\n-task:\n-  name: '[multiprocess, i686, DEBUG] [focal]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-    cpu: 4\n-    memory: 16G  # The default memory is sometimes just a bit too small, so double everything\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    MAKEJOBS: \"-j8\"\n-    FILE_ENV: \"./ci/test/00_setup_env_i686_multiprocess.sh\"\n-\n-task:\n-  name: '[no wallet] [bionic]'\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:bionic\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_native_nowallet.sh\"\n-\n-task:\n-  name: 'macOS 10.15 [gui, no tests] [focal]'\n-  << : *DEPENDS_SDK_CACHE_TEMPLATE\n-  << : *GLOBAL_TASK_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_mac.sh\"\n-\n-task:\n-  name: 'macOS 11 native [gui] [no depends]'\n-  brew_install_script:\n-    - brew install boost libevent berkeley-db4 qt@5 miniupnpc libnatpmp ccache zeromq qrencode sqlite libtool automake pkg-config gnu-getopt\n-  << : *GLOBAL_TASK_TEMPLATE\n-  osx_instance:\n-    # Use latest image, but hardcode version to avoid silent upgrades (and breaks)\n-    image: big-sur-xcode-12.5  # https://cirrus-ci.org/guide/macOS\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    CI_USE_APT_INSTALL: \"no\"\n-    PACKAGE_MANAGER_INSTALL: \"echo\"  # Nothing to do\n-    FILE_ENV: \"./ci/test/00_setup_env_mac_host.sh\"\n-\n-task:\n-  name: 'ARM64 Android APK [focal]'\n-  << : *DEPENDS_SDK_CACHE_TEMPLATE\n-  << : *BASE_TEMPLATE\n-  depends_sources_cache:\n-    folder: \"depends/sources\"\n-    fingerprint_script: git rev-list -1 HEAD ./depends\n-  << : *MAIN_TEMPLATE\n-  container:\n-    image: ubuntu:focal\n-  env:\n-    << : *CIRRUS_EPHEMERAL_WORKER_TEMPLATE_ENV\n-    FILE_ENV: \"./ci/test/00_setup_env_android.sh\""
      },
      {
        "sha": "ae7e92d1c8a82be207df3edd31d18ad37a99822c",
        "filename": ".editorconfig",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/.editorconfig",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/.editorconfig",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.editorconfig?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,26 +0,0 @@\n-# This is the top-most EditorConfig file.\n-root = true\n-\n-# For all files.\n-[*]\n-charset = utf-8\n-end_of_line = lf\n-indent_style = space\n-insert_final_newline = true\n-trim_trailing_whitespace = true\n-\n-# Source code files\n-[*.{h,cpp,py,sh}]\n-indent_size = 4\n-\n-# .cirrus.yml, .fuzzbuzz.yml, etc.\n-[*.yml]\n-indent_size = 2\n-\n-# Makefiles\n-[{*.am,Makefile.*.include}]\n-indent_style = tab\n-\n-# Autoconf scripts\n-[configure.ac]\n-indent_size = 2"
      },
      {
        "sha": "35b42424adb3fec05b52b44da20382f0b3abd5dc",
        "filename": ".github/ISSUE_TEMPLATE.md",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/ISSUE_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/ISSUE_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -4,11 +4,7 @@ General bitcoin questions and/or support requests are best directed to the Bitco\n \n For reporting security issues, please read instructions at https://bitcoincore.org/en/contact/.\n \n-If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue!\n-\n-Any report, issue or feature request related to the GUI should be reported at\n-https://github.com/bitcoin-core/gui/issues/\n--->\n+If the node is \"stuck\" during sync or giving \"block checksum mismatch\" errors, please ensure your hardware is stable by running memtest and observe CPU temperature with a load-test tool such as linpack before creating an issue! -->\n \n <!-- Describe the issue -->\n <!--- What behavior did you expect? -->"
      },
      {
        "sha": "c441f7a307a97fb5be00e67267f60f63b51c6a90",
        "filename": ".github/ISSUE_TEMPLATE/good_first_issue.md",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/ISSUE_TEMPLATE/good_first_issue.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/good_first_issue.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -2,21 +2,20 @@\n name: Good first issue\n about: '(Regular devs only): Suggest a new good first issue'\n title: ''\n-labels: ''\n+labels: good first issue\n assignees: ''\n \n ---\n \n-<!-- Needs the label \"good first issue\" assigned manually before or after opening -->\n-\n-<!-- A good first issue is an uncontroversial issue, that has a relatively unique and obvious solution -->\n-\n-<!-- Motivate the issue and explain the solution briefly -->\n \n #### Useful skills:\n \n <!-- (For example, \u201cC++11 std::thread\u201d, \u201cQt5 GUI and async GUI design\u201d or \u201cbasic understanding of Bitcoin mining and the Bitcoin Core RPC interface\u201d.) -->\n \n #### Want to work on this issue?\n \n+The purpose of the `good first issue` label is to highlight which issues are suitable for a new contributor without a deep understanding of the codebase.\n+\n+You do not need to request permission to start working on this. You are encouraged to comment on the issue if you are planning to work on it. This will help other contributors monitor which issues are actively being addressed and is also an effective way to request assistance if and when you need it.\n+\n For guidance on contributing, please read [CONTRIBUTING.md](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md) before opening your pull request."
      },
      {
        "sha": "37acc81e21e6c9e49a89623e016bb6df7002cba6",
        "filename": ".github/ISSUE_TEMPLATE/gui_issue.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/.github/ISSUE_TEMPLATE/gui_issue.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/.github/ISSUE_TEMPLATE/gui_issue.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/ISSUE_TEMPLATE/gui_issue.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,11 +0,0 @@\n----\n-name: An issue or feature request related to the GUI\n-about: Any report, issue or feature request related to the GUI should be reported at https://github.com/bitcoin-core/gui/issues/\n-title: Any report, issue or feature request related to the GUI should be reported at https://github.com/bitcoin-core/gui/issues/\n-labels: GUI\n-assignees: ''\n-\n----\n-\n-Any report, issue or feature request related to the GUI should be reported at\n-https://github.com/bitcoin-core/gui/issues/"
      },
      {
        "sha": "d2c3b233751f8f0c189e143ba2c379cd0c35a631",
        "filename": ".github/PULL_REQUEST_TEMPLATE.md",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/PULL_REQUEST_TEMPLATE.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.github/PULL_REQUEST_TEMPLATE.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.github/PULL_REQUEST_TEMPLATE.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,10 +3,6 @@\n \n Pull requests without a rationale and clear improvement may be closed\n immediately.\n-\n-GUI-related pull requests should be opened against\n-https://github.com/bitcoin-core/gui\n-first. See CONTRIBUTING.md\n -->\n \n <!--"
      },
      {
        "sha": "80989d4cddb5ff67d16ec64acb27e368710c5e25",
        "filename": ".gitignore",
        "status": "modified",
        "additions": 10,
        "deletions": 19,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,14 +3,12 @@\n *.exe\n *.pdb\n src/bitcoin\n-src/bitcoind\n-src/bitcoin-cli\n-src/bitcoin-gui\n-src/bitcoin-node\n-src/bitcoin-tx\n-src/bitcoin-util\n-src/bitcoin-wallet\n-src/test/fuzz/fuzz\n+src/bitcoin-stakingd\n+src/bitcoin-staking-cli\n+src/bitcoin-staking-tx\n+src/bitcoin-staking-wallet\n+src/test/fuzz\n+!src/test/fuzz/*.*\n src/test/test_bitcoin\n src/qt/test/test_bitcoin-qt\n \n@@ -61,7 +59,7 @@ src/qt/bitcoin-qt.includes\n .dirstamp\n .libs\n .*.swp\n-*~\n+*.*~*\n *.bak\n *.rej\n *.orig\n@@ -76,7 +74,6 @@ src/qt/bitcoin-qt.includes\n *.log\n *.trs\n *.dmg\n-*.iso\n \n *.json.h\n *.raw.h\n@@ -93,8 +90,8 @@ src/qt/bitcoin-qt.includes\n *.qm\n Makefile\n !depends/Makefile\n-src/qt/bitcoin-qt\n-Bitcoin-Qt.app\n+src/qt/bitcoin-staking-qt\n+BitcoinS-Qt.app\n background.tiff*\n \n # Qt Creator\n@@ -120,18 +117,14 @@ releases\n /*.info\n test_bitcoin.coverage/\n total.coverage/\n-fuzz.coverage/\n coverage_percent.txt\n-/cov_tool_wrapper.sh\n-qa-assets/\n \n #build tests\n linux-coverage-build\n linux-build\n win32-build\n test/config.ini\n test/cache/*\n-test/.mypy_cache/\n \n !src/leveldb*/Makefile\n \n@@ -144,10 +137,8 @@ contrib/devtools/split-debug.sh\n db4/\n \n # clang-check\n-*.plist\n+#*.plist\n \n osx_volname\n dist/\n *.background.tiff\n-\n-/guix-build-*"
      },
      {
        "sha": "c49282585a030b902316d2b71a73b15b5840aaa2",
        "filename": ".python-version",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1 +1 @@\n-3.6.12\n+3.5.6"
      },
      {
        "sha": "aec1569a5d3427b058bc3ece0856ab7aeff83fb8",
        "filename": ".travis.yml",
        "status": "added",
        "additions": 169,
        "deletions": 0,
        "changes": 169,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,169 @@\n+# The test build matrix (stage: test) is constructed to test a wide range of\n+# configurations, rather than a single pass/fail. This helps to catch build\n+# failures and logic errors that present on platforms other than the ones the\n+# author has tested.\n+#\n+# Some builders use the dependency-generator in `./depends`, rather than using\n+# apt-get to install build dependencies. This guarantees that the tester is\n+# using the same versions as Gitian, so the build results are nearly identical\n+# to what would be found in a final release.\n+#\n+# In order to avoid rebuilding all dependencies for each build, the binaries\n+# are cached and re-used when possible. Changes in the dependency-generator\n+# will trigger cache-invalidation and rebuilds as necessary.\n+#\n+# These caches can be manually removed if necessary. This is one of the very\n+# few manual operations that is possible with Travis, and it can be done by a\n+# Bitcoin Core GitHub member via the Travis web interface [0].\n+#\n+# Travis CI uploads the cache after the script phase of the build [1].\n+# However, the build is terminated without saving the cache if it takes over\n+# 50 minutes [2]. Thus, if we spent too much time in early build stages, fail\n+# with an error and save the cache.\n+#\n+# [0] https://travis-ci.org/bitcoin/bitcoin/caches\n+# [1] https://docs.travis-ci.com/user/caching/#build-phases\n+# [2] https://docs.travis-ci.com/user/customizing-the-build#build-timeouts\n+\n+version: ~> 1.0\n+\n+dist: xenial\n+os: linux\n+language: minimal\n+arch: amd64\n+cache:\n+  ccache: true\n+  directories:\n+    - $TRAVIS_BUILD_DIR/depends/built\n+    - $TRAVIS_BUILD_DIR/depends/sdk-sources\n+    - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n+    - $TRAVIS_BUILD_DIR/releases/$HOST\n+before_cache:\n+  - if [ \"${TRAVIS_OS_NAME}\" = \"osx\" ]; then brew cleanup; fi\n+stages:\n+  - lint\n+  - test\n+env:\n+  global:\n+    - CI_RETRY_EXE=\"travis_retry\"\n+    - CI_WAIT=\"while sleep 500; do echo .; done\"\n+    - CACHE_ERR_MSG=\"Error! Initial build successful, but not enough time remains to run later build stages and tests. See https://docs.travis-ci.com/user/customizing-the-build#build-timeouts . Please manually re-run this job by using the travis restart button. The next run should not time out because the build cache has been saved.\"\n+before_install:\n+  - set -o errexit; source ./ci/test/00_setup_env.sh\n+  - set -o errexit; source ./ci/test/03_before_install.sh\n+install:\n+  - set -o errexit; source ./ci/test/04_install.sh\n+before_script:\n+  - set -o errexit; source ./ci/test/05_before_script.sh\n+script:\n+  - export CONTINUE=1\n+  - if [ $SECONDS -gt 1200 ]; then export CONTINUE=0; fi  # Likely the depends build took very long\n+  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_a.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n+  - if [ $SECONDS -gt 2000 ]; then export CONTINUE=0; fi  # Likely the build took very long; The tests take about 1000s, so we should abort if we have less than 50*60-1000=2000s left\n+  - if [ $TRAVIS_REPO_SLUG = \"bitcoin/bitcoin\" ]; then export CONTINUE=1; fi  # Whitelisted repo (90 minutes build time)\n+  - if [ $CONTINUE = \"1\" ]; then set -o errexit; source ./ci/test/06_script_b.sh; else set +o errexit; echo \"$CACHE_ERR_MSG\"; false; fi\n+after_script:\n+  - echo $TRAVIS_COMMIT_RANGE\n+jobs:\n+  include:\n+\n+    - stage: lint\n+      name: 'lint'\n+      env:\n+      cache: false\n+      language: python\n+      python: '3.5' # Oldest supported version according to doc/dependencies.md\n+      install:\n+        - set -o errexit; source ./ci/lint/04_install.sh\n+      before_script:\n+        - set -o errexit; source ./ci/lint/05_before_script.sh\n+      script:\n+        - set -o errexit; source ./ci/lint/06_script.sh\n+\n+    - stage: test\n+      name: 'ARM  [GOAL: install]  [buster]  [unit tests, functional tests]'\n+      arch: arm64  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_arm.sh\"\n+        QEMU_USER_CMD=\"\"\n+\n+# s390 build was disabled temporarily because of disk space issues on the Travis VM\n+#\n+#    - stage: test\n+#      name: 'S390x  [GOAL: install]  [buster]  [unit tests, functional tests]'\n+#      arch: s390x  # Can disable QEMU_USER_CMD and run the tests natively without qemu\n+#      env: >-\n+#        FILE_ENV=\"./ci/test/00_setup_env_s390x.sh\"\n+#        QEMU_USER_CMD=\"\"\n+\n+    - stage: test\n+      name: 'Win64  [GOAL: deploy]  [unit tests, no gui, no functional tests]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_win64.sh\"\n+\n+    - stage: test\n+      name: '32-bit + dash  [GOAL: install]  [CentOS 7]  [gui]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_i686_centos.sh\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [previous releases, uses qt5 dev package and some depends packages] [unsigned char]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_qt5.sh\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [xenial]  [no depends, only system libs, sanitizers: thread (TSan), no wallet]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_tsan.sh\"\n+        TEST_RUNNER_EXTRA=\"--exclude feature_block\"  # Not enough memory on travis machines\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no depends, only system libs, sanitizers: address/leak (ASan + LSan) + undefined (UBSan) + integer]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_asan.sh\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [focal]  [no depends, only system libs, sanitizers: fuzzer,address,undefined]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_fuzz.sh\"\n+\n+    - stage: test\n+      name: 'x86_64 Linux  [GOAL: install]  [bionic]  [no wallet]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_native_nowallet.sh\"\n+\n+    - stage: test\n+      name: 'macOS 10.12  [GOAL: deploy] [no functional tests]'\n+      env: >-\n+        FILE_ENV=\"./ci/test/00_setup_env_mac.sh\"\n+\n+    - stage: test\n+      name: 'macOS 10.14 native [GOAL: install] [GUI] [no depends]'\n+      os: osx\n+      # Use the most recent version:\n+      # Xcode 11.3.1, macOS 10.14, SDK 10.15\n+      # https://docs.travis-ci.com/user/reference/osx/#macos-version\n+      osx_image: xcode11.3\n+      cache:\n+        directories:\n+          - $TRAVIS_BUILD_DIR/ci/scratch/.ccache\n+          - $TRAVIS_BUILD_DIR/releases/$HOST\n+          - $HOME/Library/Caches/Homebrew\n+          - /usr/local/Homebrew\n+      addons:\n+        homebrew:\n+          packages:\n+          - libtool\n+          - berkeley-db4\n+          - boost\n+          - miniupnpc\n+          - qt\n+          - qrencode\n+          - python3\n+          - ccache\n+          - zeromq\n+      env: >-\n+        DANGER_RUN_CI_ON_HOST=true\n+        CI_USE_APT_INSTALL=no\n+        FILE_ENV=\"./ci/test/00_setup_env_mac_host.sh\""
      },
      {
        "sha": "cd9e237158bc91391db65221aa794d0bab450c04",
        "filename": ".tx/config",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.tx/config",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/.tx/config",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.tx/config?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,7 +1,7 @@\n [main]\n host = https://www.transifex.com\n \n-[bitcoin.qt-translation-022x]\n-file_filter = src/qt/locale/bitcoin_<lang>.xlf\n-source_file = src/qt/locale/bitcoin_en.xlf\n+[bitcoin.qt-translation-020x]\n+file_filter = src/qt/locale/bitcoin_<lang>.ts\n+source_file = src/qt/locale/bitcoin_en.ts\n source_lang = en"
      },
      {
        "sha": "7216db0500124f02f2477aab6e1b307ce0685fc2",
        "filename": "CONTRIBUTING.md",
        "status": "modified",
        "additions": 58,
        "deletions": 132,
        "changes": 190,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/CONTRIBUTING.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/CONTRIBUTING.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/CONTRIBUTING.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -6,117 +6,57 @@ welcome to contribute towards development in the form of peer review, testing\n and patches. This document explains the practical process and guidelines for\n contributing.\n \n-First, in terms of structure, there is no particular concept of \"Bitcoin Core\n+Firstly in terms of structure, there is no particular concept of \"Core\n developers\" in the sense of privileged people. Open source often naturally\n-revolves around a meritocracy where contributors earn trust from the developer\n-community over time. Nevertheless, some hierarchy is necessary for practical\n-purposes. As such, there are repository \"maintainers\" who are responsible for\n-merging pull requests, as well as a \"lead maintainer\" who is responsible for the\n-release cycle as well as overall merging, moderation and appointment of\n-maintainers.\n+revolves around meritocracy where longer term contributors gain more trust from\n+the developer community. However, some hierarchy is necessary for practical\n+purposes. As such there are repository \"maintainers\" who are responsible for\n+merging pull requests as well as a \"lead maintainer\" who is responsible for the\n+release cycle, overall merging, moderation and appointment of maintainers.\n \n-Getting Started\n----------------\n-\n-New contributors are very welcome and needed.\n-\n-Reviewing and testing is highly valued and the most effective way you can contribute\n-as a new contributor. It also will teach you much more about the code and\n-process than opening pull requests. Please refer to the [peer review](#peer-review)\n-section below.\n-\n-Before you start contributing, familiarize yourself with the Bitcoin Core build\n-system and tests. Refer to the documentation in the repository on how to build\n-Bitcoin Core and how to run the unit tests, functional tests, and fuzz tests.\n-\n-There are many open issues of varying difficulty waiting to be fixed.\n If you're looking for somewhere to start contributing, check out the\n [good first issue](https://github.com/bitcoin/bitcoin/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22)\n-list or changes that are\n-[up for grabs](https://github.com/bitcoin/bitcoin/issues?utf8=%E2%9C%93&q=label%3A%22Up+for+grabs%22).\n-Some of them might no longer be applicable. So if you are interested, but\n-unsure, you might want to leave a comment on the issue first.\n-\n-You may also participate in the weekly\n-[Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n-\n-### Good First Issue Label\n-\n-The purpose of the `good first issue` label is to highlight which issues are\n-suitable for a new contributor without a deep understanding of the codebase.\n-\n-However, good first issues can be solved by anyone. If they remain unsolved\n-for a longer time, a frequent contributor might address them.\n-\n-You do not need to request permission to start working on an issue. However,\n-you are encouraged to leave a comment if you are planning to work on it. This\n-will help other contributors monitor which issues are actively being addressed\n-and is also an effective way to request assistance if and when you need it.\n+list or participate in a weekly [Bitcoin Core PR Review Club](https://bitcoincore.reviews/) meeting.\n \n Communication Channels\n ----------------------\n \n Most communication about Bitcoin Core development happens on IRC, in the\n-`#bitcoin-core-dev` channel on Libera Chat. The easiest way to participate on IRC is\n-with the web client, [web.libera.chat](https://web.libera.chat/#bitcoin-core-dev). Chat\n+#bitcoin-core-dev channel on Freenode. The easiest way to participate on IRC is\n+with the web client, [webchat.freenode.net](https://webchat.freenode.net/). Chat\n history logs can be found\n-on [https://www.erisian.com.au/bitcoin-core-dev/](https://www.erisian.com.au/bitcoin-core-dev/)\n-and [https://gnusha.org/bitcoin-core-dev/](https://gnusha.org/bitcoin-core-dev/).\n+on [http://www.erisian.com.au/bitcoin-core-dev/](http://www.erisian.com.au/bitcoin-core-dev/)\n+and [http://gnusha.org/bitcoin-core-dev/](http://gnusha.org/bitcoin-core-dev/).\n \n-Discussion about codebase improvements happens in GitHub issues and pull\n+Discussion about code base improvements happens in GitHub issues and on pull\n requests.\n \n The developer\n [mailing list](https://lists.linuxfoundation.org/mailman/listinfo/bitcoin-dev)\n-should be used to discuss complicated or controversial consensus or P2P protocol changes before working on\n+should be used to discuss complicated or controversial changes before working on\n a patch set.\n \n \n Contributor Workflow\n --------------------\n \n The codebase is maintained using the \"contributor workflow\" where everyone\n-without exception contributes patch proposals using \"pull requests\" (PRs). This\n+without exception contributes patch proposals using \"pull requests\". This\n facilitates social contribution, easy testing and peer review.\n \n To contribute a patch, the workflow is as follows:\n \n-  1. Fork repository ([only for the first time](https://docs.github.com/en/get-started/quickstart/fork-a-repo))\n+  1. Fork repository ([only for the first time](https://help.github.com/en/articles/fork-a-repo))\n   1. Create topic branch\n   1. Commit patches\n \n-For GUI-related issues or pull requests, the https://github.com/bitcoin-core/gui repository should be used.\n-For all other issues and pull requests, the https://github.com/bitcoin/bitcoin node repository should be used.\n-\n-The master branch for all monotree repositories is identical.\n-\n-As a rule of thumb, everything that only modifies `src/qt` is a GUI-only pull\n-request. However:\n-\n-* For global refactoring or other transversal changes the node repository\n-  should be used.\n-* For GUI-related build system changes, the node repository should be used\n-  because the change needs review by the build systems reviewers.\n-* Changes in `src/interfaces` need to go to the node repository because they\n-  might affect other components like the wallet.\n-\n-For large GUI changes that include build system and interface changes, it is\n-recommended to first open a pull request against the GUI repository. When there\n-is agreement to proceed with the changes, a pull request with the build system\n-and interfaces changes can be submitted to the node repository.\n-\n The project coding conventions in the [developer notes](doc/developer-notes.md)\n must be followed.\n \n-### Committing Patches\n-\n In general, [commits should be atomic](https://en.wikipedia.org/wiki/Atomic_commit#Atomic_commit_convention)\n and diffs should be easy to read. For this reason, do not mix any formatting\n fixes or code moves with actual code changes.\n \n-Make sure each individual commit is hygienic: that it builds successfully on its\n-own without warnings, errors, regressions, or test failures.\n-\n Commit messages should be verbose by default consisting of a short subject line\n (50 chars max), a blank line and detailed explanatory text as separate\n paragraph(s), unless the title alone is self-explanatory (like \"Corrected typo\n@@ -128,16 +68,14 @@ If a particular commit references another issue, please add the reference. For\n example: `refs #1234` or `fixes #4321`. Using the `fixes` or `closes` keywords\n will cause the corresponding issue to be closed when the pull request is merged.\n \n-Commit messages should never contain any `@` mentions (usernames prefixed with \"@\").\n+Commit messages should never contain any `@` mentions.\n \n Please refer to the [Git manual](https://git-scm.com/doc) for more information\n about Git.\n \n   - Push changes to your fork\n   - Create pull request\n \n-### Creating the Pull Request\n-\n The title of the pull request should be prefixed by the component or area that\n the pull request affects. Valid areas as:\n \n@@ -158,34 +96,22 @@ the pull request affects. Valid areas as:\n Examples:\n \n     consensus: Add new opcode for BIP-XXXX OP_CHECKAWESOMESIG\n-    net: Automatically create onion service, listen on Tor\n+    net: Automatically create hidden service, listen on Tor\n     qt: Add feed bump button\n     log: Fix typo in log message\n \n-The body of the pull request should contain sufficient description of *what* the\n-patch does, and even more importantly, *why*, with justification and reasoning.\n-You should include references to any discussions (for example, other issues or\n-mailing list discussions).\n-\n-The description for a new pull request should not contain any `@` mentions. The\n-PR description will be included in the commit message when the PR is merged and\n-any users mentioned in the description will be annoyingly notified each time a\n-fork of Bitcoin Core copies the merge. Instead, make any username mentions in a\n-subsequent comment to the PR.\n-\n-### Translation changes\n-\n Note that translations should not be submitted as pull requests. Please see\n [Translation Process](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md)\n for more information on helping with translations.\n \n-### Work in Progress Changes and Requests for Comments\n-\n If a pull request is not to be considered for merging (yet), please\n-prefix the title with [WIP] or use [Tasks Lists](https://docs.github.com/en/github/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#task-lists)\n+prefix the title with [WIP] or use [Tasks Lists](https://help.github.com/articles/basic-writing-and-formatting-syntax/#task-lists)\n in the body of the pull request to indicate tasks are pending.\n \n-### Address Feedback\n+The body of the pull request should contain enough description about what the\n+patch does together with any justification/reasoning. You should include\n+references to any discussions (for example other tickets or mailing list\n+discussions).\n \n At this stage, one should expect comments and review from other contributors. You\n can add more commits to your pull request by committing them locally and pushing\n@@ -197,7 +123,7 @@ Note: Code review is a burdensome but important part of the development process,\n \n If your pull request contains fixup commits (commits that change the same line of code repeatedly) or too fine-grained\n commits, you may be asked to [squash](https://git-scm.com/docs/git-rebase#_interactive_mode) your commits\n-before it will be reviewed. The basic squashing workflow is shown below.\n+before it will be merged. The basic squashing workflow is shown below.\n \n     git checkout your_branch_name\n     git rebase -i HEAD~n\n@@ -207,13 +133,13 @@ before it will be reviewed. The basic squashing workflow is shown below.\n     # Save and quit.\n     git push -f # (force push to GitHub)\n \n-Please update the resulting commit message, if needed. It should read as a\n-coherent message. In most cases, this means not just listing the interim\n-commits.\n+Please update the resulting commit message if needed. It should read as a\n+coherent message. In most cases, this means that you should not just list the\n+interim commits.\n \n-If you have problems with squashing or other git workflows, you can enable\n-\"Allow edits from maintainers\" in the right-hand sidebar of the GitHub web\n-interface and ask for help in the pull request.\n+If you have problems with squashing (or other workflows with `git`), you can\n+alternatively enable \"Allow edits from maintainers\" in the right GitHub\n+sidebar and ask for help in the pull request.\n \n Please refrain from creating several pull requests for the same change.\n Use the pull request that is already open (or was created earlier) to amend\n@@ -297,8 +223,8 @@ In general, all pull requests must:\n \n   - Have a clear use case, fix a demonstrable bug or serve the greater good of\n     the project (for example refactoring for modularisation);\n-  - Be well peer-reviewed;\n-  - Have unit tests, functional tests, and fuzz tests, where appropriate;\n+  - Be well peer reviewed;\n+  - Have unit tests and functional tests where appropriate;\n   - Follow code style guidelines ([C++](doc/developer-notes.md), [functional tests](test/functional/README.md));\n   - Not break the existing test suite;\n   - Where bugs are fixed, where possible, there should be unit tests\n@@ -325,7 +251,7 @@ spread out over GitHub, mailing list and IRC discussions).\n #### Conceptual Review\n \n A review can be a conceptual review, where the reviewer leaves a comment\n- * `Concept (N)ACK`, meaning \"I do (not) agree with the general goal of this pull\n+ * `Concept (N)ACK`, meaning \"I do (not) agree in the general goal of this pull\n    request\",\n  * `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\n    approach of this change\".\n@@ -335,28 +261,30 @@ NACKs without accompanying reasoning may be disregarded.\n \n #### Code Review\n \n-After conceptual agreement on the change, code review can be provided. A review\n-begins with `ACK BRANCH_COMMIT`, where `BRANCH_COMMIT` is the top of the PR\n-branch, followed by a description of how the reviewer did the review. The\n-following language is used within pull request comments:\n+After conceptual agreement on the change, code review can be provided. It is\n+starting with `ACK BRANCH_COMMIT`, where `BRANCH_COMMIT` is the top of the\n+topic branch. The review is followed by a description of how the reviewer did\n+the review. The following\n+language is used within pull-request comments:\n \n-  - \"I have tested the code\", involving change-specific manual testing in\n-    addition to running the unit, functional, or fuzz tests, and in case it is\n-    not obvious how the manual testing was done, it should be described;\n+  - \"I have tested the code\", involving\n+    change-specific manual testing in addition to running the unit and functional\n+    tests, and in case it is not obvious how the manual testing was done, it should\n+    be described;\n   - \"I have not tested the code, but I have reviewed it and it looks\n     OK, I agree it can be merged\";\n-  - A \"nit\" refers to a trivial, often non-blocking issue.\n+  - Nit refers to trivial, often non-blocking issues.\n \n Project maintainers reserve the right to weigh the opinions of peer reviewers\n-using common sense judgement and may also weigh based on merit. Reviewers that\n-have demonstrated a deeper commitment and understanding of the project over time\n-or who have clear domain expertise may naturally have more weight, as one would\n-expect in all walks of life.\n+using common sense judgement and also may weight based on meritocracy: Those\n+that have demonstrated a deeper commitment and understanding towards the project\n+(over time) or have clear domain expertise may naturally have more weight, as\n+one would expect in all walks of life.\n \n-Where a patch set affects consensus-critical code, the bar will be much\n+Where a patch set affects consensus critical code, the bar will be set much\n higher in terms of discussion and peer review requirements, keeping in mind that\n mistakes could be very costly to the wider community. This includes refactoring\n-of consensus-critical code.\n+of consensus critical code.\n \n Where a patch set proposes to change the Bitcoin consensus, it must have been\n discussed extensively on the mailing list and IRC, be accompanied by a widely\n@@ -373,7 +301,7 @@ about:\n \n   - It may be because of a feature freeze due to an upcoming release. During this time,\n     only bug fixes are taken into consideration. If your pull request is a new feature,\n-    it will not be prioritized until after the release. Wait for the release.\n+    it will not be prioritized until the release is over. Wait for release.\n   - It may be because the changes you are suggesting do not appeal to people. Rather than\n     nits and critique, which require effort and means they care enough to spend time on your\n     contribution, thundering silence is a good sign of widespread (mild) dislike of a given change\n@@ -383,18 +311,16 @@ about:\n     [developer notes](doc/developer-notes.md), is dangerous or insecure, is messily written, etc.\n     Identify and address any of the issues you find. Then ask e.g. on IRC if someone could give\n     their opinion on the concept itself.\n-  - It may be because your code is too complex for all but a few people, and those people\n+  - It may be because your code is too complex for all but a few people. And those people\n     may not have realized your pull request even exists. A great way to find people who\n     are qualified and care about the code you are touching is the\n-    [Git Blame feature](https://docs.github.com/en/github/managing-files-in-a-repository/managing-files-on-github/tracking-changes-in-a-file). Simply\n-    look up who last modified the code you are changing and see if you can find\n-    them and give them a nudge. Don't be incessant about the nudging, though.\n+    [Git Blame feature](https://help.github.com/articles/tracing-changes-in-a-file/). Simply\n+    find the person touching the code you are touching before you and see if you can find\n+    them and give them a nudge. Don't be incessant about the nudging though.\n   - Finally, if all else fails, ask on IRC or elsewhere for someone to give your pull request\n-    a look. If you think you've been waiting for an unreasonably long time (say,\n-    more than a month) for no particular reason (a few lines changed, etc.),\n-    this is totally fine. Try to return the favor when someone else is asking\n-    for feedback on their code, and the universe balances out.\n-  - Remember that the best thing you can do while waiting is give review to others!\n+    a look. If you think you've been waiting an unreasonably long amount of time (month+) for\n+    no particular reason (few lines changed, etc), this is totally fine. Try to return the favor\n+    when someone else is asking for feedback on their code, and universe balances out.\n \n \n Backporting\n@@ -403,11 +329,11 @@ Backporting\n Security and bug fixes can be backported from `master` to release\n branches.\n If the backport is non-trivial, it may be appropriate to open an\n-additional PR to backport the change, but only after the original PR\n+additional PR, to backport the change, only after the original PR\n has been merged.\n Otherwise, backports will be done in batches and\n the maintainers will use the proper `Needs backport (...)` labels\n-when needed (the original author does not need to worry about it).\n+when needed (the original author does not need to worry).\n \n A backport should contain the following metadata in the commit body:\n "
      },
      {
        "sha": "461bc7310041c45132d6354aa2d87f23ac7a2faf",
        "filename": "COPYING",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,7 +1,7 @@\n The MIT License (MIT)\n \n-Copyright (c) 2009-2021 The Bitcoin Core developers\n-Copyright (c) 2009-2021 Bitcoin Developers\n+Copyright (c) 2009-2020 The Bitcoin Core developers\n+Copyright (c) 2009-2020 Bitcoin Developers\n \n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal"
      },
      {
        "sha": "520a47d96078dfa80cec83d03146c9349d6369c1",
        "filename": "INSTALL.md",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/INSTALL.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1 +1,5 @@\n-See [doc/build-\\*.md](/doc)\n\\ No newline at end of file\n+Building Bitcoin\n+================\n+\n+See doc/build-*.md for instructions on building the various\n+elements of the Bitcoin Core reference implementation of Bitcoin."
      },
      {
        "sha": "d864f400ae7c30b995bc4c7282daf05a0130cafb",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 34,
        "deletions": 69,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,16 +3,15 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Pattern rule to print variables, e.g. make print-top_srcdir\n-print-%: FORCE\n-\t@echo '$*'='$($*)'\n+print-%:\n+\t@echo $* = $($*)\n \n ACLOCAL_AMFLAGS = -I build-aux/m4\n SUBDIRS = src\n if ENABLE_MAN\n SUBDIRS += doc/man\n endif\n .PHONY: deploy FORCE\n-.INTERMEDIATE: $(OSX_TEMP_ISO) $(COVERAGE_INFO)\n \n export PYTHONPATH\n \n@@ -25,30 +24,26 @@ BITCOIND_BIN=$(top_builddir)/src/$(BITCOIN_DAEMON_NAME)$(EXEEXT)\n BITCOIN_QT_BIN=$(top_builddir)/src/qt/$(BITCOIN_GUI_NAME)$(EXEEXT)\n BITCOIN_CLI_BIN=$(top_builddir)/src/$(BITCOIN_CLI_NAME)$(EXEEXT)\n BITCOIN_TX_BIN=$(top_builddir)/src/$(BITCOIN_TX_NAME)$(EXEEXT)\n-BITCOIN_UTIL_BIN=$(top_builddir)/src/$(BITCOIN_UTIL_NAME)$(EXEEXT)\n BITCOIN_WALLET_BIN=$(top_builddir)/src/$(BITCOIN_WALLET_TOOL_NAME)$(EXEEXT)\n-BITCOIN_NODE_BIN=$(top_builddir)/src/$(BITCOIN_MP_NODE_NAME)$(EXEEXT)\n-BITCOIN_GUI_BIN=$(top_builddir)/src/$(BITCOIN_MP_GUI_NAME)$(EXEEXT)\n BITCOIN_WIN_INSTALLER=$(PACKAGE)-$(PACKAGE_VERSION)-win64-setup$(EXEEXT)\n \n empty :=\n space := $(empty) $(empty)\n \n-OSX_APP=Bitcoin-Qt.app\n+OSX_APP=Bitcoin-Staking-Qt.app\n OSX_VOLNAME = $(subst $(space),-,$(PACKAGE_NAME))\n OSX_DMG = $(OSX_VOLNAME).dmg\n-OSX_TEMP_ISO = $(OSX_DMG:.dmg=).temp.iso\n OSX_BACKGROUND_SVG=background.svg\n OSX_BACKGROUND_IMAGE=background.tiff\n OSX_BACKGROUND_IMAGE_DPIS=36 72\n+OSX_DSSTORE_GEN=$(top_srcdir)/contrib/macdeploy/custom_dsstore.py\n OSX_DEPLOY_SCRIPT=$(top_srcdir)/contrib/macdeploy/macdeployqtplus\n+OSX_FANCY_PLIST=$(top_srcdir)/contrib/macdeploy/fancy.plist\n OSX_INSTALLER_ICONS=$(top_srcdir)/src/qt/res/icons/bitcoin.icns\n OSX_PLIST=$(top_builddir)/share/qt/Info.plist #not installed\n+OSX_QT_TRANSLATIONS = da,de,es,hu,ru,uk,zh_CN,zh_TW\n \n DIST_CONTRIB = \\\n-\t       $(top_srcdir)/test/sanitizer_suppressions/lsan \\\n-\t       $(top_srcdir)/test/sanitizer_suppressions/tsan \\\n-\t       $(top_srcdir)/test/sanitizer_suppressions/ubsan \\\n \t       $(top_srcdir)/contrib/linearize/linearize-data.py \\\n \t       $(top_srcdir)/contrib/linearize/linearize-hashes.py\n \n@@ -57,44 +52,38 @@ DIST_SHARE = \\\n   $(top_srcdir)/share/rpcauth\n \n BIN_CHECKS=$(top_srcdir)/contrib/devtools/symbol-check.py \\\n-           $(top_srcdir)/contrib/devtools/security-check.py \\\n-           $(top_srcdir)/contrib/devtools/utils.py\n+           $(top_srcdir)/contrib/devtools/security-check.py\n \n WINDOWS_PACKAGING = $(top_srcdir)/share/pixmaps/bitcoin.ico \\\n   $(top_srcdir)/share/pixmaps/nsis-header.bmp \\\n   $(top_srcdir)/share/pixmaps/nsis-wizard.bmp \\\n   $(top_srcdir)/doc/README_windows.txt\n \n-OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_INSTALLER_ICONS) \\\n+OSX_PACKAGING = $(OSX_DEPLOY_SCRIPT) $(OSX_FANCY_PLIST) $(OSX_INSTALLER_ICONS) \\\n   $(top_srcdir)/contrib/macdeploy/$(OSX_BACKGROUND_SVG) \\\n+  $(OSX_DSSTORE_GEN) \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-apply.sh \\\n   $(top_srcdir)/contrib/macdeploy/detached-sig-create.sh\n \n-COVERAGE_INFO = $(COV_TOOL_WRAPPER) baseline.info \\\n+COVERAGE_INFO = baseline.info \\\n   test_bitcoin_filtered.info total_coverage.info \\\n   baseline_filtered.info functional_test.info functional_test_filtered.info \\\n-  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_filtered.info fuzz_coverage.info\n+  test_bitcoin_coverage.info test_bitcoin.info fuzz.info fuzz_coverage.info\n \n dist-hook:\n \t-$(GIT) archive --format=tar HEAD -- src/clientversion.cpp | $(AMTAR) -C $(top_distdir) -xf -\n \n-if TARGET_WINDOWS\n $(BITCOIN_WIN_INSTALLER): all-recursive\n \t$(MKDIR_P) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIND_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_QT_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_CLI_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_TX_BIN) $(top_builddir)/release\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_WALLET_BIN) $(top_builddir)/release\n-\tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM) $(BITCOIN_UTIL_BIN) $(top_builddir)/release\n-\t@test -f $(MAKENSIS) && echo 'OutFile \"$@\"' | cat $(top_builddir)/share/setup.nsi - | $(MAKENSIS) -V2 - || \\\n+\t@test -f $(MAKENSIS) && $(MAKENSIS) -V2 $(top_builddir)/share/setup.nsi || \\\n \t  echo error: could not build $@\n \t@echo built $@\n \n-deploy: $(BITCOIN_WIN_INSTALLER)\n-endif\n-\n-if TARGET_DARWIN\n $(OSX_APP)/Contents/PkgInfo:\n \t$(MKDIR_P) $(@D)\n \t@echo \"APPL????\" > $@\n@@ -111,7 +100,7 @@ $(OSX_APP)/Contents/Resources/bitcoin.icns: $(OSX_INSTALLER_ICONS)\n \t$(MKDIR_P) $(@D)\n \t$(INSTALL_DATA) $< $@\n \n-$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: all-recursive\n+$(OSX_APP)/Contents/MacOS/Bitcoin-Staking-Qt: all-recursive\n \t$(MKDIR_P) $(@D)\n \tSTRIPPROG=\"$(STRIP)\" $(INSTALL_STRIP_PROGRAM)  $(BITCOIN_QT_BIN) $@\n \n@@ -121,14 +110,14 @@ $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings:\n \n OSX_APP_BUILT=$(OSX_APP)/Contents/PkgInfo $(OSX_APP)/Contents/Resources/empty.lproj \\\n   $(OSX_APP)/Contents/Resources/bitcoin.icns $(OSX_APP)/Contents/Info.plist \\\n-  $(OSX_APP)/Contents/MacOS/Bitcoin-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n+  $(OSX_APP)/Contents/MacOS/Bitcoin-Staking-Qt $(OSX_APP)/Contents/Resources/Base.lproj/InfoPlist.strings\n \n osx_volname:\n \techo $(OSX_VOLNAME) >$@\n \n if BUILD_DARWIN\n $(OSX_DMG): $(OSX_APP_BUILT) $(OSX_PACKAGING) $(OSX_BACKGROUND_IMAGE)\n-\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR) -dmg\n+\t$(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -add-qt-tr $(OSX_QT_TRANSLATIONS) -translations-dir=$(QT_TRANSLATION_DIR) -dmg -fancy $(OSX_FANCY_PLIST) -verbose 2 -volname $(OSX_VOLNAME)\n \n $(OSX_BACKGROUND_IMAGE).png: contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d 36 -p 36 -o $@\n@@ -138,21 +127,18 @@ $(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE).png $(OSX_BACKGROUND_IMAGE)@2x.\n \ttiffutil -cathidpicheck $^ -out $@\n \n deploydir: $(OSX_DMG)\n-else !BUILD_DARWIN\n+else\n APP_DIST_DIR=$(top_builddir)/dist\n APP_DIST_EXTRAS=$(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE) $(APP_DIST_DIR)/.DS_Store $(APP_DIST_DIR)/Applications\n \n $(APP_DIST_DIR)/Applications:\n \t@rm -f $@\n \t@cd $(@D); $(LN_S) /Applications $(@F)\n \n-$(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt\n-\n-$(OSX_TEMP_ISO): $(APP_DIST_EXTRAS)\n-\t$(XORRISOFS) -D -l -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -o $@ $(APP_DIST_DIR) -- $(if $(SOURCE_DATE_EPOCH),-volume_date all_file_dates =$(SOURCE_DATE_EPOCH))\n+$(APP_DIST_EXTRAS): $(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Staking-Qt\n \n-$(OSX_DMG): $(OSX_TEMP_ISO)\n-\t$(DMG) dmg \"$<\" \"$@\"\n+$(OSX_DMG): $(APP_DIST_EXTRAS)\n+\t$(GENISOIMAGE) -no-cache-inodes -D -l -probe -V \"$(OSX_VOLNAME)\" -no-pad -r -dir-mode 0755 -apple -o $@ dist\n \n dpi%.$(OSX_BACKGROUND_IMAGE): contrib/macdeploy/$(OSX_BACKGROUND_SVG)\n \tsed 's/PACKAGE_NAME/$(PACKAGE_NAME)/' < \"$<\" | $(RSVG_CONVERT) -f png -d $* -p $* | $(IMAGEMAGICK_CONVERT) - $@\n@@ -161,15 +147,22 @@ $(APP_DIST_DIR)/.background/$(OSX_BACKGROUND_IMAGE): $(OSX_BACKGROUND_IMAGE_DPIF\n \t$(MKDIR_P) $(@D)\n \t$(TIFFCP) -c none $(OSX_BACKGROUND_IMAGE_DPIFILES) $@\n \n-$(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n-\tINSTALLNAMETOOL=$(INSTALLNAMETOOL) OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) $(OSX_VOLNAME) -translations-dir=$(QT_TRANSLATION_DIR)\n+$(APP_DIST_DIR)/.DS_Store: $(OSX_DSSTORE_GEN)\n+\t$(PYTHON) $< \"$@\" \"$(OSX_VOLNAME)\"\n+\n+$(APP_DIST_DIR)/$(OSX_APP)/Contents/MacOS/Bitcoin-Staking-Qt: $(OSX_APP_BUILT) $(OSX_PACKAGING)\n+\tINSTALLNAMETOOL=$(INSTALLNAMETOOL)  OTOOL=$(OTOOL) STRIP=$(STRIP) $(PYTHON) $(OSX_DEPLOY_SCRIPT) $(OSX_APP) -translations-dir=$(QT_TRANSLATION_DIR) -add-qt-tr $(OSX_QT_TRANSLATIONS) -verbose 2\n \n deploydir: $(APP_DIST_EXTRAS)\n-endif !BUILD_DARWIN\n+endif\n \n+if TARGET_DARWIN\n appbundle: $(OSX_APP_BUILT)\n deploy: $(OSX_DMG)\n endif\n+if TARGET_WINDOWS\n+deploy: $(BITCOIN_WIN_INSTALLER)\n+endif\n \n $(BITCOIN_QT_BIN): FORCE\n \t$(MAKE) -C src qt/$(@F)\n@@ -183,21 +176,11 @@ $(BITCOIN_CLI_BIN): FORCE\n $(BITCOIN_TX_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n-$(BITCOIN_UTIL_BIN): FORCE\n-\t$(MAKE) -C src $(@F)\n-\n $(BITCOIN_WALLET_BIN): FORCE\n \t$(MAKE) -C src $(@F)\n \n-$(BITCOIN_NODE_BIN): FORCE\n-\t$(MAKE) -C src $(@F)\n-\n-$(BITCOIN_GUI_BIN): FORCE\n-\t$(MAKE) -C src $(@F)\n-\n if USE_LCOV\n LCOV_FILTER_PATTERN = \\\n-\t-p \"/usr/local/\" \\\n \t-p \"/usr/include/\" \\\n \t-p \"/usr/lib/\" \\\n \t-p \"/usr/lib64/\" \\\n@@ -209,21 +192,15 @@ LCOV_FILTER_PATTERN = \\\n \t-p \"src/secp256k1\" \\\n \t-p \"depends\"\n \n-DIR_FUZZ_SEED_CORPUS ?= qa-assets/fuzz_seed_corpus\n-\n-$(COV_TOOL_WRAPPER):\n-\t@echo 'exec $(COV_TOOL) \"$$@\"' > $(COV_TOOL_WRAPPER)\n-\t@chmod +x $(COV_TOOL_WRAPPER)\n-\n-baseline.info: $(COV_TOOL_WRAPPER)\n+baseline.info:\n \t$(LCOV) -c -i -d $(abs_builddir)/src -o $@\n \n baseline_filtered.info: baseline.info\n \t$(abs_builddir)/contrib/filter-lcov.py $(LCOV_FILTER_PATTERN) $< $@\n \t$(LCOV) -a $@ $(LCOV_OPTS) -o $@\n \n fuzz.info: baseline_filtered.info\n-\t@TIMEOUT=15 test/fuzz/test_runner.py $(DIR_FUZZ_SEED_CORPUS) -l DEBUG\n+\t@TIMEOUT=15 test/fuzz/test_runner.py qa-assets/fuzz_seed_corpus -l DEBUG\n \t$(LCOV) -c $(LCOV_OPTS) -d $(abs_builddir)/src --t fuzz-tests -o $@\n \t$(LCOV) -z $(LCOV_OPTS) -d $(abs_builddir)/src\n \n@@ -285,7 +262,7 @@ EXTRA_DIST += \\\n     test/fuzz\n \n EXTRA_DIST += \\\n-    test/util/test_runner.py \\\n+    test/util/bitcoin-util-test.py \\\n     test/util/data/bitcoin-util-test.json \\\n     test/util/data/blanktxv1.hex \\\n     test/util/data/blanktxv1.json \\\n@@ -342,6 +319,8 @@ EXTRA_DIST += \\\n \n CLEANFILES = $(OSX_DMG) $(BITCOIN_WIN_INSTALLER)\n \n+.INTERMEDIATE: $(COVERAGE_INFO)\n+\n DISTCHECK_CONFIGURE_FLAGS = --enable-man\n \n doc/doxygen/.stamp: doc/Doxyfile FORCE\n@@ -363,17 +342,3 @@ clean-local: clean-docs\n \trm -rf coverage_percent.txt test_bitcoin.coverage/ total.coverage/ fuzz.coverage/ test/tmp/ cache/ $(OSX_APP)\n \trm -rf test/functional/__pycache__ test/functional/test_framework/__pycache__ test/cache share/rpcauth/__pycache__\n \trm -rf osx_volname dist/ dpi36.background.tiff dpi72.background.tiff\n-\n-test-security-check:\n-if TARGET_DARWIN\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_MACHO\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_MACHO\n-endif\n-if TARGET_WINDOWS\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_PE\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_PE\n-endif\n-if TARGET_LINUX\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-security-check.py TestSecurityChecks.test_ELF\n-\t$(AM_V_at) CC='$(CC)' CFLAGS='$(CFLAGS)' CPPFLAGS='$(CPPFLAGS)' LDFLAGS='$(LDFLAGS)' $(PYTHON) $(top_srcdir)/contrib/devtools/test-symbol-check.py TestSymbolChecks.test_ELF\n-endif"
      },
      {
        "sha": "112c7316c1bd98e384749c3eeaf1228a29e507ee",
        "filename": "README.md",
        "status": "modified",
        "additions": 21,
        "deletions": 37,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,41 +1,38 @@\n-Bitcoin Core integration/staging tree\n+Bitcoin Staking Core integration/staging tree\n =====================================\n \n-https://bitcoincore.org\n+https://bitcoinstaking.org\n \n-For an immediately usable, binary version of the Bitcoin Core software, see\n-https://bitcoincore.org/en/download/.\n+What is Bitcoin Staking?\n+----------------\n \n-Further information about Bitcoin Core is available in the [doc folder](/doc).\n+Yet another Bitcoin fork.\n \n-What is Bitcoin?\n-----------------\n+BitcoinStaking - Real Bitcoin transitioned to Proof of Stake at block 301448\n+All BSKs have been mined using real old BTC keys.\n \n-Bitcoin is an experimental digital currency that enables instant payments to\n-anyone, anywhere in the world. Bitcoin uses peer-to-peer technology to operate\n-with no central authority: managing transactions and issuing money are carried\n-out collectively by the network. Bitcoin Core is the name of open source\n-software which enables the use of this currency.\n+BitcoinStaking (BSK)\n+Bitcoin with Proof of Stake (PoS)\n+starting at block 301448 - May 2014\n \n-For more information read the original Bitcoin whitepaper.\n+The only way to mine BSK is to use real BTC keys. Use the 'importprivkey' command to import you old\n+key and start mining on the BSK network. Please move your funds to a safe address before importing\n+your key.\n+\n+For more information see https://www.bitcoinstaking.org\n \n License\n -------\n \n-Bitcoin Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n+Bitcoin Staking Core is released under the terms of the MIT license. See [COPYING](COPYING) for more\n information or see https://opensource.org/licenses/MIT.\n \n Development Process\n -------------------\n \n-The `master` branch is regularly built (see `doc/build-*.md` for instructions) and tested, but it is not guaranteed to be\n-completely stable. [Tags](https://github.com/bitcoin/bitcoin/tags) are created\n-regularly from release branches to indicate new official, stable release versions of Bitcoin Core.\n-\n-The https://github.com/bitcoin-core/gui repository is used exclusively for the\n-development of the GUI. Its master branch is identical in all monotree\n-repositories. Release branches and tags do not exist, so please do not fork\n-that repository unless it is for development reasons.\n+The `master` branch is regularly built and tested, but is not guaranteed to be\n+completely stable. [Tags](https://github.com/BitcoinStaking/BitcoinS/tags) are created\n+regularly to indicate new official, stable release versions of Bitcoin Staking Core.\n \n The contribution workflow is described in [CONTRIBUTING.md](CONTRIBUTING.md)\n and useful hints for developers can be found in [doc/developer-notes.md](doc/developer-notes.md).\n@@ -56,27 +53,14 @@ submit new unit tests for old code. Unit tests can be compiled and run\n and extending unit tests can be found in [/src/test/README.md](/src/test/README.md).\n \n There are also [regression and integration tests](/test), written\n-in Python.\n+in Python, that are run automatically on the build server.\n These tests can be run (if the [test dependencies](/test) are installed) with: `test/functional/test_runner.py`\n \n-The CI (Continuous Integration) systems make sure that every pull request is built for Windows, Linux, and macOS,\n-and that unit/sanity tests are run automatically.\n+The Travis CI system makes sure that every pull request is built for Windows, Linux, and macOS, and that unit/sanity tests are run automatically.\n \n ### Manual Quality Assurance (QA) Testing\n \n Changes should be tested by somebody other than the developer who wrote the\n code. This is especially important for large or high-risk changes. It is useful\n to add a test plan to the pull request description if testing the changes is\n not straightforward.\n-\n-Translations\n-------------\n-\n-Changes to translations as well as new translations can be submitted to\n-[Bitcoin Core's Transifex page](https://www.transifex.com/bitcoin/bitcoin/).\n-\n-Translations are periodically pulled from Transifex and merged into the git repository. See the\n-[translation process](doc/translation_process.md) for details on how this works.\n-\n-**Important**: We do not accept translation changes as GitHub pull requests because the next\n-pull from Transifex would automatically overwrite them again."
      },
      {
        "sha": "0caacec440f4cce72200c2f42b58e58d10a2219e",
        "filename": "REVIEWERS",
        "status": "removed",
        "additions": 0,
        "deletions": 136,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/REVIEWERS",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/REVIEWERS",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/REVIEWERS?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,136 +0,0 @@\n-# ==============================================================================\n-#                          Bitcoin Core REVIEWERS\n-# ==============================================================================\n-\n-# Configuration of automated review requests for the bitcoin/bitcoin repo\n-# via DrahtBot.\n-\n-# Order is not important; if a modified file or directory matches a fnmatch,\n-# the reviewer will be mentioned in a PR comment requesting a review.\n-\n-# Regular contributors are free to add their names to specific directories or\n-# files provided that they are willing to provide a review.\n-\n-# Absence from this list should not be interpreted as a discouragement to\n-# review a pull request. Peer review is always welcome and is a critical\n-# component of the progress of the codebase. Information on peer review\n-# guidelines can be found in the CONTRIBUTING.md doc.\n-\n-\n-# Maintainers\n-#   @fanquake\n-#   @hebasto\n-#   @jonasschnelli\n-#   @laanwj\n-#   @marcofalke\n-#   @meshcollider\n-#   @sipa\n-\n-# Docs\n-/doc/*[a-zA-Z-].md                          @harding\n-/doc/Doxyfile.in                            @fanquake\n-/doc/REST-interface.md                      @jonasschnelli\n-/doc/benchmarking.md                        @ariard\n-/doc/bitcoin-conf.md                        @hebasto\n-/doc/build-freebsd.md                       @fanquake\n-/doc/build-netbsd.md                        @fanquake\n-/doc/build-openbsd.md                       @laanwj\n-/doc/build-osx.md                           @fanquake\n-/doc/build-unix.md                          @laanwj\n-/doc/build-windows.md                       @sipsorcery\n-/doc/dependencies.md                        @fanquake\n-/doc/developer-notes.md                     @laanwj\n-/doc/files.md                               @hebasto\n-/doc/reduce-memory.md                       @fanquake\n-/doc/reduce-traffic.md                      @jonasschnelli\n-/doc/release-process.md                     @laanwj\n-/doc/translation_strings_policy.md          @laanwj\n-\n-# Build aux\n-/build-aux/m4/bitcoin_qt.m4                 @hebasto\n-\n-# MSVC build system\n-/build_msvc/                                @sipsorcery\n-\n-# Settings\n-/src/util/settings.*                        @ryanofsky\n-\n-# Fuzzing\n-\n-# Tests\n-/src/test/net_peer_eviction_tests.cpp       @jonatack\n-/test/functional/mempool_updatefromblock.py @hebasto\n-/test/functional/feature_asmap.py           @jonatack\n-/test/functional/interface_bitcoin_cli.py   @jonatack\n-\n-# Backwards compatibility tests\n-*_compatibility.py                          @sjors\n-/test/functional/wallet_upgradewallet.py    @sjors @achow101\n-/test/get_previous_releases.py              @sjors\n-\n-# Translations\n-/src/util/translation.h                     @hebasto\n-\n-# Dev Tools\n-/contrib/devtools/security-check.py         @fanquake\n-/contrib/devtools/test-security-check.py    @fanquake\n-/contrib/devtools/symbol-check.py           @fanquake\n-\n-# Guix\n-/contrib/guix/                              @dongcarl\n-\n-# Compatibility\n-/src/compat/glibc_*                         @fanquake\n-\n-# GUI\n-/src/qt/forms/                              @hebasto\n-\n-# Wallet\n-/src/wallet/                                @achow101\n-\n-# CLI\n-/src/bitcoin-cli.cpp                        @jonatack\n-\n-# Coinstats\n-/src/node/coinstats.*                       @fjahr\n-\n-# Index\n-/src/index/                                 @fjahr\n-\n-# Descriptors\n-*descriptor*                                @achow101 @sipa\n-\n-# External signer\n-*external_signer*                           @sjors\n-/doc/external-signer.md                     @sjors\n-*signer.py                                  @sjors\n-\n-# Interfaces\n-/src/interfaces/                            @ryanofsky\n-\n-# DB\n-/src/txdb.*                                 @jamesob\n-/src/dbwrapper.*                            @jamesob\n-\n-# Linter\n-/test/lint/lint-shell.sh                    @hebasto\n-\n-# Bech32\n-/src/bech32.*                               @sipa\n-/src/bench/bech32.*                         @sipa\n-\n-# PSBT\n-/src/psbt*                                  @achow101\n-/src/node/psbt*                             @achow101\n-/doc/psbt.md                                @achow101\n-\n-# P2P\n-/src/net_processing.*                       @sipa\n-/src/protocol.*                             @sipa\n-\n-# Consensus\n-/src/coins.*                                @sipa @jamesob\n-/src/script/script.*                        @sipa\n-/src/script/interpreter.*                   @sipa\n-/src/validation.*                           @sipa\n-/src/consensus/                             @sipa"
      },
      {
        "sha": "9bec2a465fbe0d1beb70cace070b4d7a36351149",
        "filename": "SECURITY.md",
        "status": "modified",
        "additions": 1,
        "deletions": 16,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/SECURITY.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/SECURITY.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/SECURITY.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,20 +1,5 @@\n # Security Policy\n \n-## Supported Versions\n-\n-See our website for versions of Bitcoin Core that are currently supported with\n-security updates: https://bitcoincore.org/en/lifecycle/#schedule\n-\n ## Reporting a Vulnerability\n \n-To report security issues send an email to security@bitcoincore.org (not for support).\n-\n-The following keys may be used to communicate sensitive information to developers:\n-\n-| Name | Fingerprint |\n-|------|-------------|\n-| Wladimir van der Laan | 71A3 B167 3540 5025 D447  E8F2 7481 0B01 2346 C9A6 |\n-| Jonas Schnelli | 32EE 5C4C 3FA1 5CCA DB46  ABE5 29D4 BCB6 416F 53EC |\n-| Pieter Wuille | 133E AC17 9436 F14A 5CF1  B794 860F EB80 4E66 9320 |\n-\n-You can import a key by running the following command with that individual\u2019s fingerprint: `gpg --recv-keys \"<fingerprint>\"` Ensure that you put quotes around fingerprints containing spaces.\n+To report security issues send an email to security@bitcoinstaking.org (not for support)."
      },
      {
        "sha": "321370fb4359f43c99b2b4418f0426174a21ac8b",
        "filename": "build-aux/m4/ax_boost_base.m4",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_base.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_base.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_base.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -11,7 +11,7 @@\n #   Test for the Boost C++ libraries of a particular version (or newer)\n #\n #   If no path to the installed boost library is given the macro searchs\n-#   under /usr, /usr/local, /opt, /opt/local and /opt/homebrew and evaluates the\n+#   under /usr, /usr/local, /opt and /opt/local and evaluates the\n #   $BOOST_ROOT environment variable. Further documentation is available at\n #   <http://randspringer.de/boost/index.html>.\n #\n@@ -127,8 +127,14 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n       [multiarch_libsubdir=\"lib/${host_cpu}-${host_os}\"]\n     )\n \n+    dnl some arches may advertise a cpu type that doesn't line up with their\n+    dnl prefix's cpu type. For example, uname may report armv7l while libs are\n+    dnl installed to /usr/lib/arm-linux-gnueabihf. Try getting the compiler's\n+    dnl value for an extra chance of finding the correct path.\n+    libsubdirs=\"lib/`$CXX -dumpmachine 2>/dev/null` $libsubdirs\"\n+\n     dnl first we check the system location for boost libraries\n-    dnl this location ist chosen if boost libraries are installed with the --layout=system option\n+    dnl this location is chosen if boost libraries are installed with the --layout=system option\n     dnl or if you install boost with RPM\n     AS_IF([test \"x$_AX_BOOST_BASE_boost_path\" != \"x\"],[\n         AC_MSG_CHECKING([for boostlib >= $1 ($WANT_BOOST_VERSION) includes in \"$_AX_BOOST_BASE_boost_path/include\"])\n@@ -151,7 +157,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n         else\n             search_libsubdirs=\"$multiarch_libsubdir $libsubdirs\"\n         fi\n-        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local /opt/homebrew/; do\n+        for _AX_BOOST_BASE_boost_path_tmp in /usr /usr/local /opt /opt/local ; do\n             if test -d \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" && test -r \"$_AX_BOOST_BASE_boost_path_tmp/include/boost\" ; then\n                 for libsubdir in $search_libsubdirs ; do\n                     if ls \"$_AX_BOOST_BASE_boost_path_tmp/$libsubdir/libboost_\"* >/dev/null 2>&1 ; then break; fi\n@@ -227,7 +233,7 @@ AC_DEFUN([_AX_BOOST_BASE_RUNDETECT],[\n             fi\n         else\n             if test \"x$cross_compiling\" != \"xyes\" ; then\n-                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local /opt/homebrew ; do\n+                for _AX_BOOST_BASE_boost_path in /usr /usr/local /opt /opt/local ; do\n                     if test -d \"$_AX_BOOST_BASE_boost_path\" && test -r \"$_AX_BOOST_BASE_boost_path\" ; then\n                         for i in `ls -d $_AX_BOOST_BASE_boost_path/include/boost-* 2>/dev/null`; do\n                             _version_tmp=`echo $i | sed \"s#$_AX_BOOST_BASE_boost_path##\" | sed 's/\\/include\\/boost-//' | sed 's/_/./'`"
      },
      {
        "sha": "4cd3b860410f83d28d9174c0d16e53e93b098334",
        "filename": "build-aux/m4/ax_boost_chrono.m4",
        "status": "added",
        "additions": 118,
        "deletions": 0,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_chrono.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_chrono.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_chrono.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,118 @@\n+# ===========================================================================\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_chrono.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_CHRONO\n+#\n+# DESCRIPTION\n+#\n+#   Test for Chrono library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_CHRONO_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_CHRONO\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 5\n+\n+AC_DEFUN([AX_BOOST_CHRONO],\n+[\n+\tAC_ARG_WITH([boost-chrono],\n+\tAS_HELP_STRING([--with-boost-chrono@<:@=special-lib@:>@],\n+                   [use the Chrono library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-chrono=boost_chrono-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_chrono_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_chrono_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Chrono library is available,\n+\t\t\t\t\t   ax_cv_boost_chrono,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/chrono.hpp>]],\n+                                   [[boost::chrono::system_clock::time_point* time = new boost::chrono::system_clock::time_point; delete time;]])],\n+                   ax_cv_boost_chrono=yes, ax_cv_boost_chrono=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_chrono\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_CHRONO,,[define if the Boost::Chrono library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_chrono_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_chrono*.so* $BOOSTLIBDIR/libboost_chrono*.dylib* $BOOSTLIBDIR/libboost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_chrono.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                 [link_chrono=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_chrono\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_chrono*.dll* $BOOSTLIBDIR/boost_chrono*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_chrono.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_chrono.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                 [link_chrono=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_chrono_lib boost_chrono-$ax_boost_user_chrono_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_CHRONO_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_CHRONO_LIB) link_chrono=\"yes\"; break],\n+                                   [link_chrono=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the Boost::Chrono library!)\n+            fi\n+\t\t\tif test \"x$link_chrono\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "e9dea4353556e1a4135122bac13561ed88a95743",
        "filename": "build-aux/m4/ax_boost_thread.m4",
        "status": "added",
        "additions": 163,
        "deletions": 0,
        "changes": 163,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_thread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_boost_thread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_thread.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,163 @@\n+# ===========================================================================\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_thread.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_BOOST_THREAD\n+#\n+# DESCRIPTION\n+#\n+#   Test for Thread library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_THREAD_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_THREAD\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2009 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2009 Michael Tindal\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 32\n+\n+AC_DEFUN([AX_BOOST_THREAD],\n+[\n+    AC_ARG_WITH([boost-thread],\n+    AS_HELP_STRING([--with-boost-thread@<:@=special-lib@:>@],\n+                   [use the Thread library from boost -\n+                    it is possible to specify a certain library for the linker\n+                    e.g. --with-boost-thread=boost_thread-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_thread_lib=\"\"\n+        else\n+            want_boost=\"yes\"\n+            ax_boost_user_thread_lib=\"$withval\"\n+        fi\n+        ],\n+        [want_boost=\"yes\"]\n+    )\n+\n+    if test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+        CPPFLAGS_SAVED=\"$CPPFLAGS\"\n+        CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+        export CPPFLAGS\n+\n+        LDFLAGS_SAVED=\"$LDFLAGS\"\n+        LDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+        export LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Thread library is available,\n+                       ax_cv_boost_thread,\n+        [AC_LANG_PUSH([C++])\n+             CXXFLAGS_SAVE=$CXXFLAGS\n+\n+             if test \"x$host_os\" = \"xsolaris\" ; then\n+                 CXXFLAGS=\"-pthreads $CXXFLAGS\"\n+             elif test \"x$host_os\" = \"xmingw32\" ; then\n+                 CXXFLAGS=\"-mthreads $CXXFLAGS\"\n+             else\n+                CXXFLAGS=\"-pthread $CXXFLAGS\"\n+             fi\n+             AC_COMPILE_IFELSE([\n+                 AC_LANG_PROGRAM(\n+                     [[@%:@include <boost/thread/thread.hpp>]],\n+                     [[boost::thread_group thrds;\n+                       return 0;]])],\n+                 ax_cv_boost_thread=yes, ax_cv_boost_thread=no)\n+             CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+        ])\n+        if test \"x$ax_cv_boost_thread\" = \"xyes\"; then\n+           if test \"x$host_os\" = \"xsolaris\" ; then\n+              BOOST_CPPFLAGS=\"-pthreads $BOOST_CPPFLAGS\"\n+           elif test \"x$host_os\" = \"xmingw32\" ; then\n+              BOOST_CPPFLAGS=\"-mthreads $BOOST_CPPFLAGS\"\n+           else\n+              BOOST_CPPFLAGS=\"-pthread $BOOST_CPPFLAGS\"\n+           fi\n+\n+            AC_SUBST(BOOST_CPPFLAGS)\n+\n+            AC_DEFINE(HAVE_BOOST_THREAD,,\n+                      [define if the Boost::Thread library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+            LDFLAGS_SAVE=$LDFLAGS\n+                        case \"x$host_os\" in\n+                          *bsd* )\n+                               LDFLAGS=\"-pthread $LDFLAGS\"\n+                          break;\n+                          ;;\n+                        esac\n+            if test \"x$ax_boost_user_thread_lib\" = \"x\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/libboost_thread* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'`; do\n+                     ax_lib=${libextension}\n+                    AC_CHECK_LIB($ax_lib, exit,\n+                                 [link_thread=\"yes\"; break],\n+                                 [link_thread=\"no\"])\n+                done\n+                if test \"x$link_thread\" != \"xyes\"; then\n+                for libextension in `ls -r $BOOSTLIBDIR/boost_thread* 2>/dev/null | sed 's,.*/,,' | sed 's,\\..*,,'`; do\n+                     ax_lib=${libextension}\n+                    AC_CHECK_LIB($ax_lib, exit,\n+                                 [link_thread=\"yes\"; break],\n+                                 [link_thread=\"no\"])\n+                done\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_thread_lib boost_thread-$ax_boost_user_thread_lib; do\n+                      AC_CHECK_LIB($ax_lib, exit,\n+                                   [link_thread=\"yes\"; break],\n+                                   [link_thread=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the Boost::Thread library!)\n+            fi\n+            if test \"x$link_thread\" = \"xno\"; then\n+                AC_MSG_ERROR(Could not link against $ax_lib !)\n+            else\n+                BOOST_THREAD_LIB=\"-l$ax_lib\"\n+                case \"x$host_os\" in\n+                    *bsd* )\n+                        BOOST_LDFLAGS=\"-pthread $BOOST_LDFLAGS\"\n+                        break;\n+                        ;;\n+                    xsolaris )\n+                        BOOST_THREAD_LIB=\"$BOOST_THREAD_LIB -lpthread\"\n+                        break;\n+                        ;;\n+                    xmingw32 )\n+                        break;\n+                        ;;\n+                    * )\n+                        BOOST_THREAD_LIB=\"$BOOST_THREAD_LIB -lpthread\"\n+                        break;\n+                        ;;\n+                esac\n+                AC_SUBST(BOOST_THREAD_LIB)\n+            fi\n+        fi\n+\n+        CPPFLAGS=\"$CPPFLAGS_SAVED\"\n+        LDFLAGS=\"$LDFLAGS_SAVED\"\n+    fi\n+])"
      },
      {
        "sha": "f147cee3b117f80b22544976385e267b26f46dd9",
        "filename": "build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "status": "modified",
        "additions": 36,
        "deletions": 419,
        "changes": 455,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_cxx_compile_stdcxx.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_cxx_compile_stdcxx.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#  https://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n+#   http://www.gnu.org/software/autoconf-archive/ax_cxx_compile_stdcxx.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -33,23 +33,21 @@\n #   Copyright (c) 2014, 2015 Google Inc.; contributed by Alexey Sokolov <sokolov@google.com>\n #   Copyright (c) 2015 Paul Norman <penorman@mac.com>\n #   Copyright (c) 2015 Moritz Klammler <moritz@klammler.eu>\n-#   Copyright (c) 2016, 2018 Krzesimir Nowak <qdlacz@gmail.com>\n-#   Copyright (c) 2019 Enji Cooper <yaneurabeya@gmail.com>\n #\n #   Copying and distribution of this file, with or without modification, are\n #   permitted in any medium without royalty provided the copyright notice\n #   and this notice are preserved.  This file is offered as-is, without any\n #   warranty.\n \n-#serial 11\n+#serial 4\n \n dnl  This macro is based on the code from the AX_CXX_COMPILE_STDCXX_11 macro\n dnl  (serial version number 13).\n \n AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n-  m4_if([$1], [11], [ax_cxx_compile_alternatives=\"11 0x\"],\n-        [$1], [14], [ax_cxx_compile_alternatives=\"14 1y\"],\n-        [$1], [17], [ax_cxx_compile_alternatives=\"17 1z\"],\n+  m4_if([$1], [11], [],\n+        [$1], [14], [],\n+        [$1], [17], [m4_fatal([support for C++17 not yet implemented in AX_CXX_COMPILE_STDCXX])],\n         [m4_fatal([invalid first argument `$1' to AX_CXX_COMPILE_STDCXX])])dnl\n   m4_if([$2], [], [],\n         [$2], [ext], [],\n@@ -59,13 +57,26 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n         [$3], [mandatory], [ax_cxx_compile_cxx$1_required=true],\n         [$3], [optional], [ax_cxx_compile_cxx$1_required=false],\n         [m4_fatal([invalid third argument `$3' to AX_CXX_COMPILE_STDCXX])])\n+  m4_if([$4], [], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [default], [ax_cxx_compile_cxx$1_try_default=true],\n+        [$4], [nodefault], [ax_cxx_compile_cxx$1_try_default=false],\n+        [m4_fatal([invalid fourth argument `$4' to AX_CXX_COMPILE_STDCXX])])\n   AC_LANG_PUSH([C++])dnl\n   ac_success=no\n \n+  m4_if([$4], [nodefault], [], [dnl\n+  AC_CACHE_CHECK(whether $CXX supports C++$1 features by default,\n+  ax_cv_cxx_compile_cxx$1,\n+  [AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+    [ax_cv_cxx_compile_cxx$1=yes],\n+    [ax_cv_cxx_compile_cxx$1=no])])\n+  if test x$ax_cv_cxx_compile_cxx$1 = xyes; then\n+    ac_success=yes\n+  fi])\n+\n   m4_if([$2], [noext], [], [dnl\n   if test x$ac_success = xno; then\n-    for alternative in ${ax_cxx_compile_alternatives}; do\n-      switch=\"-std=gnu++${alternative}\"\n+    for switch in -std=gnu++$1 -std=gnu++0x; do\n       cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n       AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n                      $cachevar,\n@@ -91,27 +102,22 @@ AC_DEFUN([AX_CXX_COMPILE_STDCXX], [dnl\n     dnl HP's aCC needs +std=c++11 according to:\n     dnl http://h21007.www2.hp.com/portal/download/files/unprot/aCxx/PDF_Release_Notes/769149-001.pdf\n     dnl Cray's crayCC needs \"-h std=c++11\"\n-    for alternative in ${ax_cxx_compile_alternatives}; do\n-      for switch in -std=c++${alternative} +std=c++${alternative} \"-h std=c++${alternative}\"; do\n-        cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n-        AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n-                       $cachevar,\n-          [ac_save_CXX=\"$CXX\"\n-           CXX=\"$CXX $switch\"\n-           AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n-            [eval $cachevar=yes],\n-            [eval $cachevar=no])\n-           CXX=\"$ac_save_CXX\"])\n-        if eval test x\\$$cachevar = xyes; then\n-          CXX=\"$CXX $switch\"\n-          if test -n \"$CXXCPP\" ; then\n-            CXXCPP=\"$CXXCPP $switch\"\n-          fi\n-          ac_success=yes\n-          break\n+    for switch in -std=c++$1 -std=c++0x +std=c++$1 \"-h std=c++$1\"; do\n+      cachevar=AS_TR_SH([ax_cv_cxx_compile_cxx$1_$switch])\n+      AC_CACHE_CHECK(whether $CXX supports C++$1 features with $switch,\n+                     $cachevar,\n+        [ac_save_CXX=\"$CXX\"\n+         CXX=\"$CXX $switch\"\n+         AC_COMPILE_IFELSE([AC_LANG_SOURCE([_AX_CXX_COMPILE_STDCXX_testbody_$1])],\n+          [eval $cachevar=yes],\n+          [eval $cachevar=no])\n+         CXX=\"$ac_save_CXX\"])\n+      if eval test x\\$$cachevar = xyes; then\n+        CXX=\"$CXX $switch\"\n+        if test -n \"$CXXCPP\" ; then\n+          CXXCPP=\"$CXXCPP $switch\"\n         fi\n-      done\n-      if test x$ac_success = xyes; then\n+        ac_success=yes\n         break\n       fi\n     done\n@@ -148,11 +154,6 @@ m4_define([_AX_CXX_COMPILE_STDCXX_testbody_14],\n   _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n )\n \n-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_17],\n-  _AX_CXX_COMPILE_STDCXX_testbody_new_in_11\n-  _AX_CXX_COMPILE_STDCXX_testbody_new_in_14\n-  _AX_CXX_COMPILE_STDCXX_testbody_new_in_17\n-)\n \n dnl  Tests for new features in C++11\n \n@@ -190,13 +191,11 @@ namespace cxx11\n \n     struct Base\n     {\n-      virtual ~Base() {}\n       virtual void f() {}\n     };\n \n     struct Derived : public Base\n     {\n-      virtual ~Derived() override {}\n       virtual void f() override {}\n     };\n \n@@ -525,7 +524,7 @@ namespace cxx14\n \n   }\n \n-  namespace test_digit_separators\n+  namespace test_digit_seperators\n   {\n \n     constexpr auto ten_million = 100'000'000;\n@@ -567,385 +566,3 @@ namespace cxx14\n #endif  // __cplusplus >= 201402L\n \n ]])\n-\n-\n-dnl  Tests for new features in C++17\n-\n-m4_define([_AX_CXX_COMPILE_STDCXX_testbody_new_in_17], [[\n-\n-// If the compiler admits that it is not ready for C++17, why torture it?\n-// Hopefully, this will speed up the test.\n-\n-#ifndef __cplusplus\n-\n-#error \"This is not a C++ compiler\"\n-\n-#elif __cplusplus < 201703L\n-\n-#error \"This is not a C++17 compiler\"\n-\n-#else\n-\n-#include <initializer_list>\n-#include <utility>\n-#include <type_traits>\n-\n-namespace cxx17\n-{\n-\n-  namespace test_constexpr_lambdas\n-  {\n-\n-    constexpr int foo = [](){return 42;}();\n-\n-  }\n-\n-  namespace test::nested_namespace::definitions\n-  {\n-\n-  }\n-\n-  namespace test_fold_expression\n-  {\n-\n-    template<typename... Args>\n-    int multiply(Args... args)\n-    {\n-      return (args * ... * 1);\n-    }\n-\n-    template<typename... Args>\n-    bool all(Args... args)\n-    {\n-      return (args && ...);\n-    }\n-\n-  }\n-\n-  namespace test_extended_static_assert\n-  {\n-\n-    static_assert (true);\n-\n-  }\n-\n-  namespace test_auto_brace_init_list\n-  {\n-\n-    auto foo = {5};\n-    auto bar {5};\n-\n-    static_assert(std::is_same<std::initializer_list<int>, decltype(foo)>::value);\n-    static_assert(std::is_same<int, decltype(bar)>::value);\n-  }\n-\n-  namespace test_typename_in_template_template_parameter\n-  {\n-\n-    template<template<typename> typename X> struct D;\n-\n-  }\n-\n-  namespace test_fallthrough_nodiscard_maybe_unused_attributes\n-  {\n-\n-    int f1()\n-    {\n-      return 42;\n-    }\n-\n-    [[nodiscard]] int f2()\n-    {\n-      [[maybe_unused]] auto unused = f1();\n-\n-      switch (f1())\n-      {\n-      case 17:\n-        f1();\n-        [[fallthrough]];\n-      case 42:\n-        f1();\n-      }\n-      return f1();\n-    }\n-\n-  }\n-\n-  namespace test_extended_aggregate_initialization\n-  {\n-\n-    struct base1\n-    {\n-      int b1, b2 = 42;\n-    };\n-\n-    struct base2\n-    {\n-      base2() {\n-        b3 = 42;\n-      }\n-      int b3;\n-    };\n-\n-    struct derived : base1, base2\n-    {\n-        int d;\n-    };\n-\n-    derived d1 {{1, 2}, {}, 4};  // full initialization\n-    derived d2 {{}, {}, 4};      // value-initialized bases\n-\n-  }\n-\n-  namespace test_general_range_based_for_loop\n-  {\n-\n-    struct iter\n-    {\n-      int i;\n-\n-      int& operator* ()\n-      {\n-        return i;\n-      }\n-\n-      const int& operator* () const\n-      {\n-        return i;\n-      }\n-\n-      iter& operator++()\n-      {\n-        ++i;\n-        return *this;\n-      }\n-    };\n-\n-    struct sentinel\n-    {\n-      int i;\n-    };\n-\n-    bool operator== (const iter& i, const sentinel& s)\n-    {\n-      return i.i == s.i;\n-    }\n-\n-    bool operator!= (const iter& i, const sentinel& s)\n-    {\n-      return !(i == s);\n-    }\n-\n-    struct range\n-    {\n-      iter begin() const\n-      {\n-        return {0};\n-      }\n-\n-      sentinel end() const\n-      {\n-        return {5};\n-      }\n-    };\n-\n-    void f()\n-    {\n-      range r {};\n-\n-      for (auto i : r)\n-      {\n-        [[maybe_unused]] auto v = i;\n-      }\n-    }\n-\n-  }\n-\n-  namespace test_lambda_capture_asterisk_this_by_value\n-  {\n-\n-    struct t\n-    {\n-      int i;\n-      int foo()\n-      {\n-        return [*this]()\n-        {\n-          return i;\n-        }();\n-      }\n-    };\n-\n-  }\n-\n-  namespace test_enum_class_construction\n-  {\n-\n-    enum class byte : unsigned char\n-    {};\n-\n-    byte foo {42};\n-\n-  }\n-\n-  namespace test_constexpr_if\n-  {\n-\n-    template <bool cond>\n-    int f ()\n-    {\n-      if constexpr(cond)\n-      {\n-        return 13;\n-      }\n-      else\n-      {\n-        return 42;\n-      }\n-    }\n-\n-  }\n-\n-  namespace test_selection_statement_with_initializer\n-  {\n-\n-    int f()\n-    {\n-      return 13;\n-    }\n-\n-    int f2()\n-    {\n-      if (auto i = f(); i > 0)\n-      {\n-        return 3;\n-      }\n-\n-      switch (auto i = f(); i + 4)\n-      {\n-      case 17:\n-        return 2;\n-\n-      default:\n-        return 1;\n-      }\n-    }\n-\n-  }\n-\n-  namespace test_template_argument_deduction_for_class_templates\n-  {\n-\n-    template <typename T1, typename T2>\n-    struct pair\n-    {\n-      pair (T1 p1, T2 p2)\n-        : m1 {p1},\n-          m2 {p2}\n-      {}\n-\n-      T1 m1;\n-      T2 m2;\n-    };\n-\n-    void f()\n-    {\n-      [[maybe_unused]] auto p = pair{13, 42u};\n-    }\n-\n-  }\n-\n-  namespace test_non_type_auto_template_parameters\n-  {\n-\n-    template <auto n>\n-    struct B\n-    {};\n-\n-    B<5> b1;\n-    B<'a'> b2;\n-\n-  }\n-\n-  namespace test_structured_bindings\n-  {\n-\n-    int arr[2] = { 1, 2 };\n-    std::pair<int, int> pr = { 1, 2 };\n-\n-    auto f1() -> int(&)[2]\n-    {\n-      return arr;\n-    }\n-\n-    auto f2() -> std::pair<int, int>&\n-    {\n-      return pr;\n-    }\n-\n-    struct S\n-    {\n-      int x1 : 2;\n-      volatile double y1;\n-    };\n-\n-    S f3()\n-    {\n-      return {};\n-    }\n-\n-    auto [ x1, y1 ] = f1();\n-    auto& [ xr1, yr1 ] = f1();\n-    auto [ x2, y2 ] = f2();\n-    auto& [ xr2, yr2 ] = f2();\n-    const auto [ x3, y3 ] = f3();\n-\n-  }\n-\n-  namespace test_exception_spec_type_system\n-  {\n-\n-    struct Good {};\n-    struct Bad {};\n-\n-    void g1() noexcept;\n-    void g2();\n-\n-    template<typename T>\n-    Bad\n-    f(T*, T*);\n-\n-    template<typename T1, typename T2>\n-    Good\n-    f(T1*, T2*);\n-\n-    static_assert (std::is_same_v<Good, decltype(f(g1, g2))>);\n-\n-  }\n-\n-  namespace test_inline_variables\n-  {\n-\n-    template<class T> void f(T)\n-    {}\n-\n-    template<class T> inline T g(T)\n-    {\n-      return T{};\n-    }\n-\n-    template<> inline void f<>(int)\n-    {}\n-\n-    template<> int g<>(int)\n-    {\n-      return 5;\n-    }\n-\n-  }\n-\n-}  // namespace cxx17\n-\n-#endif  // __cplusplus < 201703L\n-\n-]])"
      },
      {
        "sha": "c788ca9bd435fbfe4e1642281aabd7f9492786ff",
        "filename": "build-aux/m4/ax_gcc_func_attribute.m4",
        "status": "added",
        "additions": 223,
        "deletions": 0,
        "changes": 223,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_gcc_func_attribute.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_gcc_func_attribute.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_gcc_func_attribute.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,223 @@\n+# ===========================================================================\n+#   http://www.gnu.org/software/autoconf-archive/ax_gcc_func_attribute.html\n+# ===========================================================================\n+#\n+# SYNOPSIS\n+#\n+#   AX_GCC_FUNC_ATTRIBUTE(ATTRIBUTE)\n+#\n+# DESCRIPTION\n+#\n+#   This macro checks if the compiler supports one of GCC's function\n+#   attributes; many other compilers also provide function attributes with\n+#   the same syntax. Compiler warnings are used to detect supported\n+#   attributes as unsupported ones are ignored by default so quieting\n+#   warnings when using this macro will yield false positives.\n+#\n+#   The ATTRIBUTE parameter holds the name of the attribute to be checked.\n+#\n+#   If ATTRIBUTE is supported define HAVE_FUNC_ATTRIBUTE_<ATTRIBUTE>.\n+#\n+#   The macro caches its result in the ax_cv_have_func_attribute_<attribute>\n+#   variable.\n+#\n+#   The macro currently supports the following function attributes:\n+#\n+#    alias\n+#    aligned\n+#    alloc_size\n+#    always_inline\n+#    artificial\n+#    cold\n+#    const\n+#    constructor\n+#    constructor_priority for constructor attribute with priority\n+#    deprecated\n+#    destructor\n+#    dllexport\n+#    dllimport\n+#    error\n+#    externally_visible\n+#    flatten\n+#    format\n+#    format_arg\n+#    gnu_inline\n+#    hot\n+#    ifunc\n+#    leaf\n+#    malloc\n+#    noclone\n+#    noinline\n+#    nonnull\n+#    noreturn\n+#    nothrow\n+#    optimize\n+#    pure\n+#    unused\n+#    used\n+#    visibility\n+#    warning\n+#    warn_unused_result\n+#    weak\n+#    weakref\n+#\n+#   Unsuppored function attributes will be tested with a prototype returning\n+#   an int and not accepting any arguments and the result of the check might\n+#   be wrong or meaningless so use with care.\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2013 Gabriele Svelto <gabriele.svelto@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved.  This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 3\n+\n+AC_DEFUN([AX_GCC_FUNC_ATTRIBUTE], [\n+    AS_VAR_PUSHDEF([ac_var], [ax_cv_have_func_attribute_$1])\n+\n+    AC_CACHE_CHECK([for __attribute__(($1))], [ac_var], [\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([\n+            m4_case([$1],\n+                [alias], [\n+                    int foo( void ) { return 0; }\n+                    int bar( void ) __attribute__(($1(\"foo\")));\n+                ],\n+                [aligned], [\n+                    int foo( void ) __attribute__(($1(32)));\n+                ],\n+                [alloc_size], [\n+                    void *foo(int a) __attribute__(($1(1)));\n+                ],\n+                [always_inline], [\n+                    inline __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [artificial], [\n+                    inline __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [cold], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [const], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [constructor_priority], [\n+                    int foo( void ) __attribute__((__constructor__(65535/2)));\n+                ],\n+                [constructor], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [deprecated], [\n+                    int foo( void ) __attribute__(($1(\"\")));\n+                ],\n+                [destructor], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [dllexport], [\n+                    __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [dllimport], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [error], [\n+                    int foo( void ) __attribute__(($1(\"\")));\n+                ],\n+                [externally_visible], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [flatten], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [format], [\n+                    int foo(const char *p, ...) __attribute__(($1(printf, 1, 2)));\n+                ],\n+                [format_arg], [\n+                    char *foo(const char *p) __attribute__(($1(1)));\n+                ],\n+                [gnu_inline], [\n+                    inline __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [hot], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [ifunc], [\n+                    int my_foo( void ) { return 0; }\n+                    static int (*resolve_foo(void))(void) { return my_foo; }\n+                    int foo( void ) __attribute__(($1(\"resolve_foo\")));\n+                ],\n+                [leaf], [\n+                    __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [malloc], [\n+                    void *foo( void ) __attribute__(($1));\n+                ],\n+                [noclone], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [noinline], [\n+                    __attribute__(($1)) int foo( void ) { return 0; }\n+                ],\n+                [nonnull], [\n+                    int foo(char *p) __attribute__(($1(1)));\n+                ],\n+                [noreturn], [\n+                    void foo( void ) __attribute__(($1));\n+                ],\n+                [nothrow], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [optimize], [\n+                    __attribute__(($1(3))) int foo( void ) { return 0; }\n+                ],\n+                [pure], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [unused], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [used], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [visibility], [\n+                    int foo_def( void ) __attribute__(($1(\"default\")));\n+                    int foo_hid( void ) __attribute__(($1(\"hidden\")));\n+                    int foo_int( void ) __attribute__(($1(\"internal\")));\n+                    int foo_pro( void ) __attribute__(($1(\"protected\")));\n+                ],\n+                [warning], [\n+                    int foo( void ) __attribute__(($1(\"\")));\n+                ],\n+                [warn_unused_result], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [weak], [\n+                    int foo( void ) __attribute__(($1));\n+                ],\n+                [weakref], [\n+                    static int foo( void ) { return 0; }\n+                    static int bar( void ) __attribute__(($1(\"foo\")));\n+                ],\n+                [\n+                 m4_warn([syntax], [Unsupported attribute $1, the test may fail])\n+                 int foo( void ) __attribute__(($1));\n+                ]\n+            )], [])\n+            ],\n+            dnl GCC doesn't exit with an error if an unknown attribute is\n+            dnl provided but only outputs a warning, so accept the attribute\n+            dnl only if no warning were issued.\n+            [AS_IF([test -s conftest.err],\n+                [AS_VAR_SET([ac_var], [no])],\n+                [AS_VAR_SET([ac_var], [yes])])],\n+            [AS_VAR_SET([ac_var], [no])])\n+    ])\n+\n+    AS_IF([test yes = AS_VAR_GET([ac_var])],\n+        [AC_DEFINE_UNQUOTED(AS_TR_CPP(HAVE_FUNC_ATTRIBUTE_$1), 1,\n+            [Define to 1 if the system has the `$1' function attribute])], [])\n+\n+    AS_VAR_POPDEF([ac_var])\n+])"
      },
      {
        "sha": "4c4051ea376f720faf21a4705c66604fe444c958",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 103,
        "deletions": 125,
        "changes": 228,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#        https://www.gnu.org/software/autoconf-archive/ax_pthread.html\n+#        http://www.gnu.org/software/autoconf-archive/ax_pthread.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -55,7 +55,6 @@\n #\n #   Copyright (c) 2008 Steven G. Johnson <stevenj@alum.mit.edu>\n #   Copyright (c) 2011 Daniel Richard G. <skunk@iSKUNK.ORG>\n-#   Copyright (c) 2019 Marc Stevens <marc.stevens@cwi.nl>\n #\n #   This program is free software: you can redistribute it and/or modify it\n #   under the terms of the GNU General Public License as published by the\n@@ -68,7 +67,7 @@\n #   Public License for more details.\n #\n #   You should have received a copy of the GNU General Public License along\n-#   with this program. If not, see <https://www.gnu.org/licenses/>.\n+#   with this program. If not, see <http://www.gnu.org/licenses/>.\n #\n #   As a special exception, the respective Autoconf Macro's copyright owner\n #   gives unlimited permission to copy, distribute and modify the configure\n@@ -83,7 +82,7 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 27\n+#serial 23\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n@@ -124,12 +123,10 @@ fi\n # (e.g. DEC) have both -lpthread and -lpthreads, where one of the\n # libraries is broken (non-POSIX).\n \n-# Create a list of thread flags to try. Items with a \",\" contain both\n-# C compiler flags (before \",\") and linker flags (after \",\"). Other items\n-# starting with a \"-\" are C compiler flags, and remaining items are\n-# library names, except for \"none\" which indicates that we try without\n-# any flags at all, and \"pthread-config\" which is a program returning\n-# the flags for the Pth emulation library.\n+# Create a list of thread flags to try.  Items starting with a \"-\" are\n+# C compiler flags, and other items are library names, except for \"none\"\n+# which indicates that we try without any flags at all, and \"pthread-config\"\n+# which is a program returning the flags for the Pth emulation library.\n \n ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n \n@@ -197,47 +194,14 @@ case $host_os in\n         # that too in a future libc.)  So we'll check first for the\n         # standard Solaris way of linking pthreads (-mt -lpthread).\n \n-        ax_pthread_flags=\"-mt,-lpthread pthread $ax_pthread_flags\"\n+        ax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n         ;;\n esac\n \n-# Are we compiling with Clang?\n-\n-AC_CACHE_CHECK([whether $CC is Clang],\n-    [ax_cv_PTHREAD_CLANG],\n-    [ax_cv_PTHREAD_CLANG=no\n-     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n-     if test \"x$GCC\" = \"xyes\"; then\n-        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n-            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n-#            if defined(__clang__) && defined(__llvm__)\n-             AX_PTHREAD_CC_IS_CLANG\n-#            endif\n-            ],\n-            [ax_cv_PTHREAD_CLANG=yes])\n-     fi\n-    ])\n-ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n-\n-\n # GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n \n-# Note that for GCC and Clang -pthread generally implies -lpthread,\n-# except when -nostdlib is passed.\n-# This is problematic using libtool to build C++ shared libraries with pthread:\n-# [1] https://gcc.gnu.org/bugzilla/show_bug.cgi?id=25460\n-# [2] https://bugzilla.redhat.com/show_bug.cgi?id=661333\n-# [3] https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=468555\n-# To solve this, first try -pthread together with -lpthread for GCC\n-\n AS_IF([test \"x$GCC\" = \"xyes\"],\n-      [ax_pthread_flags=\"-pthread,-lpthread -pthread -pthreads $ax_pthread_flags\"])\n-\n-# Clang takes -pthread (never supported any other flag), but we'll try with -lpthread first\n-\n-AS_IF([test \"x$ax_pthread_clang\" = \"xyes\"],\n-      [ax_pthread_flags=\"-pthread,-lpthread -pthread\"])\n-\n+      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n \n # The presence of a feature test macro requesting re-entrant function\n # definitions is, on some systems, a strong hint that pthreads support is\n@@ -260,86 +224,25 @@ AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n       [ax_pthread_check_cond=0],\n       [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n \n+# Are we compiling with Clang?\n \n-if test \"x$ax_pthread_ok\" = \"xno\"; then\n-for ax_pthread_try_flag in $ax_pthread_flags; do\n-\n-        case $ax_pthread_try_flag in\n-                none)\n-                AC_MSG_CHECKING([whether pthreads work without any flags])\n-                ;;\n-\n-                *,*)\n-                PTHREAD_CFLAGS=`echo $ax_pthread_try_flag | sed \"s/^\\(.*\\),\\(.*\\)$/\\1/\"`\n-                PTHREAD_LIBS=`echo $ax_pthread_try_flag | sed \"s/^\\(.*\\),\\(.*\\)$/\\2/\"`\n-                AC_MSG_CHECKING([whether pthreads work with \"$PTHREAD_CFLAGS\" and \"$PTHREAD_LIBS\"])\n-                ;;\n-\n-                -*)\n-                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n-                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n-                ;;\n-\n-                pthread-config)\n-                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n-                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n-                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n-                ;;\n-\n-                *)\n-                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n-                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n-                ;;\n-        esac\n-\n-        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n-        ax_pthread_save_LIBS=\"$LIBS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-\n-        # Check for various functions.  We must include pthread.h,\n-        # since some functions may be macros.  (On the Sequent, we\n-        # need a special flag -Kthread to make this header compile.)\n-        # We check for pthread_join because it is in -lpthread on IRIX\n-        # while pthread_create is in libc.  We check for pthread_attr_init\n-        # due to DEC craziness with -lpthreads.  We check for\n-        # pthread_cleanup_push because it is one of the few pthread\n-        # functions on Solaris that doesn't have a non-functional libc stub.\n-        # We try pthread_create on general principles.\n-\n-        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n-#                       if $ax_pthread_check_cond\n-#                        error \"$ax_pthread_check_macro must be defined\"\n-#                       endif\n-                        static void *some_global = NULL;\n-                        static void routine(void *a)\n-                          {\n-                             /* To avoid any unused-parameter or\n-                                unused-but-set-parameter warning.  */\n-                             some_global = a;\n-                          }\n-                        static void *start_routine(void *a) { return a; }],\n-                       [pthread_t th; pthread_attr_t attr;\n-                        pthread_create(&th, 0, start_routine, 0);\n-                        pthread_join(th, 0);\n-                        pthread_attr_init(&attr);\n-                        pthread_cleanup_push(routine, 0);\n-                        pthread_cleanup_pop(0) /* ; */])],\n-            [ax_pthread_ok=yes],\n-            [])\n-\n-        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n-        LIBS=\"$ax_pthread_save_LIBS\"\n-\n-        AC_MSG_RESULT([$ax_pthread_ok])\n-        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n-\n-        PTHREAD_LIBS=\"\"\n-        PTHREAD_CFLAGS=\"\"\n-done\n-fi\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+        AC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+            [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#            if defined(__clang__) && defined(__llvm__)\n+             AX_PTHREAD_CC_IS_CLANG\n+#            endif\n+            ],\n+            [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n \n+ax_pthread_clang_warning=no\n \n # Clang needs special handling, because older versions handle the -pthread\n # option in a rather... idiosyncratic way\n@@ -358,6 +261,11 @@ if test \"x$ax_pthread_clang\" = \"xyes\"; then\n         # -pthread does define _REENTRANT, and while the Darwin headers\n         # ignore this macro, third-party headers might not.)\n \n+        PTHREAD_CFLAGS=\"-pthread\"\n+        PTHREAD_LIBS=\n+\n+        ax_pthread_ok=yes\n+\n         # However, older versions of Clang make a point of warning the user\n         # that, in an invocation where only linking and no compilation is\n         # taking place, the -pthread option has no effect (\"argument unused\n@@ -412,7 +320,78 @@ if test \"x$ax_pthread_clang\" = \"xyes\"; then\n \n fi # $ax_pthread_clang = yes\n \n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n+\n+        case $ax_pthread_try_flag in\n+                none)\n+                AC_MSG_CHECKING([whether pthreads work without any flags])\n+                ;;\n+\n+                -mt,pthread)\n+                AC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+                PTHREAD_CFLAGS=\"-mt\"\n+                PTHREAD_LIBS=\"-lpthread\"\n+                ;;\n+\n+                -*)\n+                AC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+                PTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+                ;;\n+\n+                pthread-config)\n+                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+                AS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+                ;;\n \n+                *)\n+                AC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+                PTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+                ;;\n+        esac\n+\n+        ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+        ax_pthread_save_LIBS=\"$LIBS\"\n+        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+        LIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+        # Check for various functions.  We must include pthread.h,\n+        # since some functions may be macros.  (On the Sequent, we\n+        # need a special flag -Kthread to make this header compile.)\n+        # We check for pthread_join because it is in -lpthread on IRIX\n+        # while pthread_create is in libc.  We check for pthread_attr_init\n+        # due to DEC craziness with -lpthreads.  We check for\n+        # pthread_cleanup_push because it is one of the few pthread\n+        # functions on Solaris that doesn't have a non-functional libc stub.\n+        # We try pthread_create on general principles.\n+\n+        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#                       if $ax_pthread_check_cond\n+#                        error \"$ax_pthread_check_macro must be defined\"\n+#                       endif\n+                        static void routine(void *a) { a = 0; }\n+                        static void *start_routine(void *a) { return a; }],\n+                       [pthread_t th; pthread_attr_t attr;\n+                        pthread_create(&th, 0, start_routine, 0);\n+                        pthread_join(th, 0);\n+                        pthread_attr_init(&attr);\n+                        pthread_cleanup_push(routine, 0);\n+                        pthread_cleanup_pop(0) /* ; */])],\n+            [ax_pthread_ok=yes],\n+            [])\n+\n+        CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+        LIBS=\"$ax_pthread_save_LIBS\"\n+\n+        AC_MSG_RESULT([$ax_pthread_ok])\n+        AS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+        PTHREAD_LIBS=\"\"\n+        PTHREAD_CFLAGS=\"\"\n+done\n+fi\n \n # Various other checks:\n if test \"x$ax_pthread_ok\" = \"xyes\"; then\n@@ -459,8 +438,7 @@ if test \"x$ax_pthread_ok\" = \"xyes\"; then\n         AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n             [ax_cv_PTHREAD_PRIO_INHERIT],\n             [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-                                             [[int i = PTHREAD_PRIO_INHERIT;\n-                                               return i;]])],\n+                                             [[int i = PTHREAD_PRIO_INHERIT;]])],\n                             [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n                             [ax_cv_PTHREAD_PRIO_INHERIT=no])\n             ])"
      },
      {
        "sha": "aa0111e5a20f0c2bfd7c8de310dd0102ee1a2c6d",
        "filename": "build-aux/m4/bitcoin_find_bdb48.m4",
        "status": "modified",
        "additions": 7,
        "deletions": 27,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/bitcoin_find_bdb48.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/bitcoin_find_bdb48.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_find_bdb48.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -6,9 +6,7 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n   AC_ARG_VAR(BDB_CFLAGS, [C compiler flags for BerkeleyDB, bypasses autodetection])\n   AC_ARG_VAR(BDB_LIBS, [Linker flags for BerkeleyDB, bypasses autodetection])\n \n-  if test \"x$use_bdb\" = \"xno\"; then\n-    use_bdb=no\n-  elif test \"x$BDB_CFLAGS\" = \"x\"; then\n+  if test \"x$BDB_CFLAGS\" = \"x\"; then\n     AC_MSG_CHECKING([for Berkeley DB C++ headers])\n     BDB_CPPFLAGS=\n     bdbpath=X\n@@ -46,37 +44,25 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n       ],[])\n     done\n     if test \"x$bdbpath\" = \"xX\"; then\n-      use_bdb=no\n       AC_MSG_RESULT([no])\n-      AC_MSG_WARN([libdb_cxx headers missing])\n-      AC_MSG_WARN(AC_PACKAGE_NAME[ requires this library for BDB (legacy) wallet support])\n-      AC_MSG_WARN([Passing --without-bdb will suppress this warning])\n+      AC_MSG_ERROR([libdb_cxx headers missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n     elif test \"x$bdb48path\" = \"xX\"; then\n       BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdbpath}],db_cxx)\n       AC_ARG_WITH([incompatible-bdb],[AS_HELP_STRING([--with-incompatible-bdb], [allow using a bdb version other than 4.8])],[\n-        AC_MSG_WARN([Found Berkeley DB other than 4.8])\n-        AC_MSG_WARN([BDB (legacy) wallets opened by this build will not be portable!])\n-        use_bdb=yes\n+        AC_MSG_WARN([Found Berkeley DB other than 4.8; wallets opened by this build will not be portable!])\n       ],[\n-        AC_MSG_WARN([Found Berkeley DB other than 4.8])\n-        AC_MSG_WARN([BDB (legacy) wallets opened by this build would not be portable!])\n-        AC_MSG_WARN([If this is intended, pass --with-incompatible-bdb])\n-        AC_MSG_WARN([Passing --without-bdb will suppress this warning])\n-        use_bdb=no\n+        AC_MSG_ERROR([Found Berkeley DB other than 4.8, required for portable wallets (--with-incompatible-bdb to ignore or --disable-wallet to disable wallet functionality)])\n       ])\n     else\n       BITCOIN_SUBDIR_TO_INCLUDE(BDB_CPPFLAGS,[${bdb48path}],db_cxx)\n       bdbpath=\"${bdb48path}\"\n-      use_bdb=yes\n     fi\n   else\n     BDB_CPPFLAGS=${BDB_CFLAGS}\n   fi\n   AC_SUBST(BDB_CPPFLAGS)\n \n-  if test \"x$use_bdb\" = \"xno\"; then\n-    use_bdb=no\n-  elif test \"x$BDB_LIBS\" = \"x\"; then\n+  if test \"x$BDB_LIBS\" = \"x\"; then\n     # TODO: Ideally this could find the library version and make sure it matches the headers being used\n     for searchlib in db_cxx-4.8 db_cxx db4_cxx; do\n       AC_CHECK_LIB([$searchlib],[main],[\n@@ -85,14 +71,8 @@ AC_DEFUN([BITCOIN_FIND_BDB48],[\n       ])\n     done\n     if test \"x$BDB_LIBS\" = \"x\"; then\n-        AC_MSG_WARN([libdb_cxx headers missing])\n-        AC_MSG_WARN(AC_PACKAGE_NAME[ requires this library for BDB (legacy) wallet support])\n-        AC_MSG_WARN([Passing --without-bdb will suppress this warning])\n+        AC_MSG_ERROR([libdb_cxx missing, ]AC_PACKAGE_NAME[ requires this library for wallet functionality (--disable-wallet to disable wallet functionality)])\n     fi\n   fi\n-  if test \"x$use_bdb\" != \"xno\"; then\n-    AC_SUBST(BDB_LIBS)\n-    AC_DEFINE([USE_BDB], [1], [Define if BDB support should be compiled in])\n-    use_bdb=yes\n-  fi\n+  AC_SUBST(BDB_LIBS)\n ])"
      },
      {
        "sha": "83d054af5ff2ebdd5f4fefd05bc265a09411ea24",
        "filename": "build-aux/m4/bitcoin_qt.m4",
        "status": "modified",
        "additions": 258,
        "deletions": 137,
        "changes": 395,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/bitcoin_qt.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/bitcoin_qt.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_qt.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -64,13 +64,6 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n     ],\n     [bitcoin_qt_want_version=auto])\n \n-  AS_IF([test \"x$with_gui\" = xqt5_debug],\n-        [AS_CASE([$host],\n-                 [*darwin*], [qt_lib_suffix=_debug],\n-                 [*mingw*], [qt_lib_suffix=d],\n-                 [qt_lib_suffix= ]); bitcoin_qt_want_version=qt5],\n-        [qt_lib_suffix= ])\n-\n   AC_ARG_WITH([qt-incdir],[AS_HELP_STRING([--with-qt-incdir=INC_DIR],[specify qt include path (overridden by pkgconfig)])], [qt_include_path=$withval], [])\n   AC_ARG_WITH([qt-libdir],[AS_HELP_STRING([--with-qt-libdir=LIB_DIR],[specify qt lib path (overridden by pkgconfig)])], [qt_lib_path=$withval], [])\n   AC_ARG_WITH([qt-plugindir],[AS_HELP_STRING([--with-qt-plugindir=PLUGIN_DIR],[specify qt plugin path (overridden by pkgconfig)])], [qt_plugin_path=$withval], [])\n@@ -79,99 +72,75 @@ AC_DEFUN([BITCOIN_QT_INIT],[\n \n   AC_ARG_WITH([qtdbus],\n     [AS_HELP_STRING([--with-qtdbus],\n-    [enable DBus support (default is yes if qt is enabled and QtDBus is found, except on Android)])],\n+    [enable DBus support (default is yes if qt is enabled and QtDBus is found)])],\n     [use_dbus=$withval],\n     [use_dbus=auto])\n \n-  dnl Android doesn't support D-Bus and certainly doesn't use it for notifications\n-  case $host in\n-    *android*)\n-      if test \"x$use_dbus\" != xyes; then\n-        use_dbus=no\n-      fi\n-    ;;\n-  esac\n-\n   AC_SUBST(QT_TRANSLATION_DIR,$qt_translation_path)\n ])\n \n-dnl Find Qt libraries and includes.\n-dnl\n-dnl   BITCOIN_QT_CONFIGURE([MINIMUM-VERSION])\n-dnl\n-dnl Outputs: See _BITCOIN_QT_FIND_LIBS\n+dnl Find the appropriate version of Qt libraries and includes.\n+dnl Inputs: $1: Whether or not pkg-config should be used. yes|no. Default: yes.\n+dnl Inputs: $2: If $1 is \"yes\" and --with-gui=auto, which qt version should be\n+dnl         tried first.\n+dnl Outputs: See _BITCOIN_QT_FIND_LIBS_*\n dnl Outputs: Sets variables for all qt-related tools.\n dnl Outputs: bitcoin_enable_qt, bitcoin_enable_qt_dbus, bitcoin_enable_qt_test\n AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n-  qt_version=\">= $1\"\n-  qt_lib_prefix=\"Qt5\"\n-  BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS])\n+  use_pkgconfig=$1\n+\n+  if test \"x$use_pkgconfig\" = x; then\n+    use_pkgconfig=yes\n+  fi\n+\n+  if test \"x$use_pkgconfig\" = xyes; then\n+    BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG])\n+  else\n+    BITCOIN_QT_CHECK([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG])\n+  fi\n \n   dnl This is ugly and complicated. Yuck. Works as follows:\n-  dnl We check a header to find out whether Qt is built statically.\n-  dnl When Qt is built statically, some plugins must be linked into\n-  dnl the final binary as well. _BITCOIN_QT_CHECK_STATIC_PLUGIN does\n-  dnl a quick link-check and appends the results to QT_LIBS.\n+  dnl For Qt5, we can check a header to find out whether Qt is build\n+  dnl statically. When Qt is built statically, some plugins must be linked into\n+  dnl the final binary as well.\n+  dnl With Qt5, languages moved into core and the WindowsIntegration plugin was\n+  dnl added.\n+  dnl _BITCOIN_QT_CHECK_STATIC_PLUGINS does a quick link-check and appends the\n+  dnl results to QT_LIBS.\n   BITCOIN_QT_CHECK([\n   TEMP_CPPFLAGS=$CPPFLAGS\n   TEMP_CXXFLAGS=$CXXFLAGS\n   CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n   CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n   _BITCOIN_QT_IS_STATIC\n   if test \"x$bitcoin_cv_static_qt\" = xyes; then\n-    _BITCOIN_QT_CHECK_STATIC_LIBS\n-\n-    if test \"x$qt_plugin_path\" != x; then\n-      if test -d \"$qt_plugin_path/platforms\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n-      fi\n-      if test -d \"$qt_plugin_path/styles\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/styles\"\n-      fi\n-      if test -d \"$qt_plugin_path/accessible\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n-      fi\n-      if test -d \"$qt_plugin_path/platforms/android\"; then\n-        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n-      fi\n-    fi\n-\n+    _BITCOIN_QT_FIND_STATIC_PLUGINS\n     AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol if qt plugins are static])\n     if test \"x$TARGET_OS\" != xandroid; then\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMinimalIntegrationPlugin], [-lqminimal])\n-      AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n+       _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QMinimalIntegrationPlugin)],[-lqminimal])\n+       AC_DEFINE(QT_QPA_PLATFORM_MINIMAL, 1, [Define this symbol if the minimal qt platform exists])\n     fi\n     if test \"x$TARGET_OS\" = xwindows; then\n-      dnl Linking against wtsapi32 is required. See #17749 and\n-      dnl https://bugreports.qt.io/browse/QTBUG-27097.\n-      AX_CHECK_LINK_FLAG([-lwtsapi32], [QT_LIBS=\"$QT_LIBS -lwtsapi32\"], [AC_MSG_ERROR([could not link against -lwtsapi32])])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsIntegrationPlugin], [-lqwindows])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QWindowsVistaStylePlugin], [-lqwindowsvistastyle])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QWindowsIntegrationPlugin)],[-lqwindows])\n       AC_DEFINE(QT_QPA_PLATFORM_WINDOWS, 1, [Define this symbol if the qt platform is windows])\n     elif test \"x$TARGET_OS\" = xlinux; then\n-      dnl workaround for https://bugreports.qt.io/browse/QTBUG-74874\n-      AX_CHECK_LINK_FLAG([-lxcb-shm], [QT_LIBS=\"$QT_LIBS -lxcb-shm\"], [AC_MSG_ERROR([could not link against -lxcb-shm])])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QXcbIntegrationPlugin], [-lqxcb])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QXcbIntegrationPlugin)],[-lqxcb -lxcb-static])\n       AC_DEFINE(QT_QPA_PLATFORM_XCB, 1, [Define this symbol if the qt platform is xcb])\n     elif test \"x$TARGET_OS\" = xdarwin; then\n-      AX_CHECK_LINK_FLAG([[-framework Carbon]],[QT_LIBS=\"$QT_LIBS -framework Carbon\"],[AC_MSG_ERROR(could not link against Carbon framework)])\n-      AX_CHECK_LINK_FLAG([[-framework IOSurface]],[QT_LIBS=\"$QT_LIBS -framework IOSurface\"],[AC_MSG_ERROR(could not link against IOSurface framework)])\n-      AX_CHECK_LINK_FLAG([[-framework Metal]],[QT_LIBS=\"$QT_LIBS -framework Metal\"],[AC_MSG_ERROR(could not link against Metal framework)])\n-      AX_CHECK_LINK_FLAG([[-framework QuartzCore]],[QT_LIBS=\"$QT_LIBS -framework QuartzCore\"],[AC_MSG_ERROR(could not link against QuartzCore framework)])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QCocoaIntegrationPlugin], [-lqcocoa])\n-      _BITCOIN_QT_CHECK_STATIC_PLUGIN([QMacStylePlugin], [-lqmacstyle])\n+      AX_CHECK_LINK_FLAG([[-framework IOKit]],[QT_LIBS=\"$QT_LIBS -framework IOKit\"],[AC_MSG_ERROR(could not iokit framework)])\n+      _BITCOIN_QT_CHECK_STATIC_PLUGINS([Q_IMPORT_PLUGIN(QCocoaIntegrationPlugin)],[-lqcocoa])\n       AC_DEFINE(QT_QPA_PLATFORM_COCOA, 1, [Define this symbol if the qt platform is cocoa])\n     elif test \"x$TARGET_OS\" = xandroid; then\n-      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype $QT_LIBS\"\n+      QT_LIBS=\"-Wl,--export-dynamic,--undefined=JNI_OnLoad -lqtforandroid -ljnigraphics -landroid -lqtfreetype -lQt5EglSupport $QT_LIBS\"\n       AC_DEFINE(QT_QPA_PLATFORM_ANDROID, 1, [Define this symbol if the qt platform is android])\n     fi\n   fi\n   CPPFLAGS=$TEMP_CPPFLAGS\n   CXXFLAGS=$TEMP_CXXFLAGS\n   ])\n \n-  if test \"x$qt_bin_path\" = x; then\n-    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins ${qt_lib_prefix}Core 2>/dev/null`\"\n+  if test \"x$use_pkgconfig$qt_bin_path\" = xyes; then\n+    qt_bin_path=\"`$PKG_CONFIG --variable=host_bins Qt5Core 2>/dev/null`\"\n   fi\n \n   if test \"x$use_hardening\" != xno; then\n@@ -226,14 +195,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   BITCOIN_QT_PATH_PROGS([RCC], [rcc-qt5 rcc5 rcc], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([LRELEASE], [lrelease-qt5 lrelease5 lrelease], $qt_bin_path)\n   BITCOIN_QT_PATH_PROGS([LUPDATE], [lupdate-qt5 lupdate5 lupdate],$qt_bin_path, yes)\n-  BITCOIN_QT_PATH_PROGS([LCONVERT], [lconvert-qt5 lconvert5 lconvert], $qt_bin_path, yes)\n \n   MOC_DEFS='-DHAVE_CONFIG_H -I$(srcdir)'\n   case $host in\n     *darwin*)\n      BITCOIN_QT_CHECK([\n        MOC_DEFS=\"${MOC_DEFS} -DQ_OS_MAC\"\n-       base_frameworks=\"-framework Foundation -framework AppKit\"\n+       base_frameworks=\"-framework Foundation -framework ApplicationServices -framework AppKit\"\n        AX_CHECK_LINK_FLAG([[$base_frameworks]],[QT_LIBS=\"$QT_LIBS $base_frameworks\"],[AC_MSG_ERROR(could not find base frameworks)])\n      ])\n     ;;\n@@ -245,7 +213,7 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n \n \n   dnl enable qt support\n-  AC_MSG_CHECKING([whether to build ]AC_PACKAGE_NAME[ GUI])\n+  AC_MSG_CHECKING(whether to build ]AC_PACKAGE_NAME[ GUI)\n   BITCOIN_QT_CHECK([\n     bitcoin_enable_qt=yes\n     bitcoin_enable_qt_test=yes\n@@ -260,16 +228,13 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n       AC_MSG_ERROR([libQtDBus not found. Install libQtDBus or remove --with-qtdbus.])\n     fi\n     if test \"x$LUPDATE\" = x; then\n-      AC_MSG_WARN([lupdate tool is required to update Qt translations.])\n-    fi\n-    if test \"x$LCONVERT\" = x; then\n-      AC_MSG_WARN([lconvert tool is required to update Qt translations.])\n+      AC_MSG_WARN([lupdate is required to update qt translations])\n     fi\n   ],[\n     bitcoin_enable_qt=no\n   ])\n   if test x$bitcoin_enable_qt = xyes; then\n-    AC_MSG_RESULT([$bitcoin_enable_qt ($qt_lib_prefix)])\n+    AC_MSG_RESULT([$bitcoin_enable_qt ($QT_LIB_PREFIX)])\n   else\n     AC_MSG_RESULT([$bitcoin_enable_qt])\n   fi\n@@ -286,20 +251,61 @@ AC_DEFUN([BITCOIN_QT_CONFIGURE],[\n   AC_SUBST(MOC_DEFS)\n ])\n \n-dnl All macros below are internal and should _not_ be used from configure.ac.\n+dnl All macros below are internal and should _not_ be used from the main\n+dnl configure.ac.\n+dnl ----\n+\n+dnl Internal. Check included version of Qt against minimum specified in doc/dependencies.md\n+dnl Requires: INCLUDES must be populated as necessary.\n+dnl Output: bitcoin_cv_qt5=yes|no\n+AC_DEFUN([_BITCOIN_QT_CHECK_QT5],[\n+  AC_CACHE_CHECK(for Qt 5, bitcoin_cv_qt5,[\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n+    [[\n+      #if QT_VERSION < 0x050501\n+      choke\n+      #endif\n+    ]])],\n+    [bitcoin_cv_qt5=yes],\n+    [bitcoin_cv_qt5=no])\n+])])\n \n-dnl Internal. Check if the linked version of Qt was built statically.\n-dnl\n-dnl _BITCOIN_QT_IS_STATIC\n-dnl ---------------------\n-dnl\n+dnl Internal. Check if the included version of Qt is greater than Qt58.\n+dnl Requires: INCLUDES must be populated as necessary.\n+dnl Output: bitcoin_cv_qt58=yes|no\n+AC_DEFUN([_BITCOIN_QT_CHECK_QT58],[\n+  AC_CACHE_CHECK(for > Qt 5.7, bitcoin_cv_qt58,[\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+      #include <QtCore/qconfig.h>\n+      #ifndef QT_VERSION\n+      #  include <QtCore/qglobal.h>\n+      #endif\n+    ]],\n+    [[\n+      #if QT_VERSION_MINOR < 8\n+      choke\n+      #endif\n+    ]])],\n+    [bitcoin_cv_qt58=yes],\n+    [bitcoin_cv_qt58=no])\n+])])\n+\n+\n+dnl Internal. Check if the linked version of Qt was built as static libs.\n+dnl Requires: Qt5.\n dnl Requires: INCLUDES and LIBS must be populated as necessary.\n dnl Output: bitcoin_cv_static_qt=yes|no\n+dnl Output: Defines QT_STATICPLUGIN if plugins are static.\n AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n   AC_CACHE_CHECK(for static Qt, bitcoin_cv_static_qt,[\n     AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n         #include <QtCore/qconfig.h>\n-        #ifndef QT_VERSION\n+        #ifndef QT_VERSION OR QT_VERSION_STR\n         #  include <QtCore/qglobal.h>\n         #endif\n       ]],\n@@ -311,88 +317,203 @@ AC_DEFUN([_BITCOIN_QT_IS_STATIC],[\n       [bitcoin_cv_static_qt=yes],\n       [bitcoin_cv_static_qt=no])\n     ])\n+  if test \"x$bitcoin_cv_static_qt\" = xyes; then\n+    AC_DEFINE(QT_STATICPLUGIN, 1, [Define this symbol for static Qt plugins])\n+  fi\n ])\n \n-dnl Internal. Check if the link-requirements for a static plugin are met.\n-dnl\n-dnl _BITCOIN_QT_CHECK_STATIC_PLUGIN(PLUGIN, LIBRARIES)\n-dnl --------------------------------------------------\n-dnl\n+dnl Internal. Check if the link-requirements for static plugins are met.\n dnl Requires: INCLUDES and LIBS must be populated as necessary.\n-dnl Inputs: $1: A static plugin name.\n+dnl Inputs: $1: A series of Q_IMPORT_PLUGIN().\n dnl Inputs: $2: The libraries that resolve $1.\n dnl Output: QT_LIBS is prepended or configure exits.\n-AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGIN], [\n-  AC_MSG_CHECKING([for $1 ($2)])\n+AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_PLUGINS],[\n+  AC_MSG_CHECKING(for static Qt plugins: $2)\n   CHECK_STATIC_PLUGINS_TEMP_LIBS=\"$LIBS\"\n-  LIBS=\"$2${qt_lib_suffix} $QT_LIBS $LIBS\"\n+  LIBS=\"$2 $QT_LIBS $LIBS\"\n   AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n-      #include <QtPlugin>\n-      Q_IMPORT_PLUGIN($1)\n-    ]])],\n-    [AC_MSG_RESULT([yes]); QT_LIBS=\"$2${qt_lib_suffix} $QT_LIBS\"],\n-    [AC_MSG_RESULT([no]); BITCOIN_QT_FAIL([$1 not found.])])\n+    #define QT_STATICPLUGIN\n+    #include <QtPlugin>\n+    $1]],\n+    [[return 0;]])],\n+    [AC_MSG_RESULT(yes); QT_LIBS=\"$2 $QT_LIBS\"],\n+    [AC_MSG_RESULT(no); BITCOIN_QT_FAIL(Could not resolve: $2)])\n   LIBS=\"$CHECK_STATIC_PLUGINS_TEMP_LIBS\"\n ])\n \n-dnl Internal. Check Qt static libs with PKG_CHECK_MODULES.\n-dnl\n-dnl _BITCOIN_QT_CHECK_STATIC_LIBS\n-dnl -----------------------------\n-dnl\n-dnl Outputs: QT_LIBS is prepended.\n-AC_DEFUN([_BITCOIN_QT_CHECK_STATIC_LIBS], [\n-  PKG_CHECK_MODULES([QT_ACCESSIBILITY], [${qt_lib_prefix}AccessibilitySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_ACCESSIBILITY_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_DEVICEDISCOVERY], [${qt_lib_prefix}DeviceDiscoverySupport${qt_lib_suffix}], [QT_LIBS=\"$QT_DEVICEDISCOVERY_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_EDID], [${qt_lib_prefix}EdidSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EDID_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_EVENTDISPATCHER], [${qt_lib_prefix}EventDispatcherSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_EVENTDISPATCHER_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_FB], [${qt_lib_prefix}FbSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FB_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_FONTDATABASE], [${qt_lib_prefix}FontDatabaseSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_FONTDATABASE_LIBS $QT_LIBS\"])\n-  PKG_CHECK_MODULES([QT_THEME], [${qt_lib_prefix}ThemeSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_THEME_LIBS $QT_LIBS\"])\n-  if test \"x$TARGET_OS\" = xlinux; then\n-    PKG_CHECK_MODULES([QT_INPUT], [${qt_lib_prefix}InputSupport], [QT_LIBS=\"$QT_INPUT_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_XCBQPA], [${qt_lib_prefix}XcbQpa], [QT_LIBS=\"$QT_XCBQPA_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xdarwin; then\n-    PKG_CHECK_MODULES([QT_CLIPBOARD], [${qt_lib_prefix}ClipboardSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_CLIPBOARD_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_GRAPHICS], [${qt_lib_prefix}GraphicsSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_GRAPHICS_LIBS $QT_LIBS\"])\n-    PKG_CHECK_MODULES([QT_SERVICE], [${qt_lib_prefix}ServiceSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_SERVICE_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xwindows; then\n-    PKG_CHECK_MODULES([QT_WINDOWSUIAUTOMATION], [${qt_lib_prefix}WindowsUIAutomationSupport${qt_lib_suffix}], [QT_LIBS=\"$QT_WINDOWSUIAUTOMATION_LIBS $QT_LIBS\"])\n-  elif test \"x$TARGET_OS\" = xandroid; then\n-    PKG_CHECK_MODULES([QT_EGL], [${qt_lib_prefix}EglSupport], [QT_LIBS=\"$QT_EGL_LIBS $QT_LIBS\"])\n-  fi\n+dnl Internal. Find paths necessary for linking qt static plugins\n+dnl Inputs: qt_plugin_path. optional.\n+dnl Outputs: QT_LIBS is appended\n+AC_DEFUN([_BITCOIN_QT_FIND_STATIC_PLUGINS],[\n+    if test \"x$qt_plugin_path\" != x; then\n+      QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms\"\n+      if test -d \"$qt_plugin_path/accessible\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/accessible\"\n+      fi\n+      if test -d \"$qt_plugin_path/platforms/android\"; then\n+        QT_LIBS=\"$QT_LIBS -L$qt_plugin_path/platforms/android -lqtfreetype -lEGL\"\n+      fi\n+     if test \"x$use_pkgconfig\" = xyes; then\n+     : dnl\n+     m4_ifdef([PKG_CHECK_MODULES],[\n+       if test x$bitcoin_cv_qt58 = xno; then\n+         PKG_CHECK_MODULES([QTPLATFORM], [Qt5PlatformSupport], [QT_LIBS=\"$QTPLATFORM_LIBS $QT_LIBS\"])\n+       else\n+         PKG_CHECK_MODULES([QTFONTDATABASE], [Qt5FontDatabaseSupport], [QT_LIBS=\"-lQt5FontDatabaseSupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTEVENTDISPATCHER], [Qt5EventDispatcherSupport], [QT_LIBS=\"-lQt5EventDispatcherSupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTTHEME], [Qt5ThemeSupport], [QT_LIBS=\"-lQt5ThemeSupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTDEVICEDISCOVERY], [Qt5DeviceDiscoverySupport], [QT_LIBS=\"-lQt5DeviceDiscoverySupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTACCESSIBILITY], [Qt5AccessibilitySupport], [QT_LIBS=\"-lQt5AccessibilitySupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTFB], [Qt5FbSupport], [QT_LIBS=\"-lQt5FbSupport $QT_LIBS\"])\n+                fi\n+       if test \"x$TARGET_OS\" = xlinux; then\n+         PKG_CHECK_MODULES([QTXCBQPA], [Qt5XcbQpa], [QT_LIBS=\"$QTXCBQPA_LIBS $QT_LIBS\"])\n+       elif test \"x$TARGET_OS\" = xdarwin; then\n+         PKG_CHECK_MODULES([QTCLIPBOARD], [Qt5ClipboardSupport], [QT_LIBS=\"-lQt5ClipboardSupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTGRAPHICS], [Qt5GraphicsSupport], [QT_LIBS=\"-lQt5GraphicsSupport $QT_LIBS\"])\n+         PKG_CHECK_MODULES([QTCGL], [Qt5CglSupport], [QT_LIBS=\"-lQt5CglSupport $QT_LIBS\"])\n+       fi\n+     ])\n+     else\n+       if test \"x$TARGET_OS\" = xwindows; then\n+         AC_CACHE_CHECK(for Qt >= 5.6, bitcoin_cv_need_platformsupport,[\n+           AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+               #include <QtCore/qconfig.h>\n+               #ifndef QT_VERSION\n+               #  include <QtCore/qglobal.h>\n+               #endif\n+             ]],\n+             [[\n+               #if QT_VERSION < 0x050600 || QT_VERSION_MINOR < 6\n+               choke\n+               #endif\n+             ]])],\n+           [bitcoin_cv_need_platformsupport=yes],\n+           [bitcoin_cv_need_platformsupport=no])\n+         ])\n+         if test \"x$bitcoin_cv_need_platformsupport\" = xyes; then\n+           if test x$bitcoin_cv_qt58 = xno; then\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}PlatformSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXPlatformSupport not found)))\n+           else\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}FontDatabaseSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXFontDatabaseSupport not found)))\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}EventDispatcherSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXEventDispatcherSupport not found)))\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}ThemeSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXThemeSupport not found)))\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}FbSupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXFbSupport not found)))\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}DeviceDiscoverySupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXDeviceDiscoverySupport not found)))\n+             BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}AccessibilitySupport],[main],,BITCOIN_QT_FAIL(lib$QT_LIB_PREFIXAccessibilitySupport not found)))\n+             QT_LIBS=\"$QT_LIBS -lversion -ldwmapi -luxtheme\"\n+           fi\n+         fi\n+       fi\n+     fi\n+   fi\n ])\n \n dnl Internal. Find Qt libraries using pkg-config.\n-dnl\n-dnl _BITCOIN_QT_FIND_LIBS\n-dnl ---------------------\n-dnl\n+dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to check\n+dnl         first.\n+dnl Inputs: $1: If bitcoin_qt_want_version is \"auto\", check for this version\n+dnl         first.\n dnl Outputs: All necessary QT_* variables are set.\n dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n-AC_DEFUN([_BITCOIN_QT_FIND_LIBS],[\n-  BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_CORE], [${qt_lib_prefix}Core${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_CORE_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_CORE_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Core${qt_lib_suffix} $qt_version not found])])\n+AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITH_PKGCONFIG],[\n+  m4_ifdef([PKG_CHECK_MODULES],[\n+    QT_LIB_PREFIX=Qt5\n+    qt5_modules=\"Qt5Core Qt5Gui Qt5Network Qt5Widgets\"\n+    BITCOIN_QT_CHECK([\n+      PKG_CHECK_MODULES([QT5], [$qt5_modules], [QT_INCLUDES=\"$QT5_CFLAGS\"; QT_LIBS=\"$QT5_LIBS\" have_qt=yes],[have_qt=no])\n+\n+      if test \"x$have_qt\" != xyes; then\n+        have_qt=no\n+        BITCOIN_QT_FAIL([Qt dependencies not found])\n+      fi\n+    ])\n+    BITCOIN_QT_CHECK([\n+      PKG_CHECK_MODULES([QT_TEST], [${QT_LIB_PREFIX}Test], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+      if test \"x$use_dbus\" != xno; then\n+        PKG_CHECK_MODULES([QT_DBUS], [${QT_LIB_PREFIX}DBus], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+      fi\n+    ])\n   ])\n+  true; dnl\n+])\n+\n+dnl Internal. Find Qt libraries without using pkg-config. Version is deduced\n+dnl from the discovered headers.\n+dnl Inputs: bitcoin_qt_want_version (from --with-gui=). The version to use.\n+dnl         If \"auto\", the version will be discovered by _BITCOIN_QT_CHECK_QT5.\n+dnl Outputs: All necessary QT_* variables are set.\n+dnl Outputs: have_qt_test and have_qt_dbus are set (if applicable) to yes|no.\n+AC_DEFUN([_BITCOIN_QT_FIND_LIBS_WITHOUT_PKGCONFIG],[\n+  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+  TEMP_CXXFLAGS=\"$CXXFLAGS\"\n+  CXXFLAGS=\"$PIC_FLAGS $CXXFLAGS\"\n+  TEMP_LIBS=\"$LIBS\"\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_GUI], [${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_GUI_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_GUI_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Gui${qt_lib_suffix} $qt_version not found])])\n+    if test \"x$qt_include_path\" != x; then\n+      QT_INCLUDES=\"-I$qt_include_path -I$qt_include_path/QtCore -I$qt_include_path/QtGui -I$qt_include_path/QtWidgets -I$qt_include_path/QtNetwork -I$qt_include_path/QtTest -I$qt_include_path/QtDBus\"\n+      CPPFLAGS=\"$QT_INCLUDES $CPPFLAGS\"\n+    fi\n   ])\n+\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QtPlugin],,BITCOIN_QT_FAIL(QtCore headers missing))])\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QApplication],, BITCOIN_QT_FAIL(QtGui headers missing))])\n+  BITCOIN_QT_CHECK([AC_CHECK_HEADER([QLocalSocket],, BITCOIN_QT_FAIL(QtNetwork headers missing))])\n+\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_WIDGETS], [${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_WIDGETS_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_WIDGETS_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Widgets${qt_lib_suffix} $qt_version not found])])\n+    if test \"x$bitcoin_qt_want_version\" = xauto; then\n+      _BITCOIN_QT_CHECK_QT5\n+      _BITCOIN_QT_CHECK_QT58\n+    fi\n+    QT_LIB_PREFIX=Qt5\n   ])\n+\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_NETWORK], [${qt_lib_prefix}Network${qt_lib_suffix} $qt_version], [QT_INCLUDES=\"$QT_NETWORK_CFLAGS $QT_INCLUDES\" QT_LIBS=\"$QT_NETWORK_LIBS $QT_LIBS\"],\n-                      [BITCOIN_QT_FAIL([${qt_lib_prefix}Network${qt_lib_suffix} $qt_version not found])])\n+    LIBS=\n+    if test \"x$qt_lib_path\" != x; then\n+      LIBS=\"$LIBS -L$qt_lib_path\"\n+    fi\n+\n+    if test \"x$TARGET_OS\" = xwindows; then\n+      AC_CHECK_LIB([imm32],      [main],, BITCOIN_QT_FAIL(libimm32 not found))\n+    fi\n   ])\n \n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([z] ,[main],,AC_MSG_WARN([zlib not found. Assuming qt has it built-in])))\n+  if test x$bitcoin_cv_qt58 = xno; then\n+    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre16_exec], [qtpcre pcre16],,AC_MSG_WARN([libpcre16 not found. Assuming qt has it built-in])))\n+  else\n+    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([png_error] ,[qtlibpng png],,AC_MSG_WARN([libpng not found. Assuming qt has it built-in])))\n+    BITCOIN_QT_CHECK(AC_SEARCH_LIBS([pcre2_match_16], [qtpcre2 libqtpcre2],,AC_MSG_WARN([libqtpcre2 not found. Assuming qt has it built-in])))\n+  fi\n+  BITCOIN_QT_CHECK(AC_SEARCH_LIBS([hb_ot_tags_from_script] ,[qtharfbuzzng qtharfbuzz harfbuzz],,AC_MSG_WARN([libharfbuzz not found. Assuming qt has it built-in or support is disabled])))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Core]   ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Core not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Gui]    ,[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Gui not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Network],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Network not found)))\n+  BITCOIN_QT_CHECK(AC_CHECK_LIB([${QT_LIB_PREFIX}Widgets],[main],,BITCOIN_QT_FAIL(lib${QT_LIB_PREFIX}Widgets not found)))\n+  QT_LIBS=\"$LIBS\"\n+  LIBS=\"$TEMP_LIBS\"\n+\n   BITCOIN_QT_CHECK([\n-    PKG_CHECK_MODULES([QT_TEST], [${qt_lib_prefix}Test${qt_lib_suffix} $qt_version], [QT_TEST_INCLUDES=\"$QT_TEST_CFLAGS\"; have_qt_test=yes], [have_qt_test=no])\n+    LIBS=\n+    if test \"x$qt_lib_path\" != x; then\n+      LIBS=\"-L$qt_lib_path\"\n+    fi\n+    AC_CHECK_LIB([${QT_LIB_PREFIX}Test],      [main],, have_qt_test=no)\n+    AC_CHECK_HEADER([QTest],, have_qt_test=no)\n+    QT_TEST_LIBS=\"$LIBS\"\n     if test \"x$use_dbus\" != xno; then\n-      PKG_CHECK_MODULES([QT_DBUS], [${qt_lib_prefix}DBus $qt_version], [QT_DBUS_INCLUDES=\"$QT_DBUS_CFLAGS\"; have_qt_dbus=yes], [have_qt_dbus=no])\n+      LIBS=\n+      if test \"x$qt_lib_path\" != x; then\n+        LIBS=\"-L$qt_lib_path\"\n+      fi\n+      AC_CHECK_LIB([${QT_LIB_PREFIX}DBus],      [main],, have_qt_dbus=no)\n+      AC_CHECK_HEADER([QtDBus],, have_qt_dbus=no)\n+      QT_DBUS_LIBS=\"$LIBS\"\n     fi\n   ])\n+  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  CXXFLAGS=\"$TEMP_CXXFLAGS\"\n+  LIBS=\"$TEMP_LIBS\"\n ])"
      },
      {
        "sha": "1a6922deca485d466bc042f26bc351c960f12d8d",
        "filename": "build-aux/m4/bitcoin_runtime_lib.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 42,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/build-aux/m4/bitcoin_runtime_lib.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/build-aux/m4/bitcoin_runtime_lib.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/bitcoin_runtime_lib.m4?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,42 +0,0 @@\n-# On some platforms clang builtin implementations\n-# require compiler-rt as a runtime library to use.\n-#\n-# See:\n-# - https://bugs.llvm.org/show_bug.cgi?id=28629\n-\n-m4_define([_CHECK_RUNTIME_testbody], [[\n-  bool f(long long x, long long y, long long* p)\n-  {\n-    return __builtin_mul_overflow(x, y, p);\n-  }\n-  int main() { return 0; }\n-]])\n-\n-AC_DEFUN([CHECK_RUNTIME_LIB], [\n-\n-  AC_LANG_PUSH([C++])\n-\n-  AC_MSG_CHECKING([for __builtin_mul_overflow])\n-  AC_LINK_IFELSE(\n-    [AC_LANG_SOURCE([_CHECK_RUNTIME_testbody])],\n-    [\n-      AC_MSG_RESULT([yes])\n-      AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW], [1], [Define if you have a working __builtin_mul_overflow])\n-    ],\n-    [\n-      ax_check_save_flags=\"$LDFLAGS\"\n-      LDFLAGS=\"$LDFLAGS --rtlib=compiler-rt -lgcc_s\"\n-      AC_LINK_IFELSE(\n-        [AC_LANG_SOURCE([_CHECK_RUNTIME_testbody])],\n-        [\n-          AC_MSG_RESULT([yes, with additional linker flags])\n-          RUNTIME_LDFLAGS=\"--rtlib=compiler-rt -lgcc_s\"\n-          AC_DEFINE([HAVE_BUILTIN_MUL_OVERFLOW], [1], [Define if you have a working __builtin_mul_overflow])\n-        ],\n-        [AC_MSG_RESULT([no])])\n-      LDFLAGS=\"$ax_check_save_flags\"\n-    ])\n-\n-  AC_LANG_POP\n-  AC_SUBST([RUNTIME_LDFLAGS])\n-])"
      },
      {
        "sha": "75c43f9a92d3d6ac2a5d1aee89e97bab7a89f545",
        "filename": "build-aux/m4/l_atomic.m4",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/l_atomic.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build-aux/m4/l_atomic.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_atomic.m4?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -12,17 +12,8 @@ dnl warranty.\n m4_define([_CHECK_ATOMIC_testbody], [[\n   #include <atomic>\n   #include <cstdint>\n-  #include <chrono>\n-\n-  using namespace std::chrono_literals;\n \n   int main() {\n-    std::atomic<bool> lock{true};\n-    std::atomic_exchange(&lock, false);\n-\n-    std::atomic<std::chrono::seconds> t{0s};\n-    t.store(2s);\n-\n     std::atomic<int64_t> a{};\n \n     int64_t v = 5;"
      },
      {
        "sha": "38923a98fc966a932118c550e05ad3de91bf2cb2",
        "filename": "build-aux/m4/l_socket.m4",
        "status": "removed",
        "additions": 0,
        "deletions": 36,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/build-aux/m4/l_socket.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/build-aux/m4/l_socket.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/l_socket.m4?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,36 +0,0 @@\n-# Illumos/SmartOS requires linking with -lsocket if\n-# using getifaddrs & freeifaddrs\n-\n-m4_define([_CHECK_SOCKET_testbody], [[\n-  #include <sys/types.h>\n-  #include <ifaddrs.h>\n-\n-  int main() {\n-    struct ifaddrs *ifaddr;\n-    getifaddrs(&ifaddr);\n-    freeifaddrs(ifaddr);\n-  }\n-]])\n-\n-AC_DEFUN([CHECK_SOCKET], [\n-\n-  AC_LANG_PUSH(C++)\n-\n-  AC_MSG_CHECKING([whether ifaddrs funcs can be used without link library])\n-\n-  AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_SOCKET_testbody])],[\n-      AC_MSG_RESULT([yes])\n-    ],[\n-      AC_MSG_RESULT([no])\n-      LIBS=\"$LIBS -lsocket\"\n-      AC_MSG_CHECKING([whether getifaddrs needs -lsocket])\n-      AC_LINK_IFELSE([AC_LANG_SOURCE([_CHECK_SOCKET_testbody])],[\n-          AC_MSG_RESULT([yes])\n-        ],[\n-          AC_MSG_RESULT([no])\n-          AC_MSG_FAILURE([cannot figure out how to use getifaddrs])\n-        ])\n-    ])\n-\n-  AC_LANG_POP\n-])"
      },
      {
        "sha": "3e71c7b8d3f89d36e17b4a287362199d6bb883bc",
        "filename": "build_msvc/.gitignore",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/.gitignore?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -24,4 +24,3 @@ libtest_util/libtest_util.vcxproj\n */Win32\n libbitcoin_qt/QtGeneratedFiles/*\n test_bitcoin-qt/QtGeneratedFiles/*\n-vcpkg_installed\n\\ No newline at end of file"
      },
      {
        "sha": "a489fb36b29459a86909f2c407fcc524427af404",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 55,
        "deletions": 48,
        "changes": 103,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,84 +3,91 @@ Building Bitcoin Core with Visual Studio\n \n Introduction\n ---------------------\n-Solution and project files to build Bitcoin Core with `msbuild` or Visual Studio can be found in the `build_msvc` directory. The build has been tested with Visual Studio 2019 (building with earlier versions of Visual Studio should not be expected to work).\n+Solution and project files to build the Bitcoin Core applications `msbuild` or Visual Studio can be found in the build_msvc directory. The build has been tested with Visual Studio 2017 and 2019.\n \n-To build Bitcoin Core from the command-line, it is sufficient to only install the Visual Studio Build Tools component.\n+Building with Visual Studio is an alternative to the Linux based [cross-compiler build](https://github.com/bitcoin/bitcoin/blob/master/doc/build-windows.md).\n \n-Building with Visual Studio is an alternative to the Linux based [cross-compiler build](../doc/build-windows.md).\n+Quick Start\n+---------------------\n+The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n \n+```\n+vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n+vcpkg integrate install\n+py -3 build_msvc\\msvc-autogen.py\n+msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n+```\n \n-Prerequisites\n+Dependencies\n ---------------------\n-To build [dependencies](../doc/dependencies.md) (except for [Qt](#qt)),\n-the default approach is to use the [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) package manager from Microsoft:\n+A number of [open source libraries](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) are required in order to be able to build Bitcoin Core.\n \n-1. [Install](https://vcpkg.io/en/getting-started.html) vcpkg.\n+Options for installing the dependencies in a Visual Studio compatible manner are:\n \n-2. By default, vcpkg makes both `release` and `debug` builds for each package.\n-To save build time and disk space, one could skip `debug` builds (example uses PowerShell):\n-```powershell\n+- Use Microsoft's [vcpkg](https://docs.microsoft.com/en-us/cpp/vcpkg) to download the source packages and build locally. This is the recommended approach.\n+- Download the source code, build each dependency, add the required include paths, link libraries and binary tools to the Visual Studio project files.\n+- Use [nuget](https://www.nuget.org/) packages with the understanding that any binary files have been compiled by an untrusted third party.\n \n-Add-Content -Path \"vcpkg\\triplets\\x64-windows-static.cmake\" -Value \"set(VCPKG_BUILD_TYPE release)\"\n-```\n+The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/dependencies.md) required for building are:\n+\n+- Berkeley DB\n+- Boost\n+- DoubleConversion\n+- libevent\n+- Qt5\n+- ZeroMQ\n \n Qt\n ---------------------\n-To build Bitcoin Core with the GUI, a static build of Qt is required.\n-\n-1. Download a single ZIP archive of Qt source code from https://download.qt.io/official_releases/qt/ (e.g., [`qt-everywhere-src-5.12.11.zip`](https://download.qt.io/official_releases/qt/5.12/5.12.11/single/qt-everywhere-src-5.12.11.zip)), and expand it into a dedicated folder. The following instructions assume that this folder is `C:\\dev\\qt-source`.\n-\n-2. Open \"x64 Native Tools Command Prompt for VS 2019\", and input the following commands:\n-```cmd\n-cd C:\\dev\\qt-source\n-mkdir build\n-cd build\n-..\\configure -release -silent -opensource -confirm-license -opengl desktop -no-shared -static -static-runtime -mp -qt-zlib -qt-pcre -qt-libpng -no-libjpeg -nomake examples -nomake tests -nomake tools -no-dbus -no-libudev -no-icu -no-gtk -no-opengles3 -no-angle -no-sql-sqlite -no-sql-odbc -no-sqlite -no-libudev -no-vulkan -skip qt3d -skip qtactiveqt -skip qtandroidextras -skip qtcanvas3d -skip qtcharts -skip qtconnectivity -skip qtdatavis3d -skip qtdeclarative -skip qtdoc -skip qtgamepad -skip qtgraphicaleffects -skip qtimageformats -skip qtlocation -skip qtmacextras -skip qtmultimedia -skip qtnetworkauth -skip qtpurchasing -skip qtquickcontrols -skip qtquickcontrols2 -skip qtscript -skip qtscxml -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtvirtualkeyboard -skip qtwayland -skip qtwebchannel -skip qtwebengine -skip qtwebsockets -skip qtwebview -skip qtx11extras -skip qtxmlpatterns -no-openssl -no-feature-sql -no-feature-sqlmodel -prefix C:\\Qt_static\n-nmake\n-nmake install\n-```\n+In order to build the Bitcoin Core a static build of Qt is required. The runtime library version (e.g. v141, v142) and platform type (x86 or x64) must also match.\n \n-One could speed up building with [`jom`](https://wiki.qt.io/Jom), a replacement for `nmake` which makes use of all CPU cores.\n+Some prebuilt x64 versions of Qt can be downloaded from [here](https://github.com/sipsorcery/qt_win_binary/releases). Please be aware these downloads are NOT officially sanctioned by Bitcoin Core and are provided for developer convenience only. They should NOT be used for builds that will be used in a production environment or with real funds.\n \n-To build Bitcoin Core without Qt, unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n+To determine which Qt prebuilt version to download open the `.appveyor.yml` file and note the `QT_DOWNLOAD_URL`. When extracting the zip file the destination path must be set to `C:\\`. This is due to the way that Qt includes, libraries and tools use internal paths.\n \n+To build Bitcoin Core without Qt unload or disable the `bitcoin-qt`, `libbitcoin_qt` and `test_bitcoin-qt` projects.\n \n Building\n ---------------------\n-1. Use Python to generate `*.vcxproj` from Makefile:\n+The instructions below use `vcpkg` to install the dependencies.\n+\n+- Install [`vcpkg`](https://github.com/Microsoft/vcpkg).\n+- Install the required packages (replace x64 with x86 as required). The list of required packages can be found in the `build_msvc\\vcpkg-packages.txt` file. The PowerShell command below will work if run from the repository root directory and `vcpkg` is in the path. Alternatively the contents of the packages text file can be pasted in place of the `Get-Content` cmdlet.\n \n ```\n-PS >py -3 msvc-autogen.py\n+PS >.\\vcpkg install --triplet x64-windows-static $(Get-Content -Path build_msvc\\vcpkg-packages.txt).split()\n+PS >.\\vcpkg integrate install\n ```\n \n-2. An optional step is to adjust the settings in the `build_msvc` directory and the `common.init.vcxproj` file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set. To specify a non-default path to a static Qt package directory, use the `QTBASEDIR` environment variable.\n+- Use Python to generate `*.vcxproj` from Makefile\n \n-3. To build from the command-line with the Visual Studio 2019 toolchain use:\n-\n-```cmd\n-msbuild -property:Configuration=Release -maxCpuCount -verbosity:minimal bitcoin.sln\n+```\n+PS >py -3 msvc-autogen.py\n ```\n \n-Alternatively, open the `build_msvc/bitcoin.sln` file in Visual Studio 2019.\n-\n-Security\n----------------------\n-[Base address randomization](https://docs.microsoft.com/en-us/cpp/build/reference/dynamicbase-use-address-space-layout-randomization?view=msvc-160) is used to make Bitcoin Core more secure. When building Bitcoin using the `build_msvc` process base address randomization can be disabled by editing `common.init.vcproj` to change `RandomizedBaseAddress` from `true` to `false` and then rebuilding the project.\n+- An optional step is to adjust the settings in the build_msvc directory and the common.init.vcxproj file. This project file contains settings that are common to all projects such as the runtime library version and target Windows SDK version. The Qt directories can also be set.\n \n-To check if `bitcoind` has `RandomizedBaseAddress` enabled or disabled run\n+- To build from the command line with the Visual Studio 2017 toolchain use:\n \n ```\n-.\\dumpbin.exe /headers src/bitcoind.exe\n+msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /p:PlatformToolset=v141 /t:build\n ```\n \n-If is it enabled then in the output `Dynamic base` will be listed in the `DLL characteristics` under `OPTIONAL HEADER VALUES` as shown below\n+- To build from the command line with the Visual Studio 2019 toolchain use:\n \n ```\n-            8160 DLL characteristics\n-                   High Entropy Virtual Addresses\n-                   Dynamic base\n-                   NX compatible\n-                   Terminal Server Aware\n+msbuild /m bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n ```\n \n-This may not disable all stack randomization as versions of windows employ additional stack randomization protections. These protections must be turned off in the OS configuration.\n\\ No newline at end of file\n+- Alternatively open the `build_msvc\\bitcoin.sln` file in Visual Studio.\n+\n+AppVeyor\n+---------------------\n+The .appveyor.yml in the root directory is suitable to perform builds on [AppVeyor](https://www.appveyor.com/) Continuous Integration servers. The simplest way to perform an AppVeyor build is to fork Bitcoin Core and then configure a new AppVeyor Project pointing to the forked repository.\n+\n+For safety reasons the Bitcoin Core .appveyor.yml file has the artifact options disabled. The build will be performed but no executable files will be available. To enable artifacts on a forked repository uncomment the lines shown below:\n+\n+```\n+    #- 7z a bitcoin-%APPVEYOR_BUILD_VERSION%.zip %APPVEYOR_BUILD_FOLDER%\\build_msvc\\%platform%\\%configuration%\\*.exe\n+    #- path: bitcoin-%APPVEYOR_BUILD_VERSION%.zip\n+```"
      },
      {
        "sha": "17cd31a52ef27db296d34fd810a98d7dc515ad61",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -9,7 +9,6 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\qt\\main.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\init\\bitcoin-qt.cpp\" />\n     <ResourceCompile Include=\"..\\..\\src\\qt\\res\\bitcoin-qt-res.rc\" />\n   </ItemGroup>\n   <ItemGroup>\n@@ -56,9 +55,8 @@\n       <AdditionalIncludeDirectories>$(QtIncludes);%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n-      <SubSystem>Windows</SubSystem>\n       <AdditionalDependencies>$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-      <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n+      <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n     <ResourceCompile>\n       <AdditionalIncludeDirectories>..\\..\\src;</AdditionalIncludeDirectories>"
      },
      {
        "sha": "8a0964824bcd8ebb4faffaf330768fc8892b6345",
        "filename": "build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "status": "removed",
        "additions": 0,
        "deletions": 37,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/build_msvc/bitcoin-util/bitcoin-util.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-util/bitcoin-util.vcxproj?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,37 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"utf-8\"?>\n-<Project DefaultTargets=\"Build\" xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n-  <Import Project=\"..\\common.init.vcxproj\" />\n-  <PropertyGroup Label=\"Globals\">\n-    <ProjectGuid>{57A04EC9-542A-4E40-83D0-AC3BE1F36805}</ProjectGuid>\n-  </PropertyGroup>\n-  <PropertyGroup Label=\"Configuration\">\n-    <ConfigurationType>Application</ConfigurationType>\n-    <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n-  </PropertyGroup>\n-  <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\bitcoin-util.cpp\" />\n-  </ItemGroup>\n-  <ItemGroup>\n-    <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n-      <Project>{2b384fa8-9ee1-4544-93cb-0d733c25e8ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_common\\libbitcoin_common.vcxproj\">\n-      <Project>{7c87e378-df58-482e-aa2f-1bc129bc19ce}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_crypto\\libbitcoin_crypto.vcxproj\">\n-      <Project>{6190199c-6cf4-4dad-bfbd-93fa72a760c1}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libbitcoin_util\\libbitcoin_util.vcxproj\">\n-      <Project>{b53a5535-ee9d-4c6f-9a26-f79ee3bc3754}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libunivalue\\libunivalue.vcxproj\">\n-      <Project>{5724ba7d-a09a-4ba8-800b-c4c1561b3d69}</Project>\n-    </ProjectReference>\n-    <ProjectReference Include=\"..\\libsecp256k1\\libsecp256k1.vcxproj\">\n-      <Project>{bb493552-3b8c-4a8c-bf69-a6e7a51d2ea6}</Project>\n-    </ProjectReference>\n-  </ItemGroup>\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n-  <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n-  <Import Project=\"..\\common.vcxproj\" />\n-</Project>"
      },
      {
        "sha": "40c5db5522881ef14b9090009e50d9b90b394395",
        "filename": "build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-wallet/bitcoin-wallet.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -10,9 +10,6 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\bitcoin-wallet.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\init\\bitcoin-wallet.cpp\">\n-      <ObjectFileName>$(IntDir)init_bitcoin-wallet.obj</ObjectFileName>\n-    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      },
      {
        "sha": "5e9715451f5a9309ae2d4989cfed2e5ec337e929",
        "filename": "build_msvc/bitcoin.sln",
        "status": "modified",
        "additions": 94,
        "deletions": 6,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin.sln",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin.sln",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin.sln?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -32,8 +32,6 @@ Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bench_bitcoin\", \"bench_bitc\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-tx\", \"bitcoin-tx\\bitcoin-tx.vcxproj\", \"{D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}\"\n EndProject\n-Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-util\", \"bitcoin-util\\bitcoin-util.vcxproj\", \"{57A04EC9-542A-4E40-83D0-AC3BE1F36805}\"\n-EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"bitcoin-wallet\", \"bitcoin-wallet\\bitcoin-wallet.vcxproj\", \"{84DE8790-EDE3-4483-81AC-C32F15E861F4}\"\n EndProject\n Project(\"{8BC9CEB8-8B4A-11D0-8D11-00A0C91BC942}\") = \"libbitcoin_wallet_tool\", \"libbitcoin_wallet_tool\\libbitcoin_wallet_tool.vcxproj\", \"{F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}\"\n@@ -53,105 +51,195 @@ EndProject\n Global\n     GlobalSection(SolutionConfigurationPlatforms) = preSolution\n         Debug|x64 = Debug|x64\n+        Debug|x86 = Debug|x86\n         Release|x64 = Release|x64\n+        Release|x86 = Release|x86\n     EndGlobalSection\n     GlobalSection(ProjectConfigurationPlatforms) = postSolution\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.ActiveCfg = Debug|x64\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x64.Build.0 = Debug|x64\n+        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.ActiveCfg = Debug|Win32\n+        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Debug|x86.Build.0 = Debug|Win32\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.ActiveCfg = Release|x64\n         {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x64.Build.0 = Release|x64\n+        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.ActiveCfg = Release|Win32\n+        {2B384FA8-9EE1-4544-93CB-0D733C25E8CE}.Release|x86.Build.0 = Release|Win32\n         {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.ActiveCfg = Debug|x64\n         {E78473E9-B850-456C-9120-276301E04C06}.Debug|x64.Build.0 = Debug|x64\n+        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.ActiveCfg = Debug|Win32\n+        {E78473E9-B850-456C-9120-276301E04C06}.Debug|x86.Build.0 = Debug|Win32\n         {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.ActiveCfg = Release|x64\n         {E78473E9-B850-456C-9120-276301E04C06}.Release|x64.Build.0 = Release|x64\n+        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.ActiveCfg = Release|Win32\n+        {E78473E9-B850-456C-9120-276301E04C06}.Release|x86.Build.0 = Release|Win32\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.ActiveCfg = Debug|x64\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x64.Build.0 = Debug|x64\n+        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.ActiveCfg = Debug|Win32\n+        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Debug|x86.Build.0 = Debug|Win32\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.ActiveCfg = Release|x64\n         {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x64.Build.0 = Release|x64\n+        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.ActiveCfg = Release|Win32\n+        {D4513DDF-6013-44DC-ADCC-12EAF6D1F038}.Release|x86.Build.0 = Release|Win32\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.ActiveCfg = Debug|x64\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x64.Build.0 = Debug|x64\n+        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.ActiveCfg = Debug|Win32\n+        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Debug|x86.Build.0 = Debug|Win32\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.ActiveCfg = Release|x64\n         {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x64.Build.0 = Release|x64\n+        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.ActiveCfg = Release|Win32\n+        {B53A5535-EE9D-4C6F-9A26-F79EE3BC3754}.Release|x86.Build.0 = Release|Win32\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.ActiveCfg = Debug|x64\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x64.Build.0 = Debug|x64\n+        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.ActiveCfg = Debug|Win32\n+        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Debug|x86.Build.0 = Debug|Win32\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.ActiveCfg = Release|x64\n         {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x64.Build.0 = Release|x64\n+        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.ActiveCfg = Release|Win32\n+        {7C87E378-DF58-482E-AA2F-1BC129BC19CE}.Release|x86.Build.0 = Release|Win32\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.ActiveCfg = Debug|x64\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x64.Build.0 = Debug|x64\n+        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.ActiveCfg = Debug|Win32\n+        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Debug|x86.Build.0 = Debug|Win32\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.ActiveCfg = Release|x64\n         {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x64.Build.0 = Release|x64\n+        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.ActiveCfg = Release|Win32\n+        {6190199C-6CF4-4DAD-BFBD-93FA72A760C1}.Release|x86.Build.0 = Release|Win32\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.ActiveCfg = Debug|x64\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x64.Build.0 = Debug|x64\n+        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.ActiveCfg = Debug|Win32\n+        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Debug|x86.Build.0 = Debug|Win32\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.ActiveCfg = Release|x64\n         {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x64.Build.0 = Release|x64\n+        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.ActiveCfg = Release|Win32\n+        {460FEE33-1FE1-483F-B3BF-931FF8E969A5}.Release|x86.Build.0 = Release|Win32\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.ActiveCfg = Debug|x64\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x64.Build.0 = Debug|x64\n+        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.ActiveCfg = Debug|Win32\n+        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Debug|x86.Build.0 = Debug|Win32\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.ActiveCfg = Release|x64\n         {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x64.Build.0 = Release|x64\n+        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.ActiveCfg = Release|Win32\n+        {5724BA7D-A09A-4BA8-800B-C4C1561B3D69}.Release|x86.Build.0 = Release|Win32\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.ActiveCfg = Debug|x64\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x64.Build.0 = Debug|x64\n+        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.ActiveCfg = Debug|Win32\n+        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Debug|x86.Build.0 = Debug|Win32\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.ActiveCfg = Release|x64\n         {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x64.Build.0 = Release|x64\n+        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.ActiveCfg = Release|Win32\n+        {93B86837-B543-48A5-A89B-7C87ABB77DF2}.Release|x86.Build.0 = Release|Win32\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.ActiveCfg = Debug|x64\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x64.Build.0 = Debug|x64\n+        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.ActiveCfg = Debug|Win32\n+        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Debug|x86.Build.0 = Debug|Win32\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.ActiveCfg = Release|x64\n         {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x64.Build.0 = Release|x64\n+        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.ActiveCfg = Release|Win32\n+        {792D487F-F14C-49FC-A9DE-3FC150F31C3F}.Release|x86.Build.0 = Release|Win32\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.ActiveCfg = Debug|x64\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x64.Build.0 = Debug|x64\n+        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.ActiveCfg = Debug|Win32\n+        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Debug|x86.Build.0 = Debug|Win32\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.ActiveCfg = Release|x64\n         {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x64.Build.0 = Release|x64\n+        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.ActiveCfg = Release|Win32\n+        {A56B73DB-D46D-4882-8374-1FE3FFA08F07}.Release|x86.Build.0 = Release|Win32\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.ActiveCfg = Debug|x64\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x64.Build.0 = Debug|x64\n+        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.ActiveCfg = Debug|Win32\n+        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Debug|x86.Build.0 = Debug|Win32\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.ActiveCfg = Release|x64\n         {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x64.Build.0 = Release|x64\n+        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.ActiveCfg = Release|Win32\n+        {0667528C-D734-4009-ADF9-C0D6C4A5A5A6}.Release|x86.Build.0 = Release|Win32\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.ActiveCfg = Debug|x64\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x64.Build.0 = Debug|x64\n+        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.ActiveCfg = Debug|Win32\n+        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Debug|x86.Build.0 = Debug|Win32\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.ActiveCfg = Release|x64\n         {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x64.Build.0 = Release|x64\n+        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.ActiveCfg = Release|Win32\n+        {0B2D7431-F876-4A58-87BF-F748338CD3BF}.Release|x86.Build.0 = Release|Win32\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.ActiveCfg = Debug|x64\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x64.Build.0 = Debug|x64\n+        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.ActiveCfg = Debug|Win32\n+        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Debug|x86.Build.0 = Debug|Win32\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.ActiveCfg = Release|x64\n         {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x64.Build.0 = Release|x64\n+        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.ActiveCfg = Release|Win32\n+        {1125654E-E1B2-4431-8B5C-62EA9A2FEECB}.Release|x86.Build.0 = Release|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.ActiveCfg = Debug|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x64.Build.0 = Debug|x64\n+        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.ActiveCfg = Debug|Win32\n+        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Debug|x86.Build.0 = Debug|Win32\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.ActiveCfg = Release|x64\n         {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x64.Build.0 = Release|x64\n-        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Debug|x64.ActiveCfg = Debug|x64\n-        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Debug|x64.Build.0 = Debug|x64\n-        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Release|x64.ActiveCfg = Release|x64\n-        {57A04EC9-542A-4E40-83D0-AC3BE1F36805}.Release|x64.Build.0 = Release|x64\n+        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.ActiveCfg = Release|Win32\n+        {D3022AF6-AD33-4CE3-B358-87CB6A1B29CF}.Release|x86.Build.0 = Release|Win32\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.ActiveCfg = Debug|x64\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x64.Build.0 = Debug|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Debug|x86.Build.0 = Debug|Win32\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.ActiveCfg = Release|x64\n         {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x64.Build.0 = Release|x64\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.ActiveCfg = Release|Win32\n+        {84DE8790-EDE3-4483-81AC-C32F15E861F4}.Release|x86.Build.0 = Release|Win32\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.ActiveCfg = Debug|x64\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x64.Build.0 = Debug|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.ActiveCfg = Debug|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Debug|x86.Build.0 = Debug|Win32\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.ActiveCfg = Release|x64\n         {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x64.Build.0 = Release|x64\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.ActiveCfg = Release|Win32\n+        {F91AC55E-6F5E-4C58-9AC5-B40DB7DEEF93}.Release|x86.Build.0 = Release|Win32\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.ActiveCfg = Debug|x64\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x64.Build.0 = Debug|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.ActiveCfg = Debug|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Debug|x86.Build.0 = Debug|Win32\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.ActiveCfg = Release|x64\n         {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x64.Build.0 = Release|x64\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.ActiveCfg = Release|Win32\n+        {BB493552-3B8C-4A8C-BF69-A6E7A51D2EA6}.Release|x86.Build.0 = Release|Win32\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.ActiveCfg = Debug|x64\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x64.Build.0 = Debug|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.ActiveCfg = Debug|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Debug|x86.Build.0 = Debug|Win32\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.ActiveCfg = Release|x64\n         {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x64.Build.0 = Release|x64\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.ActiveCfg = Release|Win32\n+        {18430FEF-6B61-4C53-B396-718E02850F1B}.Release|x86.Build.0 = Release|Win32\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.ActiveCfg = Debug|x64\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x64.Build.0 = Debug|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.ActiveCfg = Debug|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Debug|x86.Build.0 = Debug|Win32\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.ActiveCfg = Release|x64\n         {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x64.Build.0 = Release|x64\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.ActiveCfg = Release|Win32\n+        {2B4ABFF8-D1FD-4845-88C9-1F3C0A6512BF}.Release|x86.Build.0 = Release|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.ActiveCfg = Debug|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x64.Build.0 = Debug|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.ActiveCfg = Debug|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Debug|x86.Build.0 = Debug|Win32\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.ActiveCfg = Release|x64\n         {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x64.Build.0 = Release|x64\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.ActiveCfg = Release|Win32\n+        {7E99172D-7FF2-4CB6-B736-AC9B76ED412A}.Release|x86.Build.0 = Release|Win32\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.ActiveCfg = Debug|x64\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x64.Build.0 = Debug|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.ActiveCfg = Debug|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Debug|x86.Build.0 = Debug|Win32\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.ActiveCfg = Release|x64\n         {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x64.Build.0 = Release|x64\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.ActiveCfg = Release|Win32\n+        {868474FD-35F6-4400-8EED-30A33E7521D4}.Release|x86.Build.0 = Release|Win32\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x64.ActiveCfg = Debug|x64\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x64.Build.0 = Debug|x64\n+        {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x86.ActiveCfg = Debug|Win32\n+        {51201D5E-D939-4854-AE9D-008F03FF518E}.Debug|x86.Build.0 = Debug|Win32\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x64.ActiveCfg = Release|x64\n         {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x64.Build.0 = Release|x64\n+        {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x86.ActiveCfg = Release|Win32\n+        {51201D5E-D939-4854-AE9D-008F03FF518E}.Release|x86.Build.0 = Release|Win32\n     EndGlobalSection\n     GlobalSection(SolutionProperties) = preSolution\n         HideSolutionNode = FALSE"
      },
      {
        "sha": "884774b60081d3e732d5bacf3d7e1a91363a4a3d",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 170,
        "deletions": 31,
        "changes": 201,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,66 +1,75 @@\n-// Copyright (c) 2018-2020 The Bitcoin Core developers\n+// Copyright (c) 2018-2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #ifndef BITCOIN_BITCOIN_CONFIG_H\n #define BITCOIN_BITCOIN_CONFIG_H\n \n+/* Define if building universal (internal helper macro) */\n+/* #undef AC_APPLE_UNIVERSAL_BUILD */\n+\n /* Version Build */\n-#define CLIENT_VERSION_BUILD 0\n+#define CLIENT_VERSION_BUILD 1\n \n /* Version is release */\n-#define CLIENT_VERSION_IS_RELEASE false\n+#define CLIENT_VERSION_IS_RELEASE true\n \n /* Major version */\n-#define CLIENT_VERSION_MAJOR 22\n+#define CLIENT_VERSION_MAJOR 0\n \n /* Minor version */\n-#define CLIENT_VERSION_MINOR 99\n+#define CLIENT_VERSION_MINOR 20\n+\n+/* Build revision */\n+#define CLIENT_VERSION_REVISION 0\n \n /* Copyright holder(s) before %s replacement */\n #define COPYRIGHT_HOLDERS \"The %s developers\"\n \n /* Copyright holder(s) */\n-#define COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Core developers\"\n+#define COPYRIGHT_HOLDERS_FINAL \"The Bitcoin Staking Core developers\"\n \n /* Replacement for %s in copyright holders string */\n-#define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Core\"\n+#define COPYRIGHT_HOLDERS_SUBSTITUTION \"Bitcoin Staking Core\"\n \n /* Copyright year */\n-#define COPYRIGHT_YEAR 2021\n+#define COPYRIGHT_YEAR 2020\n \n /* Define to 1 to enable wallet functions */\n #define ENABLE_WALLET 1\n \n-/* Define to 1 to enable BDB wallet */\n-#define USE_BDB 1\n-\n-/* Define to 1 to enable SQLite wallet */\n-#define USE_SQLITE 1\n-\n /* Define to 1 to enable ZMQ functions */\n #define ENABLE_ZMQ 1\n \n+/* parameter and return value type for __fdelt_chk */\n+/* #undef FDELT_TYPE */\n+\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n \n+/* define if the Boost::Chrono library is available */\n+#define HAVE_BOOST_CHRONO /**/\n+\n /* define if the Boost::Filesystem library is available */\n #define HAVE_BOOST_FILESYSTEM /**/\n \n-/* define if external signer support is enabled (requires Boost::Process) */\n-#define ENABLE_EXTERNAL_SIGNER /**/\n-\n /* define if the Boost::System library is available */\n #define HAVE_BOOST_SYSTEM /**/\n \n+/* define if the Boost::Thread library is available */\n+#define HAVE_BOOST_THREAD /**/\n+\n /* define if the Boost::Unit_Test_Framework library is available */\n #define HAVE_BOOST_UNIT_TEST_FRAMEWORK /**/\n \n+/* Define to 1 if you have the <byteswap.h> header file. */\n+/* #undef HAVE_BYTESWAP_H */\n+\n /* Define this symbol if the consensus lib has been built */\n #define HAVE_CONSENSUS_LIB 1\n \n-/* define if the compiler supports basic C++17 syntax */\n-#define HAVE_CXX17 1\n+/* define if the compiler supports basic C++11 syntax */\n+#define HAVE_CXX11 1\n \n /* Define to 1 if you have the declaration of `be16toh', and to 0 if you\n    don't. */\n@@ -86,9 +95,9 @@\n    don't. */\n #define HAVE_DECL_BSWAP_64 0\n \n-/* Define to 1 if you have the declaration of `fork', and to 0 if you don't.\n+/* Define to 1 if you have the declaration of `daemon', and to 0 if you don't.\n    */\n-#define HAVE_DECL_FORK 0\n+#define HAVE_DECL_DAEMON 0\n \n /* Define to 1 if you have the declaration of `htobe16', and to 0 if you\n    don't. */\n@@ -126,10 +135,6 @@\n    don't. */\n #define HAVE_DECL_LE64TOH 0\n \n-/* Define to 1 if you have the declaration of `setsid', and to 0 if you don't.\n-   */\n-#define HAVE_DECL_SETSID 0\n-\n /* Define to 1 if you have the declaration of `strerror_r', and to 0 if you\n    don't. */\n #define HAVE_DECL_STRERROR_R 0\n@@ -138,24 +143,76 @@\n    don't. */\n #define HAVE_DECL_STRNLEN 1\n \n-/* Define if the dllexport attribute is supported. */\n-#define HAVE_DLLEXPORT_ATTRIBUTE 1\n+/* Define to 1 if you have the declaration of `__builtin_clz', and to 0 if you\n+   don't. */\n+//#define HAVE_DECL___BUILTIN_CLZ 1\n+\n+/* Define to 1 if you have the declaration of `__builtin_clzl', and to 0 if\n+   you don't. */\n+//#define HAVE_DECL___BUILTIN_CLZL 1\n+\n+/* Define to 1 if you have the declaration of `__builtin_clzll', and to 0 if\n+   you don't. */\n+//#define HAVE_DECL___BUILTIN_CLZLL 1\n+\n+/* Define to 1 if you have the <dlfcn.h> header file. */\n+/* #undef HAVE_DLFCN_H */\n+\n+/* Define to 1 if you have the <endian.h> header file. */\n+/* #undef HAVE_ENDIAN_H */\n+\n+/* Define to 1 if the system has the `dllexport' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_DLLEXPORT 1\n+\n+/* Define to 1 if the system has the `dllimport' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_DLLIMPORT 1\n+\n+/* Define to 1 if the system has the `visibility' function attribute */\n+#define HAVE_FUNC_ATTRIBUTE_VISIBILITY 1\n+\n+/* Define this symbol if the BSD getentropy system call is available */\n+/* #undef HAVE_GETENTROPY */\n+\n+/* Define this symbol if the BSD getentropy system call is available with\n+   sys/random.h */\n+/* #undef HAVE_GETENTROPY_RAND */\n \n /* Define to 1 if you have the <inttypes.h> header file. */\n #define HAVE_INTTYPES_H 1\n \n+/* Define this symbol if you have malloc_info */\n+/* #undef HAVE_MALLOC_INFO */\n+\n+/* Define this symbol if you have mallopt with M_ARENA_MAX */\n+/* #undef HAVE_MALLOPT_ARENA_MAX */\n+\n /* Define to 1 if you have the <memory.h> header file. */\n #define HAVE_MEMORY_H 1\n \n /* Define to 1 if you have the <miniupnpc/miniupnpc.h> header file. */\n #define HAVE_MINIUPNPC_MINIUPNPC_H 1\n \n+/* Define to 1 if you have the <miniupnpc/miniwget.h> header file. */\n+#define HAVE_MINIUPNPC_MINIWGET_H 1\n+\n /* Define to 1 if you have the <miniupnpc/upnpcommands.h> header file. */\n #define HAVE_MINIUPNPC_UPNPCOMMANDS_H 1\n \n /* Define to 1 if you have the <miniupnpc/upnperrors.h> header file. */\n #define HAVE_MINIUPNPC_UPNPERRORS_H 1\n \n+/* Define this symbol if you have MSG_DONTWAIT */\n+/* #undef HAVE_MSG_DONTWAIT */\n+\n+/* Define this symbol if you have MSG_NOSIGNAL */\n+/* #undef HAVE_MSG_NOSIGNAL */\n+\n+/* Define if you have POSIX threads libraries and header files. */\n+//#define HAVE_PTHREAD 1\n+\n+/* Have PTHREAD_PRIO_INHERIT. */\n+//#define HAVE_PTHREAD_PRIO_INHERIT 1\n+\n /* Define to 1 if you have the <stdint.h> header file. */\n #define HAVE_STDINT_H 1\n \n@@ -165,42 +222,124 @@\n /* Define to 1 if you have the <stdlib.h> header file. */\n #define HAVE_STDLIB_H 1\n \n+/* Define to 1 if you have the `strerror_r' function. */\n+/* #undef HAVE_STRERROR_R */\n+\n /* Define to 1 if you have the <strings.h> header file. */\n #define HAVE_STRINGS_H 1\n \n /* Define to 1 if you have the <string.h> header file. */\n #define HAVE_STRING_H 1\n \n+/* Define this symbol if the BSD sysctl(KERN_ARND) is available */\n+/* #undef HAVE_SYSCTL_ARND */\n+\n+/* Define to 1 if you have the <sys/endian.h> header file. */\n+/* #undef HAVE_SYS_ENDIAN_H */\n+\n+/* Define this symbol if the Linux getrandom system call is available */\n+/* #undef HAVE_SYS_GETRANDOM */\n+\n+/* Define to 1 if you have the <sys/prctl.h> header file. */\n+/* #undef HAVE_SYS_PRCTL_H */\n+\n+/* Define to 1 if you have the <sys/select.h> header file. */\n+/* #undef HAVE_SYS_SELECT_H */\n+\n /* Define to 1 if you have the <sys/stat.h> header file. */\n #define HAVE_SYS_STAT_H 1\n \n /* Define to 1 if you have the <sys/types.h> header file. */\n #define HAVE_SYS_TYPES_H 1\n \n+/* Define to 1 if you have the <unistd.h> header file. */\n+//#define HAVE_UNISTD_H 1\n+\n+/* Define if the visibility attribute is supported. */\n+#define HAVE_VISIBILITY_ATTRIBUTE 1\n+\n+/* Define to the sub-directory where libtool stores uninstalled libraries. */\n+#define LT_OBJDIR \".libs/\"\n+\n /* Define to the address where bug reports for this package should be sent. */\n #define PACKAGE_BUGREPORT \"https://github.com/bitcoin/bitcoin/issues\"\n \n /* Define to the full name of this package. */\n-#define PACKAGE_NAME \"Bitcoin Core\"\n+#define PACKAGE_NAME \"Bitcoin Staking Core\"\n \n /* Define to the full name and version of this package. */\n-#define PACKAGE_STRING \"Bitcoin Core 22.99.0\"\n+#define PACKAGE_STRING \"Bitcoin Core 0.19.99\"\n+\n+/* Define to the one symbol short name of this package. */\n+#define PACKAGE_TARNAME \"bitcoin-staking\"\n \n /* Define to the home page for this package. */\n-#define PACKAGE_URL \"https://bitcoincore.org/\"\n+#define PACKAGE_URL \"https://bitcoinstaking.org/\"\n \n /* Define to the version of this package. */\n-#define PACKAGE_VERSION \"22.99.0\"\n+#define PACKAGE_VERSION \"0.19.99\"\n+\n+/* Define to necessary symbol if this constant uses a non-standard name on\n+   your system. */\n+/* #undef PTHREAD_CREATE_JOINABLE */\n+\n+/* Define this symbol if the qt platform is cocoa */\n+/* #undef QT_QPA_PLATFORM_COCOA */\n \n /* Define this symbol if the minimal qt platform exists */\n #define QT_QPA_PLATFORM_MINIMAL 1\n \n /* Define this symbol if the qt platform is windows */\n #define QT_QPA_PLATFORM_WINDOWS 1\n \n+/* Define this symbol if the qt platform is xcb */\n+/* #undef QT_QPA_PLATFORM_XCB */\n+\n /* Define this symbol if qt plugins are static */\n #define QT_STATICPLUGIN 1\n \n+/* Define to 1 if you have the ANSI C header files. */\n+#define STDC_HEADERS 1\n+\n+/* Define to 1 if strerror_r returns char *. */\n+/* #undef STRERROR_R_CHAR_P */\n+\n+/* Define this symbol to build in assembly routines */\n+//#define USE_ASM 1\n+\n+/* Define if dbus support should be compiled in */\n+/* #undef USE_DBUS */\n+\n+/* Define if QR support should be compiled in */\n+//#define USE_QRCODE 1\n+\n+/* UPnP support not compiled if undefined, otherwise value (0 or 1) determines\n+   default state */\n+//#define USE_UPNP 0\n+\n+/* Define WORDS_BIGENDIAN to 1 if your processor stores words with the most\n+   significant byte first (like Motorola and SPARC, unlike Intel). */\n+#if defined AC_APPLE_UNIVERSAL_BUILD\n+# if defined __BIG_ENDIAN__\n+#  define WORDS_BIGENDIAN 1\n+# endif\n+#else\n+# ifndef WORDS_BIGENDIAN\n+/* #  undef WORDS_BIGENDIAN */\n+# endif\n+#endif\n+\n+/* Enable large inode numbers on Mac OS X 10.5.  */\n+#ifndef _DARWIN_USE_64_BIT_INODE\n+# define _DARWIN_USE_64_BIT_INODE 1\n+#endif\n+\n+/* Number of bits in a file offset, on hosts where this is settable. */\n+#define _FILE_OFFSET_BITS 64\n+\n+/* Define for large files, on AIX-style hosts. */\n+/* #undef _LARGE_FILES */\n+\n /* Windows Universal Platform constraints */\n #if !defined(WINAPI_FAMILY) || (WINAPI_FAMILY == WINAPI_FAMILY_DESKTOP_APP)\n /* Either a desktop application without API restrictions, or and older system"
      },
      {
        "sha": "ae24cb100e68fc465bd612517d47ed8a96c6bfe2",
        "filename": "build_msvc/bitcoind/bitcoind.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoind/bitcoind.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/bitcoind/bitcoind.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoind/bitcoind.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -10,9 +10,6 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\bitcoind.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\">\n-      <ObjectFileName>$(IntDir)init_bitcoind.obj</ObjectFileName>\n-    </ClCompile>\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">\n@@ -57,8 +54,6 @@\n     <Copy SourceFiles=\"$(ConfigIniIn)\" DestinationFiles=\"$(ConfigIniOut)\" ></Copy>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                    Replace=\"@PACKAGE_NAME@\" By=\"Bitcoin Core\"></ReplaceInFile>\n-    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n-                   Replace=\"@PACKAGE_BUGREPORT@\" By=\"https://github.com/bitcoin/bitcoin/issues\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                    Replace=\"@abs_top_srcdir@\" By=\"..\\..\" ToFullPath=\"true\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n@@ -67,22 +62,14 @@\n                    Replace=\"@EXEEXT@\" By=\".exe\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_WALLET_TRUE@\" By=\"\"></ReplaceInFile>\n-    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n-                  Replace=\"@USE_BDB_TRUE@\" By=\"\"></ReplaceInFile>\n-    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n-                  Replace=\"@USE_SQLITE_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@BUILD_BITCOIN_CLI_TRUE@\" By=\"\"></ReplaceInFile>\n-    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n-                  Replace=\"@BUILD_BITCOIN_WALLET_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@BUILD_BITCOIND_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_FUZZ_TRUE@\" By=\"\"></ReplaceInFile>\n     <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n                   Replace=\"@ENABLE_ZMQ_TRUE@\" By=\"\"></ReplaceInFile>\n-    <ReplaceInFile FilePath=\"$(ConfigIniOut)\"\n-                  Replace=\"@ENABLE_EXTERNAL_SIGNER_TRUE@\" By=\"\"></ReplaceInFile>\n   </Target>\n   <Import Project=\"..\\common.vcxproj\" />\n </Project>"
      },
      {
        "sha": "c09997d39d6ab97e0db1be8859b2c69339c6c9af",
        "filename": "build_msvc/common.init.vcxproj",
        "status": "modified",
        "additions": 50,
        "deletions": 30,
        "changes": 80,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.init.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -4,19 +4,11 @@\n \n   <PropertyGroup Label=\"Globals\">\n     <VCProjectVersion>16.0</VCProjectVersion>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='Win32'\">x86-windows-static</VcpkgTriplet>\n+    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n     <UseNativeEnvironment>true</UseNativeEnvironment>\n    </PropertyGroup>\n \n-   <PropertyGroup Label=\"Vcpkg\">\n-    <VcpkgEnabled>true</VcpkgEnabled>\n-    <VcpkgEnableManifest>true</VcpkgEnableManifest>\n-    <VcpkgManifestInstall>true</VcpkgManifestInstall>\n-    <VcpkgUseStatic>true</VcpkgUseStatic>\n-    <VcpkgAutoLink>true</VcpkgAutoLink>\n-    <VcpkgConfiguration>$(Configuration)</VcpkgConfiguration>\n-    <VcpkgTriplet Condition=\"'$(Platform)'=='x64'\">x64-windows-static</VcpkgTriplet>\n-  </PropertyGroup>\n-\n   <PropertyGroup Condition=\"'$(WindowsTargetPlatformVersion)'=='' and !Exists('$(WindowsSdkDir)\\DesignTime\\CommonConfiguration\\Neutral\\Windows.props')\">\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n      <WindowsTargetPlatformVersion_10 Condition=\"'$(WindowsTargetPlatformVersion_10)' == ''\">$(Registry:HKEY_LOCAL_MACHINE\\SOFTWARE\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows\\v10.0@ProductVersion)</WindowsTargetPlatformVersion_10>\n@@ -34,48 +26,76 @@\n       <Configuration>Debug</Configuration>\n       <Platform>x64</Platform>\n     </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Release|Win32\">\n+      <Configuration>Release</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n+    <ProjectConfiguration Include=\"Debug|Win32\">\n+      <Configuration>Debug</Configuration>\n+      <Platform>Win32</Platform>\n+    </ProjectConfiguration>\n   </ItemGroup>\n \n-  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">\n-    <LinkIncremental>false</LinkIncremental>\n-    <UseDebugLibraries>false</UseDebugLibraries>\n+  <PropertyGroup Condition=\"'$(Configuration)'=='Debug'\" Label=\"Configuration\">\n+    <LinkIncremental>true</LinkIncremental>\n+    <WholeProgramOptimization>false</WholeProgramOptimization>\n+    <UseDebugLibraries>true</UseDebugLibraries>\n     <PlatformToolset>v142</PlatformToolset>\n     <CharacterSet>Unicode</CharacterSet>\n-    <GenerateManifest>No</GenerateManifest>\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\$(ProjectName)\\</OutDir>\n     <IntDir>$(Platform)\\$(Configuration)\\$(ProjectName)\\</IntDir>\n   </PropertyGroup>\n-\n-  <PropertyGroup Condition=\"'$(Configuration)'=='Debug'\" Label=\"Configuration\">\n-    <LinkIncremental>true</LinkIncremental>\n-    <UseDebugLibraries>true</UseDebugLibraries>\n+  <PropertyGroup Condition=\"'$(Configuration)'=='Release'\" Label=\"Configuration\">\n+    <LinkIncremental>false</LinkIncremental>\n+    <WholeProgramOptimization>true</WholeProgramOptimization>\n+    <UseDebugLibraries>false</UseDebugLibraries>\n     <PlatformToolset>v142</PlatformToolset>\n     <CharacterSet>Unicode</CharacterSet>\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\$(ProjectName)\\</OutDir>\n     <IntDir>$(Platform)\\$(Configuration)\\$(ProjectName)\\</IntDir>\n   </PropertyGroup>\n \n-<ItemDefinitionGroup Condition=\"'$(Configuration)'=='Release'\">\n+<ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|x64'\">\n+    <ClCompile>\n+      <Optimization>MaxSpeed</Optimization>\n+      <FunctionLevelLinking>true</FunctionLevelLinking>\n+      <IntrinsicFunctions>true</IntrinsicFunctions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n+    </ClCompile>\n+    <Link>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n+    </Link>\n+  </ItemDefinitionGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|x64'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n-      <WholeProgramOptimization>false</WholeProgramOptimization>\n+      <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <SDLCheck>true</SDLCheck>\n+      <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n+      <AdditionalOptions>/bigobj %(AdditionalOptions)</AdditionalOptions>\n+    </ClCompile>\n+  </ItemDefinitionGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <Optimization>MaxSpeed</Optimization>\n       <FunctionLevelLinking>true</FunctionLevelLinking>\n       <IntrinsicFunctions>true</IntrinsicFunctions>\n       <SDLCheck>true</SDLCheck>\n       <RuntimeLibrary>MultiThreaded</RuntimeLibrary>\n-      <DebugInformationFormat>None</DebugInformationFormat>\n     </ClCompile>\n     <Link>\n-      <EnableCOMDATFolding>false</EnableCOMDATFolding>\n-      <OptimizeReferences>false</OptimizeReferences>\n-      <AdditionalOptions>/LTCG:OFF</AdditionalOptions>\n+      <EnableCOMDATFolding>true</EnableCOMDATFolding>\n+      <OptimizeReferences>true</OptimizeReferences>\n     </Link>\n   </ItemDefinitionGroup>\n \n-  <ItemDefinitionGroup Condition=\"'$(Configuration)'=='Debug'\">\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n     <ClCompile>\n       <Optimization>Disabled</Optimization>\n-      <WholeProgramOptimization>false</WholeProgramOptimization>\n       <PreprocessorDefinitions>_DEBUG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <SDLCheck>true</SDLCheck>\n       <RuntimeLibrary>MultiThreadedDebug</RuntimeLibrary>\n@@ -87,16 +107,16 @@\n     <ClCompile>\n       <WarningLevel>Level3</WarningLevel>\n       <PrecompiledHeader>NotUsing</PrecompiledHeader>\n-      <AdditionalOptions>/utf-8 /Zc:__cplusplus /std:c++17 %(AdditionalOptions)</AdditionalOptions>\n-      <DisableSpecificWarnings>4018;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n+      <AdditionalOptions>/utf-8 %(AdditionalOptions)</AdditionalOptions>\n+      <DisableSpecificWarnings>4018;4221;4244;4267;4334;4715;4805;4834</DisableSpecificWarnings>\n       <TreatWarningAsError>true</TreatWarningAsError>\n-      <PreprocessorDefinitions>_SILENCE_CXX17_CODECVT_HEADER_DEPRECATION_WARNING;_SILENCE_CXX17_OLD_ALLOCATOR_MEMBERS_DEPRECATION_WARNING;ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;_WIN32_IE=0x0501;WIN32_LEAN_AND_MEAN;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <PreprocessorDefinitions>ZMQ_STATIC;NOMINMAX;WIN32;HAVE_CONFIG_H;_CRT_SECURE_NO_WARNINGS;_SCL_SECURE_NO_WARNINGS;_CONSOLE;_WIN32_WINNT=0x0601;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n       <AdditionalIncludeDirectories>..\\..\\src;..\\..\\src\\univalue\\include;..\\..\\src\\secp256k1\\include;..\\..\\src\\leveldb\\include;..\\..\\src\\leveldb\\helpers\\memenv;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n     </ClCompile>\n     <Link>\n       <SubSystem>Console</SubSystem>\n+      <GenerateDebugInformation>true</GenerateDebugInformation>\n       <AdditionalDependencies>Iphlpapi.lib;ws2_32.lib;Shlwapi.lib;kernel32.lib;user32.lib;gdi32.lib;comdlg32.lib;advapi32.lib;shell32.lib;ole32.lib;oleaut32.lib;uuid.lib;odbc32.lib;odbccp32.lib;%(AdditionalDependencies)</AdditionalDependencies>\n-      <RandomizedBaseAddress>true</RandomizedBaseAddress>\n     </Link>\n     <Lib>\n       <AdditionalOptions>/ignore:4221</AdditionalOptions>"
      },
      {
        "sha": "42150a23103773a96de2f25f86de7ccb589e821e",
        "filename": "build_msvc/common.qt.init.vcxproj",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.qt.init.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.qt.init.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.qt.init.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -2,15 +2,15 @@\n <Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n \n   <PropertyGroup Label=\"QtGlobals\">\n-    <QtBaseDir Condition=\"'$(QTBASEDIR)' == ''\">C:\\Qt_static</QtBaseDir>\n+    <QtBaseDir>C:\\Qt5.9.8_x64_static_vs2019</QtBaseDir>\n     <QtPluginsLibraryDir>$(QtBaseDir)\\plugins</QtPluginsLibraryDir>\n     <QtLibraryDir>$(QtBaseDir)\\lib</QtLibraryDir>\n     <QtIncludeDir>$(QtBaseDir)\\include</QtIncludeDir>\n     <QtIncludes>$(QtIncludeDir);$(QtIncludeDir)\\QtNetwork;$(QtIncludeDir)\\QtCore;$(QtIncludeDir)\\QtWidgets;$(QtIncludeDir)\\QtGui;</QtIncludes>\n     <GeneratedFilesOutDir>.\\QtGeneratedFiles\\qt</GeneratedFilesOutDir>\n     <QtToolsDir>$(QtBaseDir)\\bin</QtToolsDir>\n-    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyle.lib;$(QtLibraryDir)\\Qt5WindowsUIAutomationSupport.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;Wtsapi32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n-    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtPluginsLibraryDir)\\styles\\qwindowsvistastyled.lib;$(QtLibraryDir)\\*d.lib;Wtsapi32.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n+    <QtReleaseLibraries>$(QtPluginsLibraryDir)\\platforms\\qminimal.lib;$(QtPluginsLibraryDir)\\platforms\\qwindows.lib;$(QtLibraryDir)\\qtfreetype.lib;$(QtLibraryDir)\\qtharfbuzz.lib;$(QtLibraryDir)\\qtlibpng.lib;$(QtLibraryDir)\\qtpcre2.lib;$(QtLibraryDir)\\Qt5AccessibilitySupport.lib;$(QtLibraryDir)\\Qt5Core.lib;$(QtLibraryDir)\\Qt5Concurrent.lib;$(QtLibraryDir)\\Qt5EventDispatcherSupport.lib;$(QtLibraryDir)\\Qt5FontDatabaseSupport.lib;$(QtLibraryDir)\\Qt5Gui.lib;$(QtLibraryDir)\\Qt5Network.lib;$(QtLibraryDir)\\Qt5PlatformCompositorSupport.lib;$(QtLibraryDir)\\Qt5ThemeSupport.lib;$(QtLibraryDir)\\Qt5Widgets.lib;$(QtLibraryDir)\\Qt5WinExtras.lib;$(QtLibraryDir)\\qtmain.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtReleaseLibraries>\n+    <QtDebugLibraries>$(QtPluginsLibraryDir)\\platforms\\qwindowsd.lib;$(QtPluginsLibraryDir)\\platforms\\qminimald.lib;$(QtLibraryDir)\\*d.lib;crypt32.lib;userenv.lib;netapi32.lib;imm32.lib;Dwmapi.lib;version.lib;winmm.lib;UxTheme.lib</QtDebugLibraries>\n   </PropertyGroup>\n \n </Project>"
      },
      {
        "sha": "4bbcc3767f63b23225a70f672764947637d9666c",
        "filename": "build_msvc/common.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/common.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/common.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -4,7 +4,7 @@\n   <Target Name=\"CopyBuildArtifacts\" Condition=\"'$(ConfigurationType)' != 'StaticLibrary'\">\n     <ItemGroup>\n       <BuildArtifacts Include=\"$(OutDir)$(TargetName)$(TargetExt)\"></BuildArtifacts>\n-      <BuildArtifacts Include=\"$(OutDir)$(TargetName).pdb\" Condition=\"Exists('$(OutDir)$(TargetName).pdb')\"></BuildArtifacts>\n+      <BuildArtifacts Include=\"$(OutDir)$(TargetName).pdb\"></BuildArtifacts>\n     </ItemGroup>\n     <Copy SourceFiles=\"@(BuildArtifacts)\" SkipUnchangedFiles=\"true\" DestinationFolder=\"..\\..\\src\\\" Condition=\"'$(OutDir)' != ''\"></Copy>\n   </Target>"
      },
      {
        "sha": "992f64ec2e01dce5b2844dfe48b70757ced6a0ae",
        "filename": "build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "status": "modified",
        "additions": 14,
        "deletions": 7,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_qt/libbitcoin_qt.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -24,7 +24,6 @@\n     <ClCompile Include=\"..\\..\\src\\qt\\csvmodelwriter.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\editaddressdialog.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\guiutil.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\qt\\initexecutor.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\intro.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\modaloverlay.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\networkstyle.cpp\" />\n@@ -35,9 +34,7 @@\n     <ClCompile Include=\"..\\..\\src\\qt\\overviewpage.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\paymentserver.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\peertablemodel.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\qt\\peertablesortproxy.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\platformstyle.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\qt\\psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qrimagewidget.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qvalidatedlineedit.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\qvaluecombobox.cpp\" />\n@@ -79,7 +76,6 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_csvmodelwriter.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_editaddressdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_guiutil.cpp\" />\n-    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_initexecutor.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_intro.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_modaloverlay.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_networkstyle.cpp\" />\n@@ -90,9 +86,7 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_overviewpage.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_paymentserver.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablemodel.cpp\" />\n-    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_peertablesortproxy.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_platformstyle.cpp\" />\n-    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_psbtoperationsdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qrimagewidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvalidatedlineedit.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_qvaluecombobox.cpp\" />\n@@ -108,7 +102,6 @@\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondesc.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiondescdialog.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionfilterproxy.cpp\" />\n-    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionoverviewwidget.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionrecord.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactiontablemodel.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_transactionview.cpp\" />\n@@ -140,6 +133,20 @@\n     </ClCompile>\n   </ItemDefinitionGroup>\n \n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Release|Win32'\">\n+    <ClCompile>\n+      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+    </ClCompile>\n+  </ItemDefinitionGroup>\n+\n+  <ItemDefinitionGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|Win32'\">\n+    <ClCompile>\n+      <PreprocessorDefinitions>_X86_;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+      <AdditionalIncludeDirectories>$(QtIncludes);$(GeneratedFilesOutDir)\\..;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+    </ClCompile>\n+  </ItemDefinitionGroup>\n+\n   <ItemGroup>\n     <QT_MOC Include=\"..\\..\\src\\qt\\bitcoinamountfield.cpp\" />\n     <QT_MOC Include=\"..\\..\\src\\qt\\intro.cpp\" />"
      },
      {
        "sha": "adf4fa03540fb0e516d030d476387a26d70bb015",
        "filename": "build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_util/libbitcoin_util.vcxproj.in?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -8,7 +8,6 @@\n     <ConfigurationType>StaticLibrary</ConfigurationType>\n   </PropertyGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\util\\url.cpp\" />\n @SOURCE_FILES@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />"
      },
      {
        "sha": "9c8279c72abad60972a59d19cd663765e590cd01",
        "filename": "build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_wallet/libbitcoin_wallet.vcxproj.in?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -8,9 +8,6 @@\n     <ConfigurationType>StaticLibrary</ConfigurationType>\n   </PropertyGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\wallet\\bdb.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\salvage.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\sqlite.cpp\" />\n @SOURCE_FILES@\n   </ItemGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />"
      },
      {
        "sha": "1610ae7d8661f421df97c103ae57bf80e9399371",
        "filename": "build_msvc/libleveldb/libleveldb.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libleveldb/libleveldb.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libleveldb/libleveldb.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libleveldb/libleveldb.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -51,7 +51,7 @@\n   <ItemDefinitionGroup>\n      <ClCompile>\n        <PreprocessorDefinitions>HAVE_CRC32C=0;HAVE_SNAPPY=0;__STDC_LIMIT_MACROS;LEVELDB_IS_BIG_ENDIAN=0;_UNICODE;UNICODE;_CRT_NONSTDC_NO_DEPRECATE;LEVELDB_PLATFORM_WINDOWS;LEVELDB_ATOMIC_PRESENT;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-       <DisableSpecificWarnings>4244;4267</DisableSpecificWarnings>\n+       <DisableSpecificWarnings>4244;4267;4312;4722;</DisableSpecificWarnings>\n        <AdditionalIncludeDirectories>..\\..\\src\\leveldb;..\\..\\src\\leveldb\\include;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n      </ClCompile>\n   </ItemDefinitionGroup>"
      },
      {
        "sha": "99fb63fb0262ae1699480890e7986654bd199cac",
        "filename": "build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libsecp256k1/libsecp256k1.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1/libsecp256k1.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -10,14 +10,13 @@\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\secp256k1\\src\\secp256k1.c\" />\n   </ItemGroup>\n-  <ItemDefinitionGroup>\n+    <ItemDefinitionGroup>\n     <ClCompile>\n-      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;ENABLE_MODULE_EXTRAKEYS;ENABLE_MODULE_SCHNORRSIG;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n-      <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n-      <DisableSpecificWarnings>4146;4244;4267;4334</DisableSpecificWarnings>\n-    </ClCompile>\n+      <PreprocessorDefinitions>ENABLE_MODULE_ECDH;ENABLE_MODULE_RECOVERY;%(PreprocessorDefinitions)</PreprocessorDefinitions>\n+       <AdditionalIncludeDirectories>..\\..\\src\\secp256k1;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>\n+     </ClCompile>\n   </ItemDefinitionGroup>\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.props\" />\n   <Import Project=\"$(VCTargetsPath)\\Microsoft.Cpp.targets\" />\n   <Import Project=\"..\\common.vcxproj\" />\n-</Project>\n+</Project>\n\\ No newline at end of file"
      },
      {
        "sha": "5187c946a0d0fb4f49c392bbc881c416bfd763b8",
        "filename": "build_msvc/libsecp256k1_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libsecp256k1_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/libsecp256k1_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libsecp256k1_config.h?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -26,7 +26,4 @@\n #define USE_FIELD_10X26 1\n #define USE_SCALAR_8X32 1\n \n-#define ECMULT_GEN_PREC_BITS 4\n-#define ECMULT_WINDOW_SIZE 15\n-\n #endif /* BITCOIN_LIBSECP256K1_CONFIG_H */"
      },
      {
        "sha": "d99b17d38127bec2623a42552f461979cee61531",
        "filename": "build_msvc/msvc-autogen.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/msvc-autogen.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/msvc-autogen.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/msvc-autogen.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -9,7 +9,7 @@\n from shutil import copyfile\n \n SOURCE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src'))\n-DEFAULT_PLATFORM_TOOLSET = R'v142'\n+DEFAULT_PLATFORM_TOOLSET = R'v141'\n \n libs = [\n     'libbitcoin_cli',"
      },
      {
        "sha": "2095c0c3213513510eb6106852943fc991d8e2b1",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -8,10 +8,10 @@\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n   </PropertyGroup>\n   <ItemGroup>\n-    <ClCompile Include=\"..\\..\\src\\init\\bitcoin-qt.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\util\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\qt\\test\\compattests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\test_main.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\uritests.cpp\" />\n@@ -20,6 +20,7 @@\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\wallet_test_fixture.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_addressbooktests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_apptests.cpp\" />\n+    <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_compattests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_rpcnestedtests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_uritests.cpp\" />\n     <ClCompile Include=\"$(GeneratedFilesOutDir)\\moc\\moc_wallettests.cpp\" />\n@@ -72,7 +73,7 @@\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtLibraryDir)\\Qt5Test.lib;$(QtReleaseLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-      <AdditionalOptions>/ignore:4206 /LTCG:OFF</AdditionalOptions>\n+\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n \n@@ -82,12 +83,13 @@\n     </ClCompile>\n     <Link>\n       <AdditionalDependencies>$(QtDebugLibraries);%(AdditionalDependencies)</AdditionalDependencies>\n-      <AdditionalOptions>/ignore:4206</AdditionalOptions>\n+\t  <AdditionalOptions>/ignore:4206</AdditionalOptions>\n     </Link>\n   </ItemDefinitionGroup>\n   <ItemGroup>\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\addressbooktests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\apptests.h\" />\n+    <MocTestFiles Include=\"..\\..\\src\\qt\\test\\compattests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\rpcnestedtests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\uritests.h\" />\n     <MocTestFiles Include=\"..\\..\\src\\qt\\test\\wallettests.h\" />"
      },
      {
        "sha": "5c4b777d5164bbc3354b26f262310e9a385a99cd",
        "filename": "build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/test_bitcoin/test_bitcoin.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin/test_bitcoin.vcxproj?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -16,7 +16,6 @@\n     <ClCompile Include=\"..\\..\\src\\test\\util\\*.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_fixture.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\wallet\\test\\*_tests.cpp\" />\n-    <ClCompile Include=\"..\\..\\src\\wallet\\test\\util.cpp\" />\n   </ItemGroup>\n   <ItemGroup>\n     <ProjectReference Include=\"..\\libbitcoinconsensus\\libbitcoinconsensus.vcxproj\">"
      },
      {
        "sha": "571d19957f9fdaec2fc8528ab633b2ac87541879",
        "filename": "build_msvc/testconsensus/testconsensus.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/testconsensus/testconsensus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/testconsensus/testconsensus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/testconsensus/testconsensus.cpp?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018-2020 The Bitcoin Core developers\n+// Copyright (c) 2018 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -45,7 +45,7 @@ int main()\n     stream << vanillaSpendTx;\n \n     bitcoinconsensus_error err;\n-    auto op0Result = bitcoinconsensus_verify_script_with_amount(pubKeyScript.data(), pubKeyScript.size(), amount, stream.data(), stream.size(), 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);\n+    auto op0Result = bitcoinconsensus_verify_script_with_amount(pubKeyScript.data(), pubKeyScript.size(), amount, (const unsigned char*)&stream[0], stream.size(), 0, bitcoinconsensus_SCRIPT_FLAGS_VERIFY_ALL, &err);\n     std::cout << \"Op0 result: \" << op0Result << \", error code \" << err << std::endl;\n \n     getchar();"
      },
      {
        "sha": "307f295f089cd225a70cc2c98ae60c0b4ce1de2f",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1 @@\n+berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n\\ No newline at end of file"
      },
      {
        "sha": "42b9a5d16fc0f91956fe0bdbb50cd3a6603e5d73",
        "filename": "build_msvc/vcpkg.json",
        "status": "removed",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/build_msvc/vcpkg.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/build_msvc/vcpkg.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg.json?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,19 +0,0 @@\n-{\n-  \"name\": \"bitcoin-core\",\n-  \"version-string\": \"1\",\n-  \"dependencies\": [\n-    \"berkeleydb\",\n-    \"boost-filesystem\",\n-    \"boost-multi-index\",\n-    \"boost-process\",\n-    \"boost-signals2\",\n-    \"boost-test\",\n-    \"sqlite3\",\n-    \"double-conversion\",\n-    {\n-      \"name\": \"libevent\",\n-      \"features\": [\"thread\"]\n-    },\n-    \"zeromq\"\n-  ]\n-}"
      },
      {
        "sha": "d2ea255b4bad7e410eac0cc0512568fa70b04243",
        "filename": "ci/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 33,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,8 +1,12 @@\n-## CI Scripts\n+## ci scripts\n \n This directory contains scripts for each build step in each build stage.\n \n-### Running a Stage Locally\n+Currently three stages `lint`, `extended_lint` and `test` are defined. Each stage has its own lifecycle, similar to the\n+[Travis CI lifecycle](https://docs.travis-ci.com/user/job-lifecycle#the-job-lifecycle). Every script in here is named\n+and numbered according to which stage and lifecycle step it belongs to.\n+\n+### Running a stage locally\n \n Be aware that the tests will be built and run in-place, so please run at your own risk.\n If the repository is not a fresh git clone, you might have to clean files from previous builds or test runs first.\n@@ -32,34 +36,3 @@ To run the test stage with a specific configuration,\n ```\n FILE_ENV=\"./ci/test/00_setup_env_arm.sh\" ./ci/test_run_all.sh\n ```\n-\n-### Configurations\n-\n-The test files (`FILE_ENV`) are constructed to test a wide range of\n-configurations, rather than a single pass/fail. This helps to catch build\n-failures and logic errors that present on platforms other than the ones the\n-author has tested.\n-\n-Some builders use the dependency-generator in `./depends`, rather than using\n-the system package manager to install build dependencies. This guarantees that\n-the tester is using the same versions as the release builds, which also use\n-`./depends`.\n-\n-If no `FILE_ENV` has been specified or values are left out, `00_setup_env.sh`\n-is used as the default configuration with fallback values.\n-\n-It is also possible to force a specific configuration without modifying the\n-file. For example,\n-\n-```\n-MAKEJOBS=\"-j1\" FILE_ENV=\"./ci/test/00_setup_env_arm.sh\" ./ci/test_run_all.sh\n-```\n-\n-The files starting with `0n` (`n` greater than 0) are the scripts that are run\n-in order.\n-\n-### Cache\n-\n-In order to avoid rebuilding all dependencies for each build, the binaries are\n-cached and re-used when possible. Changes in the dependency-generator will\n-trigger cache-invalidation and rebuilds as necessary."
      },
      {
        "sha": "8b2d609504d5c0980b128ba28e4da4ee466e01f2",
        "filename": "ci/lint/04_install.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 13,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/04_install.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,22 +1,15 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-${CI_RETRY_EXE} apt-get update\n-${CI_RETRY_EXE} apt-get install -y clang-format-9 python3-pip curl git gawk jq\n-update-alternatives --install /usr/bin/clang-format      clang-format      $(which clang-format-9     ) 100\n-update-alternatives --install /usr/bin/clang-format-diff clang-format-diff $(which clang-format-diff-9) 100\n+travis_retry pip3 install codespell==1.15.0\n+travis_retry pip3 install flake8==3.7.8\n+travis_retry pip3 install yq\n \n-${CI_RETRY_EXE} pip3 install codespell==2.0.0\n-${CI_RETRY_EXE} pip3 install flake8==3.8.3\n-${CI_RETRY_EXE} pip3 install mypy==0.910\n-${CI_RETRY_EXE} pip3 install pyzmq==22.3.0\n-${CI_RETRY_EXE} pip3 install vulture==2.3\n-\n-SHELLCHECK_VERSION=v0.7.2\n-curl -sL \"https://github.com/koalaman/shellcheck/releases/download/${SHELLCHECK_VERSION}/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n+SHELLCHECK_VERSION=v0.6.0\n+curl -s \"https://storage.googleapis.com/shellcheck/shellcheck-${SHELLCHECK_VERSION}.linux.x86_64.tar.xz\" | tar --xz -xf - --directory /tmp/\n export PATH=\"/tmp/shellcheck-${SHELLCHECK_VERSION}:${PATH}\""
      },
      {
        "sha": "2987812c8e64bab1648a3dc04492b1d338cdf047",
        "filename": "ci/lint/05_before_script.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/05_before_script.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,9 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+\n+git fetch --unshallow"
      },
      {
        "sha": "003bdf3c29268ac3ce589aeacf2cb7f6e3277be5",
        "filename": "ci/lint/06_script.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/06_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/lint/06_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint/06_script.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,38 +1,26 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C\n \n-GIT_HEAD=$(git rev-parse HEAD)\n-if [ -n \"$CIRRUS_PR\" ]; then\n-  COMMIT_RANGE=\"$CIRRUS_BASE_SHA..$GIT_HEAD\"\n-  test/lint/commit-script-check.sh $COMMIT_RANGE\n+if [ \"$TRAVIS_EVENT_TYPE\" = \"pull_request\" ]; then\n+  test/lint/commit-script-check.sh $TRAVIS_COMMIT_RANGE\n fi\n-export COMMIT_RANGE\n \n-# This only checks that the trees are pure subtrees, it is not doing a full\n-# check with -r to not have to fetch all the remotes.\n test/lint/git-subtree-check.sh src/crypto/ctaes\n test/lint/git-subtree-check.sh src/secp256k1\n test/lint/git-subtree-check.sh src/univalue\n test/lint/git-subtree-check.sh src/leveldb\n test/lint/git-subtree-check.sh src/crc32c\n test/lint/check-doc.py\n+test/lint/check-rpc-mappings.py .\n test/lint/lint-all.sh\n \n-if [ \"$CIRRUS_REPO_FULL_NAME\" = \"bitcoin/bitcoin\" ] && [ \"$CIRRUS_PR\" = \"\" ] ; then\n-    # Sanity check only the last few commits to get notified of missing sigs,\n-    # missing keys, or expired keys. Usually there is only one new merge commit\n-    # per push on the master branch and a few commits on release branches, so\n-    # sanity checking only a few (10) commits seems sufficient and cheap.\n-    git log HEAD~10 -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n-    git log HEAD~10 -1 --format='%H' > ./contrib/verify-commits/trusted-git-root\n-    ${CI_RETRY_EXE}  gpg --keyserver hkps://keys.openpgp.org --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n-    ./contrib/verify-commits/verify-commits.py;\n+if [ \"$TRAVIS_REPO_SLUG\" = \"bitcoin/bitcoin\" ] && [ \"$TRAVIS_EVENT_TYPE\" = \"cron\" ]; then\n+    git log --merges --before=\"2 days ago\" -1 --format='%H' > ./contrib/verify-commits/trusted-sha512-root-commit\n+    travis_retry gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $(<contrib/verify-commits/trusted-keys) &&\n+    ./contrib/verify-commits/verify-commits.py --clean-merge=2;\n fi\n-\n-echo\n-git log --no-merges --oneline $COMMIT_RANGE"
      },
      {
        "sha": "7adfe71674149d0215c08beabb45ba0bbc9cf1fc",
        "filename": "ci/lint_run_all.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/lint_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/lint_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/lint_run_all.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,11 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-set -o errexit; source ./ci/test/00_setup_env.sh\n-set -o errexit; source ./ci/lint/04_install.sh\n-set -o errexit; source ./ci/lint/06_script.sh"
      },
      {
        "sha": "4c22e4e6c54301e92e8ae9fd20e1009eebc1e39d",
        "filename": "ci/test/00_setup_env.sh",
        "status": "modified",
        "additions": 14,
        "deletions": 25,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,22 +1,16 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n # The root dir.\n # The ci system copies this folder.\n-# This is where the depends build is done.\n+# This is where the build is done (depends and dist).\n BASE_ROOT_DIR=$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\"/../../ >/dev/null 2>&1 && pwd )\n export BASE_ROOT_DIR\n-# The depends dir.\n-# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n-export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n-# A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n-# This folder only exists on the ci host.\n-export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch}\n \n echo \"Setting specific values in env\"\n if [ -n \"${FILE_ENV}\" ]; then\n@@ -28,45 +22,40 @@ fi\n echo \"Fallback to default values in env (if not yet set)\"\n # The number of parallel jobs to pass down to make and test_runner.py\n export MAKEJOBS=${MAKEJOBS:--j4}\n+# A folder for the ci system to put temporary files (ccache, datadirs for tests, ...)\n+# This folder only exists on the ci host.\n+export BASE_SCRATCH_DIR=${BASE_SCRATCH_DIR:-$BASE_ROOT_DIR/ci/scratch/}\n # What host to compile for. See also ./depends/README.md\n # Tests that need cross-compilation export the appropriate HOST.\n # Tests that run natively guess the host\n export HOST=${HOST:-$(\"$BASE_ROOT_DIR/depends/config.guess\")}\n # Whether to prefer BusyBox over GNU utilities\n export USE_BUSY_BOX=${USE_BUSY_BOX:-false}\n-\n export RUN_UNIT_TESTS=${RUN_UNIT_TESTS:-true}\n export RUN_FUNCTIONAL_TESTS=${RUN_FUNCTIONAL_TESTS:-true}\n-export RUN_SECURITY_TESTS=${RUN_SECURITY_TESTS:-false}\n-# By how much to scale the test_runner timeouts (option --timeout-factor).\n-# This is needed because some ci machines have slow CPU or disk, so sanitizers\n-# might be slow or a reindex might be waiting on disk IO.\n-export TEST_RUNNER_TIMEOUT_FACTOR=${TEST_RUNNER_TIMEOUT_FACTOR:-40}\n-export TEST_RUNNER_ENV=${TEST_RUNNER_ENV:-}\n+export TEST_PREVIOUS_RELEASES=${TEST_PREVIOUS_RELEASES:-false}\n export RUN_FUZZ_TESTS=${RUN_FUZZ_TESTS:-false}\n-export EXPECTED_TESTS_DURATION_IN_SECONDS=${EXPECTED_TESTS_DURATION_IN_SECONDS:-1000}\n-\n export CONTAINER_NAME=${CONTAINER_NAME:-ci_unnamed}\n-export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:20.04}\n+export DOCKER_NAME_TAG=${DOCKER_NAME_TAG:-ubuntu:18.04}\n # Randomize test order.\n # See https://www.boost.org/doc/libs/1_71_0/libs/test/doc/html/boost_test/utf_reference/rt_param_reference/random.html\n export BOOST_TEST_RANDOM=${BOOST_TEST_RANDOM:-1}\n-# See man 7 debconf\n-export DEBIAN_FRONTEND=noninteractive\n export CCACHE_SIZE=${CCACHE_SIZE:-100M}\n export CCACHE_TEMPDIR=${CCACHE_TEMPDIR:-/tmp/.ccache-temp}\n export CCACHE_COMPRESS=${CCACHE_COMPRESS:-1}\n # The cache dir.\n # This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n export CCACHE_DIR=${CCACHE_DIR:-$BASE_SCRATCH_DIR/.ccache}\n-# Folder where the build result is put (bin and lib).\n+# The depends dir.\n+# This folder exists on the ci host and ci guest. Changes are propagated back and forth.\n+export DEPENDS_DIR=${DEPENDS_DIR:-$BASE_ROOT_DIR/depends}\n+# Folder where the build is done (bin and lib).\n export BASE_OUTDIR=${BASE_OUTDIR:-$BASE_SCRATCH_DIR/out/$HOST}\n-# Folder where the build is done (dist and out-of-tree build).\n-export BASE_BUILD_DIR=${BASE_BUILD_DIR:-$BASE_SCRATCH_DIR/build}\n export PREVIOUS_RELEASES_DIR=${PREVIOUS_RELEASES_DIR:-$BASE_ROOT_DIR/releases/$HOST}\n export SDK_URL=${SDK_URL:-https://bitcoincore.org/depends-sources/sdks}\n-export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison}\n+export WINEDEBUG=${WINEDEBUG:-fixme-all}\n+export DOCKER_PACKAGES=${DOCKER_PACKAGES:-build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps}\n export GOAL=${GOAL:-install}\n export DIR_QA_ASSETS=${DIR_QA_ASSETS:-${BASE_SCRATCH_DIR}/qa-assets}\n export PATH=${BASE_ROOT_DIR}/ci/retry:$PATH\n-export CI_RETRY_EXE=${CI_RETRY_EXE:-\"retry --\"}\n+export CI_RETRY_EXE=${CI_RETRY_EXE:retry}"
      },
      {
        "sha": "2f9d1f2a9f2a4a377b70e4777c522fbf25757b5d",
        "filename": "ci/test/00_setup_env_android.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_android.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_android.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_android.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,25 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export HOST=aarch64-linux-android\n-export PACKAGES=\"clang llvm unzip openjdk-8-jdk gradle\"\n-export CONTAINER_NAME=ci_android\n-export DOCKER_NAME_TAG=\"ubuntu:focal\"\n-\n-export RUN_UNIT_TESTS=false\n-export RUN_FUNCTIONAL_TESTS=false\n-\n-export ANDROID_API_LEVEL=28\n-export ANDROID_BUILD_TOOLS_VERSION=28.0.3\n-export ANDROID_NDK_VERSION=22.1.7171670\n-export ANDROID_TOOLS_URL=https://dl.google.com/android/repository/commandlinetools-linux-6609375_latest.zip\n-export ANDROID_HOME=\"${DEPENDS_DIR}/SDKs/android\"\n-export ANDROID_NDK_HOME=\"${ANDROID_HOME}/ndk/${ANDROID_NDK_VERSION}\"\n-export DEP_OPTS=\"ANDROID_SDK=${ANDROID_HOME} ANDROID_NDK=${ANDROID_NDK_HOME} ANDROID_API_LEVEL=${ANDROID_API_LEVEL} ANDROID_TOOLCHAIN_BIN=${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64/bin/\"\n-\n-export BITCOIN_CONFIG=\"--disable-ccache --disable-tests --enable-gui-tests --disable-bench --disable-fuzz-binary --without-utils --without-libs --without-daemon\""
      },
      {
        "sha": "2b30b4a5e3d6a76c7016af65de312c6dce0a2389",
        "filename": "ci/test/00_setup_env_arm.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_arm.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_arm.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_arm.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,11 +18,11 @@ if [ -n \"$QEMU_USER_CMD\" ]; then\n fi\n export CONTAINER_NAME=ci_arm_linux\n # Use debian to avoid 404 apt errors when cross compiling\n-export DOCKER_NAME_TAG=\"debian:bullseye\"\n+export DOCKER_NAME_TAG=\"debian:buster\"\n export USE_BUSY_BOX=true\n export RUN_UNIT_TESTS=true\n-export RUN_FUNCTIONAL_TESTS=false\n+export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n # -Wno-psabi is to disable ABI warnings: \"note: parameter passing for argument of type ... changed in GCC 7.1\"\n # This could be removed once the ABI change warning does not show up by default\n-export BITCOIN_CONFIG=\"--enable-reduce-exports CXXFLAGS=-Wno-psabi\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports CXXFLAGS=-Wno-psabi --enable-werror\""
      },
      {
        "sha": "5688799f9e57d023ed19c65acd50638b424a089d",
        "filename": "ci/test/00_setup_env_i686_centos.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_i686_centos.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_i686_centos.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_centos.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -7,10 +7,9 @@\n export LC_ALL=C.UTF-8\n \n export HOST=i686-pc-linux-gnu\n-export CONTAINER_NAME=ci_i686_centos_8\n-export DOCKER_NAME_TAG=centos:8\n-export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python3-zmq which patch lbzip2 dash rsync coreutils bison\"\n+export CONTAINER_NAME=ci_i686_centos_7\n+export DOCKER_NAME_TAG=centos:7\n+export DOCKER_PACKAGES=\"gcc-c++ glibc-devel.x86_64 libstdc++-devel.x86_64 glibc-devel.i686 libstdc++-devel.i686 ccache libtool make git python3 python36-zmq which patch lbzip2 dash\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-reduce-exports\"\n export CONFIG_SHELL=\"/bin/dash\"\n-export TEST_RUNNER_ENV=\"LC_ALL=en_US.UTF-8\""
      },
      {
        "sha": "a25c98a0042f93f9562f313b70b17ab0f1e57ab0",
        "filename": "ci/test/00_setup_env_i686_multiprocess.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_i686_multiprocess.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_i686_multiprocess.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_i686_multiprocess.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,18 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export HOST=i686-pc-linux-gnu\n-export CONTAINER_NAME=ci_i686_multiprocess\n-export DOCKER_NAME_TAG=ubuntu:20.04\n-export PACKAGES=\"cmake python3 python3-pip llvm clang g++-multilib\"\n-export DEP_OPTS=\"DEBUG=1 MULTIPROCESS=1\"\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-debug CC='clang -m32' CXX='clang++ -m32' LDFLAGS='--rtlib=compiler-rt -lgcc_s'\"\n-export TEST_RUNNER_ENV=\"BITCOIND=bitcoin-node\"\n-export TEST_RUNNER_EXTRA=\"--nosandbox\"\n-export PIP_PACKAGES=\"lief\""
      },
      {
        "sha": "6ed6e40bd6e508ebf36573f9eb21ce789f408582",
        "filename": "ci/test/00_setup_env_mac.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_mac.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_mac.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,18 +1,16 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_macos_cross\n-export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to macos\n-export HOST=x86_64-apple-darwin19\n-export PACKAGES=\"cmake imagemagick librsvg2-bin libz-dev libtiff-tools libtinfo5 python3-setuptools xorriso\"\n-export XCODE_VERSION=12.1\n-export XCODE_BUILD_ID=12A7403\n+export HOST=x86_64-apple-darwin16\n+export PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools\"\n+export OSX_SDK=10.14\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\"\n+export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\""
      },
      {
        "sha": "a90d83734e22ec7440639acf1c85ffc10d63c07c",
        "filename": "ci/test/00_setup_env_mac_host.sh",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_mac_host.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_mac_host.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_mac_host.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,17 +1,17 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n-export HOST=x86_64-apple-darwin19\n-export PIP_PACKAGES=\"zmq lief\"\n+export HOST=x86_64-apple-darwin16\n+export PIP_PACKAGES=\"zmq\"\n+export RUN_UNIT_TESTS=true\n+export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--with-gui --enable-reduce-exports\"\n-export CI_OS_NAME=\"macos\"\n+export BITCOIN_CONFIG=\"--enable-gui --enable-reduce-exports --enable-werror\"\n+# Run without depends\n export NO_DEPENDS=1\n export OSX_SDK=\"\"\n-export CCACHE_SIZE=300M\n-export RUN_SECURITY_TESTS=\"true\""
      },
      {
        "sha": "d5f39daaf5359f75215ad4570e7e8b17f683a415",
        "filename": "ci/test/00_setup_env_native_asan.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_asan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_asan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_asan.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,14 +1,14 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_asan\n-export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libqrencode-dev libsqlite3-dev\"\n-export DOCKER_NAME_TAG=ubuntu:hirsute\n+export PACKAGES=\"clang-8 llvm-8 python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+# Use clang-8 instead of default clang (which is clang-6 on Bionic) to avoid spurious segfaults when running on ppc64le\n export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang CXX=clang++\"\n+export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=address,integer,undefined CC=clang-8 CXX=clang++-8\""
      },
      {
        "sha": "c8c75dea1a453a4278f13708335a323c12360e17",
        "filename": "ci/test/00_setup_env_native_fuzz.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_fuzz.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_fuzz.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,18 +1,17 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined,integer CC='clang -ftrivial-auto-var-init=pattern' CXX='clang++ -ftrivial-auto-var-init=pattern'\"\n-export CCACHE_SIZE=200M\n+export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,address,undefined CC=clang CXX=clang++\""
      },
      {
        "sha": "d5b28ca5cf02b50723eb83fae386980a9c282ef6",
        "filename": "ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_native_fuzz_with_msan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_msan.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,24 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n-LIBCXX_DIR=\"${BASE_SCRATCH_DIR}/msan/build/\"\n-export MSAN_FLAGS=\"-fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls\"\n-LIBCXX_FLAGS=\"-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument\"\n-export MSAN_AND_LIBCXX_FLAGS=\"${MSAN_FLAGS} ${LIBCXX_FLAGS}\"\n-\n-export CONTAINER_NAME=\"ci_native_msan\"\n-export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' libevent_cflags='${MSAN_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer,memory --with-asm=no --prefix=${DEPENDS_DIR}/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}'\"\n-export USE_MEMORY_SANITIZER=\"true\"\n-export RUN_UNIT_TESTS=\"false\"\n-export RUN_FUNCTIONAL_TESTS=\"false\"\n-export RUN_FUZZ_TESTS=true\n-export CCACHE_SIZE=250M"
      },
      {
        "sha": "eb77dc5b1670a4e03f1ed0e8b04eeaa6c215ec07",
        "filename": "ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_fuzz_with_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_fuzz_with_valgrind.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,19 +1,18 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_fuzz_valgrind\n-export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev valgrind\"\n+export PACKAGES=\"clang llvm python3 libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev valgrind\"\n export NO_DEPENDS=1\n export RUN_UNIT_TESTS=false\n export RUN_FUNCTIONAL_TESTS=false\n export RUN_FUZZ_TESTS=true\n export FUZZ_TESTS_CONFIG=\"--valgrind\"\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-fuzz --with-sanitizers=fuzzer CC=clang CXX=clang++\"\n-export CCACHE_SIZE=200M"
      },
      {
        "sha": "7bcf9f23a2b96622157d459a3613d6db381120fb",
        "filename": "ci/test/00_setup_env_native_msan.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_native_msan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/00_setup_env_native_msan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_msan.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,23 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n-LIBCXX_DIR=\"${BASE_SCRATCH_DIR}/msan/build/\"\n-export MSAN_FLAGS=\"-fsanitize=memory -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O1 -fno-optimize-sibling-calls\"\n-LIBCXX_FLAGS=\"-nostdinc++ -stdlib=libc++ -L${LIBCXX_DIR}lib -lc++abi -I${LIBCXX_DIR}include -I${LIBCXX_DIR}include/c++/v1 -lpthread -Wl,-rpath,${LIBCXX_DIR}lib -Wno-unused-command-line-argument\"\n-export MSAN_AND_LIBCXX_FLAGS=\"${MSAN_FLAGS} ${LIBCXX_FLAGS}\"\n-export BDB_PREFIX=\"${BASE_ROOT_DIR}/db4\"\n-\n-export CONTAINER_NAME=\"ci_native_msan\"\n-export PACKAGES=\"clang-9 llvm-9 cmake\"\n-export DEP_OPTS=\"NO_BDB=1 NO_QT=1 CC='clang' CXX='clang++' CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' boost_cxxflags='-std=c++17 -fvisibility=hidden -fPIC ${MSAN_AND_LIBCXX_FLAGS}' libevent_cflags='${MSAN_FLAGS}' sqlite_cflags='${MSAN_FLAGS}' zeromq_cxxflags='-std=c++17 ${MSAN_AND_LIBCXX_FLAGS}'\"\n-export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-wallet --with-sanitizers=memory --with-asm=no --prefix=${DEPENDS_DIR}/x86_64-pc-linux-gnu/ CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}' BDB_LIBS='-L${BDB_PREFIX}/lib -ldb_cxx-4.8' BDB_CFLAGS='-I${BDB_PREFIX}/include'\"\n-export USE_MEMORY_SANITIZER=\"true\"\n-export RUN_FUNCTIONAL_TESTS=\"false\"\n-export CCACHE_SIZE=250M"
      },
      {
        "sha": "6bb371920cccab6d3b12629d38e83731b27ec032",
        "filename": "ci/test/00_setup_env_native_nowallet.sh",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_nowallet.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_nowallet.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_nowallet.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,14 +1,13 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_nowallet\n-export DOCKER_NAME_TAG=ubuntu:18.04  # Use bionic to have one config run the tests in python3.6, see doc/dependencies.md\n-export PACKAGES=\"python3-zmq clang-7 llvm-7 libc++abi-7-dev libc++-7-dev\"  # Use clang-7 to test C++17 compatibility, see doc/dependencies.md\n-export DEP_OPTS=\"NO_WALLET=1 CC=clang-7 CXX='clang++-7 -stdlib=libc++'\"\n+export PACKAGES=\"python3-zmq\"\n+export DEP_OPTS=\"NO_WALLET=1\"\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports CC=clang-7 CXX='clang++-7 -stdlib=libc++'\"\n+export BITCOIN_CONFIG=\"--enable-glibc-back-compat --enable-reduce-exports\""
      },
      {
        "sha": "a5025339b6d119f36d20ec198a24ca7b2a58fe4e",
        "filename": "ci/test/00_setup_env_native_qt5.sh",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_qt5.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_qt5.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_qt5.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,19 +1,17 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_qt5\n-export DOCKER_NAME_TAG=ubuntu:18.04  # Check that bionic gcc-8 can compile our C++17 and run our functional tests in python3, see doc/dependencies.md\n-export PACKAGES=\"gcc-8 g++-8 python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n-export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 NO_NATPMP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n-export TEST_RUNNER_EXTRA=\"--previous-releases --coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n+export PACKAGES=\"python3-zmq qtbase5-dev qttools5-dev-tools libdbus-1-dev libharfbuzz-dev\"\n+export DEP_OPTS=\"NO_QT=1 NO_UPNP=1 DEBUG=1 ALLOW_HOST_PACKAGES=1\"\n+export TEST_RUNNER_EXTRA=\"--coverage --extended --exclude feature_dbcrash\"  # Run extended tests so that coverage does not fail, but exclude the very slow dbcrash\n export RUN_UNIT_TESTS_SEQUENTIAL=\"true\"\n export RUN_UNIT_TESTS=\"false\"\n export GOAL=\"install\"\n-export PREVIOUS_RELEASES_TO_DOWNLOAD=\"v0.15.2 v0.16.3 v0.17.2 v0.18.1 v0.19.1 v0.20.1\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-libs=no --with-gui=qt5 --enable-reduce-exports\n---enable-debug --disable-fuzz-binary  CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CC=gcc-8 CXX=g++-8\"\n+export TEST_PREVIOUS_RELEASES=true\n+export BITCOIN_CONFIG=\"--enable-zmq --with-gui=qt5 --enable-glibc-back-compat --enable-reduce-exports --enable-debug CFLAGS=\\\"-g0 -O2 -funsigned-char\\\" CXXFLAGS=\\\"-g0 -O2 -funsigned-char\\\"\""
      },
      {
        "sha": "4d3f345ca66918dd5189d24dc47b19b9772b2726",
        "filename": "ci/test/00_setup_env_native_tsan.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_tsan.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_tsan.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_tsan.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,14 +1,18 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_native_tsan\n-export DOCKER_NAME_TAG=ubuntu:hirsute\n-export PACKAGES=\"clang llvm libc++abi-dev libc++-dev python3-zmq\"\n-export DEP_OPTS=\"CC=clang CXX='clang++ -stdlib=libc++'\"\n+export DOCKER_NAME_TAG=ubuntu:16.04\n+export PACKAGES=\"clang llvm python3-zmq qtbase5-dev qttools5-dev-tools libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev libqrencode-dev\"\n+export NO_DEPENDS=1\n export GOAL=\"install\"\n-export BITCOIN_CONFIG=\"--enable-zmq --with-gui=no CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' CXXFLAGS='-g' --with-sanitizers=thread CC=clang CXX='clang++ -stdlib=libc++'\"\n+export BITCOIN_CONFIG=\"--enable-zmq --disable-wallet --with-gui=qt5 CPPFLAGS='-DARENA_DEBUG -DDEBUG_LOCKORDER' --with-sanitizers=thread --disable-hardening --disable-asm CC=clang CXX=clang++\"\n+\n+# xenial comes with old clang versions that can not parse the sanitizer suppressions files\n+# Remove unparseable lines as a hacky workaround\n+sed -i '/^implicit-/d' \"${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan\""
      },
      {
        "sha": "2a7b32cefc8e5946553ed53b3eee6f79be319792",
        "filename": "ci/test/00_setup_env_native_valgrind.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_valgrind.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_native_valgrind.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_native_valgrind.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,16 +1,15 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n-export DOCKER_NAME_TAG=\"ubuntu:20.04\"\n export CONTAINER_NAME=ci_native_valgrind\n-export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-dev libboost-system-dev libboost-filesystem-dev libboost-test-dev libdb5.3++-dev libminiupnpc-dev libnatpmp-dev libzmq3-dev libsqlite3-dev\"\n+export PACKAGES=\"valgrind clang llvm python3-zmq libevent-dev bsdmainutils libboost-system-dev libboost-filesystem-dev libboost-test-dev libboost-thread-dev libdb5.3++-dev libminiupnpc-dev libzmq3-dev\"\n export USE_VALGRIND=1\n export NO_DEPENDS=1\n-export TEST_RUNNER_EXTRA=\"--nosandbox --exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n+export TEST_RUNNER_EXTRA=\"--exclude rpc_bind\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-zmq --with-incompatible-bdb --with-gui=no CC=clang CXX=clang++\"  # TODO enable GUI"
      },
      {
        "sha": "72ad99fe5dadc7a5b7804b1fd45cdca76e1bddce",
        "filename": "ci/test/00_setup_env_s390x.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_s390x.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_s390x.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_s390x.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -18,9 +18,8 @@ if [ -n \"$QEMU_USER_CMD\" ]; then\n fi\n # Use debian to avoid 404 apt errors\n export CONTAINER_NAME=ci_s390x\n-export DOCKER_NAME_TAG=\"debian:bookworm\"\n-export TEST_RUNNER_ENV=\"LC_ALL=C\"\n-export TEST_RUNNER_EXTRA=\"--exclude rpc_bind,feature_bind_extra\"  # Excluded for now, see https://github.com/bitcoin/bitcoin/issues/17765#issuecomment-602068547\n+export DOCKER_NAME_TAG=\"debian:buster\"\n+export RUN_UNIT_TESTS=true\n export RUN_FUNCTIONAL_TESTS=true\n export GOAL=\"install\"\n export BITCOIN_CONFIG=\"--enable-reduce-exports --with-incompatible-bdb\""
      },
      {
        "sha": "a34933731c9435e49d9248e5e0bac6612ef51bc9",
        "filename": "ci/test/00_setup_env_win64.sh",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_win64.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/00_setup_env_win64.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/00_setup_env_win64.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,16 +1,14 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n export CONTAINER_NAME=ci_win64\n-export DOCKER_NAME_TAG=ubuntu:20.04  # Check that Focal can cross-compile to win64\n export HOST=x86_64-w64-mingw32\n-export DPKG_ADD_ARCH=\"i386\"\n-export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64 wine32 file\"\n+export PACKAGES=\"python3 nsis g++-mingw-w64-x86-64 wine-binfmt wine64\"\n export RUN_FUNCTIONAL_TESTS=false\n export GOAL=\"deploy\"\n-export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests --disable-external-signer\"\n+export BITCOIN_CONFIG=\"--enable-reduce-exports --disable-gui-tests\""
      },
      {
        "sha": "e939b9eeeb2963f65223a4a47a1663c0d47b41fe",
        "filename": "ci/test/03_before_install.sh",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/03_before_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/03_before_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/03_before_install.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,26 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C.UTF-8\n+\n+# Add llvm-symbolizer directory to PATH. Needed to get symbolized stack traces from the sanitizers.\n+PATH=$PATH:/usr/lib/llvm-6.0/bin/\n+export PATH\n+\n+BEGIN_FOLD () {\n+  echo \"\"\n+  CURRENT_FOLD_NAME=$1\n+  echo \"travis_fold:start:${CURRENT_FOLD_NAME}\"\n+}\n+\n+END_FOLD () {\n+  RET=$?\n+  echo \"travis_fold:end:${CURRENT_FOLD_NAME}\"\n+  if [ $RET != 0 ]; then\n+    echo \"${CURRENT_FOLD_NAME} failed with status code ${RET}\"\n+  fi\n+}\n+"
      },
      {
        "sha": "3cfaf77fdedd45451b0e285cfa76e27c6adc18eb",
        "filename": "ci/test/04_install.sh",
        "status": "modified",
        "additions": 30,
        "deletions": 43,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/04_install.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/04_install.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/04_install.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -6,25 +6,30 @@\n \n export LC_ALL=C.UTF-8\n \n+if [[ $DOCKER_NAME_TAG == centos* ]]; then\n+  export LC_ALL=en_US.utf8\n+fi\n if [[ $QEMU_USER_CMD == qemu-s390* ]]; then\n   export LC_ALL=C\n fi\n \n-if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n-  sudo -H pip3 install --upgrade pip\n-  IN_GETOPT_BIN=\"/usr/local/opt/gnu-getopt/bin/getopt\" ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n+if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n+  export PATH=\"/usr/local/opt/ccache/libexec:$PATH\"\n+  ${CI_RETRY_EXE} pip3 install $PIP_PACKAGES\n fi\n \n-# Create folders that are mounted into the docker\n+mkdir -p \"${BASE_SCRATCH_DIR}\"\n mkdir -p \"${CCACHE_DIR}\"\n mkdir -p \"${PREVIOUS_RELEASES_DIR}\"\n \n export ASAN_OPTIONS=\"detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1\"\n export LSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/lsan\"\n-export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:halt_on_error=1:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n+export TSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/tsan:log_path=${BASE_SCRATCH_DIR}/sanitizer-output/tsan\"\n export UBSAN_OPTIONS=\"suppressions=${BASE_ROOT_DIR}/test/sanitizer_suppressions/ubsan:print_stacktrace=1:halt_on_error=1:report_error_type=1\"\n-env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|LC_ALL|BOOST_TEST_RANDOM|DEBIAN_FRONTEND|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n-if [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n+env | grep -E '^(BITCOIN_CONFIG|BASE_|QEMU_|CCACHE_|WINEDEBUG|LC_ALL|BOOST_TEST_RANDOM|CONFIG_SHELL|(ASAN|LSAN|TSAN|UBSAN)_OPTIONS|TEST_PREVIOUS_RELEASES|PREVIOUS_RELEASES_DIR)' | tee /tmp/env\n+if [[ $HOST = *-mingw32 ]]; then\n+  DOCKER_ADMIN=\"--cap-add SYS_ADMIN\"\n+elif [[ $BITCOIN_CONFIG = *--with-sanitizers=*address* ]]; then # If ran with (ASan + LSan), Docker needs access to ptrace (https://github.com/google/sanitizers/issues/764)\n   DOCKER_ADMIN=\"--cap-add SYS_PTRACE\"\n fi\n \n@@ -34,12 +39,7 @@ if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Creating $DOCKER_NAME_TAG container to run in\"\n   ${CI_RETRY_EXE} docker pull \"$DOCKER_NAME_TAG\"\n \n-  if [ -n \"${RESTART_CI_DOCKER_BEFORE_RUN}\" ] ; then\n-    echo \"Restart docker before run to stop and clear all containers started with --rm\"\n-    systemctl restart docker\n-  fi\n-\n-  DOCKER_ID=$(docker run $DOCKER_ADMIN --rm --interactive --detach --tty \\\n+  DOCKER_ID=$(docker run $DOCKER_ADMIN -idt \\\n                   --mount type=bind,src=$BASE_ROOT_DIR,dst=/ro_base,readonly \\\n                   --mount type=bind,src=$CCACHE_DIR,dst=$CCACHE_DIR \\\n                   --mount type=bind,src=$DEPENDS_DIR,dst=$DEPENDS_DIR \\\n@@ -48,62 +48,49 @@ if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n                   --env-file /tmp/env \\\n                   --name $CONTAINER_NAME \\\n                   $DOCKER_NAME_TAG)\n-  export DOCKER_CI_CMD_PREFIX=\"docker exec $DOCKER_ID\"\n+\n+  DOCKER_EXEC () {\n+    docker exec $DOCKER_ID bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n+  }\n else\n   echo \"Running on host system without docker wrapper\"\n+  DOCKER_EXEC () {\n+    bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n+  }\n fi\n \n-DOCKER_EXEC () {\n-  $DOCKER_CI_CMD_PREFIX bash -c \"export PATH=$BASE_SCRATCH_DIR/bins/:\\$PATH && cd $P_CI_DIR && $*\"\n-}\n-export -f DOCKER_EXEC\n-\n if [ -n \"$DPKG_ADD_ARCH\" ]; then\n   DOCKER_EXEC dpkg --add-architecture \"$DPKG_ADD_ARCH\"\n fi\n \n if [[ $DOCKER_NAME_TAG == centos* ]]; then\n-  ${CI_RETRY_EXE} DOCKER_EXEC dnf -y install epel-release\n-  ${CI_RETRY_EXE} DOCKER_EXEC dnf -y --allowerasing install $DOCKER_PACKAGES $PACKAGES\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install epel-release\n+  ${CI_RETRY_EXE} DOCKER_EXEC yum -y install $DOCKER_PACKAGES $PACKAGES\n elif [ \"$CI_USE_APT_INSTALL\" != \"no\" ]; then\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get update\n   ${CI_RETRY_EXE} DOCKER_EXEC apt-get install --no-install-recommends --no-upgrade -y $PACKAGES $DOCKER_PACKAGES\n-  if [ -n \"$PIP_PACKAGES\" ]; then\n-    ${CI_RETRY_EXE} pip3 install --user $PIP_PACKAGES\n-  fi\n fi\n \n-if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n   top -l 1 -s 0 | awk ' /PhysMem/ {print}'\n   echo \"Number of CPUs: $(sysctl -n hw.logicalcpu)\"\n else\n   DOCKER_EXEC free -m -h\n   DOCKER_EXEC echo \"Number of CPUs \\(nproc\\):\" \\$\\(nproc\\)\n   DOCKER_EXEC echo $(lscpu | grep Endian)\n+  DOCKER_EXEC echo \"Free disk space:\"\n+  DOCKER_EXEC df -h\n fi\n-DOCKER_EXEC echo \"Free disk space:\"\n-DOCKER_EXEC df -h\n-\n-if [ \"$RUN_FUZZ_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS\" = \"true\" ] || [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n-  if [ ! -d ${DIR_QA_ASSETS} ]; then\n-    DOCKER_EXEC git clone --depth=1 https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n-  fi\n \n-  export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n-  export DIR_UNIT_TEST_DATA=${DIR_QA_ASSETS}/unit_test_data/\n+if [ ! -d ${DIR_QA_ASSETS} ]; then\n+ if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n+  DOCKER_EXEC git clone https://github.com/bitcoin-core/qa-assets ${DIR_QA_ASSETS}\n+ fi\n fi\n+export DIR_FUZZ_IN=${DIR_QA_ASSETS}/fuzz_seed_corpus/\n \n DOCKER_EXEC mkdir -p \"${BASE_SCRATCH_DIR}/sanitizer-output/\"\n \n-if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n-  DOCKER_EXEC \"update-alternatives --install /usr/bin/clang++ clang++ \\$(which clang++-9) 100\"\n-  DOCKER_EXEC \"update-alternatives --install /usr/bin/clang clang \\$(which clang-9) 100\"\n-  DOCKER_EXEC \"mkdir -p ${BASE_SCRATCH_DIR}/msan/build/\"\n-  DOCKER_EXEC \"git clone --depth=1 https://github.com/llvm/llvm-project -b llvmorg-12.0.0 ${BASE_SCRATCH_DIR}/msan/llvm-project\"\n-  DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && cmake -DLLVM_ENABLE_PROJECTS='libcxx;libcxxabi' -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_SANITIZER=Memory -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_TARGETS_TO_BUILD=X86 ../llvm-project/llvm/\"\n-  DOCKER_EXEC \"cd ${BASE_SCRATCH_DIR}/msan/build/ && make $MAKEJOBS cxx\"\n-fi\n-\n if [ -z \"$DANGER_RUN_CI_ON_HOST\" ]; then\n   echo \"Create $BASE_ROOT_DIR\"\n   DOCKER_EXEC rsync -a /ro_base/ $BASE_ROOT_DIR"
      },
      {
        "sha": "933f4cea91873e67a8ce45f6dfbcfe4ecdc1ae3e",
        "filename": "ci/test/05_before_script.sh",
        "status": "modified",
        "additions": 11,
        "deletions": 29,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/05_before_script.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/05_before_script.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/05_before_script.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,45 +1,25 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n # Make sure default datadir does not exist and is never read by creating a dummy file\n-if [ \"$CI_OS_NAME\" == \"macos\" ]; then\n+if [ \"$TRAVIS_OS_NAME\" == \"osx\" ]; then\n   echo > $HOME/Library/Application\\ Support/Bitcoin\n else\n   DOCKER_EXEC echo \\> \\$HOME/.bitcoin\n fi\n \n DOCKER_EXEC mkdir -p ${DEPENDS_DIR}/SDKs ${DEPENDS_DIR}/sdk-sources\n \n-OSX_SDK_BASENAME=\"Xcode-${XCODE_VERSION}-${XCODE_BUILD_ID}-extracted-SDK-with-libcxx-headers.tar.gz\"\n-OSX_SDK_PATH=\"${DEPENDS_DIR}/sdk-sources/${OSX_SDK_BASENAME}\"\n-\n-if [ -n \"$XCODE_VERSION\" ] && [ ! -f \"$OSX_SDK_PATH\" ]; then\n-  DOCKER_EXEC curl --location --fail \"${SDK_URL}/${OSX_SDK_BASENAME}\" -o \"$OSX_SDK_PATH\"\n-fi\n-\n-if [ -n \"$ANDROID_TOOLS_URL\" ]; then\n-  ANDROID_TOOLS_PATH=$DEPENDS_DIR/sdk-sources/android-tools.zip\n-\n-  DOCKER_EXEC curl --location --fail \"${ANDROID_TOOLS_URL}\" -o \"$ANDROID_TOOLS_PATH\"\n-  DOCKER_EXEC mkdir -p \"${ANDROID_HOME}/cmdline-tools\"\n-  DOCKER_EXEC unzip -o \"$ANDROID_TOOLS_PATH\" -d \"${ANDROID_HOME}/cmdline-tools\"\n-  DOCKER_EXEC \"yes | ${ANDROID_HOME}/cmdline-tools/tools/bin/sdkmanager --install \\\"build-tools;${ANDROID_BUILD_TOOLS_VERSION}\\\" \\\"platform-tools\\\" \\\"platforms;android-${ANDROID_API_LEVEL}\\\" \\\"ndk;${ANDROID_NDK_VERSION}\\\"\"\n+if [ -n \"$OSX_SDK\" ] && [ ! -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  curl --location --fail $SDK_URL/MacOSX${OSX_SDK}.sdk.tar.gz -o ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n-\n-if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n-  # Use BDB compiled using install_db4.sh script to work around linking issue when using BDB\n-  # from depends. See https://github.com/bitcoin/bitcoin/pull/18288#discussion_r433189350 for\n-  # details.\n-  DOCKER_EXEC \"contrib/install_db4.sh \\$(pwd) --enable-umrw CC=clang CXX=clang++ CFLAGS='${MSAN_FLAGS}' CXXFLAGS='${MSAN_AND_LIBCXX_FLAGS}'\"\n-fi\n-\n-if [ -n \"$XCODE_VERSION\" ] && [ -f \"$OSX_SDK_PATH\" ]; then\n-  DOCKER_EXEC tar -C \"${DEPENDS_DIR}/SDKs\" -xf \"$OSX_SDK_PATH\"\n+if [ -n \"$OSX_SDK\" ] && [ -f ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz ]; then\n+  DOCKER_EXEC tar -C ${DEPENDS_DIR}/SDKs -xf ${DEPENDS_DIR}/sdk-sources/MacOSX${OSX_SDK}.sdk.tar.gz\n fi\n if [[ $HOST = *-mingw32 ]]; then\n   DOCKER_EXEC update-alternatives --set $HOST-g++ \\$\\(which $HOST-g++-posix\\)\n@@ -49,12 +29,14 @@ if [ -z \"$NO_DEPENDS\" ]; then\n     # CentOS has problems building the depends if the config shell is not explicitly set\n     # (i.e. for libevent a Makefile with an empty SHELL variable is generated, leading to\n     #  an error as the first command is executed)\n-    SHELL_OPTS=\"LC_ALL=en_US.UTF-8 CONFIG_SHELL=/bin/bash\"\n+    SHELL_OPTS=\"CONFIG_SHELL=/bin/bash\"\n   else\n     SHELL_OPTS=\"CONFIG_SHELL=\"\n   fi\n   DOCKER_EXEC $SHELL_OPTS make $MAKEJOBS -C depends HOST=$HOST $DEP_OPTS\n fi\n-if [ -n \"$PREVIOUS_RELEASES_TO_DOWNLOAD\" ]; then\n-  DOCKER_EXEC test/get_previous_releases.py -b -t \"$PREVIOUS_RELEASES_DIR\" \"${PREVIOUS_RELEASES_TO_DOWNLOAD}\"\n+if [ \"$TEST_PREVIOUS_RELEASES\" = \"true\" ]; then\n+  BEGIN_FOLD previous-versions\n+  DOCKER_EXEC contrib/devtools/previous_release.sh -b -t \"$PREVIOUS_RELEASES_DIR\" v0.17.1 v0.18.1 v0.19.0.1\n+  END_FOLD\n fi"
      },
      {
        "sha": "b6043cd61ecb31aa8e02295d18f431b6e373310b",
        "filename": "ci/test/06_script_a.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 29,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/06_script_a.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/06_script_a.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_a.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,55 +1,46 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n-if [ -n \"$ANDROID_TOOLS_URL\" ]; then\n-  DOCKER_EXEC make distclean || true\n-  DOCKER_EXEC ./autogen.sh\n-  DOCKER_EXEC ./configure $BITCOIN_CONFIG --prefix=$DEPENDS_DIR/aarch64-linux-android || ( (DOCKER_EXEC cat config.log) && false)\n-  DOCKER_EXEC \"make $MAKEJOBS && cd src/qt && ANDROID_HOME=${ANDROID_HOME} ANDROID_NDK_HOME=${ANDROID_NDK_HOME} make apk\"\n-  exit 0\n-fi\n-\n-BITCOIN_CONFIG_ALL=\"--enable-suppress-external-warnings --disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n-if [ -z \"$NO_WERROR\" ]; then\n-  BITCOIN_CONFIG_ALL=\"${BITCOIN_CONFIG_ALL} --enable-werror\"\n+BITCOIN_CONFIG_ALL=\"--disable-dependency-tracking --prefix=$DEPENDS_DIR/$HOST --bindir=$BASE_OUTDIR/bin --libdir=$BASE_OUTDIR/lib\"\n+if [ -z \"$NO_DEPENDS\" ]; then\n+  DOCKER_EXEC ccache --max-size=$CCACHE_SIZE\n fi\n-DOCKER_EXEC \"ccache --zero-stats --max-size=$CCACHE_SIZE\"\n \n+BEGIN_FOLD autogen\n if [ -n \"$CONFIG_SHELL\" ]; then\n   DOCKER_EXEC \"$CONFIG_SHELL\" -c \"./autogen.sh\"\n else\n   DOCKER_EXEC ./autogen.sh\n fi\n+END_FOLD\n \n-DOCKER_EXEC mkdir -p \"${BASE_BUILD_DIR}\"\n-export P_CI_DIR=\"${BASE_BUILD_DIR}\"\n+DOCKER_EXEC mkdir -p build\n+export P_CI_DIR=\"$P_CI_DIR/build\"\n \n-DOCKER_EXEC \"${BASE_ROOT_DIR}/configure\" --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n+BEGIN_FOLD configure\n+DOCKER_EXEC ../configure --cache-file=config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n+END_FOLD\n \n+BEGIN_FOLD distdir\n+# Create folder on host and docker, so that `cd` works\n+mkdir -p \"bitcoin-$HOST\"\n DOCKER_EXEC make distdir VERSION=$HOST\n+END_FOLD\n \n-export P_CI_DIR=\"${BASE_BUILD_DIR}/bitcoin-$HOST\"\n+export P_CI_DIR=\"$P_CI_DIR/bitcoin-$HOST\"\n \n+BEGIN_FOLD configure\n DOCKER_EXEC ./configure --cache-file=../config.cache $BITCOIN_CONFIG_ALL $BITCOIN_CONFIG || ( (DOCKER_EXEC cat config.log) && false)\n+END_FOLD\n \n set -o errtrace\n trap 'DOCKER_EXEC \"cat ${BASE_SCRATCH_DIR}/sanitizer-output/* 2> /dev/null\"' ERR\n \n-if [[ ${USE_MEMORY_SANITIZER} == \"true\" ]]; then\n-  # MemorySanitizer (MSAN) does not support tracking memory initialization done by\n-  # using the Linux getrandom syscall. Avoid using getrandom by undefining\n-  # HAVE_SYS_GETRANDOM. See https://github.com/google/sanitizers/issues/852 for\n-  # details.\n-  DOCKER_EXEC 'grep -v HAVE_SYS_GETRANDOM src/config/bitcoin-config.h > src/config/bitcoin-config.h.tmp && mv src/config/bitcoin-config.h.tmp src/config/bitcoin-config.h'\n-fi\n-\n+BEGIN_FOLD build\n DOCKER_EXEC make $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && DOCKER_EXEC make $GOAL V=1 ; false )\n-\n-DOCKER_EXEC \"ccache --version | head -n 1 && ccache --show-stats\"\n-DOCKER_EXEC du -sh \"${DEPENDS_DIR}\"/*/\n-DOCKER_EXEC du -sh \"${PREVIOUS_RELEASES_DIR}\"\n+END_FOLD"
      },
      {
        "sha": "2a98f3fa5e11e05c6ee065c80c96d37170120539",
        "filename": "ci/test/06_script_b.sh",
        "status": "modified",
        "additions": 20,
        "deletions": 15,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/06_script_b.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/06_script_b.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/06_script_b.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,43 +1,48 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n-if [[ $HOST = *-mingw32 ]]; then\n-  # Generate all binaries, so that they can be wrapped\n-  DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n-  DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-wine.sh\"\n-fi\n-\n if [ -n \"$QEMU_USER_CMD\" ]; then\n+  BEGIN_FOLD wrap-qemu\n   # Generate all binaries, so that they can be wrapped\n   DOCKER_EXEC make $MAKEJOBS -C src/secp256k1 VERBOSE=1\n+  DOCKER_EXEC make $MAKEJOBS -C src/univalue VERBOSE=1\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-qemu.sh\"\n+  END_FOLD\n fi\n \n if [ -n \"$USE_VALGRIND\" ]; then\n+  BEGIN_FOLD wrap-valgrind\n   DOCKER_EXEC \"${BASE_ROOT_DIR}/ci/test/wrap-valgrind.sh\"\n+  END_FOLD\n fi\n \n+bash -c \"${CI_WAIT}\" &  # Print dots in case the tests take a long time to run\n+\n if [ \"$RUN_UNIT_TESTS\" = \"true\" ]; then\n-  DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  BEGIN_FOLD unit-tests\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib make $MAKEJOBS check VERBOSE=1\n+  END_FOLD\n fi\n \n if [ \"$RUN_UNIT_TESTS_SEQUENTIAL\" = \"true\" ]; then\n-  DOCKER_EXEC ${TEST_RUNNER_ENV} DIR_UNIT_TEST_DATA=${DIR_UNIT_TEST_DATA} LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_BUILD_DIR}/bitcoin-*/src/test/test_bitcoin*\" --catch_system_errors=no -l test_suite\n+  BEGIN_FOLD unit-tests-seq\n+  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib \"${BASE_ROOT_DIR}/build/bitcoin-*/src/test/test_bitcoin\" --catch_system_errors=no -l test_suite\n+  END_FOLD\n fi\n \n if [ \"$RUN_FUNCTIONAL_TESTS\" = \"true\" ]; then\n-  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib ${TEST_RUNNER_ENV} test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 --timeout-factor=${TEST_RUNNER_TIMEOUT_FACTOR} ${TEST_RUNNER_EXTRA} --quiet --failfast\n-fi\n-\n-if [ \"$RUN_SECURITY_TESTS\" = \"true\" ]; then\n-  DOCKER_EXEC make test-security-check\n+  BEGIN_FOLD functional-tests\n+  DOCKER_EXEC test/functional/test_runner.py --ci $MAKEJOBS --tmpdirprefix \"${BASE_SCRATCH_DIR}/test_runner/\" --ansi --combinedlogslen=4000 ${TEST_RUNNER_EXTRA} --quiet --failfast\n+  END_FOLD\n fi\n \n if [ \"$RUN_FUZZ_TESTS\" = \"true\" ]; then\n-  DOCKER_EXEC LD_LIBRARY_PATH=$DEPENDS_DIR/$HOST/lib test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} $MAKEJOBS -l DEBUG ${DIR_FUZZ_IN}\n+  BEGIN_FOLD fuzz-tests\n+  DOCKER_EXEC test/fuzz/test_runner.py ${FUZZ_TESTS_CONFIG} -l DEBUG ${DIR_FUZZ_IN}\n+  END_FOLD\n fi"
      },
      {
        "sha": "f1d30887482a5b374c2ef3ec50eb70b5d943b8fe",
        "filename": "ci/test/wrap-qemu.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/wrap-qemu.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test/wrap-qemu.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-qemu.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "82964897e133f4e6459665382983ea88319c930a",
        "filename": "ci/test/wrap-wine.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/wrap-wine.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/ci/test/wrap-wine.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test/wrap-wine.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,20 +0,0 @@\n-#!/usr/bin/env bash\n-#\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-export LC_ALL=C.UTF-8\n-\n-for b_name in {\"${BASE_OUTDIR}/bin\"/*,src/secp256k1/*tests,src/univalue/{no_nul,test_json,unitester,object}}.exe; do\n-    # shellcheck disable=SC2044\n-    for b in $(find \"${BASE_ROOT_DIR}\" -executable -type f -name \"$(basename $b_name)\"); do\n-      if (file \"$b\" | grep \"Windows\"); then\n-        echo \"Wrap $b ...\"\n-        mv \"$b\" \"${b}_orig\"\n-        echo '#!/usr/bin/env bash' > \"$b\"\n-        echo \"( wine \\\"${b}_orig\\\" \\\"\\$@\\\" ) || ( sleep 1 && wine \\\"${b}_orig\\\" \\\"\\$@\\\" )\" >> \"$b\"\n-        chmod +x \"$b\"\n-      fi\n-    done\n-done"
      },
      {
        "sha": "a1d4bd19524daefccee252ec22fbcdd780c2c3d1",
        "filename": "ci/test_run_all.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test_run_all.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/ci/test_run_all.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/ci/test_run_all.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,12 +1,13 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n export LC_ALL=C.UTF-8\n \n set -o errexit; source ./ci/test/00_setup_env.sh\n+set -o errexit; source ./ci/test/03_before_install.sh\n set -o errexit; source ./ci/test/04_install.sh\n set -o errexit; source ./ci/test/05_before_script.sh\n set -o errexit; source ./ci/test/06_script_a.sh"
      },
      {
        "sha": "e8a8ae86e5b3c7a8907a960e7b087241e6be9106",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 464,
        "deletions": 701,
        "changes": 1165,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,33 +1,24 @@\n AC_PREREQ([2.69])\n-define(_CLIENT_VERSION_MAJOR, 22)\n-define(_CLIENT_VERSION_MINOR, 99)\n-define(_CLIENT_VERSION_BUILD, 0)\n+define(_CLIENT_VERSION_MAJOR, 0)\n+define(_CLIENT_VERSION_MINOR, 20)\n+define(_CLIENT_VERSION_REVISION, 0)\n+define(_CLIENT_VERSION_BUILD, 2)\n define(_CLIENT_VERSION_RC, 0)\n-define(_CLIENT_VERSION_IS_RELEASE, false)\n-define(_COPYRIGHT_YEAR, 2021)\n+define(_CLIENT_VERSION_IS_RELEASE, true)\n+define(_COPYRIGHT_YEAR, 2020)\n define(_COPYRIGHT_HOLDERS,[The %s developers])\n-define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Core]])\n-AC_INIT([Bitcoin Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_BUILD)m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/bitcoin/bitcoin/issues],[bitcoin],[https://bitcoincore.org/])\n+define(_COPYRIGHT_HOLDERS_SUBSTITUTION,[[Bitcoin Staking Core]])\n+AC_INIT([Bitcoin Staking Core],m4_join([.], _CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MINOR, _CLIENT_VERSION_REVISION, m4_if(_CLIENT_VERSION_BUILD, [0], [], _CLIENT_VERSION_BUILD))m4_if(_CLIENT_VERSION_RC, [0], [], [rc]_CLIENT_VERSION_RC),[https://github.com/BitcoinStaking/BitcoinS/issues],[bitcoin-staking],[https://bitcoinstaking.org/])\n AC_CONFIG_SRCDIR([src/validation.cpp])\n AC_CONFIG_HEADERS([src/config/bitcoin-config.h])\n AC_CONFIG_AUX_DIR([build-aux])\n AC_CONFIG_MACRO_DIR([build-aux/m4])\n \n-m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR([PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh])])\n-PKG_PROG_PKG_CONFIG\n-if test \"x$PKG_CONFIG\" = x; then\n-  AC_MSG_ERROR([pkg-config not found])\n-fi\n-\n-BITCOIN_DAEMON_NAME=bitcoind\n-BITCOIN_GUI_NAME=bitcoin-qt\n-BITCOIN_CLI_NAME=bitcoin-cli\n-BITCOIN_TX_NAME=bitcoin-tx\n-BITCOIN_UTIL_NAME=bitcoin-util\n-BITCOIN_WALLET_TOOL_NAME=bitcoin-wallet\n-dnl Multi Process\n-BITCOIN_MP_NODE_NAME=bitcoin-node\n-BITCOIN_MP_GUI_NAME=bitcoin-gui\n+BITCOIN_DAEMON_NAME=bitcoin-stakingd\n+BITCOIN_GUI_NAME=bitcoin-staking-qt\n+BITCOIN_CLI_NAME=bitcoin-staking-cli\n+BITCOIN_TX_NAME=bitcoin-staking-tx\n+BITCOIN_WALLET_TOOL_NAME=bitcoin-staking-wallet\n \n dnl Unless the user specified ARFLAGS, force it to be cr\n AC_ARG_VAR(ARFLAGS, [Flags for the archiver, defaults to <cr> if not set])\n@@ -70,16 +61,8 @@ case $host in\n      lt_cv_deplibs_check_method=\"pass_all\"\n   ;;\n esac\n-\n-AC_ARG_WITH([seccomp],\n-  [AS_HELP_STRING([--with-seccomp],\n-  [enable experimental syscall sandbox feature (-sandbox), default is yes if seccomp-bpf is detected under Linux x86_64])],\n-  [seccomp_found=$withval],\n-  [seccomp_found=auto])\n-\n-dnl Require C++17 compiler (no GNU extensions)\n-AX_CXX_COMPILE_STDCXX([17], [noext], [mandatory])\n-\n+dnl Require C++11 compiler (no GNU extensions)\n+AX_CXX_COMPILE_STDCXX([11], [noext], [mandatory], [nodefault])\n dnl Check if -latomic is required for <std::atomic>\n CHECK_ATOMIC\n \n@@ -104,17 +87,21 @@ AC_PATH_TOOL(AR, ar)\n AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n-AC_PATH_TOOL(LLVM_COV, llvm-cov)\n AC_PATH_PROG(LCOV, lcov)\n-dnl Python 3.6 is specified in .python-version and should be used if available, see doc/dependencies.md\n-AC_PATH_PROGS([PYTHON], [python3.6 python3.7 python3.8 python3.9 python3.10 python3.11 python3 python])\n+dnl Python 3.5 is specified in .python-version and should be used if available, see doc/dependencies.md\n+AC_PATH_PROGS([PYTHON], [python3.5 python3.6 python3.7 python3.8 python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)\n AC_PATH_PROG(XGETTEXT,xgettext)\n AC_PATH_PROG(HEXDUMP,hexdump)\n+AC_PATH_TOOL(READELF, readelf)\n+AC_PATH_TOOL(CPPFILT, c++filt)\n AC_PATH_TOOL(OBJCOPY, objcopy)\n AC_PATH_PROG(DOXYGEN, doxygen)\n+if test -z \"$DOXYGEN\"; then\n+   AC_MSG_WARN([Doxygen not found])\n+fi\n AM_CONDITIONAL([HAVE_DOXYGEN], [test -n \"$DOXYGEN\"])\n \n AC_ARG_VAR(PYTHONPATH, Augments the default search path for python module files)\n@@ -123,25 +110,7 @@ AC_ARG_ENABLE([wallet],\n   [AS_HELP_STRING([--disable-wallet],\n   [disable wallet (enabled by default)])],\n   [enable_wallet=$enableval],\n-  [enable_wallet=auto])\n-\n-AC_ARG_WITH([sqlite],\n-  [AS_HELP_STRING([--with-sqlite=yes|no|auto],\n-  [enable sqlite wallet support (default: auto, i.e., enabled if wallet is enabled and sqlite is found)])],\n-  [use_sqlite=$withval],\n-  [use_sqlite=auto])\n-\n-AC_ARG_WITH([bdb],\n-  [AS_HELP_STRING([--without-bdb],\n-  [disable bdb wallet support (default is enabled if wallet is enabled)])],\n-  [use_bdb=$withval],\n-  [use_bdb=auto])\n-\n-AC_ARG_ENABLE([ebpf],\n-  [AS_HELP_STRING([--enable-ebpf],\n-  [enable eBPF tracing (default is yes if sys/sdt.h is found)])],\n-  [use_ebpf=$enableval],\n-  [use_ebpf=yes])\n+  [enable_wallet=yes])\n \n AC_ARG_WITH([miniupnpc],\n   [AS_HELP_STRING([--with-miniupnpc],\n@@ -155,22 +124,10 @@ AC_ARG_ENABLE([upnp-default],\n   [use_upnp_default=$enableval],\n   [use_upnp_default=no])\n \n-AC_ARG_WITH([natpmp],\n-            [AS_HELP_STRING([--with-natpmp],\n-                            [enable NAT-PMP (default is yes if libnatpmp is found)])],\n-            [use_natpmp=$withval],\n-            [use_natpmp=auto])\n-\n-AC_ARG_ENABLE([natpmp-default],\n-              [AS_HELP_STRING([--enable-natpmp-default],\n-                              [if NAT-PMP is enabled, turn it on at startup (default is no)])],\n-              [use_natpmp_default=$enableval],\n-              [use_natpmp_default=no])\n-\n AC_ARG_ENABLE(tests,\n     AS_HELP_STRING([--disable-tests],[do not compile tests (default is to compile)]),\n     [use_tests=$enableval],\n-    [use_tests=yes])\n+    [use_tests=no])\n \n AC_ARG_ENABLE(gui-tests,\n     AS_HELP_STRING([--disable-gui-tests],[do not compile GUI tests (default is to compile if GUI and tests enabled)]),\n@@ -189,16 +146,10 @@ AC_ARG_ENABLE([extended-functional-tests],\n \n AC_ARG_ENABLE([fuzz],\n     AS_HELP_STRING([--enable-fuzz],\n-    [build for fuzzing (default no). enabling this will disable all other targets and override --{enable,disable}-fuzz-binary]),\n+    [enable building of fuzz targets (default no). enabling this will disable all other targets]),\n     [enable_fuzz=$enableval],\n     [enable_fuzz=no])\n \n-AC_ARG_ENABLE([fuzz-binary],\n-    AS_HELP_STRING([--enable-fuzz-binary],\n-    [enable building of fuzz binary (default yes).]),\n-    [enable_fuzz_binary=$enableval],\n-    [enable_fuzz_binary=yes])\n-\n AC_ARG_WITH([qrencode],\n   [AS_HELP_STRING([--with-qrencode],\n   [enable QR code support (default is yes if qt is enabled and libqrencode is found)])],\n@@ -223,16 +174,6 @@ AC_ARG_ENABLE([ccache],\n   [use_ccache=$enableval],\n   [use_ccache=auto])\n \n-dnl Suppress warnings from external headers (e.g. Boost, Qt).\n-dnl May be useful if warnings from external headers clutter the build output\n-dnl too much, so that it becomes difficult to spot Bitcoin Core warnings\n-dnl or if they cause a build failure with --enable-werror.\n-AC_ARG_ENABLE([suppress-external-warnings],\n-  [AS_HELP_STRING([--enable-suppress-external-warnings],\n-                  [Suppress warnings from external headers (default is no)])],\n-  [suppress_external_warnings=$enableval],\n-  [suppress_external_warnings=no])\n-\n AC_ARG_ENABLE([lcov],\n   [AS_HELP_STRING([--enable-lcov],\n   [enable lcov testing (default is no)])],\n@@ -245,9 +186,15 @@ AC_ARG_ENABLE([lcov-branch-coverage],\n   [use_lcov_branch=yes],\n   [use_lcov_branch=no])\n \n+AC_ARG_ENABLE([glibc-back-compat],\n+  [AS_HELP_STRING([--enable-glibc-back-compat],\n+  [enable backwards compatibility with glibc])],\n+  [use_glibc_compat=$enableval],\n+  [use_glibc_compat=no])\n+\n AC_ARG_ENABLE([threadlocal],\n   [AS_HELP_STRING([--enable-threadlocal],\n-  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enable if there is platform support)])],\n+  [enable features that depend on the c++ thread_local keyword (currently just thread names in debug logs). (default is to enabled if there is platform support and glibc-back-compat is not enabled)])],\n   [use_thread_local=$enableval],\n   [use_thread_local=auto])\n \n@@ -261,29 +208,27 @@ if test \"x$use_asm\" = xyes; then\n   AC_DEFINE(USE_ASM, 1, [Define this symbol to build in assembly routines])\n fi\n \n+AC_ARG_WITH([system-univalue],\n+  [AS_HELP_STRING([--with-system-univalue],\n+  [Build with system UniValue (default is no)])],\n+  [system_univalue=$withval],\n+  [system_univalue=no]\n+)\n AC_ARG_ENABLE([zmq],\n   [AS_HELP_STRING([--disable-zmq],\n   [disable ZMQ notifications])],\n   [use_zmq=$enableval],\n   [use_zmq=yes])\n \n-AC_ARG_WITH([libmultiprocess],\n-  [AS_HELP_STRING([--with-libmultiprocess=yes|no|auto],\n-  [Build with libmultiprocess library. (default: auto, i.e. detect with pkg-config)])],\n-  [with_libmultiprocess=$withval],\n-  [with_libmultiprocess=auto])\n-\n-AC_ARG_WITH([mpgen],\n-  [AS_HELP_STRING([--with-mpgen=yes|no|auto|PREFIX],\n-  [Build with libmultiprocess codegen tool. Useful to specify different libmultiprocess host system library and build system codegen tool prefixes when cross-compiling (default is host system libmultiprocess prefix)])],\n-  [with_mpgen=$withval],\n-  [with_mpgen=auto])\n+AC_ARG_ENABLE([bip70],\n+  [AS_HELP_STRING([--enable-bip70],\n+  [BIP70 (payment protocol) support in the GUI (no longer supported)])],\n+  [enable_bip70=$enableval],\n+  [enable_bip70=no])\n \n-AC_ARG_ENABLE([multiprocess],\n-  [AS_HELP_STRING([--enable-multiprocess],\n-  [build multiprocess bitcoin-node, bitcoin-wallet, and bitcoin-gui executables in addition to monolithic bitcoind and bitcoin-qt executables. Requires libmultiprocess library. Experimental (default is no)])],\n-  [enable_multiprocess=$enableval],\n-  [enable_multiprocess=no])\n+if test x$enable_bip70 != xno; then\n+  AC_MSG_ERROR([BIP70 is no longer supported!])\n+fi\n \n AC_ARG_ENABLE(man,\n     [AS_HELP_STRING([--disable-man],\n@@ -311,43 +256,23 @@ AC_ARG_ENABLE([gprof],\n     [enable_gprof=$enableval],\n     [enable_gprof=no])\n \n+dnl Pass compiler & liner flags that make builds deterministic\n+AC_ARG_ENABLE([determinism],\n+    [AS_HELP_STRING([--enable-determinism],\n+                    [Enable compilation flags that make builds deterministic (default is no)])],\n+    [enable_determinism=$enableval],\n+    [enable_determinism=no])\n+\n dnl Turn warnings into errors\n AC_ARG_ENABLE([werror],\n     [AS_HELP_STRING([--enable-werror],\n-                    [Treat compiler warnings as errors (default is no)])],\n+                    [Treat certain compiler warnings as errors (default is no)])],\n     [enable_werror=$enableval],\n     [enable_werror=no])\n \n-AC_ARG_ENABLE([external-signer],\n-    [AS_HELP_STRING([--enable-external-signer],[compile external signer support (default is yes, requires Boost::Process)])],\n-    [use_external_signer=$enableval],\n-    [use_external_signer=yes])\n-\n AC_LANG_PUSH([C++])\n-\n-dnl Check for a flag to turn compiler warnings into errors. This is helpful for checks which may\n-dnl appear to succeed because by default they merely emit warnings when they fail.\n-dnl\n-dnl Note that this is not necessarily a check to see if -Werror is supported, but rather to see if\n-dnl a compile with -Werror can succeed. This is important because the compiler may already be\n-dnl warning about something unrelated, for example about some path issue. If that is the case,\n-dnl -Werror cannot be used because all of those warnings would be turned into errors.\n AX_CHECK_COMPILE_FLAG([-Werror],[CXXFLAG_WERROR=\"-Werror\"],[CXXFLAG_WERROR=\"\"])\n \n-dnl Check for a flag to turn linker warnings into errors. When flags are passed to linkers via the\n-dnl compiler driver using a -Wl,-foo flag, linker warnings may be swallowed rather than bubbling up.\n-dnl See note above, the same applies here as well.\n-dnl\n-dnl LDFLAG_WERROR Should only be used when testing -Wl,*\n-case $host in\n- *darwin*)\n-    AX_CHECK_LINK_FLAG([-Wl,-fatal_warnings],[LDFLAG_WERROR=\"-Wl,-fatal_warnings\"],[LDFLAG_WERROR=\"\"])\n-    ;;\n-  *)\n-    AX_CHECK_LINK_FLAG([-Wl,--fatal-warnings],[LDFLAG_WERROR=\"-Wl,--fatal-warnings\"],[LDFLAG_WERROR=\"\"])\n-    ;;\n-esac\n-\n if test \"x$enable_debug\" = xyes; then\n   dnl Clear default -g -O2 flags\n   if test \"x$CXXFLAGS_overridden\" = xno; then\n@@ -366,7 +291,6 @@ if test \"x$enable_debug\" = xyes; then\n \n   AX_CHECK_PREPROC_FLAG([-DDEBUG],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_PREPROC_FLAG([-DDEBUG_LOCKORDER],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DDEBUG_LOCKORDER\"]],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-ftrapv],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -ftrapv\"],,[[$CXXFLAG_WERROR]])\n fi\n \n@@ -402,57 +326,38 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n-  ERROR_CXXFLAGS=$CXXFLAG_WERROR\n-\n-  dnl -Wreturn-type is broken in GCC for MinGW-w64.\n-  dnl https://sourceforge.net/p/mingw-w64/bugs/306/\n-  AX_CHECK_COMPILE_FLAG([-Werror=return-type], [], [ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Wno-error=return-type\"], [$CXXFLAG_WERROR],\n-                        [AC_LANG_SOURCE([[#include <cassert>\n-                                          int f(){ assert(false); }]])])\n+  AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=unused-variable],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=unused-variable\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=date-time],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=date-time\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wall],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wall\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wextra],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wextra\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wgnu],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wgnu\"],,[[$CXXFLAG_WERROR]])\n-  dnl some compilers will ignore -Wformat-security without -Wformat, so just combine the two here.\n-  AX_CHECK_COMPILE_FLAG([-Wformat -Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wvla],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wvla\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wshadow-field],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wshadow-field\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wthread-safety],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wloop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wloop-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wswitch],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wswitch\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wformat-security],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wformat-security\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wthread-safety-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wthread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wrange-loop-analysis],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wrange-loop-analysis\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wredundant-decls],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wredundant-decls\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wunused-member-function],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-member-function\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wunused-variable],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunused-variable\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-branches],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-branches\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wduplicated-cond],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wduplicated-cond\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wlogical-op],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wlogical-op\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Woverloaded-virtual],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Woverloaded-virtual\"],,[[$CXXFLAG_WERROR]])\n-  dnl -Wsuggest-override is broken with GCC before 9.2\n-  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n-  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n-                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n-  AX_CHECK_COMPILE_FLAG([-Wunreachable-code-loop-increment],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wunreachable-code-loop-increment\"],,[[$CXXFLAG_WERROR]])\n-  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough], [WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wimplicit-fallthrough\"], [], [$CXXFLAG_WERROR])\n-\n-  if test x$suppress_external_warnings != xno ; then\n-    AX_CHECK_COMPILE_FLAG([-Wdocumentation],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdocumentation\"],,[[$CXXFLAG_WERROR]])\n-  fi\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n   dnl set the -Wno-foo case if it works.\n   AX_CHECK_COMPILE_FLAG([-Wunused-parameter],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-parameter\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wself-assign],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-self-assign\"],,[[$CXXFLAG_WERROR]])\n-  if test x$suppress_external_warnings != xyes ; then\n-    AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n-  fi\n+  AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n fi\n \n-dnl Don't allow extended (non-ASCII) symbols in identifiers. This is easier for code review.\n-AX_CHECK_COMPILE_FLAG([-fno-extended-identifiers],[[CXXFLAGS=\"$CXXFLAGS -fno-extended-identifiers\"]],,[[$CXXFLAG_WERROR]])\n-\n enable_sse42=no\n enable_sse41=no\n enable_avx2=no\n@@ -544,17 +449,13 @@ AX_CHECK_COMPILE_FLAG([-march=armv8-a+crc+crypto],[[ARM_CRC_CXXFLAGS=\"-march=arm\n \n TEMP_CXXFLAGS=\"$CXXFLAGS\"\n CXXFLAGS=\"$CXXFLAGS $ARM_CRC_CXXFLAGS\"\n-AC_MSG_CHECKING(for AArch64 CRC32 intrinsics)\n+AC_MSG_CHECKING(for ARM CRC32 intrinsics)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n     #include <arm_acle.h>\n     #include <arm_neon.h>\n   ]],[[\n-#ifdef __aarch64__\n     __crc32cb(0, 0); __crc32ch(0, 0); __crc32cw(0, 0); __crc32cd(0, 0);\n     vmull_p64(0, 0);\n-#else\n-#error \"crc32c library does not support hardware acceleration on 32-bit ARM\"\n-#endif\n   ]])],\n  [ AC_MSG_RESULT(yes); enable_arm_crc=yes; ],\n  [ AC_MSG_RESULT(no)]\n@@ -567,34 +468,28 @@ CPPFLAGS=\"$CPPFLAGS -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_ARG_WITH([utils],\n   [AS_HELP_STRING([--with-utils],\n-  [build bitcoin-cli bitcoin-tx bitcoin-util bitcoin-wallet (default=yes)])],\n+  [build bitcoin-staking-cli bitcoin-staking-tx bitcoin-staking-wallet (default=yes)])],\n   [build_bitcoin_utils=$withval],\n   [build_bitcoin_utils=yes])\n \n AC_ARG_ENABLE([util-cli],\n   [AS_HELP_STRING([--enable-util-cli],\n-  [build bitcoin-cli])],\n+  [build bitcoin-staking-cli])],\n   [build_bitcoin_cli=$enableval],\n   [build_bitcoin_cli=$build_bitcoin_utils])\n \n AC_ARG_ENABLE([util-tx],\n   [AS_HELP_STRING([--enable-util-tx],\n-  [build bitcoin-tx])],\n+  [build bitcoin-staking-tx])],\n   [build_bitcoin_tx=$enableval],\n   [build_bitcoin_tx=$build_bitcoin_utils])\n \n AC_ARG_ENABLE([util-wallet],\n   [AS_HELP_STRING([--enable-util-wallet],\n-  [build bitcoin-wallet])],\n+  [build bitcoin-staking-wallet])],\n   [build_bitcoin_wallet=$enableval],\n   [build_bitcoin_wallet=$build_bitcoin_utils])\n \n-AC_ARG_ENABLE([util-util],\n-  [AS_HELP_STRING([--enable-util-util],\n-  [build bitcoin-util])],\n-  [build_bitcoin_util=$enableval],\n-  [build_bitcoin_util=$build_bitcoin_utils])\n-\n AC_ARG_WITH([libs],\n   [AS_HELP_STRING([--with-libs],\n   [build libraries (default=yes)])],\n@@ -603,27 +498,32 @@ AC_ARG_WITH([libs],\n \n AC_ARG_WITH([daemon],\n   [AS_HELP_STRING([--with-daemon],\n-  [build bitcoind daemon (default=yes)])],\n+  [build bitcoin-stakingd daemon (default=yes)])],\n   [build_bitcoind=$withval],\n   [build_bitcoind=yes])\n \n+use_pkgconfig=yes\n case $host in\n   *mingw*)\n+\n+     dnl pkgconfig does more harm than good with MinGW\n+     use_pkgconfig=no\n+\n      TARGET_OS=windows\n-     AC_CHECK_LIB([kernel32], [GetModuleFileNameA],, AC_MSG_ERROR(libkernel32 missing))\n+     AC_CHECK_LIB([kernel32], [main],, AC_MSG_ERROR(libkernel32 missing))\n      AC_CHECK_LIB([user32],   [main],, AC_MSG_ERROR(libuser32 missing))\n      AC_CHECK_LIB([gdi32],    [main],, AC_MSG_ERROR(libgdi32 missing))\n      AC_CHECK_LIB([comdlg32], [main],, AC_MSG_ERROR(libcomdlg32 missing))\n      AC_CHECK_LIB([winmm],    [main],, AC_MSG_ERROR(libwinmm missing))\n-     AC_CHECK_LIB([shell32],  [SHGetSpecialFolderPathW],, AC_MSG_ERROR(libshell32 missing))\n+     AC_CHECK_LIB([shell32],  [main],, AC_MSG_ERROR(libshell32 missing))\n      AC_CHECK_LIB([comctl32], [main],, AC_MSG_ERROR(libcomctl32 missing))\n-     AC_CHECK_LIB([ole32],    [CoCreateInstance],, AC_MSG_ERROR(libole32 missing))\n+     AC_CHECK_LIB([ole32],    [main],, AC_MSG_ERROR(libole32 missing))\n      AC_CHECK_LIB([oleaut32], [main],, AC_MSG_ERROR(liboleaut32 missing))\n      AC_CHECK_LIB([uuid],     [main],, AC_MSG_ERROR(libuuid missing))\n-     AC_CHECK_LIB([advapi32], [CryptAcquireContextW],, AC_MSG_ERROR(libadvapi32 missing))\n-     AC_CHECK_LIB([ws2_32],   [WSAStartup],, AC_MSG_ERROR(libws2_32 missing))\n-     AC_CHECK_LIB([shlwapi],  [PathRemoveFileSpecW],, AC_MSG_ERROR(libshlwapi missing))\n-     AC_CHECK_LIB([iphlpapi], [GetAdaptersAddresses],, AC_MSG_ERROR(libiphlpapi missing))\n+     AC_CHECK_LIB([advapi32], [main],, AC_MSG_ERROR(libadvapi32 missing))\n+     AC_CHECK_LIB([ws2_32],   [main],, AC_MSG_ERROR(libws2_32 missing))\n+     AC_CHECK_LIB([shlwapi],  [main],, AC_MSG_ERROR(libshlwapi missing))\n+     AC_CHECK_LIB([iphlpapi], [main],, AC_MSG_ERROR(libiphlpapi missing))\n \n      dnl -static is interpreted by libtool, where it has a different meaning.\n      dnl In libtool-speak, it's -all-static.\n@@ -639,7 +539,10 @@ case $host in\n        AC_MSG_ERROR(\"windres not found\")\n      fi\n \n-     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -D_WIN32_WINNT=0x0601 -D_WIN32_IE=0x0501 -DWIN32_LEAN_AND_MEAN\"\n+     CPPFLAGS=\"$CPPFLAGS -D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -D_WIN32_WINNT=0x0601\"\n+     if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n+       CXXFLAGS=\"$CXXFLAGS -w\"\n+     fi\n \n      dnl libtool insists upon adding -nostdlib and a list of objects/libs to link against.\n      dnl That breaks our ability to build dll's with static libgcc/libstdc++/libssp. Override\n@@ -649,8 +552,6 @@ case $host in\n      archive_cmds_CXX=\"\\$CC -shared \\$libobjs \\$deplibs \\$compiler_flags -static -o \\$output_objdir/\\$soname \\${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker \\$lib\"\n      postdeps_CXX=\n \n-     dnl We require Windows 7 (NT 6.1) or later\n-     AX_CHECK_LINK_FLAG([[-Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1]],[LDFLAGS=\"$LDFLAGS -Wl,--major-subsystem-version -Wl,6 -Wl,--minor-subsystem-version -Wl,1\"],,[[$LDFLAG_WERROR]])\n      ;;\n   *darwin*)\n      TARGET_OS=darwin\n@@ -665,59 +566,31 @@ case $host in\n          dnl It's safe to add these paths even if the functionality is disabled by\n          dnl the user (--without-wallet or --without-gui for example).\n \n-         if test \"x$use_bdb\" != xno && $BREW list --versions berkeley-db4 >/dev/null && test \"x$BDB_CFLAGS\" = \"x\" && test \"x$BDB_LIBS\" = \"x\"; then\n-           bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n-           dnl This must precede the call to BITCOIN_FIND_BDB48 below.\n-           BDB_CFLAGS=\"-I$bdb_prefix/include\"\n-           BDB_LIBS=\"-L$bdb_prefix/lib -ldb_cxx-4.8\"\n+         openssl_prefix=`$BREW --prefix openssl 2>/dev/null`\n+         bdb_prefix=$($BREW --prefix berkeley-db4 2>/dev/null)\n+         qt5_prefix=$($BREW --prefix qt5 2>/dev/null)\n+         if test x$openssl_prefix != x; then\n+           PKG_CONFIG_PATH=\"$openssl_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n-\n-         if test \"x$use_sqlite\" != xno && $BREW list --versions sqlite3 >/dev/null; then\n-           export PKG_CONFIG_PATH=\"$($BREW --prefix sqlite3 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         if test x$bdb_prefix != x; then\n+           CPPFLAGS=\"$CPPFLAGS -I$bdb_prefix/include\"\n+           LIBS=\"$LIBS -L$bdb_prefix/lib\"\n          fi\n-\n-         if $BREW list --versions qt5 >/dev/null; then\n-           export PKG_CONFIG_PATH=\"$($BREW --prefix qt5 2>/dev/null)/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+         if test x$qt5_prefix != x; then\n+           PKG_CONFIG_PATH=\"$qt5_prefix/lib/pkgconfig:$PKG_CONFIG_PATH\"\n+           export PKG_CONFIG_PATH\n          fi\n-\n-         case $host in\n-           *aarch64*)\n-             dnl The preferred Homebrew prefix for Apple Silicon is /opt/homebrew.\n-             dnl Therefore, as we do not use pkg-config to detect miniupnpc and libnatpmp\n-             dnl packages, we should set the CPPFLAGS and LDFLAGS variables for them\n-             dnl explicitly.\n-             if test \"x$use_upnp\" != xno && $BREW list --versions miniupnpc >/dev/null; then\n-               miniupnpc_prefix=$($BREW --prefix miniupnpc 2>/dev/null)\n-               if test \"x$suppress_external_warnings\" != xno; then\n-                 CPPFLAGS=\"$CPPFLAGS -isystem $miniupnpc_prefix/include\"\n-               else\n-                 CPPFLAGS=\"$CPPFLAGS -I$miniupnpc_prefix/include\"\n-               fi\n-               LDFLAGS=\"$LDFLAGS -L$miniupnpc_prefix/lib\"\n-             fi\n-             if test \"x$use_natpmp\" != xno && $BREW list --versions libnatpmp >/dev/null; then\n-               libnatpmp_prefix=$($BREW --prefix libnatpmp 2>/dev/null)\n-               if test \"x$suppress_external_warnings\" != xno; then\n-                 CPPFLAGS=\"$CPPFLAGS -isystem $libnatpmp_prefix/include\"\n-               else\n-                 CPPFLAGS=\"$CPPFLAGS -I$libnatpmp_prefix/include\"\n-               fi\n-               LDFLAGS=\"$LDFLAGS -L$libnatpmp_prefix/lib\"\n-             fi\n-             ;;\n-         esac\n        fi\n      else\n        case $build_os in\n          *darwin*)\n            BUILD_OS=darwin\n            ;;\n          *)\n-           AC_PATH_TOOL([DSYMUTIL], [dsymutil], dsymutil)\n            AC_PATH_TOOL([INSTALLNAMETOOL], [install_name_tool], install_name_tool)\n            AC_PATH_TOOL([OTOOL], [otool], otool)\n-           AC_PATH_PROGS([XORRISOFS], [xorrisofs], xorrisofs)\n-           AC_PATH_PROGS([DMG], [dmg], dmg)\n+           AC_PATH_PROGS([GENISOIMAGE], [genisoimage mkisofs],genisoimage)\n            AC_PATH_PROGS([RSVG_CONVERT], [rsvg-convert rsvg],rsvg-convert)\n            AC_PATH_PROGS([IMAGEMAGICK_CONVERT], [convert],convert)\n            AC_PATH_PROGS([TIFFCP], [tiffcp],tiffcp)\n@@ -731,34 +604,29 @@ case $host in\n        esac\n      fi\n \n-     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"],, [[$LDFLAG_WERROR]])\n+     AX_CHECK_LINK_FLAG([[-Wl,-headerpad_max_install_names]], [LDFLAGS=\"$LDFLAGS -Wl,-headerpad_max_install_names\"])\n      CPPFLAGS=\"$CPPFLAGS -DMAC_OSX -DOBJC_OLD_DISPATCH_PROTOTYPES=0\"\n      OBJCXXFLAGS=\"$CXXFLAGS\"\n      ;;\n    *android*)\n      dnl make sure android stays above linux for hosts like *linux-android*\n      TARGET_OS=android\n-     case $host in\n-       *x86_64*)\n-          ANDROID_ARCH=x86_64\n-          ;;\n-        *aarch64*)\n-          ANDROID_ARCH=arm64-v8a\n-          ;;\n-        *armv7a*)\n-          ANDROID_ARCH=armeabi-v7a\n-          ;;\n-        *i686*)\n-          ANDROID_ARCH=i686\n-          ;;\n-        *) AC_MSG_ERROR(\"Could not determine Android arch\") ;;\n-      esac\n      ;;\n    *linux*)\n      TARGET_OS=linux\n      ;;\n esac\n \n+if test x$use_pkgconfig = xyes; then\n+  m4_ifndef([PKG_PROG_PKG_CONFIG], [AC_MSG_ERROR(PKG_PROG_PKG_CONFIG macro not found. Please install pkg-config and re-run autogen.sh.)])\n+  m4_ifdef([PKG_PROG_PKG_CONFIG], [\n+  PKG_PROG_PKG_CONFIG\n+  if test x\"$PKG_CONFIG\" = \"x\"; then\n+    AC_MSG_ERROR(pkg-config not found.)\n+  fi\n+  ])\n+fi\n+\n if test x$use_extended_functional_tests != xno; then\n   AC_SUBST(EXTENDED_FUNCTIONAL_TESTS, --extended)\n fi\n@@ -767,37 +635,16 @@ if test x$use_lcov = xyes; then\n   if test x$LCOV = x; then\n     AC_MSG_ERROR(\"lcov testing requested but lcov not found\")\n   fi\n+  if test x$GCOV = x; then\n+    AC_MSG_ERROR(\"lcov testing requested but gcov not found\")\n+  fi\n   if test x$PYTHON = x; then\n     AC_MSG_ERROR(\"lcov testing requested but python not found\")\n   fi\n   if test x$GENHTML = x; then\n     AC_MSG_ERROR(\"lcov testing requested but genhtml not found\")\n   fi\n-\n-  AC_MSG_CHECKING([whether compiler is Clang])\n-  AC_PREPROC_IFELSE([AC_LANG_SOURCE([[\n-      #if defined(__clang__) && defined(__llvm__)\n-      // Compiler is Clang\n-      #else\n-      #  error Compiler is not Clang\n-      #endif\n-    ]])],[\n-      AC_MSG_RESULT([yes])\n-      if test x$LLVM_COV = x; then\n-        AC_MSG_ERROR([lcov testing requested but llvm-cov not found])\n-      fi\n-      COV_TOOL=\"$LLVM_COV gcov\"\n-    ],[\n-      AC_MSG_RESULT([no])\n-      if test x$GCOV = x; then\n-        AC_MSG_ERROR([lcov testing requested but gcov not found])\n-      fi\n-      COV_TOOL=\"$GCOV\"\n-  ])\n-  AC_SUBST(COV_TOOL)\n-  AC_SUBST(COV_TOOL_WRAPPER, \"cov_tool_wrapper.sh\")\n-  LCOV=\"$LCOV --gcov-tool $(pwd)/$COV_TOOL_WRAPPER\"\n-\n+  LCOV=\"$LCOV --gcov-tool=$GCOV\"\n   AX_CHECK_LINK_FLAG([[--coverage]], [LDFLAGS=\"$LDFLAGS --coverage\"],\n     [AC_MSG_ERROR(\"lcov testing requested but --coverage linker flag does not work\")])\n   AX_CHECK_COMPILE_FLAG([--coverage],[CXXFLAGS=\"$CXXFLAGS --coverage\"],\n@@ -809,9 +656,6 @@ if test x$use_lcov_branch != xno; then\n   AC_SUBST(LCOV_OPTS, \"$LCOV_OPTS --rc lcov_branch_coverage=1\")\n fi\n \n-dnl Check for __int128\n-AC_CHECK_TYPES([__int128])\n-\n dnl Check for endianness\n AC_C_BIGENDIAN\n \n@@ -837,7 +681,30 @@ if test x$ac_cv_sys_large_files != x &&\n   CPPFLAGS=\"$CPPFLAGS -D_LARGE_FILES=$ac_cv_sys_large_files\"\n fi\n \n-AC_SEARCH_LIBS([clock_gettime],[rt])\n+AX_GCC_FUNC_ATTRIBUTE([visibility])\n+AX_GCC_FUNC_ATTRIBUTE([dllexport])\n+AX_GCC_FUNC_ATTRIBUTE([dllimport])\n+\n+if test x$use_glibc_compat != xno; then\n+\n+  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n+  dnl See which one is present here.\n+  AC_MSG_CHECKING(__fdelt_chk type)\n+  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n+                    #undef _FORTIFY_SOURCE\n+                  #endif\n+                  #define _FORTIFY_SOURCE 2\n+                  #include <sys/select.h>\n+     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n+    [ fdelt_type=\"long unsigned int\"],\n+    [ fdelt_type=\"long int\"])\n+  AC_MSG_RESULT($fdelt_type)\n+  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n+else\n+  AC_SEARCH_LIBS([clock_gettime],[rt])\n+fi\n \n if test \"x$enable_gprof\" = xyes; then\n     dnl -pg is incompatible with -pie. Since hardening and profiling together doesn't make sense,\n@@ -870,22 +737,6 @@ if test x$use_hardening != xno; then\n   AX_CHECK_COMPILE_FLAG([-Wstack-protector],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -Wstack-protector\"])\n   AX_CHECK_COMPILE_FLAG([-fstack-protector-all],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-protector-all\"])\n \n-  dnl -fcf-protection used with Clang 7 causes ld to emit warnings:\n-  dnl ld: error: ... <corrupt x86 feature size: 0x8>\n-  dnl Use CHECK_LINK_FLAG & --fatal-warnings to ensure we won't use the flag in this case.\n-  AX_CHECK_LINK_FLAG([-fcf-protection=full],[HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fcf-protection=full\"],, [[$LDFLAG_WERROR]])\n-\n-  case $host in\n-    *mingw*)\n-      dnl stack-clash-protection doesn't currently work, and likely should just be skipped for Windows.\n-      dnl See https://gcc.gnu.org/bugzilla/show_bug.cgi?id=90458 for more details.\n-      ;;\n-    *)\n-      AX_CHECK_COMPILE_FLAG([-fstack-clash-protection], [HARDENED_CXXFLAGS=\"$HARDENED_CXXFLAGS -fstack-clash-protection\"], [], [$CXXFLAG_WERROR])\n-      ;;\n-  esac\n-\n-\n   dnl When enable_debug is yes, all optimizations are disabled.\n   dnl However, FORTIFY_SOURCE requires that there is some level of optimization, otherwise it does nothing and just creates a compiler warning.\n   dnl Since FORTIFY_SOURCE is a no-op without optimizations, do not enable it when enable_debug is yes.\n@@ -898,13 +749,11 @@ if test x$use_hardening != xno; then\n     ])\n   fi\n \n-  AX_CHECK_LINK_FLAG([[-Wl,--enable-reloc-section]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--enable-reloc-section\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-z,separate-code]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,separate-code\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--dynamicbase]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--dynamicbase\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--nxcompat]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--nxcompat\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--high-entropy-va]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,--high-entropy-va\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,relro]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,relro\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-z,now]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-z,now\"])\n   AX_CHECK_LINK_FLAG([[-fPIE -pie]], [PIE_FLAGS=\"-fPIE\"; HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -pie\"],, [[$CXXFLAG_WERROR]])\n \n   case $host in\n@@ -914,28 +763,62 @@ if test x$use_hardening != xno; then\n   esac\n fi\n \n-dnl These flags are specific to ld64, and may cause issues with other linkers.\n-dnl For example: GNU ld will interpret -dead_strip as -de and then try and use\n-dnl \"ad_strip\" as the symbol for the entry point.\n+dnl this flag screws up non-darwin gcc even when the check fails. special-case it.\n if test x$TARGET_OS = xdarwin; then\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-dead_strip_dylibs]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip_dylibs\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,-bind_at_load]], [HARDENED_LDFLAGS=\"$HARDENED_LDFLAGS -Wl,-bind_at_load\"])\n+fi\n+\n+if test x$enable_determinism = xyes; then\n+  if test x$TARGET_OS = xwindows; then\n+    AX_CHECK_LINK_FLAG([[-Wl,--no-insert-timestamp]], [LDFLAGS=\"$LDFLAGS -Wl,--no-insert-timestamp\"])\n+  fi\n fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-AC_CHECK_DECLS([getifaddrs, freeifaddrs],[CHECK_SOCKET],,\n+dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n+dnl check that it fails to build without memcpy, then that it builds with\n+AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <cstddef>\n+    #if HAVE_SYS_SELECT_H\n+    #include <sys/select.h>\n+    #endif\n+  ]],[[\n+    #if HAVE_SYS_SELECT_H\n+    fd_set fds;\n+    FD_ZERO(&fds);\n+    #endif\n+  ]])],\n+  [ AC_MSG_RESULT(no) ],\n+  [\n+      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+          #include <cstring>\n+          #if HAVE_SYS_SELECT_H\n+          #include <sys/select.h>\n+          #endif\n+        ]], [[\n+          #if HAVE_SYS_SELECT_H\n+          fd_set fds;\n+          FD_ZERO(&fds);\n+          #endif\n+        ]])],\n+        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n+        [ AC_MSG_ERROR(failed with cstring include) ]\n+      )\n+  ]\n+)\n+\n+AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]\n )\n AC_CHECK_DECLS([strnlen])\n \n-dnl These are used for daemonization in bitcoind\n-AC_CHECK_DECLS([fork])\n-AC_CHECK_DECLS([setsid])\n-\n-AC_CHECK_DECLS([pipe2])\n+dnl Check for daemon(3), unrelated to --with-daemon (although used by it)\n+AC_CHECK_DECLS([daemon])\n \n AC_CHECK_DECLS([le16toh, le32toh, le64toh, htole16, htole32, htole64, be16toh, be32toh, be64toh, htobe16, htobe32, htobe64],,,\n \t\t[#if HAVE_ENDIAN_H\n@@ -949,21 +832,7 @@ AC_CHECK_DECLS([bswap_16, bswap_32, bswap_64],,,\n                  #include <byteswap.h>\n                  #endif])\n \n-AC_MSG_CHECKING(for __builtin_clzl)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n- (void) __builtin_clzl(0);\n-  ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CLZL, 1, [Define this symbol if you have __builtin_clzl])],\n- [ AC_MSG_RESULT(no)]\n-)\n-\n-AC_MSG_CHECKING(for __builtin_clzll)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[ ]], [[\n-  (void) __builtin_clzll(0);\n-  ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_BUILTIN_CLZLL, 1, [Define this symbol if you have __builtin_clzll])],\n- [ AC_MSG_RESULT(no)]\n-)\n+AC_CHECK_DECLS([__builtin_clz, __builtin_clzl, __builtin_clzll])\n \n dnl Check for malloc_info (for memory statistics information in getmemoryinfo)\n AC_MSG_CHECKING(for getmemoryinfo)\n@@ -981,29 +850,13 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <malloc.h>]],\n  [ AC_MSG_RESULT(no)]\n )\n \n-dnl Check for posix_fallocate\n-AC_MSG_CHECKING(for posix_fallocate)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-                   // same as in src/util/system.cpp\n-                   #ifdef __linux__\n-                   #ifdef _POSIX_C_SOURCE\n-                   #undef _POSIX_C_SOURCE\n-                   #endif\n-                   #define _POSIX_C_SOURCE 200112L\n-                   #endif // __linux__\n-                   #include <fcntl.h>]],\n-                   [[ int f = posix_fallocate(0, 0, 0); ]])],\n- [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_POSIX_FALLOCATE, 1,[Define this symbol if you have posix_fallocate]) ],\n- [ AC_MSG_RESULT(no)]\n-)\n-\n-AC_MSG_CHECKING([for default visibility attribute])\n-AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n-  int foo(void) __attribute__((visibility(\"default\")));\n+AC_MSG_CHECKING([for visibility attribute])\n+AC_LINK_IFELSE([AC_LANG_SOURCE([\n+  int foo_def( void ) __attribute__((visibility(\"default\")));\n   int main(){}\n   ])],\n   [\n-    AC_DEFINE(HAVE_DEFAULT_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n+    AC_DEFINE(HAVE_VISIBILITY_ATTRIBUTE,1,[Define if the visibility attribute is supported.])\n     AC_MSG_RESULT(yes)\n   ],\n   [\n@@ -1014,22 +867,7 @@ AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n   ]\n )\n \n-AC_MSG_CHECKING([for dllexport attribute])\n-AC_COMPILE_IFELSE([AC_LANG_SOURCE([\n-  __declspec(dllexport) int foo(void);\n-  int main(){}\n-  ])],\n-  [\n-    AC_DEFINE(HAVE_DLLEXPORT_ATTRIBUTE,1,[Define if the dllexport attribute is supported.])\n-    AC_MSG_RESULT(yes)\n-  ],\n-  [AC_MSG_RESULT(no)]\n-)\n-\n-dnl thread_local is currently disabled when building with glibc back compat.\n-dnl Our minimum supported glibc is 2.17, however support for thread_local\n-dnl did not arrive in glibc until 2.18.\n-if test \"x$use_thread_local\" = xyes || test \"x$use_thread_local\" = xauto; then\n+if test \"x$use_thread_local\" = xyes || { test \"x$use_thread_local\" = xauto && test \"x$use_glibc_compat\" = xno; }; then\n   TEMP_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$TEMP_LDFLAGS $PTHREAD_CFLAGS\"\n   AC_MSG_CHECKING([for thread_local support])\n@@ -1140,13 +978,13 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <stdint.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n+dnl LevelDB platform checks\n AC_MSG_CHECKING(for fdatasync)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>]],\n  [[ fdatasync(0); ]])],\n  [ AC_MSG_RESULT(yes); HAVE_FDATASYNC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_FDATASYNC=0 ]\n )\n-AC_DEFINE_UNQUOTED([HAVE_FDATASYNC], [$HAVE_FDATASYNC], [Define to 1 if fdatasync is available.])\n \n AC_MSG_CHECKING(for F_FULLFSYNC)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n@@ -1161,7 +999,6 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <fcntl.h>]],\n  [ AC_MSG_RESULT(yes); HAVE_O_CLOEXEC=1 ],\n  [ AC_MSG_RESULT(no); HAVE_O_CLOEXEC=0 ]\n )\n-AC_DEFINE_UNQUOTED([HAVE_O_CLOEXEC], [$HAVE_O_CLOEXEC], [Define to 1 if O_CLOEXEC flag is available.])\n \n dnl crc32c platform checks\n AC_MSG_CHECKING(for __builtin_prefetch)\n@@ -1186,22 +1023,40 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <xmmintrin.h>]], [[\n \n AC_MSG_CHECKING(for strong getauxval support in the system headers)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    #include <arm_acle.h>\n+    #include <arm_neon.h>\n     #include <sys/auxv.h>\n   ]], [[\n     getauxval(AT_HWCAP);\n   ]])],\n- [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1; AC_DEFINE(HAVE_STRONG_GETAUXVAL, 1, [Define this symbol to build code that uses getauxval)]) ],\n+ [ AC_MSG_RESULT(yes); HAVE_STRONG_GETAUXVAL=1 ],\n  [ AC_MSG_RESULT(no); HAVE_STRONG_GETAUXVAL=0 ]\n )\n \n-have_any_system=no\n+AC_MSG_CHECKING(for weak getauxval support in the compiler)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n+    unsigned long getauxval(unsigned long type) __attribute__((weak));\n+    #define AT_HWCAP 16\n+  ]], [[\n+    getauxval(AT_HWCAP);\n+  ]])],\n+ [ AC_MSG_RESULT(yes); HAVE_WEAK_GETAUXVAL=1 ],\n+ [ AC_MSG_RESULT(no); HAVE_WEAK_GETAUXVAL=0 ]\n+)\n+\n+dnl Check for reduced exports\n+if test x$use_reduce_exports = xyes; then\n+  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[RE_CXXFLAGS=\"-fvisibility=hidden\"],\n+  [AC_MSG_ERROR([Cannot set default symbol visibility. Use --disable-reduce-exports.])])\n+fi\n+\n AC_MSG_CHECKING([for std::system])\n AC_LINK_IFELSE(\n     [ AC_LANG_PROGRAM(\n         [[ #include <cstdlib> ]],\n         [[ int nErr = std::system(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); have_any_system=yes],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_STD__SYSTEM, 1, Define to 1 if std::system is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n@@ -1211,33 +1066,26 @@ AC_LINK_IFELSE(\n         [[ ]],\n         [[ int nErr = ::_wsystem(\"\"); ]]\n     )],\n-    [ AC_MSG_RESULT(yes); have_any_system=yes],\n+    [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_WSYSTEM, 1, Define to 1 if ::wsystem is available.)],\n     [ AC_MSG_RESULT(no) ]\n )\n \n-if test \"x$have_any_system\" != \"xno\"; then\n-  AC_DEFINE(HAVE_SYSTEM, 1, Define to 1 if std::system or ::wsystem is available.)\n-fi\n+AC_DEFINE([HAVE_SYSTEM], [HAVE_STD__SYSTEM || HAVE_WSYSTEM], [std::system or ::wsystem])\n \n-dnl SUPPRESSED_CPPFLAGS=SUPPRESS_WARNINGS([$SOME_CPPFLAGS])\n-dnl Replace -I with -isystem in $SOME_CPPFLAGS to suppress warnings from\n-dnl headers from its include directories and return the result.\n-dnl See -isystem documentation:\n-dnl https://gcc.gnu.org/onlinedocs/gcc/Directory-Options.html\n-dnl https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-isystem-directory\n-dnl Do not change \"-I/usr/include\" to \"-isystem /usr/include\" because that\n-dnl is not necessary (/usr/include is already a system directory) and because\n-dnl it would break GCC's #include_next.\n-AC_DEFUN([SUPPRESS_WARNINGS],\n-         [$(echo $1 |${SED} -E -e 's/(^| )-I/\\1-isystem /g' -e 's;-isystem /usr/include([/ ]|$);-I/usr/include\\1;g')])\n+LEVELDB_CPPFLAGS=\n+LIBLEVELDB=\n+LIBMEMENV=\n+AM_CONDITIONAL([EMBEDDED_LEVELDB],[true])\n+AC_SUBST(LEVELDB_CPPFLAGS)\n+AC_SUBST(LIBLEVELDB)\n+AC_SUBST(LIBMEMENV)\n \n dnl enable-fuzz should disable all other targets\n if test \"x$enable_fuzz\" = \"xyes\"; then\n-  AC_MSG_WARN(enable-fuzz will disable all other targets and force --enable-fuzz-binary=yes)\n+  AC_MSG_WARN(enable-fuzz will disable all other targets)\n   build_bitcoin_utils=no\n   build_bitcoin_cli=no\n   build_bitcoin_tx=no\n-  build_bitcoin_util=no\n   build_bitcoin_wallet=no\n   build_bitcoind=no\n   build_bitcoin_libs=no\n@@ -1246,100 +1094,24 @@ if test \"x$enable_fuzz\" = \"xyes\"; then\n   bitcoin_enable_qt_dbus=no\n   enable_wallet=no\n   use_bench=no\n-  use_external_signer=no\n   use_upnp=no\n-  use_natpmp=no\n   use_zmq=no\n-  enable_fuzz_binary=yes\n-\n-  AX_CHECK_PREPROC_FLAG([-DABORT_ON_FAILED_ASSUME],[[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -DABORT_ON_FAILED_ASSUME\"]],,[[$CXXFLAG_WERROR]])\n-\n-  AC_MSG_CHECKING([whether main function is needed for fuzz binary])\n-  AX_CHECK_LINK_FLAG(\n-    [[-fsanitize=$use_sanitizers]],\n-    [AC_MSG_RESULT([no])],\n-    [AC_MSG_RESULT([yes])\n-     CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"],\n-    [],\n-    [AC_LANG_PROGRAM([[\n-      #include <cstdint>\n-      #include <cstddef>\n-      extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t *data, size_t size) { return 0; }\n-      /* comment to remove the main function ...\n-     ]],[[\n-      */ int not_main() {\n-     ]])])\n else\n   BITCOIN_QT_INIT\n \n   dnl sets $bitcoin_enable_qt, $bitcoin_enable_qt_test, $bitcoin_enable_qt_dbus\n-  BITCOIN_QT_CONFIGURE([5.9.5])\n-\n-  dnl Keep a copy of the original $QT_INCLUDES and use it when invoking qt's moc\n-  QT_INCLUDES_UNSUPPRESSED=$QT_INCLUDES\n-  if test x$suppress_external_warnings != xno ; then\n-    QT_INCLUDES=SUPPRESS_WARNINGS($QT_INCLUDES)\n-    QT_DBUS_INCLUDES=SUPPRESS_WARNINGS($QT_DBUS_INCLUDES)\n-    QT_TEST_INCLUDES=SUPPRESS_WARNINGS($QT_TEST_INCLUDES)\n-  fi\n-\n-  CPPFLAGS=\"$CPPFLAGS -DPROVIDE_FUZZ_MAIN_FUNCTION\"\n+  BITCOIN_QT_CONFIGURE([$use_pkgconfig])\n fi\n \n if test x$enable_wallet != xno; then\n     dnl Check for libdb_cxx only if wallet enabled\n-    if test \"x$use_bdb\" != \"xno\"; then\n-      BITCOIN_FIND_BDB48\n-      if test x$suppress_external_warnings != xno ; then\n-        BDB_CPPFLAGS=SUPPRESS_WARNINGS($BDB_CPPFLAGS)\n-      fi\n-    fi\n-\n-    dnl Check for sqlite3\n-    if test \"x$use_sqlite\" != \"xno\"; then\n-      PKG_CHECK_MODULES([SQLITE], [sqlite3 >= 3.7.17], [have_sqlite=yes], [have_sqlite=no])\n-    fi\n-    AC_MSG_CHECKING([whether to build wallet with support for sqlite])\n-    if test \"x$use_sqlite\" = \"xno\"; then\n-      use_sqlite=no\n-    elif test \"x$have_sqlite\" = \"xno\"; then\n-      if test \"x$use_sqlite\" = \"xyes\"; then\n-        AC_MSG_ERROR([sqlite support requested but cannot be built. Use --without-sqlite])\n-      fi\n-      use_sqlite=no\n-    else\n-      if test x$use_sqlite != xno; then\n-        AC_DEFINE([USE_SQLITE],[1],[Define if sqlite support should be compiled in])\n-        use_sqlite=yes\n-      fi\n-    fi\n-    AC_MSG_RESULT([$use_sqlite])\n-\n-    dnl Disable wallet if both --without-bdb and --without-sqlite\n-    if test \"x$use_bdb$use_sqlite\" = \"xnono\"; then\n-        if test \"x$enable_wallet\" = \"xyes\"; then\n-            AC_MSG_ERROR([wallet functionality requested but no BDB or SQLite support available.])\n-        fi\n-        enable_wallet=no\n-    fi\n-fi\n-\n-if test x$use_ebpf != xno; then\n-  AC_MSG_CHECKING([whether eBPF tracepoints are supported])\n-  AC_COMPILE_IFELSE([\n-    AC_LANG_PROGRAM(\n-      [#include <sys/sdt.h>],\n-      [DTRACE_PROBE(\"context\", \"event\");]\n-    )],\n-    [AC_MSG_RESULT(yes); have_sdt=yes; AC_DEFINE([ENABLE_TRACING], [1], [Define to 1 to enable eBPF user static defined tracepoints])],\n-    [AC_MSG_RESULT(no); have_sdt=no;]\n-  )\n+    BITCOIN_FIND_BDB48\n fi\n \n dnl Check for libminiupnpc (optional)\n if test x$use_upnp != xno; then\n   AC_CHECK_HEADERS(\n-    [miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n+    [miniupnpc/miniwget.h miniupnpc/miniupnpc.h miniupnpc/upnpcommands.h miniupnpc/upnperrors.h],\n     [AC_CHECK_LIB([miniupnpc], [upnpDiscover], [MINIUPNPC_LIBS=-lminiupnpc], [have_miniupnpc=no])],\n     [have_miniupnpc=no]\n   )\n@@ -1365,76 +1137,56 @@ if test x$have_miniupnpc != xno; then\n fi\n fi\n \n-dnl Check for libnatpmp (optional).\n-if test \"x$use_natpmp\" != xno; then\n-  AC_CHECK_HEADERS([natpmp.h],\n-                   [AC_CHECK_LIB([natpmp], [initnatpmp], [NATPMP_LIBS=-lnatpmp], [have_natpmp=no])],\n-                   [have_natpmp=no])\n-fi\n-\n if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n-  use_boost=no\n+    use_boost=no\n else\n-  use_boost=yes\n+    use_boost=yes\n fi\n \n if test x$use_boost = xyes; then\n \n-  dnl Check for Boost headers\n-  AX_BOOST_BASE([1.64.0],[],[AC_MSG_ERROR([Boost is not available!])])\n-  if test x$want_boost = xno; then\n-    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n-  fi\n-  AX_BOOST_SYSTEM\n-  AX_BOOST_FILESYSTEM\n+dnl Minimum required Boost version\n+define(MINIMUM_REQUIRED_BOOST, 1.47.0)\n \n-  if test x$suppress_external_warnings != xno; then\n-    BOOST_CPPFLAGS=SUPPRESS_WARNINGS($BOOST_CPPFLAGS)\n-  fi\n-\n-  BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB\"\n+dnl Check for boost libs\n+AX_BOOST_BASE([MINIMUM_REQUIRED_BOOST])\n+if test x$want_boost = xno; then\n+    AC_MSG_ERROR([[only libbitcoinconsensus can be built without boost]])\n fi\n+AX_BOOST_SYSTEM\n+AX_BOOST_FILESYSTEM\n+AX_BOOST_THREAD\n+AX_BOOST_CHRONO\n \n-if test \"x$use_external_signer\" != xno; then\n-  AC_DEFINE([ENABLE_EXTERNAL_SIGNER],,[define if external signer support is enabled])\n-fi\n-AM_CONDITIONAL([ENABLE_EXTERNAL_SIGNER], [test \"x$use_external_signer\" = \"xyes\"])\n+dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n+dnl counter implementations. In 1.63 and later the std::atomic approach is default.\n+m4_pattern_allow(DBOOST_AC_USE_STD_ATOMIC) dnl otherwise it's treated like a macro\n+BOOST_CPPFLAGS=\"-DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC $BOOST_CPPFLAGS\"\n \n-dnl Do not compile with syscall sandbox support when compiling under the sanitizers.\n-dnl The sanitizers introduce use of syscalls that are not typically used in bitcoind\n-dnl (such as execve when the sanitizers execute llvm-symbolizer).\n-if test x$use_sanitizers != x; then\n-  AC_MSG_WARN(Specifying --with-sanitizers forces --without-seccomp since the sanitizers introduce use of syscalls not allowed by the bitcoind syscall sandbox (-sandbox=<mode>).)\n-  seccomp_found=no\n-fi\n-if test \"x$seccomp_found\" != \"xno\"; then\n-  AC_MSG_CHECKING([for seccomp-bpf (Linux x86-64)])\n+if test x$use_reduce_exports = xyes; then\n+  AC_MSG_CHECKING([for working boost reduced exports])\n+  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+  CPPFLAGS=\"$BOOST_CPPFLAGS $CPPFLAGS\"\n   AC_PREPROC_IFELSE([AC_LANG_PROGRAM([[\n-      @%:@include <linux/seccomp.h>\n+      @%:@include <boost/version.hpp>\n     ]], [[\n-      #if !defined(__x86_64__)\n-      #  error Syscall sandbox is an experimental feature currently available only under Linux x86-64.\n+      #if BOOST_VERSION >= 104900\n+      // Everything is okay\n+      #else\n+      #  error Boost version is too old\n       #endif\n     ]])],[\n       AC_MSG_RESULT(yes)\n-      seccomp_found=\"yes\"\n-      AC_DEFINE(USE_SYSCALL_SANDBOX, 1, [Define this symbol to build with syscall sandbox support.])\n     ],[\n-      AC_MSG_RESULT(no)\n-      seccomp_found=\"no\"\n+    AC_MSG_ERROR([boost versions < 1.49 are known to be broken with reduced exports. Use --disable-reduce-exports.])\n   ])\n+  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+fi\n fi\n-dnl Currently only enable -sandbox=<mode> feature if seccomp is found.\n-dnl In the future, sandboxing could be also be supported with other\n-dnl sandboxing mechanisms besides seccomp.\n-use_syscall_sandbox=$seccomp_found\n-AM_CONDITIONAL([ENABLE_SYSCALL_SANDBOX], [test \"x$use_syscall_sandbox\" != \"xno\"])\n \n-dnl Check for reduced exports\n if test x$use_reduce_exports = xyes; then\n-  AX_CHECK_COMPILE_FLAG([-fvisibility=hidden],[CXXFLAGS=\"$CXXFLAGS -fvisibility=hidden\"],\n-  [AC_MSG_ERROR([Cannot set hidden symbol visibility. Use --disable-reduce-exports.])],[[$CXXFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]],[RELDFLAGS=\"-Wl,--exclude-libs,ALL\"],,[[$LDFLAG_WERROR]])\n+    CXXFLAGS=\"$CXXFLAGS $RE_CXXFLAGS\"\n+    AX_CHECK_LINK_FLAG([[-Wl,--exclude-libs,ALL]], [RELDFLAGS=\"-Wl,--exclude-libs,ALL\"])\n fi\n \n if test x$use_tests = xyes; then\n@@ -1443,113 +1195,190 @@ if test x$use_tests = xyes; then\n     AC_MSG_ERROR(hexdump is required for tests)\n   fi\n \n+\n   if test x$use_boost = xyes; then\n \n-    AX_BOOST_UNIT_TEST_FRAMEWORK\n-\n-    dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n-    AC_MSG_CHECKING([for dynamic linked boost test])\n-    TEMP_LIBS=\"$LIBS\"\n-    LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n-    TEMP_CPPFLAGS=\"$CPPFLAGS\"\n-    CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n-    AC_LINK_IFELSE([AC_LANG_SOURCE([\n-         #define BOOST_TEST_DYN_LINK\n-         #define BOOST_TEST_MAIN\n-          #include <boost/test/unit_test.hpp>\n-\n-         ])],\n-      [AC_MSG_RESULT(yes)]\n-      [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n-      [AC_MSG_RESULT(no)])\n-    LIBS=\"$TEMP_LIBS\"\n-    CPPFLAGS=\"$TEMP_CPPFLAGS\"\n+  AX_BOOST_UNIT_TEST_FRAMEWORK\n \n-  fi\n-fi\n-\n-dnl libevent check\n+  dnl Determine if -DBOOST_TEST_DYN_LINK is needed\n+  AC_MSG_CHECKING([for dynamic linked boost test])\n+  TEMP_LIBS=\"$LIBS\"\n+  LIBS=\"$LIBS $BOOST_LDFLAGS $BOOST_UNIT_TEST_FRAMEWORK_LIB\"\n+  TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+  CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+  AC_LINK_IFELSE([AC_LANG_SOURCE([\n+       #define BOOST_TEST_DYN_LINK\n+       #define BOOST_TEST_MAIN\n+        #include <boost/test/unit_test.hpp>\n \n-if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n-  PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21], [use_libevent=yes], [AC_MSG_ERROR([libevent version 2.0.21 or greater not found.])])\n-  if test x$TARGET_OS != xwindows; then\n-    PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR([libevent_pthreads version 2.0.21 or greater not found.])])\n-  fi\n+       ])],\n+    [AC_MSG_RESULT(yes)]\n+    [TESTDEFS=\"$TESTDEFS -DBOOST_TEST_DYN_LINK\"],\n+    [AC_MSG_RESULT(no)])\n+  LIBS=\"$TEMP_LIBS\"\n+  CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n-  if test x$suppress_external_warnings != xno; then\n-    EVENT_CFLAGS=SUPPRESS_WARNINGS($EVENT_CFLAGS)\n   fi\n fi\n \n-dnl QR Code encoding library check\n+if test x$use_boost = xyes; then\n+\n+BOOST_LIBS=\"$BOOST_LDFLAGS $BOOST_SYSTEM_LIB $BOOST_FILESYSTEM_LIB $BOOST_THREAD_LIB $BOOST_CHRONO_LIB\"\n+\n+\n+dnl If boost (prior to 1.57) was built without c++11, it emulated scoped enums\n+dnl using c++98 constructs. Unfortunately, this implementation detail leaked into\n+dnl the abi. This was fixed in 1.57.\n+\n+dnl When building against that installed version using c++11, the headers pick up\n+dnl on the native c++11 scoped enum support and enable it, however it will fail to\n+dnl link. This can be worked around by disabling c++11 scoped enums if linking will\n+dnl fail.\n+dnl BOOST_NO_SCOPED_ENUMS was changed to BOOST_NO_CXX11_SCOPED_ENUMS in 1.51.\n+\n+TEMP_LIBS=\"$LIBS\"\n+LIBS=\"$BOOST_LIBS $LIBS\"\n+TEMP_CPPFLAGS=\"$CPPFLAGS\"\n+CPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+AC_MSG_CHECKING([for mismatched boost c++11 scoped enums])\n+AC_LINK_IFELSE([AC_LANG_PROGRAM([[\n+  #include <boost/config.hpp>\n+  #include <boost/version.hpp>\n+  #if !defined(BOOST_NO_SCOPED_ENUMS) && !defined(BOOST_NO_CXX11_SCOPED_ENUMS) && BOOST_VERSION < 105700\n+  #define BOOST_NO_SCOPED_ENUMS\n+  #define BOOST_NO_CXX11_SCOPED_ENUMS\n+  #define CHECK\n+  #endif\n+  #include <boost/filesystem.hpp>\n+  ]],[[\n+  #if defined(CHECK)\n+    boost::filesystem::copy_file(\"foo\", \"bar\");\n+  #else\n+    choke;\n+  #endif\n+  ]])],\n+  [AC_MSG_RESULT(mismatched); BOOST_CPPFLAGS=\"$BOOST_CPPFLAGS -DBOOST_NO_SCOPED_ENUMS -DBOOST_NO_CXX11_SCOPED_ENUMS\"], [AC_MSG_RESULT(ok)])\n+LIBS=\"$TEMP_LIBS\"\n+CPPFLAGS=\"$TEMP_CPPFLAGS\"\n \n-if test \"x$use_qr\" != xno; then\n-  BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n fi\n \n-dnl ZMQ check\n+if test x$use_pkgconfig = xyes; then\n+  : dnl\n+  m4_ifdef(\n+    [PKG_CHECK_MODULES],\n+    [\n+      PKG_CHECK_MODULES([CRYPTO], [libcrypto],,[AC_MSG_ERROR(libcrypto not found.)])\n+      if test x$use_qr != xno; then\n+        BITCOIN_QT_CHECK([PKG_CHECK_MODULES([QR], [libqrencode], [have_qrencode=yes], [have_qrencode=no])])\n+      fi\n+      if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+        PKG_CHECK_MODULES([EVENT], [libevent >= 2.0.21],, [AC_MSG_ERROR(libevent version 2.0.21 or greater not found.)])\n+        if test x$TARGET_OS != xwindows; then\n+          PKG_CHECK_MODULES([EVENT_PTHREADS], [libevent_pthreads >= 2.0.21],, [AC_MSG_ERROR(libevent_pthreads version 2.0.21 or greater not found.)])\n+        fi\n+      fi\n \n-if test \"x$use_zmq\" = xyes; then\n-  PKG_CHECK_MODULES([ZMQ], [libzmq >= 4],\n-    AC_DEFINE([ENABLE_ZMQ], [1], [Define to 1 to enable ZMQ functions]),\n-    [AC_DEFINE([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n-    AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n-    use_zmq=no])\n+      if test \"x$use_zmq\" = \"xyes\"; then\n+        PKG_CHECK_MODULES([ZMQ],[libzmq >= 4],\n+          [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+          [AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+           AC_MSG_WARN([libzmq version 4.x or greater not found, disabling])\n+           use_zmq=no])\n+      else\n+          AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+      fi\n+    ]\n+  )\n else\n-  AC_DEFINE_UNQUOTED([ENABLE_ZMQ], [0], [Define to 1 to enable ZMQ functions])\n-fi\n+  AC_CHECK_HEADER([openssl/crypto.h],,AC_MSG_ERROR(libcrypto headers missing))\n+  AC_CHECK_LIB([crypto],      [main],CRYPTO_LIBS=-lcrypto, AC_MSG_ERROR(libcrypto missing))\n+\n+  if test x$build_bitcoin_cli$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench != xnonononono; then\n+    AC_CHECK_HEADER([event2/event.h],, AC_MSG_ERROR(libevent headers missing),)\n+    AC_CHECK_LIB([event],[main],EVENT_LIBS=-levent,AC_MSG_ERROR(libevent missing))\n+    if test x$TARGET_OS != xwindows; then\n+      AC_CHECK_LIB([event_pthreads],[main],EVENT_PTHREADS_LIBS=-levent_pthreads,AC_MSG_ERROR(libevent_pthreads missing))\n+    fi\n+  fi\n \n-if test \"x$use_zmq\" = xyes; then\n-  dnl Assume libzmq was built for static linking\n-  case $host in\n-    *mingw*)\n-      ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n-    ;;\n-  esac\n-fi\n+  if test \"x$use_zmq\" = \"xyes\"; then\n+     AC_CHECK_HEADER([zmq.h],\n+       [AC_DEFINE([ENABLE_ZMQ],[1],[Define to 1 to enable ZMQ functions])],\n+       [AC_MSG_WARN([zmq.h not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+     AC_CHECK_LIB([zmq],[zmq_ctx_shutdown],ZMQ_LIBS=-lzmq,\n+       [AC_MSG_WARN([libzmq >= 4.0 not found, disabling zmq support])\n+        use_zmq=no\n+        AC_DEFINE([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])])\n+  else\n+    AC_DEFINE_UNQUOTED([ENABLE_ZMQ],[0],[Define to 1 to enable ZMQ functions])\n+  fi\n \n-dnl libmultiprocess library check\n+  if test \"x$use_zmq\" = \"xyes\"; then\n+    dnl Assume libzmq was built for static linking\n+    case $host in\n+      *mingw*)\n+        ZMQ_CFLAGS=\"$ZMQ_CFLAGS -DZMQ_STATIC\"\n+      ;;\n+    esac\n+  fi\n \n-libmultiprocess_found=no\n-if test \"x$with_libmultiprocess\" = xyes || test \"x$with_libmultiprocess\" = xauto; then\n-  m4_ifdef([PKG_CHECK_MODULES], [PKG_CHECK_MODULES([LIBMULTIPROCESS], [libmultiprocess], [\n-     libmultiprocess_found=yes;\n-     libmultiprocess_prefix=`$PKG_CONFIG --variable=prefix libmultiprocess`;\n-  ], [true])])\n-elif test \"x$with_libmultiprocess\" != xno; then\n-  AC_MSG_ERROR([--with-libmultiprocess=$with_libmultiprocess value is not yes, auto, or no])\n+  if test x$use_qr != xno; then\n+    BITCOIN_QT_CHECK([AC_CHECK_LIB([qrencode], [main],[QR_LIBS=-lqrencode], [have_qrencode=no])])\n+    BITCOIN_QT_CHECK([AC_CHECK_HEADER([qrencode.h],, have_qrencode=no)])\n+  fi\n fi\n-AC_SUBST(LIBMULTIPROCESS_CFLAGS)\n-AC_SUBST(LIBMULTIPROCESS_LIBS)\n \n-dnl Enable multiprocess check\n+dnl univalue check\n \n-if test \"x$enable_multiprocess\" = xyes; then\n-  if test \"x$libmultiprocess_found\" != xyes; then\n-    AC_MSG_ERROR([--enable-multiprocess=yes option specified but libmultiprocess library was not found. May need to install libmultiprocess library, or specify install path with PKG_CONFIG_PATH environment variable. Running 'pkg-config --debug libmultiprocess' may be helpful for debugging.])\n-  fi\n-  build_multiprocess=yes\n-elif test \"x$enable_multiprocess\" = xauto; then\n-  build_multiprocess=$libmultiprocess_found\n-else\n-  build_multiprocess=no\n-fi\n+need_bundled_univalue=yes\n \n-AM_CONDITIONAL([BUILD_MULTIPROCESS],[test \"x$build_multiprocess\" = xyes])\n-AM_CONDITIONAL([BUILD_BITCOIN_NODE], [test \"x$build_multiprocess\" = xyes])\n-AM_CONDITIONAL([BUILD_BITCOIN_GUI], [test \"x$build_multiprocess\" = xyes])\n+if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoind$bitcoin_enable_qt$use_tests$use_bench = xnonononononono; then\n+  need_bundled_univalue=no\n+else\n \n-dnl codegen tools check\n+if test x$system_univalue != xno ; then\n+  found_univalue=no\n+  if test x$use_pkgconfig = xyes; then\n+    : #NOP\n+    m4_ifdef(\n+      [PKG_CHECK_MODULES],\n+      [\n+        PKG_CHECK_MODULES([UNIVALUE],[libunivalue >= 1.0.4],[found_univalue=yes],[true])\n+      ]\n+    )\n+  else\n+    AC_CHECK_HEADER([univalue.h],[\n+      AC_CHECK_LIB([univalue],  [main],[\n+        UNIVALUE_LIBS=-lunivalue\n+        found_univalue=yes\n+      ],[true])\n+    ],[true])\n+  fi\n \n-if test x$build_multiprocess != xno; then\n-  if test \"x$with_mpgen\" = xyes || test \"x$with_mpgen\" = xauto; then\n-    MPGEN_PREFIX=\"$libmultiprocess_prefix\"\n-  elif test \"x$with_mpgen\" != xno; then\n-    MPGEN_PREFIX=\"$with_mpgen\";\n+  if test x$found_univalue = xyes ; then\n+    system_univalue=yes\n+    need_bundled_univalue=no\n+  elif test x$system_univalue = xyes ; then\n+    AC_MSG_ERROR([univalue not found])\n+  else\n+    system_univalue=no\n   fi\n-  AC_SUBST(MPGEN_PREFIX)\n fi\n \n+if test x$need_bundled_univalue = xyes ; then\n+  UNIVALUE_CFLAGS='-I$(srcdir)/univalue/include'\n+  UNIVALUE_LIBS='univalue/libunivalue.la'\n+fi\n+\n+fi\n+\n+AM_CONDITIONAL([EMBEDDED_UNIVALUE],[test x$need_bundled_univalue = xyes])\n+AC_SUBST(UNIVALUE_CFLAGS)\n+AC_SUBST(UNIVALUE_LIBS)\n+\n AC_MSG_CHECKING([whether to build bitcoind])\n AM_CONDITIONAL([BUILD_BITCOIND], [test x$build_bitcoind = xyes])\n AC_MSG_RESULT($build_bitcoind)\n@@ -1566,10 +1395,6 @@ AC_MSG_CHECKING([whether to build bitcoin-wallet])\n AM_CONDITIONAL([BUILD_BITCOIN_WALLET], [test x$build_bitcoin_wallet = xyes])\n AC_MSG_RESULT($build_bitcoin_wallet)\n \n-AC_MSG_CHECKING([whether to build bitcoin-util])\n-AM_CONDITIONAL([BUILD_BITCOIN_UTIL], [test x$build_bitcoin_util = xyes])\n-AC_MSG_RESULT($build_bitcoin_util)\n-\n AC_MSG_CHECKING([whether to build libraries])\n AM_CONDITIONAL([BUILD_BITCOIN_LIBS], [test x$build_bitcoin_libs = xyes])\n if test x$build_bitcoin_libs = xyes; then\n@@ -1594,18 +1419,16 @@ if test \"x$use_ccache\" != \"xno\"; then\n     CXX=\"$ac_cv_path_CCACHE $CXX\"\n   fi\n   AC_MSG_RESULT($use_ccache)\n-  if test \"x$use_ccache\" = \"xyes\"; then\n-    AX_CHECK_COMPILE_FLAG([-fdebug-prefix-map=A=B],[DEBUG_CXXFLAGS=\"$DEBUG_CXXFLAGS -fdebug-prefix-map=\\$(abs_top_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n-    AX_CHECK_PREPROC_FLAG([-fmacro-prefix-map=A=B],[DEBUG_CPPFLAGS=\"$DEBUG_CPPFLAGS -fmacro-prefix-map=\\$(abs_top_srcdir)=.\"],,[[$CXXFLAG_WERROR]])\n-  fi\n+fi\n+if test \"x$use_ccache\" = \"xyes\"; then\n+    AX_CHECK_PREPROC_FLAG([-Qunused-arguments],[CPPFLAGS=\"-Qunused-arguments $CPPFLAGS\"])\n fi\n \n dnl enable wallet\n AC_MSG_CHECKING([if wallet should be enabled])\n if test x$enable_wallet != xno; then\n   AC_MSG_RESULT(yes)\n   AC_DEFINE_UNQUOTED([ENABLE_WALLET],[1],[Define to 1 to enable wallet functions])\n-  enable_wallet=yes\n \n else\n   AC_MSG_RESULT(no)\n@@ -1639,34 +1462,6 @@ else\n   fi\n fi\n \n-dnl Enable NAT-PMP support.\n-AC_MSG_CHECKING([whether to build with support for NAT-PMP])\n-if test \"x$have_natpmp\" = xno; then\n-  if test \"x$use_natpmp\" = xyes; then\n-     AC_MSG_ERROR([NAT-PMP requested but cannot be built. Use --without-natpmp])\n-  fi\n-  AC_MSG_RESULT([no])\n-  use_natpmp=no\n-else\n-  if test \"x$use_natpmp\" != xno; then\n-    AC_MSG_RESULT([yes])\n-    AC_MSG_CHECKING([whether to build with NAT-PMP enabled by default])\n-    use_natpmp=yes\n-    natpmp_setting=0\n-    if test \"x$use_natpmp_default\" != xno; then\n-      use_natpmp_default=yes\n-      natpmp_setting=1\n-    fi\n-    AC_MSG_RESULT($use_natpmp_default)\n-    AC_DEFINE_UNQUOTED([USE_NATPMP], [$natpmp_setting], [NAT-PMP support not compiled if undefined, otherwise value (0 or 1) determines default state])\n-    if test x$TARGET_OS = xwindows; then\n-      NATPMP_CPPFLAGS=\"-DSTATICLIB -DNATPMP_STATICLIB\"\n-    fi\n-  else\n-    AC_MSG_RESULT([no])\n-  fi\n-fi\n-\n dnl these are only used when qt is enabled\n BUILD_TEST_QT=\"\"\n if test x$bitcoin_enable_qt != xno; then\n@@ -1709,11 +1504,7 @@ AM_CONDITIONAL([ENABLE_ZMQ], [test \"x$use_zmq\" = \"xyes\"])\n \n AC_MSG_CHECKING([whether to build test_bitcoin])\n if test x$use_tests = xyes; then\n-  if test \"x$enable_fuzz\" = \"xyes\"; then\n-    AC_MSG_RESULT([no, because fuzzing is enabled])\n-  else\n-    AC_MSG_RESULT([yes])\n-  fi\n+  AC_MSG_RESULT([yes])\n   BUILD_TEST=\"yes\"\n else\n   AC_MSG_RESULT([no])\n@@ -1731,27 +1522,18 @@ if test x$build_bitcoin_wallet$build_bitcoin_cli$build_bitcoin_tx$build_bitcoin_\n   AC_MSG_ERROR([No targets! Please specify at least one of: --with-utils --with-libs --with-daemon --with-gui --enable-bench or --enable-tests])\n fi\n \n-if test x$enable_fuzz_binary = xyes; then\n-  CHECK_RUNTIME_LIB\n-fi\n-\n AM_CONDITIONAL([TARGET_DARWIN], [test x$TARGET_OS = xdarwin])\n AM_CONDITIONAL([BUILD_DARWIN], [test x$BUILD_OS = xdarwin])\n-AM_CONDITIONAL([TARGET_LINUX], [test x$TARGET_OS = xlinux])\n AM_CONDITIONAL([TARGET_WINDOWS], [test x$TARGET_OS = xwindows])\n AM_CONDITIONAL([ENABLE_WALLET],[test x$enable_wallet = xyes])\n-AM_CONDITIONAL([USE_SQLITE], [test \"x$use_sqlite\" = \"xyes\"])\n-AM_CONDITIONAL([USE_BDB], [test \"x$use_bdb\" = \"xyes\"])\n-AM_CONDITIONAL([ENABLE_TRACING],[test x$have_sdt = xyes])\n AM_CONDITIONAL([ENABLE_TESTS],[test x$BUILD_TEST = xyes])\n AM_CONDITIONAL([ENABLE_FUZZ],[test x$enable_fuzz = xyes])\n-AM_CONDITIONAL([ENABLE_FUZZ_BINARY],[test x$enable_fuzz_binary = xyes])\n AM_CONDITIONAL([ENABLE_QT],[test x$bitcoin_enable_qt = xyes])\n AM_CONDITIONAL([ENABLE_QT_TESTS],[test x$BUILD_TEST_QT = xyes])\n AM_CONDITIONAL([ENABLE_BENCH],[test x$use_bench = xyes])\n AM_CONDITIONAL([USE_QRCODE], [test x$use_qr = xyes])\n AM_CONDITIONAL([USE_LCOV],[test x$use_lcov = xyes])\n-AM_CONDITIONAL([USE_LIBEVENT],[test x$use_libevent = xyes])\n+AM_CONDITIONAL([GLIBC_BACK_COMPAT],[test x$use_glibc_compat = xyes])\n AM_CONDITIONAL([HARDEN],[test x$use_hardening = xyes])\n AM_CONDITIONAL([ENABLE_SSE42],[test x$enable_sse42 = xyes])\n AM_CONDITIONAL([ENABLE_SSE41],[test x$enable_sse41 = xyes])\n@@ -1760,11 +1542,10 @@ AM_CONDITIONAL([ENABLE_SHANI],[test x$enable_shani = xyes])\n AM_CONDITIONAL([ENABLE_ARM_CRC],[test x$enable_arm_crc = xyes])\n AM_CONDITIONAL([USE_ASM],[test x$use_asm = xyes])\n AM_CONDITIONAL([WORDS_BIGENDIAN],[test x$ac_cv_c_bigendian = xyes])\n-AM_CONDITIONAL([USE_NATPMP],[test x$use_natpmp = xyes])\n-AM_CONDITIONAL([USE_UPNP],[test x$use_upnp = xyes])\n \n AC_DEFINE(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR, [Major version])\n AC_DEFINE(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR, [Minor version])\n+AC_DEFINE(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION, [Build revision])\n AC_DEFINE(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD, [Version Build])\n AC_DEFINE(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE, [Version is release])\n AC_DEFINE(COPYRIGHT_YEAR, _COPYRIGHT_YEAR, [Copyright year])\n@@ -1774,6 +1555,7 @@ define(_COPYRIGHT_HOLDERS_FINAL, [patsubst(_COPYRIGHT_HOLDERS, [%s], [_COPYRIGHT\n AC_DEFINE(COPYRIGHT_HOLDERS_FINAL, \"_COPYRIGHT_HOLDERS_FINAL\", [Copyright holder(s)])\n AC_SUBST(CLIENT_VERSION_MAJOR, _CLIENT_VERSION_MAJOR)\n AC_SUBST(CLIENT_VERSION_MINOR, _CLIENT_VERSION_MINOR)\n+AC_SUBST(CLIENT_VERSION_REVISION, _CLIENT_VERSION_REVISION)\n AC_SUBST(CLIENT_VERSION_BUILD, _CLIENT_VERSION_BUILD)\n AC_SUBST(CLIENT_VERSION_IS_RELEASE, _CLIENT_VERSION_IS_RELEASE)\n AC_SUBST(COPYRIGHT_YEAR, _COPYRIGHT_YEAR)\n@@ -1784,16 +1566,14 @@ AC_SUBST(BITCOIN_DAEMON_NAME)\n AC_SUBST(BITCOIN_GUI_NAME)\n AC_SUBST(BITCOIN_CLI_NAME)\n AC_SUBST(BITCOIN_TX_NAME)\n-AC_SUBST(BITCOIN_UTIL_NAME)\n AC_SUBST(BITCOIN_WALLET_TOOL_NAME)\n-AC_SUBST(BITCOIN_MP_NODE_NAME)\n-AC_SUBST(BITCOIN_MP_GUI_NAME)\n \n AC_SUBST(RELDFLAGS)\n AC_SUBST(DEBUG_CPPFLAGS)\n AC_SUBST(WARN_CXXFLAGS)\n AC_SUBST(NOWARN_CXXFLAGS)\n AC_SUBST(DEBUG_CXXFLAGS)\n+AC_SUBST(COMPAT_LDFLAGS)\n AC_SUBST(ERROR_CXXFLAGS)\n AC_SUBST(GPROF_CXXFLAGS)\n AC_SUBST(GPROF_LDFLAGS)\n@@ -1810,18 +1590,13 @@ AC_SUBST(AVX2_CXXFLAGS)\n AC_SUBST(SHANI_CXXFLAGS)\n AC_SUBST(ARM_CRC_CXXFLAGS)\n AC_SUBST(LIBTOOL_APP_LDFLAGS)\n-AC_SUBST(USE_SQLITE)\n-AC_SUBST(USE_BDB)\n-AC_SUBST(ENABLE_EXTERNAL_SIGNER)\n AC_SUBST(USE_UPNP)\n AC_SUBST(USE_QRCODE)\n AC_SUBST(BOOST_LIBS)\n-AC_SUBST(SQLITE_LIBS)\n AC_SUBST(TESTDEFS)\n AC_SUBST(MINIUPNPC_CPPFLAGS)\n AC_SUBST(MINIUPNPC_LIBS)\n-AC_SUBST(NATPMP_CPPFLAGS)\n-AC_SUBST(NATPMP_LIBS)\n+AC_SUBST(CRYPTO_LIBS)\n AC_SUBST(EVENT_LIBS)\n AC_SUBST(EVENT_PTHREADS_LIBS)\n AC_SUBST(ZMQ_LIBS)\n@@ -1833,18 +1608,14 @@ AC_SUBST(HAVE_O_CLOEXEC)\n AC_SUBST(HAVE_BUILTIN_PREFETCH)\n AC_SUBST(HAVE_MM_PREFETCH)\n AC_SUBST(HAVE_STRONG_GETAUXVAL)\n-AC_SUBST(ANDROID_ARCH)\n+AC_SUBST(HAVE_WEAK_GETAUXVAL)\n AC_CONFIG_FILES([Makefile src/Makefile doc/man/Makefile share/setup.nsi share/qt/Info.plist test/config.ini])\n AC_CONFIG_FILES([contrib/devtools/split-debug.sh],[chmod +x contrib/devtools/split-debug.sh])\n AM_COND_IF([HAVE_DOXYGEN], [AC_CONFIG_FILES([doc/Doxyfile])])\n-AC_CONFIG_LINKS([contrib/devtools/security-check.py:contrib/devtools/security-check.py])\n-AC_CONFIG_LINKS([contrib/devtools/symbol-check.py:contrib/devtools/symbol-check.py])\n-AC_CONFIG_LINKS([contrib/devtools/test-security-check.py:contrib/devtools/test-security-check.py])\n-AC_CONFIG_LINKS([contrib/devtools/test-symbol-check.py:contrib/devtools/test-symbol-check.py])\n AC_CONFIG_LINKS([contrib/filter-lcov.py:contrib/filter-lcov.py])\n AC_CONFIG_LINKS([test/functional/test_runner.py:test/functional/test_runner.py])\n AC_CONFIG_LINKS([test/fuzz/test_runner.py:test/fuzz/test_runner.py])\n-AC_CONFIG_LINKS([test/util/test_runner.py:test/util/test_runner.py])\n+AC_CONFIG_LINKS([test/util/bitcoin-util-test.py:test/util/bitcoin-util-test.py])\n AC_CONFIG_LINKS([test/util/rpcauth-test.py:test/util/rpcauth-test.py])\n \n dnl boost's m4 checks do something really nasty: they export these vars. As a\n@@ -1870,7 +1641,11 @@ PKGCONFIG_LIBDIR_TEMP=\"$PKG_CONFIG_LIBDIR\"\n unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --enable-module-recovery --enable-module-schnorrsig --enable-experimental --disable-openssl-tests\"\n+if test x$need_bundled_univalue = xyes; then\n+  AC_CONFIG_SUBDIRS([src/univalue])\n+fi\n+\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --enable-benchmark=no --with-bignum=no --enable-module-recovery --disable-jni\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT\n@@ -1885,44 +1660,32 @@ esac\n \n echo\n echo \"Options used to compile and link:\"\n-echo \"  external signer = $use_external_signer\"\n-echo \"  multiprocess    = $build_multiprocess\"\n-echo \"  with experimental syscall sandbox support = $use_syscall_sandbox\"\n-echo \"  with libs       = $build_bitcoin_libs\"\n-echo \"  with wallet     = $enable_wallet\"\n-if test \"x$enable_wallet\" != \"xno\"; then\n-    echo \"    with sqlite   = $use_sqlite\"\n-    echo \"    with bdb      = $use_bdb\"\n-fi\n-echo \"  with gui / qt   = $bitcoin_enable_qt\"\n+echo \"  with wallet   = $enable_wallet\"\n+echo \"  with gui / qt = $bitcoin_enable_qt\"\n if test x$bitcoin_enable_qt != xno; then\n-    echo \"    with qr       = $use_qr\"\n+    echo \"    with qr     = $use_qr\"\n fi\n-echo \"  with zmq        = $use_zmq\"\n-if test x$enable_fuzz == xno; then\n-    echo \"  with test       = $use_tests\"\n-else\n-    echo \"  with test       = not building test_bitcoin because fuzzing is enabled\"\n-    echo \"    with fuzz     = $enable_fuzz\"\n+echo \"  with zmq      = $use_zmq\"\n+echo \"  with test     = $use_tests\"\n+if test x$use_tests != xno; then\n+    echo \"    with fuzz   = $enable_fuzz\"\n fi\n-echo \"  with bench      = $use_bench\"\n-echo \"  with upnp       = $use_upnp\"\n-echo \"  with natpmp     = $use_natpmp\"\n-echo \"  use asm         = $use_asm\"\n-echo \"  ebpf tracing    = $have_sdt\"\n-echo \"  sanitizers      = $use_sanitizers\"\n-echo \"  debug enabled   = $enable_debug\"\n-echo \"  gprof enabled   = $enable_gprof\"\n-echo \"  werror          = $enable_werror\"\n+echo \"  with bench    = $use_bench\"\n+echo \"  with upnp     = $use_upnp\"\n+echo \"  use asm       = $use_asm\"\n+echo \"  sanitizers    = $use_sanitizers\"\n+echo \"  debug enabled = $enable_debug\"\n+echo \"  gprof enabled = $enable_gprof\"\n+echo \"  werror        = $enable_werror\"\n echo\n-echo \"  target os       = $TARGET_OS\"\n-echo \"  build os        = $build_os\"\n+echo \"  target os     = $TARGET_OS\"\n+echo \"  build os      = $BUILD_OS\"\n echo\n-echo \"  CC              = $CC\"\n-echo \"  CFLAGS          = $PTHREAD_CFLAGS $CFLAGS\"\n-echo \"  CPPFLAGS        = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n-echo \"  CXX             = $CXX\"\n-echo \"  CXXFLAGS        = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n-echo \"  LDFLAGS         = $PTHREAD_LIBS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n-echo \"  ARFLAGS         = $ARFLAGS\"\n+echo \"  CC            = $CC\"\n+echo \"  CFLAGS        = $CFLAGS\"\n+echo \"  CPPFLAGS      = $DEBUG_CPPFLAGS $HARDENED_CPPFLAGS $CPPFLAGS\"\n+echo \"  CXX           = $CXX\"\n+echo \"  CXXFLAGS      = $DEBUG_CXXFLAGS $HARDENED_CXXFLAGS $WARN_CXXFLAGS $NOWARN_CXXFLAGS $ERROR_CXXFLAGS $GPROF_CXXFLAGS $CXXFLAGS\"\n+echo \"  LDFLAGS       = $PTHREAD_CFLAGS $HARDENED_LDFLAGS $GPROF_LDFLAGS $LDFLAGS\"\n+echo \"  ARFLAGS       = $ARFLAGS\"\n echo"
      },
      {
        "sha": "361975baa4915b26e4e65fecaf359d230a411450",
        "filename": "contrib/README.md",
        "status": "modified",
        "additions": 8,
        "deletions": 2,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -26,12 +26,18 @@ The [Debian](/contrib/debian) subfolder contains the copyright file.\n \n All other packaging related files can be found in the [bitcoin-core/packaging](https://github.com/bitcoin-core/packaging) repository.\n \n-### [Builder keys](/contrib/builder-keys)\n-PGP keys used for signing Bitcoin Core [release](/doc/release-process.md) results.\n+### [Gitian-descriptors](/contrib/gitian-descriptors) ###\n+Files used during the gitian build process. For more information about gitian, see the [the Bitcoin Core documentation repository](https://github.com/bitcoin-core/docs).\n+\n+### [Gitian-keys](/contrib/gitian-keys)\n+PGP keys used for signing Bitcoin Core [Gitian release](/doc/release-process.md) results.\n \n ### [MacDeploy](/contrib/macdeploy) ###\n Scripts and notes for Mac builds.\n \n+### [Gitian-build](/contrib/gitian-build.py) ###\n+Script for running full Gitian builds.\n+\n Test and Verify Tools\n ---------------------\n "
      },
      {
        "sha": "35181731cc5ad8e4085360eb78728a133c068e55",
        "filename": "contrib/bitcoin-pos-cli.bash-completion",
        "status": "renamed",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-cli.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-cli.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-pos-cli.bash-completion?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,10 +1,10 @@\n-# bash programmable completion for bitcoin-cli(1)\n+# bash programmable completion for bitcoin-staking-cli(1)\n # Copyright (c) 2012-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-# call $bitcoin-cli for RPC\n-_bitcoin_rpc() {\n+# call $bitcoin-staking-cli for RPC\n+_bitcoin_staking_rpc() {\n     # determine already specified args necessary for RPC\n     local rpcargs=()\n     for i in ${COMP_LINE}; do\n@@ -14,16 +14,16 @@ _bitcoin_rpc() {\n                 ;;\n         esac\n     done\n-    $bitcoin_cli \"${rpcargs[@]}\" \"$@\"\n+    $bitcoin_staking_cli \"${rpcargs[@]}\" \"$@\"\n }\n \n-_bitcoin_cli() {\n+_bitcoin_staking_cli() {\n     local cur prev words=() cword\n-    local bitcoin_cli\n+    local bitcoin_staking_cli\n \n-    # save and use original argument to invoke bitcoin-cli for -help, help and RPC\n-    # as bitcoin-cli might not be in $PATH\n-    bitcoin_cli=\"$1\"\n+    # save and use original argument to invoke bitcoin-staking-cli for -help, help and RPC\n+    # as bitcoin-staking-cli might not be in $PATH\n+    bitcoin_staking_cli=\"$1\"\n \n     COMPREPLY=()\n     _get_comp_words_by_ref -n = cur prev words cword\n@@ -112,12 +112,12 @@ _bitcoin_cli() {\n \n             # only parse -help if senseful\n             if [[ -z \"$cur\" || \"$cur\" =~ ^- ]]; then\n-                helpopts=$($bitcoin_cli -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n+                helpopts=$($bitcoin_staking_cli -help 2>&1 | awk '$1 ~ /^-/ { sub(/=.*/, \"=\"); print $1 }' )\n             fi\n \n             # only parse help if senseful\n             if [[ -z \"$cur\" || \"$cur\" =~ ^[a-z] ]]; then\n-                commands=$(_bitcoin_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')\n+                commands=$(_bitcoin_staking_rpc help 2>/dev/null | awk '$1 ~ /^[a-z]/ { print $1; }')\n             fi\n \n             COMPREPLY=( $( compgen -W \"$helpopts $commands\" -- \"$cur\" ) )\n@@ -130,7 +130,7 @@ _bitcoin_cli() {\n             ;;\n     esac\n } &&\n-complete -F _bitcoin_cli bitcoin-cli\n+complete -F _bitcoin_staking_cli bitcoin-staking-cli\n \n # Local variables:\n # mode: shell-script",
        "previous_filename": "contrib/bitcoin-cli.bash-completion"
      },
      {
        "sha": "0e4eeee0a7ad9ebc49c30d30c285ccd41a752771",
        "filename": "contrib/bitcoin-pos-qt.pro",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-pos-qt.pro?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,22 @@\n+FORMS += \\\n+    ../src/qt/forms/aboutdialog.ui \\\n+    ../src/qt/forms/addressbookpage.ui \\\n+    ../src/qt/forms/askpassphrasedialog.ui \\\n+    ../src/qt/forms/coincontroldialog.ui \\\n+    ../src/qt/forms/editaddressdialog.ui \\\n+    ../src/qt/forms/helpmessagedialog.ui \\\n+    ../src/qt/forms/intro.ui \\\n+    ../src/qt/forms/openuridialog.ui \\\n+    ../src/qt/forms/optionsdialog.ui \\\n+    ../src/qt/forms/overviewpage.ui \\\n+    ../src/qt/forms/receivecoinsdialog.ui \\\n+    ../src/qt/forms/receiverequestdialog.ui \\\n+    ../src/qt/forms/debugwindow.ui \\\n+    ../src/qt/forms/sendcoinsdialog.ui \\\n+    ../src/qt/forms/sendcoinsentry.ui \\\n+    ../src/qt/forms/signverifymessagedialog.ui \\\n+    ../src/qt/forms/transactiondescdialog.ui \\\n+    ../src/qt/forms/createwalletdialog.ui\n+\n+RESOURCES += \\\n+    ../src/qt/bitcoin.qrc"
      },
      {
        "sha": "622a96dc2639a864adea2ca7e60bd8cb848eb380",
        "filename": "contrib/bitcoin-pos-tx.bash-completion",
        "status": "renamed",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-tx.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-pos-tx.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-pos-tx.bash-completion?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,15 +1,15 @@\n-# bash programmable completion for bitcoin-tx(1)\n+# bash programmable completion for bitcoin-staking-tx(1)\n # Copyright (c) 2016 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-_bitcoin_tx() {\n+_bitcoin_staking_tx() {\n     local cur prev words=() cword\n-    local bitcoin_tx\n+    local bitcoin_staking_tx\n \n-    # save and use original argument to invoke bitcoin-tx for -help\n+    # save and use original argument to invoke bitcoin-staking-tx for -help\n     # it might not be in $PATH\n-    bitcoin_tx=\"$1\"\n+    bitcoin_staking_tx=\"$1\"\n \n     COMPREPLY=()\n     _get_comp_words_by_ref -n =: cur prev words cword\n@@ -27,15 +27,15 @@ _bitcoin_tx() {\n \n     if [[ \"$cword\" == 1 || ( \"$prev\" != \"-create\" && \"$prev\" == -* ) ]]; then\n         # only options (or an uncompletable hex-string) allowed\n-        # parse bitcoin-tx -help for options\n+        # parse bitcoin-staking-tx -help for options\n         local helpopts\n-        helpopts=$($bitcoin_tx -help | sed -e '/^  -/ p' -e d )\n+        helpopts=$($bitcoin_staking_tx -help | sed -e '/^  -/ p' -e d )\n         COMPREPLY=( $( compgen -W \"$helpopts\" -- \"$cur\" ) )\n     else\n         # only commands are allowed\n         # parse -help for commands\n         local helpcmds\n-        helpcmds=$($bitcoin_tx -help | sed -e '1,/Commands:/d' -e 's/=.*/=/' -e '/^  [a-z]/ p' -e d )\n+        helpcmds=$($bitcoin_staking_tx -help | sed -e '1,/Commands:/d' -e 's/=.*/=/' -e '/^  [a-z]/ p' -e d )\n         COMPREPLY=( $( compgen -W \"$helpcmds\" -- \"$cur\" ) )\n     fi\n \n@@ -46,7 +46,7 @@ _bitcoin_tx() {\n \n     return 0\n } &&\n-complete -F _bitcoin_tx bitcoin-tx\n+complete -F _bitcoin_staking_tx bitcoin-staking-tx\n \n # Local variables:\n # mode: shell-script",
        "previous_filename": "contrib/bitcoin-tx.bash-completion"
      },
      {
        "sha": "7372b65e3269a464a990e258c351b2ff77373532",
        "filename": "contrib/bitcoin-posd.bash-completion",
        "status": "renamed",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-posd.bash-completion",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/bitcoin-posd.bash-completion",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/bitcoin-posd.bash-completion?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,11 +3,11 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-_bitcoind() {\n+_bitcoin-stakingd() {\n     local cur prev words=() cword\n     local bitcoind\n \n-    # save and use original argument to invoke bitcoind for -help\n+    # save and use original argument to invoke bitcoin-stakingd for -help\n     # it might not be in $PATH\n     bitcoind=\"$1\"\n \n@@ -45,7 +45,7 @@ _bitcoind() {\n             ;;\n     esac\n } &&\n-complete -F _bitcoind bitcoind bitcoin-qt\n+complete -F _bitcoin-stakingd bitcoin-stakingd bitcoin-staking-qt\n \n # Local variables:\n # mode: shell-script",
        "previous_filename": "contrib/bitcoind.bash-completion"
      },
      {
        "sha": "e8032f66eeb73ce8e2e2fee47c52c3df8473dcda",
        "filename": "contrib/builder-keys/keys.txt",
        "status": "removed",
        "additions": 0,
        "deletions": 54,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/builder-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/builder-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/builder-keys/keys.txt?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,54 +0,0 @@\n-9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n-617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa (akx20000)\n-E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach (aschildbach)\n-152812300785C96444D3334D17565732E08E5E41 Andrew Chow (achow101)\n-590B7292695AFFA5B672CBB2E13FC145CD3F4304 Antoine Poinsot (darosior)\n-0AD83877C1F0CD1EE9BD660AD7CC770B81FD22A8 Ben Carman (benthecarman)\n-912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak (btcdrak)\n-04017A2A6D9A0CCDC81D8EC296AB007F1A7ED999 Carl Dong (dongcarl)\n-C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n-18AE2F798E0D239755DA4FD24B79F986CBDF8736 Chun Kuan Le (ken2812221)\n-101598DC823C1B5F9A6624ABA5E0907A0380E6C3 CoinForensics (CoinForensics)\n-F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur (centaur)\n-C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields (cfields)\n-BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random (devrandom)\n-6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark (droark)\n-1C6621605EC50319C463D56C7F81D87985D61612 Emanuele Cisbani (cisba)\n-9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n-D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece (fivepiece)\n-6F993B250557E7B016ADE5713BDCDA2D87A881D9 Fuzzbawls (Fuzzbawls)\n-01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen (gavinandresen)\n-D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n-A2FD494D0021AA9B4FA58F759102B7AE654A4A5A Ilyas Ridhuan (IlyasRidhuan)\n-2688F5A9A4BE0F295E921E8A25F27A38A47AD566 James O'Beirne (jamesob)\n-D3F22A3A4C366C2DCB66D3722DA9C5A7FA81EA35 Jarol Rodriguez (jarolrod)\n-7480909378D544EA6B6DCEB7535B12980BB8A4D3 Jeffri H Frontz (jhfrontz)\n-D3CC177286005BB8FF673294C5242A1AB3936517 jl2012 (jl2012)\n-82921A4B88FD454B7EB8CE3C796C4109063D4EAF Jon Atack (jonatack)\n-32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli (jonasschnelli)\n-4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon (jtimon)\n-C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n-70A1D47DD44F59DF8B22244333E472FE870C7E5D Kristaps Kaupe (kristapsk)\n-30DE693AE0DE9E37B3E7EB6BBFF0F67810C1EED1 Lisa Neigut (niftynei)\n-E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr (luke-jr)\n-B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke (marco)\n-07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n-CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider (meshcollider)\n-E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford (fanquake)\n-AD5764F4ADCE1B99BDFD179E12335A271D4D62EC Michael Tidwell (miketwenty1)\n-9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo (michagogo)\n-C57E4B42223FDE851D4F69DD28DF2724F241D8EE midnightmagic (midnightmagic)\n-F4FC70F07310028424EFC20A8E4256593F177720 Oliver Gugger (guggero, Oliver Gugger)\n-D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy (prab)\n-37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd (petertodd)\n-D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille [Location: Leuven, Belgium] (sipa)\n-133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille (sipa)\n-6A8F9C266528E25AEB1D7731C2371D91CB716EA7 Sebastian Falbesoner (theStack)\n-A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n-ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost (sjors)\n-867345026B6763E8B07EE73AB6737117397F5C4F Stephan Oeste (Emzy)\n-9EDAFF80E080659604F4A76B2EBB056FD847F8A7 Stephan Oeste (Emzy)\n-6DEEF79B050C4072509B743F8C275BC595448867 Tomas Kanocz (KanoczTomas)\n-AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami (wtogami)\n-79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko (willyko)\n-71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan (laanwj)"
      },
      {
        "sha": "581fe712e96c2cab4839c6bdc49a1b5cdc7bb6e7",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,11 +1,11 @@\n Format: http://www.debian.org/doc/packaging-manuals/copyright-format/1.0/\n Upstream-Name: Bitcoin\n Upstream-Contact: Satoshi Nakamoto <satoshin@gmx.com>\n- irc://#bitcoin-core-dev@libera.chat\n+ irc://#bitcoin@freenode.net\n Source: https://github.com/bitcoin/bitcoin\n \n Files: *\n-Copyright: 2009-2021, Bitcoin Core Developers\n+Copyright: 2009-2020, Bitcoin Core Developers\n License: Expat\n Comment: The Bitcoin Core Developers encompasses the current developers listed on bitcoin.org,\n          as well as the numerous contributors to the project.\n@@ -87,10 +87,6 @@ Files: src/qt/res/icons/proxy.png\n Copyright: Cristian Mircea Messel\n License: public-domain\n \n-Files: src/qt/res/fonts/RobotoMono-Bold.ttf\n-License: Apache-2.0\n-Comment: Site: https://fonts.google.com/specimen/Roboto+Mono\n-\n \n License: Expat\n  Permission is hereby granted, free of charge, to any person obtaining a\n@@ -148,14 +144,3 @@ Comment:\n \n License: public-domain\n  This work is in the public domain.\n-\n-License: Apache-2.0\n- Licensed under the Apache License, Version 2.0 (the \"License\");\n- you may not use this file except in compliance with the License.\n- You may obtain a copy of the License at\n- http://www.apache.org/licenses/LICENSE-2.0\n- Unless required by applicable law or agreed to in writing, software\n- distributed under the License is distributed on an \"AS IS\" BASIS,\n- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- See the License for the specific language governing permissions and\n- limitations under the License."
      },
      {
        "sha": "f5533719c0041cd264e0198fc07c48267f8f315a",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -7,8 +7,7 @@ clang-format-diff.py\n \n A script to format unified git diffs according to [.clang-format](../../src/.clang-format).\n \n-Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS,\n-or `sudo apt install clang-format` on Debian/Ubuntu.\n+Requires `clang-format`, installed e.g. via `brew install clang-format` on macOS.\n \n For instance, to format the last commit with 0 lines of context,\n the script should be called from the git root folder as follows.\n@@ -90,6 +89,12 @@ example:\n BUILDDIR=$PWD/build contrib/devtools/gen-manpages.sh\n ```\n \n+optimize-pngs.py\n+================\n+\n+A script to optimize png files in the bitcoin\n+repository (requires pngcrush).\n+\n security-check.py and test-security-check.py\n ============================================\n \n@@ -98,17 +103,17 @@ Perform basic security checks on a series of executables.\n symbol-check.py\n ===============\n \n-A script to check that release executables only contain\n+A script to check that the executables produced by gitian only contain\n certain symbols and are only linked against allowed libraries.\n \n For Linux this means checking for allowed gcc, glibc and libstdc++ version symbols.\n This makes sure they are still compatible with the minimum supported distribution versions.\n \n For macOS and Windows we check that the executables are only linked against libraries we allow.\n \n-Example usage:\n+Example usage after a gitian build:\n \n-    find ../path/to/executables -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n If no errors occur the return value will be 0 and the output will be empty.\n "
      },
      {
        "sha": "6afa4351e794d02b7cb143bc0326a5addfd6afd3",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,11 +1,10 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018-2020 The Bitcoin Core developers\n+# Copyright (c) 2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n import sys\n import re\n-from typing import Dict, List, Set\n \n MAPPING = {\n     'core_read.cpp': 'core_io.cpp',\n@@ -33,7 +32,7 @@ def module_name(path):\n     return None\n \n files = dict()\n-deps: Dict[str, Set[str]] = dict()\n+deps = dict()\n \n RE = re.compile(\"^#include <(.*)>\")\n \n@@ -60,12 +59,12 @@ def module_name(path):\n                     deps[module].add(included_module)\n \n # Loop to find the shortest (remaining) circular dependency\n-have_cycle: bool = False\n+have_cycle = False\n while True:\n     shortest_cycle = None\n     for module in sorted(deps.keys()):\n         # Build the transitive closure of dependencies of module\n-        closure: Dict[str, List[str]] = dict()\n+        closure = dict()\n         for dep in deps[module]:\n             closure[dep] = []\n         while True:"
      },
      {
        "sha": "92120eaff7f9a6470827568fe9d9018711088343",
        "filename": "contrib/devtools/copyright_header.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/copyright_header.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/copyright_header.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/copyright_header.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -22,7 +22,6 @@\n     'src/reverse_iterator.h',\n     'src/test/fuzz/FuzzedDataProvider.h',\n     'src/tinyformat.h',\n-    'src/bench/nanobench.h',\n     'test/functional/test_framework/bignum.py',\n     # python init:\n     '*__init__.py',"
      },
      {
        "sha": "e1d52191c183b7015e919f184a6d6baa2fd0c022",
        "filename": "contrib/devtools/gen-manpages.sh",
        "status": "modified",
        "additions": 5,
        "deletions": 22,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/gen-manpages.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/gen-manpages.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/gen-manpages.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env bash\n-# Copyright (c) 2016-2020 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -14,40 +14,23 @@ BITCOIND=${BITCOIND:-$BINDIR/bitcoind}\n BITCOINCLI=${BITCOINCLI:-$BINDIR/bitcoin-cli}\n BITCOINTX=${BITCOINTX:-$BINDIR/bitcoin-tx}\n WALLET_TOOL=${WALLET_TOOL:-$BINDIR/bitcoin-wallet}\n-BITCOINUTIL=${BITCOINQT:-$BINDIR/bitcoin-util}\n BITCOINQT=${BITCOINQT:-$BINDIR/qt/bitcoin-qt}\n \n [ ! -x $BITCOIND ] && echo \"$BITCOIND not found or not executable.\" && exit 1\n \n-# Don't allow man pages to be generated for binaries built from a dirty tree\n-DIRTY=\"\"\n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n-  VERSION_OUTPUT=$($cmd --version)\n-  if [[ $VERSION_OUTPUT == *\"dirty\"* ]]; then\n-    DIRTY=\"${DIRTY}${cmd}\\n\"\n-  fi\n-done\n-if [ -n \"$DIRTY\" ]\n-then\n-  echo -e \"WARNING: the following binaries were built from a dirty tree:\\n\"\n-  echo -e $DIRTY\n-  echo \"man pages generated from dirty binaries should NOT be committed.\"\n-  echo \"To properly generate man pages, please commit your changes to the above binaries, rebuild them, then run this script again.\"\n-fi\n-\n # The autodetected version git tag can screw up manpage output a little bit\n-read -r -a BTCVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }')\"\n+read -r -a BSKVER <<< \"$($BITCOINCLI --version | head -n1 | awk -F'[ -]' '{ print $6, $7 }')\"\n \n # Create a footer file with copyright content.\n # This gets autodetected fine for bitcoind if --version-string is not set,\n # but has different outcomes for bitcoin-qt and bitcoin-cli.\n echo \"[COPYRIGHT]\" > footer.h2m\n $BITCOIND --version | sed -n '1!p' >> footer.h2m\n \n-for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINUTIL $BITCOINQT; do\n+for cmd in $BITCOIND $BITCOINCLI $BITCOINTX $WALLET_TOOL $BITCOINQT; do\n   cmdname=\"${cmd##*/}\"\n-  help2man -N --version-string=${BTCVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n-  sed -i \"s/\\\\\\-${BTCVER[1]}//g\" ${MANDIR}/${cmdname}.1\n+  help2man -N --version-string=${BSKVER[0]} --include=footer.h2m -o ${MANDIR}/${cmdname}.1 ${cmd}\n+  sed -i \"s/\\\\\\-${BSKVER[1]}//g\" ${MANDIR}/${cmdname}.1\n done\n \n rm -f footer.h2m"
      },
      {
        "sha": "e9481dbbcf54159b08f8a27daf4905826b03804e",
        "filename": "contrib/devtools/optimize-pngs.py",
        "status": "added",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/optimize-pngs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/optimize-pngs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/optimize-pngs.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,76 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+'''\n+Run this script every time you change one of the png files. Using pngcrush, it will optimize the png files, remove various color profiles, remove ancillary chunks (alla) and text chunks (text).\n+#pngcrush -brute -ow -rem gAMA -rem cHRM -rem iCCP -rem sRGB -rem alla -rem text\n+'''\n+import os\n+import sys\n+import subprocess\n+import hashlib\n+from PIL import Image  # pip3 install Pillow\n+\n+def file_hash(filename):\n+    '''Return hash of raw file contents'''\n+    with open(filename, 'rb') as f:\n+        return hashlib.sha256(f.read()).hexdigest()\n+\n+def content_hash(filename):\n+    '''Return hash of RGBA contents of image'''\n+    i = Image.open(filename)\n+    i = i.convert('RGBA')\n+    data = i.tobytes()\n+    return hashlib.sha256(data).hexdigest()\n+\n+pngcrush = 'pngcrush'\n+git = 'git'\n+folders = [\"src/qt/res/movies\", \"src/qt/res/icons\", \"share/pixmaps\"]\n+basePath = subprocess.check_output([git, 'rev-parse', '--show-toplevel'], universal_newlines=True, encoding='utf8').rstrip('\\n')\n+totalSaveBytes = 0\n+noHashChange = True\n+\n+outputArray = []\n+for folder in folders:\n+    absFolder=os.path.join(basePath, folder)\n+    for file in os.listdir(absFolder):\n+        extension = os.path.splitext(file)[1]\n+        if extension.lower() == '.png':\n+            print(\"optimizing {}...\".format(file), end =' ')\n+            file_path = os.path.join(absFolder, file)\n+            fileMetaMap = {'file' : file, 'osize': os.path.getsize(file_path), 'sha256Old' : file_hash(file_path)}\n+            fileMetaMap['contentHashPre'] = content_hash(file_path)\n+\n+            try:\n+                subprocess.call([pngcrush, \"-brute\", \"-ow\", \"-rem\", \"gAMA\", \"-rem\", \"cHRM\", \"-rem\", \"iCCP\", \"-rem\", \"sRGB\", \"-rem\", \"alla\", \"-rem\", \"text\", file_path],\n+                                stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n+            except:\n+                print(\"pngcrush is not installed, aborting...\")\n+                sys.exit(0)\n+\n+            #verify\n+            if \"Not a PNG file\" in subprocess.check_output([pngcrush, \"-n\", \"-v\", file_path], stderr=subprocess.STDOUT, universal_newlines=True, encoding='utf8'):\n+                print(\"PNG file \"+file+\" is corrupted after crushing, check out pngcursh version\")\n+                sys.exit(1)\n+\n+            fileMetaMap['sha256New'] = file_hash(file_path)\n+            fileMetaMap['contentHashPost'] = content_hash(file_path)\n+\n+            if fileMetaMap['contentHashPre'] != fileMetaMap['contentHashPost']:\n+                print(\"Image contents of PNG file {} before and after crushing don't match\".format(file))\n+                sys.exit(1)\n+\n+            fileMetaMap['psize'] = os.path.getsize(file_path)\n+            outputArray.append(fileMetaMap)\n+            print(\"done\")\n+\n+print(\"summary:\\n+++++++++++++++++\")\n+for fileDict in outputArray:\n+    oldHash = fileDict['sha256Old']\n+    newHash = fileDict['sha256New']\n+    totalSaveBytes += fileDict['osize'] - fileDict['psize']\n+    noHashChange = noHashChange and (oldHash == newHash)\n+    print(fileDict['file']+\"\\n  size diff from: \"+str(fileDict['osize'])+\" to: \"+str(fileDict['psize'])+\"\\n  old sha256: \"+oldHash+\"\\n  new sha256: \"+newHash+\"\\n\")\n+\n+print(\"completed. Checksum stable: \"+str(noHashChange)+\". Total reduction: \"+str(totalSaveBytes)+\" bytes\")"
      },
      {
        "sha": "5ddfdb4e73b67990619b0c7c785f70c79cf7d4c5",
        "filename": "contrib/devtools/previous_release.sh",
        "status": "added",
        "additions": 152,
        "deletions": 0,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/previous_release.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/previous_release.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/previous_release.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,152 @@\n+#!/usr/bin/env bash\n+#\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#\n+# Build previous releases.\n+\n+export LC_ALL=C\n+\n+CONFIG_FLAGS=\"\"\n+FUNCTIONAL_TESTS=0\n+DELETE_EXISTING=0\n+USE_DEPENDS=0\n+DOWNLOAD_BINARY=0\n+CONFIG_FLAGS=\"\"\n+TARGET=\"releases\"\n+\n+while getopts \":hfrdbt:\" opt; do\n+  case $opt in\n+    h)\n+      echo \"Usage: .previous_release.sh [options] tag1 tag2\"\n+      echo \"  options:\"\n+      echo \"  -h   Print this message\"\n+      echo \"  -f   Configure for functional tests\"\n+      echo \"  -r   Remove existing directory\"\n+      echo \"  -d   Use depends\"\n+      echo \"  -b   Download release binary\"\n+      echo \"  -t   Target directory (default: releases)\"\n+      exit 0\n+      ;;\n+    f)\n+      FUNCTIONAL_TESTS=1\n+      CONFIG_FLAGS=\"$CONFIG_FLAGS --without-gui --disable-tests --disable-bench\"\n+      ;;\n+    r)\n+      DELETE_EXISTING=1\n+      ;;\n+    d)\n+      USE_DEPENDS=1\n+      ;;\n+    b)\n+      DOWNLOAD_BINARY=1\n+      ;;\n+    t)\n+      TARGET=$OPTARG\n+      ;;\n+    \\?)\n+      echo \"Invalid option: -$OPTARG\" >&2\n+      exit 1\n+      ;;\n+  esac\n+done\n+\n+shift $((OPTIND-1))\n+\n+if [ -z \"$1\" ]; then\n+  echo \"Specify release tag(s), e.g.: .previous_release v0.15.1\"\n+  exit 1\n+fi\n+\n+if [ ! -d \"$TARGET\" ]; then\n+  mkdir -p $TARGET\n+fi\n+\n+if [ \"$DOWNLOAD_BINARY\" -eq \"1\" ]; then\n+  HOST=\"${HOST:-$(./depends/config.guess)}\"\n+  case \"$HOST\" in\n+    x86_64-*-linux*)\n+      PLATFORM=x86_64-linux-gnu\n+      ;;\n+    x86_64-apple-darwin*)\n+      PLATFORM=osx64\n+      ;;\n+    *)\n+      echo \"Not sure which binary to download for $HOST.\"\n+      exit 1\n+      ;;\n+  esac\n+fi\n+\n+echo \"Releases directory: $TARGET\"\n+pushd \"$TARGET\" || exit 1\n+{\n+  for tag in \"$@\"\n+  do\n+    if [ \"$DELETE_EXISTING\" -eq \"1\" ]; then\n+      if [ -d \"$tag\" ]; then\n+        rm -r \"$tag\"\n+      fi\n+    fi\n+\n+    if [ \"$DOWNLOAD_BINARY\" -eq \"0\" ]; then\n+\n+      if [ ! -d \"$tag\" ]; then\n+        if [ -z $(git tag -l \"$tag\") ]; then\n+          echo \"Tag $tag not found\"\n+          exit 1\n+        fi\n+\n+        git clone https://github.com/bitcoin/bitcoin \"$tag\"\n+        pushd \"$tag\" || exit 1\n+        {\n+          git checkout \"$tag\"\n+          if [ \"$USE_DEPENDS\" -eq \"1\" ]; then\n+            pushd depends || exit 1\n+            {\n+              if [ \"$FUNCTIONAL_TESTS\" -eq \"1\" ]; then\n+                make NO_QT=1\n+              else\n+                make\n+              fi\n+              HOST=\"${HOST:-$(./config.guess)}\"\n+            }\n+            popd || exit 1\n+            CONFIG_FLAGS=\"--prefix=$PWD/depends/$HOST $CONFIG_FLAGS\"\n+          fi\n+          ./autogen.sh\n+          ./configure $CONFIG_FLAGS\n+          make\n+          # Move binaries, so they're in the same place as in the release download:\n+          mkdir bin\n+          mv src/bitcoind src/bitcoin-cli src/bitcoin-tx bin\n+          if [ \"$FUNCTIONAL_TESTS\" -eq \"0\" ]; then\n+            mv src/qt/bitcoin-qt bin\n+          fi\n+        }\n+        popd || exit 1\n+      fi\n+    else\n+      if [ -d \"$tag\" ]; then\n+        echo \"Using cached $tag\"\n+      else\n+        mkdir \"$tag\"\n+        if [[ \"$tag\" =~ v(.*)(rc[0-9]+)$ ]]; then\n+            BIN_PATH=\"bin/bitcoin-core-${BASH_REMATCH[1]}/test.${BASH_REMATCH[2]}\"\n+        else\n+            BIN_PATH=\"bin/bitcoin-core-${tag:1}\"\n+        fi\n+        URL=\"https://bitcoin.org/$BIN_PATH/bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n+        echo \"Fetching: $URL\"\n+        if ! curl -O -f $URL; then\n+            echo \"Download failed.\"\n+            exit 1\n+        fi\n+        tar -zxf \"bitcoin-${tag:1}-$PLATFORM.tar.gz\" -C \"$tag\" --strip-components=1 \"bitcoin-${tag:1}\"\n+        rm \"bitcoin-${tag:1}-$PLATFORM.tar.gz\"\n+      fi\n+    fi\n+  done\n+}\n+popd || exit 1"
      },
      {
        "sha": "b924698e56c0d96ce304fe8194e3f4c4600952c2",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 206,
        "deletions": 136,
        "changes": 342,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -6,209 +6,279 @@\n Perform basic security checks on a series of executables.\n Exit status will be 0 if successful, and the program will be silent.\n Otherwise the exit status will be 1 and it will log which executables failed which checks.\n+Needs `readelf` (for ELF), `objdump` (for PE) and `otool` (for MACHO).\n '''\n+import subprocess\n import sys\n-from typing import List\n+import os\n \n-import lief #type:ignore\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n+OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n+NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n-def check_ELF_RELRO(binary) -> bool:\n+def check_ELF_PIE(executable):\n+    '''\n+    Check for position independent executable (PIE), allowing for address space randomization.\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+\n+    ok = False\n+    for line in stdout.splitlines():\n+        line = line.split()\n+        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+            ok = True\n+    return ok\n+\n+def get_ELF_program_headers(executable):\n+    '''Return type and flags for ELF program headers'''\n+    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    in_headers = False\n+    count = 0\n+    headers = []\n+    for line in stdout.splitlines():\n+        if line.startswith('Program Headers:'):\n+            in_headers = True\n+        if line == '':\n+            in_headers = False\n+        if in_headers:\n+            if count == 1: # header line\n+                ofs_typ = line.find('Type')\n+                ofs_offset = line.find('Offset')\n+                ofs_flags = line.find('Flg')\n+                ofs_align = line.find('Align')\n+                if ofs_typ == -1 or ofs_offset == -1 or ofs_flags == -1 or ofs_align  == -1:\n+                    raise ValueError('Cannot parse elfread -lW output')\n+            elif count > 1:\n+                typ = line[ofs_typ:ofs_offset].rstrip()\n+                flags = line[ofs_flags:ofs_align].rstrip()\n+                headers.append((typ, flags))\n+            count += 1\n+    return headers\n+\n+def check_ELF_NX(executable):\n+    '''\n+    Check that no sections are writable and executable (including the stack)\n+    '''\n+    have_wx = False\n+    have_gnu_stack = False\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        if typ == 'GNU_STACK':\n+            have_gnu_stack = True\n+        if 'W' in flags and 'E' in flags: # section is both writable and executable\n+            have_wx = True\n+    return have_gnu_stack and not have_wx\n+\n+def check_ELF_RELRO(executable):\n     '''\n     Check for read-only relocations.\n     GNU_RELRO program header must exist\n     Dynamic section must have BIND_NOW flag\n     '''\n     have_gnu_relro = False\n-    for segment in binary.segments:\n-        # Note: not checking p_flags == PF_R: here as linkers set the permission differently\n-        # This does not affect security: the permission flags of the GNU_RELRO program\n-        # header are ignored, the PT_LOAD header determines the effective permissions.\n+    for (typ, flags) in get_ELF_program_headers(executable):\n+        # Note: not checking flags == 'R': here as linkers set the permission differently\n+        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n-        if segment.type == lief.ELF.SEGMENT_TYPES.GNU_RELRO:\n+        if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    try:\n-        flags = binary.get(lief.ELF.DYNAMIC_TAGS.FLAGS)\n-        if flags.value & lief.ELF.DYNAMIC_FLAGS.BIND_NOW:\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n             have_bindnow = True\n-    except:\n-        have_bindnow = False\n-\n     return have_gnu_relro and have_bindnow\n \n-def check_ELF_Canary(binary) -> bool:\n+def check_ELF_Canary(executable):\n     '''\n     Check for use of stack canary\n     '''\n-    return binary.has_symbol('__stack_chk_fail')\n-\n-def check_ELF_separate_code(binary):\n-    '''\n-    Check that sections are appropriately separated in virtual memory,\n-    based on their permissions. This checks for missing -Wl,-z,separate-code\n-    and potentially other problems.\n-    '''\n-    R = lief.ELF.SEGMENT_FLAGS.R\n-    W = lief.ELF.SEGMENT_FLAGS.W\n-    E = lief.ELF.SEGMENT_FLAGS.X\n-    EXPECTED_FLAGS = {\n-        # Read + execute\n-        '.init': R | E,\n-        '.plt': R | E,\n-        '.plt.got': R | E,\n-        '.plt.sec': R | E,\n-        '.text': R | E,\n-        '.fini': R | E,\n-        # Read-only data\n-        '.interp': R,\n-        '.note.gnu.property': R,\n-        '.note.gnu.build-id': R,\n-        '.note.ABI-tag': R,\n-        '.gnu.hash': R,\n-        '.dynsym': R,\n-        '.dynstr': R,\n-        '.gnu.version': R,\n-        '.gnu.version_r': R,\n-        '.rela.dyn': R,\n-        '.rela.plt': R,\n-        '.rodata': R,\n-        '.eh_frame_hdr': R,\n-        '.eh_frame': R,\n-        '.qtmetadata': R,\n-        '.gcc_except_table': R,\n-        '.stapsdt.base': R,\n-        # Writable data\n-        '.init_array': R | W,\n-        '.fini_array': R | W,\n-        '.dynamic': R | W,\n-        '.got': R | W,\n-        '.data': R | W,\n-        '.bss': R | W,\n-    }\n-    if binary.header.machine_type == lief.ELF.ARCH.PPC64:\n-        # .plt is RW on ppc64 even with separate-code\n-        EXPECTED_FLAGS['.plt'] = R | W\n-    # For all LOAD program headers get mapping to the list of sections,\n-    # and for each section, remember the flags of the associated program header.\n-    flags_per_section = {}\n-    for segment in binary.segments:\n-        if segment.type ==  lief.ELF.SEGMENT_TYPES.LOAD:\n-            for section in segment.sections:\n-                assert(section.name not in flags_per_section)\n-                flags_per_section[section.name] = segment.flags\n-    # Spot-check ELF LOAD program header flags per section\n-    # If these sections exist, check them against the expected R/W/E flags\n-    for (section, flags) in flags_per_section.items():\n-        if section in EXPECTED_FLAGS:\n-            if int(EXPECTED_FLAGS[section]) != int(flags):\n-                return False\n-    return True\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    ok = False\n+    for line in stdout.splitlines():\n+        if '__stack_chk_fail' in line:\n+            ok = True\n+    return ok\n+\n+def get_PE_dll_characteristics(executable):\n+    '''\n+    Get PE DllCharacteristics bits.\n+    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n+    and bits is the DllCharacteristics value.\n+    '''\n+    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    arch = ''\n+    bits = 0\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens)>=2 and tokens[0] == 'architecture:':\n+            arch = tokens[1].rstrip(',')\n+        if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n+            bits = int(tokens[1],16)\n+    return (arch,bits)\n+\n+IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n+IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n+IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_DYNAMIC_BASE(binary) -> bool:\n+def check_PE_DYNAMIC_BASE(executable):\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    return lief.PE.DLL_CHARACTERISTICS.DYNAMIC_BASE in binary.optional_header.dll_characteristics_lists\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n+    return (bits & reqbits) == reqbits\n \n-# Must support high-entropy 64-bit address space layout randomization\n-# in addition to DYNAMIC_BASE to have secure ASLR.\n-def check_PE_HIGH_ENTROPY_VA(binary) -> bool:\n+# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n+# to have secure ASLR.\n+def check_PE_HIGH_ENTROPY_VA(executable):\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    return lief.PE.DLL_CHARACTERISTICS.HIGH_ENTROPY_VA in binary.optional_header.dll_characteristics_lists\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    if arch == 'i386:x86-64':\n+        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n+    else: # Unnecessary on 32-bit\n+        assert(arch == 'i386')\n+        reqbits = 0\n+    return (bits & reqbits) == reqbits\n \n-def check_PE_RELOC_SECTION(binary) -> bool:\n-    '''Check for a reloc section. This is required for functional ASLR.'''\n-    return binary.has_relocations\n+def check_PE_NX(executable):\n+    '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n+    (arch,bits) = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n-def check_MACHO_NOUNDEFS(binary) -> bool:\n-    '''\n-    Check for no undefined references.\n-    '''\n-    return binary.header.has(lief.MachO.HEADER_FLAGS.NOUNDEFS)\n+def get_MACHO_executable_flags(executable):\n+    p = subprocess.Popen([OTOOL_CMD, '-vh', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n \n-def check_MACHO_LAZY_BINDINGS(binary) -> bool:\n-    '''\n-    Check for no lazy bindings.\n-    We don't use or check for MH_BINDATLOAD. See #18295.\n-    '''\n-    return binary.dyld_info.lazy_bind == (0,0)\n+    flags = []\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        # filter first two header lines\n+        if 'magic' in tokens or 'Mach' in tokens:\n+            continue\n+        # filter ncmds and sizeofcmds values\n+        flags += [t for t in tokens if not t.isdigit()]\n+    return flags\n \n-def check_MACHO_Canary(binary) -> bool:\n+def check_MACHO_PIE(executable) -> bool:\n     '''\n-    Check for use of stack canary\n+    Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    return binary.has_symbol('___stack_chk_fail')\n+    flags = get_MACHO_executable_flags(executable)\n+    if 'PIE' in flags:\n+        return True\n+    return False\n \n-def check_PIE(binary) -> bool:\n+def check_MACHO_NOUNDEFS(executable) -> bool:\n     '''\n-    Check for position independent executable (PIE),\n-    allowing for address space randomization.\n+    Check for no undefined references.\n     '''\n-    return binary.is_pie\n+    flags = get_MACHO_executable_flags(executable)\n+    if 'NOUNDEFS' in flags:\n+        return True\n+    return False\n \n-def check_NX(binary) -> bool:\n+def check_MACHO_NX(executable) -> bool:\n     '''\n     Check for no stack execution\n     '''\n-    return binary.has_nx\n+    flags = get_MACHO_executable_flags(executable)\n+    if 'ALLOW_STACK_EXECUTION' in flags:\n+        return False\n+    return True\n \n-def check_control_flow(binary) -> bool:\n+def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n     '''\n-    Check for control flow instrumentation\n+    Check for no lazy bindings.\n+    We don't use or check for MH_BINDATLOAD. See #18295.\n     '''\n-    content = binary.get_content_from_virtual_address(binary.entrypoint, 4, lief.Binary.VA_TYPES.AUTO)\n-\n-    if content == [243, 15, 30, 250]: # endbr64\n-        return True\n-    return False\n+    p = subprocess.Popen([OTOOL_CMD, '-l', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n \n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if 'lazy_bind_off' in tokens or 'lazy_bind_size' in tokens:\n+            if tokens[1] != '0':\n+                return False\n+    return True\n \n CHECKS = {\n 'ELF': [\n-    ('PIE', check_PIE),\n-    ('NX', check_NX),\n+    ('PIE', check_ELF_PIE),\n+    ('NX', check_ELF_NX),\n     ('RELRO', check_ELF_RELRO),\n-    ('Canary', check_ELF_Canary),\n-    ('separate_code', check_ELF_separate_code),\n+    ('Canary', check_ELF_Canary)\n ],\n 'PE': [\n-    ('PIE', check_PIE),\n     ('DYNAMIC_BASE', check_PE_DYNAMIC_BASE),\n     ('HIGH_ENTROPY_VA', check_PE_HIGH_ENTROPY_VA),\n-    ('NX', check_NX),\n-    ('RELOC_SECTION', check_PE_RELOC_SECTION)\n+    ('NX', check_PE_NX)\n ],\n 'MACHO': [\n-    ('PIE', check_PIE),\n+    ('PIE', check_MACHO_PIE),\n     ('NOUNDEFS', check_MACHO_NOUNDEFS),\n-    ('NX', check_NX),\n-    ('LAZY_BINDINGS', check_MACHO_LAZY_BINDINGS),\n-    ('Canary', check_MACHO_Canary),\n-    ('CONTROL_FLOW', check_control_flow),\n+    ('NX', check_MACHO_NX),\n+    ('LAZY_BINDINGS', check_MACHO_LAZY_BINDINGS)\n ]\n }\n \n+def identify_executable(executable):\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    elif magic.startswith(b'\\xcf\\xfa'):\n+        return 'MACHO'\n+    return None\n+\n if __name__ == '__main__':\n-    retval: int = 0\n+    retval = 0\n     for filename in sys.argv[1:]:\n         try:\n-            binary = lief.parse(filename)\n-            etype = binary.format.name\n-            if etype == lief.EXE_FORMATS.UNKNOWN:\n-                print(f'{filename}: unknown executable format')\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('%s: unknown format' % filename)\n                 retval = 1\n                 continue\n \n-            failed: List[str] = []\n+            failed = []\n+            warning = []\n             for (name, func) in CHECKS[etype]:\n-                if not func(binary):\n-                    failed.append(name)\n+                if not func(filename):\n+                    if name in NONFATAL:\n+                        warning.append(name)\n+                    else:\n+                        failed.append(name)\n             if failed:\n-                print(f'{filename}: failed {\" \".join(failed)}')\n+                print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n+            if warning:\n+                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n-            print(f'{filename}: cannot open')\n+            print('%s: cannot open' % filename)\n             retval = 1\n     sys.exit(retval)\n "
      },
      {
        "sha": "3e0a75504be31322552dff9e28c637b60d00bbbe",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 158,
        "deletions": 138,
        "changes": 296,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,21 +3,18 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-A script to check that release executables only contain certain symbols\n-and are only linked against allowed libraries.\n+A script to check that the executables produced by gitian only contain\n+certain symbols and are only linked against allowed libraries.\n \n Example usage:\n \n-    find ../path/to/binaries -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n+import subprocess\n+import re\n import sys\n-from typing import List, Dict\n-\n-import lief #type:ignore\n-\n-# temporary constant, to be replaced with lief.ELF.ARCH.RISCV\n-# https://github.com/lief-project/LIEF/pull/562\n-LIEF_ELF_ARCH_RISCV = lief.ELF.ARCH(243)\n+import os\n+from typing import List, Optional, Tuple\n \n # Debian 8 (Jessie) EOL: 2020. https://wiki.debian.org/DebianReleases#Production_Releases\n #\n@@ -42,50 +39,21 @@\n #\n MAX_VERSIONS = {\n 'GCC':       (4,8,0),\n-'GLIBC': {\n-    lief.ELF.ARCH.i386:   (2,17),\n-    lief.ELF.ARCH.x86_64: (2,17),\n-    lief.ELF.ARCH.ARM:    (2,17),\n-    lief.ELF.ARCH.AARCH64:(2,17),\n-    lief.ELF.ARCH.PPC64:  (2,17),\n-    LIEF_ELF_ARCH_RISCV:  (2,27),\n-},\n-'LIBATOMIC': (1,0),\n-'V':         (0,5,0),  # xkb (bitcoin-qt only)\n+'GLIBC':     (2,17),\n+'LIBATOMIC': (1,0)\n }\n # See here for a description of _IO_stdin_used:\n # https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=634261#109\n \n # Ignore symbols that are exported as part of every executable\n IGNORE_EXPORTS = {\n-'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__',\n-'__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n+'_edata', '_end', '__end__', '_init', '__bss_start', '__bss_start__', '_bss_end__', '__bss_end__', '_fini', '_IO_stdin_used', 'stdin', 'stdout', 'stderr',\n 'environ', '_environ', '__environ',\n }\n-\n-# Expected linker-loader names can be found here:\n-# https://sourceware.org/glibc/wiki/ABIList?action=recall&rev=16\n-ELF_INTERPRETER_NAMES: Dict[lief.ELF.ARCH, Dict[lief.ENDIANNESS, str]] = {\n-    lief.ELF.ARCH.i386:    {\n-        lief.ENDIANNESS.LITTLE: \"/lib/ld-linux.so.2\",\n-    },\n-    lief.ELF.ARCH.x86_64:  {\n-        lief.ENDIANNESS.LITTLE: \"/lib64/ld-linux-x86-64.so.2\",\n-    },\n-    lief.ELF.ARCH.ARM:     {\n-        lief.ENDIANNESS.LITTLE: \"/lib/ld-linux-armhf.so.3\",\n-    },\n-    lief.ELF.ARCH.AARCH64: {\n-        lief.ENDIANNESS.LITTLE: \"/lib/ld-linux-aarch64.so.1\",\n-    },\n-    lief.ELF.ARCH.PPC64:   {\n-        lief.ENDIANNESS.BIG: \"/lib64/ld64.so.1\",\n-        lief.ENDIANNESS.LITTLE: \"/lib64/ld64.so.2\",\n-    },\n-    LIEF_ELF_ARCH_RISCV:    {\n-        lief.ENDIANNESS.LITTLE: \"/lib/ld-linux-riscv64-lp64d.so.1\",\n-    },\n-}\n+READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n+CPPFILT_CMD = os.getenv('CPPFILT', '/usr/bin/c++filt')\n+OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n+OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n \n # Allowed NEEDED libraries\n ELF_ALLOWED_LIBRARIES = {\n@@ -100,17 +68,20 @@\n 'ld-linux.so.2', # 32-bit dynamic linker\n 'ld-linux-aarch64.so.1', # 64-bit ARM dynamic linker\n 'ld-linux-armhf.so.3', # 32-bit ARM dynamic linker\n-'ld64.so.1', # POWER64 ABIv1 dynamic linker\n-'ld64.so.2', # POWER64 ABIv2 dynamic linker\n 'ld-linux-riscv64-lp64d.so.1', # 64-bit RISC-V dynamic linker\n # bitcoin-qt only\n 'libxcb.so.1', # part of X11\n-'libxkbcommon.so.0', # keyboard keymapping\n-'libxkbcommon-x11.so.0', # keyboard keymapping\n 'libfontconfig.so.1', # font support\n 'libfreetype.so.6', # font parsing\n 'libdl.so.2' # programming interface to dynamic linker\n }\n+ARCH_MIN_GLIBC_VER = {\n+'80386':  (2,1),\n+'X86-64': (2,2,5),\n+'ARM':    (2,4),\n+'AArch64':(2,17),\n+'RISC-V': (2,27)\n+}\n \n MACHO_ALLOWED_LIBRARIES = {\n # bitcoind and bitcoin-qt\n@@ -124,15 +95,10 @@\n 'CoreGraphics', # 2D rendering\n 'CoreServices', # operating system services\n 'CoreText', # interface for laying out text and handling fonts.\n-'CoreVideo', # video processing\n 'Foundation', # base layer functionality for apps/frameworks\n 'ImageIO', # read and write image file formats.\n 'IOKit', # user-space access to hardware devices and drivers.\n-'IOSurface', # cross process image/drawing buffers\n 'libobjc.A.dylib', # Objective-C runtime library\n-'Metal', # 3D graphics\n-'Security', # access control and authentication\n-'QuartzCore', # animation\n }\n \n PE_ALLOWED_LIBRARIES = {\n@@ -147,140 +113,194 @@\n 'dwmapi.dll', # desktop window manager\n 'GDI32.dll', # graphics device interface\n 'IMM32.dll', # input method editor\n-'NETAPI32.dll',\n 'ole32.dll', # component object model\n 'OLEAUT32.dll', # OLE Automation API\n 'SHLWAPI.dll', # light weight shell API\n-'USERENV.dll',\n 'UxTheme.dll',\n 'VERSION.dll', # version checking\n 'WINMM.dll', # WinMM audio API\n-'WTSAPI32.dll',\n }\n \n+class CPPFilt(object):\n+    '''\n+    Demangle C++ symbol names.\n+\n+    Use a pipe to the 'c++filt' command.\n+    '''\n+    def __init__(self):\n+        self.proc = subprocess.Popen(CPPFILT_CMD, stdin=subprocess.PIPE, stdout=subprocess.PIPE, universal_newlines=True)\n+\n+    def __call__(self, mangled):\n+        self.proc.stdin.write(mangled + '\\n')\n+        self.proc.stdin.flush()\n+        return self.proc.stdout.readline().rstrip()\n+\n+    def close(self):\n+        self.proc.stdin.close()\n+        self.proc.stdout.close()\n+        self.proc.wait()\n+\n+def read_symbols(executable, imports=True) -> List[Tuple[str, str, str]]:\n+    '''\n+    Parse an ELF executable and return a list of (symbol,version, arch) tuples\n+    for dynamic, imported symbols.\n+    '''\n+    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', '-h', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Could not read symbols for {}: {}'.format(executable, stderr.strip()))\n+    syms = []\n+    for line in stdout.splitlines():\n+        line = line.split()\n+        if 'Machine:' in line:\n+            arch = line[-1]\n+        if len(line)>7 and re.match('[0-9]+:$', line[0]):\n+            (sym, _, version) = line[7].partition('@')\n+            is_import = line[6] == 'UND'\n+            if version.startswith('@'):\n+                version = version[1:]\n+            if is_import == imports:\n+                syms.append((sym, version, arch))\n+    return syms\n+\n def check_version(max_versions, version, arch) -> bool:\n-    (lib, _, ver) = version.rpartition('_')\n+    if '_' in version:\n+        (lib, _, ver) = version.rpartition('_')\n+    else:\n+        lib = version\n+        ver = '0'\n     ver = tuple([int(x) for x in ver.split('.')])\n     if not lib in max_versions:\n         return False\n-    if isinstance(max_versions[lib], tuple):\n-        return ver <= max_versions[lib]\n-    else:\n-        return ver <= max_versions[lib][arch]\n+    return ver <= max_versions[lib] or lib == 'GLIBC' and ver <= ARCH_MIN_GLIBC_VER[arch]\n \n-def check_imported_symbols(binary) -> bool:\n-    ok: bool = True\n+def elf_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([READELF_CMD, '-d', '-W', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens)>2 and tokens[1] == '(NEEDED)':\n+            match = re.match(r'^Shared library: \\[(.*)\\]$', ' '.join(tokens[2:]))\n+            if match:\n+                libraries.append(match.group(1))\n+            else:\n+                raise ValueError('Unparseable (NEEDED) specification')\n+    return libraries\n \n-    for symbol in binary.imported_symbols:\n-        if not symbol.imported:\n-            continue\n-\n-        version = symbol.symbol_version if symbol.has_version else None\n-\n-        if version:\n-            aux_version = version.symbol_version_auxiliary.name if version.has_auxiliary_version else None\n-            if aux_version and not check_version(MAX_VERSIONS, aux_version, binary.header.machine_type):\n-                print(f'{filename}: symbol {symbol.name} from unsupported version {version}')\n-                ok = False\n+def check_imported_symbols(filename) -> bool:\n+    cppfilt = CPPFilt()\n+    ok = True\n+    for sym, version, arch in read_symbols(filename, True):\n+        if version and not check_version(MAX_VERSIONS, version, arch):\n+            print('{}: symbol {} from unsupported version {}'.format(filename, cppfilt(sym), version))\n+            ok = False\n     return ok\n \n-def check_exported_symbols(binary) -> bool:\n-    ok: bool = True\n-\n-    for symbol in binary.dynamic_symbols:\n-        if not symbol.exported:\n-            continue\n-        name = symbol.name\n-        if binary.header.machine_type == LIEF_ELF_ARCH_RISCV or name in IGNORE_EXPORTS:\n+def check_exported_symbols(filename) -> bool:\n+    cppfilt = CPPFilt()\n+    ok = True\n+    for sym,version,arch in read_symbols(filename, False):\n+        if arch == 'RISC-V' or sym in IGNORE_EXPORTS:\n             continue\n-        print(f'{binary.name}: export of symbol {name} not allowed!')\n+        print('{}: export of symbol {} not allowed'.format(filename, cppfilt(sym)))\n         ok = False\n     return ok\n \n-def check_ELF_libraries(binary) -> bool:\n-    ok: bool = True\n-    for library in binary.libraries:\n-        if library not in ELF_ALLOWED_LIBRARIES:\n-            print(f'{filename}: {library} is not in ALLOWED_LIBRARIES!')\n+def check_ELF_libraries(filename) -> bool:\n+    ok = True\n+    for library_name in elf_read_libraries(filename):\n+        if library_name not in ELF_ALLOWED_LIBRARIES:\n+            print('{}: NEEDED library {} is not allowed'.format(filename, library_name))\n             ok = False\n     return ok\n \n-def check_MACHO_libraries(binary) -> bool:\n-    ok: bool = True\n-    for dylib in binary.libraries:\n-        split = dylib.name.split('/')\n-        if split[-1] not in MACHO_ALLOWED_LIBRARIES:\n-            print(f'{split[-1]} is not in ALLOWED_LIBRARIES!')\n+def macho_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([OTOOL_CMD, '-L', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        tokens = line.split()\n+        if len(tokens) == 1: # skip executable name\n+            continue\n+        libraries.append(tokens[0].split('/')[-1])\n+    return libraries\n+\n+def check_MACHO_libraries(filename) -> bool:\n+    ok = True\n+    for dylib in macho_read_libraries(filename):\n+        if dylib not in MACHO_ALLOWED_LIBRARIES:\n+            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n             ok = False\n     return ok\n \n-def check_MACHO_min_os(binary) -> bool:\n-    if binary.build_version.minos == [10,15,0]:\n-        return True\n-    return False\n-\n-def check_MACHO_sdk(binary) -> bool:\n-    if binary.build_version.sdk == [10, 15, 6]:\n-        return True\n-    return False\n+def pe_read_libraries(filename) -> List[str]:\n+    p = subprocess.Popen([OBJDUMP_CMD, '-x', filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    if p.returncode:\n+        raise IOError('Error opening file')\n+    libraries = []\n+    for line in stdout.splitlines():\n+        if 'DLL Name:' in line:\n+            tokens = line.split(': ')\n+            libraries.append(tokens[1])\n+    return libraries\n \n-def check_PE_libraries(binary) -> bool:\n-    ok: bool = True\n-    for dylib in binary.libraries:\n-        if dylib not in PE_ALLOWED_LIBRARIES:\n-            print(f'{dylib} is not in ALLOWED_LIBRARIES!')\n+def check_PE_libraries(filename) -> bool:\n+    ok = True\n+    for dylib in pe_read_libraries(filename):\n+        if dylib.upper() not in map(str.upper, PE_ALLOWED_LIBRARIES):\n+            print('{} is not in ALLOWED_LIBRARIES!'.format(dylib))\n             ok = False\n     return ok\n \n-def check_PE_subsystem_version(binary) -> bool:\n-    major: int = binary.optional_header.major_subsystem_version\n-    minor: int = binary.optional_header.minor_subsystem_version\n-    if major == 6 and minor == 1:\n-        return True\n-    return False\n-\n-def check_ELF_interpreter(binary) -> bool:\n-    expected_interpreter = ELF_INTERPRETER_NAMES[binary.header.machine_type][binary.abstract.header.endianness]\n-\n-    return binary.concrete.interpreter == expected_interpreter\n-\n CHECKS = {\n 'ELF': [\n     ('IMPORTED_SYMBOLS', check_imported_symbols),\n     ('EXPORTED_SYMBOLS', check_exported_symbols),\n-    ('LIBRARY_DEPENDENCIES', check_ELF_libraries),\n-    ('INTERPRETER_NAME', check_ELF_interpreter),\n+    ('LIBRARY_DEPENDENCIES', check_ELF_libraries)\n ],\n 'MACHO': [\n-    ('DYNAMIC_LIBRARIES', check_MACHO_libraries),\n-    ('MIN_OS', check_MACHO_min_os),\n-    ('SDK', check_MACHO_sdk),\n+    ('DYNAMIC_LIBRARIES', check_MACHO_libraries)\n ],\n 'PE' : [\n-    ('DYNAMIC_LIBRARIES', check_PE_libraries),\n-    ('SUBSYSTEM_VERSION', check_PE_subsystem_version),\n+    ('DYNAMIC_LIBRARIES', check_PE_libraries)\n ]\n }\n \n+def identify_executable(executable) -> Optional[str]:\n+    with open(filename, 'rb') as f:\n+        magic = f.read(4)\n+    if magic.startswith(b'MZ'):\n+        return 'PE'\n+    elif magic.startswith(b'\\x7fELF'):\n+        return 'ELF'\n+    elif magic.startswith(b'\\xcf\\xfa'):\n+        return 'MACHO'\n+    return None\n+\n if __name__ == '__main__':\n-    retval: int = 0\n+    retval = 0\n     for filename in sys.argv[1:]:\n         try:\n-            binary = lief.parse(filename)\n-            etype = binary.format.name\n-            if etype == lief.EXE_FORMATS.UNKNOWN:\n-                print(f'{filename}: unknown executable format')\n+            etype = identify_executable(filename)\n+            if etype is None:\n+                print('{}: unknown format'.format(filename))\n                 retval = 1\n                 continue\n \n-            failed: List[str] = []\n+            failed = []\n             for (name, func) in CHECKS[etype]:\n-                if not func(binary):\n+                if not func(filename):\n                     failed.append(name)\n             if failed:\n-                print(f'{filename}: failed {\" \".join(failed)}')\n+                print('{}: failed {}'.format(filename, ' '.join(failed)))\n                 retval = 1\n         except IOError:\n-            print(f'{filename}: cannot open')\n+            print('{}: cannot open'.format(filename))\n             retval = 1\n     sys.exit(retval)"
      },
      {
        "sha": "e2a8154f16da62c7d7364b55fefc53731d940945",
        "filename": "contrib/devtools/test-security-check.py",
        "status": "modified",
        "additions": 26,
        "deletions": 59,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/test-security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/test-security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-security-check.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,17 +1,13 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2020 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n Test script for security-check.py\n '''\n-import os\n import subprocess\n-from typing import List\n import unittest\n \n-from utils import determine_wellknown_cmd\n-\n def write_testcode(filename):\n     with open(filename, 'w', encoding=\"utf8\") as f:\n         f.write('''\n@@ -23,89 +19,60 @@ def write_testcode(filename):\n     }\n     ''')\n \n-def clean_files(source, executable):\n-    os.remove(source)\n-    os.remove(executable)\n-\n def call_security_check(cc, source, executable, options):\n-    # This should behave the same as AC_TRY_LINK, so arrange well-known flags\n-    # in the same order as autoconf would.\n-    #\n-    # See the definitions for ac_link in autoconf's lib/autoconf/c.m4 file for\n-    # reference.\n-    env_flags: List[str] = []\n-    for var in ['CFLAGS', 'CPPFLAGS', 'LDFLAGS']:\n-        env_flags += filter(None, os.environ.get(var, '').split(' '))\n-\n-    subprocess.run([*cc,source,'-o',executable] + env_flags + options, check=True)\n-    p = subprocess.run(['./contrib/devtools/security-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n-    return (p.returncode, p.stdout.rstrip())\n+    subprocess.check_call([cc,source,'-o',executable] + options)\n+    p = subprocess.Popen(['./security-check.py',executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n+    (stdout, stderr) = p.communicate()\n+    return (p.returncode, stdout.rstrip())\n \n class TestSecurityChecks(unittest.TestCase):\n     def test_ELF(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = determine_wellknown_cmd('CC', 'gcc')\n+        cc = 'gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-zexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n                 (1, executable+': failed PIE NX RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fno-stack-protector','-Wl,-znorelro','-no-pie','-fno-PIE']),\n                 (1, executable+': failed PIE RELRO Canary'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-no-pie','-fno-PIE']),\n                 (1, executable+': failed PIE RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-znorelro','-pie','-fPIE']),\n                 (1, executable+': failed RELRO'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,noseparate-code']),\n-                (1, executable+': failed separate_code'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE', '-Wl,-z,separate-code']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-znoexecstack','-fstack-protector-all','-Wl,-zrelro','-Wl,-z,now','-pie','-fPIE']),\n                 (0, ''))\n \n-        clean_files(source, executable)\n-\n     def test_PE(self):\n         source = 'test1.c'\n         executable = 'test1.exe'\n-        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n+        cc = 'x86_64-w64-mingw32-gcc'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA NX RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--disable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA RELOC_SECTION'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-no-pie','-fno-PIE']),\n-            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n-            (1, executable+': failed PIE DYNAMIC_BASE HIGH_ENTROPY_VA'))  # -pie -fPIE does nothing unless --dynamicbase is also supplied\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--no-high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--no-nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA NX'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--no-dynamicbase','-Wl,--no-high-entropy-va']),\n+            (1, executable+': failed DYNAMIC_BASE HIGH_ENTROPY_VA'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--no-high-entropy-va']),\n             (1, executable+': failed HIGH_ENTROPY_VA'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--enable-reloc-section','-Wl,--dynamicbase','-Wl,--high-entropy-va','-pie','-fPIE']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,--nxcompat','-Wl,--dynamicbase','-Wl,--high-entropy-va']),\n             (0, ''))\n \n-        clean_files(source, executable)\n-\n     def test_MACHO(self):\n         source = 'test1.c'\n         executable = 'test1'\n-        cc = determine_wellknown_cmd('CC', 'clang')\n+        cc = 'clang'\n         write_testcode(source)\n \n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fno-stack-protector']),\n-            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS Canary CONTROL_FLOW'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-Wl,-allow_stack_execute','-fstack-protector-all']),\n-            (1, executable+': failed PIE NOUNDEFS NX LAZY_BINDINGS CONTROL_FLOW'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace','-fstack-protector-all']),\n-            (1, executable+': failed PIE NOUNDEFS LAZY_BINDINGS CONTROL_FLOW'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-fstack-protector-all']),\n-            (1, executable+': failed PIE LAZY_BINDINGS CONTROL_FLOW'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-bind_at_load','-fstack-protector-all']),\n-            (1, executable+': failed PIE CONTROL_FLOW'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-bind_at_load','-fstack-protector-all', '-fcf-protection=full']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace', '-Wl,-allow_stack_execute']),\n+            (1, executable+': failed PIE NOUNDEFS NX'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie','-Wl,-flat_namespace']),\n+            (1, executable+': failed PIE NOUNDEFS'))\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-no_pie']),\n             (1, executable+': failed PIE'))\n-        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie','-Wl,-bind_at_load','-fstack-protector-all', '-fcf-protection=full']),\n+        self.assertEqual(call_security_check(cc, source, executable, ['-Wl,-pie']),\n             (0, ''))\n \n-        clean_files(source, executable)\n-\n if __name__ == '__main__':\n     unittest.main()\n+"
      },
      {
        "sha": "5246375fe317e8a65a6bfa44d5927fcd34c6e9a2",
        "filename": "contrib/devtools/test-symbol-check.py",
        "status": "removed",
        "additions": 0,
        "deletions": 204,
        "changes": 204,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/devtools/test-symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/devtools/test-symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test-symbol-check.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,204 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Test script for symbol-check.py\n-'''\n-import os\n-import subprocess\n-from typing import List\n-import unittest\n-\n-from utils import determine_wellknown_cmd\n-\n-def call_symbol_check(cc: List[str], source, executable, options):\n-    # This should behave the same as AC_TRY_LINK, so arrange well-known flags\n-    # in the same order as autoconf would.\n-    #\n-    # See the definitions for ac_link in autoconf's lib/autoconf/c.m4 file for\n-    # reference.\n-    env_flags: List[str] = []\n-    for var in ['CFLAGS', 'CPPFLAGS', 'LDFLAGS']:\n-        env_flags += filter(None, os.environ.get(var, '').split(' '))\n-\n-    subprocess.run([*cc,source,'-o',executable] + env_flags + options, check=True)\n-    p = subprocess.run(['./contrib/devtools/symbol-check.py',executable], stdout=subprocess.PIPE, universal_newlines=True)\n-    os.remove(source)\n-    os.remove(executable)\n-    return (p.returncode, p.stdout.rstrip())\n-\n-def get_machine(cc: List[str]):\n-    p = subprocess.run([*cc,'-dumpmachine'], stdout=subprocess.PIPE, universal_newlines=True)\n-    return p.stdout.rstrip()\n-\n-class TestSymbolChecks(unittest.TestCase):\n-    def test_ELF(self):\n-        source = 'test1.c'\n-        executable = 'test1'\n-        cc = determine_wellknown_cmd('CC', 'gcc')\n-\n-        # there's no way to do this test for RISC-V at the moment; we build for\n-        # RISC-V in a glibc 2.27 envinonment and we allow all symbols from 2.27.\n-        if 'riscv' in get_machine(cc):\n-            self.skipTest(\"test not available for RISC-V\")\n-\n-        # nextup was introduced in GLIBC 2.24, so is newer than our supported\n-        # glibc (2.17), and available in our release build environment (2.24).\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #define _GNU_SOURCE\n-                #include <math.h>\n-\n-                double nextup(double x);\n-\n-                int main()\n-                {\n-                    nextup(3.14);\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lm']),\n-                (1, executable + ': symbol nextup from unsupported version GLIBC_2.24(3)\\n' +\n-                    executable + ': failed IMPORTED_SYMBOLS'))\n-\n-        # -lutil is part of the libc6 package so a safe bet that it's installed\n-        # it's also out of context enough that it's unlikely to ever become a real dependency\n-        source = 'test2.c'\n-        executable = 'test2'\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <utmp.h>\n-\n-                int main()\n-                {\n-                    login(0);\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lutil']),\n-                (1, executable + ': libutil.so.1 is not in ALLOWED_LIBRARIES!\\n' +\n-                    executable + ': failed LIBRARY_DEPENDENCIES'))\n-\n-        # finally, check a simple conforming binary\n-        source = 'test3.c'\n-        executable = 'test3'\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <stdio.h>\n-\n-                int main()\n-                {\n-                    printf(\"42\");\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, []),\n-                (0, ''))\n-\n-    def test_MACHO(self):\n-        source = 'test1.c'\n-        executable = 'test1'\n-        cc = determine_wellknown_cmd('CC', 'clang')\n-\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <expat.h>\n-\n-                int main()\n-                {\n-                    XML_ExpatVersion();\n-                    return 0;\n-                }\n-\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lexpat', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n-            (1, 'libexpat.1.dylib is not in ALLOWED_LIBRARIES!\\n' +\n-                f'{executable}: failed DYNAMIC_LIBRARIES MIN_OS SDK'))\n-\n-        source = 'test2.c'\n-        executable = 'test2'\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <CoreGraphics/CoreGraphics.h>\n-\n-                int main()\n-                {\n-                    CGMainDisplayID();\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-framework', 'CoreGraphics', '-Wl,-platform_version','-Wl,macos', '-Wl,11.4', '-Wl,11.4']),\n-                (1, f'{executable}: failed MIN_OS SDK'))\n-\n-        source = 'test3.c'\n-        executable = 'test3'\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                int main()\n-                {\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,-platform_version','-Wl,macos', '-Wl,10.15', '-Wl,11.4']),\n-                (1, f'{executable}: failed SDK'))\n-\n-    def test_PE(self):\n-        source = 'test1.c'\n-        executable = 'test1.exe'\n-        cc = determine_wellknown_cmd('CC', 'x86_64-w64-mingw32-gcc')\n-\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <pdh.h>\n-\n-                int main()\n-                {\n-                    PdhConnectMachineA(NULL);\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lpdh', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n-            (1, 'pdh.dll is not in ALLOWED_LIBRARIES!\\n' +\n-                 executable + ': failed DYNAMIC_LIBRARIES'))\n-\n-        source = 'test2.c'\n-        executable = 'test2.exe'\n-\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                int main()\n-                {\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-Wl,--major-subsystem-version', '-Wl,9', '-Wl,--minor-subsystem-version', '-Wl,9']),\n-            (1, executable + ': failed SUBSYSTEM_VERSION'))\n-\n-        source = 'test3.c'\n-        executable = 'test3.exe'\n-        with open(source, 'w', encoding=\"utf8\") as f:\n-            f.write('''\n-                #include <windows.h>\n-\n-                int main()\n-                {\n-                    CoFreeUnusedLibrariesEx(0,0);\n-                    return 0;\n-                }\n-        ''')\n-\n-        self.assertEqual(call_symbol_check(cc, source, executable, ['-lole32', '-Wl,--major-subsystem-version', '-Wl,6', '-Wl,--minor-subsystem-version', '-Wl,1']),\n-                (0, ''))\n-\n-\n-if __name__ == '__main__':\n-    unittest.main()"
      },
      {
        "sha": "f5cd05a2c3a03453147d52f3cb4b8654fc7abc0a",
        "filename": "contrib/devtools/test_deterministic_coverage.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/test_deterministic_coverage.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/devtools/test_deterministic_coverage.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/test_deterministic_coverage.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env bash\n #\n-# Copyright (c) 2019-2020 The Bitcoin Core developers\n+# Copyright (c) 2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -16,6 +16,7 @@ GCOV_EXECUTABLE=\"gcov\"\n NON_DETERMINISTIC_TESTS=(\n     \"blockfilter_index_tests/blockfilter_index_initial_sync\"  # src/checkqueue.h: In CCheckQueue::Loop(): while (queue.empty()) { ... }\n     \"coinselector_tests/knapsack_solver_test\"                 # coinselector_tests.cpp: if (equal_sets(setCoinsRet, setCoinsRet2))\n+    \"denialofservice_tests/DoS_mapOrphans\"                    # denialofservice_tests.cpp: it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     \"fs_tests/fsbridge_fstream\"                               # deterministic test failure?\n     \"miner_tests/CreateNewBlock_validity\"                     # validation.cpp: if (GetMainSignals().CallbacksPending() > 10)\n     \"scheduler_tests/manythreads\"                             # scheduler.cpp: CScheduler::serviceQueue()"
      },
      {
        "sha": "68ad1c3aba1915fe44309f802a16e74be4f54e42",
        "filename": "contrib/devtools/utils.py",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/devtools/utils.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/devtools/utils.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/utils.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,22 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2021 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-'''\n-Common utility functions\n-'''\n-import shutil\n-import sys\n-import os\n-from typing import List\n-\n-\n-def determine_wellknown_cmd(envvar, progname) -> List[str]:\n-    maybe_env = os.getenv(envvar)\n-    maybe_which = shutil.which(progname)\n-    if maybe_env:\n-        return maybe_env.split(' ')  # Well-known vars are often meant to be word-split\n-    elif maybe_which:\n-        return [ maybe_which ]\n-    else:\n-        sys.exit(f\"{progname} not found\")"
      },
      {
        "sha": "75034616f7456f4e2d075138e05b7764010db032",
        "filename": "contrib/filter-lcov.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/filter-lcov.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/filter-lcov.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/filter-lcov.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2020 The Bitcoin Core developers\n+# Copyright (c) 2017-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "4a3df93cea3d273ee5fb42061a3a155b8b172b2a",
        "filename": "contrib/gitian-build.py",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-build.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-build.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-build.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,262 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+import argparse\n+import os\n+import subprocess\n+import sys\n+\n+def setup():\n+    global args, workdir\n+    programs = ['ruby', 'git', 'make', 'wget', 'curl']\n+    if args.kvm:\n+        programs += ['apt-cacher-ng', 'python-vm-builder', 'qemu-kvm', 'qemu-utils']\n+    elif args.docker and not os.path.isfile('/lib/systemd/system/docker.service'):\n+        dockers = ['docker.io', 'docker-ce']\n+        for i in dockers:\n+            return_code = subprocess.call(['sudo', 'apt-get', 'install', '-qq', i])\n+            if return_code == 0:\n+                break\n+        if return_code != 0:\n+            print('Cannot find any way to install Docker.', file=sys.stderr)\n+            sys.exit(1)\n+    else:\n+        programs += ['apt-cacher-ng', 'lxc', 'debootstrap']\n+    subprocess.check_call(['sudo', 'apt-get', 'install', '-qq'] + programs)\n+    if not os.path.isdir('gitian.sigs'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/gitian.sigs.git'])\n+    if not os.path.isdir('bitcoin-detached-sigs'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin-core/bitcoin-detached-sigs.git'])\n+    if not os.path.isdir('gitian-builder'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/devrandom/gitian-builder.git'])\n+    if not os.path.isdir('bitcoin'):\n+        subprocess.check_call(['git', 'clone', 'https://github.com/bitcoin/bitcoin.git'])\n+    os.chdir('gitian-builder')\n+    make_image_prog = ['bin/make-base-vm', '--suite', 'bionic', '--arch', 'amd64']\n+    if args.docker:\n+        make_image_prog += ['--docker']\n+    elif not args.kvm:\n+        make_image_prog += ['--lxc']\n+    subprocess.check_call(make_image_prog)\n+    os.chdir(workdir)\n+    if args.is_bionic and not args.kvm and not args.docker:\n+        subprocess.check_call(['sudo', 'sed', '-i', 's/lxcbr0/br0/', '/etc/default/lxc-net'])\n+        print('Reboot is required')\n+        sys.exit(0)\n+\n+def build():\n+    global args, workdir\n+\n+    os.makedirs('bitcoin-binaries/' + args.version, exist_ok=True)\n+    print('\\nBuilding Dependencies\\n')\n+    os.chdir('gitian-builder')\n+    os.makedirs('inputs', exist_ok=True)\n+\n+    subprocess.check_call(['wget', '-O', 'inputs/osslsigncode-2.0.tar.gz', 'https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz'])\n+    subprocess.check_call([\"echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\"], shell=True)\n+    subprocess.check_call(['make', '-C', '../bitcoin/depends', 'download', 'SOURCES_PATH=' + os.getcwd() + '/cache/common'])\n+\n+    if args.linux:\n+        print('\\nCompiling ' + args.version + ' Linux')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-linux', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.windows:\n+        print('\\nCompiling ' + args.version + ' Windows')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nCompiling ' + args.version + ' MacOS')\n+        subprocess.check_call(['bin/gbuild', '-j', args.jobs, '-m', args.memory, '--commit', 'bitcoin='+args.commit, '--url', 'bitcoin='+args.url, '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-unsigned', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/', shell=True)\n+        subprocess.check_call('mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg build/out/src/bitcoin-*.tar.gz ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Unsigned Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-linux/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-win-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-unsigned/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-m', 'Add '+args.version+' unsigned sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def sign():\n+    global args, workdir\n+    os.chdir('gitian-builder')\n+\n+    if args.windows:\n+        print('\\nSigning ' + args.version + ' Windows')\n+        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz', shell=True)\n+        subprocess.check_call(['bin/gbuild', '--skip-image', '--upgrade', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-win-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-*win64-setup.exe ../bitcoin-binaries/'+args.version, shell=True)\n+\n+    if args.macos:\n+        print('\\nSigning ' + args.version + ' MacOS')\n+        subprocess.check_call('cp inputs/bitcoin-' + args.version + '-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz', shell=True)\n+        subprocess.check_call(['bin/gbuild', '--skip-image', '--upgrade', '--commit', 'signature='+args.commit, '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call(['bin/gsign', '-p', args.sign_prog, '--signer', args.signer, '--release', args.version+'-osx-signed', '--destination', '../gitian.sigs/', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml'])\n+        subprocess.check_call('mv build/out/bitcoin-osx-signed.dmg ../bitcoin-binaries/'+args.version+'/bitcoin-'+args.version+'-osx.dmg', shell=True)\n+\n+    os.chdir(workdir)\n+\n+    if args.commit_files:\n+        print('\\nCommitting '+args.version+' Signed Sigs\\n')\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'add', args.version+'-win-signed/'+args.signer])\n+        subprocess.check_call(['git', 'add', args.version+'-osx-signed/'+args.signer])\n+        subprocess.check_call(['git', 'commit', '-a', '-m', 'Add '+args.version+' signed binary sigs for '+args.signer])\n+        os.chdir(workdir)\n+\n+def verify():\n+    global args, workdir\n+    rc = 0\n+    os.chdir('gitian-builder')\n+\n+    print('\\nVerifying v'+args.version+' Linux\\n')\n+    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-linux', '../bitcoin/contrib/gitian-descriptors/gitian-linux.yml']):\n+        print('Verifying v'+args.version+' Linux FAILED\\n')\n+        rc = 1\n+\n+    print('\\nVerifying v'+args.version+' Windows\\n')\n+    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-win.yml']):\n+        print('Verifying v'+args.version+' Windows FAILED\\n')\n+        rc = 1\n+\n+    print('\\nVerifying v'+args.version+' MacOS\\n')\n+    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-unsigned', '../bitcoin/contrib/gitian-descriptors/gitian-osx.yml']):\n+        print('Verifying v'+args.version+' MacOS FAILED\\n')\n+        rc = 1\n+\n+    print('\\nVerifying v'+args.version+' Signed Windows\\n')\n+    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-win-signed', '../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml']):\n+        print('Verifying v'+args.version+' Signed Windows FAILED\\n')\n+        rc = 1\n+\n+    print('\\nVerifying v'+args.version+' Signed MacOS\\n')\n+    if subprocess.call(['bin/gverify', '-v', '-d', '../gitian.sigs/', '-r', args.version+'-osx-signed', '../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml']):\n+        print('Verifying v'+args.version+' Signed MacOS FAILED\\n')\n+        rc = 1\n+\n+    os.chdir(workdir)\n+    return rc\n+\n+def main():\n+    global args, workdir\n+\n+    parser = argparse.ArgumentParser(description='Script for running full Gitian builds.')\n+    parser.add_argument('-c', '--commit', action='store_true', dest='commit', help='Indicate that the version argument is for a commit or branch')\n+    parser.add_argument('-p', '--pull', action='store_true', dest='pull', help='Indicate that the version argument is the number of a github repository pull request')\n+    parser.add_argument('-u', '--url', dest='url', default='https://github.com/bitcoin/bitcoin', help='Specify the URL of the repository. Default is %(default)s')\n+    parser.add_argument('-v', '--verify', action='store_true', dest='verify', help='Verify the Gitian build')\n+    parser.add_argument('-b', '--build', action='store_true', dest='build', help='Do a Gitian build')\n+    parser.add_argument('-s', '--sign', action='store_true', dest='sign', help='Make signed binaries for Windows and MacOS')\n+    parser.add_argument('-B', '--buildsign', action='store_true', dest='buildsign', help='Build both signed and unsigned binaries')\n+    parser.add_argument('-o', '--os', dest='os', default='lwm', help='Specify which Operating Systems the build is for. Default is %(default)s. l for Linux, w for Windows, m for MacOS')\n+    parser.add_argument('-j', '--jobs', dest='jobs', default='2', help='Number of processes to use. Default %(default)s')\n+    parser.add_argument('-m', '--memory', dest='memory', default='2000', help='Memory to allocate in MiB. Default %(default)s')\n+    parser.add_argument('-k', '--kvm', action='store_true', dest='kvm', help='Use KVM instead of LXC')\n+    parser.add_argument('-d', '--docker', action='store_true', dest='docker', help='Use Docker instead of LXC')\n+    parser.add_argument('-S', '--setup', action='store_true', dest='setup', help='Set up the Gitian building environment. Only works on Debian-based systems (Ubuntu, Debian)')\n+    parser.add_argument('-D', '--detach-sign', action='store_true', dest='detach_sign', help='Create the assert file for detached signing. Will not commit anything.')\n+    parser.add_argument('-n', '--no-commit', action='store_false', dest='commit_files', help='Do not commit anything to git')\n+    parser.add_argument('signer', nargs='?', help='GPG signer to sign each build assert file')\n+    parser.add_argument('version', nargs='?', help='Version number, commit, or branch to build. If building a commit or branch, the -c option must be specified')\n+\n+    args = parser.parse_args()\n+    workdir = os.getcwd()\n+\n+    args.is_bionic = b'bionic' in subprocess.check_output(['lsb_release', '-cs'])\n+\n+    if args.kvm and args.docker:\n+        raise Exception('Error: cannot have both kvm and docker')\n+\n+    # Ensure no more than one environment variable for gitian-builder (USE_LXC, USE_VBOX, USE_DOCKER) is set as they\n+    # can interfere (e.g., USE_LXC being set shadows USE_DOCKER; for details see gitian-builder/libexec/make-clean-vm).\n+    os.environ['USE_LXC'] = ''\n+    os.environ['USE_VBOX'] = ''\n+    os.environ['USE_DOCKER'] = ''\n+    if args.docker:\n+        os.environ['USE_DOCKER'] = '1'\n+    elif not args.kvm:\n+        os.environ['USE_LXC'] = '1'\n+        if 'GITIAN_HOST_IP' not in os.environ.keys():\n+            os.environ['GITIAN_HOST_IP'] = '10.0.3.1'\n+        if 'LXC_GUEST_IP' not in os.environ.keys():\n+            os.environ['LXC_GUEST_IP'] = '10.0.3.5'\n+\n+    if args.setup:\n+        setup()\n+\n+    if args.buildsign:\n+        args.build = True\n+        args.sign = True\n+\n+    if not args.build and not args.sign and not args.verify:\n+        sys.exit(0)\n+\n+    args.linux = 'l' in args.os\n+    args.windows = 'w' in args.os\n+    args.macos = 'm' in args.os\n+\n+    # Disable for MacOS if no SDK found\n+    if args.macos and not os.path.isfile('gitian-builder/inputs/MacOSX10.14.sdk.tar.gz'):\n+        print('Cannot build for MacOS, SDK does not exist. Will build for other OSes')\n+        args.macos = False\n+\n+    args.sign_prog = 'true' if args.detach_sign else 'gpg --detach-sign'\n+\n+    script_name = os.path.basename(sys.argv[0])\n+    if not args.signer:\n+        print(script_name+': Missing signer')\n+        print('Try '+script_name+' --help for more information')\n+        sys.exit(1)\n+    if not args.version:\n+        print(script_name+': Missing version')\n+        print('Try '+script_name+' --help for more information')\n+        sys.exit(1)\n+\n+    # Add leading 'v' for tags\n+    if args.commit and args.pull:\n+        raise Exception('Cannot have both commit and pull')\n+    args.commit = ('' if args.commit else 'v') + args.version\n+\n+    os.chdir('bitcoin')\n+    if args.pull:\n+        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n+        os.chdir('../gitian-builder/inputs/bitcoin')\n+        subprocess.check_call(['git', 'fetch', args.url, 'refs/pull/'+args.version+'/merge'])\n+        args.commit = subprocess.check_output(['git', 'show', '-s', '--format=%H', 'FETCH_HEAD'], universal_newlines=True, encoding='utf8').strip()\n+        args.version = 'pull-' + args.version\n+    print(args.commit)\n+    subprocess.check_call(['git', 'fetch'])\n+    subprocess.check_call(['git', 'checkout', args.commit])\n+    os.chdir(workdir)\n+\n+    os.chdir('gitian-builder')\n+    subprocess.check_call(['git', 'pull'])\n+    os.chdir(workdir)\n+\n+    if args.build:\n+        build()\n+\n+    if args.sign:\n+        sign()\n+\n+    if args.verify:\n+        os.chdir('gitian.sigs')\n+        subprocess.check_call(['git', 'pull'])\n+        os.chdir(workdir)\n+        sys.exit(verify())\n+\n+if __name__ == '__main__':\n+    main()"
      },
      {
        "sha": "80d201e257cdce39b4e027e2aa6c86c16dd480ef",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "added",
        "additions": 194,
        "deletions": 0,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,194 @@\n+---\n+name: \"bitcoin-staking-core-linux-0.20\"\n+enable_cache: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"curl\"\n+- \"g++-aarch64-linux-gnu\"\n+- \"g++-8-aarch64-linux-gnu\"\n+- \"gcc-8-aarch64-linux-gnu\"\n+- \"binutils-aarch64-linux-gnu\"\n+- \"g++-arm-linux-gnueabihf\"\n+- \"g++-8-arm-linux-gnueabihf\"\n+- \"gcc-8-arm-linux-gnueabihf\"\n+- \"binutils-arm-linux-gnueabihf\"\n+- \"g++-riscv64-linux-gnu\"\n+- \"g++-8-riscv64-linux-gnu\"\n+- \"gcc-8-riscv64-linux-gnu\"\n+- \"binutils-riscv64-linux-gnu\"\n+- \"g++-8-multilib\"\n+- \"gcc-8-multilib\"\n+- \"binutils-gold\"\n+- \"git\"\n+- \"pkg-config\"\n+- \"autoconf\"\n+- \"libtool\"\n+- \"automake\"\n+- \"faketime\"\n+- \"bsdmainutils\"\n+- \"ca-certificates\"\n+- \"python3\"\n+remotes:\n+- \"url\": \"https://github.com/BitcoinStaking/BitcoinS.git\"\n+  \"dir\": \"bitcoin-staking\"\n+files: []\n+script: |\n+  set -e -o pipefail\n+\n+  WRAP_DIR=$HOME/wrapped\n+  HOSTS=\"x86_64-linux-gnu i686-pc-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\"\n+  CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  FAKETIME_HOST_PROGS=\"gcc g++\"\n+  FAKETIME_PROGS=\"date ar ranlib nm\"\n+  HOST_CFLAGS=\"-O2 -g\"\n+  HOST_CXXFLAGS=\"-O2 -g\"\n+  HOST_LDFLAGS_BASE=\"-static-libstdc++\"\n+\n+  export QT_RCC_TEST=1\n+  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  mkdir -p ${WRAP_DIR}\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n+  fi\n+\n+  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n+  function create_global_faketime_wrappers {\n+  for prog in ${FAKETIME_PROGS}; do\n+    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n+    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n+    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    chmod +x ${WRAP_DIR}/${prog}\n+  done\n+  }\n+\n+  function create_per-host_faketime_wrappers {\n+  for i in $HOSTS; do\n+    for prog in ${FAKETIME_HOST_PROGS}; do\n+        if which ${i}-${prog}-8\n+        then\n+            echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n+            echo \"REAL=\\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+            echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n+            echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+            echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+            chmod +x ${WRAP_DIR}/${i}-${prog}\n+        fi\n+    done\n+  done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  EXTRA_INCLUDES_BASE=$WRAP_DIR/extra_includes\n+  mkdir -p $EXTRA_INCLUDES_BASE\n+\n+  # x86 needs /usr/include/i386-linux-gnu/asm pointed to /usr/include/x86_64-linux-gnu/asm,\n+  # but we can't write there. Instead, create a link here and force it to be included in the\n+  # search paths by wrapping gcc/g++.\n+\n+  mkdir -p $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\n+  rm -f $WRAP_DIR/extra_includes/i686-pc-linux-gnu/asm\n+  ln -s /usr/include/x86_64-linux-gnu/asm $EXTRA_INCLUDES_BASE/i686-pc-linux-gnu/asm\n+\n+  for prog in gcc g++; do\n+  rm -f ${WRAP_DIR}/${prog}\n+  cat << EOF > ${WRAP_DIR}/${prog}\n+  #!/usr/bin/env bash\n+  REAL=\"$(which -a ${prog}-8 | grep -v ${WRAP_DIR}/${prog} | head -1)\"\n+  for var in \"\\$@\"\n+  do\n+    if [ \"\\$var\" = \"-m32\" ]; then\n+      export C_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n+      export CPLUS_INCLUDE_PATH=\"$EXTRA_INCLUDES_BASE/i686-pc-linux-gnu\"\n+      break\n+    fi\n+  done\n+  \\$REAL \\$@\n+  EOF\n+  chmod +x ${WRAP_DIR}/${prog}\n+  done\n+\n+  cd bitcoin-staking\n+  BASEPREFIX=\"${PWD}/depends\"\n+  # Build dependencies for each host\n+  for i in $HOSTS; do\n+    EXTRA_INCLUDES=\"$EXTRA_INCLUDES_BASE/$i\"\n+    if [ -d \"$EXTRA_INCLUDES\" ]; then\n+      export HOST_ID_SALT=\"$EXTRA_INCLUDES\"\n+    fi\n+    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n+    unset HOST_ID_SALT\n+  done\n+\n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  # Create the release tarball using (arbitrarily) the first host\n+  ./autogen.sh\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n+  make dist\n+  SOURCEDIST=$(echo bitcoin-staking-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n+  ORIGPATH=\"$PATH\"\n+  # Extract the release tarball into a dir for each host and build\n+  for i in ${HOSTS}; do\n+    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n+    if [ \"${i}\" = \"riscv64-linux-gnu\" ]; then\n+      # Workaround for https://bugs.launchpad.net/ubuntu/+source/gcc-8-cross-ports/+bug/1853740\n+      # TODO: remove this when no longer needed\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE} -Wl,-z,noexecstack\"\n+    else\n+      HOST_LDFLAGS=\"${HOST_LDFLAGS_BASE}\"\n+    fi\n+    mkdir -p distsrc-${i}\n+    cd distsrc-${i}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n+    mkdir -p ${INSTALLPATH}\n+    tar --strip-components=1 -xf ../$SOURCEDIST\n+\n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\" LDFLAGS=\"${HOST_LDFLAGS}\"\n+    make ${MAKEOPTS}\n+    make ${MAKEOPTS} -C src check-security\n+    make ${MAKEOPTS} -C src check-symbols\n+    make install DESTDIR=${INSTALLPATH}\n+    cd installed\n+    find . -name \"lib*.la\" -delete\n+    find . -name \"lib*.a\" -delete\n+    rm -rf ${DISTNAME}/lib/pkgconfig\n+    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    cp ../../README.md ${DISTNAME}/\n+    find ${DISTNAME} -not -name \"*.dbg\" | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    find ${DISTNAME} -name \"*.dbg\" | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}-debug.tar.gz\n+    cd ../../\n+    rm -rf distsrc-${i}\n+  done\n+\n+  mkdir -p ${OUTDIR}/src\n+  git archive --prefix=\"${DISTNAME}/\" --output=${OUTDIR}/src/${DISTNAME}.tar.gz HEAD"
      },
      {
        "sha": "1bdf1c76bd159c17f86dcf4a511c0f38cb742722",
        "filename": "contrib/gitian-descriptors/gitian-osx-signer.yml",
        "status": "added",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-osx-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx-signer.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,40 @@\n+---\n+name: \"bitcoin-staking-dmg-signer\"\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"faketime\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin-staking-core/bitcoin-staking-detached-sigs.git\"\n+  \"dir\": \"signature\"\n+files:\n+- \"bitcoin-staking-osx-unsigned.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  WRAP_DIR=$HOME/wrapped\n+  mkdir -p ${WRAP_DIR}\n+  export PATH=\"$PWD\":$PATH\n+  FAKETIME_PROGS=\"dmg genisoimage\"\n+\n+  # Create global faketime wrappers\n+  for prog in ${FAKETIME_PROGS}; do\n+    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n+    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n+    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"${REFERENCE_DATETIME}\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    chmod +x ${WRAP_DIR}/${prog}\n+  done\n+\n+  UNSIGNED=bitcoin-staking-osx-unsigned.tar.gz\n+  SIGNED=bitcoin-staking-osx-signed.dmg\n+\n+  tar -xf ${UNSIGNED}\n+  OSX_VOLNAME=\"$(cat osx_volname)\"\n+  ./detached-sig-apply.sh ${UNSIGNED} signature/osx\n+  ${WRAP_DIR}/genisoimage -no-cache-inodes -D -l -probe -V \"${OSX_VOLNAME}\" -no-pad -r -dir-mode 0755 -apple -o uncompressed.dmg signed-app\n+  ${WRAP_DIR}/dmg dmg uncompressed.dmg ${OUTDIR}/${SIGNED}"
      },
      {
        "sha": "062f60235744b5af6ffd989afd47746195716618",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "added",
        "additions": 166,
        "deletions": 0,
        "changes": 166,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,166 @@\n+---\n+name: \"bitcoin-staking-core-osx-0.20\"\n+enable_cache: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"ca-certificates\"\n+- \"curl\"\n+- \"g++\"\n+- \"git\"\n+- \"pkg-config\"\n+- \"autoconf\"\n+- \"librsvg2-bin\"\n+- \"libtiff-tools\"\n+- \"libtool\"\n+- \"automake\"\n+- \"faketime\"\n+- \"bsdmainutils\"\n+- \"cmake\"\n+- \"imagemagick\"\n+- \"libcap-dev\"\n+- \"libz-dev\"\n+- \"libbz2-dev\"\n+- \"python3\"\n+- \"python3-dev\"\n+- \"python3-setuptools\"\n+- \"fonts-tuffy\"\n+remotes:\n+- \"url\": \"https://github.com/BitcoinStaking/BitcoinS.git\"\n+  \"dir\": \"bitcoin-staking\"\n+files:\n+- \"MacOSX10.14.sdk.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  WRAP_DIR=$HOME/wrapped\n+  HOSTS=\"x86_64-apple-darwin16\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests GENISOIMAGE=$WRAP_DIR/genisoimage\"\n+  FAKETIME_HOST_PROGS=\"\"\n+  FAKETIME_PROGS=\"ar ranlib date dmg genisoimage\"\n+\n+  export QT_RCC_TEST=1\n+  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  mkdir -p ${WRAP_DIR}\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n+  fi\n+\n+  export ZERO_AR_DATE=1\n+\n+  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n+  function create_global_faketime_wrappers {\n+  for prog in ${FAKETIME_PROGS}; do\n+    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n+    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n+    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    chmod +x ${WRAP_DIR}/${prog}\n+  done\n+  }\n+\n+  function create_per-host_faketime_wrappers {\n+  for i in $HOSTS; do\n+    for prog in ${FAKETIME_HOST_PROGS}; do\n+        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n+    done\n+  done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  cd bitcoin-staking\n+  BASEPREFIX=\"${PWD}/depends\"\n+\n+  mkdir -p ${BASEPREFIX}/SDKs\n+  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/MacOSX10.14.sdk.tar.gz\n+\n+  # Build dependencies for each host\n+  for i in $HOSTS; do\n+    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n+  done\n+\n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  # Create the release tarball using (arbitrarily) the first host\n+  ./autogen.sh\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n+  make dist\n+  SOURCEDIST=$(echo bitcoin-staking-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n+  ORIGPATH=\"$PATH\"\n+  # Extract the release tarball into a dir for each host and build\n+  for i in ${HOSTS}; do\n+    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n+    mkdir -p distsrc-${i}\n+    cd distsrc-${i}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n+    mkdir -p ${INSTALLPATH}\n+    tar --strip-components=1 -xf ../$SOURCEDIST\n+\n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}\n+    make ${MAKEOPTS}\n+    make ${MAKEOPTS} -C src check-security\n+    make ${MAKEOPTS} -C src check-symbols\n+    make install-strip DESTDIR=${INSTALLPATH}\n+\n+    make osx_volname\n+    make deploydir\n+    OSX_VOLNAME=\"$(cat osx_volname)\"\n+    mkdir -p unsigned-app-${i}\n+    cp osx_volname unsigned-app-${i}/\n+    cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}\n+    cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}\n+    cp ${BASEPREFIX}/${i}/native/bin/dmg ${BASEPREFIX}/${i}/native/bin/genisoimage unsigned-app-${i}\n+    cp ${BASEPREFIX}/${i}/native/bin/${i}-codesign_allocate unsigned-app-${i}/codesign_allocate\n+    cp ${BASEPREFIX}/${i}/native/bin/${i}-pagestuff unsigned-app-${i}/pagestuff\n+    mv dist unsigned-app-${i}\n+    pushd unsigned-app-${i}\n+    find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\n+    popd\n+\n+    make deploy\n+    ${WRAP_DIR}/dmg dmg \"${OSX_VOLNAME}.dmg\" ${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\n+\n+    cd installed\n+    find . -name \"lib*.la\" -delete\n+    find . -name \"lib*.a\" -delete\n+    rm -rf ${DISTNAME}/lib/pkgconfig\n+    find ${DISTNAME} | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz\n+    cd ../../\n+  done\n+\n+  mkdir -p ${OUTDIR}/src\n+  git archive --prefix=\"${DISTNAME}/\" --output=${OUTDIR}/src/${DISTNAME}.tar.gz HEAD\n+\n+  mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-osx64.tar.gz"
      },
      {
        "sha": "a5f9d58160891fe7b4051af9c505086af158a625",
        "filename": "contrib/gitian-descriptors/gitian-win-signer.yml",
        "status": "added",
        "additions": 42,
        "deletions": 0,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-win-signer.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-win-signer.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win-signer.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,42 @@\n+---\n+name: \"bitcoin-staking-win-signer\"\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"libssl-dev\"\n+- \"autoconf\"\n+- \"automake\"\n+- \"libtool\"\n+- \"pkg-config\"\n+remotes:\n+- \"url\": \"https://github.com/bitcoin-staking-core/bitcoin-staking-detached-sigs.git\"\n+  \"dir\": \"signature\"\n+files:\n+- \"osslsigncode-2.0.tar.gz\"\n+- \"bitcoin-staking-win-unsigned.tar.gz\"\n+script: |\n+  set -e -o pipefail\n+\n+  BUILD_DIR=\"$PWD\"\n+  SIGDIR=${BUILD_DIR}/signature/win\n+  UNSIGNED_DIR=${BUILD_DIR}/unsigned\n+\n+  echo \"5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f  osslsigncode-2.0.tar.gz\" | sha256sum -c\n+\n+  mkdir -p ${UNSIGNED_DIR}\n+  tar -C ${UNSIGNED_DIR} -xf bitcoin-staking-win-unsigned.tar.gz\n+\n+  tar xf osslsigncode-2.0.tar.gz\n+  cd osslsigncode-2.0\n+\n+  ./autogen.sh\n+  ./configure --without-gsf --without-curl --disable-dependency-tracking\n+  make\n+  find ${UNSIGNED_DIR} -name \"*-unsigned.exe\" | while read i; do\n+    INFILE=\"$(basename \"${i}\")\"\n+    OUTFILE=\"${INFILE/-unsigned}\"\n+    ./osslsigncode attach-signature -in \"${i}\" -out \"${OUTDIR}/${OUTFILE}\" -sigin \"${SIGDIR}/${INFILE}.pem\"\n+  done"
      },
      {
        "sha": "986497e98b333b43e1bbdad98b2a385198cdd93a",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "added",
        "additions": 174,
        "deletions": 0,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,174 @@\n+---\n+name: \"bitcoin-staking-core-win-0.20\"\n+enable_cache: true\n+distro: \"ubuntu\"\n+suites:\n+- \"bionic\"\n+architectures:\n+- \"amd64\"\n+packages:\n+- \"curl\"\n+- \"g++\"\n+- \"git\"\n+- \"pkg-config\"\n+- \"autoconf\"\n+- \"libtool\"\n+- \"automake\"\n+- \"faketime\"\n+- \"bsdmainutils\"\n+- \"mingw-w64\"\n+- \"g++-mingw-w64\"\n+- \"nsis\"\n+- \"zip\"\n+- \"ca-certificates\"\n+- \"python3\"\n+remotes:\n+- \"url\": \"https://github.com/BitcoinStaking/BitcoinS.git\"\n+  \"dir\": \"bitcoin-staking\"\n+files: []\n+script: |\n+  set -e -o pipefail\n+\n+  WRAP_DIR=$HOME/wrapped\n+  HOSTS=\"x86_64-w64-mingw32 i686-w64-mingw32\"\n+  CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests\"\n+  FAKETIME_HOST_PROGS=\"ar ranlib nm windres strip objcopy\"\n+  FAKETIME_PROGS=\"date makensis zip\"\n+  HOST_CFLAGS=\"-O2 -g -fno-ident\"\n+  HOST_CXXFLAGS=\"-O2 -g -fno-ident\"\n+\n+  export QT_RCC_TEST=1\n+  export QT_RCC_SOURCE_DATE_OVERRIDE=1\n+  export TZ=\"UTC\"\n+  export BUILD_DIR=\"$PWD\"\n+  mkdir -p ${WRAP_DIR}\n+  if test -n \"$GBUILD_CACHE_ENABLED\"; then\n+    export SOURCES_PATH=${GBUILD_COMMON_CACHE}\n+    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}\n+    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}\n+  fi\n+\n+  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)\n+  function create_global_faketime_wrappers {\n+  for prog in ${FAKETIME_PROGS}; do\n+    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}\n+    echo \"REAL=\\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\\`\" >> ${WRAP_DIR}/${prog}\n+    echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${prog}\n+    echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${prog}\n+    echo \"\\$REAL \\$@\" >> $WRAP_DIR/${prog}\n+    chmod +x ${WRAP_DIR}/${prog}\n+  done\n+  }\n+\n+  function create_per-host_faketime_wrappers {\n+  for i in $HOSTS; do\n+    for prog in ${FAKETIME_HOST_PROGS}; do\n+        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n+    done\n+  done\n+  }\n+\n+  function create_per-host_compiler_wrapper {\n+  # -posix variant is required for c++11 threading.\n+  for i in $HOSTS; do\n+    mkdir -p ${WRAP_DIR}/${i}\n+    for prog in gcc g++; do\n+        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}\n+        echo \"REAL=\\`which -a ${i}-${prog}-posix | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\\`\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export LD_PRELOAD='/usr/\\$LIB/faketime/libfaketime.so.1'\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export FAKETIME=\\\"$1\\\"\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"export COMPILER_PATH=${WRAP_DIR}/${i}\" >> ${WRAP_DIR}/${i}-${prog}\n+        echo \"\\$REAL \\$@\" >> $WRAP_DIR/${i}-${prog}\n+        chmod +x ${WRAP_DIR}/${i}-${prog}\n+    done\n+  done\n+  }\n+\n+  # Faketime for depends so intermediate results are comparable\n+  export PATH_orig=${PATH}\n+  create_global_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_faketime_wrappers \"2000-01-01 12:00:00\"\n+  create_per-host_compiler_wrapper \"2000-01-01 12:00:00\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  cd bitcoin-staking\n+  BASEPREFIX=\"${PWD}/depends\"\n+  # Build dependencies for each host\n+  for i in $HOSTS; do\n+    make ${MAKEOPTS} -C ${BASEPREFIX} HOST=\"${i}\"\n+  done\n+\n+  # Faketime for binaries\n+  export PATH=${PATH_orig}\n+  create_global_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_faketime_wrappers \"${REFERENCE_DATETIME}\"\n+  create_per-host_compiler_wrapper \"${REFERENCE_DATETIME}\"\n+  export PATH=${WRAP_DIR}:${PATH}\n+\n+  # Create the release tarball using (arbitrarily) the first host\n+  ./autogen.sh\n+  CONFIG_SITE=${BASEPREFIX}/$(echo \"${HOSTS}\" | awk '{print $1;}')/share/config.site ./configure --prefix=/\n+  make dist\n+  SOURCEDIST=$(echo bitcoin-staking-*.tar.gz)\n+  DISTNAME=${SOURCEDIST/%.tar.gz}\n+\n+  # Workaround for tarball not building with the bare tag version (prep)\n+  make -C src obj/build.h\n+\n+  ORIGPATH=\"$PATH\"\n+  # Extract the release tarball into a dir for each host and build\n+  for i in ${HOSTS}; do\n+    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}\n+    mkdir -p distsrc-${i}\n+    cd distsrc-${i}\n+    INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n+    mkdir -p ${INSTALLPATH}\n+    tar --strip-components=1 -xf ../$SOURCEDIST\n+\n+    # Workaround for tarball not building with the bare tag version\n+    echo '#!/bin/true' >share/genbuild.sh\n+    mkdir src/obj\n+    cp ../src/obj/build.h src/obj/\n+\n+    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS} CFLAGS=\"${HOST_CFLAGS}\" CXXFLAGS=\"${HOST_CXXFLAGS}\"\n+    make ${MAKEOPTS}\n+    make ${MAKEOPTS} -C src check-security\n+    make ${MAKEOPTS} -C src check-symbols\n+    make deploy\n+    make install DESTDIR=${INSTALLPATH}\n+\n+    cp -f bitcoin-staking-*setup*.exe $OUTDIR/\n+    \n+    cd installed\n+    mv ${DISTNAME}/bin/*.dll ${DISTNAME}/lib/\n+    find . -name \"lib*.la\" -delete\n+    find . -name \"lib*.a\" -delete\n+    rm -rf ${DISTNAME}/lib/pkgconfig\n+    find ${DISTNAME}/bin -type f -executable -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    find ${DISTNAME}/lib -type f -print0 | xargs -0 -n1 -I{} ../contrib/devtools/split-debug.sh {} {} {}.dbg\n+    cp ../doc/README_windows.txt ${DISTNAME}/readme.txt\n+    find ${DISTNAME} -not -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}.zip\n+    find ${DISTNAME} -name \"*.dbg\"  -type f | sort | zip -X@ ${OUTDIR}/${DISTNAME}-${i}-debug.zip\n+    cd ../../\n+    rm -rf distsrc-${i}\n+  done\n+\n+  mkdir -p ${OUTDIR}/src\n+  git archive --prefix=\"${DISTNAME}/\" --output=${OUTDIR}/src/${DISTNAME}.tar.gz HEAD\n+\n+  cp -rf contrib/windeploy $BUILD_DIR\n+  cd $BUILD_DIR/windeploy\n+  mkdir unsigned\n+  cp $OUTDIR/bitcoin-staking-*setup-unsigned.exe unsigned/\n+  find . | sort | tar --mtime=\"$REFERENCE_DATETIME\" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\n+  mv ${OUTDIR}/${DISTNAME}-x86_64-*-debug.zip ${OUTDIR}/${DISTNAME}-win64-debug.zip\n+  mv ${OUTDIR}/${DISTNAME}-i686-*-debug.zip ${OUTDIR}/${DISTNAME}-win32-debug.zip\n+  mv ${OUTDIR}/${DISTNAME}-x86_64-*.zip ${OUTDIR}/${DISTNAME}-win64.zip\n+  mv ${OUTDIR}/${DISTNAME}-i686-*.zip ${OUTDIR}/${DISTNAME}-win32.zip\n+  \n+  \n\\ No newline at end of file"
      },
      {
        "sha": "ffe4fb144b1ae07c7c9bbdcdaea2694978eb18b2",
        "filename": "contrib/gitian-keys/README.md",
        "status": "renamed",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-keys/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-keys/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,10 +1,10 @@\n-## PGP keys of builders and Developers\n+## PGP keys of Gitian builders and Developers\n \n-The file `keys.txt` contains fingerprints of the public keys of builders and\n-active developers.\n+The file `keys.txt` contains fingerprints of the public keys of Gitian builders\n+and active developers.\n \n The associated keys are mainly used to sign git commits or the build results\n-of Guix builds.\n+of Gitian builds.\n \n The most recent version of each pgp key can be found on most pgp key servers.\n \n@@ -16,12 +16,12 @@ To fetch the latest version of all pgp keys in your gpg homedir,\n gpg --refresh-keys\n ```\n \n-To fetch keys of builders and active developers, feed the list of fingerprints\n-of the primary keys into gpg:\n+To fetch keys of Gitian builders and active developers, feed the list of\n+fingerprints of the primary keys into gpg:\n \n ```sh\n-while read fingerprint keyholder_name; do gpg --keyserver hkps://keys.openpgp.org --recv-keys ${fingerprint}; done < ./keys.txt\n+while read fingerprint keyholder_name; do gpg --keyserver hkp://subset.pool.sks-keyservers.net --recv-keys ${fingerprint}; done < ./keys.txt\n ```\n \n-Add your key to the list if you provided Guix attestations for two major or\n+Add your key to the list if you provided Gitian signatures for two major or\n minor releases of Bitcoin Core.",
        "previous_filename": "contrib/builder-keys/README.md"
      },
      {
        "sha": "ba3036a89f77e465d287a98137c5e6cb1cef2f89",
        "filename": "contrib/gitian-keys/keys.txt",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-keys/keys.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/gitian-keys/keys.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-keys/keys.txt?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,34 @@\n+9D3CC86A72F8494342EA5FD10A41BDC3F4FAFF1C Aaron Clauson (sipsorcery)\n+617C90010B3BD370B0AC7D424BB42E31C79111B8 Akira Takizawa\n+E944AE667CF960B1004BC32FCA662BE18B877A60 Andreas Schildbach\n+152812300785C96444D3334D17565732E08E5E41 Andrew Chow\n+912FD3228387123DC97E0E57D5566241A0295FA9 BtcDrak\n+C519EBCF3B926298946783EFF6430754120EC2F4 Christian Decker (cdecker)\n+F20F56EF6A067F70E8A5C99FFF95FAA971697405 centaur\n+C060A6635913D98A3587D7DB1C2491FFEB0EF770 Cory Fields\n+BF6273FAEF7CC0BA1F562E50989F6B3048A116B5 Dev Random\n+6D3170C1DC2C6FD0AEEBCA6743811D1A26623924 Douglas Roark\n+9A1689B60D1B3CCE9262307A2F40A9BF167FBA47 Erik Mossberg (erkmos)\n+D35176BE9264832E4ACA8986BF0792FBE95DC863 fivepiece\n+01CDF4627A3B88AAE4A571C87588242FBE38D3A8 Gavin Andresen\n+D1DBF2C4B96F2DEBF4C16654410108112E7EA81F Hennadii Stepanov (hebasto)\n+D3CC177286005BB8FF673294C5242A1AB3936517 jl2012\n+32EE5C4C3FA15CCADB46ABE529D4BCB6416F53EC Jonas Schnelli\n+4B4E840451149DD7FB0D633477DFAB5C3108B9A8 Jorge Timon\n+C42AFF7C61B3E44A1454CD3557AF762DB3353322 Karl-Johan Alm (kallewoof)\n+E463A93F5F3117EEDE6C7316BD02942421F4889F Luke Dashjr\n+B8B3F1C0E58C15DB6A81D30C3648A882F4316B9B Marco Falke\n+07DF3E57A548CCFB7530709189BBB8663E2E65CE Matt Corallo (BlueMatt)\n+CA03882CB1FC067B5D3ACFE4D300116E1C875A3D MeshCollider\n+E777299FC265DD04793070EB944D35F9AC3DB76A Michael Ford\n+9692B91BBF0E8D34DFD33B1882C5C009628ECF0C Michagogo\n+77E72E69DA7EE0A148C06B21B34821D4944DE5F7 Nils Schneider\n+D62A803E27E7F43486035ADBBCD04D8E9CCCAC2A Paul Rabahy\n+37EC7D7B0A217CDB4B4E007E7FAB114267E4FA04 Peter Todd\n+D762373D24904A3E42F33B08B9A408E71DAAC974 Pieter Wuille (Location: Leuven, Belgium)\n+133EAC179436F14A5CF1B794860FEB804E669320 Pieter Wuille\n+A8FC55F3B04BA3146F3492E79303B33A305224CB Sebastian Kung (TheCharlatan)\n+ED9BDF7AD6A55E232E84524257FF9BDBCC301009 Sjors Provoost\n+AEC1884398647C47413C1C3FB1179EB7347DC10D Warren Togami\n+79D00BAC68B56D422F945A8F8E3A8F3247DBCBBF Willy Ko\n+71A3B16735405025D447E8F274810B012346C9A6 Wladimir J. van der Laan"
      },
      {
        "sha": "68aae18731d04d84193437838796fff649325020",
        "filename": "contrib/guix/INSTALL.md",
        "status": "removed",
        "additions": 0,
        "deletions": 801,
        "changes": 801,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/INSTALL.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/INSTALL.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/INSTALL.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,801 +0,0 @@\n-# Guix Installation and Setup\n-\n-This only needs to be done once per machine. If you have already completed the\n-installation and setup, please proceed to [perform a build](./README.md).\n-\n-Otherwise, you may choose from one of the following options to install Guix:\n-\n-1. Using the official **shell installer script** [\u2913 skip to section][install-script]\n-   - Maintained by Guix developers\n-   - Easiest (automatically performs *most* setup)\n-   - Works on nearly all Linux distributions\n-   - Only installs latest release\n-   - Binary installation only, requires high level of trust\n-   - Note: The script needs to be run as root, so it should be inspected before it's run\n-2. Using the official **binary tarball** [\u2913 skip to section][install-bin-tarball]\n-   - Maintained by Guix developers\n-   - Normal difficulty (full manual setup required)\n-   - Works on nearly all Linux distributions\n-   - Installs any release\n-   - Binary installation only, requires high level of trust\n-3. Using fanquake's **Docker image** [\u2197\ufe0e external instructions][install-fanquake-docker]\n-   - Maintained by fanquake\n-   - Easy (automatically performs *some* setup)\n-   - Works wherever Docker images work\n-   - Installs any release\n-   - Binary installation only, requires high level of trust\n-4. Using a **distribution-maintained package** [\u2913 skip to section][install-distro-pkg]\n-   - Maintained by distribution's Guix package maintainer\n-   - Normal difficulty (manual setup required)\n-   - Works only on distributions with Guix packaged, see: https://repology.org/project/guix/versions\n-   - Installs a release decided on by package maintainer\n-   - Source or binary installation depending on the distribution\n-5. Building **from source** [\u2913 skip to section][install-source]\n-   - Maintained by you\n-   - Hard, but rewarding\n-   - Can be made to work on most Linux distributions\n-   - Installs any commit (more granular)\n-   - Source installation, requires lower level of trust\n-\n-## Options 1 and 2: Using the official shell installer script or binary tarball\n-\n-The installation instructions for both the official shell installer script and\n-the binary tarballs can be found in the GNU Guix Manual's [Binary Installation\n-section](https://guix.gnu.org/manual/en/html_node/Binary-Installation.html).\n-\n-Note that running through the binary tarball installation steps is largely\n-equivalent to manually performing what the shell installer script does.\n-\n-Note that at the time of writing (July 5th, 2021), the shell installer script\n-automatically creates an `/etc/profile.d` entry which the binary tarball\n-installation instructions do not ask you to create. However, you will likely\n-need this entry for better desktop integration. Please see [this\n-section](#add-an-etcprofiled-entry) for instructions on how to add a\n-`/etc/profile.d/guix.sh` entry.\n-\n-Regardless of which installation option you chose, the changes to\n-`/etc/profile.d` will not take effect until the next shell or desktop session,\n-so you should log out and log back in.\n-\n-## Option 3: Using fanquake's Docker image\n-\n-Please refer to fanquake's instructions\n-[here](https://github.com/fanquake/core-review/tree/master/guix).\n-\n-Note that the `Dockerfile` is largely equivalent to running through the binary\n-tarball installation steps.\n-\n-## Option 4: Using a distribution-maintained package\n-\n-Note that this section is based on the distro packaging situation at the time of\n-writing (July 2021). Guix is expected to be more widely packaged over time. For\n-an up-to-date view on Guix's package status/version across distros, please see:\n-https://repology.org/project/guix/versions\n-\n-### Debian 11 (Bullseye)/Ubuntu 21.04 (Hirsute Hippo)\n-\n-Guix v1.2.0 is available as a distribution package starting in [Debian\n-11](https://packages.debian.org/bullseye/guix) and [Ubuntu\n-21.04](https://packages.ubuntu.com/hirsute/guix).\n-\n-Note that if you intend on using Guix without using any substitutes (more\n-details [here][security-model]), v1.2.0 has a known problem when building GnuTLS\n-from source. Solutions and workarounds are documented\n-[here](#gnutls-test-suite-fail-status-request-revoked).\n-\n-\n-To install:\n-```sh\n-sudo apt install guix\n-```\n-\n-For up-to-date information on Debian and Ubuntu's release history:\n-- [Debian release history](https://www.debian.org/releases/)\n-- [Ubuntu release history](https://ubuntu.com/about/release-cycle)\n-\n-### Arch Linux\n-\n-Guix is available in the AUR as\n-[`guix`](https://aur.archlinux.org/packages/guix/), please follow the\n-installation instructions in the Arch Linux Wiki ([live\n-link](https://wiki.archlinux.org/index.php/Guix#AUR_Package_Installation),\n-[2021/03/30\n-permalink](https://wiki.archlinux.org/index.php?title=Guix&oldid=637559#AUR_Package_Installation))\n-to install Guix.\n-\n-At the time of writing (2021/03/30), the `check` phase will fail if the path to\n-guix's build directory is longer than 36 characters due to an anachronistic\n-character limit on the shebang line. Since the `check` phase happens after the\n-`build` phase, which may take quite a long time, it is recommended that users\n-either:\n-\n-1. Skip the `check` phase\n-    - For `makepkg`: `makepkg --nocheck ...`\n-    - For `yay`: `yay --mflags=\"--nocheck\" ...`\n-    - For `paru`: `paru --nocheck ...`\n-2. Or, check their build directory's length beforehand\n-    - For those building with `makepkg`: `pwd | wc -c`\n-\n-## Option 5: Building from source\n-\n-Building Guix from source is a rather involved process but a rewarding one for\n-those looking to minimize trust and maximize customizability (e.g. building a\n-particular commit of Guix). Previous experience with using autotools-style build\n-systems to build packages from source will be helpful. *hic sunt dracones.*\n-\n-I strongly urge you to at least skim through the entire section once before you\n-start issuing commands, as it will save you a lot of unnecessary pain and\n-anguish.\n-\n-### Installing common build tools\n-\n-There are a few basic build tools that are required for most things we'll build,\n-so let's install them now:\n-\n-Text transformation/i18n:\n-- `autopoint` (sometimes packaged in `gettext`)\n-- `help2man`\n-- `po4a`\n-- `texinfo`\n-\n-Build system tools:\n-- `g++` w/ C++11 support\n-- `libtool`\n-- `autoconf`\n-- `automake`\n-- `pkg-config` (sometimes packaged as `pkgconf`)\n-- `make`\n-- `cmake`\n-\n-Miscellaneous:\n-- `git`\n-- `gnupg`\n-- `python3`\n-\n-### Building and Installing Guix's dependencies\n-\n-In order to build Guix itself from source, we need to first make sure that the\n-necessary dependencies are installed and discoverable. The most up-to-date list\n-of Guix's dependencies is kept in the [\"Requirements\"\n-section](https://guix.gnu.org/manual/en/html_node/Requirements.html) of the Guix\n-Reference Manual.\n-\n-Depending on your distribution, most or all of these dependencies may already be\n-packaged and installable without manually building and installing.\n-\n-For reference, the graphic below outlines Guix v1.3.0's dependency graph:\n-\n-![bootstrap map](https://user-images.githubusercontent.com/6399679/125064185-a9a59880-e0b0-11eb-82c1-9b8e5dc9950d.png)\n-\n-#### Guile\n-\n-##### Choosing a Guile version and sticking to it\n-\n-One of the first things you need to decide is which Guile version you want to\n-use: Guile v2.2 or Guile v3.0. Unlike the python2 to python3 transition, Guile\n-v2.2 and Guile v3.0 are largely compatible, as evidenced by the fact that most\n-Guile packages and even [Guix\n-itself](https://guix.gnu.org/en/blog/2020/guile-3-and-guix/) support running on\n-both.\n-\n-What is important here is that you **choose one**, and you **remain consistent**\n-with your choice throughout **all Guile-related packages**, no matter if they\n-are installed via the distribution's package manager or installed from source.\n-This is because the files for Guile packages are installed to directories which\n-are separated based on the Guile version.\n-\n-###### Example: Checking that Ubuntu's `guile-git` is compatible with your chosen Guile version\n-\n-On Ubuntu Focal:\n-\n-```sh\n-$ apt show guile-git\n-Package: guile-git\n-...\n-Depends: guile-2.2, guile-bytestructures, libgit2-dev\n-...\n-```\n-\n-As you can see, the package `guile-git` depends on `guile-2.2`, meaning that it\n-was likely built for Guile v2.2. This means that if you decided to use Guile\n-v3.0 on Ubuntu Focal, you would need to build guile-git from source instead of\n-using the distribution package.\n-\n-On Ubuntu Hirsute:\n-\n-```sh\n-$ apt show guile-git\n-Package: guile-git\n-...\n-Depends: guile-3.0 | guile-2.2, guile-bytestructures (>= 1.0.7-3~), libgit2-dev (>= 1.0)\n-...\n-```\n-\n-In this case, `guile-git` depends on either `guile-3.0` or `guile-2.2`, meaning\n-that it would work no matter what Guile version you decided to use.\n-\n-###### Corner case: Multiple versions of Guile on one system\n-\n-It is recommended to only install one version of Guile, so that build systems do\n-not get confused about which Guile to use.\n-\n-However, if you insist on having both Guile v2.2 and Guile v3.0 installed on\n-your system, then you need to **consistently** specify one of\n-`GUILE_EFFECTIVE_VERSION=3.0` or `GUILE_EFFECTIVE_VERSION=2.2` to all\n-`./configure` invocations for Guix and its dependencies.\n-\n-##### Installing Guile\n-\n-Guile is most likely already packaged for your distribution, so after you have\n-[chosen a Guile version](#choosing-a-guile-version-and-sticking-to-it), install\n-it via your distribution's package manager.\n-\n-If your distribution splits packages into `-dev`-suffixed and\n-non-`-dev`-suffixed sub-packages (as is the case for Debian-derived\n-distributions), please make sure to install both. For example, to install Guile\n-v2.2 on Debian/Ubuntu:\n-\n-```sh\n-apt install guile-2.2 guile-2.2-dev\n-```\n-\n-#### Mixing distribution packages and source-built packages\n-\n-At the time of writing, most distributions have _some_ of Guix's dependencies\n-packaged, but not all. This means that you may want to install the distribution\n-package for some dependencies, and manually build-from-source for others.\n-\n-Distribution packages usually install to `/usr`, which is different from the\n-default `./configure` prefix of source-built packages: `/usr/local`.\n-\n-This means that if you mix-and-match distribution packages and source-built\n-packages and do not specify exactly `--prefix=/usr` to `./configure` for\n-source-built packages, you will need to augment the `GUILE_LOAD_PATH` and\n-`GUILE_LOAD_COMPILED_PATH` environment variables so that Guile will look\n-under the right prefix and find your source-built packages.\n-\n-For example, if you are using Guile v2.2, and have Guile packages in the\n-`/usr/local` prefix, either add the following lines to your `.profile` or\n-`.bash_profile` so that the environment variable is properly set for all future\n-shell logins, or paste the lines into a POSIX-style shell to temporarily modify\n-the environment variables of your current shell session.\n-\n-```sh\n-# Help Guile v2.2.x find packages in /usr/local\n-export GUILE_LOAD_PATH=\"/usr/local/share/guile/site/2.2${GUILE_LOAD_PATH:+:}$GUILE_LOAD_PATH\"\n-export GUILE_LOAD_COMPILED_PATH=\"/usr/local/lib/guile/2.2/site-ccache${GUILE_LOAD_COMPILED_PATH:+:}$GUILE_COMPILED_LOAD_PATH\"\n-```\n-\n-Note that these environment variables are used to check for packages during\n-`./configure`, so they should be set as soon as possible should you want to use\n-a prefix other than `/usr`.\n-\n-#### Building and installing source-built packages\n-\n-***IMPORTANT**: A few dependencies have non-obvious quirks/errata which are\n-documented in the sub-sections immediately below. Please read these sections\n-before proceeding to build and install these packages.*\n-\n-Although you should always refer to the README or INSTALL files for the most\n-accurate information, most of these dependencies use autoconf-style build\n-systems (check if there's a `configure.ac` file), and will likely do the right\n-thing with the following:\n-\n-Clone the repository and check out the latest release:\n-```sh\n-git clone <git-repo-of-dependency>/<dependency>.git\n-cd <dependency>\n-git tag -l  # check for the latest release\n-git checkout <latest-release>\n-```\n-\n-For autoconf-based build systems (if `./autogen.sh` or `configure.ac` exists at\n-the root of the repository):\n-\n-```sh\n-./autogen.sh || autoreconf -vfi\n-./configure --prefix=<prefix>\n-make\n-sudo make install\n-```\n-\n-For CMake-based build systems (if `CMakeLists.txt` exists at the root of the\n-repository):\n-\n-```sh\n-mkdir build && cd build\n-cmake .. -DCMAKE_INSTALL_PREFIX=<prefix>\n-sudo cmake --build . --target install\n-```\n-\n-If you choose not to specify exactly `--prefix=/usr` to `./configure`, please\n-make sure you've carefully read the [previous section] on mixing distribution\n-packages and source-built packages.\n-\n-##### Binding packages require `-dev`-suffixed packages\n-\n-Relevant for:\n-- Everyone\n-\n-When building bindings, the `-dev`-suffixed version of the original package\n-needs to be installed. For example, building `Guile-zlib` on Debian-derived\n-distributions requires that `zlib1g-dev` is installed.\n-\n-When using bindings, the `-dev`-suffixed version of the original package still\n-needs to be installed. This is particularly problematic when distribution\n-packages are mispackaged like `guile-sqlite3` is in Ubuntu Focal such that\n-installing `guile-sqlite3` does not automatically install `libsqlite3-dev` as a\n-dependency.\n-\n-Below is a list of relevant Guile bindings and their corresponding `-dev`\n-packages in Debian at the time of writing.\n-\n-| Guile binding package | -dev Debian package |\n-|-----------------------|---------------------|\n-| guile-gcrypt          | libgcrypt-dev       |\n-| guile-git             | libgit2-dev         |\n-| guile-lzlib           | liblz-dev           |\n-| guile-ssh             | libssh-dev          |\n-| guile-sqlite3         | libsqlite3-dev      |\n-| guile-zlib            | zlib1g-dev          |\n-\n-##### `guile-git` actually depends on `libgit2 >= 1.1`\n-\n-Relevant for:\n-- Those building `guile-git` from source against `libgit2 < 1.1`\n-- Those installing `guile-git` from their distribution where `guile-git` is\n-  built against `libgit2 < 1.1`\n-\n-As of v0.4.0, `guile-git` claims to only require `libgit2 >= 0.28.0`, however,\n-it actually requires `libgit2 >= 1.1`, otherwise, it will be confused by a\n-reference of `origin/keyring`: instead of interpreting the reference as \"the\n-'keyring' branch of the 'origin' remote\", the reference is interpreted as \"the\n-branch literally named 'origin/keyring'\"\n-\n-This is especially notable because Ubuntu Focal packages `libgit2 v0.28.4`, and\n-`guile-git` is built against it.\n-\n-Should you be in this situation, you need to build both `libgit2 v1.1.x` and\n-`guile-git` from source.\n-\n-Source: https://logs.guix.gnu.org/guix/2020-11-12.log#232527\n-\n-##### `{scheme,guile}-bytestructures` v1.0.8 and v1.0.9 are broken for Guile v2.2\n-\n-Relevant for:\n-- Those building `{scheme,guile}-bytestructures` from source against Guile v2.2\n-\n-Commit\n-[707eea3](https://github.com/TaylanUB/scheme-bytestructures/commit/707eea3a85e1e375e86702229ebf73d496377669)\n-introduced a regression for Guile v2.2 and was first included in v1.0.8, this\n-was later corrected in commit\n-[ec9a721](https://github.com/TaylanUB/scheme-bytestructures/commit/ec9a721957c17bcda13148f8faa5f06934431ff7)\n-and included in v1.1.0.\n-\n-TL;DR If you decided to use Guile v2.2, do not use `{scheme,guile}-bytestructures` v1.0.8 or v1.0.9.\n-\n-### Building and Installing Guix itself\n-\n-Start by cloning Guix:\n-\n-```\n-git clone https://git.savannah.gnu.org/git/guix.git\n-cd guix\n-```\n-\n-You will likely want to build the latest release, however, if the latest release\n-when you're reading this is still 1.2.0 then you may want to use 95aca29 instead\n-to avoid a problem in the GnuTLS test suite.\n-\n-```\n-git branch -a -l 'origin/version-*'  # check for the latest release\n-git checkout <latest-release>\n-```\n-\n-Bootstrap the build system:\n-```\n-./bootstrap\n-```\n-\n-Configure with the recommended `--localstatedir` flag:\n-```\n-./configure --localstatedir=/var\n-```\n-\n-Note: If you intend to hack on Guix in the future, you will need to supply the\n-same `--localstatedir=` flag for all future Guix `./configure` invocations. See\n-the last paragraph of this\n-[section](https://guix.gnu.org/manual/en/html_node/Requirements.html) for more\n-details.\n-\n-Build Guix (this will take a while):\n-```\n-make -j$(nproc)\n-```\n-\n-Install Guix:\n-\n-```\n-sudo make install\n-```\n-\n-### Post-\"build from source\" Setup\n-\n-#### Creating and starting a `guix-daemon-original` service with a fixed `argv[0]`\n-\n-At this point, guix will be installed to `${bindir}`, which is likely\n-`/usr/local/bin` if you did not override directory variables at\n-`./configure`-time. More information on standard Automake directory variables\n-can be found\n-[here](https://www.gnu.org/software/automake/manual/html_node/Standard-Directory-Variables.html).\n-\n-However, the Guix init scripts and service configurations for Upstart, systemd,\n-SysV, and OpenRC are installed (in `${libdir}`) to launch\n-`${localstatedir}/guix/profiles/per-user/root/current-guix/bin/guix-daemon`,\n-which does not yet exist, and will only exist after [`root` performs their first\n-`guix pull`](#guix-pull-as-root).\n-\n-We need to create a `-original` version of these init scripts that's pointed to\n-the binaries we just built and `make install`'ed in `${bindir}` (normally,\n-`/usr/local/bin`).\n-\n-Example for `systemd`, run as `root`:\n-\n-```sh\n-# Create guix-daemon-original.service by modifying guix-daemon.service\n-libdir=# set according to your PREFIX (default is /usr/local/lib)\n-bindir=\"$(dirname $(command -v guix-daemon))\"\n-sed -E -e \"s|/\\S*/guix/profiles/per-user/root/current-guix/bin/guix-daemon|${bindir}/guix-daemon|\" \"${libdir}\"/systemd/system/guix-daemon.service > /etc/systemd/system/guix-daemon-original.service\n-chmod 664 /etc/systemd/system/guix-daemon-original.service\n-\n-# Make systemd recognize the new service\n-systemctl daemon-reload\n-\n-# Make sure that the non-working guix-daemon.service is stopped and disabled\n-systemctl stop guix-daemon\n-systemctl disable guix-daemon\n-\n-# Make sure that the working guix-daemon-original.service is started and enabled\n-systemctl enable guix-daemon-original\n-systemctl start guix-daemon-original\n-```\n-\n-#### Creating `guix-daemon` users / groups\n-\n-Please see the [relevant\n-section](https://guix.gnu.org/manual/en/html_node/Build-Environment-Setup.html)\n-in the Guix Reference Manual for more details.\n-\n-## Optional setup\n-\n-At this point, you are set up to [use Guix to build Bitcoin\n-Core](./README.md#usage). However, if you want to polish your setup a bit and\n-make it \"what Guix intended\", then read the next few subsections.\n-\n-### Add an `/etc/profile.d` entry\n-\n-This section definitely does not apply to you if you installed Guix using:\n-1. The shell installer script\n-2. fanquake's Docker image\n-3. Debian's `guix` package\n-\n-#### Background\n-\n-Although Guix knows how to update itself and its packages, it does so in a\n-non-invasive way (it does not modify `/usr/local/bin/guix`).\n-\n-Instead, it does the following:\n-\n-- After a `guix pull`, it updates\n-  `/var/guix/profiles/per-user/$USER/current-guix`, and creates a symlink\n-  targeting this directory at `$HOME/.config/guix/current`\n-\n-- After a `guix install`, it updates\n-  `/var/guix/profiles/per-user/$USER/guix-profile`, and creates a symlink\n-  targeting this directory at `$HOME/.guix-profile`\n-\n-Therefore, in order for these operations to affect your shell/desktop sessions\n-(and for the principle of least astonishment to hold), their corresponding\n-directories have to be added to well-known environment variables like `$PATH`,\n-`$INFOPATH`, `$XDG_DATA_DIRS`, etc.\n-\n-In other words, if `$HOME/.config/guix/current/bin` does not exist in your\n-`$PATH`, a `guix pull` will have no effect on what `guix` you are using. Same\n-goes for `$HOME/.guix-profile/bin`, `guix install`, and installed packages.\n-\n-Helpfully, after a `guix pull` or `guix install`, a message will be printed like\n-so:\n-\n-```\n-hint: Consider setting the necessary environment variables by running:\n-\n-     GUIX_PROFILE=\"$HOME/.guix-profile\"\n-     . \"$GUIX_PROFILE/etc/profile\"\n-\n-Alternately, see `guix package --search-paths -p \"$HOME/.guix-profile\"'.\n-```\n-\n-However, this is somewhat tedious to do for both `guix pull` and `guix install`\n-for each user on the system that wants to properly use `guix`. I recommend that\n-you instead add an entry to `/etc/profile.d` instead. This is done by default\n-when installing the Debian package later than 1.2.0-4 and when using the shell\n-script installer.\n-\n-#### Instructions\n-\n-Create `/etc/profile.d/guix.sh` with the following content:\n-```sh\n-# _GUIX_PROFILE: `guix pull` profile\n-_GUIX_PROFILE=\"$HOME/.config/guix/current\"\n-if [ -L $_GUIX_PROFILE ]; then\n-  export PATH=\"$_GUIX_PROFILE/bin${PATH:+:}$PATH\"\n-  # Export INFOPATH so that the updated info pages can be found\n-  # and read by both /usr/bin/info and/or $GUIX_PROFILE/bin/info\n-  # When INFOPATH is unset, add a trailing colon so that Emacs\n-  # searches 'Info-default-directory-list'.\n-  export INFOPATH=\"$_GUIX_PROFILE/share/info:$INFOPATH\"\n-fi\n-\n-# GUIX_PROFILE: User's default profile\n-GUIX_PROFILE=\"$HOME/.guix-profile\"\n-[ -L $GUIX_PROFILE ] || return\n-GUIX_LOCPATH=\"$GUIX_PROFILE/lib/locale\"\n-export GUIX_PROFILE GUIX_LOCPATH\n-\n-[ -f \"$GUIX_PROFILE/etc/profile\" ] && . \"$GUIX_PROFILE/etc/profile\"\n-\n-# set XDG_DATA_DIRS to include Guix installations\n-export XDG_DATA_DIRS=\"$GUIX_PROFILE/share:${XDG_DATA_DIRS:-/usr/local/share/:/usr/share/}\"\n-```\n-\n-Please note that this will not take effect until the next shell or desktop\n-session (log out and log back in).\n-\n-### `guix pull` as root\n-\n-Before you do this, you need to read the section on [choosing your security\n-model][security-model] and adjust `guix` and `guix-daemon` flags according to\n-your choice, as invoking `guix pull` may pull substitutes from substitute\n-servers (which you may not want).\n-\n-As mentioned in a previous section, Guix expects\n-`${localstatedir}/guix/profiles/per-user/root/current-guix` to be populated with\n-`root`'s Guix profile, `guix pull`-ed and built by some former version of Guix.\n-However, this is not the case when we build from source. Therefore, we need to\n-perform a `guix pull` as `root`:\n-\n-```sh\n-sudo --login guix pull --branch=version-<latest-release-version>\n-# or\n-sudo --login guix pull --commit=<particular-commit>\n-```\n-\n-`guix pull` is quite a long process (especially if you're using\n-`--no-substitute`). If you encounter build problems, please refer to the\n-[troubleshooting section](#troubleshooting).\n-\n-Note that running a bare `guix pull` with no commit or branch specified will\n-pull the latest commit on Guix's master branch, which is likely fine, but not\n-recommended.\n-\n-If you installed Guix from source, you may get an error like the following:\n-```sh\n-error: while creating symlink '/root/.config/guix/current' No such file or directory\n-```\n-To resolve this, simply:\n-```\n-sudo mkdir -p /root/.config/guix\n-```\n-Then try the `guix pull` command again.\n-\n-After the `guix pull` finishes successfully,\n-`${localstatedir}/guix/profiles/per-user/root/current-guix` should be populated.\n-\n-#### Using the newly-pulled `guix` by restarting the daemon\n-\n-Depending on how you installed Guix, you should now make sure that your init\n-scripts and service configurations point to the newly-pulled `guix-daemon`.\n-\n-##### If you built Guix from source\n-\n-If you followed the instructions for [fixing argv\\[0\\]][fix-argv0], you can now\n-do the following:\n-\n-```sh\n-systemctl stop guix-daemon-original\n-systemctl disable guix-daemon-original\n-\n-systemctl enable guix-daemon\n-systemctl start guix-daemon\n-```\n-\n-##### If you installed Guix via the Debian/Ubuntu distribution packages\n-\n-You will need to create a `guix-daemon-latest` service which points to the new\n-`guix` rather than a pinned one.\n-\n-```sh\n-# Create guix-daemon-latest.service by modifying guix-daemon.service\n-sed -E -e \"s|/usr/bin/guix-daemon|/var/guix/profiles/per-user/root/current-guix/bin/guix-daemon|\" /etc/systemd/system/guix-daemon.service > /lib/systemd/system/guix-daemon-latest.service\n-chmod 664 /lib/systemd/system/guix-daemon-latest.service\n-\n-# Make systemd recognize the new service\n-systemctl daemon-reload\n-\n-# Make sure that the old guix-daemon.service is stopped and disabled\n-systemctl stop guix-daemon\n-systemctl disable guix-daemon\n-\n-# Make sure that the new guix-daemon-latest.service is started and enabled\n-systemctl enable guix-daemon-latest\n-systemctl start guix-daemon-latest\n-```\n-\n-##### If you installed Guix via lantw44's Arch Linux AUR package\n-\n-At the time of writing (July 5th, 2021) the systemd unit for \"updated Guix\" is\n-`guix-daemon-latest.service`, therefore, you should do the following:\n-\n-```sh\n-systemctl stop guix-daemon\n-systemctl disable guix-daemon\n-\n-systemctl enable guix-daemon-latest\n-systemctl start guix-daemon-latest\n-```\n-\n-##### Otherwise...\n-\n-Simply do:\n-\n-```sh\n-systemctl restart guix-daemon\n-```\n-\n-### Checking everything\n-\n-If you followed all the steps above to make your Guix setup \"prim and proper,\"\n-you can check that you did everything properly by running through this\n-checklist.\n-\n-1. `/etc/profile.d/guix.sh` should exist and be sourced at each shell login\n-\n-2. `guix describe` should not print `guix describe: error: failed to determine\n-   origin`, but rather something like:\n-\n-   ```\n-   Generation 38   Feb 22 2021 16:39:31    (current)\n-     guix f350df4\n-       repository URL: https://git.savannah.gnu.org/git/guix.git\n-       branch: version-1.2.0\n-       commit: f350df405fbcd5b9e27e6b6aa500da7f101f41e7\n-   ```\n-\n-3. `guix-daemon` should be running from `${localstatedir}/guix/profiles/per-user/root/current-guix`\n-\n-# Troubleshooting\n-\n-## Derivation failed to build\n-\n-When you see a build failure like below:\n-\n-```\n-building /gnu/store/...-foo-3.6.12.drv...\n-/ 'check' phasenote: keeping build directory `/tmp/guix-build-foo-3.6.12.drv-0'\n-builder for `/gnu/store/...-foo-3.6.12.drv' failed with exit code 1\n-build of /gnu/store/...-foo-3.6.12.drv failed\n-View build log at '/var/log/guix/drvs/../...-foo-3.6.12.drv.bz2'.\n-cannot build derivation `/gnu/store/...-qux-7.69.1.drv': 1 dependencies couldn't be built\n-cannot build derivation `/gnu/store/...-bar-3.16.5.drv': 1 dependencies couldn't be built\n-cannot build derivation `/gnu/store/...-baz-2.0.5.drv': 1 dependencies couldn't be built\n-guix time-machine: error: build of `/gnu/store/...-baz-2.0.5.drv' failed\n-```\n-\n-It means that `guix` failed to build a package named `foo`, which was a\n-dependency of `qux`, `bar`, and `baz`. Importantly, note that the last \"failed\"\n-line is not necessarily the root cause, the first \"failed\" line is.\n-\n-Most of the time, the build failure is due to a spurious test failure or the\n-package's build system/test suite breaking when running multi-threaded. To\n-rebuild _just_ this derivation in a single-threaded fashion (please don't forget\n-to add other `guix` flags like `--no-substitutes` as appropriate):\n-\n-```sh\n-$ guix build --cores=1 /gnu/store/...-foo-3.6.12.drv\n-```\n-\n-If the single-threaded rebuild did not succeed, you may need to dig deeper.\n-You may view `foo`'s build logs in `less` like so (please replace paths with the\n-path you see in the build failure output):\n-\n-```sh\n-$ bzcat /var/log/guix/drvs/../...-foo-3.6.12.drv.bz2 | less\n-```\n-\n-`foo`'s build directory is also preserved and available at\n-`/tmp/guix-build-foo-3.6.12.drv-0`. However, if you fail to build `foo` multiple\n-times, it may be `/tmp/...drv-1` or `/tmp/...drv-2`. Always consult the build\n-failure output for the most accurate, up-to-date information.\n-\n-### python(-minimal): [Errno 84] Invalid or incomplete multibyte or wide character\n-\n-This error occurs when your `$TMPDIR` (default: /tmp) exists on a filesystem\n-which rejects characters not present in the UTF-8 character code set. An example\n-is ZFS with the utf8only=on option set.\n-\n-More information: https://bugs.python.org/issue37584\n-\n-### GnuTLS: test-suite FAIL: status-request-revoked\n-\n-*The derivation is likely identified by: `/gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv`*\n-\n-This unfortunate error is most common for non-substitute builders who installed\n-Guix v1.2.0. The problem stems from the fact that one of GnuTLS's tests uses a\n-hardcoded certificate which expired on 2020-10-24.\n-\n-What's more unfortunate is that this GnuTLS derivation is somewhat special in\n-Guix's dependency graph and is not affected by the package transformation flags\n-like `--without-tests=`.\n-\n-The easiest solution for those encountering this problem is to install a newer\n-version of Guix. However, there are ways to work around this issue:\n-\n-#### Workaround 1: Using substitutes for this single derivation\n-\n-If you've authorized the official Guix build farm's key (more info\n-[here](./README.md#step-1-authorize-the-signing-keys)), then you can use\n-substitutes just for this single derivation by invoking the following:\n-\n-```sh\n-guix build --substitute-urls=\"https://ci.guix.gnu.org\" /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n-```\n-\n-See [this section](./README.md#removing-authorized-keys) for instructions on how\n-to remove authorized keys if you don't want to keep the build farm's key\n-authorized.\n-\n-#### Workaround 2: Temporarily setting the system clock back\n-\n-This workaround was described [here](https://issues.guix.gnu.org/44559#5).\n-\n-Basically:\n-1. Turn off networking\n-2. Turn off NTP\n-3. Set system time to 2020-10-01\n-4. guix build --no-substitutes /gnu/store/vhphki5sg9xkdhh2pbc8gi6vhpfzryf0-gnutls-3.6.12.drv\n-5. Set system time back to accurate current time\n-6. Turn NTP back on\n-7. Turn networking back on\n-\n-### coreutils: FAIL: tests/tail-2/inotify-dir-recreate\n-\n-The inotify-dir-create test fails on \"remote\" filesystems such as overlayfs\n-(Docker's default filesystem) due to the filesystem being mistakenly recognized\n-as non-remote.\n-\n-A relatively easy workaround to this is to make sure that a somewhat traditional\n-filesystem is mounted at `/tmp` (where `guix-daemon` performs its builds). For\n-Docker users, this might mean [using a volume][docker/volumes], [binding\n-mounting][docker/bind-mnt] from host, or (for those with enough RAM and swap)\n-[mounting a tmpfs][docker/tmpfs] using the `--tmpfs` flag.\n-\n-Please see the following links for more details:\n-\n-- An upstream coreutils bug has been filed: [debbugs#47940](https://debbugs.gnu.org/cgi/bugreport.cgi?bug=47940)\n-- A Guix bug detailing the underlying problem has been filed: [guix-issues#47935](https://issues.guix.gnu.org/47935)\n-- A commit to skip this test in Guix has been merged into the core-updates branch:\n-[savannah/guix@6ba1058](https://git.savannah.gnu.org/cgit/guix.git/commit/?id=6ba1058df0c4ce5611c2367531ae5c3cdc729ab4)\n-\n-\n-[install-script]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n-[install-bin-tarball]: #options-1-and-2-using-the-official-shell-installer-script-or-binary-tarball\n-[install-fanquake-docker]: #option-3-using-fanquakes-docker-image\n-[install-distro-pkg]: #option-4-using-a-distribution-maintained-package\n-[install-source]: #option-5-building-from-source\n-\n-[fix-argv0]: #creating-and-starting-a-guix-daemon-original-service-with-a-fixed-argv0\n-[security-model]: ./README.md#choosing-your-security-model\n-\n-[docker/volumes]: https://docs.docker.com/storage/volumes/\n-[docker/bind-mnt]: https://docs.docker.com/storage/bind-mounts/\n-[docker/tmpfs]: https://docs.docker.com/storage/tmpfs/"
      },
      {
        "sha": "8500379025b1d6631f8a728bb4a28e48f653b713",
        "filename": "contrib/guix/README.md",
        "status": "modified",
        "additions": 109,
        "deletions": 365,
        "changes": 474,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -9,476 +9,220 @@ downloads.\n \n We achieve bootstrappability by using Guix as a functional package manager.\n \n-# Requirements\n+## Requirements\n \n-Conservatively, you will need an x86_64 machine with:\n+Conservatively, a x86_64 machine with:\n \n-- 16GB of free disk space on the partition that /gnu/store will reside in\n-- 8GB of free disk space **per platform triple** you're planning on building\n-  (see the `HOSTS` [environment variable description][env-vars-list])\n+- 2 or more logical cores\n+- 4GB of free disk space on the partition that /gnu/store will reside in\n+- 24GB of free disk space on the partition that the Bitcoin Core git repository\n+  resides in\n \n-# Installation and Setup\n+> Note: these requirements are slightly less onerous than those of Gitian builds\n \n-If you don't have Guix installed and set up, please follow the instructions in\n-[INSTALL.md](./INSTALL.md)\n+## Setup\n \n-# Usage\n+### Installing Guix\n \n-If you haven't considered your security model yet, please read [the relevant\n-section](#choosing-your-security-model) before proceeding to perform a build.\n+If you're just testing this out, you can use the\n+[Dockerfile][fanquake/guix-docker] for convenience. It automatically speeds up\n+your builds by [using substitutes](#speeding-up-builds-with-substitute-servers).\n+If you don't want this behaviour, refer to the [next\n+section](#choosing-your-security-model).\n \n-## Making the Xcode SDK available for macOS cross-compilation\n+Otherwise, follow the [Guix installation guide][guix/bin-install].\n \n-In order to perform a build for macOS (which is included in the default set of\n-platform triples to build), you'll need to extract the macOS SDK tarball using\n-tools found in the [`macdeploy` directory](../macdeploy/README.md).\n+> Note: For those who like to keep their filesystems clean, Guix is designed to\n+> be very standalone and _will not_ conflict with your system's package\n+> manager/existing setup. It _only_ touches `/var/guix`, `/gnu`, and\n+> `~/.config/guix`.\n \n-You can then either point to the SDK using the `SDK_PATH` environment variable:\n+### Choosing your security model\n \n-```sh\n-# Extract the SDK tarball to /path/to/parent/dir/of/extracted/SDK/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers\n-tar -C /path/to/parent/dir/of/extracted/SDK -xaf /path/to/Xcode-<foo>-<bar>-extracted-SDK-with-libcxx-headers.tar.gz\n+Guix allows us to achieve better binary security by using our CPU time to build\n+everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n+this: users can decide whether or not to bootstrap and to use substitutes.\n \n-# Indicate where to locate the SDK tarball\n-export SDK_PATH=/path/to/parent/dir/of/extracted/SDK\n-```\n+After installation, you may want to consider [adding substitute\n+servers](#speeding-up-builds-with-substitute-servers) to speed up your build if\n+that fits your security model (say, if you're just testing that this works).\n+This is skippable if you're using the [Dockerfile][fanquake/guix-docker].\n \n-or extract it into `depends/SDKs`:\n+If you prefer not to use any substitutes, make sure to set\n+`ADDITIONAL_GUIX_ENVIRONMENT_FLAGS` like the following snippet. The first build\n+will take a while, but the resulting packages will be cached for future builds.\n \n ```sh\n-mkdir -p depends/SDKs\n-tar -C depends/SDKs -xaf /path/to/SDK/tarball\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--no-substitutes'\n ```\n \n-## Building\n-\n-*The author highly recommends at least reading over the [common usage patterns\n-and examples](#common-guix-build-invocation-patterns-and-examples) section below\n-before starting a build. For a full list of customization options, see the\n-[recognized environment variables][env-vars-list] section.*\n-\n-To build Bitcoin Core reproducibly with all default options, invoke the\n-following from the top of a clean repository:\n+Likewise, to perform a bootstrapped build (takes even longer):\n \n ```sh\n-./contrib/guix/guix-build\n-```\n-\n-## Codesigning build outputs\n-\n-The `guix-codesign` command attaches codesignatures (produced by codesigners) to\n-existing non-codesigned outputs. Please see the [release process\n-documentation](/doc/release-process.md) for more context.\n-\n-It respects many of the same environment variable flags as `guix-build`, with 2\n-crucial differences:\n-\n-1. Since only Windows and macOS build outputs require codesigning, the `HOSTS`\n-   environment variable will have a sane default value of `x86_64-w64-mingw32\n-   x86_64-apple-darwin19` instead of all the platforms.\n-2. The `guix-codesign` command ***requires*** a `DETACHED_SIGS_REPO` flag.\n-    * _**DETACHED_SIGS_REPO**_\n-\n-      Set the directory where detached codesignatures can be found for the current\n-      Bitcoin Core version being built.\n-\n-      _REQUIRED environment variable_\n-\n-An invocation with all default options would look like:\n-\n-```\n-env DETACHED_SIGS_REPO=<path/to/bitcoin-detached-sigs> ./contrib/guix/guix-codesign\n-```\n-\n-## Cleaning intermediate work directories\n-\n-By default, `guix-build` leaves all intermediate files or \"work directories\"\n-(e.g. `depends/work`, `guix-build-*/distsrc-*`) intact at the end of a build so\n-that they are available to the user (to aid in debugging, etc.). However, these\n-directories usually take up a large amount of disk space. Therefore, a\n-`guix-clean` convenience script is provided which cleans the current `git`\n-worktree to save disk space:\n-\n-```\n-./contrib/guix/guix-clean\n-```\n-\n-\n-## Attesting to build outputs\n-\n-Much like how Gitian build outputs are attested to in a `gitian.sigs`\n-repository, Guix build outputs are attested to in the [`guix.sigs`\n-repository](https://github.com/bitcoin-core/guix.sigs).\n-\n-After you've cloned the `guix.sigs` repository, to attest to the current\n-worktree's commit/tag:\n-\n-```\n-env GUIX_SIGS_REPO=<path/to/guix.sigs> SIGNER=<gpg-key-name> ./contrib/guix/guix-attest\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--bootstrap --no-substitutes'\n ```\n \n-See `./contrib/guix/guix-attest --help` for more information on the various ways\n-`guix-attest` can be invoked.\n+### Using a version of Guix with `guix time-machine` capabilities\n \n-## Verifying build output attestations\n+> Note: This entire section can be skipped if you are already using a version of\n+> Guix that has [the `guix time-machine` command][guix/time-machine].\n \n-After at least one other signer has uploaded their signatures to the `guix.sigs`\n-repository:\n+Once Guix is installed, if it doesn't have the `guix time-machine` command, pull\n+the latest `guix`.\n \n-```\n-git -C <path/to/guix.sigs> pull\n-env GUIX_SIGS_REPO=<path/to/guix.sigs> ./contrib/guix/guix-verify\n+```sh\n+guix pull --max-jobs=4 # change number of jobs accordingly\n ```\n \n+Make sure that you are using your current profile. (You are prompted to do this\n+at the end of the `guix pull`)\n \n-## Common `guix-build` invocation patterns and examples\n-\n-### Keeping caches and SDKs outside of the worktree\n-\n-If you perform a lot of builds and have a bunch of worktrees, you may find it\n-more efficient to keep the depends tree's download cache, build cache, and SDKs\n-outside of the worktrees to avoid duplicate downloads and unnecessary builds. To\n-help with this situation, the `guix-build` script honours the `SOURCES_PATH`,\n-`BASE_CACHE`, and `SDK_PATH` environment variables and will pass them on to the\n-depends tree so that you can do something like:\n-\n-```sh\n-env SOURCES_PATH=\"$HOME/depends-SOURCES_PATH\" BASE_CACHE=\"$HOME/depends-BASE_CACHE\" SDK_PATH=\"$HOME/macOS-SDKs\" ./contrib/guix/guix-build\n+```bash\n+export PATH=\"${HOME}/.config/guix/current/bin${PATH:+:}$PATH\"\n ```\n \n-Note that the paths that these environment variables point to **must be\n-directories**, and **NOT symlinks to directories**.\n-\n-See the [recognized environment variables][env-vars-list] section for more\n-details.\n+## Usage\n \n-### Building a subset of platform triples\n+### As a Development Environment\n \n-Sometimes you only want to build a subset of the supported platform triples, in\n-which case you can override the default list by setting the space-separated\n-`HOSTS` environment variable:\n+For a Bitcoin Core depends development environment, simply invoke\n \n ```sh\n-env HOSTS='x86_64-w64-mingw32 x86_64-apple-darwin19' ./contrib/guix/guix-build\n+guix environment --manifest=contrib/guix/manifest.scm\n ```\n \n-See the [recognized environment variables][env-vars-list] section for more\n-details.\n-\n-### Controlling the number of threads used by `guix` build commands\n+And you'll land back in your shell with all the build dependencies required for\n+a `depends` build injected into your environment.\n \n-Depending on your system's RAM capacity, you may want to decrease the number of\n-threads used to decrease RAM usage or vice versa.\n+### As a Tool for Deterministic Builds\n \n-By default, the scripts under `./contrib/guix` will invoke all `guix` build\n-commands with `--cores=\"$JOBS\"`. Note that `$JOBS` defaults to `$(nproc)` if not\n-specified. However, astute manual readers will also notice that `guix` build\n-commands also accept a `--max-jobs=` flag (which defaults to 1 if unspecified).\n-\n-Here is the difference between `--cores=` and `--max-jobs=`:\n-\n-> Note: When I say \"derivation,\" think \"package\"\n-\n-`--cores=`\n-\n-  - controls the number of CPU cores to build each derivation. This is the value\n-    passed to `make`'s `--jobs=` flag.\n-\n-`--max-jobs=`\n-\n-  - controls how many derivations can be built in parallel\n-  - defaults to 1\n-\n-Therefore, the default is for `guix` build commands to build one derivation at a\n-time, utilizing `$JOBS` threads.\n-\n-Specifying the `$JOBS` environment variable will only modify `--cores=`, but you\n-can also modify the value for `--max-jobs=` by specifying\n-`$ADDITIONAL_GUIX_COMMON_FLAGS`. For example, if you have a LOT of memory, you\n-may want to set:\n+From the top of a clean Bitcoin Core repository:\n \n ```sh\n-export ADDITIONAL_GUIX_COMMON_FLAGS='--max-jobs=8'\n+./contrib/guix/guix-build.sh\n ```\n \n-Which allows for a maximum of 8 derivations to be built at the same time, each\n-utilizing `$JOBS` threads.\n-\n-Or, if you'd like to avoid spurious build failures caused by issues with\n-parallelism within a single package, but would still like to build multiple\n-packages when the dependency graph allows for it, you may want to try:\n+After the build finishes successfully (check the status code please), compare\n+hashes:\n \n ```sh\n-export JOBS=1 ADDITIONAL_GUIX_COMMON_FLAGS='--max-jobs=8'\n+find output/ -type f -print0 | sort -z | xargs -r0 sha256sum\n ```\n \n-See the [recognized environment variables][env-vars-list] section for more\n-details.\n-\n-## Recognized environment variables\n+#### Recognized environment variables\n \n * _**HOSTS**_\n \n   Override the space-separated list of platform triples for which to perform a\n-  bootstrappable build.\n+  bootstrappable build. _(defaults to \"x86\\_64-linux-gnu\n+  arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu\")_\n \n-  _(defaults to \"x86\\_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu\n-  riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n-  x86\\_64-w64-mingw32 x86\\_64-apple-darwin19\")_\n+  > Windows and OS X platform triplet support are WIP.\n \n * _**SOURCES_PATH**_\n \n   Set the depends tree download cache for sources. This is passed through to the\n   depends tree. Setting this to the same directory across multiple builds of the\n   depends tree can eliminate unnecessary redownloading of package sources.\n \n-  The path that this environment variable points to **must be a directory**, and\n-  **NOT a symlink to a directory**.\n-\n-* _**BASE_CACHE**_\n-\n-  Set the depends tree cache for built packages. This is passed through to the\n-  depends tree. Setting this to the same directory across multiple builds of the\n-  depends tree can eliminate unnecessary building of packages.\n-\n-  The path that this environment variable points to **must be a directory**, and\n-  **NOT a symlink to a directory**.\n-\n-* _**SDK_PATH**_\n-\n-  Set the path where _extracted_ SDKs can be found. This is passed through to\n-  the depends tree. Note that this is should be set to the _parent_ directory of\n-  the actual SDK (e.g. `SDK_PATH=$HOME/Downloads/macOS-SDKs` instead of\n-  `$HOME/Downloads/macOS-SDKs/Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers`).\n-\n-  The path that this environment variable points to **must be a directory**, and\n-  **NOT a symlink to a directory**.\n-\n-* _**JOBS**_\n+* _**MAX_JOBS**_\n \n-  Override the number of jobs to run simultaneously, you might want to do so on\n-  a memory-limited machine. This may be passed to:\n-\n-  - `guix` build commands as in `guix environment --cores=\"$JOBS\"`\n-  - `make` as in `make --jobs=\"$JOBS\"`\n-  - `xargs` as in `xargs -P\"$JOBS\"`\n-\n-  See [here](#controlling-the-number-of-threads-used-by-guix-build-commands) for\n-  more details.\n-\n-  _(defaults to the value of `nproc` outside the container)_\n+  Override the maximum number of jobs to run simultaneously, you might want to\n+  do so on a memory-limited machine. This may be passed to `make` as in `make\n+  --jobs=\"$MAX_JOBS\"` or `xargs` as in `xargs -P\"$MAX_JOBS\"`. _(defaults to the\n+  value of `nproc` outside the container)_\n \n * _**SOURCE_DATE_EPOCH**_\n \n   Override the reference UNIX timestamp used for bit-for-bit reproducibility,\n-  the variable name conforms to [standard][r12e/source-date-epoch].\n-\n-  _(defaults to the output of `$(git log --format=%at -1)`)_\n+  the variable name conforms to [standard][r12e/source-date-epoch]. _(defaults\n+  to the output of `$(git log --format=%at -1)`)_\n \n * _**V**_\n \n   If non-empty, will pass `V=1` to all `make` invocations, making `make` output\n   verbose.\n \n-  Note that any given value is ignored. The variable is only checked for\n-  emptiness. More concretely, this means that `V=` (setting `V` to the empty\n-  string) is interpreted the same way as not setting `V` at all, and that `V=0`\n-  has the same effect as `V=1`.\n-\n-* _**SUBSTITUTE_URLS**_\n-\n-  A whitespace-delimited list of URLs from which to download pre-built packages.\n-  A URL is only used if its signing key is authorized (refer to the [substitute\n-  servers section](#option-1-building-with-substitutes) for more details).\n-\n-* _**ADDITIONAL_GUIX_COMMON_FLAGS**_\n-\n-  Additional flags to be passed to all `guix` commands.\n+* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n \n-* _**ADDITIONAL_GUIX_TIMEMACHINE_FLAGS**_\n+  Additional flags to be passed to `guix environment`. For a fully-bootstrapped\n+  build, set this to `--bootstrap --no-substitutes` (refer to the [security\n+  model section](#choosing-your-security-model) for more details). Note that a\n+  fully-bootstrapped build will take quite a long time on the first run.\n \n-  Additional flags to be passed to `guix time-machine`.\n+## Tips and Tricks\n \n-* _**ADDITIONAL_GUIX_ENVIRONMENT_FLAGS**_\n+### Speeding up builds with substitute servers\n \n-  Additional flags to be passed to the invocation of `guix environment` inside\n-  `guix time-machine`.\n+_This whole section is automatically done in the convenience\n+[Dockerfiles][fanquake/guix-docker]_\n \n-# Choosing your security model\n+For those who are used to life in the fast _(and trustful)_ lane, you can use\n+[substitute servers][guix/substitutes] to enable binary downloads of packages.\n \n-No matter how you installed Guix, you need to decide on your security model for\n-building packages with Guix.\n+> For those who only want to use substitutes from the official Guix build farm\n+> and have authorized the build farm's signing key during Guix's installation,\n+> you don't need to do anything.\n \n-Guix allows us to achieve better binary security by using our CPU time to build\n-everything from scratch. However, it doesn't sacrifice user choice in pursuit of\n-this: users can decide whether or not to use **substitutes** (pre-built\n-packages).\n-\n-## Option 1: Building with substitutes\n-\n-### Step 1: Authorize the signing keys\n-\n-Depending on the installation procedure you followed, you may have already\n-authorized the Guix build farm key. In particular, the official shell installer\n-script asks you if you want the key installed, and the debian distribution\n-package authorized the key during installation.\n-\n-You can check the current list of authorized keys at `/etc/guix/acl`.\n-\n-At the time of writing, a `/etc/guix/acl` with just the Guix build farm key\n-authorized looks something like:\n-\n-```lisp\n-(acl\n- (entry\n-  (public-key\n-   (ecc\n-    (curve Ed25519)\n-    (q #8D156F295D24B0D9A86FA5741A840FF2D24F60F7B6C4134814AD55625971B394#)\n-    )\n-   )\n-  (tag\n-   (guix import)\n-   )\n-  )\n- )\n-```\n+#### Authorize the signing keys\n \n-If you've determined that the official Guix build farm key hasn't been\n-authorized, and you would like to authorize it, run the following as root:\n+For the official Guix build farm at https://ci.guix.gnu.org, run as root:\n \n ```\n-guix archive --authorize < /var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub\n-```\n-\n-If\n-`/var/guix/profiles/per-user/root/current-guix/share/guix/ci.guix.gnu.org.pub`\n-doesn't exist, try:\n-\n-```sh\n-guix archive --authorize < <PREFIX>/share/guix/ci.guix.gnu.org.pub\n+guix archive --authorize < ~root/.config/guix/current/share/guix/ci.guix.gnu.org.pub\n ```\n \n-Where `<PREFIX>` is likely:\n-- `/usr` if you installed from a distribution package\n-- `/usr/local` if you installed Guix from source and didn't supply any\n-  prefix-modifying flags to Guix's `./configure`\n-\n For dongcarl's substitute server at https://guix.carldong.io, run as root:\n \n ```sh\n wget -qO- 'https://guix.carldong.io/signing-key.pub' | guix archive --authorize\n ```\n \n-#### Removing authorized keys\n+#### Use the substitute servers\n \n-To remove previously authorized keys, simply edit `/etc/guix/acl` and remove the\n-`(entry (public-key ...))` entry.\n+The official Guix build farm at https://ci.guix.gnu.org is automatically used\n+unless the `--no-substitutes` flag is supplied.\n \n-### Step 2: Specify the substitute servers\n+This can be overridden for all `guix` invocations by passing the\n+`--substitute-urls` option to your invocation of `guix-daemon`. This can also be\n+overridden on a call-by-call basis by passing the same `--substitute-urls`\n+option to client tools such at `guix environment`.\n \n-Once its key is authorized, the official Guix build farm at\n-https://ci.guix.gnu.org is automatically used unless the `--no-substitutes` flag\n-is supplied. This default list of substitute servers is overridable both on a\n-`guix-daemon` level and when you invoke `guix` commands. See examples below for\n-the various ways of adding dongcarl's substitute server after having [authorized\n-his signing key](#authorize-the-signing-keys).\n+To use dongcarl's substitute server for Bitcoin Core builds after having\n+[authorized his signing key](#authorize-the-signing-keys):\n \n-Change the **default list** of substitute servers by starting `guix-daemon` with\n-the `--substitute-urls` option (you will likely need to edit your init script):\n-\n-```sh\n-guix-daemon <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n-```\n-\n-Override the default list of substitute servers by passing the\n-`--substitute-urls` option for invocations of `guix` commands:\n-\n-```sh\n-guix <cmd> --substitute-urls='https://guix.carldong.io https://ci.guix.gnu.org'\n-```\n-\n-For scripts under `./contrib/guix`, set the `SUBSTITUTE_URLS` environment\n-variable:\n-\n-```sh\n-export SUBSTITUTE_URLS='https://guix.carldong.io https://ci.guix.gnu.org'\n-```\n-\n-## Option 2: Disabling substitutes on an ad-hoc basis\n-\n-If you prefer not to use any substitutes, make sure to supply `--no-substitutes`\n-like in the following snippet. The first build will take a while, but the\n-resulting packages will be cached for future builds.\n-\n-For direct invocations of `guix`:\n-```sh\n-guix <cmd> --no-substitutes\n ```\n-\n-For the scripts under `./contrib/guix/`:\n-```sh\n-export ADDITIONAL_GUIX_COMMON_FLAGS='--no-substitutes'\n+export ADDITIONAL_GUIX_ENVIRONMENT_FLAGS='--substitute-urls=\"https://guix.carldong.io https://ci.guix.gnu.org\"'\n ```\n \n-## Option 3: Disabling substitutes by default\n-\n-`guix-daemon` accepts a `--no-substitutes` flag, which will make sure that,\n-unless otherwise overridden by a command line invocation, no substitutes will be\n-used.\n+## FAQ\n \n-If you start `guix-daemon` using an init script, you can edit said script to\n-supply this flag.\n+### How can I trust the binary installation?\n \n+As mentioned at the bottom of [this manual page][guix/bin-install]:\n \n-# Purging/Uninstalling Guix\n+> The binary installation tarballs can be (re)produced and verified simply by\n+> running the following command in the Guix source tree:\n+>\n+>     make guix-binary.x86_64-linux.tar.xz\n \n-In the extraordinarily rare case where you messed up your Guix installation in\n-an irreversible way, you may want to completely purge Guix from your system and\n-start over.\n+### When will Guix be packaged in debian?\n \n-1. Uninstall Guix itself according to the way you installed it (e.g. `sudo apt\n-   purge guix` for Ubuntu packaging, `sudo make uninstall` for a build from source).\n-2. Remove all build users and groups\n+Vagrant Cascadian has been making good progress on this\n+[here][debian/guix-package]. We have all the pieces needed to put up an APT\n+repository and will likely put one up soon.\n \n-   You may check for relevant users and groups using:\n-\n-   ```\n-   getent passwd | grep guix\n-   getent group | grep guix\n-   ```\n-\n-   Then, you may remove users and groups using:\n-\n-   ```\n-   sudo userdel <user>\n-   sudo groupdel <group>\n-   ```\n-\n-3. Remove all possible Guix-related directories\n-    - `/var/guix/`\n-    - `/var/log/guix/`\n-    - `/gnu/`\n-    - `/etc/guix/`\n-    - `/home/*/.config/guix/`\n-    - `/home/*/.cache/guix/`\n-    - `/home/*/.guix-profile/`\n-    - `/root/.config/guix/`\n-    - `/root/.cache/guix/`\n-    - `/root/.guix-profile/`\n-\n-[b17e]: https://bootstrappable.org/\n+[b17e]: http://bootstrappable.org/\n [r12e/source-date-epoch]: https://reproducible-builds.org/docs/source-date-epoch/\n \n [guix/install.sh]: https://git.savannah.gnu.org/cgit/guix.git/plain/etc/guix-install.sh\n [guix/bin-install]: https://www.gnu.org/software/guix/manual/en/html_node/Binary-Installation.html\n [guix/env-setup]: https://www.gnu.org/software/guix/manual/en/html_node/Build-Environment-Setup.html\n [guix/substitutes]: https://www.gnu.org/software/guix/manual/en/html_node/Substitutes.html\n [guix/substitute-server-auth]: https://www.gnu.org/software/guix/manual/en/html_node/Substitute-Server-Authorization.html\n+[guix/inferiors]: https://www.gnu.org/software/guix/manual/en/html_node/Inferiors.html\n+[guix/channels]: https://www.gnu.org/software/guix/manual/en/html_node/Channels.html\n [guix/time-machine]: https://guix.gnu.org/manual/en/html_node/Invoking-guix-time_002dmachine.html\n \n-[debian/guix-bullseye]: https://packages.debian.org/bullseye/guix\n-[ubuntu/guix-hirsute]: https://packages.ubuntu.com/hirsute/guix\n+[debian/guix-package]: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=850644\n [fanquake/guix-docker]: https://github.com/fanquake/core-review/tree/master/guix\n-\n-[env-vars-list]: #recognized-environment-variables"
      },
      {
        "sha": "6e12cbead733ebac6f57244e8dfef602a99b0d27",
        "filename": "contrib/guix/guix-attest",
        "status": "removed",
        "additions": 0,
        "deletions": 255,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-attest",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-attest",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-attest?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,255 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Source the common prelude, which:\n-#   1. Checks if we're at the top directory of the Bitcoin Core repository\n-#   2. Defines a few common functions and variables\n-#\n-# shellcheck source=libexec/prelude.bash\n-source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n-\n-\n-###################\n-## Sanity Checks ##\n-###################\n-\n-################\n-# Required non-builtin commands should be invokable\n-################\n-\n-check_tools cat env basename mkdir diff sort\n-if [ -z \"$NO_SIGN\" ]; then\n-    check_tools gpg\n-fi\n-\n-################\n-# Required env vars should be non-empty\n-################\n-\n-cmd_usage() {\n-cat <<EOF\n-Synopsis:\n-\n-    env GUIX_SIGS_REPO=<path/to/guix.sigs> \\\\\n-        SIGNER=GPG_KEY_NAME[=SIGNER_NAME] \\\\\n-        [ NO_SIGN=1 ]\n-      ./contrib/guix/guix-attest\n-\n-Example w/o overriding signing name:\n-\n-    env GUIX_SIGS_REPO=/home/achow101/guix.sigs \\\\\n-        SIGNER=achow101 \\\\\n-      ./contrib/guix/guix-attest\n-\n-Example overriding signing name:\n-\n-    env GUIX_SIGS_REPO=/home/dongcarl/guix.sigs \\\\\n-        SIGNER=0x96AB007F1A7ED999=dongcarl \\\\\n-      ./contrib/guix/guix-attest\n-\n-Example w/o signing, just creating SHA256SUMS:\n-\n-    env GUIX_SIGS_REPO=/home/achow101/guix.sigs \\\\\n-        SIGNER=achow101 \\\\\n-        NO_SIGN=1 \\\\\n-      ./contrib/guix/guix-attest\n-\n-EOF\n-}\n-\n-if [ -z \"$GUIX_SIGS_REPO\" ] || [ -z \"$SIGNER\" ]; then\n-    cmd_usage\n-    exit 1\n-fi\n-\n-################\n-# GUIX_SIGS_REPO should exist as a directory\n-################\n-\n-if [ ! -d \"$GUIX_SIGS_REPO\" ]; then\n-cat << EOF\n-ERR: The specified GUIX_SIGS_REPO is not an existent directory:\n-\n-    '$GUIX_SIGS_REPO'\n-\n-Hint: Please clone the guix.sigs repository and point to it with the\n-      GUIX_SIGS_REPO environment variable.\n-\n-EOF\n-cmd_usage\n-exit 1\n-fi\n-\n-################\n-# The key specified in SIGNER should be usable\n-################\n-\n-IFS='=' read -r gpg_key_name signer_name <<< \"$SIGNER\"\n-if [ -z \"${signer_name}\" ]; then\n-    signer_name=\"$gpg_key_name\"\n-fi\n-\n-if [ -z \"$NO_SIGN\" ] && ! gpg --dry-run --list-secret-keys \"${gpg_key_name}\" >/dev/null 2>&1; then\n-    echo \"ERR: GPG can't seem to find any key named '${gpg_key_name}'\"\n-    exit 1\n-fi\n-\n-################\n-# We should be able to find at least one output\n-################\n-\n-echo \"Looking for build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n-\n-shopt -s nullglob\n-sha256sum_fragments=( \"$OUTDIR_BASE\"/*/SHA256SUMS.part ) # This expands to an array of directories...\n-shopt -u nullglob\n-\n-noncodesigned_fragments=()\n-codesigned_fragments=()\n-\n-if (( ${#sha256sum_fragments[@]} )); then\n-    echo \"Found build output SHA256SUMS fragments:\"\n-    for outdir in \"${sha256sum_fragments[@]}\"; do\n-        echo \"    '$outdir'\"\n-        case \"$outdir\" in\n-            \"$OUTDIR_BASE\"/*-codesigned/SHA256SUMS.part)\n-                codesigned_fragments+=(\"$outdir\")\n-                ;;\n-            *)\n-                noncodesigned_fragments+=(\"$outdir\")\n-                ;;\n-        esac\n-    done\n-    echo\n-else\n-    echo \"ERR: Could not find any build output SHA256SUMS fragments in ${OUTDIR_BASE}\"\n-    exit 1\n-fi\n-\n-##############\n-##  Attest  ##\n-##############\n-\n-# Usage: out_name $outdir\n-#\n-#   HOST: The output directory being attested\n-#\n-out_name() {\n-    basename \"$(dirname \"$1\")\"\n-}\n-\n-shasum_already_exists() {\n-cat <<EOF\n---\n-\n-ERR: An ${1} file already exists for '${VERSION}' and attests\n-     differently. You likely previously attested to a partial build (e.g. one\n-     where you specified the HOST environment variable).\n-\n-     See the diff above for more context.\n-\n-Hint: You may wish to remove the existing attestations and their signatures by\n-      invoking:\n-\n-          rm '${PWD}/${1}'{,.asc}\n-\n-      Then try running this script again.\n-\n-EOF\n-}\n-\n-echo \"Attesting to build outputs for version: '${VERSION}'\"\n-echo \"\"\n-\n-# Given a SHA256SUMS file as stdin that has lines like:\n-#     0ba536819b221a91d3d42e978be016aac918f40984754d74058aa0c921cd3ea6  a/b/d/c/d/s/bitcoin-22.0rc2-riscv64-linux-gnu.tar.gz\n-#     ...\n-#\n-# Replace each line's file name with its basename:\n-#     0ba536819b221a91d3d42e978be016aac918f40984754d74058aa0c921cd3ea6  bitcoin-22.0rc2-riscv64-linux-gnu.tar.gz\n-#     ...\n-#\n-basenameify_SHA256SUMS() {\n-    sed -E 's@(^[[:xdigit:]]{64}[[:space:]]+).+/([^/]+$)@\\1\\2@'\n-}\n-\n-outsigdir=\"$GUIX_SIGS_REPO/$VERSION/$signer_name\"\n-mkdir -p \"$outsigdir\"\n-(\n-    cd \"$outsigdir\"\n-\n-    temp_noncodesigned=\"$(mktemp)\"\n-    trap 'rm -rf -- \"$temp_noncodesigned\"' EXIT\n-\n-    if (( ${#noncodesigned_fragments[@]} )); then\n-        cat \"${noncodesigned_fragments[@]}\" \\\n-            | sort -u \\\n-            | sort -k2 \\\n-            | basenameify_SHA256SUMS \\\n-                > \"$temp_noncodesigned\"\n-        if [ -e noncodesigned.SHA256SUMS ]; then\n-            # The SHA256SUMS already exists, make sure it's exactly what we\n-            # expect, error out if not\n-            if diff -u noncodesigned.SHA256SUMS \"$temp_noncodesigned\"; then\n-                echo \"A noncodesigned.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n-            else\n-                shasum_already_exists noncodesigned.SHA256SUMS\n-                exit 1\n-            fi\n-        else\n-            mv \"$temp_noncodesigned\" noncodesigned.SHA256SUMS\n-        fi\n-    else\n-        echo \"ERR: No noncodesigned outputs found for '${VERSION}', exiting...\"\n-        exit 1\n-    fi\n-\n-    temp_all=\"$(mktemp)\"\n-    trap 'rm -rf -- \"$temp_all\"' EXIT\n-\n-    if (( ${#codesigned_fragments[@]} )); then\n-        # Note: all.SHA256SUMS attests to all of $sha256sum_fragments, but is\n-        #       not needed if there are no $codesigned_fragments\n-        cat \"${sha256sum_fragments[@]}\" \\\n-            | sort -u \\\n-            | sort -k2 \\\n-            | basenameify_SHA256SUMS \\\n-                > \"$temp_all\"\n-        if [ -e all.SHA256SUMS ]; then\n-            # The SHA256SUMS already exists, make sure it's exactly what we\n-            # expect, error out if not\n-            if diff -u all.SHA256SUMS \"$temp_all\"; then\n-                echo \"An all.SHA256SUMS file already exists for '${VERSION}' and is up-to-date.\"\n-            else\n-                shasum_already_exists all.SHA256SUMS\n-                exit 1\n-            fi\n-        else\n-            mv \"$temp_all\" all.SHA256SUMS\n-        fi\n-    else\n-        # It is fine to have the codesigned outputs be missing (perhaps the\n-        # detached codesigs have not been published yet), just print a log\n-        # message instead of erroring out\n-        echo \"INFO: No codesigned outputs found for '${VERSION}', skipping...\"\n-    fi\n-\n-    if [ -z \"$NO_SIGN\" ]; then\n-        echo \"Signing SHA256SUMS to produce SHA256SUMS.asc\"\n-        for i in *.SHA256SUMS; do\n-            if [ ! -e \"$i\".asc ]; then\n-                gpg --detach-sign \\\n-                    --digest-algo sha256 \\\n-                    --local-user \"$gpg_key_name\" \\\n-                    --armor \\\n-                    --output \"$i\".asc \"$i\"\n-            else\n-                echo \"Signature already there\"\n-            fi\n-        done\n-    else\n-        echo \"Not signing SHA256SUMS as \\$NO_SIGN is not empty\"\n-    fi\n-    echo \"\"\n-)"
      },
      {
        "sha": "9317fa7fdebd8c9b04e842fbb8fde7eee368e2d8",
        "filename": "contrib/guix/guix-build",
        "status": "removed",
        "additions": 0,
        "deletions": 477,
        "changes": 477,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-build",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-build",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,477 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Source the common prelude, which:\n-#   1. Checks if we're at the top directory of the Bitcoin Core repository\n-#   2. Defines a few common functions and variables\n-#\n-# shellcheck source=libexec/prelude.bash\n-source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n-\n-\n-###################\n-## SANITY CHECKS ##\n-###################\n-\n-################\n-# Required non-builtin commands should be invocable\n-################\n-\n-check_tools cat mkdir make getent curl git guix\n-\n-################\n-# GUIX_BUILD_OPTIONS should be empty\n-################\n-#\n-# GUIX_BUILD_OPTIONS is an environment variable recognized by guix commands that\n-# can perform builds. This seems like what we want instead of\n-# ADDITIONAL_GUIX_COMMON_FLAGS, but the value of GUIX_BUILD_OPTIONS is actually\n-# _appended_ to normal command-line options. Meaning that they will take\n-# precedence over the command-specific ADDITIONAL_GUIX_<CMD>_FLAGS.\n-#\n-# This seems like a poor user experience. Thus we check for GUIX_BUILD_OPTIONS's\n-# existence here and direct users of this script to use our (more flexible)\n-# custom environment variables.\n-if [ -n \"$GUIX_BUILD_OPTIONS\" ]; then\n-cat << EOF\n-Error: Environment variable GUIX_BUILD_OPTIONS is not empty:\n-  '$GUIX_BUILD_OPTIONS'\n-\n-Unfortunately this script is incompatible with GUIX_BUILD_OPTIONS, please unset\n-GUIX_BUILD_OPTIONS and use ADDITIONAL_GUIX_COMMON_FLAGS to set build options\n-across guix commands or ADDITIONAL_GUIX_<CMD>_FLAGS to set build options for a\n-specific guix command.\n-\n-See contrib/guix/README.md for more details.\n-EOF\n-exit 1\n-fi\n-\n-################\n-# The git worktree should not be dirty\n-################\n-\n-if ! git diff-index --quiet HEAD -- && [ -z \"$FORCE_DIRTY_WORKTREE\" ]; then\n-cat << EOF\n-ERR: The current git worktree is dirty, which may lead to broken builds.\n-\n-     Aborting...\n-\n-Hint: To make your git worktree clean, You may want to:\n-      1. Commit your changes,\n-      2. Stash your changes, or\n-      3. Set the 'FORCE_DIRTY_WORKTREE' environment variable if you insist on\n-         using a dirty worktree\n-EOF\n-exit 1\n-fi\n-\n-mkdir -p \"$VERSION_BASE\"\n-\n-################\n-# Build directories should not exist\n-################\n-\n-# Default to building for all supported HOSTs (overridable by environment)\n-export HOSTS=\"${HOSTS:-x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu\n-                       x86_64-w64-mingw32\n-                       x86_64-apple-darwin19}\"\n-\n-# Usage: distsrc_for_host HOST\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-distsrc_for_host() {\n-    echo \"${DISTSRC_BASE}/distsrc-${VERSION}-${1}\"\n-}\n-\n-# Accumulate a list of build directories that already exist...\n-hosts_distsrc_exists=\"\"\n-for host in $HOSTS; do\n-    if [ -e \"$(distsrc_for_host \"$host\")\" ]; then\n-        hosts_distsrc_exists+=\" ${host}\"\n-    fi\n-done\n-\n-if [ -n \"$hosts_distsrc_exists\" ]; then\n-# ...so that we can print them out nicely in an error message\n-cat << EOF\n-ERR: Build directories for this commit already exist for the following platform\n-     triples you're attempting to build, probably because of previous builds.\n-     Please remove, or otherwise deal with them prior to starting another build.\n-\n-     Aborting...\n-\n-Hint: To blow everything away, you may want to use:\n-\n-  $ ./contrib/guix/guix-clean\n-\n-Specifically, this will remove all files without an entry in the index,\n-excluding the SDK directory, the depends download cache, the depends built\n-packages cache, the garbage collector roots for Guix environments, and the\n-output directory.\n-EOF\n-for host in $hosts_distsrc_exists; do\n-    echo \"     ${host} '$(distsrc_for_host \"$host\")'\"\n-done\n-exit 1\n-else\n-    mkdir -p \"$DISTSRC_BASE\"\n-fi\n-\n-################\n-# When building for darwin, the macOS SDK should exists\n-################\n-\n-for host in $HOSTS; do\n-    case \"$host\" in\n-        *darwin*)\n-            OSX_SDK=\"$(make -C \"${PWD}/depends\" --no-print-directory HOST=\"$host\" print-OSX_SDK | sed 's@^[^=]\\+=@@g')\"\n-            if [ -e \"$OSX_SDK\" ]; then\n-                echo \"Found macOS SDK at '${OSX_SDK}', using...\"\n-            else\n-                echo \"macOS SDK does not exist at '${OSX_SDK}', please place the extracted, untarred SDK there to perform darwin builds, exiting...\"\n-                exit 1\n-            fi\n-            ;;\n-    esac\n-done\n-\n-################\n-# VERSION_BASE should have enough space\n-################\n-\n-avail_KiB=\"$(df -Pk \"$VERSION_BASE\" | sed 1d | tr -s ' ' | cut -d' ' -f4)\"\n-total_required_KiB=0\n-for host in $HOSTS; do\n-    case \"$host\" in\n-        *darwin*) required_KiB=440000 ;;\n-        *mingw*)  required_KiB=7600000 ;;\n-        *)        required_KiB=6400000 ;;\n-    esac\n-    total_required_KiB=$((total_required_KiB+required_KiB))\n-done\n-\n-if (( total_required_KiB > avail_KiB )); then\n-    total_required_GiB=$((total_required_KiB / 1048576))\n-    avail_GiB=$((avail_KiB / 1048576))\n-    echo \"Performing a Bitcoin Core Guix build for the selected HOSTS requires ${total_required_GiB} GiB, however, only ${avail_GiB} GiB is available. Please free up some disk space before performing the build.\"\n-    exit 1\n-fi\n-\n-################\n-# Check that we can connect to the guix-daemon\n-################\n-\n-cat << EOF\n-Checking that we can connect to the guix-daemon...\n-\n-Hint: If this hangs, you may want to try turning your guix-daemon off and on\n-      again.\n-\n-EOF\n-if ! guix gc --list-failures > /dev/null; then\n-cat << EOF\n-\n-ERR: Failed to connect to the guix-daemon, please ensure that one is running and\n-     reachable.\n-EOF\n-exit 1\n-fi\n-\n-# Developer note: we could use `guix repl` for this check and run:\n-#\n-#     (import (guix store)) (close-connection (open-connection))\n-#\n-# However, the internal API is likely to change more than the CLI invocation\n-\n-################\n-# Services database must have basic entries\n-################\n-\n-if ! getent services http https ftp > /dev/null 2>&1; then\n-cat << EOF\n-ERR: Your system's C library can not find service database entries for at least\n-     one of the following services: http, https, ftp.\n-\n-Hint: Most likely, /etc/services does not exist yet (common for docker images\n-      and minimal distros), or you don't have permissions to access it.\n-\n-      If /etc/services does not exist yet, you may want to install the\n-      appropriate package for your distro which provides it.\n-\n-          On Debian/Ubuntu: netbase\n-          On Arch Linux: iana-etc\n-\n-      For more information, see: getent(1), services(5)\n-\n-EOF\n-\n-fi\n-\n-#########\n-# SETUP #\n-#########\n-\n-# Determine the maximum number of jobs to run simultaneously (overridable by\n-# environment)\n-JOBS=\"${JOBS:-$(nproc)}\"\n-\n-# Usage: host_to_commonname HOST\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-host_to_commonname() {\n-    case \"$1\" in\n-        *darwin*) echo osx ;;\n-        *mingw*)  echo win ;;\n-        *linux*)  echo linux ;;\n-        *)        exit 1 ;;\n-    esac\n-}\n-\n-# Determine the reference time used for determinism (overridable by environment)\n-SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git -c log.showSignature=false log --format=%at -1)}\"\n-\n-# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n-# across time.\n-time-machine() {\n-    # shellcheck disable=SC2086\n-    guix time-machine --url=https://git.savannah.gnu.org/git/guix.git \\\n-                      --commit=aa34d4d28dfe25ba47d5800d05000fb7221788c0 \\\n-                      --cores=\"$JOBS\" \\\n-                      --keep-failed \\\n-                      --fallback \\\n-                      ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n-                      ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_TIMEMACHINE_FLAGS} \\\n-                      -- \"$@\"\n-}\n-\n-\n-# Precious directories are those which should not be cleaned between successive\n-# guix builds\n-depends_precious_dir_names='SOURCES_PATH BASE_CACHE SDK_PATH'\n-precious_dir_names=\"${depends_precious_dir_names} OUTDIR_BASE PROFILES_BASE\"\n-\n-# Usage: contains IFS-SEPARATED-LIST ITEM\n-contains() {\n-    for i in ${1}; do\n-        if [ \"$i\" = \"${2}\" ]; then\n-            return 0  # Found!\n-        fi\n-    done\n-    return 1\n-}\n-\n-# If the user explicitly specified a precious directory, create it so we\n-# can map it into the container\n-for precious_dir_name in $precious_dir_names; do\n-    precious_dir_path=\"${!precious_dir_name}\"\n-    if [ -n \"$precious_dir_path\" ]; then\n-        if [ ! -e \"$precious_dir_path\" ]; then\n-            mkdir -p \"$precious_dir_path\"\n-        elif [ -L \"$precious_dir_path\" ]; then\n-            echo \"ERR: ${precious_dir_name} cannot be a symbolic link\"\n-            exit 1\n-        elif [ ! -d \"$precious_dir_path\" ]; then\n-            echo \"ERR: ${precious_dir_name} must be a directory\"\n-            exit 1\n-        fi\n-    fi\n-done\n-\n-mkdir -p \"$VAR_BASE\"\n-\n-# Record the _effective_ values of precious directories such that guix-clean can\n-# avoid clobbering them if appropriate.\n-#\n-# shellcheck disable=SC2046,SC2086\n-{\n-    # Get depends precious dir definitions from depends\n-    make -C \"${PWD}/depends\" \\\n-         --no-print-directory \\\n-         -- $(printf \"print-%s\\n\" $depends_precious_dir_names)\n-\n-    # Get remaining precious dir definitions from the environment\n-    for precious_dir_name in $precious_dir_names; do\n-        precious_dir_path=\"${!precious_dir_name}\"\n-        if ! contains \"$depends_precious_dir_names\" \"$precious_dir_name\"; then\n-            echo \"${precious_dir_name}=${precious_dir_path}\"\n-        fi\n-    done\n-} > \"${VAR_BASE}/precious_dirs\"\n-\n-# Make sure an output directory exists for our builds\n-OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n-mkdir -p \"$OUTDIR_BASE\"\n-\n-# Download the depends sources now as we won't have internet access in the build\n-# container\n-for host in $HOSTS; do\n-    make -C \"${PWD}/depends\" -j\"$JOBS\" download-\"$(host_to_commonname \"$host\")\" ${V:+V=1} ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"}\n-done\n-\n-# Usage: outdir_for_host HOST SUFFIX\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-outdir_for_host() {\n-    echo \"${OUTDIR_BASE}/${1}${2:+-${2}}\"\n-}\n-\n-# Usage: profiledir_for_host HOST SUFFIX\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-profiledir_for_host() {\n-    echo \"${PROFILES_BASE}/${1}${2:+-${2}}\"\n-}\n-\n-\n-#########\n-# BUILD #\n-#########\n-\n-# Function to be called when building for host ${1} and the user interrupts the\n-# build\n-int_trap() {\n-cat << EOF\n-** INT received while building ${1}, you may want to clean up the relevant\n-   work directories (e.g. distsrc-*) before rebuilding\n-\n-Hint: To blow everything away, you may want to use:\n-\n-  $ ./contrib/guix/guix-clean\n-\n-Specifically, this will remove all files without an entry in the index,\n-excluding the SDK directory, the depends download cache, the depends built\n-packages cache, the garbage collector roots for Guix environments, and the\n-output directory.\n-EOF\n-}\n-\n-# Deterministically build Bitcoin Core\n-# shellcheck disable=SC2153\n-for host in $HOSTS; do\n-\n-    # Display proper warning when the user interrupts the build\n-    trap 'int_trap ${host}' INT\n-\n-    (\n-        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n-        # for the particular $HOST we're building for\n-        export HOST=\"$host\"\n-\n-        # shellcheck disable=SC2030\n-cat << EOF\n-INFO: Building ${VERSION:?not set} for platform triple ${HOST:?not set}:\n-      ...using reference timestamp: ${SOURCE_DATE_EPOCH:?not set}\n-      ...running at most ${JOBS:?not set} jobs\n-      ...from worktree directory: '${PWD}'\n-          ...bind-mounted in container to: '/bitcoin'\n-      ...in build directory: '$(distsrc_for_host \"$HOST\")'\n-          ...bind-mounted in container to: '$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")'\n-      ...outputting in: '$(outdir_for_host \"$HOST\")'\n-          ...bind-mounted in container to: '$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\")'\n-EOF\n-\n-        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n-        # container specified by 'contrib/guix/manifest.scm'.\n-        #\n-        # Explanation of `guix environment` flags:\n-        #\n-        #   --container        run command within an isolated container\n-        #\n-        #     Running in an isolated container minimizes build-time differences\n-        #     between machines and improves reproducibility\n-        #\n-        #   --pure             unset existing environment variables\n-        #\n-        #     Same rationale as --container\n-        #\n-        #   --no-cwd           do not share current working directory with an\n-        #                      isolated container\n-        #\n-        #     When --container is specified, the default behavior is to share\n-        #     the current working directory with the isolated container at the\n-        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n-        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n-        #     container becomes a source of irreproducibility. --no-cwd disables\n-        #     this behaviour.\n-        #\n-        #   --share=SPEC       for containers, share writable host file system\n-        #                      according to SPEC\n-        #\n-        #   --share=\"$PWD\"=/bitcoin\n-        #\n-        #                     maps our current working directory to /bitcoin\n-        #                     inside the isolated container, which we later cd\n-        #                     into.\n-        #\n-        #     While we don't want to map our current working directory to the\n-        #     same exact path (as this introduces irreproducibility), we do want\n-        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n-        #     container so that we have something to build. '/bitcoin' was\n-        #     chosen arbitrarily.\n-        #\n-        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n-        #\n-        #                     make the downloaded depends sources path available\n-        #                     inside the isolated container\n-        #\n-        #     The isolated container has no network access as it's in a\n-        #     different network namespace from the main machine, so we have to\n-        #     make the downloaded depends sources available to it. The sources\n-        #     should have been downloaded prior to this invocation.\n-        #\n-        #   --keep-failed     keep build tree of failed builds\n-        #\n-        #     When builds of the Guix environment itself (not Bitcoin Core)\n-        #     fail, it is useful for the build tree to be kept for debugging\n-        #     purposes.\n-        #\n-        #  ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"}\n-        #\n-        #                     fetch substitute from SUBSTITUTE_URLS if they are\n-        #                     authorized\n-        #\n-        #    Depending on the user's security model, it may be desirable to use\n-        #    substitutes (pre-built packages) from servers that the user trusts.\n-        #    Please read the README.md in the same directory as this file for\n-        #    more information.\n-        #\n-        # shellcheck disable=SC2086,SC2031\n-        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n-                                 --container \\\n-                                 --pure \\\n-                                 --no-cwd \\\n-                                 --share=\"$PWD\"=/bitcoin \\\n-                                 --share=\"$DISTSRC_BASE\"=/distsrc-base \\\n-                                 --share=\"$OUTDIR_BASE\"=/outdir-base \\\n-                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n-                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n-                                 ${BASE_CACHE:+--share=\"$BASE_CACHE\"} \\\n-                                 ${SDK_PATH:+--share=\"$SDK_PATH\"} \\\n-                                 --cores=\"$JOBS\" \\\n-                                 --keep-failed \\\n-                                 --fallback \\\n-                                 --link-profile \\\n-                                 --root=\"$(profiledir_for_host \"${HOST}\")\" \\\n-                                 ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n-                                 ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n-                                 -- env HOST=\"$host\" \\\n-                                        DISTNAME=\"$DISTNAME\" \\\n-                                        JOBS=\"$JOBS\" \\\n-                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n-                                        ${V:+V=1} \\\n-                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n-                                        ${BASE_CACHE:+BASE_CACHE=\"$BASE_CACHE\"} \\\n-                                        ${SDK_PATH:+SDK_PATH=\"$SDK_PATH\"} \\\n-                                        DISTSRC=\"$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")\" \\\n-                                        OUTDIR=\"$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\")\" \\\n-                                        DIST_ARCHIVE_BASE=/outdir-base/dist-archive \\\n-                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n-    )\n-\n-done"
      },
      {
        "sha": "2daa8aba5ec9544dc50cc7087de474cf02770e32",
        "filename": "contrib/guix/guix-build.sh",
        "status": "added",
        "additions": 45,
        "deletions": 0,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/guix-build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/guix-build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-build.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,45 @@\n+#!/usr/bin/env bash\n+export LC_ALL=C\n+set -e -o pipefail\n+\n+# Determine the maximum number of jobs to run simultaneously (overridable by\n+# environment)\n+MAX_JOBS=\"${MAX_JOBS:-$(nproc)}\"\n+\n+# Download the depends sources now as we won't have internet access in the build\n+# container\n+make -C \"${PWD}/depends\" -j\"$MAX_JOBS\" download ${V:+V=1} ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"}\n+\n+# Determine the reference time used for determinism (overridable by environment)\n+SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git log --format=%at -1)}\"\n+\n+time-machine() {\n+    guix time-machine --url=https://github.com/dongcarl/guix.git \\\n+                      --commit=b3a7c72c8b2425f8ddb0fc6e3b1caeed40f86dee \\\n+                      -- \"$@\"\n+}\n+\n+# Deterministically build Bitcoin Core for HOSTs (overriable by environment)\n+for host in ${HOSTS=x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu riscv64-linux-gnu}; do\n+\n+    # Display proper warning when the user interrupts the build\n+    trap 'echo \"** INT received while building ${host}, you may want to clean up the relevant output and distsrc-* directories before rebuilding\"' INT\n+\n+    # Run the build script 'contrib/guix/libexec/build.sh' in the build\n+    # container specified by 'contrib/guix/manifest.scm'\n+    # shellcheck disable=SC2086\n+    time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n+                             --container \\\n+                             --pure \\\n+                             --no-cwd \\\n+                             --share=\"$PWD\"=/bitcoin \\\n+                             ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n+                             ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n+                             -- env HOST=\"$host\" \\\n+                                    MAX_JOBS=\"$MAX_JOBS\" \\\n+                                    SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n+                                    ${V:+V=1} \\\n+                                    ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n+                                  bash -c \"cd /bitcoin && bash contrib/guix/libexec/build.sh\"\n+\n+done"
      },
      {
        "sha": "9fa17191e80888902f52b30dcca16fd37adbf0cd",
        "filename": "contrib/guix/guix-clean",
        "status": "removed",
        "additions": 0,
        "deletions": 83,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-clean",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-clean",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-clean?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,83 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Source the common prelude, which:\n-#   1. Checks if we're at the top directory of the Bitcoin Core repository\n-#   2. Defines a few common functions and variables\n-#\n-# shellcheck source=libexec/prelude.bash\n-source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n-\n-\n-###################\n-## Sanity Checks ##\n-###################\n-\n-################\n-# Required non-builtin commands should be invokable\n-################\n-\n-check_tools cat mkdir make git guix\n-\n-\n-#############\n-##  Clean  ##\n-#############\n-\n-# Usage: under_dir MAYBE_PARENT MAYBE_CHILD\n-#\n-# If MAYBE_CHILD is a subdirectory of MAYBE_PARENT, print the relative path\n-# from MAYBE_PARENT to MAYBE_CHILD. Otherwise, return 1 as the error code.\n-#\n-# NOTE: This does not perform any symlink-resolving or path canonicalization.\n-#\n-under_dir() {\n-    local path_residue\n-    path_residue=\"${2##${1}}\"\n-    if [ -z \"$path_residue\" ] || [ \"$path_residue\" = \"$2\" ]; then\n-        return 1\n-    else\n-        echo \"$path_residue\"\n-    fi\n-}\n-\n-# Usage: dir_under_git_root MAYBE_CHILD\n-#\n-# If MAYBE_CHILD is under the current git repository and exists, print the\n-# relative path from the git repository's top-level directory to MAYBE_CHILD,\n-# otherwise, exit with an error code.\n-#\n-dir_under_git_root() {\n-    local rv\n-    rv=\"$(under_dir \"$(git_root)\" \"$1\")\"\n-    [ -n \"$rv\" ] && echo \"$rv\"\n-}\n-\n-shopt -s nullglob\n-found_precious_dirs_files=( \"${version_base_prefix}\"*/\"${var_base_basename}/precious_dirs\" ) # This expands to an array of directories...\n-shopt -u nullglob\n-\n-exclude_flags=()\n-\n-for precious_dirs_file in \"${found_precious_dirs_files[@]}\"; do\n-    # Make sure the precious directories (e.g. SOURCES_PATH, BASE_CACHE, SDK_PATH)\n-    # are excluded from git-clean\n-    echo \"Found precious_dirs file: '${precious_dirs_file}'\"\n-\n-    # Exclude the precious_dirs file itself\n-    if dirs_file_exclude_fragment=$(dir_under_git_root \"$(dirname \"$precious_dirs_file\")\"); then\n-        exclude_flags+=( --exclude=\"${dirs_file_exclude_fragment}/precious_dirs\" )\n-    fi\n-\n-    # Read each 'name=dir' pair from the precious_dirs file\n-    while IFS='=' read -r name dir; do\n-        # Add an exclusion flag if the precious directory is under the git root.\n-        if under=$(dir_under_git_root \"$dir\"); then\n-            echo \"Avoiding ${name}: ${under}\"\n-            exclude_flags+=( --exclude=\"$under\" )\n-        fi\n-    done < \"$precious_dirs_file\"\n-done\n-\n-git clean -xdff \"${exclude_flags[@]}\""
      },
      {
        "sha": "aff897037dab3a55d7a5ad57155b9926487780fc",
        "filename": "contrib/guix/guix-codesign",
        "status": "removed",
        "additions": 0,
        "deletions": 392,
        "changes": 392,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-codesign",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-codesign",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-codesign?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,392 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Source the common prelude, which:\n-#   1. Checks if we're at the top directory of the Bitcoin Core repository\n-#   2. Defines a few common functions and variables\n-#\n-# shellcheck source=libexec/prelude.bash\n-source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n-\n-\n-###################\n-## SANITY CHECKS ##\n-###################\n-\n-################\n-# Required non-builtin commands should be invocable\n-################\n-\n-check_tools cat mkdir git guix\n-\n-################\n-# Required env vars should be non-empty\n-################\n-\n-cmd_usage() {\n-    cat <<EOF\n-Synopsis:\n-\n-    env DETACHED_SIGS_REPO=<path/to/bitcoin-detached-sigs> \\\\\n-      ./contrib/guix/guix-codesign\n-\n-EOF\n-}\n-\n-if [ -z \"$DETACHED_SIGS_REPO\" ]; then\n-    cmd_usage\n-    exit 1\n-fi\n-\n-################\n-# GUIX_BUILD_OPTIONS should be empty\n-################\n-#\n-# GUIX_BUILD_OPTIONS is an environment variable recognized by guix commands that\n-# can perform builds. This seems like what we want instead of\n-# ADDITIONAL_GUIX_COMMON_FLAGS, but the value of GUIX_BUILD_OPTIONS is actually\n-# _appended_ to normal command-line options. Meaning that they will take\n-# precedence over the command-specific ADDITIONAL_GUIX_<CMD>_FLAGS.\n-#\n-# This seems like a poor user experience. Thus we check for GUIX_BUILD_OPTIONS's\n-# existence here and direct users of this script to use our (more flexible)\n-# custom environment variables.\n-if [ -n \"$GUIX_BUILD_OPTIONS\" ]; then\n-cat << EOF\n-Error: Environment variable GUIX_BUILD_OPTIONS is not empty:\n-  '$GUIX_BUILD_OPTIONS'\n-\n-Unfortunately this script is incompatible with GUIX_BUILD_OPTIONS, please unset\n-GUIX_BUILD_OPTIONS and use ADDITIONAL_GUIX_COMMON_FLAGS to set build options\n-across guix commands or ADDITIONAL_GUIX_<CMD>_FLAGS to set build options for a\n-specific guix command.\n-\n-See contrib/guix/README.md for more details.\n-EOF\n-exit 1\n-fi\n-\n-################\n-# The codesignature git worktree should not be dirty\n-################\n-\n-if ! git -C \"$DETACHED_SIGS_REPO\" diff-index --quiet HEAD -- && [ -z \"$FORCE_DIRTY_WORKTREE\" ]; then\n-    cat << EOF\n-ERR: The DETACHED CODESIGNATURE git worktree is dirty, which may lead to broken builds.\n-\n-     Aborting...\n-\n-Hint: To make your git worktree clean, You may want to:\n-      1. Commit your changes,\n-      2. Stash your changes, or\n-      3. Set the 'FORCE_DIRTY_WORKTREE' environment variable if you insist on\n-         using a dirty worktree\n-EOF\n-    exit 1\n-fi\n-\n-################\n-# Build directories should not exist\n-################\n-\n-# Default to building for all supported HOSTs (overridable by environment)\n-export HOSTS=\"${HOSTS:-x86_64-w64-mingw32 x86_64-apple-darwin19}\"\n-\n-# Usage: distsrc_for_host HOST\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-distsrc_for_host() {\n-    echo \"${DISTSRC_BASE}/distsrc-${VERSION}-${1}-codesigned\"\n-}\n-\n-# Accumulate a list of build directories that already exist...\n-hosts_distsrc_exists=\"\"\n-for host in $HOSTS; do\n-    if [ -e \"$(distsrc_for_host \"$host\")\" ]; then\n-        hosts_distsrc_exists+=\" ${host}\"\n-    fi\n-done\n-\n-if [ -n \"$hosts_distsrc_exists\" ]; then\n-# ...so that we can print them out nicely in an error message\n-cat << EOF\n-ERR: Build directories for this commit already exist for the following platform\n-     triples you're attempting to build, probably because of previous builds.\n-     Please remove, or otherwise deal with them prior to starting another build.\n-\n-     Aborting...\n-\n-Hint: To blow everything away, you may want to use:\n-\n-  $ ./contrib/guix/guix-clean\n-\n-Specifically, this will remove all files without an entry in the index,\n-excluding the SDK directory, the depends download cache, the depends built\n-packages cache, the garbage collector roots for Guix environments, and the\n-output directory.\n-EOF\n-for host in $hosts_distsrc_exists; do\n-    echo \"     ${host} '$(distsrc_for_host \"$host\")'\"\n-done\n-exit 1\n-else\n-    mkdir -p \"$DISTSRC_BASE\"\n-fi\n-\n-\n-################\n-# Unsigned tarballs SHOULD exist\n-################\n-\n-# Usage: outdir_for_host HOST SUFFIX\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-outdir_for_host() {\n-    echo \"${OUTDIR_BASE}/${1}${2:+-${2}}\"\n-}\n-\n-\n-unsigned_tarball_for_host() {\n-    case \"$1\" in\n-        *mingw*)\n-            echo \"$(outdir_for_host \"$1\")/${DISTNAME}-win-unsigned.tar.gz\"\n-            ;;\n-        *darwin*)\n-            echo \"$(outdir_for_host \"$1\")/${DISTNAME}-osx-unsigned.tar.gz\"\n-            ;;\n-        *)\n-            exit 1\n-            ;;\n-    esac\n-}\n-\n-# Accumulate a list of build directories that already exist...\n-hosts_unsigned_tarball_missing=\"\"\n-for host in $HOSTS; do\n-    if [ ! -e \"$(unsigned_tarball_for_host \"$host\")\" ]; then\n-        hosts_unsigned_tarball_missing+=\" ${host}\"\n-    fi\n-done\n-\n-if [ -n \"$hosts_unsigned_tarball_missing\" ]; then\n-    # ...so that we can print them out nicely in an error message\n-    cat << EOF\n-ERR: Unsigned tarballs do not exist\n-...\n-\n-EOF\n-for host in $hosts_unsigned_tarball_missing; do\n-    echo \"     ${host} '$(unsigned_tarball_for_host \"$host\")'\"\n-done\n-exit 1\n-fi\n-\n-################\n-# Check that we can connect to the guix-daemon\n-################\n-\n-cat << EOF\n-Checking that we can connect to the guix-daemon...\n-\n-Hint: If this hangs, you may want to try turning your guix-daemon off and on\n-      again.\n-\n-EOF\n-if ! guix gc --list-failures > /dev/null; then\n-    cat << EOF\n-\n-ERR: Failed to connect to the guix-daemon, please ensure that one is running and\n-     reachable.\n-EOF\n-    exit 1\n-fi\n-\n-# Developer note: we could use `guix repl` for this check and run:\n-#\n-#     (import (guix store)) (close-connection (open-connection))\n-#\n-# However, the internal API is likely to change more than the CLI invocation\n-\n-\n-#########\n-# SETUP #\n-#########\n-\n-# Determine the maximum number of jobs to run simultaneously (overridable by\n-# environment)\n-JOBS=\"${JOBS:-$(nproc)}\"\n-\n-# Determine the reference time used for determinism (overridable by environment)\n-SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:-$(git -c log.showSignature=false log --format=%at -1)}\"\n-\n-# Execute \"$@\" in a pinned, possibly older version of Guix, for reproducibility\n-# across time.\n-time-machine() {\n-    # shellcheck disable=SC2086\n-    guix time-machine --url=https://git.savannah.gnu.org/git/guix.git \\\n-                      --commit=aa34d4d28dfe25ba47d5800d05000fb7221788c0 \\\n-                      --cores=\"$JOBS\" \\\n-                      --keep-failed \\\n-                      --fallback \\\n-                      ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n-                      ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_TIMEMACHINE_FLAGS} \\\n-                      -- \"$@\"\n-}\n-\n-# Make sure an output directory exists for our builds\n-OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n-mkdir -p \"$OUTDIR_BASE\"\n-\n-# Usage: profiledir_for_host HOST SUFFIX\n-#\n-#   HOST: The current platform triple we're building for\n-#\n-profiledir_for_host() {\n-    echo \"${PROFILES_BASE}/${1}${2:+-${2}}\"\n-}\n-\n-#########\n-# BUILD #\n-#########\n-\n-# Function to be called when codesigning for host ${1} and the user interrupts\n-# the codesign\n-int_trap() {\n-cat << EOF\n-** INT received while codesigning ${1}, you may want to clean up the relevant\n-   work directories (e.g. distsrc-*) before recodesigning\n-\n-Hint: To blow everything away, you may want to use:\n-\n-  $ ./contrib/guix/guix-clean\n-\n-Specifically, this will remove all files without an entry in the index,\n-excluding the SDK directory, the depends download cache, the depends built\n-packages cache, the garbage collector roots for Guix environments, and the\n-output directory.\n-EOF\n-}\n-\n-# Deterministically build Bitcoin Core\n-# shellcheck disable=SC2153\n-for host in $HOSTS; do\n-\n-    # Display proper warning when the user interrupts the build\n-    trap 'int_trap ${host}' INT\n-\n-    (\n-        # Required for 'contrib/guix/manifest.scm' to output the right manifest\n-        # for the particular $HOST we're building for\n-        export HOST=\"$host\"\n-\n-        # shellcheck disable=SC2030\n-cat << EOF\n-INFO: Codesigning ${VERSION:?not set} for platform triple ${HOST:?not set}:\n-      ...using reference timestamp: ${SOURCE_DATE_EPOCH:?not set}\n-      ...from worktree directory: '${PWD}'\n-          ...bind-mounted in container to: '/bitcoin'\n-      ...in build directory: '$(distsrc_for_host \"$HOST\")'\n-          ...bind-mounted in container to: '$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")'\n-      ...outputting in: '$(outdir_for_host \"$HOST\" codesigned)'\n-          ...bind-mounted in container to: '$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\" codesigned)'\n-      ...using detached signatures in: '${DETACHED_SIGS_REPO:?not set}'\n-          ...bind-mounted in container to: '/detached-sigs'\n-EOF\n-\n-\n-        # Run the build script 'contrib/guix/libexec/build.sh' in the build\n-        # container specified by 'contrib/guix/manifest.scm'.\n-        #\n-        # Explanation of `guix environment` flags:\n-        #\n-        #   --container        run command within an isolated container\n-        #\n-        #     Running in an isolated container minimizes build-time differences\n-        #     between machines and improves reproducibility\n-        #\n-        #   --pure             unset existing environment variables\n-        #\n-        #     Same rationale as --container\n-        #\n-        #   --no-cwd           do not share current working directory with an\n-        #                      isolated container\n-        #\n-        #     When --container is specified, the default behavior is to share\n-        #     the current working directory with the isolated container at the\n-        #     same exact path (e.g. mapping '/home/satoshi/bitcoin/' to\n-        #     '/home/satoshi/bitcoin/'). This means that the $PWD inside the\n-        #     container becomes a source of irreproducibility. --no-cwd disables\n-        #     this behaviour.\n-        #\n-        #   --share=SPEC       for containers, share writable host file system\n-        #                      according to SPEC\n-        #\n-        #   --share=\"$PWD\"=/bitcoin\n-        #\n-        #                     maps our current working directory to /bitcoin\n-        #                     inside the isolated container, which we later cd\n-        #                     into.\n-        #\n-        #     While we don't want to map our current working directory to the\n-        #     same exact path (as this introduces irreproducibility), we do want\n-        #     it to be at a _fixed_ path _somewhere_ inside the isolated\n-        #     container so that we have something to build. '/bitcoin' was\n-        #     chosen arbitrarily.\n-        #\n-        #   ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"}\n-        #\n-        #                     make the downloaded depends sources path available\n-        #                     inside the isolated container\n-        #\n-        #     The isolated container has no network access as it's in a\n-        #     different network namespace from the main machine, so we have to\n-        #     make the downloaded depends sources available to it. The sources\n-        #     should have been downloaded prior to this invocation.\n-        #\n-        #  ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"}\n-        #\n-        #                     fetch substitute from SUBSTITUTE_URLS if they are\n-        #                     authorized\n-        #\n-        #    Depending on the user's security model, it may be desirable to use\n-        #    substitutes (pre-built packages) from servers that the user trusts.\n-        #    Please read the README.md in the same directory as this file for\n-        #    more information.\n-        #\n-        # shellcheck disable=SC2086,SC2031\n-        time-machine environment --manifest=\"${PWD}/contrib/guix/manifest.scm\" \\\n-                                 --container \\\n-                                 --pure \\\n-                                 --no-cwd \\\n-                                 --share=\"$PWD\"=/bitcoin \\\n-                                 --share=\"$DISTSRC_BASE\"=/distsrc-base \\\n-                                 --share=\"$OUTDIR_BASE\"=/outdir-base \\\n-                                 --share=\"$DETACHED_SIGS_REPO\"=/detached-sigs \\\n-                                 --expose=\"$(git rev-parse --git-common-dir)\" \\\n-                                 --expose=\"$(git -C \"$DETACHED_SIGS_REPO\" rev-parse --git-common-dir)\" \\\n-                                 ${SOURCES_PATH:+--share=\"$SOURCES_PATH\"} \\\n-                                 --cores=\"$JOBS\" \\\n-                                 --keep-failed \\\n-                                 --fallback \\\n-                                 --link-profile \\\n-                                 --root=\"$(profiledir_for_host \"${HOST}\" codesigned)\" \\\n-                                 ${SUBSTITUTE_URLS:+--substitute-urls=\"$SUBSTITUTE_URLS\"} \\\n-                                 ${ADDITIONAL_GUIX_COMMON_FLAGS} ${ADDITIONAL_GUIX_ENVIRONMENT_FLAGS} \\\n-                                 -- env HOST=\"$host\" \\\n-                                        DISTNAME=\"$DISTNAME\" \\\n-                                        JOBS=\"$JOBS\" \\\n-                                        SOURCE_DATE_EPOCH=\"${SOURCE_DATE_EPOCH:?unable to determine value}\" \\\n-                                        ${V:+V=1} \\\n-                                        ${SOURCES_PATH:+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n-                                        DISTSRC=\"$(DISTSRC_BASE=/distsrc-base && distsrc_for_host \"$HOST\")\" \\\n-                                        OUTDIR=\"$(OUTDIR_BASE=/outdir-base && outdir_for_host \"$HOST\" codesigned)\" \\\n-                                        DIST_ARCHIVE_BASE=/outdir-base/dist-archive \\\n-                                        DETACHED_SIGS_REPO=/detached-sigs \\\n-                                        UNSIGNED_TARBALL=\"$(OUTDIR_BASE=/outdir-base && unsigned_tarball_for_host \"$HOST\")\" \\\n-                                      bash -c \"cd /bitcoin && bash contrib/guix/libexec/codesign.sh\"\n-    )\n-\n-done"
      },
      {
        "sha": "02ae022741babdc9e5f73376a82e407825e72a6e",
        "filename": "contrib/guix/guix-verify",
        "status": "removed",
        "additions": 0,
        "deletions": 174,
        "changes": 174,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-verify",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/guix-verify",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/guix-verify?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,174 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# Source the common prelude, which:\n-#   1. Checks if we're at the top directory of the Bitcoin Core repository\n-#   2. Defines a few common functions and variables\n-#\n-# shellcheck source=libexec/prelude.bash\n-source \"$(dirname \"${BASH_SOURCE[0]}\")/libexec/prelude.bash\"\n-\n-\n-###################\n-## Sanity Checks ##\n-###################\n-\n-################\n-# Required non-builtin commands should be invokable\n-################\n-\n-check_tools cat diff gpg\n-\n-################\n-# Required env vars should be non-empty\n-################\n-\n-cmd_usage() {\n-cat <<EOF\n-Synopsis:\n-\n-    env GUIX_SIGS_REPO=<path/to/guix.sigs> [ SIGNER=<signer> ] ./contrib/guix/guix-verify\n-\n-Example overriding signer's manifest to use as base\n-\n-    env GUIX_SIGS_REPO=/home/dongcarl/guix.sigs SIGNER=achow101 ./contrib/guix/guix-verify\n-\n-EOF\n-}\n-\n-if [ -z \"$GUIX_SIGS_REPO\" ]; then\n-    cmd_usage\n-    exit 1\n-fi\n-\n-################\n-# GUIX_SIGS_REPO should exist as a directory\n-################\n-\n-if [ ! -d \"$GUIX_SIGS_REPO\" ]; then\n-cat << EOF\n-ERR: The specified GUIX_SIGS_REPO is not an existent directory:\n-\n-    '$GUIX_SIGS_REPO'\n-\n-Hint: Please clone the guix.sigs repository and point to it with the\n-      GUIX_SIGS_REPO environment variable.\n-\n-EOF\n-cmd_usage\n-exit 1\n-fi\n-\n-##############\n-##  Verify  ##\n-##############\n-\n-OUTSIGDIR_BASE=\"${GUIX_SIGS_REPO}/${VERSION}\"\n-echo \"Looking for signature directories in '${OUTSIGDIR_BASE}'\"\n-echo \"\"\n-\n-# Usage: verify compare_manifest current_manifest\n-verify() {\n-    local compare_manifest=\"$1\"\n-    local current_manifest=\"$2\"\n-    if ! gpg --quiet --batch --verify \"$current_manifest\".asc \"$current_manifest\" 1>&2; then\n-        echo \"ERR: Failed to verify GPG signature in '${current_manifest}'\"\n-        echo \"\"\n-        echo \"Hint: Either the signature is invalid or the public key is missing\"\n-        echo \"\"\n-        failure=1\n-    elif ! diff --report-identical \"$compare_manifest\" \"$current_manifest\" 1>&2; then\n-        echo \"ERR: The SHA256SUMS attestation in these two directories differ:\"\n-        echo \"    '${compare_manifest}'\"\n-        echo \"    '${current_manifest}'\"\n-        echo \"\"\n-        failure=1\n-    else\n-        echo \"Verified: '${current_manifest}'\"\n-        echo \"\"\n-    fi\n-}\n-\n-shopt -s nullglob\n-all_noncodesigned=( \"$OUTSIGDIR_BASE\"/*/noncodesigned.SHA256SUMS )\n-shopt -u nullglob\n-\n-echo \"--------------------\"\n-echo \"\"\n-if (( ${#all_noncodesigned[@]} )); then\n-    compare_noncodesigned=\"${all_noncodesigned[0]}\"\n-    if [[ -n \"$SIGNER\" ]]; then\n-        signer_noncodesigned=\"$OUTSIGDIR_BASE/$SIGNER/noncodesigned.SHA256SUMS\"\n-        if [[ -f \"$signer_noncodesigned\" ]]; then\n-            echo \"Using $SIGNER's manifest as the base to compare against\"\n-            compare_noncodesigned=\"$signer_noncodesigned\"\n-        else\n-            echo \"Unable to find $SIGNER's manifest, using the first one found\"\n-        fi\n-    else\n-        echo \"No SIGNER provided, using the first manifest found\"\n-    fi\n-\n-    for current_manifest in \"${all_noncodesigned[@]}\"; do\n-        verify \"$compare_noncodesigned\" \"$current_manifest\"\n-    done\n-\n-    echo \"DONE: Checking output signatures for noncodesigned.SHA256SUMS\"\n-    echo \"\"\n-else\n-    echo \"WARN: No signature directories with noncodesigned.SHA256SUMS found\"\n-    echo \"\"\n-fi\n-\n-shopt -s nullglob\n-all_all=( \"$OUTSIGDIR_BASE\"/*/all.SHA256SUMS )\n-shopt -u nullglob\n-\n-echo \"--------------------\"\n-echo \"\"\n-if (( ${#all_all[@]} )); then\n-    compare_all=\"${all_all[0]}\"\n-    if [[ -n \"$SIGNER\" ]]; then\n-        signer_all=\"$OUTSIGDIR_BASE/$SIGNER/all.SHA256SUMS\"\n-        if [[ -f \"$signer_all\" ]]; then\n-            echo \"Using $SIGNER's manifest as the base to compare against\"\n-            compare_all=\"$signer_all\"\n-        else\n-            echo \"Unable to find $SIGNER's manifest, using the first one found\"\n-        fi\n-    else\n-        echo \"No SIGNER provided, using the first manifest found\"\n-    fi\n-\n-    for current_manifest in \"${all_all[@]}\"; do\n-        verify \"$compare_all\" \"$current_manifest\"\n-    done\n-\n-    # Sanity check: there should be no entries that exist in\n-    # noncodesigned.SHA256SUMS that doesn't exist in all.SHA256SUMS\n-    if [[ \"$(comm -23 <(sort \"$compare_noncodesigned\") <(sort \"$compare_all\") | wc -c)\" -ne 0 ]]; then\n-        echo \"ERR: There are unique lines in noncodesigned.SHA256SUMS which\"\n-        echo \"     do not exist in all.SHA256SUMS, something went very wrong.\"\n-        exit 1\n-    fi\n-\n-    echo \"DONE: Checking output signatures for all.SHA256SUMS\"\n-    echo \"\"\n-else\n-    echo \"WARN: No signature directories with all.SHA256SUMS found\"\n-    echo \"\"\n-fi\n-\n-echo \"====================\"\n-echo \"\"\n-if (( ${#all_noncodesigned[@]} + ${#all_all[@]} == 0 )); then\n-    echo \"ERR: Unable to perform any verifications as no signature directories\"\n-    echo \"     were found\"\n-    echo \"\"\n-    exit 1\n-fi\n-\n-if [ -n \"$failure\" ]; then\n-    exit 1\n-fi"
      },
      {
        "sha": "ee207a957c12be10c155fec9ae8aa856ea3906e5",
        "filename": "contrib/guix/libexec/build.sh",
        "status": "modified",
        "additions": 93,
        "deletions": 341,
        "changes": 434,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/libexec/build.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/libexec/build.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/build.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,40 +1,10 @@\n #!/usr/bin/env bash\n export LC_ALL=C\n set -e -o pipefail\n-export TZ=UTC\n-\n-# Although Guix _does_ set umask when building its own packages (in our case,\n-# this is all packages in manifest.scm), it does not set it for `guix\n-# environment`. It does make sense for at least `guix environment --container`\n-# to set umask, so if that change gets merged upstream and we bump the\n-# time-machine to a commit which includes the aforementioned change, we can\n-# remove this line.\n-#\n-# This line should be placed before any commands which creates files.\n-umask 0022\n-\n-if [ -n \"$V\" ]; then\n-    # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n-    # read from this file.\n-    set -vx\n-    # Set VERBOSE for CMake-based builds\n-    export VERBOSE=\"$V\"\n-fi\n \n-# Check that required environment variables are set\n-cat << EOF\n-Required environment variables as seen inside the container:\n-    DIST_ARCHIVE_BASE: ${DIST_ARCHIVE_BASE:?not set}\n-    DISTNAME: ${DISTNAME:?not set}\n-    HOST: ${HOST:?not set}\n-    SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:?not set}\n-    JOBS: ${JOBS:?not set}\n-    DISTSRC: ${DISTSRC:?not set}\n-    OUTDIR: ${OUTDIR:?not set}\n-EOF\n-\n-ACTUAL_OUTDIR=\"${OUTDIR}\"\n-OUTDIR=\"${DISTSRC}/output\"\n+# Check that environment variables assumed to be set by the environment are set\n+echo \"Building for platform triple ${HOST:?not set} with reference timestamp ${SOURCE_DATE_EPOCH:?not set}...\"\n+echo \"At most ${MAX_JOBS:?not set} jobs will run at once...\"\n \n #####################\n # Environment Setup #\n@@ -44,6 +14,19 @@ OUTDIR=\"${DISTSRC}/output\"\n # $HOSTs after successfully building.\n BASEPREFIX=\"${PWD}/depends\"\n \n+# Setup an output directory for our build\n+OUTDIR=\"${OUTDIR:-${PWD}/output}\"\n+[ -e \"$OUTDIR\" ] || mkdir -p \"$OUTDIR\"\n+\n+# Setup the directory where our Bitcoin Core build for HOST will occur\n+DISTSRC=\"${DISTSRC:-${PWD}/distsrc-${HOST}}\"\n+if [ -e \"$DISTSRC\" ]; then\n+    echo \"DISTSRC directory '${DISTSRC}' exists, probably because of previous builds... Aborting...\"\n+    exit 1\n+else\n+    mkdir -p \"$DISTSRC\"\n+fi\n+\n # Given a package name and an output name, return the path of that output in our\n # current guix environment\n store_path() {\n@@ -53,104 +36,35 @@ store_path() {\n               --expression='s|\"[[:space:]]*$||'\n }\n \n+# Determine output paths to use in CROSS_* environment variables\n+CROSS_GLIBC=\"$(store_path glibc-cross-${HOST})\"\n+CROSS_GLIBC_STATIC=\"$(store_path glibc-cross-${HOST} static)\"\n+CROSS_KERNEL=\"$(store_path linux-libre-headers-cross-${HOST})\"\n+CROSS_GCC=\"$(store_path gcc-cross-${HOST})\"\n+CROSS_GCC_LIBS=( \"${CROSS_GCC}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n+CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n \n-# Set environment variables to point the NATIVE toolchain to the right\n-# includes/libs\n-NATIVE_GCC=\"$(store_path gcc-toolchain)\"\n-NATIVE_GCC_STATIC=\"$(store_path gcc-toolchain static)\"\n-\n-unset LIBRARY_PATH\n-unset CPATH\n-unset C_INCLUDE_PATH\n-unset CPLUS_INCLUDE_PATH\n-unset OBJC_INCLUDE_PATH\n-unset OBJCPLUS_INCLUDE_PATH\n-\n-export LIBRARY_PATH=\"${NATIVE_GCC}/lib:${NATIVE_GCC}/lib64:${NATIVE_GCC_STATIC}/lib:${NATIVE_GCC_STATIC}/lib64\"\n-export C_INCLUDE_PATH=\"${NATIVE_GCC}/include\"\n-export CPLUS_INCLUDE_PATH=\"${NATIVE_GCC}/include/c++:${NATIVE_GCC}/include\"\n-export OBJC_INCLUDE_PATH=\"${NATIVE_GCC}/include\"\n-export OBJCPLUS_INCLUDE_PATH=\"${NATIVE_GCC}/include/c++:${NATIVE_GCC}/include\"\n-\n-prepend_to_search_env_var() {\n-    export \"${1}=${2}${!1:+:}${!1}\"\n-}\n-\n-case \"$HOST\" in\n-    *darwin*)\n-        # When targeting darwin, zlib is required by native_libdmg-hfsplus.\n-        zlib_store_path=$(store_path \"zlib\")\n-        zlib_static_store_path=$(store_path \"zlib\" static)\n-\n-        prepend_to_search_env_var LIBRARY_PATH \"${zlib_static_store_path}/lib:${zlib_store_path}/lib\"\n-        prepend_to_search_env_var C_INCLUDE_PATH \"${zlib_store_path}/include\"\n-        prepend_to_search_env_var CPLUS_INCLUDE_PATH \"${zlib_store_path}/include\"\n-        prepend_to_search_env_var OBJC_INCLUDE_PATH \"${zlib_store_path}/include\"\n-        prepend_to_search_env_var OBJCPLUS_INCLUDE_PATH \"${zlib_store_path}/include\"\n-esac\n-\n-# Set environment variables to point the CROSS toolchain to the right\n+# Set environment variables to point Guix's cross-toolchain to the right\n # includes/libs for $HOST\n-case \"$HOST\" in\n-    *mingw*)\n-        # Determine output paths to use in CROSS_* environment variables\n-        CROSS_GLIBC=\"$(store_path \"mingw-w64-x86_64-winpthreads\")\"\n-        CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n-        CROSS_GCC_LIB_STORE=\"$(store_path \"gcc-cross-${HOST}\" lib)\"\n-        CROSS_GCC_LIBS=( \"${CROSS_GCC_LIB_STORE}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n-        CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n-\n-        # The search path ordering is generally:\n-        #    1. gcc-related search paths\n-        #    2. libc-related search paths\n-        #    2. kernel-header-related search paths (not applicable to mingw-w64 hosts)\n-        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include\"\n-        export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n-        export CROSS_LIBRARY_PATH=\"${CROSS_GCC_LIB_STORE}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib\"\n-        ;;\n-    *darwin*)\n-        # The CROSS toolchain for darwin uses the SDK and ignores environment variables.\n-        # See depends/hosts/darwin.mk for more details.\n-        ;;\n-    *linux*)\n-        CROSS_GLIBC=\"$(store_path \"glibc-cross-${HOST}\")\"\n-        CROSS_GLIBC_STATIC=\"$(store_path \"glibc-cross-${HOST}\" static)\"\n-        CROSS_KERNEL=\"$(store_path \"linux-libre-headers-cross-${HOST}\")\"\n-        CROSS_GCC=\"$(store_path \"gcc-cross-${HOST}\")\"\n-        CROSS_GCC_LIB_STORE=\"$(store_path \"gcc-cross-${HOST}\" lib)\"\n-        CROSS_GCC_LIBS=( \"${CROSS_GCC_LIB_STORE}/lib/gcc/${HOST}\"/* ) # This expands to an array of directories...\n-        CROSS_GCC_LIB=\"${CROSS_GCC_LIBS[0]}\" # ...we just want the first one (there should only be one)\n-\n-        export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GCC_LIB}/include-fixed:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n-        export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n-        export CROSS_LIBRARY_PATH=\"${CROSS_GCC_LIB_STORE}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n-        ;;\n-    *)\n-        exit 1 ;;\n-esac\n+#\n+# NOTE: CROSS_C_INCLUDE_PATH is missing ${CROSS_GCC_LIB}/include-fixed, because\n+# the limits.h in it is missing a '#include_next <limits.h>'\n+#\n+export CROSS_C_INCLUDE_PATH=\"${CROSS_GCC_LIB}/include:${CROSS_GLIBC}/include:${CROSS_KERNEL}/include\"\n+export CROSS_CPLUS_INCLUDE_PATH=\"${CROSS_GCC}/include/c++:${CROSS_GCC}/include/c++/${HOST}:${CROSS_GCC}/include/c++/backward:${CROSS_C_INCLUDE_PATH}\"\n+export CROSS_LIBRARY_PATH=\"${CROSS_GCC}/lib:${CROSS_GCC}/${HOST}/lib:${CROSS_GCC_LIB}:${CROSS_GLIBC}/lib:${CROSS_GLIBC_STATIC}/lib\"\n \n # Sanity check CROSS_*_PATH directories\n IFS=':' read -ra PATHS <<< \"${CROSS_C_INCLUDE_PATH}:${CROSS_CPLUS_INCLUDE_PATH}:${CROSS_LIBRARY_PATH}\"\n for p in \"${PATHS[@]}\"; do\n-    if [ -n \"$p\" ] && [ ! -d \"$p\" ]; then\n+    if [ ! -d \"$p\" ]; then\n         echo \"'$p' doesn't exist or isn't a directory... Aborting...\"\n         exit 1\n     fi\n done\n \n # Disable Guix ld auto-rpath behavior\n-case \"$HOST\" in\n-    *darwin*)\n-        # The auto-rpath behavior is necessary for darwin builds as some native\n-        # tools built by depends refer to and depend on Guix-built native\n-        # libraries\n-        #\n-        # After the native packages in depends are built, the ld wrapper should\n-        # no longer affect our build, as clang would instead reach for\n-        # x86_64-apple-darwin19-ld from cctools\n-        ;;\n-    *) export GUIX_LD_WRAPPER_DISABLE_RPATH=yes ;;\n-esac\n+export GUIX_LD_WRAPPER_DISABLE_RPATH=yes\n \n # Make /usr/bin if it doesn't exist\n [ -e /usr/bin ] || mkdir -p /usr/bin\n@@ -160,47 +74,31 @@ esac\n [ -e /usr/bin/env ]  || ln -s --no-dereference \"$(command -v env)\"  /usr/bin/env\n \n # Determine the correct value for -Wl,--dynamic-linker for the current $HOST\n-case \"$HOST\" in\n-    *linux*)\n-        glibc_dynamic_linker=$(\n-            case \"$HOST\" in\n-                i686-linux-gnu)        echo /lib/ld-linux.so.2 ;;\n-                x86_64-linux-gnu)      echo /lib64/ld-linux-x86-64.so.2 ;;\n-                arm-linux-gnueabihf)   echo /lib/ld-linux-armhf.so.3 ;;\n-                aarch64-linux-gnu)     echo /lib/ld-linux-aarch64.so.1 ;;\n-                riscv64-linux-gnu)     echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n-                powerpc64-linux-gnu)   echo /lib64/ld64.so.1;;\n-                powerpc64le-linux-gnu) echo /lib64/ld64.so.2;;\n-                *)                     exit 1 ;;\n-            esac\n-        )\n-        ;;\n-esac\n+glibc_dynamic_linker=$(\n+    case \"$HOST\" in\n+        i686-linux-gnu)      echo /lib/ld-linux.so.2 ;;\n+        x86_64-linux-gnu)    echo /lib64/ld-linux-x86-64.so.2 ;;\n+        arm-linux-gnueabihf) echo /lib/ld-linux-armhf.so.3 ;;\n+        aarch64-linux-gnu)   echo /lib/ld-linux-aarch64.so.1 ;;\n+        riscv64-linux-gnu)   echo /lib/ld-linux-riscv64-lp64d.so.1 ;;\n+        *)                   exit 1 ;;\n+    esac\n+)\n \n # Environment variables for determinism\n+export QT_RCC_TEST=1\n+export QT_RCC_SOURCE_DATE_OVERRIDE=1\n export TAR_OPTIONS=\"--owner=0 --group=0 --numeric-owner --mtime='@${SOURCE_DATE_EPOCH}' --sort=name\"\n export TZ=\"UTC\"\n-case \"$HOST\" in\n-    *darwin*)\n-        # cctools AR, unlike GNU binutils AR, does not have a deterministic mode\n-        # or a configure flag to enable determinism by default, it only\n-        # understands if this env-var is set or not. See:\n-        #\n-        # https://github.com/tpoechtrager/cctools-port/blob/55562e4073dea0fbfd0b20e0bf69ffe6390c7f97/cctools/ar/archive.c#L334\n-        export ZERO_AR_DATE=yes\n-        ;;\n-esac\n \n ####################\n # Depends Building #\n ####################\n \n # Build the depends tree, overriding variables that assume multilib gcc\n-make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n+make -C depends --jobs=\"$MAX_JOBS\" HOST=\"$HOST\" \\\n                                    ${V:+V=1} \\\n                                    ${SOURCES_PATH+SOURCES_PATH=\"$SOURCES_PATH\"} \\\n-                                   ${BASE_CACHE+BASE_CACHE=\"$BASE_CACHE\"} \\\n-                                   ${SDK_PATH+SDK_PATH=\"$SDK_PATH\"} \\\n                                    i686_linux_CC=i686-linux-gnu-gcc \\\n                                    i686_linux_CXX=i686-linux-gnu-g++ \\\n                                    i686_linux_AR=i686-linux-gnu-ar \\\n@@ -213,77 +111,44 @@ make -C depends --jobs=\"$JOBS\" HOST=\"$HOST\" \\\n                                    x86_64_linux_RANLIB=x86_64-linux-gnu-ranlib \\\n                                    x86_64_linux_NM=x86_64-linux-gnu-nm \\\n                                    x86_64_linux_STRIP=x86_64-linux-gnu-strip \\\n-                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n-                                   qt_config_opts_x86_64_linux='-platform linux-g++ -xplatform bitcoin-linux-g++' \\\n-                                   FORCE_USE_SYSTEM_CLANG=1\n+                                   qt_config_opts_i686_linux='-platform linux-g++ -xplatform bitcoin-linux-g++'\n \n \n ###########################\n # Source Tarball Building #\n ###########################\n \n-GIT_ARCHIVE=\"${DIST_ARCHIVE_BASE}/${DISTNAME}.tar.gz\"\n-\n-# Create the source tarball if not already there\n-if [ ! -e \"$GIT_ARCHIVE\" ]; then\n-    mkdir -p \"$(dirname \"$GIT_ARCHIVE\")\"\n-    git archive --prefix=\"${DISTNAME}/\" --output=\"$GIT_ARCHIVE\" HEAD\n+# Create the source tarball and move it to \"${OUTDIR}/src\" if not already there\n+if [ -z \"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\" ]; then\n+    ./autogen.sh\n+    env CONFIG_SITE=\"${BASEPREFIX}/${HOST}/share/config.site\" ./configure --prefix=/\n+    make dist GZIP_ENV='-9n' ${V:+V=1}\n+    mkdir -p \"${OUTDIR}/src\"\n+    mv \"$(find \"${PWD}\" -name 'bitcoin-*.tar.gz')\" \"${OUTDIR}/src/\"\n fi\n \n-mkdir -p \"$OUTDIR\"\n+# Determine the full path to our source tarball\n+SOURCEDIST=\"$(find \"${OUTDIR}/src\" -name 'bitcoin-*.tar.gz')\"\n+# Determine our distribution name (e.g. bitcoin-0.18.0)\n+DISTNAME=\"$(basename \"$SOURCEDIST\" '.tar.gz')\"\n \n ###########################\n # Binary Tarball Building #\n ###########################\n \n-# CONFIGFLAGS\n-CONFIGFLAGS=\"--enable-reduce-exports --disable-bench --disable-gui-tests --disable-fuzz-binary\"\n-case \"$HOST\" in\n-    *linux*) CONFIGFLAGS+=\" --disable-threadlocal\" ;;\n-esac\n-\n-# CFLAGS\n-HOST_CFLAGS=\"-O2 -g\"\n-case \"$HOST\" in\n-    *linux*)  HOST_CFLAGS+=\" -ffile-prefix-map=${PWD}=.\" ;;\n-    *mingw*)  HOST_CFLAGS+=\" -fno-ident\" ;;\n-    *darwin*) unset HOST_CFLAGS ;;\n-esac\n-\n-# CXXFLAGS\n-HOST_CXXFLAGS=\"$HOST_CFLAGS\"\n-\n-case \"$HOST\" in\n-    arm-linux-gnueabihf) HOST_CXXFLAGS=\"${HOST_CXXFLAGS} -Wno-psabi\" ;;\n-esac\n-\n-# LDFLAGS\n-case \"$HOST\" in\n-    *linux*)  HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++ -Wl,-O2\" ;;\n-    *mingw*)  HOST_LDFLAGS=\"-Wl,--no-insert-timestamp\" ;;\n-esac\n-\n-# Using --no-tls-get-addr-optimize retains compatibility with glibc 2.17, by\n-# avoiding a PowerPC64 optimisation available in glibc 2.22 and later.\n-# https://sourceware.org/binutils/docs-2.35/ld/PowerPC64-ELF64.html\n-case \"$HOST\" in\n-    *powerpc64*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,--no-tls-get-addr-optimize\" ;;\n-esac\n-\n-case \"$HOST\" in\n-    powerpc64-linux-*|riscv64-linux-*) HOST_LDFLAGS=\"${HOST_LDFLAGS} -Wl,-z,noexecstack\" ;;\n-esac\n+# Similar flags to Gitian\n+CONFIGFLAGS=\"--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-gui-tests\"\n+HOST_CFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n+HOST_CXXFLAGS=\"-O2 -g -ffile-prefix-map=${PWD}=.\"\n+HOST_LDFLAGS=\"-Wl,--as-needed -Wl,--dynamic-linker=$glibc_dynamic_linker -static-libstdc++\"\n \n # Make $HOST-specific native binaries from depends available in $PATH\n export PATH=\"${BASEPREFIX}/${HOST}/native/bin:${PATH}\"\n-mkdir -p \"$DISTSRC\"\n (\n     cd \"$DISTSRC\"\n \n     # Extract the source tarball\n-    tar --strip-components=1 -xf \"${GIT_ARCHIVE}\"\n-\n-    ./autogen.sh\n+    tar --strip-components=1 -xf \"${SOURCEDIST}\"\n \n     # Configure this DISTSRC for $HOST\n     # shellcheck disable=SC2086\n@@ -293,170 +158,57 @@ mkdir -p \"$DISTSRC\"\n                     --disable-maintainer-mode \\\n                     --disable-dependency-tracking \\\n                     ${CONFIGFLAGS} \\\n-                    ${HOST_CFLAGS:+CFLAGS=\"${HOST_CFLAGS}\"} \\\n-                    ${HOST_CXXFLAGS:+CXXFLAGS=\"${HOST_CXXFLAGS}\"} \\\n-                    ${HOST_LDFLAGS:+LDFLAGS=\"${HOST_LDFLAGS}\"}\n+                    CFLAGS=\"${HOST_CFLAGS}\" \\\n+                    CXXFLAGS=\"${HOST_CXXFLAGS}\" \\\n+                    LDFLAGS=\"${HOST_LDFLAGS}\"\n \n-    sed -i.old 's/-lstdc++ //g' config.status libtool\n+    sed -i.old 's/-lstdc++ //g' config.status libtool src/univalue/config.status src/univalue/libtool\n \n     # Build Bitcoin Core\n-    make --jobs=\"$JOBS\" ${V:+V=1}\n+    make --jobs=\"$MAX_JOBS\" ${V:+V=1}\n \n-    # Check that symbol/security checks tools are sane.\n-    make test-security-check ${V:+V=1}\n-    # Perform basic security checks on a series of executables.\n+    # Perform basic ELF security checks on a series of executables.\n     make -C src --jobs=1 check-security ${V:+V=1}\n-    # Check that executables only contain allowed version symbols.\n+    # Check that executables only contain allowed gcc, glibc and libstdc++\n+    # version symbols for Linux distro back-compatibility.\n     make -C src --jobs=1 check-symbols  ${V:+V=1}\n \n-    mkdir -p \"$OUTDIR\"\n-\n-    # Make the os-specific installers\n-    case \"$HOST\" in\n-        *mingw*)\n-            make deploy ${V:+V=1} BITCOIN_WIN_INSTALLER=\"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n-            ;;\n-    esac\n-\n     # Setup the directory where our Bitcoin Core build for HOST will be\n     # installed. This directory will also later serve as the input for our\n     # binary tarballs.\n     INSTALLPATH=\"${PWD}/installed/${DISTNAME}\"\n     mkdir -p \"${INSTALLPATH}\"\n     # Install built Bitcoin Core to $INSTALLPATH\n-    case \"$HOST\" in\n-        *darwin*)\n-            make install-strip DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n-            ;;\n-        *)\n-            make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n-            ;;\n-    esac\n-\n-    case \"$HOST\" in\n-        *darwin*)\n-            make osx_volname ${V:+V=1}\n-            make deploydir ${V:+V=1}\n-            mkdir -p \"unsigned-app-${HOST}\"\n-            cp  --target-directory=\"unsigned-app-${HOST}\" \\\n-                osx_volname \\\n-                contrib/macdeploy/detached-sig-{apply,create}.sh \\\n-                \"${BASEPREFIX}/${HOST}\"/native/bin/dmg\n-            mv --target-directory=\"unsigned-app-${HOST}\" dist\n-            (\n-                cd \"unsigned-app-${HOST}\"\n-                find . -print0 \\\n-                    | sort --zero-terminated \\\n-                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz\" && exit 1 )\n-            )\n-            make deploy ${V:+V=1} OSX_DMG=\"${OUTDIR}/${DISTNAME}-osx-unsigned.dmg\"\n-            ;;\n-    esac\n+    make install DESTDIR=\"${INSTALLPATH}\" ${V:+V=1}\n     (\n         cd installed\n \n-        case \"$HOST\" in\n-            *mingw*)\n-                mv --target-directory=\"$DISTNAME\"/lib/ \"$DISTNAME\"/bin/*.dll\n-                ;;\n-        esac\n-\n         # Prune libtool and object archives\n         find . -name \"lib*.la\" -delete\n         find . -name \"lib*.a\" -delete\n \n         # Prune pkg-config files\n-        rm -rf \"${DISTNAME}/lib/pkgconfig\"\n-\n-        case \"$HOST\" in\n-            *darwin*) ;;\n-            *)\n-                # Split binaries and libraries from their debug symbols\n-                {\n-                    find \"${DISTNAME}/bin\" -type f -executable -print0\n-                    find \"${DISTNAME}/lib\" -type f -print0\n-                } | xargs -0 -n1 -P\"$JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n-                ;;\n-        esac\n-\n-        case \"$HOST\" in\n-            *mingw*)\n-                cp \"${DISTSRC}/doc/README_windows.txt\" \"${DISTNAME}/readme.txt\"\n-                ;;\n-            *linux*)\n-                cp \"${DISTSRC}/README.md\" \"${DISTNAME}/\"\n-                ;;\n-        esac\n+        rm -r \"${DISTNAME}/lib/pkgconfig\"\n \n-        # Finally, deterministically produce {non-,}debug binary tarballs ready\n-        # for release\n-        case \"$HOST\" in\n-            *mingw*)\n-                find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n-                    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\n-                find \"${DISTNAME}\" -not -name \"*.dbg\" \\\n-                    | sort \\\n-                    | zip -X@ \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}.zip\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}.zip\" && exit 1 )\n-                find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n-                    | xargs -0r touch --no-dereference --date=\"@${SOURCE_DATE_EPOCH}\"\n-                find \"${DISTNAME}\" -name \"*.dbg\" \\\n-                    | sort \\\n-                    | zip -X@ \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}-debug.zip\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-w64-mingw32/win64}-debug.zip\" && exit 1 )\n-                ;;\n-            *linux*)\n-                find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n-                    | sort --zero-terminated \\\n-                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" && exit 1 )\n-                find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n-                    | sort --zero-terminated \\\n-                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n-                ;;\n-            *darwin*)\n-                find \"${DISTNAME}\" -print0 \\\n-                    | sort --zero-terminated \\\n-                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin19/osx64}.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST//x86_64-apple-darwin19/osx64}.tar.gz\" && exit 1 )\n-                ;;\n-        esac\n-    )  # $DISTSRC/installed\n+        # Split binaries and libraries from their debug symbols\n+        {\n+            find \"${DISTNAME}/bin\" -type f -executable -print0\n+            find \"${DISTNAME}/lib\" -type f -print0\n+        } | xargs -0 -n1 -P\"$MAX_JOBS\" -I{} \"${DISTSRC}/contrib/devtools/split-debug.sh\" {} {} {}.dbg\n \n-    case \"$HOST\" in\n-        *mingw*)\n-            cp -rf --target-directory=. contrib/windeploy\n-            (\n-                cd ./windeploy\n-                mkdir -p unsigned\n-                cp --target-directory=unsigned/ \"${OUTDIR}/${DISTNAME}-win64-setup-unsigned.exe\"\n-                find . -print0 \\\n-                    | sort --zero-terminated \\\n-                    | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n-                    | gzip -9n > \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" \\\n-                    || ( rm -f \"${OUTDIR}/${DISTNAME}-win-unsigned.tar.gz\" && exit 1 )\n-            )\n-            ;;\n-    esac\n-)  # $DISTSRC\n+        cp \"${DISTSRC}/doc/README.md\" \"${DISTNAME}/\"\n \n-rm -rf \"$ACTUAL_OUTDIR\"\n-mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n-    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n-\n-(\n-    cd /outdir-base\n-    {\n-        echo \"$GIT_ARCHIVE\"\n-        find \"$ACTUAL_OUTDIR\" -type f\n-    } | xargs realpath --relative-base=\"$PWD\" \\\n-      | xargs sha256sum \\\n-      | sort -k2 \\\n-      | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n+        # Finally, deterministically produce {non-,}debug binary tarballs ready\n+        # for release\n+        find \"${DISTNAME}\" -not -name \"*.dbg\" -print0 \\\n+            | sort --zero-terminated \\\n+            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" \\\n+            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}.tar.gz\" && exit 1 )\n+        find \"${DISTNAME}\" -name \"*.dbg\" -print0 \\\n+            | sort --zero-terminated \\\n+            | tar --create --no-recursion --mode='u+rw,go+r-w,a+X' --null --files-from=- \\\n+            | gzip -9n > \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" \\\n+            || ( rm -f \"${OUTDIR}/${DISTNAME}-${HOST}-debug.tar.gz\" && exit 1 )\n+    )\n )"
      },
      {
        "sha": "f484ac5774c7e9a29f8b8884863559f27692e19a",
        "filename": "contrib/guix/libexec/codesign.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 113,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/libexec/codesign.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/libexec/codesign.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/codesign.sh?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,113 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-export TZ=UTC\n-\n-# Although Guix _does_ set umask when building its own packages (in our case,\n-# this is all packages in manifest.scm), it does not set it for `guix\n-# environment`. It does make sense for at least `guix environment --container`\n-# to set umask, so if that change gets merged upstream and we bump the\n-# time-machine to a commit which includes the aforementioned change, we can\n-# remove this line.\n-#\n-# This line should be placed before any commands which creates files.\n-umask 0022\n-\n-if [ -n \"$V\" ]; then\n-    # Print both unexpanded (-v) and expanded (-x) forms of commands as they are\n-    # read from this file.\n-    set -vx\n-    # Set VERBOSE for CMake-based builds\n-    export VERBOSE=\"$V\"\n-fi\n-\n-# Check that required environment variables are set\n-cat << EOF\n-Required environment variables as seen inside the container:\n-    UNSIGNED_TARBALL: ${UNSIGNED_TARBALL:?not set}\n-    DETACHED_SIGS_REPO: ${DETACHED_SIGS_REPO:?not set}\n-    DIST_ARCHIVE_BASE: ${DIST_ARCHIVE_BASE:?not set}\n-    DISTNAME: ${DISTNAME:?not set}\n-    HOST: ${HOST:?not set}\n-    SOURCE_DATE_EPOCH: ${SOURCE_DATE_EPOCH:?not set}\n-    DISTSRC: ${DISTSRC:?not set}\n-    OUTDIR: ${OUTDIR:?not set}\n-EOF\n-\n-ACTUAL_OUTDIR=\"${OUTDIR}\"\n-OUTDIR=\"${DISTSRC}/output\"\n-\n-git_head_version() {\n-    local recent_tag\n-    if recent_tag=\"$(git -C \"$1\" describe --exact-match HEAD 2> /dev/null)\"; then\n-        echo \"${recent_tag#v}\"\n-    else\n-        git -C \"$1\" rev-parse --short=12 HEAD\n-    fi\n-}\n-\n-CODESIGNATURE_GIT_ARCHIVE=\"${DIST_ARCHIVE_BASE}/${DISTNAME}-codesignatures-$(git_head_version \"$DETACHED_SIGS_REPO\").tar.gz\"\n-\n-# Create the codesignature tarball if not already there\n-if [ ! -e \"$CODESIGNATURE_GIT_ARCHIVE\" ]; then\n-    mkdir -p \"$(dirname \"$CODESIGNATURE_GIT_ARCHIVE\")\"\n-    git -C \"$DETACHED_SIGS_REPO\" archive --output=\"$CODESIGNATURE_GIT_ARCHIVE\" HEAD\n-fi\n-\n-mkdir -p \"$OUTDIR\"\n-\n-mkdir -p \"$DISTSRC\"\n-(\n-    cd \"$DISTSRC\"\n-\n-    tar -xf \"$UNSIGNED_TARBALL\"\n-\n-    mkdir -p codesignatures\n-    tar -C codesignatures -xf \"$CODESIGNATURE_GIT_ARCHIVE\"\n-\n-    case \"$HOST\" in\n-        *mingw*)\n-            find \"$PWD\" -name \"*-unsigned.exe\" | while read -r infile; do\n-                infile_base=\"$(basename \"$infile\")\"\n-\n-                # Codesigned *-unsigned.exe and output to OUTDIR\n-                osslsigncode attach-signature \\\n-                                 -in \"$infile\" \\\n-                                 -out \"${OUTDIR}/${infile_base/-unsigned}\" \\\n-                                 -sigin codesignatures/win/\"$infile_base\".pem\n-            done\n-            ;;\n-        *darwin*)\n-            # Apply detached codesignatures to dist/ (in-place)\n-            signapple apply dist/Bitcoin-Qt.app codesignatures/osx/dist\n-\n-            # Make an uncompressed DMG from dist/\n-            xorrisofs -D -l -V \"$(< osx_volname)\" -no-pad -r -dir-mode 0755 \\\n-                      -o uncompressed.dmg \\\n-                      dist \\\n-                      -- -volume_date all_file_dates =\"$SOURCE_DATE_EPOCH\"\n-\n-            # Compress uncompressed.dmg and output to OUTDIR\n-            ./dmg dmg uncompressed.dmg \"${OUTDIR}/${DISTNAME}-osx-signed.dmg\"\n-            ;;\n-        *)\n-            exit 1\n-            ;;\n-    esac\n-)  # $DISTSRC\n-\n-rm -rf \"$ACTUAL_OUTDIR\"\n-mv --no-target-directory \"$OUTDIR\" \"$ACTUAL_OUTDIR\" \\\n-    || ( rm -rf \"$ACTUAL_OUTDIR\" && exit 1 )\n-\n-(\n-    cd /outdir-base\n-    {\n-        echo \"$UNSIGNED_TARBALL\"\n-        echo \"$CODESIGNATURE_GIT_ARCHIVE\"\n-        find \"$ACTUAL_OUTDIR\" -type f\n-    } | xargs realpath --relative-base=\"$PWD\" \\\n-        | xargs sha256sum \\\n-        | sort -k2 \\\n-        | sponge \"$ACTUAL_OUTDIR\"/SHA256SUMS.part\n-)"
      },
      {
        "sha": "40ae4b52084ef2235f12318b7ce1b2090a52bf1b",
        "filename": "contrib/guix/libexec/prelude.bash",
        "status": "removed",
        "additions": 0,
        "deletions": 66,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/libexec/prelude.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/libexec/prelude.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/libexec/prelude.bash?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,66 +0,0 @@\n-#!/usr/bin/env bash\n-export LC_ALL=C\n-set -e -o pipefail\n-\n-# shellcheck source=../../shell/realpath.bash\n-source contrib/shell/realpath.bash\n-\n-# shellcheck source=../../shell/git-utils.bash\n-source contrib/shell/git-utils.bash\n-\n-################\n-# Required non-builtin commands should be invocable\n-################\n-\n-check_tools() {\n-    for cmd in \"$@\"; do\n-        if ! command -v \"$cmd\" > /dev/null 2>&1; then\n-            echo \"ERR: This script requires that '$cmd' is installed and available in your \\$PATH\"\n-            exit 1\n-        fi\n-    done\n-}\n-\n-check_tools cat env readlink dirname basename git\n-\n-################\n-# We should be at the top directory of the repository\n-################\n-\n-same_dir() {\n-    local resolved1 resolved2\n-    resolved1=\"$(bash_realpath \"${1}\")\"\n-    resolved2=\"$(bash_realpath \"${2}\")\"\n-    [ \"$resolved1\" = \"$resolved2\" ]\n-}\n-\n-if ! same_dir \"${PWD}\" \"$(git_root)\"; then\n-cat << EOF\n-ERR: This script must be invoked from the top level of the git repository\n-\n-Hint: This may look something like:\n-    env FOO=BAR ./contrib/guix/guix-<blah>\n-\n-EOF\n-exit 1\n-fi\n-\n-################\n-# Set common variables\n-################\n-\n-VERSION=\"${FORCE_VERSION:-$(git_head_version)}\"\n-DISTNAME=\"${DISTNAME:-bitcoin-${VERSION}}\"\n-\n-version_base_prefix=\"${PWD}/guix-build-\"\n-VERSION_BASE=\"${version_base_prefix}${VERSION}\"  # TOP\n-\n-DISTSRC_BASE=\"${DISTSRC_BASE:-${VERSION_BASE}}\"\n-\n-OUTDIR_BASE=\"${OUTDIR_BASE:-${VERSION_BASE}/output}\"\n-\n-var_base_basename=\"var\"\n-VAR_BASE=\"${VAR_BASE:-${VERSION_BASE}/${var_base_basename}}\"\n-\n-profiles_base_basename=\"profiles\"\n-PROFILES_BASE=\"${PROFILES_BASE:-${VAR_BASE}/${profiles_base_basename}}\""
      },
      {
        "sha": "c25ac2977b19d3197b61759de0b5cf34094e734c",
        "filename": "contrib/guix/manifest.scm",
        "status": "modified",
        "additions": 63,
        "deletions": 574,
        "changes": 637,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/manifest.scm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/guix/manifest.scm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/manifest.scm?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -3,86 +3,40 @@\n              (gnu packages autotools)\n              (gnu packages base)\n              (gnu packages bash)\n-             (gnu packages bison)\n-             (gnu packages certs)\n-             (gnu packages cdrom)\n              (gnu packages check)\n-             (gnu packages cmake)\n              (gnu packages commencement)\n              (gnu packages compression)\n              (gnu packages cross-base)\n-             (gnu packages curl)\n              (gnu packages file)\n              (gnu packages gawk)\n              (gnu packages gcc)\n-             (gnu packages gnome)\n-             (gnu packages image)\n-             (gnu packages imagemagick)\n-             (gnu packages installers)\n              (gnu packages linux)\n-             (gnu packages llvm)\n-             (gnu packages mingw)\n-             (gnu packages moreutils)\n              (gnu packages perl)\n              (gnu packages pkg-config)\n              (gnu packages python)\n-             (gnu packages python-web)\n              (gnu packages shells)\n-             (gnu packages tls)\n-             (gnu packages version-control)\n-             (guix build-system font)\n-             (guix build-system gnu)\n-             (guix build-system python)\n              (guix build-system trivial)\n-             (guix download)\n              (guix gexp)\n-             (guix git-download)\n-             ((guix licenses) #:prefix license:)\n              (guix packages)\n              (guix profiles)\n              (guix utils))\n \n-(define-syntax-rule (search-our-patches file-name ...)\n-  \"Return the list of absolute file names corresponding to each\n-FILE-NAME found in ./patches relative to the current file.\"\n-  (parameterize\n-      ((%patch-path (list (string-append (dirname (current-filename)) \"/patches\"))))\n-    (list (search-patch file-name) ...)))\n-\n-(define (make-ssp-fixed-gcc xgcc)\n-  \"Given a XGCC package, return a modified package that uses the SSP function\n-from glibc instead of from libssp.so. Our `symbol-check' script will complain if\n-we link against libssp.so, and thus will ensure that this works properly.\n-\n-Taken from:\n-http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n-  (package\n-    (inherit xgcc)\n-    (arguments\n-     (substitute-keyword-arguments (package-arguments xgcc)\n-       ((#:make-flags flags)\n-        `(cons \"gcc_cv_libc_provides_ssp=yes\" ,flags))))))\n-\n (define (make-gcc-rpath-link xgcc)\n   \"Given a XGCC package, return a modified package that replace each instance of\n -rpath in the default system spec that's inserted by Guix with -rpath-link\"\n   (package\n-    (inherit xgcc)\n-    (arguments\n-     (substitute-keyword-arguments (package-arguments xgcc)\n-       ((#:phases phases)\n-        `(modify-phases ,phases\n-           (add-after 'pre-configure 'replace-rpath-with-rpath-link\n-             (lambda _\n-               (substitute* (cons \"gcc/config/rs6000/sysv4.h\"\n-                                  (find-files \"gcc/config\"\n-                                              \"^gnu-user.*\\\\.h$\"))\n-                 ((\"-rpath=\") \"-rpath-link=\"))\n-               #t))))))))\n-\n-(define (make-binutils-with-mingw-w64-disable-flags xbinutils)\n-  (package-with-extra-patches xbinutils\n-    (search-our-patches \"binutils-mingw-w64-disable-flags.patch\")))\n+   (inherit xgcc)\n+   (arguments\n+    (substitute-keyword-arguments (package-arguments xgcc)\n+      ((#:phases phases)\n+       `(modify-phases ,phases\n+          (add-after 'pre-configure 'replace-rpath-with-rpath-link\n+            (lambda _\n+              (substitute* (cons \"gcc/config/rs6000/sysv4.h\"\n+                                 (find-files \"gcc/config\"\n+                                             \"^gnu-user.*\\\\.h$\"))\n+                ((\"-rpath=\") \"-rpath-link=\"))\n+              #t))))))))\n \n (define (make-cross-toolchain target\n                               base-gcc-for-libc\n@@ -127,531 +81,66 @@ http://www.linuxfromscratch.org/hlfs/view/development/chapter05/gcc-pass1.html\"\n        `((\"binutils\" ,xbinutils)\n          (\"libc\" ,xlibc)\n          (\"libc:static\" ,xlibc \"static\")\n-         (\"gcc\" ,xgcc)\n-         (\"gcc-lib\" ,xgcc \"lib\")))\n+         (\"gcc\" ,xgcc)))\n       (synopsis (string-append \"Complete GCC tool chain for \" target))\n       (description (string-append \"This package provides a complete GCC tool\n chain for \" target \" development.\"))\n       (home-page (package-home-page xgcc))\n       (license (package-license xgcc)))))\n \n-(define base-gcc\n-  (package-with-extra-patches gcc-8\n-    (search-our-patches \"gcc-8-sort-libtool-find-output.patch\")))\n-\n-;; Building glibc with stack smashing protector first landed in glibc 2.25, use\n-;; this function to disable for older glibcs\n-;;\n-;; From glibc 2.25 changelog:\n-;;\n-;;   * Most of glibc can now be built with the stack smashing protector enabled.\n-;;     It is recommended to build glibc with --enable-stack-protector=strong.\n-;;     Implemented by Nick Alcock (Oracle).\n-(define (make-glibc-without-ssp xglibc)\n-  (package-with-extra-configure-variable\n-   (package-with-extra-configure-variable\n-    xglibc \"libc_cv_ssp\" \"no\")\n-   \"libc_cv_ssp_strong\" \"no\"))\n-\n (define* (make-bitcoin-cross-toolchain target\n-                                       #:key\n-                                       (base-gcc-for-libc gcc-7)\n-                                       (base-kernel-headers linux-libre-headers-4.9)\n-                                       (base-libc (make-glibc-without-ssp glibc-2.24))\n-                                       (base-gcc (make-gcc-rpath-link base-gcc)))\n+                                  #:key\n+                                  (base-gcc-for-libc gcc-5)\n+                                  (base-kernel-headers linux-libre-headers-4.19)\n+                                  (base-libc glibc-2.27)\n+                                  (base-gcc (make-gcc-rpath-link gcc-9)))\n   \"Convenience wrapper around MAKE-CROSS-TOOLCHAIN with default values\n desirable for building Bitcoin Core release binaries.\"\n   (make-cross-toolchain target\n-                        base-gcc-for-libc\n-                        base-kernel-headers\n-                        base-libc\n-                        base-gcc))\n-\n-(define (make-gcc-with-pthreads gcc)\n-  (package-with-extra-configure-variable gcc \"--enable-threads\" \"posix\"))\n-\n-(define (make-mingw-pthreads-cross-toolchain target)\n-  \"Create a cross-compilation toolchain package for TARGET\"\n-  (let* ((xbinutils (make-binutils-with-mingw-w64-disable-flags (cross-binutils target)))\n-         (pthreads-xlibc mingw-w64-x86_64-winpthreads)\n-         (pthreads-xgcc (make-gcc-with-pthreads\n-                         (cross-gcc target\n-                                    #:xgcc (make-ssp-fixed-gcc base-gcc)\n-                                    #:xbinutils xbinutils\n-                                    #:libc pthreads-xlibc))))\n-    ;; Define a meta-package that propagates the resulting XBINUTILS, XLIBC, and\n-    ;; XGCC\n-    (package\n-      (name (string-append target \"-posix-toolchain\"))\n-      (version (package-version pthreads-xgcc))\n-      (source #f)\n-      (build-system trivial-build-system)\n-      (arguments '(#:builder (begin (mkdir %output) #t)))\n-      (propagated-inputs\n-       `((\"binutils\" ,xbinutils)\n-         (\"libc\" ,pthreads-xlibc)\n-         (\"gcc\" ,pthreads-xgcc)\n-         (\"gcc-lib\" ,pthreads-xgcc \"lib\")))\n-      (synopsis (string-append \"Complete GCC tool chain for \" target))\n-      (description (string-append \"This package provides a complete GCC tool\n-chain for \" target \" development.\"))\n-      (home-page (package-home-page pthreads-xgcc))\n-      (license (package-license pthreads-xgcc)))))\n-\n-(define (make-nsis-with-sde-support base-nsis)\n-  (package-with-extra-patches base-nsis\n-    (search-our-patches \"nsis-SConstruct-sde-support.patch\")))\n-\n-(define-public font-tuffy\n-  (package\n-    (name \"font-tuffy\")\n-    (version \"20120614\")\n-    (source\n-     (origin\n-       (method url-fetch)\n-       (uri (string-append \"http://tulrich.com/fonts/tuffy-\" version \".tar.gz\"))\n-       (file-name (string-append name \"-\" version \".tar.gz\"))\n-       (sha256\n-        (base32\n-         \"02vf72bgrp30vrbfhxjw82s115z27dwfgnmmzfb0n9wfhxxfpyf6\"))))\n-    (build-system font-build-system)\n-    (home-page \"http://tulrich.com/fonts/\")\n-    (synopsis \"The Tuffy Truetype Font Family\")\n-    (description\n-     \"Thatcher Ulrich's first outline font design. He started with the goal of producing a neutral, readable sans-serif text font. There are lots of \\\"expressive\\\" fonts out there, but he wanted to start with something very plain and clean, something he might want to actually use. \")\n-    (license license:public-domain)))\n-\n-(define-public lief\n-  (package\n-   (name \"python-lief\")\n-   (version \"0.11.5\")\n-   (source\n-    (origin\n-     (method git-fetch)\n-     (uri (git-reference\n-           (url \"https://github.com/lief-project/LIEF.git\")\n-           (commit version)))\n-     (file-name (git-file-name name version))\n-     (sha256\n-      (base32\n-       \"0qahjfg1n0x76ps2mbyljvws1l3qhkqvmxqbahps4qgywl2hbdkj\"))))\n-   (build-system python-build-system)\n-   (native-inputs\n-    `((\"cmake\" ,cmake)))\n-   (home-page \"https://github.com/lief-project/LIEF\")\n-   (synopsis \"Library to Instrument Executable Formats\")\n-   (description \"Python library to to provide a cross platform library which can\n-parse, modify and abstract ELF, PE and MachO formats.\")\n-   (license license:asl2.0)))\n-\n-(define osslsigncode\n-  (package\n-    (name \"osslsigncode\")\n-    (version \"2.0\")\n-    (source (origin\n-              (method url-fetch)\n-              (uri (string-append \"https://github.com/mtrojnar/\"\n-                                  name \"/archive/\" version \".tar.gz\"))\n-              (sha256\n-               (base32\n-                \"0byri6xny770wwb2nciq44j5071122l14bvv65axdd70nfjf0q2s\"))))\n-    (build-system gnu-build-system)\n-    (native-inputs\n-     `((\"pkg-config\" ,pkg-config)\n-       (\"autoconf\" ,autoconf)\n-       (\"automake\" ,automake)\n-       (\"libtool\" ,libtool)))\n-    (inputs\n-     `((\"openssl\" ,openssl)))\n-    (arguments\n-     `(#:configure-flags\n-       `(\"--without-gsf\"\n-         \"--without-curl\"\n-         \"--disable-dependency-tracking\")))\n-    (home-page \"https://github.com/mtrojnar/osslsigncode\")\n-    (synopsis \"Authenticode signing and timestamping tool\")\n-    (description \"osslsigncode is a small tool that implements part of the\n-functionality of the Microsoft tool signtool.exe - more exactly the Authenticode\n-signing and timestamping. But osslsigncode is based on OpenSSL and cURL, and\n-thus should be able to compile on most platforms where these exist.\")\n-    (license license:gpl3+))) ; license is with openssl exception\n-\n-(define-public python-asn1crypto\n-  (package\n-    (name \"python-asn1crypto\")\n-    (version \"1.4.0\")\n-    (source\n-     (origin\n-       (method git-fetch)\n-       (uri (git-reference\n-             (url \"https://github.com/wbond/asn1crypto\")\n-             (commit version)))\n-       (file-name (git-file-name name version))\n-       (sha256\n-        (base32\n-         \"19abibn6jw20mzi1ln4n9jjvpdka8ygm4m439hplyrdfqbvgm01r\"))))\n-    (build-system python-build-system)\n-    (arguments\n-     '(#:phases\n-       (modify-phases %standard-phases\n-         (replace 'check\n-           (lambda _\n-             (invoke \"python\" \"run.py\" \"tests\"))))))\n-    (home-page \"https://github.com/wbond/asn1crypto\")\n-    (synopsis \"ASN.1 parser and serializer in Python\")\n-    (description \"asn1crypto is an ASN.1 parser and serializer with definitions\n-for private keys, public keys, certificates, CRL, OCSP, CMS, PKCS#3, PKCS#7,\n-PKCS#8, PKCS#12, PKCS#5, X.509 and TSP.\")\n-    (license license:expat)))\n-\n-(define-public python-elfesteem\n-  (let ((commit \"87bbd79ab7e361004c98cc8601d4e5f029fd8bd5\"))\n-    (package\n-      (name \"python-elfesteem\")\n-      (version (git-version \"0.1\" \"1\" commit))\n-      (source\n-       (origin\n-         (method git-fetch)\n-         (uri (git-reference\n-               (url \"https://github.com/LRGH/elfesteem\")\n-               (commit commit)))\n-         (file-name (git-file-name name commit))\n-         (sha256\n-          (base32\n-           \"1nyvjisvyxyxnd0023xjf5846xd03lwawp5pfzr8vrky7wwm5maz\"))))\n-      (build-system python-build-system)\n-      ;; There are no tests, but attempting to run python setup.py test leads to\n-      ;; PYTHONPATH problems, just disable the test\n-      (arguments '(#:tests? #f))\n-      (home-page \"https://github.com/LRGH/elfesteem\")\n-      (synopsis \"ELF/PE/Mach-O parsing library\")\n-      (description \"elfesteem parses ELF, PE and Mach-O files.\")\n-      (license license:lgpl2.1))))\n-\n-(define-public python-oscrypto\n-  (package\n-    (name \"python-oscrypto\")\n-    (version \"1.2.1\")\n-    (source\n-     (origin\n-       (method git-fetch)\n-       (uri (git-reference\n-             (url \"https://github.com/wbond/oscrypto\")\n-             (commit version)))\n-       (file-name (git-file-name name version))\n-       (sha256\n-        (base32\n-         \"1d4d8s4z340qhvb3g5m5v3436y3a71yc26wk4749q64m09kxqc3l\"))\n-       (patches (search-our-patches \"oscrypto-hard-code-openssl.patch\"))))\n-    (build-system python-build-system)\n-    (native-search-paths\n-     (list (search-path-specification\n-            (variable \"SSL_CERT_FILE\")\n-            (file-type 'regular)\n-            (separator #f)                ;single entry\n-            (files '(\"etc/ssl/certs/ca-certificates.crt\")))))\n-\n-    (propagated-inputs\n-     `((\"python-asn1crypto\" ,python-asn1crypto)\n-       (\"openssl\" ,openssl)))\n-    (arguments\n-     `(#:phases\n-       (modify-phases %standard-phases\n-         (add-after 'unpack 'hard-code-path-to-libscrypt\n-           (lambda* (#:key inputs #:allow-other-keys)\n-             (let ((openssl (assoc-ref inputs \"openssl\")))\n-               (substitute* \"oscrypto/__init__.py\"\n-                 ((\"@GUIX_OSCRYPTO_USE_OPENSSL@\")\n-                  (string-append openssl \"/lib/libcrypto.so\" \",\" openssl \"/lib/libssl.so\")))\n-               #t)))\n-         (add-after 'unpack 'disable-broken-tests\n-           (lambda _\n-             ;; This test is broken as there is no keyboard interrupt.\n-             (substitute* \"tests/test_trust_list.py\"\n-               ((\"^(.*)class TrustListTests\" line indent)\n-                (string-append indent\n-                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                               line)))\n-             (substitute* \"tests/test_tls.py\"\n-               ((\"^(.*)class TLSTests\" line indent)\n-                (string-append indent\n-                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                               line)))\n-             #t))\n-         (replace 'check\n-           (lambda _\n-             (invoke \"python\" \"run.py\" \"tests\")\n-             #t)))))\n-    (home-page \"https://github.com/wbond/oscrypto\")\n-    (synopsis \"Compiler-free Python crypto library backed by the OS\")\n-    (description \"oscrypto is a compilation-free, always up-to-date encryption library for Python.\")\n-    (license license:expat)))\n-\n-(define-public python-oscryptotests\n-  (package (inherit python-oscrypto)\n-    (name \"python-oscryptotests\")\n-    (arguments\n-     `(#:tests? #f\n-       #:phases\n-       (modify-phases %standard-phases\n-         (add-after 'unpack 'hard-code-path-to-libscrypt\n-           (lambda* (#:key inputs #:allow-other-keys)\n-             (chdir \"tests\")\n-             #t)))))))\n-\n-(define-public python-certvalidator\n-  (let ((commit \"e5bdb4bfcaa09fa0af355eb8867d00dfeecba08c\"))\n-    (package\n-      (name \"python-certvalidator\")\n-      (version (git-version \"0.1\" \"1\" commit))\n-      (source\n-       (origin\n-         (method git-fetch)\n-         (uri (git-reference\n-               (url \"https://github.com/achow101/certvalidator\")\n-               (commit commit)))\n-         (file-name (git-file-name name commit))\n-         (sha256\n-          (base32\n-           \"18pvxkvpkfkzgvfylv0kx65pmxfcv1hpsg03cip93krfvrrl4c75\"))))\n-      (build-system python-build-system)\n-      (propagated-inputs\n-       `((\"python-asn1crypto\" ,python-asn1crypto)\n-         (\"python-oscrypto\" ,python-oscrypto)\n-         (\"python-oscryptotests\", python-oscryptotests))) ;; certvalidator tests import oscryptotests\n-      (arguments\n-       `(#:phases\n-         (modify-phases %standard-phases\n-           (add-after 'unpack 'disable-broken-tests\n-             (lambda _\n-               (substitute* \"tests/test_certificate_validator.py\"\n-                 ((\"^(.*)class CertificateValidatorTests\" line indent)\n-                  (string-append indent\n-                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                                 line)))\n-               (substitute* \"tests/test_crl_client.py\"\n-                 ((\"^(.*)def test_fetch_crl\" line indent)\n-                  (string-append indent\n-                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                                 line)))\n-               (substitute* \"tests/test_ocsp_client.py\"\n-                 ((\"^(.*)def test_fetch_ocsp\" line indent)\n-                  (string-append indent\n-                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                                 line)))\n-               (substitute* \"tests/test_registry.py\"\n-                 ((\"^(.*)def test_build_paths\" line indent)\n-                  (string-append indent\n-                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                                 line)))\n-               (substitute* \"tests/test_validate.py\"\n-                 ((\"^(.*)def test_revocation_mode_hard\" line indent)\n-                  (string-append indent\n-                                 \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                                 line)))\n-               #t))\n-           (replace 'check\n-             (lambda _\n-               (invoke \"python\" \"run.py\" \"tests\")\n-               #t)))))\n-      (home-page \"https://github.com/wbond/certvalidator\")\n-      (synopsis \"Python library for validating X.509 certificates and paths\")\n-      (description \"certvalidator is a Python library for validating X.509\n-certificates or paths. Supports various options, including: validation at a\n-specific moment in time, whitelisting and revocation checks.\")\n-      (license license:expat))))\n-\n-(define-public python-requests-2.25.1\n-  (package (inherit python-requests)\n-    (version \"2.25.1\")\n-    (source (origin\n-              (method url-fetch)\n-              (uri (pypi-uri \"requests\" version))\n-              (sha256\n-               (base32\n-                \"015qflyqsgsz09gnar69s6ga74ivq5kch69s4qxz3904m7a3v5r7\"))))))\n-\n-(define-public python-altgraph\n-  (package\n-    (name \"python-altgraph\")\n-    (version \"0.17\")\n-    (source\n-     (origin\n-       (method git-fetch)\n-       (uri (git-reference\n-             (url \"https://github.com/ronaldoussoren/altgraph\")\n-             (commit (string-append \"v\" version))))\n-       (file-name (git-file-name name version))\n-       (sha256\n-        (base32\n-         \"09sm4srvvkw458pn48ga9q7ykr4xlz7q8gh1h9w7nxpf001qgpwb\"))))\n-    (build-system python-build-system)\n-    (home-page \"https://github.com/ronaldoussoren/altgraph\")\n-    (synopsis \"Python graph (network) package\")\n-    (description \"altgraph is a fork of graphlib: a graph (network) package for\n-constructing graphs, BFS and DFS traversals, topological sort, shortest paths,\n-etc. with graphviz output.\")\n-    (license license:expat)))\n-\n-\n-(define-public python-macholib\n-  (package\n-    (name \"python-macholib\")\n-    (version \"1.14\")\n-    (source\n-     (origin\n-       (method git-fetch)\n-       (uri (git-reference\n-             (url \"https://github.com/ronaldoussoren/macholib\")\n-             (commit (string-append \"v\" version))))\n-       (file-name (git-file-name name version))\n-       (sha256\n-        (base32\n-         \"0aislnnfsza9wl4f0vp45ivzlc0pzhp9d4r08700slrypn5flg42\"))))\n-    (build-system python-build-system)\n-    (propagated-inputs\n-     `((\"python-altgraph\" ,python-altgraph)))\n-    (arguments\n-     '(#:phases\n-       (modify-phases %standard-phases\n-         (add-after 'unpack 'disable-broken-tests\n-           (lambda _\n-             ;; This test is broken as there is no keyboard interrupt.\n-             (substitute* \"macholib_tests/test_command_line.py\"\n-               ((\"^(.*)class TestCmdLine\" line indent)\n-                (string-append indent\n-                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                               line)))\n-             (substitute* \"macholib_tests/test_dyld.py\"\n-               ((\"^(.*)def test_\\\\S+_find\" line indent)\n-                (string-append indent\n-                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                               line))\n-               ((\"^(.*)def testBasic\" line indent)\n-                (string-append indent\n-                               \"@unittest.skip(\\\"Disabled by Guix\\\")\\n\"\n-                               line))\n-               )\n-             #t)))))\n-    (home-page \"https://github.com/ronaldoussoren/macholib\")\n-    (synopsis \"Python library for analyzing and editing Mach-O headers\")\n-    (description \"macholib is a Macho-O header analyzer and editor. It's\n-typically used as a dependency analysis tool, and also to rewrite dylib\n-references in Mach-O headers to be @executable_path relative. Though this tool\n-targets a platform specific file format, it is pure python code that is platform\n-and endian independent.\")\n-    (license license:expat)))\n-\n-(define-public python-signapple\n-  (let ((commit \"b084cbbf44d5330448ffce0c7d118f75781b64bd\"))\n-    (package\n-      (name \"python-signapple\")\n-      (version (git-version \"0.1\" \"1\" commit))\n-      (source\n-       (origin\n-         (method git-fetch)\n-         (uri (git-reference\n-               (url \"https://github.com/achow101/signapple\")\n-               (commit commit)))\n-         (file-name (git-file-name name commit))\n-         (sha256\n-          (base32\n-           \"0k7inccl2mzac3wq4asbr0kl8s4cghm8982z54kfascqg45shv01\"))))\n-      (build-system python-build-system)\n-      (propagated-inputs\n-       `((\"python-asn1crypto\" ,python-asn1crypto)\n-         (\"python-oscrypto\" ,python-oscrypto)\n-         (\"python-certvalidator\" ,python-certvalidator)\n-         (\"python-elfesteem\" ,python-elfesteem)\n-         (\"python-requests\" ,python-requests-2.25.1)\n-         (\"python-macholib\" ,python-macholib)\n-         (\"libcrypto\" ,openssl)))\n-      ;; There are no tests, but attempting to run python setup.py test leads to\n-      ;; problems, just disable the test\n-      (arguments '(#:tests? #f))\n-      (home-page \"https://github.com/achow101/signapple\")\n-      (synopsis \"Mach-O binary signature tool\")\n-      (description \"signapple is a Python tool for creating, verifying, and\n-inspecting signatures in Mach-O binaries.\")\n-      (license license:expat))))\n-\n-(define-public glibc-2.24\n-  (package\n-    (inherit glibc)\n-    (version \"2.24\")\n-    (source (origin\n-              (method git-fetch)\n-              (uri (git-reference\n-                    (url \"https://sourceware.org/git/glibc.git\")\n-                    (commit \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\")))\n-              (file-name (git-file-name \"glibc\" \"0d7f1ed30969886c8dde62fbf7d2c79967d4bace\"))\n-              (sha256\n-               (base32\n-                \"0g5hryia5v1k0qx97qffgwzrz4lr4jw3s5kj04yllhswsxyjbic3\"))\n-              (patches (search-our-patches \"glibc-ldd-x86_64.patch\"\n-                                           \"glibc-versioned-locpath.patch\"\n-                                           \"glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch\"\n-                                           \"glibc-2.24-no-build-time-cxx-header-run.patch\"))))))\n-\n-(define glibc-2.27/bitcoin-patched\n-  (package-with-extra-patches glibc-2.27\n-    (search-our-patches \"glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch\")))\n+                   base-gcc-for-libc\n+                   base-kernel-headers\n+                   base-libc\n+                   base-gcc))\n \n (packages->manifest\n- (append\n-  (list ;; The Basics\n-        bash\n-        which\n-        coreutils\n-        util-linux\n-        ;; File(system) inspection\n-        file\n-        grep\n-        diffutils\n-        findutils\n-        ;; File transformation\n-        patch\n-        gawk\n-        sed\n-        moreutils\n-        ;; Compression and archiving\n-        tar\n-        bzip2\n-        gzip\n-        xz\n-        zlib\n-        (list zlib \"static\")\n-        ;; Build tools\n-        gnu-make\n-        libtool\n-        autoconf\n-        automake\n-        pkg-config\n-        bison\n-        ;; Scripting\n-        perl\n-        python-3\n-        ;; Git\n-        git\n-        ;; Tests\n-        lief\n-        ;; Native gcc 7 toolchain\n-        gcc-toolchain-7\n-        (list gcc-toolchain-7 \"static\"))\n-  (let ((target (getenv \"HOST\")))\n-    (cond ((string-suffix? \"-mingw32\" target)\n-           ;; Windows\n-           (list zip\n-                 (make-mingw-pthreads-cross-toolchain \"x86_64-w64-mingw32\")\n-                 (make-nsis-with-sde-support nsis-x86_64)\n-                 osslsigncode))\n-          ((string-contains target \"-linux-\")\n-           (list (cond ((string-contains target \"riscv64-\")\n-                        (make-bitcoin-cross-toolchain target\n-                                                      #:base-libc glibc-2.27/bitcoin-patched\n-                                                      #:base-kernel-headers linux-libre-headers-4.19))\n-                       (else\n-                        (make-bitcoin-cross-toolchain target)))))\n-          ((string-contains target \"darwin\")\n-           (list clang-toolchain-10 binutils imagemagick libtiff librsvg font-tuffy cmake xorriso python-signapple))\n-          (else '())))))\n+ (list ;; The Basics\n+       bash-minimal\n+       which\n+       coreutils\n+       util-linux\n+       ;; File(system) inspection\n+       file\n+       grep\n+       diffutils\n+       findutils\n+       ;; File transformation\n+       patch\n+       gawk\n+       sed\n+       ;; Compression and archiving\n+       tar\n+       bzip2\n+       gzip\n+       xz\n+       zlib\n+       ;; Build tools\n+       gnu-make\n+       libtool\n+       autoconf\n+       automake\n+       pkg-config\n+       ;; Scripting\n+       perl\n+       python-3.7\n+       ;; Native gcc 9 toolchain targeting glibc 2.27\n+       (make-gcc-toolchain gcc-9 glibc-2.27)\n+       ;; Cross gcc 9 toolchains targeting glibc 2.27\n+       (make-bitcoin-cross-toolchain \"i686-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"x86_64-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"aarch64-linux-gnu\")\n+       (make-bitcoin-cross-toolchain \"arm-linux-gnueabihf\")\n+       ;; The glibc 2.27 for riscv64 needs gcc 7 to successfully build (see:\n+       ;; https://www.gnu.org/software/gcc/gcc-7/changes.html#riscv). The final\n+       ;; toolchain is still a gcc 9 toolchain targeting glibc 2.27.\n+       (make-bitcoin-cross-toolchain \"riscv64-linux-gnu\"\n+                                     #:base-gcc-for-libc gcc-7)))"
      },
      {
        "sha": "8f88eb9dfd5926e6ef83066ccb8ca51a12a5e980",
        "filename": "contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 171,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/binutils-mingw-w64-disable-flags.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,171 +0,0 @@\n-Description: Add disable opposites to the security-related flags\n-Author: Stephen Kitt <skitt@debian.org>\n-\n-This patch adds \"no-\" variants to disable the various security flags:\n-\"no-dynamicbase\", \"no-nxcompat\", \"no-high-entropy-va\", \"disable-reloc-section\".\n-\n---- a/ld/emultempl/pe.em\n-+++ b/ld/emultempl/pe.em\n-@@ -259,9 +261,11 @@\n- \t\t\t\t\t(OPTION_ENABLE_LONG_SECTION_NAMES + 1)\n- /* DLLCharacteristics flags.  */\n- #define OPTION_DYNAMIC_BASE\t\t(OPTION_DISABLE_LONG_SECTION_NAMES + 1)\n--#define OPTION_FORCE_INTEGRITY\t\t(OPTION_DYNAMIC_BASE + 1)\n-+#define OPTION_NO_DYNAMIC_BASE\t\t(OPTION_DYNAMIC_BASE + 1)\n-+#define OPTION_FORCE_INTEGRITY\t\t(OPTION_NO_DYNAMIC_BASE + 1)\n- #define OPTION_NX_COMPAT\t\t(OPTION_FORCE_INTEGRITY + 1)\n--#define OPTION_NO_ISOLATION\t\t(OPTION_NX_COMPAT + 1)\n-+#define OPTION_NO_NX_COMPAT\t\t(OPTION_NX_COMPAT + 1)\n-+#define OPTION_NO_ISOLATION\t\t(OPTION_NO_NX_COMPAT + 1)\n- #define OPTION_NO_SEH\t\t\t(OPTION_NO_ISOLATION + 1)\n- #define OPTION_NO_BIND\t\t\t(OPTION_NO_SEH + 1)\n- #define OPTION_WDM_DRIVER\t\t(OPTION_NO_BIND + 1)\n-@@ -271,6 +275,7 @@\n- #define OPTION_NO_INSERT_TIMESTAMP\t(OPTION_INSERT_TIMESTAMP + 1)\n- #define OPTION_BUILD_ID\t\t\t(OPTION_NO_INSERT_TIMESTAMP + 1)\n- #define OPTION_ENABLE_RELOC_SECTION\t(OPTION_BUILD_ID + 1)\n-+#define OPTION_DISABLE_RELOC_SECTION\t(OPTION_ENABLE_RELOC_SECTION + 1)\n- \n- static void\n- gld${EMULATION_NAME}_add_options\n-@@ -342,8 +347,10 @@\n-     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n-     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n-     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n-+    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n-     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n-     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n-+    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n-     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n-     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n-     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n-@@ -351,6 +358,7 @@\n-     {\"tsaware\", no_argument, NULL, OPTION_TERMINAL_SERVER_AWARE},\n-     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n-     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n-+    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n-     {NULL, no_argument, NULL, 0}\n-   };\n- \n-@@ -485,9 +494,12 @@\n-                                        in object files\\n\"));\n-   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n-                                        address space layout randomization (ASLR)\\n\"));\n-+  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n-   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n-+  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n-   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n-   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n-+  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n-   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n-   fprintf (file, _(\"  --no-seh                   Image does not use SEH. No SE handler may\\n\\\n-                                        be called in this image\\n\"));\n-@@ -862,12 +874,21 @@\n-     case OPTION_ENABLE_RELOC_SECTION:\n-       pe_dll_enable_reloc_section = 1;\n-       break;\n-+    case OPTION_DISABLE_RELOC_SECTION:\n-+      pe_dll_enable_reloc_section = 0;\n-+      /* fall through */\n-+    case OPTION_NO_DYNAMIC_BASE:\n-+      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n-+      break;\n-     case OPTION_FORCE_INTEGRITY:\n-       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n-       break;\n-     case OPTION_NX_COMPAT:\n-       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n-       break;\n-+    case OPTION_NO_NX_COMPAT:\n-+      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n-+      break;\n-     case OPTION_NO_ISOLATION:\n-       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n-       break;\n---- a/ld/emultempl/pep.em\n-+++ b/ld/emultempl/pep.em\n-@@ -237,9 +240,12 @@\n-   OPTION_ENABLE_LONG_SECTION_NAMES,\n-   OPTION_DISABLE_LONG_SECTION_NAMES,\n-   OPTION_HIGH_ENTROPY_VA,\n-+  OPTION_NO_HIGH_ENTROPY_VA,\n-   OPTION_DYNAMIC_BASE,\n-+  OPTION_NO_DYNAMIC_BASE,\n-   OPTION_FORCE_INTEGRITY,\n-   OPTION_NX_COMPAT,\n-+  OPTION_NO_NX_COMPAT,\n-   OPTION_NO_ISOLATION,\n-   OPTION_NO_SEH,\n-   OPTION_NO_BIND,\n-@@ -248,7 +254,8 @@\n-   OPTION_NO_INSERT_TIMESTAMP,\n-   OPTION_TERMINAL_SERVER_AWARE,\n-   OPTION_BUILD_ID,\n--  OPTION_ENABLE_RELOC_SECTION\n-+  OPTION_ENABLE_RELOC_SECTION,\n-+  OPTION_DISABLE_RELOC_SECTION\n- };\n- \n- static void\n-@@ -315,9 +322,12 @@\n-     {\"enable-long-section-names\", no_argument, NULL, OPTION_ENABLE_LONG_SECTION_NAMES},\n-     {\"disable-long-section-names\", no_argument, NULL, OPTION_DISABLE_LONG_SECTION_NAMES},\n-     {\"high-entropy-va\", no_argument, NULL, OPTION_HIGH_ENTROPY_VA},\n-+    {\"no-high-entropy-va\", no_argument, NULL, OPTION_NO_HIGH_ENTROPY_VA},\n-     {\"dynamicbase\",no_argument, NULL, OPTION_DYNAMIC_BASE},\n-+    {\"no-dynamicbase\", no_argument, NULL, OPTION_NO_DYNAMIC_BASE},\n-     {\"forceinteg\", no_argument, NULL, OPTION_FORCE_INTEGRITY},\n-     {\"nxcompat\", no_argument, NULL, OPTION_NX_COMPAT},\n-+    {\"no-nxcompat\", no_argument, NULL, OPTION_NO_NX_COMPAT},\n-     {\"no-isolation\", no_argument, NULL, OPTION_NO_ISOLATION},\n-     {\"no-seh\", no_argument, NULL, OPTION_NO_SEH},\n-     {\"no-bind\", no_argument, NULL, OPTION_NO_BIND},\n-@@ -327,6 +337,7 @@\n-     {\"no-insert-timestamp\", no_argument, NULL, OPTION_NO_INSERT_TIMESTAMP},\n-     {\"build-id\", optional_argument, NULL, OPTION_BUILD_ID},\n-     {\"enable-reloc-section\", no_argument, NULL, OPTION_ENABLE_RELOC_SECTION},\n-+    {\"disable-reloc-section\", no_argument, NULL, OPTION_DISABLE_RELOC_SECTION},\n-     {NULL, no_argument, NULL, 0}\n-   };\n- \n-@@ -448,11 +461,15 @@\n-                                        in object files\\n\"));\n-   fprintf (file, _(\"  --high-entropy-va                  Image is compatible with 64-bit address space\\n\\\n-                                        layout randomization (ASLR)\\n\"));\n-+  fprintf (file, _(\"  --no-high-entropy-va               Image is not compatible with 64-bit ASLR\\n\"));\n-   fprintf (file, _(\"  --dynamicbase                      Image base address may be relocated using\\n\\\n-                                        address space layout randomization (ASLR)\\n\"));\n-+  fprintf (file, _(\"  --no-dynamicbase                   Image base address may not be relocated\\n\"));\n-   fprintf (file, _(\"  --enable-reloc-section             Create the base relocation table\\n\"));\n-+  fprintf (file, _(\"  --disable-reloc-section            Disable the base relocation table\\n\"));\n-   fprintf (file, _(\"  --forceinteg               Code integrity checks are enforced\\n\"));\n-   fprintf (file, _(\"  --nxcompat                 Image is compatible with data execution prevention\\n\"));\n-+  fprintf (file, _(\"  --no-nxcompat              Image is not compatible with data execution prevention\\n\"));\n-   fprintf (file, _(\"  --no-isolation             Image understands isolation but do not isolate the image\\n\"));\n-   fprintf (file, _(\"  --no-seh                   Image does not use SEH; no SE handler may\\n\\\n-                                        be called in this image\\n\"));\n-@@ -809,12 +826,24 @@\n-     case OPTION_ENABLE_RELOC_SECTION:\n-       pep_dll_enable_reloc_section = 1;\n-       break;\n-+    case OPTION_DISABLE_RELOC_SECTION:\n-+      pep_dll_enable_reloc_section = 0;\n-+      /* fall through */\n-+    case OPTION_NO_DYNAMIC_BASE:\n-+      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE;\n-+      /* fall through */\n-+    case OPTION_NO_HIGH_ENTROPY_VA:\n-+      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA;\n-+      break;\n-     case OPTION_FORCE_INTEGRITY:\n-       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY;\n-       break;\n-     case OPTION_NX_COMPAT:\n-       pe_dll_characteristics |= IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n-       break;\n-+    case OPTION_NO_NX_COMPAT:\n-+      pe_dll_characteristics &= ~IMAGE_DLL_CHARACTERISTICS_NX_COMPAT;\n-+      break;\n-     case OPTION_NO_ISOLATION:\n-       pe_dll_characteristics |= IMAGE_DLLCHARACTERISTICS_NO_ISOLATION;\n-       break;"
      },
      {
        "sha": "f327c464f3ec3ca38140300e7e099bbe20afd6d3",
        "filename": "contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 400,
        "changes": 400,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/gcc-8-sort-libtool-find-output.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,400 +0,0 @@\n-guix: repro: Sort find output in libtool for gcc-8\n-\n-Otherwise the resulting .a static libraries (e.g. libstdc++.a) will not\n-be reproducible and end up making the Bitcoin binaries non-reproducible\n-as well.\n-\n-See: https://reproducible-builds.org/docs/archives/#gnu-libtool\n-\n-diff --git a/gcc/configure b/gcc/configure\n-index 97ba7d7d69c..e37a96f0c0c 100755\n---- a/gcc/configure\n-+++ b/gcc/configure\n-@@ -19720,20 +19720,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libcc1/configure b/libcc1/configure\n-index f53a121611c..5740ca90cab 100755\n---- a/libcc1/configure\n-+++ b/libcc1/configure\n-@@ -12221,20 +12221,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libffi/configure b/libffi/configure\n-index 790a291011f..54b1ac18306 100755\n---- a/libffi/configure\n-+++ b/libffi/configure\n-@@ -12661,20 +12661,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libgo/config/libtool.m4 b/libgo/config/libtool.m4\n-index f7005947454..8a84417b828 100644\n---- a/libgo/config/libtool.m4\n-+++ b/libgo/config/libtool.m4\n-@@ -6010,20 +6010,20 @@ if test \"$_lt_caught_CXX_error\" != yes; then\n- \t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libgo/config/ltmain.sh b/libgo/config/ltmain.sh\n-index ce66b44906a..0f81c401407 100644\n---- a/libgo/config/ltmain.sh\n-+++ b/libgo/config/ltmain.sh\n-@@ -2917,7 +2917,7 @@ func_extract_archives ()\n- \t    darwin_file=\n- \t    darwin_files=\n- \t    for darwin_file in $darwin_filelist; do\n--\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n-+\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n- \t      $LIPO -create -output \"$darwin_file\" $darwin_files\n- \t    done # $darwin_filelist\n- \t    $RM -rf unfat-$$\n-@@ -2932,7 +2932,7 @@ func_extract_archives ()\n-         func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n- \t;;\n-       esac\n--      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n-+      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n-     done\n- \n-     func_extract_archives_result=\"$my_oldobjs\"\n-diff --git a/libhsail-rt/configure b/libhsail-rt/configure\n-index a4fcc10c1f9..8e671229fcd 100755\n---- a/libhsail-rt/configure\n-+++ b/libhsail-rt/configure\n-@@ -12244,20 +12244,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libitm/configure b/libitm/configure\n-index dbf386db434..29d4f10611f 100644\n---- a/libitm/configure\n-+++ b/libitm/configure\n-@@ -13067,20 +13067,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/liboffloadmic/configure b/liboffloadmic/configure\n-index f873716991b..7aa9186b10e 100644\n---- a/liboffloadmic/configure\n-+++ b/liboffloadmic/configure\n-@@ -12379,20 +12379,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/liboffloadmic/plugin/configure b/liboffloadmic/plugin/configure\n-index c031eb3e7fa..67fc7368f21 100644\n---- a/liboffloadmic/plugin/configure\n-+++ b/liboffloadmic/plugin/configure\n-@@ -12086,20 +12086,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libsanitizer/configure b/libsanitizer/configure\n-index 4695bc7d4f7..cb7d25c07e6 100755\n---- a/libsanitizer/configure\n-+++ b/libsanitizer/configure\n-@@ -13308,20 +13308,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libstdc++-v3/configure b/libstdc++-v3/configure\n-index 61457e940ec..21ef1f61e41 100755\n---- a/libstdc++-v3/configure\n-+++ b/libstdc++-v3/configure\n-@@ -13087,20 +13087,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libtool.m4 b/libtool.m4\n-index 24d13f34409..940faaa161d 100644\n---- a/libtool.m4\n-+++ b/libtool.m4\n-@@ -6005,20 +6005,20 @@ if test \"$_lt_caught_CXX_error\" != yes; then\n- \t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/libvtv/configure b/libvtv/configure\n-index a197f750453..31ab3a0637b 100755\n---- a/libvtv/configure\n-+++ b/libvtv/configure\n-@@ -13339,20 +13339,20 @@ if test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n- \t      prelink_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n--\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n-+\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n- \t      old_archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n--\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n-+\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n- \t\t$RANLIB $oldlib'\n- \t      archive_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n- \t      archive_expsym_cmds_CXX='tpldir=Template.dir~\n- \t\trm -rf $tpldir~\n- \t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n--\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n-+\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n- \t      ;;\n- \t    *) # Version 6 and above use weak symbols\n- \t      archive_cmds_CXX='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n-diff --git a/ltmain.sh b/ltmain.sh\n-index 9503ec85d70..79f9ba89af5 100644\n---- a/ltmain.sh\n-+++ b/ltmain.sh\n-@@ -2917,7 +2917,7 @@ func_extract_archives ()\n- \t    darwin_file=\n- \t    darwin_files=\n- \t    for darwin_file in $darwin_filelist; do\n--\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n-+\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n- \t      $LIPO -create -output \"$darwin_file\" $darwin_files\n- \t    done # $darwin_filelist\n- \t    $RM -rf unfat-$$\n-@@ -2932,7 +2932,7 @@ func_extract_archives ()\n-         func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n- \t;;\n-       esac\n--      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n-+      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n-     done\n- \n-     func_extract_archives_result=\"$my_oldobjs\""
      },
      {
        "sha": "5c4d0c6ebe19699444a222e7fc0ec8bdd175ea3a",
        "filename": "contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-elfm-loadaddr-dynamic-rewrite.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,62 +0,0 @@\n-https://sourceware.org/git/?p=glibc.git;a=commit;h=a68ba2f3cd3cbe32c1f31e13c20ed13487727b32\n-\n-commit 6b02af31e9a721bb15a11380cd22d53b621711f8\n-Author: Szabolcs Nagy <szabolcs.nagy@arm.com>\n-Date:   Wed Oct 18 17:26:23 2017 +0100\n-\n-    [AARCH64] Rewrite elf_machine_load_address using _DYNAMIC symbol\n-    \n-    This patch rewrites aarch64 elf_machine_load_address to use special _DYNAMIC\n-    symbol instead of _dl_start.\n-    \n-    The static address of _DYNAMIC symbol is stored in the first GOT entry.\n-    Here is the change which makes this solution work (part of binutils 2.24):\n-    https://sourceware.org/ml/binutils/2013-06/msg00248.html\n-    \n-    i386, x86_64 targets use the same method to do this as well.\n-    \n-    The original implementation relies on a trick that R_AARCH64_ABS32 relocation\n-    being resolved at link time and the static address fits in the 32bits.\n-    However, in LP64, normally, the address is defined to be 64 bit.\n-    \n-    Here is the C version one which should be portable in all cases.\n-    \n-            * sysdeps/aarch64/dl-machine.h (elf_machine_load_address): Use\n-            _DYNAMIC symbol to calculate load address.\n-\n-diff --git a/sysdeps/aarch64/dl-machine.h b/sysdeps/aarch64/dl-machine.h\n-index e86d8b5b63..5a5b8a5de5 100644\n---- a/sysdeps/aarch64/dl-machine.h\n-+++ b/sysdeps/aarch64/dl-machine.h\n-@@ -49,26 +49,11 @@ elf_machine_load_address (void)\n-   /* To figure out the load address we use the definition that for any symbol:\n-      dynamic_addr(symbol) = static_addr(symbol) + load_addr\n- \n--     The choice of symbol is arbitrary. The static address we obtain\n--     by constructing a non GOT reference to the symbol, the dynamic\n--     address of the symbol we compute using adrp/add to compute the\n--     symbol's address relative to the PC.\n--     This depends on 32bit relocations being resolved at link time\n--     and that the static address fits in the 32bits.  */\n--\n--  ElfW(Addr) static_addr;\n--  ElfW(Addr) dynamic_addr;\n--\n--  asm (\"\t\t\t\t\t\\n\"\n--\"\tadrp\t%1, _dl_start;\t\t\t\\n\"\n--\"\tadd\t%1, %1, #:lo12:_dl_start\t\\n\"\n--\"\tldr\t%w0, 1f\t\t\t\t\\n\"\n--\"\tb\t2f\t\t\t\t\\n\"\n--\"1:\t\t\t\t\t\t\\n\"\n--\"\t.word\t_dl_start\t\t\t\\n\"\n--\"2:\t\t\t\t\t\t\\n\"\n--    : \"=r\" (static_addr),  \"=r\" (dynamic_addr));\n--  return dynamic_addr - static_addr;\n-+    _DYNAMIC sysmbol is used here as its link-time address stored in\n-+    the special unrelocated first GOT entry.  */\n-+\n-+    extern ElfW(Dyn) _DYNAMIC[] attribute_hidden;\n-+    return (ElfW(Addr)) &_DYNAMIC - elf_machine_dynamic ();\n- }\n- \n- /* Set up the loaded object described by L so its unrelocated PLT"
      },
      {
        "sha": "11fe7fdc99c05c89c01ca7d2278be2d17f109aef",
        "filename": "contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 100,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.24-no-build-time-cxx-header-run.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,100 +0,0 @@\n-https://sourceware.org/git/?p=glibc.git;a=commit;h=fc3e1337be1c6935ab58bd13520f97a535cf70cc\n-\n-commit dc23a45db566095e83ff0b7a57afc87fb5ca89a1\n-Author: Florian Weimer <fweimer@redhat.com>\n-Date:   Wed Sep 21 10:45:32 2016 +0200\n-\n-    Avoid running $(CXX) during build to obtain header file paths\n-    \n-    This reduces the build time somewhat and is particularly noticeable\n-    during rebuilds with few code changes.\n-\n-diff --git a/Makerules b/Makerules\n-index 7e4077ee50..c338850de5 100644\n---- a/Makerules\n-+++ b/Makerules\n-@@ -121,14 +121,10 @@ ifneq (,$(CXX))\n- # will be used instead of /usr/include/stdlib.h and /usr/include/math.h.\n- before-compile := $(common-objpfx)cstdlib $(common-objpfx)cmath \\\n- \t          $(before-compile)\n--cstdlib=$(shell echo \"\\#include <cstdlib>\" | $(CXX) -M -MP -x c++ - \\\n--\t\t| sed -n \"/cstdlib:/{s/:$$//;p}\")\n--$(common-objpfx)cstdlib: $(cstdlib)\n-+$(common-objpfx)cstdlib: $(c++-cstdlib-header)\n- \t$(INSTALL_DATA) $< $@T\n- \t$(move-if-change) $@T $@\n--cmath=$(shell echo \"\\#include <cmath>\" | $(CXX) -M -MP -x c++ - \\\n--\t\t| sed -n \"/cmath:/{s/:$$//;p}\")\n--$(common-objpfx)cmath: $(cmath)\n-+$(common-objpfx)cmath: $(c++-cmath-header)\n- \t$(INSTALL_DATA) $< $@T\n- \t$(move-if-change) $@T $@\n- endif\n-diff --git a/config.make.in b/config.make.in\n-index 95c6f36876..04a8b3ed7f 100644\n---- a/config.make.in\n-+++ b/config.make.in\n-@@ -45,6 +45,8 @@ defines = @DEFINES@\n- sysheaders = @sysheaders@\n- sysincludes = @SYSINCLUDES@\n- c++-sysincludes = @CXX_SYSINCLUDES@\n-+c++-cstdlib-header = @CXX_CSTDLIB_HEADER@\n-+c++-cmath-header = @CXX_CMATH_HEADER@\n- all-warnings = @all_warnings@\n- enable-werror = @enable_werror@\n- \n-diff --git a/configure b/configure\n-index 17625e1041..6ff252744b 100755\n---- a/configure\n-+++ b/configure\n-@@ -635,6 +635,8 @@ BISON\n- INSTALL_INFO\n- PERL\n- BASH_SHELL\n-+CXX_CMATH_HEADER\n-+CXX_CSTDLIB_HEADER\n- CXX_SYSINCLUDES\n- SYSINCLUDES\n- AUTOCONF\n-@@ -5054,6 +5056,18 @@ fi\n- \n- \n- \n-+# Obtain some C++ header file paths.  This is used to make a local\n-+# copy of those headers in Makerules.\n-+if test -n \"$CXX\"; then\n-+  find_cxx_header () {\n-+    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n-+  }\n-+  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n-+  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n-+fi\n-+\n-+\n-+\n- # Test if LD_LIBRARY_PATH contains the notation for the current directory\n- # since this would lead to problems installing/building glibc.\n- # LD_LIBRARY_PATH contains the current directory if one of the following\n-diff --git a/configure.ac b/configure.ac\n-index 33bcd62180..9938ab0dc2 100644\n---- a/configure.ac\n-+++ b/configure.ac\n-@@ -1039,6 +1039,18 @@ fi\n- AC_SUBST(SYSINCLUDES)\n- AC_SUBST(CXX_SYSINCLUDES)\n- \n-+# Obtain some C++ header file paths.  This is used to make a local\n-+# copy of those headers in Makerules.\n-+if test -n \"$CXX\"; then\n-+  find_cxx_header () {\n-+    echo \"#include <$1>\" | $CXX -M -MP -x c++ - | sed -n \"/$1:/{s/:\\$//;p}\"\n-+  }\n-+  CXX_CSTDLIB_HEADER=\"$(find_cxx_header cstdlib)\"\n-+  CXX_CMATH_HEADER=\"$(find_cxx_header cmath)\"\n-+fi\n-+AC_SUBST(CXX_CSTDLIB_HEADER)\n-+AC_SUBST(CXX_CMATH_HEADER)\n-+\n- # Test if LD_LIBRARY_PATH contains the notation for the current directory\n- # since this would lead to problems installing/building glibc.\n- # LD_LIBRARY_PATH contains the current directory if one of the following"
      },
      {
        "sha": "d6217157ee57e9b67af70db0fe22964caa34afb4",
        "filename": "contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 72,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-2.27-riscv64-Use-__has_include__-to-include-asm-syscalls.h.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,72 +0,0 @@\n-https://sourceware.org/git/?p=glibc.git;a=commit;h=0b9c84906f653978fb8768c7ebd0ee14a47e662e\n-\n-From 562c52cc81a4e456a62e6455feb32732049e9070 Mon Sep 17 00:00:00 2001\n-From: \"H.J. Lu\" <hjl.tools@gmail.com>\n-Date: Mon, 31 Dec 2018 09:26:42 -0800\n-Subject: [PATCH] riscv: Use __has_include__ to include <asm/syscalls.h> [BZ\n- #24022]\n-\n-<asm/syscalls.h> has been removed by\n-\n-commit 27f8899d6002e11a6e2d995e29b8deab5aa9cc25\n-Author: David Abdurachmanov <david.abdurachmanov@gmail.com>\n-Date:   Thu Nov 8 20:02:39 2018 +0100\n-\n-    riscv: add asm/unistd.h UAPI header\n-\n-    Marcin Juszkiewicz reported issues while generating syscall table for riscv\n-    using 4.20-rc1. The patch refactors our unistd.h files to match some other\n-    architectures.\n-\n-    - Add asm/unistd.h UAPI header, which has __ARCH_WANT_NEW_STAT only for 64-bit\n-    - Remove asm/syscalls.h UAPI header and merge to asm/unistd.h\n-    - Adjust kernel asm/unistd.h\n-\n-    So now asm/unistd.h UAPI header should show all syscalls for riscv.\n-\n-<asm/syscalls.h> may be restored by\n-\n-Subject: [PATCH] riscv: restore asm/syscalls.h UAPI header\n-Date: Tue, 11 Dec 2018 09:09:35 +0100\n-\n-UAPI header asm/syscalls.h was merged into UAPI asm/unistd.h header,\n-which did resolve issue with missing syscalls macros resulting in\n-glibc (2.28) build failure. It also broke glibc in a different way:\n-asm/syscalls.h is being used by glibc. I noticed this while doing\n-Fedora 30/Rawhide mass rebuild.\n-\n-The patch returns asm/syscalls.h header and incl. it into asm/unistd.h.\n-I plan to send a patch to glibc to use asm/unistd.h instead of\n-asm/syscalls.h\n-\n-In the meantime, we use __has_include__, which was added to GCC 5, to\n-check if <asm/syscalls.h> exists before including it.  Tested with\n-build-many-glibcs.py for riscv against kernel 4.19.12 and 4.20-rc7.\n-\n-\t[BZ #24022]\n-\t* sysdeps/unix/sysv/linux/riscv/flush-icache.c: Check if\n-\t<asm/syscalls.h> exists with __has_include__ before including it.\n----\n- sysdeps/unix/sysv/linux/riscv/flush-icache.c | 6 +++++-\n- 1 file changed, 5 insertions(+), 1 deletion(-)\n-\n-diff --git a/sysdeps/unix/sysv/linux/riscv/flush-icache.c b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n-index d612ef4c6c..0b2042620b 100644\n---- a/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n-+++ b/sysdeps/unix/sysv/linux/riscv/flush-icache.c\n-@@ -21,7 +21,11 @@\n- #include <stdlib.h>\n- #include <atomic.h>\n- #include <sys/cachectl.h>\n--#include <asm/syscalls.h>\n-+#if __has_include__ (<asm/syscalls.h>)\n-+# include <asm/syscalls.h>\n-+#else\n-+# include <asm/unistd.h>\n-+#endif\n- \n- typedef int (*func_type) (void *, void *, unsigned long int);\n- \n--- \n-2.31.1\n-"
      },
      {
        "sha": "b1b6d5a54863cbcb6a2d92e3bdb9127defbb4d99",
        "filename": "contrib/guix/patches/glibc-ldd-x86_64.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-ldd-x86_64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-ldd-x86_64.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,10 +0,0 @@\n-By default, 'RTDLLIST' in 'ldd' refers to 'lib64/ld-linux-x86-64.so', whereas\n-it's in 'lib/' for us.  This patch fixes that.\n-\n---- glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2012-12-25 04:02:13.000000000 +0100\n-+++ glibc-2.17/sysdeps/unix/sysv/linux/x86_64/ldd-rewrite.sed\t2013-09-15 23:08:03.000000000 +0200\n-@@ -1,3 +1,3 @@\n- /LD_TRACE_LOADED_OBJECTS=1/a\\\n- add_env=\"$add_env LD_LIBRARY_VERSION=\\\\$verify_out\"\n--s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\264\\4-x86-64\\6 \\2x32\\4-x32\\6\"_\n-+s_^\\(RTLDLIST=\\)\\(.*lib\\)\\(\\|64\\|x32\\)\\(/[^/]*\\)\\(-x86-64\\|-x32\\)\\(\\.so\\.[0-9.]*\\)[ \t]*$_\\1\"\\2\\4\\6 \\2\\4-x86-64\\6 \\2x32\\4-x32\\6\"_"
      },
      {
        "sha": "bc7652127fa5a2aca5e7cea1793b5679ac17aa06",
        "filename": "contrib/guix/patches/glibc-versioned-locpath.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 240,
        "changes": 240,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-versioned-locpath.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/glibc-versioned-locpath.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/glibc-versioned-locpath.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,240 +0,0 @@\n-The format of locale data can be incompatible between libc versions, and\n-loading incompatible data can lead to 'setlocale' returning EINVAL at best\n-or triggering an assertion failure at worst.  See\n-https://lists.gnu.org/archive/html/guix-devel/2015-09/msg00717.html\n-for background information.\n-\n-To address that, this patch changes libc to honor a new 'GUIX_LOCPATH'\n-variable, and to look for locale data in version-specific sub-directories of\n-that variable.  So, if GUIX_LOCPATH=/foo:/bar, locale data is searched for in\n-/foo/X.Y and /bar/X.Y, where X.Y is the libc version number.\n-\n-That way, a single 'GUIX_LOCPATH' setting can work even if different libc\n-versions coexist on the system.\n-\n---- a/locale/newlocale.c\n-+++ b/locale/newlocale.c\n-@@ -30,6 +30,7 @@\n- /* Lock for protecting global data.  */\n- __libc_rwlock_define (extern , __libc_setlocale_lock attribute_hidden)\n- \n-+extern error_t compute_locale_search_path (char **, size_t *);\n- \n- /* Use this when we come along an error.  */\n- #define ERROR_RETURN\t\t\t\t\t\t\t      \\\n-@@ -48,7 +49,6 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n-   __locale_t result_ptr;\n-   char *locale_path;\n-   size_t locale_path_len;\n--  const char *locpath_var;\n-   int cnt;\n-   size_t names_len;\n- \n-@@ -102,17 +102,8 @@ __newlocale (int category_mask, const char *locale, __locale_t base)\n-   locale_path = NULL;\n-   locale_path_len = 0;\n- \n--  locpath_var = getenv (\"LOCPATH\");\n--  if (locpath_var != NULL && locpath_var[0] != '\\0')\n--    {\n--      if (__argz_create_sep (locpath_var, ':',\n--\t\t\t     &locale_path, &locale_path_len) != 0)\n--\treturn NULL;\n--\n--      if (__argz_add_sep (&locale_path, &locale_path_len,\n--\t\t\t  _nl_default_locale_path, ':') != 0)\n--\treturn NULL;\n--    }\n-+  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n-+    return NULL;\n- \n-   /* Get the names for the locales we are interested in.  We either\n-      allow a composite name or a single name.  */\n-diff --git a/locale/setlocale.c b/locale/setlocale.c\n-index ead030d..0c0e314 100644\n---- a/locale/setlocale.c\n-+++ b/locale/setlocale.c\n-@@ -215,12 +215,65 @@ setdata (int category, struct __locale_data *data)\n-     }\n- }\n- \n-+/* Return in *LOCALE_PATH and *LOCALE_PATH_LEN the locale data search path as\n-+   a colon-separated list.  Return ENOMEN on error, zero otherwise.  */\n-+error_t\n-+compute_locale_search_path (char **locale_path, size_t *locale_path_len)\n-+{\n-+  char* guix_locpath_var = getenv (\"GUIX_LOCPATH\");\n-+  char *locpath_var = getenv (\"LOCPATH\");\n-+\n-+  if (guix_locpath_var != NULL && guix_locpath_var[0] != '\\0')\n-+    {\n-+      /* Entries in 'GUIX_LOCPATH' take precedence over 'LOCPATH'.  These\n-+\t entries are systematically prefixed with \"/X.Y\" where \"X.Y\" is the\n-+\t libc version.  */\n-+      if (__argz_create_sep (guix_locpath_var, ':',\n-+\t\t\t     locale_path, locale_path_len) != 0\n-+\t  || __argz_suffix_entries (locale_path, locale_path_len,\n-+\t\t\t\t    \"/\" VERSION) != 0)\n-+\tgoto bail_out;\n-+    }\n-+\n-+  if (locpath_var != NULL && locpath_var[0] != '\\0')\n-+    {\n-+      char *reg_locale_path = NULL;\n-+      size_t reg_locale_path_len = 0;\n-+\n-+      if (__argz_create_sep (locpath_var, ':',\n-+\t\t\t     &reg_locale_path, &reg_locale_path_len) != 0)\n-+\tgoto bail_out;\n-+\n-+      if (__argz_append (locale_path, locale_path_len,\n-+\t\t\t reg_locale_path, reg_locale_path_len) != 0)\n-+\tgoto bail_out;\n-+\n-+      free (reg_locale_path);\n-+    }\n-+\n-+  if (*locale_path != NULL)\n-+    {\n-+      /* Append the system default locale directory.  */\n-+      if (__argz_add_sep (locale_path, locale_path_len,\n-+\t\t\t  _nl_default_locale_path, ':') != 0)\n-+\tgoto bail_out;\n-+    }\n-+\n-+  return 0;\n-+\n-+ bail_out:\n-+  free (*locale_path);\n-+  *locale_path = NULL;\n-+  *locale_path_len = 0;\n-+\n-+  return ENOMEM;\n-+}\n-+\n- char *\n- setlocale (int category, const char *locale)\n- {\n-   char *locale_path;\n-   size_t locale_path_len;\n--  const char *locpath_var;\n-   char *composite;\n- \n-   /* Sanity check for CATEGORY argument.  */\n-@@ -251,17 +304,10 @@ setlocale (int category, const char *locale)\n-   locale_path = NULL;\n-   locale_path_len = 0;\n- \n--  locpath_var = getenv (\"LOCPATH\");\n--  if (locpath_var != NULL && locpath_var[0] != '\\0')\n-+  if (compute_locale_search_path (&locale_path, &locale_path_len) != 0)\n-     {\n--      if (__argz_create_sep (locpath_var, ':',\n--\t\t\t     &locale_path, &locale_path_len) != 0\n--\t  || __argz_add_sep (&locale_path, &locale_path_len,\n--\t\t\t     _nl_default_locale_path, ':') != 0)\n--\t{\n--\t  __libc_rwlock_unlock (__libc_setlocale_lock);\n--\t  return NULL;\n--\t}\n-+      __libc_rwlock_unlock (__libc_setlocale_lock);\n-+      return NULL;\n-     }\n- \n-   if (category == LC_ALL)\n-diff --git a/string/Makefile b/string/Makefile\n-index 8424a61..f925503 100644\n---- a/string/Makefile\n-+++ b/string/Makefile\n-@@ -38,7 +38,7 @@ routines\t:= strcat strchr strcmp strcoll strcpy strcspn\t\t\\\n- \t\t   swab strfry memfrob memmem rawmemchr strchrnul\t\\\n- \t\t   $(addprefix argz-,append count create ctsep next\t\\\n- \t\t\t\t     delete extract insert stringify\t\\\n--\t\t\t\t     addsep replace)\t\t\t\\\n-+\t\t\t\t     addsep replace suffix)\t\t\\\n- \t\t   envz basename\t\t\t\t\t\\\n- \t\t   strcoll_l strxfrm_l string-inlines memrchr\t\t\\\n- \t\t   xpg-strerror strerror_l\n-diff --git a/string/argz-suffix.c b/string/argz-suffix.c\n-new file mode 100644\n-index 0000000..505b0f2\n---- /dev/null\n-+++ b/string/argz-suffix.c\n-@@ -0,0 +1,56 @@\n-+/* Copyright (C) 2015 Free Software Foundation, Inc.\n-+   This file is part of the GNU C Library.\n-+   Contributed by Ludovic Court\u00e8s <ludo@gnu.org>.\n-+\n-+   The GNU C Library is free software; you can redistribute it and/or\n-+   modify it under the terms of the GNU Lesser General Public\n-+   License as published by the Free Software Foundation; either\n-+   version 2.1 of the License, or (at your option) any later version.\n-+\n-+   The GNU C Library is distributed in the hope that it will be useful,\n-+   but WITHOUT ANY WARRANTY; without even the implied warranty of\n-+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n-+   Lesser General Public License for more details.\n-+\n-+   You should have received a copy of the GNU Lesser General Public\n-+   License along with the GNU C Library; if not, see\n-+   <http://www.gnu.org/licenses/>.  */\n-+\n-+#include <argz.h>\n-+#include <errno.h>\n-+#include <stdlib.h>\n-+#include <string.h>\n-+\n-+\n-+error_t\n-+__argz_suffix_entries (char **argz, size_t *argz_len, const char *suffix)\n-+\n-+{\n-+  size_t suffix_len = strlen (suffix);\n-+  size_t count = __argz_count (*argz, *argz_len);\n-+  size_t new_argz_len = *argz_len + count * suffix_len;\n-+  char *new_argz = malloc (new_argz_len);\n-+\n-+  if (new_argz)\n-+    {\n-+      char *p = new_argz, *entry;\n-+\n-+      for (entry = *argz;\n-+\t   entry != NULL;\n-+\t   entry = argz_next (*argz, *argz_len, entry))\n-+\t{\n-+\t  p = stpcpy (p, entry);\n-+\t  p = stpcpy (p, suffix);\n-+\t  p++;\n-+\t}\n-+\n-+      free (*argz);\n-+      *argz = new_argz;\n-+      *argz_len = new_argz_len;\n-+\n-+      return 0;\n-+    }\n-+  else\n-+    return ENOMEM;\n-+}\n-+weak_alias (__argz_suffix_entries, argz_suffix_entries)\n-diff --git a/string/argz.h b/string/argz.h\n-index bb62a31..d276a35 100644\n---- a/string/argz.h\n-+++ b/string/argz.h\n-@@ -134,6 +134,16 @@ extern error_t argz_replace (char **__restrict __argz,\n- \t\t\t     const char *__restrict __str,\n- \t\t\t     const char *__restrict __with,\n- \t\t\t     unsigned int *__restrict __replace_count);\n-+\n-+/* Suffix each entry of ARGZ & ARGZ_LEN with SUFFIX.  Return 0 on success,\n-+   and ENOMEN if memory cannot be allocated.  */\n-+extern error_t __argz_suffix_entries (char **__restrict __argz,\n-+\t\t\t\t      size_t *__restrict __argz_len,\n-+\t\t\t\t      const char *__restrict __suffix);\n-+extern error_t argz_suffix_entries (char **__restrict __argz,\n-+\t\t\t\t    size_t *__restrict __argz_len,\n-+\t\t\t\t    const char *__restrict __suffix);\n-+\n- \f\n- /* Returns the next entry in ARGZ & ARGZ_LEN after ENTRY, or NULL if there\n-    are no more.  If entry is NULL, then the first entry is returned.  This"
      },
      {
        "sha": "f58406a7a08901a413dec1223f1f881e04de956d",
        "filename": "contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/nsis-SConstruct-sde-support.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/nsis-SConstruct-sde-support.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,18 +0,0 @@\n-https://github.com/kichik/nsis/pull/13\n-https://sourceforge.net/p/nsis/code/7248/\n-\n-diff --git a/SConstruct b/SConstruct\n-index e8252c9..41786f2 100755\n---- a/SConstruct\n-+++ b/SConstruct\n-@@ -95,8 +95,8 @@ default_doctype = 'html'\n- if defenv.WhereIs('hhc', os.environ['PATH']):\n- \tdefault_doctype = 'chm'\n- \n--from time import strftime, gmtime\n--cvs_version = strftime('%d-%b-%Y.cvs', gmtime())\n-+import time\n-+cvs_version = time.strftime('%d-%b-%Y.cvs', time.gmtime(int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))))\n- \n- opts = Variables()\n- "
      },
      {
        "sha": "32027f2d09af17199011cd04a6db62e0a92cdcfc",
        "filename": "contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/guix/patches/oscrypto-hard-code-openssl.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/guix/patches/oscrypto-hard-code-openssl.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,13 +0,0 @@\n-diff --git a/oscrypto/__init__.py b/oscrypto/__init__.py\n-index eb27313..371ab24 100644\n---- a/oscrypto/__init__.py\n-+++ b/oscrypto/__init__.py\n-@@ -302,3 +302,8 @@ def load_order():\n-         'oscrypto._win.tls',\n-         'oscrypto.tls',\n-     ]\n-+\n-+\n-+paths = '@GUIX_OSCRYPTO_USE_OPENSSL@'.split(',')\n-+assert len(paths) == 2, 'Value for OSCRYPTO_USE_OPENSSL env var must be two paths separated by a comma'\n-+use_openssl(*paths)"
      },
      {
        "sha": "306a37f75ab7018b0ce015064a7ae0159fd6e015",
        "filename": "contrib/init/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,6 +1,6 @@\n Sample configuration files for:\n ```\n-systemd: bitcoind.service\n+SystemD: bitcoind.service\n Upstart: bitcoind.conf\n OpenRC:  bitcoind.openrc\n          bitcoind.openrcconf\n@@ -9,4 +9,4 @@ macOS:   org.bitcoin.bitcoind.plist\n ```\n have been made available to assist packagers in creating node packages here.\n \n-See [doc/init.md](../../doc/init.md) for more information.\n+See doc/init.md for more information."
      },
      {
        "sha": "86222295dbe052a5c6455e80dcf830161dccc05f",
        "filename": "contrib/init/bitcoind.openrc",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/bitcoind.openrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/bitcoind.openrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.openrc?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -60,17 +60,16 @@ start_pre() {\n \t\"${BITCOIND_PIDDIR}\"\n \n \tcheckpath -f \\\n-\t-o \"${BITCOIND_USER}:${BITCOIND_GROUP}\" \\\n+\t-o ${BITCOIND_USER}:${BITCOIND_GROUP} \\\n \t-m 0660 \\\n-\t\"${BITCOIND_CONFIGFILE}\"\n+\t${BITCOIND_CONFIGFILE}\n \n \tcheckconfig || return 1\n }\n \n checkconfig()\n {\n-\tif grep -qs '^rpcuser=' \"${BITCOIND_CONFIGFILE}\" && \\\n-\t\t! grep -qs '^rpcpassword=' \"${BITCOIND_CONFIGFILE}\" ; then\n+\tif ! grep -qs '^rpcpassword=' \"${BITCOIND_CONFIGFILE}\" ; then\n \t\teerror \"\"\n \t\teerror \"ERROR: You must set a secure rpcpassword to run bitcoind.\"\n \t\teerror \"The setting must appear in ${BITCOIND_CONFIGFILE}\""
      },
      {
        "sha": "8b308644b10611ae4e558e08aa003a3a2e1ad370",
        "filename": "contrib/init/bitcoind.service",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/bitcoind.service",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/init/bitcoind.service",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/init/bitcoind.service?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -11,14 +11,10 @@\n \n [Unit]\n Description=Bitcoin daemon\n-Documentation=https://github.com/bitcoin/bitcoin/blob/master/doc/init.md\n-\n-# https://www.freedesktop.org/wiki/Software/systemd/NetworkTarget/\n-After=network-online.target\n-Wants=network-online.target\n+After=network.target\n \n [Service]\n-ExecStart=/usr/bin/bitcoind -daemonwait \\\n+ExecStart=/usr/bin/bitcoind -daemon \\\n                             -pid=/run/bitcoind/bitcoind.pid \\\n                             -conf=/etc/bitcoin/bitcoin.conf \\\n                             -datadir=/var/lib/bitcoind\n@@ -33,7 +29,6 @@ ExecStartPre=/bin/chgrp bitcoin /etc/bitcoin\n Type=forking\n PIDFile=/run/bitcoind/bitcoind.pid\n Restart=on-failure\n-TimeoutStartSec=infinity\n TimeoutStopSec=600\n \n # Directory creation and permissions"
      },
      {
        "sha": "e9130a21ded67cbb3a9811f2a27a6affe46d3634",
        "filename": "contrib/install_db4.sh",
        "status": "modified",
        "additions": 8,
        "deletions": 153,
        "changes": 161,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/install_db4.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/install_db4.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/install_db4.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -68,163 +68,18 @@ tar -xzvf ${BDB_VERSION}.tar.gz -C \"$BDB_PREFIX\"\n cd \"${BDB_PREFIX}/${BDB_VERSION}/\"\n \n # Apply a patch necessary when building with clang and c++11 (see https://community.oracle.com/thread/3952592)\n-patch --ignore-whitespace -p1 << 'EOF'\n-commit 3311d68f11d1697565401eee6efc85c34f022ea7\n-Author: fanquake <fanquake@gmail.com>\n-Date:   Mon Aug 17 20:03:56 2020 +0800\n-\n-    Fix C++11 compatibility\n-\n-diff --git a/dbinc/atomic.h b/dbinc/atomic.h\n-index 0034dcc..7c11d4a 100644\n---- a/dbinc/atomic.h\n-+++ b/dbinc/atomic.h\n-@@ -70,7 +70,7 @@ typedef struct {\n-  * These have no memory barriers; the caller must include them when necessary.\n-  */\n- #define\tatomic_read(p)\t\t((p)->value)\n--#define\tatomic_init(p, val)\t((p)->value = (val))\n-+#define\tatomic_init_db(p, val)\t((p)->value = (val))\n-\n- #ifdef HAVE_ATOMIC_SUPPORT\n-\n-@@ -144,7 +144,7 @@ typedef LONG volatile *interlocked_val;\n- #define\tatomic_inc(env, p)\t__atomic_inc(p)\n- #define\tatomic_dec(env, p)\t__atomic_dec(p)\n- #define\tatomic_compare_exchange(env, p, o, n)\t\\\n--\t__atomic_compare_exchange((p), (o), (n))\n-+\t__atomic_compare_exchange_db((p), (o), (n))\n- static inline int __atomic_inc(db_atomic_t *p)\n- {\n- \tint\ttemp;\n-@@ -176,7 +176,7 @@ static inline int __atomic_dec(db_atomic_t *p)\n-  * http://gcc.gnu.org/onlinedocs/gcc-4.1.0/gcc/Atomic-Builtins.html\n-  * which configure could be changed to use.\n-  */\n--static inline int __atomic_compare_exchange(\n-+static inline int __atomic_compare_exchange_db(\n- \tdb_atomic_t *p, atomic_value_t oldval, atomic_value_t newval)\n- {\n- \tatomic_value_t was;\n-@@ -206,7 +206,7 @@ static inline int __atomic_compare_exchange(\n- #define\tatomic_dec(env, p)\t(--(p)->value)\n- #define\tatomic_compare_exchange(env, p, oldval, newval)\t\t\\\n- \t(DB_ASSERT(env, atomic_read(p) == (oldval)),\t\t\\\n--\tatomic_init(p, (newval)), 1)\n-+\tatomic_init_db(p, (newval)), 1)\n- #else\n- #define atomic_inc(env, p)\t__atomic_inc(env, p)\n- #define atomic_dec(env, p)\t__atomic_dec(env, p)\n-diff --git a/mp/mp_fget.c b/mp/mp_fget.c\n-index 5fdee5a..0b75f57 100644\n---- a/mp/mp_fget.c\n-+++ b/mp/mp_fget.c\n-@@ -617,7 +617,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n-\n- \t\t/* Initialize enough so we can call __memp_bhfree. */\n- \t\talloc_bhp->flags = 0;\n--\t\tatomic_init(&alloc_bhp->ref, 1);\n-+\t\tatomic_init_db(&alloc_bhp->ref, 1);\n- #ifdef DIAGNOSTIC\n- \t\tif ((uintptr_t)alloc_bhp->buf & (sizeof(size_t) - 1)) {\n- \t\t\t__db_errx(env,\n-@@ -911,7 +911,7 @@ alloc:\t\t/* Allocate a new buffer header and data space. */\n- \t\t\tMVCC_MPROTECT(bhp->buf, mfp->stat.st_pagesize,\n- \t\t\t    PROT_READ);\n-\n--\t\tatomic_init(&alloc_bhp->ref, 1);\n-+\t\tatomic_init_db(&alloc_bhp->ref, 1);\n- \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n- \t\talloc_bhp->priority = bhp->priority;\n- \t\talloc_bhp->pgno = bhp->pgno;\n-diff --git a/mp/mp_mvcc.c b/mp/mp_mvcc.c\n-index 34467d2..f05aa0c 100644\n---- a/mp/mp_mvcc.c\n-+++ b/mp/mp_mvcc.c\n-@@ -276,7 +276,7 @@ __memp_bh_freeze(dbmp, infop, hp, bhp, need_frozenp)\n- #else\n- \tmemcpy(frozen_bhp, bhp, SSZA(BH, buf));\n- #endif\n--\tatomic_init(&frozen_bhp->ref, 0);\n-+\tatomic_init_db(&frozen_bhp->ref, 0);\n- \tif (mutex != MUTEX_INVALID)\n- \t\tfrozen_bhp->mtx_buf = mutex;\n- \telse if ((ret = __mutex_alloc(env, MTX_MPOOL_BH,\n-@@ -428,7 +428,7 @@ __memp_bh_thaw(dbmp, infop, hp, frozen_bhp, alloc_bhp)\n- #endif\n- \t\talloc_bhp->mtx_buf = mutex;\n- \t\tMUTEX_LOCK(env, alloc_bhp->mtx_buf);\n--\t\tatomic_init(&alloc_bhp->ref, 1);\n-+\t\tatomic_init_db(&alloc_bhp->ref, 1);\n- \t\tF_CLR(alloc_bhp, BH_FROZEN);\n- \t}\n-\n-diff --git a/mp/mp_region.c b/mp/mp_region.c\n-index e6cece9..ddbe906 100644\n---- a/mp/mp_region.c\n-+++ b/mp/mp_region.c\n-@@ -224,7 +224,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n- \t\t\t     MTX_MPOOL_FILE_BUCKET, 0, &htab[i].mtx_hash)) != 0)\n- \t\t\t\treturn (ret);\n- \t\t\tSH_TAILQ_INIT(&htab[i].hash_bucket);\n--\t\t\tatomic_init(&htab[i].hash_page_dirty, 0);\n-+\t\t\tatomic_init_db(&htab[i].hash_page_dirty, 0);\n- \t\t}\n-\n- \t\t/*\n-@@ -269,7 +269,7 @@ __memp_init(env, dbmp, reginfo_off, htab_buckets, max_nreg)\n- \t\thp->mtx_hash = (mtx_base == MUTEX_INVALID) ? MUTEX_INVALID :\n- \t\t    mtx_base + i;\n- \t\tSH_TAILQ_INIT(&hp->hash_bucket);\n--\t\tatomic_init(&hp->hash_page_dirty, 0);\n-+\t\tatomic_init_db(&hp->hash_page_dirty, 0);\n- #ifdef HAVE_STATISTICS\n- \t\thp->hash_io_wait = 0;\n- \t\thp->hash_frozen = hp->hash_thawed = hp->hash_frozen_freed = 0;\n-diff --git a/mutex/mut_method.c b/mutex/mut_method.c\n-index 2588763..5c6d516 100644\n---- a/mutex/mut_method.c\n-+++ b/mutex/mut_method.c\n-@@ -426,7 +426,7 @@ atomic_compare_exchange(env, v, oldval, newval)\n- \tMUTEX_LOCK(env, mtx);\n- \tret = atomic_read(v) == oldval;\n- \tif (ret)\n--\t\tatomic_init(v, newval);\n-+\t\tatomic_init_db(v, newval);\n- \tMUTEX_UNLOCK(env, mtx);\n-\n- \treturn (ret);\n-diff --git a/mutex/mut_tas.c b/mutex/mut_tas.c\n-index f3922e0..e40fcdf 100644\n---- a/mutex/mut_tas.c\n-+++ b/mutex/mut_tas.c\n-@@ -46,7 +46,7 @@ __db_tas_mutex_init(env, mutex, flags)\n-\n- #ifdef HAVE_SHARED_LATCHES\n- \tif (F_ISSET(mutexp, DB_MUTEX_SHARED))\n--\t\tatomic_init(&mutexp->sharecount, 0);\n-+\t\tatomic_init_db(&mutexp->sharecount, 0);\n- \telse\n- #endif\n- \tif (MUTEX_INIT(&mutexp->tas)) {\n-@@ -486,7 +486,7 @@ __db_tas_mutex_unlock(env, mutex)\n- \t\t\tF_CLR(mutexp, DB_MUTEX_LOCKED);\n- \t\t\t/* Flush flag update before zeroing count */\n- \t\t\tMEMBAR_EXIT();\n--\t\t\tatomic_init(&mutexp->sharecount, 0);\n-+\t\t\tatomic_init_db(&mutexp->sharecount, 0);\n- \t\t} else {\n- \t\t\tDB_ASSERT(env, sharecount > 0);\n- \t\t\tMEMBAR_EXIT();\n-EOF\n+CLANG_CXX11_PATCH_URL='https://gist.githubusercontent.com/LnL7/5153b251fd525fe15de69b67e63a6075/raw/7778e9364679093a32dec2908656738e16b6bdcb/clang.patch'\n+CLANG_CXX11_PATCH_HASH='7a9a47b03fd5fb93a16ef42235fa9512db9b0829cfc3bdf90edd3ec1f44d637c'\n+http_get \"${CLANG_CXX11_PATCH_URL}\" clang.patch \"${CLANG_CXX11_PATCH_HASH}\"\n+patch -p2 < clang.patch\n \n # The packaged config.guess and config.sub are ancient (2009) and can cause build issues.\n # Replace them with modern versions.\n # See https://github.com/bitcoin/bitcoin/issues/16064\n-CONFIG_GUESS_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=4550d2f15b3a7ce2451c1f29500b9339430c877f'\n-CONFIG_GUESS_HASH='c8f530e01840719871748a8071113435bdfdf75b74c57e78e47898edea8754ae'\n-CONFIG_SUB_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=4550d2f15b3a7ce2451c1f29500b9339430c877f'\n-CONFIG_SUB_HASH='3969f7d5f6967ccc6f792401b8ef3916a1d1b1d0f0de5a4e354c95addb8b800e'\n+CONFIG_GUESS_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=55eaf3e779455c4e5cc9f82efb5278be8f8f900b'\n+CONFIG_GUESS_HASH='2d1ff7bca773d2ec3c6217118129220fa72d8adda67c7d2bf79994b3129232c1'\n+CONFIG_SUB_URL='https://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=55eaf3e779455c4e5cc9f82efb5278be8f8f900b'\n+CONFIG_SUB_HASH='3a4befde9bcdf0fdb2763fc1bfa74e8696df94e1ad7aac8042d133c8ff1d2e32'\n \n rm -f \"dist/config.guess\"\n rm -f \"dist/config.sub\""
      },
      {
        "sha": "5990b9307ab47b45e316e2d2bb4962fc2fe29b90",
        "filename": "contrib/linearize/example-linearize.cfg",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/linearize/example-linearize.cfg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/linearize/example-linearize.cfg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/example-linearize.cfg?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -13,9 +13,6 @@ port=8332\n #regtest default\n #port=18443\n \n-#signet default\n-#port=38332\n-\n # bootstrap.dat hashlist settings (linearize-hashes)\n max_height=313000\n \n@@ -36,11 +33,6 @@ input=/home/example/.bitcoin/blocks\n #genesis=0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206\n #input=/home/example/.bitcoin/regtest/blocks\n \n-# signet\n-#netmagic=0a03cf40\n-#genesis=00000008819873e925422c1ff0f99f7cc9bbb232af63a077a480a3633bee1ef6\n-#input=/home/example/.bitcoin/signet/blocks\n-\n # \"output\" option causes blockchain files to be written to the given location,\n # with \"output_file\" ignored. If not used, \"output_file\" is used instead.\n # output=/home/example/blockchain_directory"
      },
      {
        "sha": "bcca3b7cea4e3c4ee37a0b01c0736a2d134962e4",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -2,7 +2,7 @@\n #\n # linearize-data.py: Construct a linear, no-fork version of the chain.\n #\n-# Copyright (c) 2013-2020 The Bitcoin Core developers\n+# Copyright (c) 2013-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -17,6 +17,7 @@\n import time\n import glob\n from collections import namedtuple\n+from binascii import unhexlify\n \n settings = {}\n \n@@ -331,7 +332,7 @@ def run(self):\n     settings['max_out_sz'] = int(settings['max_out_sz'])\n     settings['split_timestamp'] = int(settings['split_timestamp'])\n     settings['file_timestamp'] = int(settings['file_timestamp'])\n-    settings['netmagic'] = bytes.fromhex(settings['netmagic'])\n+    settings['netmagic'] = unhexlify(settings['netmagic'].encode('utf-8'))\n     settings['out_of_order_cache_sz'] = int(settings['out_of_order_cache_sz'])\n     settings['debug_output'] = settings['debug_output'].lower()\n "
      },
      {
        "sha": "68ebb5def198bb79fe816c1c9f0895fdf34c75f4",
        "filename": "contrib/macdeploy/README.md",
        "status": "modified",
        "additions": 59,
        "deletions": 43,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -6,51 +6,63 @@ The `macdeployqtplus` script should not be run manually. Instead, after building\n make deploy\n ```\n \n-When complete, it will have produced `Bitcoin-Core.dmg`.\n+During the deployment process, the disk image window will pop up briefly\n+when the fancy settings are applied. This is normal, please do not interfere,\n+the process will unmount the DMG and cleanup before finishing.\n \n-## SDK Extraction\n+When complete, it will have produced `Bitcoin-Qt.dmg`.\n \n-### Step 1: Obtaining `Xcode.app`\n+## SDK Extraction\n \n-Our current macOS SDK\n-(`Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz`) can be\n-extracted from\n-[Xcode_12.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_12.1/Xcode_12.1.xip).\n-Alternatively, after logging in to your account go to 'Downloads', then 'More'\n-and look for [`Xcode_12.1`](https://download.developer.apple.com/Developer_Tools/Xcode_12.1/Xcode_12.1.xip).\n-An Apple ID and cookies enabled for the hostname are needed to download this.\n-The `sha256sum` of the archive should be `612443b1894b39368a596ea1607f30cbb0481ad44d5e29c75edb71a6d2cf050f`.\n+Our current macOS SDK (`macOSX10.14.sdk`) can be extracted from\n+[Xcode_10.2.1.xip](https://download.developer.apple.com/Developer_Tools/Xcode_10.2.1/Xcode_10.2.1.xip).\n+An Apple ID is needed to download this.\n \n-After Xcode version 7.x, Apple started shipping the `Xcode.app` in a `.xip`\n-archive. This makes the SDK less-trivial to extract on non-macOS machines. One\n-approach (tested on Debian Buster) is outlined below:\n+`Xcode.app` is packaged in a `.xip` archive.\n+This makes the SDK less-trivial to extract on non-macOS machines.\n+One approach (tested on Debian Buster) is outlined below:\n \n ```bash\n-# Install/clone tools needed for extracting Xcode.app\n-apt install cpio\n-git clone https://github.com/bitcoin-core/apple-sdk-tools.git\n \n-# Unpack Xcode_12.1.xip and place the resulting Xcode.app in your current\n-# working directory\n-python3 apple-sdk-tools/extract_xcode.py -f Xcode_12.1.xip | cpio -d -i\n+apt install clang cpio git liblzma-dev libxml2-dev libssl-dev make\n+\n+git clone https://github.com/tpoechtrager/xar\n+pushd xar/xar\n+./configure\n+make\n+make install\n+popd\n+\n+git clone https://github.com/NiklasRosenstein/pbzx\n+pushd pbzx\n+clang -llzma -lxar pbzx.c -o pbzx -Wl,-rpath=/usr/local/lib\n+popd\n+\n+xar -xf Xcode_10.2.1.xip -C .\n+\n+./pbzx/pbzx -n Content | cpio -i\n+\n+find Xcode.app -type d -name MacOSX.sdk -exec sh -c 'tar --transform=\"s/MacOSX.sdk/MacOSX10.14.sdk/\" -c -C$(dirname {}) MacOSX.sdk/ | gzip -9n > MacOSX10.14.sdk.tar.gz' \\;\n ```\n \n-On macOS the process is more straightforward:\n+on macOS the process is more straightforward:\n \n ```bash\n-xip -x Xcode_12.1.xip\n+xip -x Xcode_10.2.1.xip\n+tar -s \"/MacOSX.sdk/MacOSX10.14.sdk/\" -C Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/ -czf MacOSX10.14.sdk.tar.gz MacOSX.sdk\n ```\n \n-### Step 2: Generating `Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz` from `Xcode.app`\n-\n-To generate `Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz`, run\n-the script [`gen-sdk`](./gen-sdk) with the path to `Xcode.app` (extracted in the\n-previous stage) as the first argument.\n+Our previously used macOS SDK (`MacOSX10.11.sdk`) can be extracted from\n+[Xcode 7.3.1 dmg](https://developer.apple.com/devcenter/download.action?path=/Developer_Tools/Xcode_7.3.1/Xcode_7.3.1.dmg).\n+The script [`extract-osx-sdk.sh`](./extract-osx-sdk.sh) automates this. First\n+ensure the DMG file is in the current directory, and then run the script. You\n+may wish to delete the `intermediate 5.hfs` file and `MacOSX10.11.sdk` (the\n+directory) when you've confirmed the extraction succeeded.\n \n ```bash\n-# Generate a Xcode-12.1-12A7403-extracted-SDK-with-libcxx-headers.tar.gz from\n-# the supplied Xcode.app\n-./contrib/macdeploy/gen-sdk '/path/to/Xcode.app'\n+apt-get install p7zip-full sleuthkit\n+contrib/macdeploy/extract-osx-sdk.sh\n+rm -rf 5.hfs MacOSX10.11.sdk\n ```\n \n ## Deterministic macOS DMG Notes\n@@ -59,7 +71,7 @@ Working macOS DMGs are created in Linux by combining a recent `clang`, the Apple\n \n Apple uses `clang` extensively for development and has upstreamed the necessary\n functionality so that a vanilla clang can take advantage. It supports the use of `-F`,\n-`-target`, `-mmacosx-version-min`, and `-isysroot`, which are all necessary when\n+`-target`, `-mmacosx-version-min`, and `--sysroot`, which are all necessary when\n building for macOS.\n \n Apple's version of `binutils` (called `cctools`) contains lots of functionality missing in the\n@@ -79,45 +91,49 @@ and its `libLTO.so` rather than those from `llvmgcc`, as it was originally done\n \n To complicate things further, all builds must target an Apple SDK. These SDKs are free to\n download, but not redistributable. To obtain it, register for an Apple Developer Account,\n-then download [Xcode_12.1](https://download.developer.apple.com/Developer_Tools/Xcode_12.1/Xcode_12.1.xip).\n+then download [Xcode 10.2.1](https://download.developer.apple.com/Developer_Tools/Xcode_10.2.1/Xcode_10.2.1.xip).\n \n This file is many gigabytes in size, but most (but not all) of what we need is\n contained only in a single directory:\n \n ```bash\n-Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\n+Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk\n ```\n \n See the SDK Extraction notes above for how to obtain it.\n \n-The Guix process build 2 sets of files: Linux tools, then Apple binaries which are\n+The Gitian descriptors build 2 sets of files: Linux tools, then Apple binaries which are\n created using these tools. The build process has been designed to avoid including the\n-SDK's files in Guix's outputs. All interim tarballs are fully deterministic and may be freely\n+SDK's files in Gitian's outputs. All interim tarballs are fully deterministic and may be freely\n redistributed.\n \n-[`xorrisofs`](https://www.gnu.org/software/xorriso/) is used to create the DMG.\n+`genisoimage` is used to create the initial DMG. It is not deterministic as-is, so it has been\n+patched. A system `genisoimage` will work fine, but it will not be deterministic because\n+the file-order will change between invocations. The patch can be seen here: [cdrkit-deterministic.patch](https://github.com/bitcoin/bitcoin/blob/master/depends/patches/native_cdrkit/cdrkit-deterministic.patch).\n+No effort was made to fix this cleanly, so it likely leaks memory badly, however it's only used for\n+a single invocation, so that's no real concern.\n \n-`xorrisofs` cannot compress DMGs, so afterwards, the DMG tool from the\n-`libdmg-hfsplus` project is used to compress it. There are several bugs in this\n-tool and its maintainer has seemingly abandoned the project.\n+`genisoimage` cannot compress DMGs, so afterwards, the DMG tool from the\n+`libdmg-hfsplus` project is used to compress it. There are several bugs in this tool and its\n+maintainer has seemingly abandoned the project.\n \n The DMG tool has the ability to create DMGs from scratch as well, but this functionality is\n broken. Only the compression feature is currently used. Ideally, the creation could be fixed\n-and `xorrisofs` would no longer be necessary.\n+and `genisoimage` would no longer be necessary.\n \n Background images and other features can be added to DMG files by inserting a\n-`.DS_Store` during creation.\n+`.DS_Store` before creation. This is generated by the script `contrib/macdeploy/custom_dsstore.py`.\n \n As of OS X 10.9 Mavericks, using an Apple-blessed key to sign binaries is a requirement in\n order to satisfy the new Gatekeeper requirements. Because this private key cannot be\n shared, we'll have to be a bit creative in order for the build process to remain somewhat\n deterministic. Here's how it works:\n \n-- Builders use Guix to create an unsigned release. This outputs an unsigned DMG which\n+- Builders use Gitian to create an unsigned release. This outputs an unsigned DMG which\n   users may choose to bless and run. It also outputs an unsigned app structure in the form\n   of a tarball, which also contains all of the tools that have been previously (deterministically)\n   built in order to create a final DMG.\n - The Apple keyholder uses this unsigned app to create a detached signature, using the\n   script that is also included there. Detached signatures are available from this [repository](https://github.com/bitcoin-core/bitcoin-detached-sigs).\n-- Builders feed the unsigned app + detached signature back into Guix. It uses the\n+- Builders feed the unsigned app + detached signature back into Gitian. It uses the\n   pre-built tools to recombine the pieces into a deterministic DMG."
      },
      {
        "sha": "a2e891e4ab2aa91ffba92bded13cc248134b0e6d",
        "filename": "contrib/macdeploy/background.svg",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/background.svg",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/background.svg",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/background.svg?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -25,7 +25,7 @@\n \t</defs>\n \t<rect width=\"1000\" height=\"640\" style=\"fill:url(#gradient);stroke-width:0\" />\n \t<g transform=\"translate(500,0) scale(0.9, 1)\">\n-\t\t<text x=\"0\" y=\"114\">PACKAGE_NAME</text>\n+\t\t<text x=\"0\" y=\"114\">BitcoinStaking CORE</text>\n \t</g>\n \t<g transform=\"translate(0.000000,640.000000) scale(0.100000,-0.100000)\"\n \tfill=\"#000000\" stroke=\"none\">"
      },
      {
        "sha": "a18ca5d7be6a2aaa58e03717efbd4cb0ce7d85b8",
        "filename": "contrib/macdeploy/custom_dsstore.py",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/custom_dsstore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/custom_dsstore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/custom_dsstore.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,59 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2013-2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+import biplist\n+from ds_store import DSStore\n+from mac_alias import Alias\n+import sys\n+\n+output_file = sys.argv[1]\n+package_name_ns = sys.argv[2]\n+\n+ds = DSStore.open(output_file, 'w+')\n+ds['.']['bwsp'] = {\n+    'ShowStatusBar': False,\n+    'WindowBounds': '{{300, 280}, {500, 343}}',\n+    'ContainerShowSidebar': False,\n+    'SidebarWidth': 0,\n+    'ShowTabView': False,\n+    'PreviewPaneVisibility': False,\n+    'ShowToolbar': False,\n+    'ShowSidebar': False,\n+    'ShowPathbar': True\n+}\n+\n+icvp = {\n+    'gridOffsetX': 0.0,\n+    'textSize': 12.0,\n+    'viewOptionsVersion': 1,\n+    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n+    'backgroundColorBlue': 1.0,\n+    'iconSize': 96.0,\n+    'backgroundColorGreen': 1.0,\n+    'arrangeBy': 'none',\n+    'showIconPreview': True,\n+    'gridSpacing': 100.0,\n+    'gridOffsetY': 0.0,\n+    'showItemInfo': False,\n+    'labelOnBottom': True,\n+    'backgroundType': 2,\n+    'backgroundColorRed': 1.0\n+}\n+alias = Alias.from_bytes(icvp['backgroundImageAlias'])\n+alias.volume.name = package_name_ns\n+alias.volume.posix_path = '/Volumes/' + package_name_ns\n+alias.volume.disk_image_alias.target.filename = package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.carbon_path = 'Macintosh HD:Users:\\x00bitcoinuser:\\x00Documents:\\x00bitcoin:\\x00bitcoin:\\x00' + package_name_ns + '.temp.dmg'\n+alias.volume.disk_image_alias.target.posix_path = 'Users/bitcoinuser/Documents/bitcoin/bitcoin/' + package_name_ns + '.temp.dmg'\n+alias.target.carbon_path = package_name_ns + ':.background:\\x00background.tiff'\n+icvp['backgroundImageAlias'] = biplist.Data(alias.to_bytes())\n+ds['.']['icvp'] = icvp\n+\n+ds['.']['vSrn'] = ('long', 1)\n+\n+ds['Applications']['Iloc'] = (370, 156)\n+ds['Bitcoin-Staking-Qt.app']['Iloc'] = (128, 156)\n+\n+ds.flush()\n+ds.close()"
      },
      {
        "sha": "5c5a85d3fe1861a4e5d3300faa04480f17846975",
        "filename": "contrib/macdeploy/detached-sig-apply.sh",
        "status": "modified",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/detached-sig-apply.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/detached-sig-apply.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-apply.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -8,9 +8,10 @@ set -e\n \n UNSIGNED=\"$1\"\n SIGNATURE=\"$2\"\n+ARCH=x86_64\n ROOTDIR=dist\n+TEMPDIR=signed.temp\n OUTDIR=signed-app\n-SIGNAPPLE=signapple\n \n if [ -z \"$UNSIGNED\" ]; then\n   echo \"usage: $0 <unsigned app> <signature>\"\n@@ -22,6 +23,35 @@ if [ -z \"$SIGNATURE\" ]; then\n   exit 1\n fi\n \n-${SIGNAPPLE} apply ${UNSIGNED} ${SIGNATURE}\n-mv ${ROOTDIR} ${OUTDIR}\n+rm -rf ${TEMPDIR} && mkdir -p ${TEMPDIR}\n+tar -C ${TEMPDIR} -xf ${UNSIGNED}\n+cp -rf \"${SIGNATURE}\"/* ${TEMPDIR}\n+\n+if [ -z \"${PAGESTUFF}\" ]; then\n+  PAGESTUFF=${TEMPDIR}/pagestuff\n+fi\n+\n+if [ -z \"${CODESIGN_ALLOCATE}\" ]; then\n+  CODESIGN_ALLOCATE=${TEMPDIR}/codesign_allocate\n+fi\n+\n+find ${TEMPDIR} -name \"*.sign\" | while read i; do\n+  SIZE=$(stat -c %s \"${i}\")\n+  TARGET_FILE=\"$(echo \"${i}\" | sed 's/\\.sign$//')\"\n+\n+  echo \"Allocating space for the signature of size ${SIZE} in ${TARGET_FILE}\"\n+  ${CODESIGN_ALLOCATE} -i \"${TARGET_FILE}\" -a ${ARCH} ${SIZE} -o \"${i}.tmp\"\n+\n+  OFFSET=$(${PAGESTUFF} \"${i}.tmp\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n+  if [ -z ${QUIET} ]; then\n+    echo \"Attaching signature at offset ${OFFSET}\"\n+  fi\n+\n+  dd if=\"$i\" of=\"${i}.tmp\" bs=1 seek=${OFFSET} count=${SIZE} 2>/dev/null\n+  mv \"${i}.tmp\" \"${TARGET_FILE}\"\n+  rm \"${i}\"\n+  echo \"Success.\"\n+done\n+mv ${TEMPDIR}/${ROOTDIR} ${OUTDIR}\n+rm -rf ${TEMPDIR}\n echo \"Signed: ${OUTDIR}\""
      },
      {
        "sha": "2471e49f8119f805ffcca0ebd0eed77c092e10bc",
        "filename": "contrib/macdeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 30,
        "deletions": 7,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/detached-sig-create.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -7,22 +7,45 @@ export LC_ALL=C\n set -e\n \n ROOTDIR=dist\n-BUNDLE=\"${ROOTDIR}/Bitcoin-Qt.app\"\n-SIGNAPPLE=signapple\n+BUNDLE=\"${ROOTDIR}/Bitcoin-Staking-Qt.app\"\n+CODESIGN=codesign\n TEMPDIR=sign.temp\n+TEMPLIST=${TEMPDIR}/signatures.txt\n OUT=signature-osx.tar.gz\n-OUTROOT=osx/dist\n+OUTROOT=osx\n \n if [ -z \"$1\" ]; then\n-  echo \"usage: $0 <signapple args>\"\n-  echo \"example: $0 <path to key>\"\n+  echo \"usage: $0 <codesign args>\"\n+  echo \"example: $0 -s MyIdentity\"\n   exit 1\n fi\n \n-rm -rf ${TEMPDIR}\n+rm -rf ${TEMPDIR} ${TEMPLIST}\n mkdir -p ${TEMPDIR}\n \n-${SIGNAPPLE} sign -f --detach \"${TEMPDIR}/${OUTROOT}\"  \"$@\" \"${BUNDLE}\"\n+${CODESIGN} -f --file-list ${TEMPLIST} \"$@\" \"${BUNDLE}\"\n+\n+grep -v CodeResources < \"${TEMPLIST}\" | while read i; do\n+  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n+  SIZE=$(pagestuff \"$i\" -p | tail -2 | grep size | sed 's/[^0-9]*//g')\n+  OFFSET=$(pagestuff \"$i\" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')\n+  SIGNFILE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}.sign\"\n+  DIRNAME=\"$(dirname \"${SIGNFILE}\")\"\n+  mkdir -p \"${DIRNAME}\"\n+  echo \"Adding detached signature for: ${TARGETFILE}. Size: ${SIZE}. Offset: ${OFFSET}\"\n+  dd if=\"$i\" of=\"${SIGNFILE}\" bs=1 skip=${OFFSET} count=${SIZE} 2>/dev/null\n+done\n+\n+grep CodeResources < \"${TEMPLIST}\" | while read i; do\n+  TARGETFILE=\"${BUNDLE}/$(echo \"${i}\" | sed \"s|.*${BUNDLE}/||\")\"\n+  RESOURCE=\"${TEMPDIR}/${OUTROOT}/${TARGETFILE}\"\n+  DIRNAME=\"$(dirname \"${RESOURCE}\")\"\n+  mkdir -p \"${DIRNAME}\"\n+  echo \"Adding resource for: \\\"${TARGETFILE}\\\"\"\n+  cp \"${i}\" \"${RESOURCE}\"\n+done\n+\n+rm ${TEMPLIST}\n \n tar -C \"${TEMPDIR}\" -czf \"${OUT}\" .\n rm -rf \"${TEMPDIR}\""
      },
      {
        "sha": "21243ada042ba1d5791b148cc4283f7d0c211486",
        "filename": "contrib/macdeploy/extract-osx-sdk.sh",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/extract-osx-sdk.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/extract-osx-sdk.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/extract-osx-sdk.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,34 @@\n+#!/usr/bin/env bash\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+export LC_ALL=C\n+set -e\n+\n+INPUTFILE=\"Xcode_7.3.1.dmg\"\n+HFSFILENAME=\"5.hfs\"\n+SDKDIR=\"Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk\"\n+\n+7z x \"${INPUTFILE}\" \"${HFSFILENAME}\"\n+SDKNAME=\"$(basename \"${SDKDIR}\")\"\n+SDKDIRINODE=$(ifind -n \"${SDKDIR}\" \"${HFSFILENAME}\")\n+fls \"${HFSFILENAME}\" -rpF ${SDKDIRINODE} |\n+ while read type inode filename; do\n+\tinode=\"${inode::-1}\"\n+\tif [ \"${filename:0:14}\" = \"usr/share/man/\" ]; then\n+\t\tcontinue\n+\tfi\n+\tfilename=\"${SDKNAME}/$filename\"\n+\techo \"Extracting $filename ...\"\n+\tmkdir -p \"$(dirname \"$filename\")\"\n+\tif [ \"$type\" = \"l/l\" ]; then\n+\t\tln -s \"$(icat \"${HFSFILENAME}\" $inode)\" \"$filename\"\n+\telse\n+\t\ticat \"${HFSFILENAME}\" $inode >\"$filename\"\n+\tfi\n+done\n+echo \"Building ${SDKNAME}.tar.gz ...\"\n+MTIME=\"$(istat \"${HFSFILENAME}\" \"${SDKDIRINODE}\" | perl -nle 'm/Content Modified:\\s+(.*?)\\s\\(/ && print $1')\"\n+find \"${SDKNAME}\" | sort | tar --no-recursion --mtime=\"${MTIME}\" --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > \"${SDKNAME}.tar.gz\"\n+echo 'All done!'"
      },
      {
        "sha": "cd42f86a6abf7245e4ab9ac6936dbfbff8b13194",
        "filename": "contrib/macdeploy/fancy.plist",
        "status": "added",
        "additions": 32,
        "deletions": 0,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/fancy.plist",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/fancy.plist",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/fancy.plist?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n+<plist version=\"1.0\">\n+<dict>\n+\t<key>window_bounds</key>\n+\t<array>\n+\t\t<integer>300</integer>\n+\t\t<integer>300</integer>\n+\t\t<integer>800</integer>\n+\t\t<integer>620</integer>\n+\t</array>\n+\t<key>background_picture</key>\n+\t<string>background.tiff</string>\n+\t<key>icon_size</key>\n+\t<integer>96</integer>\n+\t<key>applications_symlink</key>\n+\t<true/>\n+\t<key>items_position</key>\n+\t<dict>\n+\t\t<key>Applications</key>\n+\t\t<array>\n+\t\t\t<integer>370</integer>\n+\t\t\t<integer>156</integer>\n+\t\t</array>\n+\t\t<key>Bitcoin-Staking-Qt.app</key>\n+\t\t<array>\n+\t\t\t<integer>128</integer>\n+\t\t\t<integer>156</integer>\n+\t\t</array>\n+\t</dict>\n+</dict>\n+</plist>"
      },
      {
        "sha": "457d8f5e645c8e9a6f1a55edf410599db065feed",
        "filename": "contrib/macdeploy/gen-sdk",
        "status": "removed",
        "additions": 0,
        "deletions": 94,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/macdeploy/gen-sdk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/macdeploy/gen-sdk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/gen-sdk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,94 +0,0 @@\n-#!/usr/bin/env python3\n-import argparse\n-import plistlib\n-import pathlib\n-import sys\n-import tarfile\n-import gzip\n-import os\n-import contextlib\n-\n-@contextlib.contextmanager\n-def cd(path):\n-    \"\"\"Context manager that restores PWD even if an exception was raised.\"\"\"\n-    old_pwd = os.getcwd()\n-    os.chdir(str(path))\n-    try:\n-        yield\n-    finally:\n-        os.chdir(old_pwd)\n-\n-def run():\n-    parser = argparse.ArgumentParser(\n-        description=__doc__, formatter_class=argparse.RawTextHelpFormatter)\n-\n-    parser.add_argument('xcode_app', metavar='XCODEAPP', nargs=1)\n-    parser.add_argument(\"-o\", metavar='OUTSDKTGZ', nargs=1, dest='out_sdktgz', required=False)\n-\n-    args = parser.parse_args()\n-\n-    xcode_app = pathlib.Path(args.xcode_app[0]).resolve()\n-    assert xcode_app.is_dir(), \"The supplied Xcode.app path '{}' either does not exist or is not a directory\".format(xcode_app)\n-\n-    xcode_app_plist = xcode_app.joinpath(\"Contents/version.plist\")\n-    with xcode_app_plist.open('rb') as fp:\n-        pl = plistlib.load(fp)\n-        xcode_version = pl['CFBundleShortVersionString']\n-        xcode_build_id = pl['ProductBuildVersion']\n-    print(\"Found Xcode (version: {xcode_version}, build id: {xcode_build_id})\".format(xcode_version=xcode_version, xcode_build_id=xcode_build_id))\n-\n-    sdk_dir = xcode_app.joinpath(\"Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk\")\n-    sdk_plist = sdk_dir.joinpath(\"System/Library/CoreServices/SystemVersion.plist\")\n-    with sdk_plist.open('rb') as fp:\n-        pl = plistlib.load(fp)\n-        sdk_version = pl['ProductVersion']\n-        sdk_build_id = pl['ProductBuildVersion']\n-    print(\"Found MacOSX SDK (version: {sdk_version}, build id: {sdk_build_id})\".format(sdk_version=sdk_version, sdk_build_id=sdk_build_id))\n-\n-    out_name = \"Xcode-{xcode_version}-{xcode_build_id}-extracted-SDK-with-libcxx-headers\".format(xcode_version=xcode_version, xcode_build_id=xcode_build_id)\n-\n-    xcode_libcxx_dir = xcode_app.joinpath(\"Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/c++/v1\")\n-    assert xcode_libcxx_dir.is_dir()\n-\n-    if args.out_sdktgz:\n-        out_sdktgz_path = pathlib.Path(args.out_sdktgz_path)\n-    else:\n-        # Construct our own out_sdktgz if not specified on the command line\n-        out_sdktgz_path = pathlib.Path(\"./{}.tar.gz\".format(out_name))\n-\n-    def tarfp_add_with_base_change(tarfp, dir_to_add, alt_base_dir):\n-        \"\"\"Add all files in dir_to_add to tarfp, but prepent MEMBERPREFIX to the files'\n-        names\n-\n-        e.g. if the only file under /root/bazdir is /root/bazdir/qux, invoking:\n-\n-            tarfp_add_with_base_change(tarfp, \"foo/bar\", \"/root/bazdir\")\n-\n-        would result in the following members being added to tarfp:\n-\n-            foo/bar/             -> corresponding to /root/bazdir\n-            foo/bar/qux          -> corresponding to /root/bazdir/qux\n-\n-        \"\"\"\n-        def change_tarinfo_base(tarinfo):\n-            if tarinfo.name and tarinfo.name.startswith(\"./\"):\n-                tarinfo.name = str(pathlib.Path(alt_base_dir, tarinfo.name))\n-            if tarinfo.linkname and tarinfo.linkname.startswith(\"./\"):\n-                tarinfo.linkname = str(pathlib.Path(alt_base_dir, tarinfo.linkname))\n-            return tarinfo\n-        with cd(dir_to_add):\n-            tarfp.add(\".\", recursive=True, filter=change_tarinfo_base)\n-\n-    print(\"Creating output .tar.gz file...\")\n-    with out_sdktgz_path.open(\"wb\") as fp:\n-        with gzip.GzipFile(fileobj=fp, compresslevel=9, mtime=0) as gzf:\n-            with tarfile.open(mode=\"w\", fileobj=gzf) as tarfp:\n-                print(\"Adding MacOSX SDK {} files...\".format(sdk_version))\n-                tarfp_add_with_base_change(tarfp, sdk_dir, out_name)\n-                print(\"Adding libc++ headers...\")\n-                tarfp_add_with_base_change(tarfp, xcode_libcxx_dir, \"{}/usr/include/c++/v1\".format(out_name))\n-    print(\"Done! Find the resulting gzipped tarball at:\")\n-    print(out_sdktgz_path.resolve())\n-\n-if __name__ == '__main__':\n-    run()"
      },
      {
        "sha": "aa24de009a414e966a2b62075d36157dde783211",
        "filename": "contrib/macdeploy/macdeployqtplus",
        "status": "modified",
        "additions": 495,
        "deletions": 181,
        "changes": 676,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/macdeployqtplus",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/macdeploy/macdeployqtplus",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/macdeploy/macdeployqtplus?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -16,12 +16,9 @@\n # along with this program.  If not, see <http://www.gnu.org/licenses/>.\n #\n \n-import sys, re, os, shutil, stat, os.path\n+import subprocess, sys, re, os, shutil, stat, os.path, time\n+from string import Template\n from argparse import ArgumentParser\n-from ds_store import DSStore\n-from mac_alias import Alias\n-from pathlib import Path\n-from subprocess import PIPE, run\n from typing import List, Optional\n \n # This is ported from the original macdeployqt with modifications\n@@ -52,18 +49,28 @@ class FrameworkInfo(object):\n             return False\n     \n     def __str__(self):\n-        return f\"\"\" Framework name: {self.frameworkName}\n- Framework directory: {self.frameworkDirectory}\n- Framework path: {self.frameworkPath}\n- Binary name: {self.binaryName}\n- Binary directory: {self.binaryDirectory}\n- Binary path: {self.binaryPath}\n- Version: {self.version}\n- Install name: {self.installName}\n- Deployed install name: {self.deployedInstallName}\n- Source file Path: {self.sourceFilePath}\n- Deployed Directory (relative to bundle): {self.destinationDirectory}\n-\"\"\"\n+        return \"\"\" Framework name: {}\n+ Framework directory: {}\n+ Framework path: {}\n+ Binary name: {}\n+ Binary directory: {}\n+ Binary path: {}\n+ Version: {}\n+ Install name: {}\n+ Deployed install name: {}\n+ Source file Path: {}\n+ Deployed Directory (relative to bundle): {}\n+\"\"\".format(self.frameworkName,\n+       self.frameworkDirectory,\n+       self.frameworkPath,\n+       self.binaryName,\n+       self.binaryDirectory,\n+       self.binaryPath,\n+       self.version,\n+       self.installName,\n+       self.deployedInstallName,\n+       self.sourceFilePath,\n+       self.destinationDirectory)\n     \n     def isDylib(self):\n         return self.frameworkName.endswith(\".dylib\")\n@@ -84,13 +91,13 @@ class FrameworkInfo(object):\n         if line == \"\":\n             return None\n         \n-        # Don't deploy system libraries\n-        if line.startswith(\"/System/Library/\") or line.startswith(\"@executable_path\") or line.startswith(\"/usr/lib/\"):\n+        # Don't deploy system libraries (exception for libQtuitools and libQtlucene).\n+        if line.startswith(\"/System/Library/\") or line.startswith(\"@executable_path\") or (line.startswith(\"/usr/lib/\") and \"libQt\" not in line):\n             return None\n         \n         m = cls.reOLine.match(line)\n         if m is None:\n-            raise RuntimeError(f\"otool line could not be parsed: {line}\")\n+            raise RuntimeError(\"otool line could not be parsed: \" + line)\n         \n         path = m.group(1)\n         \n@@ -110,7 +117,7 @@ class FrameworkInfo(object):\n             info.version = \"-\"\n             \n             info.installName = path\n-            info.deployedInstallName = f\"@executable_path/../Frameworks/{info.binaryName}\"\n+            info.deployedInstallName = \"@executable_path/../Frameworks/\" + info.binaryName\n             info.sourceFilePath = path\n             info.destinationDirectory = cls.bundleFrameworkDirectory\n         else:\n@@ -122,7 +129,7 @@ class FrameworkInfo(object):\n                     break\n                 i += 1\n             if i == len(parts):\n-                raise RuntimeError(f\"Could not find .framework or .dylib in otool line: {line}\")\n+                raise RuntimeError(\"Could not find .framework or .dylib in otool line: \" + line)\n             \n             info.frameworkName = parts[i]\n             info.frameworkDirectory = \"/\".join(parts[:i])\n@@ -133,7 +140,7 @@ class FrameworkInfo(object):\n             info.binaryPath = os.path.join(info.binaryDirectory, info.binaryName)\n             info.version = parts[i+2]\n             \n-            info.deployedInstallName = f\"@executable_path/../Frameworks/{os.path.join(info.frameworkName, info.binaryPath)}\"\n+            info.deployedInstallName = \"@executable_path/../Frameworks/\" + os.path.join(info.frameworkName, info.binaryPath)\n             info.destinationDirectory = os.path.join(cls.bundleFrameworkDirectory, info.frameworkName, info.binaryDirectory)\n             \n             info.sourceResourcesDirectory = os.path.join(info.frameworkPath, \"Resources\")\n@@ -147,10 +154,10 @@ class FrameworkInfo(object):\n class ApplicationBundleInfo(object):\n     def __init__(self, path: str):\n         self.path = path\n-        # for backwards compatibility reasons, this must remain as Bitcoin-Qt\n-        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", \"Bitcoin-Qt\")\n+        appName = \"Bitcoin-Staking-Qt\"\n+        self.binaryPath = os.path.join(path, \"Contents\", \"MacOS\", appName)\n         if not os.path.exists(self.binaryPath):\n-            raise RuntimeError(f\"Could not find bundle binary for {path}\")\n+            raise RuntimeError(\"Could not find bundle binary for \" + path)\n         self.resourcesPath = os.path.join(path, \"Contents\", \"Resources\")\n         self.pluginPath = os.path.join(path, \"Contents\", \"PlugIns\")\n \n@@ -174,26 +181,30 @@ class DeploymentInfo(object):\n                 self.pluginPath = pluginPath\n     \n     def usesFramework(self, name: str) -> bool:\n+        nameDot = \"{}.\".format(name)\n+        libNameDot = \"lib{}.\".format(name)\n         for framework in self.deployedFrameworks:\n             if framework.endswith(\".framework\"):\n-                if framework.startswith(f\"{name}.\"):\n+                if framework.startswith(nameDot):\n                     return True\n             elif framework.endswith(\".dylib\"):\n-                if framework.startswith(f\"lib{name}.\"):\n+                if framework.startswith(libNameDot):\n                     return True\n         return False\n \n def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n-    if verbose:\n-        print(f\"Inspecting with otool: {binaryPath}\")\n+    if verbose >= 3:\n+        print(\"Inspecting with otool: \" + binaryPath)\n     otoolbin=os.getenv(\"OTOOL\", \"otool\")\n-    otool = run([otoolbin, \"-L\", binaryPath], stdout=PIPE, stderr=PIPE, universal_newlines=True)\n+    otool = subprocess.Popen([otoolbin, \"-L\", binaryPath], stdout=subprocess.PIPE, stderr=subprocess.PIPE, universal_newlines=True)\n+    o_stdout, o_stderr = otool.communicate()\n     if otool.returncode != 0:\n-        sys.stderr.write(otool.stderr)\n-        sys.stderr.flush()\n-        raise RuntimeError(f\"otool failed with return code {otool.returncode}\")\n+        if verbose >= 1:\n+            sys.stderr.write(o_stderr)\n+            sys.stderr.flush()\n+            raise RuntimeError(\"otool failed with return code {}\".format(otool.returncode))\n \n-    otoolLines = otool.stdout.split(\"\\n\")\n+    otoolLines = o_stdout.split(\"\\n\")\n     otoolLines.pop(0) # First line is the inspected binary\n     if \".framework\" in binaryPath or binaryPath.endswith(\".dylib\"):\n         otoolLines.pop(0) # Frameworks and dylibs list themselves as a dependency.\n@@ -203,7 +214,7 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n         line = line.replace(\"@loader_path\", os.path.dirname(binaryPath))\n         info = FrameworkInfo.fromOtoolLibraryLine(line.strip())\n         if info is not None:\n-            if verbose:\n+            if verbose >= 3:\n                 print(\"Found framework:\")\n                 print(info)\n             libraries.append(info)\n@@ -212,41 +223,41 @@ def getFrameworks(binaryPath: str, verbose: int) -> List[FrameworkInfo]:\n \n def runInstallNameTool(action: str, *args):\n     installnametoolbin=os.getenv(\"INSTALLNAMETOOL\", \"install_name_tool\")\n-    run([installnametoolbin, \"-\"+action] + list(args), check=True)\n+    subprocess.check_call([installnametoolbin, \"-\"+action] + list(args))\n \n def changeInstallName(oldName: str, newName: str, binaryPath: str, verbose: int):\n-    if verbose:\n+    if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" in\", binaryPath)\n         print(\" change reference\", oldName)\n         print(\" to\", newName)\n     runInstallNameTool(\"change\", oldName, newName, binaryPath)\n \n def changeIdentification(id: str, binaryPath: str, verbose: int):\n-    if verbose:\n+    if verbose >= 3:\n         print(\"Using install_name_tool:\")\n         print(\" change identification in\", binaryPath)\n         print(\" to\", id)\n     runInstallNameTool(\"id\", id, binaryPath)\n \n def runStrip(binaryPath: str, verbose: int):\n     stripbin=os.getenv(\"STRIP\", \"strip\")\n-    if verbose:\n+    if verbose >= 3:\n         print(\"Using strip:\")\n         print(\" stripped\", binaryPath)\n-    run([stripbin, \"-x\", binaryPath], check=True)\n+    subprocess.check_call([stripbin, \"-x\", binaryPath])\n \n def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional[str]:\n     if framework.sourceFilePath.startswith(\"Qt\"):\n         #standard place for Nokia Qt installer's frameworks\n-        fromPath = f\"/Library/Frameworks/{framework.sourceFilePath}\"\n+        fromPath = \"/Library/Frameworks/\" + framework.sourceFilePath\n     else:\n         fromPath = framework.sourceFilePath\n     toDir = os.path.join(path, framework.destinationDirectory)\n     toPath = os.path.join(toDir, framework.binaryName)\n     \n     if not os.path.exists(fromPath):\n-        raise RuntimeError(f\"No file at {fromPath}\")\n+        raise RuntimeError(\"No file at \" + fromPath)\n     \n     if os.path.exists(toPath):\n         return None # Already there\n@@ -255,7 +266,7 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         os.makedirs(toDir)\n     \n     shutil.copy2(fromPath, toPath)\n-    if verbose:\n+    if verbose >= 3:\n         print(\"Copied:\", fromPath)\n         print(\" to:\", toPath)\n \n@@ -269,12 +280,13 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         linkto = framework.version\n         if not os.path.exists(linkfrom):\n             os.symlink(linkto, linkfrom)\n-            print(\"Linked:\", linkfrom, \"->\", linkto)\n+            if verbose >= 2:\n+                print(\"Linked:\", linkfrom, \"->\", linkto)\n         fromResourcesDir = framework.sourceResourcesDirectory\n         if os.path.exists(fromResourcesDir):\n             toResourcesDir = os.path.join(path, framework.destinationResourcesDirectory)\n             shutil.copytree(fromResourcesDir, toResourcesDir, symlinks=True)\n-            if verbose:\n+            if verbose >= 3:\n                 print(\"Copied resources:\", fromResourcesDir)\n                 print(\" to:\", toResourcesDir)\n         fromContentsDir = framework.sourceVersionContentsDirectory\n@@ -283,9 +295,17 @@ def copyFramework(framework: FrameworkInfo, path: str, verbose: int) -> Optional\n         if os.path.exists(fromContentsDir):\n             toContentsDir = os.path.join(path, framework.destinationVersionContentsDirectory)\n             shutil.copytree(fromContentsDir, toContentsDir, symlinks=True)\n-            if verbose:\n+            if verbose >= 3:\n                 print(\"Copied Contents:\", fromContentsDir)\n                 print(\" to:\", toContentsDir)\n+    elif framework.frameworkName.startswith(\"libQtGui\"): # Copy qt_menu.nib (applies to non-framework layout)\n+        qtMenuNibSourcePath = os.path.join(framework.frameworkDirectory, \"Resources\", \"qt_menu.nib\")\n+        qtMenuNibDestinationPath = os.path.join(path, \"Contents\", \"Resources\", \"qt_menu.nib\")\n+        if os.path.exists(qtMenuNibSourcePath) and not os.path.exists(qtMenuNibDestinationPath):\n+            shutil.copytree(qtMenuNibSourcePath, qtMenuNibDestinationPath, symlinks=True)\n+            if verbose >= 3:\n+                print(\"Copied for libQtGui:\", qtMenuNibSourcePath)\n+                print(\" to:\", qtMenuNibDestinationPath)\n     \n     return toPath\n \n@@ -297,14 +317,16 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n         framework = frameworks.pop(0)\n         deploymentInfo.deployedFrameworks.append(framework.frameworkName)\n         \n-        print(\"Processing\", framework.frameworkName, \"...\")\n+        if verbose >= 2:\n+            print(\"Processing\", framework.frameworkName, \"...\")\n         \n         # Get the Qt path from one of the Qt frameworks\n         if deploymentInfo.qtPath is None and framework.isQtFramework():\n             deploymentInfo.detectQtPath(framework.frameworkDirectory)\n         \n         if framework.installName.startswith(\"@executable_path\") or framework.installName.startswith(bundlePath):\n-            print(framework.frameworkName, \"already deployed, skipping.\")\n+            if verbose >= 2:\n+                print(framework.frameworkName, \"already deployed, skipping.\")\n             continue\n         \n         # install_name_tool the new id into the binary\n@@ -335,32 +357,128 @@ def deployFrameworks(frameworks: List[FrameworkInfo], bundlePath: str, binaryPat\n \n def deployFrameworksForAppBundle(applicationBundle: ApplicationBundleInfo, strip: bool, verbose: int) -> DeploymentInfo:\n     frameworks = getFrameworks(applicationBundle.binaryPath, verbose)\n-    if len(frameworks) == 0:\n-        print(f\"Warning: Could not find any external frameworks to deploy in {applicationBundle.path}.\")\n+    if len(frameworks) == 0 and verbose >= 1:\n+        print(\"Warning: Could not find any external frameworks to deploy in {}.\".format(applicationBundle.path))\n         return DeploymentInfo()\n     else:\n         return deployFrameworks(frameworks, applicationBundle.path, applicationBundle.binaryPath, strip, verbose)\n \n def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: DeploymentInfo, strip: bool, verbose: int):\n+    # Lookup available plugins, exclude unneeded\n     plugins = []\n     if deploymentInfo.pluginPath is None:\n         return\n     for dirpath, dirnames, filenames in os.walk(deploymentInfo.pluginPath):\n         pluginDirectory = os.path.relpath(dirpath, deploymentInfo.pluginPath)\n-\n-        if pluginDirectory not in ['styles', 'platforms']:\n+        if pluginDirectory == \"designer\":\n+            # Skip designer plugins\n+            continue\n+        elif pluginDirectory == \"printsupport\":\n+            # Skip printsupport plugins\n+            continue\n+        elif pluginDirectory == \"imageformats\":\n+            # Skip imageformats plugins\n             continue\n+        elif pluginDirectory == \"sqldrivers\":\n+            # Deploy the sql plugins only if QtSql is in use\n+            if not deploymentInfo.usesFramework(\"QtSql\"):\n+                continue\n+        elif pluginDirectory == \"script\":\n+            # Deploy the script plugins only if QtScript is in use\n+            if not deploymentInfo.usesFramework(\"QtScript\"):\n+                continue\n+        elif pluginDirectory == \"qmltooling\" or pluginDirectory == \"qml1tooling\":\n+            # Deploy the qml plugins only if QtDeclarative is in use\n+            if not deploymentInfo.usesFramework(\"QtDeclarative\"):\n+                continue\n+        elif pluginDirectory == \"bearer\":\n+            # Deploy the bearer plugins only if QtNetwork is in use\n+            if not deploymentInfo.usesFramework(\"QtNetwork\"):\n+                continue\n+        elif pluginDirectory == \"position\":\n+            # Deploy the position plugins only if QtPositioning is in use\n+            if not deploymentInfo.usesFramework(\"QtPositioning\"):\n+                continue\n+        elif pluginDirectory == \"sensors\" or pluginDirectory == \"sensorgestures\":\n+            # Deploy the sensor plugins only if QtSensors is in use\n+            if not deploymentInfo.usesFramework(\"QtSensors\"):\n+                continue\n+        elif pluginDirectory == \"audio\" or pluginDirectory == \"playlistformats\":\n+            # Deploy the audio plugins only if QtMultimedia is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimedia\"):\n+                continue\n+        elif pluginDirectory == \"mediaservice\":\n+            # Deploy the mediaservice plugins only if QtMultimediaWidgets is in use\n+            if not deploymentInfo.usesFramework(\"QtMultimediaWidgets\"):\n+                continue\n+        elif pluginDirectory == \"canbus\":\n+            # Deploy the canbus plugins only if QtSerialBus is in use\n+            if not deploymentInfo.usesFramework(\"QtSerialBus\"):\n+                continue\n+        elif pluginDirectory == \"webview\":\n+            # Deploy the webview plugins only if QtWebView is in use\n+            if not deploymentInfo.usesFramework(\"QtWebView\"):\n+                continue\n+        elif pluginDirectory == \"gamepads\":\n+            # Deploy the webview plugins only if QtGamepad is in use\n+            if not deploymentInfo.usesFramework(\"QtGamepad\"):\n+                continue\n+        elif pluginDirectory == \"geoservices\":\n+            # Deploy the webview plugins only if QtLocation is in use\n+            if not deploymentInfo.usesFramework(\"QtLocation\"):\n+                continue\n+        elif pluginDirectory == \"texttospeech\":\n+            # Deploy the texttospeech plugins only if QtTextToSpeech is in use\n+            if not deploymentInfo.usesFramework(\"QtTextToSpeech\"):\n+                continue\n+        elif pluginDirectory == \"virtualkeyboard\":\n+            # Deploy the virtualkeyboard plugins only if QtVirtualKeyboard is in use\n+            if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                continue\n+        elif pluginDirectory == \"sceneparsers\":\n+            # Deploy the virtualkeyboard plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"renderplugins\":\n+            # Deploy the renderplugins plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n+        elif pluginDirectory == \"geometryloaders\":\n+            # Deploy the geometryloaders plugins only if Qt3DCore is in use\n+            if not deploymentInfo.usesFramework(\"Qt3DCore\"):\n+                continue\n \n         for pluginName in filenames:\n             pluginPath = os.path.join(pluginDirectory, pluginName)\n-\n-            if pluginName.split('.')[0] not in ['libqminimal', 'libqcocoa', 'libqmacstyle']:\n+            if pluginName.endswith(\"_debug.dylib\"):\n+                # Skip debug plugins\n                 continue\n+            elif pluginPath == \"imageformats/libqsvg.dylib\" or pluginPath == \"iconengines/libqsvgicon.dylib\":\n+                # Deploy the svg plugins only if QtSvg is in use\n+                if not deploymentInfo.usesFramework(\"QtSvg\"):\n+                    continue\n+            elif pluginPath == \"accessible/libqtaccessiblecompatwidgets.dylib\":\n+                # Deploy accessibility for Qt3Support only if the Qt3Support is in use\n+                if not deploymentInfo.usesFramework(\"Qt3Support\"):\n+                    continue\n+            elif pluginPath == \"graphicssystems/libqglgraphicssystem.dylib\":\n+                # Deploy the opengl graphicssystem plugin only if QtOpenGL is in use\n+                if not deploymentInfo.usesFramework(\"QtOpenGL\"):\n+                    continue\n+            elif pluginPath == \"accessible/libqtaccessiblequick.dylib\":\n+                # Deploy the accessible qtquick plugin only if QtQuick is in use\n+                if not deploymentInfo.usesFramework(\"QtQuick\"):\n+                    continue\n+            elif pluginPath == \"platforminputcontexts/libqtvirtualkeyboardplugin.dylib\":\n+                # Deploy the virtualkeyboardplugin plugin only if QtVirtualKeyboard is in use\n+                if not deploymentInfo.usesFramework(\"QtVirtualKeyboard\"):\n+                    continue\n \n             plugins.append((pluginDirectory, pluginName))\n     \n     for pluginDirectory, pluginName in plugins:\n-        print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n+        if verbose >= 2:\n+            print(\"Processing plugin\", os.path.join(pluginDirectory, pluginName), \"...\")\n         \n         sourcePath = os.path.join(deploymentInfo.pluginPath, pluginDirectory, pluginName)\n         destinationDirectory = os.path.join(appBundleInfo.pluginPath, pluginDirectory)\n@@ -369,7 +487,7 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n         \n         destinationPath = os.path.join(destinationDirectory, pluginName)\n         shutil.copy2(sourcePath, destinationPath)\n-        if verbose:\n+        if verbose >= 3:\n             print(\"Copied:\", sourcePath)\n             print(\" to:\", destinationPath)\n         \n@@ -385,53 +503,146 @@ def deployPlugins(appBundleInfo: ApplicationBundleInfo, deploymentInfo: Deployme\n             if dependency.frameworkName not in deploymentInfo.deployedFrameworks:\n                 deployFrameworks([dependency], appBundleInfo.path, destinationPath, strip, verbose, deploymentInfo)\n \n+qt_conf=\"\"\"[Paths]\n+Translations=Resources\n+Plugins=PlugIns\n+\"\"\"\n+\n ap = ArgumentParser(description=\"\"\"Improved version of macdeployqt.\n \n Outputs a ready-to-deploy app in a folder \"dist\" and optionally wraps it in a .dmg file.\n Note, that the \"dist\" folder will be deleted before deploying on each run.\n \n-Optionally, Qt translation files (.qm) can be added to the bundle.\"\"\")\n+Optionally, Qt translation files (.qm) and additional resources can be added to the bundle.\n+\n+Also optionally signs the .app bundle; set the CODESIGNARGS environment variable to pass arguments\n+to the codesign tool.\n+E.g. CODESIGNARGS='--sign \"Developer ID Application: ...\" --keychain /encrypted/foo.keychain'\"\"\")\n \n ap.add_argument(\"app_bundle\", nargs=1, metavar=\"app-bundle\", help=\"application bundle to be deployed\")\n-ap.add_argument(\"appname\", nargs=1, metavar=\"appname\", help=\"name of the app being deployed\")\n-ap.add_argument(\"-verbose\", nargs=\"?\", const=True, help=\"Output additional debugging information\")\n+ap.add_argument(\"-verbose\", type=int, nargs=1, default=[1], metavar=\"<0-3>\", help=\"0 = no output, 1 = error/warning (default), 2 = normal, 3 = debug\")\n ap.add_argument(\"-no-plugins\", dest=\"plugins\", action=\"store_false\", default=True, help=\"skip plugin deployment\")\n ap.add_argument(\"-no-strip\", dest=\"strip\", action=\"store_false\", default=True, help=\"don't run 'strip' on the binaries\")\n-ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image\")\n-ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translations. Base translations will automatically be added to the bundle's resources.\")\n+ap.add_argument(\"-sign\", dest=\"sign\", action=\"store_true\", default=False, help=\"sign .app bundle with codesign tool\")\n+ap.add_argument(\"-dmg\", nargs=\"?\", const=\"\", metavar=\"basename\", help=\"create a .dmg disk image; if basename is not specified, a camel-cased version of the app name is used\")\n+ap.add_argument(\"-fancy\", nargs=1, metavar=\"plist\", default=[], help=\"make a fancy looking disk image using the given plist file with instructions; requires -dmg to work\")\n+ap.add_argument(\"-add-qt-tr\", nargs=1, metavar=\"languages\", default=[], help=\"add Qt translation files to the bundle's resources; the language list must be separated with commas, not with whitespace\")\n+ap.add_argument(\"-translations-dir\", nargs=1, metavar=\"path\", default=None, help=\"Path to Qt's translation files\")\n+ap.add_argument(\"-add-resources\", nargs=\"+\", metavar=\"path\", default=[], help=\"list of additional files or folders to be copied into the bundle's resources; must be the last argument\")\n+ap.add_argument(\"-volname\", nargs=1, metavar=\"volname\", default=[], help=\"custom volume name for dmg\")\n \n config = ap.parse_args()\n \n-verbose = config.verbose\n+verbose = config.verbose[0]\n \n # ------------------------------------------------\n \n app_bundle = config.app_bundle[0]\n-appname = config.appname[0]\n \n if not os.path.exists(app_bundle):\n-    sys.stderr.write(f\"Error: Could not find app bundle \\\"{app_bundle}\\\"\\n\")\n+    if verbose >= 1:\n+        sys.stderr.write(\"Error: Could not find app bundle \\\"{}\\\"\\n\".format(app_bundle))\n     sys.exit(1)\n \n+app_bundle_name = os.path.splitext(os.path.basename(app_bundle))[0]\n+\n+# ------------------------------------------------\n+translations_dir = None\n+if config.translations_dir and config.translations_dir[0]:\n+    if os.path.exists(config.translations_dir[0]):\n+        translations_dir = config.translations_dir[0]\n+    else:\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Could not find translation dir \\\"{}\\\"\\n\".format(translations_dir))\n+        sys.exit(1)\n+# ------------------------------------------------\n+\n+for p in config.add_resources:\n+    if verbose >= 3:\n+        print(\"Checking for \\\"%s\\\"...\" % p)\n+    if not os.path.exists(p):\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Could not find additional resource file \\\"{}\\\"\\n\".format(p))\n+        sys.exit(1)\n+\n+# ------------------------------------------------\n+\n+if len(config.fancy) == 1:\n+    if verbose >= 3:\n+        print(\"Fancy: Importing plistlib...\")\n+    try:\n+        import plistlib\n+    except ImportError:\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Could not import plistlib which is required for fancy disk images.\\n\")\n+        sys.exit(1)\n+    \n+    p = config.fancy[0]\n+    if verbose >= 3:\n+        print(\"Fancy: Loading \\\"{}\\\"...\".format(p))\n+    if not os.path.exists(p):\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Could not find fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.exit(1)\n+    \n+    try:\n+        fancy = plistlib.readPlist(p)\n+    except:\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Could not parse fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.exit(1)\n+    \n+    try:\n+        assert \"window_bounds\" not in fancy or (isinstance(fancy[\"window_bounds\"], list) and len(fancy[\"window_bounds\"]) == 4)\n+        assert \"background_picture\" not in fancy or isinstance(fancy[\"background_picture\"], str)\n+        assert \"icon_size\" not in fancy or isinstance(fancy[\"icon_size\"], int)\n+        assert \"applications_symlink\" not in fancy or isinstance(fancy[\"applications_symlink\"], bool)\n+        if \"items_position\" in fancy:\n+            assert isinstance(fancy[\"items_position\"], dict)\n+            for key, value in fancy[\"items_position\"].items():\n+                assert isinstance(value, list) and len(value) == 2 and isinstance(value[0], int) and isinstance(value[1], int)\n+    except:\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: Bad format of fancy disk image plist at \\\"{}\\\"\\n\".format(p))\n+        sys.exit(1)\n+    \n+    if \"background_picture\" in fancy:\n+        bp = fancy[\"background_picture\"]\n+        if verbose >= 3:\n+            print(\"Fancy: Resolving background picture \\\"{}\\\"...\".format(bp))\n+        if not os.path.exists(bp):\n+            bp = os.path.join(os.path.dirname(p), bp)\n+            if not os.path.exists(bp):\n+                if verbose >= 1:\n+                    sys.stderr.write(\"Error: Could not find background picture at \\\"{}\\\" or \\\"{}\\\"\\n\".format(fancy[\"background_picture\"], bp))\n+                sys.exit(1)\n+            else:\n+                fancy[\"background_picture\"] = bp\n+else:\n+    fancy = None\n+\n # ------------------------------------------------\n \n if os.path.exists(\"dist\"):\n-    print(\"+ Removing existing dist folder +\")\n+    if verbose >= 2:\n+        print(\"+ Removing old dist folder +\")\n+    \n     shutil.rmtree(\"dist\")\n \n-if os.path.exists(appname + \".dmg\"):\n-    print(\"+ Removing existing DMG +\")\n-    os.unlink(appname + \".dmg\")\n+# ------------------------------------------------\n \n-if os.path.exists(appname + \".temp.dmg\"):\n-    os.unlink(appname + \".temp.dmg\")\n+if len(config.volname) == 1:\n+    volname = config.volname[0]\n+else:\n+    volname = app_bundle_name\n \n # ------------------------------------------------\n \n-target = os.path.join(\"dist\", \"Bitcoin-Qt.app\")\n+target = os.path.join(\"dist\", \"Bitcoin-Staking-Qt.app\")\n \n-print(\"+ Copying source bundle +\")\n-if verbose:\n+if verbose >= 2:\n+    print(\"+ Copying source bundle +\")\n+if verbose >= 3:\n     print(app_bundle, \"->\", target)\n \n os.mkdir(\"dist\")\n@@ -441,154 +652,257 @@ applicationBundle = ApplicationBundleInfo(target)\n \n # ------------------------------------------------\n \n-print(\"+ Deploying frameworks +\")\n+if verbose >= 2:\n+    print(\"+ Deploying frameworks +\")\n \n try:\n     deploymentInfo = deployFrameworksForAppBundle(applicationBundle, config.strip, verbose)\n     if deploymentInfo.qtPath is None:\n         deploymentInfo.qtPath = os.getenv(\"QTDIR\", None)\n         if deploymentInfo.qtPath is None:\n-            sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n+            if verbose >= 1:\n+                sys.stderr.write(\"Warning: Could not detect Qt's path, skipping plugin deployment!\\n\")\n             config.plugins = False\n except RuntimeError as e:\n-    sys.stderr.write(f\"Error: {str(e)}\\n\")\n+    if verbose >= 1:\n+        sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n     sys.exit(1)\n \n # ------------------------------------------------\n \n if config.plugins:\n-    print(\"+ Deploying plugins +\")\n+    if verbose >= 2:\n+        print(\"+ Deploying plugins +\")\n     \n     try:\n         deployPlugins(applicationBundle, deploymentInfo, config.strip, verbose)\n     except RuntimeError as e:\n-        sys.stderr.write(f\"Error: {str(e)}\\n\")\n+        if verbose >= 1:\n+            sys.stderr.write(\"Error: {}\\n\".format(str(e)))\n         sys.exit(1)\n \n # ------------------------------------------------\n \n-if config.translations_dir:\n-    if not Path(config.translations_dir[0]).exists():\n-        sys.stderr.write(f\"Error: Could not find translation dir \\\"{config.translations_dir[0]}\\\"\\n\")\n-        sys.exit(1)\n-\n-print(\"+ Adding Qt translations +\")\n-\n-translations = Path(config.translations_dir[0])\n-\n-regex = re.compile('qt_[a-z]*(.qm|_[A-Z]*.qm)')\n-\n-lang_files = [x for x in translations.iterdir() if regex.match(x.name)]\n-\n-for file in lang_files:\n-    if verbose:\n-        print(file.as_posix(), \"->\", os.path.join(applicationBundle.resourcesPath, file.name))\n-    shutil.copy2(file.as_posix(), os.path.join(applicationBundle.resourcesPath, file.name))\n+if len(config.add_qt_tr) == 0:\n+    add_qt_tr = []\n+else:\n+    if translations_dir is not None:\n+        qt_tr_dir = translations_dir\n+    else:\n+        if deploymentInfo.qtPath is not None:\n+            qt_tr_dir = os.path.join(deploymentInfo.qtPath, \"translations\")\n+        else:\n+            sys.stderr.write(\"Error: Could not find Qt translation path\\n\")\n+            sys.exit(1)\n+    add_qt_tr = [\"qt_{}.qm\".format(lng) for lng in config.add_qt_tr[0].split(\",\")]\n+    for lng_file in add_qt_tr:\n+        p = os.path.join(qt_tr_dir, lng_file)\n+        if verbose >= 3:\n+            print(\"Checking for \\\"{}\\\"...\".format(p))\n+        if not os.path.exists(p):\n+            if verbose >= 1:\n+                sys.stderr.write(\"Error: Could not find Qt translation file \\\"{}\\\"\\n\".format(lng_file))\n+                sys.exit(1)\n \n # ------------------------------------------------\n \n-print(\"+ Installing qt.conf +\")\n-\n-qt_conf=\"\"\"[Paths]\n-Translations=Resources\n-Plugins=PlugIns\n-\"\"\"\n+if verbose >= 2:\n+    print(\"+ Installing qt.conf +\")\n \n with open(os.path.join(applicationBundle.resourcesPath, \"qt.conf\"), \"wb\") as f:\n     f.write(qt_conf.encode())\n \n # ------------------------------------------------\n \n-print(\"+ Generating .DS_Store +\")\n-\n-output_file = os.path.join(\"dist\", \".DS_Store\")\n-\n-ds = DSStore.open(output_file, 'w+')\n-\n-ds['.']['bwsp'] = {\n-    'WindowBounds': '{{300, 280}, {500, 343}}',\n-    'PreviewPaneVisibility': False,\n-}\n-\n-icvp = {\n-    'gridOffsetX': 0.0,\n-    'textSize': 12.0,\n-    'viewOptionsVersion': 1,\n-    'backgroundImageAlias': b'\\x00\\x00\\x00\\x00\\x02\\x1e\\x00\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xd1\\x94\\\\\\xb0H+\\x00\\x05\\x00\\x00\\x00\\x98\\x0fbackground.tiff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x99\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\xff\\xff\\xff\\x00\\x00\\r\\x02\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x0b.background\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd19\\xb0\\xf8\\x00\\x00\\x00\\x01\\x00\\x04\\x00\\x00\\x00\\x98\\x00\\x0e\\x00 \\x00\\x0f\\x00b\\x00a\\x00c\\x00k\\x00g\\x00r\\x00o\\x00u\\x00n\\x00d\\x00.\\x00t\\x00i\\x00f\\x00f\\x00\\x0f\\x00\\x02\\x00\\x00\\x00\\x12\\x00\\x1c/.background/background.tiff\\x00\\x14\\x01\\x06\\x00\\x00\\x00\\x00\\x01\\x06\\x00\\x02\\x00\\x00\\x0cMacintosh HD\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xce\\x97\\xab\\xc3H+\\x00\\x00\\x01\\x88[\\x88\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02u\\xab\\x8d\\xd1\\x94\\\\\\xb0devrddsk\\xff\\xff\\xff\\xff\\x00\\x00\\t \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x07bitcoin\\x00\\x00\\x10\\x00\\x08\\x00\\x00\\xce\\x97\\xab\\xc3\\x00\\x00\\x00\\x11\\x00\\x08\\x00\\x00\\xd1\\x94\\\\\\xb0\\x00\\x00\\x00\\x01\\x00\\x14\\x01\\x88[\\x88\\x00\\x16\\xa9\\t\\x00\\x08\\xfaR\\x00\\x08\\xfaQ\\x00\\x02d\\x8e\\x00\\x0e\\x00\\x02\\x00\\x00\\x00\\x0f\\x00\\x1a\\x00\\x0c\\x00M\\x00a\\x00c\\x00i\\x00n\\x00t\\x00o\\x00s\\x00h\\x00 \\x00H\\x00D\\x00\\x13\\x00\\x01/\\x00\\x00\\x15\\x00\\x02\\x00\\x14\\xff\\xff\\x00\\x00\\xff\\xff\\x00\\x00',\n-    'backgroundColorBlue': 1.0,\n-    'iconSize': 96.0,\n-    'backgroundColorGreen': 1.0,\n-    'arrangeBy': 'none',\n-    'showIconPreview': True,\n-    'gridSpacing': 100.0,\n-    'gridOffsetY': 0.0,\n-    'showItemInfo': False,\n-    'labelOnBottom': True,\n-    'backgroundType': 2,\n-    'backgroundColorRed': 1.0\n-}\n-alias = Alias().from_bytes(icvp['backgroundImageAlias'])\n-alias.volume.name = appname\n-alias.volume.posix_path = '/Volumes/' + appname\n-icvp['backgroundImageAlias'] = alias.to_bytes()\n-ds['.']['icvp'] = icvp\n-\n-ds['.']['vSrn'] = ('long', 1)\n-\n-ds['Applications']['Iloc'] = (370, 156)\n-ds['Bitcoin-Qt.app']['Iloc'] = (128, 156)\n-\n-ds.flush()\n-ds.close()\n-\n-# ------------------------------------------------\n-\n-if config.dmg is not None:\n-\n-    print(\"+ Preparing .dmg disk image +\")\n-\n-    if verbose:\n-        print(\"Determining size of \\\"dist\\\"...\")\n-    size = 0\n-    for path, dirs, files in os.walk(\"dist\"):\n-        for file in files:\n-            size += os.path.getsize(os.path.join(path, file))\n-    size += int(size * 0.15)\n-\n-    if verbose:\n-        print(\"Creating temp image for modification...\")\n-\n-    tempname: str = appname + \".temp.dmg\"\n+if len(add_qt_tr) > 0 and verbose >= 2:\n+    print(\"+ Adding Qt translations +\")\n \n-    run([\"hdiutil\", \"create\", tempname, \"-srcfolder\", \"dist\", \"-format\", \"UDRW\", \"-size\", str(size), \"-volname\", appname], check=True, universal_newlines=True)\n+for lng_file in add_qt_tr:\n+    if verbose >= 3:\n+        print(os.path.join(qt_tr_dir, lng_file), \"->\", os.path.join(applicationBundle.resourcesPath, lng_file))\n+    shutil.copy2(os.path.join(qt_tr_dir, lng_file), os.path.join(applicationBundle.resourcesPath, lng_file))\n \n-    if verbose:\n-        print(\"Attaching temp image...\")\n-    output = run([\"hdiutil\", \"attach\", tempname, \"-readwrite\"], check=True, universal_newlines=True, stdout=PIPE).stdout\n-\n-    m = re.search(r\"/Volumes/(.+$)\", output)\n-    disk_root = m.group(0)\n+# ------------------------------------------------\n \n-    print(\"+ Applying fancy settings +\")\n+if len(config.add_resources) > 0 and verbose >= 2:\n+    print(\"+ Adding additional resources +\")\n \n-    bg_path = os.path.join(disk_root, \".background\", os.path.basename('background.tiff'))\n-    os.mkdir(os.path.dirname(bg_path))\n-    if verbose:\n-        print('background.tiff', \"->\", bg_path)\n-    shutil.copy2('background.tiff', bg_path)\n+for p in config.add_resources:\n+    t = os.path.join(applicationBundle.resourcesPath, os.path.basename(p))\n+    if verbose >= 3:\n+        print(p, \"->\", t)\n+    if os.path.isdir(p):\n+        shutil.copytree(p, t, symlinks=True)\n+    else:\n+        shutil.copy2(p, t)\n \n-    os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n+# ------------------------------------------------\n \n-    print(\"+ Finalizing .dmg disk image +\")\n+if config.sign and 'CODESIGNARGS' not in os.environ:\n+    print(\"You must set the CODESIGNARGS environment variable. Skipping signing.\")\n+elif config.sign:\n+    if verbose >= 1:\n+        print(\"Code-signing app bundle {}\".format(target))\n+    subprocess.check_call(\"codesign --force {} {}\".format(os.environ['CODESIGNARGS'], target), shell=True)\n \n-    run([\"hdiutil\", \"detach\", f\"/Volumes/{appname}\"], universal_newlines=True)\n+# ------------------------------------------------\n \n-    run([\"hdiutil\", \"convert\", tempname, \"-format\", \"UDZO\", \"-o\", appname, \"-imagekey\", \"zlib-level=9\"], check=True, universal_newlines=True)\n+if config.dmg is not None:\n \n-    os.unlink(tempname)\n+    def runHDIUtil(verb: str, image_basename: str, **kwargs) -> int:\n+        hdiutil_args = [\"hdiutil\", verb, image_basename + \".dmg\"]\n+        if \"capture_stdout\" in kwargs:\n+            del kwargs[\"capture_stdout\"]\n+            run = subprocess.check_output\n+        else:\n+            if verbose < 2:\n+                hdiutil_args.append(\"-quiet\")\n+            elif verbose >= 3:\n+                hdiutil_args.append(\"-verbose\")\n+            run = subprocess.check_call\n+        \n+        for key, value in kwargs.items():\n+            hdiutil_args.append(\"-\" + key)\n+            if value is not True:\n+                hdiutil_args.append(str(value))\n+        \n+        return run(hdiutil_args, universal_newlines=True)\n+    \n+    if verbose >= 2:\n+        if fancy is None:\n+            print(\"+ Creating .dmg disk image +\")\n+        else:\n+            print(\"+ Preparing .dmg disk image +\")\n+    \n+    if config.dmg != \"\":\n+        dmg_name = config.dmg\n+    else:\n+        spl = app_bundle_name.split(\" \")\n+        dmg_name = spl[0] + \"\".join(p.capitalize() for p in spl[1:])\n+    \n+    if fancy is None:\n+        try:\n+            runHDIUtil(\"create\", dmg_name, srcfolder=\"dist\", format=\"UDBZ\", volname=volname, ov=True)\n+        except subprocess.CalledProcessError as e:\n+            sys.exit(e.returncode)\n+    else:\n+        if verbose >= 3:\n+            print(\"Determining size of \\\"dist\\\"...\")\n+        size = 0\n+        for path, dirs, files in os.walk(\"dist\"):\n+            for file in files:\n+                size += os.path.getsize(os.path.join(path, file))\n+        size += int(size * 0.15)\n+        \n+        if verbose >= 3:\n+            print(\"Creating temp image for modification...\")\n+        try:\n+            runHDIUtil(\"create\", dmg_name + \".temp\", srcfolder=\"dist\", format=\"UDRW\", size=size, volname=volname, ov=True)\n+        except subprocess.CalledProcessError as e:\n+            sys.exit(e.returncode)\n+        \n+        if verbose >= 3:\n+            print(\"Attaching temp image...\")\n+        try:\n+            output = runHDIUtil(\"attach\", dmg_name + \".temp\", readwrite=True, noverify=True, noautoopen=True, capture_stdout=True)\n+        except subprocess.CalledProcessError as e:\n+            sys.exit(e.returncode)\n+\n+        m = re.search(r\"/Volumes/(.+$)\", output)\n+        disk_root = m.group(0)\n+        disk_name = m.group(1)\n+        \n+        if verbose >= 2:\n+            print(\"+ Applying fancy settings +\")\n+        \n+        if \"background_picture\" in fancy:\n+            bg_path = os.path.join(disk_root, \".background\", os.path.basename(fancy[\"background_picture\"]))\n+            os.mkdir(os.path.dirname(bg_path))\n+            if verbose >= 3:\n+                print(fancy[\"background_picture\"], \"->\", bg_path)\n+            shutil.copy2(fancy[\"background_picture\"], bg_path)\n+        else:\n+            bg_path = None\n+        \n+        if fancy.get(\"applications_symlink\", False):\n+            os.symlink(\"/Applications\", os.path.join(disk_root, \"Applications\"))\n+        \n+        # The Python appscript package broke with OSX 10.8 and isn't being fixed.\n+        # So we now build up an AppleScript string and use the osascript command\n+        # to make the .dmg file pretty:\n+        appscript = Template( \"\"\"\n+        on run argv\n+           tell application \"Finder\"\n+             tell disk \"$disk\"\n+                   open\n+                   set current view of container window to icon view\n+                   set toolbar visible of container window to false\n+                   set statusbar visible of container window to false\n+                   set the bounds of container window to {$window_bounds}\n+                   set theViewOptions to the icon view options of container window\n+                   set arrangement of theViewOptions to not arranged\n+                   set icon size of theViewOptions to $icon_size\n+                   $background_commands\n+                   $items_positions\n+                   close -- close/reopen works around a bug...\n+                   open\n+                   update without registering applications\n+                   delay 5\n+                   eject\n+             end tell\n+           end tell\n+        end run\n+        \"\"\")\n+\n+        itemscript = Template('set position of item \"${item}\" of container window to {${position}}')\n+        items_positions = []\n+        if \"items_position\" in fancy:\n+            for name, position in fancy[\"items_position\"].items():\n+                params = { \"item\" : name, \"position\" : \",\".join([str(p) for p in position]) }\n+                items_positions.append(itemscript.substitute(params))\n+\n+        params = {\n+            \"disk\" : volname,\n+            \"window_bounds\" : \"300,300,800,620\",\n+            \"icon_size\" : \"96\",\n+            \"background_commands\" : \"\",\n+            \"items_positions\" : \"\\n                   \".join(items_positions)\n+            }\n+        if \"window_bounds\" in fancy:\n+            params[\"window_bounds\"] = \",\".join([str(p) for p in fancy[\"window_bounds\"]])\n+        if \"icon_size\" in fancy:\n+            params[\"icon_size\"] = str(fancy[\"icon_size\"])\n+        if bg_path is not None:\n+            # Set background file, then call SetFile to make it invisible.\n+            # (note: making it invisible first makes set background picture fail)\n+            bgscript = Template(\"\"\"set background picture of theViewOptions to file \".background:$bgpic\"\n+                   do shell script \"SetFile -a V /Volumes/$disk/.background/$bgpic\" \"\"\")\n+            params[\"background_commands\"] = bgscript.substitute({\"bgpic\" : os.path.basename(bg_path), \"disk\" : params[\"disk\"]})\n+\n+        s = appscript.substitute(params)\n+        if verbose >= 2:\n+            print(\"Running AppleScript:\")\n+            print(s)\n+\n+        p = subprocess.Popen(['osascript', '-'], stdin=subprocess.PIPE)\n+        p.communicate(input=s.encode('utf-8'))\n+        if p.returncode:\n+            print(\"Error running osascript.\")\n+\n+        if verbose >= 2:\n+            print(\"+ Finalizing .dmg disk image +\")\n+            time.sleep(5)\n+        \n+        try:\n+            runHDIUtil(\"convert\", dmg_name + \".temp\", format=\"UDBZ\", o=dmg_name + \".dmg\", ov=True)\n+        except subprocess.CalledProcessError as e:\n+            sys.exit(e.returncode)\n+        \n+        os.unlink(dmg_name + \".temp.dmg\")\n \n # ------------------------------------------------\n \n-print(\"+ Done +\")\n+if verbose >= 2:\n+    print(\"+ Done +\")\n \n sys.exit(0)"
      },
      {
        "sha": "730196846134f627761feb559c8a847fcf202ae9",
        "filename": "contrib/message-capture/message-capture-docs.md",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/message-capture/message-capture-docs.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/message-capture/message-capture-docs.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-docs.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,25 +0,0 @@\n-# Per-Peer Message Capture\n-\n-## Purpose\n-\n-This feature allows for message capture on a per-peer basis.  It answers the simple question: \"Can I see what messages my node is sending and receiving?\"\n-\n-## Usage and Functionality\n-\n-* Run `bitcoind` with the `-capturemessages` option.\n-* Look in the `message_capture` folder in your datadir.\n-  * Typically this will be `~/.bitcoin/message_capture`.\n-  * See that there are many folders inside, one for each peer names with its IP address and port.\n-  * Inside each peer's folder there are two `.dat` files: one is for received messages (`msgs_recv.dat`) and the other is for sent messages (`msgs_sent.dat`).\n-* Run `contrib/message-capture/message-capture-parser.py` with the proper arguments.\n-  * See the `-h` option for help.\n-  * To see all messages, both sent and received, for all peers use:\n-    ```\n-    ./contrib/message-capture/message-capture-parser.py -o out.json \\\n-    ~/.bitcoin/message_capture/**/*.dat\n-    ```\n-  * Note:  The messages in the given `.dat` files will be interleaved in chronological order.  So, giving both received and sent `.dat` files (as above with `*.dat`) will result in all messages being interleaved in chronological order.\n-  * If an output file is not provided (i.e. the `-o` option is not used), then the output prints to `stdout`.\n-* View the resulting output.\n-  * The output file is `JSON` formatted.\n-  * Suggestion: use `jq` to view the output, with `jq . out.json`"
      },
      {
        "sha": "9988478f1b90c4215a89c8899d321971c0830be0",
        "filename": "contrib/message-capture/message-capture-parser.py",
        "status": "removed",
        "additions": 0,
        "deletions": 214,
        "changes": 214,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/message-capture/message-capture-parser.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/message-capture/message-capture-parser.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/message-capture/message-capture-parser.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,214 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\"\"\"Parse message capture binary files.  To be used in conjunction with -capturemessages.\"\"\"\n-\n-import argparse\n-import os\n-import shutil\n-import sys\n-from io import BytesIO\n-import json\n-from pathlib import Path\n-from typing import Any, List, Optional\n-\n-sys.path.append(os.path.join(os.path.dirname(__file__), '../../test/functional'))\n-\n-from test_framework.messages import ser_uint256     # noqa: E402\n-from test_framework.p2p import MESSAGEMAP           # noqa: E402\n-\n-TIME_SIZE = 8\n-LENGTH_SIZE = 4\n-MSGTYPE_SIZE = 12\n-\n-# The test framework classes stores hashes as large ints in many cases.\n-# These are variables of type uint256 in core.\n-# There isn't a way to distinguish between a large int and a large int that is actually a blob of bytes.\n-# As such, they are itemized here.\n-# Any variables with these names that are of type int are actually uint256 variables.\n-# (These can be easily found by looking for calls to deser_uint256, deser_uint256_vector, and uint256_from_str in messages.py)\n-HASH_INTS = [\n-    \"blockhash\",\n-    \"block_hash\",\n-    \"hash\",\n-    \"hashMerkleRoot\",\n-    \"hashPrevBlock\",\n-    \"hashstop\",\n-    \"prev_header\",\n-    \"sha256\",\n-    \"stop_hash\",\n-]\n-\n-HASH_INT_VECTORS = [\n-    \"hashes\",\n-    \"headers\",\n-    \"vHave\",\n-    \"vHash\",\n-]\n-\n-\n-class ProgressBar:\n-    def __init__(self, total: float):\n-        self.total = total\n-        self.running = 0\n-\n-    def set_progress(self, progress: float):\n-        cols = shutil.get_terminal_size()[0]\n-        if cols <= 12:\n-            return\n-        max_blocks = cols - 9\n-        num_blocks = int(max_blocks * progress)\n-        print('\\r[ {}{} ] {:3.0f}%'\n-              .format('#' * num_blocks,\n-                      ' ' * (max_blocks - num_blocks),\n-                      progress * 100),\n-              end ='')\n-\n-    def update(self, more: float):\n-        self.running += more\n-        self.set_progress(self.running / self.total)\n-\n-\n-def to_jsonable(obj: Any) -> Any:\n-    if hasattr(obj, \"__dict__\"):\n-        return obj.__dict__\n-    elif hasattr(obj, \"__slots__\"):\n-        ret = {}    # type: Any\n-        for slot in obj.__slots__:\n-            val = getattr(obj, slot, None)\n-            if slot in HASH_INTS and isinstance(val, int):\n-                ret[slot] = ser_uint256(val).hex()\n-            elif slot in HASH_INT_VECTORS and isinstance(val[0], int):\n-                ret[slot] = [ser_uint256(a).hex() for a in val]\n-            else:\n-                ret[slot] = to_jsonable(val)\n-        return ret\n-    elif isinstance(obj, list):\n-        return [to_jsonable(a) for a in obj]\n-    elif isinstance(obj, bytes):\n-        return obj.hex()\n-    else:\n-        return obj\n-\n-\n-def process_file(path: str, messages: List[Any], recv: bool, progress_bar: Optional[ProgressBar]) -> None:\n-    with open(path, 'rb') as f_in:\n-        if progress_bar:\n-            bytes_read = 0\n-\n-        while True:\n-            if progress_bar:\n-                # Update progress bar\n-                diff = f_in.tell() - bytes_read - 1\n-                progress_bar.update(diff)\n-                bytes_read = f_in.tell() - 1\n-\n-            # Read the Header\n-            tmp_header_raw = f_in.read(TIME_SIZE + LENGTH_SIZE + MSGTYPE_SIZE)\n-            if not tmp_header_raw:\n-                break\n-            tmp_header = BytesIO(tmp_header_raw)\n-            time = int.from_bytes(tmp_header.read(TIME_SIZE), \"little\")      # type: int\n-            msgtype = tmp_header.read(MSGTYPE_SIZE).split(b'\\x00', 1)[0]     # type: bytes\n-            length = int.from_bytes(tmp_header.read(LENGTH_SIZE), \"little\")  # type: int\n-\n-            # Start converting the message to a dictionary\n-            msg_dict = {}\n-            msg_dict[\"direction\"] = \"recv\" if recv else \"sent\"\n-            msg_dict[\"time\"] = time\n-            msg_dict[\"size\"] = length   # \"size\" is less readable here, but more readable in the output\n-\n-            msg_ser = BytesIO(f_in.read(length))\n-\n-            # Determine message type\n-            if msgtype not in MESSAGEMAP:\n-                # Unrecognized message type\n-                try:\n-                    msgtype_tmp = msgtype.decode()\n-                    if not msgtype_tmp.isprintable():\n-                        raise UnicodeDecodeError\n-                    msg_dict[\"msgtype\"] = msgtype_tmp\n-                except UnicodeDecodeError:\n-                    msg_dict[\"msgtype\"] = \"UNREADABLE\"\n-                msg_dict[\"body\"] = msg_ser.read().hex()\n-                msg_dict[\"error\"] = \"Unrecognized message type.\"\n-                messages.append(msg_dict)\n-                print(f\"WARNING - Unrecognized message type {msgtype} in {path}\", file=sys.stderr)\n-                continue\n-\n-            # Deserialize the message\n-            msg = MESSAGEMAP[msgtype]()\n-            msg_dict[\"msgtype\"] = msgtype.decode()\n-\n-            try:\n-                msg.deserialize(msg_ser)\n-            except KeyboardInterrupt:\n-                raise\n-            except Exception:\n-                # Unable to deserialize message body\n-                msg_ser.seek(0, os.SEEK_SET)\n-                msg_dict[\"body\"] = msg_ser.read().hex()\n-                msg_dict[\"error\"] = \"Unable to deserialize message.\"\n-                messages.append(msg_dict)\n-                print(f\"WARNING - Unable to deserialize message in {path}\", file=sys.stderr)\n-                continue\n-\n-            # Convert body of message into a jsonable object\n-            if length:\n-                msg_dict[\"body\"] = to_jsonable(msg)\n-            messages.append(msg_dict)\n-\n-        if progress_bar:\n-            # Update the progress bar to the end of the current file\n-            # in case we exited the loop early\n-            f_in.seek(0, os.SEEK_END)   # Go to end of file\n-            diff = f_in.tell() - bytes_read - 1\n-            progress_bar.update(diff)\n-\n-\n-def main():\n-    parser = argparse.ArgumentParser(\n-        description=__doc__,\n-        epilog=\"EXAMPLE \\n\\t{0} -o out.json <data-dir>/message_capture/**/*.dat\".format(sys.argv[0]),\n-        formatter_class=argparse.RawTextHelpFormatter)\n-    parser.add_argument(\n-        \"capturepaths\",\n-        nargs='+',\n-        help=\"binary message capture files to parse.\")\n-    parser.add_argument(\n-        \"-o\", \"--output\",\n-        help=\"output file.  If unset print to stdout\")\n-    parser.add_argument(\n-        \"-n\", \"--no-progress-bar\",\n-        action='store_true',\n-        help=\"disable the progress bar.  Automatically set if the output is not a terminal\")\n-    args = parser.parse_args()\n-    capturepaths = [Path.cwd() / Path(capturepath) for capturepath in args.capturepaths]\n-    output = Path.cwd() / Path(args.output) if args.output else False\n-    use_progress_bar = (not args.no_progress_bar) and sys.stdout.isatty()\n-\n-    messages = []   # type: List[Any]\n-    if use_progress_bar:\n-        total_size = sum(capture.stat().st_size for capture in capturepaths)\n-        progress_bar = ProgressBar(total_size)\n-    else:\n-        progress_bar = None\n-\n-    for capture in capturepaths:\n-        process_file(str(capture), messages, \"recv\" in capture.stem, progress_bar)\n-\n-    messages.sort(key=lambda msg: msg['time'])\n-\n-    if use_progress_bar:\n-        progress_bar.set_progress(1)\n-\n-    jsonrep = json.dumps(messages)\n-    if output:\n-        with open(str(output), 'w+', encoding=\"utf8\") as f_out:\n-            f_out.write(jsonrep)\n-    else:\n-        print(jsonrep)\n-\n-if __name__ == \"__main__\":\n-    main()"
      },
      {
        "sha": "8408545a218e4faa4a3fb41951a3afab21ba199a",
        "filename": "contrib/qos/tc.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/qos/tc.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/qos/tc.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/qos/tc.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -16,7 +16,7 @@ LOCALNET_V4=\"192.168.0.0/16\"\n #defines the IPv6 address space for which you wish to disable rate limiting\n LOCALNET_V6=\"fe80::/10\"\n \n-#delete existing rules ('Error: Cannot delete qdisc with handle of zero.' means there weren't any.)\n+#delete existing rules\n tc qdisc del dev ${IF} root\n \n #add root class"
      },
      {
        "sha": "e4a39d609343699cc54dee0d85e105fbce7088a4",
        "filename": "contrib/seeds/.gitignore",
        "status": "removed",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/seeds/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/seeds/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/.gitignore?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1 +0,0 @@\n-seeds_main.txt"
      },
      {
        "sha": "502c20d0d678c59eafbb976d7a1b2537be0217b6",
        "filename": "contrib/seeds/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -16,12 +16,6 @@ The seeds compiled into the release are created from sipa's DNS seed data, like\n \n ## Dependencies\n \n-Ubuntu, Debian:\n+Ubuntu:\n \n     sudo apt-get install python3-dnspython\n-\n-and/or for other operating systems:\n-\n-    pip install dnspython\n-\n-See https://dnspython.readthedocs.io/en/latest/installation.html for more information."
      },
      {
        "sha": "7630a7a4fa2550396e8e6ee5421a90f640b7be0a",
        "filename": "contrib/seeds/generate-seeds.py",
        "status": "modified",
        "additions": 42,
        "deletions": 75,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/generate-seeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/generate-seeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/generate-seeds.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2021 The Bitcoin Core developers\n+# Copyright (c) 2014-2017 Wladimir J. van der Laan\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -13,54 +13,44 @@\n \n These files must consist of lines in the format\n \n+    <ip>\n     <ip>:<port>\n+    [<ipv6>]\n     [<ipv6>]:<port>\n-    <onion>.onion:<port>\n-    <i2p>.b32.i2p:<port>\n+    <onion>.onion\n+    0xDDBBCCAA (IPv4 little-endian old pnSeeds format)\n \n The output will be two data structures with the peers in binary format:\n \n-   static const uint8_t chainparams_seed_{main,test}[]={\n+   static SeedSpec6 pnSeed6_main[]={\n+   ...\n+   }\n+   static SeedSpec6 pnSeed6_test[]={\n    ...\n    }\n \n These should be pasted into `src/chainparamsseeds.h`.\n '''\n \n from base64 import b32decode\n-from enum import Enum\n-import struct\n+from binascii import a2b_hex\n import sys\n import os\n import re\n \n-class BIP155Network(Enum):\n-    IPV4 = 1\n-    IPV6 = 2\n-    TORV2 = 3  # no longer supported\n-    TORV3 = 4\n-    I2P = 5\n-    CJDNS = 6\n-\n-def name_to_bip155(addr):\n-    '''Convert address string to BIP155 (networkID, addr) tuple.'''\n-    if addr.endswith('.onion'):\n+# ipv4 in ipv6 prefix\n+pchIPv4 = bytearray([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0xff, 0xff])\n+# tor-specific ipv6 prefix\n+pchOnionCat = bytearray([0xFD,0x87,0xD8,0x7E,0xEB,0x43])\n+\n+def name_to_ipv6(addr):\n+    if len(addr)>6 and addr.endswith('.onion'):\n         vchAddr = b32decode(addr[0:-6], True)\n-        if len(vchAddr) == 35:\n-            assert vchAddr[34] == 3\n-            return (BIP155Network.TORV3, vchAddr[:32])\n-        elif len(vchAddr) == 10:\n-            return (BIP155Network.TORV2, vchAddr)\n-        else:\n+        if len(vchAddr) != 16-len(pchOnionCat):\n             raise ValueError('Invalid onion %s' % vchAddr)\n-    elif addr.endswith('.b32.i2p'):\n-        vchAddr = b32decode(addr[0:-8] + '====', True)\n-        if len(vchAddr) == 32:\n-            return (BIP155Network.I2P, vchAddr)\n-        else:\n-            raise ValueError(f'Invalid I2P {vchAddr}')\n+        return pchOnionCat + vchAddr\n     elif '.' in addr: # IPv4\n-        return (BIP155Network.IPV4, bytes((int(x) for x in addr.split('.'))))\n+        return pchIPv4 + bytearray((int(x) for x in addr.split('.')))\n     elif ':' in addr: # IPv6\n         sub = [[], []] # prefix, suffix\n         x = 0\n@@ -77,12 +67,13 @@ def name_to_bip155(addr):\n                 sub[x].append(val & 0xff)\n         nullbytes = 16 - len(sub[0]) - len(sub[1])\n         assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))\n-        return (BIP155Network.IPV6, bytes(sub[0] + ([0] * nullbytes) + sub[1]))\n+        return bytearray(sub[0] + ([0] * nullbytes) + sub[1])\n+    elif addr.startswith('0x'): # IPv4-in-little-endian\n+        return pchIPv4 + bytearray(reversed(a2b_hex(addr[2:])))\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n \n-def parse_spec(s):\n-    '''Convert endpoint string to BIP155 (networkID, addr, port) tuple.'''\n+def parse_spec(s, defaultport):\n     match = re.match(r'\\[([0-9a-fA-F:]+)\\](?::([0-9]+))?$', s)\n     if match: # ipv6\n         host = match.group(1)\n@@ -94,57 +85,32 @@ def parse_spec(s):\n         (host,_,port) = s.partition(':')\n \n     if not port:\n-        port = 0\n+        port = defaultport\n     else:\n         port = int(port)\n \n-    host = name_to_bip155(host)\n+    host = name_to_ipv6(host)\n \n-    if host[0] == BIP155Network.TORV2:\n-        return None  # TORV2 is no longer supported, so we ignore it\n-    else:\n-        return host + (port, )\n-\n-def ser_compact_size(l):\n-    r = b\"\"\n-    if l < 253:\n-        r = struct.pack(\"B\", l)\n-    elif l < 0x10000:\n-        r = struct.pack(\"<BH\", 253, l)\n-    elif l < 0x100000000:\n-        r = struct.pack(\"<BI\", 254, l)\n-    else:\n-        r = struct.pack(\"<BQ\", 255, l)\n-    return r\n-\n-def bip155_serialize(spec):\n-    '''\n-    Serialize (networkID, addr, port) tuple to BIP155 binary format.\n-    '''\n-    r = b\"\"\n-    r += struct.pack('B', spec[0].value)\n-    r += ser_compact_size(len(spec[1]))\n-    r += spec[1]\n-    r += struct.pack('>H', spec[2])\n-    return r\n-\n-def process_nodes(g, f, structname):\n-    g.write('static const uint8_t %s[] = {\\n' % structname)\n+    return (host,port)\n+\n+def process_nodes(g, f, structname, defaultport):\n+    g.write('static SeedSpec6 %s[] = {\\n' % structname)\n+    first = True\n     for line in f:\n         comment = line.find('#')\n         if comment != -1:\n             line = line[0:comment]\n         line = line.strip()\n         if not line:\n             continue\n+        if not first:\n+            g.write(',\\n')\n+        first = False\n \n-        spec = parse_spec(line)\n-        if spec is None:  # ignore this entry (e.g. no longer supported addresses like TORV2)\n-            continue\n-        blob = bip155_serialize(spec)\n-        hoststr = ','.join(('0x%02x' % b) for b in blob)\n-        g.write(f'    {hoststr},\\n')\n-    g.write('};\\n')\n+        (host,port) = parse_spec(line, defaultport)\n+        hoststr = ','.join(('0x%02x' % b) for b in host)\n+        g.write('    {{%s}, %i}' % (hoststr, port))\n+    g.write('\\n};\\n')\n \n def main():\n     if len(sys.argv)<2:\n@@ -158,13 +124,14 @@ def main():\n     g.write(' * List of fixed seed nodes for the bitcoin network\\n')\n     g.write(' * AUTOGENERATED by contrib/seeds/generate-seeds.py\\n')\n     g.write(' *\\n')\n-    g.write(' * Each line contains a BIP155 serialized (networkID, addr, port) tuple.\\n')\n+    g.write(' * Each line contains a 16-byte IPv6 address and a port.\\n')\n+    g.write(' * IPv4 as well as onion addresses are wrapped inside an IPv6 address accordingly.\\n')\n     g.write(' */\\n')\n     with open(os.path.join(indir,'nodes_main.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'chainparams_seed_main')\n+        process_nodes(g, f, 'pnSeed6_main', 8333)\n     g.write('\\n')\n     with open(os.path.join(indir,'nodes_test.txt'), 'r', encoding=\"utf8\") as f:\n-        process_nodes(g, f, 'chainparams_seed_test')\n+        process_nodes(g, f, 'pnSeed6_test', 18333)\n     g.write('#endif // BITCOIN_CHAINPARAMSSEEDS_H\\n')\n \n if __name__ == '__main__':"
      },
      {
        "sha": "c623d5b5e4c427e44ca588153cda91c42d8123b4",
        "filename": "contrib/seeds/makeseeds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/makeseeds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/makeseeds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/makeseeds.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2013-2020 The Bitcoin Core developers\n+# Copyright (c) 2013-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #\n@@ -34,8 +34,7 @@\n     r\"0.17.(0|0.1|1|2|99)|\"\n     r\"0.18.(0|1|99)|\"\n     r\"0.19.(0|1|99)|\"\n-    r\"0.20.(0|1|99)|\"\n-    r\"0.21.99\"\n+    r\"0.20.99\"\n     r\")\")\n \n def parseline(line):\n@@ -136,7 +135,7 @@ def lookup_asn(net, ip):\n             ipaddr = res.rstrip('.')            # 2.0.0.1.4.8.6.0.b.0.0.2.0.0.2.3\n             prefix = '.origin6'\n \n-        asn = int([x.to_text() for x in dns.resolver.resolve('.'.join(\n+        asn = int([x.to_text() for x in dns.resolver.query('.'.join(\n                    reversed(ipaddr.split('.'))) + prefix + '.asn.cymru.com',\n                    'TXT').response.answer][0].split('\\\"')[1].split(' ')[0])\n         return asn"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "contrib/seeds/nodes_main.txt",
        "status": "modified",
        "additions": 0,
        "deletions": 696,
        "changes": 696,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/nodes_main.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/nodes_main.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_main.txt?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,696 +0,0 @@\n-2.39.173.126:8333\n-3.14.168.201:48333\n-4.36.112.44:8333\n-5.8.18.31:8333\n-5.14.200.167:8333\n-5.56.20.2:8333\n-5.102.146.99:8333\n-5.103.137.146:9333\n-5.128.87.126:8333\n-5.133.65.82:8333\n-5.187.55.242:8333\n-5.188.62.24:8333\n-5.188.62.33:8333\n-5.199.133.193:8333\n-8.38.89.152:8333\n-13.231.20.249:8333\n-18.27.79.17:8333\n-20.184.15.116:8433\n-23.28.205.97:8333\n-23.106.252.230:8333\n-23.175.0.202:8333\n-23.175.0.212:8333\n-23.241.250.252:8333\n-23.245.24.154:8333\n-24.86.184.66:8333\n-24.116.246.9:8333\n-24.141.34.166:8333\n-24.155.196.246:8333\n-24.157.130.222:8333\n-24.188.176.255:8333\n-24.237.70.53:8333\n-27.124.4.67:8333\n-31.17.70.80:8333\n-31.21.8.32:8333\n-31.45.118.10:8333\n-31.132.17.56:8333\n-31.134.121.223:8333\n-32.214.183.114:8333\n-35.137.236.32:8333\n-35.185.145.105:8333\n-35.209.51.212:8333\n-35.245.175.76:8333\n-37.116.95.41:8333\n-37.143.9.107:8333\n-37.143.116.43:8333\n-37.191.244.149:8333\n-37.211.78.253:8333\n-37.221.209.222:24333\n-37.228.92.110:8333\n-43.225.62.107:8333\n-43.225.157.152:8333\n-45.36.184.6:8333\n-45.48.168.16:8333\n-45.85.85.8:8333\n-45.85.85.9:8333\n-45.129.180.214:8333\n-45.149.78.128:8333\n-45.151.125.218:8333\n-45.154.255.46:8333\n-45.155.157.239:8333\n-46.28.132.34:8333\n-46.28.204.21:8333\n-46.32.50.98:8333\n-46.59.13.35:8333\n-46.128.40.173:8333\n-46.128.140.193:8333\n-46.146.248.89:8333\n-46.166.162.45:20001\n-46.188.15.6:8333\n-46.229.165.142:8333\n-46.229.238.187:8333\n-46.249.83.82:8333\n-46.254.217.169:8333\n-47.74.191.34:8333\n-47.115.53.163:8333\n-47.187.26.135:8333\n-47.222.103.234:8333\n-47.253.5.99:8333\n-49.232.82.76:8333\n-49.247.215.43:8333\n-50.2.13.166:8333\n-50.34.39.72:8333\n-50.45.232.189:8333\n-50.68.104.92:8333\n-51.68.36.57:8333\n-51.154.60.34:8333\n-52.169.238.66:8333\n-54.197.30.223:8333\n-54.227.66.57:8333\n-58.158.0.86:8333\n-58.171.135.242:8333\n-58.229.208.158:8333\n-60.244.109.19:8333\n-62.38.75.208:8333\n-62.74.143.11:8333\n-62.80.227.49:8333\n-62.152.58.16:9421\n-62.210.167.199:8333\n-62.234.188.160:8333\n-62.251.54.163:8333\n-63.227.116.162:8333\n-65.19.155.82:8333\n-65.95.49.102:8333\n-66.18.172.21:8333\n-66.240.237.155:8333\n-67.210.228.203:8333\n-69.30.215.42:8333\n-69.59.18.206:8333\n-69.64.33.71:8333\n-69.119.193.9:8333\n-69.209.23.72:8333\n-70.123.125.237:8333\n-70.185.56.136:8333\n-71.38.90.235:8333\n-72.12.73.70:8333\n-72.53.134.182:8333\n-72.225.7.80:8333\n-72.234.182.39:8333\n-72.250.184.57:8333\n-73.83.103.79:8333\n-74.118.137.119:8333\n-74.133.100.74:8333\n-74.215.219.214:8333\n-74.220.255.190:8333\n-75.158.39.231:8333\n-77.53.53.196:8333\n-77.70.16.245:8333\n-77.105.87.97:8333\n-77.120.113.69:8433\n-77.120.122.22:8433\n-77.166.83.167:8333\n-77.247.178.130:8333\n-78.27.139.13:8333\n-78.63.28.146:8333\n-78.83.103.4:8333\n-78.141.123.99:8333\n-79.77.33.131:8333\n-79.77.133.30:8333\n-79.101.1.25:8333\n-79.117.192.229:8333\n-79.133.228.55:8333\n-79.146.21.163:8333\n-80.89.203.172:8001\n-80.93.213.246:8333\n-80.192.98.110:8334\n-80.229.28.60:8333\n-80.232.247.210:8333\n-80.242.39.76:8333\n-80.253.94.252:8333\n-81.0.198.25:8333\n-81.7.13.84:8333\n-81.117.225.245:8333\n-81.135.137.225:8333\n-81.171.22.143:8333\n-81.191.233.134:8333\n-81.232.78.75:8333\n-81.242.91.23:8333\n-82.29.58.109:8333\n-82.136.99.22:8333\n-82.149.97.25:17567\n-82.165.19.48:8333\n-82.194.153.233:8333\n-82.197.215.125:8333\n-82.199.102.10:8333\n-82.200.205.30:8333\n-82.202.68.231:8333\n-82.221.128.31:8333\n-82.228.6.131:8333\n-83.85.139.94:8333\n-83.99.245.20:8333\n-83.137.41.10:8333\n-83.174.209.87:8333\n-83.217.8.31:44420\n-84.38.3.249:8333\n-84.38.185.122:8333\n-84.92.92.247:8333\n-84.192.16.234:8333\n-84.194.158.124:8333\n-84.212.145.24:8333\n-84.212.244.95:8333\n-84.216.51.36:8333\n-84.255.249.163:8333\n-85.25.255.147:8333\n-85.70.156.209:8333\n-85.145.142.46:8333\n-85.170.233.95:8333\n-85.184.138.108:8333\n-85.190.0.5:8333\n-85.191.200.51:8333\n-85.192.191.6:18500\n-85.194.238.131:8333\n-85.195.54.110:8333\n-85.214.161.252:8333\n-85.214.185.51:8333\n-85.241.106.203:8333\n-85.246.168.252:8333\n-86.56.238.247:8333\n-87.61.90.230:8333\n-87.79.68.86:8333\n-87.79.94.221:8333\n-87.120.8.5:20008\n-87.246.46.132:8333\n-87.247.111.222:8333\n-88.84.222.252:8333\n-88.86.243.241:8333\n-88.87.93.52:1691\n-88.119.197.200:8333\n-88.129.253.94:8333\n-88.147.244.250:8333\n-88.208.3.195:8333\n-88.212.44.33:8333\n-88.214.57.95:8333\n-89.106.199.38:8333\n-89.108.126.228:8333\n-89.115.120.43:8333\n-89.133.68.65:8333\n-89.190.19.162:8333\n-89.248.172.10:8333\n-90.146.153.21:8333\n-90.182.165.18:8333\n-91.106.188.229:8333\n-91.193.237.116:8333\n-91.204.99.178:8333\n-91.204.149.5:8333\n-91.214.70.63:8333\n-91.228.152.236:8333\n-92.12.154.115:8333\n-92.249.143.44:8333\n-93.12.66.98:8333\n-93.46.54.4:8333\n-93.115.20.130:8333\n-93.123.180.164:8333\n-93.189.145.169:8333\n-93.241.228.102:8333\n-94.19.7.55:8333\n-94.19.128.204:8333\n-94.52.112.227:8333\n-94.154.96.130:8333\n-94.156.174.201:8333\n-94.158.246.183:8333\n-94.177.171.73:8333\n-94.199.178.233:8100\n-94.237.125.30:8333\n-94.247.134.77:8333\n-95.48.228.45:8333\n-95.69.249.63:8333\n-95.82.146.70:8333\n-95.83.73.31:8333\n-95.84.164.43:8333\n-95.87.226.56:8333\n-95.110.234.93:8333\n-95.163.71.126:8333\n-95.164.65.194:8333\n-95.174.66.211:8333\n-95.211.174.137:8333\n-95.216.11.156:8433\n-96.47.114.108:8333\n-97.84.232.105:8333\n-97.99.205.241:8333\n-98.25.193.114:8333\n-99.115.25.13:8333\n-101.32.19.184:8333\n-101.100.174.240:8333\n-102.132.245.16:8333\n-103.14.244.190:8333\n-103.76.48.5:8333\n-103.84.84.250:8335\n-103.99.168.150:8333\n-103.109.101.216:8333\n-103.122.247.102:8333\n-103.129.13.45:8333\n-103.198.192.14:20008\n-103.224.119.99:8333\n-103.231.191.7:8333\n-103.235.230.196:8333\n-104.171.242.155:8333\n-104.238.220.199:8333\n-106.163.158.127:8333\n-107.150.41.179:8333\n-107.159.93.103:8333\n-108.183.77.12:8333\n-109.9.175.65:8333\n-109.99.63.159:8333\n-109.110.81.90:8333\n-109.123.213.130:8333\n-109.134.232.81:8333\n-109.169.20.168:8333\n-109.199.241.148:8333\n-109.229.210.6:8333\n-109.236.105.40:8333\n-109.248.206.13:8333\n-111.42.74.65:8333\n-111.90.140.179:8333\n-112.215.205.236:8333\n-113.52.135.125:8333\n-114.23.246.137:8333\n-115.47.141.250:8885\n-115.70.110.4:8333\n-116.34.189.55:8333\n-118.103.126.140:28333\n-118.189.187.219:8333\n-119.3.208.236:8333\n-119.8.47.225:8333\n-119.17.151.61:8333\n-120.25.24.30:8333\n-120.241.34.10:8333\n-121.98.205.100:8333\n-122.112.148.153:8339\n-122.116.42.140:8333\n-124.217.235.180:8333\n-125.236.215.133:8333\n-129.13.189.212:8333\n-130.185.77.105:8333\n-131.188.40.191:8333\n-131.193.220.15:8333\n-135.23.124.239:8333\n-136.33.185.32:8333\n-136.56.170.96:8333\n-137.226.34.46:8333\n-138.229.26.42:8333\n-139.9.249.234:8333\n-141.101.8.36:8333\n-143.176.224.104:8333\n-144.2.69.224:8333\n-144.34.161.65:18333\n-144.91.116.44:8333\n-144.137.29.181:8333\n-148.66.50.50:8335\n-148.72.150.231:8333\n-148.170.212.44:8333\n-149.167.99.190:8333\n-154.92.16.191:8333\n-154.221.27.21:8333\n-156.19.19.90:8333\n-156.241.5.190:8333\n-157.13.61.76:8333\n-157.13.61.80:8333\n-157.230.166.98:14391\n-158.75.203.2:8333\n-158.181.125.150:8333\n-158.181.226.33:8333\n-159.100.242.254:8333\n-159.100.248.234:8333\n-159.138.87.18:8333\n-160.16.0.30:8333\n-162.0.227.54:8333\n-162.0.227.56:8333\n-162.62.18.226:8333\n-162.209.1.233:8333\n-162.243.175.86:8333\n-162.244.80.208:8333\n-162.250.188.87:8333\n-162.250.189.53:8333\n-163.158.202.112:8333\n-163.158.243.230:8333\n-165.73.62.31:8333\n-166.62.82.103:32771\n-166.70.94.106:8333\n-167.86.90.239:8333\n-169.44.34.203:8333\n-172.93.101.73:8333\n-172.105.7.47:8333\n-173.23.103.30:8000\n-173.53.79.6:8333\n-173.70.12.86:8333\n-173.89.28.137:8333\n-173.176.184.54:8333\n-173.208.128.10:8333\n-173.254.204.69:8333\n-173.255.204.124:8333\n-174.94.155.224:8333\n-174.114.102.41:8333\n-174.114.124.12:8333\n-176.10.227.59:8333\n-176.31.224.214:8333\n-176.74.136.237:8333\n-176.99.2.207:8333\n-176.106.191.2:8333\n-176.160.228.9:8333\n-176.191.182.3:8333\n-176.212.185.153:8333\n-176.241.137.183:8333\n-177.38.215.73:8333\n-178.16.222.146:8333\n-178.132.2.246:8333\n-178.143.191.171:8333\n-178.148.172.209:8333\n-178.148.226.180:8333\n-178.150.96.46:8333\n-178.182.227.50:8333\n-178.236.137.63:8333\n-178.255.42.126:8333\n-180.150.52.37:8333\n-181.39.32.99:8333\n-181.48.77.26:8333\n-181.52.223.52:8333\n-181.238.51.152:8333\n-183.88.223.208:8333\n-183.110.220.210:30301\n-184.95.58.166:8336\n-184.164.147.82:41333\n-184.171.208.109:8333\n-185.25.48.39:8333\n-185.25.48.184:8333\n-185.64.116.15:8333\n-185.80.219.132:8333\n-185.85.3.140:8333\n-185.95.219.53:8333\n-185.108.244.41:8333\n-185.134.233.121:8333\n-185.145.128.21:8333\n-185.148.3.227:8333\n-185.153.196.240:8333\n-185.158.114.184:8333\n-185.165.168.196:8333\n-185.181.230.74:8333\n-185.185.26.141:8111\n-185.186.208.162:8333\n-185.189.132.178:57780\n-185.211.59.50:8333\n-185.233.148.146:8333\n-185.238.129.113:8333\n-185.249.199.106:8333\n-185.251.161.54:8333\n-187.189.153.136:8333\n-188.37.24.190:8333\n-188.42.40.234:18333\n-188.61.46.36:8333\n-188.68.45.143:8333\n-188.127.229.105:8333\n-188.134.6.84:8333\n-188.134.8.36:8333\n-188.214.129.65:20012\n-188.230.168.114:8333\n-189.34.14.93:8333\n-189.207.46.32:8333\n-190.211.204.68:8333\n-191.209.21.188:8333\n-192.3.11.20:8333\n-192.3.185.210:8333\n-192.65.170.15:8333\n-192.65.170.50:8333\n-192.146.137.18:8333\n-192.157.202.178:8333\n-192.227.80.83:8333\n-193.10.203.23:8334\n-193.25.6.206:8333\n-193.42.110.30:8333\n-193.58.196.212:8333\n-193.106.28.8:8333\n-193.189.190.123:8333\n-193.194.163.35:8333\n-193.194.163.53:8333\n-194.14.246.205:8333\n-194.36.91.253:8333\n-194.126.113.135:8333\n-194.135.135.69:8333\n-195.56.63.4:8333\n-195.56.63.5:8333\n-195.67.139.54:8333\n-195.135.194.8:8333\n-195.202.169.149:8333\n-195.206.105.42:8333\n-195.209.249.164:8333\n-198.1.231.6:8333\n-198.200.43.215:8333\n-199.182.184.204:8333\n-199.247.7.208:8333\n-199.247.249.188:8333\n-200.7.252.118:8333\n-200.20.186.254:8333\n-200.83.166.136:8333\n-202.55.87.45:8333\n-202.79.167.65:8333\n-202.108.211.135:8333\n-202.169.102.73:8333\n-203.130.48.117:8885\n-203.132.95.10:8333\n-203.151.166.123:8333\n-204.93.113.108:8333\n-204.111.241.195:8333\n-206.124.149.66:8333\n-207.115.102.98:8333\n-207.229.46.150:8333\n-208.76.252.198:8333\n-208.100.13.56:8333\n-208.100.178.175:8333\n-208.110.99.105:8333\n-209.6.210.179:8333\n-209.133.220.74:8333\n-209.141.57.57:8333\n-211.27.147.67:8333\n-212.34.225.118:8333\n-212.89.173.216:8333\n-212.99.226.36:9020\n-212.237.96.98:8333\n-213.89.131.53:8333\n-216.38.129.164:8333\n-216.134.165.55:8333\n-216.146.251.8:8333\n-216.189.190.95:8333\n-216.226.128.189:8333\n-216.236.164.82:8333\n-217.19.216.210:8333\n-217.26.32.10:8333\n-217.64.47.138:8333\n-217.64.133.220:8333\n-217.92.55.246:8333\n-218.31.113.245:8333\n-218.255.242.114:8333\n-220.133.39.61:8333\n-223.16.30.175:8333\n-[2001:19f0:6001:306f:ec4:7aff:fe8f:66ec]:8333\n-[2001:1bc0:cc::a001]:8333\n-[2001:1c02:2f18:d00:b62e:99ff:fe49:d492]:8333\n-[2001:4100:0:64::93]:8333\n-[2001:4100:0:64:dcaf:afff:fe00:6707]:8333\n-[2001:470:a:c13::2]:8333\n-[2001:4801:7819:74:b745:b9d5:ff10:a61a]:8333\n-[2001:4ba0:fffa:5d::93]:8333\n-[2001:610:1908:ff01:f816:3eff:fe33:2e32]:8333\n-[2001:638:a000:4140::ffff:191]:8333\n-[2001:648:2800:131:4b1f:f6fc:20f7:f99f]:8333\n-[2001:678:7dc:8::2]:8333\n-[2001:678:cc8::1:10:88]:20008\n-[2001:67c:1220:80c::93e5:dd2]:8333\n-[2001:67c:1220:80c:e5dc:ad0c:9289:c28f]:8333\n-[2001:67c:16dc:1201:5054:ff:fe17:4dac]:8333\n-[2001:67c:2354:2::22]:8333\n-[2001:67c:26b4:12:7ae3:b5ff:fe04:6f9c]:8333\n-[2001:67c:2f0::20:fa]:8333\n-[2001:718:801:311:5054:ff:fe19:c483]:8333\n-[2001:8d8:87c:7c00::99:3c1]:8333\n-[2001:8f1:1404:3700:8e49:715a:2e09:b634]:9444\n-[2001:b07:5d29:99a5:194b:3874:d65e:a90d]:8333\n-[2001:ba8:1f1:f0fe::2]:8333\n-[2001:bc8:1200:0:dac4:97ff:fe2a:3554]:20008\n-[2001:da8:100d:22:10fa:d85f:10f2:21fd]:8333\n-[2001:da8:8001:7a39:f035:7d:b99f:eb79]:8333\n-[2001:e42:103:100::30]:8333\n-[2400:2412:103:c900:825:8f20:eaff:65c2]:8333\n-[2400:4052:e20:4f00:69fe:bb33:7b1c:a1ca]:8333\n-[2401:1800:7800:105:be76:4eff:fe1c:b35]:8333\n-[2401:3900:2:1::2]:8333\n-[2401:b140::44:150]:8333\n-[2401:d002:4402:0:8f28:591a:6ea0:c683]:8333\n-[2403:6200:8821:3d68:195b:87e9:6819:d5c8]:8333\n-[2405:6580:2140:3a00:c28c:983:364b:5d70]:8333\n-[2405:9800:b911:a18a:58eb:cd3c:9d82:ea4a]:8333\n-[2405:aa00:2::40]:8333\n-[2409:10:ca20:1df0:224:e8ff:fe1f:60d9]:8333\n-[2409:8a1e:a9af:3660:1c5a:5b6b:8a2d:9848]:8333\n-[2409:8a1e:a9af:3660:404:39ba:88f2:e8df]:8333\n-[240b:10:9141:400:49b4:3a2e:1e5:84c]:8333\n-[240d:1a:759:6000:a7b1:451a:8874:e1ac]:8333\n-[240d:1a:759:6000:ddab:3141:4da0:8878]:8333\n-[2600:8805:2400:14e:12dd:b1ff:fef2:3013]:8333\n-[2601:602:8d80:b63:dc3e:24ff:fe92:5eb]:8333\n-[2602:ffb6:4:2798:f816:3eff:fe2f:5441]:8333\n-[2602:ffb6:4:739e:f816:3eff:fe00:c2b3]:8333\n-[2602:ffb8::208:72:57:200]:8333\n-[2604:1380:4111:9300::1]:8333\n-[2604:4300:a:2e:21b:21ff:fe11:392]:8333\n-[2604:4500::2e06]:8112\n-[2604:5500:706a:4000:fc79:b9bb:1d7:c325]:8333\n-[2604:5500:c134:4000::3fc]:32797\n-[2604:6800:5e11:162:5c8f:d2ff:fe26:146f]:8333\n-[2605:4d00::50]:8333\n-[2605:6400:20:13bf:df1d:181c:83bb:22e8]:8333\n-[2605:ae00:203::203]:8333\n-[2605:c000:2a0a:1::102]:8333\n-[2607:f2c0:f00e:300::54]:8333\n-[2607:f2f8:ad40:bc1::1]:8333\n-[2607:f470:8:1048:ae1f:6bff:fe70:7240]:8333\n-[2607:ff28:800f:97:225:90ff:fe75:1110]:8333\n-[2620:11c:5001:1118:d267:e5ff:fee9:e673]:8333\n-[2620:6e:a000:2001::6]:8333\n-[2804:14d:4c93:9809:9769:da80:1832:3480]:8333\n-[2a00:1328:e101:c00::163]:8333\n-[2a00:1398:4:2a03:215:5dff:fed6:1033]:8333\n-[2a00:13a0:3015:1:85:14:79:26]:8333\n-[2a00:1630:14::101]:8333\n-[2a00:1768:2001:27::ef6a]:8333\n-[2a00:1828:a004:2::666]:8333\n-[2a00:1838:36:17::38cb]:8333\n-[2a00:1838:36:7d::d3c6]:8333\n-[2a00:1c10:2:709:58f7:e0ff:fe24:a0ba]:22220\n-[2a00:1c10:2:709::217]:22220\n-[2a00:1f40:5001:100::31]:8333\n-[2a00:6020:1395:1400:baf7:2d43:60b3:198b]:8333\n-[2a00:7c80:0:10b::3faf]:8333\n-[2a00:8a60:e012:a00::21]:8333\n-[2a00:ab00:603:84::3]:8333\n-[2a00:bbe0:cc:0:62a4:4cff:fe23:7510]:8333\n-[2a00:ca8:a1f:3025:f949:e442:c940:13e8]:8333\n-[2a00:d2a0:a:3d00:1cdf:38bb:a7d6:c251]:8333\n-[2a00:d880:11::20e]:8333\n-[2a00:ec0:7207:9100:5f8f:25dd:2574:3982]:8333\n-[2a00:f820:433::36]:8333\n-[2a01:138:a017:b018::42]:8333\n-[2a01:430:17:1::ffff:1153]:8333\n-[2a01:490:16:301::2]:8333\n-[2a01:4b00:807c:1b00:cda1:c6a:2bad:2418]:8333\n-[2a01:4b00:80e7:5405::1]:8333\n-[2a01:4f8:192:4212::2]:8433\n-[2a01:7a0:2:137c::3]:8333\n-[2a01:7a7:2:1467:ec4:7aff:fee2:5690]:8333\n-[2a01:7c8:d002:10f:5054:ff:fe5c:dac7]:8333\n-[2a01:7c8:d002:318:5054:ff:febe:cbb1]:8333\n-[2a01:8740:1:ffc5::8c6a]:8333\n-[2a01:cb00:f98:ca00:5054:ff:fed4:763d]:8333\n-[2a01:cb14:cf6:bc00:21e5:f12e:32c8:145]:8333\n-[2a01:d0:0:1c::245]:8333\n-[2a01:d0:bef2::12]:8333\n-[2a01:e35:2e40:6830:211:32ff:fea6:de3d]:8333\n-[2a02:1205:c6aa:60c0:70d8:aaee:a82d:993c]:8333\n-[2a02:169:502::614]:8333\n-[2a02:180:1:1::5b8f:538c]:8333\n-[2a02:348:62:5ef7::1]:8333\n-[2a02:390:9000:0:218:7dff:fe10:be33]:8333\n-[2a02:7aa0:1619::adc:8de0]:8333\n-[2a02:7b40:b0df:8925::1]:8333\n-[2a02:7b40:b905:37db::1]:8333\n-[2a02:810d:8cbf:f3a8:96c6:91ff:fe17:ae1d]:8333\n-[2a02:8389:1c0:9680:201:2eff:fe82:b3cc]:8333\n-[2a02:a454:a516:1:517:928:7e0d:957c]:8333\n-[2a02:af8:fab0:804:151:236:34:161]:8333\n-[2a02:af8:fab0:808:85:234:145:132]:8333\n-[2a02:e00:fff0:1e2::a]:8333\n-[2a03:2260:3006:d:d307:5d1d:32ca:1fe8]:8333\n-[2a03:6000:870:0:46:23:87:218]:8333\n-[2a03:9da0:f6:1::2]:8333\n-[2a03:c980:db:47::]:8333\n-[2a03:e2c0:1ce::2]:8333\n-[2a04:3544:1000:1510:706c:abff:fe6c:501c]:8333\n-[2a04:52c0:101:383::2a87]:8333\n-[2a04:52c0:101:3fb::4c27]:8333\n-[2a04:ee41:83:50df:d908:f71d:2a86:b337]:8333\n-[2a05:6d40:b94e:d100:225:90ff:fe0d:cfc2]:8333\n-[2a05:e5c0:0:100:250:56ff:feb9:d6cb]:8333\n-[2a05:fc87:1:6::2]:8333\n-[2a05:fc87:4::8]:8333\n-[2a07:5741:0:115d::1]:8333\n-[2a07:a880:4601:1062:b4b4:bd2a:39d4:7acf]:51401\n-[2a07:abc4::1:946]:8333\n-[2a07:b400:1:34c::2:1002]:8333\n-[2a0a:8c41::b4]:8333\n-[2a0a:c801:1:7::183]:8333\n-[2a0b:ae40:3:4a0a::15]:8333\n-[2a0f:df00:0:254::46]:8333\n-[2c0f:f598:5:1:1001::1]:8333\n-[2c0f:fce8:0:400:b7c::1]:8333\n-\n-# manually added 2021-03 for minimal torv3 bootstrap support\n-2g5qfdkn2vvcbqhzcyvyiitg4ceukybxklraxjnu7atlhd22gdwywaid.onion:8333\n-2jmtxvyup3ijr7u6uvu7ijtnojx4g5wodvaedivbv74w4vzntxbrhvad.onion:8333\n-37m62wn7dz3uqpathpc4qfmgrbupachj52nt3jbtbjugpbu54kbud7yd.onion:8333\n-5g72ppm3krkorsfopcm2bi7wlv4ohhs4u4mlseymasn7g7zhdcyjpfid.onion:8333\n-7cgwjuwi5ehvcay4tazy7ya6463bndjk6xzrttw5t3xbpq4p22q6fyid.onion:8333\n-7pyrpvqdhmayxggpcyqn5l3m5vqkw3qubnmgwlpya2mdo6x7pih7r7id.onion:8333\n-b64xcbleqmwgq2u46bh4hegnlrzzvxntyzbmucn3zt7cssm7y4ubv3id.onion:8333\n-ejxefzf5fpst4mg2rib7grksvscl7p6fvjp6agzgfc2yglxnjtxc3aid.onion:8333\n-fjdyxicpm4o42xmedlwl3uvk5gmqdfs5j37wir52327vncjzvtpfv7yd.onion:8333\n-fpz6r5ppsakkwypjcglz6gcnwt7ytfhxskkfhzu62tnylcknh3eq6pad.onion:8333\n-fzhn4uoxfbfss7h7d6ffbn266ca432ekbbzvqtsdd55ylgxn4jucm5qd.onion:8333\n-gxo5anvfnffnftfy5frkgvplq3rpga2ie3tcblo2vl754fvnhgorn5yd.onion:8333\n-ifdu5qvbofrt4ekui2iyb3kbcyzcsglazhx2hn4wfskkrx2v24qxriid.onion:8333\n-itz3oxsihs62muvknc237xabl5f6w6rfznfhbpayrslv2j2ubels47yd.onion:8333\n-lrjh6fywjqttmlifuemq3puhvmshxzzyhoqx7uoufali57eypuenzzid.onion:8333\n-m7cbpjolo662uel7rpaid46as2otcj44vvwg3gccodnvaeuwbm3anbyd.onion:8333\n-opnyfyeiibe5qo5a3wbxzbb4xdiagc32bbce46owmertdknta5mi7uyd.onion:8333\n-owjsdxmzla6d7lrwkbmetywqym5cyswpihciesfl5qdv2vrmwsgy4uqd.onion:8333\n-q7kgmd7n7h27ds4fg7wocgniuqb3oe2zxp4nfe4skd5da6wyipibqzqd.onion:8333\n-rp7k2go3s5lyj3fnj6zn62ktarlrsft2ohlsxkyd7v3e3idqyptvread.onion:8333\n-sys54sv4xv3hn3sdiv3oadmzqpgyhd4u4xphv4xqk64ckvaxzm57a7yd.onion:8333\n-tddeij4qigtjr6jfnrmq6btnirmq5msgwcsdpcdjr7atftm7cxlqztid.onion:8333\n-vi5bnbxkleeqi6hfccjochnn65lcxlfqs4uwgmhudph554zibiusqnad.onion:8333\n-xqt25cobm5zqucac3634zfght72he6u3eagfyej5ellbhcdgos7t2had.onion:8333\n-\n-# manually added 2021-08 for minimal i2p bootstrap support\n-4hllr6w55mbtemb3ebvlzl4zj6qke4si7zcob5qdyg63mjgq624a.b32.i2p:0\n-6s33jtpvwzkiej3nff5qm72slgqljxhxn62hdt6m7nvynqsxqdda.b32.i2p:0\n-a5qsnv3maw77mlmmzlcglu6twje6ttctd3fhpbfwcbpmewx6fczq.b32.i2p:0\n-bitcornrd36coazsbzsz4pdebyzvaplmsalq4kpoljmn6cg6x5zq.b32.i2p:0\n-c4gfnttsuwqomiygupdqqqyy5y5emnk5c73hrfvatri67prd7vyq.b32.i2p:0\n-dhtq2p76tyhi442aidb3vd2bv7yxxjuddpb2jydnnrl2ons5bhha.b32.i2p:0\n-gehtac45oaghz54ypyopim64mql7oad2bqclla74l6tfeolzmodq.b32.i2p:0\n-h3r6bkn46qxftwja53pxiykntegfyfjqtnzbm6iv6r5mungmqgmq.b32.i2p:0\n-hnbbyjpxx54623l555sta7pocy3se4sdgmuebi5k6reesz5rjp6q.b32.i2p:0\n-i3hcdakiz2tyvggkwefvdjoi7444kgvd2mbdfizjvv43q7zukezq.b32.i2p:0\n-jz3s4eurm5vzjresf4mwo7oni4bk36daolwxh4iqtewakylgkxmq.b32.i2p:0\n-kokkmpquqlkptu5hkmzqlttsmtwxicldr4so7wqsufk6bwf32nma.b32.i2p:0\n-kvrde7mcgjhz3xzeltwy4gs2rxdfbnbs2wc67mh2pt43wjmjnmbq.b32.i2p:0\n-shh2ewyegnuwnmdse5kl5toybdvzkvk2yj4zcowz6iwhhh3ykdfa.b32.i2p:0\n-wwbw7nqr3ahkqv62cuqfwgtneekvvpnuc4i4f6yo7tpoqjswvcwa.b32.i2p:0\n-zsxwyo6qcn3chqzwxnseusqgsnuw3maqnztkiypyfxtya4snkoka.b32.i2p:0"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "contrib/seeds/nodes_test.txt",
        "status": "modified",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/nodes_test.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/seeds/nodes_test.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/seeds/nodes_test.txt?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,16 +0,0 @@\n-# List of fixed seed nodes for testnet\n-\n-# Onion nodes\n-35k2va6vyw4oo5ly2quvcszgdqr56kcnfgcqpnpcffut4jn3mhhwgbid.onion:18333\n-blo2esfvk2rr7sr4jspmu3vt2vpgr5rigflsj645fnku7v4qmljurtid.onion:18333\n-fuckcswupr5rmlvx2kqqrrosxvjyong4hatmuvxsvtcwe4dsh5rus7qd.onion:18333\n-gblylyacjlitd2ywdmo2qqylwtdky7kgeqfvlhiw4zdag4x62tx54hyd.onion:18333\n-gzwpduv33l7yze3bcdzj3inebiyjwddjnwvnjhh5wvnv4me76mjt2kad.onion:18333\n-h3rphzofxzq52tb63mg5f6kc4my3fkcrgh3m5qryeatts43iljbawiid.onion:18333\n-kf4qlhek34b3kgyxyodlmvgm4bxfrjsbjtgayyaiuyhr2eoyfgtm3bad.onion:18333\n-mc7k47ndjvvhcgs54wmjzxvate4rtuybbjoryikdssjhcxlx27psbyqd.onion:18333\n-mrhiniicugfo7mgrwv3wtolk3tptlcw2uq7ih6sq43fa4k4zbilut3yd.onion:18333\n-uiudyws3qizgmepfoh7wwjmsoxoxut4qrmotjjhrn247xnjopr7sfcid.onion:18333\n-zc2wvoqcezcrf64trji6jmhtss34a5ds5ntzdhqegzvex3ynrd7nxcad.onion:18333\n-zd5m3dgdn46naj36pxvvcalfw2paecle6sdxq64ptwxtxjomkywpklqd.onion:18333\n-"
      },
      {
        "sha": "37bac1f38d8f087b4b0e073141bdd29a6a33f8ac",
        "filename": "contrib/shell/git-utils.bash",
        "status": "removed",
        "additions": 0,
        "deletions": 14,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/shell/git-utils.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/shell/git-utils.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/shell/git-utils.bash?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,14 +0,0 @@\n-#!/usr/bin/env bash\n-\n-git_root() {\n-    git rev-parse --show-toplevel 2> /dev/null\n-}\n-\n-git_head_version() {\n-    local recent_tag\n-    if recent_tag=\"$(git describe --exact-match HEAD 2> /dev/null)\"; then\n-        echo \"${recent_tag#v}\"\n-    else\n-        git rev-parse --short=12 HEAD\n-    fi\n-}"
      },
      {
        "sha": "389b77b56266d3e753598d5aa90d9642b2e7c30f",
        "filename": "contrib/shell/realpath.bash",
        "status": "removed",
        "additions": 0,
        "deletions": 71,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/shell/realpath.bash",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/shell/realpath.bash",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/shell/realpath.bash?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,71 +0,0 @@\n-#!/usr/bin/env bash\n-\n-# Based on realpath.sh written by Michael Kropat\n-# Found at: https://github.com/mkropat/sh-realpath/blob/65512368b8155b176b67122aa395ac580d9acc5b/realpath.sh\n-\n-bash_realpath() {\n-    canonicalize_path \"$(resolve_symlinks \"$1\")\"\n-}\n-\n-resolve_symlinks() {\n-    _resolve_symlinks \"$1\"\n-}\n-\n-_resolve_symlinks() {\n-    _assert_no_path_cycles \"$@\" || return\n-\n-    local dir_context path\n-    if path=$(readlink -- \"$1\"); then\n-        dir_context=$(dirname -- \"$1\")\n-        _resolve_symlinks \"$(_prepend_dir_context_if_necessary \"$dir_context\" \"$path\")\" \"$@\"\n-    else\n-        printf '%s\\n' \"$1\"\n-    fi\n-}\n-\n-_prepend_dir_context_if_necessary() {\n-    if [ \"$1\" = . ]; then\n-        printf '%s\\n' \"$2\"\n-    else\n-        _prepend_path_if_relative \"$1\" \"$2\"\n-    fi\n-}\n-\n-_prepend_path_if_relative() {\n-    case \"$2\" in\n-        /* ) printf '%s\\n' \"$2\" ;;\n-         * ) printf '%s\\n' \"$1/$2\" ;;\n-    esac\n-}\n-\n-_assert_no_path_cycles() {\n-    local target path\n-\n-    target=$1\n-    shift\n-\n-    for path in \"$@\"; do\n-        if [ \"$path\" = \"$target\" ]; then\n-            return 1\n-        fi\n-    done\n-}\n-\n-canonicalize_path() {\n-    if [ -d \"$1\" ]; then\n-        _canonicalize_dir_path \"$1\"\n-    else\n-        _canonicalize_file_path \"$1\"\n-    fi\n-}\n-\n-_canonicalize_dir_path() {\n-    (cd \"$1\" 2>/dev/null && pwd -P)\n-}\n-\n-_canonicalize_file_path() {\n-    local dir file\n-    dir=$(dirname -- \"$1\")\n-    file=$(basename -- \"$1\")\n-    (cd \"$dir\" 2>/dev/null && printf '%s/%s\\n' \"$(pwd -P)\" \"$file\")\n-}"
      },
      {
        "sha": "706b296c54942848642ed7fe8cec18a548235b8a",
        "filename": "contrib/signet/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 83,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/README.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,83 +0,0 @@\n-Contents\n-========\n-This directory contains tools related to Signet, both for running a Signet yourself and for using one.\n-\n-getcoins.py\n-===========\n-\n-A script to call a faucet to get Signet coins.\n-\n-Syntax: `getcoins.py [-h|--help] [-c|--cmd=<bitcoin-cli path>] [-f|--faucet=<faucet URL>] [-a|--addr=<signet bech32 address>] [-p|--password=<faucet password>] [--] [<bitcoin-cli args>]`\n-\n-* `--cmd` lets you customize the bitcoin-cli path. By default it will look for it in the PATH\n-* `--faucet` lets you specify which faucet to use; the faucet is assumed to be compatible with https://github.com/kallewoof/bitcoin-faucet\n-* `--addr` lets you specify a Signet address; by default, the address must be a bech32 address. This and `--cmd` above complement each other (i.e. you do not need `bitcoin-cli` if you use `--addr`)\n-* `--password` lets you specify a faucet password; this is handy if you are in a classroom and set up your own faucet for your students; (above faucet does not limit by IP when password is enabled)\n-\n-If using the default network, invoking the script with no arguments should be sufficient under normal\n-circumstances, but if multiple people are behind the same IP address, the faucet will by default only\n-accept one claim per day. See `--password` above.\n-\n-miner\n-=====\n-\n-You will first need to pick a difficulty target. Since signet chains are primarily protected by a signature rather than proof of work, there is no need to spend as much energy as possible mining, however you may wish to choose to spend more time than the absolute minimum. The calibrate subcommand can be used to pick a target appropriate for your hardware, eg:\n-\n-    cd src/\n-    MINER=\"../contrib/signet/miner\"\n-    GRIND=\"./bitcoin-util grind\"\n-    $MINER calibrate --grind-cmd=\"$GRIND\"\n-    nbits=1e00f403 for 25s average mining time\n-\n-It defaults to estimating an nbits value resulting in 25s average time to find a block, but the --seconds parameter can be used to pick a different target, or the --nbits parameter can be used to estimate how long it will take for a given difficulty.\n-\n-To mine the first block in your custom chain, you can run:\n-\n-    CLI=\"./bitcoin-cli -conf=mysignet.conf\"\n-    ADDR=$($CLI -signet getnewaddress)\n-    NBITS=1e00f403\n-    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS\n-\n-This will mine a single block with a backdated timestamp designed to allow 100 blocks to be mined as quickly as possible, so that it is possible to do transactions.\n-\n-Adding the --ongoing parameter will then cause the signet miner to create blocks indefinitely. It will pick the time between blocks so that difficulty is adjusted to match the provided --nbits value.\n-\n-    $MINER --cli=\"$CLI\" generate --grind-cmd=\"$GRIND\" --address=\"$ADDR\" --nbits=$NBITS --ongoing\n-\n-Other options\n--------------\n-\n-The --debug and --quiet options are available to control how noisy the signet miner's output is. Note that the --debug, --quiet and --cli parameters must all appear before the subcommand (generate, calibrate, etc) if used.\n-\n-Instead of specifying --ongoing, you can specify --max-blocks=N to mine N blocks and stop.\n-\n-The --set-block-time option is available to manually move timestamps forward or backward (subject to the rules that blocktime must be greater than mediantime, and dates can't be more than two hours in the future). It can only be used when mining a single block (ie, not when using --ongoing or --max-blocks greater than 1).\n-\n-Instead of using a single address, a ranged descriptor may be provided via the --descriptor parameter, with the reward for the block at height H being sent to the H'th address generated from the descriptor.\n-\n-Instead of calculating a specific nbits value, --min-nbits can be specified instead, in which case the minimum signet difficulty will be targeted. Signet's minimum difficulty corresponds to --nbits=1e0377ae.\n-\n-By default, the signet miner mines blocks at fixed intervals with minimal variation. If you want blocks to appear more randomly, as they do in mainnet, specify the --poisson option.\n-\n-Using the --multiminer parameter allows mining to be distributed amongst multiple miners. For example, if you have 3 miners and want to share blocks between them, specify --multiminer=1/3 on one, --multiminer=2/3 on another, and --multiminer=3/3 on the last one. If you want one to do 10% of blocks and two others to do 45% each, --multiminer=1-10/100 on the first, and --multiminer=11-55 and --multiminer=56-100 on the others. Note that which miner mines which block is determined by the previous block hash, so occasional runs of one miner doing many blocks in a row is to be expected.\n-\n-When --multiminer is used, if a miner is down and does not mine a block within five minutes of when it is due, the other miners will automatically act as redundant backups ensuring the chain does not halt. The --backup-delay parameter can be used to change how long a given miner waits, allowing one to be the primary backup (after five minutes) and another to be the secondary backup (after six minutes, eg).\n-\n-The --standby-delay parameter can be used to make a backup miner that only mines if a block doesn't arrive on time. This can be combined with --multiminer if desired. Setting --standby-delay also prevents the first block from being mined immediately.\n-\n-Advanced usage\n---------------\n-\n-The process generate follows internally is to get a block template, convert that into a PSBT, sign the PSBT, move the signature from the signed PSBT into the block template's coinbase, grind proof of work for the block, and then submit the block to the network.\n-\n-These steps can instead be done explicitly:\n-\n-    $CLI -signet getblocktemplate '{\"rules\": [\"signet\",\"segwit\"]}' |\n-      $MINER --cli=\"$CLI\" genpsbt --address=\"$ADDR\" |\n-      $CLI -signet -stdin walletprocesspsbt |\n-      jq -r .psbt |\n-      $MINER --cli=\"$CLI\" solvepsbt --grind-cmd=\"$GRIND\" |\n-      $CLI -signet -stdin submitblock\n-\n-This is intended to allow you to replace part of the pipeline for further experimentation (eg, to sign the block with a hardware wallet).\n-"
      },
      {
        "sha": "3d0aa5d132f095e2046f3ed0a1e380c5833d2dd7",
        "filename": "contrib/signet/getcoins.py",
        "status": "removed",
        "additions": 0,
        "deletions": 156,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/getcoins.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/getcoins.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/getcoins.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,156 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-import argparse\n-import io\n-import requests\n-import subprocess\n-import sys\n-\n-DEFAULT_GLOBAL_FAUCET = 'https://signetfaucet.com/claim'\n-DEFAULT_GLOBAL_CAPTCHA = 'https://signetfaucet.com/captcha'\n-GLOBAL_FIRST_BLOCK_HASH = '00000086d6b2636cb2a392d45edc4ec544a10024d30141c9adf4bfd9de533b53'\n-\n-# braille unicode block\n-BASE = 0x2800\n-BIT_PER_PIXEL = [\n-    [0x01, 0x08],\n-    [0x02, 0x10],\n-    [0x04, 0x20],\n-    [0x40, 0x80],\n-]\n-BW = 2\n-BH = 4\n-\n-# imagemagick or compatible fork (used for converting SVG)\n-CONVERT = 'convert'\n-\n-class PPMImage:\n-    '''\n-    Load a PPM image (Pillow-ish API).\n-    '''\n-    def __init__(self, f):\n-        if f.readline() != b'P6\\n':\n-            raise ValueError('Invalid ppm format: header')\n-        line = f.readline()\n-        (width, height) = (int(x) for x in line.rstrip().split(b' '))\n-        if f.readline() != b'255\\n':\n-            raise ValueError('Invalid ppm format: color depth')\n-        data = f.read(width * height * 3)\n-        stride = width * 3\n-        self.size = (width, height)\n-        self._grid = [[tuple(data[stride * y + 3 * x:stride * y + 3 * (x + 1)]) for x in range(width)] for y in range(height)]\n-\n-    def getpixel(self, pos):\n-        return self._grid[pos[1]][pos[0]]\n-\n-def print_image(img, threshold=128):\n-    '''Print black-and-white image to terminal in braille unicode characters.'''\n-    x_blocks = (img.size[0] + BW - 1) // BW\n-    y_blocks = (img.size[1] + BH - 1) // BH\n-\n-    for yb in range(y_blocks):\n-        line = []\n-        for xb in range(x_blocks):\n-            ch = BASE\n-            for y in range(BH):\n-                for x in range(BW):\n-                    try:\n-                        val = img.getpixel((xb * BW + x, yb * BH + y))\n-                    except IndexError:\n-                        pass\n-                    else:\n-                        if val[0] < threshold:\n-                            ch |= BIT_PER_PIXEL[y][x]\n-            line.append(chr(ch))\n-        print(''.join(line))\n-\n-parser = argparse.ArgumentParser(description='Script to get coins from a faucet.', epilog='You may need to start with double-dash (--) when providing bitcoin-cli arguments.')\n-parser.add_argument('-c', '--cmd', dest='cmd', default='bitcoin-cli', help='bitcoin-cli command to use')\n-parser.add_argument('-f', '--faucet', dest='faucet', default=DEFAULT_GLOBAL_FAUCET, help='URL of the faucet')\n-parser.add_argument('-g', '--captcha', dest='captcha', default=DEFAULT_GLOBAL_CAPTCHA, help='URL of the faucet captcha, or empty if no captcha is needed')\n-parser.add_argument('-a', '--addr', dest='addr', default='', help='Bitcoin address to which the faucet should send')\n-parser.add_argument('-p', '--password', dest='password', default='', help='Faucet password, if any')\n-parser.add_argument('-n', '--amount', dest='amount', default='0.001', help='Amount to request (0.001-0.1, default is 0.001)')\n-parser.add_argument('-i', '--imagemagick', dest='imagemagick', default=CONVERT, help='Path to imagemagick convert utility')\n-parser.add_argument('bitcoin_cli_args', nargs='*', help='Arguments to pass on to bitcoin-cli (default: -signet)')\n-\n-args = parser.parse_args()\n-\n-if args.bitcoin_cli_args == []:\n-    args.bitcoin_cli_args = ['-signet']\n-\n-\n-def bitcoin_cli(rpc_command_and_params):\n-    argv = [args.cmd] + args.bitcoin_cli_args + rpc_command_and_params\n-    try:\n-        return subprocess.check_output(argv).strip().decode()\n-    except FileNotFoundError:\n-        print('The binary', args.cmd, 'could not be found.')\n-        exit(1)\n-    except subprocess.CalledProcessError:\n-        cmdline = ' '.join(argv)\n-        print(f'-----\\nError while calling \"{cmdline}\" (see output above).')\n-        exit(1)\n-\n-\n-if args.faucet.lower() == DEFAULT_GLOBAL_FAUCET:\n-    # Get the hash of the block at height 1 of the currently active signet chain\n-    curr_signet_hash = bitcoin_cli(['getblockhash', '1'])\n-    if curr_signet_hash != GLOBAL_FIRST_BLOCK_HASH:\n-        print('The global faucet cannot be used with a custom Signet network. Please use the global signet or setup your custom faucet to use this functionality.\\n')\n-        exit(1)\n-else:\n-    # For custom faucets, don't request captcha by default.\n-    if args.captcha == DEFAULT_GLOBAL_CAPTCHA:\n-        args.captcha = ''\n-\n-if args.addr == '':\n-    # get address for receiving coins\n-    args.addr = bitcoin_cli(['getnewaddress', 'faucet', 'bech32'])\n-\n-data = {'address': args.addr, 'password': args.password, 'amount': args.amount}\n-\n-# Store cookies\n-# for debugging: print(session.cookies.get_dict())\n-session = requests.Session()\n-\n-if args.captcha != '': # Retrieve a captcha\n-    try:\n-        res = session.get(args.captcha)\n-    except:\n-        print('Unexpected error when contacting faucet:', sys.exc_info()[0])\n-        exit(1)\n-\n-    # Convert SVG image to PPM, and load it\n-    try:\n-        rv = subprocess.run([args.imagemagick, '-', '-depth', '8', 'ppm:-'], input=res.content, check=True, capture_output=True)\n-    except FileNotFoundError:\n-        print('The binary', args.imagemagick, 'could not be found. Please make sure ImageMagick (or a compatible fork) is installed and that the correct path is specified.')\n-        exit(1)\n-    img = PPMImage(io.BytesIO(rv.stdout))\n-\n-    # Terminal interaction\n-    print_image(img)\n-    print('Enter captcha: ', end='')\n-    data['captcha'] = input()\n-\n-try:\n-    res = session.post(args.faucet, data=data)\n-except:\n-    print('Unexpected error when contacting faucet:', sys.exc_info()[0])\n-    exit(1)\n-\n-# Display the output as per the returned status code\n-if res:\n-    # When the return code is in between 200 and 400 i.e. successful\n-    print(res.text)\n-elif res.status_code == 404:\n-    print('The specified faucet URL does not exist. Please check for any server issues/typo.')\n-elif res.status_code == 429:\n-    print('The script does not allow for repeated transactions as the global faucet is rate-limitied to 1 request/IP/day. You can access the faucet website to get more coins manually')\n-else:\n-    print(f'Returned Error Code {res.status_code}\\n{res.text}\\n')\n-    print('Please check the provided arguments for their validity and/or any possible typo.')"
      },
      {
        "sha": "012bd6cc3149075d56c2de338e05f40527a42fea",
        "filename": "contrib/signet/miner",
        "status": "removed",
        "additions": 0,
        "deletions": 630,
        "changes": 630,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/miner",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/signet/miner",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/signet/miner?ref=7efc628539573af4b4a76d93b853cc46e9e52eae",
        "patch": "@@ -1,630 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2020 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-import argparse\n-import base64\n-import json\n-import logging\n-import math\n-import os.path\n-import re\n-import struct\n-import sys\n-import time\n-import subprocess\n-\n-from io import BytesIO\n-\n-PATH_BASE_CONTRIB_SIGNET = os.path.abspath(os.path.dirname(os.path.realpath(__file__)))\n-PATH_BASE_TEST_FUNCTIONAL = os.path.abspath(os.path.join(PATH_BASE_CONTRIB_SIGNET, \"..\", \"..\", \"test\", \"functional\"))\n-sys.path.insert(0, PATH_BASE_TEST_FUNCTIONAL)\n-\n-from test_framework.blocktools import WITNESS_COMMITMENT_HEADER, script_BIP34_coinbase_height # noqa: E402\n-from test_framework.messages import CBlock, CBlockHeader, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, from_hex, deser_string, hash256, ser_compact_size, ser_string, ser_uint256, tx_from_hex, uint256_from_str # noqa: E402\n-from test_framework.script import CScriptOp # noqa: E402\n-\n-logging.basicConfig(\n-    format='%(asctime)s %(levelname)s %(message)s',\n-    level=logging.INFO,\n-    datefmt='%Y-%m-%d %H:%M:%S')\n-\n-SIGNET_HEADER = b\"\\xec\\xc7\\xda\\xa2\"\n-PSBT_SIGNET_BLOCK = b\"\\xfc\\x06signetb\"    # proprietary PSBT global field holding the block being signed\n-RE_MULTIMINER = re.compile(\"^(\\d+)(-(\\d+))?/(\\d+)$\")\n-\n-# #### some helpers that could go into test_framework\n-\n-# like from_hex, but without the hex part\n-def FromBinary(cls, stream):\n-    \"\"\"deserialize a binary stream (or bytes object) into an object\"\"\"\n-    # handle bytes object by turning it into a stream\n-    was_bytes = isinstance(stream, bytes)\n-    if was_bytes:\n-        stream = BytesIO(stream)\n-    obj = cls()\n-    obj.deserialize(stream)\n-    if was_bytes:\n-        assert len(stream.read()) == 0\n-    return obj\n-\n-class PSBTMap:\n-    \"\"\"Class for serializing and deserializing PSBT maps\"\"\"\n-\n-    def __init__(self, map=None):\n-        self.map = map if map is not None else {}\n-\n-    def deserialize(self, f):\n-        m = {}\n-        while True:\n-            k = deser_string(f)\n-            if len(k) == 0:\n-                break\n-            v = deser_string(f)\n-            if len(k) == 1:\n-                k = k[0]\n-            assert k not in m\n-            m[k] = v\n-        self.map = m\n-\n-    def serialize(self):\n-        m = b\"\"\n-        for k,v in self.map.items():\n-            if isinstance(k, int) and 0 <= k and k <= 255:\n-                k = bytes([k])\n-            m += ser_compact_size(len(k)) + k\n-            m += ser_compact_size(len(v)) + v\n-        m += b\"\\x00\"\n-        return m\n-\n-class PSBT:\n-    \"\"\"Class for serializing and deserializing PSBTs\"\"\"\n-\n-    def __init__(self):\n-        self.g = PSBTMap()\n-        self.i = []\n-        self.o = []\n-        self.tx = None\n-\n-    def deserialize(self, f):\n-        assert f.read(5) == b\"psbt\\xff\"\n-        self.g = FromBinary(PSBTMap, f)\n-        assert 0 in self.g.map\n-        self.tx = FromBinary(CTransaction, self.g.map[0])\n-        self.i = [FromBinary(PSBTMap, f) for _ in self.tx.vin]\n-        self.o = [FromBinary(PSBTMap, f) for _ in self.tx.vout]\n-        return self\n-\n-    def serialize(self):\n-        assert isinstance(self.g, PSBTMap)\n-        assert isinstance(self.i, list) and all(isinstance(x, PSBTMap) for x in self.i)\n-        assert isinstance(self.o, list) and all(isinstance(x, PSBTMap) for x in self.o)\n-        assert 0 in self.g.map\n-        tx = FromBinary(CTransaction, self.g.map[0])\n-        assert len(tx.vin) == len(self.i)\n-        assert len(tx.vout) == len(self.o)\n-\n-        psbt = [x.serialize() for x in [self.g] + self.i + self.o]\n-        return b\"psbt\\xff\" + b\"\".join(psbt)\n-\n-    def to_base64(self):\n-        return base64.b64encode(self.serialize()).decode(\"utf8\")\n-\n-    @classmethod\n-    def from_base64(cls, b64psbt):\n-        return FromBinary(cls, base64.b64decode(b64psbt))\n-\n-# #####\n-\n-def create_coinbase(height, value, spk):\n-    cb = CTransaction()\n-    cb.vin = [CTxIn(COutPoint(0, 0xffffffff), script_BIP34_coinbase_height(height), 0xffffffff)]\n-    cb.vout = [CTxOut(value, spk)]\n-    return cb\n-\n-def get_witness_script(witness_root, witness_nonce):\n-    commitment = uint256_from_str(hash256(ser_uint256(witness_root) + ser_uint256(witness_nonce)))\n-    return b\"\\x6a\" + CScriptOp.encode_op_pushdata(WITNESS_COMMITMENT_HEADER + ser_uint256(commitment))\n-\n-def signet_txs(block, challenge):\n-    # assumes signet solution has not been added yet so does not need\n-    # to be removed\n-\n-    txs = block.vtx[:]\n-    txs[0] = CTransaction(txs[0])\n-    txs[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER)\n-    hashes = []\n-    for tx in txs:\n-        tx.rehash()\n-        hashes.append(ser_uint256(tx.sha256))\n-    mroot = block.get_merkle_root(hashes)\n-\n-    sd = b\"\"\n-    sd += struct.pack(\"<i\", block.nVersion)\n-    sd += ser_uint256(block.hashPrevBlock)\n-    sd += ser_uint256(mroot)\n-    sd += struct.pack(\"<I\", block.nTime)\n-\n-    to_spend = CTransaction()\n-    to_spend.nVersion = 0\n-    to_spend.nLockTime = 0\n-    to_spend.vin = [CTxIn(COutPoint(0, 0xFFFFFFFF), b\"\\x00\" + CScriptOp.encode_op_pushdata(sd), 0)]\n-    to_spend.vout = [CTxOut(0, challenge)]\n-    to_spend.rehash()\n-\n-    spend = CTransaction()\n-    spend.nVersion = 0\n-    spend.nLockTime = 0\n-    spend.vin = [CTxIn(COutPoint(to_spend.sha256, 0), b\"\", 0)]\n-    spend.vout = [CTxOut(0, b\"\\x6a\")]\n-\n-    return spend, to_spend\n-\n-def do_createpsbt(block, signme, spendme):\n-    psbt = PSBT()\n-    psbt.g = PSBTMap( {0: signme.serialize(),\n-                       PSBT_SIGNET_BLOCK: block.serialize()\n-                     } )\n-    psbt.i = [ PSBTMap( {0: spendme.serialize(),\n-                         3: bytes([1,0,0,0])})\n-             ]\n-    psbt.o = [ PSBTMap() ]\n-    return psbt.to_base64()\n-\n-def do_decode_psbt(b64psbt):\n-    psbt = PSBT.from_base64(b64psbt)\n-\n-    assert len(psbt.tx.vin) == 1\n-    assert len(psbt.tx.vout) == 1\n-    assert PSBT_SIGNET_BLOCK in psbt.g.map\n-\n-    scriptSig = psbt.i[0].map.get(7, b\"\")\n-    scriptWitness = psbt.i[0].map.get(8, b\"\\x00\")\n-\n-    return FromBinary(CBlock, psbt.g.map[PSBT_SIGNET_BLOCK]), ser_string(scriptSig) + scriptWitness\n-\n-def finish_block(block, signet_solution, grind_cmd):\n-    block.vtx[0].vout[-1].scriptPubKey += CScriptOp.encode_op_pushdata(SIGNET_HEADER + signet_solution)\n-    block.vtx[0].rehash()\n-    block.hashMerkleRoot = block.calc_merkle_root()\n-    if grind_cmd is None:\n-        block.solve()\n-    else:\n-        headhex = CBlockHeader.serialize(block).hex()\n-        cmd = grind_cmd.split(\" \") + [headhex]\n-        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-        newhead = from_hex(CBlockHeader(), newheadhex.decode('utf8'))\n-        block.nNonce = newhead.nNonce\n-        block.rehash()\n-    return block\n-\n-def generate_psbt(tmpl, reward_spk, *, blocktime=None):\n-    signet_spk = tmpl[\"signet_challenge\"]\n-    signet_spk_bin = bytes.fromhex(signet_spk)\n-\n-    cbtx = create_coinbase(height=tmpl[\"height\"], value=tmpl[\"coinbasevalue\"], spk=reward_spk)\n-    cbtx.vin[0].nSequence = 2**32-2\n-    cbtx.rehash()\n-\n-    block = CBlock()\n-    block.nVersion = tmpl[\"version\"]\n-    block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)\n-    block.nTime = tmpl[\"curtime\"] if blocktime is None else blocktime\n-    if block.nTime < tmpl[\"mintime\"]:\n-        block.nTime = tmpl[\"mintime\"]\n-    block.nBits = int(tmpl[\"bits\"], 16)\n-    block.nNonce = 0\n-    block.vtx = [cbtx] + [tx_from_hex(t[\"data\"]) for t in tmpl[\"transactions\"]]\n-\n-    witnonce = 0\n-    witroot = block.calc_witness_merkle_root()\n-    cbwit = CTxInWitness()\n-    cbwit.scriptWitness.stack = [ser_uint256(witnonce)]\n-    block.vtx[0].wit.vtxinwit = [cbwit]\n-    block.vtx[0].vout.append(CTxOut(0, get_witness_script(witroot, witnonce)))\n-\n-    signme, spendme = signet_txs(block, signet_spk_bin)\n-\n-    return do_createpsbt(block, signme, spendme)\n-\n-def get_reward_address(args, height):\n-    if args.address is not None:\n-        return args.address\n-\n-    if '*' not in args.descriptor:\n-        addr = json.loads(args.bcli(\"deriveaddresses\", args.descriptor))[0]\n-        args.address = addr\n-        return addr\n-\n-    remove = [k for k in args.derived_addresses.keys() if k+20 <= height]\n-    for k in remove:\n-        del args.derived_addresses[k]\n-\n-    addr = args.derived_addresses.get(height, None)\n-    if addr is None:\n-        addrs = json.loads(args.bcli(\"deriveaddresses\", args.descriptor, \"[%d,%d]\" % (height, height+20)))\n-        addr = addrs[0]\n-        for k, a in enumerate(addrs):\n-            args.derived_addresses[height+k] = a\n-\n-    return addr\n-\n-def get_reward_addr_spk(args, height):\n-    assert args.address is not None or args.descriptor is not None\n-\n-    if hasattr(args, \"reward_spk\"):\n-        return args.address, args.reward_spk\n-\n-    reward_addr = get_reward_address(args, height)\n-    reward_spk = bytes.fromhex(json.loads(args.bcli(\"getaddressinfo\", reward_addr))[\"scriptPubKey\"])\n-    if args.address is not None:\n-        # will always be the same, so cache\n-        args.reward_spk = reward_spk\n-\n-    return reward_addr, reward_spk\n-\n-def do_genpsbt(args):\n-    tmpl = json.load(sys.stdin)\n-    _, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n-    psbt = generate_psbt(tmpl, reward_spk)\n-    print(psbt)\n-\n-def do_solvepsbt(args):\n-    block, signet_solution = do_decode_psbt(sys.stdin.read())\n-    block = finish_block(block, signet_solution, args.grind_cmd)\n-    print(block.serialize().hex())\n-\n-def nbits_to_target(nbits):\n-    shift = (nbits >> 24) & 0xff\n-    return (nbits & 0x00ffffff) * 2**(8*(shift - 3))\n-\n-def target_to_nbits(target):\n-    tstr = \"{0:x}\".format(target)\n-    if len(tstr) < 6:\n-        tstr = (\"000000\"+tstr)[-6:]\n-    if len(tstr) % 2 != 0:\n-        tstr = \"0\" + tstr\n-    if int(tstr[0],16) >= 0x8:\n-        # avoid \"negative\"\n-        tstr = \"00\" + tstr\n-    fix = int(tstr[:6], 16)\n-    sz = len(tstr)//2\n-    if tstr[6:] != \"0\"*(sz*2-6):\n-        fix += 1\n-\n-    return int(\"%02x%06x\" % (sz,fix), 16)\n-\n-def seconds_to_hms(s):\n-    if s == 0:\n-        return \"0s\"\n-    neg = (s < 0)\n-    if neg:\n-        s = -s\n-    out = \"\"\n-    if s % 60 > 0:\n-        out = \"%ds\" % (s % 60)\n-    s //= 60\n-    if s % 60 > 0:\n-        out = \"%dm%s\" % (s % 60, out)\n-    s //= 60\n-    if s > 0:\n-        out = \"%dh%s\" % (s, out)\n-    if neg:\n-        out = \"-\" + out\n-    return out\n-\n-def next_block_delta(last_nbits, last_hash, ultimate_target, do_poisson):\n-    # strategy:\n-    #  1) work out how far off our desired target we are\n-    #  2) cap it to a factor of 4 since that's the best we can do in a single retarget period\n-    #  3) use that to work out the desired average interval in this retarget period\n-    #  4) if doing poisson, use the last hash to pick a uniformly random number in [0,1), and work out a random multiplier to vary the average by\n-    #  5) cap the resulting interval between 1 second and 1 hour to avoid extremes\n-\n-    INTERVAL = 600.0*2016/2015 # 10 minutes, adjusted for the off-by-one bug\n-\n-    current_target = nbits_to_target(last_nbits)\n-    retarget_factor = ultimate_target / current_target\n-    retarget_factor = max(0.25, min(retarget_factor, 4.0))\n-\n-    avg_interval = INTERVAL * retarget_factor\n-\n-    if do_poisson:\n-        det_rand = int(last_hash[-8:], 16) * 2**-32\n-        this_interval_variance = -math.log1p(-det_rand)\n-    else:\n-        this_interval_variance = 1\n-\n-    this_interval = avg_interval * this_interval_variance\n-    this_interval = max(1, min(this_interval, 3600))\n-\n-    return this_interval\n-\n-def next_block_is_mine(last_hash, my_blocks):\n-    det_rand = int(last_hash[-16:-8], 16)\n-    return my_blocks[0] <= (det_rand % my_blocks[2]) < my_blocks[1]\n-\n-def do_generate(args):\n-    if args.max_blocks is not None:\n-        if args.ongoing:\n-            logging.error(\"Cannot specify both --ongoing and --max-blocks\")\n-            return 1\n-        if args.max_blocks < 1:\n-            logging.error(\"N must be a positive integer\")\n-            return 1\n-        max_blocks = args.max_blocks\n-    elif args.ongoing:\n-        max_blocks = None\n-    else:\n-        max_blocks = 1\n-\n-    if args.set_block_time is not None and max_blocks != 1:\n-        logging.error(\"Cannot specify --ongoing or --max-blocks > 1 when using --set-block-time\")\n-        return 1\n-    if args.set_block_time is not None and args.set_block_time < 0:\n-        args.set_block_time = time.time()\n-        logging.info(\"Treating negative block time as current time (%d)\" % (args.set_block_time))\n-\n-    if args.min_nbits:\n-        if args.nbits is not None:\n-            logging.error(\"Cannot specify --nbits and --min-nbits\")\n-            return 1\n-        args.nbits = \"1e0377ae\"\n-        logging.info(\"Using nbits=%s\" % (args.nbits))\n-\n-    if args.set_block_time is None:\n-        if args.nbits is None or len(args.nbits) != 8:\n-            logging.error(\"Must specify --nbits (use calibrate command to determine value)\")\n-            return 1\n-\n-    if args.multiminer is None:\n-       my_blocks = (0,1,1)\n-    else:\n-        if not args.ongoing:\n-            logging.error(\"Cannot specify --multiminer without --ongoing\")\n-            return 1\n-        m = RE_MULTIMINER.match(args.multiminer)\n-        if m is None:\n-            logging.error(\"--multiminer argument must be k/m or j-k/m\")\n-            return 1\n-        start,_,stop,total = m.groups()\n-        if stop is None:\n-            stop = start\n-        start, stop, total = map(int, (start, stop, total))\n-        if stop < start or start <= 0 or total < stop or total == 0:\n-            logging.error(\"Inconsistent values for --multiminer\")\n-            return 1\n-        my_blocks = (start-1, stop, total)\n-\n-    ultimate_target = nbits_to_target(int(args.nbits,16))\n-\n-    mined_blocks = 0\n-    bestheader = {\"hash\": None}\n-    lastheader = None\n-    while max_blocks is None or mined_blocks < max_blocks:\n-\n-        # current status?\n-        bci = json.loads(args.bcli(\"getblockchaininfo\"))\n-\n-        if bestheader[\"hash\"] != bci[\"bestblockhash\"]:\n-            bestheader = json.loads(args.bcli(\"getblockheader\", bci[\"bestblockhash\"]))\n-\n-        if lastheader is None:\n-            lastheader = bestheader[\"hash\"]\n-        elif bestheader[\"hash\"] != lastheader:\n-            next_delta = next_block_delta(int(bestheader[\"bits\"], 16), bestheader[\"hash\"], ultimate_target, args.poisson)\n-            next_delta += bestheader[\"time\"] - time.time()\n-            next_is_mine = next_block_is_mine(bestheader[\"hash\"], my_blocks)\n-            logging.info(\"Received new block at height %d; next in %s (%s)\", bestheader[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n-            lastheader = bestheader[\"hash\"]\n-\n-        # when is the next block due to be mined?\n-        now = time.time()\n-        if args.set_block_time is not None:\n-            logging.debug(\"Setting start time to %d\", args.set_block_time)\n-            mine_time = args.set_block_time\n-            action_time = now\n-            is_mine = True\n-        elif bestheader[\"height\"] == 0:\n-            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n-            time_delta *= 100 # 100 blocks\n-            logging.info(\"Backdating time for first block to %d minutes ago\" % (time_delta/60))\n-            mine_time = now - time_delta\n-            action_time = now\n-            is_mine = True\n-        else:\n-            time_delta = next_block_delta(int(bestheader[\"bits\"], 16), bci[\"bestblockhash\"], ultimate_target, args.poisson)\n-            mine_time = bestheader[\"time\"] + time_delta\n-\n-            is_mine = next_block_is_mine(bci[\"bestblockhash\"], my_blocks)\n-\n-            action_time = mine_time\n-            if not is_mine:\n-                action_time += args.backup_delay\n-\n-            if args.standby_delay > 0:\n-                action_time += args.standby_delay\n-            elif mined_blocks == 0:\n-                # for non-standby, always mine immediately on startup,\n-                # even if the next block shouldn't be ours\n-                action_time = now\n-\n-        # don't want fractional times so round down\n-        mine_time = int(mine_time)\n-        action_time = int(action_time)\n-\n-        # can't mine a block 2h in the future; 1h55m for some safety\n-        action_time = max(action_time, mine_time - 6900)\n-\n-        # ready to go? otherwise sleep and check for new block\n-        if now < action_time:\n-            sleep_for = min(action_time - now, 60)\n-            if mine_time < now:\n-                # someone else might have mined the block,\n-                # so check frequently, so we don't end up late\n-                # mining the next block if it's ours\n-                sleep_for = min(20, sleep_for)\n-            minestr = \"mine\" if is_mine else \"backup\"\n-            logging.debug(\"Sleeping for %s, next block due in %s (%s)\" % (seconds_to_hms(sleep_for), seconds_to_hms(mine_time - now), minestr))\n-            time.sleep(sleep_for)\n-            continue\n-\n-        # gbt\n-        tmpl = json.loads(args.bcli(\"getblocktemplate\", '{\"rules\":[\"signet\",\"segwit\"]}'))\n-        if tmpl[\"previousblockhash\"] != bci[\"bestblockhash\"]:\n-            logging.warning(\"GBT based off unexpected block (%s not %s), retrying\", tmpl[\"previousblockhash\"], bci[\"bestblockhash\"])\n-            time.sleep(1)\n-            continue\n-\n-        logging.debug(\"GBT template: %s\", tmpl)\n-\n-        if tmpl[\"mintime\"] > mine_time:\n-            logging.info(\"Updating block time from %d to %d\", mine_time, tmpl[\"mintime\"])\n-            mine_time = tmpl[\"mintime\"]\n-            if mine_time > now:\n-                logging.error(\"GBT mintime is in the future: %d is %d seconds later than %d\", mine_time, (mine_time-now), now)\n-                return 1\n-\n-        # address for reward\n-        reward_addr, reward_spk = get_reward_addr_spk(args, tmpl[\"height\"])\n-\n-        # mine block\n-        logging.debug(\"Mining block delta=%s start=%s mine=%s\", seconds_to_hms(mine_time-bestheader[\"time\"]), mine_time, is_mine)\n-        mined_blocks += 1\n-        psbt = generate_psbt(tmpl, reward_spk, blocktime=mine_time)\n-        psbt_signed = json.loads(args.bcli(\"-stdin\", \"walletprocesspsbt\", input=psbt.encode('utf8')))\n-        if not psbt_signed.get(\"complete\",False):\n-            logging.debug(\"Generated PSBT: %s\" % (psbt,))\n-            sys.stderr.write(\"PSBT signing failed\")\n-            return 1\n-        block, signet_solution = do_decode_psbt(psbt_signed[\"psbt\"])\n-        block = finish_block(block, signet_solution, args.grind_cmd)\n-\n-        # submit block\n-        r = args.bcli(\"-stdin\", \"submitblock\", input=block.serialize().hex().encode('utf8'))\n-\n-        # report\n-        bstr = \"block\" if is_mine else \"backup block\"\n-\n-        next_delta = next_block_delta(block.nBits, block.hash, ultimate_target, args.poisson)\n-        next_delta += block.nTime - time.time()\n-        next_is_mine = next_block_is_mine(block.hash, my_blocks)\n-\n-        logging.debug(\"Block hash %s payout to %s\", block.hash, reward_addr)\n-        logging.info(\"Mined %s at height %d; next in %s (%s)\", bstr, tmpl[\"height\"], seconds_to_hms(next_delta), (\"mine\" if next_is_mine else \"backup\"))\n-        if r != \"\":\n-            logging.warning(\"submitblock returned %s for height %d hash %s\", r, tmpl[\"height\"], block.hash)\n-        lastheader = block.hash\n-\n-def do_calibrate(args):\n-    if args.nbits is not None and args.seconds is not None:\n-        sys.stderr.write(\"Can only specify one of --nbits or --seconds\\n\")\n-        return 1\n-    if args.nbits is not None and len(args.nbits) != 8:\n-        sys.stderr.write(\"Must specify 8 hex digits for --nbits\\n\")\n-        return 1\n-\n-    TRIALS = 600 # gets variance down pretty low\n-    TRIAL_BITS = 0x1e3ea75f # takes about 5m to do 600 trials\n-\n-    header = CBlockHeader()\n-    header.nBits = TRIAL_BITS\n-    targ = nbits_to_target(header.nBits)\n-\n-    start = time.time()\n-    count = 0\n-    for i in range(TRIALS):\n-        header.nTime = i\n-        header.nNonce = 0\n-        headhex = header.serialize().hex()\n-        cmd = args.grind_cmd.split(\" \") + [headhex]\n-        newheadhex = subprocess.run(cmd, stdout=subprocess.PIPE, input=b\"\", check=True).stdout.strip()\n-\n-    avg = (time.time() - start) * 1.0 / TRIALS\n-\n-    if args.nbits is not None:\n-        want_targ = nbits_to_target(int(args.nbits,16))\n-        want_time = avg*targ/want_targ\n-    else:\n-        want_time = args.seconds if args.seconds is not None else 25\n-        want_targ = int(targ*(avg/want_time))\n-\n-    print(\"nbits=%08x for %ds average mining time\" % (target_to_nbits(want_targ), want_time))\n-    return 0\n-\n-def bitcoin_cli(basecmd, args, **kwargs):\n-    cmd = basecmd + [\"-signet\"] + args\n-    logging.debug(\"Calling bitcoin-cli: %r\", cmd)\n-    out = subprocess.run(cmd, stdout=subprocess.PIPE, **kwargs, check=True).stdout\n-    if isinstance(out, bytes):\n-        out = out.decode('utf8')\n-    return out.strip()\n-\n-def main():\n-    parser = argparse.ArgumentParser()\n-    parser.add_argument(\"--cli\", default=\"bitcoin-cli\", type=str, help=\"bitcoin-cli command\")\n-    parser.add_argument(\"--debug\", action=\"store_true\", help=\"Print debugging info\")\n-    parser.add_argument(\"--quiet\", action=\"store_true\", help=\"Only print warnings/errors\")\n-\n-    cmds = parser.add_subparsers(help=\"sub-commands\")\n-    genpsbt = cmds.add_parser(\"genpsbt\", help=\"Generate a block PSBT for signing\")\n-    genpsbt.set_defaults(fn=do_genpsbt)\n-\n-    solvepsbt = cmds.add_parser(\"solvepsbt\", help=\"Solve a signed block PSBT\")\n-    solvepsbt.set_defaults(fn=do_solvepsbt)\n-\n-    generate = cmds.add_parser(\"generate\", help=\"Mine blocks\")\n-    generate.set_defaults(fn=do_generate)\n-    generate.add_argument(\"--ongoing\", action=\"store_true\", help=\"Keep mining blocks\")\n-    generate.add_argument(\"--max-blocks\", default=None, type=int, help=\"Max blocks to mine (default=1)\")\n-    generate.add_argument(\"--set-block-time\", default=None, type=int, help=\"Set block time (unix timestamp)\")\n-    generate.add_argument(\"--nbits\", default=None, type=str, help=\"Target nBits (specify difficulty)\")\n-    generate.add_argument(\"--min-nbits\", action=\"store_true\", help=\"Target minimum nBits (use min difficulty)\")\n-    generate.add_argument(\"--poisson\", action=\"store_true\", help=\"Simulate randomised block times\")\n-    generate.add_argument(\"--multiminer\", default=None, type=str, help=\"Specify which set of blocks to mine (eg: 1-40/100 for the first 40%%, 2/3 for the second 3rd)\")\n-    generate.add_argument(\"--backup-delay\", default=300, type=int, help=\"Seconds to delay before mining blocks reserved for other miners (default=300)\")\n-    generate.add_argument(\"--standby-delay\", default=0, type=int, help=\"Seconds to delay before mining blocks (default=0)\")\n-\n-    calibrate = cmds.add_parser(\"calibrate\", help=\"Calibrate difficulty\")\n-    calibrate.set_defaults(fn=do_calibrate)\n-    calibrate.add_argument(\"--nbits\", type=str, default=None)\n-    calibrate.add_argument(\"--seconds\", type=int, default=None)\n-\n-    for sp in [genpsbt, generate]:\n-        sp.add_argument(\"--address\", default=None, type=str, help=\"Address for block reward payment\")\n-        sp.add_argument(\"--descriptor\", default=None, type=str, help=\"Descriptor for block reward payment\")\n-\n-    for sp in [solvepsbt, generate, calibrate]:\n-        sp.add_argument(\"--grind-cmd\", default=None, type=str, required=(sp==calibrate), help=\"Command to grind a block header for proof-of-work\")\n-\n-    args = parser.parse_args(sys.argv[1:])\n-\n-    args.bcli = lambda *a, input=b\"\", **kwargs: bitcoin_cli(args.cli.split(\" \"), list(a), input=input, **kwargs)\n-\n-    if hasattr(args, \"address\") and hasattr(args, \"descriptor\"):\n-        if args.address is None and args.descriptor is None:\n-            sys.stderr.write(\"Must specify --address or --descriptor\\n\")\n-            return 1\n-        elif args.address is not None and args.descriptor is not None:\n-            sys.stderr.write(\"Only specify one of --address or --descriptor\\n\")\n-            return 1\n-        args.derived_addresses = {}\n-\n-    if args.debug:\n-        logging.getLogger().setLevel(logging.DEBUG)\n-    elif args.quiet:\n-        logging.getLogger().setLevel(logging.WARNING)\n-    else:\n-        logging.getLogger().setLevel(logging.INFO)\n-\n-    if hasattr(args, \"fn\"):\n-        return args.fn(args)\n-    else:\n-        logging.error(\"Must specify command\")\n-        return 1\n-\n-if __name__ == \"__main__\":\n-    main()\n-\n-"
      },
      {
        "sha": "573a71a675312d3ce110bc60b788964116d9a0e4",
        "filename": "contrib/testgen/README.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -4,5 +4,5 @@ Utilities to generate test vectors for the data-driven Bitcoin tests.\n \n Usage:\n \n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_keys_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_keys_invalid.json"
      },
      {
        "sha": "da67cb2d9052e709a05c630bfa691b7c680db03b",
        "filename": "contrib/testgen/base58.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/base58.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/base58.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/base58.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,4 +1,4 @@\n-# Copyright (c) 2012-2020 The Bitcoin Core developers\n+# Copyright (c) 2012-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n@@ -107,7 +107,7 @@ def get_bcaddress_version(strAddress):\n \n if __name__ == '__main__':\n     # Test case (from http://gitorious.org/bitcoin/python-base58.git)\n-    assert get_bcaddress_version('15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC') == 0\n+    assert get_bcaddress_version('15VjRaDX9zpbA8LVnbrCAFzrVzN7ixHNsC') is 0\n     _ohai = 'o hai'.encode('ascii')\n     _tmp = b58encode(_ohai)\n     assert _tmp == 'DYB3oMS'"
      },
      {
        "sha": "a00acb1f41fe478fd332ba1deab7729dbaf19be1",
        "filename": "contrib/testgen/gen_key_io_test_vectors.py",
        "status": "modified",
        "additions": 37,
        "deletions": 56,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/gen_key_io_test_vectors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/testgen/gen_key_io_test_vectors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/testgen/gen_key_io_test_vectors.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8",
        "patch": "@@ -1,21 +1,22 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2012-2020 The Bitcoin Core developers\n+# Copyright (c) 2012-2018 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n '''\n-Generate valid and invalid base58/bech32(m) address and private key test vectors.\n+Generate valid and invalid base58 address and private key test vectors.\n \n Usage:\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 70 > ../../src/test/data/key_io_valid.json\n-    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 70 > ../../src/test/data/key_io_invalid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py valid 50 > ../../src/test/data/key_io_valid.json\n+    PYTHONPATH=../../test/functional/test_framework ./gen_key_io_test_vectors.py invalid 50 > ../../src/test/data/key_io_invalid.json\n '''\n # 2012 Wladimir J. van der Laan\n # Released under MIT License\n import os\n from itertools import islice\n from base58 import b58encode_chk, b58decode_chk, b58chars\n import random\n-from segwit_addr import bech32_encode, decode_segwit_address, convertbits, CHARSET, Encoding\n+from binascii import b2a_hex\n+from segwit_addr import bech32_encode, decode, convertbits, CHARSET\n \n # key types\n PUBKEY_ADDRESS = 0\n@@ -32,7 +33,6 @@\n OP_0 = 0x00\n OP_1 = 0x51\n OP_2 = 0x52\n-OP_3 = 0x53\n OP_16 = 0x60\n OP_DUP = 0x76\n OP_EQUAL = 0x87\n@@ -45,7 +45,6 @@\n script_suffix = (OP_EQUAL,)\n p2wpkh_prefix = (OP_0, 20)\n p2wsh_prefix = (OP_0, 32)\n-p2tr_prefix = (OP_1, 32)\n \n metadata_keys = ['isPrivkey', 'chain', 'isCompressed', 'tryCaseFlip']\n # templates for valid sequences\n@@ -56,58 +55,40 @@\n   ((SCRIPT_ADDRESS,),         20, (),   (False, 'main',    None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'test',    None,  None), script_prefix, script_suffix),\n-  ((PUBKEY_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), pubkey_prefix, pubkey_suffix),\n-  ((SCRIPT_ADDRESS_TEST,),    20, (),   (False, 'signet',  None,  None), script_prefix, script_suffix),\n   ((PUBKEY_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), pubkey_prefix, pubkey_suffix),\n   ((SCRIPT_ADDRESS_REGTEST,), 20, (),   (False, 'regtest', None,  None), script_prefix, script_suffix),\n   ((PRIVKEY,),                32, (),   (True,  'main',    False, None), (),            ()),\n   ((PRIVKEY,),                32, (1,), (True,  'main',    True,  None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (),   (True,  'test',    False, None), (),            ()),\n   ((PRIVKEY_TEST,),           32, (1,), (True,  'test',    True,  None), (),            ()),\n-  ((PRIVKEY_TEST,),           32, (),   (True,  'signet',  False, None), (),            ()),\n-  ((PRIVKEY_TEST,),           32, (1,), (True,  'signet',  True,  None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (),   (True,  'regtest', False, None), (),            ()),\n   ((PRIVKEY_REGTEST,),        32, (1,), (True,  'regtest', True,  None), (),            ())\n ]\n # templates for valid bech32 sequences\n bech32_templates = [\n-  # hrp, version, witprog_size, metadata, encoding, output_prefix\n-  ('bc',    0, 20, (False, 'main',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n-  ('bc',    0, 32, (False, 'main',    None, True), Encoding.BECH32,  p2wsh_prefix),\n-  ('bc',    1, 32, (False, 'main',    None, True), Encoding.BECH32M, p2tr_prefix),\n-  ('bc',    2,  2, (False, 'main',    None, True), Encoding.BECH32M, (OP_2, 2)),\n-  ('tb',    0, 20, (False, 'test',    None, True), Encoding.BECH32,  p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'test',    None, True), Encoding.BECH32,  p2wsh_prefix),\n-  ('tb',    1, 32, (False, 'test',    None, True), Encoding.BECH32M, p2tr_prefix),\n-  ('tb',    3, 16, (False, 'test',    None, True), Encoding.BECH32M, (OP_3, 16)),\n-  ('tb',    0, 20, (False, 'signet',  None, True), Encoding.BECH32,  p2wpkh_prefix),\n-  ('tb',    0, 32, (False, 'signet',  None, True), Encoding.BECH32,  p2wsh_prefix),\n-  ('tb',    1, 32, (False, 'signet',  None, True), Encoding.BECH32M, p2tr_prefix),\n-  ('tb',    3, 32, (False, 'signet',  None, True), Encoding.BECH32M, (OP_3, 32)),\n-  ('bcrt',  0, 20, (False, 'regtest', None, True), Encoding.BECH32,  p2wpkh_prefix),\n-  ('bcrt',  0, 32, (False, 'regtest', None, True), Encoding.BECH32,  p2wsh_prefix),\n-  ('bcrt',  1, 32, (False, 'regtest', None, True), Encoding.BECH32M, p2tr_prefix),\n-  ('bcrt', 16, 40, (False, 'regtest', None, True), Encoding.BECH32M, (OP_16, 40))\n+  # hrp, version, witprog_size, metadata, output_prefix\n+  ('bc',    0, 20, (False, 'main',    None, True), p2wpkh_prefix),\n+  ('bc',    0, 32, (False, 'main',    None, True), p2wsh_prefix),\n+  ('bc',    1,  2, (False, 'main',    None, True), (OP_1, 2)),\n+  ('tb',    0, 20, (False, 'test',    None, True), p2wpkh_prefix),\n+  ('tb',    0, 32, (False, 'test',    None, True), p2wsh_prefix),\n+  ('tb',    2, 16, (False, 'test',    None, True), (OP_2, 16)),\n+  ('bcrt',  0, 20, (False, 'regtest', None, True), p2wpkh_prefix),\n+  ('bcrt',  0, 32, (False, 'regtest', None, True), p2wsh_prefix),\n+  ('bcrt', 16, 40, (False, 'regtest', None, True), (OP_16, 40))\n ]\n # templates for invalid bech32 sequences\n bech32_ng_templates = [\n-  # hrp, version, witprog_size, encoding, invalid_bech32, invalid_checksum, invalid_char\n-  ('tc',    0, 20, Encoding.BECH32,  False, False, False),\n-  ('bt',    1, 32, Encoding.BECH32M, False, False, False),\n-  ('tb',   17, 32, Encoding.BECH32M, False, False, False),\n-  ('bcrt',  3,  1, Encoding.BECH32M, False, False, False),\n-  ('bc',   15, 41, Encoding.BECH32M, False, False, False),\n-  ('tb',    0, 16, Encoding.BECH32,  False, False, False),\n-  ('bcrt',  0, 32, Encoding.BECH32,  True,  False, False),\n-  ('bc',    0, 16, Encoding.BECH32,  True,  False, False),\n-  ('tb',    0, 32, Encoding.BECH32,  False, True,  False),\n-  ('bcrt',  0, 20, Encoding.BECH32,  False, False, True),\n-  ('bc',    0, 20, Encoding.BECH32M, False, False, False),\n-  ('tb',    0, 32, Encoding.BECH32M, False, False, False),\n-  ('bcrt',  0, 20, Encoding.BECH32M, False, False, False),\n-  ('bc',    1, 32, Encoding.BECH32,  False, False, False),\n-  ('tb',    2, 16, Encoding.BECH32,  False, False, False),\n-  ('bcrt', 16, 20, Encoding.BECH32,  False, False, False),\n+  # hrp, version, witprog_size, invalid_bech32, invalid_checksum, invalid_char\n+  ('tc',    0, 20, False, False, False),\n+  ('tb',   17, 32, False, False, False),\n+  ('bcrt',  3,  1, False, False, False),\n+  ('bc',   15, 41, False, False, False),\n+  ('tb',    0, 16, False, False, False),\n+  ('bcrt',  0, 32, True,  False, False),\n+  ('bc',    0, 16, True,  False, False),\n+  ('tb',    0, 32, False, True,  False),\n+  ('bcrt',  0, 20, False, False, True)\n ]\n \n def is_valid(v):\n@@ -128,7 +109,7 @@ def is_valid(v):\n def is_valid_bech32(v):\n     '''Check vector v for bech32 validity'''\n     for hrp in ['bc', 'tb', 'bcrt']:\n-        if decode_segwit_address(hrp, v) != (None, None):\n+        if decode(hrp, v) != (None, None):\n             return True\n     return False\n \n@@ -147,9 +128,8 @@ def gen_valid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n-    encoding = template[4]\n-    dst_prefix = bytearray(template[5])\n-    rv = bech32_encode(encoding, hrp, [witver] + convertbits(witprog, 8, 5))\n+    dst_prefix = bytearray(template[4])\n+    rv = bech32_encode(hrp, [witver] + convertbits(witprog, 8, 5))\n     return rv, dst_prefix + witprog\n \n def gen_valid_vectors():\n@@ -161,7 +141,9 @@ def gen_valid_vectors():\n             rv, payload = valid_vector_generator(template)\n             assert is_valid(rv)\n             metadata = {x: y for x, y in zip(metadata_keys,template[3]) if y is not None}\n-            hexrepr = payload.hex()\n+            hexrepr = b2a_hex(payload)\n+            if isinstance(hexrepr, bytes):\n+                hexrepr = hexrepr.decode('utf8')\n             yield (rv, hexrepr, metadata)\n \n def gen_invalid_base58_vector(template):\n@@ -207,23 +189,22 @@ def gen_invalid_bech32_vector(template):\n     hrp = template[0]\n     witver = template[1]\n     witprog = bytearray(os.urandom(template[2]))\n-    encoding = template[3]\n \n     if no_data:\n-        rv = bech32_encode(encoding, hrp, [])\n+        rv = bech32_encode(hrp, [])\n     else:\n         data = [witver] + convertbits(witprog, 8, 5)\n-        if template[4] and not no_data:\n+        if template[3] and not no_data:\n             if template[2] % 5 in {2, 4}:\n                 data[-1] |= 1\n             else:\n                 data.append(0)\n-        rv = bech32_encode(encoding, hrp, data)\n+        rv = bech32_encode(hrp, data)\n \n-    if template[5]:\n+    if template[4]:\n         i = len(rv) - random.randrange(1, 7)\n         rv = rv[:i] + random.choice(CHARSET.replace(rv[i], '')) + rv[i + 1:]\n-    if template[6]:\n+    if template[5]:\n         i = len(hrp) + 1 + random.randrange(0, len(rv) - len(hrp) - 4)\n         rv = rv[:i] + rv[i:i + 4].upper() + rv[i + 4:]\n "
      },
      {
        "sha": "1f93474fa040879ffe9dd5c7ffbe6e2b710c6585",
        "filename": "contrib/tracing/README.md",
        "status": "removed",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/README.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "6e7a98ef076643ebdd8921facedb28d0d1149ebe",
        "filename": "contrib/tracing/connectblock_benchmark.bt",
        "status": "removed",
        "additions": 0,
        "deletions": 156,
        "changes": 156,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/connectblock_benchmark.bt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/connectblock_benchmark.bt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/connectblock_benchmark.bt?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "f62956aa5e1c3d36844c762b620ec4d43f9ee764",
        "filename": "contrib/tracing/log_p2p_traffic.bt",
        "status": "removed",
        "additions": 0,
        "deletions": 28,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/log_p2p_traffic.bt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/log_p2p_traffic.bt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/log_p2p_traffic.bt?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "b5b57556324e350b879bc60749338d442ea3f8b9",
        "filename": "contrib/tracing/log_raw_p2p_msgs.py",
        "status": "removed",
        "additions": 0,
        "deletions": 180,
        "changes": 180,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/log_raw_p2p_msgs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/log_raw_p2p_msgs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/log_raw_p2p_msgs.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "14e3e3a80123ad163f35000fa27b62835e02c992",
        "filename": "contrib/tracing/p2p_monitor.py",
        "status": "removed",
        "additions": 0,
        "deletions": 250,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/p2p_monitor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/tracing/p2p_monitor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/tracing/p2p_monitor.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "744b8ee70fa4b6cdb5ac989016bd2410c6479072",
        "filename": "contrib/valgrind.supp",
        "status": "modified",
        "additions": 20,
        "deletions": 6,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/valgrind.supp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/valgrind.supp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/valgrind.supp?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "e95a57586ff1c34fef56f4d851934f0d881bbd8c",
        "filename": "contrib/verify-commits/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a26791f0d1299ee5d4ee87dc2890e6d531f7c459",
        "filename": "contrib/verify-commits/pre-push-hook.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/pre-push-hook.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/pre-push-hook.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/pre-push-hook.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "27fede6277616c3cfe500c662636e5449e482b5b",
        "filename": "contrib/verify-commits/trusted-keys",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/trusted-keys",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verify-commits/trusted-keys",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verify-commits/trusted-keys?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "4209fdb3644e558c029bacc9a02ad9823b120eb6",
        "filename": "contrib/verifybinaries/README.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verifybinaries/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verifybinaries/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "51c151add826f186fee09dcde4b680b76c23f07a",
        "filename": "contrib/verifybinaries/verify.py",
        "status": "removed",
        "additions": 0,
        "deletions": 183,
        "changes": 183,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/verifybinaries/verify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/contrib/verifybinaries/verify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.py?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "4296998631cff715d429c5b203c41b53f8e722e0",
        "filename": "contrib/verifybinaries/verify.sh",
        "status": "added",
        "additions": 177,
        "deletions": 0,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verifybinaries/verify.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/verifybinaries/verify.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/verifybinaries/verify.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "31720e72e7081d61a6905adbfeabdc8d15a517f6",
        "filename": "contrib/windeploy/detached-sig-create.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/windeploy/detached-sig-create.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/windeploy/detached-sig-create.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/detached-sig-create.sh?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "4023a5b638f89f9838990db0700ed9ec5a629e9b",
        "filename": "contrib/windeploy/win-codesign.cert",
        "status": "modified",
        "additions": 94,
        "deletions": 83,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/windeploy/win-codesign.cert",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/windeploy/win-codesign.cert",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/windeploy/win-codesign.cert?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "06893407f5fef454ad17da0eabdfa0c0947a6b8d",
        "filename": "contrib/zmq/zmq_sub.py",
        "status": "modified",
        "additions": 13,
        "deletions": 17,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/zmq/zmq_sub.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/contrib/zmq/zmq_sub.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub.py?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "5f5247f8818f0e534dcf39ba00afced76622b7b7",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 26,
        "deletions": 106,
        "changes": 132,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "79865ff011575b130392ce910c579bc7ca2a52a9",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 24,
        "deletions": 50,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "eb587fca890e939d86d996ef34355db213bde4d8",
        "filename": "depends/builders/darwin.mk",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/builders/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/builders/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/builders/darwin.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "7f9ebbe31097dff5e381dceffadbf64502ab3d46",
        "filename": "depends/config.guess",
        "status": "modified",
        "additions": 146,
        "deletions": 183,
        "changes": 329,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.guess",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.guess",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.guess?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "fb9bf713cc671e7a738bada7dd67c4e99d8d2a66",
        "filename": "depends/config.site.in",
        "status": "modified",
        "additions": 43,
        "deletions": 67,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.site.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.site.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.site.in?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a318a46868500fbeea993e693e32701041ffad1b",
        "filename": "depends/config.sub",
        "status": "modified",
        "additions": 289,
        "deletions": 360,
        "changes": 649,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.sub",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/config.sub",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/config.sub?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a4434b5167ad970a184cb64dd796b3bc54d5662f",
        "filename": "depends/funcs.mk",
        "status": "modified",
        "additions": 16,
        "deletions": 44,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/funcs.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/funcs.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/funcs.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "ac69ca7ee1fa2c0aa19dfd01ea76201caa70203a",
        "filename": "depends/gen_id",
        "status": "removed",
        "additions": 0,
        "deletions": 74,
        "changes": 74,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/gen_id",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/gen_id",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/gen_id?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "969ec2a1cb047f2895e17402012d637534f49b7a",
        "filename": "depends/hosts/android.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/android.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/android.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/android.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "1bc4fb81896f6298c07ff50afaf3865da59797f4",
        "filename": "depends/hosts/darwin.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 111,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/darwin.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/darwin.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/darwin.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "144e5f88b7820ae9d920f1d0e5ad850c44ca67d2",
        "filename": "depends/hosts/default.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/default.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/default.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/default.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b13a0f1ad714ae19ec7fc4b68d162095b9c62255",
        "filename": "depends/hosts/linux.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/linux.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/linux.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/linux.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "dbfb62fdcf98695d515e56897ee488703e002054",
        "filename": "depends/hosts/mingw32.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/mingw32.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/hosts/mingw32.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/hosts/mingw32.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b679438c6f65af33a263b714a4f3017bee964dcd",
        "filename": "depends/packages/bdb.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/bdb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/bdb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/bdb.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "cd0e70fb1c18fa879a7575431758203854929acd",
        "filename": "depends/packages/boost.mk",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/boost.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/boost.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/boost.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "abeb26545f898e4dffdb18f1452d77197f37a35c",
        "filename": "depends/packages/capnp.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/capnp.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "902fe43be267919d8d71c44d9b6dea5cea9928d1",
        "filename": "depends/packages/expat.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/expat.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/expat.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/expat.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "128599ba773326b87901dd219946831838e39c80",
        "filename": "depends/packages/fontconfig.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/fontconfig.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/fontconfig.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/fontconfig.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a1584608e19f714ca190875aae124edd33a1456a",
        "filename": "depends/packages/freetype.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/freetype.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/freetype.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/freetype.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "4c55c2df04b5cd50f1af5ae63bab275d7c1284ac",
        "filename": "depends/packages/libXau.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libXau.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libXau.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libXau.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "eb45e14f6fb95b19df8cd39d659f2564fbe75639",
        "filename": "depends/packages/libevent.mk",
        "status": "modified",
        "additions": 8,
        "deletions": 12,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libevent.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libevent.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libevent.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "3e5cf5f1603a66c0244667b909cbb0b9f6541376",
        "filename": "depends/packages/libmultiprocess.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libmultiprocess.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "cdcf8c0bf2c188005272bdec1a107b4a3e94f0c4",
        "filename": "depends/packages/libnatpmp.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libnatpmp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libnatpmp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libnatpmp.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "2204b381958b8f0be875308764df849b62e9af40",
        "filename": "depends/packages/libxcb.mk",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libxcb.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/libxcb.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxcb.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "8c6c56545f0758b4cf7f8a1ecff82388e724ee82",
        "filename": "depends/packages/libxkbcommon.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libxkbcommon.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/libxkbcommon.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/libxkbcommon.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "fdbe22cda63d466b31c727d1eb61fcc4313e4e33",
        "filename": "depends/packages/miniupnpc.mk",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/miniupnpc.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/miniupnpc.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/miniupnpc.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "aaa37cdcfa7a71547d3fbc16795bb9b8acbd3d13",
        "filename": "depends/packages/native_b2.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_b2.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_b2.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_b2.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "c3054cbd1a16e66d8ff592b27bdc7fc7a12c0f2c",
        "filename": "depends/packages/native_biplist.mk",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_biplist.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_biplist.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_biplist.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "ed5a6deee2fdbfbd658ddff8d5aa5c129860bf6f",
        "filename": "depends/packages/native_capnp.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_capnp.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_capnp.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_capnp.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "4195230b4003efac0071e416dd9c1ca1d66979e7",
        "filename": "depends/packages/native_cctools.mk",
        "status": "modified",
        "additions": 56,
        "deletions": 15,
        "changes": 71,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_cctools.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_cctools.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cctools.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "8243458ec858ed045ff16219b36ff9f64512e099",
        "filename": "depends/packages/native_cdrkit.mk",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_cdrkit.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_cdrkit.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_cdrkit.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "25ac77c1a34ad8350050a3563a205f950a5c13ae",
        "filename": "depends/packages/native_clang.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_clang.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_clang.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_clang.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "f99b689ecdc7406233dd36191a592be37aeed931",
        "filename": "depends/packages/native_ds_store.mk",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_ds_store.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_ds_store.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_ds_store.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "c0f0ce74de8b64efac6e15e4c9082f13073a2951",
        "filename": "depends/packages/native_libdmg-hfsplus.mk",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_libdmg-hfsplus.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_libdmg-hfsplus.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libdmg-hfsplus.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "14653ce9fb0b70a110ee8d80c743a6833f60c21b",
        "filename": "depends/packages/native_libmultiprocess.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_libmultiprocess.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_libmultiprocess.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libmultiprocess.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "60b898da5f2fd4d923f8171a0980ef22158454b1",
        "filename": "depends/packages/native_libtapi.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_libtapi.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/native_libtapi.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_libtapi.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "e60b99dccc98ce44512e0026a712bca1371f5855",
        "filename": "depends/packages/native_mac_alias.mk",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_mac_alias.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/native_mac_alias.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/native_mac_alias.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "3e8a22a1b0b61d9d07dc635e836575286a552f72",
        "filename": "depends/packages/openssl.mk",
        "status": "added",
        "additions": 83,
        "deletions": 0,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/openssl.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/openssl.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/openssl.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "724617378821c378732435c2be54420e0ce9e026",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 7,
        "deletions": 17,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "366b1d0c423aee4fc4bc68226cddc0cf240c6377",
        "filename": "depends/packages/qt.mk",
        "status": "modified",
        "additions": 69,
        "deletions": 76,
        "changes": 145,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/qt.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/qt.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/qt.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "af5e0d09c9dc8600908639df7a7da581b1d0bd77",
        "filename": "depends/packages/sqlite.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 30,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/sqlite.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/packages/sqlite.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/sqlite.mk?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "6f35ede24850ad76484f76fc1f607a8bd158de65",
        "filename": "depends/packages/zeromq.mk",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/zeromq.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/zeromq.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zeromq.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "acb02020a80b2424fe6080a0b64b8ac54d33df62",
        "filename": "depends/packages/zlib.mk",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/zlib.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/packages/zlib.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/zlib.mk?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "58f7ddc7d502cff2b6cad8a81df5e879e8a3360b",
        "filename": "depends/patches/bdb/clang_cxx_11.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 147,
        "changes": 147,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/bdb/clang_cxx_11.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/bdb/clang_cxx_11.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/bdb/clang_cxx_11.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "3ffd1674e03bcf0da2995aa465908679bc5840e1",
        "filename": "depends/patches/fontconfig/gperf_header_regen.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 24,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/fontconfig/gperf_header_regen.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/fontconfig/gperf_header_regen.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/gperf_header_regen.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "9f69081890c33d7acd79ec569cc7122d84d316da",
        "filename": "depends/patches/fontconfig/remove_char_width_usage.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 62,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/fontconfig/remove_char_width_usage.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/fontconfig/remove_char_width_usage.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/fontconfig/remove_char_width_usage.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "512f9c50ea8d7fbca35004e92756236721e0919c",
        "filename": "depends/patches/miniupnpc/dont_leak_info.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 32,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/miniupnpc/dont_leak_info.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/miniupnpc/dont_leak_info.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/miniupnpc/dont_leak_info.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "8ab0993dc4de142ab7766a500640be92540fe80f",
        "filename": "depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "status": "added",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/native_cdrkit/cdrkit-deterministic.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/native_cdrkit/cdrkit-deterministic.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "003099bdc20095d4050287d4457b8369b630fd62",
        "filename": "depends/patches/openssl/0001-Add-OpenSSL-termios-fix-for-musl-libc.patch",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/openssl/0001-Add-OpenSSL-termios-fix-for-musl-libc.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/openssl/0001-Add-OpenSSL-termios-fix-for-musl-libc.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/openssl/0001-Add-OpenSSL-termios-fix-for-musl-libc.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a74e9cb09872b9abc82542e67772208413f7284e",
        "filename": "depends/patches/qt/dont_hardcode_pwd.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 27,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/dont_hardcode_pwd.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/dont_hardcode_pwd.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/dont_hardcode_pwd.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "2f6ff00f40c253c95d5bc62e887b032eac22055e",
        "filename": "depends/patches/qt/fix_android_jni_static.patch",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_android_jni_static.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_android_jni_static.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_jni_static.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "195e1c5e592a15eeb20688a241aec245ea33e2f1",
        "filename": "depends/patches/qt/fix_android_pch.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 10,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_android_pch.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_android_pch.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_pch.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "13bfff9776474028c5165f9e3d5e64bee3d576e5",
        "filename": "depends/patches/qt/fix_android_qmake_conf.patch",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_android_qmake_conf.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_android_qmake_conf.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_android_qmake_conf.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "0d7dd647debca93eb5383ee72f6d4db573dabaac",
        "filename": "depends/patches/qt/fix_configure_mac.patch",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_configure_mac.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_configure_mac.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_configure_mac.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "d1a15373f44d9fd9028f578ed658ddb1582dcbd8",
        "filename": "depends/patches/qt/fix_lib_paths.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 193,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_lib_paths.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_lib_paths.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_lib_paths.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "e4313770e5a8b9c12bbebbc8bb75b8a7585a1992",
        "filename": "depends/patches/qt/fix_limits_header.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 44,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_limits_header.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/fix_limits_header.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_limits_header.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "f868ca25775547188620644ae02881edeaa06a8d",
        "filename": "depends/patches/qt/fix_no_printer.patch",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_no_printer.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_no_printer.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_no_printer.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "34302a9f2d2eb61117a274a53c8cfe1877c61246",
        "filename": "depends/patches/qt/fix_qt_pkgconfig.patch",
        "status": "modified",
        "additions": 3,
        "deletions": 15,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_qt_pkgconfig.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_qt_pkgconfig.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_qt_pkgconfig.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "c1b07fe23afdbd7a2f204811e2aad132bd2d9dff",
        "filename": "depends/patches/qt/fix_rcc_determinism.patch",
        "status": "added",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_rcc_determinism.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_rcc_determinism.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_rcc_determinism.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "e7f29f01f9cd7f250b86bbd038175aa6a0fb35b0",
        "filename": "depends/patches/qt/fix_riscv64_arch.patch",
        "status": "added",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_riscv64_arch.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/fix_riscv64_arch.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/fix_riscv64_arch.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "4cd96df29ff307b012d5ae4c49cfff71948cca86",
        "filename": "depends/patches/qt/mac-qmake.conf",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/mac-qmake.conf",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/mac-qmake.conf",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/mac-qmake.conf?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "fe82c2c73cb09611da2be6ccbe274d4191bc1ad8",
        "filename": "depends/patches/qt/no-xlib.patch",
        "status": "modified",
        "additions": 8,
        "deletions": 9,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/no-xlib.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/no-xlib.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no-xlib.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b16635b572025b70996f22f8d44d8e4ebed11a3b",
        "filename": "depends/patches/qt/no_sdk_version_check.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 20,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/no_sdk_version_check.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/no_sdk_version_check.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/no_sdk_version_check.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "8f2e900a840fbd3f19dd77772d1157cdefbe1527",
        "filename": "depends/patches/qt/qt.pro",
        "status": "removed",
        "additions": 0,
        "deletions": 16,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qt.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qt.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qt.pro?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "0358bea6e940384ada32e83fa8ed5bf987b90a14",
        "filename": "depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 17,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qtbase-moc-ignore-gcc-macro.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "6ef71a094273503f3cdac2618e3877e428bfb52b",
        "filename": "depends/patches/qt/qttools_src.pro",
        "status": "removed",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qttools_src.pro",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/qttools_src.pro",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/qttools_src.pro?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "85c8ae2132af5ffc84c2269b9201d37389a14014",
        "filename": "depends/patches/qt/support_new_android_ndks.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 122,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/support_new_android_ndks.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/qt/support_new_android_ndks.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/support_new_android_ndks.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "165abf3e2e7a6d7cdbe7b960ec15dbcfaf0a9dfd",
        "filename": "depends/patches/qt/xkb-default.patch",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/xkb-default.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/qt/xkb-default.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/qt/xkb-default.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b911ac56724b193f84d0cbdbf0bf0f8d92e0bab6",
        "filename": "depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0001-fix-build-with-older-mingw64.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b1c6f78a7046dbcdf4be20d3cc43e5cb09bc7528",
        "filename": "depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "status": "added",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/0002-disable-pthread_set_name_np.patch?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "ddf91e6abfaba15442df4812af77379e7349019c",
        "filename": "depends/patches/zeromq/remove_libstd_link.patch",
        "status": "removed",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/zeromq/remove_libstd_link.patch",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/depends/patches/zeromq/remove_libstd_link.patch",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/patches/zeromq/remove_libstd_link.patch?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "7e307ab7c84b00f43d75c514e86a334f0f9aa241",
        "filename": "doc/Doxyfile.in",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/Doxyfile.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/Doxyfile.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/Doxyfile.in?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "a0cfe84a3e50a29e5ba942394f0abecb2078586a",
        "filename": "doc/JSON-RPC-interface.md",
        "status": "modified",
        "additions": 8,
        "deletions": 20,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/JSON-RPC-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/JSON-RPC-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/JSON-RPC-interface.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "19d8204d83eb7960ae0e91e04ca8404422e564df",
        "filename": "doc/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "c21d976437bba431970ee2aaaff60b2743c4ea86",
        "filename": "doc/README_windows.txt",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/README_windows.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/README_windows.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_windows.txt?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "ab74ca736deb58ff405cb6c92626fbe6b43f79a2",
        "filename": "doc/REST-interface.md",
        "status": "modified",
        "additions": 15,
        "deletions": 17,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/REST-interface.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/REST-interface.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/REST-interface.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b1a06009b52a7f1a6f6fb6f5923403ed0028862c",
        "filename": "doc/benchmarking.md",
        "status": "modified",
        "additions": 6,
        "deletions": 19,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/benchmarking.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/benchmarking.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/benchmarking.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b96862297f52af4acfcca0eb7f9ce3470816fd04",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "f4a8edec75c5cf9a9bf04d010e5476698856d15c",
        "filename": "doc/bitcoin-conf.md",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-conf.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "531fb1155985a44184fb7941ed37ae2feef1aebd",
        "filename": "doc/bitcoin-staking-conf.md",
        "status": "added",
        "additions": 62,
        "deletions": 0,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin-staking-conf.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin-staking-conf.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin-staking-conf.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "fa25288e84a09e825ff421619757d17b5bc5d08e",
        "filename": "doc/bitcoin_logo_doxygen.png",
        "status": "modified",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin_logo_doxygen.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/bitcoin_logo_doxygen.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bitcoin_logo_doxygen.png?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "7a8a9e6a653e403003126d6800707394f20bf879",
        "filename": "doc/build-android.md",
        "status": "removed",
        "additions": 0,
        "deletions": 12,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/build-android.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/build-android.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-android.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "f48855a344fde73bb7b1cab23f74ce7c137dc264",
        "filename": "doc/build-freebsd.md",
        "status": "modified",
        "additions": 23,
        "deletions": 91,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-freebsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-freebsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-freebsd.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "47049a780edef5c5e1ef87813eff17eb0060d467",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "53c647ae34b59a511ba9869b4af17372ea59a698",
        "filename": "doc/build-openbsd.md",
        "status": "modified",
        "additions": 12,
        "deletions": 27,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-openbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-openbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-openbsd.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "7b76117c8bd868d1045cfd1106d5bf6049e27c00",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 61,
        "deletions": 275,
        "changes": 336,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "d4cb91ca727a1306982dba252d6dfbb53fe15696",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 40,
        "deletions": 94,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "9dca642600a915376094f73c85cb67b08a8a5679",
        "filename": "doc/build-windows.md",
        "status": "modified",
        "additions": 59,
        "deletions": 33,
        "changes": 92,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-windows.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/build-windows.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-windows.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "0cb5311e8b7c8a269fa5efadf54e3b7dd161a9fb",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 10,
        "deletions": 20,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "181ff77e5080abce1c4f3fb2116afdf8649590e2",
        "filename": "doc/descriptors.md",
        "status": "modified",
        "additions": 8,
        "deletions": 57,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/descriptors.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/descriptors.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/descriptors.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "4960ec567a29a4a05640d7100ea6d8faf25fab13",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 60,
        "deletions": 209,
        "changes": 269,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "de44cdd88013cd33a23c2d2be41009e5525fc624",
        "filename": "doc/external-signer.md",
        "status": "removed",
        "additions": 0,
        "deletions": 171,
        "changes": 171,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/external-signer.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/external-signer.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/external-signer.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "cd23d547bb7eaaa25b7e7c03278a4e5694e72bd3",
        "filename": "doc/files.md",
        "status": "modified",
        "additions": 25,
        "deletions": 47,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/files.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/files.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/files.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "964233782105c99c2910bc2799bcf3e662eee21f",
        "filename": "doc/fuzzing.md",
        "status": "modified",
        "additions": 12,
        "deletions": 213,
        "changes": 225,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/fuzzing.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/fuzzing.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/fuzzing.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "3a48f4a0b397770e44f51477df854f8298ce1b75",
        "filename": "doc/gitian-building.md",
        "status": "added",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "fa9c74f4860f5374c8c707de48c17afa1a56a9b7",
        "filename": "doc/guix.md",
        "status": "removed",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/guix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/guix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/guix.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "5f631c11ca2409a11e2445b793a149fba6eed2a2",
        "filename": "doc/i2p.md",
        "status": "removed",
        "additions": 0,
        "deletions": 121,
        "changes": 121,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/i2p.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/i2p.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/i2p.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "0b327aab581a5a8fc6f018c722cc4758793b1180",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 12,
        "deletions": 13,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "edbc0911a16772d4a1b23645795f9f7b4185aecb",
        "filename": "doc/man/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/Makefile.am?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "415ddb7b0df90a2f159ca47bce8c4604644ecc53",
        "filename": "doc/man/bitcoin-cli.1",
        "status": "modified",
        "additions": 128,
        "deletions": 3,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-cli.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-cli.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-cli.1?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "ab4540e837d4d0d263920b49335b1aac7e040af1",
        "filename": "doc/man/bitcoin-qt.1",
        "status": "modified",
        "additions": 685,
        "deletions": 3,
        "changes": 688,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-qt.1?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "3adce31dc720157ab0f4bb4dd33d3fd69da09896",
        "filename": "doc/man/bitcoin-tx.1",
        "status": "modified",
        "additions": 121,
        "deletions": 3,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-tx.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-tx.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-tx.1?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "5c733c6e21dcc6e785a051dd0cf7ef099adddc87",
        "filename": "doc/man/bitcoin-util.1",
        "status": "removed",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/man/bitcoin-util.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/man/bitcoin-util.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-util.1?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "d33e0cb5d138e0d1b8fe900209a080ed39f00ac3",
        "filename": "doc/man/bitcoin-wallet.1",
        "status": "modified",
        "additions": 66,
        "deletions": 3,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-wallet.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoin-wallet.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoin-wallet.1?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "eb613138d55edaa9caa7757164670e8d54ca7981",
        "filename": "doc/man/bitcoind.1",
        "status": "modified",
        "additions": 663,
        "deletions": 3,
        "changes": 666,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoind.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/man/bitcoind.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/man/bitcoind.1?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "aab6d131bd5905180a5b6e49131bb417d06fbae2",
        "filename": "doc/managing-wallets.md",
        "status": "removed",
        "additions": 0,
        "deletions": 125,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/managing-wallets.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/managing-wallets.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/managing-wallets.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "e3f389a6d3f89481b33e0dd9f1f398f699f96339",
        "filename": "doc/multiprocess.md",
        "status": "removed",
        "additions": 0,
        "deletions": 72,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/multiprocess.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/multiprocess.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/multiprocess.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "1bf3d9afb53f2efe0c3c7182adc07868a8a5cdeb",
        "filename": "doc/productivity.md",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/productivity.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/productivity.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/productivity.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "c411b31d5d967001f21f189f34cfd1200ddb155b",
        "filename": "doc/psbt.md",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/psbt.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/psbt.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/psbt.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "6e7a578ecc4e19bcce131626c8c1e868e678286e",
        "filename": "doc/reduce-memory.md",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/reduce-memory.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/reduce-memory.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-memory.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "e39e43df7a8bf4f61f5878a53363ad5fcef5632e",
        "filename": "doc/reduce-traffic.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/reduce-traffic.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/reduce-traffic.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/reduce-traffic.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "68fbaec53c5192300e52064e10093b6fba32afac",
        "filename": "doc/release-notes-23093.md",
        "status": "removed",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes-23093.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes-23093.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-23093.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "73ecbf8f2157426c3bcbf325e41434cafcf06a9c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1476,
        "deletions": 81,
        "changes": 1557,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "5bbb107cf739bb1c26b424b6844eb6afdb4359d7",
        "filename": "doc/release-notes/release-notes-0.12.1.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.12.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.12.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.12.1.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "12e375c9f409a1bc357e70ba03294f7012369f14",
        "filename": "doc/release-notes/release-notes-0.13.0.md",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.13.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.13.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.0.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "b3c77b96a7fa8dc56b78e3ea82f4be7f3ed27f17",
        "filename": "doc/release-notes/release-notes-0.13.2.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.13.2.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.13.2.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.13.2.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "8a68b264eb57681421021b4ec52c643b860e7934",
        "filename": "doc/release-notes/release-notes-0.14.0.md",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.14.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.14.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.14.0.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "c7ac9e4a15a34e2d6a1de805620664d87d17e587",
        "filename": "doc/release-notes/release-notes-0.15.0.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.15.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31ab6dfeb41d9d9b0abb70fab14b2367af563c8/doc/release-notes/release-notes-0.15.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.15.0.md?ref=b31ab6dfeb41d9d9b0abb70fab14b2367af563c8"
      },
      {
        "sha": "6fc1606b37d51b6a64e686b438b3917b2fc2eebf",
        "filename": "doc/release-notes/release-notes-0.20.0.md",
        "status": "removed",
        "additions": 0,
        "deletions": 987,
        "changes": 987,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes/release-notes-0.20.0.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes/release-notes-0.20.0.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.20.0.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      },
      {
        "sha": "9fbb29cb822f5d5b765f00a099c52da112e2957e",
        "filename": "doc/release-notes/release-notes-0.20.1.md",
        "status": "removed",
        "additions": 0,
        "deletions": 158,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes/release-notes-0.20.1.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7efc628539573af4b4a76d93b853cc46e9e52eae/doc/release-notes/release-notes-0.20.1.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes/release-notes-0.20.1.md?ref=7efc628539573af4b4a76d93b853cc46e9e52eae"
      }
    ]
  }
]