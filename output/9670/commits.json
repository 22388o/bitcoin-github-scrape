[
  {
    "sha": "b508424104c403a9ec12b4adda0d795c2e4d0d6d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTA4NDI0MTA0YzQwM2E5ZWMxMmI0YWRkYTBkNzk1YzJlNGQwZDZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-02-02T12:06:31Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2017-04-21T14:58:41Z"
      },
      "message": "contrib: github-merge improvements\n\nSome minor github-merge improvements I've made over time:\n\nUser interface:\n\n- Print merge details again before signing off, to refresh your memory -\n  usually I'll have done lots of different things in the shell so this\n  will have scrolled out a long time ago.\n\n- Require a valid answer on the prompts. One of the requested answers\n  must be typed, if not, the prompt will re-ask. This prevents\n  accidentally rejecting.\n\nEfficiency:\n\n- Condense \"accept merge\" and \"sign off\" prompts. There's no reason to\n  have this as two separate prompts, both are just opportunities to skip\n  out on the merge, no action is performed in between.\n\nMerging:\n\n- Strip spaces from github title. This avoids redundant spaces\n  surrounding it from getting into the commit message.",
      "tree": {
        "sha": "1dcbaf28b3ec2b07d697a1f81c841593ccb241ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1dcbaf28b3ec2b07d697a1f81c841593ccb241ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b508424104c403a9ec12b4adda0d795c2e4d0d6d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b508424104c403a9ec12b4adda0d795c2e4d0d6d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b508424104c403a9ec12b4adda0d795c2e4d0d6d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b508424104c403a9ec12b4adda0d795c2e4d0d6d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27faa6cccd8dc0c9345c73c424cb7f80dfb061e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27faa6cccd8dc0c9345c73c424cb7f80dfb061e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27faa6cccd8dc0c9345c73c424cb7f80dfb061e6"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 26,
      "deletions": 29
    },
    "files": [
      {
        "sha": "03ccf5b624112667083ec60d53e600c0cd7691ea",
        "filename": "contrib/devtools/github-merge.py",
        "status": "modified",
        "additions": 26,
        "deletions": 29,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b508424104c403a9ec12b4adda0d795c2e4d0d6d/contrib/devtools/github-merge.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b508424104c403a9ec12b4adda0d795c2e4d0d6d/contrib/devtools/github-merge.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/github-merge.py?ref=b508424104c403a9ec12b4adda0d795c2e4d0d6d",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016 The Bitcoin Core developers\n+# Copyright (c) 2016-2017 Bitcoin Core Developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -15,7 +15,7 @@\n # In case of a clean merge that is accepted by the user, the local branch with\n # name $BRANCH is overwritten with the merged result, and optionally pushed.\n from __future__ import division,print_function,unicode_literals\n-import os\n+import os,sys\n from sys import stdin,stdout,stderr\n import argparse\n import hashlib\n@@ -127,6 +127,9 @@ def tree_sha512sum(commit='HEAD'):\n         raise IOError('Non-zero return value executing git cat-file')\n     return overall.hexdigest()\n \n+def print_merge_details(pull, title, branch, base_branch, head_branch):\n+    print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n+    subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n \n def parse_arguments():\n     epilog = '''\n@@ -171,7 +174,7 @@ def main():\n     info = retrieve_pr_info(repo,pull)\n     if info is None:\n         exit(1)\n-    title = info['title']\n+    title = info['title'].strip()\n     # precedence order for destination branch argument:\n     #   - command line argument\n     #   - githubmerge.branch setting\n@@ -256,8 +259,7 @@ def main():\n             printf(\"ERROR: Cannot update message.\",file=stderr)\n             exit(4)\n \n-        print('%s#%s%s %s %sinto %s%s' % (ATTR_RESET+ATTR_PR,pull,ATTR_RESET,title,ATTR_RESET+ATTR_PR,branch,ATTR_RESET))\n-        subprocess.check_call([GIT,'log','--graph','--topo-order','--pretty=format:'+COMMIT_FORMAT,base_branch+'..'+head_branch])\n+        print_merge_details(pull, title, branch, base_branch, head_branch)\n         print()\n \n         # Run test command if configured.\n@@ -276,12 +278,6 @@ def main():\n                     print(\"Difference with github ignored.\",file=stderr)\n                 else:\n                     exit(6)\n-            reply = ask_prompt(\"Press 'd' to accept the diff.\")\n-            if reply.lower() == 'd':\n-                print(\"Diff accepted.\",file=stderr)\n-            else:\n-                print(\"ERROR: Diff rejected.\",file=stderr)\n-                exit(6)\n         else:\n             # Verify the result manually.\n             print(\"Dropping you on a shell so you can try building/testing the merged source.\",file=stderr)\n@@ -290,29 +286,26 @@ def main():\n             if os.path.isfile('/etc/debian_version'): # Show pull number on Debian default prompt\n                 os.putenv('debian_chroot',pull)\n             subprocess.call([BASH,'-i'])\n-            reply = ask_prompt(\"Type 'm' to accept the merge.\")\n-            if reply.lower() == 'm':\n-                print(\"Merge accepted.\",file=stderr)\n-            else:\n-                print(\"ERROR: Merge rejected.\",file=stderr)\n-                exit(7)\n \n         second_sha512 = tree_sha512sum()\n         if first_sha512 != second_sha512:\n             print(\"ERROR: Tree hash changed unexpectedly\",file=stderr)\n             exit(8)\n \n         # Sign the merge commit.\n-        reply = ask_prompt(\"Type 's' to sign off on the merge.\")\n-        if reply == 's':\n-            try:\n-                subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n-            except subprocess.CalledProcessError as e:\n-                print(\"Error signing, exiting.\",file=stderr)\n+        print_merge_details(pull, title, branch, base_branch, head_branch)\n+        while True:\n+            reply = ask_prompt(\"Type 's' to sign off on the above merge, or 'x' to reject and exit.\").lower()\n+            if reply == 's':\n+                try:\n+                    subprocess.check_call([GIT,'commit','-q','--gpg-sign','--amend','--no-edit'])\n+                    break\n+                except subprocess.CalledProcessError as e:\n+                    print(\"Error signing, exiting.\",file=stderr)\n+                    exit(1)\n+            elif reply == 'x':\n+                print(\"Not signing off on merge, exiting.\",file=stderr)\n                 exit(1)\n-        else:\n-            print(\"Not signing off on merge, exiting.\",file=stderr)\n-            exit(1)\n \n         # Put the result in branch.\n         subprocess.check_call([GIT,'checkout','-q',branch])\n@@ -326,9 +319,13 @@ def main():\n         subprocess.call([GIT,'branch','-q','-D',local_merge_branch],stderr=devnull)\n \n     # Push the result.\n-    reply = ask_prompt(\"Type 'push' to push the result to %s, branch %s.\" % (host_repo,branch))\n-    if reply.lower() == 'push':\n-        subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n+    while True:\n+        reply = ask_prompt(\"Type 'push' to push the result to %s, branch %s, or 'x' to exit without pushing.\" % (host_repo,branch)).lower()\n+        if reply == 'push':\n+            subprocess.check_call([GIT,'push',host_repo,'refs/heads/'+branch])\n+            break\n+        elif reply == 'x':\n+            exit(1)\n \n if __name__ == '__main__':\n     main()"
      }
    ]
  }
]