promag,2019-11-29 09:00:19,A test would be nice.,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559713149,559713149,
practicalswift,2019-11-29 09:24:12,"After reading `doc/REST-interface.md` I'm not entirely clear about the assumed trust boundaries.\n\nWhat recommendations do we give to our users regarding exposing the REST endpoints publicly? Do the recommendations differ from our recommendations with regards to exposing the JSON-RPC endpoints publicly?\n\nAs I've understood it we regard the JSON-RPC interface as as an internal control plane ",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559721048,559721048,
laanwj,2019-11-29 09:32:37,"Concept ACK.\n\n> After reading doc/REST-interface.md I'm not entirely clear about the assumed trust boundaries.\n\nThat's a fair question (FWIW the limit has always been: only public data, no complex queries, do not parse JSON as input), but I'd suggest opening a new issue for it. Please keep this one for review of the code changes.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792,559723792,
practicalswift,2019-11-29 09:37:16,@laanwj Without knowing if consumers are trusted or not it is pretty hard to review it from a security perspective :),https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559725358,559725358,
laanwj,2019-11-29 09:42:04,"The REST interface is a lightweight interface for querying public data. Consumers are trusted but less so than on RPC (as they don't authenticate). I still wouldn't recommend exposing it directly to the internet. But maybe it's OK to open it ""publicly"" inside some LAN or VPN that your applications run in.\n\nThis is my last general comment on this, please open a new issue if you want to continue",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559726929,559726929,
jnewbery,2019-11-29 19:21:29,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559867818,559867818,
TheBlueMatt,2019-11-29 19:37:25,"Added a basic sanity test, redid the way headers work to make it easy to get many of them just like the /headers/ request.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559869919,559869919,
jonasschnelli,2019-12-01 21:06:04,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029,560159029,
DrahtBot,2019-12-05 16:05:19,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-562195592,562195592,
TheBlueMatt,2020-05-01 17:40:16,Rebased.,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-622487014,622487014,
naumenkogs,2020-05-18 16:14:26,"Code review ACK 16d8d2da598a7d234275454f9e053ed074eebf3f.\nPerhaps would be good to address the style suggestion above.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035,630288035,
JeremyRubin,2021-10-12 03:58:01,"concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\n\nshort of deprecating it, i don't think we should add new data items.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940633673,940633673,
TheBlueMatt,2021-10-12 04:09:15,"Ah! I'd missed the request for doc updates, sorry about that.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940638949,940638949,
TheBlueMatt,2021-10-12 04:10:14,"> concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\n\nThat's a *huge* pain. The REST interface is nice precisely *because* you can build a proxy server for it easy - its like 10 lines of nginx.conf. JSON-RPC isn't a nice protocol that is broadly supported, its basically a Bitcoin Core-only thing at this point.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940639460,940639460,
JeremyRubin,2021-10-12 04:13:53,"exposing this rest endpoint over NGINX is precisely how our rest endpoint should not be use, so that only serves to add confidence to my notion that it shouldn't be a part of core. A ""proper"" proxy to the rest interface would sanitize all requests.",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940641139,940641139,
TheBlueMatt,2021-10-12 04:16:00,"You can sanitize in NGINX too, its probably easier than some python script. But, seriously, that notion is absurd - ""here, you have a running production daemon, run this hacked-together python script to make its API usable"" is not the same as ""we don't want to vouch for the security of this thing, so make sure you pay close attention if you want to expose calls to the outside"".",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940642018,940642018,
TheBlueMatt,2021-10-12 17:56:07,"> This pull request conflicts with the target branch and needs rebase.\n\nLol come on @MarcoFalke...merging 5 day old lint fixes against conflicting feature PRs.....",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622,941240622,
MarcoFalke,2021-10-13 04:52:08,"re https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622\n\nMerge conflicts are certainly frustrating and I want to apologize for that. Though, the conflicting pull was not a ""lint fix"", but a bug fix. Sure, there was no bug report, but I think that bugs should still be fixed once they are known. When the pull was created, I didn't expect a conflict and it seems there was no activ",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941919751,941919751,
sipa,2021-10-17 02:55:27,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954,945039954,
TheBlueMatt,2021-10-17 02:57:27,"Addressed feedback, diff since the previous round of acks:\n\n```diff\n$ git diff-tree -U1 7cf4e22080 2b64fa3251\ndiff --git a/src/rest.cpp b/src/rest.cpp\nindex dd1be52f86..18ae350630 100644\n--- a/src/rest.cpp\n+++ b/src/rest.cpp\n@@ -343,3 +343,4 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n \n-static bool rest_filter_header(const std::any& cont",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945040154,945040154,
dergoegge,2021-10-17 18:48:25,"ACK 2b64fa3251ac5ff4b4d174f1f0be7226490dce87 - Adding blockfilters to the REST interface is analogous to serving other public data such as transactions or blocks.\n\nWould be nice to have the code DRY'd up at some point but i would consider it fine for now as that is true for many parts of `rest.cpp` . \n\nConsider updating the PR description with the updated endpoint paths. ie: `/rest/blockfi",https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070,945175070,
amovfx,2021-10-20 18:16:45,I read this in the pr-review-club. I am still learning.,https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-947919724,947919724,
emilengler,2019-11-29 14:55:44,"Nit, the use of a single line if statement would be better (including the other one line statements as well)",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265,352165265,src/rest.cpp
TheBlueMatt,2019-11-29 18:57:58,Would be much too long a line to do that.,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089,352227089,src/rest.cpp
emilengler,2019-11-29 23:30:54,Oh sorry I meant to ignore the brackets...,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960,352255960,src/rest.cpp
paymog,2019-12-01 07:30:23,I think it would be useful if this error message provided the user with the valid range.,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195,352325195,src/rest.cpp
paymog,2019-12-01 07:31:01,should `2000` be turned into a constant?,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211,352325211,src/rest.cpp
paymog,2019-12-01 07:35:43,If I'm reading the code right it looks like json is a valid output format too along with binary and hex.,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362,352325362,src/rest.cpp
paymog,2019-12-01 07:37:17,"the code for extracting `filtertype`, `index` and `blockhash` is shared between these two functions. Should this extraction code be pulled out into their own functions?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420,352325420,src/rest.cpp
paymog,2019-12-01 07:38:27,"nit: can the error message be changed to `""Block "" + uriParts[1] + "" not found""`?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461,352325461,src/rest.cpp
TheBlueMatt,2019-12-02 00:25:23,"Lets leave DRY'ing up rest.cpp for a separate commit. I played with it a bit and there isn't an obvious solution here that doesn't end up adding more lines, but the whole of REST probably could get DRY'd up a lot especially in the results-providing section.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152,352386152,src/rest.cpp
TheBlueMatt,2019-12-02 00:28:17,"Hmm, its the same limits as for headers (the code was copied from that section above). Not sure where to document this given the lack of equivalent documentation like we have in RPC where we can fail with help text. Maybe we should have some kind of much more informative general help system like we do for RPC, though its obviously out of scope here.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354,352386354,src/rest.cpp
TheBlueMatt,2019-12-02 00:28:43,"Ehh, its the net limit, and dunno where to put it? Not really worth it.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378,352386378,src/rest.cpp
TheBlueMatt,2019-12-02 00:29:36,"Hmm, good catch. Looks like headers is busted too, I fixed both.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428,352386428,src/rest.cpp
TheBlueMatt,2019-12-02 00:30:05,"Hmm, its coped from the block code, so to keep it the same everywhere I'll leave it.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459,352386459,src/rest.cpp
laanwj,2019-12-03 17:31:58,"similarly, it'd make sense to define a constant for this, and use it in both places, instead of hardcoding 2000 (which I guess is just a sanity limit)",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872,353320872,src/rest.cpp
luke-jr,2020-01-03 17:54:20,Use `%u` here instead of `2000`?,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473,362901473,src/rest.cpp
jnewbery,2020-05-15 19:09:31,nit: `constrexpr`,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988,425996988,src/rest.cpp
jnewbery,2020-05-15 19:10:31,"Since this is all new code, can you adhere to style guide? if blocks with braces or on same lines, variable names in camel case, etc.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435,425997435,src/rest.cpp
meshcollider,2021-10-12 00:52:35,`<>` around parameters would be clearer,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001,726682001,src/rest.cpp
meshcollider,2021-10-12 01:00:34, `strtol` -> `ParseInt32` (#20457),https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583,726684583,src/rest.cpp
meshcollider,2021-10-12 01:13:45,"re: #21866\n```\nconst CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\nCChain& active_chain = chainman.ActiveChain();\n...\npindex = active_chain.Next(pindex);\n```\n",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389,726688389,src/rest.cpp
fanquake,2021-10-12 01:19:07,"```suggestion\n        self.test_rest_request(f""/blockfilter/basic/{bb_hash}"", req_type=ReqType.BIN, ret_type=RetType.OBJ)\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019,726690019,test/functional/interface_rest.py
TheBlueMatt,2021-10-12 03:16:54,"Heh, that's new since this PR was opened :)",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370,726728370,src/rest.cpp
TheBlueMatt,2021-10-12 03:19:25,"This isn't done in `rest_headers` either, which this code was copied from. Should both change or is it supposed to be strtol?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173,726729173,src/rest.cpp
meshcollider,2021-10-12 09:56:16,"I think its just another new code preference, to phase out locale-dependent functions. Since you're touching up `MAX_HEADERS_RESULTS` in `rest_headers` anyway, you could do this there too. Up to you.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379,726958379,src/rest.cpp
luke-jr,2021-10-12 17:39:07,Is it intentionally redefined rather than moving `net_processing`'s to a header?,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127,727358127,src/rest.cpp
luke-jr,2021-10-12 17:40:56,Variable names are supposed to be snake case like you had before...,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240,727359240,src/rest.cpp
luke-jr,2021-10-12 17:44:19,Better to leave it uninitialised here so failure to do so below (in a future PR) will hit warnings.,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515,727361515,src/rest.cpp
TheBlueMatt,2021-10-12 17:52:28,John seems to disagree https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152,727367152,src/rest.cpp
luke-jr,2021-10-12 17:53:23,"Actually, this variable is unused?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824,727367824,src/rest.cpp
TheBlueMatt,2021-10-12 17:56:01,"Good catch, renamed it here.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694,727369694,src/rest.cpp
luke-jr,2021-10-12 18:40:50,Must be a typo? https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160,727399160,src/rest.cpp
meshcollider,2021-10-13 04:09:43,could `std::move` this,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427,727683427,src/rest.cpp
meshcollider,2021-10-13 04:11:08,nit: extraneous newline,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868,727683868,src/rest.cpp
meshcollider,2021-10-13 04:18:10,"There are only two differences between BINARY and HEX:\n- `ssHeader.str()` and `HexStr(ssHeader)`\n- `""application/octet-stream""` vs `""text/plain""`\n\nIt could be written a lot more concisely as something like this:\n```cpp\ncase RetFormat::BINARY:\ncase RetFormat::HEX: {\n    CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n    for (const uint256& header : filter_headers) {\n      ",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091,727686091,src/rest.cpp
MarcoFalke,2021-10-13 04:54:47,"I think the real issue isn't whether `strtol` or something else is used, but whether parsing errors are ignored or not. `strtol` makes it easy to ignore them, so it seems reasonable to use our wrappers. (Or alternatively, add the error handling)",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281,727698281,src/rest.cpp
MarcoFalke,2021-10-13 05:09:13,"```suggestion\n        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION);\n```\n\nnit if you need to retouch. This shouldn't have any effect, since no txs are serialized?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209,727703209,src/rest.cpp
MarcoFalke,2021-10-13 05:11:08,"nit, if you need to re-touch, according to clang-format: \n\n```suggestion\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n{\n    if (!CheckWarmup(req)) {\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918,727703918,src/rest.cpp
TheBlueMatt,2021-10-13 17:14:35,"Ah, I'd misread John's comment at https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435 as referring to all braces, not just if ones, my bad.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246,728287246,src/rest.cpp
TheBlueMatt,2021-10-17 02:51:53,I don't believe this does anything for the 32-byte array on stack?,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312,730343312,src/rest.cpp
sipa,2021-10-17 02:53:19,"It doesn't make a difference, indeed.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426,730343426,src/rest.cpp
TheBlueMatt,2021-10-17 02:53:42,Unless its pressing I'd vaguely rather keep the code the same as the rest of the code in the same file. At least personally I don't find this more readable.,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458,730343458,src/rest.cpp
TheBlueMatt,2021-10-17 02:55:31,"This is now `const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};`, so good, I presume (though admittedly I don't really know *what* that does....mumbles about C++).",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635,730343635,src/rest.cpp
MarcoFalke,2021-10-17 08:46:05,Looks like you didn't remove this in the last force push?,https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712,730378712,src/rest.cpp
TheBlueMatt,2021-10-18 01:29:08,"Oops, I'd misread your comment here, I thought you were asking me to add the flags like they are elsewhere in the file. I'm a bit confused why they were added elsewhere in the file since this PR was opened if they should be removed now?",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278,730515278,src/rest.cpp
MarcoFalke,2021-10-18 08:23:40,"They were added in commit 412bab22b23036962509d2655b68cccd726b6ba4 in 2016. `RPCSerializationFlags` only affect txs (and thus blocks), but nothing else.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151,730682151,src/rest.cpp
kiminuo,2021-10-18 13:29:17,"nit: Is this check intentionally before `filtertype` checks? I would expect `filtertype` to be checked first, unless it is done on purpose for performance reasons.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696,730922696,src/rest.cpp
kiminuo,2021-10-18 13:40:28,"nit: The error message may also say something like ""Header count is invalid or it is out of acceptable range.."" as it happens quite regularly that somebody writes ""1OO"" instead of ""100"".",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199,730933199,src/rest.cpp
kiminuo,2021-10-18 13:42:33,"```suggestion\n    for (const CBlockIndex* pindex : headers) {\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154,730935154,src/rest.cpp
kiminuo,2021-10-18 13:42:47,"```suggestion\n    std::vector<const CBlockIndex*> headers;\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387,730935387,src/rest.cpp
kiminuo,2021-10-18 13:43:35,"```suggestion\n        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(""Header count out of acceptable range (1-%u): %s"", MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190,730936190,src/rest.cpp
practicalswift,2021-10-19 07:33:34,Any reason not to simply do the usual `clang-format -i src/rest.cpp`? :),https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305,731574305,src/rest.cpp
kiminuo,2021-10-19 07:56:27,"AFAIK Some violations of clang format in `rest.cpp` are from previous PRs. But in general, it would be a good thing.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017,731592017,src/rest.cpp
jnewbery,2021-10-20 16:08:05,"```suggestion\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n```",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750,732934750,src/rest.cpp
jnewbery,2021-10-20 16:23:13,"Would it make sense to do some sanity testing on the returned object? For example:\n\n```suggestion\n        obj = self.test_rest_request(f""/blockfilter/basic/{bb_hash}"", req_type=ReqType.BIN, ret_type=RetType.OBJ)\n        assert_greater_than(len(obj.read()), 0)\n```\n\nor perhaps even verify that the filter is the same as that returned by the `getblockfilter` RPC.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556,732947556,test/functional/interface_rest.py
jnewbery,2021-10-20 16:56:48,"Current style is to have the clause on the same line:\n\n```suggestion\n    if (!CheckWarmup(req)) return false;\n```\n\nor enclosed in braces:\n\n```suggestion\n    if (!CheckWarmup(req)) {\n        return false;\n    }\n```\n\nSame for `if (!CheckWarmup(req))` in `rest_block_filter()` below.",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076,732974076,src/rest.cpp
stickies-v,2021-10-20 18:13:43,"From my experience (and e.g. [this stackoverflow reponse](https://stackoverflow.com/a/31261026)), in a RESTful API path parameters are used to represent resources, and query parameters are used to control how this resource is being filtered/sorted/... To my understanding, `<COUNT>` does not represent a resource but rather a control on how many blockfilterheader resources to retrieve.\n\nWhat do ",https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180,733031180,doc/REST-interface.md
