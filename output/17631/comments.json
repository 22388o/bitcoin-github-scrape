[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559713149",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559713149",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559713149,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcxMzE0OQ==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:00:19Z",
    "updated_at": "2019-11-29T09:00:19Z",
    "author_association": "MEMBER",
    "body": "A test would be nice.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559713149/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721048",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559721048",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559721048,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyMTA0OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:24:12Z",
    "updated_at": "2019-11-29T09:29:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "After reading `doc/REST-interface.md` I'm not entirely clear about the assumed trust boundaries.\r\n\r\nWhat recommendations do we give to our users regarding exposing the REST endpoints publicly? Do the recommendations differ from our recommendations with regards to exposing the JSON-RPC endpoints publicly?\r\n\r\nAs I've understood it we regard the JSON-RPC interface as as an internal control plane only to be accessible by trusted clients. The assumption we're making from a trust boundary perspective seems to be that we assume that an untrusted clients will never be able to connect to the port serving the JSON-RPC interface (which is the same port as the REST interface).",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559721048/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723792",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559723792",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559723792,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyMzc5Mg==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:32:37Z",
    "updated_at": "2019-11-29T09:32:37Z",
    "author_association": "MEMBER",
    "body": "Concept ACK.\r\n\r\n> After reading doc/REST-interface.md I'm not entirely clear about the assumed trust boundaries.\r\n\r\nThat's a fair question (FWIW the limit has always been: only public data, no complex queries, do not parse JSON as input), but I'd suggest opening a new issue for it. Please keep this one for review of the code changes.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559723792/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559725358",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559725358",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559725358,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyNTM1OA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:37:16Z",
    "updated_at": "2019-11-29T09:37:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "@laanwj Without knowing if consumers are trusted or not it is pretty hard to review it from a security perspective :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559725358/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559726929",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559726929",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559726929,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTcyNjkyOQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T09:42:04Z",
    "updated_at": "2019-11-29T09:46:47Z",
    "author_association": "MEMBER",
    "body": "The REST interface is a lightweight interface for querying public data. Consumers are trusted but less so than on RPC (as they don't authenticate). I still wouldn't recommend exposing it directly to the internet. But maybe it's OK to open it \"publicly\" inside some LAN or VPN that your applications run in.\r\n\r\nThis is my last general comment on this, please open a new issue if you want to continue this discussion.\r\n\r\n> `doc/REST-interface.md`\r\n\r\nSpeaking of which, please update the documentation to mention this new call.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559726929/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559867818",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559867818",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559867818,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg2NzgxOA==",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?u=71263a00d1269c7f0ed6660aa0c15c894df78a88&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T19:21:29Z",
    "updated_at": "2019-11-29T19:21:29Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559867818/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559869919",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-559869919",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 559869919,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU1OTg2OTkxOQ==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-29T19:37:25Z",
    "updated_at": "2019-11-29T19:37:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "Added a basic sanity test, redid the way headers work to make it easy to get many of them just like the /headers/ request.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/559869919/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560159029",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-560159029",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 560159029,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MDE1OTAyOQ==",
    "user": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?u=eab5d0cdbb6cc25087cb61d4ca4a6f85255f42a7&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-01T21:06:04Z",
    "updated_at": "2019-12-01T21:06:04Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/560159029/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562195592",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-562195592",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 562195592,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU2MjE5NTU5Mg==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-12-05T16:05:19Z",
    "updated_at": "2021-10-14T12:17:47Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/562195592/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622487014",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-622487014",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 622487014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYyMjQ4NzAxNA==",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-01T17:40:16Z",
    "updated_at": "2020-05-01T17:40:16Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/622487014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630288035",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-630288035",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 630288035,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYzMDI4ODAzNQ==",
    "user": {
      "login": "naumenkogs",
      "id": 7975071,
      "node_id": "MDQ6VXNlcjc5NzUwNzE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7975071?u=06eb9ae4f9b3f954056098860decccbf1340e40f&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/naumenkogs",
      "html_url": "https://github.com/naumenkogs",
      "followers_url": "https://api.github.com/users/naumenkogs/followers",
      "following_url": "https://api.github.com/users/naumenkogs/following{/other_user}",
      "gists_url": "https://api.github.com/users/naumenkogs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/naumenkogs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/naumenkogs/subscriptions",
      "organizations_url": "https://api.github.com/users/naumenkogs/orgs",
      "repos_url": "https://api.github.com/users/naumenkogs/repos",
      "events_url": "https://api.github.com/users/naumenkogs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/naumenkogs/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-05-18T16:14:26Z",
    "updated_at": "2020-05-18T16:14:26Z",
    "author_association": "MEMBER",
    "body": "Code review ACK 16d8d2da598a7d234275454f9e053ed074eebf3f.\r\nPerhaps would be good to address the style suggestion above.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/630288035/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940633673",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940633673",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 940633673,
    "node_id": "IC_kwDOABII5844EO5J",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T03:58:01Z",
    "updated_at": "2021-10-12T03:58:01Z",
    "author_association": "CONTRIBUTOR",
    "body": "concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nshort of deprecating it, i don't think we should add new data items.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940633673/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940638949",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940638949",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 940638949,
    "node_id": "IC_kwDOABII5844EQLl",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T04:09:15Z",
    "updated_at": "2021-10-12T04:09:15Z",
    "author_association": "CONTRIBUTOR",
    "body": "Ah! I'd missed the request for doc updates, sorry about that.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940638949/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940639460",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940639460",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 940639460,
    "node_id": "IC_kwDOABII5844EQTk",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T04:10:14Z",
    "updated_at": "2021-10-12T04:10:14Z",
    "author_association": "CONTRIBUTOR",
    "body": "> concept NACK: i'm mostly of the opinion we should deprecate the rest API and make it the responsibility of a proxy server.\r\n\r\nThat's a *huge* pain. The REST interface is nice precisely *because* you can build a proxy server for it easy - its like 10 lines of nginx.conf. JSON-RPC isn't a nice protocol that is broadly supported, its basically a Bitcoin Core-only thing at this point.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940639460/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940641139",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940641139",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 940641139,
    "node_id": "IC_kwDOABII5844EQtz",
    "user": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?u=8cdd8653982252593843d7369ecfebe432b89768&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T04:13:53Z",
    "updated_at": "2021-10-12T04:13:53Z",
    "author_association": "CONTRIBUTOR",
    "body": "exposing this rest endpoint over NGINX is precisely how our rest endpoint should not be use, so that only serves to add confidence to my notion that it shouldn't be a part of core. A \"proper\" proxy to the rest interface would sanitize all requests.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940641139/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940642018",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-940642018",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 940642018,
    "node_id": "IC_kwDOABII5844EQ7i",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T04:16:00Z",
    "updated_at": "2021-10-12T04:16:00Z",
    "author_association": "CONTRIBUTOR",
    "body": "You can sanitize in NGINX too, its probably easier than some python script. But, seriously, that notion is absurd - \"here, you have a running production daemon, run this hacked-together python script to make its API usable\" is not the same as \"we don't want to vouch for the security of this thing, so make sure you pay close attention if you want to expose calls to the outside\".",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/940642018/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941240622",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 941240622,
    "node_id": "IC_kwDOABII5844GjEu",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-12T17:56:07Z",
    "updated_at": "2021-10-12T17:56:07Z",
    "author_association": "CONTRIBUTOR",
    "body": "> This pull request conflicts with the target branch and needs rebase.\r\n\r\nLol come on @MarcoFalke...merging 5 day old lint fixes against conflicting feature PRs.....",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941240622/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 1,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941919751",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941919751",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 941919751,
    "node_id": "IC_kwDOABII5844JI4H",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-13T04:52:08Z",
    "updated_at": "2021-10-13T04:52:08Z",
    "author_association": "MEMBER",
    "body": "re https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-941240622\r\n\r\nMerge conflicts are certainly frustrating and I want to apologize for that. Though, the conflicting pull was not a \"lint fix\", but a bug fix. Sure, there was no bug report, but I think that bugs should still be fixed once they are known. When the pull was created, I didn't expect a conflict and it seems there was no activity here for more than a year (https://github.com/bitcoin/bitcoin/pull/17631#ref-pullrequest-1019792843). When the pull was merged, it had several ACKs and this one had none (IIRC). Also, it seems there was a review comment about the integer parsing still unsolved: https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583. (A sister pull request #23227 was also merged after 4 days with 3 ACKs, even though there was a conflict, so I think this is generally fine). ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/941919751/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945039954",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945039954",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 945039954,
    "node_id": "IC_kwDOABII5844VCpS",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-17T02:55:27Z",
    "updated_at": "2021-10-17T02:55:27Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945039954/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945040154",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945040154",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 945040154,
    "node_id": "IC_kwDOABII5844VCsa",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-17T02:57:27Z",
    "updated_at": "2021-10-17T02:59:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Addressed feedback, diff since the previous round of acks:\r\n\r\n```diff\r\n$ git diff-tree -U1 7cf4e22080 2b64fa3251\r\ndiff --git a/src/rest.cpp b/src/rest.cpp\r\nindex dd1be52f86..18ae350630 100644\r\n--- a/src/rest.cpp\r\n+++ b/src/rest.cpp\r\n@@ -343,3 +343,4 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\r\n \r\n-static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -414,3 +415,3 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     case RetFormat::BINARY: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -424,5 +425,4 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n-        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\r\n         for (const uint256& header : filter_headers) {\r\n@@ -451,6 +451,6 @@ static bool rest_filter_header(const std::any& context, HTTPRequest* req, const\r\n     }\r\n-\r\n }\r\n \r\n-static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\r\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n+{\r\n     if (!CheckWarmup(req))\r\n@@ -523,3 +523,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::HEX: {\r\n@@ -533,3 +532,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     case RetFormat::JSON: {\r\n@@ -542,3 +540,2 @@ static bool rest_block_filter(const std::any& context, HTTPRequest* req, const s\r\n     }\r\n-\r\n     default: {\r\n$\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945040154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945175070",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-945175070",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 945175070,
    "node_id": "IC_kwDOABII5844Vjoe",
    "user": {
      "login": "dergoegge",
      "id": 8077169,
      "node_id": "MDQ6VXNlcjgwNzcxNjk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8077169?u=420950872add6349d28ea3bb41cc181c22b2d671&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dergoegge",
      "html_url": "https://github.com/dergoegge",
      "followers_url": "https://api.github.com/users/dergoegge/followers",
      "following_url": "https://api.github.com/users/dergoegge/following{/other_user}",
      "gists_url": "https://api.github.com/users/dergoegge/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dergoegge/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dergoegge/subscriptions",
      "organizations_url": "https://api.github.com/users/dergoegge/orgs",
      "repos_url": "https://api.github.com/users/dergoegge/repos",
      "events_url": "https://api.github.com/users/dergoegge/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dergoegge/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-17T18:48:25Z",
    "updated_at": "2021-10-17T18:48:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "ACK 2b64fa3251ac5ff4b4d174f1f0be7226490dce87 - Adding blockfilters to the REST interface is analogous to serving other public data such as transactions or blocks.\r\n\r\nWould be nice to have the code DRY'd up at some point but i would consider it fine for now as that is true for many parts of `rest.cpp` . \r\n\r\nConsider updating the PR description with the updated endpoint paths. ie: `/rest/blockfilterheaders/basic/<COUNT>/...` instead of `/rest/blockfilter/basic/header/...`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/945175070/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947919724",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#issuecomment-947919724",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/17631",
    "id": 947919724,
    "node_id": "IC_kwDOABII5844gBts",
    "user": {
      "login": "amovfx",
      "id": 45839100,
      "node_id": "MDQ6VXNlcjQ1ODM5MTAw",
      "avatar_url": "https://avatars.githubusercontent.com/u/45839100?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amovfx",
      "html_url": "https://github.com/amovfx",
      "followers_url": "https://api.github.com/users/amovfx/followers",
      "following_url": "https://api.github.com/users/amovfx/following{/other_user}",
      "gists_url": "https://api.github.com/users/amovfx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amovfx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amovfx/subscriptions",
      "organizations_url": "https://api.github.com/users/amovfx/orgs",
      "repos_url": "https://api.github.com/users/amovfx/repos",
      "events_url": "https://api.github.com/users/amovfx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amovfx/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2021-10-20T18:16:45Z",
    "updated_at": "2021-10-20T18:16:45Z",
    "author_association": "NONE",
    "body": "I read this in the pr-review-club. I am still learning.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/947919724/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265",
    "pull_request_review_id": 324757830,
    "id": 352165265,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjE2NTI2NQ==",
    "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit, the use of a single line if statement would be better (including the other one line statements as well)",
    "created_at": "2019-11-29T14:55:44Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352165265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352165265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 305,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089",
    "pull_request_review_id": 324833271,
    "id": 352227089,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjIyNzA4OQ==",
    "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would be much too long a line to do that.",
    "created_at": "2019-11-29T18:57:58Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352227089"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352227089/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 305,
    "side": "RIGHT",
    "in_reply_to_id": 352165265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960",
    "pull_request_review_id": 324867658,
    "id": 352255960,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjI1NTk2MA==",
    "diff_hunk": "@@ -265,6 +267,112 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/requesttype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/requesttype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 32,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "661f03f03576b3588d6aa973b6c731b72e50bef8",
    "user": {
      "login": "emilengler",
      "id": 12272949,
      "node_id": "MDQ6VXNlcjEyMjcyOTQ5",
      "avatar_url": "https://avatars.githubusercontent.com/u/12272949?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/emilengler",
      "html_url": "https://github.com/emilengler",
      "followers_url": "https://api.github.com/users/emilengler/followers",
      "following_url": "https://api.github.com/users/emilengler/following{/other_user}",
      "gists_url": "https://api.github.com/users/emilengler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/emilengler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/emilengler/subscriptions",
      "organizations_url": "https://api.github.com/users/emilengler/orgs",
      "repos_url": "https://api.github.com/users/emilengler/repos",
      "events_url": "https://api.github.com/users/emilengler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/emilengler/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh sorry I meant to ignore the brackets...",
    "created_at": "2019-11-29T23:30:54Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352255960"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352255960/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 305,
    "side": "RIGHT",
    "in_reply_to_id": 352165265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195",
    "pull_request_review_id": 324923896,
    "id": 352325195,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTE5NQ==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "paymog",
      "id": 1986950,
      "node_id": "MDQ6VXNlcjE5ODY5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paymog",
      "html_url": "https://github.com/paymog",
      "followers_url": "https://api.github.com/users/paymog/followers",
      "following_url": "https://api.github.com/users/paymog/following{/other_user}",
      "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
      "organizations_url": "https://api.github.com/users/paymog/orgs",
      "repos_url": "https://api.github.com/users/paymog/repos",
      "events_url": "https://api.github.com/users/paymog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paymog/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think it would be useful if this error message provided the user with the valid range.",
    "created_at": "2019-12-01T07:30:23Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325195"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325195/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 300,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211",
    "pull_request_review_id": 324923896,
    "id": 352325211,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTIxMQ==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "paymog",
      "id": 1986950,
      "node_id": "MDQ6VXNlcjE5ODY5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paymog",
      "html_url": "https://github.com/paymog",
      "followers_url": "https://api.github.com/users/paymog/followers",
      "following_url": "https://api.github.com/users/paymog/following{/other_user}",
      "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
      "organizations_url": "https://api.github.com/users/paymog/orgs",
      "repos_url": "https://api.github.com/users/paymog/repos",
      "events_url": "https://api.github.com/users/paymog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paymog/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "should `2000` be turned into a constant?",
    "created_at": "2019-12-01T07:31:01Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325211"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325211/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 299,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362",
    "pull_request_review_id": 324923896,
    "id": 352325362,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTM2Mg==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "paymog",
      "id": 1986950,
      "node_id": "MDQ6VXNlcjE5ODY5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paymog",
      "html_url": "https://github.com/paymog",
      "followers_url": "https://api.github.com/users/paymog/followers",
      "following_url": "https://api.github.com/users/paymog/following{/other_user}",
      "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
      "organizations_url": "https://api.github.com/users/paymog/orgs",
      "repos_url": "https://api.github.com/users/paymog/repos",
      "events_url": "https://api.github.com/users/paymog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paymog/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "If I'm reading the code right it looks like json is a valid output format too along with binary and hex.",
    "created_at": "2019-12-01T07:35:43Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325362"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325362/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420",
    "pull_request_review_id": 324923896,
    "id": 352325420,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQyMA==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
    "path": "src/rest.cpp",
    "position": 181,
    "original_position": 149,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "paymog",
      "id": 1986950,
      "node_id": "MDQ6VXNlcjE5ODY5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paymog",
      "html_url": "https://github.com/paymog",
      "followers_url": "https://api.github.com/users/paymog/followers",
      "following_url": "https://api.github.com/users/paymog/following{/other_user}",
      "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
      "organizations_url": "https://api.github.com/users/paymog/orgs",
      "repos_url": "https://api.github.com/users/paymog/repos",
      "events_url": "https://api.github.com/users/paymog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paymog/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "the code for extracting `filtertype`, `index` and `blockhash` is shared between these two functions. Should this extraction code be pulled out into their own functions?",
    "created_at": "2019-12-01T07:37:17Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325420"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 479,
    "original_line": 479,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461",
    "pull_request_review_id": 324923896,
    "id": 352325461,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjMyNTQ2MQ==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 159,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "paymog",
      "id": 1986950,
      "node_id": "MDQ6VXNlcjE5ODY5NTA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1986950?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paymog",
      "html_url": "https://github.com/paymog",
      "followers_url": "https://api.github.com/users/paymog/followers",
      "following_url": "https://api.github.com/users/paymog/following{/other_user}",
      "gists_url": "https://api.github.com/users/paymog/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paymog/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paymog/subscriptions",
      "organizations_url": "https://api.github.com/users/paymog/orgs",
      "repos_url": "https://api.github.com/users/paymog/repos",
      "events_url": "https://api.github.com/users/paymog/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paymog/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: can the error message be changed to `\"Block \" + uriParts[1] + \" not found\"`?",
    "created_at": "2019-12-01T07:38:27Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352325461"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352325461/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 492,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152",
    "pull_request_review_id": 324976238,
    "id": 352386152,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjE1Mg==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {",
    "path": "src/rest.cpp",
    "position": 181,
    "original_position": 149,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Lets leave DRY'ing up rest.cpp for a separate commit. I played with it a bit and there isn't an obvious solution here that doesn't end up adding more lines, but the whole of REST probably could get DRY'd up a lot especially in the results-providing section.",
    "created_at": "2019-12-02T00:25:23Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386152"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 479,
    "original_line": 479,
    "side": "RIGHT",
    "in_reply_to_id": 352325420
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354",
    "pull_request_review_id": 324976486,
    "id": 352386354,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM1NA==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm, its the same limits as for headers (the code was copied from that section above). Not sure where to document this given the lack of equivalent documentation like we have in RPC where we can fail with help text. Maybe we should have some kind of much more informative general help system like we do for RPC, though its obviously out of scope here.",
    "created_at": "2019-12-02T00:28:17Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386354"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 300,
    "side": "RIGHT",
    "in_reply_to_id": 352325195
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378",
    "pull_request_review_id": 324976527,
    "id": 352386378,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjM3OA==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 46,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ehh, its the net limit, and dunno where to put it? Not really worth it.",
    "created_at": "2019-12-02T00:28:43Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386378"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386378/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 299,
    "side": "RIGHT",
    "in_reply_to_id": 352325211
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428",
    "pull_request_review_id": 324976597,
    "id": 352386428,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQyOA==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 119,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm, good catch. Looks like headers is busted too, I fixed both.",
    "created_at": "2019-12-02T00:29:36Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386428"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386428/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 372,
    "side": "RIGHT",
    "in_reply_to_id": 352325362
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459",
    "pull_request_review_id": 324976635,
    "id": 352386459,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MjM4NjQ1OQ==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader.begin(), ssHeader.end()) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: .bin, .hex)\");\n+    }\n+    }\n+\n+}\n+static bool rest_block_filter(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/filtertype/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        LOCK(cs_main);\n+        block_index = LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uriParts[1] + \" not found\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 159,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Hmm, its coped from the block code, so to keep it the same everywhere I'll leave it.",
    "created_at": "2019-12-02T00:30:05Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r352386459"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/352386459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 492,
    "side": "RIGHT",
    "in_reply_to_id": 352325461
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872",
    "pull_request_review_id": 326321878,
    "id": 353320872,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM1MzMyMDg3Mg==",
    "diff_hunk": "@@ -265,6 +267,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "6f2e02f92ebffb06392bd5b84387f6f11d2a80ff",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "similarly, it'd make sense to define a constant for this, and use it in both places, instead of hardcoding 2000 (which I guess is just a sanity limit)",
    "created_at": "2019-12-03T17:31:58Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r353320872"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/353320872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 300,
    "side": "RIGHT",
    "in_reply_to_id": 352325195
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473",
    "pull_request_review_id": 338198378,
    "id": 362901473,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjkwMTQ3Mw==",
    "diff_hunk": "@@ -128,8 +130,8 @@ static bool rest_headers(HTTPRequest* req,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     long count = strtol(path[0].c_str(), nullptr, 10);\n-    if (count < 1 || count > 2000)\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (count < 1 || count > MAX_HEADERS_RESULTS)\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of acceptable range (1-2000): \" + path[0]);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 20,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "3ab6abcc4dd1a70f30d1341fe21702e2a8b417f5",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Use `%u` here instead of `2000`?",
    "created_at": "2020-01-03T17:54:20Z",
    "updated_at": "2020-05-02T02:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r362901473"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/362901473/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 154,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988",
    "pull_request_review_id": 412902113,
    "id": 425996988,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5Njk4OA==",
    "diff_hunk": "@@ -27,6 +29,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static const unsigned int MAX_HEADERS_RESULTS = 2000;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: `constrexpr`",
    "created_at": "2020-05-15T19:09:31Z",
    "updated_at": "2020-05-15T19:47:32Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425996988"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425996988/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 32,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435",
    "pull_request_review_id": 412902113,
    "id": 425997435,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTk5NzQzNQ==",
    "diff_hunk": "@@ -285,6 +288,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Since this is all new code, can you adhere to style guide? if blocks with braces or on same lines, variable names in camel case, etc.",
    "created_at": "2020-05-15T19:10:31Z",
    "updated_at": "2020-05-15T19:47:33Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/425997435/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 291,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001",
    "pull_request_review_id": 776796706,
    "id": 726682001,
    "node_id": "PRRC_kwDOABII584rUEmR",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "`<>` around parameters would be clearer",
    "created_at": "2021-10-12T00:52:35Z",
    "updated_at": "2021-10-12T01:16:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726682001"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726682001/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 300,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583",
    "pull_request_review_id": 776796706,
    "id": 726684583,
    "node_id": "PRRC_kwDOABII584rUFOn",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": " `strtol` -> `ParseInt32` (#20457)",
    "created_at": "2021-10-12T01:00:34Z",
    "updated_at": "2021-10-12T01:16:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726684583"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726684583/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389",
    "pull_request_review_id": 776796706,
    "id": 726688389,
    "node_id": "PRRC_kwDOABII584rUGKF",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || count > 2000) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + uriParts[1]);\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(count);\n+    {\n+        LOCK(cs_main);\n+        const CBlockIndex* pindex = LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && ::ChainActive().Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == (unsigned long)count)\n+                break;\n+            pindex = ::ChainActive().Next(pindex);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 59,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: #21866\r\n```\r\nconst CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\r\nCChain& active_chain = chainman.ActiveChain();\r\n...\r\npindex = active_chain.Next(pindex);\r\n```\r\n",
    "created_at": "2021-10-12T01:13:45Z",
    "updated_at": "2021-10-12T02:36:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726688389"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726688389/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 332,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019",
    "pull_request_review_id": 776805612,
    "id": 726690019,
    "node_id": "PRRC_kwDOABII584rUGjj",
    "diff_hunk": "@@ -280,6 +280,9 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(\"/headers/5/{}\".format(bb_hash))\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(\"/blockfilterheaders/basic/5/{}\".format(bb_hash))\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(\"/blockfilter/basic/{}\".format(bb_hash), req_type=ReqType.BIN, ret_type=RetType.OBJ)",
    "path": "test/functional/interface_rest.py",
    "position": null,
    "original_position": 15,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "16d8d2da598a7d234275454f9e053ed074eebf3f",
    "user": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n```",
    "created_at": "2021-10-12T01:19:07Z",
    "updated_at": "2021-10-12T01:19:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726690019"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726690019/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 285,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370",
    "pull_request_review_id": 776849069,
    "id": 726728370,
    "node_id": "PRRC_kwDOABII584rUP6y",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 27,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Heh, that's new since this PR was opened :)",
    "created_at": "2021-10-12T03:16:54Z",
    "updated_at": "2021-10-12T03:16:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726728370"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726728370/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 300,
    "side": "RIGHT",
    "in_reply_to_id": 726682001
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173",
    "pull_request_review_id": 776850021,
    "id": 726729173,
    "node_id": "PRRC_kwDOABII584rUQHV",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This isn't done in `rest_headers` either, which this code was copied from. Should both change or is it supposed to be strtol?",
    "created_at": "2021-10-12T03:19:25Z",
    "updated_at": "2021-10-12T03:19:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726729173"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726729173/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT",
    "in_reply_to_id": 726684583
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379",
    "pull_request_review_id": 777141981,
    "id": 726958379,
    "node_id": "PRRC_kwDOABII584rVIEr",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think its just another new code preference, to phase out locale-dependent functions. Since you're touching up `MAX_HEADERS_RESULTS` in `rest_headers` anyway, you could do this there too. Up to you.",
    "created_at": "2021-10-12T09:56:16Z",
    "updated_at": "2021-10-12T09:56:16Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r726958379"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/726958379/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT",
    "in_reply_to_id": 726684583
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127",
    "pull_request_review_id": 777678725,
    "id": 727358127,
    "node_id": "PRRC_kwDOABII584rWpqv",
    "diff_hunk": "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it intentionally redefined rather than moving `net_processing`'s to a header?",
    "created_at": "2021-10-12T17:39:07Z",
    "updated_at": "2021-10-12T17:39:07Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727358127"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727358127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240",
    "pull_request_review_id": 777680292,
    "id": 727359240,
    "node_id": "PRRC_kwDOABII584rWp8I",
    "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Variable names are supposed to be snake case like you had before...",
    "created_at": "2021-10-12T17:40:56Z",
    "updated_at": "2021-10-12T17:40:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727359240"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727359240/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 356,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515",
    "pull_request_review_id": 777683353,
    "id": 727361515,
    "node_id": "PRRC_kwDOABII584rWqfr",
    "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Better to leave it uninitialised here so failure to do so below (in a future PR) will hit warnings.",
    "created_at": "2021-10-12T17:44:19Z",
    "updated_at": "2021-10-12T17:44:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727361515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727361515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 377,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152",
    "pull_request_review_id": 777690565,
    "id": 727367152,
    "node_id": "PRRC_kwDOABII584rWr3w",
    "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "John seems to disagree https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435",
    "created_at": "2021-10-12T17:52:28Z",
    "updated_at": "2021-10-12T17:52:28Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367152"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367152/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 356,
    "side": "RIGHT",
    "in_reply_to_id": 727359240
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824",
    "pull_request_review_id": 777691396,
    "id": 727367824,
    "node_id": "PRRC_kwDOABII584rWsCQ",
    "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;\n+    if (!ParseHashStr(uriParts[2], blockHash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);\n+    if (count < 1 || (unsigned int)count > MAX_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_HEADERS_RESULTS, uriParts[1]));\n+    }\n+\n+\n+    const CBlockIndex* tip = nullptr;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 79,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Actually, this variable is unused?",
    "created_at": "2021-10-12T17:53:23Z",
    "updated_at": "2021-10-12T17:53:23Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727367824"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727367824/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 377,
    "side": "RIGHT",
    "in_reply_to_id": 727361515
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694",
    "pull_request_review_id": 777693686,
    "id": 727369694,
    "node_id": "PRRC_kwDOABII584rWsfe",
    "diff_hunk": "@@ -30,6 +32,7 @@\n #include <univalue.h>\n \n static const size_t MAX_GETUTXOS_OUTPOINTS = 15; //allow a max of 15 outpoints to be queried at once\n+static constexpr unsigned int MAX_HEADERS_RESULTS = 2000;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 17,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good catch, renamed it here.",
    "created_at": "2021-10-12T17:56:01Z",
    "updated_at": "2021-10-12T17:56:01Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727369694"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727369694/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 35,
    "side": "RIGHT",
    "in_reply_to_id": 727358127
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160",
    "pull_request_review_id": 777732533,
    "id": 727399160,
    "node_id": "PRRC_kwDOABII584rWzr4",
    "diff_hunk": "@@ -335,6 +338,216 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 blockHash;",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 58,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "fbfbb41a4f97b0800c3e35b3600c2e82c3f7e03f",
    "user": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Must be a typo? https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md#coding-style-c",
    "created_at": "2021-10-12T18:40:50Z",
    "updated_at": "2021-10-12T18:40:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727399160"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727399160/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 356,
    "side": "RIGHT",
    "in_reply_to_id": 727359240
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427",
    "pull_request_review_id": 778070991,
    "id": 727683427,
    "node_id": "PRRC_kwDOABII584rX5Fj",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
    "path": "src/rest.cpp",
    "position": 113,
    "original_position": 112,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "could `std::move` this",
    "created_at": "2021-10-13T04:09:43Z",
    "updated_at": "2021-10-13T04:30:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683427"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683427/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 411,
    "original_line": 411,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868",
    "pull_request_review_id": 778070991,
    "id": 727683868,
    "node_id": "PRRC_kwDOABII584rX5Mc",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 127,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: extraneous newline",
    "created_at": "2021-10-13T04:11:08Z",
    "updated_at": "2021-10-13T04:30:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727683868"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727683868/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 425,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091",
    "pull_request_review_id": 778070991,
    "id": 727686091,
    "node_id": "PRRC_kwDOABII584rX5vL",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
    "path": "src/rest.cpp",
    "position": 134,
    "original_position": 134,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "There are only two differences between BINARY and HEX:\r\n- `ssHeader.str()` and `HexStr(ssHeader)`\r\n- `\"application/octet-stream\"` vs `\"text/plain\"`\r\n\r\nIt could be written a lot more concisely as something like this:\r\n```cpp\r\ncase RetFormat::BINARY:\r\ncase RetFormat::HEX: {\r\n    CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\r\n    for (const uint256& header : filter_headers) {\r\n        ssHeader << header;\r\n    }\r\n\r\n    std::string header_string = (rf == RetFormat::HEX) ? HexStr(ssHeader) : ssHeader.str();\r\n    std::string content_type = (rf == RetFormat::HEX) ? \"text/plain\" : \"application/octet-stream\";\r\n    req->WriteHeader(\"Content-Type\", content_type);\r\n    req->WriteReply(HTTP_OK, header_string);\r\n    return true;\r\n}\r\n```",
    "created_at": "2021-10-13T04:18:10Z",
    "updated_at": "2021-10-13T04:36:41Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727686091"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727686091/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 432,
    "original_line": 432,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281",
    "pull_request_review_id": 778088419,
    "id": 727698281,
    "node_id": "PRRC_kwDOABII584rX8tp",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think the real issue isn't whether `strtol` or something else is used, but whether parsing errors are ignored or not. `strtol` makes it easy to ignore them, so it seems reasonable to use our wrappers. (Or alternatively, add the error handling)",
    "created_at": "2021-10-13T04:54:47Z",
    "updated_at": "2021-10-13T04:54:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727698281"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727698281/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT",
    "in_reply_to_id": 726684583
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209",
    "pull_request_review_id": 778094438,
    "id": 727703209,
    "node_id": "PRRC_kwDOABII584rX96p",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
    "path": "src/rest.cpp",
    "position": 227,
    "original_position": 228,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION);\r\n```\r\n\r\nnit if you need to retouch. This shouldn't have any effect, since no txs are serialized?",
    "created_at": "2021-10-13T05:09:13Z",
    "updated_at": "2021-10-13T05:11:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703209"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703209/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 525,
    "original_line": 525,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918",
    "pull_request_review_id": 778094438,
    "id": 727703918,
    "node_id": "PRRC_kwDOABII584rX-Fu",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit, if you need to re-touch, according to clang-format: \r\n\r\n```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n{\r\n    if (!CheckWarmup(req)) {\r\n```",
    "created_at": "2021-10-13T05:11:08Z",
    "updated_at": "2021-10-13T05:11:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r727703918"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/727703918/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 344,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 346,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246",
    "pull_request_review_id": 778878987,
    "id": 728287246,
    "node_id": "PRRC_kwDOABII584raMgO",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 47,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Ah, I'd misread John's comment at https://github.com/bitcoin/bitcoin/pull/17631#discussion_r425997435 as referring to all braces, not just if ones, my bad.",
    "created_at": "2021-10-13T17:14:35Z",
    "updated_at": "2021-10-13T17:14:36Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r728287246"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/728287246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": 344,
    "start_side": "RIGHT",
    "line": null,
    "original_line": 346,
    "side": "RIGHT",
    "in_reply_to_id": 727703918
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312",
    "pull_request_review_id": 781403824,
    "id": 730343312,
    "node_id": "PRRC_kwDOABII584riCeQ",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
    "path": "src/rest.cpp",
    "position": 113,
    "original_position": 112,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't believe this does anything for the 32-byte array on stack?",
    "created_at": "2021-10-17T02:51:53Z",
    "updated_at": "2021-10-17T02:51:53Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343312"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343312/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 411,
    "original_line": 411,
    "side": "RIGHT",
    "in_reply_to_id": 727683427
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426",
    "pull_request_review_id": 781403879,
    "id": 730343426,
    "node_id": "PRRC_kwDOABII584riCgC",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);",
    "path": "src/rest.cpp",
    "position": 113,
    "original_position": 112,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It doesn't make a difference, indeed.",
    "created_at": "2021-10-17T02:53:19Z",
    "updated_at": "2021-10-17T02:53:20Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343426"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343426/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 411,
    "original_line": 411,
    "side": "RIGHT",
    "in_reply_to_id": 727683427
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458",
    "pull_request_review_id": 781403889,
    "id": 730343458,
    "node_id": "PRRC_kwDOABII584riCgi",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";",
    "path": "src/rest.cpp",
    "position": 134,
    "original_position": 134,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "c248fc938d04f2c4418eba907f041099416714f7",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Unless its pressing I'd vaguely rather keep the code the same as the rest of the code in the same file. At least personally I don't find this more readable.",
    "created_at": "2021-10-17T02:53:42Z",
    "updated_at": "2021-10-17T02:53:42Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343458"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343458/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 432,
    "original_line": 432,
    "side": "RIGHT",
    "in_reply_to_id": 727686091
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635",
    "pull_request_review_id": 781403938,
    "id": 730343635,
    "node_id": "PRRC_kwDOABII584riCjT",
    "diff_hunk": "@@ -285,6 +287,206 @@ static bool rest_block_notxdetails(HTTPRequest* req, const std::string& strURIPa\n     return rest_block(req, strURIPart, false);\n }\n \n+static bool rest_filter_header(HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uriParts;\n+    boost::split(uriParts, param, boost::is_any_of(\"/\"));\n+    if (uriParts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/filtertype/count/blockhash\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uriParts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uriParts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uriParts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uriParts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uriParts[0]);\n+    }\n+\n+    long count = strtol(uriParts[1].c_str(), nullptr, 10);",
    "path": "src/rest.cpp",
    "position": null,
    "original_position": 45,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "03d3b44e22887de65c168b3fec524b6309a48659",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This is now `const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};`, so good, I presume (though admittedly I don't really know *what* that does....mumbles about C++).",
    "created_at": "2021-10-17T02:55:31Z",
    "updated_at": "2021-10-17T02:55:31Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730343635"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730343635/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 369,
    "side": "RIGHT",
    "in_reply_to_id": 726684583
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712",
    "pull_request_review_id": 781423810,
    "id": 730378712,
    "node_id": "PRRC_kwDOABII584riLHY",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
    "path": "src/rest.cpp",
    "position": 227,
    "original_position": 228,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Looks like you didn't remove this in the last force push?",
    "created_at": "2021-10-17T08:46:05Z",
    "updated_at": "2021-10-17T08:46:06Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730378712"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730378712/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 525,
    "original_line": 525,
    "side": "RIGHT",
    "in_reply_to_id": 727703209
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278",
    "pull_request_review_id": 781524205,
    "id": 730515278,
    "node_id": "PRRC_kwDOABII584risdO",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
    "path": "src/rest.cpp",
    "position": 227,
    "original_position": 228,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oops, I'd misread your comment here, I thought you were asking me to add the flags like they are elsewhere in the file. I'm a bit confused why they were added elsewhere in the file since this PR was opened if they should be removed now?",
    "created_at": "2021-10-18T01:29:08Z",
    "updated_at": "2021-10-18T01:29:08Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730515278"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730515278/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 525,
    "original_line": 525,
    "side": "RIGHT",
    "in_reply_to_id": 727703209
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151",
    "pull_request_review_id": 781735874,
    "id": 730682151,
    "node_id": "PRRC_kwDOABII584rjVMn",
    "diff_hunk": "@@ -337,6 +340,213 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {\n+        uint256 filter_header;\n+        if (!index->LookupFilterHeader(pindex, filter_header)) {\n+            std::string errmsg = \"Filter not found.\";\n+\n+            if (!index_ready) {\n+                errmsg += \" Block filters are still in the process of being indexed.\";\n+            } else {\n+                errmsg += \" This error is unexpected and indicates index corruption.\";\n+            }\n+\n+            return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+        }\n+        filter_headers.push_back(filter_header);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string binaryHeader = ssHeader.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryHeader);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssHeader(SER_NETWORK, PROTOCOL_VERSION);\n+        for (const uint256& header : filter_headers) {\n+            ssHeader << header;\n+        }\n+\n+        std::string strHex = HexStr(ssHeader) + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"text/plain\");\n+        req->WriteReply(HTTP_OK, strHex);\n+        return true;\n+    }\n+    case RetFormat::JSON: {\n+        UniValue jsonHeaders(UniValue::VARR);\n+        for (const uint256& header : filter_headers) {\n+            jsonHeaders.push_back(header.GetHex());\n+        }\n+\n+        std::string strJSON = jsonHeaders.write() + \"\\n\";\n+        req->WriteHeader(\"Content-Type\", \"application/json\");\n+        req->WriteReply(HTTP_OK, strJSON);\n+        return true;\n+    }\n+    default: {\n+        return RESTERR(req, HTTP_NOT_FOUND, \"output format not found (available: \" + AvailableDataFormatsString() + \")\");\n+    }\n+    }\n+\n+}\n+\n+static bool rest_block_filter(const std::any& context, HTTPRequest* req, const std::string& strURIPart) {\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    //request is sent over URI scheme /rest/blockfilter/filtertype/blockhash\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 2) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilter/<filtertype>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[1], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[1]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const CBlockIndex* block_index;\n+    bool block_was_connected;\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        block_index = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        if (!block_index) {\n+            return RESTERR(req, HTTP_NOT_FOUND, uri_parts[1] + \" not found\");\n+        }\n+        block_was_connected = block_index->IsValid(BLOCK_VALID_SCRIPTS);\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    BlockFilter filter;\n+    if (!index->LookupFilter(block_index, filter)) {\n+        std::string errmsg = \"Filter not found.\";\n+\n+        if (!block_was_connected) {\n+            errmsg += \" Block was not connected to active chain.\";\n+        } else if (!index_ready) {\n+            errmsg += \" Block filters are still in the process of being indexed.\";\n+        } else {\n+            errmsg += \" This error is unexpected and indicates index corruption.\";\n+        }\n+\n+        return RESTERR(req, HTTP_NOT_FOUND, errmsg);\n+    }\n+\n+    switch (rf) {\n+    case RetFormat::BINARY: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());\n+        ssResp << filter;\n+\n+        std::string binaryResp = ssResp.str();\n+        req->WriteHeader(\"Content-Type\", \"application/octet-stream\");\n+        req->WriteReply(HTTP_OK, binaryResp);\n+        return true;\n+    }\n+\n+    case RetFormat::HEX: {\n+        CDataStream ssResp(SER_NETWORK, PROTOCOL_VERSION | RPCSerializationFlags());",
    "path": "src/rest.cpp",
    "position": 227,
    "original_position": 228,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "7cf4e220801edf1a80736f6fb571ad4ed280c0c1",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They were added in commit 412bab22b23036962509d2655b68cccd726b6ba4 in 2016. `RPCSerializationFlags` only affect txs (and thus blocks), but nothing else.",
    "created_at": "2021-10-18T08:23:40Z",
    "updated_at": "2021-10-18T08:23:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730682151"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730682151/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 525,
    "original_line": 525,
    "side": "RIGHT",
    "in_reply_to_id": 727703209
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696",
    "pull_request_review_id": 782056448,
    "id": 730922696,
    "node_id": "PRRC_kwDOABII584rkP7I",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }",
    "path": "src/rest.cpp",
    "position": 62,
    "original_position": 62,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Is this check intentionally before `filtertype` checks? I would expect `filtertype` to be checked first, unless it is done on purpose for performance reasons.",
    "created_at": "2021-10-18T13:29:17Z",
    "updated_at": "2021-10-18T17:01:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730922696"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730922696/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 357,
    "original_start_line": 357,
    "start_side": "RIGHT",
    "line": 360,
    "original_line": 360,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199",
    "pull_request_review_id": 782056448,
    "id": 730933199,
    "node_id": "PRRC_kwDOABII584rkSfP",
    "diff_hunk": "@@ -190,8 +193,8 @@ static bool rest_headers(const std::any& context,\n         return RESTERR(req, HTTP_BAD_REQUEST, \"No header count specified. Use /rest/headers/<count>/<hash>.<ext>.\");\n \n     const auto parsed_count{ToIntegral<size_t>(path[0])};\n-    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > 2000) {\n-        return RESTERR(req, HTTP_BAD_REQUEST, \"Header count out of range: \" + path[0]);\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, path[0]));",
    "path": "src/rest.cpp",
    "position": 28,
    "original_position": 28,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: The error message may also say something like \"Header count is invalid or it is out of acceptable range..\" as it happens quite regularly that somebody writes \"1OO\" instead of \"100\".",
    "created_at": "2021-10-18T13:40:28Z",
    "updated_at": "2021-10-19T07:56:50Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730933199"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730933199/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 197,
    "original_line": 197,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154",
    "pull_request_review_id": 782056448,
    "id": 730935154,
    "node_id": "PRRC_kwDOABII584rkS9y",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;\n+    headers.reserve(*parsed_count);\n+    {\n+        ChainstateManager* maybe_chainman = GetChainman(context, req);\n+        if (!maybe_chainman) return false;\n+        ChainstateManager& chainman = *maybe_chainman;\n+        LOCK(cs_main);\n+        CChain& active_chain = chainman.ActiveChain();\n+        const CBlockIndex* pindex = chainman.m_blockman.LookupBlockIndex(block_hash);\n+        while (pindex != nullptr && active_chain.Contains(pindex)) {\n+            headers.push_back(pindex);\n+            if (headers.size() == *parsed_count)\n+                break;\n+            pindex = active_chain.Next(pindex);\n+        }\n+    }\n+\n+    bool index_ready = index->BlockUntilSyncedToCurrentChain();\n+\n+    std::vector<uint256> filter_headers;\n+    filter_headers.reserve(*parsed_count);\n+    for (const CBlockIndex *pindex : headers) {",
    "path": "src/rest.cpp",
    "position": 100,
    "original_position": 100,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    for (const CBlockIndex* pindex : headers) {\r\n```",
    "created_at": "2021-10-18T13:42:33Z",
    "updated_at": "2021-10-18T17:01:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935154"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935154/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 398,
    "original_line": 398,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387",
    "pull_request_review_id": 782056448,
    "id": 730935387,
    "node_id": "PRRC_kwDOABII584rkTBb",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
    "path": "src/rest.cpp",
    "position": 79,
    "original_position": 79,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n    std::vector<const CBlockIndex*> headers;\r\n```",
    "created_at": "2021-10-18T13:42:47Z",
    "updated_at": "2021-10-18T17:01:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730935387"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730935387/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 377,
    "original_line": 377,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190",
    "pull_request_review_id": 782056448,
    "id": 730936190,
    "node_id": "PRRC_kwDOABII584rkTN-",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));",
    "path": "src/rest.cpp",
    "position": 76,
    "original_position": 76,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\n        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\", MAX_REST_HEADERS_RESULTS, uri_parts[1]));\r\n```",
    "created_at": "2021-10-18T13:43:35Z",
    "updated_at": "2021-10-18T17:01:56Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r730936190"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/730936190/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 374,
    "original_line": 374,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305",
    "pull_request_review_id": 782891569,
    "id": 731574305,
    "node_id": "PRRC_kwDOABII584rmvAh",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
    "path": "src/rest.cpp",
    "position": 79,
    "original_position": 79,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any reason not to simply do the usual `clang-format -i src/rest.cpp`? :)",
    "created_at": "2021-10-19T07:33:34Z",
    "updated_at": "2021-10-19T07:33:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731574305"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731574305/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 377,
    "original_line": 377,
    "side": "RIGHT",
    "in_reply_to_id": 730935387
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017",
    "pull_request_review_id": 782914911,
    "id": 731592017,
    "node_id": "PRRC_kwDOABII584rmzVR",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;\n+    std::string param;\n+    const RetFormat rf = ParseDataFormat(param, strURIPart);\n+\n+    std::vector<std::string> uri_parts;\n+    boost::split(uri_parts, param, boost::is_any_of(\"/\"));\n+    if (uri_parts.size() != 3) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid URI format. Expected /rest/blockfilterheaders/<filtertype>/<count>/<blockhash>\");\n+    }\n+\n+    uint256 block_hash;\n+    if (!ParseHashStr(uri_parts[2], block_hash)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Invalid hash: \" + uri_parts[2]);\n+    }\n+\n+    BlockFilterType filtertype;\n+    if (!BlockFilterTypeByName(uri_parts[0], filtertype)) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Unknown filtertype \" + uri_parts[0]);\n+    }\n+\n+    BlockFilterIndex* index = GetBlockFilterIndex(filtertype);\n+    if (!index) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, \"Index is not enabled for filtertype \" + uri_parts[0]);\n+    }\n+\n+    const auto parsed_count{ToIntegral<size_t>(uri_parts[1])};\n+    if (!parsed_count.has_value() || *parsed_count < 1 || *parsed_count > MAX_REST_HEADERS_RESULTS) {\n+        return RESTERR(req, HTTP_BAD_REQUEST, strprintf(\"Header count out of acceptable range (1-%u): %s\",  MAX_REST_HEADERS_RESULTS, uri_parts[1]));\n+    }\n+\n+    std::vector<const CBlockIndex *> headers;",
    "path": "src/rest.cpp",
    "position": 79,
    "original_position": 79,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "AFAIK Some violations of clang format in `rest.cpp` are from previous PRs. But in general, it would be a good thing.",
    "created_at": "2021-10-19T07:56:27Z",
    "updated_at": "2021-10-19T07:56:27Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r731592017"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/731592017/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 377,
    "original_line": 377,
    "side": "RIGHT",
    "in_reply_to_id": 730935387
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750",
    "pull_request_review_id": 784707190,
    "id": 732934750,
    "node_id": "PRRC_kwDOABII584rr7Je",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)",
    "path": "src/rest.cpp",
    "position": 46,
    "original_position": 46,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "```suggestion\r\nstatic bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\r\n```",
    "created_at": "2021-10-20T16:08:05Z",
    "updated_at": "2021-10-20T16:58:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732934750"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732934750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 343,
    "original_start_line": 343,
    "start_side": "RIGHT",
    "line": 344,
    "original_line": 344,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556",
    "pull_request_review_id": 784707190,
    "id": 732947556,
    "node_id": "PRRC_kwDOABII584rr-Rk",
    "diff_hunk": "@@ -278,11 +278,14 @@ def run_test(self):\n         self.sync_all()\n         json_obj = self.test_rest_request(f\"/headers/5/{bb_hash}\")\n         assert_equal(len(json_obj), 5)  # now we should have 5 header objects\n+        json_obj = self.test_rest_request(f\"/blockfilterheaders/basic/5/{bb_hash}\")\n+        assert_equal(len(json_obj), 5)  # now we should have 5 filter header objects\n+        self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)",
    "path": "test/functional/interface_rest.py",
    "position": 15,
    "original_position": 15,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Would it make sense to do some sanity testing on the returned object? For example:\r\n\r\n```suggestion\r\n        obj = self.test_rest_request(f\"/blockfilter/basic/{bb_hash}\", req_type=ReqType.BIN, ret_type=RetType.OBJ)\r\n        assert_greater_than(len(obj.read()), 0)\r\n```\r\n\r\nor perhaps even verify that the filter is the same as that returned by the `getblockfilter` RPC.",
    "created_at": "2021-10-20T16:23:13Z",
    "updated_at": "2021-10-20T16:58:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732947556"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732947556/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 283,
    "original_line": 283,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076",
    "pull_request_review_id": 784707190,
    "id": 732974076,
    "node_id": "PRRC_kwDOABII584rsEv8",
    "diff_hunk": "@@ -337,6 +340,210 @@ static bool rest_block_notxdetails(const std::any& context, HTTPRequest* req, co\n     return rest_block(context, req, strURIPart, false);\n }\n \n+\n+static bool rest_filter_header(const std::any& context, HTTPRequest* req, const std::string& strURIPart)\n+{\n+    if (!CheckWarmup(req))\n+        return false;",
    "path": "src/rest.cpp",
    "position": 49,
    "original_position": 49,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Current style is to have the clause on the same line:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) return false;\r\n```\r\n\r\nor enclosed in braces:\r\n\r\n```suggestion\r\n    if (!CheckWarmup(req)) {\r\n        return false;\r\n    }\r\n```\r\n\r\nSame for `if (!CheckWarmup(req))` in `rest_block_filter()` below.",
    "created_at": "2021-10-20T16:56:48Z",
    "updated_at": "2021-10-20T16:58:47Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r732974076"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/732974076/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": 346,
    "original_start_line": 346,
    "start_side": "RIGHT",
    "line": 347,
    "original_line": 347,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180",
    "pull_request_review_id": 784838008,
    "id": 733031180,
    "node_id": "PRRC_kwDOABII584rsSsM",
    "diff_hunk": "@@ -52,6 +52,20 @@ With the /notxdetails/ option JSON response will only contain the transaction ha\n Given a block hash: returns <COUNT> amount of blockheaders in upward direction.\n Returns empty if the block doesn't exist or it isn't in the active chain.\n \n+#### Blockfilter Headers\n+`GET /rest/blockfilterheaders/<FILTERTYPE>/<COUNT>/<BLOCK-HASH>.<bin|hex|json>`",
    "path": "doc/REST-interface.md",
    "position": 5,
    "original_position": 5,
    "commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "original_commit_id": "2b64fa3251ac5ff4b4d174f1f0be7226490dce87",
    "user": {
      "login": "stickies-v",
      "id": 69010457,
      "node_id": "MDQ6VXNlcjY5MDEwNDU3",
      "avatar_url": "https://avatars.githubusercontent.com/u/69010457?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/stickies-v",
      "html_url": "https://github.com/stickies-v",
      "followers_url": "https://api.github.com/users/stickies-v/followers",
      "following_url": "https://api.github.com/users/stickies-v/following{/other_user}",
      "gists_url": "https://api.github.com/users/stickies-v/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/stickies-v/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/stickies-v/subscriptions",
      "organizations_url": "https://api.github.com/users/stickies-v/orgs",
      "repos_url": "https://api.github.com/users/stickies-v/repos",
      "events_url": "https://api.github.com/users/stickies-v/events{/privacy}",
      "received_events_url": "https://api.github.com/users/stickies-v/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "From my experience (and e.g. [this stackoverflow reponse](https://stackoverflow.com/a/31261026)), in a RESTful API path parameters are used to represent resources, and query parameters are used to control how this resource is being filtered/sorted/... To my understanding, `<COUNT>` does not represent a resource but rather a control on how many blockfilterheader resources to retrieve.\r\n\r\nWhat do you think about changing the request into\r\n`GET /rest/blockfilterheaders/<FILTERTYPE>/<BLOCK-HASH>.<bin|hex|json>?count=<COUNT>`?",
    "created_at": "2021-10-20T18:13:43Z",
    "updated_at": "2021-10-20T18:14:26Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631",
    "author_association": "NONE",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/17631#discussion_r733031180"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/17631"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/733031180/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 56,
    "original_line": 56,
    "side": "RIGHT"
  }
]