[
  {
    "sha": "2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzA2YmFlMzllZGZhYTljMDg1NWQ4MzM3N2FkOGZkYTA5ZTRmYTA4",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T17:28:26Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2016-07-18T17:28:26Z"
      },
      "message": "Rename \"block cost\" to \"block weight\"",
      "tree": {
        "sha": "931520ad5742b9a758a4bd9143fdfe96f180ab79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/931520ad5742b9a758a4bd9143fdfe96f180ab79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 138,
      "additions": 69,
      "deletions": 69
    },
    "files": [
      {
        "sha": "fa2c5d1f05e24e4d6dc5d482af485590b68e5e46",
        "filename": "qa/rpc-tests/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/qa/rpc-tests/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/qa/rpc-tests/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-segwit.py?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -1065,12 +1065,12 @@ def test_block_relay(self, segwit_activated):\n             assert_equal(wit_block.serialize(False), non_wit_block.serialize())\n             assert_equal(wit_block.serialize(True), block.serialize(True))\n \n-            # Test size, vsize, cost\n+            # Test size, vsize, weight\n             rpc_details = self.nodes[0].getblock(block.hash, True)\n             assert_equal(rpc_details[\"size\"], len(block.serialize(True)))\n             assert_equal(rpc_details[\"strippedsize\"], len(block.serialize(False)))\n-            cost = 3*len(block.serialize(False)) + len(block.serialize(True))\n-            assert_equal(rpc_details[\"cost\"], cost)\n+            weight = 3*len(block.serialize(False)) + len(block.serialize(True))\n+            assert_equal(rpc_details[\"weight\"], weight)\n \n             # Upgraded node should not ask for blocks from unupgraded\n             block4 = self.build_next_block(nVersion=4)"
      },
      {
        "sha": "690856586604e67b79d81003695d10cca5c77a31",
        "filename": "src/consensus/consensus.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/consensus/consensus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/consensus/consensus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/consensus.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -10,8 +10,8 @@\n \n /** The maximum allowed size for a serialized block, in bytes (only for buffer size limits) */\n static const unsigned int MAX_BLOCK_SERIALIZED_SIZE = 4000000;\n-/** The maximum allowed cost for a block, see BIP 141 (network rule) */\n-static const unsigned int MAX_BLOCK_COST = 4000000;\n+/** The maximum allowed weight for a block, see BIP 141 (network rule) */\n+static const unsigned int MAX_BLOCK_WEIGHT = 4000000;\n /** The maximum allowed size for a block excluding witness data, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_BASE_SIZE = 1000000;\n /** The maximum allowed number of signature check operations in a block (network rule) */"
      },
      {
        "sha": "312dfe1699c086ee920a9723a2bd28e86ffcee01",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -452,7 +452,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-mempoolreplacement\", strprintf(_(\"Enable transaction replacement in the memory pool (default: %u)\"), DEFAULT_ENABLE_REPLACEMENT));\n \n     strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n-    strUsage += HelpMessageOpt(\"-blockmaxcost=<n>\", strprintf(_(\"Set maximum BIP141 block cost (default: %d)\"), DEFAULT_BLOCK_MAX_COST));\n+    strUsage += HelpMessageOpt(\"-blockmaxweight=<n>\", strprintf(_(\"Set maximum BIP141 block weight (default: %d)\"), DEFAULT_BLOCK_MAX_WEIGHT));\n     strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n     strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n     if (showDebug)"
      },
      {
        "sha": "fe19895f5fbcccbb2094415a420c6ab035c95aa3",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -694,8 +694,8 @@ bool AddOrphanTx(const CTransaction& tx, NodeId peer) EXCLUSIVE_LOCKS_REQUIRED(c\n     // have been mined or received.\n     // 100 orphans, each of which is at most 99,999 bytes big is\n     // at most 10 megabytes of orphans and somewhat more byprev index (in the worst case):\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST)\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT)\n     {\n         LogPrint(\"mempool\", \"ignoring large orphan tx (size: %u, hash: %s)\\n\", sz, hash.ToString());\n         return false;\n@@ -3596,13 +3596,13 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, CBlockIn\n     }\n \n     // After the coinbase witness nonce and commitment are verified,\n-    // we can check if the block cost passes (before we've checked the\n-    // coinbase witness, it would be possible for the cost to be too\n+    // we can check if the block weight passes (before we've checked the\n+    // coinbase witness, it would be possible for the weight to be too\n     // large by filling up the coinbase witness, which doesn't change\n     // the block hash, so we couldn't mark the block as permanently\n     // failed).\n-    if (GetBlockCost(block) > MAX_BLOCK_COST) {\n-        return state.DoS(100, error(\"ContextualCheckBlock(): cost limit failed\"), REJECT_INVALID, \"bad-blk-cost\");\n+    if (GetBlockWeight(block) > MAX_BLOCK_WEIGHT) {\n+        return state.DoS(100, error(\"ContextualCheckBlock(): weight limit failed\"), REJECT_INVALID, \"bad-blk-weight\");\n     }\n \n     return true;"
      },
      {
        "sha": "27121890f6d709e702893e90ba7eb5dddf00501e",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -155,7 +155,7 @@ typedef boost::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n extern BlockMap mapBlockIndex;\n extern uint64_t nLastBlockTx;\n extern uint64_t nLastBlockSize;\n-extern uint64_t nLastBlockCost;\n+extern uint64_t nLastBlockWeight;\n extern const std::string strMessageMagic;\n extern CWaitableCriticalSection csBestBlock;\n extern CConditionVariable cvBlockChange;"
      },
      {
        "sha": "25a5becf93efa889ff7cda6d285af5abd6bc9925",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -45,7 +45,7 @@ using namespace std;\n \n uint64_t nLastBlockTx = 0;\n uint64_t nLastBlockSize = 0;\n-uint64_t nLastBlockCost = 0;\n+uint64_t nLastBlockWeight = 0;\n \n class ScoreCompare\n {\n@@ -77,30 +77,30 @@ BlockAssembler::BlockAssembler(const CChainParams& _chainparams)\n     : chainparams(_chainparams)\n {\n     // Block resource limits\n-    // If neither -blockmaxsize or -blockmaxcost is given, limit to DEFAULT_BLOCK_MAX_*\n+    // If neither -blockmaxsize or -blockmaxweight is given, limit to DEFAULT_BLOCK_MAX_*\n     // If only one is given, only restrict the specified resource.\n     // If both are given, restrict both.\n-    nBlockMaxCost = DEFAULT_BLOCK_MAX_COST;\n+    nBlockMaxWeight = DEFAULT_BLOCK_MAX_WEIGHT;\n     nBlockMaxSize = DEFAULT_BLOCK_MAX_SIZE;\n-    bool fCostSet = false;\n-    if (mapArgs.count(\"-blockmaxcost\")) {\n-        nBlockMaxCost = GetArg(\"-blockmaxcost\", DEFAULT_BLOCK_MAX_COST);\n+    bool fWeightSet = false;\n+    if (mapArgs.count(\"-blockmaxweight\")) {\n+        nBlockMaxWeight = GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n         nBlockMaxSize = MAX_BLOCK_SERIALIZED_SIZE;\n-        fCostSet = true;\n+        fWeightSet = true;\n     }\n     if (mapArgs.count(\"-blockmaxsize\")) {\n         nBlockMaxSize = GetArg(\"-blockmaxsize\", DEFAULT_BLOCK_MAX_SIZE);\n-        if (!fCostSet) {\n-            nBlockMaxCost = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n+        if (!fWeightSet) {\n+            nBlockMaxWeight = nBlockMaxSize * WITNESS_SCALE_FACTOR;\n         }\n     }\n \n-    // Limit cost to between 4K and MAX_BLOCK_COST-4K for sanity:\n-    nBlockMaxCost = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_COST-4000), nBlockMaxCost));\n+    // Limit weight to between 4K and MAX_BLOCK_WEIGHT-4K for sanity:\n+    nBlockMaxWeight = std::max((unsigned int)4000, std::min((unsigned int)(MAX_BLOCK_WEIGHT-4000), nBlockMaxWeight));\n     // Limit size to between 1K and MAX_BLOCK_SERIALIZED_SIZE-1K for sanity:\n     nBlockMaxSize = std::max((unsigned int)1000, std::min((unsigned int)(MAX_BLOCK_SERIALIZED_SIZE-1000), nBlockMaxSize));\n \n-    // Whether we need to account for byte usage (in addition to cost usage)\n+    // Whether we need to account for byte usage (in addition to weight usage)\n     fNeedSizeAccounting = (nBlockMaxSize < MAX_BLOCK_SERIALIZED_SIZE-1000);\n }\n \n@@ -110,7 +110,7 @@ void BlockAssembler::resetBlock()\n \n     // Reserve space for coinbase tx\n     nBlockSize = 1000;\n-    nBlockCost = 4000;\n+    nBlockWeight = 4000;\n     nBlockSigOpsCost = 400;\n     fIncludeWitness = false;\n \n@@ -167,7 +167,7 @@ CBlockTemplate* BlockAssembler::CreateNewBlock(const CScript& scriptPubKeyIn)\n \n     nLastBlockTx = nBlockTx;\n     nLastBlockSize = nBlockSize;\n-    nLastBlockCost = nBlockCost;\n+    nLastBlockWeight = nBlockWeight;\n     LogPrintf(\"CreateNewBlock(): total size %u txs: %u fees: %ld sigops %d\\n\", nBlockSize, nBlockTx, nFees, nBlockSigOpsCost);\n \n     // Create coinbase transaction.\n@@ -223,8 +223,8 @@ void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost)\n {\n-    // TODO: switch to cost-based accounting for packages instead of vsize-based accounting.\n-    if (nBlockCost + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxCost)\n+    // TODO: switch to weight-based accounting for packages instead of vsize-based accounting.\n+    if (nBlockWeight + WITNESS_SCALE_FACTOR * packageSize >= nBlockMaxWeight)\n         return false;\n     if (nBlockSigOpsCost + packageSigOpsCost >= MAX_BLOCK_SIGOPS_COST)\n         return false;\n@@ -257,17 +257,17 @@ bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& packa\n \n bool BlockAssembler::TestForBlock(CTxMemPool::txiter iter)\n {\n-    if (nBlockCost + iter->GetTxCost() >= nBlockMaxCost) {\n+    if (nBlockWeight + iter->GetTxWeight() >= nBlockMaxWeight) {\n         // If the block is so close to full that no more txs will fit\n         // or if we've tried more than 50 times to fill remaining space\n         // then flag that the block is finished\n-        if (nBlockCost >  nBlockMaxCost - 400 || lastFewTxs > 50) {\n+        if (nBlockWeight >  nBlockMaxWeight - 400 || lastFewTxs > 50) {\n              blockFinished = true;\n              return false;\n         }\n-        // Once we're within 4000 cost of a full block, only look at 50 more txs\n+        // Once we're within 4000 weight of a full block, only look at 50 more txs\n         // to try to fill the remaining space.\n-        if (nBlockCost > nBlockMaxCost - 4000) {\n+        if (nBlockWeight > nBlockMaxWeight - 4000) {\n             lastFewTxs++;\n         }\n         return false;\n@@ -315,7 +315,7 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     if (fNeedSizeAccounting) {\n         nBlockSize += ::GetSerializeSize(iter->GetTx(), SER_NETWORK, PROTOCOL_VERSION);\n     }\n-    nBlockCost += iter->GetTxCost();\n+    nBlockWeight += iter->GetTxWeight();\n     ++nBlockTx;\n     nBlockSigOpsCost += iter->GetSigOpCost();\n     nFees += iter->GetFee();"
      },
      {
        "sha": "11753f5e43787d361d589ade9d6b0bccef87df97",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -141,11 +141,11 @@ class BlockAssembler\n \n     // Configuration parameters for the block size\n     bool fIncludeWitness;\n-    unsigned int nBlockMaxCost, nBlockMaxSize;\n+    unsigned int nBlockMaxWeight, nBlockMaxSize;\n     bool fNeedSizeAccounting;\n \n     // Information on the current status of the block\n-    uint64_t nBlockCost;\n+    uint64_t nBlockWeight;\n     uint64_t nBlockSize;\n     uint64_t nBlockTx;\n     uint64_t nBlockSigOpsCost;"
      },
      {
        "sha": "8617db00c8608cf3497582f3280a1faed31bd500",
        "filename": "src/policy/policy.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -64,8 +64,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason)\n     // almost as much to process as they cost the sender in fees, because\n     // computing signature hashes is O(ninputs*txsize). Limiting transactions\n     // to MAX_STANDARD_TX_SIZE mitigates CPU exhaustion attacks.\n-    unsigned int sz = GetTransactionCost(tx);\n-    if (sz >= MAX_STANDARD_TX_COST) {\n+    unsigned int sz = GetTransactionWeight(tx);\n+    if (sz >= MAX_STANDARD_TX_WEIGHT) {\n         reason = \"tx-size\";\n         return false;\n     }\n@@ -151,12 +151,12 @@ bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs)\n     return true;\n }\n \n-int64_t GetVirtualTransactionSize(int64_t nCost)\n+int64_t GetVirtualTransactionSize(int64_t nWeight)\n {\n-    return (nCost + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+    return (nWeight + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n }\n \n int64_t GetVirtualTransactionSize(const CTransaction& tx)\n {\n-    return GetVirtualTransactionSize(GetTransactionCost(tx));\n+    return GetVirtualTransactionSize(GetTransactionWeight(tx));\n }"
      },
      {
        "sha": "f5f8652fb5a720998eb07b9477fce66b63a721bd",
        "filename": "src/policy/policy.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/policy/policy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/policy.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -18,10 +18,10 @@ class CCoinsViewCache;\n static const unsigned int DEFAULT_BLOCK_MAX_SIZE = 750000;\n /** Default for -blockprioritysize, maximum space for zero/low-fee transactions **/\n static const unsigned int DEFAULT_BLOCK_PRIORITY_SIZE = 0;\n-/** Default for -blockmaxcost, which control the range of block costs the mining code will create **/\n-static const unsigned int DEFAULT_BLOCK_MAX_COST = 3000000;\n-/** The maximum size for transactions we're willing to relay/mine */\n-static const unsigned int MAX_STANDARD_TX_COST = 400000;\n+/** Default for -blockmaxweight, which controls the range of block weights the mining code will create **/\n+static const unsigned int DEFAULT_BLOCK_MAX_WEIGHT = 3000000;\n+/** The maximum weight for transactions we're willing to relay/mine */\n+static const unsigned int MAX_STANDARD_TX_WEIGHT = 400000;\n /** Maximum number of signature check operations in an IsStandard() P2SH script */\n static const unsigned int MAX_P2SH_SIGOPS = 15;\n /** The maximum number of sigops we're willing to relay/mine in a single tx */\n@@ -66,8 +66,8 @@ bool IsStandardTx(const CTransaction& tx, std::string& reason);\n      */\n bool AreInputsStandard(const CTransaction& tx, const CCoinsViewCache& mapInputs);\n \n-/** Compute the virtual transaction size (cost reinterpreted as bytes). */\n-int64_t GetVirtualTransactionSize(int64_t nCost);\n+/** Compute the virtual transaction size (weight reinterpreted as bytes). */\n+int64_t GetVirtualTransactionSize(int64_t nWeight);\n int64_t GetVirtualTransactionSize(const CTransaction& tx);\n \n #endif // BITCOIN_POLICY_POLICY_H"
      },
      {
        "sha": "0e6ab4dd718b37f19c102e28eb5b3c821afb915e",
        "filename": "src/primitives/block.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -32,11 +32,11 @@ std::string CBlock::ToString() const\n     return s.str();\n }\n \n-int64_t GetBlockCost(const CBlock& block)\n+int64_t GetBlockWeight(const CBlock& block)\n {\n-    // This implements the cost = (stripped_size * 4) + witness_size formula,\n+    // This implements the weight = (stripped_size * 4) + witness_size formula,\n     // using only serialization with and without witness data. As witness_size\n     // is equal to total_size - stripped_size, this formula is identical to:\n-    // cost = (stripped_size * 3) + total_size.\n+    // weight = (stripped_size * 3) + total_size.\n     return ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR - 1) + ::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "72dfed985ae937b3b37cd818df77a3f7dcafd8df",
        "filename": "src/primitives/block.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/block.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/block.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -154,7 +154,7 @@ struct CBlockLocator\n     }\n };\n \n-/** Compute the consensus-critical block cost (see BIP 141). */\n-int64_t GetBlockCost(const CBlock& tx);\n+/** Compute the consensus-critical block weight (see BIP 141). */\n+int64_t GetBlockWeight(const CBlock& tx);\n \n #endif // BITCOIN_PRIMITIVES_BLOCK_H"
      },
      {
        "sha": "8d6380564365e755db18d30a8c86616703f997b4",
        "filename": "src/primitives/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -121,7 +121,7 @@ unsigned int CTransaction::CalculateModifiedSize(unsigned int nTxSize) const\n     // Providing any more cleanup incentive than making additional inputs free would\n     // risk encouraging people to create junk outputs to redeem later.\n     if (nTxSize == 0)\n-        nTxSize = (GetTransactionCost(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n+        nTxSize = (GetTransactionWeight(*this) + WITNESS_SCALE_FACTOR - 1) / WITNESS_SCALE_FACTOR;\n     for (std::vector<CTxIn>::const_iterator it(vin.begin()); it != vin.end(); ++it)\n     {\n         unsigned int offset = 41U + std::min(110U, (unsigned int)it->scriptSig.size());\n@@ -149,7 +149,7 @@ std::string CTransaction::ToString() const\n     return str;\n }\n \n-int64_t GetTransactionCost(const CTransaction& tx)\n+int64_t GetTransactionWeight(const CTransaction& tx)\n {\n     return ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS) * (WITNESS_SCALE_FACTOR -1) + ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n }"
      },
      {
        "sha": "d37890667f9ddcaa79c947e051b462151e20ffb3",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -459,7 +459,7 @@ struct CMutableTransaction\n     uint256 GetHash() const;\n };\n \n-/** Compute the cost of a transaction, as defined by BIP 141 */\n-int64_t GetTransactionCost(const CTransaction &tx);\n+/** Compute the weight of a transaction, as defined by BIP 141 */\n+int64_t GetTransactionWeight(const CTransaction &tx);\n \n #endif // BITCOIN_PRIMITIVES_TRANSACTION_H"
      },
      {
        "sha": "9dc896b7af281e986ebed62cdffea673c3c895bf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -101,7 +101,7 @@ UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool tx\n     result.push_back(Pair(\"confirmations\", confirmations));\n     result.push_back(Pair(\"strippedsize\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION | SERIALIZE_TRANSACTION_NO_WITNESS)));\n     result.push_back(Pair(\"size\", (int)::GetSerializeSize(block, SER_NETWORK, PROTOCOL_VERSION)));\n-    result.push_back(Pair(\"cost\", (int)::GetBlockCost(block)));\n+    result.push_back(Pair(\"weight\", (int)::GetBlockWeight(block)));\n     result.push_back(Pair(\"height\", blockindex->nHeight));\n     result.push_back(Pair(\"version\", block.nVersion));\n     result.push_back(Pair(\"versionHex\", strprintf(\"%08x\", block.nVersion)));\n@@ -559,7 +559,7 @@ UniValue getblock(const UniValue& params, bool fHelp)\n             \"  \\\"confirmations\\\" : n,   (numeric) The number of confirmations, or -1 if the block is not on the main chain\\n\"\n             \"  \\\"size\\\" : n,            (numeric) The block size\\n\"\n             \"  \\\"strippedsize\\\" : n,    (numeric) The block size excluding witness data\\n\"\n-            \"  \\\"cost\\\" : n             (numeric) The block cost\\n\"\n+            \"  \\\"weight\\\" : n           (numeric) The block weight (BIP 141)\\n\"\n             \"  \\\"height\\\" : n,          (numeric) The block height or index\\n\"\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\""
      },
      {
        "sha": "92ca4bab6bc1eee4ad220932897a20b39f8b4048",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -224,7 +224,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n             \"{\\n\"\n             \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n             \"  \\\"currentblocksize\\\": nnn,   (numeric) The last block size\\n\"\n-            \"  \\\"currentblockcost\\\": nnn,   (numeric) The last block cost\\n\"\n+            \"  \\\"currentblockweight\\\": nnn, (numeric) The last block weight\\n\"\n             \"  \\\"currentblocktx\\\": nnn,     (numeric) The last block transaction\\n\"\n             \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n             \"  \\\"errors\\\": \\\"...\\\"          (string) Current errors\\n\"\n@@ -243,7 +243,7 @@ UniValue getmininginfo(const UniValue& params, bool fHelp)\n     UniValue obj(UniValue::VOBJ);\n     obj.push_back(Pair(\"blocks\",           (int)chainActive.Height()));\n     obj.push_back(Pair(\"currentblocksize\", (uint64_t)nLastBlockSize));\n-    obj.push_back(Pair(\"currentblockcost\", (uint64_t)nLastBlockCost));\n+    obj.push_back(Pair(\"currentblockweight\", (uint64_t)nLastBlockWeight));\n     obj.push_back(Pair(\"currentblocktx\",   (uint64_t)nLastBlockTx));\n     obj.push_back(Pair(\"difficulty\",       (double)GetDifficulty()));\n     obj.push_back(Pair(\"errors\",           GetWarnings(\"statusbar\")));\n@@ -358,7 +358,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"         ],\\n\"\n             \"         \\\"fee\\\": n,                   (numeric) difference in value between transaction inputs and outputs (in Satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n             \"         \\\"sigops\\\" : n,               (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n-            \"         \\\"cost\\\" : n,                 (numeric) total transaction size cost, as counted for purposes of block limits\\n\"\n+            \"         \\\"weight\\\" : n,               (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n             \"         \\\"required\\\" : true|false     (boolean) if provided and true, this transaction must be in the final block\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -377,7 +377,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"  \\\"noncerange\\\" : \\\"00000000ffffffff\\\",   (string) A range of valid nonces\\n\"\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) cost limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n-            \"  \\\"costlimit\\\" : n,                  (numeric) limit of block cost\\n\"\n+            \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n             \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n             \"  \\\"bits\\\" : \\\"xxx\\\",                 (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n@@ -575,7 +575,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         int index_in_template = i - 1;\n         entry.push_back(Pair(\"fee\", pblocktemplate->vTxFees[index_in_template]));\n         entry.push_back(Pair(\"sigops\", pblocktemplate->vTxSigOpsCost[index_in_template]));\n-        entry.push_back(Pair(\"cost\", GetTransactionCost(tx)));\n+        entry.push_back(Pair(\"weight\", GetTransactionWeight(tx)));\n \n         transactions.push_back(entry);\n     }\n@@ -659,7 +659,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"noncerange\", \"00000000ffffffff\"));\n     result.push_back(Pair(\"sigoplimit\", (int64_t)MAX_BLOCK_SIGOPS_COST));\n     result.push_back(Pair(\"sizelimit\", (int64_t)MAX_BLOCK_SERIALIZED_SIZE));\n-    result.push_back(Pair(\"costlimit\", (int64_t)MAX_BLOCK_COST));\n+    result.push_back(Pair(\"weightlimit\", (int64_t)MAX_BLOCK_WEIGHT));\n     result.push_back(Pair(\"curtime\", pblock->GetBlockTime()));\n     result.push_back(Pair(\"bits\", strprintf(\"%08x\", pblock->nBits)));\n     result.push_back(Pair(\"height\", (int64_t)(pindexPrev->nHeight+1)));"
      },
      {
        "sha": "691baa674403f9d380bc0f08ee6b0fb0d67a2106",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -28,7 +28,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n     hadNoDependencies(poolHasNoInputsOf), inChainInputValue(_inChainInputValue),\n     spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n {\n-    nTxCost = GetTransactionCost(_tx);\n+    nTxWeight = GetTransactionWeight(_tx);\n     nModSize = _tx.CalculateModifiedSize(GetTxSize());\n     nUsageSize = RecursiveDynamicUsage(*tx) + memusage::DynamicUsage(tx);\n \n@@ -75,7 +75,7 @@ void CTxMemPoolEntry::UpdateLockPoints(const LockPoints& lp)\n \n size_t CTxMemPoolEntry::GetTxSize() const\n {\n-    return GetVirtualTransactionSize(nTxCost);\n+    return GetVirtualTransactionSize(nTxWeight);\n }\n \n // Update the given tx for any in-mempool descendants."
      },
      {
        "sha": "2c2127f326de2cce875c5a4c3689dbb7f25d6b0c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -78,7 +78,7 @@ class CTxMemPoolEntry\n private:\n     std::shared_ptr<const CTransaction> tx;\n     CAmount nFee;              //!< Cached to avoid expensive parent-transaction lookups\n-    size_t nTxCost;            //!< ... and avoid recomputing tx cost (also used for GetTxSize())\n+    size_t nTxWeight;          //!< ... and avoid recomputing tx weight (also used for GetTxSize())\n     size_t nModSize;           //!< ... and modified size for priority\n     size_t nUsageSize;         //!< ... and total memory usage\n     int64_t nTime;             //!< Local time when entering the mempool\n@@ -122,7 +122,7 @@ class CTxMemPoolEntry\n     double GetPriority(unsigned int currentHeight) const;\n     const CAmount& GetFee() const { return nFee; }\n     size_t GetTxSize() const;\n-    size_t GetTxCost() const { return nTxCost; }\n+    size_t GetTxWeight() const { return nTxWeight; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return entryHeight; }\n     bool WasClearAtEntry() const { return hadNoDependencies; }"
      },
      {
        "sha": "4b6d98025d55b075fbe760d05a18e21c81012868",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c06bae39edfaa9c0855d83377ad8fda09e4fa08/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=2c06bae39edfaa9c0855d83377ad8fda09e4fa08",
        "patch": "@@ -2356,7 +2356,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n                 *static_cast<CTransaction*>(&wtxNew) = CTransaction(txNew);\n \n                 // Limit size\n-                if (GetTransactionCost(txNew) >= MAX_STANDARD_TX_COST)\n+                if (GetTransactionWeight(txNew) >= MAX_STANDARD_TX_WEIGHT)\n                 {\n                     strFailReason = _(\"Transaction too large\");\n                     return false;"
      }
    ]
  }
]