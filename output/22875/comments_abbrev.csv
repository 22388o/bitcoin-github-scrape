ajtowns,2021-09-03 09:15:34,"Wouldn't it be simpler to do something like:\n\n```c++\nclass MapOpNames : public std::map<std::string, opcodetype>\n{\npublic:\n    MapOpNames()\n    {\n        for (unsigned int op = 0; op <= MAX_OPCODE; op++) {\n            ...\n        }\n    }\n};\nopcodetype ParseOpCode(const std::string& s)\n{\n    const static MapOpNames mapOpNames;\n    auto it = mapOpNames.find(s);\n    ",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-912389738,912389738,
kirillkovalenko,2021-09-06 11:19:17,"maybe just move map initialization out of ParseOpCode?\n\n```c++\nstatic std::map<std::string, opcodetype> get_map()\n{\n    std::map<std::string, opcodetype> map;\n    for (unsigned int op = 0; op <= MAX_OPCODE; op++) {\n          ...    \n    }\n    return map;\n};\n\nopcodetype ParseOpCode(const std::string& s)\n{\n    const static std::map<std::string, opcodetype> mapOpNames(get_",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-913568852,913568852,
JeremyRubin,2021-09-06 20:09:47,"Those are both solid suggestions, I guess I wasn't familiar enough with initializer rules to see those would be safe. Will probably go with @kirillkovalenko's approach",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-913836137,913836137,
JeremyRubin,2021-09-06 20:10:57,Although thinking about it it's not clear to me that in your version get_map isn't called every time the function is run?,https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-913836615,913836615,
MarcoFalke,2021-09-07 07:23:47,"Why would it? You can test yourself:\n\n```cpp\n\n#include <iostream>\n\nstatic int get_map() {\n  std::cout << __func__ << std::endl;\n  return 42;\n};\n\nbool ParseOpCode() {\n  const static auto mapOpNames{get_map()};\n  return mapOpNames == 1;\n}\n\nint main() {\n  ParseOpCode();\n  ParseOpCode();\n}",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-914057981,914057981,
kirillkovalenko,2021-09-07 08:18:34,"> Although thinking about it it's not clear to me that in your version get_map isn't called every time the function is run?\n\nIt's the way language/runtime implements it, basically a guarantee\nhttps://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables\n\n",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-914093957,914093957,
JeremyRubin,2021-09-07 16:50:15,It doesn't seem to me clear that the behavior is specified (although\ncertainly it seems to be defined) to be not equivalent to something like\nthis:\n\n```c++\nstatic int v = f();\n\nint&& x = f();\nstatic int v = x;\n```\n\nWhereby f() is always invoked since v is still only initialized once in\neither case.\n\nAJ's version does not have this ambiguity (but I'd likely rather make it\ncomposition,https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-914465366,914465366,
MarcoFalke,2021-09-08 06:20:19,There are issues in other parts of the codebase if this assumption doesn't hold,https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-914952374,914952374,
JeremyRubin,2021-09-08 15:58:29,reading the spec more closely I think it should be ok,https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-915364634,915364634,
ajtowns,2021-09-09 10:13:44,"I think you could also do:\n\n```c++\nnamespace {\nclass OpCodeParser\n{\nprivate:\n    std::map<std::string, opcodetype> mapOpNames;\n\npublic:\n    OpCodeParser()\n    {\n        for (unsigned int op = 0; op <= MAX_OPCODE; op++) {\n            ...\n        }\n    }\n    opcodetype Parse(const std::string& s) const {\n        auto it = mapOpNames.find(s);\n        ...\n    }\n",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-915952476,915952476,
JeremyRubin,2021-09-10 21:03:55,went with @ajtowns suggested edit.,https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-917209864,917209864,
DrahtBot,2021-10-08 23:42:49,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23227](https://github.com/bitcoin/bitcoin/pull/23227) (bitcoin-tx: Avoid treating integer overflow as OP_0 by MarcoFalke",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-939180570,939180570,
DrahtBot,2021-10-12 04:04:54,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-940636794,940636794,
MarcoFalke,2021-10-22 11:57:13,"Are you still working on this? If not, I suggest to close this PR",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-949562034,949562034,
MarcoFalke,2021-10-22 11:58:30,"> practicalswift --> are there tools we can deploy to catch usage like this?\n\nbitcoin-tx is single threaded. I don't think tooling exists to catch ""races"" in single-threaded programs, whatever that means.",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-949562912,949562912,
JeremyRubin,2021-10-22 16:56:13,"well i think core_read is still included in libbitcoin sources so i think it should be threadsafe -- good rule of thumb is that any pure function should be threadsafe, always.\n\ni don't think closing the PR is a good idea; i'll try to rebase it when i have time.",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-949806212,949806212,
laanwj,2021-11-26 16:07:49,"> good rule of thumb is that any pure function should be threadsafe, always.\n\nThere's some risk that this function gets moved to an utility at some point when it is needed somewhere else, and people forget to make it thread-safe.\n\nI'm fine with making this change, but please address the comments.",https://github.com/bitcoin/bitcoin/pull/22875#issuecomment-980080965,980080965,
luke-jr,2021-09-26 02:46:04,Don't think this is needed anymore?,https://github.com/bitcoin/bitcoin/pull/22875#discussion_r716128711,716128711,src/core_read.cpp
luke-jr,2021-09-26 02:47:03,"nit\n\n```suggestion\n        for (unsigned int op = 0; op <= MAX_OPCODE; ++op) {\n```",https://github.com/bitcoin/bitcoin/pull/22875#discussion_r716128807,716128807,src/core_read.cpp
luke-jr,2021-09-26 02:48:27,"```suggestion\n        return mapOpNames.at(s);\n```",https://github.com/bitcoin/bitcoin/pull/22875#discussion_r716128921,716128921,src/core_read.cpp
JeremyRubin,2021-09-27 18:11:01,NACK; this is a change to the error that gets returned.,https://github.com/bitcoin/bitcoin/pull/22875#discussion_r716929533,716929533,src/core_read.cpp
kirillkovalenko,2021-09-27 21:24:07,Does it have any impact on codegen? I thought it's not longer the case since like 2002.,https://github.com/bitcoin/bitcoin/pull/22875#discussion_r717056541,717056541,src/core_read.cpp
luke-jr,2021-09-27 21:42:26,"That's why it's just a nit. ""The compiler can fix it"" isn't really a good reason to keep poor code.",https://github.com/bitcoin/bitcoin/pull/22875#discussion_r717067051,717067051,src/core_read.cpp
MarcoFalke,2021-09-28 07:03:16,"nit: according to clang-format:\n\n```diff\ndiff --git a/src/core_read.cpp b/src/core_read.cpp\nindex bd29e2073e..ba535f745f 100644\n--- a/src/core_read.cpp\n+++ b/src/core_read.cpp\n@@ -45,7 +45,8 @@ public:\n             }\n         }\n     }\n-    opcodetype Parse(const std::string& s) const {\n+    opcodetype Parse(const std::string& s) const\n+    {\n         auto it = mapOpName",https://github.com/bitcoin/bitcoin/pull/22875#discussion_r717281823,717281823,src/core_read.cpp
laanwj,2021-11-26 16:04:23,"> Does it have any impact on codegen? I thought it's not longer the case since like 2002.\n\nNot in the case of an integer.\nThough in general it's better to write `++x` in for loops even if just to avoid these kind of code review comments :smile: ",https://github.com/bitcoin/bitcoin/pull/22875#discussion_r757603251,757603251,src/core_read.cpp
