[
  {
    "sha": "7de019bc619b0b2433bfb553feba5f6dc58c8db8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGUwMTliYzYxOWIwYjI0MzNiZmI1NTNmZWJhNWY2ZGM1OGM4ZGI4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-12T19:18:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-08T22:18:55Z"
      },
      "message": "Introduce DeferringSignatureChecker and inherit with SignatureExtractor\n\nIntroduces a DeferringSignatureChecker which simply takes a\nBaseSignatureChecker and passes through everything.\nSignatureExtractorChecker now subclasses DeferringSignatureChecker. This\nallows for all BaseSignatureChecker functions to be implemented for\nSignatureExtractorChecker, while allowing for future signature checkers\nwhich opreate similarly to SignatureExtractorChecker.\n\nGithub-Pull: #21166\nRebased-From: 6965456c10c9c4025c71c5e24fa5b27b15e5933a",
      "tree": {
        "sha": "a128f77f52382e4101e0cbaf8911cfdc5bec3721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a128f77f52382e4101e0cbaf8911cfdc5bec3721"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7de019bc619b0b2433bfb553feba5f6dc58c8db8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmBvgU8ACgkQF1ZXMuCO\nXkEj+A/+PyIE/QRZmEH5qZF2GLx+D7xBog0tWm1Bp/W27udO6bBupGRUXy7oDfc4\nonQ4zjUB4awLvdQUlEcgHjBndvOMzNgXBJ//Pq4kbsbM4lVXd2IpY72tXZwGpfXm\n16fhlA+xM9zonHzFeM4M0/+FH2nfTnVXMhste38kBLdK2jXIChZlb0E1jQTt+yhq\n7QwKA0bNhuA0PpcDmh3Eetx1lMq8QQU4N/manbr+DwxMljZu28i9VKvANDH5VCu7\nal6QN1l0gUliVCnhghL7CoZFUtykZZTD+G4CBBsqD+EoxcW/EZEU4bwXeu8xe2Dr\nYxRpL+IykseCEEv9s7BUnkb1s+PRhTnWdalKB1d3Ko+RQS7A5jwqHhOZU8iNGh2I\nXUHh0nVra0ot1arw/aj3bAK5y1g9c6A03y8yUOmDIe2qhUFtxIvpWO2XxTze+1cu\nVrsg+hOoDj525EdqD9MqflRBzZmxFD5GkX2P69YIc6F8XuIaMS6689kye7jxxXAe\nC3QcIoDMLYoowWh/Zs7pWmx4UfAZVwn7k4EbXZf3fDDQYGYFrTpisAmYnkNesdDL\n7aqDPZgWCYtz7n9wwLJLWFweSxlpufY+3JmxX/0/4aLZjrSqLw+XH15YxZLszTOT\nYSVRhLAXC4nNSeptKgvmmP9UQ8KI29k8A/26/iMKg5EBChQxsvM=\n=yWfn\n-----END PGP SIGNATURE-----",
        "payload": "tree a128f77f52382e4101e0cbaf8911cfdc5bec3721\nparent 0b9a046c1ae023268b2d9928ca4e3c884ae871b8\nauthor Andrew Chow <achow101-github@achow101.com> 1613157530 -0500\ncommitter Andrew Chow <achow101-github@achow101.com> 1617920335 -0400\n\nIntroduce DeferringSignatureChecker and inherit with SignatureExtractor\n\nIntroduces a DeferringSignatureChecker which simply takes a\nBaseSignatureChecker and passes through everything.\nSignatureExtractorChecker now subclasses DeferringSignatureChecker. This\nallows for all BaseSignatureChecker functions to be implemented for\nSignatureExtractorChecker, while allowing for future signature checkers\nwhich opreate similarly to SignatureExtractorChecker.\n\nGithub-Pull: #21166\nRebased-From: 6965456c10c9c4025c71c5e24fa5b27b15e5933a\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7de019bc619b0b2433bfb553feba5f6dc58c8db8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7de019bc619b0b2433bfb553feba5f6dc58c8db8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7de019bc619b0b2433bfb553feba5f6dc58c8db8/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b9a046c1ae023268b2d9928ca4e3c884ae871b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b9a046c1ae023268b2d9928ca4e3c884ae871b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b9a046c1ae023268b2d9928ca4e3c884ae871b8"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 32,
      "deletions": 4
    },
    "files": [
      {
        "sha": "70789869a074dd2b9e2862d8e679f975b6e98d5a",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7de019bc619b0b2433bfb553feba5f6dc58c8db8/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7de019bc619b0b2433bfb553feba5f6dc58c8db8/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=7de019bc619b0b2433bfb553feba5f6dc58c8db8",
        "patch": "@@ -272,6 +272,34 @@ class GenericTransactionSignatureChecker : public BaseSignatureChecker\n using TransactionSignatureChecker = GenericTransactionSignatureChecker<CTransaction>;\n using MutableTransactionSignatureChecker = GenericTransactionSignatureChecker<CMutableTransaction>;\n \n+class DeferringSignatureChecker : public BaseSignatureChecker\n+{\n+protected:\n+    BaseSignatureChecker& m_checker;\n+\n+public:\n+    DeferringSignatureChecker(BaseSignatureChecker& checker) : m_checker(checker) {}\n+\n+    bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n+    {\n+        return m_checker.CheckECDSASignature(scriptSig, vchPubKey, scriptCode, sigversion);\n+    }\n+\n+    bool CheckSchnorrSignature(Span<const unsigned char> sig, Span<const unsigned char> pubkey, SigVersion sigversion, const ScriptExecutionData& execdata, ScriptError* serror = nullptr) const override\n+    {\n+        return m_checker.CheckSchnorrSignature(sig, pubkey, sigversion, execdata, serror);\n+    }\n+\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override\n+    {\n+        return m_checker.CheckLockTime(nLockTime);\n+    }\n+    bool CheckSequence(const CScriptNum& nSequence) const override\n+    {\n+        return m_checker.CheckSequence(nSequence);\n+    }\n+};\n+\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptExecutionData& execdata, ScriptError* error = nullptr);\n bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript& script, unsigned int flags, const BaseSignatureChecker& checker, SigVersion sigversion, ScriptError* error = nullptr);\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CScriptWitness* witness, unsigned int flags, const BaseSignatureChecker& checker, ScriptError* serror = nullptr);"
      },
      {
        "sha": "903c95a5c9187d22559ce2ef8214ac3fd4987bbb",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7de019bc619b0b2433bfb553feba5f6dc58c8db8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7de019bc619b0b2433bfb553feba5f6dc58c8db8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=7de019bc619b0b2433bfb553feba5f6dc58c8db8",
        "patch": "@@ -253,17 +253,17 @@ bool ProduceSignature(const SigningProvider& provider, const BaseSignatureCreato\n }\n \n namespace {\n-class SignatureExtractorChecker final : public BaseSignatureChecker\n+class SignatureExtractorChecker final : public DeferringSignatureChecker\n {\n private:\n     SignatureData& sigdata;\n-    BaseSignatureChecker& checker;\n \n public:\n-    SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : sigdata(sigdata), checker(checker) {}\n+    SignatureExtractorChecker(SignatureData& sigdata, BaseSignatureChecker& checker) : DeferringSignatureChecker(checker), sigdata(sigdata) {}\n+\n     bool CheckECDSASignature(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n-        if (checker.CheckECDSASignature(scriptSig, vchPubKey, scriptCode, sigversion)) {\n+        if (m_checker.CheckECDSASignature(scriptSig, vchPubKey, scriptCode, sigversion)) {\n             CPubKey pubkey(vchPubKey);\n             sigdata.signatures.emplace(pubkey.GetID(), SigPair(pubkey, scriptSig));\n             return true;"
      }
    ]
  },
  {
    "sha": "f79189ca54524881d52b91679eb9035d6718ce01",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzkxODljYTU0NTI0ODgxZDUyYjkxNjc5ZWI5MDM1ZDY3MThjZTAx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-12T20:38:46Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-04-08T22:19:02Z"
      },
      "message": "Test that signrawtx works when a signed CSV and CLTV inputs are present\n\nGithub-Pull: #21166\nRebased-From: a97a9298cea085858e1a65a5e9b20d7a9e0f7303",
      "tree": {
        "sha": "c48efae97af6b64ceec5291370ae48b3962e6894",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c48efae97af6b64ceec5291370ae48b3962e6894"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f79189ca54524881d52b91679eb9035d6718ce01",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEFSgSMAeFyWRE0zNNF1ZXMuCOXkEFAmBvgVYACgkQF1ZXMuCO\nXkGTmxAAmLAgk0zqkFs/K8gLfGScEME6zMc+qWIBdlbD2+EksYEIWwK1LLRXCP0s\nwR1rua1vjxGwrqG7ouVKkV427QpNZdBWeueebeoqiq3tROtFHTe2XemM64PmI1xi\nmm94qiBEEqJzYWhWS+FdiAJfywob5nXRsa3HVJWmYFjv9JaIi/UXF+HzJtR0yZCX\ny+I11cHT2aGU8f+RQXJmA4vT8iWep0C6AJ59WxKmB2D9JaAgTxew87PFBKi3qJlC\nWnK8DL3Ps3CVA0IT1RkoWgsO3gG6PQbAXefKPuY+BrVJdmjE3i09qlFwJB1lUYN6\n01bGa9vZCRHCV6HrcbF7KXIFbkH9hrd0RgMiX9Uf6TdamifgEcucXuS3QVitn1wI\nCIrfh1bIye1AG74hjyNseE1i3XzTsmHmvrQIMHJl1w+bHsxEbMiOoMlFdy68vLc/\nOHZBZWgprsIQ76XnYXFaz5iVZRltHHjeBOSVtjEjmgcQhYjn1NPv69sNl2ojizfc\np21LkwgwKpAtaFwkcNZtT02ROL4Qfi8TtJSAcQV7cUYkDkMWZkea1p1bGACJEBnM\nAbSuVm272aqhyU2pvAnDe3PcOvgK6/EvBm+ccmefXxCb/U95q0ifDRHPOxnkXNOx\niR/OOeOHISn3cJSiffUE1XxKO+x/zItcZ4XakTOzp4ZaajISCe0=\n=bd38\n-----END PGP SIGNATURE-----",
        "payload": "tree c48efae97af6b64ceec5291370ae48b3962e6894\nparent 7de019bc619b0b2433bfb553feba5f6dc58c8db8\nauthor Andrew Chow <achow101-github@achow101.com> 1613162326 -0500\ncommitter Andrew Chow <achow101-github@achow101.com> 1617920342 -0400\n\nTest that signrawtx works when a signed CSV and CLTV inputs are present\n\nGithub-Pull: #21166\nRebased-From: a97a9298cea085858e1a65a5e9b20d7a9e0f7303\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79189ca54524881d52b91679eb9035d6718ce01",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f79189ca54524881d52b91679eb9035d6718ce01",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f79189ca54524881d52b91679eb9035d6718ce01/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7de019bc619b0b2433bfb553feba5f6dc58c8db8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7de019bc619b0b2433bfb553feba5f6dc58c8db8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7de019bc619b0b2433bfb553feba5f6dc58c8db8"
      }
    ],
    "stats": {
      "total": 83,
      "additions": 79,
      "deletions": 4
    },
    "files": [
      {
        "sha": "60b4d1c7447c9fbb707be62b588c6f7dcc6884a1",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 79,
        "deletions": 4,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f79189ca54524881d52b91679eb9035d6718ce01/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f79189ca54524881d52b91679eb9035d6718ce01/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=f79189ca54524881d52b91679eb9035d6718ce01",
        "patch": "@@ -4,16 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n-from test_framework.address import check_script, script_to_p2sh\n+from test_framework.address import check_script, script_to_p2sh, script_to_p2wsh\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, find_vout_for_address, hex_str_to_bytes\n-from test_framework.messages import sha256\n-from test_framework.script import CScript, OP_0, OP_CHECKSIG\n+from test_framework.messages import sha256, CTransaction, CTxInWitness\n+from test_framework.script import CScript, OP_0, OP_CHECKSIG, OP_CHECKSEQUENCEVERIFY, OP_CHECKLOCKTIMEVERIFY, OP_DROP, OP_TRUE\n from test_framework.script_util import key_to_p2pkh_script, script_to_p2sh_p2wsh_script, script_to_p2wsh_script\n from test_framework.wallet_util import bytes_to_wif\n \n-from decimal import Decimal\n+from decimal import Decimal, getcontext\n+from io import BytesIO\n \n class SignRawTransactionsTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -238,13 +239,87 @@ def OP_1NEGATE_test(self):\n         txn = self.nodes[0].signrawtransactionwithwallet(hex_str, prev_txs)\n         assert txn[\"complete\"]\n \n+    def test_signing_with_csv(self):\n+        self.log.info(\"Test signing a transaction containing a fully signed CSV input\")\n+        self.nodes[0].walletpassphrase(\"password\", 9999)\n+        getcontext().prec = 8\n+\n+        # Make sure CSV is active\n+        self.nodes[0].generate(500)\n+\n+        # Create a P2WSH script with CSV\n+        script = CScript([1, OP_CHECKSEQUENCEVERIFY, OP_DROP])\n+        address = script_to_p2wsh(script)\n+\n+        # Fund that address and make the spend\n+        txid = self.nodes[0].sendtoaddress(address, 1)\n+        vout = find_vout_for_address(self.nodes[0], txid, address)\n+        self.nodes[0].generate(1)\n+        utxo = self.nodes[0].listunspent()[0]\n+        amt = Decimal(1) + utxo[\"amount\"] - Decimal(0.00001)\n+        tx = self.nodes[0].createrawtransaction(\n+            [{\"txid\": txid, \"vout\": vout, \"sequence\": 1},{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}],\n+            [{self.nodes[0].getnewaddress(): amt}],\n+            self.nodes[0].getblockcount()\n+        )\n+\n+        # Set the witness script\n+        ctx = CTransaction()\n+        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx.wit.vtxinwit.append(CTxInWitness())\n+        ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n+        tx = ctx.serialize_with_witness().hex()\n+\n+        # Sign and send the transaction\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n+        assert_equal(signed[\"complete\"], True)\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n+    def test_signing_with_cltv(self):\n+        self.log.info(\"Test signing a transaction containing a fully signed CLTV input\")\n+        self.nodes[0].walletpassphrase(\"password\", 9999)\n+        getcontext().prec = 8\n+\n+        # Make sure CSV is active\n+        self.nodes[0].generate(1500)\n+\n+        # Create a P2WSH script with CLTV\n+        script = CScript([1000, OP_CHECKLOCKTIMEVERIFY, OP_DROP])\n+        address = script_to_p2wsh(script)\n+\n+        # Fund that address and make the spend\n+        txid = self.nodes[0].sendtoaddress(address, 1)\n+        vout = find_vout_for_address(self.nodes[0], txid, address)\n+        self.nodes[0].generate(1)\n+        utxo = self.nodes[0].listunspent()[0]\n+        amt = Decimal(1) + utxo[\"amount\"] - Decimal(0.00001)\n+        tx = self.nodes[0].createrawtransaction(\n+            [{\"txid\": txid, \"vout\": vout},{\"txid\": utxo[\"txid\"], \"vout\": utxo[\"vout\"]}],\n+            [{self.nodes[0].getnewaddress(): amt}],\n+            self.nodes[0].getblockcount()\n+        )\n+\n+        # Set the witness script\n+        ctx = CTransaction()\n+        ctx.deserialize(BytesIO(hex_str_to_bytes(tx)))\n+        ctx.wit.vtxinwit.append(CTxInWitness())\n+        ctx.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE]), script]\n+        tx = ctx.serialize_with_witness().hex()\n+\n+        # Sign and send the transaction\n+        signed = self.nodes[0].signrawtransactionwithwallet(tx)\n+        assert_equal(signed[\"complete\"], True)\n+        self.nodes[0].sendrawtransaction(signed[\"hex\"])\n+\n     def run_test(self):\n         self.successful_signing_test()\n         self.script_verification_error_test()\n         self.witness_script_test()\n         self.OP_1NEGATE_test()\n         self.test_with_lock_outputs()\n         self.test_fully_signed_tx()\n+        self.test_signing_with_csv()\n+        self.test_signing_with_cltv()\n \n \n if __name__ == '__main__':"
      }
    ]
  }
]