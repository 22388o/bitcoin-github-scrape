[
  {
    "sha": "fe16dd8226d924f44432c5b5014aa49ff45c82ff",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTE2ZGQ4MjI2ZDkyNGY0NDQzMmM1YjUwMTRhYTQ5ZmY0NWM4MmZm",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-01T13:05:49Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-13T19:03:27Z"
      },
      "message": "net: Add option `-enablebip61` to configure sending of BIP61 notifications\n\nThis commit adds a boolean option `-enablebip61`, defaulting to `1`, that\ncan be used to disable the sending of BIP61 `reject` messages. This\nfunctionality has been requested for various reasons:\n\n- security (DoS): reject messages can reveal internal state that can be\n  used to target certain resources such as the mempool more easily.\n\n- bandwidth: a typical node sends lots of reject messages; this counts\n  against upstream bandwidth. Also the reject messages tend to be larger\n  than the message that was rejected.\n\nOn the other hand, reject messages can be useful while developing client\nsoftware (I found them indispensable while creating bitcoin-submittx),\nas well as for our own test cases, so whatever the default becomes on the\nlong run, IMO the functionality should be retained as option. But that's\na discussion for later.",
      "tree": {
        "sha": "cf14a431d3448f042cecbe2c57f4d6cfb2eb333a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf14a431d3448f042cecbe2c57f4d6cfb2eb333a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe16dd8226d924f44432c5b5014aa49ff45c82ff",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe16dd8226d924f44432c5b5014aa49ff45c82ff",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe16dd8226d924f44432c5b5014aa49ff45c82ff",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe16dd8226d924f44432c5b5014aa49ff45c82ff/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffa86af45363d6fb09c67e6b9a20b3e895791d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffa86af45363d6fb09c67e6b9a20b3e895791d6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffa86af45363d6fb09c67e6b9a20b3e895791d6a"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 39,
      "deletions": 10
    },
    "files": [
      {
        "sha": "f45e564dbda5865a28ee48fb601f7dbf2515cc3e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "patch": "@@ -395,6 +395,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_NAME_LOOKUP), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect used)\"), false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-enablebip61\", strprintf(_(\"Send reject messages per BIP61 (default: %u)\"), DEFAULT_ENABLE_BIP61), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-externalip=<ip>\", _(\"Specify your own public address\"), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), DEFAULT_FORCEDNSSEED), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"), false, OptionsCategory::CONNECTION);\n@@ -1099,6 +1100,8 @@ bool AppInitParameterInteraction()\n     if (gArgs.GetBoolArg(\"-peerbloomfilters\", DEFAULT_PEERBLOOMFILTERS))\n         nLocalServices = ServiceFlags(nLocalServices | NODE_BLOOM);\n \n+    g_enable_bip61 = gArgs.GetBoolArg(\"-enablebip61\", DEFAULT_ENABLE_BIP61);\n+\n     if (gArgs.GetArg(\"-rpcserialversion\", DEFAULT_RPC_SERIALIZE_VERSION) < 0)\n         return InitError(\"rpcserialversion must be non-negative.\");\n "
      },
      {
        "sha": "7341d41fea981f664fe01241c1408a25feff2470",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 9,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "patch": "@@ -37,6 +37,7 @@\n #endif\n \n std::atomic<int64_t> nTimeBestReceived(0); // Used only to inform the wallet of when we last received a block\n+bool g_enable_bip61 = DEFAULT_ENABLE_BIP61;\n \n struct IteratorComparator\n {\n@@ -1579,7 +1580,9 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         // Each connection can only send one version message\n         if (pfrom->nVersion != 0)\n         {\n-            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n+            if (g_enable_bip61) {\n+                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_DUPLICATE, std::string(\"Duplicate version message\")));\n+            }\n             LOCK(cs_main);\n             Misbehaving(pfrom->GetId(), 1);\n             return false;\n@@ -1608,8 +1611,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         if (!pfrom->fInbound && !pfrom->fFeeler && !pfrom->m_manual_connection && !HasAllDesirableServiceFlags(nServices))\n         {\n             LogPrint(BCLog::NET, \"peer=%d does not offer the expected services (%08x offered, %08x expected); disconnecting\\n\", pfrom->GetId(), nServices, GetDesirableServiceFlags(nServices));\n-            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n-                               strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n+            if (g_enable_bip61) {\n+                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_NONSTANDARD,\n+                                   strprintf(\"Expected to offer services %08x\", GetDesirableServiceFlags(nServices))));\n+            }\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -1629,8 +1634,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         {\n             // disconnect from peers older than this proto version\n             LogPrint(BCLog::NET, \"peer=%d using obsolete version %i; disconnecting\\n\", pfrom->GetId(), nVersion);\n-            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n-                               strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n+            if (g_enable_bip61) {\n+                connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_OBSOLETE,\n+                                   strprintf(\"Version must be %d or greater\", MIN_PEER_PROTO_VERSION)));\n+            }\n             pfrom->fDisconnect = true;\n             return false;\n         }\n@@ -2328,9 +2335,10 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             LogPrint(BCLog::MEMPOOLREJ, \"%s from peer=%d was not accepted: %s\\n\", tx.GetHash().ToString(),\n                 pfrom->GetId(),\n                 FormatStateMessage(state));\n-            if (state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) // Never send AcceptToMemoryPool's internal codes over P2P\n+            if (g_enable_bip61 && state.GetRejectCode() > 0 && state.GetRejectCode() < REJECT_INTERNAL) { // Never send AcceptToMemoryPool's internal codes over P2P\n                 connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::REJECT, strCommand, (unsigned char)state.GetRejectCode(),\n                                    state.GetRejectReason().substr(0, MAX_REJECT_MESSAGE_LENGTH), inv.hash));\n+            }\n             if (nDoS > 0) {\n                 Misbehaving(pfrom->GetId(), nDoS);\n             }\n@@ -2903,8 +2911,10 @@ static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());\n \n-    for (const CBlockReject& reject : state.rejects) {\n-        connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+    if (g_enable_bip61) {\n+        for (const CBlockReject& reject : state.rejects) {\n+            connman->PushMessage(pnode, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, std::string(NetMsgType::BLOCK), reject.chRejectCode, reject.strRejectReason, reject.hashBlock));\n+        }\n     }\n     state.rejects.clear();\n \n@@ -3011,7 +3021,9 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     }\n     catch (const std::ios_base::failure& e)\n     {\n-        connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n+        if (g_enable_bip61) {\n+            connman->PushMessage(pfrom, CNetMsgMaker(INIT_PROTO_VERSION).Make(NetMsgType::REJECT, strCommand, REJECT_MALFORMED, std::string(\"error parsing message\")));\n+        }\n         if (strstr(e.what(), \"end of data\"))\n         {\n             // Allow exceptions from under-length message on vRecv"
      },
      {
        "sha": "b0b905d922bde1d614325ae57641023054e4ca41",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe16dd8226d924f44432c5b5014aa49ff45c82ff/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "patch": "@@ -35,6 +35,11 @@ static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n+/** Default for BIP61 (sending reject messages) */\n+static constexpr bool DEFAULT_ENABLE_BIP61 = true;\n+/** Enable BIP61 (sending reject messages) */\n+extern bool g_enable_bip61;\n+\n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;"
      },
      {
        "sha": "d050bd2bfd960a4120084f6278a66859c157966c",
        "filename": "test/functional/p2p_invalid_tx.py",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe16dd8226d924f44432c5b5014aa49ff45c82ff/test/functional/p2p_invalid_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe16dd8226d924f44432c5b5014aa49ff45c82ff/test/functional/p2p_invalid_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_invalid_tx.py?ref=fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "patch": "@@ -21,6 +21,8 @@\n )\n \n \n+REJECT_INVALID = 16\n+\n class InvalidTxRequestTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -71,7 +73,7 @@ def run_test(self):\n         # and we get disconnected immediately\n         self.log.info('Test a transaction that is rejected')\n         tx1 = create_transaction(block1.vtx[0], 0, b'\\x64' * 35, 50 * COIN - 12000)\n-        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True, reject_code=REJECT_INVALID, reject_reason=b'mandatory-script-verify-flag-failed (Invalid OP_IF construction)')\n \n         # Make two p2p connections to provide the node with orphans\n         # * p2ps[0] will send valid orphan txs (one with low fee)\n@@ -137,6 +139,13 @@ def run_test(self):\n         wait_until(lambda: 1 == len(node.getpeerinfo()), timeout=12)  # p2ps[1] is no longer connected\n         assert_equal(expected_mempool, set(node.getrawmempool()))\n \n+        # restart node with sending BIP61 messages disabled, check that it disconnects without sending the reject message\n+        self.log.info('Test a transaction that is rejected, with BIP61 disabled')\n+        self.restart_node(0, ['-enablebip61=0','-persistmempool=0'])\n+        self.reconnect_p2p(num_connections=1)\n+        node.p2p.send_txs_and_test([tx1], node, success=False, expect_disconnect=True)\n+        # send_txs_and_test will have waited for disconnect, so we can safely check that no reject has been received\n+        assert_equal(node.p2p.reject_code_received, None)\n \n if __name__ == '__main__':\n     InvalidTxRequestTest().main()"
      }
    ]
  },
  {
    "sha": "87fe292d897e09e176ac7e254144466c319cc9ac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2ZlMjkyZDg5N2UwOWUxNzZhYzdlMjU0MTQ0NDY2YzMxOWNjOWFj",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-01T13:34:35Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2018-05-13T19:03:27Z"
      },
      "message": "doc: Mention disabling BIP61 in bips.md",
      "tree": {
        "sha": "9b6d0cec02da6fff50d9bf74d692a1a57d4dad13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b6d0cec02da6fff50d9bf74d692a1a57d4dad13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87fe292d897e09e176ac7e254144466c319cc9ac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87fe292d897e09e176ac7e254144466c319cc9ac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87fe292d897e09e176ac7e254144466c319cc9ac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87fe292d897e09e176ac7e254144466c319cc9ac/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe16dd8226d924f44432c5b5014aa49ff45c82ff",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe16dd8226d924f44432c5b5014aa49ff45c82ff"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "272cf4de29b7127e09f37e3a90186ee593d2104c",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87fe292d897e09e176ac7e254144466c319cc9ac/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87fe292d897e09e176ac7e254144466c319cc9ac/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=87fe292d897e09e176ac7e254144466c319cc9ac",
        "patch": "@@ -15,7 +15,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.16.0**):\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n * [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n-* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n+* [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)). Starting *v0.17.0*, whether to send reject messages can be configured with the `-enablebip61` option.\n * [`BIP 65`](https://github.com/bitcoin/bips/blob/master/bip-0065.mediawiki): The CHECKLOCKTIMEVERIFY softfork was merged in **v0.12.0** ([PR #6351](https://github.com/bitcoin/bitcoin/pull/6351)), and backported to **v0.11.2** and **v0.10.4**. Mempool-only CLTV was added in [PR #6124](https://github.com/bitcoin/bitcoin/pull/6124).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713)).\n * [`BIP 68`](https://github.com/bitcoin/bips/blob/master/bip-0068.mediawiki): Sequence locks have been implemented as of **v0.12.1**  ([PR #7184](https://github.com/bitcoin/bitcoin/pull/7184)), and have been activated since *block 419328*."
      }
    ]
  }
]