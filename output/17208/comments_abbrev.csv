DrahtBot,2019-10-21 22:27:09,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #17954 (wallet: Remove calls to Chain::Lock methods by ryanofsky)\n* #17526 (Use Single Random Draw In addition to knapsac",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-544734459,544734459,
gmaxwell,2019-10-29 21:39:47,"Primary platforms Bitcoin runs on (x86 / win linux) are not strictly IEEE 754 (in particular, the standard x86 FPU is non-754 due to excess precision and non-strict truncation when moving between registers and memory). It's also not too uncommon for random obscure library code to silently dork around with rounding settings even on SSE (which is much more 754). Standard compiler optimization settin",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-547641746,547641746,
practicalswift,2019-10-29 23:39:39,"@gmaxwell Thanks for reviewing. Those are all good points. I agree that we should be careful with the IEEE 754 assumptions we're making.\n\nI've now pushed an updated version of this PR -- now doing:\n\n1.) \n\n```diff\n-static int64_t nBlocksTotal = 0;\n+static int64_t nBlocksTotal = 1;\n```\n\nAs suggested in a related PR: _""This change would have been better done-- easier to review f",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-547676331,547676331,
practicalswift,2019-11-14 09:18:03,@MarcoFalke @laanwj @Empact @promag You've all shown interest in the sanitizers before: would you mind reviewing? :),https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-553798046,553798046,
practicalswift,2019-12-29 15:51:41,Feel free to review the updated version - would be nice to get rid of the UBSan suppressions :),https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-569517479,569517479,
practicalswift,2020-02-13 11:08:19,Rebased - please re-review :),https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-585673121,585673121,
jonatack,2020-02-13 20:27:07,"ACK 0201cbc reviewed code, built with `sanitizers=undefined` and `-Weverything`, ran unit and functional tests and bitcoind.\n\n```bash\n$ UBSAN_OPTIONS=""print_stacktrace=1:halt_on_error=1"" src/test/test_bitcoin\nRunning 398 test cases...\nUsing configuration: seed=298630376733616266\n*** No errors detected\n\n$ echo $?\n0\n\n$ UBSAN_OPTIONS=""print_stacktrace=1:halt_on_error=1"" test/fun",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-585955845,585955845,
MarcoFalke,2020-02-20 19:27:37,"> I'd like to see this PR and #17708 merged to be able to build this way for testing PRs locally.\n\nIt is already possible to build with the undefined sanitizer enabled. This changeset does not fix a bug and if the primary motivation for the change is to get rid of the suppressions, I'd say it is low priority refactoring that can be done when the code needs to be touched for other reasons some ",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589266305,589266305,
jonatack,2020-02-20 19:50:19,"Upgraded my comment to ""facilitate and encourage testing with UBSan by default as a general review practice.""",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589276098,589276098,
practicalswift,2020-02-20 19:53:17,Totally agree with @jonatack FWIW. We need more sanitizer testing -- I really cannot see any reason why developers would to _not_ build with ASan and UBSan by default when developing.,https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589277518,589277518,
jonatack,2020-02-20 19:54:43,"@practicalswift Please don't close this. It's worthwhile to improve our testing.\n",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589278139,589278139,
practicalswift,2020-02-20 19:56:34,@jonatack I'm leaving this one as up for grabs. Feel free to cherry pick in the commits in a new PR: I think this PR has a greater probability of getting merged if you submit it TBH :),https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589279158,589279158,
jonatack,2020-02-20 20:04:34,"@practicalswift heh, to the contrary you are more effective than I at having testing improvements merged -- nevertheless, I empathise :) Let's see if #15283 makes headway.",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-589282696,589282696,
practicalswift,2020-02-23 10:06:56,"I was informed that there was some interest expressed in this PR at this week's meeting. Re-opening to give it another chance :)\n\nPinging in @jonatack, @laanwj. @instagibbs and @elichai who I understood sounded positive at the meeting - would you mind reviewing? :)\n\nThis net change of -8 lines should hopefully be easy to review for correctness :)",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590052154,590052154,
elichai,2020-02-23 16:03:05,"I can't get the sanitizer to complain about these, tried both gcc and clang with commit ab9de435880c9d77e4137b65050591ef2d14f809 \n```\n$ make clean\n$ ./configure --with-sanitizers=undefined --with-incompatible-bdb\n$ make\n$ ./src/test/test_bitcoin\nRunning 396 test cases...\n\n*** No errors detected\n```\ntried even removing the first 6 lines in `./test/sanitizer/suppressions/ubsan`\",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590084173,590084173,
jonatack,2020-02-23 16:10:56,"@elichai try `make distclean`?\n",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590085061,590085061,
jonatack,2020-02-23 16:15:43,"@practicalswift thanks for re-opening. I prefer this PR for the reasons I mention in https://github.com/bitcoin/bitcoin/pull/15283#issuecomment-589692811, so my review above stands.",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590085599,590085599,
elichai,2020-02-23 16:28:23,"> @elichai try `make distclean`?\n\nStill nothing :/\nMaybe I should re-clone? or can it be because I have a very new compiler? (GCC 9.2.1 and Clang 9.0.1)\n\nIt does seem to be part of the build: (and I added a out of bound read to one of the tests and it caught it)\n```\nOptions used to compile and link:                                                                                      ",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590087388,590087388,
practicalswift,2020-02-23 20:39:54,"@elichai I think the reason you're not seeing this when using Clang is that you're using a more recent Clang than the one we're using in Travis: `float-divide-by-zero` was removed from the `-fsanitize=undefined` by https://reviews.llvm.org/D63793. Could that be the case?\n",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590113451,590113451,
elichai,2020-02-24 10:08:11,"> @elichai I think the reason you're not seeing this when using Clang is that you're using a more recent Clang than the one we're using in Travis: `float-divide-by-zero` was removed from the `-fsanitize=undefined` by https://reviews.llvm.org/D63793. Could that be the case?\n\nMakes sense. but I also can't see it with gcc not just clang\nJust found this:\nhttps://gcc.gnu.org/onlinedocs/gcc/Inst",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590247074,590247074,
elichai,2020-02-24 13:44:56,"Finally.\nBefore:\n```\n./configure --with-sanitizers=undefined,float-divide-by-zero --with-incompatible-bdb\nmake\n./src/test/test_bitcoin                          \nRunning 396 test cases...                                                                                \n ==                                                                                                      \nwallet/wall",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-590326306,590326306,
practicalswift,2020-03-07 13:12:00,"I'll leave this PR open for one week to allow for ACK:s to measure interest :)\n\nWill close if no interest shown :)",https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-596087013,596087013,
practicalswift,2020-03-10 08:12:43,Closing due to lack of interest :),https://github.com/bitcoin/bitcoin/pull/17208#issuecomment-596957272,596957272,
Empact,2019-11-14 09:35:43,"nit: I'd rather keep the log message the same and add special handling for the divide by zero case, under the theory that avoiding an edge case is not a great reason to reduce communication",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346207817,346207817,src/wallet/wallet.cpp
Empact,2019-11-14 09:38:23,nit: `progress_end > progress_begin`,https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346209036,346209036,src/wallet/wallet.cpp
practicalswift,2019-11-14 09:42:20,"Thanks a lot for reviewing!\n\nThe added …\n\n```\nif (progress_end - progress_begin > 0.0) {\n```\n\n… is meant to be ""visually consistent"" with the already existing L1590 …\n\n```\nif (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n```\n\nDoes that make sense? :)",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346210993,346210993,src/wallet/wallet.cpp
Empact,2019-11-14 09:45:42,"nit: How about instead introducing a method that returns e.g. the `PerBlockTime(nTimeChainState)`, and handles the 0 case? More lines but the logged numbers remain accurate.",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346212741,346212741,src/validation.cpp
practicalswift,2019-11-14 09:46:33,"That's actually how I did it in the original version, but I changed it after receiving this feedback from @gmaxwell:\n\n> Inserting extra floating point variables to silence a non-error error seems kinda ugly. Considering that these are just debugging messages, it might be better to just rework them (e.g. don't print if there is nothing to report, or don't divide numbers just give the raw number",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346213214,346213214,src/wallet/wallet.cpp
practicalswift,2019-11-14 09:50:34,"In a previous version solved this using a slightly larger change, but I received the following feedback from @gmaxwell:\n\n> This change would have been better done-- easier to review for correctness, more stable against ""regression""-- by simply changing the existing initialization constant for nBlocksTotal from 0 to 1.\n\nI think that is a good point. Since this is `validation.cpp` I'd like t",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346215433,346215433,src/validation.cpp
Empact,2019-11-14 09:54:52,"Yeah, it's a subjective point, but clearer IMO.",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346217627,346217627,src/wallet/wallet.cpp
Empact,2019-11-14 10:16:18,How about this? Seems pretty clean / improves readability IMO: https://github.com/bitcoin/bitcoin/compare/master...Empact:percent-within-target,https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346227917,346227917,src/wallet/wallet.cpp
practicalswift,2019-11-14 10:27:26,"I guess it is a matter of preference, but I like the current simpler solution suggested by @gmaxwell.\n\nI'll let others chime in and adjust to the consensus opinion (if any) :)",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346233588,346233588,src/wallet/wallet.cpp
Empact,2019-11-14 10:40:58,"I don't totally buy this as removing the ubsan exception helps protect against regression / div-by-zero. Granted it's more lines and so more review in theory, but only marginally so as you have to look over all the `nBlocksTotal` uses anyway to be clear about the implications, and in both cases you can see only log lines are affected, etc. But yes this is another subjective point.\nhttps://github",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346240222,346240222,src/validation.cpp
Empact,2019-11-14 10:43:45,"I don't read @gmaxwell's comment as suggesting this approach - ""don't print if there is nothing to report"" is different from removing the lines.",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346241584,346241584,src/wallet/wallet.cpp
practicalswift,2019-11-14 10:46:29,"I meant ""don't divide numbers just give the raw numbers"" which is what is done in the suggested version :)",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346243021,346243021,src/wallet/wallet.cpp
Empact,2019-11-14 10:51:06,Touché,https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346245233,346245233,src/wallet/wallet.cpp
MarcoFalke,2019-11-14 13:43:16,This is initialized to `0` already,https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346316653,346316653,src/wallet/wallet.cpp
practicalswift,2019-11-14 14:53:32,Good point. Fixed!,https://github.com/bitcoin/bitcoin/pull/17208#discussion_r346357445,346357445,src/wallet/wallet.cpp
jonatack,2020-02-04 09:35:35,"It seems to me there is no need to check twice that progress_end - progress_begin is greater than zero, even if the compiler is clever enough to optimise it. Perhaps:\n```diff\n-        m_scanning_progress = (progress_current - progress_begin) / (progress_end - progress_begin);\n-        if (*block_height % 100 == 0 && progress_end - progress_begin > 0.0) {\n-            ShowProgress(strprintf",https://github.com/bitcoin/bitcoin/pull/17208#discussion_r374561741,374561741,src/wallet/wallet.cpp
practicalswift,2020-02-10 15:30:18,I wanted to keep the diff small by touch as few lines as possible to make review trivial :),https://github.com/bitcoin/bitcoin/pull/17208#discussion_r377133862,377133862,src/wallet/wallet.cpp
