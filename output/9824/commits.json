[
  {
    "sha": "fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTRjZDJlOTk4ZTBlYmViZTI4M2E2MjQzZjdmNzUyMTIzYTEwNWFi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-22T10:29:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2017-02-23T02:05:43Z"
      },
      "message": "qa: Check return code when stopping nodes\n\nThis includes work by jnewbery",
      "tree": {
        "sha": "691fa6bf7ffa07cc0676bba2d5fe21ae6854e08f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/691fa6bf7ffa07cc0676bba2d5fe21ae6854e08f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa4cd2e998e0ebebe283a6243f7f752123a105ab",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa4cd2e998e0ebebe283a6243f7f752123a105ab/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ad31f9aa3111e079dd5024e8f6b069abb564b81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ad31f9aa3111e079dd5024e8f6b069abb564b81"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 15,
      "deletions": 27
    },
    "files": [
      {
        "sha": "8d2bc73c0cce7a46aabe4d24766929f80afd4c53",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -469,7 +469,9 @@ def run_test(self):\n         # locked wallet test\n         self.nodes[1].encryptwallet(\"test\")\n         self.nodes.pop(1)\n-        stop_nodes(self.nodes)\n+        stop_node(self.nodes[0], 0)\n+        stop_node(self.nodes[1], 2)\n+        stop_node(self.nodes[2], 3)\n \n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n         # This test is not meant to test fee estimation and we'd like"
      },
      {
        "sha": "1010c54aa5c224812c69f43f19df3975d8978e95",
        "filename": "qa/rpc-tests/rpcbind_test.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/rpcbind_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/rpcbind_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rpcbind_test.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -35,11 +35,9 @@ def run_bind_test(self, allow_ips, connect_to, addresses, expected):\n             base_args += ['-rpcallowip=' + x for x in allow_ips]\n         binds = ['-rpcbind='+addr for addr in addresses]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args + binds], connect_to)\n-        try:\n-            pid = bitcoind_processes[0].pid\n-            assert_equal(set(get_bind_addrs(pid)), set(expected))\n-        finally:\n-            stop_nodes(self.nodes)\n+        pid = bitcoind_processes[0].pid\n+        assert_equal(set(get_bind_addrs(pid)), set(expected))\n+        stop_nodes(self.nodes)\n \n     def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n@@ -48,13 +46,10 @@ def run_allowip_test(self, allow_ips, rpchost, rpcport):\n         '''\n         base_args = ['-disablewallet', '-nolisten'] + ['-rpcallowip='+x for x in allow_ips]\n         self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [base_args])\n-        try:\n-            # connect to node through non-loopback interface\n-            node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n-            node.getnetworkinfo()\n-        finally:\n-            node = None # make sure connection will be garbage collected and closed\n-            stop_nodes(self.nodes)\n+        # connect to node through non-loopback interface\n+        node = get_rpc_proxy(rpc_url(0, \"%s:%d\" % (rpchost, rpcport)), 0)\n+        node.getnetworkinfo()\n+        stop_nodes(self.nodes)\n \n     def run_test(self):\n         # due to OS-specific network stats queries, this test works only on Linux"
      },
      {
        "sha": "ec151c2a65d2da592fa6677c68333a78840544e6",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 5,
        "deletions": 14,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa4cd2e998e0ebebe283a6243f7f752123a105ab/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=fa4cd2e998e0ebebe283a6243f7f752123a105ab",
        "patch": "@@ -375,28 +375,19 @@ def stop_node(node, i):\n         node.stop()\n     except http.client.CannotSendRequest as e:\n         print(\"WARN: Unable to stop node: \" + repr(e))\n-    bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    return_code = bitcoind_processes[i].wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n+    assert_equal(return_code, 0)\n     del bitcoind_processes[i]\n \n def stop_nodes(nodes):\n-    for node in nodes:\n-        try:\n-            node.stop()\n-        except http.client.CannotSendRequest as e:\n-            print(\"WARN: Unable to stop node: \" + repr(e))\n-    del nodes[:] # Emptying array closes connections as a side effect\n-    wait_bitcoinds()\n+    for i, node in enumerate(nodes):\n+        stop_node(node, i)\n+    assert not bitcoind_processes.values() # All connections must be gone now\n \n def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n \n-def wait_bitcoinds():\n-    # Wait for all bitcoinds to cleanly exit\n-    for bitcoind in bitcoind_processes.values():\n-        bitcoind.wait(timeout=BITCOIND_PROC_WAIT_TIMEOUT)\n-    bitcoind_processes.clear()\n-\n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")"
      }
    ]
  }
]