[
  {
    "sha": "fad027fb0ce019f31b20861c37e802d4e29e6931",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWQwMjdmYjBjZTAxOWYzMWIyMDg2MWMzN2U4MDJkNGUyOWU2OTMx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-12-27T17:38:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-02-09T13:12:43Z"
      },
      "message": "scripted-diff: Add missing spaces in RPCResult, Fix type names\n\nThis makes the rendered diff smaller when the RPCResult is machine\ngenerated later on\n\n-BEGIN VERIFY SCRIPT-\n # Add space after dictionary key and before colon\n sed -i --regexp-extended -e 's/(^ +\" +\\\\\"[a-zA-Z_]+\\\\\"): ?/\\1 : /g' $(git grep -l '\\\\\":')\n # Rename (array) to (json array)\n sed -i -e 's/ (array) / (json array) /g' $(git grep -l '(array)' ./src)\n # Rename (object) to (json object)\n sed -i -e 's/ (object) / (json object) /g' $(git grep -l '(object)' ./src)\n # Rename (bool) to (boolean)\n sed -i -e 's/ (bool) / (boolean) /g' $(git grep -l '(bool)' ./src)\n # Rename (int) to (numeric)\n sed -i -e 's/  (int) /  (numeric) /g' $(git grep -l '(int)' ./src)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "e3902c7e91ae84ae187a454a14fdba0b6929fe3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3902c7e91ae84ae187a454a14fdba0b6929fe3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fad027fb0ce019f31b20861c37e802d4e29e6931",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgVXgv/ZeJ2I7ybT5v86EB8nRvTlJsi4S5NAyPm8B3EeFcL/9YZI5ch3VJVGnep\nTUsF+o0uXucBCvAtNuGsx0b4Eu1BmyqMa3h2kRA/uTFlsh6ambvGe0JCZA8OM9lx\noHF5CKlF8X2Ed/MtmwlVdkSeb3nSkAOlo5gr6JhVCFLLRAV1nZcbgWACSdFFbKyk\nGqnzM5yuj6RX9PJxo7HQSnnclWF6KZyMUrhqJlOdkO+EaTzjvuwzfTkwRehSPskP\nI73J+zO9bSTIOrqidRN1uIu1zSPJnz2em+gyCseZL+oBj7aJtFeSVizAYluDkMZo\n3L7zyOoqhHtxEOGm3RLwrR4GAPXccXYYSyaW51HGYAm5Tx214k/P87SF2GADjJT/\nx052ytdwLywgbhd5sYCM42IWFYQeDkxRvysqBT2yiaeJ3IIKsCFBlc1cP4aRuSCb\nMTc4pYyanbdxMjZKXpH+5OOHP4CpkzEjnF8Er3NtlDPLrsWB5hwLoQFKJjw1wJbu\np79xCiVH\n=1rzy\n-----END PGP SIGNATURE-----",
        "payload": "tree e3902c7e91ae84ae187a454a14fdba0b6929fe3f\nparent 75fb37ce68289eb7e00e2ccdd2ef7f9271332545\nauthor MarcoFalke <falke.marco@gmail.com> 1577468336 -0800\ncommitter MarcoFalke <falke.marco@gmail.com> 1581253963 -0800\n\nscripted-diff: Add missing spaces in RPCResult, Fix type names\n\nThis makes the rendered diff smaller when the RPCResult is machine\ngenerated later on\n\n-BEGIN VERIFY SCRIPT-\n # Add space after dictionary key and before colon\n sed -i --regexp-extended -e 's/(^ +\" +\\\\\"[a-zA-Z_]+\\\\\"): ?/\\1 : /g' $(git grep -l '\\\\\":')\n # Rename (array) to (json array)\n sed -i -e 's/ (array) / (json array) /g' $(git grep -l '(array)' ./src)\n # Rename (object) to (json object)\n sed -i -e 's/ (object) / (json object) /g' $(git grep -l '(object)' ./src)\n # Rename (bool) to (boolean)\n sed -i -e 's/ (bool) / (boolean) /g' $(git grep -l '(bool)' ./src)\n # Rename (int) to (numeric)\n sed -i -e 's/  (int) /  (numeric) /g' $(git grep -l '(int)' ./src)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad027fb0ce019f31b20861c37e802d4e29e6931",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fad027fb0ce019f31b20861c37e802d4e29e6931",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad027fb0ce019f31b20861c37e802d4e29e6931/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75fb37ce68289eb7e00e2ccdd2ef7f9271332545",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75fb37ce68289eb7e00e2ccdd2ef7f9271332545",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75fb37ce68289eb7e00e2ccdd2ef7f9271332545"
      }
    ],
    "stats": {
      "total": 630,
      "additions": 315,
      "deletions": 315
    },
    "files": [
      {
        "sha": "9b06aba22bad5971ae1db893dae8ddbab89d1ed5",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 111,
        "deletions": 111,
        "changes": 222,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -229,7 +229,7 @@ static UniValue waitfornewblock(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -269,7 +269,7 @@ static UniValue waitforblock(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -313,7 +313,7 @@ static UniValue waitforblockheight(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{                           (json object)\\n\"\n             \"  \\\"hash\\\" : {       (string) The blockhash\\n\"\n-            \"  \\\"height\\\" : {     (int) Block height\\n\"\n+            \"  \\\"height\\\" : {     (numeric) Block height\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -400,10 +400,10 @@ static std::string EntryDescriptionString()\n            \"        \\\"ancestor\\\" : n,     (numeric) modified fees (see above) of in-mempool ancestors (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n            \"        \\\"descendant\\\" : n,   (numeric) modified fees (see above) of in-mempool descendants (including this one) in \" + CURRENCY_UNIT + \"\\n\"\n            \"    }\\n\"\n-           \"    \\\"depends\\\" : [           (array) unconfirmed transactions used as inputs for this transaction\\n\"\n+           \"    \\\"depends\\\" : [           (json array) unconfirmed transactions used as inputs for this transaction\\n\"\n            \"        \\\"transactionid\\\",    (string) parent transaction id\\n\"\n            \"       ... ]\\n\"\n-           \"    \\\"spentby\\\" : [           (array) unconfirmed transactions spending outputs from this transaction\\n\"\n+           \"    \\\"spentby\\\" : [           (json array) unconfirmed transactions spending outputs from this transaction\\n\"\n            \"        \\\"transactionid\\\",    (string) child transaction id\\n\"\n            \"       ... ]\\n\"\n            \"    \\\"bip125-replaceable\\\" : true|false,  (boolean) Whether this transaction could be replaced due to BIP125 (replace-by-fee)\\n\";\n@@ -984,14 +984,14 @@ static UniValue gettxoutsetinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"height\\\":n,     (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\": \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"transactions\\\": n,      (numeric) The number of transactions with unspent outputs\\n\"\n-            \"  \\\"txouts\\\": n,            (numeric) The number of unspent transaction outputs\\n\"\n-            \"  \\\"bogosize\\\": n,          (numeric) A meaningless metric for UTXO set size\\n\"\n+            \"  \\\"height\\\" : n,     (numeric) The current block height (index)\\n\"\n+            \"  \\\"bestblock\\\" : \\\"hex\\\",   (string) The hash of the block at the tip of the chain\\n\"\n+            \"  \\\"transactions\\\" : n,      (numeric) The number of transactions with unspent outputs\\n\"\n+            \"  \\\"txouts\\\" : n,            (numeric) The number of unspent transaction outputs\\n\"\n+            \"  \\\"bogosize\\\" : n,          (numeric) A meaningless metric for UTXO set size\\n\"\n             \"  \\\"hash_serialized_2\\\": \\\"hash\\\", (string) The serialized hash\\n\"\n-            \"  \\\"disk_size\\\": n,         (numeric) The estimated size of the chainstate on disk\\n\"\n-            \"  \\\"total_amount\\\": x.xxx          (numeric) The total amount\\n\"\n+            \"  \\\"disk_size\\\" : n,         (numeric) The estimated size of the chainstate on disk\\n\"\n+            \"  \\\"total_amount\\\" : x.xxx          (numeric) The total amount\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1032,7 +1032,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"bestblock\\\":  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n+            \"  \\\"bestblock\\\" :  \\\"hash\\\",    (string) The hash of the block at the tip of the chain\\n\"\n             \"  \\\"confirmations\\\" : n,       (numeric) The number of confirmations\\n\"\n             \"  \\\"value\\\" : x.xxx,           (numeric) The transaction value in \" + CURRENCY_UNIT + \"\\n\"\n             \"  \\\"scriptPubKey\\\" : {         (json object)\\n\"\n@@ -1204,39 +1204,39 @@ UniValue getblockchaininfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"chain\\\": \\\"xxxx\\\",              (string) current network name (main, test, regtest)\\n\"\n-            \"  \\\"blocks\\\": xxxxxx,             (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\\n\"\n-            \"  \\\"headers\\\": xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n-            \"  \\\"bestblockhash\\\": \\\"...\\\",       (string) the hash of the currently best block\\n\"\n-            \"  \\\"difficulty\\\": xxxxxx,         (numeric) the current difficulty\\n\"\n-            \"  \\\"mediantime\\\": xxxxxx,         (numeric) median time for the current best block\\n\"\n-            \"  \\\"verificationprogress\\\": xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n-            \"  \\\"initialblockdownload\\\": xxxx, (bool) (debug information) estimate of whether this node is in Initial Block Download mode.\\n\"\n-            \"  \\\"chainwork\\\": \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n-            \"  \\\"size_on_disk\\\": xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n-            \"  \\\"pruned\\\": xx,                 (boolean) if the blocks are subject to pruning\\n\"\n-            \"  \\\"pruneheight\\\": xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n-            \"  \\\"automatic_pruning\\\": xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n-            \"  \\\"prune_target_size\\\": xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n-            \"  \\\"softforks\\\": {                (object) status of softforks\\n\"\n+            \"  \\\"chain\\\" : \\\"xxxx\\\",              (string) current network name (main, test, regtest)\\n\"\n+            \"  \\\"blocks\\\" : xxxxxx,             (numeric) the height of the most-work fully-validated chain. The genesis block has height 0\\n\"\n+            \"  \\\"headers\\\" : xxxxxx,            (numeric) the current number of headers we have validated\\n\"\n+            \"  \\\"bestblockhash\\\" : \\\"...\\\",       (string) the hash of the currently best block\\n\"\n+            \"  \\\"difficulty\\\" : xxxxxx,         (numeric) the current difficulty\\n\"\n+            \"  \\\"mediantime\\\" : xxxxxx,         (numeric) median time for the current best block\\n\"\n+            \"  \\\"verificationprogress\\\" : xxxx, (numeric) estimate of verification progress [0..1]\\n\"\n+            \"  \\\"initialblockdownload\\\" : xxxx, (boolean) (debug information) estimate of whether this node is in Initial Block Download mode.\\n\"\n+            \"  \\\"chainwork\\\" : \\\"xxxx\\\"           (string) total amount of work in active chain, in hexadecimal\\n\"\n+            \"  \\\"size_on_disk\\\" : xxxxxx,       (numeric) the estimated size of the block and undo files on disk\\n\"\n+            \"  \\\"pruned\\\" : xx,                 (boolean) if the blocks are subject to pruning\\n\"\n+            \"  \\\"pruneheight\\\" : xxxxxx,        (numeric) lowest-height complete block stored (only present if pruning is enabled)\\n\"\n+            \"  \\\"automatic_pruning\\\" : xx,      (boolean) whether automatic pruning is enabled (only present if pruning is enabled)\\n\"\n+            \"  \\\"prune_target_size\\\" : xxxxxx,  (numeric) the target size used by pruning (only present if automatic pruning is enabled)\\n\"\n+            \"  \\\"softforks\\\" : {                (json object) status of softforks\\n\"\n             \"     \\\"xxxx\\\" : {                 (string) name of the softfork\\n\"\n-            \"        \\\"type\\\": \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n-            \"        \\\"bip9\\\": {               (object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n-            \"           \\\"status\\\": \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n-            \"           \\\"bit\\\": xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n-            \"           \\\"start_time\\\": xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n-            \"           \\\"timeout\\\": xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n-            \"           \\\"since\\\": xx,         (numeric) height of the first block to which the status applies\\n\"\n-            \"           \\\"statistics\\\": {      (object) numeric statistics about BIP9 signalling for a softfork\\n\"\n-            \"              \\\"period\\\": xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n-            \"              \\\"threshold\\\": xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n-            \"              \\\"elapsed\\\": xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n-            \"              \\\"count\\\": xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n-            \"              \\\"possible\\\": xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n+            \"        \\\"type\\\" : \\\"xxxx\\\",         (string) one of \\\"buried\\\", \\\"bip9\\\"\\n\"\n+            \"        \\\"bip9\\\": {               (json object) status of bip9 softforks (only for \\\"bip9\\\" type)\\n\"\n+            \"           \\\"status\\\" : \\\"xxxx\\\",    (string) one of \\\"defined\\\", \\\"started\\\", \\\"locked_in\\\", \\\"active\\\", \\\"failed\\\"\\n\"\n+            \"           \\\"bit\\\" : xx,           (numeric) the bit (0-28) in the block version field used to signal this softfork (only for \\\"started\\\" status)\\n\"\n+            \"           \\\"start_time\\\" : xx,     (numeric) the minimum median time past of a block at which the bit gains its meaning\\n\"\n+            \"           \\\"timeout\\\" : xx,       (numeric) the median time past of a block at which the deployment is considered failed if not yet locked in\\n\"\n+            \"           \\\"since\\\" : xx,         (numeric) height of the first block to which the status applies\\n\"\n+            \"           \\\"statistics\\\" : {      (json object) numeric statistics about BIP9 signalling for a softfork\\n\"\n+            \"              \\\"period\\\" : xx,     (numeric) the length in blocks of the BIP9 signalling period \\n\"\n+            \"              \\\"threshold\\\" : xx,  (numeric) the number of blocks with the version bit set required to activate the feature \\n\"\n+            \"              \\\"elapsed\\\" : xx,    (numeric) the number of blocks elapsed since the beginning of the current period \\n\"\n+            \"              \\\"count\\\" : xx,      (numeric) the number of blocks with the version bit set in the current period \\n\"\n+            \"              \\\"possible\\\" : xx    (boolean) returns false if there are not enough blocks left in this period to pass activation threshold \\n\"\n             \"           }\\n\"\n             \"        },\\n\"\n-            \"        \\\"height\\\": \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\\n\"\n-            \"        \\\"active\\\": xx,           (boolean) true if the rules are enforced for the mempool and the next block\\n\"\n+            \"        \\\"height\\\" : \\\"xxxxxx\\\",     (numeric) height of the first block which the rules are or will be enforced (only for \\\"buried\\\" type, or \\\"bip9\\\" type with \\\"active\\\" status)\\n\"\n+            \"        \\\"active\\\" : xx,           (boolean) true if the rules are enforced for the mempool and the next block\\n\"\n             \"     }\\n\"\n             \"  }\\n\"\n             \"  \\\"warnings\\\" : \\\"...\\\",           (string) any network and blockchain warnings.\\n\"\n@@ -1318,16 +1318,16 @@ static UniValue getchaintips(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,         (numeric) height of the chain tip\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n-            \"    \\\"branchlen\\\": 0          (numeric) zero for main chain\\n\"\n-            \"    \\\"status\\\": \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n+            \"    \\\"height\\\" : xxxx,         (numeric) height of the chain tip\\n\"\n+            \"    \\\"hash\\\" : \\\"xxxx\\\",         (string) block hash of the tip\\n\"\n+            \"    \\\"branchlen\\\" : 0          (numeric) zero for main chain\\n\"\n+            \"    \\\"status\\\" : \\\"active\\\"      (string) \\\"active\\\" for the main chain\\n\"\n             \"  },\\n\"\n             \"  {\\n\"\n-            \"    \\\"height\\\": xxxx,\\n\"\n-            \"    \\\"hash\\\": \\\"xxxx\\\",\\n\"\n-            \"    \\\"branchlen\\\": 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n-            \"    \\\"status\\\": \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n+            \"    \\\"height\\\" : xxxx,\\n\"\n+            \"    \\\"hash\\\" : \\\"xxxx\\\",\\n\"\n+            \"    \\\"branchlen\\\" : 1          (numeric) length of branch connecting the tip to the main chain\\n\"\n+            \"    \\\"status\\\" : \\\"xxxx\\\"        (string) status of the chain (active, valid-fork, valid-headers, headers-only, invalid)\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n             \"Possible values for status:\\n\"\n@@ -1437,13 +1437,13 @@ static UniValue getmempoolinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"loaded\\\": true|false         (boolean) True if the mempool is fully loaded\\n\"\n-            \"  \\\"size\\\": xxxxx,               (numeric) Current tx count\\n\"\n-            \"  \\\"bytes\\\": xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n-            \"  \\\"usage\\\": xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n-            \"  \\\"maxmempool\\\": xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n-            \"  \\\"mempoolminfee\\\": xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n-            \"  \\\"minrelaytxfee\\\": xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n+            \"  \\\"loaded\\\" : true|false         (boolean) True if the mempool is fully loaded\\n\"\n+            \"  \\\"size\\\" : xxxxx,               (numeric) Current tx count\\n\"\n+            \"  \\\"bytes\\\" : xxxxx,              (numeric) Sum of all virtual transaction sizes as defined in BIP 141. Differs from actual serialized size because witness data is discounted\\n\"\n+            \"  \\\"usage\\\" : xxxxx,              (numeric) Total memory usage for the mempool\\n\"\n+            \"  \\\"maxmempool\\\" : xxxxx,         (numeric) Maximum memory usage for the mempool\\n\"\n+            \"  \\\"mempoolminfee\\\" : xxxxx       (numeric) Minimum fee rate in \" + CURRENCY_UNIT + \"/kB for tx to be accepted. Is the maximum of minrelaytxfee and minimum mempool fee\\n\"\n+            \"  \\\"minrelaytxfee\\\" : xxxxx       (numeric) Current minimum relay fee for transactions\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1577,14 +1577,14 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-            \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n-            \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n-            \"  \\\"window_final_block_height\\\": xxxxx,    (numeric) The height of the final block in the window.\\n\"\n-            \"  \\\"window_block_count\\\": xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n-            \"  \\\"window_tx_count\\\": xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"window_interval\\\": xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n-            \"  \\\"txrate\\\": x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n+            \"  \\\"time\\\" : xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+            \"  \\\"txcount\\\" : xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n+            \"  \\\"window_final_block_hash\\\" : \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n+            \"  \\\"window_final_block_height\\\" : xxxxx,    (numeric) The height of the final block in the window.\\n\"\n+            \"  \\\"window_block_count\\\" : xxxxx,           (numeric) Size of the window in number of blocks.\\n\"\n+            \"  \\\"window_tx_count\\\" : xxxxx,              (numeric) The number of transactions in the window. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"window_interval\\\" : xxxxx,              (numeric) The elapsed time in the window in seconds. Only returned if \\\"window_block_count\\\" is > 0.\\n\"\n+            \"  \\\"txrate\\\" : x.xx,                        (numeric) The average rate of transactions per second in the window. Only returned if \\\"window_interval\\\" is > 0.\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1716,41 +1716,41 @@ static UniValue getblockstats(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{                           (json object)\\n\"\n-            \"  \\\"avgfee\\\": xxxxx,          (numeric) Average fee in the block\\n\"\n-            \"  \\\"avgfeerate\\\": xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"avgtxsize\\\": xxxxx,       (numeric) Average transaction size\\n\"\n-            \"  \\\"blockhash\\\": xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n-            \"  \\\"feerate_percentiles\\\": [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgfee\\\" : xxxxx,          (numeric) Average fee in the block\\n\"\n+            \"  \\\"avgfeerate\\\" : xxxxx,      (numeric) Average feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"avgtxsize\\\" : xxxxx,       (numeric) Average transaction size\\n\"\n+            \"  \\\"blockhash\\\" : xxxxx,       (string) The block hash (to check for potential reorgs)\\n\"\n+            \"  \\\"feerate_percentiles\\\" : [  (array of numeric) Feerates at the 10th, 25th, 50th, 75th, and 90th percentile weight unit (in satoshis per virtual byte)\\n\"\n             \"      \\\"10th_percentile_feerate\\\",      (numeric) The 10th percentile feerate\\n\"\n             \"      \\\"25th_percentile_feerate\\\",      (numeric) The 25th percentile feerate\\n\"\n             \"      \\\"50th_percentile_feerate\\\",      (numeric) The 50th percentile feerate\\n\"\n             \"      \\\"75th_percentile_feerate\\\",      (numeric) The 75th percentile feerate\\n\"\n             \"      \\\"90th_percentile_feerate\\\",      (numeric) The 90th percentile feerate\\n\"\n             \"  ],\\n\"\n-            \"  \\\"height\\\": xxxxx,          (numeric) The height of the block\\n\"\n-            \"  \\\"ins\\\": xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n-            \"  \\\"maxfee\\\": xxxxx,          (numeric) Maximum fee in the block\\n\"\n-            \"  \\\"maxfeerate\\\": xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"maxtxsize\\\": xxxxx,       (numeric) Maximum transaction size\\n\"\n-            \"  \\\"medianfee\\\": xxxxx,       (numeric) Truncated median fee in the block\\n\"\n-            \"  \\\"mediantime\\\": xxxxx,      (numeric) The block median time past\\n\"\n-            \"  \\\"mediantxsize\\\": xxxxx,    (numeric) Truncated median transaction size\\n\"\n-            \"  \\\"minfee\\\": xxxxx,          (numeric) Minimum fee in the block\\n\"\n-            \"  \\\"minfeerate\\\": xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n-            \"  \\\"mintxsize\\\": xxxxx,       (numeric) Minimum transaction size\\n\"\n-            \"  \\\"outs\\\": xxxxx,            (numeric) The number of outputs\\n\"\n-            \"  \\\"subsidy\\\": xxxxx,         (numeric) The block subsidy\\n\"\n-            \"  \\\"swtotal_size\\\": xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n-            \"  \\\"swtotal_weight\\\": xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"swtxs\\\": xxxxx,           (numeric) The number of segwit transactions\\n\"\n-            \"  \\\"time\\\": xxxxx,            (numeric) The block time\\n\"\n-            \"  \\\"total_out\\\": xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n-            \"  \\\"total_size\\\": xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n-            \"  \\\"total_weight\\\": xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n-            \"  \\\"totalfee\\\": xxxxx,        (numeric) The fee total\\n\"\n-            \"  \\\"txs\\\": xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n-            \"  \\\"utxo_increase\\\": xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n-            \"  \\\"utxo_size_inc\\\": xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n+            \"  \\\"height\\\" : xxxxx,          (numeric) The height of the block\\n\"\n+            \"  \\\"ins\\\" : xxxxx,             (numeric) The number of inputs (excluding coinbase)\\n\"\n+            \"  \\\"maxfee\\\" : xxxxx,          (numeric) Maximum fee in the block\\n\"\n+            \"  \\\"maxfeerate\\\" : xxxxx,      (numeric) Maximum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"maxtxsize\\\" : xxxxx,       (numeric) Maximum transaction size\\n\"\n+            \"  \\\"medianfee\\\" : xxxxx,       (numeric) Truncated median fee in the block\\n\"\n+            \"  \\\"mediantime\\\" : xxxxx,      (numeric) The block median time past\\n\"\n+            \"  \\\"mediantxsize\\\" : xxxxx,    (numeric) Truncated median transaction size\\n\"\n+            \"  \\\"minfee\\\" : xxxxx,          (numeric) Minimum fee in the block\\n\"\n+            \"  \\\"minfeerate\\\" : xxxxx,      (numeric) Minimum feerate (in satoshis per virtual byte)\\n\"\n+            \"  \\\"mintxsize\\\" : xxxxx,       (numeric) Minimum transaction size\\n\"\n+            \"  \\\"outs\\\" : xxxxx,            (numeric) The number of outputs\\n\"\n+            \"  \\\"subsidy\\\" : xxxxx,         (numeric) The block subsidy\\n\"\n+            \"  \\\"swtotal_size\\\" : xxxxx,    (numeric) Total size of all segwit transactions\\n\"\n+            \"  \\\"swtotal_weight\\\" : xxxxx,  (numeric) Total weight of all segwit transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"swtxs\\\" : xxxxx,           (numeric) The number of segwit transactions\\n\"\n+            \"  \\\"time\\\" : xxxxx,            (numeric) The block time\\n\"\n+            \"  \\\"total_out\\\" : xxxxx,       (numeric) Total amount in all outputs (excluding coinbase and thus reward [ie subsidy + totalfee])\\n\"\n+            \"  \\\"total_size\\\" : xxxxx,      (numeric) Total size of all non-coinbase transactions\\n\"\n+            \"  \\\"total_weight\\\" : xxxxx,    (numeric) Total weight of all non-coinbase transactions divided by segwit scale factor (4)\\n\"\n+            \"  \\\"totalfee\\\" : xxxxx,        (numeric) The fee total\\n\"\n+            \"  \\\"txs\\\" : xxxxx,             (numeric) The number of transactions (excluding coinbase)\\n\"\n+            \"  \\\"utxo_increase\\\" : xxxxx,   (numeric) The increase/decrease in the number of unspent outputs\\n\"\n+            \"  \\\"utxo_size_inc\\\" : xxxxx,   (numeric) The increase/decrease in size for the utxo index (not discounting op_return and similar)\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -2076,21 +2076,21 @@ UniValue scantxoutset(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"success\\\": true|false,         (boolean) Whether the scan was completed\\n\"\n-            \"  \\\"txouts\\\": n,                   (numeric) The number of unspent transaction outputs scanned\\n\"\n-            \"  \\\"height\\\": n,                   (numeric) The current block height (index)\\n\"\n-            \"  \\\"bestblock\\\": \\\"hex\\\",            (string) The hash of the block at the tip of the chain\\n\"\n-            \"  \\\"unspents\\\": [\\n\"\n+            \"  \\\"success\\\" : true|false,         (boolean) Whether the scan was completed\\n\"\n+            \"  \\\"txouts\\\" : n,                   (numeric) The number of unspent transaction outputs scanned\\n\"\n+            \"  \\\"height\\\" : n,                   (numeric) The current block height (index)\\n\"\n+            \"  \\\"bestblock\\\" : \\\"hex\\\",            (string) The hash of the block at the tip of the chain\\n\"\n+            \"  \\\"unspents\\\" : [\\n\"\n             \"   {\\n\"\n-            \"    \\\"txid\\\": \\\"hash\\\",              (string) The transaction id\\n\"\n-            \"    \\\"vout\\\": n,                   (numeric) The vout value\\n\"\n-            \"    \\\"scriptPubKey\\\": \\\"script\\\",    (string) The script key\\n\"\n-            \"    \\\"desc\\\": \\\"descriptor\\\",        (string) A specialized descriptor for the matched scriptPubKey\\n\"\n-            \"    \\\"amount\\\": x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n-            \"    \\\"height\\\": n,                 (numeric) Height of the unspent transaction output\\n\"\n+            \"    \\\"txid\\\" : \\\"hash\\\",              (string) The transaction id\\n\"\n+            \"    \\\"vout\\\" : n,                   (numeric) The vout value\\n\"\n+            \"    \\\"scriptPubKey\\\" : \\\"script\\\",    (string) The script key\\n\"\n+            \"    \\\"desc\\\" : \\\"descriptor\\\",        (string) A specialized descriptor for the matched scriptPubKey\\n\"\n+            \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount in \" + CURRENCY_UNIT + \" of the unspent output\\n\"\n+            \"    \\\"height\\\" : n,                 (numeric) Height of the unspent transaction output\\n\"\n             \"   }\\n\"\n             \"   ,...],\\n\"\n-            \"  \\\"total_amount\\\": x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n+            \"  \\\"total_amount\\\" : x.xxx,          (numeric) The total amount of all found unspent outputs in \" + CURRENCY_UNIT + \"\\n\"\n             \"]\\n\"\n                 },\n                 RPCExamples{\"\"},\n@@ -2284,10 +2284,10 @@ UniValue dumptxoutset(const JSONRPCRequest& request)\n         },\n         RPCResult{\n             \"{\\n\"\n-            \"  \\\"coins_written\\\": n,   (numeric) the number of coins written in the snapshot\\n\"\n-            \"  \\\"base_hash\\\": \\\"...\\\",   (string) the hash of the base of the snapshot\\n\"\n-            \"  \\\"base_height\\\": n,     (string) the height of the base of the snapshot\\n\"\n-            \"  \\\"path\\\": \\\"...\\\"         (string) the absolute path that the snapshot was written to\\n\"\n+            \"  \\\"coins_written\\\" : n,   (numeric) the number of coins written in the snapshot\\n\"\n+            \"  \\\"base_hash\\\" : \\\"...\\\",   (string) the hash of the base of the snapshot\\n\"\n+            \"  \\\"base_height\\\" : n,     (string) the height of the base of the snapshot\\n\"\n+            \"  \\\"path\\\" : \\\"...\\\"         (string) the absolute path that the snapshot was written to\\n\"\n             \"]\\n\"\n         },\n         RPCExamples{"
      },
      {
        "sha": "ab5d830b2a06f23257b9b7f637cfcc45b4281d76",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -154,7 +154,7 @@ static UniValue generatetodescriptor(const JSONRPCRequest& request)\n             {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n         },\n         RPCResult{\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"},\n+            \"[ blockhashes ]     (json array) hashes of blocks generated\\n\"},\n         RPCExamples{\n             \"\\nGenerate 11 blocks to mydesc\\n\" + HelpExampleCli(\"generatetodescriptor\", \"11 \\\"mydesc\\\"\")},\n     }\n@@ -196,7 +196,7 @@ static UniValue generatetoaddress(const JSONRPCRequest& request)\n                     {\"maxtries\", RPCArg::Type::NUM, /* default */ \"1000000\", \"How many iterations to try.\"},\n                 },\n                 RPCResult{\n-            \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n+            \"[ blockhashes ]     (json array) hashes of blocks generated\\n\"\n                 },\n                 RPCExamples{\n             \"\\nGenerate 11 blocks to myaddress\\n\"\n@@ -231,14 +231,14 @@ static UniValue getmininginfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n                     \"{\\n\"\n-                    \"  \\\"blocks\\\": nnn,             (numeric) The current block\\n\"\n-                    \"  \\\"currentblockweight\\\": nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\\n\"\n-                    \"  \\\"currentblocktx\\\": nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\\n\"\n-                    \"  \\\"difficulty\\\": xxx.xxxxx    (numeric) The current difficulty\\n\"\n-                    \"  \\\"networkhashps\\\": nnn,      (numeric) The network hashes per second\\n\"\n-                    \"  \\\"pooledtx\\\": n              (numeric) The size of the mempool\\n\"\n-                    \"  \\\"chain\\\": \\\"xxxx\\\",           (string) current network name (main, test, regtest)\\n\"\n-                    \"  \\\"warnings\\\": \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n+                    \"  \\\"blocks\\\" : nnn,             (numeric) The current block\\n\"\n+                    \"  \\\"currentblockweight\\\" : nnn, (numeric, optional) The block weight of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"currentblocktx\\\" : nnn,     (numeric, optional) The number of block transactions of the last assembled block (only present if a block was ever assembled)\\n\"\n+                    \"  \\\"difficulty\\\" : xxx.xxxxx    (numeric) The current difficulty\\n\"\n+                    \"  \\\"networkhashps\\\" : nnn,      (numeric) The network hashes per second\\n\"\n+                    \"  \\\"pooledtx\\\" : n              (numeric) The size of the mempool\\n\"\n+                    \"  \\\"chain\\\" : \\\"xxxx\\\",           (string) current network name (main, test, regtest)\\n\"\n+                    \"  \\\"warnings\\\" : \\\"...\\\"          (string) any network and blockchain warnings\\n\"\n                     \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -365,16 +365,16 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  },\\n\"\n             \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n             \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",     (string) The hash of current highest block\\n\"\n-            \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n+            \"  \\\"transactions\\\" : [                (json array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n             \"         \\\"data\\\" : \\\"xxxx\\\",             (string) transaction data encoded in hexadecimal (byte-for-byte)\\n\"\n             \"         \\\"txid\\\" : \\\"xxxx\\\",             (string) transaction id encoded in little-endian hexadecimal\\n\"\n             \"         \\\"hash\\\" : \\\"xxxx\\\",             (string) hash encoded in little-endian hexadecimal (including witness data)\\n\"\n-            \"         \\\"depends\\\" : [                (array) array of numbers \\n\"\n+            \"         \\\"depends\\\" : [                (json array) array of numbers \\n\"\n             \"             n                          (numeric) transactions before this one (by 1-based index in 'transactions' list) that must be present in the final block if this one is\\n\"\n             \"             ,...\\n\"\n             \"         ],\\n\"\n-            \"         \\\"fee\\\": n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n+            \"         \\\"fee\\\" : n,                    (numeric) difference in value between transaction inputs and outputs (in satoshis); for coinbase transactions, this is a negative Number of the total collected block fees (ie, not including the block subsidy); if key is not present, fee is unknown and clients MUST NOT assume there isn't one\\n\"\n             \"         \\\"sigops\\\" : n,                (numeric) total SigOps cost, as counted for purposes of block limits; if key is not present, sigop cost is unknown and clients MUST NOT assume it is zero\\n\"\n             \"         \\\"weight\\\" : n,                (numeric) total transaction weight, as counted for purposes of block limits\\n\"\n             \"      }\\n\"\n@@ -850,7 +850,7 @@ static UniValue estimatesmartfee(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{\\n\"\n             \"  \\\"feerate\\\" : x.x,     (numeric, optional) estimate fee rate in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"errors\\\": [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n+            \"  \\\"errors\\\" : [ str... ] (json array of strings, optional) Errors encountered during processing\\n\"\n             \"  \\\"blocks\\\" : n         (numeric) block number where estimate was found\\n\"\n             \"}\\n\"\n             \"\\n\"\n@@ -924,7 +924,7 @@ static UniValue estimaterawfee(const JSONRPCRequest& request)\n             \"      \\\"fail\\\" : {              (json object, optional) information about the highest range of feerates to fail to meet the threshold\\n\"\n             \"        ...\\n\"\n             \"      },\\n\"\n-            \"      \\\"errors\\\":  [            (json array, optional) Errors encountered during processing\\n\"\n+            \"      \\\"errors\\\" :  [            (json array, optional) Errors encountered during processing\\n\"\n             \"        \\\"str\\\",                (string)\\n\"\n             \"        ...\\n\"\n             \"      ],\\n\""
      },
      {
        "sha": "74faf5701122f9154bfab468079e794f3bf6d62f",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -81,9 +81,9 @@ static UniValue createmultisig(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\":\\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\":\\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n+            \"  \\\"address\\\" : \\\"multisigaddress\\\",  (string) The value of the new multisig address.\\n\"\n+            \"  \\\"redeemScript\\\" : \\\"script\\\"       (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\" : \\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -187,7 +187,7 @@ UniValue deriveaddresses(const JSONRPCRequest& request)\n                 {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED_NAMED_ARG, \"If a ranged descriptor is used, this specifies the end or the range (in [begin,end] notation) to derive.\"},\n             },\n             RPCResult{\n-                \"[ address ] (array) the derived addresses\\n\"\n+                \"[ address ] (json array) the derived addresses\\n\"\n             },\n             RPCExamples{\n                 \"First three native segwit receive addresses\\n\" +\n@@ -418,13 +418,13 @@ static UniValue getmemoryinfo(const JSONRPCRequest& request)\n                 {\n                     RPCResult{\"mode \\\"stats\\\"\",\n             \"{\\n\"\n-            \"  \\\"locked\\\": {               (json object) Information about locked memory manager\\n\"\n-            \"    \\\"used\\\": xxxxx,          (numeric) Number of bytes used\\n\"\n-            \"    \\\"free\\\": xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n-            \"    \\\"total\\\": xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n-            \"    \\\"locked\\\": xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n-            \"    \\\"chunks_used\\\": xxxxx,   (numeric) Number allocated chunks\\n\"\n-            \"    \\\"chunks_free\\\": xxxxx,   (numeric) Number unused chunks\\n\"\n+            \"  \\\"locked\\\" : {               (json object) Information about locked memory manager\\n\"\n+            \"    \\\"used\\\" : xxxxx,          (numeric) Number of bytes used\\n\"\n+            \"    \\\"free\\\" : xxxxx,          (numeric) Number of bytes available in current arenas\\n\"\n+            \"    \\\"total\\\" : xxxxxxx,       (numeric) Total number of bytes managed\\n\"\n+            \"    \\\"locked\\\" : xxxxxx,       (numeric) Amount of bytes that succeeded locking. If this number is smaller than total, locking pages failed at some point and key data could be swapped to disk.\\n\"\n+            \"    \\\"chunks_used\\\" : xxxxx,   (numeric) Number allocated chunks\\n\"\n+            \"    \\\"chunks_free\\\" : xxxxx,   (numeric) Number unused chunks\\n\"\n             \"  }\\n\"\n             \"}\\n\"\n                     },\n@@ -497,7 +497,7 @@ UniValue logging(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{                   (json object where keys are the logging categories, and values indicates its status\\n\"\n-            \"  \\\"category\\\": true|false,  (bool) if being debug logged or not. false:inactive, true:active\\n\"\n+            \"  \\\"category\\\" : true|false,  (boolean) if being debug logged or not. false:inactive, true:active\\n\"\n             \"  ...\\n\"\n             \"}\\n\"\n                 },"
      },
      {
        "sha": "92542539dfdab8d76c15e8cff07b011f0a38abaa",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 63,
        "deletions": 63,
        "changes": 126,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -79,48 +79,48 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"id\\\": n,                   (numeric) Peer index\\n\"\n-            \"    \\\"addr\\\":\\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n-            \"    \\\"addrbind\\\":\\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n-            \"    \\\"addrlocal\\\":\\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n-            \"    \\\"mapped_as\\\":\\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"\n-            \"    \\\"services\\\":\\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n-            \"    \\\"servicesnames\\\":[              (array) the services offered, in human-readable form\\n\"\n+            \"    \\\"id\\\" : n,                   (numeric) Peer index\\n\"\n+            \"    \\\"addr\\\" : \\\"host:port\\\",      (string) The IP address and port of the peer\\n\"\n+            \"    \\\"addrbind\\\" : \\\"ip:port\\\",    (string) Bind address of the connection to the peer\\n\"\n+            \"    \\\"addrlocal\\\" : \\\"ip:port\\\",   (string) Local address as reported by the peer\\n\"\n+            \"    \\\"mapped_as\\\" : \\\"mapped_as\\\", (string) The AS in the BGP route to the peer used for diversifying peer selection\\n\"\n+            \"    \\\"services\\\" : \\\"xxxxxxxxxxxxxxxx\\\",   (string) The services offered\\n\"\n+            \"    \\\"servicesnames\\\" : [              (json array) the services offered, in human-readable form\\n\"\n             \"        \\\"SERVICE_NAME\\\",         (string) the service name if it is recognised\\n\"\n             \"         ...\\n\"\n             \"     ],\\n\"\n-            \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n-            \"    \\\"lastrecv\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n-            \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n-            \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n-            \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n-            \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n-            \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n-            \"    \\\"pingwait\\\": n,             (numeric) ping wait (if non-zero)\\n\"\n-            \"    \\\"version\\\": v,              (numeric) The peer version, such as 70001\\n\"\n-            \"    \\\"subver\\\": \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n-            \"    \\\"inbound\\\": true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n-            \"    \\\"addnode\\\": true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n-            \"    \\\"startingheight\\\": n,       (numeric) The starting height (block) of the peer\\n\"\n-            \"    \\\"banscore\\\": n,             (numeric) The ban score\\n\"\n-            \"    \\\"synced_headers\\\": n,       (numeric) The last header we have in common with this peer\\n\"\n-            \"    \\\"synced_blocks\\\": n,        (numeric) The last block we have in common with this peer\\n\"\n-            \"    \\\"inflight\\\": [\\n\"\n+            \"    \\\"relaytxes\\\" : true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n+            \"    \\\"lastsend\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n+            \"    \\\"lastrecv\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n+            \"    \\\"bytessent\\\" : n,            (numeric) The total bytes sent\\n\"\n+            \"    \\\"bytesrecv\\\" : n,            (numeric) The total bytes received\\n\"\n+            \"    \\\"conntime\\\" : ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n+            \"    \\\"timeoffset\\\" : ttt,         (numeric) The time offset in seconds\\n\"\n+            \"    \\\"pingtime\\\" : n,             (numeric) ping time (if available)\\n\"\n+            \"    \\\"minping\\\" : n,              (numeric) minimum observed ping time (if any at all)\\n\"\n+            \"    \\\"pingwait\\\" : n,             (numeric) ping wait (if non-zero)\\n\"\n+            \"    \\\"version\\\" : v,              (numeric) The peer version, such as 70001\\n\"\n+            \"    \\\"subver\\\" : \\\"/Satoshi:0.8.5/\\\",  (string) The string version\\n\"\n+            \"    \\\"inbound\\\" : true|false,     (boolean) Inbound (true) or Outbound (false)\\n\"\n+            \"    \\\"addnode\\\" : true|false,     (boolean) Whether connection was due to addnode/-connect or if it was an automatic/inbound connection\\n\"\n+            \"    \\\"startingheight\\\" : n,       (numeric) The starting height (block) of the peer\\n\"\n+            \"    \\\"banscore\\\" : n,             (numeric) The ban score\\n\"\n+            \"    \\\"synced_headers\\\" : n,       (numeric) The last header we have in common with this peer\\n\"\n+            \"    \\\"synced_blocks\\\" : n,        (numeric) The last block we have in common with this peer\\n\"\n+            \"    \\\"inflight\\\" : [\\n\"\n             \"       n,                        (numeric) The heights of blocks we're currently asking from this peer\\n\"\n             \"       ...\\n\"\n             \"    ],\\n\"\n-            \"    \\\"whitelisted\\\": true|false, (boolean) Whether the peer is whitelisted\\n\"\n-            \"    \\\"minfeefilter\\\": n,         (numeric) The minimum fee rate for transactions this peer accepts\\n\"\n-            \"    \\\"bytessent_per_msg\\\": {\\n\"\n-            \"       \\\"msg\\\": n,               (numeric) The total bytes sent aggregated by message type\\n\"\n+            \"    \\\"whitelisted\\\" : true|false, (boolean) Whether the peer is whitelisted\\n\"\n+            \"    \\\"minfeefilter\\\" : n,         (numeric) The minimum fee rate for transactions this peer accepts\\n\"\n+            \"    \\\"bytessent_per_msg\\\" : {\\n\"\n+            \"       \\\"msg\\\" : n,               (numeric) The total bytes sent aggregated by message type\\n\"\n             \"                               When a message type is not listed in this json object, the bytes sent are 0.\\n\"\n             \"                               Only known message types can appear as keys in the object.\\n\"\n             \"       ...\\n\"\n             \"    },\\n\"\n-            \"    \\\"bytesrecv_per_msg\\\": {\\n\"\n-            \"       \\\"msg\\\": n,               (numeric) The total bytes received aggregated by message type\\n\"\n+            \"    \\\"bytesrecv_per_msg\\\" : {\\n\"\n+            \"       \\\"msg\\\" : n,               (numeric) The total bytes received aggregated by message type\\n\"\n             \"                               When a message type is not listed in this json object, the bytes received are 0.\\n\"\n             \"                               Only known message types can appear as keys in the object and all bytes received of unknown message types are listed under '\"+NET_MESSAGE_COMMAND_OTHER+\"'.\\n\"\n             \"       ...\\n\"\n@@ -387,17 +387,17 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"totalbytesrecv\\\": n,   (numeric) Total bytes received\\n\"\n-            \"  \\\"totalbytessent\\\": n,   (numeric) Total bytes sent\\n\"\n-            \"  \\\"timemillis\\\": t,       (numeric) Current UNIX time in milliseconds\\n\"\n-            \"  \\\"uploadtarget\\\":\\n\"\n+            \"  \\\"totalbytesrecv\\\" : n,   (numeric) Total bytes received\\n\"\n+            \"  \\\"totalbytessent\\\" : n,   (numeric) Total bytes sent\\n\"\n+            \"  \\\"timemillis\\\" : t,       (numeric) Current UNIX time in milliseconds\\n\"\n+            \"  \\\"uploadtarget\\\" : \\n\"\n             \"  {\\n\"\n-            \"    \\\"timeframe\\\": n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n-            \"    \\\"target\\\": n,                            (numeric) Target in bytes\\n\"\n-            \"    \\\"target_reached\\\": true|false,           (boolean) True if target is reached\\n\"\n-            \"    \\\"serve_historical_blocks\\\": true|false,  (boolean) True if serving historical blocks\\n\"\n-            \"    \\\"bytes_left_in_cycle\\\": t,               (numeric) Bytes left in current time cycle\\n\"\n-            \"    \\\"time_left_in_cycle\\\": t                 (numeric) Seconds left in current time cycle\\n\"\n+            \"    \\\"timeframe\\\" : n,                         (numeric) Length of the measuring timeframe in seconds\\n\"\n+            \"    \\\"target\\\" : n,                            (numeric) Target in bytes\\n\"\n+            \"    \\\"target_reached\\\" : true|false,           (boolean) True if target is reached\\n\"\n+            \"    \\\"serve_historical_blocks\\\" : true|false,  (boolean) True if serving historical blocks\\n\"\n+            \"    \\\"bytes_left_in_cycle\\\" : t,               (numeric) Bytes left in current time cycle\\n\"\n+            \"    \\\"time_left_in_cycle\\\" : t                 (numeric) Seconds left in current time cycle\\n\"\n             \"  }\\n\"\n             \"}\\n\"\n                 },\n@@ -453,35 +453,35 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{                                        (json object)\\n\"\n-            \"  \\\"version\\\": xxxxx,                      (numeric) the server version\\n\"\n+            \"  \\\"version\\\" : xxxxx,                      (numeric) the server version\\n\"\n             \"  \\\"subversion\\\" : \\\"str\\\",                  (string) the server subversion string\\n\"\n-            \"  \\\"protocolversion\\\": xxxxx,              (numeric) the protocol version\\n\"\n+            \"  \\\"protocolversion\\\" : xxxxx,              (numeric) the protocol version\\n\"\n             \"  \\\"localservices\\\" : \\\"hex\\\",               (string) the services we offer to the network\\n\"\n-            \"  \\\"localservicesnames\\\": [                (array) the services we offer to the network, in human-readable form\\n\"\n+            \"  \\\"localservicesnames\\\" : [                (json array) the services we offer to the network, in human-readable form\\n\"\n             \"      \\\"SERVICE_NAME\\\",                    (string) the service name\\n\"\n             \"       ...\\n\"\n             \"   ],\\n\"\n-            \"  \\\"localrelay\\\": true|false,              (bool) true if transaction relay is requested from peers\\n\"\n-            \"  \\\"timeoffset\\\": xxxxx,                   (numeric) the time offset\\n\"\n-            \"  \\\"connections\\\": xxxxx,                  (numeric) the number of connections\\n\"\n-            \"  \\\"networkactive\\\": true|false,           (bool) whether p2p networking is enabled\\n\"\n-            \"  \\\"networks\\\": [                          (array) information per network\\n\"\n+            \"  \\\"localrelay\\\" : true|false,              (boolean) true if transaction relay is requested from peers\\n\"\n+            \"  \\\"timeoffset\\\" : xxxxx,                   (numeric) the time offset\\n\"\n+            \"  \\\"connections\\\" : xxxxx,                  (numeric) the number of connections\\n\"\n+            \"  \\\"networkactive\\\" : true|false,           (boolean) whether p2p networking is enabled\\n\"\n+            \"  \\\"networks\\\" : [                          (json array) information per network\\n\"\n             \"  {                                      (json object)\\n\"\n-            \"    \\\"name\\\": \\\"str\\\",                       (string) network (ipv4, ipv6 or onion)\\n\"\n-            \"    \\\"limited\\\": true|false,               (boolean) is the network limited using -onlynet?\\n\"\n-            \"    \\\"reachable\\\": true|false,             (boolean) is the network reachable?\\n\"\n+            \"    \\\"name\\\" : \\\"str\\\",                       (string) network (ipv4, ipv6 or onion)\\n\"\n+            \"    \\\"limited\\\" : true|false,               (boolean) is the network limited using -onlynet?\\n\"\n+            \"    \\\"reachable\\\" : true|false,             (boolean) is the network reachable?\\n\"\n             \"    \\\"proxy\\\" : \\\"str\\\"                      (string) (\\\"host:port\\\") the proxy that is used for this network, or empty if none\\n\"\n-            \"    \\\"proxy_randomize_credentials\\\" : true|false,  (bool) Whether randomized credentials are used\\n\"\n+            \"    \\\"proxy_randomize_credentials\\\" : true|false,  (boolean) Whether randomized credentials are used\\n\"\n             \"  },\\n\"\n             \"  ...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"relayfee\\\": x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"incrementalfee\\\": x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"localaddresses\\\": [                    (array) list of local addresses\\n\"\n+            \"  \\\"relayfee\\\" : x.xxxxxxxx,                (numeric) minimum relay fee for transactions in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"incrementalfee\\\" : x.xxxxxxxx,          (numeric) minimum fee increment for mempool limiting or BIP 125 replacement in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"localaddresses\\\" : [                    (json array) list of local addresses\\n\"\n             \"  {                                      (json object)\\n\"\n             \"    \\\"address\\\" : \\\"xxxx\\\",                  (string) network address\\n\"\n-            \"    \\\"port\\\": xxx,                         (numeric) network port\\n\"\n-            \"    \\\"score\\\": xxx                         (numeric) relative score\\n\"\n+            \"    \\\"port\\\" : xxx,                         (numeric) network port\\n\"\n+            \"    \\\"score\\\" : xxx                         (numeric) relative score\\n\"\n             \"  },\\n\"\n             \"  ...\\n\"\n             \"  ],\\n\"\n@@ -695,10 +695,10 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"time\\\": ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n-            \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n-            \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n-            \"    \\\"port\\\": n                   (numeric) The port of the node\\n\"\n+            \"    \\\"time\\\" : ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n+            \"    \\\"services\\\" : n,              (numeric) The services offered\\n\"\n+            \"    \\\"address\\\" : \\\"host\\\",          (string) The address of the node\\n\"\n+            \"    \\\"port\\\" : n                   (numeric) The port of the node\\n\"\n             \"  }\\n\"\n             \"  ,....\\n\"\n             \"]\\n\""
      },
      {
        "sha": "cd1c657c269ae3cb3ad6f7a032cf1317fcb99f4e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 27,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -98,7 +98,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n                      },\n                      RPCResult{\"if verbose is set to true\",\n             \"{\\n\"\n-            \"  \\\"in_active_chain\\\": b, (bool) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n+            \"  \\\"in_active_chain\\\" : b, (boolean) Whether specified block is in the active chain or not (only present with explicit \\\"blockhash\\\" argument)\\n\"\n             \"  \\\"hex\\\" : \\\"data\\\",       (string) The serialized, hex-encoded data for 'txid'\\n\"\n             \"  \\\"txid\\\" : \\\"id\\\",        (string) The transaction id (same as provided)\\n\"\n             \"  \\\"hash\\\" : \\\"id\\\",        (string) The transaction hash (differs from txid for witness transactions)\\n\"\n@@ -109,14 +109,14 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\": n,         (numeric) \\n\"\n-            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n-            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n+            \"       \\\"txid\\\" : \\\"id\\\",    (string) The transaction id\\n\"\n+            \"       \\\"vout\\\" : n,         (numeric) \\n\"\n+            \"       \\\"scriptSig\\\" : {     (json object) The script\\n\"\n+            \"         \\\"asm\\\" : \\\"asm\\\",  (string) asm\\n\"\n+            \"         \\\"hex\\\" : \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n-            \"       \\\"sequence\\\": n      (numeric) The script sequence number\\n\"\n-            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"       \\\"sequence\\\" : n      (numeric) The script sequence number\\n\"\n+            \"       \\\"txinwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n@@ -442,14 +442,14 @@ static UniValue decoderawtransaction(const JSONRPCRequest& request)\n             \"  \\\"locktime\\\" : ttt,       (numeric) The lock time\\n\"\n             \"  \\\"vin\\\" : [               (array of json objects)\\n\"\n             \"     {\\n\"\n-            \"       \\\"txid\\\": \\\"id\\\",    (string) The transaction id\\n\"\n-            \"       \\\"vout\\\": n,         (numeric) The output number\\n\"\n-            \"       \\\"scriptSig\\\": {     (json object) The script\\n\"\n-            \"         \\\"asm\\\": \\\"asm\\\",  (string) asm\\n\"\n-            \"         \\\"hex\\\": \\\"hex\\\"   (string) hex\\n\"\n+            \"       \\\"txid\\\" : \\\"id\\\",    (string) The transaction id\\n\"\n+            \"       \\\"vout\\\" : n,         (numeric) The output number\\n\"\n+            \"       \\\"scriptSig\\\" : {     (json object) The script\\n\"\n+            \"         \\\"asm\\\" : \\\"asm\\\",  (string) asm\\n\"\n+            \"         \\\"hex\\\" : \\\"hex\\\"   (string) hex\\n\"\n             \"       },\\n\"\n-            \"       \\\"txinwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n-            \"       \\\"sequence\\\": n     (numeric) The script sequence number\\n\"\n+            \"       \\\"txinwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"       \\\"sequence\\\" : n     (numeric) The script sequence number\\n\"\n             \"     }\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n@@ -514,20 +514,20 @@ static UniValue decodescript(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"asm\\\":\\\"asm\\\",          (string) Script public key\\n\"\n-            \"  \\\"type\\\":\\\"type\\\",        (string) The output type (e.g. \"+GetAllOutputTypes()+\")\\n\"\n-            \"  \\\"reqSigs\\\": n,         (numeric) The required signatures\\n\"\n-            \"  \\\"addresses\\\": [        (json array of string)\\n\"\n+            \"  \\\"asm\\\" : \\\"asm\\\",          (string) Script public key\\n\"\n+            \"  \\\"type\\\" : \\\"type\\\",        (string) The output type (e.g. \"+GetAllOutputTypes()+\")\\n\"\n+            \"  \\\"reqSigs\\\" : n,         (numeric) The required signatures\\n\"\n+            \"  \\\"addresses\\\" : [        (json array of string)\\n\"\n             \"     \\\"address\\\"          (string) bitcoin address\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n             \"  \\\"p2sh\\\":\\\"str\\\"          (string) address of P2SH script wrapping this redeem script (not returned if the script is already a P2SH).\\n\"\n-            \"  \\\"segwit\\\": {           (json object) Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness).\\n\"\n-            \"    \\\"asm\\\":\\\"str\\\",        (string) String representation of the script public key\\n\"\n-            \"    \\\"hex\\\":\\\"hexstr\\\",     (string) Hex string of the script public key\\n\"\n-            \"    \\\"type\\\":\\\"str\\\",       (string) The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\\n\"\n-            \"    \\\"reqSigs\\\": n,       (numeric) The required signatures (always 1)\\n\"\n-            \"    \\\"addresses\\\": [      (json array of string) (always length 1)\\n\"\n+            \"  \\\"segwit\\\" : {           (json object) Result of a witness script public key wrapping this redeem script (not returned if the script is a P2SH or witness).\\n\"\n+            \"    \\\"asm\\\" : \\\"str\\\",        (string) String representation of the script public key\\n\"\n+            \"    \\\"hex\\\" : \\\"hexstr\\\",     (string) Hex string of the script public key\\n\"\n+            \"    \\\"type\\\" : \\\"str\\\",       (string) The type of the script public key (e.g. witness_v0_keyhash or witness_v0_scripthash)\\n\"\n+            \"    \\\"reqSigs\\\" : n,       (numeric) The required signatures (always 1)\\n\"\n+            \"    \\\"addresses\\\" : [      (json array of string) (always length 1)\\n\"\n             \"      \\\"address\\\"         (string) segwit address\\n\"\n             \"       ,...\\n\"\n             \"    ],\\n\"\n@@ -846,7 +846,7 @@ static UniValue testmempoolaccept(const JSONRPCRequest& request)\n                     {\"maxfeerate\", RPCArg::Type::AMOUNT, /* default */ FormatMoney(DEFAULT_MAX_RAW_TX_FEE_RATE.GetFeePerK()), \"Reject transactions whose fee rate is higher than the specified value, expressed in \" + CURRENCY_UNIT + \"/kB\\n\"},\n                 },\n                 RPCResult{\n-            \"[                   (array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n+            \"[                   (json array) The result of the mempool acceptance test for each raw transaction in the input array.\\n\"\n             \"                            Length is exactly one for now.\\n\"\n             \" {\\n\"\n             \"  \\\"txid\\\"           (string) The transaction hash in hex\\n\"\n@@ -998,7 +998,7 @@ UniValue decodepsbt(const JSONRPCRequest& request)\n             \"          \\\"asm\\\" : \\\"asm\\\",            (string) The asm\\n\"\n             \"          \\\"hex\\\" : \\\"hex\\\",            (string) The hex\\n\"\n             \"        }\\n\"\n-            \"       \\\"final_scriptwitness\\\": [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n+            \"       \\\"final_scriptwitness\\\" : [\\\"hex\\\", ...] (array of string) hex-encoded witness data (if any)\\n\"\n             \"      \\\"unknown\\\" : {                (json object) The unknown global fields\\n\"\n             \"        \\\"key\\\" : \\\"value\\\"            (key-value pair) An unknown key-value pair\\n\"\n             \"         ...\\n\""
      },
      {
        "sha": "b62490ed2935cb3c80bb7da9dfa0b60c729eecc5",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -198,14 +198,14 @@ static UniValue getrpcinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \" \\\"active_commands\\\" (array) All active commands\\n\"\n+            \" \\\"active_commands\\\" (json array) All active commands\\n\"\n             \"  [\\n\"\n-            \"   {               (object) Information about an active command\\n\"\n+            \"   {               (json object) Information about an active command\\n\"\n             \"    \\\"method\\\"       (string)  The name of the RPC command \\n\"\n             \"    \\\"duration\\\"     (numeric)  The running time in microseconds\\n\"\n             \"   },...\\n\"\n             \"  ],\\n\"\n-            \" \\\"logpath\\\": \\\"xxx\\\" (string) The complete file path to the debug log\\n\"\n+            \" \\\"logpath\\\" : \\\"xxx\\\" (string) The complete file path to the debug log\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{"
      },
      {
        "sha": "758a68dc70a20abf47d2f9a78ac36632f6d0eee7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 81,
        "deletions": 81,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -972,9 +972,9 @@ static UniValue addmultisigaddress(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"address\\\":\\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n-            \"  \\\"redeemScript\\\":\\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n-            \"  \\\"descriptor\\\":\\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n+            \"  \\\"address\\\" : \\\"multisigaddress\\\",    (string) The value of the new multisig address.\\n\"\n+            \"  \\\"redeemScript\\\" : \\\"script\\\"         (string) The string value of the hex-encoded redemption script.\\n\"\n+            \"  \\\"descriptor\\\" : \\\"descriptor\\\"     (string) The descriptor for this multisig\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1206,12 +1206,12 @@ static UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\" : true,        (bool) Only returns true if imported addresses were involved in transaction.\\n\"\n+            \"    \\\"involvesWatchonly\\\" : true,        (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n             \"    \\\"address\\\" : \\\"receivingaddress\\\",  (string) The receiving address\\n\"\n             \"    \\\"amount\\\" : x.xxx,                  (numeric) The total amount in \" + CURRENCY_UNIT + \" received by the address\\n\"\n             \"    \\\"confirmations\\\" : n,               (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"    \\\"label\\\" : \\\"label\\\",               (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n-            \"    \\\"txids\\\": [\\n\"\n+            \"    \\\"txids\\\" : [\\n\"\n             \"       \\\"txid\\\",                         (string) The ids of transactions received with the address \\n\"\n             \"       ...\\n\"\n             \"    ]\\n\"\n@@ -1256,7 +1256,7 @@ static UniValue listreceivedbylabel(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\" : true,   (bool) Only returns true if imported addresses were involved in transaction.\\n\"\n+            \"    \\\"involvesWatchonly\\\" : true,   (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n             \"    \\\"amount\\\" : x.xxx,             (numeric) The total amount received by addresses with this label\\n\"\n             \"    \\\"confirmations\\\" : n,          (numeric) The number of confirmations of the most recent transaction included\\n\"\n             \"    \\\"label\\\" : \\\"label\\\"           (string) The label of the receiving address. The default label is \\\"\\\".\\n\"\n@@ -1378,20 +1378,20 @@ static const std::string TransactionDescriptionString()\n {\n     return \"    \\\"confirmations\\\": n,                        (numeric) The number of confirmations for the transaction. Negative confirmations means the\\n\"\n            \"                                                       transaction conflicted that many blocks ago.\\n\"\n-           \"    \\\"generated\\\": xxx,                          (bool) Only present if transaction only input is a coinbase one.\\n\"\n-           \"    \\\"trusted\\\": xxx,                            (bool) Only present if we consider transaction to be trusted and so safe to spend from.\\n\"\n-           \"    \\\"blockhash\\\": \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n-           \"    \\\"blockheight\\\": n,                          (numeric) The block height containing the transaction.\\n\"\n-           \"    \\\"blockindex\\\": n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n-           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"txid\\\": \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n-           \"    \\\"walletconflicts\\\": [                       (array) Conflicting transaction ids.\\n\"\n+           \"    \\\"generated\\\" : xxx,                          (boolean) Only present if transaction only input is a coinbase one.\\n\"\n+           \"    \\\"trusted\\\" : xxx,                            (boolean) Only present if we consider transaction to be trusted and so safe to spend from.\\n\"\n+           \"    \\\"blockhash\\\" : \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n+           \"    \\\"blockheight\\\" : n,                          (numeric) The block height containing the transaction.\\n\"\n+           \"    \\\"blockindex\\\" : n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n+           \"    \\\"blocktime\\\" : xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"txid\\\" : \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n+           \"    \\\"walletconflicts\\\" : [                       (json array) Conflicting transaction ids.\\n\"\n            \"      \\\"txid\\\",                                  (string) The transaction id.\\n\"\n            \"      ...\\n\"\n            \"    ],\\n\"\n-           \"    \\\"time\\\": xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n-           \"    \\\"comment\\\": \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n+           \"    \\\"time\\\" : xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"timereceived\\\" : xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"comment\\\" : \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n            \"    \\\"bip125-replaceable\\\" : \\\"str\\\",              (string) (\\\"yes|no|unknown\\\") Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\";\n }\n@@ -1418,22 +1418,22 @@ UniValue listtransactions(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"involvesWatchonly\\\": xxx, (bool) Only returns true if imported addresses were involved in transaction.\\n\"\n-            \"    \\\"address\\\":\\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n-            \"    \\\"category\\\":               (string) The transaction category.\\n\"\n+            \"    \\\"involvesWatchonly\\\" : xxx, (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n+            \"    \\\"address\\\" : \\\"address\\\",    (string) The bitcoin address of the transaction.\\n\"\n+            \"    \\\"category\\\" :               (string) The transaction category.\\n\"\n             \"                \\\"send\\\"                  Transactions sent.\\n\"\n             \"                \\\"receive\\\"               Non-coinbase transactions received.\\n\"\n             \"                \\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n             \"                \\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n             \"                \\\"orphan\\\"                Orphaned coinbase transactions received.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+            \"    \\\"amount\\\" : x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n             \"                                        for all other categories\\n\"\n-            \"    \\\"label\\\": \\\"label\\\",       (string) A comment for the address/transaction, if any\\n\"\n-            \"    \\\"vout\\\": n,                (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+            \"    \\\"label\\\" : \\\"label\\\",       (string) A comment for the address/transaction, if any\\n\"\n+            \"    \\\"vout\\\" : n,                (numeric) the vout value\\n\"\n+            \"    \\\"fee\\\" : x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             + TransactionDescriptionString()\n-            + \"    \\\"abandoned\\\": xxx          (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+            + \"    \\\"abandoned\\\": xxx          (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n             \"                                         'send' category of transactions.\\n\"\n             \"  }\\n\"\n             \"]\\n\"\n@@ -1543,30 +1543,30 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n             \"{                             (json object)\\n\"\n             \"  \\\"transactions\\\" : [          (json array)\\n\"\n             \"  {                           (json object)\\n\"\n-            \"    \\\"involvesWatchonly\\\": xxx, (bool) Only returns true if imported addresses were involved in transaction.\\n\"\n+            \"    \\\"involvesWatchonly\\\" : xxx, (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n             \"    \\\"address\\\" : \\\"str\\\",        (string) The bitcoin address of the transaction.\\n\"\n             \"    \\\"category\\\" : \\\"str\\\",       (string) The transaction category.\\n\"\n             \"                \\\"send\\\"                  Transactions sent.\\n\"\n             \"                \\\"receive\\\"               Non-coinbase transactions received.\\n\"\n             \"                \\\"generate\\\"              Coinbase transactions received with more than 100 confirmations.\\n\"\n             \"                \\\"immature\\\"              Coinbase transactions received with 100 or fewer confirmations.\\n\"\n             \"                \\\"orphan\\\"                Orphaned coinbase transactions received.\\n\"\n-            \"    \\\"amount\\\": x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n+            \"    \\\"amount\\\" : x.xxx,          (numeric) The amount in \" + CURRENCY_UNIT + \". This is negative for the 'send' category, and is positive\\n\"\n             \"                                         for all other categories\\n\"\n             \"    \\\"vout\\\" : n,               (numeric) the vout value\\n\"\n-            \"    \\\"fee\\\": x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n+            \"    \\\"fee\\\" : x.xxx,             (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the 'send' category of transactions.\\n\"\n             + TransactionDescriptionString()\n-            + \"    \\\"abandoned\\\": xxx,         (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.\\n\"\n+            + \"    \\\"abandoned\\\": xxx,         (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the 'send' category of transactions.\\n\"\n             \"    \\\"label\\\" : \\\"label\\\"       (string) A comment for the address/transaction, if any\\n\"\n-            \"    \\\"to\\\": \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n+            \"    \\\"to\\\" : \\\"...\\\",            (string) If a comment to is associated with the transaction.\\n\"\n             \"   },\\n\"\n             \"   ...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"removed\\\": [              (json array)\\n\"\n+            \"  \\\"removed\\\" : [              (json array)\\n\"\n             \"    <structure is the same as \\\"transactions\\\" above, only present if include_removed=true>\\n\"\n             \"    Note: transactions that were re-added in the active chain will appear as-is in this array, and may thus have a positive confirmation count.\\n\"\n             \"  ],\\n\"\n-            \"  \\\"lastblock\\\": \\\"hex\\\"        (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\\n\"\n+            \"  \\\"lastblock\\\" : \\\"hex\\\"        (string) The hash of the block (target_confirmations-1) from the best block on the main chain. This is typically used to feed back into listsinceblock the next time you call it. So you would generally use a target_confirmations of say 6, so you will be continually re-notified of transactions until they've reached 6 confirmations plus any new ones\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -1677,12 +1677,12 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n                 RPCResult{\n             \"{\\n\"\n             \"    \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n-            \"    \\\"fee\\\": x.xxx,            (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+            \"    \\\"fee\\\" : x.xxx,            (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                              'send' category of transactions.\\n\"\n             + TransactionDescriptionString()\n             + \"    \\\"details\\\" : [\\n\"\n             \"      {\\n\"\n-            \"        \\\"involvesWatchonly\\\": xxx,         (bool) Only returns true if imported addresses were involved in transaction.\\n\"\n+            \"        \\\"involvesWatchonly\\\" : xxx,         (boolean) Only returns true if imported addresses were involved in transaction.\\n\"\n             \"        \\\"address\\\" : \\\"address\\\",          (string) The bitcoin address involved in the transaction\\n\"\n             \"        \\\"category\\\" :                      (string) The transaction category.\\n\"\n             \"                     \\\"send\\\"                  Transactions sent.\\n\"\n@@ -1693,9 +1693,9 @@ static UniValue gettransaction(const JSONRPCRequest& request)\n             \"        \\\"amount\\\" : x.xxx,                 (numeric) The amount in \" + CURRENCY_UNIT + \"\\n\"\n             \"        \\\"label\\\" : \\\"label\\\",              (string) A comment for the address/transaction, if any\\n\"\n             \"        \\\"vout\\\" : n,                       (numeric) the vout value\\n\"\n-            \"        \\\"fee\\\": x.xxx,                     (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n+            \"        \\\"fee\\\" : x.xxx,                     (numeric) The amount of the fee in \" + CURRENCY_UNIT + \". This is negative and only available for the \\n\"\n             \"                                           'send' category of transactions.\\n\"\n-            \"        \\\"abandoned\\\": xxx                  (bool) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n+            \"        \\\"abandoned\\\" : xxx                  (boolean) 'true' if the transaction has been abandoned (inputs are respendable). Only available for the \\n\"\n             \"                                           'send' category of transactions.\\n\"\n             \"      }\\n\"\n             \"      ,...\\n\"\n@@ -2367,16 +2367,16 @@ static UniValue getbalances(const JSONRPCRequest& request)\n         {},\n         RPCResult{\n             \"{\\n\"\n-            \"    \\\"mine\\\": {                        (object) balances from outputs that the wallet can sign\\n\"\n-            \"      \\\"trusted\\\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n-            \"      \\\"untrusted_pending\\\": xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n-            \"      \\\"immature\\\": xxx                (numeric) balance from immature coinbase outputs\\n\"\n-            \"      \\\"used\\\": xxx                    (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\\n\"\n+            \"    \\\"mine\\\" : {                        (json object) balances from outputs that the wallet can sign\\n\"\n+            \"      \\\"trusted\\\" : xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n+            \"      \\\"untrusted_pending\\\" : xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n+            \"      \\\"immature\\\" : xxx                (numeric) balance from immature coinbase outputs\\n\"\n+            \"      \\\"used\\\" : xxx                    (numeric) (only present if avoid_reuse is set) balance from coins sent to addresses that were previously spent from (potentially privacy violating)\\n\"\n             \"    },\\n\"\n-            \"    \\\"watchonly\\\": {                   (object) watchonly balances (not present if wallet does not watch anything)\\n\"\n-            \"      \\\"trusted\\\": xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n-            \"      \\\"untrusted_pending\\\": xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n-            \"      \\\"immature\\\": xxx                (numeric) balance from immature coinbase outputs\\n\"\n+            \"    \\\"watchonly\\\" : {                   (json object) watchonly balances (not present if wallet does not watch anything)\\n\"\n+            \"      \\\"trusted\\\" : xxx                 (numeric) trusted balance (outputs created by the wallet or confirmed outputs)\\n\"\n+            \"      \\\"untrusted_pending\\\" : xxx       (numeric) untrusted pending balance (outputs created by others that are in the mempool)\\n\"\n+            \"      \\\"immature\\\" : xxx                (numeric) balance from immature coinbase outputs\\n\"\n             \"    },\\n\"\n             \"}\\n\"},\n         RPCExamples{\n@@ -2433,21 +2433,21 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                 {},\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"walletname\\\": xxxxx,               (string) the wallet name\\n\"\n-            \"  \\\"walletversion\\\": xxxxx,            (numeric) the wallet version\\n\"\n-            \"  \\\"balance\\\": xxxxxxx,                (numeric) DEPRECATED. Identical to getbalances().mine.trusted\\n\"\n-            \"  \\\"unconfirmed_balance\\\": xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n-            \"  \\\"immature_balance\\\": xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n-            \"  \\\"txcount\\\": xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n-            \"  \\\"keypoolsize\\\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n-            \"  \\\"keypoolsize_hd_internal\\\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n-            \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n-            \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n-            \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n-            \"  \\\"avoid_reuse\\\": true|false          (boolean) whether this wallet tracks clean/dirty coins in terms of reuse\\n\"\n-            \"  \\\"scanning\\\":                        (json object) current scanning details, or false if no scan is in progress\\n\"\n+            \"  \\\"walletname\\\" : xxxxx,               (string) the wallet name\\n\"\n+            \"  \\\"walletversion\\\" : xxxxx,            (numeric) the wallet version\\n\"\n+            \"  \\\"balance\\\" : xxxxxxx,                (numeric) DEPRECATED. Identical to getbalances().mine.trusted\\n\"\n+            \"  \\\"unconfirmed_balance\\\" : xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n+            \"  \\\"immature_balance\\\" : xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n+            \"  \\\"txcount\\\" : xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n+            \"  \\\"keypoololdest\\\" : xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoolsize\\\" : xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n+            \"  \\\"keypoolsize_hd_internal\\\" : xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n+            \"  \\\"unlocked_until\\\" : ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"paytxfee\\\" : x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n+            \"  \\\"private_keys_enabled\\\" : true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n+            \"  \\\"avoid_reuse\\\" : true|false          (boolean) whether this wallet tracks clean/dirty coins in terms of reuse\\n\"\n+            \"  \\\"scanning\\\" :                        (json object) current scanning details, or false if no scan is in progress\\n\"\n             \"    {\\n\"\n             \"      \\\"duration\\\" : xxxx              (numeric) elapsed seconds since scan start\\n\"\n             \"      \\\"progress\\\" : x.xxxx,           (numeric) scanning progress percentage [0.0, 1.0]\\n\"\n@@ -2640,9 +2640,9 @@ static UniValue setwalletflag(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"    \\\"flag_name\\\": string   (string) The name of the flag that was modified\\n\"\n-            \"    \\\"flag_state\\\": bool    (bool) The new state of the flag\\n\"\n-            \"    \\\"warnings\\\": string    (string) Any warnings associated with the change\\n\"\n+            \"    \\\"flag_name\\\" : string   (string) The name of the flag that was modified\\n\"\n+            \"    \\\"flag_state\\\" : bool    (boolean) The new state of the flag\\n\"\n+            \"    \\\"warnings\\\" : string    (string) Any warnings associated with the change\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -2839,11 +2839,11 @@ static UniValue listunspent(const JSONRPCRequest& request)\n             \"    \\\"confirmations\\\" : n,      (numeric) The number of confirmations\\n\"\n             \"    \\\"redeemScript\\\" : \\\"script\\\" (string) The redeemScript if scriptPubKey is P2SH\\n\"\n             \"    \\\"witnessScript\\\" : \\\"script\\\" (string) witnessScript if the scriptPubKey is P2WSH or P2SH-P2WSH\\n\"\n-            \"    \\\"spendable\\\" : xxx,        (bool) Whether we have the private keys to spend this output\\n\"\n-            \"    \\\"solvable\\\" : xxx,         (bool) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n-            \"    \\\"reused\\\" : xxx,           (bool) (only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\"\n+            \"    \\\"spendable\\\" : xxx,        (boolean) Whether we have the private keys to spend this output\\n\"\n+            \"    \\\"solvable\\\" : xxx,         (boolean) Whether we know how to spend this output, ignoring the lack of keys\\n\"\n+            \"    \\\"reused\\\" : xxx,           (boolean) (only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\\n\"\n             \"    \\\"desc\\\" : xxx,             (string, only when solvable) A descriptor for spending this output\\n\"\n-            \"    \\\"safe\\\" : xxx              (bool) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+            \"    \\\"safe\\\" : xxx              (boolean) Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n             \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n             \"                              and are not eligible for spending by fundrawtransaction and sendtoaddress.\\n\"\n             \"  }\\n\"\n@@ -3187,9 +3187,9 @@ static UniValue fundrawtransaction(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n                             \"{\\n\"\n-                            \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n-                            \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n-                            \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n+                            \"  \\\"hex\\\" :       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n+                            \"  \\\"fee\\\" :       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n+                            \"  \\\"changepos\\\" : n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n                                 },\n                                 RPCExamples{\n@@ -3376,11 +3376,11 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"psbt\\\":    \\\"psbt\\\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n-            \"  \\\"txid\\\":    \\\"value\\\",   (string) The id of the new transaction. Only returned when wallet private keys are enabled.\\n\"\n-            \"  \\\"origfee\\\":  n,        (numeric) The fee of the replaced transaction.\\n\"\n-            \"  \\\"fee\\\":      n,        (numeric) The fee of the new transaction.\\n\"\n-            \"  \\\"errors\\\":  [ str... ] (json array of strings) Errors encountered during processing (may be empty).\\n\"\n+            \"  \\\"psbt\\\" :    \\\"psbt\\\",    (string) The base64-encoded unsigned PSBT of the new transaction. Only returned when wallet private keys are disabled.\\n\"\n+            \"  \\\"txid\\\" :    \\\"value\\\",   (string) The id of the new transaction. Only returned when wallet private keys are enabled.\\n\"\n+            \"  \\\"origfee\\\" :  n,        (numeric) The fee of the replaced transaction.\\n\"\n+            \"  \\\"fee\\\" :      n,        (numeric) The fee of the new transaction.\\n\"\n+            \"  \\\"errors\\\" :  [ str... ] (json array of strings) Errors encountered during processing (may be empty).\\n\"\n             \"}\\n\"\n                 },\n                 RPCExamples{\n@@ -3778,7 +3778,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\"\n-            \"  \\\"labels\\\"                            (array) Array of labels associated with the address. Currently limited to one label but returned\\n\"\n+            \"  \\\"labels\\\"                            (json array) Array of labels associated with the address. Currently limited to one label but returned\\n\"\n             \"                                              as an array to keep the API stable if multiple labels are enabled in the future.\\n\"\n             \"    [\\n\"\n             \"      \\\"label name\\\" (string) The label name. Defaults to \\\"\\\".\\n\"\n@@ -3886,8 +3886,8 @@ static UniValue getaddressesbylabel(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{ (json object with addresses as keys)\\n\"\n-            \"  \\\"address\\\": { (json object with information about address)\\n\"\n-            \"    \\\"purpose\\\": \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n+            \"  \\\"address\\\" : { (json object with information about address)\\n\"\n+            \"    \\\"purpose\\\" : \\\"string\\\" (string)  Purpose of address (\\\"send\\\" for sending address, \\\"receive\\\" for receiving address)\\n\"\n             \"  },...\\n\"\n             \"}\\n\"\n                 },\n@@ -4197,9 +4197,9 @@ UniValue walletcreatefundedpsbt(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n                             \"{\\n\"\n-                            \"  \\\"psbt\\\": \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n-                            \"  \\\"fee\\\":       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n-                            \"  \\\"changepos\\\": n          (numeric) The position of the added change output, or -1\\n\"\n+                            \"  \\\"psbt\\\" : \\\"value\\\",        (string)  The resulting raw transaction (base64-encoded string)\\n\"\n+                            \"  \\\"fee\\\" :       n,         (numeric) Fee in \" + CURRENCY_UNIT + \" the resulting transaction pays\\n\"\n+                            \"  \\\"changepos\\\" : n          (numeric) The position of the added change output, or -1\\n\"\n                             \"}\\n\"\n                                 },\n                                 RPCExamples{"
      },
      {
        "sha": "9c9b27a4134d8010d9da26441b96123f77c4079e",
        "filename": "src/zmq/zmqrpc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fad027fb0ce019f31b20861c37e802d4e29e6931/src/zmq/zmqrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fad027fb0ce019f31b20861c37e802d4e29e6931/src/zmq/zmqrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqrpc.cpp?ref=fad027fb0ce019f31b20861c37e802d4e29e6931",
        "patch": "@@ -21,9 +21,9 @@ UniValue getzmqnotifications(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {                        (json object)\\n\"\n-            \"    \\\"type\\\": \\\"pubhashtx\\\",   (string) Type of notification\\n\"\n-            \"    \\\"address\\\": \\\"...\\\",      (string) Address of the publisher\\n\"\n-            \"    \\\"hwm\\\": n                 (numeric) Outbound message high water mark\\n\"\n+            \"    \\\"type\\\" : \\\"pubhashtx\\\",   (string) Type of notification\\n\"\n+            \"    \\\"address\\\" : \\\"...\\\",      (string) Address of the publisher\\n\"\n+            \"    \\\"hwm\\\" : n                 (numeric) Outbound message high water mark\\n\"\n             \"  },\\n\"\n             \"  ...\\n\"\n             \"]\\n\""
      }
    ]
  }
]