[
  {
    "sha": "665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjViZGQzYmM5YmE0YWM1NjZlZGY1YmEzZmE4YmJkOTNlYjQ3ODBm",
    "commit": {
      "author": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-01-27T02:50:15Z"
      },
      "committer": {
        "name": "Peter Todd",
        "email": "pete@petertodd.org",
        "date": "2014-01-27T02:50:15Z"
      },
      "message": "Fix off-by-one errors in use of IsFinalTx()\n\nPreviously CreateNewBlock() didn't take into account the fact that\nIsFinalTx() without any arguments tests if the transaction is considered\nfinal in the *current* block, when both those functions really needed to\nknow if the transaction would be final in the *next* block.\n\nAdditionally the UI had a similar misunderstanding.\n\nAlso adds some basic tests to check that CreateNewBlock() is in fact\nmining nLockTime-using transactions correctly.\n\nThanks to Wladimir J. van der Laan for rebase.",
      "tree": {
        "sha": "e365b2e271d8df98f88982c6fe27608dd9eb7fe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e365b2e271d8df98f88982c6fe27608dd9eb7fe1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1.4.12 (GNU/Linux)\n\niQGrBAABCACVBQJS5cl2XhSAAAAAABUAQGJsb2NraGFzaEBiaXRjb2luLm9yZzAw\nMDAwMDAwMDAwMDAwMDAwNWQxYzI2NDk5MGYxNTZjMjNiZTY2MzMzYzdjYzc2Nzg1\nM2E4YzEwYTI2OGM4ODUvFIAAAAAAFQARcGthLWFkZHJlc3NAZ251cGcub3JncGV0\nZUBwZXRlcnRvZC5vcmcACgkQJIFAPaXwkftvpAf5AXt5HiJpPppem+0KGRd7fAu2\nbir1S/BMXeMtsvBPOy3XxPQ0Qwc4q12aJPTfIoGmdXD1p5ZjJ6PPhC702mpHLOMm\npgVKhxKuKfaS5N5WAkyE00J3H6BiGYgauMDJxTZAQJz5GpCFeAJebsZ9RAE+Ydm3\nx4AuqfOhVtjFi5o/uq+KT2mk7BAxAaBOb8Cw1Ip4bo/w8FRnEgk8EYtrMGil1VTB\nWea0pPQCcQpMpgXA10oHQ6lM19Psxijni5x3DChHoqznrBLAhPk6bw8ztEQdX49j\n4pae3ji7dOYZmb+/U/WvQr1/4+BZ83r0wePuuQi+OPxIMX5RxWJRTCz3eLa2cA==\n=lEVv\n-----END PGP SIGNATURE-----",
        "payload": "tree e365b2e271d8df98f88982c6fe27608dd9eb7fe1\nparent d0a94f2c2f127768acd9be4c0905d40f609ba6fc\nauthor Peter Todd <pete@petertodd.org> 1390791015 -0500\ncommitter Peter Todd <pete@petertodd.org> 1390791015 -0500\n\nFix off-by-one errors in use of IsFinalTx()\n\nPreviously CreateNewBlock() didn't take into account the fact that\nIsFinalTx() without any arguments tests if the transaction is considered\nfinal in the *current* block, when both those functions really needed to\nknow if the transaction would be final in the *next* block.\n\nAdditionally the UI had a similar misunderstanding.\n\nAlso adds some basic tests to check that CreateNewBlock() is in fact\nmining nLockTime-using transactions correctly.\n\nThanks to Wladimir J. van der Laan for rebase.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/comments",
    "author": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "petertodd",
      "id": 7042,
      "node_id": "MDQ6VXNlcjcwNDI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7042?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/petertodd",
      "html_url": "https://github.com/petertodd",
      "followers_url": "https://api.github.com/users/petertodd/followers",
      "following_url": "https://api.github.com/users/petertodd/following{/other_user}",
      "gists_url": "https://api.github.com/users/petertodd/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/petertodd/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/petertodd/subscriptions",
      "organizations_url": "https://api.github.com/users/petertodd/orgs",
      "repos_url": "https://api.github.com/users/petertodd/repos",
      "events_url": "https://api.github.com/users/petertodd/events{/privacy}",
      "received_events_url": "https://api.github.com/users/petertodd/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d0a94f2c2f127768acd9be4c0905d40f609ba6fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d0a94f2c2f127768acd9be4c0905d40f609ba6fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d0a94f2c2f127768acd9be4c0905d40f609ba6fc"
      }
    ],
    "stats": {
      "total": 80,
      "additions": 73,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8c60a26b38822f4c91086e44ea38861196c2bfc2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
        "patch": "@@ -365,7 +365,24 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n         return false;\n     }\n \n-    if (!IsFinalTx(tx)) {\n+    // Treat non-final transactions as non-standard to prevent a specific type\n+    // of double-spend attack, as well as DoS attacks. (if the transaction\n+    // can't be mined, the attacker isn't expending resources broadcasting it)\n+    // Basically we don't want to propagate transactions that can't included in\n+    // the next block.\n+    //\n+    // However, IsFinalTx() is confusing... Without arguments, it uses\n+    // chainActive.Height() to evaluate nLockTime; when a block is accepted, chainActive.Height()\n+    // is set to the value of nHeight in the block. However, when IsFinalTx()\n+    // is called within CBlock::AcceptBlock(), the height of the block *being*\n+    // evaluated is what is used. Thus if we want to know if a transaction can\n+    // be part of the *next* block, we need to call IsFinalTx() with one more\n+    // than chainActive.Height().\n+    //\n+    // Timestamps on the other hand don't get any special treatment, because we\n+    // can't know what timestamp the next block will have, and there aren't\n+    // timestamp applications where it matters.\n+    if (!IsFinalTx(tx, chainActive.Height() + 1)) {\n         reason = \"non-final\";\n         return false;\n     }"
      },
      {
        "sha": "f9dab4bd671ba606c801e66ee0e8c70b1cac7187",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
        "patch": "@@ -158,7 +158,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n              mi != mempool.mapTx.end(); ++mi)\n         {\n             const CTransaction& tx = mi->second.GetTx();\n-            if (tx.IsCoinBase() || !IsFinalTx(tx))\n+            if (tx.IsCoinBase() || !IsFinalTx(tx, pindexPrev->nHeight + 1))\n                 continue;\n \n             COrphan* porphan = NULL;"
      },
      {
        "sha": "c76b29861dda34f2048cf36d709679ec4c268653",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
        "patch": "@@ -20,10 +20,10 @@\n \n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n {\n-    if (!IsFinalTx(wtx))\n+    if (!IsFinalTx(wtx, chainActive.Height() + 1))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n-            return tr(\"Open for %n more block(s)\", \"\", wtx.nLockTime - chainActive.Height() + 1);\n+            return tr(\"Open for %n more block(s)\", \"\", wtx.nLockTime - chainActive.Height());\n         else\n             return tr(\"Open until %1\").arg(GUIUtil::dateTimeStr(wtx.nLockTime));\n     }"
      },
      {
        "sha": "257151b926b6083364411d481268a25f286d5d6f",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
        "patch": "@@ -168,12 +168,12 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n-    if (!IsFinalTx(wtx))\n+    if (!IsFinalTx(wtx, chainActive.Height() + 1))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n         {\n             status.status = TransactionStatus::OpenUntilBlock;\n-            status.open_for = wtx.nLockTime - chainActive.Height() + 1;\n+            status.open_for = wtx.nLockTime - chainActive.Height();\n         }\n         else\n         {"
      },
      {
        "sha": "d35137a663a7e211d9e5efc450d1f10dd3563693",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 1,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=665bdd3bc9ba4ac566edf5ba3fa8bbd93eb4780f",
        "patch": "@@ -51,7 +51,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n {\n     CScript scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n     CBlockTemplate *pblocktemplate;\n-    CTransaction tx;\n+    CTransaction tx,tx2;\n     CScript script;\n     uint256 hash;\n \n@@ -204,8 +204,57 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     delete pblocktemplate;\n     chainActive.Tip()->nHeight = nHeight;\n \n+    // non-final txs in mempool\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast()+1);\n+\n+    // height locked\n+    tx.vin[0].prevout.hash = txFirst[0]->GetHash();\n+    tx.vin[0].scriptSig = CScript() << OP_1;\n+    tx.vin[0].nSequence = 0;\n+    tx.vout[0].nValue = 4900000000LL;\n+    tx.vout[0].scriptPubKey = CScript() << OP_1;\n+    tx.nLockTime = chainActive.Tip()->nHeight+1;\n+    hash = tx.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n+\n+    // time locked\n+    tx2.vin.resize(1);\n+    tx2.vin[0].prevout.hash = txFirst[1]->GetHash();\n+    tx2.vin[0].prevout.n = 0;\n+    tx2.vin[0].scriptSig = CScript() << OP_1;\n+    tx2.vin[0].nSequence = 0;\n+    tx2.vout.resize(1);\n+    tx2.vout[0].nValue = 4900000000LL;\n+    tx2.vout[0].scriptPubKey = CScript() << OP_1;\n+    tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n+    hash = tx2.GetHash();\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    BOOST_CHECK(!IsFinalTx(tx2));\n+\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+\n+    // Neither tx should have make it into the template.\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 1);\n+    delete pblocktemplate;\n+\n+    // However if we advance height and time by one, both will.\n+    chainActive.Tip()->nHeight++;\n+    SetMockTime(chainActive.Tip()->GetMedianTimePast()+2);\n+\n+    BOOST_CHECK(IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n+    BOOST_CHECK(IsFinalTx(tx2));\n+\n+    BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n+    BOOST_CHECK_EQUAL(pblocktemplate->block.vtx.size(), 3);\n+    delete pblocktemplate;\n+\n+    chainActive.Tip()->nHeight--;\n+    SetMockTime(0);\n+\n     BOOST_FOREACH(CTransaction *tx, txFirst)\n         delete tx;\n+\n }\n \n BOOST_AUTO_TEST_CASE(sha256transform_equality)"
      }
    ]
  }
]