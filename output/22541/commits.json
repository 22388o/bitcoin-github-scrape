[
  {
    "sha": "ae23faba6fc5cabc896f1175456d1018576f912d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTIzZmFiYTZmYzVjYWJjODk2ZjExNzU0NTZkMTAxODU3NmY5MTJk",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-07-27T17:28:23Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-08-11T01:44:54Z"
      },
      "message": "Add a new RPC command: restorewallet",
      "tree": {
        "sha": "e7b6e2413d82d47da37726b57c59ca6342cfb1ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e7b6e2413d82d47da37726b57c59ca6342cfb1ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae23faba6fc5cabc896f1175456d1018576f912d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae23faba6fc5cabc896f1175456d1018576f912d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae23faba6fc5cabc896f1175456d1018576f912d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae23faba6fc5cabc896f1175456d1018576f912d/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b5344b0d18788e011f2d4a279c8c12a29f1428a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b5344b0d18788e011f2d4a279c8c12a29f1428a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b5344b0d18788e011f2d4a279c8c12a29f1428a"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 96,
      "deletions": 24
    },
    "files": [
      {
        "sha": "4357ab2bb35795e66e92a5576be6e20e1e5597a9",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae23faba6fc5cabc896f1175456d1018576f912d/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae23faba6fc5cabc896f1175456d1018576f912d/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=ae23faba6fc5cabc896f1175456d1018576f912d",
        "patch": "@@ -187,6 +187,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 5, \"descriptors\"},\n     { \"createwallet\", 6, \"load_on_startup\"},\n     { \"createwallet\", 7, \"external_signer\"},\n+    { \"restorewallet\", 2, \"load_on_startup\"},\n     { \"loadwallet\", 1, \"load_on_startup\"},\n     { \"unloadwallet\", 1, \"load_on_startup\"},\n     { \"getnodeaddresses\", 0, \"count\"},"
      },
      {
        "sha": "2a5b5478581134dc98413736fad5ee34856d6ffb",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 95,
        "deletions": 24,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae23faba6fc5cabc896f1175456d1018576f912d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae23faba6fc5cabc896f1175456d1018576f912d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ae23faba6fc5cabc896f1175456d1018576f912d",
        "patch": "@@ -2572,6 +2572,37 @@ static RPCHelpMan listwallets()\n     };\n }\n \n+static std::tuple<std::shared_ptr<CWallet>, std::vector<bilingual_str>> LoadWalletHelper(WalletContext& context, UniValue load_on_start_param, const std::string wallet_name)\n+{\n+    DatabaseOptions options;\n+    DatabaseStatus status;\n+    options.require_existing = true;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+    std::optional<bool> load_on_start = load_on_start_param.isNull() ? std::nullopt : std::optional<bool>(load_on_start_param.get_bool());\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, wallet_name, load_on_start, options, status, error, warnings);\n+\n+    if (!wallet) {\n+        // Map bad format to not found, since bad format is returned when the\n+        // wallet directory exists, but doesn't contain a data file.\n+        RPCErrorCode code = RPC_WALLET_ERROR;\n+        switch (status) {\n+            case DatabaseStatus::FAILED_NOT_FOUND:\n+            case DatabaseStatus::FAILED_BAD_FORMAT:\n+                code = RPC_WALLET_NOT_FOUND;\n+                break;\n+            case DatabaseStatus::FAILED_ALREADY_LOADED:\n+                code = RPC_WALLET_ALREADY_LOADED;\n+                break;\n+            default: // RPC_WALLET_ERROR is returned for all other cases.\n+                break;\n+        }\n+        throw JSONRPCError(code, error.original);\n+    }\n+\n+    return { wallet, warnings };\n+}\n+\n static RPCHelpMan loadwallet()\n {\n     return RPCHelpMan{\"loadwallet\",\n@@ -2598,30 +2629,7 @@ static RPCHelpMan loadwallet()\n     WalletContext& context = EnsureWalletContext(request.context);\n     const std::string name(request.params[0].get_str());\n \n-    DatabaseOptions options;\n-    DatabaseStatus status;\n-    options.require_existing = true;\n-    bilingual_str error;\n-    std::vector<bilingual_str> warnings;\n-    std::optional<bool> load_on_start = request.params[1].isNull() ? std::nullopt : std::optional<bool>(request.params[1].get_bool());\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, name, load_on_start, options, status, error, warnings);\n-    if (!wallet) {\n-        // Map bad format to not found, since bad format is returned when the\n-        // wallet directory exists, but doesn't contain a data file.\n-        RPCErrorCode code = RPC_WALLET_ERROR;\n-        switch (status) {\n-            case DatabaseStatus::FAILED_NOT_FOUND:\n-            case DatabaseStatus::FAILED_BAD_FORMAT:\n-                code = RPC_WALLET_NOT_FOUND;\n-                break;\n-            case DatabaseStatus::FAILED_ALREADY_LOADED:\n-                code = RPC_WALLET_ALREADY_LOADED;\n-                break;\n-            default: // RPC_WALLET_ERROR is returned for all other cases.\n-                break;\n-        }\n-        throw JSONRPCError(code, error.original);\n-    }\n+    auto [wallet, warnings] = LoadWalletHelper(context, request.params[1], name);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n@@ -2795,6 +2803,68 @@ static RPCHelpMan createwallet()\n     };\n }\n \n+static RPCHelpMan restorewallet()\n+{\n+    return RPCHelpMan{\n+        \"restorewallet\",\n+        \"\\nRestore and loads a wallet from backup.\\n\",\n+        {\n+            {\"wallet_name\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The name that will be applied to the restored wallet\"},\n+            {\"backup_file\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The backup file that will be used to restore the wallet.\"},\n+            {\"load_on_startup\", RPCArg::Type::BOOL, RPCArg::Optional::OMITTED_NAMED_ARG, \"Save wallet name to persistent settings and load on startup. True to add wallet to startup list, false to remove, null to leave unchanged.\"},\n+        },\n+        RPCResult{\n+            RPCResult::Type::OBJ, \"\", \"\",\n+            {\n+                {RPCResult::Type::STR, \"name\", \"The wallet name if restored successfully.\"},\n+                {RPCResult::Type::STR, \"warning\", \"Warning message if wallet was not loaded cleanly.\"},\n+            }\n+        },\n+        RPCExamples{\n+            HelpExampleCli(\"restorewallet\", \"\\\"testwallet\\\" \\\"home\\\\backups\\\\backup-file.bak\\\"\")\n+            + HelpExampleRpc(\"restorewallet\", \"\\\"testwallet\\\" \\\"home\\\\backups\\\\backup-file.bak\\\"\")\n+            + HelpExampleCliNamed(\"restorewallet\", {{\"wallet_name\", \"testwallet\"}, {\"backup_file\", \"home\\\\backups\\\\backup-file.bak\\\"\"}, {\"load_on_startup\", true}})\n+            + HelpExampleRpcNamed(\"restorewallet\", {{\"wallet_name\", \"testwallet\"}, {\"backup_file\", \"home\\\\backups\\\\backup-file.bak\\\"\"}, {\"load_on_startup\", true}})\n+        },\n+        [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue\n+{\n+\n+    WalletContext& context = EnsureWalletContext(request.context);\n+\n+    std::string backup_file = request.params[1].get_str();\n+\n+    if (!fs::exists(backup_file)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Backup file does not exist\");\n+    }\n+\n+    std::string wallet_name = request.params[0].get_str();\n+\n+    const fs::path wallet_path = fsbridge::AbsPathJoin(GetWalletDir(), wallet_name);\n+\n+    if (fs::exists(wallet_path)) {\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Wallet name already exists.\");\n+    }\n+\n+    if (!TryCreateDirectories(wallet_path)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Failed to create database path '%s'. Database already exists.\", wallet_path.string()));\n+    }\n+\n+    auto wallet_file = wallet_path / \"wallet.dat\";\n+\n+    fs::copy_file(backup_file, wallet_file, fs::copy_option::fail_if_exists);\n+\n+    auto [wallet, warnings] = LoadWalletHelper(context, request.params[2], wallet_name);\n+\n+    UniValue obj(UniValue::VOBJ);\n+    obj.pushKV(\"name\", wallet->GetName());\n+    obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n+\n+    return obj;\n+\n+},\n+    };\n+}\n+\n static RPCHelpMan unloadwallet()\n {\n     return RPCHelpMan{\"unloadwallet\",\n@@ -4639,6 +4709,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             &bumpfee,                        },\n     { \"wallet\",             &psbtbumpfee,                    },\n     { \"wallet\",             &createwallet,                   },\n+    { \"wallet\",             &restorewallet,                  },\n     { \"wallet\",             &dumpprivkey,                    },\n     { \"wallet\",             &dumpwallet,                     },\n     { \"wallet\",             &encryptwallet,                  },"
      }
    ]
  },
  {
    "sha": "5fe8100ff36fed6d50c2a25b028f57b25af3504c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZmU4MTAwZmYzNmZlZDZkNTBjMmEyNWIwMjhmNTdiMjVhZjM1MDRj",
    "commit": {
      "author": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-07-30T17:59:27Z"
      },
      "committer": {
        "name": "lsilva01",
        "email": "lsilva01@protonmail.com",
        "date": "2021-08-11T01:44:54Z"
      },
      "message": "Change the wallet_backup.py test to use the restorewallet RPC command instead of restoring wallets manually.",
      "tree": {
        "sha": "c939b46e2291f551dda7b10caf3ab0a189f6063b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c939b46e2291f551dda7b10caf3ab0a189f6063b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5fe8100ff36fed6d50c2a25b028f57b25af3504c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fe8100ff36fed6d50c2a25b028f57b25af3504c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5fe8100ff36fed6d50c2a25b028f57b25af3504c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5fe8100ff36fed6d50c2a25b028f57b25af3504c/comments",
    "author": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lsilva01",
      "id": 84432093,
      "node_id": "MDQ6VXNlcjg0NDMyMDkz",
      "avatar_url": "https://avatars.githubusercontent.com/u/84432093?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lsilva01",
      "html_url": "https://github.com/lsilva01",
      "followers_url": "https://api.github.com/users/lsilva01/followers",
      "following_url": "https://api.github.com/users/lsilva01/following{/other_user}",
      "gists_url": "https://api.github.com/users/lsilva01/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lsilva01/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lsilva01/subscriptions",
      "organizations_url": "https://api.github.com/users/lsilva01/orgs",
      "repos_url": "https://api.github.com/users/lsilva01/repos",
      "events_url": "https://api.github.com/users/lsilva01/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lsilva01/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ae23faba6fc5cabc896f1175456d1018576f912d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae23faba6fc5cabc896f1175456d1018576f912d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae23faba6fc5cabc896f1175456d1018576f912d"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 29,
      "deletions": 16
    },
    "files": [
      {
        "sha": "c7a983556d87f7f2f41c508708bdba20dd6d2730",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 29,
        "deletions": 16,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5fe8100ff36fed6d50c2a25b028f57b25af3504c/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5fe8100ff36fed6d50c2a25b028f57b25af3504c/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=5fe8100ff36fed6d50c2a25b028f57b25af3504c",
        "patch": "@@ -111,6 +111,18 @@ def erase_three(self):\n         os.remove(os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n         os.remove(os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n \n+    def restore_nonexistent_wallet(self):\n+        node = self.nodes[3]\n+        nonexistent_wallet_file = os.path.join(self.nodes[0].datadir, 'nonexistent_wallet.bak')\n+        wallet_name = \"res0\"\n+        assert_raises_rpc_error(-8, \"Backup file does not exist\", node.restorewallet, wallet_name, nonexistent_wallet_file)\n+\n+    def restore_wallet_existent_name(self):\n+        node = self.nodes[3]\n+        wallet_file = os.path.join(self.nodes[0].datadir, 'wallet.bak')\n+        wallet_name = \"res0\"\n+        assert_raises_rpc_error(-8, \"Wallet name already exists.\", node.restorewallet, wallet_name, wallet_file)\n+\n     def init_three(self):\n         self.init_wallet(0)\n         self.init_wallet(1)\n@@ -169,26 +181,27 @@ def run_test(self):\n         ##\n         # Test restoring spender wallets from backups\n         ##\n-        self.log.info(\"Restoring using wallet.dat\")\n-        self.stop_three()\n-        self.erase_three()\n+        self.log.info(\"Restoring wallets on node 3 using backup files\")\n \n-        # Start node2 with no chain\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'blocks'))\n-        shutil.rmtree(os.path.join(self.nodes[2].datadir, self.chain, 'chainstate'))\n+        self.restore_nonexistent_wallet()\n \n-        # Restore wallets from backup\n-        shutil.copyfile(os.path.join(self.nodes[0].datadir, 'wallet.bak'), os.path.join(self.nodes[0].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, 'wallet.bak'), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n-        shutil.copyfile(os.path.join(self.nodes[2].datadir, 'wallet.bak'), os.path.join(self.nodes[2].datadir, self.chain, 'wallets', self.default_wallet_name, self.wallet_data_filename))\n+        backup_file_0 = os.path.join(self.nodes[0].datadir, 'wallet.bak')\n+        backup_file_1 = os.path.join(self.nodes[1].datadir, 'wallet.bak')\n+        backup_file_2 = os.path.join(self.nodes[2].datadir, 'wallet.bak')\n \n-        self.log.info(\"Re-starting nodes\")\n-        self.start_three()\n-        self.sync_blocks()\n+        self.nodes[3].restorewallet(\"res0\", backup_file_0)\n+        self.nodes[3].restorewallet(\"res1\", backup_file_1)\n+        self.nodes[3].restorewallet(\"res2\", backup_file_2)\n+\n+        res0_rpc = self.nodes[3].get_wallet_rpc(\"res0\")\n+        res1_rpc = self.nodes[3].get_wallet_rpc(\"res1\")\n+        res2_rpc = self.nodes[3].get_wallet_rpc(\"res2\")\n+\n+        assert_equal(res0_rpc.getbalance(), balance0)\n+        assert_equal(res1_rpc.getbalance(), balance1)\n+        assert_equal(res2_rpc.getbalance(), balance2)\n \n-        assert_equal(self.nodes[0].getbalance(), balance0)\n-        assert_equal(self.nodes[1].getbalance(), balance1)\n-        assert_equal(self.nodes[2].getbalance(), balance2)\n+        self.restore_wallet_existent_name()\n \n         if not self.options.descriptors:\n             self.log.info(\"Restoring using dumped wallet\")"
      }
    ]
  }
]