[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517874631",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-517874631",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 517874631,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzg3NDYzMQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-02T23:53:54Z",
    "updated_at": "2019-08-02T23:53:54Z",
    "author_association": "MEMBER",
    "body": "Descriptors are hard to parse, they should be hard to write also.\r\n\r\nEh, I mean, big concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517874631/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517887329",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-517887329",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 517887329,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzg4NzMyOQ==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-03T02:29:19Z",
    "updated_at": "2019-08-17T01:58:44Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16570](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16570.html) (Make descriptor tests deterministic by davereikher)\n* [#15590](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15590.html) (Descriptor: add GetAddressType() and IsSegWit() by Sjors)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517887329/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517898864",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-517898864",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 517898864,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzg5ODg2NA==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-03T06:19:29Z",
    "updated_at": "2019-08-03T06:19:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517898864/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517916637",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-517916637",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 517916637,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxNzkxNjYzNw==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-03T11:12:02Z",
    "updated_at": "2019-08-03T11:12:02Z",
    "author_association": "MEMBER",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/517916637/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518359101",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-518359101",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 518359101,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxODM1OTEwMQ==",
    "user": {
      "login": "hugohn",
      "id": 4769925,
      "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4769925?u=4cf9eee3649193c76dcdb32528596244b509c25c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugohn",
      "html_url": "https://github.com/hugohn",
      "followers_url": "https://api.github.com/users/hugohn/followers",
      "following_url": "https://api.github.com/users/hugohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
      "organizations_url": "https://api.github.com/users/hugohn/orgs",
      "repos_url": "https://api.github.com/users/hugohn/repos",
      "events_url": "https://api.github.com/users/hugohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-05T19:05:05Z",
    "updated_at": "2019-08-05T19:05:05Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/518359101/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519671667",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-519671667",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 519671667,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUxOTY3MTY2Nw==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-08T20:17:13Z",
    "updated_at": "2019-08-08T20:17:13Z",
    "author_association": "MEMBER",
    "body": "I've added more tests and also cleaned up a few typos in error messages.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/519671667/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520030750",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-520030750",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 520030750,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDAzMDc1MA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-09T19:06:35Z",
    "updated_at": "2019-08-09T19:06:35Z",
    "author_association": "MEMBER",
    "body": "reACK a1b47955838f1151fc1904d0ff3bc7751b9fa7ca",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520030750/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520160503",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-520160503",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 520160503,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMDE2MDUwMw==",
    "user": {
      "login": "jb55",
      "id": 45598,
      "node_id": "MDQ6VXNlcjQ1NTk4",
      "avatar_url": "https://avatars.githubusercontent.com/u/45598?u=2ba2cccaa0fd357b363507ce5694ce3cf5e56220&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jb55",
      "html_url": "https://github.com/jb55",
      "followers_url": "https://api.github.com/users/jb55/followers",
      "following_url": "https://api.github.com/users/jb55/following{/other_user}",
      "gists_url": "https://api.github.com/users/jb55/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jb55/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jb55/subscriptions",
      "organizations_url": "https://api.github.com/users/jb55/orgs",
      "repos_url": "https://api.github.com/users/jb55/repos",
      "events_url": "https://api.github.com/users/jb55/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jb55/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-10T16:08:36Z",
    "updated_at": "2019-08-10T16:08:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "Code Review ACK a1b47955838f1151fc1904d0ff3bc7751b9fa7ca",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/520160503/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/521280098",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-521280098",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 521280098,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMTI4MDA5OA==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-14T14:52:17Z",
    "updated_at": "2019-08-14T14:52:17Z",
    "author_association": "MEMBER",
    "body": "If you need to make any changes, I suggest rebasing due to #14934 to be on the safe side. It still compiles and tests pass for me when I do that rebase locally though. ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/521280098/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522166150",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-522166150",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 522166150,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjE2NjE1MA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-16T22:07:25Z",
    "updated_at": "2019-08-16T22:07:25Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522166150/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522166530",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-522166530",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 522166530,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjE2NjUzMA==",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?u=447cdc9e2966cbee415545c8ff452954ee1209af&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-16T22:09:15Z",
    "updated_at": "2019-08-16T22:09:15Z",
    "author_association": "MEMBER",
    "body": "Sorry about the rebase again due to #15986 \r\n\r\nOnce this is rebased I'll review and merge",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522166530/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522186466",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-522186466",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 522186466,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjE4NjQ2Ng==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-17T00:14:37Z",
    "updated_at": "2019-08-17T00:14:37Z",
    "author_association": "MEMBER",
    "body": "Rebased",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522186466/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522254238",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-522254238",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 522254238,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjI1NDIzOA==",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?u=9791e96cd4268d48e3517bac41eaf2b1d09759fd&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-17T17:07:13Z",
    "updated_at": "2019-08-17T17:07:13Z",
    "author_association": "MEMBER",
    "body": "> Only the first commit changed in this rebase, but you lost a few of your recent fixes in the process.\r\n\r\nNo??? Are you sure you're looking at the right commits? The latest diff includes everything that was commented on earlier.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522254238/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522255246",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#issuecomment-522255246",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16542",
    "id": 522255246,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyMjI1NTI0Ng==",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-08-17T17:20:48Z",
    "updated_at": "2019-08-17T17:20:48Z",
    "author_association": "MEMBER",
    "body": "Ah wait, I see these changes happen in 625534d7b1417da926f1ced600855ea818d6e01e.\r\n\r\nACK 787c9ec",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/522255246/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311014773",
    "pull_request_review_id": 271284181,
    "id": 311014773,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTAxNDc3Mw==",
    "diff_hunk": "@@ -696,14 +696,17 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);",
    "path": "src/script/descriptor.cpp",
    "position": 18,
    "original_position": 15,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: \"not valid\" instead of \"out of range\"? Or split the check?",
    "created_at": "2019-08-06T11:34:57Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311014773",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311014773"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311014773"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311014773/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 707,
    "original_line": 707,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311018361",
    "pull_request_review_id": 271284181,
    "id": 311018361,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTAxODM2MQ==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: make descriptor errors start with lower case?",
    "created_at": "2019-08-06T11:46:23Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311018361",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311018361"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311018361"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311018361/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311236991",
    "pull_request_review_id": 271566386,
    "id": 311236991,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTIzNjk5MQ==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nah.",
    "created_at": "2019-08-06T19:30:45Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311236991",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311236991"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311236991"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311236991/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 311018361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311240004",
    "pull_request_review_id": 271570301,
    "id": 311240004,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTI0MDAwNA==",
    "diff_hunk": "@@ -696,14 +696,17 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);",
    "path": "src/script/descriptor.cpp",
    "position": 18,
    "original_position": 15,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've split the check",
    "created_at": "2019-08-06T19:39:01Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311240004",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311240004"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311240004"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311240004/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 707,
    "original_line": 707,
    "side": "RIGHT",
    "in_reply_to_id": 311014773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311919483",
    "pull_request_review_id": 272422853,
    "id": 311919483,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkxOTQ4Mw==",
    "diff_hunk": "@@ -13,13 +13,15 @@\n \n namespace {\n \n-void CheckUnparsable(const std::string& prv, const std::string& pub)\n+void CheckUnparsable(const std::string& prv, const std::string& pub, std::string expected_error)",
    "path": "src/test/descriptor_tests.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Nit: `expected_error` could be const ref?",
    "created_at": "2019-08-08T08:41:43Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311919483",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311919483"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311919483"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311919483/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311931687",
    "pull_request_review_id": 272438281,
    "id": 311931687,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzMTY4Nw==",
    "diff_hunk": "@@ -696,33 +696,60 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p)) {\n+            error = strprintf(\"Key path value '%s' is not a valid uint32\", std::string(elem.begin(), elem.end()).c_str());",
    "path": "src/script/descriptor.cpp",
    "position": 15,
    "original_position": 15,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:08:31Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311931687",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311931687"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311931687"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311931687/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 704,
    "original_line": 704,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311932348",
    "pull_request_review_id": 272438281,
    "id": 311932348,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzMjM0OA==",
    "diff_hunk": "@@ -696,33 +696,60 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p)) {\n+            error = strprintf(\"Key path value '%s' is not a valid uint32\", std::string(elem.begin(), elem.end()).c_str());\n+            return false;\n+        } else if (p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);\n+            return false;\n+        }\n         out.push_back(p | (((uint32_t)hardened) << 31));\n     }\n     return true;\n }\n \n /** Parse a public key that excludes origin information. */\n-std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n+    if (str.size() == 0) {\n+        error = \"No key provided\";\n+        return nullptr;\n+    }\n     if (split.size() == 1) {\n         if (IsHex(str)) {\n             std::vector<unsigned char> data = ParseHex(str);\n             CPubKey pubkey(data);\n-            if (pubkey.IsFullyValid() && (permit_uncompressed || pubkey.IsCompressed())) return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            if (pubkey.IsFullyValid()) {\n+                if (permit_uncompressed || pubkey.IsCompressed()) {\n+                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                } else {\n+                    error = \"Uncompressed keys are not allowed\";\n+                    return nullptr;\n+                }\n+            }\n+            error = strprintf(\"Pubkey '%s' is invalid\", str);",
    "path": "src/script/descriptor.cpp",
    "position": 49,
    "original_position": 49,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:10:07Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311932348",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311932348"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311932348"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311932348/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 736,
    "original_line": 736,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936421",
    "pull_request_review_id": 272438281,
    "id": 311936421,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzNjQyMQ==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 104,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:19:40Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936421",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936421"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936421"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936421/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 780,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936744",
    "pull_request_review_id": 272438281,
    "id": 311936744,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzNjc0NA==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 164,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:20:35Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936744",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936744"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936744"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936744/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 831,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936968",
    "pull_request_review_id": 272438281,
    "id": 311936968,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzNjk2OA==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:21:05Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936968",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936968"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311936968"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311936968/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 837,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311937893",
    "pull_request_review_id": 272438281,
    "id": 311937893,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzNzg5Mw==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());",
    "path": "src/script/descriptor.cpp",
    "position": 183,
    "original_position": 183,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:23:25Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311937893",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311937893"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311937893"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311937893/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 851,
    "original_line": 851,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938084",
    "pull_request_review_id": 272438281,
    "id": 311938084,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzODA4NA==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"multisig threshold cannot be %d, must be at least 1\", thres);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 186,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:23:54Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938084",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938084"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938084"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938084/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 850,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938117",
    "pull_request_review_id": 272438281,
    "id": 311938117,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzODExNw==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"multisig threshold cannot be %d, must be at least 1\", thres);\n+            return nullptr;\n+        } else if (thres > providers.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; thoreshold is %d but only %u keys specified\", thres, providers.size());",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 189,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:23:59Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938117",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938117"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938117"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938117/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 853,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938326",
    "pull_request_review_id": 272438281,
    "id": 311938326,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzODMyNg==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"multisig threshold cannot be %d, must be at least 1\", thres);\n+            return nullptr;\n+        } else if (thres > providers.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; thoreshold is %d but only %u keys specified\", thres, providers.size());\n+            return nullptr;\n+        }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) return nullptr; // Not more than 3 pubkeys for raw multisig\n+            if (providers.size() > 3) {\n+                error = strprintf(\"Cannot %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 195,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:24:28Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938326",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938326"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938326"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938326/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 858,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938674",
    "pull_request_review_id": 272438281,
    "id": 311938674,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzODY3NA==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"multisig threshold cannot be %d, must be at least 1\", thres);\n+            return nullptr;\n+        } else if (thres > providers.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; thoreshold is %d but only %u keys specified\", thres, providers.size());\n+            return nullptr;\n+        }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) return nullptr; // Not more than 3 pubkeys for raw multisig\n+            if (providers.size() > 3) {\n+                error = strprintf(\"Cannot %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());\n+                return nullptr;\n+            }\n         }\n         if (ctx == ParseScriptContext::P2SH) {\n-            if (script_size + 3 > 520) return nullptr; // Enforce P2SH script size limit\n+            if (script_size + 3 > 520) {\n+                error = strprintf(\"P2SH script is too large, %d bytes is larger than 520 bytes\", script_size + 3);\n+                return nullptr;\n+            }\n         }\n         return MakeUnique<MultisigDescriptor>(thres, std::move(providers));\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, false, out);\n+        auto pubkey = ParsePubkey(expr, false, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n+        error = \"Cannot have wpkh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<SHDescriptor>(std::move(desc));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n+        error = \"Cannot have sh in non-top level\";\n+        return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<WSHDescriptor>(std::move(desc));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n+        error = \"Cannot have wsh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n         CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n-        if (!IsValidDestination(dest)) return nullptr;\n+        if (!IsValidDestination(dest)) {\n+            error = \"Address is not valid\";",
    "path": "src/script/descriptor.cpp",
    "position": 239,
    "original_position": 239,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:25:15Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938674",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938674"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938674"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938674/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 901,
    "original_line": 901,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938803",
    "pull_request_review_id": 272438281,
    "id": 311938803,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzODgwMw==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);\n+                return nullptr;\n+            }\n             auto arg = Expr(expr);\n-            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out);\n+            auto pk = ParsePubkey(arg, ctx != ParseScriptContext::P2WSH, out, error);\n             if (!pk) return nullptr;\n             script_size += pk->GetSize() + 1;\n             providers.emplace_back(std::move(pk));\n         }\n-        if (providers.size() < 1 || providers.size() > 16 || thres < 1 || thres > providers.size()) return nullptr;\n+        if (providers.size() < 1 || providers.size() > 16) {\n+            error = strprintf(\"Cannot have %u keys in multisig; must have between 1 and 16 keys, inclusive\", providers.size());\n+            return nullptr;\n+        } else if (thres < 1) {\n+            error = strprintf(\"multisig threshold cannot be %d, must be at least 1\", thres);\n+            return nullptr;\n+        } else if (thres > providers.size()) {\n+            error = strprintf(\"Multisig threshold cannot be larger than the number of keys; thoreshold is %d but only %u keys specified\", thres, providers.size());\n+            return nullptr;\n+        }\n         if (ctx == ParseScriptContext::TOP) {\n-            if (providers.size() > 3) return nullptr; // Not more than 3 pubkeys for raw multisig\n+            if (providers.size() > 3) {\n+                error = strprintf(\"Cannot %u pubkeys in bare multisig; only at most 3 pubkeys\", providers.size());\n+                return nullptr;\n+            }\n         }\n         if (ctx == ParseScriptContext::P2SH) {\n-            if (script_size + 3 > 520) return nullptr; // Enforce P2SH script size limit\n+            if (script_size + 3 > 520) {\n+                error = strprintf(\"P2SH script is too large, %d bytes is larger than 520 bytes\", script_size + 3);\n+                return nullptr;\n+            }\n         }\n         return MakeUnique<MultisigDescriptor>(thres, std::move(providers));\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, false, out);\n+        auto pubkey = ParsePubkey(expr, false, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<WPKHDescriptor>(std::move(pubkey));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wpkh\", expr)) {\n+        error = \"Cannot have wpkh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"sh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2SH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<SHDescriptor>(std::move(desc));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"sh\", expr)) {\n+        error = \"Cannot have sh in non-top level\";\n+        return nullptr;\n     }\n     if (ctx != ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n-        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out);\n+        auto desc = ParseScript(expr, ParseScriptContext::P2WSH, out, error);\n         if (!desc || expr.size()) return nullptr;\n         return MakeUnique<WSHDescriptor>(std::move(desc));\n+    } else if (ctx == ParseScriptContext::P2WSH && Func(\"wsh\", expr)) {\n+        error = \"Cannot have wsh within wsh\";\n+        return nullptr;\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"addr\", expr)) {\n         CTxDestination dest = DecodeDestination(std::string(expr.begin(), expr.end()));\n-        if (!IsValidDestination(dest)) return nullptr;\n+        if (!IsValidDestination(dest)) {\n+            error = \"Address is not valid\";\n+            return nullptr;\n+        }\n         return MakeUnique<AddressDescriptor>(std::move(dest));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"raw\", expr)) {\n         std::string str(expr.begin(), expr.end());\n-        if (!IsHex(str)) return nullptr;\n+        if (!IsHex(str)) {\n+            error = \"Raw script is not hex\";",
    "path": "src/script/descriptor.cpp",
    "position": 248,
    "original_position": 248,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:25:31Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938803",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938803"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311938803"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311938803/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 909,
    "original_line": 909,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939513",
    "pull_request_review_id": 272438281,
    "id": 311939513,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzOTUxMw==",
    "diff_hunk": "@@ -910,23 +996,38 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n \n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n \n     // Checksum checks\n     auto check_split = Split(sp, '#');\n-    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n-    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() > 2) {\n+        error = \"Multiple '#' symbols\";",
    "path": "src/script/descriptor.cpp",
    "position": 276,
    "original_position": 279,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:27:06Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311939513",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939513"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311939513"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939513/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1008,
    "original_line": 1008,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939883",
    "pull_request_review_id": 272438281,
    "id": 311939883,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTkzOTg4Mw==",
    "diff_hunk": "@@ -910,23 +996,38 @@ std::unique_ptr<DescriptorImpl> InferScript(const CScript& script, ParseScriptCo\n \n } // namespace\n \n-std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, bool require_checksum)\n+std::unique_ptr<Descriptor> Parse(const std::string& descriptor, FlatSigningProvider& out, std::string& error, bool require_checksum)\n {\n     Span<const char> sp(descriptor.data(), descriptor.size());\n \n     // Checksum checks\n     auto check_split = Split(sp, '#');\n-    if (check_split.size() > 2) return nullptr; // Multiple '#' symbols\n-    if (check_split.size() == 1 && require_checksum) return nullptr; // Missing checksum\n+    if (check_split.size() > 2) {\n+        error = \"Multiple '#' symbols\";\n+        return nullptr;\n+    }\n+    if (check_split.size() == 1 && require_checksum){\n+        error = \"Missing checksum\";\n+        return nullptr;\n+    }\n     if (check_split.size() == 2) {\n-        if (check_split[1].size() != 8) return nullptr; // Unexpected length for checksum\n+        if (check_split[1].size() != 8) {\n+            error = strprintf(\"Expected 8 character checksum, not %u characters\", check_split[1].size());\n+            return nullptr;\n+        }\n         auto checksum = DescriptorChecksum(check_split[0]);\n-        if (checksum.empty()) return nullptr; // Invalid characters in payload\n-        if (!std::equal(checksum.begin(), checksum.end(), check_split[1].begin())) return nullptr; // Checksum mismatch\n+        if (checksum.empty()) {\n+            error = \"Invalid characters in payload\";",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 296,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Missing test.",
    "created_at": "2019-08-08T09:27:53Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311939883",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939883"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311939883"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311939883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 1020,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311941468",
    "pull_request_review_id": 272438281,
    "id": 311941468,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMTk0MTQ2OA==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Agree with @Sjors, is there a reason to not do so? I was going to suggest to drop \"Descriptor is invalid, \" prefix.",
    "created_at": "2019-08-08T09:31:32Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311941468",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311941468"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r311941468"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/311941468/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 311018361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312215752",
    "pull_request_review_id": 272802708,
    "id": 312215752,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjIxNTc1Mg==",
    "diff_hunk": "@@ -741,95 +768,154 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n }\n \n /** Parse a public key including origin information (if enabled). */\n-std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out)\n+std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool permit_uncompressed, FlatSigningProvider& out, std::string& error)\n {\n     auto origin_split = Split(sp, ']');\n-    if (origin_split.size() > 2) return nullptr;\n-    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out);\n-    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') return nullptr;\n+    if (origin_split.size() > 2) {\n+        error = \"Multiple ']' characters found for a single pubkey\";\n+        return nullptr;\n+    }\n+    if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n+    if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n+        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        return nullptr;\n+    }\n     auto slash_split = Split(origin_split[0].subspan(1), '/');\n-    if (slash_split[0].size() != 8) return nullptr;\n+    if (slash_split[0].size() != 8) {\n+        error = strprintf(\"Fingerprint is not 4 bytes (%u characters instead of 8 characters)\", slash_split[0].size());\n+        return nullptr;\n+    }\n     std::string fpr_hex = std::string(slash_split[0].begin(), slash_split[0].end());\n-    if (!IsHex(fpr_hex)) return nullptr;\n+    if (!IsHex(fpr_hex)) {\n+        error = strprintf(\"Fingerprint '%s' is not hex\", fpr_hex);\n+        return nullptr;\n+    }\n     auto fpr_bytes = ParseHex(fpr_hex);\n     KeyOriginInfo info;\n     static_assert(sizeof(info.fingerprint) == 4, \"Fingerprint must be 4 bytes\");\n     assert(fpr_bytes.size() == 4);\n     std::copy(fpr_bytes.begin(), fpr_bytes.end(), info.fingerprint);\n-    if (!ParseKeyPath(slash_split, info.path)) return nullptr;\n-    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out);\n+    if (!ParseKeyPath(slash_split, info.path, error)) return nullptr;\n+    auto provider = ParsePubkeyInner(origin_split[1], permit_uncompressed, out, error);\n     if (!provider) return nullptr;\n     return MakeUnique<OriginPubkeyProvider>(std::move(info), std::move(provider));\n }\n \n /** Parse a script in a particular context. */\n-std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out)\n+std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptContext ctx, FlatSigningProvider& out, std::string& error)\n {\n     auto expr = Expr(sp);\n     if (Func(\"pk\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKDescriptor>(std::move(pubkey));\n     }\n     if (Func(\"pkh\", expr)) {\n-        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out);\n+        auto pubkey = ParsePubkey(expr, ctx != ParseScriptContext::P2WSH, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<PKHDescriptor>(std::move(pubkey));\n     }\n     if (ctx == ParseScriptContext::TOP && Func(\"combo\", expr)) {\n-        auto pubkey = ParsePubkey(expr, true, out);\n+        auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {\n+        error = \"Cannot have combo in non-top level\";\n+        return nullptr;\n     }\n     if (Func(\"multi\", expr)) {\n         auto threshold = Expr(expr);\n         uint32_t thres;\n         std::vector<std::unique_ptr<PubkeyProvider>> providers;\n-        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) return nullptr;\n+        if (!ParseUInt32(std::string(threshold.begin(), threshold.end()), &thres)) {\n+            error = strprintf(\"multi threshold %u out of range\", thres);\n+            return nullptr;\n+        }\n         size_t script_size = 0;\n         while (expr.size()) {\n-            if (!Const(\",\", expr)) return nullptr;\n+            if (!Const(\",\", expr)) {\n+                error = strprintf(\"multi: expected ',', got '%c'\", expr[0]);",
    "path": "src/script/descriptor.cpp",
    "position": null,
    "original_position": 171,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this check is actually possible to hit due to how `Expr` parses things earlier.",
    "created_at": "2019-08-08T19:55:16Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312215752",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312215752"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312215752"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312215752/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 837,
    "side": "RIGHT",
    "in_reply_to_id": 311936968
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224081",
    "pull_request_review_id": 272813609,
    "id": 312224081,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjIyNDA4MQ==",
    "diff_hunk": "@@ -13,13 +13,15 @@\n \n namespace {\n \n-void CheckUnparsable(const std::string& prv, const std::string& pub)\n+void CheckUnparsable(const std::string& prv, const std::string& pub, std::string expected_error)",
    "path": "src/test/descriptor_tests.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "0d55f500cb9b77cfc93fcf16a5b8dfd71d1025f0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Done",
    "created_at": "2019-08-08T20:17:21Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312224081",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224081"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312224081"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224081/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 16,
    "side": "RIGHT",
    "in_reply_to_id": 311919483
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224161",
    "pull_request_review_id": 272813720,
    "id": 312224161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMjIyNDE2MQ==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I've just removed the prefixes.",
    "created_at": "2019-08-08T20:17:33Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312224161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r312224161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/312224161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 311018361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417204",
    "pull_request_review_id": 274309238,
    "id": 313417204,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzQxNzIwNA==",
    "diff_hunk": "@@ -710,17 +713,35 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n {\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n+    if (str.size() == 0) {\n+        error = \"No key provided\";\n+        return nullptr;\n+    }\n     if (split.size() == 1) {\n         if (IsHex(str)) {\n             std::vector<unsigned char> data = ParseHex(str);\n             CPubKey pubkey(data);\n-            if (pubkey.IsFullyValid() && (permit_uncompressed || pubkey.IsCompressed())) return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            if (pubkey.IsFullyValid()) {\n+                if (permit_uncompressed || pubkey.IsCompressed()) {\n+                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                } else {\n+                    error = \"Uncompressed keys are not allowed\";\n+                    return nullptr;\n+                }\n+            }\n+            error = strprintf(\"Pubkey '%s' is invalid\", str);\n+            return nullptr;\n         }\n         CKey key = DecodeSecret(str);\n-        if (key.IsValid() && (permit_uncompressed || key.IsCompressed())) {\n-            CPubKey pubkey = key.GetPubKey();\n-            out.keys.emplace(pubkey.GetID(), key);\n-            return MakeUnique<ConstPubkeyProvider>(pubkey);\n+        if (key.IsValid()) {\n+            if (permit_uncompressed || key.IsCompressed()) {\n+                CPubKey pubkey = key.GetPubKey();\n+                out.keys.emplace(pubkey.GetID(), key);\n+                return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            } else {\n+                error = \"Uncompressed keys are not allowed\";",
    "path": "src/script/descriptor.cpp",
    "position": 63,
    "original_position": 47,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "where would this case be hit previously?",
    "created_at": "2019-08-13T14:08:42Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313417204",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417204"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313417204"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417204/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 746,
    "original_line": 746,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417863",
    "pull_request_review_id": 274309238,
    "id": 313417863,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzQxNzg2Mw==",
    "diff_hunk": "@@ -798,19 +819,22 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {",
    "path": "src/script/descriptor.cpp",
    "position": 154,
    "original_position": 66,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "where would this case be hit previously?",
    "created_at": "2019-08-13T14:09:59Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313417863",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417863"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313417863"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313417863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 826,
    "original_line": 826,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313421770",
    "pull_request_review_id": 274309238,
    "id": 313421770,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzQyMTc3MA==",
    "diff_hunk": "@@ -866,6 +908,13 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         auto bytes = ParseHex(str);\n         return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n     }\n+    if (ctx == ParseScriptContext::P2SH) {",
    "path": "src/script/descriptor.cpp",
    "position": 254,
    "original_position": 139,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: I'd prefer it also checks for `!Func` explicitly, since there are a number of combinations, and a generic error is preferable to a specific error that's an implementation mistake.",
    "created_at": "2019-08-13T14:16:52Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313421770",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313421770"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313421770"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313421770/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 915,
    "original_line": 915,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313507591",
    "pull_request_review_id": 274423166,
    "id": 313507591,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzUwNzU5MQ==",
    "diff_hunk": "@@ -710,17 +713,35 @@ std::unique_ptr<PubkeyProvider> ParsePubkeyInner(const Span<const char>& sp, boo\n {\n     auto split = Split(sp, '/');\n     std::string str(split[0].begin(), split[0].end());\n+    if (str.size() == 0) {\n+        error = \"No key provided\";\n+        return nullptr;\n+    }\n     if (split.size() == 1) {\n         if (IsHex(str)) {\n             std::vector<unsigned char> data = ParseHex(str);\n             CPubKey pubkey(data);\n-            if (pubkey.IsFullyValid() && (permit_uncompressed || pubkey.IsCompressed())) return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            if (pubkey.IsFullyValid()) {\n+                if (permit_uncompressed || pubkey.IsCompressed()) {\n+                    return MakeUnique<ConstPubkeyProvider>(pubkey);\n+                } else {\n+                    error = \"Uncompressed keys are not allowed\";\n+                    return nullptr;\n+                }\n+            }\n+            error = strprintf(\"Pubkey '%s' is invalid\", str);\n+            return nullptr;\n         }\n         CKey key = DecodeSecret(str);\n-        if (key.IsValid() && (permit_uncompressed || key.IsCompressed())) {\n-            CPubKey pubkey = key.GetPubKey();\n-            out.keys.emplace(pubkey.GetID(), key);\n-            return MakeUnique<ConstPubkeyProvider>(pubkey);\n+        if (key.IsValid()) {\n+            if (permit_uncompressed || key.IsCompressed()) {\n+                CPubKey pubkey = key.GetPubKey();\n+                out.keys.emplace(pubkey.GetID(), key);\n+                return MakeUnique<ConstPubkeyProvider>(pubkey);\n+            } else {\n+                error = \"Uncompressed keys are not allowed\";",
    "path": "src/script/descriptor.cpp",
    "position": 63,
    "original_position": 47,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would fail below at the extkey decoding stuff.",
    "created_at": "2019-08-13T16:59:33Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313507591",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313507591"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313507591"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313507591/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 746,
    "original_line": 746,
    "side": "RIGHT",
    "in_reply_to_id": 313417204
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313508036",
    "pull_request_review_id": 274423725,
    "id": 313508036,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxMzUwODAzNg==",
    "diff_hunk": "@@ -798,19 +819,22 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         auto pubkey = ParsePubkey(expr, true, out, error);\n         if (!pubkey) return nullptr;\n         return MakeUnique<ComboDescriptor>(std::move(pubkey));\n+    } else if (ctx != ParseScriptContext::TOP && Func(\"combo\", expr)) {",
    "path": "src/script/descriptor.cpp",
    "position": 154,
    "original_position": 66,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "It would just get to the end of the function and hit `return nullptr`.",
    "created_at": "2019-08-13T17:00:35Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313508036",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313508036"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r313508036"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/313508036/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 826,
    "original_line": 826,
    "side": "RIGHT",
    "in_reply_to_id": 313417863
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314001161",
    "pull_request_review_id": 275046439,
    "id": 314001161,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDAwMTE2MQ==",
    "diff_hunk": "@@ -866,6 +908,13 @@ std::unique_ptr<DescriptorImpl> ParseScript(Span<const char>& sp, ParseScriptCon\n         auto bytes = ParseHex(str);\n         return MakeUnique<RawDescriptor>(CScript(bytes.begin(), bytes.end()));\n     }\n+    if (ctx == ParseScriptContext::P2SH) {",
    "path": "src/script/descriptor.cpp",
    "position": 254,
    "original_position": 139,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "441d29d900c3c752907092ce303292efa92d9b4d",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think it can check that there is no function.",
    "created_at": "2019-08-14T17:44:52Z",
    "updated_at": "2019-08-17T00:15:03Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314001161",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314001161"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314001161"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314001161/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 915,
    "original_line": 915,
    "side": "RIGHT",
    "in_reply_to_id": 313421770
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944345",
    "pull_request_review_id": 276234242,
    "id": 314944345,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDk0NDM0NQ==",
    "diff_hunk": "@@ -696,14 +696,17 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);",
    "path": "src/script/descriptor.cpp",
    "position": 18,
    "original_position": 15,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Now it's no longer split.",
    "created_at": "2019-08-17T11:35:44Z",
    "updated_at": "2019-08-17T11:36:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314944345",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944345"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314944345"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944345/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 707,
    "original_line": 707,
    "side": "RIGHT",
    "in_reply_to_id": 311014773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944359",
    "pull_request_review_id": 276234242,
    "id": 314944359,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDk0NDM1OQ==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "Sjors",
      "id": 10217,
      "node_id": "MDQ6VXNlcjEwMjE3",
      "avatar_url": "https://avatars.githubusercontent.com/u/10217?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/Sjors",
      "html_url": "https://github.com/Sjors",
      "followers_url": "https://api.github.com/users/Sjors/followers",
      "following_url": "https://api.github.com/users/Sjors/following{/other_user}",
      "gists_url": "https://api.github.com/users/Sjors/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/Sjors/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/Sjors/subscriptions",
      "organizations_url": "https://api.github.com/users/Sjors/orgs",
      "repos_url": "https://api.github.com/users/Sjors/repos",
      "events_url": "https://api.github.com/users/Sjors/events{/privacy}",
      "received_events_url": "https://api.github.com/users/Sjors/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "They're back",
    "created_at": "2019-08-17T11:36:24Z",
    "updated_at": "2019-08-17T11:36:57Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314944359",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944359"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314944359"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314944359/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 311018361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953543",
    "pull_request_review_id": 276244486,
    "id": 314953543,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDk1MzU0Mw==",
    "diff_hunk": "@@ -552,7 +552,7 @@ def run_test(self):\n                                \"keys\": [key.privkey]},\n                               success=False,\n                               error_code=-5,\n-                              error_message=\"Descriptor is invalid\")\n+                              error_message=\"Descriptor is invalid, Missing checksum\")",
    "path": "test/functional/wallet_importmulti.py",
    "position": null,
    "original_position": 5,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> They're back\r\n\r\nNo??",
    "created_at": "2019-08-17T17:07:49Z",
    "updated_at": "2019-08-17T17:07:49Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314953543",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953543"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314953543"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953543/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 555,
    "side": "RIGHT",
    "in_reply_to_id": 311018361
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953552",
    "pull_request_review_id": 276244496,
    "id": 314953552,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDk1MzU1Mg==",
    "diff_hunk": "@@ -696,14 +696,17 @@ NODISCARD bool ParseKeyPath(const std::vector<Span<const char>>& split, KeyPath&\n             hardened = true;\n         }\n         uint32_t p;\n-        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) return false;\n+        if (!ParseUInt32(std::string(elem.begin(), elem.end()), &p) || p > 0x7FFFFFFFUL) {\n+            error = strprintf(\"Key path value %u is out of range\", p);",
    "path": "src/script/descriptor.cpp",
    "position": 18,
    "original_position": 15,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "735c1f04277cae3bbe24440403772b647b1ddab0",
    "user": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Now it's no longer split.\r\n\r\nNo??",
    "created_at": "2019-08-17T17:08:12Z",
    "updated_at": "2019-08-17T17:08:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314953552",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953552"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314953552"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314953552/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 707,
    "original_line": 707,
    "side": "RIGHT",
    "in_reply_to_id": 311014773
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314978153",
    "pull_request_review_id": 276270761,
    "id": 314978153,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMxNDk3ODE1Mw==",
    "diff_hunk": "@@ -760,7 +781,7 @@ std::unique_ptr<PubkeyProvider> ParsePubkey(const Span<const char>& sp, bool per\n     }\n     if (origin_split.size() == 1) return ParsePubkeyInner(origin_split[0], permit_uncompressed, out, error);\n     if (origin_split[0].size() < 1 || origin_split[0][0] != '[') {\n-        error = strprintf(\"Key origin expected but not found, got '%s' instead\", std::string(origin_split[0].begin(), origin_split[0].end()));\n+        error = strprintf(\"Key origin start '[ character expected but not found, got '%c' instead\", origin_split[0][0]);",
    "path": "src/script/descriptor.cpp",
    "position": 104,
    "original_position": 58,
    "commit_id": "787c9ec0c383cefb83a95433311a27f9c220dca0",
    "original_commit_id": "625534d7b1417da926f1ced600855ea818d6e01e",
    "user": {
      "login": "meshcollider",
      "id": 3211283,
      "node_id": "MDQ6VXNlcjMyMTEyODM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3211283?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/meshcollider",
      "html_url": "https://github.com/meshcollider",
      "followers_url": "https://api.github.com/users/meshcollider/followers",
      "following_url": "https://api.github.com/users/meshcollider/following{/other_user}",
      "gists_url": "https://api.github.com/users/meshcollider/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/meshcollider/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/meshcollider/subscriptions",
      "organizations_url": "https://api.github.com/users/meshcollider/orgs",
      "repos_url": "https://api.github.com/users/meshcollider/repos",
      "events_url": "https://api.github.com/users/meshcollider/events{/privacy}",
      "received_events_url": "https://api.github.com/users/meshcollider/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "mismatched `'` (also in the corresponding test case)",
    "created_at": "2019-08-18T10:16:02Z",
    "updated_at": "2019-08-18T10:21:54Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314978153",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314978153"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16542#discussion_r314978153"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16542"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/314978153/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 784,
    "original_line": 784,
    "side": "RIGHT"
  }
]