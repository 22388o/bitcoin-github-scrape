[
  {
    "sha": "6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmQwMGQwODU0M2JkNzJkNWM4YTViMWQ5YjQ5MWMxNGYzYmQxMzRl",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-03-31T01:48:02Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-08-20T00:37:13Z"
      },
      "message": "script: Return total sum of input amounts from SignTransaction when available",
      "tree": {
        "sha": "3e03d6486cd3c6775524f3d19a8298290eb74712",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3e03d6486cd3c6775524f3d19a8298290eb74712"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e9b30126545d6ddd8772363e4079d1e4908ad117",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9b30126545d6ddd8772363e4079d1e4908ad117",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9b30126545d6ddd8772363e4079d1e4908ad117"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "06a5f62c7a50367a5e32c11d2aceb1cefde152ec",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -468,28 +468,45 @@ bool IsSegWitOutput(const SigningProvider& provider, const CScript& script)\n     return false;\n }\n \n-bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors)\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, int nHashType, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum)\n {\n     bool fHashSingle = ((nHashType & ~SIGHASH_ANYONECANPAY) == SIGHASH_SINGLE);\n \n     // Use CTransaction for the constant parts of the\n     // transaction to avoid rehashing.\n     const CTransaction txConst(mtx);\n     // Sign what we can:\n+    if (inputs_amount_sum) *inputs_amount_sum = 0;\n     for (unsigned int i = 0; i < mtx.vin.size(); i++) {\n         CTxIn& txin = mtx.vin[i];\n         auto coin = coins.find(txin.prevout);\n         if (coin == coins.end() || coin->second.IsSpent()) {\n+            if (inputs_amount_sum) {\n+                inputs_amount_sum->reset();\n+                inputs_amount_sum = nullptr;\n+            }\n             input_errors[i] = \"Input not found or already spent\";\n             continue;\n         }\n         const CScript& prevPubKey = coin->second.out.scriptPubKey;\n         const CAmount& amount = coin->second.out.nValue;\n+        if (inputs_amount_sum && *inputs_amount_sum) {\n+            if (amount > 0) {\n+                **inputs_amount_sum += amount;\n+            } else {\n+                inputs_amount_sum->reset();\n+                inputs_amount_sum = nullptr;\n+            }\n+        }\n \n         SignatureData sigdata = DataFromTransaction(mtx, i, coin->second.out);\n         // Only sign SIGHASH_SINGLE if there's a corresponding output:\n         if (!fHashSingle || (i < mtx.vout.size())) {\n             ProduceSignature(*keystore, MutableTransactionSignatureCreator(&mtx, i, amount, nHashType), prevPubKey, sigdata);\n+            if ((!sigdata.witness) && inputs_amount_sum && *inputs_amount_sum) {\n+                inputs_amount_sum->reset();\n+                inputs_amount_sum = nullptr;\n+            }\n         }\n \n         UpdateInput(txin, sigdata);"
      },
      {
        "sha": "7f580809691fc8fcc528700c8461739915b1e58f",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -8,6 +8,7 @@\n \n #include <coins.h>\n #include <hash.h>\n+#include <optional.h>\n #include <pubkey.h>\n #include <script/interpreter.h>\n #include <script/keyorigin.h>\n@@ -170,6 +171,6 @@ bool IsSolvable(const SigningProvider& provider, const CScript& script);\n bool IsSegWitOutput(const SigningProvider& provider, const CScript& script);\n \n /** Sign the CMutableTransaction */\n-bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors);\n+bool SignTransaction(CMutableTransaction& mtx, const SigningProvider* provider, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum = nullptr);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      },
      {
        "sha": "49cc7d220cb9ebff34a5af79039a0447604586a4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -566,9 +566,9 @@ bool LegacyScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sig\n     }\n }\n \n-bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool LegacyScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum) const\n {\n-    return ::SignTransaction(tx, this, coins, sighash, input_errors);\n+    return ::SignTransaction(tx, this, coins, sighash, input_errors, inputs_amount_sum);\n }\n \n SigningResult LegacyScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n@@ -2038,7 +2038,7 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n     return IsMine(script);\n }\n \n-bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum) const\n {\n     std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n     for (const auto& coin_pair : coins) {\n@@ -2049,7 +2049,7 @@ bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const s\n         *keys = Merge(*keys, *coin_keys);\n     }\n \n-    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors, inputs_amount_sum);\n }\n \n SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const"
      },
      {
        "sha": "0700f65f5b477e3485d7b694cafdd94eb70c278d",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -230,7 +230,7 @@ class ScriptPubKeyMan\n     virtual bool CanProvide(const CScript& script, SignatureData& sigdata) { return false; }\n \n     /** Creates new signatures and adds them to the transaction. Returns whether all inputs were signed */\n-    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const { return false; }\n+    virtual bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum = nullptr) const { return false; }\n     /** Sign a message with the given script */\n     virtual SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const { return SigningResult::SIGNING_FAILED; };\n     /** Adds script and derivation path information to a PSBT, and optionally signs it. */\n@@ -391,7 +391,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum = nullptr) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n \n@@ -596,7 +596,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n \n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum = nullptr) const override;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n     TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false, int* n_signed = nullptr) const override;\n "
      },
      {
        "sha": "9c8317924724aba1bd9c2d86268066e618eb129f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -2462,13 +2462,13 @@ bool CWallet::SignTransaction(CMutableTransaction& tx) const\n     return SignTransaction(tx, coins, SIGHASH_ALL, input_errors);\n }\n \n-bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum) const\n {\n     // Try to sign with all ScriptPubKeyMans\n     for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n         // spk_man->SignTransaction will return true if the transaction is complete,\n         // so we can exit early and return true if that happens\n-        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors, inputs_amount_sum)) {\n             return true;\n         }\n     }"
      },
      {
        "sha": "baa3a606624ff49db295db376eaad21cce0435f1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "patch": "@@ -953,7 +953,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     // Fetch the inputs and sign with SIGHASH_ALL.\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     // Sign the tx given the input coins and sighash.\n-    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const;\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors, Optional<CAmount>* inputs_amount_sum = nullptr) const;\n     SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const;\n \n     /**"
      }
    ]
  },
  {
    "sha": "126ed4db59290e8d0bb850d437574efb2145bcb4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMjZlZDRkYjU5MjkwZThkMGJiODUwZDQzNzU3NGVmYjIxNDViY2I0",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "kalle.alm@gmail.com",
        "date": "2018-04-08T02:53:13Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-30T21:39:39Z"
      },
      "message": "wallet: Show fee in results for signrawtransaction* when known\n\nThe fee is considered known when all inputs are segwit inputs (which means amounts are enforced/known)..",
      "tree": {
        "sha": "8efc8463cab2bc0943ec1d5ef6a075c0066d65a6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8efc8463cab2bc0943ec1d5ef6a075c0066d65a6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/126ed4db59290e8d0bb850d437574efb2145bcb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126ed4db59290e8d0bb850d437574efb2145bcb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/126ed4db59290e8d0bb850d437574efb2145bcb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126ed4db59290e8d0bb850d437574efb2145bcb4/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bd00d08543bd72d5c8a5b1d9b491c14f3bd134e"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 20,
      "deletions": 6
    },
    "files": [
      {
        "sha": "56392a0d496e0ccf113c8cf5e5a47f718e027fe6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=126ed4db59290e8d0bb850d437574efb2145bcb4",
        "patch": "@@ -744,6 +744,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                     {\n                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The fee (input amounts minus output amounts), if known\"},\n                         {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "516c747ced6b0293b26459f633c14c51ba19702a",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=126ed4db59290e8d0bb850d437574efb2145bcb4",
        "patch": "@@ -274,12 +274,13 @@ void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore,\n \n     // Script verification errors\n     std::map<int, std::string> input_errors;\n+    Optional<CAmount> inputs_amount_sum;\n \n-    bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors);\n-    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+    bool complete = SignTransaction(mtx, keystore, coins, nHashType, input_errors, &inputs_amount_sum);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result, inputs_amount_sum);\n }\n \n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result)\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result, const Optional<CAmount>& inputs_amount_sum)\n {\n     // Make errors UniValue\n     UniValue vErrors(UniValue::VARR);\n@@ -293,6 +294,13 @@ void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const\n \n     result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n     result.pushKV(\"complete\", complete);\n+    if (inputs_amount_sum) {\n+        CAmount inout_amount = *inputs_amount_sum;\n+        for (const CTxOut& txout : mtx.vout) {\n+            inout_amount -= txout.nValue;\n+        }\n+        result.pushKV(\"fee\", ValueFromAmount(inout_amount));\n+    }\n     if (!vErrors.empty()) {\n         if (result.exists(\"errors\")) {\n             vErrors.push_backV(result[\"errors\"].getValues());"
      },
      {
        "sha": "f04d5f2e45e33a60d56957c840b36ccfa22527e0",
        "filename": "src/rpc/rawtransaction_util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction_util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126ed4db59290e8d0bb850d437574efb2145bcb4/src/rpc/rawtransaction_util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.h?ref=126ed4db59290e8d0bb850d437574efb2145bcb4",
        "patch": "@@ -5,6 +5,9 @@\n #ifndef BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n #define BITCOIN_RPC_RAWTRANSACTION_UTIL_H\n \n+#include <amount.h>\n+#include <optional.h>\n+\n #include <map>\n #include <string>\n \n@@ -25,7 +28,7 @@ class SigningProvider;\n  * @param result         JSON object where signed transaction results accumulate\n  */\n void SignTransaction(CMutableTransaction& mtx, const SigningProvider* keystore, const std::map<COutPoint, Coin>& coins, const UniValue& hashType, UniValue& result);\n-void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result);\n+void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const std::map<COutPoint, Coin>& coins, std::map<int, std::string>& input_errors, UniValue& result, const Optional<CAmount>& inputs_amount_sum);\n \n /**\n   * Parse a prevtxs UniValue array and get the map of coins from it"
      },
      {
        "sha": "49aa2e6c0ef76c6089542e18dc7ffee93111d37f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/126ed4db59290e8d0bb850d437574efb2145bcb4/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/126ed4db59290e8d0bb850d437574efb2145bcb4/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=126ed4db59290e8d0bb850d437574efb2145bcb4",
        "patch": "@@ -3194,6 +3194,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                     {\n                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The fee (input amounts minus output amounts), if known\"},\n                         {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\",\n@@ -3242,10 +3243,11 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n \n     // Script verification errors\n     std::map<int, std::string> input_errors;\n+    Optional<CAmount> inputs_amount_sum;\n \n-    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors);\n+    bool complete = pwallet->SignTransaction(mtx, coins, nHashType, input_errors, &inputs_amount_sum);\n     UniValue result(UniValue::VOBJ);\n-    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result);\n+    SignTransactionResultToJSON(mtx, complete, coins, input_errors, result, inputs_amount_sum);\n     return result;\n }\n "
      }
    ]
  },
  {
    "sha": "54aa714cd93def4411240d485ed47352e75a7525",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGFhNzE0Y2Q5M2RlZjQ0MTEyNDBkNDg1ZWQ0NzM1MmU3NWE3NTI1",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-04-09T05:43:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-30T21:39:53Z"
      },
      "message": "wallet: Display fee rate in signrawtransaction*",
      "tree": {
        "sha": "9264b598fdb37f23dcc9a203f1fc77f1c5725966",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9264b598fdb37f23dcc9a203f1fc77f1c5725966"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54aa714cd93def4411240d485ed47352e75a7525",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aa714cd93def4411240d485ed47352e75a7525",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54aa714cd93def4411240d485ed47352e75a7525",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aa714cd93def4411240d485ed47352e75a7525/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "126ed4db59290e8d0bb850d437574efb2145bcb4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/126ed4db59290e8d0bb850d437574efb2145bcb4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/126ed4db59290e8d0bb850d437574efb2145bcb4"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ff310f2ff6adc1bffb36f2a39f0e073fe145cab6",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54aa714cd93def4411240d485ed47352e75a7525/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54aa714cd93def4411240d485ed47352e75a7525/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=54aa714cd93def4411240d485ed47352e75a7525",
        "patch": "@@ -745,6 +745,7 @@ static UniValue signrawtransactionwithkey(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n                         {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The fee (input amounts minus output amounts), if known\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"feerate\", /* optional */ true, \"The fee rate (in \" + CURRENCY_UNIT + \"/kB), if fee is known\"},\n                         {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\","
      },
      {
        "sha": "1674477a6ce01deb840bfe3731f21f645bba233e",
        "filename": "src/rpc/rawtransaction_util.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54aa714cd93def4411240d485ed47352e75a7525/src/rpc/rawtransaction_util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54aa714cd93def4411240d485ed47352e75a7525/src/rpc/rawtransaction_util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction_util.cpp?ref=54aa714cd93def4411240d485ed47352e75a7525",
        "patch": "@@ -292,14 +292,20 @@ void SignTransactionResultToJSON(CMutableTransaction& mtx, bool complete, const\n         TxInErrorToJSON(mtx.vin.at(err_pair.first), vErrors, err_pair.second);\n     }\n \n-    result.pushKV(\"hex\", EncodeHexTx(CTransaction(mtx)));\n+    CTransaction tx(mtx);\n+    result.pushKV(\"hex\", EncodeHexTx(tx));\n     result.pushKV(\"complete\", complete);\n     if (inputs_amount_sum) {\n         CAmount inout_amount = *inputs_amount_sum;\n         for (const CTxOut& txout : mtx.vout) {\n             inout_amount -= txout.nValue;\n         }\n         result.pushKV(\"fee\", ValueFromAmount(inout_amount));\n+        result.pushKV(\"feerate\",\n+            ValueFromAmount(\n+                CFeeRate(inout_amount, GetVirtualTransactionSize(tx)).GetFeePerK()\n+            )\n+        );\n     }\n     if (!vErrors.empty()) {\n         if (result.exists(\"errors\")) {"
      },
      {
        "sha": "b9765ddfcd9c7e6d3dce36c5777036479d81174a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54aa714cd93def4411240d485ed47352e75a7525/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54aa714cd93def4411240d485ed47352e75a7525/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=54aa714cd93def4411240d485ed47352e75a7525",
        "patch": "@@ -3195,6 +3195,7 @@ UniValue signrawtransactionwithwallet(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_HEX, \"hex\", \"The hex-encoded raw transaction with signature(s)\"},\n                         {RPCResult::Type::BOOL, \"complete\", \"If the transaction has a complete set of signatures\"},\n                         {RPCResult::Type::STR_AMOUNT, \"fee\", /* optional */ true, \"The fee (input amounts minus output amounts), if known\"},\n+                        {RPCResult::Type::STR_AMOUNT, \"feerate\", /* optional */ true, \"The fee rate (in \" + CURRENCY_UNIT + \"/kB), if fee is known\"},\n                         {RPCResult::Type::ARR, \"errors\", /* optional */ true, \"Script verification errors (if there are any)\",\n                         {\n                             {RPCResult::Type::OBJ, \"\", \"\","
      }
    ]
  },
  {
    "sha": "1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzAyZmJjNjk1M2Y3ZjhkODIzOGY1YjZjZWZlN2U1Zjc4MzMyYWZl",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2019-01-24T07:29:49Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-30T21:39:53Z"
      },
      "message": "test: add test to segwit tests for fee rate when signing raw tx",
      "tree": {
        "sha": "4362e279103db2684cdbd439e5cd837912323c56",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4362e279103db2684cdbd439e5cd837912323c56"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "54aa714cd93def4411240d485ed47352e75a7525",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54aa714cd93def4411240d485ed47352e75a7525",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/54aa714cd93def4411240d485ed47352e75a7525"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 27,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c25f38b79ccf2b1b378f296727b00ea7d21657c3",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
        "patch": "@@ -19,6 +19,7 @@\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n+    assert_approx,\n     assert_equal,\n     assert_is_hex_string,\n     assert_raises_rpc_error,\n@@ -284,6 +285,32 @@ def run_test(self):\n         # Mine a block to clear the gbt cache again.\n         self.nodes[0].generate(1)\n \n+        self.log.info(\"Signing with all-segwit inputs reveals fee rate\")\n+        addr = self.nodes[0].getnewaddress(address_type='p2sh-segwit')\n+        txid = self.nodes[0].sendtoaddress(addr, 1)\n+        tx = self.nodes[0].getrawtransaction(txid, True)\n+        n = -1\n+        value = -1\n+        for o in tx[\"vout\"]:\n+            if o[\"scriptPubKey\"][\"addresses\"][0] == addr:\n+                n = o[\"n\"]\n+                value = Decimal(o[\"value\"])\n+                break\n+        assert n > -1 # failure means we could not find the address in the outputs despite sending to it\n+        assert_equal(value, 1) # failure means we got an unexpected amount of coins, despite trying to send 1\n+        fee = Decimal(\"0.00010000\")\n+        value_out = value - fee\n+        self.nodes[0].generatetoaddress(1, self.nodes[0].getnewaddress())\n+        raw = self.nodes[0].createrawtransaction([{\"txid\" : txid, \"vout\" : n}], [{self.nodes[0].getnewaddress() : value_out}])\n+        signed = self.nodes[0].signrawtransactionwithwallet(raw)\n+        assert_equal(signed[\"complete\"], True)\n+        txsize = self.nodes[0].decoderawtransaction(signed['hex'])['vsize']\n+        exp_feerate = 1000 * fee / Decimal(txsize)\n+        assert_approx(signed[\"feerate\"], exp_feerate, Decimal(\"0.00000010\"))\n+        # discrepancy = 100000000 * (exp_feerate - signed[\"feerate\"])\n+        # assert -10 < discrepancy < 10\n+        assert_equal(Decimal(signed[\"fee\"]), fee)\n+\n         self.log.info(\"Verify behaviour of importaddress and listunspent\")\n \n         # Some public keys to be used later"
      }
    ]
  },
  {
    "sha": "ddb8d028f268aac74329cbb135d13ba06560d700",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGI4ZDAyOGYyNjhhYWM3NDMyOWNiYjEzNWQxM2JhMDY1NjBkNzAw",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-10T06:44:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-10-30T21:39:53Z"
      },
      "message": "doc: Update release notes about fee entry",
      "tree": {
        "sha": "7268a10ae424c9c7451cc43bd1a5353176637cf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7268a10ae424c9c7451cc43bd1a5353176637cf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddb8d028f268aac74329cbb135d13ba06560d700",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddb8d028f268aac74329cbb135d13ba06560d700",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddb8d028f268aac74329cbb135d13ba06560d700",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddb8d028f268aac74329cbb135d13ba06560d700/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c02fbc6953f7f8d8238f5b6cefe7e5f78332afe"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f9f6a90f2ed5b62fce48c8d70f731b0da8cdce4a",
        "filename": "doc/release-notes-pr12911.md",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddb8d028f268aac74329cbb135d13ba06560d700/doc/release-notes-pr12911.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddb8d028f268aac74329cbb135d13ba06560d700/doc/release-notes-pr12911.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12911.md?ref=ddb8d028f268aac74329cbb135d13ba06560d700",
        "patch": "@@ -0,0 +1,7 @@\n+RPC changes\n+------------\n+\n+### Low-level changes\n+\n+- `signrawtransactionwithkey` and `signrawtransactionwithwallet` will now include a `fee` entry in the results,\n+  for cases where the fee is known."
      }
    ]
  }
]