[
  {
    "sha": "c77de622dd8ef458f73b1a01a34629a7c4f49358",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzdkZTYyMmRkOGVmNDU4ZjczYjFhMDFhMzQ2MjlhN2M0ZjQ5MzU4",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-10-16T17:37:19Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2021-03-04T19:54:17Z"
      },
      "message": "net: Replace enum CConnMan::NumConnections with enum class ConnectionDirection",
      "tree": {
        "sha": "da0910c8472e5ab4820c16be3609b8b8bccd1a35",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da0910c8472e5ab4820c16be3609b8b8bccd1a35"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c77de622dd8ef458f73b1a01a34629a7c4f49358",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77de622dd8ef458f73b1a01a34629a7c4f49358",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c77de622dd8ef458f73b1a01a34629a7c4f49358",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c77de622dd8ef458f73b1a01a34629a7c4f49358/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b4d22654fe9e90093e643cb7beb896c48a274d47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b4d22654fe9e90093e643cb7beb896c48a274d47",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b4d22654fe9e90093e643cb7beb896c48a274d47"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 36,
      "deletions": 24
    },
    "files": [
      {
        "sha": "1dd1e92e2ff8c171191033113bbd2396aaad172e",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -6,9 +6,10 @@\n #define BITCOIN_INTERFACES_NODE_H\n \n #include <amount.h>     // For CAmount\n-#include <net.h>        // For CConnman::NumConnections\n+#include <net.h>        // For NodeId\n #include <net_types.h>  // For banmap_t\n #include <netaddress.h> // For Network\n+#include <netbase.h>    // For ConnectionDirection\n #include <support/allocators/secure.h> // For SecureString\n #include <util/translation.h>\n \n@@ -88,7 +89,7 @@ class Node\n     virtual bool getProxy(Network net, proxyType& proxy_info) = 0;\n \n     //! Get number of connections.\n-    virtual size_t getNodeCount(CConnman::NumConnections flags) = 0;\n+    virtual size_t getNodeCount(ConnectionDirection flags) = 0;\n \n     //! Get stats for connected nodes.\n     using NodesStats = std::vector<std::tuple<CNodeStats, bool, CNodeStateStats>>;"
      },
      {
        "sha": "cf7d3e50ba51ea6a494f45c3035447de4ca6f8bb",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -2725,15 +2725,15 @@ bool CConnman::RemoveAddedNode(const std::string& strNode)\n     return false;\n }\n \n-size_t CConnman::GetNodeCount(NumConnections flags)\n+size_t CConnman::GetNodeCount(ConnectionDirection flags)\n {\n     LOCK(cs_vNodes);\n-    if (flags == CConnman::CONNECTIONS_ALL) // Shortcut if we want total\n+    if (flags == ConnectionDirection::Both) // Shortcut if we want total\n         return vNodes.size();\n \n     int nNum = 0;\n     for (const auto& pnode : vNodes) {\n-        if (flags & (pnode->IsInboundConn() ? CONNECTIONS_IN : CONNECTIONS_OUT)) {\n+        if (flags & (pnode->IsInboundConn() ? ConnectionDirection::In : ConnectionDirection::Out)) {\n             nNum++;\n         }\n     }"
      },
      {
        "sha": "beef47f045b14053bdf3f3ced6672042e741f7e8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -17,6 +17,7 @@\n #include <i2p.h>\n #include <net_permissions.h>\n #include <netaddress.h>\n+#include <netbase.h>\n #include <optional.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n@@ -801,13 +802,6 @@ class CConnman\n {\n public:\n \n-    enum NumConnections {\n-        CONNECTIONS_NONE = 0,\n-        CONNECTIONS_IN = (1U << 0),\n-        CONNECTIONS_OUT = (1U << 1),\n-        CONNECTIONS_ALL = (CONNECTIONS_IN | CONNECTIONS_OUT),\n-    };\n-\n     struct Options\n     {\n         ServiceFlags nLocalServices = NODE_NONE;\n@@ -976,7 +970,7 @@ class CConnman\n      */\n     bool AddConnection(const std::string& address, ConnectionType conn_type);\n \n-    size_t GetNodeCount(NumConnections num);\n+    size_t GetNodeCount(ConnectionDirection);\n     void GetNodeStats(std::vector<CNodeStats>& vstats);\n     bool DisconnectNode(const std::string& node);\n     bool DisconnectNode(const CSubNet& subnet);"
      },
      {
        "sha": "751f7eb3f0a584ac87ddc7dfb48c5f30c88ffc4e",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -18,6 +18,7 @@\n #include <memory>\n #include <stdint.h>\n #include <string>\n+#include <type_traits>\n #include <vector>\n \n extern int nConnectTimeout;\n@@ -28,6 +29,22 @@ static const int DEFAULT_CONNECT_TIMEOUT = 5000;\n //! -dns default\n static const int DEFAULT_NAME_LOOKUP = true;\n \n+enum class ConnectionDirection {\n+    None = 0,\n+    In = (1U << 0),\n+    Out = (1U << 1),\n+    Both = (In | Out),\n+};\n+static inline ConnectionDirection& operator|=(ConnectionDirection& a, ConnectionDirection b) {\n+    using underlying = typename std::underlying_type<ConnectionDirection>::type;\n+    a = ConnectionDirection(underlying(a) | underlying(b));\n+    return a;\n+}\n+static inline bool operator&(ConnectionDirection a, ConnectionDirection b) {\n+    using underlying = typename std::underlying_type<ConnectionDirection>::type;\n+    return (underlying(a) & underlying(b));\n+}\n+\n class proxyType\n {\n public:"
      },
      {
        "sha": "acd6d7847e026cb43cd03f5b0f9638856d4c6479",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -96,7 +96,7 @@ class NodeImpl : public Node\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     void mapPort(bool use_upnp, bool use_natpmp) override { StartMapPort(use_upnp, use_natpmp); }\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n-    size_t getNodeCount(CConnman::NumConnections flags) override\n+    size_t getNodeCount(ConnectionDirection flags) override\n     {\n         return m_context->connman ? m_context->connman->GetNodeCount(flags) : 0;\n     }"
      },
      {
        "sha": "b244bc94f2e723a22955cf5ccace12001f365b94",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -71,14 +71,14 @@ ClientModel::~ClientModel()\n \n int ClientModel::getNumConnections(unsigned int flags) const\n {\n-    CConnman::NumConnections connections = CConnman::CONNECTIONS_NONE;\n+    ConnectionDirection connections = ConnectionDirection::None;\n \n     if(flags == CONNECTIONS_IN)\n-        connections = CConnman::CONNECTIONS_IN;\n+        connections = ConnectionDirection::In;\n     else if (flags == CONNECTIONS_OUT)\n-        connections = CConnman::CONNECTIONS_OUT;\n+        connections = ConnectionDirection::Out;\n     else if (flags == CONNECTIONS_ALL)\n-        connections = CConnman::CONNECTIONS_ALL;\n+        connections = ConnectionDirection::Both;\n \n     return m_node.getNodeCount(connections);\n }"
      },
      {
        "sha": "f29f556517d96bd82c2db096ae4ef1fc31ae2a06",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -659,7 +659,7 @@ static RPCHelpMan getblocktemplate()\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     if (!Params().IsTestChain()) {\n-        if (node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0) {\n+        if (node.connman->GetNodeCount(ConnectionDirection::Both) == 0) {\n             throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n         }\n "
      },
      {
        "sha": "cf4d46cf2ccde57ca6fb4fb0448fa42dbdb0b614",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -57,7 +57,7 @@ static RPCHelpMan getconnectioncount()\n     if(!node.connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    return (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n+    return (int)node.connman->GetNodeCount(ConnectionDirection::Both);\n },\n     };\n }\n@@ -630,9 +630,9 @@ static RPCHelpMan getnetworkinfo()\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n     if (node.connman) {\n         obj.pushKV(\"networkactive\", node.connman->GetNetworkActive());\n-        obj.pushKV(\"connections\", (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n-        obj.pushKV(\"connections_in\", (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_IN));\n-        obj.pushKV(\"connections_out\", (int)node.connman->GetNodeCount(CConnman::CONNECTIONS_OUT));\n+        obj.pushKV(\"connections\", (int)node.connman->GetNodeCount(ConnectionDirection::Both));\n+        obj.pushKV(\"connections_in\", (int)node.connman->GetNodeCount(ConnectionDirection::In));\n+        obj.pushKV(\"connections_out\", (int)node.connman->GetNodeCount(ConnectionDirection::Out));\n     }\n     obj.pushKV(\"networks\",      GetNetworksInfo());\n     obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));"
      },
      {
        "sha": "ae77a45e44598827bac1ba3e51225dcdc4bba785",
        "filename": "src/test/fuzz/connman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/test/fuzz/connman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c77de622dd8ef458f73b1a01a34629a7c4f49358/src/test/fuzz/connman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/connman.cpp?ref=c77de622dd8ef458f73b1a01a34629a7c4f49358",
        "patch": "@@ -95,7 +95,7 @@ FUZZ_TARGET_INIT(connman, initialize_connman)\n                 (void)connman.GetDeterministicRandomizer(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n             },\n             [&] {\n-                (void)connman.GetNodeCount(fuzzed_data_provider.PickValueInArray({CConnman::CONNECTIONS_NONE, CConnman::CONNECTIONS_IN, CConnman::CONNECTIONS_OUT, CConnman::CONNECTIONS_ALL}));\n+                (void)connman.GetNodeCount(fuzzed_data_provider.PickValueInArray({ConnectionDirection::None, ConnectionDirection::In, ConnectionDirection::Out, ConnectionDirection::Both}));\n             },\n             [&] {\n                 connman.MarkAddressGood(random_address);"
      }
    ]
  }
]