[
  {
    "sha": "7daffc6a90a797ce7c365a893a31a31b0206985c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGFmZmM2YTkwYTc5N2NlN2MzNjVhODkzYTMxYTMxYjAyMDY5ODVj",
    "commit": {
      "author": {
        "name": "Gillian Chu",
        "email": "gillianchu@Gillians-MacBook-Pro.local",
        "date": "2020-05-27T17:05:34Z"
      },
      "committer": {
        "name": "Gillian Chu",
        "email": "gillianchu@Gillians-MacBook-Pro.local",
        "date": "2020-06-03T14:18:01Z"
      },
      "message": "[test] CScriptNum Decode Check as Unit Tests\n\nMigrates the CScriptNum decode tests into a unit test, and moved some\nchanges made in #14816. Made possible by the integration of\ntest_framework unit testing in #18576. Further extends the original\ntest with larger ints, similar to the scriptnum_tests.cpp file. Adds\ntest to blocktools.py testing fn create_coinbase() with CScriptNum\ndecode.",
      "tree": {
        "sha": "bc55218a6dc600efb769ebbe32b8d035b180d8c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc55218a6dc600efb769ebbe32b8d035b180d8c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7daffc6a90a797ce7c365a893a31a31b0206985c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7daffc6a90a797ce7c365a893a31a31b0206985c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7daffc6a90a797ce7c365a893a31a31b0206985c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7daffc6a90a797ce7c365a893a31a31b0206985c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bc7751cadbd038faf8ac1d62cda23fcf00d4cc2"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 15,
      "deletions": 8
    },
    "files": [
      {
        "sha": "86d7c78d6378d53c87ffa2c3aee1d49d3fb9af70",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=7daffc6a90a797ce7c365a893a31a31b0206985c",
        "patch": "@@ -29,8 +29,6 @@\n     assert_raises_rpc_error,\n     connect_nodes,\n )\n-from test_framework.script import CScriptNum\n-\n \n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n@@ -91,12 +89,6 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         coinbase_tx.rehash()\n \n         # round-trip the encoded bip34 block height commitment\n-        assert_equal(CScriptNum.decode(coinbase_tx.vin[0].scriptSig), next_height)\n-        # round-trip negative and multi-byte CScriptNums to catch python regression\n-        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(1500))), 1500)\n-        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(-1500))), -1500)\n-        assert_equal(CScriptNum.decode(CScriptNum.encode(CScriptNum(-1))), -1)\n-\n         block = CBlock()\n         block.nVersion = tmpl[\"version\"]\n         block.hashPrevBlock = int(tmpl[\"previousblockhash\"], 16)"
      },
      {
        "sha": "afc199500925226b3e324dab5f0dfac847c186b1",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=7daffc6a90a797ce7c365a893a31a31b0206985c",
        "patch": "@@ -4,6 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Utilities for manipulating blocks and transactions.\"\"\"\n \n+import unittest\n+\n from .address import (\n     key_to_p2sh_p2wpkh,\n     key_to_p2wpkh,\n@@ -217,3 +219,9 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n             tx_to_witness = ToHex(tx)\n \n     return node.sendrawtransaction(tx_to_witness)\n+\n+class TestFrameworkBlockTools(unittest.TestCase):\n+    def test_create_coinbase(self):\n+        height = 20\n+        coinbase_tx = create_coinbase(height=height)\n+        assert_equal(CScriptNum.decode(coinbase_tx.vin[0].scriptSig), height)"
      },
      {
        "sha": "fd5c97f48bbdfab35e13acf815985b77f871e9f0",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=7daffc6a90a797ce7c365a893a31a31b0206985c",
        "patch": "@@ -731,3 +731,9 @@ def test_bn2vch(self):\n         self.assertEqual(bn2vch(0xFFFFFFFF), bytes([0xFF, 0xFF, 0xFF, 0xFF, 0x00]))\n         self.assertEqual(bn2vch(123456789), bytes([0x15, 0xCD, 0x5B, 0x07]))\n         self.assertEqual(bn2vch(-54321), bytes([0x31, 0xD4, 0x80]))\n+\n+    def test_cscriptnum_encoding(self):\n+        # round-trip negative and multi-byte CScriptNums\n+        values = [0, 1, -1, -2, 127, 128, -255, 256, (1 << 15) - 1, -(1 << 16), (1 << 24) - 1, (1 << 31), 1 - (1 << 32), 1 << 40, 1500, -1500]\n+        for value in values:\n+            self.assertEqual(CScriptNum.decode(CScriptNum.encode(CScriptNum(value))), value)"
      },
      {
        "sha": "e7abc27dc037fba4de77bbe955a37e177358e544",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7daffc6a90a797ce7c365a893a31a31b0206985c/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=7daffc6a90a797ce7c365a893a31a31b0206985c",
        "patch": "@@ -68,6 +68,7 @@\n \n TEST_FRAMEWORK_MODULES = [\n     \"address\",\n+    \"blocktools\",\n     \"script\",\n ]\n "
      }
    ]
  }
]