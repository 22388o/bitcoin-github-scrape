[
  {
    "sha": "8d0b610fe8d0916404aa9158c525b80b1c581c0e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZDBiNjEwZmU4ZDA5MTY0MDRhYTkxNThjNTI1YjgwYjFjNTgxYzBl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-09-07T23:29:59Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-24T06:22:33Z"
      },
      "message": "Avoid pemanent cs_main/cs_wallet lock during wallet rescans",
      "tree": {
        "sha": "7a6c2475b238cd1ee809bb2bf6fd98a52088adc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a6c2475b238cd1ee809bb2bf6fd98a52088adc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8d0b610fe8d0916404aa9158c525b80b1c581c0e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpoJioACgkQHrd2uwPH\nki3mrRAAs/bpKjefR7BwFFXCUEQQW8eKjzmgSAOfvJnbuiVNhJEgs2D3wqo+iIR5\nRBxLiF/QD+Rg8FskAs8joPsvimshpLQjucnkNYTTtddbL3w9mVtx/IDG/8KxysXe\nqZ/xD3vegrxEt/BCncr9B4ZQugvbZolNG9Yq45WikGXpw1BFUwm97NcRVe0hOIZk\nyy9zOXnnQeUL/q9d0VHmsUShGHubUn6suy7/Zgz/dpj7EGaynCiO7/13FDboqnFu\n5Ddr7pwm8MmQthjZiDdaSKeCBAGl67aW9dlMqmyyIWIhA9JAmcJuiB3rU8S2R0Yc\nfhclCf4mBLKbEiajz+aRslgjYXVIB3Hs7Jt0A40F07Ej/aH3o0gk9mI5kVL9qMIK\nirCO8+TqCYoFaoA2UNeFgpUcpd5X8aTbol1g6Jaug+Rn7/uIvvaMc7vmefZzfHX+\nhxUIpiJVDmP9Iz1TgM9Neewifr4xTsvHSFrKuocWiO0T93PL3L3Jszhjubu25hiK\n5WphK7EtgL/uLm7KlGckALY6JYvcs+Guqg26kZAFjAdyAglgvnFBaD8XiuVDIux/\nTShmpEQh5EEc1Q9hhZVAly+VyAlJ3AzMJgbQ4lFTiefY2+E1JuYdITZ6yVZhVd50\nxndoNLjZRyKSacIZRSoLszFbYD9knF0Y5BdBA7B/LdXzLpj/Ong=\n=HOaz\n-----END PGP SIGNATURE-----",
        "payload": "tree 7a6c2475b238cd1ee809bb2bf6fd98a52088adc7\nparent 0910cbe4ef31eb95fd76c7c2f820419fe64a3150\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1504826999 -0700\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1516774953 -1000\n\nAvoid pemanent cs_main/cs_wallet lock during wallet rescans\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0b610fe8d0916404aa9158c525b80b1c581c0e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0b610fe8d0916404aa9158c525b80b1c581c0e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0b610fe8d0916404aa9158c525b80b1c581c0e/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0910cbe4ef31eb95fd76c7c2f820419fe64a3150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0910cbe4ef31eb95fd76c7c2f820419fe64a3150",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0910cbe4ef31eb95fd76c7c2f820419fe64a3150"
      }
    ],
    "stats": {
      "total": 439,
      "additions": 245,
      "deletions": 194
    },
    "files": [
      {
        "sha": "1711b400e31984892261f68f34f61698ad2d5237",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 169,
        "deletions": 165,
        "changes": 334,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=8d0b610fe8d0916404aa9158c525b80b1c581c0e",
        "patch": "@@ -101,61 +101,60 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         );\n \n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n-\n-    EnsureWalletIsUnlocked(pwallet);\n-\n-    std::string strSecret = request.params[0].get_str();\n-    std::string strLabel = \"\";\n-    if (!request.params[1].isNull())\n-        strLabel = request.params[1].get_str();\n-\n-    // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (!request.params[2].isNull())\n-        fRescan = request.params[2].get_bool();\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (fRescan && fPruneMode)\n-        throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n+        EnsureWalletIsUnlocked(pwallet);\n \n-    CBitcoinSecret vchSecret;\n-    bool fGood = vchSecret.SetString(strSecret);\n+        std::string strSecret = request.params[0].get_str();\n+        std::string strLabel = \"\";\n+        if (!request.params[1].isNull())\n+            strLabel = request.params[1].get_str();\n \n-    if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n+        // Whether to perform rescan after import\n+        if (!request.params[2].isNull())\n+            fRescan = request.params[2].get_bool();\n \n-    CKey key = vchSecret.GetKey();\n-    if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n+        if (fRescan && fPruneMode)\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n-    CPubKey pubkey = key.GetPubKey();\n-    assert(key.VerifyPubKey(pubkey));\n-    CKeyID vchAddress = pubkey.GetID();\n-    {\n-        pwallet->MarkDirty();\n+        CBitcoinSecret vchSecret;\n+        bool fGood = vchSecret.SetString(strSecret);\n \n-        // We don't know which corresponding address will be used; label them all\n-        for (const auto& dest : GetAllDestinationsForKey(pubkey)) {\n-            pwallet->SetAddressBook(dest, strLabel, \"receive\");\n-        }\n+        if (!fGood) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid private key encoding\");\n \n-        // Don't throw error in case a key is already there\n-        if (pwallet->HaveKey(vchAddress)) {\n-            return NullUniValue;\n-        }\n+        CKey key = vchSecret.GetKey();\n+        if (!key.IsValid()) throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Private key outside allowed range\");\n \n-        pwallet->mapKeyMetadata[vchAddress].nCreateTime = 1;\n+        CPubKey pubkey = key.GetPubKey();\n+        assert(key.VerifyPubKey(pubkey));\n+        CKeyID vchAddress = pubkey.GetID();\n+        {\n+            pwallet->MarkDirty();\n+            // We don't know which corresponding address will be used; label them all\n+            for (const auto& dest : GetAllDestinationsForKey(pubkey)) {\n+                pwallet->SetAddressBook(dest, strLabel, \"receive\");\n+            }\n \n-        if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n-        }\n-        pwallet->LearnAllRelatedScripts(pubkey);\n+            // Don't throw error in case a key is already there\n+            if (pwallet->HaveKey(vchAddress)) {\n+                return NullUniValue;\n+            }\n \n-        // whenever a key is imported, we need to scan the whole chain\n-        pwallet->UpdateTimeFirstKey(1);\n+            // whenever a key is imported, we need to scan the whole chain\n+            pwallet->UpdateTimeFirstKey(1);\n+            pwallet->mapKeyMetadata[vchAddress].nCreateTime = 1;\n \n-        if (fRescan) {\n-            pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n+            if (!pwallet->AddKeyPubKey(key, pubkey)) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n+            }\n+            pwallet->LearnAllRelatedScripts(pubkey);\n         }\n     }\n+    if (fRescan) {\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n+    }\n \n     return NullUniValue;\n }\n@@ -268,21 +267,22 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (!request.params[3].isNull())\n         fP2SH = request.params[3].get_bool();\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n \n-    CTxDestination dest = DecodeDestination(request.params[0].get_str());\n-    if (IsValidDestination(dest)) {\n-        if (fP2SH) {\n-            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n+        CTxDestination dest = DecodeDestination(request.params[0].get_str());\n+        if (IsValidDestination(dest)) {\n+            if (fP2SH) {\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Cannot use the p2sh flag with an address - use a script instead\");\n+            }\n+            ImportAddress(pwallet, dest, strLabel);\n+        } else if (IsHex(request.params[0].get_str())) {\n+            std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n+            ImportScript(pwallet, CScript(data.begin(), data.end()), strLabel, fP2SH);\n+        } else {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n         }\n-        ImportAddress(pwallet, dest, strLabel);\n-    } else if (IsHex(request.params[0].get_str())) {\n-        std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n-        ImportScript(pwallet, CScript(data.begin(), data.end()), strLabel, fP2SH);\n-    } else {\n-        throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address or script\");\n     }\n-\n     if (fRescan)\n     {\n         pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n@@ -436,14 +436,15 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (!pubKey.IsFullyValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey is not a valid public key\");\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n \n-    for (const auto& dest : GetAllDestinationsForKey(pubKey)) {\n-        ImportAddress(pwallet, dest, strLabel);\n+        for (const auto& dest : GetAllDestinationsForKey(pubKey)) {\n+            ImportAddress(pwallet, dest, strLabel);\n+        }\n+        ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);\n+        pwallet->LearnAllRelatedScripts(pubKey);\n     }\n-    ImportScript(pwallet, GetScriptForRawPubKey(pubKey), strLabel, false);\n-    pwallet->LearnAllRelatedScripts(pubKey);\n-\n     if (fRescan)\n     {\n         pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n@@ -479,90 +480,92 @@ UniValue importwallet(const JSONRPCRequest& request)\n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    int64_t nTimeBegin = 0;\n+    bool fGood = true;\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+        EnsureWalletIsUnlocked(pwallet);\n \n-    std::ifstream file;\n-    file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n-    if (!file.is_open())\n-        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+        std::ifstream file;\n+        file.open(request.params[0].get_str().c_str(), std::ios::in | std::ios::ate);\n+        if (!file.is_open()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+        }\n+        nTimeBegin = chainActive.Tip()->GetBlockTime();\n \n-    int64_t nTimeBegin = chainActive.Tip()->GetBlockTime();\n+        int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n+        file.seekg(0, file.beg);\n \n-    bool fGood = true;\n+        pwallet->ShowProgress(_(\"Importing...\"), 0); // show progress dialog in GUI\n+        while (file.good()) {\n+            pwallet->ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))));\n+            std::string line;\n+            std::getline(file, line);\n+            if (line.empty() || line[0] == '#')\n+                continue;\n \n-    int64_t nFilesize = std::max((int64_t)1, (int64_t)file.tellg());\n-    file.seekg(0, file.beg);\n-\n-    pwallet->ShowProgress(_(\"Importing...\"), 0); // show progress dialog in GUI\n-    while (file.good()) {\n-        pwallet->ShowProgress(\"\", std::max(1, std::min(99, (int)(((double)file.tellg() / (double)nFilesize) * 100))));\n-        std::string line;\n-        std::getline(file, line);\n-        if (line.empty() || line[0] == '#')\n-            continue;\n-\n-        std::vector<std::string> vstr;\n-        boost::split(vstr, line, boost::is_any_of(\" \"));\n-        if (vstr.size() < 2)\n-            continue;\n-        CBitcoinSecret vchSecret;\n-        if (vchSecret.SetString(vstr[0])) {\n-            CKey key = vchSecret.GetKey();\n-            CPubKey pubkey = key.GetPubKey();\n-            assert(key.VerifyPubKey(pubkey));\n-            CKeyID keyid = pubkey.GetID();\n-            if (pwallet->HaveKey(keyid)) {\n-                LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+            std::vector<std::string> vstr;\n+            boost::split(vstr, line, boost::is_any_of(\" \"));\n+            if (vstr.size() < 2)\n                 continue;\n-            }\n-            int64_t nTime = DecodeDumpTime(vstr[1]);\n-            std::string strLabel;\n-            bool fLabel = true;\n-            for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n-                if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n-                    break;\n-                if (vstr[nStr] == \"change=1\")\n-                    fLabel = false;\n-                if (vstr[nStr] == \"reserve=1\")\n-                    fLabel = false;\n-                if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n-                    strLabel = DecodeDumpString(vstr[nStr].substr(6));\n-                    fLabel = true;\n+            CBitcoinSecret vchSecret;\n+            if (vchSecret.SetString(vstr[0])) {\n+                CKey key = vchSecret.GetKey();\n+                CPubKey pubkey = key.GetPubKey();\n+                assert(key.VerifyPubKey(pubkey));\n+                CKeyID keyid = pubkey.GetID();\n+                if (pwallet->HaveKey(keyid)) {\n+                    LogPrintf(\"Skipping import of %s (key already present)\\n\", EncodeDestination(keyid));\n+                    continue;\n                 }\n+                int64_t nTime = DecodeDumpTime(vstr[1]);\n+                std::string strLabel;\n+                bool fLabel = true;\n+                for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n+                    if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n+                        break;\n+                    if (vstr[nStr] == \"change=1\")\n+                        fLabel = false;\n+                    if (vstr[nStr] == \"reserve=1\")\n+                        fLabel = false;\n+                    if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n+                        strLabel = DecodeDumpString(vstr[nStr].substr(6));\n+                        fLabel = true;\n+                    }\n+                }\n+                LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n+                if (!pwallet->AddKeyPubKey(key, pubkey)) {\n+                    fGood = false;\n+                    continue;\n+                }\n+                pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n+                if (fLabel)\n+                    pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n+                nTimeBegin = std::min(nTimeBegin, nTime);\n+            } else if(IsHex(vstr[0])) {\n+               std::vector<unsigned char> vData(ParseHex(vstr[0]));\n+               CScript script = CScript(vData.begin(), vData.end());\n+               if (pwallet->HaveCScript(script)) {\n+                   LogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n+                   continue;\n+               }\n+               if(!pwallet->AddCScript(script)) {\n+                   LogPrintf(\"Error importing script %s\\n\", vstr[0]);\n+                   fGood = false;\n+                   continue;\n+               }\n+               int64_t birth_time = DecodeDumpTime(vstr[1]);\n+               if (birth_time > 0) {\n+                   pwallet->m_script_metadata[CScriptID(script)].nCreateTime = birth_time;\n+                   nTimeBegin = std::min(nTimeBegin, birth_time);\n+               }\n             }\n-            LogPrintf(\"Importing %s...\\n\", EncodeDestination(keyid));\n-            if (!pwallet->AddKeyPubKey(key, pubkey)) {\n-                fGood = false;\n-                continue;\n-            }\n-            pwallet->mapKeyMetadata[keyid].nCreateTime = nTime;\n-            if (fLabel)\n-                pwallet->SetAddressBook(keyid, strLabel, \"receive\");\n-            nTimeBegin = std::min(nTimeBegin, nTime);\n-        } else if(IsHex(vstr[0])) {\n-           std::vector<unsigned char> vData(ParseHex(vstr[0]));\n-           CScript script = CScript(vData.begin(), vData.end());\n-           if (pwallet->HaveCScript(script)) {\n-               LogPrintf(\"Skipping import of %s (script already present)\\n\", vstr[0]);\n-               continue;\n-           }\n-           if(!pwallet->AddCScript(script)) {\n-               LogPrintf(\"Error importing script %s\\n\", vstr[0]);\n-               fGood = false;\n-               continue;\n-           }\n-           int64_t birth_time = DecodeDumpTime(vstr[1]);\n-           if (birth_time > 0) {\n-               pwallet->m_script_metadata[CScriptID(script)].nCreateTime = birth_time;\n-               nTimeBegin = std::min(nTimeBegin, birth_time);\n-           }\n         }\n+        file.close();\n+        pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n+        pwallet->UpdateTimeFirstKey(nTimeBegin);\n     }\n-    file.close();\n-    pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n-    pwallet->UpdateTimeFirstKey(nTimeBegin);\n     pwallet->RescanFromTime(nTimeBegin, false /* update */);\n     pwallet->MarkDirty();\n \n@@ -685,7 +688,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->GetBlockTime()));\n     file << \"\\n\";\n \n-    // add the base58check encoded extended master if the wallet uses HD \n+    // add the base58check encoded extended master if the wallet uses HD\n     CKeyID masterKeyID = pwallet->GetHDChain().masterKeyID;\n     if (!masterKeyID.IsNull())\n     {\n@@ -1135,47 +1138,48 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n-    EnsureWalletIsUnlocked(pwallet);\n-\n-    // Verify all timestamps are present before importing any keys.\n-    const int64_t now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n-    for (const UniValue& data : requests.getValues()) {\n-        GetImportTimestamp(data, now);\n-    }\n-\n+    int64_t now = 0;\n     bool fRunScan = false;\n-    const int64_t minimumTimestamp = 1;\n     int64_t nLowestTimestamp = 0;\n-\n-    if (fRescan && chainActive.Tip()) {\n-        nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n-    } else {\n-        fRescan = false;\n-    }\n-\n     UniValue response(UniValue::VARR);\n+    {\n+        LOCK2(cs_main, pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n \n-    for (const UniValue& data : requests.getValues()) {\n-        const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n-        const UniValue result = ProcessImport(pwallet, data, timestamp);\n-        response.push_back(result);\n-\n-        if (!fRescan) {\n-            continue;\n+        // Verify all timestamps are present before importing any keys.\n+        now = chainActive.Tip() ? chainActive.Tip()->GetMedianTimePast() : 0;\n+        for (const UniValue& data : requests.getValues()) {\n+            GetImportTimestamp(data, now);\n         }\n \n-        // If at least one request was successful then allow rescan.\n-        if (result[\"success\"].get_bool()) {\n-            fRunScan = true;\n+        const int64_t minimumTimestamp = 1;\n+\n+        if (fRescan && chainActive.Tip()) {\n+            nLowestTimestamp = chainActive.Tip()->GetBlockTime();\n+        } else {\n+            fRescan = false;\n         }\n \n-        // Get the lowest timestamp.\n-        if (timestamp < nLowestTimestamp) {\n-            nLowestTimestamp = timestamp;\n+        for (const UniValue& data : requests.getValues()) {\n+            const int64_t timestamp = std::max(GetImportTimestamp(data, now), minimumTimestamp);\n+            const UniValue result = ProcessImport(pwallet, data, timestamp);\n+            response.push_back(result);\n+\n+            if (!fRescan) {\n+                continue;\n+            }\n+\n+            // If at least one request was successful then allow rescan.\n+            if (result[\"success\"].get_bool()) {\n+                fRunScan = true;\n+            }\n+\n+            // Get the lowest timestamp.\n+            if (timestamp < nLowestTimestamp) {\n+                nLowestTimestamp = timestamp;\n+            }\n         }\n     }\n-\n     if (fRescan && fRunScan && requests.size()) {\n         int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, true /* update */);\n         pwallet->ReacceptWalletTransactions();"
      },
      {
        "sha": "bc0d544aab45c6d1e9432255d56ba411e385f130",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 17,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8d0b610fe8d0916404aa9158c525b80b1c581c0e",
        "patch": "@@ -3398,30 +3398,40 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             );\n     }\n \n-    LOCK2(cs_main, pwallet->cs_wallet);\n+    if (pwallet->IsScanning()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n \n-    CBlockIndex *pindexStart = chainActive.Genesis();\n+    CBlockIndex *pindexStart = nullptr;\n     CBlockIndex *pindexStop = nullptr;\n-    if (!request.params[0].isNull()) {\n-        pindexStart = chainActive[request.params[0].get_int()];\n-        if (!pindexStart) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n-        }\n-    }\n+    CBlockIndex *pChainTip = nullptr;\n+    {\n+        LOCK(cs_main);\n+        pindexStart = chainActive.Genesis();\n+        pChainTip = chainActive.Tip();\n \n-    if (!request.params[1].isNull()) {\n-        pindexStop = chainActive[request.params[1].get_int()];\n-        if (!pindexStop) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+        if (!request.params[0].isNull()) {\n+            pindexStart = chainActive[request.params[0].get_int()];\n+            if (!pindexStart) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid start_height\");\n+            }\n         }\n-        else if (pindexStop->nHeight < pindexStart->nHeight) {\n-            throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+\n+        if (!request.params[1].isNull()) {\n+            pindexStop = chainActive[request.params[1].get_int()];\n+            if (!pindexStop) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid stop_height\");\n+            }\n+            else if (pindexStop->nHeight < pindexStart->nHeight) {\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, \"stop_height must be greater then start_height\");\n+            }\n         }\n     }\n \n     // We can't rescan beyond non-pruned blocks, stop and throw an error\n     if (fPruneMode) {\n-        CBlockIndex *block = pindexStop ? pindexStop : chainActive.Tip();\n+        LOCK(cs_main);\n+        CBlockIndex *block = pindexStop ? pindexStop : pChainTip;\n         while (block && block->nHeight >= pindexStart->nHeight) {\n             if (!(block->nStatus & BLOCK_HAVE_DATA)) {\n                 throw JSONRPCError(RPC_MISC_ERROR, \"Can't rescan beyond pruned data. Use RPC call getblockchaininfo to determine your pruned height.\");\n@@ -3436,12 +3446,11 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");\n         }\n         // if we got a nullptr returned, ScanForWalletTransactions did rescan up to the requested stopindex\n-        stopBlock = pindexStop ? pindexStop : chainActive.Tip();\n+        stopBlock = pindexStop ? pindexStop : pChainTip;\n     }\n     else {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Rescan failed. Potentially corrupted data files.\");\n     }\n-\n     UniValue response(UniValue::VOBJ);\n     response.pushKV(\"start_height\", pindexStart->nHeight);\n     response.pushKV(\"stop_height\", stopBlock->nHeight);"
      },
      {
        "sha": "450ef4c49c0fa5a922bb94ad4b8f5d9383a8d0fb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 12,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8d0b610fe8d0916404aa9158c525b80b1c581c0e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8d0b610fe8d0916404aa9158c525b80b1c581c0e",
        "patch": "@@ -1614,14 +1614,15 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  */\n int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n {\n-    AssertLockHeld(cs_main);\n-    AssertLockHeld(cs_wallet);\n-\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n     // to be scanned.\n-    CBlockIndex* const startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n-    LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+    CBlockIndex* startBlock = nullptr;\n+    {\n+        LOCK(cs_main);\n+        startBlock = chainActive.FindEarliestAtLeast(startTime - TIMESTAMP_WINDOW);\n+        LogPrintf(\"%s: Rescanning last %i blocks\\n\", __func__, startBlock ? chainActive.Height() - startBlock->nHeight + 1 : 0);\n+    }\n \n     if (startBlock) {\n         const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, update);\n@@ -1643,6 +1644,10 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  *\n  * If pindexStop is not a nullptr, the scan will stop at the block-index\n  * defined by pindexStop\n+ *\n+ * Caller needs to make sure pindexStop (and the optional pindexStart) are on\n+ * the main chain after to the addition of any new keys you want to detect\n+ * transactions for.\n  */\n CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate)\n {\n@@ -1656,24 +1661,49 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n     CBlockIndex* pindex = pindexStart;\n     CBlockIndex* ret = nullptr;\n     {\n-        LOCK2(cs_main, cs_wallet);\n         fAbortRescan = false;\n         fScanningWallet = true;\n \n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n-        double dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n-        double dProgressTip = GuessVerificationProgress(chainParams.TxData(), chainActive.Tip());\n+        CBlockIndex* tip = nullptr;\n+        double dProgressStart;\n+        double dProgressTip;\n+        {\n+            LOCK(cs_main);\n+            tip = chainActive.Tip();\n+            dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\n+            dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n+        }\n         while (pindex && !fAbortRescan)\n         {\n-            if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0)\n-                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((GuessVerificationProgress(chainParams.TxData(), pindex) - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+            if (pindex->nHeight % 100 == 0 && dProgressTip - dProgressStart > 0.0) {\n+                double gvp = 0;\n+                {\n+                    LOCK(cs_main);\n+                    gvp = GuessVerificationProgress(chainParams.TxData(), pindex);\n+                }\n+                ShowProgress(_(\"Rescanning...\"), std::max(1, std::min(99, (int)((gvp - dProgressStart) / (dProgressTip - dProgressStart) * 100))));\n+            }\n             if (GetTime() >= nNow + 60) {\n                 nNow = GetTime();\n+                LOCK(cs_main);\n                 LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n             }\n \n+            bool readRet = false;\n             CBlock block;\n-            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n+            {\n+                LOCK(cs_main);\n+                readRet = ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n+            }\n+            if (readRet) {\n+                LOCK2(cs_main, cs_wallet);\n+                if (pindex && !chainActive.Contains(pindex)) {\n+                    // Abort scan if current block is no longer active, to prevent\n+                    // marking transactions as coming from the wrong block.\n+                    ret = pindex;\n+                    break;\n+                }\n                 for (size_t posInBlock = 0; posInBlock < block.vtx.size(); ++posInBlock) {\n                     AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate);\n                 }\n@@ -1683,7 +1713,15 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             if (pindex == pindexStop) {\n                 break;\n             }\n-            pindex = chainActive.Next(pindex);\n+            {\n+                LOCK(cs_main);\n+                pindex = chainActive.Next(pindex);\n+                if (tip != chainActive.Tip()) {\n+                    tip = chainActive.Tip();\n+                    // in case the tip has changed, update progress max\n+                    dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n+                }\n+            }\n         }\n         if (pindex && fAbortRescan) {\n             LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));"
      }
    ]
  },
  {
    "sha": "dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYmY4NTU2YjRkNmEyNDg0YWQ0YzAzZDBiNGU0MWMxZGIwMTMzOTk3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-08T21:07:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-24T06:23:57Z"
      },
      "message": "Add RAII wallet rescan reserver",
      "tree": {
        "sha": "c955e1bea937c2901267cdbc191bde93db725e22",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c955e1bea937c2901267cdbc191bde93db725e22"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpoJn0ACgkQHrd2uwPH\nki2fIw//V9J9XWWC2bhCNzT0KvrIZEUd/skK1kAteZO71WUjl4POK5fDqlLtqO7A\njNHPNS/wqM+ojkt5JxwV/Di1oMYrCUveSAEDSkCDtzF8YbyIqOgvyssrXuN2WCUE\norulMb2RnpOIF1pRNvUo5YSWKocGhDkWhua1Kig/bIlOfUFYTt4TRF5ef6pWZx5j\nlE9cVYPheJwvg+LATbqbq3eCoAHlxAkRj+si+6udzvRqVUsBoICWaKQENusVtgaK\n1nNcSUunqQzBXLoMdMrS4/8p7izb9B7dciXkyDHM8ktf6g44tYr5+otsUZN5y5FE\nNYJbTy14xg8CuXR1lNiwnTik3tW7J4Od8C1n7fgdzq2DvjBx8m30I/rYafCn+1TN\n76rn2NUCdUumvRgGtUAiN3w9oXGTdaBUv8zLwAmmPWW5UwLZvsROV+5P2/c3HFlY\n0d6BNT5BMQCM33IeiKVy+4NRb0aTVTD2HhjOFAsqEjFqnY6m2LJ95aSsczU0eNMB\nKW0yw5EQI2Ly1OgIytyHJVIIZPqArrwduOuUPTXx82nbNnaapNS3axAGTeUEFEju\n8JJVLuhWdSOaRQEUFUVFX2ntkIhvIv5P6LlNAl1Ur4sa3e+dCDG/7uaYHSQ2dMIk\nYtd82FtMtCwCKE2HDRBp7MP3PQgIFXzlEc1INJRhtWD/SnLx8R8=\n=418/\n-----END PGP SIGNATURE-----",
        "payload": "tree c955e1bea937c2901267cdbc191bde93db725e22\nparent 8d0b610fe8d0916404aa9158c525b80b1c581c0e\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1512767257 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1516775037 -1000\n\nAdd RAII wallet rescan reserver\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8d0b610fe8d0916404aa9158c525b80b1c581c0e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8d0b610fe8d0916404aa9158c525b80b1c581c0e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8d0b610fe8d0916404aa9158c525b80b1c581c0e"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 55,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a0b57ecd22e82e634beba97f2c68c09c5868d061",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
        "patch": "@@ -262,6 +262,11 @@ UniValue importaddress(const JSONRPCRequest& request)\n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n+    WalletRescanReserver reserver(pwallet);\n+    if (fRescan && !reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n     if (!request.params[3].isNull())\n@@ -429,6 +434,11 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n+    WalletRescanReserver reserver(pwallet);\n+    if (fRescan && !reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n     if (!IsHex(request.params[0].get_str()))\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Pubkey must be a hex string\");\n     std::vector<unsigned char> data(ParseHex(request.params[0].get_str()));\n@@ -480,6 +490,11 @@ UniValue importwallet(const JSONRPCRequest& request)\n     if (fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Importing wallets is disabled in pruned mode\");\n \n+    WalletRescanReserver reserver(pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n     int64_t nTimeBegin = 0;\n     bool fGood = true;\n     {\n@@ -1138,6 +1153,11 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n \n+    WalletRescanReserver reserver(pwallet);\n+    if (fRescan && !reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n     int64_t now = 0;\n     bool fRunScan = false;\n     int64_t nLowestTimestamp = 0;"
      },
      {
        "sha": "50642e6b8a0ebb2e5d96ce1ed1d86ac4a3d5eace",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
        "patch": "@@ -3398,7 +3398,8 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n             );\n     }\n \n-    if (pwallet->IsScanning()) {\n+    WalletRescanReserver reserver(pwallet);\n+    if (!reserver.reserve()) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n     }\n "
      },
      {
        "sha": "5d782faa60123d59d10d985cdd7aac8663fe5e2d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
        "patch": "@@ -669,6 +669,9 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     static std::atomic<bool> fFlushScheduled;\n     std::atomic<bool> fAbortRescan;\n     std::atomic<bool> fScanningWallet;\n+    std::mutex mutexScanning;\n+    friend class WalletRescanReserver;\n+\n \n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n@@ -1263,4 +1266,34 @@ CTxDestination GetDestinationForKey(const CPubKey& key, OutputType);\n /** Get all destinations (potentially) supported by the wallet for the given key. */\n std::vector<CTxDestination> GetAllDestinationsForKey(const CPubKey& key);\n \n+/** RAII object to check and reserve a wallet rescan */\n+class WalletRescanReserver\n+{\n+private:\n+    CWalletRef m_wallet;\n+    bool m_could_reserve;\n+public:\n+    explicit WalletRescanReserver(CWalletRef w) : m_wallet(w), m_could_reserve(false) {}\n+\n+    bool reserve()\n+    {\n+        assert(!m_could_reserve);\n+        std::lock_guard<std::mutex> lock(m_wallet->mutexScanning);\n+        if (m_wallet->fScanningWallet) {\n+            return false;\n+        }\n+        m_wallet->fScanningWallet = true;\n+        m_could_reserve = true;\n+        return true;\n+    }\n+\n+    ~WalletRescanReserver()\n+    {\n+        std::lock_guard<std::mutex> lock(m_wallet->mutexScanning);\n+        if (m_could_reserve) {\n+            m_wallet->fScanningWallet = false;\n+        }\n+    }\n+};\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  },
  {
    "sha": "bc356b4268e222ac57d9e9297d2a986bb6e09de8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzM1NmI0MjY4ZTIyMmFjNTdkOWU5Mjk3ZDJhOTg2YmI2ZTA5ZGU4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-12T23:13:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-24T06:24:18Z"
      },
      "message": "Make sure WalletRescanReserver has successfully reserved the rescan",
      "tree": {
        "sha": "994c99623c3b7aa10e367d5d3e02451da2025d38",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/994c99623c3b7aa10e367d5d3e02451da2025d38"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc356b4268e222ac57d9e9297d2a986bb6e09de8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpoJpMACgkQHrd2uwPH\nki3zBQ/+KCo6hXjrQz9FaxDeH8brDJDQNADy1eh6mCRIPY+EvXFJwRZ7dLl0ivVG\nszcmJ8B1gcE3mnb3LKt9VgHsfWT+bWidPzZX331xda6uVLmr2Z5Xkvdikr/XL8/B\n+wX7t1h+K9pudtQmMNko3cI8Dc8hVs03YL37wc+yNhyefUSmnPPwkdAs8CBg1DcW\nGh4VPO91ilCERhsmYkRQo2pXw0AxZmVwzXHiOAQ4QdSxRZ6SjmlhRPoVRAuLHiT4\n9IxCcp7Ui0gbV+jMCouGSSkED5d3e4jadliR2aZ9XBPa1WnAeYstVzcan+ZHgBdb\nztTZWKCpzJzkHvUgVWtRTuN36KWTgETlNWbsU84OKBFbG1ZL2d+wbYNQGe9D+BuM\nAiJ/fuqx5RNnENy3KU4RB8Abi2yjZhtbcPPfGYyH346Wo6wley1f9zKijSoYoKov\nayV6ZgV4YZhaciZf9twccSdinCcaF7x6cVeQ63DJpWJsi+12k65j55Mem1QP31iE\nb1suhQmKQc8O7BCtv8n39cMiOWNtt0jiZ0/EGxla0Bt2ea8aaWrLl3gw1steko4L\nWyULcVJRAJJym5AmKQQ1FlOLTGkGFLn7NyDl3ujWXDxAOQEuX6jUAEcCNsJKpGdP\nyTuMc0vfNrKiq8udAKixRlxV4QUR/75Pjl+Qjwj6JZIN6ivQT5s=\n=msFB\n-----END PGP SIGNATURE-----",
        "payload": "tree 994c99623c3b7aa10e367d5d3e02451da2025d38\nparent dbf8556b4d6a2484ad4c03d0b4e41c1db0133997\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513120438 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1516775058 -1000\n\nMake sure WalletRescanReserver has successfully reserved the rescan\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc356b4268e222ac57d9e9297d2a986bb6e09de8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc356b4268e222ac57d9e9297d2a986bb6e09de8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc356b4268e222ac57d9e9297d2a986bb6e09de8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dbf8556b4d6a2484ad4c03d0b4e41c1db0133997"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 44,
      "deletions": 21
    },
    "files": [
      {
        "sha": "cd49292138aef7d0a8a007e56fc53c0db0128675",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -169,7 +169,9 @@ void TestGUI()\n     }\n     {\n         LOCK(cs_main);\n-        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+        WalletRescanReserver reserver(&wallet);\n+        reserver.reserve();\n+        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver, true);\n     }\n     wallet.SetBroadcastTransactions(true);\n "
      },
      {
        "sha": "936432bacb3f52fbebd88c20920e81fcf928f9df",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -101,6 +101,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         );\n \n \n+    WalletRescanReserver reserver(pwallet);\n     bool fRescan = true;\n     {\n         LOCK2(cs_main, pwallet->cs_wallet);\n@@ -119,6 +120,10 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         if (fRescan && fPruneMode)\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n+        if (fRescan && !reserver.reserve()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+        }\n+\n         CBitcoinSecret vchSecret;\n         bool fGood = vchSecret.SetString(strSecret);\n \n@@ -153,7 +158,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n         }\n     }\n     if (fRescan) {\n-        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n     }\n \n     return NullUniValue;\n@@ -290,7 +295,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n     }\n     if (fRescan)\n     {\n-        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -457,7 +462,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n     }\n     if (fRescan)\n     {\n-        pwallet->RescanFromTime(TIMESTAMP_MIN, true /* update */);\n+        pwallet->RescanFromTime(TIMESTAMP_MIN, reserver, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n     }\n \n@@ -581,7 +586,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n         pwallet->ShowProgress(\"\", 100); // hide progress dialog in GUI\n         pwallet->UpdateTimeFirstKey(nTimeBegin);\n     }\n-    pwallet->RescanFromTime(nTimeBegin, false /* update */);\n+    pwallet->RescanFromTime(nTimeBegin, reserver, false /* update */);\n     pwallet->MarkDirty();\n \n     if (!fGood)\n@@ -1201,7 +1206,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n         }\n     }\n     if (fRescan && fRunScan && requests.size()) {\n-        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, true /* update */);\n+        int64_t scannedTime = pwallet->RescanFromTime(nLowestTimestamp, reserver, true /* update */);\n         pwallet->ReacceptWalletTransactions();\n \n         if (scannedTime > nLowestTimestamp) {"
      },
      {
        "sha": "7188bb40bc7a5d7fabc3deaa58a0ea784cdfe78a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -3441,7 +3441,7 @@ UniValue rescanblockchain(const JSONRPCRequest& request)\n         }\n     }\n \n-    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, true);\n+    CBlockIndex *stopBlock = pwallet->ScanForWalletTransactions(pindexStart, pindexStop, reserver, true);\n     if (!stopBlock) {\n         if (pwallet->IsAbortingRescan()) {\n             throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted.\");"
      },
      {
        "sha": "7e0881afd7406a6cce9b66d4fd4ab74f2edebe88",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -384,7 +384,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr));\n+        WalletRescanReserver reserver(&wallet);\n+        reserver.reserve();\n+        BOOST_CHECK_EQUAL(nullBlock, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 100 * COIN);\n     }\n \n@@ -397,7 +399,9 @@ BOOST_FIXTURE_TEST_CASE(rescan, TestChain100Setup)\n     {\n         CWallet wallet;\n         AddKey(wallet, coinbaseKey);\n-        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr));\n+        WalletRescanReserver reserver(&wallet);\n+        reserver.reserve();\n+        BOOST_CHECK_EQUAL(oldTip, wallet.ScanForWalletTransactions(oldTip, nullptr, reserver));\n         BOOST_CHECK_EQUAL(wallet.GetImmatureBalance(), 50 * COIN);\n     }\n \n@@ -608,7 +612,9 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         bool firstRun;\n         wallet->LoadWallet(firstRun);\n         AddKey(*wallet, coinbaseKey);\n-        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr);\n+        WalletRescanReserver reserver(wallet.get());\n+        reserver.reserve();\n+        wallet->ScanForWalletTransactions(chainActive.Genesis(), nullptr, reserver);\n     }\n \n     ~ListCoinsTestingSetup()"
      },
      {
        "sha": "3bf649f2669ca0907995c2a9a7d7ca25e33f60ab",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -1612,7 +1612,7 @@ void CWalletTx::GetAmounts(std::list<COutputEntry>& listReceived,\n  * @return Earliest timestamp that could be successfully scanned from. Timestamp\n  * returned will be higher than startTime if relevant blocks could not be read.\n  */\n-int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n+int64_t CWallet::RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update)\n {\n     // Find starting block. May be null if nCreateTime is greater than the\n     // highest blockchain timestamp, in which case there is nothing that needs\n@@ -1625,7 +1625,7 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n     }\n \n     if (startBlock) {\n-        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, update);\n+        const CBlockIndex* const failedBlock = ScanForWalletTransactions(startBlock, nullptr, reserver, update);\n         if (failedBlock) {\n             return failedBlock->GetBlockTimeMax() + TIMESTAMP_WINDOW + 1;\n         }\n@@ -1649,11 +1649,12 @@ int64_t CWallet::RescanFromTime(int64_t startTime, bool update)\n  * the main chain after to the addition of any new keys you want to detect\n  * transactions for.\n  */\n-CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate)\n+CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver &reserver, bool fUpdate)\n {\n     int64_t nNow = GetTime();\n     const CChainParams& chainParams = Params();\n \n+    assert(reserver.isReserved());\n     if (pindexStop) {\n         assert(pindexStop->nHeight >= pindexStart->nHeight);\n     }\n@@ -1662,8 +1663,6 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n     CBlockIndex* ret = nullptr;\n     {\n         fAbortRescan = false;\n-        fScanningWallet = true;\n-\n         ShowProgress(_(\"Rescanning...\"), 0); // show rescan progress in GUI as dialog or on splashscreen, if -rescan on startup\n         CBlockIndex* tip = nullptr;\n         double dProgressStart;\n@@ -1727,8 +1726,6 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n             LogPrintf(\"Rescan aborted at block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n         }\n         ShowProgress(_(\"Rescanning...\"), 100); // hide progress dialog in GUI\n-\n-        fScanningWallet = false;\n     }\n     return ret;\n }\n@@ -4039,7 +4036,14 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n         }\n \n         nStart = GetTimeMillis();\n-        walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, true);\n+        {\n+            WalletRescanReserver reserver(walletInstance);\n+            if (!reserver.reserve()) {\n+                InitError(_(\"Failed to rescan the wallet during initialization\"));\n+                return nullptr;\n+            }\n+            walletInstance->ScanForWalletTransactions(pindexRescan, nullptr, reserver, true);\n+        }\n         LogPrintf(\" rescan      %15dms\\n\", GetTimeMillis() - nStart);\n         walletInstance->SetBestChain(chainActive.GetLocator());\n         walletInstance->dbw->IncrementUpdateCounter();"
      },
      {
        "sha": "70ced30e4512c517da9ae9bee3c5f35f7136943f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 9,
        "deletions": 3,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc356b4268e222ac57d9e9297d2a986bb6e09de8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "patch": "@@ -659,6 +659,7 @@ class CAccountingEntry\n };\n \n \n+class WalletRescanReserver; //forward declarations for ScanForWalletTransactions/RescanFromTime\n /** \n  * A CWallet is an extension of a keystore, which also maintains a set of transactions and balances,\n  * and provides the ability to create new transactions.\n@@ -668,7 +669,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n private:\n     static std::atomic<bool> fFlushScheduled;\n     std::atomic<bool> fAbortRescan;\n-    std::atomic<bool> fScanningWallet;\n+    std::atomic<bool> fScanningWallet; //controlled by WalletRescanReserver\n     std::mutex mutexScanning;\n     friend class WalletRescanReserver;\n \n@@ -948,8 +949,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n     bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n-    int64_t RescanFromTime(int64_t startTime, bool update);\n-    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, bool fUpdate = false);\n+    int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n+    CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n@@ -1287,6 +1288,11 @@ class WalletRescanReserver\n         return true;\n     }\n \n+    bool isReserved() const\n+    {\n+        return (m_could_reserve && m_wallet->fScanningWallet);\n+    }\n+\n     ~WalletRescanReserver()\n     {\n         std::lock_guard<std::mutex> lock(m_wallet->mutexScanning);"
      }
    ]
  },
  {
    "sha": "ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjY2Q4ZWY2NWY5M2VkODJhODdjZWU2MzQ2NjBiZWQzYWMxN2Q5ZWI1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-12-13T21:06:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-24T06:24:53Z"
      },
      "message": "Reduce cs_main lock in ReadBlockFromDisk, only read GetBlockPos under the lock",
      "tree": {
        "sha": "41ec340b182e8711b7b47a76e126f4a003396fc1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41ec340b182e8711b7b47a76e126f4a003396fc1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpoJrUACgkQHrd2uwPH\nki0sQw/8D3qQ3vuJhNFCf3Q0EdCCzvoHFzjnC2DldwCUFsN/PuuAPhIPvQTvLr87\nXoUd7sVtC6C0x26Pmlxe8NLnd1BYiTVuscBMdqlGeNN4K4MmtF2AQGnQJwfDxfMC\ntZPviGs0vn94o5L5sm5ocEqvCBRGHjMqq09wFIWZRrOUiYiTi+IE5X1LQSZYJQeq\nS9wo5ieIWa7+iF9ItBQjQd7wal25cbNxHfGe8hsle0uV/+F3imNRs7IeqN+SzLcE\nF9N+x7t07ozXhiTKiflTLnakrMI+EGXJic+EyYXN68jyDTboUEu9102fyuzty1jL\nnvl2NDsSz1IWQagVVwgL6M8gbz6AsLwPW/KFFMKFcWcJbcWaso7KVPm3PUHphqBb\nUJqTL8AnuRCWULEZdSze0EWBg5q6LqVKJIqrpLduMHBDBq25vwpAq87bL38UfGfV\n8hnbyk7Q3MgyGQCyIn7Hx0S6/uxYSkLjmwg9jdKeLvLopGamlzPHxEeD4bSLQQoV\n7o4C47EhbvCvZvh824atKzMD80rbzlXvzkCbi+2YFdn3CfWuSMuKzz4XbOgzytiA\noqGhWeQWe2KGGAcwjPbyD+68D9iF63WM2lpcKgxXIZduClMSnqwrWSy8UY0MWALo\nJg4VYF39otC+A9BBYzV9T7Xu0vWMuUEWr5ZT8/jdmZ+W0tGJYvk=\n=/gfG\n-----END PGP SIGNATURE-----",
        "payload": "tree 41ec340b182e8711b7b47a76e126f4a003396fc1\nparent bc356b4268e222ac57d9e9297d2a986bb6e09de8\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1513199211 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1516775093 -1000\n\nReduce cs_main lock in ReadBlockFromDisk, only read GetBlockPos under the lock\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc356b4268e222ac57d9e9297d2a986bb6e09de8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc356b4268e222ac57d9e9297d2a986bb6e09de8"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 8,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8cee0dfac3cc7a929f65e93ccbc88463311e770e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
        "patch": "@@ -1121,7 +1121,13 @@ bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus:\n \n bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n {\n-    if (!ReadBlockFromDisk(block, pindex->GetBlockPos(), consensusParams))\n+    CDiskBlockPos blockPos;\n+    {\n+        LOCK(cs_main);\n+        blockPos = pindex->GetBlockPos();\n+    }\n+\n+    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n         return false;\n     if (block.GetHash() != pindex->GetBlockHash())\n         return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\","
      },
      {
        "sha": "dd9bc64728a16b2f4ec3cc2ef2d51d1d57650ab7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
        "patch": "@@ -1689,13 +1689,8 @@ CBlockIndex* CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, CBlock\n                 LogPrintf(\"Still rescanning. At block %d. Progress=%f\\n\", pindex->nHeight, GuessVerificationProgress(chainParams.TxData(), pindex));\n             }\n \n-            bool readRet = false;\n             CBlock block;\n-            {\n-                LOCK(cs_main);\n-                readRet = ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n-            }\n-            if (readRet) {\n+            if (ReadBlockFromDisk(block, pindex, Params().GetConsensus())) {\n                 LOCK2(cs_main, cs_wallet);\n                 if (pindex && !chainActive.Contains(pindex)) {\n                     // Abort scan if current block is no longer active, to prevent"
      }
    ]
  },
  {
    "sha": "7f812502b78b76653bbef19169e8a05873ee3b8d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjgxMjUwMmI3OGI3NjY1M2JiZWYxOTE2OWU4YTA1ODczZWUzYjhk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-05T20:43:31Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-01-24T06:24:53Z"
      },
      "message": "Mention that other RPC calls report keys as \"imported\" while txns are still missing",
      "tree": {
        "sha": "1b981cf38d17087cbf496e6b6c99519250552e0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1b981cf38d17087cbf496e6b6c99519250552e0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f812502b78b76653bbef19169e8a05873ee3b8d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlpoJrUACgkQHrd2uwPH\nki2FkBAAkz/bVnKmJQdgu4MgBwxOPfOhuEEgtk4LquCjbyaJaBSWn2/Z8K4xV0cm\nBBrP7QNozEvx4ucas+2EF7hlBOpxOxNLmvv72uRRy0Gx2jqxrpjistxymBc6kUVm\ncPoFVlGoy4jp/ICrbJkuqBHtwu7R+rUUh0MKlDgx0DHSf+VdwdjAf+dZRjpMUu8X\n4Xbgyr6kkPV69n1iNAO/1GEuTV6Pw83QXPq99Gh7hatny1B4ANADEHNlr6oWj0Bh\ngjpnrfmEA6GVHwD+D6RMcSLjzxYXIMgSeMIcnmQhcDT7/3y3b8WneVlXWZBYxYf9\nBvImGXJ1q+g9zCa0k9Z9iQIThKGNbE9LTAMQvwKRFx5JLyWU/TxsgGW2n4E8r2EH\n2U5oCtd4m0lI3LJSW1JeXqx2zpqPkL/WoIZ2kCTelkuD4XRUV5UWrfPTCK2yhfdG\ncs/7GUMjHiaQN7IxyI7EeqpcN9SNLFoJcvGZpp8VcDpNDF/0+n/L3KFR8QrwsYk8\nXQmFEUnHNly0xZZU4bgBgHy7a6XbweSpAqRgQVgsljr6mOxeV7yFCSbxB0CZ5CIi\nMNw3L0Ec2xxM9YNLXCZTcKFVVFDKs3m6vblva3QR1y4feUolu5aDcNzPwM+9fxZT\n45fbuzjWhkTwsL2hLUKtBryAma01lNYqlLzy9We3irXmNEeloek=\n=72/a\n-----END PGP SIGNATURE-----",
        "payload": "tree 1b981cf38d17087cbf496e6b6c99519250552e0d\nparent ccd8ef65f93ed82a87cee634660bed3ac17d9eb5\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1515185011 -1000\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1516775093 -1000\n\nMention that other RPC calls report keys as \"imported\" while txns are still missing\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f812502b78b76653bbef19169e8a05873ee3b8d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f812502b78b76653bbef19169e8a05873ee3b8d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f812502b78b76653bbef19169e8a05873ee3b8d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ccd8ef65f93ed82a87cee634660bed3ac17d9eb5"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "0b021f9fe0ca3733bb3a69dbe97be21239e17aa0",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f812502b78b76653bbef19169e8a05873ee3b8d/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f812502b78b76653bbef19169e8a05873ee3b8d/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=7f812502b78b76653bbef19169e8a05873ee3b8d",
        "patch": "@@ -86,7 +86,8 @@ UniValue importprivkey(const JSONRPCRequest& request)\n             \"1. \\\"privkey\\\"          (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported key exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n             + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n@@ -241,7 +242,8 @@ UniValue importaddress(const JSONRPCRequest& request)\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n-            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported address exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n             \"as change, and not show up in many RPCs.\\n\"\n@@ -416,7 +418,8 @@ UniValue importpubkey(const JSONRPCRequest& request)\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n-            \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported pubkey exists but related transactions are still missing, leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a public key with rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n@@ -1133,6 +1136,8 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  {\\n\"\n             \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n             \"  }\\n\"\n+            \"\\nNote: This call can take minutes to complete if rescan is true, during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exists but related transactions are still missing.\\n\"\n             \"\\nExamples:\\n\" +\n             HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n                                           \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +"
      }
    ]
  }
]