jonasschnelli,2017-09-07T23:40:46Z,Best reviewed with `?w=1` (https://github.com/bitcoin/bitcoin/pull/11281/files?w=1),https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-327957949,327957949,
practicalswift,2017-09-08T07:26:09Z,"@jonasschnelli Which variables are guarded by `cs_main` and `cs_wallet` in these specific cases?\n\nI'll double-check against my lock annotations to make sure they are in sync.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-328023287,328023287,
promag,2017-09-11T13:35:22Z,"Awesome, will review.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-328530818,328530818,
jonasschnelli,2017-09-16T03:53:43Z,Updated and reduced locks after @sipa's mentioning.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-329943121,329943121,
achow101,2017-09-18T15:49:43Z,utACK 1d367effa8e7a19303ae46a6b871084cbaaf5a0a,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-330266408,330266408,
promag,2017-09-19T23:54:05Z,Sorry for the bad reference ☝️ ...,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-330705883,330705883,
jonasschnelli,2017-09-22T03:49:26Z,Fixed @promag's code folding/style issue,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-331343028,331343028,
jonasschnelli,2017-11-15T20:53:58Z,"Reviewers welcome (to make progress with GUI rescan abort #11200), best reviewed with ?w=1",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-344724982,344724982,
laanwj,2017-11-16T11:35:11Z,"~~utACK 726fe69~~. There might be a slight overhead to locking for every block, likely only relevant for the first blocks of the chain which have few transactions. In any case this is preferable to the current situation.\n\n(removed my utACK for now, this does not get reorgs right in case the order in which blocks are scanned matters, which I'm not sure about)",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-344897211,344897211,
promag,2017-11-27T15:12:02Z,"BTW, see question https://github.com/bitcoin/bitcoin/pull/11281#discussion_r139549593.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-347211606,347211606,
promag,2017-11-27T15:33:31Z,This also allows concurrent rescans correct? It will mess up the progress dialog no?,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-347218612,347218612,
laanwj,2017-11-28T08:51:19Z,"> This also allows concurrent rescans correct? It will mess up the progress dialog no?\n\nConcurrent rescans on multiple wallets would be nice, multiple concurrent rescans on one wallet would be dangerous or at least counter-productive (so we might want to track that?).\nProgress dialog issues can be fixed later.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-347454431,347454431,
jonasschnelli,2017-11-29T20:08:43Z,"Rebased the PR.\n\n* Added checks to make sure only one rescan per time and per wallet can be executed (with appropriate error responses)\n\n* Extended the lock reduction to the new `rescanblockchain` call",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-347980858,347980858,
jonasschnelli,2017-11-29T20:12:05Z,"Best reviewed with [w=1](https://github.com/bitcoin/bitcoin/pull/11281/files?w=1).\nEasy way to test multiple parallel rescans by adding a sleep within the inner rescan loop.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-347981907,347981907,
promag,2017-12-05T02:16:58Z,"> > This also allows concurrent rescans correct? It will mess up the progress dialog no?\n>\n> Concurrent rescans on multiple wallets would be nice, multiple concurrent rescans on one wallet would be dangerous or at least counter-productive (so we might want to track that?).\n> Progress dialog issues can be fixed later.\n\nPlease see #11826.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349173234,349173234,
ryanofsky,2017-12-06T18:21:48Z,"Seems like this PR still has some races described above that need to be fixed.\n\nAlso, it is unclear to me what the ""important show-stopper for #11200"" mentioned in the PR description is. The comments in #11200 seems to indicate that there is some existing deadlock that this fixes and #11200 would worsen without this PR. But there's no explanation of how or when the deadlock happens. It's be go",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349729510,349729510,
jonasschnelli,2017-12-06T20:12:26Z,@ryanofsky: #11200 won't currently work because the rescan locks `cs_main` over a longer period. The GUI also tries to lock `cs_main` via graphical updates on the transaction table as well as the balances.... == unresponsiveness (not actually a deadlock) == you won't be able to abort the rescan because the whole GUI is locked.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349760376,349760376,
jonasschnelli,2017-12-07T06:50:06Z,"Added two commits.\n* Addressed the race issue found by @promag and @TheBlueMatt (d7f3836b74b790887793997562216885840df7a2)\n* Update the progress max if the tip has changed (as found by @promag, 9b59847ddca46d30404ca574cba32b6de214844f)",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349879125,349879125,
ryanofsky,2017-12-07T07:35:11Z,"Is this still WIP? I don't see changes or responses for 3 other races: [IsScanning](https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154683955), [GuessVerificationProcess](https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154672170), [ReadBlockFromDisk](https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154675029)",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349886775,349886775,
jonasschnelli,2017-12-07T07:55:14Z,"Added a commit that fixes the remaining missing locks mentioned by @TheBlueMatt, expect the racy `IsScanning()`. Would it make sense to read and set (protected by a internal lock) the scanning flag right after checking (something like `checkAndEventuallySetScanning()`)? Other ideas?",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-349890421,349890421,
TheBlueMatt,2017-12-08T15:43:10Z,"re: race: I certainly appreciate the RPC exception before importing in case of an existing scan. It might be nice to get some RAII-like lock on the ability to scan, ie like your suggestion but you create a class instance which gives you the right to rescan instead of having to make sure you set some boolean to false if you decide you don't want to rescan.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-350294897,350294897,
jonasschnelli,2017-12-08T21:09:25Z,Added an RAII object to preserve wallet rescan races.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-350372374,350372374,
TheBlueMatt,2017-12-09T18:28:35Z,"It appears test_bitcoin.exe hung. Not sure if PR-related or some other issue, but I'm not aware of any issues with such hangs on master atm?",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-350496195,350496195,
jonasschnelli,2017-12-10T06:11:30Z,@TheBlueMatt: where did it hung? Travis seems to be happy?,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-350527625,350527625,
jonasschnelli,2017-12-12T19:26:15Z,Rebased and cleaned up commit history.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-351165171,351165171,
TheBlueMatt,2017-12-12T20:17:43Z,It may be nice to make a WalletRescanReserver a required argument to ScanForWalletTransactions/RescanFromTime to enforce correctness.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-351181137,351181137,
jonasschnelli,2017-12-12T23:15:56Z,Followed @TheBlueMatt advice and made the `WalletRescanReserver` an argument of `ScanForWalletTransactions` and `RescanFromTime` to ensure on code level that the wallet rescan is reserved before scanning.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-351226949,351226949,
TheBlueMatt,2017-12-13T17:05:20Z,"See comment github is hiding at https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156484165. Also, could you squash ""Make sure we rescan only blocks in the main chain"" into the first commit? Otherwise the first commit is ""wrong"", which is annoying in review.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-351456105,351456105,
jonasschnelli,2017-12-13T21:08:55Z,Added a commit ff54709 to allow to call `ReadBlockFromDisk()` without holding `cs_main` (push the lock down for `CDiskBlockPos::GetBlockPos()`).,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-351525517,351525517,
heri99,2017-12-15T22:05:53Z,"Sory for that\n\nOn 16 Dec 2017 5:24 am, ""Matt Corallo"" <notifications@github.com> wrote:\n\n> *@TheBlueMatt* commented on this pull request.\n> ------------------------------\n>\n> In src/wallet/rpcdump.cpp\n> <https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157302011>:\n>\n> >          }\n>      }\n> +    if (fRescan) {\n>\n> I wouldnt think so directly. What may be of larger concern m",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-352123819,352123819,
jonasschnelli,2017-12-19T23:30:43Z,Fixed @promag's nits,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-352918517,352918517,
promag,2017-12-20T00:01:25Z,Squash *Make sure WalletRescanReserver has successfully reserved the rescan*  into *Add RAII wallet rescan reserver*?,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-352923698,352923698,
TheBlueMatt,2017-12-23T05:11:27Z,Needs rebase. Also I believe still needs (at least) doc fixes to address @sipa's comments at https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157300953,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-353707688,353707688,
jonasschnelli,2018-01-05T20:46:00Z,"Rebased and added a commit that adds mentioning of the concern reported by @sipa (https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157300953, other RPC calls may report keys as imported but related transactions are still not there because of the ongoing rescan)",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-355660996,355660996,
TheBlueMatt,2018-01-11T17:37:00Z,Needs rebase and to address @sipa's note. Personally I think just documenting the case is sufficient.,https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-357003325,357003325,
jonasschnelli,2018-01-11T19:29:55Z,"Rebased (non trivial).\nAnother review would help. Thanks",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-357035491,357035491,
Sjors,2018-01-19T16:08:54Z,"Not sure what exactly to test here, but at least I can confirm `bitcoin-cli abortrescan` still works and there's no noticeable difference in QT (I assume that's good).",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-359010967,359010967,
promag,2018-01-24T11:07:31Z,"Forgot to mention, it is still not possible to abort the rescan at initialisation time, I guess the goal is to not change that.",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-360097489,360097489,
laanwj,2018-01-24T11:47:19Z,"> Forgot to mention, it is still not possible to abort the rescan at initialisation time, I guess the goal is to not change that.\n\nI don't think that's a goal here? Let's not extend the scope beyond what is in the OP.\n\nutACK 7f81250",https://github.com/bitcoin/bitcoin/pull/11281#issuecomment-360106438,360106438,
sipa,2017-09-12T00:01:47Z,What needs cs_wallet here?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r138222877,138222877,src/wallet/wallet.cpp
sipa,2017-09-12T00:07:36Z,What needs cs_wallet here?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r138223641,138223641,src/wallet/wallet.cpp
sipa,2017-09-12T00:11:31Z,What needs cs_main here?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r138224114,138224114,src/wallet/wallet.cpp
sipa,2017-09-12T00:11:43Z,What needs cs_wallet here?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r138224151,138224151,src/wallet/wallet.cpp
promag,2017-09-18T21:46:42Z,"Only `chainActive.Tip()` needs the lock? So keep old code and:\n```cpp\nCBlockIndex* tip = nullptr;\n{\n    LOCK(cs_main);\n    tip = chainActive.Tip();\n}\n\ndouble dProgressStart = GuessVerificationProgress(chainParams.TxData(), pindex);\ndouble dProgressTip = GuessVerificationProgress(chainParams.TxData(), tip);\n```",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r139549239,139549239,src/wallet/wallet.cpp
promag,2017-09-18T21:48:30Z,"BTW, this patch allows the tip to be update so `dProgressTip` should be inside the loop?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r139549593,139549593,src/wallet/wallet.cpp
theuni,2017-09-19T22:00:18Z,"What if there's a reorg between iterations?\n\nDoes anything weird happen if we (for ex): begin scanning, receive a new best block with our tx from p2p, then re-scan here?\n\nSeems to me that we should take a copy of ChainActive, traverse, compare to progress to chainActive.Tip(), and repeat until they match. Something like (just a quick sketch, probably broken):\n```c++\nCBlockIndex* pindex",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r139829712,139829712,src/wallet/wallet.cpp
jonasschnelli,2017-09-22T03:44:53Z,"I'm not sure if this is really a problem. During rescans, IMO it won't hurt to scan an orphaned block nor does it hurt if you do not scan up to the tip in case you have connected new blocks during the time of re-scanning. This, because those new blocks must also have been scanned by the wallet logic (outside of `ScanForWalletTransactions`).",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r140407028,140407028,src/wallet/wallet.cpp
laanwj,2017-11-16T11:39:30Z,"If a reorg happens during rescan, we want to continue rescanning using the current chain, not the outdated one.\n\n> This, because those new blocks must also have been scanned by the wallet logic (outside of ScanForWalletTransactions).\n\nIndeed.\n... I think it works out like this. Though @theuni does put a good point.\n",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r151390218,151390218,src/wallet/wallet.cpp
promag,2017-11-27T15:03:26Z,"Maybe break the rescan as soon as possible if the above tip is not in the current chain? Then add here:\n```cpp\nif (!chainActive.Contains(tip)) break;\n```",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r153220818,153220818,src/wallet/wallet.cpp
jonasschnelli,2017-11-28T19:40:48Z,"In case of a reorg, wouldn't `chainActive.Next(pindex);` return a `nullptr` leading to stop the scan, which should be totally fine. During the reorg, the blocks of the new chain must have been scanned by the wallet via ConnectBlock.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r153601338,153601338,src/wallet/wallet.cpp
promag,2017-11-28T19:48:40Z,"Yes that's true when pindex is not in the chain. But if any later block is not in the chain, why keep rescanning?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r153603479,153603479,src/wallet/wallet.cpp
jonasschnelli,2017-11-28T20:07:02Z,"It should be detected during the next `chainActive.Next(pindex);` which, in case we had a fork between the last `chainActive.Next(pindex);` we would only scan max 1 block... also very unlikely IMO.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r153608512,153608512,src/wallet/wallet.cpp
promag,2017-11-29T00:17:23Z,"Suppose the following:\n - `A B C D E F G H I J` - chain to rescan, tip = J\n - `(A) B C D E F G H I J` - scanning block A\n - `A (B) C D E F G H I J` - scanning block B\n - `A (B) C D E F G H K L M` - scanning block B, reorg after H\n\nShould only rescan to H inclusive? Agree it's an edge case.\n\nBTW, if the tip changes `dProgressTip` could be updated?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r153662484,153662484,src/wallet/wallet.cpp
TheBlueMatt,2017-12-04T15:01:54Z,GuessVerificationProcess needs cs_main (probably best to lock cs_main in GuessVerificationProcess).,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154672170,154672170,src/wallet/wallet.cpp
TheBlueMatt,2017-12-04T15:11:32Z,(one line up) ReadBlockFromDisk in CBlockIndex* form requires cs_main.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154675029,154675029,src/wallet/wallet.cpp
TheBlueMatt,2017-12-04T15:32:23Z,"Yea, I think there is a real issue here. I (believe) it could be fixed by doing the AddToWalletIfInvolvingMe inside a cs_main (which is going to be at least mostly required since ReadBlockFromDisk requires cs_main) with a chainActive.Contains() check before doing the AddToWalletIfInvolvingMe. That should put us back to the original state of anything we add to the wallet is on the main chain and, t",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154681446,154681446,src/wallet/wallet.cpp
TheBlueMatt,2017-12-04T15:40:38Z,"This is very race-y. You could check check this, have another thread call rescan, and then end up with two parallell rescans.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r154683955,154683955,src/wallet/rpcdump.cpp
jonasschnelli,2017-12-06T07:22:05Z,"I still don't fully understand the concerns (please help me).\n\n* If there is a reorg, all blocks of the new chain will be scanned by the wallet via ConnectBlock (no need to rescan again, we only need to rescan the stuff that doesn't come in via Connect/Disconnect block).\n* If we scan blocks that are no longer in the main-chain, and we could find a transaction in those blocks that is relevant",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r155161367,155161367,src/wallet/wallet.cpp
TheBlueMatt,2017-12-06T18:50:33Z,"Heh, sorry, I didnt fully specify my concern because I thought the above discussion did, but I dont think the above comments are correct. As you point out, I do not believe there is a race where you simply miss transactions. However, there is a race where you may end up marking a transaction as in the wrong block:\n\nA -> B -> ....\n    -> C -> ...\n\nBoth B and C have the transaction you're ",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r155326447,155326447,src/wallet/wallet.cpp
TheBlueMatt,2017-12-12T20:18:59Z,"This check needs to be inside a LOCK2(cs_main, cs_wallet) in the same block as AddToWalletIfInvolvingMe.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156484165,156484165,src/wallet/wallet.cpp
jonasschnelli,2017-12-12T22:45:12Z,Fixed,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156518016,156518016,src/wallet/wallet.cpp
jonasschnelli,2017-12-13T20:41:29Z,Fixed,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156776358,156776358,src/wallet/wallet.cpp
jonasschnelli,2017-12-13T20:41:39Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156776403,156776403,src/wallet/wallet.cpp
TheBlueMatt,2017-12-13T22:47:32Z,This line is a noop - chainActive.Next() is never going to return something non-nullptr that isn't on the best chain.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156808534,156808534,src/wallet/wallet.cpp
TheBlueMatt,2017-12-13T22:58:12Z,"There is a weird case here that I think should be documented - something in the description of ScanForWalletTransactions should mention that, in order to ensure scan is ""successful"", pindex *must* have been/be on the main chain at some point after the addition of any keys which we want to rescan for.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156810727,156810727,src/wallet/wallet.cpp
TheBlueMatt,2017-12-13T23:00:07Z,I think you meant to put a LOCK(cs_main) at the top of this scope?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156811137,156811137,src/wallet/rpcwallet.cpp
TheBlueMatt,2017-12-13T23:02:00Z,"err, didnt you mean to set tip to chainActive.Tip() first?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156811507,156811507,src/wallet/wallet.cpp
jonasschnelli,2017-12-13T23:20:51Z,"Oops. This is a rebase issue, ... removing this line now.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156814899,156814899,src/wallet/wallet.cpp
jonasschnelli,2017-12-13T23:44:00Z,Argh. Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156818774,156818774,src/wallet/wallet.cpp
jonasschnelli,2017-12-13T23:44:42Z,Oh. Indeed! Added. Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156818904,156818904,src/wallet/rpcwallet.cpp
jonasschnelli,2017-12-13T23:45:33Z,"Yes. That case is a bit wired. We should probably return a custom state object instead a single CBlockIndex in the long run.\nMentioned that behaviour now in the `ScanForWalletTransactions` comment.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156819018,156819018,src/wallet/wallet.cpp
TheBlueMatt,2017-12-14T15:59:08Z,"I dont think that fully captures the requirement here. Its actually rather loose, y ou just need to make sure pindexStop (and pindexStart) are on the main chain *after* to the addition of any new keys you want to detect transactions for. What is returned actually doesnt matter because if pindexStart and pindexStop were on the main chain at some point when all the neccessary keys were in the wallet",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156984022,156984022,src/wallet/wallet.cpp
jonasschnelli,2017-12-15T07:06:40Z,Updated the comment.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157135059,157135059,src/wallet/wallet.cpp
TheBlueMatt,2017-12-15T19:37:10Z,The nStatus check two lines down still needs cs_main.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157283067,157283067,src/wallet/rpcwallet.cpp
sipa,2017-12-15T21:18:32Z,"Releasing cs_wallet here means another RPC could occur in between which observes the key being present, but not the relevant transactions. Is that a concern?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157300953,157300953,src/wallet/rpcdump.cpp
TheBlueMatt,2017-12-15T21:23:07Z,"I wouldnt think so directly. What may be of larger concern may be that you could get a bogus balance due to having found old transactions but not newer ones. Its probably still fine, but we should note it in the help doc for the rescanning functions. Alternatively we could block other wallet RPC calls until rescan finishes.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157302011,157302011,src/wallet/rpcdump.cpp
jonasschnelli,2017-12-15T22:00:23Z,"Possible solutions:\n1.) User must take care: report the rescan status in `getwalletinfo()`\n2.) Block relevant RPC calls during an active rescan...\n\nI think 1) is more flexible but my introduce some pitfalls...",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157308303,157308303,src/wallet/rpcdump.cpp
jonasschnelli,2017-12-15T22:02:27Z,"Right!\nFixed by adding a `cs_main` lock for this block (only occurs for pruned peers).",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157308663,157308663,src/wallet/rpcwallet.cpp
promag,2017-12-17T02:36:50Z,"Nit, `{` in new line.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157356351,157356351,src/wallet/wallet.h
promag,2017-12-17T02:37:06Z,"Nit, missing space before `:`.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157356354,157356354,src/wallet/wallet.h
promag,2017-12-17T02:37:27Z,Make these private?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157356359,157356359,src/wallet/wallet.h
promag,2017-12-17T02:42:46Z,Why the mutex when `fScanningWallet` is `std::atomic`? Could use `std::atomic<bool>::compare_exchange_strong`?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157356413,157356413,src/wallet/wallet.h
jonasschnelli,2017-12-19T23:26:54Z,Yes. Maybe. But lets keep this for now.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157903189,157903189,src/wallet/wallet.h
promag,2017-12-19T23:51:23Z,@sipa that is already possible: `importprivkey rescan=false` followed by `rescanblockchain`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157906537,157906537,src/wallet/rpcdump.cpp
promag,2017-12-19T23:53:04Z,chainActive.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157906752,157906752,src/wallet/wallet.cpp
sipa,2017-12-20T00:03:42Z,"@promag If you sent rescan to false you're taking that risk yourself obviously. My point is that if you do request a rescan, there is a reasonable expectation to not see inconsistent results.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157908101,157908101,src/wallet/rpcdump.cpp
promag,2017-12-20T00:10:06Z,"Yeah I know, there is also reasonable expectation to have the RPC responsive 😄 ",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157908983,157908983,src/wallet/rpcdump.cpp
promag,2017-12-20T00:14:03Z,"The same happens in `importmulti`, where the locks are held only when importing the keys.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r157909476,157909476,src/wallet/rpcdump.cpp
jonasschnelli,2017-12-21T06:47:10Z,Done.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r158206569,158206569,src/wallet/wallet.h
promag,2018-01-09T12:06:31Z,"`return m_could_reserve` is enough? `WalletRescanReserver` is the ""owner.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r160389155,160389155,src/wallet/wallet.h
promag,2018-01-09T12:06:59Z,Add `assert(!m_could_reserve);`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r160389240,160389240,src/wallet/wallet.h
promag,2018-01-09T12:19:32Z,"Remove, since reserver already set `fScanningWallet` to true.\n  ",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r160391530,160391530,src/wallet/wallet.cpp
promag,2018-01-09T12:21:26Z,Should also remove `fScanningWallet = false` at the end?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r160391901,160391901,src/wallet/wallet.cpp
promag,2018-01-09T12:23:10Z,Add a comment saying this is controlled by `WalletRescanReserver`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r160392235,160392235,src/wallet/wallet.h
TheBlueMatt,2018-01-11T21:33:17Z,"This line didn't make it into the new rebase, I believe.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161081512,161081512,src/wallet/rpcdump.cpp
jonasschnelli,2018-01-11T23:30:38Z,Oh. Yes. Thanks Will fix,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161105331,161105331,src/wallet/rpcdump.cpp
jonasschnelli,2018-01-12T06:21:55Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161147840,161147840,src/wallet/rpcdump.cpp
TheBlueMatt,2018-01-14T18:45:29Z,nit: Why'd you move it up in the function instead of keeping its position?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161406332,161406332,src/wallet/rpcdump.cpp
TheBlueMatt,2018-01-14T19:05:29Z,"nit: why scope this? There's no lock to scope, could you not just leave this as-is and only change the chainActive.Tip() call?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161406849,161406849,src/wallet/rpcwallet.cpp
TheBlueMatt,2018-01-14T19:10:44Z,"Not changed in this PR, but it may be nice (here or in a follow-up before we start showing rescan as a progress bar in more places) to not use the tip here and instead use pindexStop. It makes sense to always give progress towards tip if there are (potentially) API clients which are calling with a stop a ways back from our tip.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161406956,161406956,src/wallet/wallet.cpp
TheBlueMatt,2018-01-14T19:13:52Z,"Same goes for here - while this check makes the behavior not change, I'm not sure the current behavior is exactly optimal...we scan until pindexStop, *not* chainActive.Tip().",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161407018,161407018,src/wallet/wallet.cpp
TheBlueMatt,2018-01-14T19:22:34Z,"You should probably add a "", leading to temporarily incorrect/bogus balances and unspent outputs until rescan completes"" to the warning message.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161407220,161407220,src/wallet/rpcdump.cpp
jonasschnelli,2018-01-15T19:46:02Z,Right... fixing.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161602498,161602498,src/wallet/rpcwallet.cpp
jonasschnelli,2018-01-15T19:46:27Z,Lets leave this open for a possible followup PR (out of scope here),https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161602585,161602585,src/wallet/wallet.cpp
jonasschnelli,2018-01-15T19:58:35Z,Fixed by adding @TheBlueMatt's proposed sentence-part.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161604900,161604900,src/wallet/rpcdump.cpp
jonasschnelli,2018-01-15T20:02:06Z,I think it's better for future changes to keep the check here... don't hurt but may protect from a future mistake.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161605450,161605450,src/wallet/wallet.h
jonasschnelli,2018-01-15T20:02:09Z,Added,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161605453,161605453,src/wallet/wallet.h
jonasschnelli,2018-01-15T20:02:56Z,It's not really controlled by `WalletRescanReserver`. This was added before and `ScanForWalletTransactions` sets it to `true`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161605590,161605590,src/wallet/wallet.h
jonasschnelli,2018-01-15T20:07:13Z,"Your right,.. removed the unnecessary scope.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161606282,161606282,src/wallet/rpcwallet.cpp
jonasschnelli,2018-01-15T20:07:58Z,Ah. I see your point. Removed those sets and mentioned that `fScanningWallet` is controlled by `WalletRescanReserver`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r161606416,161606416,src/wallet/wallet.cpp
ryanofsky,2018-01-22T20:37:47Z,"In commit ""Avoid permanent cs_main""\n\nStrange that this line is changing while the line above isn't. Seems impossible for pindexStart or stopBlock to be null, and odd to be adding a check now only for stopBlock.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163061186,163061186,src/wallet/rpcwallet.cpp
ryanofsky,2018-01-22T20:38:31Z,"In commit ""Avoid permanent cs_main""\n\nCould this now assert lock not held, instead of not asserting at all?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163061343,163061343,src/wallet/wallet.cpp
ryanofsky,2018-01-22T20:47:55Z,"In commit ""Avoid permanent cs_main""\n\nI guess this sentence is added in response to: https://github.com/bitcoin/bitcoin/pull/11281#discussion_r156810727, but I don't understand what it is saying. Since the lock is released, how is the caller supposed to ""make sure"" pindexStop is on the main chain when it may not be? Also, I think part of the comment ""after to the addition of any new keys you wa",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163063324,163063324,src/wallet/wallet.cpp
ryanofsky,2018-01-22T20:57:33Z,"In commit ""Avoid permanent cs_main""\n\nSeems like cs_main only needs to be held for GuessVerificationProgress but not ShowProgress? Might be good to reduce lock scope more, or have comment if it can't be reduced.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163065916,163065916,src/wallet/wallet.cpp
ryanofsky,2018-01-22T21:15:56Z,"In commit ""Avoid permanent cs_main""\n\nBecause of the break here, the ""Returns null if scan was successful"" documentation is no longer correct. Would suggest changing so it's still easily possible to distinguish success from failure:\n\n```c++\nif (pindex && !chainActive.Contains(pindex)) {\n    ret = pIndex;\n    break;\n}\n \n```\n\nAlso, the reason for this check is obscure enough (",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163070403,163070403,src/wallet/wallet.cpp
ryanofsky,2018-01-22T21:48:11Z,"In commit ""Make sure WalletRescanReserver has successfully reserved"".\n\nAlternative could be to just `return m_could_reserve` and assert `!m_could_reserve || fScanningWallet`, so if there is a future mistake, it can be detected instead of papered over.\n\nAlso formatting here is inconsistent, opening brace for function goes on new line.\n\n",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163078419,163078419,src/wallet/wallet.h
jonasschnelli,2018-01-24T06:17:48Z,I don't think we should enforce *not* locking cs_main at this point.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163461397,163461397,src/wallet/wallet.cpp
jonasschnelli,2018-01-24T06:25:23Z,Yes. Your right. Fixed (removed the extra nullptr check).,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163462196,163462196,src/wallet/rpcwallet.cpp
jonasschnelli,2018-01-24T06:26:08Z,I keep that comment for now and leave it open for another PR. The comment was directly proposed (word by word) by @TheBlueMatt.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163462299,163462299,src/wallet/wallet.cpp
jonasschnelli,2018-01-24T06:26:18Z,Good pont. Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163462322,163462322,src/wallet/wallet.cpp
jonasschnelli,2018-01-24T06:28:26Z,Nice catch! Thanks. Fixed.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163462541,163462541,src/wallet/wallet.cpp
promag,2018-01-24T09:38:26Z,Lock inside `if`.,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163494846,163494846,src/wallet/wallet.h
promag,2018-01-24T09:46:50Z,Just `return m_could_reserve;`?,https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163496905,163496905,src/wallet/wallet.h
promag,2018-01-24T09:48:59Z,"Since it's guarded by `mutexScanning`, drop `std::atomic`?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163497435,163497435,src/wallet/wallet.h
promag,2018-01-24T10:02:51Z,"Nit, space `WalletRescanReserver& reserver`.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163501235,163501235,src/wallet/wallet.cpp
promag,2018-01-24T10:13:28Z,"Agree with @TheBlueMatt, the *follow the tip thing* could be elsewhere (another PR).\n\n@TheBlueMatt do you suggest to rescan up to pIndexStop even if at some point a block is no longer in the active chain?",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163503788,163503788,src/wallet/wallet.cpp
ryanofsky,2018-01-25T19:01:52Z,"@jonasschnelli, is this lock necessary? It seems like either this should be removed, or else a lock needs to be added below at line 1721 (https://github.com/bitcoin/bitcoin/pull/11281/files#diff-b2bb174788c7409b671c46ccc86034bdR1721) if cs_main is required to call GuessVerificationProgress.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163937257,163937257,src/wallet/wallet.cpp
jonasschnelli,2018-01-25T19:43:39Z,"I think GVP needs cs_main (@TheBlueMatt?), so, yes, your right, L1721 should also have one... working on a fixup.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163947997,163947997,src/wallet/wallet.cpp
ryanofsky,2018-01-25T19:44:54Z,"I think there is still a bug here where scan will return success (`nullptr`) if it gets aborted due to a reorg.\n\nMaybe this line:\n\n```c++\npindex = chainActive.Next(pindex);\n```\n\nshould be changed to something like:\n\n```c++\nif (CBlockIndex* new_index = chainActive.Next(pindex)) {\n    pindex = new_index;\n} else {\n    /* aborting, reorg */\n    ret = pindex;\n    break;",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163948323,163948323,src/wallet/wallet.cpp
ryanofsky,2018-01-25T19:48:51Z,"Great, thanks for addressing this.\n\n> I think GVP needs cs_main\n\nI was curious about this. It would be good for GuessVerificationProgress comment to mention that it needs cs_main, since it isn't really obvious one way or the other.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163949348,163949348,src/wallet/wallet.cpp
ryanofsky,2018-01-25T20:09:22Z,"> should be changed to something like:\n\nI think my suggestion above won't work because it will return an error when pindex points to the the tip. Maybe simplest fix would be to restructure the code a little to just acquire cs_main once after ReadBlockFromDisk instead of acquiring, releasing, then immediately re-acquiring. That way there is would be no chance of reorg between the `chainActive.C",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r163954610,163954610,src/wallet/wallet.cpp
ryanofsky,2018-01-26T15:22:48Z,"> I think there is still a bug here where scan will return success\n\nSorry for the churn, but I no longer think there's a bug here. Opened #12275 to try to clarify the return value.",https://github.com/bitcoin/bitcoin/pull/11281#discussion_r164138244,164138244,src/wallet/wallet.cpp
