[
  {
    "sha": "3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjczY2EzNmVmODQxOTJiNDJkN2U2YWNiZGM4YjVkMmZmYzdhMGNm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:01:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T08:13:54Z"
      },
      "message": "ArgsManager: keep command line and config file arguments separate",
      "tree": {
        "sha": "85092a34b09d3860593ad961620e709e31dcbb59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85092a34b09d3860593ad961620e709e31dcbb59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0a8054e7cd5c76d01e4ac7234e3883d05f6f5fdd"
      }
    ],
    "stats": {
      "total": 195,
      "additions": 138,
      "deletions": 57
    },
    "files": [
      {
        "sha": "f33cda6ff5d329617939725bebab2d43c00eb018",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 31,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
        "patch": "@@ -187,13 +187,17 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n \n struct TestArgsManager : public ArgsManager\n {\n-    std::map<std::string, std::string>& GetMapArgs() { return mapArgs; }\n-    const std::map<std::string, std::vector<std::string> >& GetMapMultiArgs() { return mapMultiArgs; }\n+    std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n+    std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n     const std::unordered_set<std::string>& GetNegatedArgs() { return m_negated_args; }\n     void ReadConfigString(const std::string str_config)\n     {\n-        std::istringstream stream(str_config);\n-        ReadConfigStream(stream);\n+        std::istringstream streamConfig(str_config);\n+        {\n+            LOCK(cs_args);\n+            m_config_args.clear();\n+        }\n+        ReadConfigStream(streamConfig);\n     }\n };\n \n@@ -203,22 +207,26 @@ BOOST_AUTO_TEST_CASE(util_ParseParameters)\n     const char *argv_test[] = {\"-ignored\", \"-a\", \"-b\", \"-ccc=argument\", \"-ccc=multiple\", \"f\", \"-d=e\"};\n \n     testArgs.ParseParameters(0, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n+    BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n     testArgs.ParseParameters(1, (char**)argv_test);\n-    BOOST_CHECK(testArgs.GetMapArgs().empty() && testArgs.GetMapMultiArgs().empty());\n+    BOOST_CHECK(testArgs.GetOverrideArgs().empty() && testArgs.GetConfigArgs().empty());\n \n     testArgs.ParseParameters(7, (char**)argv_test);\n     // expectation: -ignored is ignored (program name argument),\n     // -a, -b and -ccc end up in map, -d ignored because it is after\n     // a non-option argument (non-GNU option parsing)\n-    BOOST_CHECK(testArgs.GetMapArgs().size() == 3 && testArgs.GetMapMultiArgs().size() == 3);\n+    BOOST_CHECK(testArgs.GetOverrideArgs().size() == 3 && testArgs.GetConfigArgs().empty());\n     BOOST_CHECK(testArgs.IsArgSet(\"-a\") && testArgs.IsArgSet(\"-b\") && testArgs.IsArgSet(\"-ccc\")\n                 && !testArgs.IsArgSet(\"f\") && !testArgs.IsArgSet(\"-d\"));\n-    BOOST_CHECK(testArgs.GetMapMultiArgs().count(\"-a\") && testArgs.GetMapMultiArgs().count(\"-b\") && testArgs.GetMapMultiArgs().count(\"-ccc\")\n-                && !testArgs.GetMapMultiArgs().count(\"f\") && !testArgs.GetMapMultiArgs().count(\"-d\"));\n-\n-    BOOST_CHECK(testArgs.GetMapArgs()[\"-a\"] == \"\" && testArgs.GetMapArgs()[\"-ccc\"] == \"multiple\");\n+    BOOST_CHECK(testArgs.GetOverrideArgs().count(\"-a\") && testArgs.GetOverrideArgs().count(\"-b\") && testArgs.GetOverrideArgs().count(\"-ccc\")\n+                && !testArgs.GetOverrideArgs().count(\"f\") && !testArgs.GetOverrideArgs().count(\"-d\"));\n+\n+    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-a\"].size() == 1);\n+    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-a\"].front() == \"\");\n+    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].size() == 2);\n+    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].front() == \"argument\");\n+    BOOST_CHECK(testArgs.GetOverrideArgs()[\"-ccc\"].back() == \"multiple\");\n     BOOST_CHECK(testArgs.GetArgs(\"-ccc\").size() == 2);\n }\n \n@@ -234,8 +242,8 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n         BOOST_CHECK(testArgs.IsArgSet({'-', opt}) || !opt);\n \n     // Nothing else should be in the map\n-    BOOST_CHECK(testArgs.GetMapArgs().size() == 6 &&\n-                testArgs.GetMapMultiArgs().size() == 6);\n+    BOOST_CHECK(testArgs.GetOverrideArgs().size() == 6 &&\n+                testArgs.GetConfigArgs().empty());\n \n     // The -no prefix should get stripped on the way in.\n     BOOST_CHECK(!testArgs.IsArgSet(\"-nob\"));\n@@ -326,17 +334,17 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n \n-    BOOST_CHECK(test_args.GetMapArgs().size() == 8);\n-    BOOST_CHECK(test_args.GetMapMultiArgs().size() == 8);\n-\n-    BOOST_CHECK(test_args.GetMapArgs().count(\"-a\")\n-                && test_args.GetMapArgs().count(\"-b\")\n-                && test_args.GetMapArgs().count(\"-ccc\")\n-                && test_args.GetMapArgs().count(\"-d\")\n-                && test_args.GetMapArgs().count(\"-fff\")\n-                && test_args.GetMapArgs().count(\"-ggg\")\n-                && test_args.GetMapArgs().count(\"-h\")\n-                && test_args.GetMapArgs().count(\"-i\")\n+    BOOST_CHECK(test_args.GetOverrideArgs().empty());\n+    BOOST_CHECK(test_args.GetConfigArgs().size() == 8);\n+\n+    BOOST_CHECK(test_args.GetConfigArgs().count(\"-a\")\n+                && test_args.GetConfigArgs().count(\"-b\")\n+                && test_args.GetConfigArgs().count(\"-ccc\")\n+                && test_args.GetConfigArgs().count(\"-d\")\n+                && test_args.GetConfigArgs().count(\"-fff\")\n+                && test_args.GetConfigArgs().count(\"-ggg\")\n+                && test_args.GetConfigArgs().count(\"-h\")\n+                && test_args.GetConfigArgs().count(\"-i\")\n                );\n \n     BOOST_CHECK(test_args.IsArgSet(\"-a\")\n@@ -411,16 +419,24 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n BOOST_AUTO_TEST_CASE(util_GetArg)\n {\n     TestArgsManager testArgs;\n-    testArgs.GetMapArgs().clear();\n-    testArgs.GetMapArgs()[\"strtest1\"] = \"string...\";\n+    testArgs.GetOverrideArgs().clear();\n+    testArgs.GetOverrideArgs()[\"strtest1\"] = {\"string...\"};\n     // strtest2 undefined on purpose\n-    testArgs.GetMapArgs()[\"inttest1\"] = \"12345\";\n-    testArgs.GetMapArgs()[\"inttest2\"] = \"81985529216486895\";\n+    testArgs.GetOverrideArgs()[\"inttest1\"] = {\"12345\"};\n+    testArgs.GetOverrideArgs()[\"inttest2\"] = {\"81985529216486895\"};\n     // inttest3 undefined on purpose\n-    testArgs.GetMapArgs()[\"booltest1\"] = \"\";\n+    testArgs.GetOverrideArgs()[\"booltest1\"] = {\"\"};\n     // booltest2 undefined on purpose\n-    testArgs.GetMapArgs()[\"booltest3\"] = \"0\";\n-    testArgs.GetMapArgs()[\"booltest4\"] = \"1\";\n+    testArgs.GetOverrideArgs()[\"booltest3\"] = {\"0\"};\n+    testArgs.GetOverrideArgs()[\"booltest4\"] = {\"1\"};\n+\n+    // priorities\n+    testArgs.GetOverrideArgs()[\"pritest1\"] = {\"a\", \"b\"};\n+    testArgs.GetConfigArgs()[\"pritest2\"] = {\"a\", \"b\"};\n+    testArgs.GetOverrideArgs()[\"pritest3\"] = {\"a\"};\n+    testArgs.GetConfigArgs()[\"pritest3\"] = {\"b\"};\n+    testArgs.GetOverrideArgs()[\"pritest4\"] = {\"a\",\"b\"};\n+    testArgs.GetConfigArgs()[\"pritest4\"] = {\"c\",\"d\"};\n \n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest1\", \"default\"), \"string...\");\n     BOOST_CHECK_EQUAL(testArgs.GetArg(\"strtest2\", \"default\"), \"default\");\n@@ -431,6 +447,11 @@ BOOST_AUTO_TEST_CASE(util_GetArg)\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest2\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest3\", false), false);\n     BOOST_CHECK_EQUAL(testArgs.GetBoolArg(\"booltest4\", false), true);\n+\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest1\", \"default\"), \"b\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest2\", \"default\"), \"a\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest3\", \"default\"), \"a\");\n+    BOOST_CHECK_EQUAL(testArgs.GetArg(\"pritest4\", \"default\"), \"b\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetChainName)"
      },
      {
        "sha": "f8366fe694f703ed67c1ba2a791a9280aff1132d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 82,
        "deletions": 23,
        "changes": 105,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
        "patch": "@@ -455,6 +455,67 @@ static bool InterpretBool(const std::string& strValue)\n     return (atoi(strValue) != 0);\n }\n \n+/** Internal helper functions for ArgsManager */\n+class ArgsManagerHelper {\n+public:\n+    typedef std::map<std::string, std::vector<std::string>> MapArgs;\n+\n+    /** Find arguments in a map and add them to a vector */\n+    static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n+    {\n+        auto it = map_args.find(arg);\n+        if (it != map_args.end()) {\n+            res.insert(res.end(), it->second.begin(), it->second.end());\n+        }\n+    }\n+\n+    /** Return true/false if an argument is set in a map, and also\n+     *  return the first (or last) of the possibly multiple values it has\n+     */\n+    static inline std::pair<bool,std::string> GetArgHelper(const MapArgs& map_args, const std::string& arg, bool getLast = false)\n+    {\n+        auto it = map_args.find(arg);\n+\n+        if (it == map_args.end() || it->second.empty()) {\n+            return std::make_pair(false, std::string());\n+        }\n+\n+        if (getLast) {\n+            return std::make_pair(true, it->second.back());\n+        } else {\n+            return std::make_pair(true, it->second.front());\n+        }\n+    }\n+\n+    /* Get the string value of an argument, returning a pair of a boolean\n+     * indicating the argument was found, and the value for the argument\n+     * if it was found (or the empty string if not found).\n+     */\n+    static inline std::pair<bool,std::string> GetArg(const ArgsManager &am, const std::string& arg)\n+    {\n+        LOCK(am.cs_args);\n+        std::pair<bool,std::string> found_result(false, std::string());\n+\n+        // We pass \"true\" to GetArgHelper in order to return the last\n+        // argument value seen from the command line (so \"bitcoind -foo=bar\n+        // -foo=baz\" gives GetArg(am,\"foo\")=={true,\"baz\"}\n+        found_result = GetArgHelper(am.m_override_args, arg, true);\n+        if (found_result.first) {\n+            return found_result;\n+        }\n+\n+        // But in contrast we return the first argument seen in a config file,\n+        // so \"foo=bar \\n foo=baz\" in the config file gives\n+        // GetArg(am,\"foo\")={true,\"bar\"}\n+        found_result = GetArgHelper(am.m_config_args, arg);\n+        if (found_result.first) {\n+            return found_result;\n+        }\n+\n+        return found_result;\n+    }\n+};\n+\n /**\n  * Interpret -nofoo as if the user supplied -foo=0.\n  *\n@@ -485,8 +546,7 @@ void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n-    mapArgs.clear();\n-    mapMultiArgs.clear();\n+    m_override_args.clear();\n     m_negated_args.clear();\n \n     for (int i = 1; i < argc; i++) {\n@@ -513,23 +573,23 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         // Transform -nofoo to -foo=0\n         InterpretNegatedOption(key, val);\n \n-        mapArgs[key] = val;\n-        mapMultiArgs[key].push_back(val);\n+        m_override_args[key].push_back(val);\n     }\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n+    std::vector<std::string> result = {};\n+\n     LOCK(cs_args);\n-    auto it = mapMultiArgs.find(strArg);\n-    if (it != mapMultiArgs.end()) return it->second;\n-    return {};\n+    ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n+    ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+    return result;\n }\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n-    LOCK(cs_args);\n-    return mapArgs.count(strArg);\n+    return ArgsManagerHelper::GetArg(*this, strArg).first;\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n@@ -540,25 +600,22 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n-    LOCK(cs_args);\n-    auto it = mapArgs.find(strArg);\n-    if (it != mapArgs.end()) return it->second;\n+    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n+    if (found_res.first) return found_res.second;\n     return strDefault;\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n-    LOCK(cs_args);\n-    auto it = mapArgs.find(strArg);\n-    if (it != mapArgs.end()) return atoi64(it->second);\n+    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n+    if (found_res.first) return atoi64(found_res.second);\n     return nDefault;\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n-    LOCK(cs_args);\n-    auto it = mapArgs.find(strArg);\n-    if (it != mapArgs.end()) return InterpretBool(it->second);\n+    std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n+    if (found_res.first) return InterpretBool(found_res.second);\n     return fDefault;\n }\n \n@@ -581,8 +638,7 @@ bool ArgsManager::SoftSetBoolArg(const std::string& strArg, bool fValue)\n void ArgsManager::ForceSetArg(const std::string& strArg, const std::string& strValue)\n {\n     LOCK(cs_args);\n-    mapArgs[strArg] = strValue;\n-    mapMultiArgs[strArg] = {strValue};\n+    m_override_args[strArg] = {strValue};\n }\n \n bool HelpRequested(const ArgsManager& args)\n@@ -749,14 +805,17 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n         std::string strKey = std::string(\"-\") + it->string_key;\n         std::string strValue = it->value[0];\n         InterpretNegatedOption(strKey, strValue);\n-        if (mapArgs.count(strKey) == 0)\n-            mapArgs[strKey] = strValue;\n-        mapMultiArgs[strKey].push_back(strValue);\n+        m_config_args[strKey].push_back(strValue);\n     }\n }\n \n void ArgsManager::ReadConfigFile(const std::string& confPath)\n {\n+    {\n+        LOCK(cs_args);\n+        m_config_args.clear();\n+    }\n+\n     fs::ifstream stream(GetConfigFile(confPath));\n \n     // ok to not have a config file"
      },
      {
        "sha": "01ff5992fba30d20866f6c505874e7aa1c358f20",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
        "patch": "@@ -223,11 +223,12 @@ inline bool IsSwitchChar(char c)\n class ArgsManager\n {\n protected:\n+    friend class ArgsManagerHelper;\n+\n     mutable CCriticalSection cs_args;\n-    std::map<std::string, std::string> mapArgs;\n-    std::map<std::string, std::vector<std::string>> mapMultiArgs;\n+    std::map<std::string, std::vector<std::string>> m_override_args;\n+    std::map<std::string, std::vector<std::string>> m_config_args;\n     std::unordered_set<std::string> m_negated_args;\n-\n     void ReadConfigStream(std::istream& stream);\n \n public:"
      }
    ]
  },
  {
    "sha": "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDM0ZmNjNzEzOGYwZmZjODMxZjBmODYwMWM1MGNjN2Y0OTRjMTk3",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:02:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "ArgsManager: drop m_negated_args\n\nWhen a -nofoo option is seen, instead of adding it to a separate\nset of negated args, set the arg as being an empty vector of strings.\n\nThis changes the behaviour in some ways:\n - -nofoo=0 still sets foo=1 but no longer treats it as a negated arg\n - -nofoo=1 -foo=2 has GetArgs() return [2] rather than [2,0]\n - \"foo=2 \\n -nofoo=1\" in a config file no longer returns [2,0], just [0]\n - GetArgs returns an empty vector for negated args",
      "tree": {
        "sha": "2d164195b5bfb5128be26ee4b8e18ef5acfe3274",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2d164195b5bfb5128be26ee4b8e18ef5acfe3274"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3673ca36ef84192b42d7e6acbdc8b5d2ffc7a0cf"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 64,
      "deletions": 54
    },
    "files": [
      {
        "sha": "f04f6cf1710a0bcbfffecadb863bd08bb8e5457d",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 29,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
        "patch": "@@ -189,7 +189,6 @@ struct TestArgsManager : public ArgsManager\n {\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n-    const std::unordered_set<std::string>& GetNegatedArgs() { return m_negated_args; }\n     void ReadConfigString(const std::string str_config)\n     {\n         std::istringstream streamConfig(str_config);\n@@ -250,7 +249,6 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArg)\n \n     // The -b option is flagged as negated, and nothing else is\n     BOOST_CHECK(testArgs.IsArgNegated(\"-b\"));\n-    BOOST_CHECK(testArgs.GetNegatedArgs().size() == 1);\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-a\"));\n \n     // Check expected values.\n@@ -275,8 +273,8 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n     BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"\");\n \n-    // A double negative is a positive.\n-    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    // A double negative is a positive, and not marked as negated.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n \n     // Config test\n@@ -285,12 +283,12 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     testArgs.ReadConfigString(conf_test);\n \n     // This was passed twice, second one overrides the negative setting,\n-    // but not the value.\n+    // and the value.\n     BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n-    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n+    BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"1\");\n \n-    // A double negative is a positive.\n-    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    // A double negative is a positive, and does not count as negated.\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"1\");\n \n     // Combined test\n@@ -300,18 +298,15 @@ BOOST_AUTO_TEST_CASE(util_GetBoolArgEdgeCases)\n     testArgs.ReadConfigString(combo_test_conf);\n \n     // Command line overrides, but doesn't erase old setting\n-    BOOST_CHECK(!testArgs.IsArgNegated(\"-foo\"));\n+    BOOST_CHECK(testArgs.IsArgNegated(\"-foo\"));\n     BOOST_CHECK(testArgs.GetArg(\"-foo\", \"xxx\") == \"0\");\n-    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 2\n-                && testArgs.GetArgs(\"-foo\").front() == \"0\"\n-                && testArgs.GetArgs(\"-foo\").back() == \"1\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-foo\").size() == 0);\n \n     // Command line overrides, but doesn't erase old setting\n-    BOOST_CHECK(testArgs.IsArgNegated(\"-bar\"));\n+    BOOST_CHECK(!testArgs.IsArgNegated(\"-bar\"));\n     BOOST_CHECK(testArgs.GetArg(\"-bar\", \"xxx\") == \"\");\n-    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 2\n-                && testArgs.GetArgs(\"-bar\").front() == \"\"\n-                && testArgs.GetArgs(\"-bar\").back() == \"0\");\n+    BOOST_CHECK(testArgs.GetArgs(\"-bar\").size() == 1\n+                && testArgs.GetArgs(\"-bar\").front() == \"\");\n }\n \n BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n@@ -364,8 +359,8 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n                 && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n                 && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-h\", \"xxx\") == \"1\" // 1st value takes precedence\n-                && test_args.GetArg(\"-i\", \"xxx\") == \"0\" // 1st value takes precedence\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-i\", \"xxx\") == \"1\"\n                 && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n                );\n \n@@ -376,8 +371,8 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                      && !test_args.GetBoolArg(\"-d\", def)\n                      && !test_args.GetBoolArg(\"-fff\", def)\n                      && test_args.GetBoolArg(\"-ggg\", def)\n-                     && test_args.GetBoolArg(\"-h\", def)\n-                     && !test_args.GetBoolArg(\"-i\", def)\n+                     && !test_args.GetBoolArg(\"-h\", def)\n+                     && test_args.GetBoolArg(\"-i\", def)\n                      && test_args.GetBoolArg(\"-zzz\", def) == def\n                    );\n     }\n@@ -389,19 +384,15 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2\n                 && test_args.GetArgs(\"-ccc\").front() == \"argument\"\n                 && test_args.GetArgs(\"-ccc\").back() == \"multiple\");\n-    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 1\n-                && test_args.GetArgs(\"-fff\").front() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-fff\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-nofff\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-ggg\").size() == 1\n                 && test_args.GetArgs(\"-ggg\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-noggg\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 2\n-                && test_args.GetArgs(\"-h\").front() == \"1\"\n-                && test_args.GetArgs(\"-h\").back() == \"0\");\n+    BOOST_CHECK(test_args.GetArgs(\"-h\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-noh\").size() == 0);\n-    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 2\n-                && test_args.GetArgs(\"-i\").front() == \"0\"\n-                && test_args.GetArgs(\"-i\").back() == \"1\");\n+    BOOST_CHECK(test_args.GetArgs(\"-i\").size() == 1\n+                && test_args.GetArgs(\"-i\").front() == \"1\");\n     BOOST_CHECK(test_args.GetArgs(\"-noi\").size() == 0);\n     BOOST_CHECK(test_args.GetArgs(\"-zzz\").size() == 0);\n \n@@ -410,7 +401,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(!test_args.IsArgNegated(\"-ccc\"));\n     BOOST_CHECK(!test_args.IsArgNegated(\"-d\"));\n     BOOST_CHECK(test_args.IsArgNegated(\"-fff\"));\n-    BOOST_CHECK(test_args.IsArgNegated(\"-ggg\")); // IsArgNegated==true when noggg=0\n+    BOOST_CHECK(!test_args.IsArgNegated(\"-ggg\"));\n     BOOST_CHECK(test_args.IsArgNegated(\"-h\")); // last setting takes precedence\n     BOOST_CHECK(!test_args.IsArgNegated(\"-i\")); // last setting takes precedence\n     BOOST_CHECK(!test_args.IsArgNegated(\"-zzz\"));"
      },
      {
        "sha": "3e69574022b8e29b32ea23e58867591404a99d4c",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 44,
        "deletions": 19,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
        "patch": "@@ -519,35 +519,44 @@ class ArgsManagerHelper {\n /**\n  * Interpret -nofoo as if the user supplied -foo=0.\n  *\n- * This method also tracks when the -no form was supplied, and treats \"-foo\" as\n- * a negated option when this happens. This can be later checked using the\n+ * This method also tracks when the -no form was supplied, and if so,\n+ * checks whether there was a double-negative (-nofoo=0 -> -foo=1).\n+ *\n+ * If there was not a double negative, it removes the \"no\" from the key,\n+ * and returns true, indicating the caller should clear the args vector\n+ * to indicate a negated option.\n+ *\n+ * If there was a double negative, it removes \"no\" from the key, sets the\n+ * value to \"1\" and returns false.\n+ *\n+ * If there was no \"no\", it leaves key and value untouched and returns\n+ * false.\n+ *\n+ * Where an option was negated can be later checked using the\n  * IsArgNegated() method. One use case for this is to have a way to disable\n  * options that are not normally boolean (e.g. using -nodebuglogfile to request\n  * that debug log output is not sent to any file at all).\n  */\n-void ArgsManager::InterpretNegatedOption(std::string& key, std::string& val)\n+static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n     if (key.substr(0, 3) == \"-no\") {\n         bool bool_val = InterpretBool(val);\n+        key.erase(1, 2);\n         if (!bool_val ) {\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n+            val = \"1\";\n+        } else {\n+            return true;\n         }\n-        key.erase(1, 2);\n-        m_negated_args.insert(key);\n-        val = bool_val ? \"0\" : \"1\";\n-    } else {\n-        // In an invocation like \"bitcoind -nofoo -foo\" we want to unmark -foo\n-        // as negated when we see the second option.\n-        m_negated_args.erase(key);\n     }\n+    return false;\n }\n \n void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n     m_override_args.clear();\n-    m_negated_args.clear();\n \n     for (int i = 1; i < argc; i++) {\n         std::string key(argv[i]);\n@@ -570,16 +579,19 @@ void ArgsManager::ParseParameters(int argc, const char* const argv[])\n         if (key.length() > 1 && key[1] == '-')\n             key.erase(0, 1);\n \n-        // Transform -nofoo to -foo=0\n-        InterpretNegatedOption(key, val);\n-\n-        m_override_args[key].push_back(val);\n+        // Check for -nofoo\n+        if (InterpretNegatedOption(key, val)) {\n+            m_override_args[key].clear();\n+        } else {\n+            m_override_args[key].push_back(val);\n+        }\n     }\n }\n \n std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n {\n     std::vector<std::string> result = {};\n+    if (IsArgNegated(strArg)) return result; // special case\n \n     LOCK(cs_args);\n     ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n@@ -589,31 +601,42 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n \n bool ArgsManager::IsArgSet(const std::string& strArg) const\n {\n+    if (IsArgNegated(strArg)) return true; // special case\n     return ArgsManagerHelper::GetArg(*this, strArg).first;\n }\n \n bool ArgsManager::IsArgNegated(const std::string& strArg) const\n {\n     LOCK(cs_args);\n-    return m_negated_args.find(strArg) != m_negated_args.end();\n+\n+    const auto& ov = m_override_args.find(strArg);\n+    if (ov != m_override_args.end()) return ov->second.empty();\n+\n+    const auto& cf = m_config_args.find(strArg);\n+    if (cf != m_config_args.end()) return cf->second.empty();\n+\n+    return false;\n }\n \n std::string ArgsManager::GetArg(const std::string& strArg, const std::string& strDefault) const\n {\n+    if (IsArgNegated(strArg)) return \"0\";\n     std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n     if (found_res.first) return found_res.second;\n     return strDefault;\n }\n \n int64_t ArgsManager::GetArg(const std::string& strArg, int64_t nDefault) const\n {\n+    if (IsArgNegated(strArg)) return 0;\n     std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n     if (found_res.first) return atoi64(found_res.second);\n     return nDefault;\n }\n \n bool ArgsManager::GetBoolArg(const std::string& strArg, bool fDefault) const\n {\n+    if (IsArgNegated(strArg)) return false;\n     std::pair<bool,std::string> found_res = ArgsManagerHelper::GetArg(*this, strArg);\n     if (found_res.first) return InterpretBool(found_res.second);\n     return fDefault;\n@@ -801,11 +824,13 @@ void ArgsManager::ReadConfigStream(std::istream& stream)\n \n     for (boost::program_options::detail::config_file_iterator it(stream, setOptions), end; it != end; ++it)\n     {\n-        // Don't overwrite existing settings so command line settings override bitcoin.conf\n         std::string strKey = std::string(\"-\") + it->string_key;\n         std::string strValue = it->value[0];\n-        InterpretNegatedOption(strKey, strValue);\n-        m_config_args[strKey].push_back(strValue);\n+        if (InterpretNegatedOption(strKey, strValue)) {\n+            m_config_args[strKey].clear();\n+        } else {\n+            m_config_args[strKey].push_back(strValue);\n+        }\n     }\n }\n "
      },
      {
        "sha": "6b80afc58f328e1498ccbee8af549783dd2b9a91",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d34fcc7138f0ffc831f0f8601c50cc7f494c197/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
        "patch": "@@ -228,7 +228,6 @@ class ArgsManager\n     mutable CCriticalSection cs_args;\n     std::map<std::string, std::vector<std::string>> m_override_args;\n     std::map<std::string, std::vector<std::string>> m_config_args;\n-    std::unordered_set<std::string> m_negated_args;\n     void ReadConfigStream(std::istream& stream);\n \n public:\n@@ -314,11 +313,6 @@ class ArgsManager\n      * @return CBaseChainParams::MAIN by default; raises runtime error if an invalid combination is given.\n      */\n     std::string GetChainName() const;\n-\n-private:\n-\n-    // Munge -nofoo into -foo=0 and track the value as negated.\n-    void InterpretNegatedOption(std::string &key, std::string &val);\n };\n \n extern ArgsManager gArgs;"
      }
    ]
  },
  {
    "sha": "95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWViNjZkNTg0MmU1Y2NkZWI3NDgxYjllZTkyYWM0YWZhY2U2YjBm",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:03:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "ArgsManager: support config file sections",
      "tree": {
        "sha": "25e37463abd88f57e9ce9767bf49f4f5e1b51955",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25e37463abd88f57e9ce9767bf49f4f5e1b51955"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d34fcc7138f0ffc831f0f8601c50cc7f494c197",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d34fcc7138f0ffc831f0f8601c50cc7f494c197"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 44,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3ef9c2cfe54302f5a3c8a120b2b8feba772b7855",
        "filename": "src/chainparamsbase.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/chainparamsbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/chainparamsbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.cpp?ref=95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
        "patch": "@@ -47,4 +47,5 @@ std::unique_ptr<CBaseChainParams> CreateBaseChainParams(const std::string& chain\n void SelectBaseParams(const std::string& chain)\n {\n     globalChainBaseParams = CreateBaseChainParams(chain);\n+    gArgs.SelectConfigNetwork(chain);\n }"
      },
      {
        "sha": "85c3d221afa94b35de2620bb50a2141c3c73e90f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
        "patch": "@@ -460,6 +460,13 @@ class ArgsManagerHelper {\n public:\n     typedef std::map<std::string, std::vector<std::string>> MapArgs;\n \n+    /** Convert regular argument into the network-specific setting */\n+    static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n+    {\n+        assert(arg.length() > 1 && arg[0] == '-');\n+        return \"-\" + am.m_network + \".\" + arg.substr(1);\n+    }\n+\n     /** Find arguments in a map and add them to a vector */\n     static inline void AddArgs(std::vector<std::string>& res, const MapArgs& map_args, const std::string& arg)\n     {\n@@ -507,6 +514,13 @@ class ArgsManagerHelper {\n         // But in contrast we return the first argument seen in a config file,\n         // so \"foo=bar \\n foo=baz\" in the config file gives\n         // GetArg(am,\"foo\")={true,\"bar\"}\n+        if (!am.m_network.empty()) {\n+            found_result = GetArgHelper(am.m_config_args, NetworkArg(am, arg));\n+            if (found_result.first) {\n+                return found_result;\n+            }\n+        }\n+\n         found_result = GetArgHelper(am.m_config_args, arg);\n         if (found_result.first) {\n             return found_result;\n@@ -539,9 +553,17 @@ class ArgsManagerHelper {\n  */\n static bool InterpretNegatedOption(std::string& key, std::string& val)\n {\n-    if (key.substr(0, 3) == \"-no\") {\n+    assert(key[0] == '-');\n+\n+    size_t option_index = key.find('.');\n+    if (option_index == std::string::npos) {\n+        option_index = 1;\n+    } else {\n+        ++option_index;\n+    }\n+    if (key.substr(option_index, 2) == \"no\") {\n         bool bool_val = InterpretBool(val);\n-        key.erase(1, 2);\n+        key.erase(option_index, 2);\n         if (!bool_val ) {\n             // Double negatives like -nofoo=0 are supported (but discouraged)\n             LogPrintf(\"Warning: parsed potentially confusing double-negative %s=%s\\n\", key, val);\n@@ -553,6 +575,11 @@ static bool InterpretNegatedOption(std::string& key, std::string& val)\n     return false;\n }\n \n+void ArgsManager::SelectConfigNetwork(const std::string& network)\n+{\n+    m_network = network;\n+}\n+\n void ArgsManager::ParseParameters(int argc, const char* const argv[])\n {\n     LOCK(cs_args);\n@@ -595,6 +622,9 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n \n     LOCK(cs_args);\n     ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n+    if (!m_network.empty()) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n+    }\n     ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n     return result;\n }\n@@ -612,6 +642,11 @@ bool ArgsManager::IsArgNegated(const std::string& strArg) const\n     const auto& ov = m_override_args.find(strArg);\n     if (ov != m_override_args.end()) return ov->second.empty();\n \n+    if (!m_network.empty()) {\n+        const auto& cfs = m_config_args.find(ArgsManagerHelper::NetworkArg(*this, strArg));\n+        if (cfs != m_config_args.end()) return cfs->second.empty();\n+    }\n+\n     const auto& cf = m_config_args.find(strArg);\n     if (cf != m_config_args.end()) return cf->second.empty();\n "
      },
      {
        "sha": "ca6523ab14f1e2632e56b14b906d68e8f1761033",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
        "patch": "@@ -228,9 +228,15 @@ class ArgsManager\n     mutable CCriticalSection cs_args;\n     std::map<std::string, std::vector<std::string>> m_override_args;\n     std::map<std::string, std::vector<std::string>> m_config_args;\n+    std::string m_network;\n     void ReadConfigStream(std::istream& stream);\n \n public:\n+    /**\n+     * Select the network in use\n+     */\n+    void SelectConfigNetwork(const std::string& network);\n+\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n "
      }
    ]
  },
  {
    "sha": "30f94074c83f7c544a88251b7308bda8b9e0fdda",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMGY5NDA3NGM4M2Y3YzU0NGE4ODI1MWI3MzA4YmRhOGI5ZTBmZGRh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:04:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "[tests] Unit tests for config file sections",
      "tree": {
        "sha": "c95342522c47ef4944db6a91b99b73026f4d0e23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c95342522c47ef4944db6a91b99b73026f4d0e23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/30f94074c83f7c544a88251b7308bda8b9e0fdda",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30f94074c83f7c544a88251b7308bda8b9e0fdda",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/30f94074c83f7c544a88251b7308bda8b9e0fdda",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30f94074c83f7c544a88251b7308bda8b9e0fdda/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/95eb66d5842e5ccdeb7481b9ee92ac4aface6b0f"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 60,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1eb0d654f4f725dd8aee884e56c4d674890b6e2e",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 60,
        "deletions": 2,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/30f94074c83f7c544a88251b7308bda8b9e0fdda/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/30f94074c83f7c544a88251b7308bda8b9e0fdda/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=30f94074c83f7c544a88251b7308bda8b9e0fdda",
        "patch": "@@ -322,15 +322,24 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"h=1\\n\"\n        \"noh=1\\n\"\n        \"noi=1\\n\"\n-       \"i=1\\n\";\n+       \"i=1\\n\"\n+       \"sec1.ccc=extend1\\n\"\n+       \"\\n\"\n+       \"[sec1]\\n\"\n+       \"ccc=extend2\\n\"\n+       \"h=1\\n\"\n+       \"[sec2]\\n\"\n+       \"ccc=extend3\\n\"\n+       \"iii=2\\n\";\n \n     TestArgsManager test_args;\n \n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n+    // so do sec1.ccc, sec1.h, sec2.ccc, sec2.iii\n \n     BOOST_CHECK(test_args.GetOverrideArgs().empty());\n-    BOOST_CHECK(test_args.GetConfigArgs().size() == 8);\n+    BOOST_CHECK(test_args.GetConfigArgs().size() == 12);\n \n     BOOST_CHECK(test_args.GetConfigArgs().count(\"-a\")\n                 && test_args.GetConfigArgs().count(\"-b\")\n@@ -341,6 +350,11 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.GetConfigArgs().count(\"-h\")\n                 && test_args.GetConfigArgs().count(\"-i\")\n                );\n+    BOOST_CHECK(test_args.GetConfigArgs().count(\"-sec1.ccc\")\n+                && test_args.GetConfigArgs().count(\"-sec1.h\")\n+                && test_args.GetConfigArgs().count(\"-sec2.ccc\")\n+                && test_args.GetConfigArgs().count(\"-sec2.iii\")\n+               );\n \n     BOOST_CHECK(test_args.IsArgSet(\"-a\")\n                 && test_args.IsArgSet(\"-b\")\n@@ -351,6 +365,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.IsArgSet(\"-h\")\n                 && test_args.IsArgSet(\"-i\")\n                 && !test_args.IsArgSet(\"-zzz\")\n+                && !test_args.IsArgSet(\"-iii\")\n                );\n \n     BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n@@ -362,6 +377,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                 && test_args.GetArg(\"-h\", \"xxx\") == \"0\"\n                 && test_args.GetArg(\"-i\", \"xxx\") == \"1\"\n                 && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+                && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n                );\n \n     for (bool def : {false, true}) {\n@@ -374,6 +390,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n                      && !test_args.GetBoolArg(\"-h\", def)\n                      && test_args.GetBoolArg(\"-i\", def)\n                      && test_args.GetBoolArg(\"-zzz\", def) == def\n+                     && test_args.GetBoolArg(\"-iii\", def) == def\n                    );\n     }\n \n@@ -405,6 +422,47 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     BOOST_CHECK(test_args.IsArgNegated(\"-h\")); // last setting takes precedence\n     BOOST_CHECK(!test_args.IsArgNegated(\"-i\")); // last setting takes precedence\n     BOOST_CHECK(!test_args.IsArgNegated(\"-zzz\"));\n+\n+    // Test sections work\n+    test_args.SelectConfigNetwork(\"sec1\");\n+\n+    // same as original\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+                && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n+               );\n+    // section-specific setting\n+    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+    // section takes priority for multiple values\n+    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend1\");\n+    // check multiple values works\n+    const std::vector<std::string> sec1_ccc_expected = {\"extend1\",\"extend2\",\"argument\",\"multiple\"};\n+    const auto& sec1_ccc_res = test_args.GetArgs(\"-ccc\");\n+    BOOST_CHECK_EQUAL_COLLECTIONS(sec1_ccc_res.begin(), sec1_ccc_res.end(), sec1_ccc_expected.begin(), sec1_ccc_expected.end());\n+\n+    test_args.SelectConfigNetwork(\"sec2\");\n+\n+    // same as original\n+    BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n+                && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n+                && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n+                && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n+                && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n+                && test_args.GetArg(\"-h\", \"xxx\") == \"0\"\n+               );\n+    // section-specific setting\n+    BOOST_CHECK(test_args.GetArg(\"-iii\", \"xxx\") == \"2\");\n+    // section takes priority for multiple values\n+    BOOST_CHECK(test_args.GetArg(\"-ccc\", \"xxx\") == \"extend3\");\n+    // check multiple values works\n+    const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n+    const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n+    BOOST_CHECK_EQUAL_COLLECTIONS(sec2_ccc_res.begin(), sec2_ccc_res.end(), sec2_ccc_expected.begin(), sec2_ccc_expected.end());\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)"
      }
    ]
  },
  {
    "sha": "8a9817d175453c74ec060dcac026cd713bec98fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4YTk4MTdkMTc1NDUzYzc0ZWMwNjBkY2FjMDI2Y2Q3MTNiZWM5OGZh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:05:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "[tests] Use regtest section in functional tests configs",
      "tree": {
        "sha": "a615df03dd8d20349d4ca87ce919c13d1aae4231",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a615df03dd8d20349d4ca87ce919c13d1aae4231"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8a9817d175453c74ec060dcac026cd713bec98fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a9817d175453c74ec060dcac026cd713bec98fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8a9817d175453c74ec060dcac026cd713bec98fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a9817d175453c74ec060dcac026cd713bec98fa/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "30f94074c83f7c544a88251b7308bda8b9e0fdda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/30f94074c83f7c544a88251b7308bda8b9e0fdda",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/30f94074c83f7c544a88251b7308bda8b9e0fdda"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 7,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e9924451d1d2929e512a8242c776095f34a78230",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a9817d175453c74ec060dcac026cd713bec98fa/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a9817d175453c74ec060dcac026cd713bec98fa/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=8a9817d175453c74ec060dcac026cd713bec98fa",
        "patch": "@@ -29,8 +29,13 @@ def run_test(self):\n \n         # Check that using non-existent datadir in conf file fails\n         conf_file = os.path.join(default_data_dir, \"bitcoin.conf\")\n-        with open(conf_file, 'a', encoding='utf8') as f:\n+\n+        # datadir needs to be set before [regtest] section\n+        conf_file_contents = open(conf_file, encoding='utf8').read()\n+        with open(conf_file, 'w', encoding='utf8') as f:\n             f.write(\"datadir=\" + new_data_dir + \"\\n\")\n+            f.write(conf_file_contents)\n+\n         self.nodes[0].assert_start_raises_init_error(['-conf=' + conf_file], 'Error reading configuration file: specified data directory \"' + new_data_dir + '\" does not exist.')\n \n         # Create the directory and ensure the config file now works"
      },
      {
        "sha": "4ec3175cd69091adf86fecd1b1faace3a90845bf",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8a9817d175453c74ec060dcac026cd713bec98fa/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8a9817d175453c74ec060dcac026cd713bec98fa/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=8a9817d175453c74ec060dcac026cd713bec98fa",
        "patch": "@@ -294,6 +294,7 @@ def initialize_datadir(dirname, n):\n         os.makedirs(datadir)\n     with open(os.path.join(datadir, \"bitcoin.conf\"), 'w', encoding='utf8') as f:\n         f.write(\"regtest=1\\n\")\n+        f.write(\"[regtest]\\n\")\n         f.write(\"port=\" + str(p2p_port(n)) + \"\\n\")\n         f.write(\"rpcport=\" + str(rpc_port(n)) + \"\\n\")\n         f.write(\"server=1\\n\")"
      }
    ]
  },
  {
    "sha": "d1fc4d95afc191072fc650581a9b668b68b47b15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWZjNGQ5NWFmYzE5MTA3MmZjNjUwNTgxYTliNjY4YjY4YjQ3YjE1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:06:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "ArgsManager: limit some options to only apply on mainnet when in default section\n\nWhen specified in bitcoin.conf without using the [regtest] or [test]\nsection header, or a \"regtest.\" or \"test.\" prefix, the \"addnode\",\n\"connect\", \"port\", \"bind\", \"rpcport\", \"rpcbind\", and \"wallet\" settings\nwill only be applied when running on mainnet.",
      "tree": {
        "sha": "41dbee4286d56041857c9d39845c31aa610d1cd1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41dbee4286d56041857c9d39845c31aa610d1cd1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1fc4d95afc191072fc650581a9b668b68b47b15",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1fc4d95afc191072fc650581a9b668b68b47b15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1fc4d95afc191072fc650581a9b668b68b47b15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1fc4d95afc191072fc650581a9b668b68b47b15/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8a9817d175453c74ec060dcac026cd713bec98fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8a9817d175453c74ec060dcac026cd713bec98fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8a9817d175453c74ec060dcac026cd713bec98fa"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 39,
      "deletions": 4
    },
    "files": [
      {
        "sha": "51c28349f39f4956f4f51ba8c0f173c9bcba7ff3",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 4,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1fc4d95afc191072fc650581a9b668b68b47b15/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1fc4d95afc191072fc650581a9b668b68b47b15/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=d1fc4d95afc191072fc650581a9b668b68b47b15",
        "patch": "@@ -460,6 +460,13 @@ class ArgsManagerHelper {\n public:\n     typedef std::map<std::string, std::vector<std::string>> MapArgs;\n \n+    /** Determine whether to use config settings in the default section,\n+     *  See also comments around ArgsManager::ArgsManager() below. */\n+    static inline bool UseDefaultSection(const ArgsManager& am, const std::string& arg)\n+    {\n+        return (am.m_network == CBaseChainParams::MAIN || am.m_network_only_args.count(arg) == 0);\n+    }\n+\n     /** Convert regular argument into the network-specific setting */\n     static inline std::string NetworkArg(const ArgsManager& am, const std::string& arg)\n     {\n@@ -521,9 +528,11 @@ class ArgsManagerHelper {\n             }\n         }\n \n-        found_result = GetArgHelper(am.m_config_args, arg);\n-        if (found_result.first) {\n-            return found_result;\n+        if (UseDefaultSection(am, arg)) {\n+            found_result = GetArgHelper(am.m_config_args, arg);\n+            if (found_result.first) {\n+                return found_result;\n+            }\n         }\n \n         return found_result;\n@@ -575,6 +584,22 @@ static bool InterpretNegatedOption(std::string& key, std::string& val)\n     return false;\n }\n \n+ArgsManager::ArgsManager() :\n+    /* These options would cause cross-contamination if values for\n+     * mainnet were used while running on regtest/testnet (or vice-versa).\n+     * Setting them as section_only_args ensures that sharing a config file\n+     * between mainnet and regtest/testnet won't cause problems due to these\n+     * parameters by accident. */\n+    m_network_only_args{\n+      \"-addnode\", \"-connect\",\n+      \"-port\", \"-bind\",\n+      \"-rpcport\", \"-rpcbind\",\n+      \"-wallet\",\n+    }\n+{\n+    // nothing to do\n+}\n+\n void ArgsManager::SelectConfigNetwork(const std::string& network)\n {\n     m_network = network;\n@@ -621,11 +646,16 @@ std::vector<std::string> ArgsManager::GetArgs(const std::string& strArg) const\n     if (IsArgNegated(strArg)) return result; // special case\n \n     LOCK(cs_args);\n+\n     ArgsManagerHelper::AddArgs(result, m_override_args, strArg);\n     if (!m_network.empty()) {\n         ArgsManagerHelper::AddArgs(result, m_config_args, ArgsManagerHelper::NetworkArg(*this, strArg));\n     }\n-    ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+\n+    if (ArgsManagerHelper::UseDefaultSection(*this, strArg)) {\n+        ArgsManagerHelper::AddArgs(result, m_config_args, strArg);\n+    }\n+\n     return result;\n }\n "
      },
      {
        "sha": "8132435628fe155f1fffe3776c17c9c8bf22a1f6",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1fc4d95afc191072fc650581a9b668b68b47b15/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1fc4d95afc191072fc650581a9b668b68b47b15/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=d1fc4d95afc191072fc650581a9b668b68b47b15",
        "patch": "@@ -24,6 +24,7 @@\n #include <exception>\n #include <map>\n #include <memory>\n+#include <set>\n #include <stdint.h>\n #include <string>\n #include <unordered_set>\n@@ -229,9 +230,13 @@ class ArgsManager\n     std::map<std::string, std::vector<std::string>> m_override_args;\n     std::map<std::string, std::vector<std::string>> m_config_args;\n     std::string m_network;\n+    std::set<std::string> m_network_only_args;\n+\n     void ReadConfigStream(std::istream& stream);\n \n public:\n+    ArgsManager();\n+\n     /**\n      * Select the network in use\n      */"
      }
    ]
  },
  {
    "sha": "68797e20f478d835b7ff691a656242c14283446a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ODc5N2UyMGY0NzhkODM1YjdmZjY5MWE2NTYyNDJjMTQyODM0NDZh",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:07:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "ArgsManager: Warn when ignoring network-specific config setting\n\nWhen network-specific options such as -addnode, -connect, etc are\nspecified in the default section of the config file, but that setting is\nignored due to testnet or regtest being in use, and it is not overridden\nby either a command line option or a setting in the [regtest] or [test]\nsection of the config file, a warning is added to the log, eg:\n\n  Warning: Config setting for -connect only applied on regtest network when in [regtest] section.",
      "tree": {
        "sha": "e64f31bebc1497fbb733805dba721e130e32e11c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e64f31bebc1497fbb733805dba721e130e32e11c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/68797e20f478d835b7ff691a656242c14283446a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68797e20f478d835b7ff691a656242c14283446a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/68797e20f478d835b7ff691a656242c14283446a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68797e20f478d835b7ff691a656242c14283446a/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1fc4d95afc191072fc650581a9b668b68b47b15",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1fc4d95afc191072fc650581a9b668b68b47b15",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1fc4d95afc191072fc650581a9b668b68b47b15"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 41,
      "deletions": 0
    },
    "files": [
      {
        "sha": "8db1b922c417875ea2f4fa6a098617c42977e128",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68797e20f478d835b7ff691a656242c14283446a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68797e20f478d835b7ff691a656242c14283446a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=68797e20f478d835b7ff691a656242c14283446a",
        "patch": "@@ -803,6 +803,11 @@ void InitParameterInteraction()\n         if (gArgs.SoftSetBoolArg(\"-whitelistrelay\", true))\n             LogPrintf(\"%s: parameter interaction: -whitelistforcerelay=1 -> setting -whitelistrelay=1\\n\", __func__);\n     }\n+\n+    // Warn if network-specific options (-addnode, -connect, etc) are\n+    // specified in default section of config file, but not overridden\n+    // on the command line or in this network's section of the config file.\n+    gArgs.WarnForSectionOnlyArgs();\n }\n \n static std::string ResolveErrMsg(const char * const optname, const std::string& strBind)"
      },
      {
        "sha": "4101173091c573b5baecf0a987b1926508f48b86",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68797e20f478d835b7ff691a656242c14283446a/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68797e20f478d835b7ff691a656242c14283446a/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=68797e20f478d835b7ff691a656242c14283446a",
        "patch": "@@ -600,6 +600,34 @@ ArgsManager::ArgsManager() :\n     // nothing to do\n }\n \n+void ArgsManager::WarnForSectionOnlyArgs()\n+{\n+    // if there's no section selected, don't worry\n+    if (m_network.empty()) return;\n+\n+    // if it's okay to use the default section for this network, don't worry\n+    if (m_network == CBaseChainParams::MAIN) return;\n+\n+    for (const auto& arg : m_network_only_args) {\n+        std::pair<bool, std::string> found_result;\n+\n+        // if this option is overridden it's fine\n+        found_result = ArgsManagerHelper::GetArgHelper(m_override_args, arg);\n+        if (found_result.first) continue;\n+\n+        // if there's a network-specific value for this option, it's fine\n+        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, ArgsManagerHelper::NetworkArg(*this, arg));\n+        if (found_result.first) continue;\n+\n+        // if there isn't a default value for this option, it's fine\n+        found_result = ArgsManagerHelper::GetArgHelper(m_config_args, arg);\n+        if (!found_result.first) continue;\n+\n+        // otherwise, issue a warning\n+        LogPrintf(\"Warning: Config setting for %s only applied on %s network when in [%s] section.\\n\", arg, m_network, m_network);\n+    }\n+}\n+\n void ArgsManager::SelectConfigNetwork(const std::string& network)\n {\n     m_network = network;"
      },
      {
        "sha": "ba80c21ddcbbb2c5a99d0589b4613ab57e70b2fa",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/68797e20f478d835b7ff691a656242c14283446a/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/68797e20f478d835b7ff691a656242c14283446a/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=68797e20f478d835b7ff691a656242c14283446a",
        "patch": "@@ -245,6 +245,14 @@ class ArgsManager\n     void ParseParameters(int argc, const char*const argv[]);\n     void ReadConfigFile(const std::string& confPath);\n \n+    /**\n+     * Log warnings for options in m_section_only_args when\n+     * they are specified in the default section but not overridden\n+     * on the command line or in a network-specific section in the\n+     * config file.\n+     */\n+    void WarnForSectionOnlyArgs();\n+\n     /**\n      * Return a vector of strings of the given argument\n      *"
      }
    ]
  },
  {
    "sha": "608415d4e6c6518aed248f33a58e07ba1e3df4c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MDg0MTVkNGU2YzY1MThhZWQyNDhmMzNhNThlMDdiYTFlM2RmNGMw",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:08:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "[tests] Unit tests for network-specific config entries",
      "tree": {
        "sha": "32d9ce0f3395e73fb8b53944829e66f56b9e7177",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32d9ce0f3395e73fb8b53944829e66f56b9e7177"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/608415d4e6c6518aed248f33a58e07ba1e3df4c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608415d4e6c6518aed248f33a58e07ba1e3df4c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/608415d4e6c6518aed248f33a58e07ba1e3df4c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608415d4e6c6518aed248f33a58e07ba1e3df4c0/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "68797e20f478d835b7ff691a656242c14283446a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/68797e20f478d835b7ff691a656242c14283446a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/68797e20f478d835b7ff691a656242c14283446a"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 34,
      "deletions": 3
    },
    "files": [
      {
        "sha": "98ded7bc8c2a68f2f244e00ded2e71ef1802dd7f",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 3,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/608415d4e6c6518aed248f33a58e07ba1e3df4c0/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/608415d4e6c6518aed248f33a58e07ba1e3df4c0/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=608415d4e6c6518aed248f33a58e07ba1e3df4c0",
        "patch": "@@ -187,6 +187,7 @@ BOOST_AUTO_TEST_CASE(util_FormatISO8601Time)\n \n struct TestArgsManager : public ArgsManager\n {\n+    TestArgsManager() { m_network_only_args.clear(); }\n     std::map<std::string, std::vector<std::string> >& GetOverrideArgs() { return m_override_args; }\n     std::map<std::string, std::vector<std::string> >& GetConfigArgs() { return m_config_args; }\n     void ReadConfigString(const std::string str_config)\n@@ -198,6 +199,11 @@ struct TestArgsManager : public ArgsManager\n         }\n         ReadConfigStream(streamConfig);\n     }\n+    void SetNetworkOnlyArg(const std::string arg)\n+    {\n+        LOCK(cs_args);\n+        m_network_only_args.insert(arg);\n+    }\n };\n \n BOOST_AUTO_TEST_CASE(util_ParseParameters)\n@@ -327,6 +333,7 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n        \"\\n\"\n        \"[sec1]\\n\"\n        \"ccc=extend2\\n\"\n+       \"d=eee\\n\"\n        \"h=1\\n\"\n        \"[sec2]\\n\"\n        \"ccc=extend3\\n\"\n@@ -336,10 +343,10 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n \n     test_args.ReadConfigString(str_config);\n     // expectation: a, b, ccc, d, fff, ggg, h, i end up in map\n-    // so do sec1.ccc, sec1.h, sec2.ccc, sec2.iii\n+    // so do sec1.ccc, sec1.d, sec1.h, sec2.ccc, sec2.iii\n \n     BOOST_CHECK(test_args.GetOverrideArgs().empty());\n-    BOOST_CHECK(test_args.GetConfigArgs().size() == 12);\n+    BOOST_CHECK(test_args.GetConfigArgs().size() == 13);\n \n     BOOST_CHECK(test_args.GetConfigArgs().count(\"-a\")\n                 && test_args.GetConfigArgs().count(\"-b\")\n@@ -429,12 +436,13 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     // same as original\n     BOOST_CHECK(test_args.GetArg(\"-a\", \"xxx\") == \"\"\n                 && test_args.GetArg(\"-b\", \"xxx\") == \"1\"\n-                && test_args.GetArg(\"-d\", \"xxx\") == \"e\"\n                 && test_args.GetArg(\"-fff\", \"xxx\") == \"0\"\n                 && test_args.GetArg(\"-ggg\", \"xxx\") == \"1\"\n                 && test_args.GetArg(\"-zzz\", \"xxx\") == \"xxx\"\n                 && test_args.GetArg(\"-iii\", \"xxx\") == \"xxx\"\n                );\n+    // d is overridden\n+    BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n     // section-specific setting\n     BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n     // section takes priority for multiple values\n@@ -463,6 +471,29 @@ BOOST_AUTO_TEST_CASE(util_ReadConfigStream)\n     const std::vector<std::string> sec2_ccc_expected = {\"extend3\",\"argument\",\"multiple\"};\n     const auto& sec2_ccc_res = test_args.GetArgs(\"-ccc\");\n     BOOST_CHECK_EQUAL_COLLECTIONS(sec2_ccc_res.begin(), sec2_ccc_res.end(), sec2_ccc_expected.begin(), sec2_ccc_expected.end());\n+\n+    // Test section only options\n+\n+    test_args.SetNetworkOnlyArg(\"-d\");\n+    test_args.SetNetworkOnlyArg(\"-ccc\");\n+    test_args.SetNetworkOnlyArg(\"-h\");\n+\n+    test_args.SelectConfigNetwork(CBaseChainParams::MAIN);\n+    BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"e\");\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n+    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n+\n+    test_args.SelectConfigNetwork(\"sec1\");\n+    BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"eee\");\n+    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 1);\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 2);\n+    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"1\");\n+\n+    test_args.SelectConfigNetwork(\"sec2\");\n+    BOOST_CHECK(test_args.GetArg(\"-d\", \"xxx\") == \"xxx\");\n+    BOOST_CHECK(test_args.GetArgs(\"-d\").size() == 0);\n+    BOOST_CHECK(test_args.GetArgs(\"-ccc\").size() == 1);\n+    BOOST_CHECK(test_args.GetArg(\"-h\", \"xxx\") == \"0\");\n }\n \n BOOST_AUTO_TEST_CASE(util_GetArg)"
      }
    ]
  },
  {
    "sha": "005ad266491f43d7a9bfd959396037416cb32a55",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMDVhZDI2NjQ5MWY0M2Q3YTliZmQ5NTkzOTYwMzc0MTZjYjMyYTU1",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:09:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "ArgsManager: special handling for -regtest and -testnet",
      "tree": {
        "sha": "3c099ab828484ec5299c38754b25939347ef3c53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c099ab828484ec5299c38754b25939347ef3c53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/005ad266491f43d7a9bfd959396037416cb32a55",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005ad266491f43d7a9bfd959396037416cb32a55",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/005ad266491f43d7a9bfd959396037416cb32a55",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005ad266491f43d7a9bfd959396037416cb32a55/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "608415d4e6c6518aed248f33a58e07ba1e3df4c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608415d4e6c6518aed248f33a58e07ba1e3df4c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/608415d4e6c6518aed248f33a58e07ba1e3df4c0"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "1fb40ae7a152dea0e439c73c79ef67e48778051f",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/005ad266491f43d7a9bfd959396037416cb32a55/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/005ad266491f43d7a9bfd959396037416cb32a55/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=005ad266491f43d7a9bfd959396037416cb32a55",
        "patch": "@@ -537,6 +537,22 @@ class ArgsManagerHelper {\n \n         return found_result;\n     }\n+\n+    /* Special test for -testnet and -regtest args, because we\n+     * don't want to be confused by craziness like \"[regtest] testnet=1\"\n+     */\n+    static inline bool GetNetBoolArg(const ArgsManager &am, const std::string& net_arg)\n+    {\n+        std::pair<bool,std::string> found_result(false,std::string());\n+        found_result = GetArgHelper(am.m_override_args, net_arg, true);\n+        if (!found_result.first) {\n+            found_result = GetArgHelper(am.m_config_args, net_arg, true);\n+            if (!found_result.first) {\n+                return false; // not set\n+            }\n+        }\n+        return InterpretBool(found_result.second); // is set, so evaluate\n+    }\n };\n \n /**\n@@ -950,8 +966,8 @@ void ArgsManager::ReadConfigFile(const std::string& confPath)\n \n std::string ArgsManager::GetChainName() const\n {\n-    bool fRegTest = GetBoolArg(\"-regtest\", false);\n-    bool fTestNet = GetBoolArg(\"-testnet\", false);\n+    bool fRegTest = ArgsManagerHelper::GetNetBoolArg(*this, \"-regtest\");\n+    bool fTestNet = ArgsManagerHelper::GetNetBoolArg(*this, \"-testnet\");\n \n     if (fTestNet && fRegTest)\n         throw std::runtime_error(\"Invalid combination of -regtest and -testnet.\");"
      }
    ]
  },
  {
    "sha": "5e3cbe020ddeaf4abf51cb561122056cce726d8b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZTNjYmUwMjBkZGVhZjRhYmY1MWNiNTYxMTIyMDU2Y2NlNzI2ZDhi",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:10:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "[tests] Unit tests for -testnet/-regtest in [test]/[regtest] sections",
      "tree": {
        "sha": "5fb5a4cfd966a7a28ccb5a63afbf21a1d4aa5dfe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5fb5a4cfd966a7a28ccb5a63afbf21a1d4aa5dfe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5e3cbe020ddeaf4abf51cb561122056cce726d8b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3cbe020ddeaf4abf51cb561122056cce726d8b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3cbe020ddeaf4abf51cb561122056cce726d8b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3cbe020ddeaf4abf51cb561122056cce726d8b/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "005ad266491f43d7a9bfd959396037416cb32a55",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/005ad266491f43d7a9bfd959396037416cb32a55",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/005ad266491f43d7a9bfd959396037416cb32a55"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 26,
      "deletions": 1
    },
    "files": [
      {
        "sha": "fa49d6d7ffbdbc3ccf4e80204aac74de638b7c36",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 1,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5e3cbe020ddeaf4abf51cb561122056cce726d8b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5e3cbe020ddeaf4abf51cb561122056cce726d8b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5e3cbe020ddeaf4abf51cb561122056cce726d8b",
        "patch": "@@ -544,7 +544,8 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     const char* argv_both[] = {\"cmd\", \"-testnet\", \"-regtest\"};\n \n     // equivalent to \"-testnet\"\n-    const char* testnetconf = \"testnet=1\\nregtest=0\\n\";\n+    // regtest in testnet section is ignored\n+    const char* testnetconf = \"testnet=1\\nregtest=0\\n[test]\\nregtest=1\";\n \n     test_args.ParseParameters(0, (char**)argv_testnet);\n     BOOST_CHECK_EQUAL(test_args.GetChainName(), \"main\");\n@@ -580,6 +581,30 @@ BOOST_AUTO_TEST_CASE(util_GetChainName)\n     test_args.ParseParameters(3, (char**)argv_both);\n     test_args.ReadConfigString(testnetconf);\n     BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+\n+    // check setting the network to test (and thus making\n+    // [test] regtest=1 potentially relevent) doesn't break things\n+    test_args.SelectConfigNetwork(\"test\");\n+\n+    test_args.ParseParameters(0, (char**)argv_testnet);\n+    test_args.ReadConfigString(testnetconf);\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+\n+    test_args.ParseParameters(2, (char**)argv_testnet);\n+    test_args.ReadConfigString(testnetconf);\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+\n+    test_args.ParseParameters(2, (char**)argv_regtest);\n+    test_args.ReadConfigString(testnetconf);\n+    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n+\n+    test_args.ParseParameters(2, (char**)argv_test_no_reg);\n+    test_args.ReadConfigString(testnetconf);\n+    BOOST_CHECK_EQUAL(test_args.GetChainName(), \"test\");\n+\n+    test_args.ParseParameters(3, (char**)argv_both);\n+    test_args.ReadConfigString(testnetconf);\n+    BOOST_CHECK_THROW(test_args.GetChainName(), std::runtime_error);\n }\n \n BOOST_AUTO_TEST_CASE(util_FormatMoney)"
      }
    ]
  },
  {
    "sha": "c25321ff96737bdba80d626d2425ef02c7a4c181",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMjUzMjFmZjk2NzM3YmRiYTgwZDYyNmQyNDI1ZWYwMmM3YTRjMTgx",
    "commit": {
      "author": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-04T08:11:00Z"
      },
      "committer": {
        "name": "Anthony Towns",
        "email": "aj@erisian.com.au",
        "date": "2018-04-11T13:15:28Z"
      },
      "message": "Add config changes to release notes",
      "tree": {
        "sha": "4265c57b9695d653dc825116f39e773c5e0a1ea3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4265c57b9695d653dc825116f39e773c5e0a1ea3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c25321ff96737bdba80d626d2425ef02c7a4c181",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25321ff96737bdba80d626d2425ef02c7a4c181",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c25321ff96737bdba80d626d2425ef02c7a4c181",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c25321ff96737bdba80d626d2425ef02c7a4c181/comments",
    "author": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ajtowns",
      "id": 127186,
      "node_id": "MDQ6VXNlcjEyNzE4Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/127186?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ajtowns",
      "html_url": "https://github.com/ajtowns",
      "followers_url": "https://api.github.com/users/ajtowns/followers",
      "following_url": "https://api.github.com/users/ajtowns/following{/other_user}",
      "gists_url": "https://api.github.com/users/ajtowns/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ajtowns/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ajtowns/subscriptions",
      "organizations_url": "https://api.github.com/users/ajtowns/orgs",
      "repos_url": "https://api.github.com/users/ajtowns/repos",
      "events_url": "https://api.github.com/users/ajtowns/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ajtowns/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3cbe020ddeaf4abf51cb561122056cce726d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3cbe020ddeaf4abf51cb561122056cce726d8b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3cbe020ddeaf4abf51cb561122056cce726d8b"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b493908716c9cbc9f8db932961873b5d0e0a29dc",
        "filename": "doc/release-notes-pr12823.md",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c25321ff96737bdba80d626d2425ef02c7a4c181/doc/release-notes-pr12823.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c25321ff96737bdba80d626d2425ef02c7a4c181/doc/release-notes-pr12823.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-pr12823.md?ref=c25321ff96737bdba80d626d2425ef02c7a4c181",
        "patch": "@@ -0,0 +1,20 @@\n+Configuration sections for testnet and regtest\n+----------------------------------------------\n+\n+It is now possible for a single configuration file to set different\n+options for different networks. This is done by using sections or by\n+prefixing the option with the network, such as:\n+\n+    main.uacomment=bitcoin\n+    test.uacomment=bitcoin-testnet\n+    regtest.uacomment=regtest\n+    [main]\n+    mempoolsize=300\n+    [test]\n+    mempoolsize=100\n+    [regtest]\n+    mempoolsize=20\n+\n+The `addnode=`, `connect=`, `port=`, `bind=`, `rpcport=`, `rpcbind=`\n+and `wallet=` options will only apply to mainnet when specified in the\n+configuration file, unless a network is specified."
      }
    ]
  }
]