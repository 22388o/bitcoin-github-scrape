meshcollider,2017-12-11T10:33:19Z,"Ah you beat me to it, will take a look as soon as I can\n\nEarly note: as you mention, net-specific should take precedence over default, whereas explicit command line arguments should always take precedence over the config file, so following your example, if `-maxmempool=200` is specified as an argument it should use 200 even on regtest, whereas if it is not, the `regtest.maxmempool=100` should ",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350684883,350684883,
jnewbery,2017-12-11T15:16:56Z,"Great. Thanks for tackling this @ajtowns. A few high-level suggestions:\n\n- I agree with @MeshCollider that the order of precedence should be Command Line > Config File network-specific > Config File default.\n- I think there shouldn't be network-specific command-line options (that's almost an implication of the above). I agree with MeshCollider that the user should call `bitcoind` with `-wall",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350753811,350753811,
jonasschnelli,2017-12-11T18:56:51Z,"Concept ACK.\nNice work!\n\nAgree with @MeshCollider and @jnewbery (except the point of deprecating the use of testnet/regtest in config file).",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-350821889,350821889,
ajtowns,2017-12-12T10:22:03Z,"Okay, getting that behaviour requires marginally more invasive changes, but I think it's worth it (and they're not *that* invasive). New patch series accompanying this comment which:\n\n * has arg precedence being: command-line arguments, net-specific config file options, default config file options\n * will only use config file options for -addnode and -wallet if you're on mainnet or put them ",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-351008713,351008713,
ajtowns,2018-01-03T05:46:37Z,"Okay, here's something for first pass reviews I think.\n\nThe first five commits do some refactoring on ChainNameFromCommandLine (moving it from chainparamsbase.cpp into util.cpp:ArgsManager) and ReadConfigFile, primarily to make it easier to add tests for both of them.\n\n    c5b5997e1 Move ChainNameFromCommandLine into ArgsManager\n    eedd60951 [tests] Add unit tests for ChainNameFromComma",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-354941242,354941242,
laanwj,2018-03-05T19:30:07Z,"Was already wondering why this was closed!\n\nEdit: overall looks ok to me! had some small comments in person, but nothing major. Will test this.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-370535273,370535273,
meshcollider,2018-03-06T19:22:14Z,"I think this is far enough along to have the brainstorming tag removed because at least to me it feels almost unready to be reviewed if it has that tag, more of a high-level discussion thing. \n\nDefinite Concept ACK if I haven't already said so. I'll review soon.\n\nFor reference, this also supersedes the issue #9374",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-370896840,370896840,
laanwj,2018-03-22T08:49:11Z,"> I think this is far enough along to have the brainstorming tag removed because at least to me it feels almost unready to be reviewed if it has that tag, more of a high-level discussion thing.\n\nI tend to agree. Let's remove the WIP tag and try to get this in for 0.17.0. As I understand it, the issues left are pretty much documentation and message related.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-375221380,375221380,
jnewbery,2018-03-22T14:34:19Z,"> Let's ... try to get this in for 0.17.0\n\nCurrent implementation is blocked on issue #12640 , which is fixed in #12756. Please review that (simple) PR if you want this to be merged :)",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-375328015,375328015,
jnewbery,2018-03-26T14:36:36Z,"#12756 is in master and I wanted to test this, so I rebased. There was a trivial merge conflict in feature_config_args.py. It might be quicker if you grab my rebased branch here: https://github.com/jnewbery/bitcoin/tree/pr11862.1\n\nI can confirm with #12756, we no longer crash in any of the functional tests.\n\nI think there are still a few review comments for you to address.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376188264,376188264,
ajtowns,2018-03-28T15:19:13Z,"Should address most of the comments, including the style nits.\n\nI haven't updated the help for -addnode or -connect; not sure what to update it to... Also have not added a log message warning when no config option has been found despite a config option being present in the default section. Do have an idea how to do that, so may add it tomorrow.\n\nDropped [wip] from the subject; someone migh",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376925335,376925335,
jnewbery,2018-03-28T15:40:01Z,"> may add it tomorrow.\n\nI'll review once you've decided how to tackle this :)",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-376933141,376933141,
ajtowns,2018-03-29T07:05:46Z,"Took the opportunity to bump the dates on the commits to encourage github to list them in the right order.\n\nIt now gives a warning at startup if you're on testnet or regtest, have one of the section-only arguments in the default section of the config file, and haven't overridden that argument either on the command line or in the appropriate config section. The warnings are checked via InitPara",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-377142718,377142718,
ajtowns,2018-04-04T08:36:16Z,"Rebased again. #12713 made this a bit more complicated -- how negated options (-nofoo) work with the config files is (in my opinion) a bit confusing as implemented, and coping with negated options and sections makes it a bit more confusing. As a consequence, I've broken out the first set of refactoring/testing patches into its on PR (#12878) which includes some additional tests for the current beh",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-378524308,378524308,
jnewbery,2018-04-04T15:12:13Z,I've reviewed #12878. Will review this once that PR is merged and this is rebased.,https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-378636238,378636238,
jtimon,2018-04-05T20:12:26Z,"Concept ACK. \nRight now, If I introduce a regtest2 section, for example, it will simply be ignored, correct?\nI'm wondering how this will interact with https://github.com/bitcoin/bitcoin/pull/8994",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379061898,379061898,
ajtowns,2018-04-09T06:48:22Z,"@jtimon If you put a `[regtest2]` section in bitcoind.conf today, it will be ignored -- under the hood the options are just prefixed with the section, so you'd just be setting `-regtest2.foo=1` which would never get looked up. I think as far as #8994 goes, the call to SelectConfigSection() that this PR adds inside SelectBaseParams() should keep the config section used (by this PR) in sync with the",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379651794,379651794,
ajtowns,2018-04-09T06:50:40Z,Rebased post #12878 merge.,https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-379652208,379652208,
ajtowns,2018-04-11T12:43:16Z,"Fixed a bunch of @jnewbery's nits/complaints/suggestions. Rebased against master to pick up the automated test improvements.\n\nFor anyone who got part way through reviewing, piecemeal changes from then to now are on https://github.com/ajtowns/bitcoin/commits/netconf-sections-track with the same underlying tree:\n\n```\n$ for a in netconf-sections{,-track}; do git log -1 --pretty=""%h -> %T"" $",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-380438060,380438060,
jnewbery,2018-04-12T21:08:44Z,utACK c25321ff96737bdba80d626d2425ef02c7a4c181. Thanks for addressing all of my nits!,https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-380945011,380945011,
laanwj,2018-04-13T18:56:04Z,"I've tested this a bit and it appears to work as expected. I've tested that it's possible to override the port, and proxy configuration per network. I've also tested that putting `testnet=1` in the general section still works.\n\nutACK c25321ff96737bdba80d626d2425ef02c7a4c181\n",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-381230551,381230551,
NicolasDorier,2018-10-11T05:14:21Z,"I saw that too late but this PR is a major pain in the ass. Please be more careful with breaking changes, especially there was no good reason to break anything.\n\nNot only it broke existing configuration file, but on top of it it call the testnet section `[test]` instead of `[testnet]` .\n\nThis mean I can't easily migrate such [templated configuration](https://github.com/btcpayserver/btcpays",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-428823298,428823298,
zciendor,2018-10-23T17:04:04Z,"Is there even a documentation of the section names? What we have used so far as pseudo-documentation is the config generator from @jlopp https://jlopp.github.io/bitcoin-core-config-generator/\nHowever, it neither contains a `[general]` section like mentioned in https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-381230551 and places the `testnet=1` option currently under the `[debug]` sect",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432333766,432333766,
ryanofsky,2018-10-23T17:35:04Z,"Unless I'm mistaken, I think we can restore complete backwards compatibility by just not having ""network-only"" options, and only warning when one of these options is used outside of a network section, instead of warning and dropping them. I suggested this previously here, https://github.com/bitcoin/bitcoin/issues/14523#issuecomment-431605226.\n\nWe could also go further and not even warn about t",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432344821,432344821,
sipa,2018-10-23T17:54:17Z,"@ryanofsky I agree, I think we should revert the ""ignore certain options outside of network-specific sections"" behavior; it seems to gratuitously have broken compatibility.\n\n@zciendor There is documentation in the release notes: https://github.com/bitcoin/bitcoin/blob/v0.17.0/doc/release-notes.md#configuration-sections-for-testnet-and-regtest",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432352265,432352265,
jnewbery,2018-10-23T18:16:14Z,"I agree that removing the 'network-only' options is a sensible thing to do in order to restore complete backwards compatibility. Network-only options was a good idea to prevent users from accidentally polluting their mainnet config with testnet or regtest config, but the amount of user pain inflicted by not having backwards compatibility means we should revert this change quickly.\n\nTo be hones",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432360811,432360811,
zciendor,2018-10-23T19:01:11Z,"I was talking about the sections the [config file generator](https://jlopp.github.io/bitcoin-core-config-generator/) adds. However, I just noticed that they are commented out, so this should have no effect...\n\n```\n# Generated by https://jlopp.github.io/bitcoin-core-config-generator/\n\n# This config should be placed in following path:\n# ~/.bitcoin/bitcoin.conf\n\n# [core]\n# Keep the ",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432377314,432377314,
jnewbery,2018-10-23T19:10:40Z,"> Is there even a documentation of the section names?\n\nYes: https://bitcoincore.org/en/releases/0.17.0/#configuration-sections-for-testnet-and-regtest",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432380531,432380531,
zciendor,2018-10-23T19:22:01Z,"I just realized we seem to have a completely different problem with 0.17. No matter where I specify `testnet=1` (either in the conf file or on the command line) bitcoind tries to write to the default mainnet folder (~/.bitcoin/):\n\n```\n$ /usr/local/bin/bitcoind -conf=/etc/bitcoin/test_bitcoin.conf -testnet\nBitcoin Core version v0.17.0 (release build)\nInitParameterInteraction: parameter in",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432384279,432384279,
jnewbery,2018-10-23T19:25:24Z,"@zciendor - that looks like a separate problem. Do you mind opening a new issue to track it?\n\nedit: please @ me once you've opened that issue.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432385416,432385416,
zciendor,2018-10-23T19:25:46Z,Sure! https://github.com/bitcoin/bitcoin/issues/14557,https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432385544,432385544,
NicolasDorier,2018-10-24T05:50:05Z,"@zciendor unsure if it is related to your problem, but a non obvious consequence of this PR is that on testnet or regtest:\n\n* You can't use Bitcoin-CLI 0.17 on Bitcoind < 0.17\n* You can't use Bitcoin-CLI < 0.17 on Bitcoind 0.17\n\nBecause they can't read each other config files. I banged my head against the wall for some hour because of this.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432521529,432521529,
ajtowns,2018-10-24T11:54:49Z,"@NicolasDorier you can use:\n\n```\n    connect=0\n    [test]\n    connect=0\n    [regtest]\n    connect=0\n```\n\nto have the `connect=0` option (or any of the other mainnet-only options) seen on mainnet/testnet/regtest for pre and post 0.17.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-432625334,432625334,
NicolasDorier,2018-10-28T05:07:41Z,"I don't think it works, my memory tells that I had issue because 0.16.3 can't parse sections, and thus consider the configuration file invalid.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-433676942,433676942,
ajtowns,2018-10-29T20:34:59Z,"@NicolasDorier 0.16.3 works fine here with the above -- the boost config parser has always parsed sections, it's just ignored what was in them (because it would treat it as an option named ""regtest.connect"" which was then never actually used).",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-434069241,434069241,
NicolasDorier,2018-10-30T06:26:39Z,"I confirm you are right\nMy test was only\n\n```\n[test]\nconnect=0\n```\n\nSo `connect=0` was ignored.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-434186329,434186329,
jkensik,2021-03-16T07:18:40Z,"I get an error about my bitcoin.conf file when I set the port setting in the regtest section. \n`Error: Config setting for -port only applied on regtest network when in [regtest] section.` \n This is my bitcoin.conf file\n\n`\nregtest=1\nserver=1\n\n[regtest]\nport=18333\n`\n\nthe error occurs even if you do not use the [regtest] section.",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-800018317,800018317,
laanwj,2021-03-16T18:40:06Z,"@jkensik you are responding to a closed issue from 2018, if you have a problem please report a new issue",https://github.com/bitcoin/bitcoin/pull/11862#issuecomment-800513233,800513233,
jnewbery,2018-03-06T22:46:24Z,This `else` isn't required. You can just drop through after the `if` block. (in the commit 4f3766f7d you can remove the code unit from around the LOCK in `ReadConfigStream`. It was only there so the lock was released before the call to `ClearDatadirCache()`.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172686778,172686778,src/util.cpp
jnewbery,2018-03-06T23:26:22Z,"style nit: if clauses should either be on the same line as the if conditional, or with braces (https://github.com/bitcoin/bitcoin/blob/master/doc/developer-notes.md)",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172695532,172695532,src/util.cpp
jnewbery,2018-03-07T14:16:23Z,"Is there any reason not to make this a namespace, rather than a class with a bunch of static functions?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854201,172854201,src/util.cpp
jnewbery,2018-03-07T14:17:00Z,style nit: new code should use snake_case for arguments and variables.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172854433,172854433,src/util.cpp
jnewbery,2018-03-07T14:50:35Z,"can replace the `readlines()` with `read()` and the write below with `f.write(""datadir="" + new_data_dir + ""\n"" + conf_file_contents)`. That's a bit more compact, but both are fine.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172865874,172865874,test/functional/feature_config_args.py
jnewbery,2018-03-07T15:02:47Z,Perhaps add a comment for why we need this function (and another comment lower down next to `m_setSectionOnlyArgs` explaining why those particular arguments shouldn't be applied to non-mainnet configs by default).,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172870069,172870069,src/util.cpp
jnewbery,2018-03-07T15:09:42Z,Does it makes more sense to have this as a file-level constant rather than a member of ArgsManager?,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172872217,172872217,src/util.cpp
jnewbery,2018-03-07T15:21:19Z,"This assert can be hit. Try running `feature_pruning.py` for example:\n\n```\nbitcoind: util.cpp:456: static std::__cxx11::string ArgsManagerHelper::SectionArg(const ArgsManager&, const string&): Assertion `strArg.length() > 1 && strArg[0] == '-'' failed.\n```",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172876541,172876541,src/util.cpp
jnewbery,2018-03-07T15:30:26Z,"Is it possible to log when a default section config is not used? It could be confusing for users who specify `-addnode`, `-connect`, etc in the default section, expecting the config to be picked up.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172879970,172879970,src/util.cpp
ajtowns,2018-03-07T17:35:07Z,"I believe this is catching a legitimate bug in the caller; confirming at the minute.\n\nEdit: Yeah it's a legit bug as far as I can see -- #12640",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923052,172923052,src/util.cpp
ajtowns,2018-03-07T17:36:24Z,"As in ""Warning: you're running on testnet, so your -addnode setting didn't get applied"" ?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172923435,172923435,src/util.cpp
laanwj,2018-03-07T17:38:13Z,"Or ""Warning: Setting X specified outside configuration section is only applied on mainnet""",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r172924025,172924025,src/util.cpp
ajtowns,2018-03-12T16:58:41Z,"Yeah: It's a class so that it can be declared a friend of ArgsManager, which allows the functions in the class to access private/protected members of ArgsManager.\n\nThese functions could just be private member functions of ArgsManager, but that would mean bumping util.h every time any of them need to be changed, which causes a lot of unnecessary recompilation.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r173870835,173870835,src/util.cpp
ajtowns,2018-03-28T14:20:55Z,"Having it be a member of ArgsManager makes it easier to deal with unit tests. But slightly longer term, they should be file-level constants in the files that use the arguments, rather than util.cpp; but that's future work.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r177766305,177766305,src/util.cpp
jnewbery,2018-04-09T15:29:48Z,Comment is wrong. This function returns a std::pair,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134254,180134254,src/util.cpp
jnewbery,2018-04-09T15:30:54Z,"Can you add a comment why you want the last item from m_override_args, but the first item from m_config_args below?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180134595,180134595,src/util.cpp
jnewbery,2018-04-09T15:38:07Z,"I prefer the more compact representation that was here before:\n\n```\nif (thing) return something;\nreturn something_else;\n```\n\nthan:\n\n```\nif (thing) {\n    return something;\n} else {\n    return something_else;\n}\n```\n\nI believe both are acceptable in our style guide.\n\nThis is just personal preference though, so feel free to ignore.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180136983,180136983,src/util.cpp
jnewbery,2018-04-09T15:54:15Z,I don't understand why this needs to move from `ParseParameters()`. It seems needlessly restrictive that `m_config_args` is cleared each time that `ReadConfigFile()` (and will need to be removed for #10267 for example).,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180142484,180142484,src/util.cpp
jnewbery,2018-04-09T17:34:42Z,This `val` is never used (callers to `InterpretNegatedOption()` just clear the `m_override_options` map if the function returns true). Suggest you don't set it here.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180172411,180172411,src/util.cpp
jnewbery,2018-04-09T17:39:52Z,"nit: I have a preference for early exit instead of deeply nested `if`s (ie you could change this to:\n\n```\n    if (key.substr(option_index, 2) != ""no"") return false;\n\n    bool bool_val = InterpretBool(val);\n    key.erase(option_index, 2);\n    if (!bool_val ) {\n        // Double negatives like -nofoo=0 are supported (but discouraged)\n        LogPrintf(""Warning: parsed potentially c",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180173826,180173826,src/util.cpp
jnewbery,2018-04-09T17:41:20Z,This comment isn't accurate anymore. Remove.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180174213,180174213,src/util.cpp
jnewbery,2018-04-09T17:45:15Z,Remove duplicate line,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180175281,180175281,src/test/util_tests.cpp
jnewbery,2018-04-09T18:31:39Z,"I'm not sure if it makes sense to call this from `SelectBaseParams()`. This function is about setting the blockchain parameters, not the global node config.\n\nDoesn't it make sense just to set `gArgs.m_section` directly at the end of `ReadConfigFile()`?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180188802,180188802,src/chainparamsbase.cpp
jnewbery,2018-04-09T18:36:58Z,nanonit: use `inline static` or `static inline` consistently :),https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190293,180190293,src/util.cpp
jnewbery,2018-04-09T18:39:16Z,"I think this variable could be named better (and commented). If I'm not mistaken, this is the network that the node has been configured to run on (mainnet, testnet or regtest). Would a better name be `m_network`?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180190921,180190921,src/util.h
jnewbery,2018-04-09T18:46:11Z,This will only return true if `am.m_section == CBaseChainParams::MAIN`. Why don't you explictly check for that above the loop and return?,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180192825,180192825,src/util.cpp
jnewbery,2018-04-09T18:51:51Z,You've removed this test that `GetChainName()` will throw if both `regtest` and `testnet` have been set. Is that intentional?,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180194407,180194407,src/test/util_tests.cpp
ajtowns,2018-04-10T09:04:23Z,"I'm not sure; the reason I'm doing it is backwards compatibility. The original reason might have just been a side-effect of using a single variable and updating it every time you see a command line argument, but only if it's not already set when you see a config file argument. I'll add a comment that you can re-nit though. :)",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180345293,180345293,src/util.cpp
ajtowns,2018-04-10T09:08:38Z,"Yeah, that style is a bit more consistent with other parts of the file.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180346496,180346496,src/util.cpp
ajtowns,2018-04-10T09:13:53Z,"I was thinking #10267 would involve an additional call to `ReadConfigStream()` from within `ReadConfigFile()` (ie, you read the config file, find out what additional file(s) to include, then read those, and possibly repeat). I think it makes more sense for `ParseParams()` to only clear the member variable it populates, and `ReadConfigFile()` to clear the member variable it populates. If a later PR",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180347949,180347949,src/util.cpp
ajtowns,2018-04-10T09:30:37Z,"I don't think so -- `ReadConfigFile()` only gets to know `-testnet` was set, you need to call `GetChainName()` to work out that means `chain==""test""`, and the place that's currently called is when passing the arguments to `SelectParams` or `SelectBaseParams`. Also, `SelectBaseParams` is already updating `globalChainBaseParams` which seems like ""global node config"" to me. :)\n\nChanging that migh",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180353015,180353015,src/chainparamsbase.cpp
ajtowns,2018-04-10T13:00:38Z,"No, I think that was a mistake while rebasing.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180410877,180410877,src/test/util_tests.cpp
ajtowns,2018-04-11T12:37:49Z,"Fair point, but I'm going to choose to ignore it :)",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r180737993,180737993,src/util.cpp
jnewbery,2018-04-12T19:45:10Z,"comment seems good, no nits from me :)",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181200231,181200231,src/util.cpp
jnewbery,2018-04-12T20:43:41Z,fine. Can wait for a future PR.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r181215858,181215858,src/chainparamsbase.cpp
ryanofsky,2018-04-18T20:13:57Z,boost::optional\<std::string> would be a more natural way to represent this.,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182554976,182554976,src/util.cpp
ryanofsky,2018-04-18T20:18:35Z,"Shouldn't a negated command line argument clear m_config_args too? As an example, if you had `arg=a` `arg=b` in config and `-arg=c -noarg -arg=d` on the command line, it would seem weird for the result to be `[a b d]` instead of `[d]`.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182556323,182556323,src/util.cpp
ryanofsky,2018-04-18T20:28:33Z,`emplace_back(std::move(val))` would be a little more efficient,https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182559119,182559119,src/util.cpp
ryanofsky,2018-04-18T20:36:01Z,"Would be slightly more efficiecnt to take a normal (non-reference) string argument, and std::move() it below to avoid a copy.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182561130,182561130,src/util.cpp
ryanofsky,2018-04-18T20:53:20Z,"It seems like code above this line is duplicating code in `ArgsManagerHelper::GetArg` in slightly inconsistent ways (passing getLast `[true, true]` to the two `GetArgHelper` calls instead of `[true, false]` and failing to acquire `cs_args`). Is there a reason for these inconsistencies and for duplicating code here instead of calling getArgs?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182565963,182565963,src/util.cpp
ajtowns,2018-04-18T21:21:18Z,"Doh, I thought about using std::optional, but it's post-C++11; didn't think to check for the boost variant, and it's even already in use in util.h.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182573333,182573333,src/util.cpp
ajtowns,2018-04-18T21:27:31Z,"Using `ArgsManagerHelper::GetArg` here would mean that calling `GetChainName()` a second (or third or..) time after `SelectParams(GetChainName())` could return a different result than the name of the chain actually being used if people do ridiculous things with their bitcoin.conf.\n\nThis should get cleaned up with some of the other config reworking that's going on though.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182574829,182574829,src/util.cpp
ajtowns,2018-04-18T21:32:24Z,"ParseParameters is always called prior to ReadConfigFile. Might be worth noting somewhere that you have to do things that way (though it isn't really a choice: if you specify the config file via `-conf`, you don't know what file to pass to ReadConfigFile until you've called ParseParameters).",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182576041,182576041,src/util.cpp
ajtowns,2018-04-18T21:37:30Z,"I think `GetArgHelper(m_config_args, net_arg, true)` probably should have been `, false)`, well spotted.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182577300,182577300,src/util.cpp
ryanofsky,2018-04-19T15:50:04Z,"https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182556323\n\n> ParseParameters is always called prior to ReadConfigFile\n\nSo this means the change I suggested wouldn't actually fix the bug. But you agree this is  introducing a bug that wasn't in @eklitzke's initial implementation from #12713?",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182795583,182795583,src/util.cpp
ryanofsky,2018-04-19T15:59:54Z,"> But you agree this is introducing a bug\n\nNever mind, this bug is actually present in #12713 too because of the initialization order. I guess I thought negated option tracking would provide a clean way to override config file list options instead of just appending to them, but I guess this isn't the way it works.",https://github.com/bitcoin/bitcoin/pull/11862#discussion_r182799105,182799105,src/util.cpp
