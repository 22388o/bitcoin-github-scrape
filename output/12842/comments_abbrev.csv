promag,2018-03-30T17:03:50Z,"In order to test the new check and error add:\n```diff\n--- a/src/rpc/blockchain.cpp\n+++ b/src/rpc/blockchain.cpp\n@@ -1619,6 +1619,8 @@ UniValue savemempool(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_MISC_ERROR, ""Currently dumping the mempool"");\n     }\n\n+    MilliSleep(10000);\n+\n     if (!g_is_mempool_loaded) {\n         throw JSONRPCError(RPC_MISC_ERROR, ""Th",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-377571335,377571335,
laanwj,2018-04-03T08:12:35Z,"After #12863 I'm even more convinced that this might be the wrong approach. Protecting access using a mutex instead of returning these kind of 'busy errors' would avoid having to implement retry-poll-loops client-side (including in the tests).\n\nIf you want to stick with this you'd at least need to define a new error code that means 'transient error', similar to `RPC_IN_WARMUP`. But I think pus",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378166282,378166282,
promag,2018-04-03T10:14:58Z,@laanwj indeed it's very arguable. I think it's preferable to have the client retrying than reserving resources on the server side. IMO having the client waiting is also not desirable because the client can wait indefinitely and also timeout (but then he can raise the timeout) and we would process the request anyway (?). Getting an error instead of waiting is also more informative and allows the c,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378200407,378200407,
laanwj,2018-04-03T11:17:01Z,"OTOH\n- Then the API wouldn't be changed. Users of `savemempool` can rely on the call working, or fatally failing.\n- Hanging indefinitely is a bug no matter what. If it takes too long, something is wrong.\n- Interrupt semantics usually require *less* resources than polling. In this case: sleeping on a mutex requires virtually no resources. Whereas repetitive RPC requests take up CPU cycles and",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378214925,378214925,
MarcoFalke,2018-04-03T16:03:14Z,"I think we had reports that loading the mempool took 1.5 hours or so, just noting without further comment.",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378303303,378303303,
promag,2018-04-03T22:25:58Z,"> Then the API wouldn't be changed. Users of savemempool can rely on the call working, or fatally failing.\n\nThe caller should always have error handling, and this new error would fall in his ""unkown error"".\n\n> Hanging indefinitely is a bug no matter what. If it takes too long, something is wrong.\n\nWe have calls that can hang a lot of time, for instance when the wallet is really big (as",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378418995,378418995,
sipa,2018-04-03T23:28:50Z,"I'm also more a fan of blocking until the existing save has finished. Given that no modifications in the mempool can happen in the mean time anyway (I think?), we could even just wait until the existing save operation finishes and then return from both RPC calls (without an additional save).",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378431421,378431421,
promag,2018-04-03T23:50:43Z,"> Given that no modifications in the mempool can happen in the mean time anyway\n\nActually it can, `DumpMempool` takes a copy of the mempool contents and then releases the lock to then write to file. So, while writing to disk, the mempool can change.",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-378435110,378435110,
promag,2018-06-07T14:04:45Z,"What should be done here? I've to address @conscott comment above, but I guess I should wait for more concept ACKs.",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-395432218,395432218,
luke-jr,2018-06-12T18:19:03Z,"I agree with @laanwj - it should just hold a lock on the file to avoid problems, but otherwise succeed.",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-396686016,396686016,
promag,2018-06-14T10:06:10Z,Rebased and updated to block/wait while there is another dump.,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-397242696,397242696,
promag,2018-06-15T10:44:59Z,@luke do you think the current code is enough?,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-397584303,397584303,
MarcoFalke,2018-06-15T13:12:13Z,utACK 35bdaf7489cf33d120b3c66f87067c2698ed2e8c,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-397615534,397615534,
DrahtBot,2018-08-10T12:38:17Z,"<!--5d09a71f8925f3f132321140b44b946d-->The last travis run for this pull request was 57 days ago and is thus outdated. To trigger a fresh travis build, this pull request should be closed and re-opened.",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-412069876,412069876,
promag,2018-10-20T10:14:06Z,@MarcoFalke @achow101 rebased on master and changed to `Mutex/LOCK` and static variable in `DumpMempool`.,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-431567683,431567683,
MarcoFalke,2018-10-24T12:06:48Z,re-utACK 585b47cfe133fae112782ad0a88fe25c71d465fa,https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-432628691,432628691,
laanwj,2018-10-24T13:20:26Z,"I really like this clean and simple solution\n\nutACK 585b47cfe133fae112782ad0a88fe25c71d465fa",https://github.com/bitcoin/bitcoin/pull/12842#issuecomment-432652988,432652988,
conscott,2018-04-02T06:08:28Z,"Nit: maybe instead, \n\n""`savemempool` already in progress""",https://github.com/bitcoin/bitcoin/pull/12842#discussion_r178492263,178492263,src/rpc/blockchain.cpp
promag,2018-04-02T08:43:49Z,Sounds better.,https://github.com/bitcoin/bitcoin/pull/12842#discussion_r178509357,178509357,src/rpc/blockchain.cpp
ajtowns,2018-09-18T13:25:05Z,"(a) Shouldn't this be a global mutex, since it's specific to the ""mempool.dat.new"" file whose path is based on the (global) GetDataDir()?\n(b) Why a std::mutex instead of a CCriticalSection?",https://github.com/bitcoin/bitcoin/pull/12842#discussion_r218429742,218429742,src/txmempool.h
MarcoFalke,2018-09-18T19:31:09Z,Why a `CCriticalSection` instead of a `Mutex`?,https://github.com/bitcoin/bitcoin/pull/12842#discussion_r218564955,218564955,src/txmempool.h
promag,2018-09-18T22:16:39Z,"a) Not sure why that matters. To reduce exposure the mutex could be a static variable in `DumpMempool()` function;\nb) we don't need a recursive mutex.",https://github.com/bitcoin/bitcoin/pull/12842#discussion_r218613270,218613270,src/txmempool.h
MarcoFalke,2018-09-19T00:08:06Z,"Could rebase on master, make the type `Mutex` and use `LOCK(...)` here?",https://github.com/bitcoin/bitcoin/pull/12842#discussion_r218632979,218632979,src/validation.cpp
ajtowns,2018-09-19T15:21:24Z,"a) Yeah, a static variable in/next to the `DumpMempool()` function was what I was thinking. I don't think it matters in practice though.\nb) More about trying to just use one set of locking primitives; Mutex/LOCK per MarcoFalke's suggestion would make more sense to me.",https://github.com/bitcoin/bitcoin/pull/12842#discussion_r218848417,218848417,src/txmempool.h
