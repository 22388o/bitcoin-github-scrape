[
  {
    "sha": "74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NGM2M2I2M2M0MmI1ZjEwZmJkNDI2Y2M4MmMxYjUyOWNmMWZkZmQ4",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-19T11:24:38Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-19T11:24:38Z"
      },
      "message": "[FOR LATER USE][WIP][Wallet]\u00a0add support for a flexible \"set of features\"",
      "tree": {
        "sha": "f7822a6b50a44d967a4d985c730e1a83d7d0191f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f7822a6b50a44d967a4d985c730e1a83d7d0191f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXjg4ZAAoJECnUvLZBb1PsecQQAKqoVG+4fK+XbiIA7fsFxOyA\nBVkwWG5qgdHIV9qHjyU5n58d8yOlzvx9Ch77xXmdizODFnh4Dk8OOLEF5YXGM7aS\n73HYTDha+7Bh09LcTHq1eKNgpShjAtInFHtNz4PjGc5NG15m2Zv2sFcg5cirQPsB\nLP+ZGo6+6c8LXHQ+OfAFnA6lviuQsACH6lSi4A1k2/NVxcEdzJkQKxaNrhHU3+CK\ngW4JR5ndiJhNR/hjFEypKBONcm3X2rDg9jXiXmc/YTdQVocQJg/K76Wc8dkTTYcj\nA9VC6Hj0Q70SnJnjs+Hhpx2iMA73d4Y50u0gB6ntAExu567rSvFZWZeZ33/+N0A5\naaqeIIW6OV2xjQGT2gUkh9iT5a2dNTAhUTxfk3axa0vgnc7Y+nrUw93zGJHfTVSE\np/p+xOfj44HfGVvEblUduNJP+TrhpmeTWpO0TR8kmDdcLwz1VZiAlbCct2xS7sw/\nfa3c5ukeE67RoMhCOeFkcKua6rMiPV27C92ixFehEGVmTPD25WJe/pIzlL2qyVck\neokrlEz6YuZZdFKeHUpxgVZdEdcOUz/YnnhoQG+AykVq+8SKCpHbgnoC2ZpyEiQw\nW+twkQA2bJnTmFdpXwNia+Flobr7nDqm2Ax76sVVdtMvRcYU9dD3T8GD5NxVMGY6\nr9LZl8q+lbR4/3G667z2\n=dGzr\n-----END PGP SIGNATURE-----",
        "payload": "tree f7822a6b50a44d967a4d985c730e1a83d7d0191f\nparent 5e3557b8e36308a27dbeb528569abe638c4d01dd\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1468927478 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1468927478 +0200\n\n[FOR LATER USE][WIP][Wallet]\u00a0add support for a flexible \"set of features\"\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5e3557b8e36308a27dbeb528569abe638c4d01dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5e3557b8e36308a27dbeb528569abe638c4d01dd"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 105,
      "deletions": 9
    },
    "files": [
      {
        "sha": "df64509fe95ac62b5abbdc888b7f2e92200fc81b",
        "filename": "src/wallet/test/wallet_test_fixture.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/test/wallet_test_fixture.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/test/wallet_test_fixture.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.cpp?ref=74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
        "patch": "@@ -11,7 +11,8 @@ WalletTestingSetup::WalletTestingSetup(const std::string& chainName):\n \n     bool fFirstRun;\n     pwalletMain = new CWallet(\"wallet_test.dat\");\n-    pwalletMain->LoadWallet(fFirstRun);\n+    std::set<std::string> missingFeatures;\n+    pwalletMain->LoadWallet(fFirstRun, missingFeatures);\n     RegisterValidationInterface(pwalletMain);\n \n     RegisterWalletRPCCommands(tableRPC);"
      },
      {
        "sha": "402df19011d25f36a013084e2f61d30a6e59ecfe",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 3,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
        "patch": "@@ -58,6 +58,12 @@ CFeeRate CWallet::fallbackFee = CFeeRate(DEFAULT_FALLBACK_FEE);\n \n const uint256 CMerkleTx::ABANDON_HASH(uint256S(\"0000000000000000000000000000000000000000000000000000000000000001\"));\n \n+const std::set<std::string> CWallet::implementedWalletFeatures {WalletFeatures::HD_WALLET};\n+\n+namespace WalletFeatures {\n+    const char *HD_WALLET=\"HD Wallet\";\n+};\n+\n /** @defgroup mapWallet\n  *\n  * @{\n@@ -371,6 +377,37 @@ bool CWallet::SetMinVersion(enum WalletFeature nVersion, CWalletDB* pwalletdbIn,\n     return true;\n }\n \n+bool CWallet::SetRequiredFeature(const std::string& requiredFeature)\n+{\n+    LOCK(cs_wallet);\n+    // only add the required feature if it's known by the wallet\n+    if (implementedWalletFeatures.find(requiredFeature) == implementedWalletFeatures.end())\n+        return false;\n+\n+    // only add the required feature if its not already present in the set\n+    if (requiredWalletFeatures.find(requiredFeature) != requiredWalletFeatures.end())\n+        return false;\n+\n+    requiredWalletFeatures.insert(requiredFeature);\n+\n+    // ensure this wallet.dat can only be opened by clients supporting FEATURE_FEATURESET\n+    SetMinVersion(FEATURE_FEATURESET);\n+\n+    // store the feature set (only happens if we have sucessfully added a feature)\n+    SetRequiredFeatureSet(requiredWalletFeatures);\n+    return true;\n+}\n+\n+bool CWallet::SetRequiredFeatureSet(const std::set<std::string>& featureSet, bool memonly)\n+{\n+    LOCK(cs_wallet);\n+    if (!memonly && !CWalletDB(strWalletFile).WriteWalletFeatures(featureSet))\n+        throw runtime_error(\"SetRequiredFeatureSet(): writing feature set failed\");\n+\n+    requiredWalletFeatures = featureSet;\n+    return true;\n+}\n+\n bool CWallet::SetMaxVersion(int nVersion)\n {\n     LOCK(cs_wallet); // nWalletVersion, nWalletMaxVersion\n@@ -2494,12 +2531,12 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, unsigned int nConfirmTarge\n \n \n \n-DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n+DBErrors CWallet::LoadWallet(bool& fFirstRunRet, std::set<std::string>& missingFeatures)\n {\n     if (!fFileBacked)\n         return DB_LOAD_OK;\n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this);\n+    DBErrors nLoadWalletRet = CWalletDB(strWalletFile,\"cr+\").LoadWallet(this, missingFeatures);\n     if (nLoadWalletRet == DB_NEED_REWRITE)\n     {\n         if (CDB::Rewrite(strWalletFile, \"\\x04pool\"))\n@@ -3250,7 +3287,8 @@ bool CWallet::InitLoadWallet()\n     int64_t nStart = GetTimeMillis();\n     bool fFirstRun = true;\n     CWallet *walletInstance = new CWallet(walletFile);\n-    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n+    std::set<std::string> missingFeatures;\n+    DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun, missingFeatures);\n     if (nLoadWalletRet != DB_LOAD_OK)\n     {\n         if (nLoadWalletRet == DB_CORRUPT)\n@@ -3264,6 +3302,15 @@ bool CWallet::InitLoadWallet()\n         else if (nLoadWalletRet == DB_TOO_NEW)\n             return InitError(strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"),\n                                walletFile, _(PACKAGE_NAME)));\n+        else if (nLoadWalletRet == DB_MISSING_FEATURE)\n+        {\n+            std::string strMissingFeatures;\n+            for (const std::string &missingFeature : missingFeatures) strMissingFeatures += missingFeature+\", \";\n+            if (strMissingFeatures.size() > 2)\n+                strMissingFeatures = strMissingFeatures.substr(0, strMissingFeatures.size()-2);\n+            return InitError(strprintf(_(\"Error loading %s: Wallet requires version of %s that supports %s\"),\n+                                       walletFile, _(PACKAGE_NAME), strMissingFeatures));\n+        }\n         else if (nLoadWalletRet == DB_NEED_REWRITE)\n         {\n             return InitError(strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), _(PACKAGE_NAME)));\n@@ -3297,6 +3344,10 @@ bool CWallet::InitLoadWallet()\n             // generate a new master key\n             CKey key;\n             key.MakeNewKey(true);\n+\n+            // ensure this wallet.dat can only be opened by clients supporting WalletFeatures (set of strings)\n+            walletInstance->SetRequiredFeature(WalletFeatures::HD_WALLET);\n+\n             if (!walletInstance->SetHDMasterKey(key))\n                 throw std::runtime_error(\"CWallet::GenerateNewKey(): Storing master key failed\");\n         }"
      },
      {
        "sha": "f3624bb6579dffbc535c3a41d171ca6b94edc883",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 24,
        "deletions": 2,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
        "patch": "@@ -78,9 +78,24 @@ enum WalletFeature\n     FEATURE_WALLETCRYPT = 40000, // wallet encryption\n     FEATURE_COMPRPUBKEY = 60000, // compressed public keys\n \n-    FEATURE_LATEST = 60000\n+    FEATURE_FEATURESET = 130000, // wallet supports distinguishable features with a set of strings\n+    FEATURE_LATEST = FEATURE_COMPRPUBKEY // FEATURE_FEATURESET is optional, use FEATURE_COMPRPUBKEY as latest version\n };\n \n+/**\n+ * We use string based wallet features which will allow older\n+ * clients to show at least a short string about the missing\n+ * feature\n+ */\n+namespace WalletFeatures {\n+\n+    /**\n+     * Wallet require HD feature\n+     */\n+    extern const char *HD_WALLET;\n+}\n+\n+\n \n /** A key pool entry */\n class CKeyPool\n@@ -580,6 +595,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n+    std::set<std::string> requiredWalletFeatures;\n+\n public:\n     /*\n      * Main wallet lock.\n@@ -802,7 +819,7 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetChange(const CTransaction& tx) const;\n     void SetBestChain(const CBlockLocator& loc);\n \n-    DBErrors LoadWallet(bool& fFirstRunRet);\n+    DBErrors LoadWallet(bool& fFirstRunRet, std::set<std::string>& missingFeatures);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n \n@@ -902,6 +919,11 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /* Set the current HD master key (will reset the chain child index counters) */\n     bool SetHDMasterKey(const CKey& key);\n     const CHDChain& GetHDChain() { return hdChain; }\n+\n+    bool SetRequiredFeature(const std::string& requiredFeature);\n+    bool SetRequiredFeatureSet(const std::set<std::string>& featureSet, bool memonly = false);\n+\n+    static const std::set<std::string> implementedWalletFeatures;\n };\n \n /** A key allocated from the key pool. */"
      },
      {
        "sha": "88bcb8e68f68812add14b51849367990cf22c1f1",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
        "patch": "@@ -622,7 +622,7 @@ static bool IsKeyType(string strType)\n             strType == \"mkey\" || strType == \"ckey\");\n }\n \n-DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n+DBErrors CWalletDB::LoadWallet(CWallet* pwallet, std::set<std::string>& missingFeatures)\n {\n     pwallet->vchDefaultKey = CPubKey();\n     CWalletScanState wss;\n@@ -638,6 +638,19 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n                 return DB_TOO_NEW;\n             pwallet->LoadMinVersion(nMinVersion);\n         }\n+        std::set<std::string> walletFeatures;\n+        if (Read((string)\"walletfeatures\", walletFeatures))\n+        {\n+            for (const std::string& requiredFeature : walletFeatures)\n+            {\n+                if (pwallet->implementedWalletFeatures.find(requiredFeature) == pwallet->implementedWalletFeatures.end())\n+                    missingFeatures.insert(requiredFeature);\n+            }\n+            if (missingFeatures.size() > 0)\n+                return DB_MISSING_FEATURE;\n+            if (!pwallet->SetRequiredFeatureSet(walletFeatures, true))\n+                return DB_CORRUPT;\n+        }\n \n         // Get cursor\n         Dbc* pcursor = GetCursor();\n@@ -1020,3 +1033,9 @@ bool CWalletDB::WriteHDChain(const CHDChain& chain)\n     nWalletDBUpdated++;\n     return Write(std::string(\"hdchain\"), chain);\n }\n+\n+bool CWalletDB::WriteWalletFeatures(const std::set<std::string>& walletFeatures)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"walletfeatures\"), walletFeatures);\n+}"
      },
      {
        "sha": "5859b23469b3685b1f3ce31436ffd112eabe7a48",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=74c63b63c42b5f10fbd426cc82c1b529cf1fdfd8",
        "patch": "@@ -38,7 +38,8 @@ enum DBErrors\n     DB_NONCRITICAL_ERROR,\n     DB_TOO_NEW,\n     DB_LOAD_FAIL,\n-    DB_NEED_REWRITE\n+    DB_NEED_REWRITE,\n+    DB_MISSING_FEATURE\n };\n \n /* simple HD chain data model */\n@@ -168,7 +169,7 @@ class CWalletDB : public CDB\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet* pwallet);\n-    DBErrors LoadWallet(CWallet* pwallet);\n+    DBErrors LoadWallet(CWallet* pwallet, std::set<std::string>& missingFeatures);\n     DBErrors FindWalletTx(CWallet* pwallet, std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(CWallet* pwallet, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(CWallet* pwallet, std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n@@ -178,6 +179,8 @@ class CWalletDB : public CDB\n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);\n \n+    bool WriteWalletFeatures(const std::set<std::string>& walletFeatures);\n+\n private:\n     CWalletDB(const CWalletDB&);\n     void operator=(const CWalletDB&);"
      }
    ]
  }
]