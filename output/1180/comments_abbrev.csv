gavinandresen,2012-05-02T15:59:22Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/1180#issuecomment-5464976,5464976,
sipa,2012-05-03T01:16:08Z,Survives my tests. ACK.\n,https://github.com/bitcoin/bitcoin/pull/1180#issuecomment-5476481,5476481,
jgarzik,2012-05-08T20:18:55Z,"It is definitely a valid point that "" if (hSocketMax > (SOCKET) -1)"" is an imperfect test.  Probably should use != etc.\n\nHowever, that can be addressed in a separate pull request.  This pull req does not change the test itself...\n",https://github.com/bitcoin/bitcoin/pull/1180#issuecomment-5585219,5585219,
Diapolo,2012-05-08T20:30:32Z,@jgarzik Will you do that mentioned pull above or shall I do it tomorrow?\n,https://github.com/bitcoin/bitcoin/pull/1180#issuecomment-5585505,5585505,
jgarzik,2012-05-08T20:38:55Z,feel free to do so...\n,https://github.com/bitcoin/bitcoin/pull/1180#issuecomment-5585702,5585702,
laanwj,2012-05-03T05:56:15Z,"We could define a constant for (unsigned int) -1, as it's a magic marker value we use in many places.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r766471,766471,src/main.cpp
laanwj,2012-05-03T05:59:39Z,"Is this code path ever followed? I mean, will an unsigned integer ever be larger than (unsigned) -1?\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r766482,766482,src/net.cpp
sipa,2012-05-03T12:51:19Z,Quite sure it won't; maybe on other platforms?\n,https://github.com/bitcoin/bitcoin/pull/1180#discussion_r767708,767708,src/net.cpp
laanwj,2012-05-04T13:24:17Z,"Fixing signed/unsigned comparison warnings is a good opportunity to see if there's illogical/insecure stuff. But in this case, I'm not sure what was the intended behavior.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r774047,774047,src/net.cpp
Diapolo,2012-05-04T16:41:47Z,"hSocketMax is 0 or set by some magic, happening in the FD_SET macro if I read correctly.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775248,775248,src/net.cpp
Diapolo,2012-05-04T16:45:16Z,"That would be something like that loop typedef, which we considered ""bad"", right?\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775269,775269,src/main.cpp
Diapolo,2012-05-04T16:47:50Z,It was introduced by this commit from @TheBlueMatt:\nhttps://github.com/bitcoin/bitcoin/commit/c6710c7a70658536ab0217dff18a45622ea08680\n,https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775287,775287,src/net.cpp
sipa,2012-05-04T16:48:49Z,"socket() returns -1 in case of error, and the constant INVALID_SOCKET reflects this. Not sure if it's related.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775295,775295,src/net.cpp
Diapolo,2012-05-04T16:50:46Z,On Windows (winsock2.h) SOCKET_ERROR has the value -1.\nSo should it perhaps read (hSocketMax != INVALID_SOCKET && hSocketMax != SOCKET_ERROR)?\n,https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775307,775307,src/net.cpp
laanwj,2012-05-04T17:17:39Z,"If INVALID_SOCKET and SOCKET_ERROR are both -1, there's no need to compare against both. I agree replacing `>` with `!=` is sensible, though.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775482,775482,src/net.cpp
Diapolo,2012-05-04T17:20:56Z,That's why I used both:\n\n#define INVALID_SOCKET (SOCKET)(~0)\n#define SOCKET_ERROR    (-1)\n,https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775510,775510,src/net.cpp
laanwj,2012-05-04T17:29:53Z,"Both evaluate to binary all-ones and are equivalent on all architectures with two's complement notation for signed numbers (ie, at least all that  windows supports.. and certainly that bitcoin supports).\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775576,775576,src/net.cpp
Diapolo,2012-05-04T17:48:34Z,"Didn't know that, but I think the names are more speaking than a simple -1 :), look how we guessed what that -1 means here. Would not have happend if we used the error codes.\n",https://github.com/bitcoin/bitcoin/pull/1180#discussion_r775694,775694,src/net.cpp
