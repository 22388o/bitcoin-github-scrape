[
  {
    "sha": "ef98b458ebceea63deeea3ae448541a55f57de03",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplZjk4YjQ1OGViY2VlYTYzZGVlZWEzYWU0NDg1NDFhNTVmNTdkZTAz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-16T14:52:51Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-02T12:58:29Z"
      },
      "message": "configure: Clone ax_boost_chrono to ax_boost_process",
      "tree": {
        "sha": "bc1a5820ddbc93e4671f7209ebd9f3f8e8c07056",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc1a5820ddbc93e4671f7209ebd9f3f8e8c07056"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ef98b458ebceea63deeea3ae448541a55f57de03",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef98b458ebceea63deeea3ae448541a55f57de03",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ef98b458ebceea63deeea3ae448541a55f57de03",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef98b458ebceea63deeea3ae448541a55f57de03/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "41fa2926d86a57c9623d34debef20746ee2f454a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/41fa2926d86a57c9623d34debef20746ee2f454a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/41fa2926d86a57c9623d34debef20746ee2f454a"
      }
    ],
    "stats": {
      "total": 115,
      "additions": 115,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0479fe6648e4c231dc0c35f4407323e002307e0b",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef98b458ebceea63deeea3ae448541a55f57de03/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef98b458ebceea63deeea3ae448541a55f57de03/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=ef98b458ebceea63deeea3ae448541a55f57de03",
        "patch": "@@ -0,0 +1,114 @@\n+# SYNOPSIS\n+#\n+#   AX_BOOST_PROCESS\n+#\n+# DESCRIPTION\n+#\n+#   Test for Process library from the Boost C++ libraries. The macro requires\n+#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n+#   <http://randspringer.de/boost/index.html>.\n+#\n+#   This macro calls:\n+#\n+#     AC_SUBST(BOOST_PROCESS_LIB)\n+#\n+#   And sets:\n+#\n+#     HAVE_BOOST_PROCESS\n+#\n+# LICENSE\n+#\n+#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n+#\n+#   Copying and distribution of this file, with or without modification, are\n+#   permitted in any medium without royalty provided the copyright notice\n+#   and this notice are preserved. This file is offered as-is, without any\n+#   warranty.\n+\n+#serial 4\n+\n+AC_DEFUN([AX_BOOST_PROCESS],\n+[\n+\tAC_ARG_WITH([boost-process],\n+\tAS_HELP_STRING([--with-boost-process@<:@=special-lib@:>@],\n+                   [use the Process library from boost - it is possible to specify a certain library for the linker\n+                        e.g. --with-boost-process=boost_process-gcc-mt ]),\n+        [\n+        if test \"$withval\" = \"no\"; then\n+\t\t\twant_boost=\"no\"\n+        elif test \"$withval\" = \"yes\"; then\n+            want_boost=\"yes\"\n+            ax_boost_user_process_lib=\"\"\n+        else\n+\t\t    want_boost=\"yes\"\n+\t\tax_boost_user_process_lib=\"$withval\"\n+\t\tfi\n+        ],\n+        [want_boost=\"yes\"]\n+\t)\n+\n+\tif test \"x$want_boost\" = \"xyes\"; then\n+        AC_REQUIRE([AC_PROG_CC])\n+        AC_REQUIRE([AC_CANONICAL_BUILD])\n+\t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n+\t\tCPPFLAGS=\"$CPPFLAGS $BOOST_CPPFLAGS\"\n+\t\texport CPPFLAGS\n+\n+\t\tLDFLAGS_SAVED=\"$LDFLAGS\"\n+\t\tLDFLAGS=\"$LDFLAGS $BOOST_LDFLAGS\"\n+\t\texport LDFLAGS\n+\n+        AC_CACHE_CHECK(whether the Boost::Process library is available,\n+\t\t\t\t\t   ax_cv_boost_process,\n+        [AC_LANG_PUSH([C++])\n+\t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\n+\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n+                                   [[boost::process::child* child = new boost::process::child; delete child;]])],\n+                   ax_cv_boost_process=yes, ax_cv_boost_process=no)\n+\t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n+             AC_LANG_POP([C++])\n+\t\t])\n+\t\tif test \"x$ax_cv_boost_process\" = \"xyes\"; then\n+\t\t\tAC_SUBST(BOOST_CPPFLAGS)\n+\n+\t\t\tAC_DEFINE(HAVE_BOOST_PROCESS,,[define if the Boost::Process library is available])\n+            BOOSTLIBDIR=`echo $BOOST_LDFLAGS | sed -e 's/@<:@^\\/@:>@*//'`\n+\n+\t\t\tLDFLAGS_SAVE=$LDFLAGS\n+            if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n+                for libextension in `ls $BOOSTLIBDIR/libboost_process*.so* $BOOSTLIBDIR/libboost_process*.dylib* $BOOSTLIBDIR/libboost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_process.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                if test \"x$link_process\" != \"xyes\"; then\n+                for libextension in `ls $BOOSTLIBDIR/boost_process*.dll* $BOOSTLIBDIR/boost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_process.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                     ax_lib=${libextension}\n+\t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n+                                 [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                 [link_process=\"no\"])\n+\t\t\t\tdone\n+                fi\n+\n+            else\n+               for ax_lib in $ax_boost_user_process_lib boost_process-$ax_boost_user_process_lib; do\n+\t\t\t\t      AC_CHECK_LIB($ax_lib, exit,\n+                                   [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n+                                   [link_process=\"no\"])\n+                  done\n+\n+            fi\n+            if test \"x$ax_lib\" = \"x\"; then\n+                AC_MSG_ERROR(Could not find a version of the library!)\n+            fi\n+\t\t\tif test \"x$link_process\" = \"xno\"; then\n+\t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)\n+\t\t\tfi\n+\t\tfi\n+\n+\t\tCPPFLAGS=\"$CPPFLAGS_SAVED\"\n+\tLDFLAGS=\"$LDFLAGS_SAVED\"\n+\tfi\n+])"
      },
      {
        "sha": "f5bb23bb6f5faaa9a0c70c624ee59d301f3ec738",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ef98b458ebceea63deeea3ae448541a55f57de03/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ef98b458ebceea63deeea3ae448541a55f57de03/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=ef98b458ebceea63deeea3ae448541a55f57de03",
        "patch": "@@ -1140,6 +1140,7 @@ fi\n AX_BOOST_SYSTEM\n AX_BOOST_FILESYSTEM\n AX_BOOST_THREAD\n+AX_BOOST_PROCESS\n \n dnl Boost 1.56 through 1.62 allow using std::atomic instead of its own atomic\n dnl counter implementations. In 1.63 and later the std::atomic approach is default."
      }
    ]
  },
  {
    "sha": "3681d4fc59a3837aabe15b903a3923e0387a307f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjgxZDRmYzU5YTM4MzdhYWJlMTViOTAzYTM5MjNlMDM4N2EzMDdm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-15T20:15:43Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-02T12:58:29Z"
      },
      "message": "torcontrol: Launch a private Tor instance when not already running",
      "tree": {
        "sha": "ff8b50b6b8a3cd3f5ee0d720d59aaff88e517a84",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff8b50b6b8a3cd3f5ee0d720d59aaff88e517a84"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3681d4fc59a3837aabe15b903a3923e0387a307f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3681d4fc59a3837aabe15b903a3923e0387a307f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3681d4fc59a3837aabe15b903a3923e0387a307f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3681d4fc59a3837aabe15b903a3923e0387a307f/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ef98b458ebceea63deeea3ae448541a55f57de03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ef98b458ebceea63deeea3ae448541a55f57de03",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ef98b458ebceea63deeea3ae448541a55f57de03"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 128,
      "deletions": 11
    },
    "files": [
      {
        "sha": "c8e6c35188f161ccec0f2663fe60eb4bec8ccb94",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3681d4fc59a3837aabe15b903a3923e0387a307f/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3681d4fc59a3837aabe15b903a3923e0387a307f/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=3681d4fc59a3837aabe15b903a3923e0387a307f",
        "patch": "@@ -434,6 +434,9 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-timeout=<n>\", strprintf(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\", DEFAULT_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peertimeout=<n>\", strprintf(\"Specify p2p connection timeout in seconds. This option determines the amount of time a peer may be inactive before the connection to it is dropped. (minimum: 1, default: %d)\", DEFAULT_PEER_CONNECT_TIMEOUT), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-torcontrol=<ip>:<port>\", strprintf(\"Tor control port to use if onion listening enabled (default: %s)\", DEFAULT_TOR_CONTROL), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+#ifdef HAVE_BOOST_PROCESS\n+    gArgs.AddArg(\"-torexecute=<command>\", strprintf(\"Tor command to use if not already running (default: %s)\", DEFAULT_TOR_EXECUTE), ArgsManager::ALLOW_ANY, OptionsCategory::CONNECTION);\n+#endif\n     gArgs.AddArg(\"-torpassword=<pass>\", \"Tor control port password (default: empty)\", ArgsManager::ALLOW_ANY | ArgsManager::SENSITIVE, OptionsCategory::CONNECTION);\n #ifdef USE_UPNP\n #if USE_UPNP"
      },
      {
        "sha": "7aa176c0bba6da91385896d1c13058cd1e80df74",
        "filename": "src/torcontrol.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 11,
        "changes": 134,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3681d4fc59a3837aabe15b903a3923e0387a307f/src/torcontrol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3681d4fc59a3837aabe15b903a3923e0387a307f/src/torcontrol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.cpp?ref=3681d4fc59a3837aabe15b903a3923e0387a307f",
        "patch": "@@ -11,6 +11,7 @@\n #include <util/system.h>\n #include <crypto/hmac_sha256.h>\n \n+#include <chrono>\n #include <vector>\n #include <deque>\n #include <set>\n@@ -20,6 +21,9 @@\n #include <boost/algorithm/string/split.hpp>\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/replace.hpp>\n+#ifdef HAVE_BOOST_PROCESS\n+#include <boost/process.hpp>\n+#endif\n \n #include <event2/bufferevent.h>\n #include <event2/buffer.h>\n@@ -29,6 +33,7 @@\n \n /** Default control port */\n const std::string DEFAULT_TOR_CONTROL = \"127.0.0.1:9051\";\n+const std::string DEFAULT_TOR_EXECUTE = \"tor\";\n /** Tor cookie size (from control-spec.txt) */\n static const int TOR_COOKIE_SIZE = 32;\n /** Size of client/server nonce for SAFECOOKIE */\n@@ -73,6 +78,7 @@ class TorControlConnection\n public:\n     typedef std::function<void(TorControlConnection&)> ConnectionCB;\n     typedef std::function<void(TorControlConnection &,const TorControlReply &)> ReplyHandlerCB;\n+    static void IgnoreReplyHandler(TorControlConnection &, const TorControlReply &);\n \n     /** Create a new TorControlConnection.\n      */\n@@ -97,7 +103,7 @@ class TorControlConnection\n      * A trailing CRLF is automatically added.\n      * Return true on success.\n      */\n-    bool Command(const std::string &cmd, const ReplyHandlerCB& reply_handler);\n+    bool Command(const std::string &cmd, const ReplyHandlerCB& reply_handler = IgnoreReplyHandler);\n \n     /** Response handlers for async replies */\n     boost::signals2::signal<void(TorControlConnection &,const TorControlReply &)> async_handler;\n@@ -131,6 +137,10 @@ TorControlConnection::~TorControlConnection()\n         bufferevent_free(b_conn);\n }\n \n+void TorControlConnection::IgnoreReplyHandler(TorControlConnection &a, const TorControlReply &b)\n+{\n+}\n+\n void TorControlConnection::readcb(struct bufferevent *bev, void *ctx)\n {\n     TorControlConnection *self = static_cast<TorControlConnection*>(ctx);\n@@ -410,7 +420,7 @@ static bool WriteBinaryFile(const fs::path &filename, const std::string &data)\n class TorController\n {\n public:\n-    TorController(struct event_base* base, const std::string& target);\n+    TorController(struct event_base* base, const std::string& target, const std::string& execute);\n     ~TorController();\n \n     /** Get name of file to store private key in */\n@@ -420,13 +430,19 @@ class TorController\n     void Reconnect();\n private:\n     struct event_base* base;\n-    std::string target;\n+    std::string m_connect_target;\n+    std::string m_current_target;\n     TorControlConnection conn;\n     std::string private_key;\n     std::string service_id;\n+    bool m_try_exec{true};\n     bool reconnect;\n     struct event *reconnect_ev;\n     float reconnect_timeout;\n+    std::string m_execute{DEFAULT_TOR_EXECUTE};\n+#ifdef HAVE_BOOST_PROCESS\n+    boost::process::child *m_process{nullptr};\n+#endif\n     CService service;\n     /** Cookie for SAFECOOKIE auth */\n     std::vector<uint8_t> cookie;\n@@ -448,17 +464,21 @@ class TorController\n \n     /** Callback for reconnect timer */\n     static void reconnect_cb(evutil_socket_t fd, short what, void *arg);\n+\n+    std::string LaunchTor();\n };\n \n-TorController::TorController(struct event_base* _base, const std::string& _target):\n+TorController::TorController(struct event_base* _base, const std::string& _target, const std::string& execute):\n     base(_base),\n-    target(_target), conn(base), reconnect(true), reconnect_ev(0),\n-    reconnect_timeout(RECONNECT_TIMEOUT_START)\n+    m_connect_target(_target), conn(base), reconnect(true), reconnect_ev(0),\n+    reconnect_timeout(RECONNECT_TIMEOUT_START),\n+    m_execute(execute)\n {\n     reconnect_ev = event_new(base, -1, 0, reconnect_cb, this);\n     if (!reconnect_ev)\n         LogPrintf(\"tor: Failed to create event for reconnection: out of memory?\\n\");\n     // Start connection attempts immediately\n+    m_current_target = _target;\n     if (!conn.Connect(_target, std::bind(&TorController::connected_cb, this, std::placeholders::_1),\n          std::bind(&TorController::disconnected_cb, this, std::placeholders::_1) )) {\n         LogPrintf(\"tor: Initiating connection to Tor control port %s failed\\n\", _target);\n@@ -480,6 +500,12 @@ TorController::~TorController()\n     if (service.IsValid()) {\n         RemoveLocal(service);\n     }\n+#ifdef HAVE_BOOST_PROCESS\n+    if (m_process) {\n+        conn.Command(\"SIGNAL SHUTDOWN\");\n+        delete m_process;\n+    }\n+#endif\n }\n \n void TorController::add_onion_cb(TorControlConnection& _conn, const TorControlReply& reply)\n@@ -522,9 +548,20 @@ void TorController::auth_cb(TorControlConnection& _conn, const TorControlReply&\n     if (reply.code == 250) {\n         LogPrint(BCLog::TOR, \"tor: Authentication successful\\n\");\n \n+#ifdef HAVE_BOOST_PROCESS\n+        if (m_process) {\n+            _conn.Command(\"TAKEOWNERSHIP\");\n+        }\n+#endif\n+\n         // Now that we know Tor is running setup the proxy for onion addresses\n         // if -onion isn't set to something else.\n-        if (gArgs.GetArg(\"-onion\", \"\") == \"\") {\n+        // NOTE: Our own private Tor doesn't do SOCKS, so don't configure it\n+        if (gArgs.GetArg(\"-onion\", \"\") == \"\"\n+#ifdef HAVE_BOOST_PROCESS\n+            && !m_process\n+#endif\n+        ) {\n             CService resolved(LookupNumeric(\"127.0.0.1\", 9050));\n             proxyType addrOnion = proxyType(resolved, true);\n             SetProxy(NET_ONION, addrOnion);\n@@ -681,22 +718,91 @@ void TorController::protocolinfo_cb(TorControlConnection& _conn, const TorContro\n \n void TorController::connected_cb(TorControlConnection& _conn)\n {\n+    m_try_exec = false;\n     reconnect_timeout = RECONNECT_TIMEOUT_START;\n     // First send a PROTOCOLINFO command to figure out what authentication is expected\n     if (!_conn.Command(\"PROTOCOLINFO 1\", std::bind(&TorController::protocolinfo_cb, this, std::placeholders::_1, std::placeholders::_2)))\n         LogPrintf(\"tor: Error sending initial protocolinfo command\\n\");\n }\n \n+std::string TorController::LaunchTor()\n+{\n+#ifdef HAVE_BOOST_PROCESS\n+    fs::path tor_datadir = GetDataDir() / \"tor\";\n+    std::string controlport_env_filepath = (tor_datadir / \"controlport.env\").string();\n+    std::remove(controlport_env_filepath.c_str());\n+\n+    if (m_process) {\n+        m_process->terminate();\n+        delete m_process;\n+        m_process = nullptr;\n+    }\n+\n+    boost::process::opstream in;\n+    try {\n+        m_process = new boost::process::child(m_execute + \" -f -\", boost::process::std_in < in);\n+    } catch (...) {\n+        LogPrint(BCLog::TOR, \"tor: Failed to execute Tor process\\n\");\n+        throw;\n+    }\n+    in << \"SOCKSPort 0\" << std::endl;\n+    in << \"DataDirectory \" << tor_datadir.string() << std::endl;\n+    in << \"ControlPort auto\" << std::endl;\n+    in << \"ControlPortWriteToFile \" << controlport_env_filepath << std::endl;\n+    in << \"CookieAuthentication 1\" << std::endl;\n+    in.pipe().close();\n+\n+    while (!fs::exists(controlport_env_filepath)) {\n+        if (!m_process->running()) {\n+            LogPrint(BCLog::TOR, \"tor: Tor process died before making control port file\\n\");\n+            throw std::runtime_error(\"tor process died\");\n+        }\n+        std::this_thread::sleep_for(std::chrono::seconds(1));\n+    }\n+\n+    std::ifstream controlport_file(controlport_env_filepath);\n+    std::string portline;\n+    controlport_file >> portline;\n+    if (portline.compare(0, 5, \"PORT=\")) {\n+        LogPrint(BCLog::TOR, \"tor: Unrecognized control port line in file\\n\");\n+        m_process->terminate();\n+        delete m_process;\n+        m_process = nullptr;\n+        throw std::runtime_error(\"port line unrecognized\");\n+    }\n+\n+    return portline.substr(5);\n+#else\n+    throw std::runtime_error(\"not supported\");\n+#endif\n+}\n+\n void TorController::disconnected_cb(TorControlConnection& _conn)\n {\n     // Stop advertising service when disconnected\n     if (service.IsValid())\n         RemoveLocal(service);\n     service = CService();\n+\n+#ifdef HAVE_BOOST_PROCESS\n+    if (m_try_exec && !m_execute.empty()) {\n+        LogPrint(BCLog::TOR, \"tor: Not connected to Tor control port %s, trying to launch via %s\\n\", m_current_target, m_execute);\n+        try {\n+            m_current_target = LaunchTor();\n+            Reconnect();\n+            return;\n+        } catch (...) {\n+            // fall through to normal reconnect logic\n+        }\n+    }\n+#endif\n+\n     if (!reconnect)\n         return;\n \n-    LogPrint(BCLog::TOR, \"tor: Not connected to Tor control port %s, trying to reconnect\\n\", target);\n+    LogPrint(BCLog::TOR, \"tor: Not connected to Tor control port %s, trying to reconnect in %s seconds\\n\", m_current_target, reconnect_timeout);\n+    m_current_target = m_connect_target;\n+    m_try_exec = true;  // if this fails\n \n     // Single-shot timer for reconnect. Use exponential backoff.\n     struct timeval time = MillisToTimeval(int64_t(reconnect_timeout * 1000.0));\n@@ -710,9 +816,9 @@ void TorController::Reconnect()\n     /* Try to reconnect and reestablish if we get booted - for example, Tor\n      * may be restarting.\n      */\n-    if (!conn.Connect(target, std::bind(&TorController::connected_cb, this, std::placeholders::_1),\n+    if (!conn.Connect(m_current_target, std::bind(&TorController::connected_cb, this, std::placeholders::_1),\n          std::bind(&TorController::disconnected_cb, this, std::placeholders::_1) )) {\n-        LogPrintf(\"tor: Re-initiating connection to Tor control port %s failed\\n\", target);\n+        LogPrintf(\"tor: Re-initiating connection to Tor control port %s failed\\n\", m_current_target);\n     }\n }\n \n@@ -733,7 +839,13 @@ static std::thread torControlThread;\n \n static void TorControlThread()\n {\n-    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL));\n+    std::string execute_command = gArgs.GetArg(\"-torexecute\", DEFAULT_TOR_EXECUTE);\n+    if (execute_command == \"1\") {\n+        execute_command = DEFAULT_TOR_EXECUTE;\n+    } else if (execute_command == \"0\") {\n+        execute_command.clear();\n+    }\n+    TorController ctrl(gBase, gArgs.GetArg(\"-torcontrol\", DEFAULT_TOR_CONTROL), execute_command);\n \n     event_base_dispatch(gBase);\n }"
      },
      {
        "sha": "d3bbc99d00735490bf7d23936396d47aa0c54a46",
        "filename": "src/torcontrol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3681d4fc59a3837aabe15b903a3923e0387a307f/src/torcontrol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3681d4fc59a3837aabe15b903a3923e0387a307f/src/torcontrol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/torcontrol.h?ref=3681d4fc59a3837aabe15b903a3923e0387a307f",
        "patch": "@@ -10,6 +10,7 @@\n \n \n extern const std::string DEFAULT_TOR_CONTROL;\n+extern const std::string DEFAULT_TOR_EXECUTE;\n static const bool DEFAULT_LISTEN_ONION = true;\n \n void StartTorControl();"
      },
      {
        "sha": "7f11bddfbfcdc876ebf018e7b15f0400e605ec4f",
        "filename": "test/lint/lint-includes.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3681d4fc59a3837aabe15b903a3923e0387a307f/test/lint/lint-includes.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3681d4fc59a3837aabe15b903a3923e0387a307f/test/lint/lint-includes.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-includes.sh?ref=3681d4fc59a3837aabe15b903a3923e0387a307f",
        "patch": "@@ -63,6 +63,7 @@ EXPECTED_BOOST_INCLUDES=(\n     boost/optional.hpp\n     boost/preprocessor/cat.hpp\n     boost/preprocessor/stringize.hpp\n+    boost/process.hpp\n     boost/signals2/connection.hpp\n     boost/signals2/last_value.hpp\n     boost/signals2/signal.hpp"
      }
    ]
  },
  {
    "sha": "69bd8314fb7d485b675af1eccca99b5641182132",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2OWJkODMxNGZiN2Q0ODViNjc1YWYxZWNjY2E5OWI1NjQxMTgyMTMy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2019-02-17T01:54:33Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-02T12:58:29Z"
      },
      "message": "net: Allow AddLocal of Tor addresses even if we cannot reach Tor outbound",
      "tree": {
        "sha": "675e5cc8ec50ada645f9c5abd2fadd4de8b83cfb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/675e5cc8ec50ada645f9c5abd2fadd4de8b83cfb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/69bd8314fb7d485b675af1eccca99b5641182132",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bd8314fb7d485b675af1eccca99b5641182132",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/69bd8314fb7d485b675af1eccca99b5641182132",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bd8314fb7d485b675af1eccca99b5641182132/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3681d4fc59a3837aabe15b903a3923e0387a307f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3681d4fc59a3837aabe15b903a3923e0387a307f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3681d4fc59a3837aabe15b903a3923e0387a307f"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1950a7f61e185ad8532b39db51b6d9ef1e3102ec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/69bd8314fb7d485b675af1eccca99b5641182132/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/69bd8314fb7d485b675af1eccca99b5641182132/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=69bd8314fb7d485b675af1eccca99b5641182132",
        "patch": "@@ -214,7 +214,8 @@ bool AddLocal(const CService& addr, int nScore)\n     if (!fDiscover && nScore < LOCAL_MANUAL)\n         return false;\n \n-    if (!IsReachable(addr))\n+    // IPv4 and IPv6 cannot be connected to unless their networks are reachable, but Tor is not necessarily bidirectional\n+    if (!(IsReachable(addr) || addr.IsTor()))\n         return false;\n \n     LogPrintf(\"AddLocal(%s,%i)\\n\", addr.ToString(), nScore);"
      }
    ]
  },
  {
    "sha": "f2add182487535b9bf7684ed61d5b101280bb72d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmFkZDE4MjQ4NzUzNWI5YmY3Njg0ZWQ2MWQ1YjEwMTI4MGJiNzJk",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-02T12:57:46Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2020-04-02T12:58:29Z"
      },
      "message": "build: Update Boost::Process check to latest from autoconf-archive",
      "tree": {
        "sha": "ec62a23cbd100b74da8a60a71777f92f125b40be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec62a23cbd100b74da8a60a71777f92f125b40be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2add182487535b9bf7684ed61d5b101280bb72d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2add182487535b9bf7684ed61d5b101280bb72d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2add182487535b9bf7684ed61d5b101280bb72d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2add182487535b9bf7684ed61d5b101280bb72d/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "69bd8314fb7d485b675af1eccca99b5641182132",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/69bd8314fb7d485b675af1eccca99b5641182132",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/69bd8314fb7d485b675af1eccca99b5641182132"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "5d20e67464fcde6ee00f2582607e59f0759115b8",
        "filename": "build-aux/m4/ax_boost_process.m4",
        "status": "modified",
        "additions": 23,
        "deletions": 16,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2add182487535b9bf7684ed61d5b101280bb72d/build-aux/m4/ax_boost_process.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2add182487535b9bf7684ed61d5b101280bb72d/build-aux/m4/ax_boost_process.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_boost_process.m4?ref=f2add182487535b9bf7684ed61d5b101280bb72d",
        "patch": "@@ -1,12 +1,16 @@\n+# ===========================================================================\n+#     https://www.gnu.org/software/autoconf-archive/ax_boost_process.html\n+# ===========================================================================\n+#\n # SYNOPSIS\n #\n #   AX_BOOST_PROCESS\n #\n # DESCRIPTION\n #\n-#   Test for Process library from the Boost C++ libraries. The macro requires\n-#   a preceding call to AX_BOOST_BASE. Further documentation is available at\n-#   <http://randspringer.de/boost/index.html>.\n+#   Test for Process library from the Boost C++ libraries. The macro\n+#   requires a preceding call to AX_BOOST_BASE. Further documentation is\n+#   available at <http://randspringer.de/boost/index.html>.\n #\n #   This macro calls:\n #\n@@ -18,14 +22,16 @@\n #\n # LICENSE\n #\n-#   Copyright (c) 2012 Xiyue Deng <manphiz@gmail.com>\n+#   Copyright (c) 2008 Thomas Porschberg <thomas@randspringer.de>\n+#   Copyright (c) 2008 Michael Tindal\n+#   Copyright (c) 2008 Daniel Casimiro <dan.casimiro@gmail.com>\n #\n #   Copying and distribution of this file, with or without modification, are\n #   permitted in any medium without royalty provided the copyright notice\n #   and this notice are preserved. This file is offered as-is, without any\n #   warranty.\n \n-#serial 4\n+#serial 2\n \n AC_DEFUN([AX_BOOST_PROCESS],\n [\n@@ -35,19 +41,19 @@ AC_DEFUN([AX_BOOST_PROCESS],\n                         e.g. --with-boost-process=boost_process-gcc-mt ]),\n         [\n         if test \"$withval\" = \"no\"; then\n-\t\t\twant_boost=\"no\"\n+\t\t\twant_boost_process=\"no\"\n         elif test \"$withval\" = \"yes\"; then\n-            want_boost=\"yes\"\n+            want_boost_process=\"yes\"\n             ax_boost_user_process_lib=\"\"\n         else\n-\t\t    want_boost=\"yes\"\n+\t\t    want_boost_process=\"yes\"\n \t\tax_boost_user_process_lib=\"$withval\"\n \t\tfi\n         ],\n-        [want_boost=\"yes\"]\n+        [want_boost_process=\"yes\"]\n \t)\n \n-\tif test \"x$want_boost\" = \"xyes\"; then\n+\tif test \"x$want_boost_process\" = \"xyes\"; then\n         AC_REQUIRE([AC_PROG_CC])\n         AC_REQUIRE([AC_CANONICAL_BUILD])\n \t\tCPPFLAGS_SAVED=\"$CPPFLAGS\"\n@@ -62,10 +68,11 @@ AC_DEFUN([AX_BOOST_PROCESS],\n \t\t\t\t\t   ax_cv_boost_process,\n         [AC_LANG_PUSH([C++])\n \t\t\t CXXFLAGS_SAVE=$CXXFLAGS\n+\t\t\t CXXFLAGS=\n \n-\t\t\t AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n-                                   [[boost::process::child* child = new boost::process::child; delete child;]])],\n-                   ax_cv_boost_process=yes, ax_cv_boost_process=no)\n+             AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[@%:@include <boost/process.hpp>]],\n+                [[boost::process::child* child = new boost::process::child; delete child;]])],\n+                ax_cv_boost_process=yes, ax_cv_boost_process=no)\n \t\t\t CXXFLAGS=$CXXFLAGS_SAVE\n              AC_LANG_POP([C++])\n \t\t])\n@@ -77,14 +84,14 @@ AC_DEFUN([AX_BOOST_PROCESS],\n \n \t\t\tLDFLAGS_SAVE=$LDFLAGS\n             if test \"x$ax_boost_user_process_lib\" = \"x\"; then\n-                for libextension in `ls $BOOSTLIBDIR/libboost_process*.so* $BOOSTLIBDIR/libboost_process*.dylib* $BOOSTLIBDIR/libboost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^lib\\(boost_process.*\\)\\.so.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.dylib.*$;\\1;' -e 's;^lib\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                for libextension in `ls -r $BOOSTLIBDIR/libboost_process* 2>/dev/null | sed 's,.*/lib,,' | sed 's,\\..*,,'` ; do\n                      ax_lib=${libextension}\n \t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n                                  [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n                                  [link_process=\"no\"])\n \t\t\t\tdone\n                 if test \"x$link_process\" != \"xyes\"; then\n-                for libextension in `ls $BOOSTLIBDIR/boost_process*.dll* $BOOSTLIBDIR/boost_process*.a* 2>/dev/null | sed 's,.*/,,' | sed -e 's;^\\(boost_process.*\\)\\.dll.*$;\\1;' -e 's;^\\(boost_process.*\\)\\.a.*$;\\1;'` ; do\n+                for libextension in `ls -r $BOOSTLIBDIR/boost_process* 2>/dev/null | sed 's,.*/,,' | sed -e 's,\\..*,,'` ; do\n                      ax_lib=${libextension}\n \t\t\t\t    AC_CHECK_LIB($ax_lib, exit,\n                                  [BOOST_PROCESS_LIB=\"-l$ax_lib\"; AC_SUBST(BOOST_PROCESS_LIB) link_process=\"yes\"; break],\n@@ -101,7 +108,7 @@ AC_DEFUN([AX_BOOST_PROCESS],\n \n             fi\n             if test \"x$ax_lib\" = \"x\"; then\n-                AC_MSG_ERROR(Could not find a version of the library!)\n+                AC_MSG_ERROR(Could not find a version of the Boost::Process library!)\n             fi\n \t\t\tif test \"x$link_process\" = \"xno\"; then\n \t\t\t\tAC_MSG_ERROR(Could not link against $ax_lib !)"
      }
    ]
  }
]