DrahtBot,2021-07-29 14:03:52,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-889172376,889172376,
tryphe,2021-07-30 01:43:42,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-889567341,889567341,
glozow,2021-08-09 06:18:51,Will review again after rebase - note that the mempool tests have been moved to mempool_package_limits.py,https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-894976551,894976551,
glozow,2021-08-11 13:54:13,"Another suggestion (probably for a different PR): This doesn't matter _that_ much, but we have quite a few of the same lines repeated in this test. Given how many OP_TRUE spends there are, I think it'd be good to either add a OP_TRUE variation of `make_chain` to wallet.py or, better yet, make all those functions methods of `MiniWallet`.",https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-896847328,896847328,
glozow,2021-08-16 12:11:55,PR description needs to be updated,https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-899460878,899460878,
jnewbery,2021-08-16 13:33:16,I still don't understand what logic this is testing that isn't already covered by the `test_desc_count_limits()` subtest.,https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-899515089,899515089,
ritickgoenka,2021-08-16 17:11:56,"> I still don't understand what logic this is testing that isn't already covered by the `test_desc_count_limits()` subtest.\n\nIt is testing if the second generation in Package transactions are considered while checking Descendant count limits. It is analogous to the 'test_anc_count_limits_2()' subtest for Ancestor count limits. ",https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-899675145,899675145,
jnewbery,2021-08-17 15:56:12,"@glozow has pointed out that this scenario is for a transaction to fail its descendant limit count due to a combination of mempool descendants, package direct descendants, and package indirect descendants, which seems like a reasonable thing to test.\n\nI think the transaction P3 is unnecessary, since the package would fail with just P2. It's good for a test to fail at the edge case (i.e. the pa",https://github.com/bitcoin/bitcoin/pull/22582#issuecomment-900420385,900420385,
glozow,2021-07-30 06:52:32,What does M1b do? I don't see how it's relevant to the test :thinking: ,https://github.com/bitcoin/bitcoin/pull/22582#discussion_r679691371,679691371,test/functional/rpc_packages.py
glozow,2021-07-30 06:56:48,"I wouldn't call this bushy, it's kind of giraffe-shaped?\nmaybe `test_descendant_limits_2` or `test_descendant_limits_mempool_dominated`",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r679693319,679693319,test/functional/rpc_packages.py
ritickgoenka,2021-07-30 13:17:00,Done,https://github.com/bitcoin/bitcoin/pull/22582#discussion_r679917094,679917094,test/functional/rpc_packages.py
ritickgoenka,2021-07-30 13:34:33,To test a transaction having a direct connection to mempool doesn't affect it being counted as an indirect descendant of some transaction in the mempool. If this doesn't make much sense I can remove M1b.,https://github.com/bitcoin/bitcoin/pull/22582#discussion_r679929485,679929485,test/functional/rpc_packages.py
glozow,2021-08-11 13:21:46,"I actually think a fee of just `Decimal(""0.0001"")` would be sufficient here. In fact, I think it'd be best to import `DEFAULT_FEE` from test_framework/wallet.py and use that throughout this test.",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686825121,686825121,test/functional/mempool_package_limits.py
glozow,2021-08-11 13:33:11,"nit: this test would be simplified if you made M2a .... M23a be a chain spending vout[0] of M1a. It'd save maybe 5-10 lines.\n",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686835358,686835358,test/functional/mempool_package_limits.py
glozow,2021-08-11 13:50:53,"Again, not bushy",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686851459,686851459,test/functional/mempool_package_limits.py
glozow,2021-08-11 13:53:36,"^ This description or a short summary of it would be good in place of the ""bushy"" comment",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686854062,686854062,test/functional/rpc_packages.py
glozow,2021-08-11 14:25:08,"Right now the test doesn't utilize M1b at all - it should test that the package [P1, P2] passes but [P1, P2, P3] fails.",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686883715,686883715,test/functional/rpc_packages.py
jnewbery,2021-08-11 14:25:37,This test would fail regardless of whether M1b exists or not (since M1a has 23 descendants in the mempool and 3 descendants in the package). It doesn't seem to me to be testing an edgecase that isn't already covered by the other tests in rpc_packages.py.,https://github.com/bitcoin/bitcoin/pull/22582#discussion_r686884160,686884160,test/functional/rpc_packages.py
glozow,2021-08-12 09:28:23,"Did you consider the suggestion about asserting success for [P1, P3] but failure for [P1, P2, P3] ?",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r687545626,687545626,test/functional/mempool_package_limits.py
glozow,2021-08-12 09:29:19,"This comment/diagram is now incorrect - M1b is the parent of P2, not P1",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r687546339,687546339,test/functional/mempool_package_limits.py
ritickgoenka,2021-08-12 18:17:01,I have removed M1b as it was creating more confusion and as jnewbery pointed out the test would still fail regardless of M1b being present there and it was not adding any edgecase that it not already present.,https://github.com/bitcoin/bitcoin/pull/22582#discussion_r687979237,687979237,test/functional/mempool_package_limits.py
glozow,2021-08-16 10:55:12,"```suggestion\n        (22 in-mempool descendants + 3 in-package descendants, a total of 26 including itself).\n```",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r689434394,689434394,test/functional/mempool_package_limits.py
ryanofsky,2021-08-19 17:33:03,"In commit ""[test] checks descendants limtis for second generation Package descendants"" (e0f92f30954438540e6a676af77d17fbb963ca5d)\n\nMay be paranoid, but could be good to check `assert_equal(len(testres), len(package_hex))`",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r692345308,692345308,test/functional/mempool_package_limits.py
jnewbery,2021-09-09 13:27:45,"```suggestion\n            tx, txhex, value, spk = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n```",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r705331521,705331521,test/functional/mempool_package_limits.py
jnewbery,2021-09-09 13:34:25,"Consider using a linter like [flake8](https://flake8.pycqa.org/en/latest/) or a formatter like [black](https://github.com/psf/black) to catch/fix PEP8 violations:\n\n```suggestion\n        outputs = [{self.address: parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE: parent_value}]\n```",https://github.com/bitcoin/bitcoin/pull/22582#discussion_r705337693,705337693,test/functional/mempool_package_limits.py
