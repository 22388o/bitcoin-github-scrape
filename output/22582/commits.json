[
  {
    "sha": "fa7db1cbf7e8400b625fccd5757f8e1b200796bd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTdkYjFjYmY3ZTg0MDBiNjI1ZmNjZDU3NTdmOGUxYjIwMDc5NmJk",
    "commit": {
      "author": {
        "name": "ritickgoenka",
        "email": "rgoenka@ec.iitr.ac.in",
        "date": "2021-08-10T16:27:01Z"
      },
      "committer": {
        "name": "ritickgoenka",
        "email": "rgoenka@ec.iitr.ac.in",
        "date": "2021-08-26T18:11:08Z"
      },
      "message": "[test] checks descendants limtis for second generation Package descendants",
      "tree": {
        "sha": "8b7438bc101a82e6167ae984c59535f7e64670ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8b7438bc101a82e6167ae984c59535f7e64670ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa7db1cbf7e8400b625fccd5757f8e1b200796bd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7db1cbf7e8400b625fccd5757f8e1b200796bd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa7db1cbf7e8400b625fccd5757f8e1b200796bd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa7db1cbf7e8400b625fccd5757f8e1b200796bd/comments",
    "author": {
      "login": "ritickgoenka",
      "id": 32807799,
      "node_id": "MDQ6VXNlcjMyODA3Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritickgoenka",
      "html_url": "https://github.com/ritickgoenka",
      "followers_url": "https://api.github.com/users/ritickgoenka/followers",
      "following_url": "https://api.github.com/users/ritickgoenka/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritickgoenka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritickgoenka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
      "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
      "repos_url": "https://api.github.com/users/ritickgoenka/repos",
      "events_url": "https://api.github.com/users/ritickgoenka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ritickgoenka",
      "id": 32807799,
      "node_id": "MDQ6VXNlcjMyODA3Nzk5",
      "avatar_url": "https://avatars.githubusercontent.com/u/32807799?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ritickgoenka",
      "html_url": "https://github.com/ritickgoenka",
      "followers_url": "https://api.github.com/users/ritickgoenka/followers",
      "following_url": "https://api.github.com/users/ritickgoenka/following{/other_user}",
      "gists_url": "https://api.github.com/users/ritickgoenka/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ritickgoenka/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ritickgoenka/subscriptions",
      "organizations_url": "https://api.github.com/users/ritickgoenka/orgs",
      "repos_url": "https://api.github.com/users/ritickgoenka/repos",
      "events_url": "https://api.github.com/users/ritickgoenka/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ritickgoenka/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0b5344b0d18788e011f2d4a279c8c12a29f1428a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0b5344b0d18788e011f2d4a279c8c12a29f1428a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0b5344b0d18788e011f2d4a279c8c12a29f1428a"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "be17139e178e72304d094a0102a715a7819474fe",
        "filename": "test/functional/mempool_package_limits.py",
        "status": "modified",
        "additions": 70,
        "deletions": 0,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa7db1cbf7e8400b625fccd5757f8e1b200796bd/test/functional/mempool_package_limits.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa7db1cbf7e8400b625fccd5757f8e1b200796bd/test/functional/mempool_package_limits.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_limits.py?ref=fa7db1cbf7e8400b625fccd5757f8e1b200796bd",
        "patch": "@@ -26,6 +26,7 @@\n     bulk_transaction,\n     create_child_with_parents,\n     make_chain,\n+    DEFAULT_FEE,\n )\n \n class MempoolPackageLimitsTest(BitcoinTestFramework):\n@@ -50,6 +51,7 @@ def run_test(self):\n \n         self.test_chain_limits()\n         self.test_desc_count_limits()\n+        self.test_desc_count_limits_2()\n         self.test_anc_count_limits()\n         self.test_anc_count_limits_2()\n         self.test_anc_count_limits_bushy()\n@@ -177,6 +179,74 @@ def test_desc_count_limits(self):\n         node.generate(1)\n         assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n \n+    def test_desc_count_limits_2(self):\n+        \"\"\"Create a Package with 24 transaction in mempool and 2 transaction in package:\n+                      M1\n+                     ^  ^\n+                   M2    ^\n+                   .      ^\n+                  .        ^\n+                 .          ^\n+                M24          ^\n+                              ^\n+                              P1\n+                              ^\n+                              P2\n+        P1 has M1 as a mempool ancestor, P2 has no in-mempool ancestors, but when\n+        combined P2 has M1 as an ancestor and M1 exceeds descendant_limits(23 in-mempool\n+        descendants + 2 in-package descendants, a total of 26 including itself).\n+        \"\"\"\n+\n+        node = self.nodes[0]\n+        package_hex = []\n+        # M1\n+        first_coin_a = self.coins.pop()\n+        parent_value = (first_coin_a[\"amount\"] - DEFAULT_FEE) / 2 # Deduct reasonable fee and make 2 outputs\n+        inputs = [{\"txid\": first_coin_a[\"txid\"], \"vout\": 0}]\n+        outputs = [{self.address : parent_value}, {ADDRESS_BCRT1_P2WSH_OP_TRUE : parent_value}]\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+\n+        parent_signed = node.signrawtransactionwithkey(hexstring=rawtx, privkeys=self.privkeys)\n+        assert parent_signed[\"complete\"]\n+        parent_tx = tx_from_hex(parent_signed[\"hex\"])\n+        parent_txid = parent_tx.rehash()\n+        node.sendrawtransaction(parent_signed[\"hex\"])\n+\n+        # Chain M2...M24\n+        spk = parent_tx.vout[0].scriptPubKey.hex()\n+        value = parent_value\n+        txid = parent_txid\n+        for i in range(23): # M2...M24\n+            (tx, txhex, value, spk) = make_chain(node, self.address, self.privkeys, txid, value, 0, spk)\n+            txid = tx.rehash()\n+            node.sendrawtransaction(txhex)\n+\n+        # P1\n+        value_p1 = (parent_value - DEFAULT_FEE)\n+        rawtx_p1 = node.createrawtransaction([{\"txid\": parent_txid, \"vout\": 1}], [{self.address : value_p1}])\n+        tx_child_p1 = tx_from_hex(rawtx_p1)\n+        tx_child_p1.wit.vtxinwit = [CTxInWitness()]\n+        tx_child_p1.wit.vtxinwit[0].scriptWitness.stack = [CScript([OP_TRUE])]\n+        tx_child_p1_hex = tx_child_p1.serialize().hex()\n+        txid_child_p1 = tx_child_p1.rehash()\n+        package_hex.append(tx_child_p1_hex)\n+        tx_child_p1_spk = tx_child_p1.vout[0].scriptPubKey.hex()\n+\n+        # P2\n+        (_, tx_child_p2_hex, _, _) = make_chain(node, self.address, self.privkeys, txid_child_p1, value_p1, 0, tx_child_p1_spk)\n+        package_hex.append(tx_child_p2_hex)\n+\n+        assert_equal(24, node.getmempoolinfo()[\"size\"])\n+        assert_equal(2, len(package_hex))\n+        testres = node.testmempoolaccept(rawtxs=package_hex)\n+        assert_equal(len(testres), len(package_hex))\n+        for txres in testres:\n+            assert_equal(txres[\"package-error\"], \"package-mempool-limits\")\n+\n+        # Clear mempool and check that the package passes now\n+        node.generate(1)\n+        assert all([res[\"allowed\"] for res in node.testmempoolaccept(rawtxs=package_hex)])\n+\n     def test_anc_count_limits(self):\n         \"\"\"Create a 'V' shaped chain with 24 transactions in the mempool and 3 in the package:\n         M1a                    M1b"
      }
    ]
  }
]