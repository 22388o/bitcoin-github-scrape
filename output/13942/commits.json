[
  {
    "sha": "2647af7c6efb060e73ee2a8163b63a70dda616fb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNjQ3YWY3YzZlZmIwNjBlNzNlZTJhODE2M2I2M2E3MGRkYTYxNmZi",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-11T00:55:50Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:03Z"
      },
      "message": "refactor: removal of cyclic dependencies between index/txindex, validation and index/base translation units",
      "tree": {
        "sha": "89b42fd88a0dd6f69cbefacde13c950129e6d7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89b42fd88a0dd6f69cbefacde13c950129e6d7cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2647af7c6efb060e73ee2a8163b63a70dda616fb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2647af7c6efb060e73ee2a8163b63a70dda616fb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2647af7c6efb060e73ee2a8163b63a70dda616fb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2647af7c6efb060e73ee2a8163b63a70dda616fb/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e13a820f995606f0ed7aa74233c94c0d977e222d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e13a820f995606f0ed7aa74233c94c0d977e222d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e13a820f995606f0ed7aa74233c94c0d977e222d"
      }
    ],
    "stats": {
      "total": 494,
      "additions": 263,
      "deletions": 231
    },
    "files": [
      {
        "sha": "1fa457b229fc1d51c28b9968fe768719a2b9f577",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -185,6 +185,7 @@ BITCOIN_CORE_H = \\\n   utilmoneystr.h \\\n   utiltime.h \\\n   validation.h \\\n+  validation_globals.h \\\n   validationinterface.h \\\n   versionbits.h \\\n   walletinitinterface.h \\\n@@ -256,6 +257,7 @@ libbitcoin_server_a_SOURCES = \\\n   txmempool.cpp \\\n   ui_interface.cpp \\\n   validation.cpp \\\n+  validation_globals.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "8ceec82fd22fb38d27c5bb28a9fc77c838ab6d5c",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -8,7 +8,7 @@\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util.h>\n-#include <validation.h>\n+#include <validation_globals.h>\n #include <warnings.h>\n \n constexpr char DB_BEST_BLOCK = 'B';"
      },
      {
        "sha": "83a6dcd59648a3ef5903116a685c4e27b5fb8005",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -6,7 +6,7 @@\n #include <shutdown.h>\n #include <ui_interface.h>\n #include <util.h>\n-#include <validation.h>\n+#include <validation_globals.h>\n \n #include <boost/thread.hpp>\n "
      },
      {
        "sha": "603fdb8b791696b90d6f7b874ce3490f0d676d75",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 137,
        "changes": 137,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -274,25 +274,6 @@ namespace {\n     std::set<int> setDirtyFileInfo;\n } // anon namespace\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n-{\n-    AssertLockHeld(cs_main);\n-\n-    // Find the latest block common to locator and chain - we expect that\n-    // locator.vHave is sorted descending by height.\n-    for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n-        if (pindex) {\n-            if (chain.Contains(pindex))\n-                return pindex;\n-            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n-                return chain.Tip();\n-            }\n-        }\n-    }\n-    return chain.Genesis();\n-}\n-\n std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n std::unique_ptr<CCoinsViewCache> pcoinsTip;\n std::unique_ptr<CBlockTreeDB> pblocktree;\n@@ -1073,92 +1054,6 @@ static bool WriteBlockToDisk(const CBlock& block, CDiskBlockPos& pos, const CMes\n     return true;\n }\n \n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n-{\n-    block.SetNull();\n-\n-    // Open history file to read\n-    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull())\n-        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n-\n-    // Read block\n-    try {\n-        filein >> block;\n-    }\n-    catch (const std::exception& e) {\n-        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n-    }\n-\n-    // Check the header\n-    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n-        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n-\n-    return true;\n-}\n-\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n-{\n-    CDiskBlockPos blockPos;\n-    {\n-        LOCK(cs_main);\n-        blockPos = pindex->GetBlockPos();\n-    }\n-\n-    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n-        return false;\n-    if (block.GetHash() != pindex->GetBlockHash())\n-        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n-                pindex->ToString(), pindex->GetBlockPos().ToString());\n-    return true;\n-}\n-\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n-{\n-    CDiskBlockPos hpos = pos;\n-    hpos.nPos -= 8; // Seek back 8 bytes for meta header\n-    CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n-    if (filein.IsNull()) {\n-        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n-    }\n-\n-    try {\n-        CMessageHeader::MessageStartChars blk_start;\n-        unsigned int blk_size;\n-\n-        filein >> blk_start >> blk_size;\n-\n-        if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n-            return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n-                    HexStr(blk_start, blk_start + CMessageHeader::MESSAGE_START_SIZE),\n-                    HexStr(message_start, message_start + CMessageHeader::MESSAGE_START_SIZE));\n-        }\n-\n-        if (blk_size > MAX_SIZE) {\n-            return error(\"%s: Block data is larger than maximum deserialization size for %s: %s versus %s\", __func__, pos.ToString(),\n-                    blk_size, MAX_SIZE);\n-        }\n-\n-        block.resize(blk_size); // Zeroing of memory is intentional here\n-        filein.read((char*)block.data(), blk_size);\n-    } catch(const std::exception& e) {\n-        return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n-    }\n-\n-    return true;\n-}\n-\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n-{\n-    CDiskBlockPos block_pos;\n-    {\n-        LOCK(cs_main);\n-        block_pos = pindex->GetBlockPos();\n-    }\n-\n-    return ReadRawBlockFromDisk(block, block_pos, message_start);\n-}\n-\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams)\n {\n     int halvings = nHeight / consensusParams.nSubsidyHalvingInterval;\n@@ -3766,43 +3661,11 @@ bool CheckDiskSpace(uint64_t nAdditionalBytes, bool blocks_dir)\n     return true;\n }\n \n-static FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n-{\n-    if (pos.IsNull())\n-        return nullptr;\n-    fs::path path = GetBlockPosFilename(pos, prefix);\n-    fs::create_directories(path.parent_path());\n-    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n-    if (!file && !fReadOnly)\n-        file = fsbridge::fopen(path, \"wb+\");\n-    if (!file) {\n-        LogPrintf(\"Unable to open file %s\\n\", path.string());\n-        return nullptr;\n-    }\n-    if (pos.nPos) {\n-        if (fseek(file, pos.nPos, SEEK_SET)) {\n-            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n-            fclose(file);\n-            return nullptr;\n-        }\n-    }\n-    return file;\n-}\n-\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n-    return OpenDiskFile(pos, \"blk\", fReadOnly);\n-}\n-\n /** Open an undo file (rev?????.dat) */\n static FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"rev\", fReadOnly);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n-{\n-    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n-}\n-\n CBlockIndex * CChainState::InsertBlockIndex(const uint256& hash)\n {\n     AssertLockHeld(cs_main);"
      },
      {
        "sha": "117b9a17844930880d4b062922970ea85ba68a18",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 92,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/feerate.h>\n #include <script/script_error.h>\n #include <sync.h>\n+#include <validation_globals.h>\n #include <versionbits.h>\n \n #include <algorithm>\n@@ -136,67 +137,6 @@ static const bool DEFAULT_PEERBLOOMFILTERS = true;\n /** Default for -stopatheight */\n static const int DEFAULT_STOPATHEIGHT = 0;\n \n-struct BlockHasher\n-{\n-    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n-};\n-\n-extern CScript COINBASE_FLAGS;\n-extern CCriticalSection cs_main;\n-extern CBlockPolicyEstimator feeEstimator;\n-extern CTxMemPool mempool;\n-extern std::atomic_bool g_is_mempool_loaded;\n-typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n-extern BlockMap& mapBlockIndex;\n-extern uint64_t nLastBlockTx;\n-extern uint64_t nLastBlockWeight;\n-extern const std::string strMessageMagic;\n-extern CWaitableCriticalSection g_best_block_mutex;\n-extern CConditionVariable g_best_block_cv;\n-extern uint256 g_best_block;\n-extern std::atomic_bool fImporting;\n-extern std::atomic_bool fReindex;\n-extern int nScriptCheckThreads;\n-extern bool fIsBareMultisigStd;\n-extern bool fRequireStandard;\n-extern bool fCheckBlockIndex;\n-extern bool fCheckpointsEnabled;\n-extern size_t nCoinCacheUsage;\n-/** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n-extern CFeeRate minRelayTxFee;\n-/** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n-extern CAmount maxTxFee;\n-/** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n-extern int64_t nMaxTipAge;\n-extern bool fEnableReplacement;\n-\n-/** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n-extern uint256 hashAssumeValid;\n-\n-/** Minimum work we will assume exists on some valid chain. */\n-extern arith_uint256 nMinimumChainWork;\n-\n-/** Best header we've seen so far (used for getheaders queries' starting points). */\n-extern CBlockIndex *pindexBestHeader;\n-\n-/** Minimum disk space required - used in CheckDiskSpace() */\n-static const uint64_t nMinDiskSpace = 52428800;\n-\n-/** Pruning-related variables and constants */\n-/** True if any block files have ever been pruned. */\n-extern bool fHavePruned;\n-/** True if we're running in -prune mode. */\n-extern bool fPruneMode;\n-/** Number of MiB of block files that we're trying to stay below. */\n-extern uint64_t nPruneTarget;\n-/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n-static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n-/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n-static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n-\n-static const signed int DEFAULT_CHECKBLOCKS = 6;\n-static const unsigned int DEFAULT_CHECKLEVEL = 3;\n-\n // Require that user allocate at least 550MB for block & undo files (blk???.dat and rev???.dat)\n // At 1MB per block, 288 blocks = 288MB.\n // Add 15% for Undo data = 331MB\n@@ -245,8 +185,6 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationS\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n-/** Open a block file (blk?????.dat) */\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n /** Import blocks from an external file */\n@@ -387,13 +325,6 @@ class CScriptCheck\n /** Initializes the script-execution cache */\n void InitScriptExecutionCache();\n \n-\n-/** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n-\n /** Functions for validating blocks and updating the block tree */\n \n /** Context-independent validity checks */\n@@ -428,16 +359,6 @@ class CVerifyDB {\n /** Replay blocks that aren't fully applied to the database. */\n bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n \n-inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n-{\n-    AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n-    return it == mapBlockIndex.end() ? nullptr : it->second;\n-}\n-\n-/** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n-\n /** Mark a block as precious and reorganize.\n  *\n  * May not be called in a\n@@ -451,18 +372,6 @@ bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, C\n /** Remove invalidity status from a block and its descendants. */\n void ResetBlockFailureFlags(CBlockIndex* pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-/** The currently-connected chain of blocks (protected by cs_main). */\n-extern CChain& chainActive;\n-\n-/** Global variable that points to the coins database (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n-\n-/** Global variable that points to the active CCoinsView (protected by cs_main) */\n-extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n-\n-/** Global variable that points to the active block tree (protected by cs_main) */\n-extern std::unique_ptr<CBlockTreeDB> pblocktree;\n-\n /**\n  * Return the spend height, which is one more than the inputs.GetBestBlock().\n  * While checking, GetBestBlock() refers to the parent block. (protected by cs_main)"
      },
      {
        "sha": "15593b145c6bf244092f6a334581a9cec68d2979",
        "filename": "src/validation_globals.cpp",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation_globals.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation_globals.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.cpp?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -0,0 +1,144 @@\n+#include <validation_globals.h>\n+#include <streams.h>\n+#include <pow.h>\n+#include <utilstrencodings.h>\n+#include <clientversion.h>\n+\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    // Find the latest block common to locator and chain - we expect that\n+    // locator.vHave is sorted descending by height.\n+    for (const uint256& hash : locator.vHave) {\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        if (pindex) {\n+            if (chain.Contains(pindex))\n+                return pindex;\n+            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n+                return chain.Tip();\n+            }\n+        }\n+    }\n+    return chain.Genesis();\n+}\n+\n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n+{\n+    block.SetNull();\n+\n+    // Open history file to read\n+    CAutoFile filein(OpenBlockFile(pos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull())\n+        return error(\"ReadBlockFromDisk: OpenBlockFile failed for %s\", pos.ToString());\n+\n+    // Read block\n+    try {\n+        filein >> block;\n+    }\n+    catch (const std::exception& e) {\n+        return error(\"%s: Deserialize or I/O error - %s at %s\", __func__, e.what(), pos.ToString());\n+    }\n+\n+    // Check the header\n+    if (!CheckProofOfWork(block.GetHash(), block.nBits, consensusParams))\n+        return error(\"ReadBlockFromDisk: Errors in block header at %s\", pos.ToString());\n+\n+    return true;\n+}\n+\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+{\n+    CDiskBlockPos blockPos;\n+    {\n+        LOCK(cs_main);\n+        blockPos = pindex->GetBlockPos();\n+    }\n+\n+    if (!ReadBlockFromDisk(block, blockPos, consensusParams))\n+        return false;\n+    if (block.GetHash() != pindex->GetBlockHash())\n+        return error(\"ReadBlockFromDisk(CBlock&, CBlockIndex*): GetHash() doesn't match index for %s at %s\",\n+                pindex->ToString(), pindex->GetBlockPos().ToString());\n+    return true;\n+}\n+\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    CDiskBlockPos hpos = pos;\n+    hpos.nPos -= 8; // Seek back 8 bytes for meta header\n+    CAutoFile filein(OpenBlockFile(hpos, true), SER_DISK, CLIENT_VERSION);\n+    if (filein.IsNull()) {\n+        return error(\"%s: OpenBlockFile failed for %s\", __func__, pos.ToString());\n+    }\n+\n+    try {\n+        CMessageHeader::MessageStartChars blk_start;\n+        unsigned int blk_size;\n+\n+        filein >> blk_start >> blk_size;\n+\n+        if (memcmp(blk_start, message_start, CMessageHeader::MESSAGE_START_SIZE)) {\n+            return error(\"%s: Block magic mismatch for %s: %s versus expected %s\", __func__, pos.ToString(),\n+                    HexStr(blk_start, blk_start + CMessageHeader::MESSAGE_START_SIZE),\n+                    HexStr(message_start, message_start + CMessageHeader::MESSAGE_START_SIZE));\n+        }\n+\n+        if (blk_size > MAX_SIZE) {\n+            return error(\"%s: Block data is larger than maximum deserialization size for %s: %s versus %s\", __func__, pos.ToString(),\n+                    blk_size, MAX_SIZE);\n+        }\n+\n+        block.resize(blk_size); // Zeroing of memory is intentional here\n+        filein.read((char*)block.data(), blk_size);\n+    } catch(const std::exception& e) {\n+        return error(\"%s: Read from block file failed: %s for %s\", __func__, e.what(), pos.ToString());\n+    }\n+\n+    return true;\n+}\n+\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start)\n+{\n+    CDiskBlockPos block_pos;\n+    {\n+        LOCK(cs_main);\n+        block_pos = pindex->GetBlockPos();\n+    }\n+\n+    return ReadRawBlockFromDisk(block, block_pos, message_start);\n+}\n+\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+{\n+    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+}\n+\n+FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n+{\n+    if (pos.IsNull())\n+        return nullptr;\n+    fs::path path = GetBlockPosFilename(pos, prefix);\n+    fs::create_directories(path.parent_path());\n+    FILE* file = fsbridge::fopen(path, fReadOnly ? \"rb\": \"rb+\");\n+    if (!file && !fReadOnly)\n+        file = fsbridge::fopen(path, \"wb+\");\n+    if (!file) {\n+        LogPrintf(\"Unable to open file %s\\n\", path.string());\n+        return nullptr;\n+    }\n+    if (pos.nPos) {\n+        if (fseek(file, pos.nPos, SEEK_SET)) {\n+            LogPrintf(\"Unable to seek to position %u of %s\\n\", pos.nPos, path.string());\n+            fclose(file);\n+            return nullptr;\n+        }\n+    }\n+    return file;\n+}\n+\n+/** Open a block file (blk?????.dat) */\n+FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n+    return OpenDiskFile(pos, \"blk\", fReadOnly);\n+}\n+"
      },
      {
        "sha": "bf115c534c406211381c45f6da100d760b98bf60",
        "filename": "src/validation_globals.h",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation_globals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2647af7c6efb060e73ee2a8163b63a70dda616fb/src/validation_globals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.h?ref=2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "patch": "@@ -0,0 +1,114 @@\n+#ifndef BITCOIN_VALIDATION_GLOBALS_H\n+#define BITCOIN_VALIDATION_GLOBALS_H\n+\n+#include <chain.h>\n+#include <util.h>\n+#include <protocol.h>\n+\n+#include <unordered_map>\n+\n+class CCoinsViewDB;\n+class CBlockTreeDB;\n+class CCoinsViewCache;\n+class CBlockPolicyEstimator; \n+class CTxMemPool;\n+class CFeeRate;\n+\n+struct BlockHasher\n+{\n+    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n+};\n+\n+extern CScript COINBASE_FLAGS;\n+extern CCriticalSection cs_main;\n+extern CBlockPolicyEstimator feeEstimator;\n+extern CTxMemPool mempool;\n+extern std::atomic_bool g_is_mempool_loaded;\n+typedef std::unordered_map<uint256, CBlockIndex*, BlockHasher> BlockMap;\n+extern BlockMap& mapBlockIndex;\n+extern uint64_t nLastBlockTx;\n+extern uint64_t nLastBlockWeight;\n+extern const std::string strMessageMagic;\n+extern CWaitableCriticalSection g_best_block_mutex;\n+extern CConditionVariable g_best_block_cv;\n+extern uint256 g_best_block;\n+extern std::atomic_bool fImporting;\n+extern std::atomic_bool fReindex;\n+extern int nScriptCheckThreads;\n+extern bool fIsBareMultisigStd;\n+extern bool fRequireStandard;\n+extern bool fCheckBlockIndex;\n+extern bool fCheckpointsEnabled;\n+extern size_t nCoinCacheUsage;\n+\n+/** Block hash whose ancestors we will assume to have valid scripts without checking them. */\n+extern uint256 hashAssumeValid;\n+\n+/** Minimum work we will assume exists on some valid chain. */\n+extern arith_uint256 nMinimumChainWork;\n+\n+/** Best header we've seen so far (used for getheaders queries' starting points). */\n+extern CBlockIndex *pindexBestHeader;\n+\n+/** Minimum disk space required - used in CheckDiskSpace() */\n+static const uint64_t nMinDiskSpace = 52428800;\n+\n+/** Pruning-related variables and constants */\n+/** True if any block files have ever been pruned. */\n+extern bool fHavePruned;\n+/** True if we're running in -prune mode. */\n+extern bool fPruneMode;\n+/** Number of MiB of block files that we're trying to stay below. */\n+extern uint64_t nPruneTarget;\n+/** Block files containing a block-height within MIN_BLOCKS_TO_KEEP of chainActive.Tip() will not be pruned. */\n+static const unsigned int MIN_BLOCKS_TO_KEEP = 288;\n+/** Minimum blocks required to signal NODE_NETWORK_LIMITED */\n+static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n+\n+static const signed int DEFAULT_CHECKBLOCKS = 6;\n+static const unsigned int DEFAULT_CHECKLEVEL = 3;\n+\n+\n+\n+/** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n+extern CFeeRate minRelayTxFee;\n+/** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n+extern CAmount maxTxFee;\n+/** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n+extern int64_t nMaxTipAge;\n+extern bool fEnableReplacement;\n+/** Functions for disk access for blocks */\n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n+\n+/** Find the last common block between the parameter chain and a locator. */\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n+\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+\n+FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly);\n+\n+/** Open a block file (blk?????.dat) */\n+FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+\n+/** The currently-connected chain of blocks (protected by cs_main). */\n+extern CChain& chainActive;\n+\n+/** Global variable that points to the coins database (protected by cs_main) */\n+extern std::unique_ptr<CCoinsViewDB> pcoinsdbview;\n+\n+/** Global variable that points to the active CCoinsView (protected by cs_main) */\n+extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n+\n+/** Global variable that points to the active block tree (protected by cs_main) */\n+extern std::unique_ptr<CBlockTreeDB> pblocktree;\n+inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n+{\n+    AssertLockHeld(cs_main);\n+    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n+    return it == mapBlockIndex.end() ? nullptr : it->second;\n+}\n+\n+#endif // BITCOIN_VALIDATION_GLOBALS_H"
      }
    ]
  },
  {
    "sha": "26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNmY0YTIyMTZiYzhmYzI1NjBjNTM5MmNiN2YxMGY4YTQ5MzU0ZDgx",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-11T01:22:26Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:04Z"
      },
      "message": "index/txindex -> validation -> index/txindex circular dependency removed from lint-circular-dependencies.sh",
      "tree": {
        "sha": "a732f41cbf35f47c03c354a67c4803f29e6e51a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a732f41cbf35f47c03c354a67c4803f29e6e51a3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f4a2216bc8fc2560c5392cb7f10f8a49354d81/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2647af7c6efb060e73ee2a8163b63a70dda616fb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2647af7c6efb060e73ee2a8163b63a70dda616fb"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 1,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dd5af5dd7380fad83d8a7ad55c956e2047243d00",
        "filename": "src/validation_globals.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26f4a2216bc8fc2560c5392cb7f10f8a49354d81/src/validation_globals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26f4a2216bc8fc2560c5392cb7f10f8a49354d81/src/validation_globals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.h?ref=26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
        "patch": "@@ -10,7 +10,7 @@\n class CCoinsViewDB;\n class CBlockTreeDB;\n class CCoinsViewCache;\n-class CBlockPolicyEstimator; \n+class CBlockPolicyEstimator;\n class CTxMemPool;\n class CFeeRate;\n "
      },
      {
        "sha": "9a663642b809e95601cab4f0dfa6364e986d4547",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/26f4a2216bc8fc2560c5392cb7f10f8a49354d81/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/26f4a2216bc8fc2560c5392cb7f10f8a49354d81/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
        "patch": "@@ -11,7 +11,6 @@ export LC_ALL=C\n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util -> chainparamsbase\"\n     \"checkpoints -> validation -> checkpoints\"\n-    \"index/txindex -> validation -> index/txindex\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/policy -> validation -> policy/policy\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\""
      }
    ]
  },
  {
    "sha": "bf5f33c3531d68577dba2e24253d74b00cff8c1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjVmMzNjMzUzMWQ2ODU3N2RiYTJlMjQyNTNkNzRiMDBjZmY4YzFj",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-12T10:24:53Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:04Z"
      },
      "message": "split of validation_globals",
      "tree": {
        "sha": "7d67213757bb9b107df4709728cbeb6c8bd69ff4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d67213757bb9b107df4709728cbeb6c8bd69ff4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf5f33c3531d68577dba2e24253d74b00cff8c1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf5f33c3531d68577dba2e24253d74b00cff8c1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf5f33c3531d68577dba2e24253d74b00cff8c1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf5f33c3531d68577dba2e24253d74b00cff8c1c/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26f4a2216bc8fc2560c5392cb7f10f8a49354d81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26f4a2216bc8fc2560c5392cb7f10f8a49354d81"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 96,
      "deletions": 51
    },
    "files": [
      {
        "sha": "ce44b35ff32a9cc56aee8f9a52cdbac7de763906",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -186,6 +186,8 @@ BITCOIN_CORE_H = \\\n   utiltime.h \\\n   validation.h \\\n   validation_globals.h \\\n+  validation_block_utils.h \\\n+  validation_disk_utils.h \\\n   validationinterface.h \\\n   versionbits.h \\\n   walletinitinterface.h \\\n@@ -257,7 +259,8 @@ libbitcoin_server_a_SOURCES = \\\n   txmempool.cpp \\\n   ui_interface.cpp \\\n   validation.cpp \\\n-  validation_globals.cpp \\\n+  validation_block_utils.cpp \\\n+  validation_disk_utils.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   $(BITCOIN_CORE_H)"
      },
      {
        "sha": "6ce343a180ce0f258478525ddb52c960e4c041f5",
        "filename": "src/index/base.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/index/base.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/index/base.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/base.cpp?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -8,7 +8,8 @@\n #include <tinyformat.h>\n #include <ui_interface.h>\n #include <util.h>\n-#include <validation_globals.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <warnings.h>\n \n constexpr char DB_BEST_BLOCK = 'B';"
      },
      {
        "sha": "50a66cc74d5d70cc795cfecfe871de251483ac7a",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -7,7 +7,7 @@\n #include <ui_interface.h>\n #include <util.h>\n #include <validation_globals.h>\n-\n+#include <validation_disk_utils.h>\n #include <boost/thread.hpp>\n \n constexpr char DB_BEST_BLOCK = 'B';"
      },
      {
        "sha": "60ec1bd95498c402f5ee581b27a0889e365f008d",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -17,7 +17,8 @@\n #include <policy/feerate.h>\n #include <script/script_error.h>\n #include <sync.h>\n-#include <validation_globals.h>\n+#include <validation_block_utils.h>\n+#include <validation_disk_utils.h>\n #include <versionbits.h>\n \n #include <algorithm>"
      },
      {
        "sha": "fab0100e57bd293418e4e05bd46e631477d32ec5",
        "filename": "src/validation_block_utils.cpp",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_block_utils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_block_utils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_block_utils.cpp?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_block_utils.h>\n+\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n+{\n+    AssertLockHeld(cs_main);\n+\n+    // Find the latest block common to locator and chain - we expect that\n+    // locator.vHave is sorted descending by height.\n+    for (const uint256& hash : locator.vHave) {\n+        CBlockIndex* pindex = LookupBlockIndex(hash);\n+        if (pindex) {\n+            if (chain.Contains(pindex))\n+                return pindex;\n+            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n+                return chain.Tip();\n+            }\n+        }\n+    }\n+    return chain.Genesis();\n+}\n+"
      },
      {
        "sha": "cf5d4c0d30d0c4049764778af29ca21dc550a8c1",
        "filename": "src/validation_block_utils.h",
        "status": "added",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_block_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_block_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_block_utils.h?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -0,0 +1,20 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_BLOCK_UTILS_H\n+#define BITCOIN_VALIDATION_BLOCK_UTILS_H\n+\n+#include <validation_globals.h>\n+\n+inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n+{\n+    AssertLockHeld(cs_main);\n+    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n+    return it == mapBlockIndex.end() ? nullptr : it->second;\n+}\n+\n+/** Find the last common block between the parameter chain and a locator. */\n+CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n+\n+#endif // BITCOIN_VALIDATION_BLOCK_UTILS_H"
      },
      {
        "sha": "4fa70cd0f5e090f78a28a9f268ac122b8eb874eb",
        "filename": "src/validation_disk_utils.cpp",
        "status": "renamed",
        "additions": 11,
        "deletions": 24,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_disk_utils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_disk_utils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.cpp?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -1,27 +1,15 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_disk_utils.h>\n+#include <clientversion.h>\n #include <validation_globals.h>\n #include <streams.h>\n #include <pow.h>\n #include <utilstrencodings.h>\n-#include <clientversion.h>\n+#include <vector>\n \n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator)\n-{\n-    AssertLockHeld(cs_main);\n-\n-    // Find the latest block common to locator and chain - we expect that\n-    // locator.vHave is sorted descending by height.\n-    for (const uint256& hash : locator.vHave) {\n-        CBlockIndex* pindex = LookupBlockIndex(hash);\n-        if (pindex) {\n-            if (chain.Contains(pindex))\n-                return pindex;\n-            if (pindex->GetAncestor(chain.Height()) == chain.Tip()) {\n-                return chain.Tip();\n-            }\n-        }\n-    }\n-    return chain.Genesis();\n-}\n \n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {\n@@ -109,11 +97,6 @@ bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex\n     return ReadRawBlockFromDisk(block, block_pos, message_start);\n }\n \n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n-{\n-    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n-}\n-\n FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly)\n {\n     if (pos.IsNull())\n@@ -142,3 +125,7 @@ FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly) {\n     return OpenDiskFile(pos, \"blk\", fReadOnly);\n }\n \n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix)\n+{\n+    return GetBlocksDir() / strprintf(\"%s%05u.dat\", prefix, pos.nFile);\n+}",
        "previous_filename": "src/validation_globals.cpp"
      },
      {
        "sha": "b6a1abaec40ac5ae3f06203705d93068d0357f93",
        "filename": "src/validation_disk_utils.h",
        "status": "added",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_disk_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_disk_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.h?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -0,0 +1,27 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_VALIDATION_DISK_UTILS_H\n+#define BITCOIN_VALIDATION_DISK_UTILS_H\n+\n+#include <validation_globals.h>\n+#include <primitives/block.h>\n+#include <protocol.h>\n+#include <stdio.h>\n+\n+\n+FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly);\n+\n+/** Open a block file (blk?????.dat) */\n+FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+\n+/** Functions for disk access for blocks */\n+bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n+bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n+bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n+\n+fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+\n+#endif // BITCOIN_VALIDATION_DISK_UTILS_H"
      },
      {
        "sha": "55a7f08f2d855ab02f29defda28d42e989e56cd8",
        "filename": "src/validation_globals.h",
        "status": "modified",
        "additions": 4,
        "deletions": 23,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_globals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf5f33c3531d68577dba2e24253d74b00cff8c1c/src/validation_globals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.h?ref=bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "patch": "@@ -1,3 +1,7 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_VALIDATION_GLOBALS_H\n #define BITCOIN_VALIDATION_GLOBALS_H\n \n@@ -68,30 +72,13 @@ static const unsigned int NODE_NETWORK_LIMITED_MIN_BLOCKS = 288;\n static const signed int DEFAULT_CHECKBLOCKS = 6;\n static const unsigned int DEFAULT_CHECKLEVEL = 3;\n \n-\n-\n /** A fee rate smaller than this is considered zero fee (for relaying, mining and transaction creation) */\n extern CFeeRate minRelayTxFee;\n /** Absolute maximum transaction fee (in satoshis) used by wallet and mempool (rejects high fee in sendrawtransaction) */\n extern CAmount maxTxFee;\n /** If the tip is older than this (in seconds), the node is considered to be in initial block download. */\n extern int64_t nMaxTipAge;\n extern bool fEnableReplacement;\n-/** Functions for disk access for blocks */\n-bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams);\n-bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus::Params& consensusParams);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n-bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n-\n-/** Find the last common block between the parameter chain and a locator. */\n-CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& locator);\n-\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n-\n-FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly);\n-\n-/** Open a block file (blk?????.dat) */\n-FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;\n@@ -104,11 +91,5 @@ extern std::unique_ptr<CCoinsViewCache> pcoinsTip;\n \n /** Global variable that points to the active block tree (protected by cs_main) */\n extern std::unique_ptr<CBlockTreeDB> pblocktree;\n-inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n-{\n-    AssertLockHeld(cs_main);\n-    BlockMap::const_iterator it = mapBlockIndex.find(hash);\n-    return it == mapBlockIndex.end() ? nullptr : it->second;\n-}\n \n #endif // BITCOIN_VALIDATION_GLOBALS_H"
      }
    ]
  },
  {
    "sha": "b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWMwYzdjZmE5OGExMjIyYTUyMmY5Y2ZiYTdkMWMyMWE4MjYwYTc4",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-19T17:58:34Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:04Z"
      },
      "message": "some definitions moved to validation_globals.cpp, added direct includes in validation_... files",
      "tree": {
        "sha": "442188e4922e668ae7bfb45d049efb88c7202d79",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/442188e4922e668ae7bfb45d049efb88c7202d79"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf5f33c3531d68577dba2e24253d74b00cff8c1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bf5f33c3531d68577dba2e24253d74b00cff8c1c"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 70,
      "deletions": 47
    },
    "files": [
      {
        "sha": "c5fa38f45b28f82171ebf4728b25b63e80a37062",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -259,6 +259,7 @@ libbitcoin_server_a_SOURCES = \\\n   txmempool.cpp \\\n   ui_interface.cpp \\\n   validation.cpp \\\n+  validation_globals.cpp \\\n   validation_block_utils.cpp \\\n   validation_disk_utils.cpp \\\n   validationinterface.cpp \\"
      },
      {
        "sha": "f02e11396788a77a5c3fced594d60b366ce4ba2a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 26,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -77,18 +77,12 @@ namespace {\n             // Identical blocks.\n             return false;\n         }\n-    };\n-} // anon namespace\n-\n-enum DisconnectResult\n-{\n-    DISCONNECT_OK,      // All good.\n-    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n-    DISCONNECT_FAILED   // Something else went wrong.\n };\n+} // anon namespace\n \n class ConnectTrace;\n \n+\n /**\n  * CChainState stores and provides an API to update our local knowledge of the\n  * current best chain and header tree.\n@@ -211,25 +205,13 @@ class CChainState {\n } g_chainstate;\n \n \n-\n CCriticalSection cs_main;\n \n BlockMap& mapBlockIndex = g_chainstate.mapBlockIndex;\n CChain& chainActive = g_chainstate.chainActive;\n CBlockIndex *pindexBestHeader = nullptr;\n-CWaitableCriticalSection g_best_block_mutex;\n-CConditionVariable g_best_block_cv;\n-uint256 g_best_block;\n-int nScriptCheckThreads = 0;\n-std::atomic_bool fImporting(false);\n-std::atomic_bool fReindex(false);\n bool fHavePruned = false;\n bool fPruneMode = false;\n-bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n-bool fRequireStandard = true;\n-bool fCheckBlockIndex = false;\n-bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n-size_t nCoinCacheUsage = 5000 * 300;\n uint64_t nPruneTarget = 0;\n int64_t nMaxTipAge = DEFAULT_MAX_TIP_AGE;\n bool fEnableReplacement = DEFAULT_ENABLE_REPLACEMENT;\n@@ -242,12 +224,6 @@ CAmount maxTxFee = DEFAULT_TRANSACTION_MAXFEE;\n \n CBlockPolicyEstimator feeEstimator;\n CTxMemPool mempool(&feeEstimator);\n-std::atomic_bool g_is_mempool_loaded{false};\n-\n-/** Constant stuff for coinbase transactions we create: */\n-CScript COINBASE_FLAGS;\n-\n-const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Internal stuff\n namespace {"
      },
      {
        "sha": "64afaee120efd6dfe602f671eb8f4774459d1ffd",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/feerate.h>\n #include <script/script_error.h>\n #include <sync.h>\n+#include <validation_globals.h>\n #include <validation_block_utils.h>\n #include <validation_disk_utils.h>\n #include <versionbits.h>\n@@ -115,18 +116,6 @@ static const int64_t DEFAULT_MAX_TIP_AGE = 24 * 60 * 60;\n /** Maximum age of our tip in seconds for us to be considered current for fee estimation */\n static const int64_t MAX_FEE_ESTIMATION_TIP_AGE = 3 * 60 * 60;\n \n-/** Default for -permitbaremultisig */\n-static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n-static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n-static const bool DEFAULT_TXINDEX = false;\n-static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n-/** Default for -persistmempool */\n-static const bool DEFAULT_PERSIST_MEMPOOL = true;\n-/** Default for -mempoolreplacement */\n-static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n-/** Default for using fee filter */\n-static const bool DEFAULT_FEEFILTER = true;\n-\n /** Maximum number of headers to announce when relaying blocks with headers message.*/\n static const unsigned int MAX_BLOCKS_TO_ANNOUNCE = 8;\n "
      },
      {
        "sha": "9fe6c1c05036da57399cf33143b88b6e0a85bbca",
        "filename": "src/validation_block_utils.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_block_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_block_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_block_utils.h?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -6,6 +6,10 @@\n #define BITCOIN_VALIDATION_BLOCK_UTILS_H\n \n #include <validation_globals.h>\n+#include <chain.h>\n+#include <primitives/block.h>\n+#include <sync.h>\n+#include <uint256.h>\n \n inline CBlockIndex* LookupBlockIndex(const uint256& hash)\n {"
      },
      {
        "sha": "207723cc3d2f3d70023e235cf3d1ede6665aad4e",
        "filename": "src/validation_disk_utils.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_disk_utils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_disk_utils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.cpp?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -4,12 +4,15 @@\n \n #include <validation_disk_utils.h>\n #include <clientversion.h>\n-#include <validation_globals.h>\n+#include <logging.h>\n #include <streams.h>\n+#include <sync.h>\n #include <pow.h>\n #include <utilstrencodings.h>\n-#include <vector>\n \n+#include <cstring>\n+#include <vector>\n+#include <boost/filesystem/operations.hpp>\n \n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {"
      },
      {
        "sha": "7fb57c80e867b717af634d1b21424b6e07612efc",
        "filename": "src/validation_disk_utils.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_disk_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_disk_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.h?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -5,10 +5,14 @@\n #ifndef BITCOIN_VALIDATION_DISK_UTILS_H\n #define BITCOIN_VALIDATION_DISK_UTILS_H\n \n-#include <validation_globals.h>\n+#include <chain.h>\n+#include <consensus/params.h>\n #include <primitives/block.h>\n #include <protocol.h>\n+#include <validation_globals.h>\n+\n #include <stdio.h>\n+#include <vector>\n \n \n FILE* OpenDiskFile(const CDiskBlockPos &pos, const char *prefix, bool fReadOnly);"
      },
      {
        "sha": "2fed951d7cc8c0ed90bdbbf7c0797afc112a995b",
        "filename": "src/validation_globals.cpp",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_globals.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_globals.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.cpp?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2009-2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <validation_globals.h>\n+\n+/** Constant stuff for coinbase transactions we create: */\n+CScript COINBASE_FLAGS;\n+\n+std::atomic_bool g_is_mempool_loaded{false};\n+const std::string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n+\n+CWaitableCriticalSection g_best_block_mutex;\n+CConditionVariable g_best_block_cv;\n+uint256 g_best_block;\n+std::atomic_bool fImporting(false);\n+std::atomic_bool fReindex(false);\n+int nScriptCheckThreads = 0;\n+bool fIsBareMultisigStd = DEFAULT_PERMIT_BAREMULTISIG;\n+bool fRequireStandard = true;\n+bool fCheckBlockIndex = false;\n+bool fCheckpointsEnabled = DEFAULT_CHECKPOINTS_ENABLED;\n+size_t nCoinCacheUsage = 5000 * 300;\n+"
      },
      {
        "sha": "aeb8382f95a449429e497c7901f6a80df2aba505",
        "filename": "src/validation_globals.h",
        "status": "modified",
        "additions": 28,
        "deletions": 6,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_globals.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78/src/validation_globals.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_globals.h?ref=b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "patch": "@@ -8,21 +8,43 @@\n #include <chain.h>\n #include <util.h>\n #include <protocol.h>\n-\n+#include <uint256.h>\n+#include <script/script.h> //CScript\n+#include <sync.h>\n+#include <policy/feerate.h>\n+#include <txdb.h>\n+#include <coins.h>\n+\n+#include <atomic>\n #include <unordered_map>\n \n-class CCoinsViewDB;\n-class CBlockTreeDB;\n-class CCoinsViewCache;\n-class CBlockPolicyEstimator;\n class CTxMemPool;\n-class CFeeRate;\n+class CBlockPolicyEstimator;\n+\n+/** Default for -permitbaremultisig */\n+static const bool DEFAULT_PERMIT_BAREMULTISIG = true;\n+static const bool DEFAULT_CHECKPOINTS_ENABLED = true;\n+static const bool DEFAULT_TXINDEX = false;\n+static const unsigned int DEFAULT_BANSCORE_THRESHOLD = 100;\n+/** Default for -persistmempool */\n+static const bool DEFAULT_PERSIST_MEMPOOL = true;\n+/** Default for -mempoolreplacement */\n+static const bool DEFAULT_ENABLE_REPLACEMENT = true;\n+/** Default for using fee filter */\n+static const bool DEFAULT_FEEFILTER = true;\n \n struct BlockHasher\n {\n     size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n };\n \n+enum DisconnectResult\n+{\n+    DISCONNECT_OK,      // All good.\n+    DISCONNECT_UNCLEAN, // Rolled back, but UTXO set was inconsistent with block.\n+    DISCONNECT_FAILED   // Something else went wrong.\n+};\n+\n extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CBlockPolicyEstimator feeEstimator;"
      }
    ]
  },
  {
    "sha": "63cb13fdfce9f181d6713feb95dae6b23716b6fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2NiMTNmZGZjZTlmMTgxZDY3MTNmZWI5NWRhZTZiMjM3MTZiNmZj",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-20T11:32:20Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:04Z"
      },
      "message": "direct includes of validation_... files, checkpoints->validation->checkpoints circular dependency removed",
      "tree": {
        "sha": "7fa9cea3e1f65806f3a5adb4488fb8fa5734d00b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7fa9cea3e1f65806f3a5adb4488fb8fa5734d00b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63cb13fdfce9f181d6713feb95dae6b23716b6fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cb13fdfce9f181d6713feb95dae6b23716b6fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63cb13fdfce9f181d6713feb95dae6b23716b6fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cb13fdfce9f181d6713feb95dae6b23716b6fc/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b1c0c7cfa98a1222a522f9cfba7d1c21a8260a78"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 25,
      "deletions": 8
    },
    "files": [
      {
        "sha": "7ce5d4d2d76cb221b046b2ada9c0fd15f41a4f52",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -7,7 +7,7 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <reverse_iterator.h>\n-#include <validation.h>\n+#include <validation_block_utils.h>\n \n #include <stdint.h>\n "
      },
      {
        "sha": "0abf30a4126c94de656d15eecf66807f5f036ca5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -21,7 +21,9 @@\n #include <httprpc.h>\n #include <index/txindex.h>\n #include <key.h>\n-#include <validation.h>\n+#include <validation_globals.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <miner.h>\n #include <netbase.h>\n #include <net.h>"
      },
      {
        "sha": "f5ef25952c2f7299860622d9c3dcb1984ef65117",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -24,6 +24,7 @@\n #include <util.h>\n #include <utilmoneystr.h>\n #include <validationinterface.h>\n+#include <validation_globals.h>\n \n #include <algorithm>\n #include <queue>"
      },
      {
        "sha": "876bab2945b5837932561077292c237801628745",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -12,6 +12,9 @@\n #include <consensus/validation.h>\n #include <hash.h>\n #include <validation.h>\n+#include <validation_globals.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <merkleblock.h>\n #include <netmessagemaker.h>\n #include <netbase.h>"
      },
      {
        "sha": "4a4ad96aeb895fbd3426dc929f3631c0e5c8c6c6",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -10,6 +10,8 @@\n #include <primitives/block.h>\n #include <primitives/transaction.h>\n #include <validation.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <httpserver.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>"
      },
      {
        "sha": "04fd47cac130bacc3b67319ffc035a62a581daf0",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -13,6 +13,9 @@\n #include <coins.h>\n #include <consensus/validation.h>\n #include <validation.h>\n+#include <validation_globals.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <core_io.h>\n #include <index/txindex.h>\n #include <key_io.h>"
      },
      {
        "sha": "2721bed016d90ef7e38031003ce50165b0042240",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -10,6 +10,7 @@\n #include <consensus/params.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n+#include <validation_block_utils.h>\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>"
      },
      {
        "sha": "19b3d30aaf52c5c77a772b13699f0bcdd648f007",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -11,6 +11,8 @@\n #include <index/txindex.h>\n #include <keystore.h>\n #include <validation.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <validationinterface.h>\n #include <key_io.h>\n #include <merkleblock.h>"
      },
      {
        "sha": "8612bd234e19ab244ec3eeaefc3cd0661759ccf3",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -13,6 +13,7 @@\n #include <serialize.h>\n #include <util.h>\n #include <validation.h>\n+#include <validation_globals.h>\n \n #include <test/test_bitcoin.h>\n "
      },
      {
        "sha": "191ea1ca883eb3e353dc0b839c595b84256f9eeb",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -175,8 +175,7 @@ bool ProcessNewBlockHeaders(const std::vector<CBlockHeader>& block, CValidationS\n \n /** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64_t nAdditionalBytes = 0, bool blocks_dir = false);\n-/** Translation to a filesystem path */\n-fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n+\n /** Import blocks from an external file */\n bool LoadExternalBlockFile(const CChainParams& chainparams, FILE* fileIn, CDiskBlockPos *dbp = nullptr);\n /** Ensures we have a genesis block in the block tree, possibly writing one to disk. */"
      },
      {
        "sha": "5372ff33c52cf5fecda1ee23ece7ff3158c2737f",
        "filename": "src/validation_disk_utils.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation_disk_utils.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation_disk_utils.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -12,7 +12,6 @@\n \n #include <cstring>\n #include <vector>\n-#include <boost/filesystem/operations.hpp>\n \n bool ReadBlockFromDisk(CBlock& block, const CDiskBlockPos& pos, const Consensus::Params& consensusParams)\n {"
      },
      {
        "sha": "be46136b4713d43680d9111181e9a11f898f9c64",
        "filename": "src/validation_disk_utils.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation_disk_utils.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/validation_disk_utils.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation_disk_utils.h?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -26,6 +26,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CDiskBlockPos& pos, const CMessageHeader::MessageStartChars& message_start);\n bool ReadRawBlockFromDisk(std::vector<uint8_t>& block, const CBlockIndex* pindex, const CMessageHeader::MessageStartChars& message_start);\n \n+/** Translation to a filesystem path */\n fs::path GetBlockPosFilename(const CDiskBlockPos &pos, const char *prefix);\n \n #endif // BITCOIN_VALIDATION_DISK_UTILS_H"
      },
      {
        "sha": "5748e2968f022b683ec63cd76b40103b02472541",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -5,7 +5,7 @@\n #include <chain.h>\n #include <key_io.h>\n #include <rpc/server.h>\n-#include <validation.h>\n+#include <validation_block_utils.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <sync.h>"
      },
      {
        "sha": "4eb3ea9be8ca636f56ad8b72b6c5b517ae316a1b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -9,6 +9,8 @@\n #include <core_io.h>\n #include <httpserver.h>\n #include <validation.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <key_io.h>\n #include <net.h>\n #include <outputtype.h>"
      },
      {
        "sha": "6a448f5067eedff0555d9f60408130a420ff8e23",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -15,6 +15,8 @@\n #include <key_io.h>\n #include <keystore.h>\n #include <validation.h>\n+#include <validation_disk_utils.h>\n+#include <validation_block_utils.h>\n #include <net.h>\n #include <policy/fees.h>\n #include <policy/policy.h>"
      },
      {
        "sha": "3cd18c72c525732409aa21d470ec00e5a20757d4",
        "filename": "src/zmq/zmqpublishnotifier.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/zmq/zmqpublishnotifier.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/src/zmq/zmqpublishnotifier.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.cpp?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -6,7 +6,7 @@\n #include <chainparams.h>\n #include <streams.h>\n #include <zmq/zmqpublishnotifier.h>\n-#include <validation.h>\n+#include <validation_disk_utils.h>\n #include <util.h>\n #include <rpc/server.h>\n "
      },
      {
        "sha": "f6000a88398c7e4c4efd747a43b57efcb26e5833",
        "filename": "test/lint/lint-circular-dependencies.sh",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63cb13fdfce9f181d6713feb95dae6b23716b6fc/test/lint/lint-circular-dependencies.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63cb13fdfce9f181d6713feb95dae6b23716b6fc/test/lint/lint-circular-dependencies.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-circular-dependencies.sh?ref=63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "patch": "@@ -10,7 +10,6 @@ export LC_ALL=C\n \n EXPECTED_CIRCULAR_DEPENDENCIES=(\n     \"chainparamsbase -> util -> chainparamsbase\"\n-    \"checkpoints -> validation -> checkpoints\"\n     \"policy/fees -> txmempool -> policy/fees\"\n     \"policy/policy -> validation -> policy/policy\"\n     \"qt/addresstablemodel -> qt/walletmodel -> qt/addresstablemodel\""
      }
    ]
  },
  {
    "sha": "b9bc7aca674ab4aab302c9c98722aea066420ab5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOWJjN2FjYTY3NGFiNGFhYjMwMmM5Yzk4NzIyYWVhMDY2NDIwYWI1",
    "commit": {
      "author": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-20T17:02:04Z"
      },
      "committer": {
        "name": "Maciej Grychowski",
        "email": "maciej.grychowski@onet.eu",
        "date": "2018-08-27T17:08:55Z"
      },
      "message": "msvc build fix attempt",
      "tree": {
        "sha": "41fe5c82b1f974742b3582bb0d131719b87ec630",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41fe5c82b1f974742b3582bb0d131719b87ec630"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b9bc7aca674ab4aab302c9c98722aea066420ab5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9bc7aca674ab4aab302c9c98722aea066420ab5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b9bc7aca674ab4aab302c9c98722aea066420ab5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b9bc7aca674ab4aab302c9c98722aea066420ab5/comments",
    "author": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mgrychow",
      "id": 42271287,
      "node_id": "MDQ6VXNlcjQyMjcxMjg3",
      "avatar_url": "https://avatars.githubusercontent.com/u/42271287?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mgrychow",
      "html_url": "https://github.com/mgrychow",
      "followers_url": "https://api.github.com/users/mgrychow/followers",
      "following_url": "https://api.github.com/users/mgrychow/following{/other_user}",
      "gists_url": "https://api.github.com/users/mgrychow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mgrychow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mgrychow/subscriptions",
      "organizations_url": "https://api.github.com/users/mgrychow/orgs",
      "repos_url": "https://api.github.com/users/mgrychow/repos",
      "events_url": "https://api.github.com/users/mgrychow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mgrychow/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63cb13fdfce9f181d6713feb95dae6b23716b6fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63cb13fdfce9f181d6713feb95dae6b23716b6fc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "936cafce0ec417914ddbefabdb2a99e7bdc8ebf0",
        "filename": "build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b9bc7aca674ab4aab302c9c98722aea066420ab5/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b9bc7aca674ab4aab302c9c98722aea066420ab5/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/libbitcoin_server/libbitcoin_server.vcxproj.in?ref=b9bc7aca674ab4aab302c9c98722aea066420ab5",
        "patch": "@@ -169,4 +169,4 @@\n     <ClInclude Include=\"..\\..\\srcpcegister.h\" />\n   </ItemGroup>\n   <Import Label=\"configTarget\" Project=\"..\\common.vcxproj\" />\n-</Project>\n\\ No newline at end of file\n+</Project>"
      }
    ]
  }
]