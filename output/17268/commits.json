[
  {
    "sha": "fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmZTAwY2NkNGVjOTZlMGY3MDUxYzcwMTgyY2NjYTgzMDVlZTM5MDhk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Add epoch fields to Mempool",
      "tree": {
        "sha": "4790a81b91ec417b40be80b2b6809ca97d35c1d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4790a81b91ec417b40be80b2b6809ca97d35c1d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ccd4ec96e0f7051c70182ccca8305ee3908d/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8e79958a7b2a0bf1b02adcce9f4d811eac37dfc"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 18,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e88357085cae578180e8c336d3fad4fb6eb97d60",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ccd4ec96e0f7051c70182ccca8305ee3908d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ccd4ec96e0f7051c70182ccca8305ee3908d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
        "patch": "@@ -23,7 +23,7 @@ CTxMemPoolEntry::CTxMemPoolEntry(const CTransactionRef& _tx, const CAmount& _nFe\n                                  int64_t _nTime, unsigned int _entryHeight,\n                                  bool _spendsCoinbase, int64_t _sigOpsCost, LockPoints lp)\n     : tx(_tx), nFee(_nFee), nTxWeight(GetTransactionWeight(*tx)), nUsageSize(RecursiveDynamicUsage(tx)), nTime(_nTime), entryHeight(_entryHeight),\n-    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp)\n+    spendsCoinbase(_spendsCoinbase), sigOpCost(_sigOpsCost), lockPoints(lp), m_epoch(0)\n {\n     nCountWithDescendants = 1;\n     nSizeWithDescendants = GetTxSize();\n@@ -1105,4 +1105,9 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n     m_is_loaded = loaded;\n }\n \n+uint64_t CTxMemPool::GetFreshEpoch() const\n+{\n+    return ++m_epoch;\n+}\n+\n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "7dd8aa0c8a784fb2fa96201a67960a5b7f565d4b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fe00ccd4ec96e0f7051c70182ccca8305ee3908d/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fe00ccd4ec96e0f7051c70182ccca8305ee3908d/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
        "patch": "@@ -129,6 +129,14 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n+private:\n+    mutable uint64_t m_epoch; //!< epoch when last touched, useful for graph algorithms\n+public:\n+    bool already_touched(uint64_t during) const {\n+        bool ret = m_epoch >= during;\n+        m_epoch = std::max(m_epoch, during);\n+        return ret;\n+    }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n@@ -453,6 +461,7 @@ class CTxMemPool\n     mutable int64_t lastRollingFeeUpdate;\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n+    mutable uint64_t m_epoch;\n \n     void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -736,6 +745,9 @@ class CTxMemPool\n      *  removal.\n      */\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+public:\n+    // This function mutates mutable state!\n+    uint64_t GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "1fd804376cbacc2733c7bdc6107409fa3940efe7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmQ4MDQzNzZjYmFjYzI3MzNjN2JkYzYxMDc0MDlmYTM5NDBlZmU3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Use epochs in UpdateTransactionsFromBlock",
      "tree": {
        "sha": "ad90fe0efca6ca7daf1b410ed730d01288fadfe5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad90fe0efca6ca7daf1b410ed730d01288fadfe5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fd804376cbacc2733c7bdc6107409fa3940efe7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fd804376cbacc2733c7bdc6107409fa3940efe7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fd804376cbacc2733c7bdc6107409fa3940efe7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fd804376cbacc2733c7bdc6107409fa3940efe7/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe00ccd4ec96e0f7051c70182ccca8305ee3908d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe00ccd4ec96e0f7051c70182ccca8305ee3908d"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3883d56a232ae00ac394e0e9e82b08a63061c784",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fd804376cbacc2733c7bdc6107409fa3940efe7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fd804376cbacc2733c7bdc6107409fa3940efe7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1fd804376cbacc2733c7bdc6107409fa3940efe7",
        "patch": "@@ -123,7 +123,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // UpdateForDescendants.\n     for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n         // we cache the in-mempool children to avoid duplicate updates\n-        setEntries setChildren;\n+        uint64_t epoch = GetFreshEpoch();\n         // calculate children from mapNextTx\n         txiter it = mapTx.find(hash);\n         if (it == mapTx.end()) {\n@@ -138,7 +138,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n             assert(childIter != mapTx.end());\n             // We can skip updating entries we've encountered before or that\n             // are in the block (which are already accounted for).\n-            if (setChildren.insert(childIter).second && !setAlreadyIncluded.count(childHash)) {\n+            if (!childIter->already_touched(epoch) && !setAlreadyIncluded.count(childHash)) {\n                 UpdateChild(it, childIter, true);\n                 UpdateParent(childIter, it, true);\n             }"
      }
    ]
  },
  {
    "sha": "4aa9e539d678aa831136e59bcec3ff2a7f357c16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YWE5ZTUzOWQ2NzhhYTgzMTEzNmU1OWJjZWMzZmYyYTdmMzU3YzE2",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Replace addUnchecked's de-duplication set",
      "tree": {
        "sha": "39859152f61ae882234dc93015ba1b9686d8e993",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39859152f61ae882234dc93015ba1b9686d8e993"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4aa9e539d678aa831136e59bcec3ff2a7f357c16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aa9e539d678aa831136e59bcec3ff2a7f357c16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4aa9e539d678aa831136e59bcec3ff2a7f357c16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aa9e539d678aa831136e59bcec3ff2a7f357c16/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fd804376cbacc2733c7bdc6107409fa3940efe7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fd804376cbacc2733c7bdc6107409fa3940efe7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fd804376cbacc2733c7bdc6107409fa3940efe7"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 4,
      "deletions": 5
    },
    "files": [
      {
        "sha": "de746d221c13f36d9648d7d1510e9420bd51d88c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4aa9e539d678aa831136e59bcec3ff2a7f357c16/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4aa9e539d678aa831136e59bcec3ff2a7f357c16/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4aa9e539d678aa831136e59bcec3ff2a7f357c16",
        "patch": "@@ -375,10 +375,12 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n     cachedInnerUsage += entry.DynamicMemoryUsage();\n \n     const CTransaction& tx = newit->GetTx();\n-    std::set<uint256> setParentTransactions;\n+    uint64_t epoch = GetFreshEpoch();\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         mapNextTx.insert(std::make_pair(&tx.vin[i].prevout, &tx));\n-        setParentTransactions.insert(tx.vin[i].prevout.hash);\n+        // Update ancestors with information about this tx\n+        auto maybe_it = GetIter(tx.vin[i].prevout.hash);\n+        if (maybe_it && !(*maybe_it)->already_touched(epoch)) UpdateParent(newit, *maybe_it, true);\n     }\n     // Don't bother worrying about child transactions of this one.\n     // Normal case of a new transaction arriving is that there can't be any\n@@ -388,9 +390,6 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAnces\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    for (const auto& pit : GetIterSet(setParentTransactions)) {\n-            UpdateParent(newit, pit, true);\n-    }\n     UpdateAncestorsOf(true, newit, setAncestors);\n     UpdateEntryForAncestors(newit, setAncestors);\n "
      }
    ]
  },
  {
    "sha": "c40013f547c0421db28d0e75db6a56ddaf88283d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDAwMTNmNTQ3YzA0MjFkYjI4ZDBlNzVkYjZhNTZkZGFmODgyODNk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Make UpdateForDescendents use epochs (part 1)",
      "tree": {
        "sha": "61c8c14ab8058a9fcd031d93843d355cf01c2e2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61c8c14ab8058a9fcd031d93843d355cf01c2e2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c40013f547c0421db28d0e75db6a56ddaf88283d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c40013f547c0421db28d0e75db6a56ddaf88283d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c40013f547c0421db28d0e75db6a56ddaf88283d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c40013f547c0421db28d0e75db6a56ddaf88283d/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4aa9e539d678aa831136e59bcec3ff2a7f357c16",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4aa9e539d678aa831136e59bcec3ff2a7f357c16",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4aa9e539d678aa831136e59bcec3ff2a7f357c16"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "bf71c37f285ca933bece1333330f605a542677d3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 10,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c40013f547c0421db28d0e75db6a56ddaf88283d/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c40013f547c0421db28d0e75db6a56ddaf88283d/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c40013f547c0421db28d0e75db6a56ddaf88283d",
        "patch": "@@ -59,25 +59,34 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // descendants.\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n-    setEntries stageEntries, setAllDescendants;\n-    stageEntries = GetMemPoolChildren(updateIt);\n+    auto& direct_children = GetMemPoolChildren(updateIt);\n+    // Our children are natrually uniqueu\n+    std::vector<txiter> all_descendants{direct_children.cbegin(), direct_children.cend()};\n+    std::vector<txiter> stack;\n+    uint64_t epoch = GetFreshEpoch();\n+\n+    auto children_it = direct_children.begin();\n+    while (children_it != direct_children.end() || !stack.empty()) {\n+        // Either pop the stack or read from the direct_children\n+        bool have_direct_children = children_it != direct_children.end();\n+        const txiter cit =  have_direct_children ? *(children_it++) : stack.back();\n+        if (!have_direct_children) stack.pop_back();\n \n-    while (!stageEntries.empty()) {\n-        const txiter cit = *stageEntries.begin();\n-        setAllDescendants.insert(cit);\n-        stageEntries.erase(cit);\n         const setEntries &setChildren = GetMemPoolChildren(cit);\n         for (txiter childEntry : setChildren) {\n+            if (childEntry->already_touched(epoch)) continue;\n             cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n             if (cacheIt != cachedDescendants.end()) {\n                 // We've already calculated this one, just add the entries for this set\n                 // but don't traverse again.\n                 for (txiter cacheEntry : cacheIt->second) {\n-                    setAllDescendants.insert(cacheEntry);\n+                    if (cacheEntry->already_touched(epoch)) continue;\n+                    all_descendants.push_back(cacheEntry);\n                 }\n-            } else if (!setAllDescendants.count(childEntry)) {\n+            } else {\n                 // Schedule for later processing\n-                stageEntries.insert(childEntry);\n+                stack.push_back(childEntry);\n+                all_descendants.push_back(childEntry);\n             }\n         }\n     }\n@@ -86,7 +95,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n     int64_t modifyCount = 0;\n-    for (txiter cit : setAllDescendants) {\n+    for (txiter cit : all_descendants) {\n         if (!setExclude.count(cit->GetTx().GetHash())) {\n             modifySize += cit->GetTxSize();\n             modifyFee += cit->GetModifiedFee();"
      }
    ]
  },
  {
    "sha": "7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZjYzMzU5NjlhZDE3ZmNkNmM4ZDcwYmNhYjc0ODI1ZjdjMTViNWIy",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Make UpdateForDescendants more efficient by eliminating in-between containers",
      "tree": {
        "sha": "7a632d80520fae3433f9285030a84fa165454e67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a632d80520fae3433f9285030a84fa165454e67"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c40013f547c0421db28d0e75db6a56ddaf88283d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c40013f547c0421db28d0e75db6a56ddaf88283d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c40013f547c0421db28d0e75db6a56ddaf88283d"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 23,
      "deletions": 19
    },
    "files": [
      {
        "sha": "5073f4f8e90f115256cb5b96609ec51264f7fb24",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 19,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
        "patch": "@@ -59,18 +59,38 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // descendants.\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n-    auto& direct_children = GetMemPoolChildren(updateIt);\n     // Our children are natrually uniqueu\n-    std::vector<txiter> all_descendants{direct_children.cbegin(), direct_children.cend()};\n     std::vector<txiter> stack;\n     uint64_t epoch = GetFreshEpoch();\n \n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+    auto make_state_update = [&](txiter cit) {\n+        if (!setExclude.count(cit->GetTx().GetHash())) {\n+            modifySize += cit->GetTxSize();\n+            modifyFee += cit->GetModifiedFee();\n+            modifyCount++;\n+            cachedDescendants[updateIt].insert(cit);\n+            // Update ancestor state for each descendant\n+            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n+        }\n+    };\n+\n+    // Update and add to cached descendant map\n+    auto& direct_children = GetMemPoolChildren(updateIt);\n     auto children_it = direct_children.begin();\n     while (children_it != direct_children.end() || !stack.empty()) {\n         // Either pop the stack or read from the direct_children\n         bool have_direct_children = children_it != direct_children.end();\n         const txiter cit =  have_direct_children ? *(children_it++) : stack.back();\n+        // if on the stack already touched (but remove)\n+        // touch the direct_children\n         if (!have_direct_children) stack.pop_back();\n+        else cit->already_touched(epoch);\n+\n+        // collect stats\n+        make_state_update(cit);\n \n         const setEntries &setChildren = GetMemPoolChildren(cit);\n         for (txiter childEntry : setChildren) {\n@@ -81,30 +101,14 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n                 // but don't traverse again.\n                 for (txiter cacheEntry : cacheIt->second) {\n                     if (cacheEntry->already_touched(epoch)) continue;\n-                    all_descendants.push_back(cacheEntry);\n+                    make_state_update(cacheEntry);\n                 }\n             } else {\n                 // Schedule for later processing\n                 stack.push_back(childEntry);\n-                all_descendants.push_back(childEntry);\n             }\n         }\n     }\n-    // setAllDescendants now contains all in-mempool descendants of updateIt.\n-    // Update and add to cached descendant map\n-    int64_t modifySize = 0;\n-    CAmount modifyFee = 0;\n-    int64_t modifyCount = 0;\n-    for (txiter cit : all_descendants) {\n-        if (!setExclude.count(cit->GetTx().GetHash())) {\n-            modifySize += cit->GetTxSize();\n-            modifyFee += cit->GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(cit);\n-            // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-        }\n-    }\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n "
      }
    ]
  },
  {
    "sha": "71618c04710b287df02f82d195b6956bbd05a41c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTYxOGMwNDcxMGIyODdkZjAyZjgyZDE5NWI2OTU2YmJkMDVhNDFj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Restructuring the loop",
      "tree": {
        "sha": "9145ac22a1d502f1ec3522c861e8752497cb279e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9145ac22a1d502f1ec3522c861e8752497cb279e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/71618c04710b287df02f82d195b6956bbd05a41c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71618c04710b287df02f82d195b6956bbd05a41c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/71618c04710b287df02f82d195b6956bbd05a41c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71618c04710b287df02f82d195b6956bbd05a41c/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f6335969ad17fcd6c8d70bcab74825f7c15b5b2"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 26,
      "deletions": 28
    },
    "files": [
      {
        "sha": "2941953dd73be3898373c44288db0b1015f0a7dc",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 28,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/71618c04710b287df02f82d195b6956bbd05a41c/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/71618c04710b287df02f82d195b6956bbd05a41c/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=71618c04710b287df02f82d195b6956bbd05a41c",
        "patch": "@@ -78,37 +78,35 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     };\n \n     // Update and add to cached descendant map\n-    auto& direct_children = GetMemPoolChildren(updateIt);\n-    auto children_it = direct_children.begin();\n-    while (children_it != direct_children.end() || !stack.empty()) {\n-        // Either pop the stack or read from the direct_children\n-        bool have_direct_children = children_it != direct_children.end();\n-        const txiter cit =  have_direct_children ? *(children_it++) : stack.back();\n-        // if on the stack already touched (but remove)\n-        // touch the direct_children\n-        if (!have_direct_children) stack.pop_back();\n-        else cit->already_touched(epoch);\n-\n-        // collect stats\n-        make_state_update(cit);\n-\n-        const setEntries &setChildren = GetMemPoolChildren(cit);\n-        for (txiter childEntry : setChildren) {\n-            if (childEntry->already_touched(epoch)) continue;\n-            cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-            if (cacheIt != cachedDescendants.end()) {\n-                // We've already calculated this one, just add the entries for this set\n-                // but don't traverse again.\n-                for (txiter cacheEntry : cacheIt->second) {\n-                    if (cacheEntry->already_touched(epoch)) continue;\n-                    make_state_update(cacheEntry);\n+    auto main_it = updateIt;\n+    bool first_pass = true;\n+    do {\n+        auto& direct_children = GetMemPoolChildren(main_it);\n+        for (txiter cit : direct_children) {\n+            if (first_pass) cit->already_touched(epoch);\n+\n+            // collect stats\n+            make_state_update(cit);\n+\n+            const setEntries &setChildren = GetMemPoolChildren(cit);\n+            for (txiter childEntry : setChildren) {\n+                if (childEntry->already_touched(epoch)) continue;\n+                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n+                if (cacheIt != cachedDescendants.end()) {\n+                    // We've already calculated this one, just add the entries for this set\n+                    // but don't traverse again.\n+                    for (txiter cacheEntry : cacheIt->second) {\n+                        if (cacheEntry->already_touched(epoch)) continue;\n+                        make_state_update(cacheEntry);\n+                    }\n+                } else {\n+                    // Schedule for later processing\n+                    stack.push_back(childEntry);\n                 }\n-            } else {\n-                // Schedule for later processing\n-                stack.push_back(childEntry);\n             }\n         }\n-    }\n+        first_pass = false;\n+    } while (!stack.empty() && (main_it = stack.back(), stack.pop_back(), true));\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n "
      }
    ]
  },
  {
    "sha": "1997a3b1975b40826b0bb2772df7ce13f6291cce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTk3YTNiMTk3NWI0MDgyNmIwYmIyNzcyZGY3Y2UxM2Y2MjkxY2Nl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Switch to lambda",
      "tree": {
        "sha": "541c294bd1fca4bd797ead7d73b58e1c1ebd300e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/541c294bd1fca4bd797ead7d73b58e1c1ebd300e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1997a3b1975b40826b0bb2772df7ce13f6291cce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1997a3b1975b40826b0bb2772df7ce13f6291cce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1997a3b1975b40826b0bb2772df7ce13f6291cce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1997a3b1975b40826b0bb2772df7ce13f6291cce/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "71618c04710b287df02f82d195b6956bbd05a41c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/71618c04710b287df02f82d195b6956bbd05a41c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/71618c04710b287df02f82d195b6956bbd05a41c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "01ef3db2c1366786f4fa9624eecbb6e84c81868d",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1997a3b1975b40826b0bb2772df7ce13f6291cce/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1997a3b1975b40826b0bb2772df7ce13f6291cce/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1997a3b1975b40826b0bb2772df7ce13f6291cce",
        "patch": "@@ -80,7 +80,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     // Update and add to cached descendant map\n     auto main_it = updateIt;\n     bool first_pass = true;\n-    do {\n+    auto func = [&] (txiter param_it) {\n         auto& direct_children = GetMemPoolChildren(main_it);\n         for (txiter cit : direct_children) {\n             if (first_pass) cit->already_touched(epoch);\n@@ -106,6 +106,9 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n             }\n         }\n         first_pass = false;\n+    };\n+    do {\n+        func(main_it);\n     } while (!stack.empty() && (main_it = stack.back(), stack.pop_back(), true));\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }"
      }
    ]
  },
  {
    "sha": "a62267c87726e26b7d03184c751b04f419f759d8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNjIyNjdjODc3MjZlMjZiN2QwMzE4NGM3NTFiMDRmNDE5Zjc1OWQ4",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Making the lambda capture (almost) nothing local",
      "tree": {
        "sha": "ed655e429d5a13e45015b3d8a9a578758898f595",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed655e429d5a13e45015b3d8a9a578758898f595"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a62267c87726e26b7d03184c751b04f419f759d8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62267c87726e26b7d03184c751b04f419f759d8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a62267c87726e26b7d03184c751b04f419f759d8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62267c87726e26b7d03184c751b04f419f759d8/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1997a3b1975b40826b0bb2772df7ce13f6291cce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1997a3b1975b40826b0bb2772df7ce13f6291cce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1997a3b1975b40826b0bb2772df7ce13f6291cce"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 24,
      "deletions": 25
    },
    "files": [
      {
        "sha": "a4af22ecf0a28c7e654aca0514b2d619ada399e8",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 25,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a62267c87726e26b7d03184c751b04f419f759d8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a62267c87726e26b7d03184c751b04f419f759d8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a62267c87726e26b7d03184c751b04f419f759d8",
        "patch": "@@ -59,29 +59,17 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // descendants.\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n-    // Our children are natrually uniqueu\n-    std::vector<txiter> stack;\n-    uint64_t epoch = GetFreshEpoch();\n-\n-    int64_t modifySize = 0;\n-    CAmount modifyFee = 0;\n-    int64_t modifyCount = 0;\n-    auto make_state_update = [&](txiter cit) {\n-        if (!setExclude.count(cit->GetTx().GetHash())) {\n-            modifySize += cit->GetTxSize();\n-            modifyFee += cit->GetModifiedFee();\n-            modifyCount++;\n-            cachedDescendants[updateIt].insert(cit);\n+    auto func = [this] (txiter param_it, txiter update_it, int64_t&size, CAmount& fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>& stack, bool& first_pass, const uint64_t epoch) {\n+        auto make_state_update = [&](txiter cit) {\n+            if (exclude.count(cit->GetTx().GetHash())) return;\n+            size += cit->GetTxSize();\n+            fee += cit->GetModifiedFee();\n+            count++;\n+            cache[update_it].insert(cit);\n             // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(updateIt->GetTxSize(), updateIt->GetModifiedFee(), 1, updateIt->GetSigOpCost()));\n-        }\n-    };\n-\n-    // Update and add to cached descendant map\n-    auto main_it = updateIt;\n-    bool first_pass = true;\n-    auto func = [&] (txiter param_it) {\n-        auto& direct_children = GetMemPoolChildren(main_it);\n+            mapTx.modify(cit, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n+        };\n+        auto& direct_children = GetMemPoolChildren(param_it);\n         for (txiter cit : direct_children) {\n             if (first_pass) cit->already_touched(epoch);\n \n@@ -91,8 +79,8 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n             const setEntries &setChildren = GetMemPoolChildren(cit);\n             for (txiter childEntry : setChildren) {\n                 if (childEntry->already_touched(epoch)) continue;\n-                cacheMap::iterator cacheIt = cachedDescendants.find(childEntry);\n-                if (cacheIt != cachedDescendants.end()) {\n+                cacheMap::iterator cacheIt = cache.find(childEntry);\n+                if (cacheIt != cache.end()) {\n                     // We've already calculated this one, just add the entries for this set\n                     // but don't traverse again.\n                     for (txiter cacheEntry : cacheIt->second) {\n@@ -107,8 +95,19 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         }\n         first_pass = false;\n     };\n+    // Our children are natrually uniqueu\n+    std::vector<txiter> stack;\n+    uint64_t epoch = GetFreshEpoch();\n+\n+    int64_t modifySize = 0;\n+    CAmount modifyFee = 0;\n+    int64_t modifyCount = 0;\n+\n+    // Update and add to cached descendant map\n+    auto main_it = updateIt;\n+    bool first_pass = true;\n     do {\n-        func(main_it);\n+        func(main_it, updateIt, modifySize, modifyFee, modifyCount, cachedDescendants, setExclude, stack, first_pass, epoch);\n     } while (!stack.empty() && (main_it = stack.back(), stack.pop_back(), true));\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }"
      }
    ]
  },
  {
    "sha": "d050078172311bfe06e5b6efbdd3c8326b0feeca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDUwMDc4MTcyMzExYmZlMDZlNWI2ZWZiZGQzYzgzMjZiMGZlZWNh",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Fully transform UpdateForDescendants into a mostly recursive form",
      "tree": {
        "sha": "8c903ac34d2a73d8c4c9ed8722ace6cc7210a2c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8c903ac34d2a73d8c4c9ed8722ace6cc7210a2c0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d050078172311bfe06e5b6efbdd3c8326b0feeca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d050078172311bfe06e5b6efbdd3c8326b0feeca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d050078172311bfe06e5b6efbdd3c8326b0feeca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d050078172311bfe06e5b6efbdd3c8326b0feeca/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a62267c87726e26b7d03184c751b04f419f759d8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a62267c87726e26b7d03184c751b04f419f759d8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a62267c87726e26b7d03184c751b04f419f759d8"
      }
    ],
    "stats": {
      "total": 29,
      "additions": 19,
      "deletions": 10
    },
    "files": [
      {
        "sha": "983101815d9ce27e996125c0adce33c563b14313",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 10,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d050078172311bfe06e5b6efbdd3c8326b0feeca/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d050078172311bfe06e5b6efbdd3c8326b0feeca/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d050078172311bfe06e5b6efbdd3c8326b0feeca",
        "patch": "@@ -57,9 +57,10 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // Update the given tx for any in-mempool descendants.\n // Assumes that setMemPoolChildren is correct for the given tx and all\n // descendants.\n-void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n-{\n-    auto func = [this] (txiter param_it, txiter update_it, int64_t&size, CAmount& fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>& stack, bool& first_pass, const uint64_t epoch) {\n+//\n+void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount&\n+        fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n+        stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit) {\n         auto make_state_update = [&](txiter cit) {\n             if (exclude.count(cit->GetTx().GetHash())) return;\n             size += cit->GetTxSize();\n@@ -71,7 +72,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n         };\n         auto& direct_children = GetMemPoolChildren(param_it);\n         for (txiter cit : direct_children) {\n-            if (first_pass) cit->already_touched(epoch);\n+            if (update_child_epochs) cit->already_touched(epoch);\n \n             // collect stats\n             make_state_update(cit);\n@@ -87,14 +88,18 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n                         if (cacheEntry->already_touched(epoch)) continue;\n                         make_state_update(cacheEntry);\n                     }\n-                } else {\n-                    // Schedule for later processing\n+                } else if (limit == 0) {\n+                    // Schedule for later processing, we're at the recursion limit\n                     stack.push_back(childEntry);\n+                } else {\n+                    UpdateForDescendantsInner(childEntry, update_it, size, fee, count, cache,\n+                            exclude, stack, false, epoch, limit-1);\n                 }\n             }\n         }\n-        first_pass = false;\n     };\n+void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n+{\n     // Our children are natrually uniqueu\n     std::vector<txiter> stack;\n     uint64_t epoch = GetFreshEpoch();\n@@ -104,11 +109,12 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     int64_t modifyCount = 0;\n \n     // Update and add to cached descendant map\n-    auto main_it = updateIt;\n     bool first_pass = true;\n+    auto next_it = updateIt;\n     do {\n-        func(main_it, updateIt, modifySize, modifyFee, modifyCount, cachedDescendants, setExclude, stack, first_pass, epoch);\n-    } while (!stack.empty() && (main_it = stack.back(), stack.pop_back(), true));\n+        UpdateForDescendantsInner(next_it, updateIt, modifySize, modifyFee, modifyCount, cachedDescendants, setExclude, stack, first_pass, epoch);\n+        first_pass = false;\n+    } while (!stack.empty() && (next_it = stack.back(), stack.pop_back(), true));\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n }\n "
      },
      {
        "sha": "4206e91118db3c5f283911359a1daf0eb1a8ba9c",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d050078172311bfe06e5b6efbdd3c8326b0feeca/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d050078172311bfe06e5b6efbdd3c8326b0feeca/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=d050078172311bfe06e5b6efbdd3c8326b0feeca",
        "patch": "@@ -725,6 +725,9 @@ class CTxMemPool\n     void UpdateForDescendants(txiter updateIt,\n             cacheMap &cachedDescendants,\n             const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount& fee,\n+            int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n+            stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n     void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */"
      }
    ]
  },
  {
    "sha": "ea2f363a669dca2f3ed75581ff627cdd952188dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTJmMzYzYTY2OWRjYTJmM2VkNzU1ODFmZjYyN2NkZDk1MjE4OGRk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Make CalculateDescendents efficiently use epochs",
      "tree": {
        "sha": "f6c9fbdd16a3413a59f7da62670d8e699c35f37c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f6c9fbdd16a3413a59f7da62670d8e699c35f37c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea2f363a669dca2f3ed75581ff627cdd952188dd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea2f363a669dca2f3ed75581ff627cdd952188dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea2f363a669dca2f3ed75581ff627cdd952188dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea2f363a669dca2f3ed75581ff627cdd952188dd/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d050078172311bfe06e5b6efbdd3c8326b0feeca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d050078172311bfe06e5b6efbdd3c8326b0feeca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d050078172311bfe06e5b6efbdd3c8326b0feeca"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 10,
      "deletions": 13
    },
    "files": [
      {
        "sha": "75d66981edfae1aaf013b4ea2f22d6bb394ae1e3",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 13,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea2f363a669dca2f3ed75581ff627cdd952188dd/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea2f363a669dca2f3ed75581ff627cdd952188dd/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=ea2f363a669dca2f3ed75581ff627cdd952188dd",
        "patch": "@@ -458,25 +458,22 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // can save time by not iterating over those entries.\n void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n {\n-    setEntries stage;\n-    if (setDescendants.count(entryit) == 0) {\n-        stage.insert(entryit);\n-    }\n+    if (!setDescendants.insert(entryit).second) return;\n     // Traverse down the children of entry, only adding children that are not\n     // accounted for in setDescendants already (because those children have either\n     // already been walked, or will be walked in this iteration).\n-    while (!stage.empty()) {\n-        txiter it = *stage.begin();\n-        setDescendants.insert(it);\n-        stage.erase(it);\n-\n+    const uint64_t epoch = GetFreshEpoch();\n+    txiter it = entryit;\n+    std::vector<txiter> stack;\n+    do {\n         const setEntries &setChildren = GetMemPoolChildren(it);\n         for (txiter childiter : setChildren) {\n-            if (!setDescendants.count(childiter)) {\n-                stage.insert(childiter);\n-            }\n+            if (childiter->already_touched(epoch)) continue;\n+            if (!setDescendants.insert(childiter).second) continue;\n+            stack.push_back(childiter);\n         }\n-    }\n+    } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n+\n }\n \n void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)"
      }
    ]
  },
  {
    "sha": "4b16ac9340c18ec4d641e48f51d6168165edc6fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YjE2YWM5MzQwYzE4ZWM0ZDY0MWU0OGY1MWQ2MTY4MTY1ZWRjNmZj",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Limit heap-stack usage in CalculateDescendants by using depth restricted recursion",
      "tree": {
        "sha": "ff95046ae42b55cdb35595b1c8e75cd567267fc7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff95046ae42b55cdb35595b1c8e75cd567267fc7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4b16ac9340c18ec4d641e48f51d6168165edc6fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16ac9340c18ec4d641e48f51d6168165edc6fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4b16ac9340c18ec4d641e48f51d6168165edc6fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16ac9340c18ec4d641e48f51d6168165edc6fc/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea2f363a669dca2f3ed75581ff627cdd952188dd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea2f363a669dca2f3ed75581ff627cdd952188dd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea2f363a669dca2f3ed75581ff627cdd952188dd"
      }
    ],
    "stats": {
      "total": 18,
      "additions": 12,
      "deletions": 6
    },
    "files": [
      {
        "sha": "16fce991b99801a3cd835b7e2261e9266c9953b0",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16ac9340c18ec4d641e48f51d6168165edc6fc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16ac9340c18ec4d641e48f51d6168165edc6fc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4b16ac9340c18ec4d641e48f51d6168165edc6fc",
        "patch": "@@ -456,6 +456,14 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // Also assumes that if an entry is in setDescendants already, then all\n // in-mempool descendants of it are already in setDescendants as well, so that we\n // can save time by not iterating over those entries.\n+void CTxMemPool::CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const {\n+        for (txiter childiter : GetMemPoolChildren(it)) {\n+            if (childiter->already_touched(epoch)) continue;\n+            if (!setDescendants.insert(childiter).second) continue;\n+            if (limit > 0) CalculateDescendants(childiter, setDescendants, stack, epoch, limit-1);\n+            else stack.push_back(childiter);\n+        }\n+}\n void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n {\n     if (!setDescendants.insert(entryit).second) return;\n@@ -466,12 +474,7 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n     txiter it = entryit;\n     std::vector<txiter> stack;\n     do {\n-        const setEntries &setChildren = GetMemPoolChildren(it);\n-        for (txiter childiter : setChildren) {\n-            if (childiter->already_touched(epoch)) continue;\n-            if (!setDescendants.insert(childiter).second) continue;\n-            stack.push_back(childiter);\n-        }\n+        CalculateDescendants(it, setDescendants, stack, epoch);\n     } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n \n }"
      },
      {
        "sha": "8d9c2aadd6dbaf2390d0b3fd690aa595597433b8",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4b16ac9340c18ec4d641e48f51d6168165edc6fc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4b16ac9340c18ec4d641e48f51d6168165edc6fc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4b16ac9340c18ec4d641e48f51d6168165edc6fc",
        "patch": "@@ -650,6 +650,9 @@ class CTxMemPool\n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n      *  already in it.  */\n+\n+    void CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack,\n+            const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void CalculateDescendants(txiter it, setEntries& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough"
      }
    ]
  },
  {
    "sha": "c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzVhZGUyNWVkYjg4YWEwYWUxZjJhMzgwY2MwZThmMTRkODJmNTNi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Expose interface for using more caching in CalculateDescendants",
      "tree": {
        "sha": "61288e59839c3fdd03ea15c235e8ff6cbef81936",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/61288e59839c3fdd03ea15c235e8ff6cbef81936"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4b16ac9340c18ec4d641e48f51d6168165edc6fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4b16ac9340c18ec4d641e48f51d6168165edc6fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4b16ac9340c18ec4d641e48f51d6168165edc6fc"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 16,
      "deletions": 6
    },
    "files": [
      {
        "sha": "3829dfb6419cb619604470a87758c199bc437163",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 6,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
        "patch": "@@ -456,25 +456,31 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // Also assumes that if an entry is in setDescendants already, then all\n // in-mempool descendants of it are already in setDescendants as well, so that we\n // can save time by not iterating over those entries.\n-void CTxMemPool::CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const {\n+void CTxMemPool::CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const\n+{\n         for (txiter childiter : GetMemPoolChildren(it)) {\n             if (childiter->already_touched(epoch)) continue;\n             if (!setDescendants.insert(childiter).second) continue;\n             if (limit > 0) CalculateDescendants(childiter, setDescendants, stack, epoch, limit-1);\n             else stack.push_back(childiter);\n         }\n }\n+\n void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n+{\n+    CalculateDescendants(entryit, setDescendants, GetFreshEpoch());\n+}\n+\n+void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants, const uint64_t cached_epoch) const\n {\n     if (!setDescendants.insert(entryit).second) return;\n     // Traverse down the children of entry, only adding children that are not\n     // accounted for in setDescendants already (because those children have either\n     // already been walked, or will be walked in this iteration).\n-    const uint64_t epoch = GetFreshEpoch();\n     txiter it = entryit;\n     std::vector<txiter> stack;\n     do {\n-        CalculateDescendants(it, setDescendants, stack, epoch);\n+        CalculateDescendants(it, setDescendants, stack, cached_epoch);\n     } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n \n }\n@@ -502,8 +508,9 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n             }\n         }\n         setEntries setAllRemoves;\n+        const uint64_t epoch = GetFreshEpoch();\n         for (txiter it : txToRemove) {\n-            CalculateDescendants(it, setAllRemoves);\n+            CalculateDescendants(it, setAllRemoves, epoch);\n         }\n \n         RemoveStaged(setAllRemoves, false, reason);\n@@ -540,8 +547,9 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         }\n     }\n     setEntries setAllRemoves;\n+    const uint64_t epoch = GetFreshEpoch();\n     for (txiter it : txToRemove) {\n-        CalculateDescendants(it, setAllRemoves);\n+        CalculateDescendants(it, setAllRemoves, epoch);\n     }\n     RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n@@ -952,8 +960,9 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n         it++;\n     }\n     setEntries stage;\n+    const uint64_t epoch = GetFreshEpoch();\n     for (txiter removeit : toremove) {\n-        CalculateDescendants(removeit, stage);\n+        CalculateDescendants(removeit, stage, epoch);\n     }\n     RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();"
      },
      {
        "sha": "c3baed26816bd26138292214a2380990c9b96fa3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
        "patch": "@@ -654,6 +654,7 @@ class CTxMemPool\n     void CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack,\n             const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void CalculateDescendants(txiter it, setEntries& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void CalculateDescendants(txiter entryit, setEntries& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions."
      }
    ]
  },
  {
    "sha": "75183723065f98ab6eaf2ba9004a9fef22aeaea1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NTE4MzcyMzA2NWY5OGFiNmVhZjJiYTkwMDRhOWZlZjIyYWVhZWEx",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Add CalculateDescendantsVec and use where easy to adapt",
      "tree": {
        "sha": "b17691427b51910e183e7d913d00214ecd34ef1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b17691427b51910e183e7d913d00214ecd34ef1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75183723065f98ab6eaf2ba9004a9fef22aeaea1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75183723065f98ab6eaf2ba9004a9fef22aeaea1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75183723065f98ab6eaf2ba9004a9fef22aeaea1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75183723065f98ab6eaf2ba9004a9fef22aeaea1/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c75ade25edb88aa0ae1f2a380cc0e8f14d82f53b"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 39,
      "deletions": 7
    },
    "files": [
      {
        "sha": "95e689a4a53707005803deec1a6fb1f471963131",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 7,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75183723065f98ab6eaf2ba9004a9fef22aeaea1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75183723065f98ab6eaf2ba9004a9fef22aeaea1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=75183723065f98ab6eaf2ba9004a9fef22aeaea1",
        "patch": "@@ -278,13 +278,12 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // we need to preserve until we're finished with all operations that\n         // need to traverse the mempool).\n         for (txiter removeIt : entriesToRemove) {\n-            setEntries setDescendants;\n-            CalculateDescendants(removeIt, setDescendants);\n-            setDescendants.erase(removeIt); // don't update state for self\n+            std::vector<txiter> descendants;\n+            CalculateDescendantsVec(removeIt, descendants);\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n             int modifySigOps = -removeIt->GetSigOpCost();\n-            for (txiter dit : setDescendants) {\n+            for (txiter dit : descendants) {\n                 mapTx.modify(dit, update_ancestor_state(modifySize, modifyFee, -1, modifySigOps));\n             }\n         }\n@@ -485,6 +484,32 @@ void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants\n \n }\n \n+void CTxMemPool::CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const\n+{\n+    for (txiter childiter : GetMemPoolChildren(it)) {\n+        if (childiter->already_touched(epoch)) continue;\n+        descendants.push_back(childiter);\n+        if (limit > 0) CalculateDescendantsVec(childiter, descendants, stack, epoch, limit-1);\n+        else stack.push_back(childiter);\n+    }\n+}\n+\n+void CTxMemPool::CalculateDescendantsVec(txiter entryit, std::vector<txiter>& descendants) const\n+{\n+    CalculateDescendantsVec(entryit, descendants, GetFreshEpoch());\n+}\n+\n+void CTxMemPool::CalculateDescendantsVec(txiter entryit, std::vector<txiter>& descendants, const uint64_t cached_epoch) const\n+{\n+    // Traverse down the children of entry, only adding children that are not marked as visited by\n+    // the epoch\n+    txiter it = entryit;\n+    std::vector<txiter> stack;\n+    do {\n+        CalculateDescendantsVec(it, descendants, stack, cached_epoch);\n+    } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n+}\n+\n void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)\n {\n     // Remove transaction from memory pool\n@@ -859,9 +884,8 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n             // Now update all descendants' modified fees with ancestors\n-            setEntries setDescendants;\n-            CalculateDescendants(it, setDescendants);\n-            setDescendants.erase(it);\n+            std::vector<txiter> setDescendants;\n+            CalculateDescendantsVec(it, setDescendants);\n             for (txiter descendantIt : setDescendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n             }"
      },
      {
        "sha": "a6e2d2729c5c5d55b794db5dba608d99bb262952",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75183723065f98ab6eaf2ba9004a9fef22aeaea1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75183723065f98ab6eaf2ba9004a9fef22aeaea1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=75183723065f98ab6eaf2ba9004a9fef22aeaea1",
        "patch": "@@ -656,6 +656,14 @@ class CTxMemPool\n     void CalculateDescendants(txiter it, setEntries& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void CalculateDescendants(txiter entryit, setEntries& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n+    /* Assumes empty descendants vector. Useful when we are just going to iterate over them\n+     *\n+     * unlike CalculateDescendants, CalculateDescendantsVec does not include self*/\n+    void CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack,\n+            const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void CalculateDescendantsVec(txiter it, std::vector<txiter>& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void CalculateDescendantsVec(txiter entryit, std::vector<txiter>& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n       *  The incrementalRelayFee policy variable is used to bound the time it"
      }
    ]
  },
  {
    "sha": "4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NjAxOTY4ZjliOWUzN2Y2ZTIyZGRjNmY5MmFmM2IzZjE1ZDRmYzdh",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Refactor RemoveStaged and UpdateRemoveForMempool to accept a vector instead of a setEntries",
      "tree": {
        "sha": "1597e8b8f2bd640d3249f4fcf75634371e5cfb65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1597e8b8f2bd640d3249f4fcf75634371e5cfb65"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75183723065f98ab6eaf2ba9004a9fef22aeaea1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75183723065f98ab6eaf2ba9004a9fef22aeaea1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75183723065f98ab6eaf2ba9004a9fef22aeaea1"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 40,
      "deletions": 12
    },
    "files": [
      {
        "sha": "6037253f9c71e4f95d4cb49c84253cfb04c15c66",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 12,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
        "patch": "@@ -265,7 +265,8 @@ void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n     }\n }\n \n-void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants)\n+template <typename T>\n+void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool updateDescendants)\n {\n     // For each entry, walk back all ancestors and decrement size associated with this\n     // transaction\n@@ -321,6 +322,13 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n+void CTxMemPool::UpdateForRemoveFromMempool(const std::vector<txiter> &entriesToRemove, bool updateDescendants) {\n+    UpdateForRemoveFromMempoolImpl(entriesToRemove, updateDescendants);\n+}\n+\n+void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) {\n+    UpdateForRemoveFromMempoolImpl(entriesToRemove, updateDescendants);\n+}\n \n void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n {\n@@ -532,10 +540,12 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n                 txToRemove.insert(nextit);\n             }\n         }\n-        setEntries setAllRemoves;\n+        std::vector<txiter> setAllRemoves;\n         const uint64_t epoch = GetFreshEpoch();\n         for (txiter it : txToRemove) {\n-            CalculateDescendants(it, setAllRemoves, epoch);\n+            CalculateDescendantsVec(it, setAllRemoves, epoch);\n+            if (!it->already_touched(epoch))\n+                setAllRemoves.push_back(it);\n         }\n \n         RemoveStaged(setAllRemoves, false, reason);\n@@ -571,10 +581,12 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    setEntries setAllRemoves;\n+    std::vector<txiter> setAllRemoves;\n     const uint64_t epoch = GetFreshEpoch();\n     for (txiter it : txToRemove) {\n-        CalculateDescendants(it, setAllRemoves, epoch);\n+        CalculateDescendantsVec(it, setAllRemoves, epoch);\n+        if (!it->already_touched(epoch))\n+                setAllRemoves.push_back(it);\n     }\n     RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n }\n@@ -617,8 +629,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n-            setEntries stage;\n-            stage.insert(it);\n+            std::vector<txiter> stage{it};\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n         }\n         removeConflicts(*tx);\n@@ -966,14 +977,22 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+template<typename T>\n+void CTxMemPool::RemoveStagedImpl(T &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     for (txiter it : stage) {\n         removeUnchecked(it, reason);\n     }\n }\n \n+void CTxMemPool::RemoveStaged(std::vector<txiter> &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+    RemoveStagedImpl(stage, updateDescendants, reason);\n+}\n+void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+    RemoveStagedImpl(stage, updateDescendants, reason);\n+}\n+\n int CTxMemPool::Expire(std::chrono::seconds time)\n {\n     AssertLockHeld(cs);\n@@ -983,10 +1002,12 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n         toremove.insert(mapTx.project<0>(it));\n         it++;\n     }\n-    setEntries stage;\n+    std::vector<txiter> stage;\n     const uint64_t epoch = GetFreshEpoch();\n     for (txiter removeit : toremove) {\n-        CalculateDescendants(removeit, stage, epoch);\n+        CalculateDescendantsVec(removeit, stage, epoch);\n+        if (!removeit->already_touched(epoch))\n+                stage.push_back(removeit);\n     }\n     RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();\n@@ -1086,8 +1107,9 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n \n-        setEntries stage;\n-        CalculateDescendants(mapTx.project<0>(it), stage);\n+        std::vector<txiter> stage;\n+        CalculateDescendantsVec(mapTx.project<0>(it), stage);\n+        stage.push_back(mapTx.project<0>(it));\n         nTxnRemoved += stage.size();\n \n         std::vector<CTransaction> txn;"
      },
      {
        "sha": "c8094042251bcb758ca72867cc63b2ba00618fa4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
        "patch": "@@ -622,6 +622,9 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n+    template <typename T>\n+    void RemoveStagedImpl(T& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void RemoveStaged(std::vector<txiter>& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void RemoveStaged(setEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n@@ -747,6 +750,9 @@ class CTxMemPool\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */\n+    template <typename T>\n+    void UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateForRemoveFromMempool(const std::vector<txiter> &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Sever link between specified transaction and direct children. */\n     void UpdateChildrenForRemoval(txiter entry) EXCLUSIVE_LOCKS_REQUIRED(cs);"
      }
    ]
  },
  {
    "sha": "0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZmViNDdkZGJiY2YwZjA4Yjc4M2EyZDZiZWRmM2JhZDgxM2I4Y2Q5",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "use epochs in CalculateMemPoolAncestors",
      "tree": {
        "sha": "10d10c59ae7f310d0f297bb015bedaaaf734407e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10d10c59ae7f310d0f297bb015bedaaaf734407e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4601968f9b9e37f6e22ddc6f92af3b3f15d4fc7a"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 12,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8bc5ec3da708a2c70d9ecf0665a2cbdf994eca26",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 7,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
        "patch": "@@ -168,17 +168,18 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n-    setEntries parentHashes;\n+    std::vector<txiter> parentHashes;\n     const CTransaction &tx = entry.GetTx();\n-\n     if (fSearchForParents) {\n+        const uint64_t epoch = GetFreshEpoch();\n         // Get parents of this transaction that are in the mempool\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n             Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n-                parentHashes.insert(*piter);\n+                if ((*piter)->already_touched(epoch)) continue;\n+                parentHashes.push_back(*piter);\n                 if (parentHashes.size() + 1 > limitAncestorCount) {\n                     errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n                     return false;\n@@ -189,16 +190,19 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // If we're not searching for parents, we require this to be an\n         // entry in the mempool already.\n         txiter it = mapTx.iterator_to(entry);\n-        parentHashes = GetMemPoolParents(it);\n+        auto& ref_parents = GetMemPoolParents(it);\n+        parentHashes.assign(ref_parents.cbegin(), ref_parents.cend());\n     }\n \n     size_t totalSizeWithAncestors = entry.GetTxSize();\n \n+    const uint64_t epoch = GetFreshEpoch();\n     while (!parentHashes.empty()) {\n-        txiter stageit = *parentHashes.begin();\n+        txiter stageit = parentHashes.back();\n+        stageit->already_touched(epoch);\n+        parentHashes.pop_back();\n \n         setAncestors.insert(stageit);\n-        parentHashes.erase(stageit);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n         if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n@@ -215,8 +219,9 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n         for (txiter phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n+            if (phash->already_touched(epoch)) continue;\n             if (setAncestors.count(phash) == 0) {\n-                parentHashes.insert(phash);\n+                parentHashes.push_back(phash);\n             }\n             if (parentHashes.size() + setAncestors.size() + 1 > limitAncestorCount) {\n                 errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);"
      }
    ]
  },
  {
    "sha": "abd701d09d4a916065cd384a2858ba67597cadaa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYmQ3MDFkMDlkNGE5MTYwNjVjZDM4NGEyODU4YmE2NzU5N2NhZGFh",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Comput Ancestors more effciently",
      "tree": {
        "sha": "aced533acb013784a57bcfee4ef3aa6a5629b3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aced533acb013784a57bcfee4ef3aa6a5629b3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/abd701d09d4a916065cd384a2858ba67597cadaa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abd701d09d4a916065cd384a2858ba67597cadaa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/abd701d09d4a916065cd384a2858ba67597cadaa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abd701d09d4a916065cd384a2858ba67597cadaa/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0feb47ddbbcf0f08b783a2d6bedf3bad813b8cd9"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 17,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0af4a1b1cd11963f4c0480f21957f0283ce66657",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 13,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/abd701d09d4a916065cd384a2858ba67597cadaa/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/abd701d09d4a916065cd384a2858ba67597cadaa/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=abd701d09d4a916065cd384a2858ba67597cadaa",
        "patch": "@@ -168,19 +168,19 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n \n bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n-    std::vector<txiter> parentHashes;\n+    std::vector<txiter> ancestors;\n     const CTransaction &tx = entry.GetTx();\n+    const uint64_t epoch = GetFreshEpoch();\n     if (fSearchForParents) {\n-        const uint64_t epoch = GetFreshEpoch();\n         // Get parents of this transaction that are in the mempool\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n             Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n             if (piter) {\n                 if ((*piter)->already_touched(epoch)) continue;\n-                parentHashes.push_back(*piter);\n-                if (parentHashes.size() + 1 > limitAncestorCount) {\n+                ancestors.push_back(*piter);\n+                if (ancestors.size() + 1 > limitAncestorCount) {\n                     errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n                     return false;\n                 }\n@@ -191,18 +191,20 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         // entry in the mempool already.\n         txiter it = mapTx.iterator_to(entry);\n         auto& ref_parents = GetMemPoolParents(it);\n-        parentHashes.assign(ref_parents.cbegin(), ref_parents.cend());\n+        ancestors.assign(ref_parents.cbegin(), ref_parents.cend());\n+        // touch before walking so we don't add a duplicate\n+        for (txiter it : ancestors) {\n+            it->already_touched(epoch);\n+        }\n     }\n \n+\n     size_t totalSizeWithAncestors = entry.GetTxSize();\n \n-    const uint64_t epoch = GetFreshEpoch();\n-    while (!parentHashes.empty()) {\n-        txiter stageit = parentHashes.back();\n-        stageit->already_touched(epoch);\n-        parentHashes.pop_back();\n+    size_t next_idx = 0;\n+    while (next_idx < ancestors.size()) {\n+        txiter stageit = ancestors[next_idx++];\n \n-        setAncestors.insert(stageit);\n         totalSizeWithAncestors += stageit->GetTxSize();\n \n         if (stageit->GetSizeWithDescendants() + entry.GetTxSize() > limitDescendantSize) {\n@@ -221,14 +223,16 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n             // If this is a new ancestor, add it.\n             if (phash->already_touched(epoch)) continue;\n             if (setAncestors.count(phash) == 0) {\n-                parentHashes.push_back(phash);\n+                ancestors.push_back(phash);\n             }\n-            if (parentHashes.size() + setAncestors.size() + 1 > limitAncestorCount) {\n+            if (setAncestors.size() + ancestors.size() + 1 > limitAncestorCount) {\n                 errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n                 return false;\n             }\n         }\n     }\n+    // This is just to preserve the output type for now\n+    for (txiter ancestor : ancestors) setAncestors.insert(ancestor);\n \n     return true;\n }"
      }
    ]
  },
  {
    "sha": "4c69c81eee0940791125e0d924fbb52ccf286db0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0YzY5YzgxZWVlMDk0MDc5MTEyNWUwZDkyNGZiYjUyY2NmMjg2ZGIw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "make CalculateAncestors use a vector<txiter> instead of a set<txiter> for ancestors output\n\nTODO: Modify Miner",
      "tree": {
        "sha": "8d608e73d63bcc056f35c0c6936350ccbf0c992f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d608e73d63bcc056f35c0c6936350ccbf0c992f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4c69c81eee0940791125e0d924fbb52ccf286db0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69c81eee0940791125e0d924fbb52ccf286db0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69c81eee0940791125e0d924fbb52ccf286db0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69c81eee0940791125e0d924fbb52ccf286db0/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "abd701d09d4a916065cd384a2858ba67597cadaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/abd701d09d4a916065cd384a2858ba67597cadaa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/abd701d09d4a916065cd384a2858ba67597cadaa"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 46,
      "deletions": 45
    },
    "files": [
      {
        "sha": "9d13cae466a1fb73ca1198c0cfb539e1b67a92f1",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -301,7 +301,7 @@ class ChainImpl : public Chain\n     {\n         LockPoints lp;\n         CTxMemPoolEntry entry(tx, 0, 0, 0, false, 0, lp);\n-        CTxMemPool::setEntries ancestors;\n+        CTxMemPool::vecEntries ancestors;\n         auto limit_ancestor_count = gArgs.GetArg(\"-limitancestorcount\", DEFAULT_ANCESTOR_LIMIT);\n         auto limit_ancestor_size = gArgs.GetArg(\"-limitancestorsize\", DEFAULT_ANCESTOR_SIZE_LIMIT) * 1000;\n         auto limit_descendant_count = gArgs.GetArg(\"-limitdescendantcount\", DEFAULT_DESCENDANT_LIMIT);"
      },
      {
        "sha": "1f3007a1dc6e8d898674401d4074eaae440d03d5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -388,10 +388,11 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n             continue;\n         }\n \n-        CTxMemPool::setEntries ancestors;\n+        std::vector<CTxMemPool::txiter> vec_ancestors;\n         uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n         std::string dummy;\n-        m_mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+        m_mempool.CalculateMemPoolAncestors(*iter, vec_ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+        CTxMemPool::setEntries ancestors{vec_ancestors.begin(), vec_ancestors.end()};\n \n         onlyUnconfirmed(ancestors);\n         ancestors.insert(iter);"
      },
      {
        "sha": "5c6b569c8ba86ccd84612ad41507e2a4413c5240",
        "filename": "src/policy/rbf.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/policy/rbf.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/policy/rbf.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -9,7 +9,7 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n {\n     AssertLockHeld(pool.cs);\n \n-    CTxMemPool::setEntries setAncestors;\n+    CTxMemPool::vecEntries ancestors;\n \n     // First check the transaction itself.\n     if (SignalsOptInRBF(tx)) {\n@@ -27,9 +27,9 @@ RBFTransactionState IsRBFOptIn(const CTransaction& tx, const CTxMemPool& pool)\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     CTxMemPoolEntry entry = *pool.mapTx.find(tx.GetHash());\n-    pool.CalculateMemPoolAncestors(entry, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n+    pool.CalculateMemPoolAncestors(entry, ancestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n-    for (CTxMemPool::txiter it : setAncestors) {\n+    for (CTxMemPool::txiter it : ancestors) {\n         if (SignalsOptInRBF(it->GetTx())) {\n             return RBFTransactionState::REPLACEABLE_BIP125;\n         }"
      },
      {
        "sha": "e4aad10c804b607692cbef17b078b22bcf5fca78",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -574,7 +574,7 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not in mempool\");\n     }\n \n-    CTxMemPool::setEntries setAncestors;\n+    CTxMemPool::vecEntries setAncestors;\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     mempool.CalculateMemPoolAncestors(*it, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);"
      },
      {
        "sha": "24c36a68f667b8210ded78479c45a933c8063c9c",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 16,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -183,8 +183,6 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder.insert(sortedOrder.begin(), tx6.GetHash().ToString());\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n-    CTxMemPool::setEntries setAncestors;\n-    setAncestors.insert(pool.mapTx.find(tx6.GetHash()));\n     CMutableTransaction tx7 = CMutableTransaction();\n     tx7.vin.resize(1);\n     tx7.vin[0].prevout = COutPoint(tx6.GetHash(), 0);\n@@ -195,12 +193,13 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx7.vout[1].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx7.vout[1].nValue = 1 * COIN;\n \n-    CTxMemPool::setEntries setAncestorsCalculated;\n+    CTxMemPool::vecEntries ancestors {pool.mapTx.find(tx6.GetHash())};\n+    CTxMemPool::vecEntries ancestors_calculated;\n     std::string dummy;\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n-    BOOST_CHECK(setAncestorsCalculated == setAncestors);\n-\n-    pool.addUnchecked(entry.FromTx(tx7), setAncestors);\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(2000000LL).FromTx(tx7), ancestors_calculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK(ancestors_calculated.size() == 1);\n+    BOOST_CHECK(ancestors == ancestors_calculated);\n+    pool.addUnchecked(entry.FromTx(tx7), ancestors);\n     BOOST_CHECK_EQUAL(pool.size(), 7U);\n \n     // Now tx6 should be sorted higher (high fee child): tx7, tx6, tx2, ...\n@@ -217,8 +216,8 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx8.vout.resize(1);\n     tx8.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx8.vout[0].nValue = 10 * COIN;\n-    setAncestors.insert(pool.mapTx.find(tx7.GetHash()));\n-    pool.addUnchecked(entry.Fee(0LL).Time(2).FromTx(tx8), setAncestors);\n+    ancestors.push_back(pool.mapTx.find(tx7.GetHash()));\n+    pool.addUnchecked(entry.Fee(0LL).Time(2).FromTx(tx8), ancestors);\n \n     // Now tx8 should be sorted low, but tx6/tx both high\n     sortedOrder.insert(sortedOrder.begin(), tx8.GetHash().ToString());\n@@ -232,7 +231,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx9.vout.resize(1);\n     tx9.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx9.vout[0].nValue = 1 * COIN;\n-    pool.addUnchecked(entry.Fee(0LL).Time(3).FromTx(tx9), setAncestors);\n+    pool.addUnchecked(entry.Fee(0LL).Time(3).FromTx(tx9), ancestors);\n \n     // tx9 should be sorted low\n     BOOST_CHECK_EQUAL(pool.size(), 9U);\n@@ -241,8 +240,8 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n \n     std::vector<std::string> snapshotOrder = sortedOrder;\n \n-    setAncestors.insert(pool.mapTx.find(tx8.GetHash()));\n-    setAncestors.insert(pool.mapTx.find(tx9.GetHash()));\n+    ancestors.push_back(pool.mapTx.find(tx8.GetHash()));\n+    ancestors.push_back(pool.mapTx.find(tx9.GetHash()));\n     /* tx10 depends on tx8 and tx9 and has a high fee*/\n     CMutableTransaction tx10 = CMutableTransaction();\n     tx10.vin.resize(2);\n@@ -254,11 +253,14 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     tx10.vout[0].scriptPubKey = CScript() << OP_11 << OP_EQUAL;\n     tx10.vout[0].nValue = 10 * COIN;\n \n-    setAncestorsCalculated.clear();\n-    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), setAncestorsCalculated, 100, 1000000, 1000, 1000000, dummy), true);\n-    BOOST_CHECK(setAncestorsCalculated == setAncestors);\n+    ancestors_calculated.clear();\n+    BOOST_CHECK_EQUAL(pool.CalculateMemPoolAncestors(entry.Fee(200000LL).Time(4).FromTx(tx10), ancestors_calculated, 100, 1000000, 1000, 1000000, dummy), true);\n+    BOOST_CHECK(ancestors_calculated.size() == ancestors.size());\n+    std::sort(ancestors_calculated.begin(), ancestors_calculated.end(), CTxMemPool::CompareIteratorByHash());\n+    std::sort(ancestors.begin(), ancestors.end(), CTxMemPool::CompareIteratorByHash());\n+    BOOST_CHECK(std::equal(ancestors.begin(), ancestors.end(), ancestors_calculated.begin()));\n \n-    pool.addUnchecked(entry.FromTx(tx10), setAncestors);\n+    pool.addUnchecked(entry.FromTx(tx10), ancestors);\n \n     /**\n      *  tx8 and tx9 should both now be sorted higher"
      },
      {
        "sha": "760b78c89f4004d30e3d1be2bf49d0fe0adec219",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 15,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -166,9 +166,9 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntries &ancestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */) const\n {\n-    std::vector<txiter> ancestors;\n+    assert(ancestors.size() == 0);\n     const CTransaction &tx = entry.GetTx();\n     const uint64_t epoch = GetFreshEpoch();\n     if (fSearchForParents) {\n@@ -222,22 +222,18 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntr\n         for (txiter phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n             if (phash->already_touched(epoch)) continue;\n-            if (setAncestors.count(phash) == 0) {\n-                ancestors.push_back(phash);\n-            }\n-            if (setAncestors.size() + ancestors.size() + 1 > limitAncestorCount) {\n+            ancestors.push_back(phash);\n+            if (ancestors.size() + 1 > limitAncestorCount) {\n                 errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n                 return false;\n             }\n         }\n     }\n-    // This is just to preserve the output type for now\n-    for (txiter ancestor : ancestors) setAncestors.insert(ancestor);\n \n     return true;\n }\n \n-void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors)\n+void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, vecEntries &setAncestors)\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n@@ -252,7 +248,7 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, setEntries &setAncestors\n     }\n }\n \n-void CTxMemPool::UpdateEntryForAncestors(txiter it, const setEntries &setAncestors)\n+void CTxMemPool::UpdateEntryForAncestors(txiter it, const vecEntries &setAncestors)\n {\n     int64_t updateCount = setAncestors.size();\n     int64_t updateSize = 0;\n@@ -299,7 +295,7 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         }\n     }\n     for (txiter removeIt : entriesToRemove) {\n-        setEntries setAncestors;\n+        vecEntries setAncestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n         // Since this is a tx that is already in the mempool, we can call CMPA\n@@ -386,7 +382,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, setEntries &setAncestors, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &setAncestors, bool validFeeEstimate)\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n@@ -725,7 +721,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         }\n         assert(setParentCheck == GetMemPoolParents(it));\n         // Verify ancestor state is correct.\n-        setEntries setAncestors;\n+        vecEntries setAncestors;\n         uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n         std::string dummy;\n         CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n@@ -896,7 +892,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n         if (it != mapTx.end()) {\n             mapTx.modify(it, update_fee_delta(delta));\n             // Now update all ancestors' modified fees with descendants\n-            setEntries setAncestors;\n+            vecEntries setAncestors;\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n             std::string dummy;\n             CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n@@ -1024,7 +1020,7 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n \n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n-    setEntries setAncestors;\n+    vecEntries setAncestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n     CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);"
      },
      {
        "sha": "ad5adbd5a74956e4d51fd5f8e7e2130d681bb593",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -536,6 +536,7 @@ class CTxMemPool\n         }\n     };\n     typedef std::set<txiter, CompareIteratorByHash> setEntries;\n+    typedef std::vector<txiter> vecEntries;\n \n     const setEntries & GetMemPoolParents(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     const setEntries & GetMemPoolChildren(txiter entry) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -581,7 +582,7 @@ class CTxMemPool\n     // and any other callers may break wallet's in-mempool tracking (due to\n     // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n     void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n-    void addUnchecked(const CTxMemPoolEntry& entry, setEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void addUnchecked(const CTxMemPoolEntry& entry, vecEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n     void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n@@ -648,7 +649,7 @@ class CTxMemPool\n      *  fSearchForParents = whether to search a tx's vin for in-mempool parents, or\n      *    look up parents from mapLinks. Must be true for entries not in the mempool\n      */\n-    bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, setEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, vecEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n@@ -744,9 +745,9 @@ class CTxMemPool\n             int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n             stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n-    void UpdateAncestorsOf(bool add, txiter hash, setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateAncestorsOf(bool add, txiter hash, vecEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */\n-    void UpdateEntryForAncestors(txiter it, const setEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateEntryForAncestors(txiter it, const vecEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */"
      },
      {
        "sha": "33388a21cc69f1c820d89e9d7550f3b775944a77",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4c69c81eee0940791125e0d924fbb52ccf286db0/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4c69c81eee0940791125e0d924fbb52ccf286db0/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=4c69c81eee0940791125e0d924fbb52ccf286db0",
        "patch": "@@ -466,7 +466,7 @@ class MemPoolAccept\n         Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n         std::set<uint256> m_conflicts;\n         CTxMemPool::setEntries m_all_conflicting;\n-        CTxMemPool::setEntries m_ancestors;\n+        CTxMemPool::vecEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n \n         bool m_replacement_transaction;\n@@ -544,7 +544,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Alias what we need out of ws\n     std::set<uint256>& setConflicts = ws.m_conflicts;\n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n+    CTxMemPool::vecEntries& setAncestors = ws.m_ancestors;\n+    assert(setAncestors.empty());\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n     bool& fReplacementTransaction = ws.m_replacement_transaction;\n     CAmount& nModifiedFees = ws.m_modified_fees;\n@@ -965,7 +966,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     const bool bypass_limits = args.m_bypass_limits;\n \n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::setEntries& setAncestors = ws.m_ancestors;\n+    CTxMemPool::vecEntries& setAncestors = ws.m_ancestors;\n     const CAmount& nModifiedFees = ws.m_modified_fees;\n     const CAmount& nConflictingFees = ws.m_conflicting_fees;\n     const size_t& nConflictingSize = ws.m_conflicting_size;"
      }
    ]
  },
  {
    "sha": "6dd027cc8b6119a342a7767ceb07a1175a658b0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGQwMjdjYzhiNjExOWEzNDJhNzc2N2NlYjA3YTExNzVhNjU4YjBk",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Optimize miner to take advantage of CalculateAncestors",
      "tree": {
        "sha": "3d55506db4bba0e47ca8961be94ea3c10463b148",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d55506db4bba0e47ca8961be94ea3c10463b148"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dd027cc8b6119a342a7767ceb07a1175a658b0d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd027cc8b6119a342a7767ceb07a1175a658b0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd027cc8b6119a342a7767ceb07a1175a658b0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd027cc8b6119a342a7767ceb07a1175a658b0d/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4c69c81eee0940791125e0d924fbb52ccf286db0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4c69c81eee0940791125e0d924fbb52ccf286db0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4c69c81eee0940791125e0d924fbb52ccf286db0"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 31,
      "deletions": 29
    },
    "files": [
      {
        "sha": "7ab7421c2273604c8f5957666efd40dbf43cc5d0",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 25,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dd027cc8b6119a342a7767ceb07a1175a658b0d/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dd027cc8b6119a342a7767ceb07a1175a658b0d/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=6dd027cc8b6119a342a7767ceb07a1175a658b0d",
        "patch": "@@ -176,17 +176,18 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n     return std::move(pblocktemplate);\n }\n \n-void BlockAssembler::onlyUnconfirmed(CTxMemPool::setEntries& testSet)\n+void BlockAssembler::onlyUnconfirmed(CTxMemPool::vecEntries& testSet)\n {\n-    for (CTxMemPool::setEntries::iterator iit = testSet.begin(); iit != testSet.end(); ) {\n-        // Only test txs not already in the block\n-        if (inBlock.count(*iit)) {\n-            testSet.erase(iit++);\n-        }\n-        else {\n-            iit++;\n-        }\n+    size_t max_element = testSet.size(), i = 0;\n+    while (i < max_element) {\n+        bool not_in_block = !inBlock.count(testSet[i]);\n+        // if !not_in_block, set testSet[i] to testSet[max_element-1]\n+        max_element -= !not_in_block;\n+        testSet[i] = testSet[!not_in_block*max_element + not_in_block*i];\n+        i += not_in_block;\n     }\n+    // drop erased elements\n+    testSet.resize(max_element);\n }\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const\n@@ -203,7 +204,7 @@ bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost\n // - transaction finality (locktime)\n // - premature witness (in case segwit transactions are added to mempool before\n //   segwit activation)\n-bool BlockAssembler::TestPackageTransactions(const CTxMemPool::setEntries& package)\n+bool BlockAssembler::TestPackageTransactions(const CTxMemPool::vecEntries& package)\n {\n     for (CTxMemPool::txiter it : package) {\n         if (!IsFinalTx(it->GetTx(), nHeight, nLockTimeCutoff))\n@@ -233,7 +234,8 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     }\n }\n \n-int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded,\n+template<typename SortedIterable>\n+int BlockAssembler::UpdatePackagesForAdded(const SortedIterable& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n     int nDescendantsUpdated = 0;\n@@ -242,7 +244,7 @@ int BlockAssembler::UpdatePackagesForAdded(const CTxMemPool::setEntries& already\n         m_mempool.CalculateDescendants(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {\n-            if (alreadyAdded.count(desc))\n+            if (std::binary_search(alreadyAdded.cbegin(), alreadyAdded.cend(), desc, CTxMemPool::CompareIteratorByHash()))\n                 continue;\n             ++nDescendantsUpdated;\n             modtxiter mit = mapModifiedTx.find(desc);\n@@ -275,15 +277,13 @@ bool BlockAssembler::SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_tran\n     return mapModifiedTx.count(it) || inBlock.count(it) || failedTx.count(it);\n }\n \n-void BlockAssembler::SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries)\n+void BlockAssembler::SortForBlock(CTxMemPool::vecEntries& unsorted_entries)\n {\n     // Sort package by ancestor count\n     // If a transaction A depends on transaction B, then A's ancestor count\n     // must be greater than B's.  So this is sufficient to validly order the\n     // transactions for block inclusion.\n-    sortedEntries.clear();\n-    sortedEntries.insert(sortedEntries.begin(), package.begin(), package.end());\n-    std::sort(sortedEntries.begin(), sortedEntries.end(), CompareTxIterByAncestorCount());\n+    std::sort(unsorted_entries.begin(), unsorted_entries.end(), CompareTxIterByAncestorCount());\n }\n \n // This transaction selection algorithm orders the mempool based\n@@ -388,14 +388,13 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n             continue;\n         }\n \n-        std::vector<CTxMemPool::txiter> vec_ancestors;\n+        CTxMemPool::vecEntries ancestors;\n         uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n         std::string dummy;\n-        m_mempool.CalculateMemPoolAncestors(*iter, vec_ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n-        CTxMemPool::setEntries ancestors{vec_ancestors.begin(), vec_ancestors.end()};\n+        m_mempool.CalculateMemPoolAncestors(*iter, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n \n         onlyUnconfirmed(ancestors);\n-        ancestors.insert(iter);\n+        ancestors.push_back(iter);\n \n         // Test if all tx's are Final\n         if (!TestPackageTransactions(ancestors)) {\n@@ -410,18 +409,20 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         nConsecutiveFailed = 0;\n \n         // Package can be added. Sort the entries in a valid order.\n-        std::vector<CTxMemPool::txiter> sortedEntries;\n-        SortForBlock(ancestors, sortedEntries);\n+        SortForBlock(ancestors);\n \n-        for (size_t i=0; i<sortedEntries.size(); ++i) {\n-            AddToBlock(sortedEntries[i]);\n+        for (CTxMemPool::txiter ancestor : ancestors) {\n+            AddToBlock(ancestor);\n             // Erase from the modified set, if present\n-            mapModifiedTx.erase(sortedEntries[i]);\n+            mapModifiedTx.erase(ancestor);\n         }\n \n         ++nPackagesSelected;\n \n         // Update transactions that depend on each of these\n+        // Sort before passing in\n+        // TODO: unclear if hash order is needed or if txiter would suffice\n+        std::sort(ancestors.begin(), ancestors.end(), CTxMemPool::CompareIteratorByHash());\n         nDescendantsUpdated += UpdatePackagesForAdded(ancestors, mapModifiedTx);\n     }\n }"
      },
      {
        "sha": "15fb90543e08e5d5fc69a11c05d2ac2534cb23d1",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dd027cc8b6119a342a7767ceb07a1175a658b0d/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dd027cc8b6119a342a7767ceb07a1175a658b0d/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=6dd027cc8b6119a342a7767ceb07a1175a658b0d",
        "patch": "@@ -180,23 +180,24 @@ class BlockAssembler\n \n     // helper functions for addPackageTxs()\n     /** Remove confirmed (inBlock) entries from given set */\n-    void onlyUnconfirmed(CTxMemPool::setEntries& testSet);\n+    void onlyUnconfirmed(CTxMemPool::vecEntries& testSet);\n     /** Test if a new package would \"fit\" in the block */\n     bool TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const;\n     /** Perform checks on each transaction in a package:\n       * locktime, premature-witness, serialized size (if necessary)\n       * These checks should always succeed, and they're here\n       * only as an extra check in case of suboptimal node configuration */\n-    bool TestPackageTransactions(const CTxMemPool::setEntries& package);\n+    bool TestPackageTransactions(const CTxMemPool::vecEntries& package);\n     /** Return true if given transaction from mapTx has already been evaluated,\n       * or if the transaction's cached data in mapTx is incorrect. */\n     bool SkipMapTxEntry(CTxMemPool::txiter it, indexed_modified_transaction_set& mapModifiedTx, CTxMemPool::setEntries& failedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n     /** Sort the package in an order that is valid to appear in a block */\n-    void SortForBlock(const CTxMemPool::setEntries& package, std::vector<CTxMemPool::txiter>& sortedEntries);\n+    void SortForBlock(CTxMemPool::vecEntries& package);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n       * state updated assuming given transactions are inBlock. Returns number\n       * of updated descendants. */\n-    int UpdatePackagesForAdded(const CTxMemPool::setEntries& alreadyAdded, indexed_modified_transaction_set& mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(m_mempool.cs);\n+    template<typename SortedIterable>\n+    int UpdatePackagesForAdded(const SortedIterable& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n };\n \n /** Modify the extranonce in a block */"
      }
    ]
  },
  {
    "sha": "e253db28febf97cc36bd9b3511dd8130989403e8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMjUzZGIyOGZlYmY5N2NjMzZiZDliMzUxMWRkODEzMDk4OTQwM2U4",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "rename setAncestors to ancestors as we no longer use a set type",
      "tree": {
        "sha": "cfa32d5ada9c098af3f818d4670e88cc124a382c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfa32d5ada9c098af3f818d4670e88cc124a382c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e253db28febf97cc36bd9b3511dd8130989403e8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253db28febf97cc36bd9b3511dd8130989403e8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e253db28febf97cc36bd9b3511dd8130989403e8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253db28febf97cc36bd9b3511dd8130989403e8/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dd027cc8b6119a342a7767ceb07a1175a658b0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dd027cc8b6119a342a7767ceb07a1175a658b0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dd027cc8b6119a342a7767ceb07a1175a658b0d"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 38,
      "deletions": 38
    },
    "files": [
      {
        "sha": "6ad90d80e3a407a0d998a0d25b4c25ba77a79b8e",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253db28febf97cc36bd9b3511dd8130989403e8/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253db28febf97cc36bd9b3511dd8130989403e8/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e253db28febf97cc36bd9b3511dd8130989403e8",
        "patch": "@@ -574,21 +574,21 @@ static UniValue getmempoolancestors(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not in mempool\");\n     }\n \n-    CTxMemPool::vecEntries setAncestors;\n+    CTxMemPool::vecEntries ancestors;\n     uint64_t noLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n-    mempool.CalculateMemPoolAncestors(*it, setAncestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n+    mempool.CalculateMemPoolAncestors(*it, ancestors, noLimit, noLimit, noLimit, noLimit, dummy, false);\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);\n-        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : ancestors) {\n             o.push_back(ancestorIt->GetTx().GetHash().ToString());\n         }\n \n         return o;\n     } else {\n         UniValue o(UniValue::VOBJ);\n-        for (CTxMemPool::txiter ancestorIt : setAncestors) {\n+        for (CTxMemPool::txiter ancestorIt : ancestors) {\n             const CTxMemPoolEntry &e = *ancestorIt;\n             const uint256& _hash = e.GetTx().GetHash();\n             UniValue info(UniValue::VOBJ);"
      },
      {
        "sha": "11f6b91cc5d3b36ffadff9acd29867704702ba32",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 21,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253db28febf97cc36bd9b3511dd8130989403e8/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253db28febf97cc36bd9b3511dd8130989403e8/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=e253db28febf97cc36bd9b3511dd8130989403e8",
        "patch": "@@ -233,7 +233,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntr\n     return true;\n }\n \n-void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, vecEntries &setAncestors)\n+void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, vecEntries &ancestors)\n {\n     setEntries parentIters = GetMemPoolParents(it);\n     // add or remove this tx as a child of each parent\n@@ -243,18 +243,18 @@ void CTxMemPool::UpdateAncestorsOf(bool add, txiter it, vecEntries &setAncestors\n     const int64_t updateCount = (add ? 1 : -1);\n     const int64_t updateSize = updateCount * it->GetTxSize();\n     const CAmount updateFee = updateCount * it->GetModifiedFee();\n-    for (txiter ancestorIt : setAncestors) {\n+    for (txiter ancestorIt : ancestors) {\n         mapTx.modify(ancestorIt, update_descendant_state(updateSize, updateFee, updateCount));\n     }\n }\n \n-void CTxMemPool::UpdateEntryForAncestors(txiter it, const vecEntries &setAncestors)\n+void CTxMemPool::UpdateEntryForAncestors(txiter it, const vecEntries &ancestors)\n {\n-    int64_t updateCount = setAncestors.size();\n+    int64_t updateCount = ancestors.size();\n     int64_t updateSize = 0;\n     CAmount updateFee = 0;\n     int64_t updateSigOpsCost = 0;\n-    for (txiter ancestorIt : setAncestors) {\n+    for (txiter ancestorIt : ancestors) {\n         updateSize += ancestorIt->GetTxSize();\n         updateFee += ancestorIt->GetModifiedFee();\n         updateSigOpsCost += ancestorIt->GetSigOpCost();\n@@ -295,7 +295,7 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         }\n     }\n     for (txiter removeIt : entriesToRemove) {\n-        vecEntries setAncestors;\n+        vecEntries ancestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n         // Since this is a tx that is already in the mempool, we can call CMPA\n@@ -315,10 +315,10 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         // differ from the set of mempool parents we'd calculate by searching,\n         // and it's important that we use the mapLinks[] notion of ancestor\n         // transactions as the set of things to update for removal.\n-        CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+        CalculateMemPoolAncestors(entry, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n         // Note that UpdateAncestorsOf severs the child links that point to\n         // removeIt in the entries for the parents of removeIt.\n-        UpdateAncestorsOf(false, removeIt, setAncestors);\n+        UpdateAncestorsOf(false, removeIt, ancestors);\n     }\n     // After updating all the ancestor sizes, we can now sever the link between each\n     // transaction being removed and any mempool children (ie, update setMemPoolParents\n@@ -382,7 +382,7 @@ void CTxMemPool::AddTransactionsUpdated(unsigned int n)\n     nTransactionsUpdated += n;\n }\n \n-void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &setAncestors, bool validFeeEstimate)\n+void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &ancestors, bool validFeeEstimate)\n {\n     NotifyEntryAdded(entry.GetSharedTx());\n     // Add to memory pool without checking anything.\n@@ -421,8 +421,8 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &setAnces\n     // to clean up the mess we're leaving here.\n \n     // Update ancestors with information about this tx\n-    UpdateAncestorsOf(true, newit, setAncestors);\n-    UpdateEntryForAncestors(newit, setAncestors);\n+    UpdateAncestorsOf(true, newit, ancestors);\n+    UpdateEntryForAncestors(newit, ancestors);\n \n     nTransactionsUpdated++;\n     totalTxSize += entry.GetTxSize();\n@@ -721,16 +721,16 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         }\n         assert(setParentCheck == GetMemPoolParents(it));\n         // Verify ancestor state is correct.\n-        vecEntries setAncestors;\n+        vecEntries ancestors;\n         uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n         std::string dummy;\n-        CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n-        uint64_t nCountCheck = setAncestors.size() + 1;\n+        CalculateMemPoolAncestors(*it, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n+        uint64_t nCountCheck = ancestors.size() + 1;\n         uint64_t nSizeCheck = it->GetTxSize();\n         CAmount nFeesCheck = it->GetModifiedFee();\n         int64_t nSigOpCheck = it->GetSigOpCost();\n \n-        for (txiter ancestorIt : setAncestors) {\n+        for (txiter ancestorIt : ancestors) {\n             nSizeCheck += ancestorIt->GetTxSize();\n             nFeesCheck += ancestorIt->GetModifiedFee();\n             nSigOpCheck += ancestorIt->GetSigOpCost();\n@@ -892,11 +892,11 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n         if (it != mapTx.end()) {\n             mapTx.modify(it, update_fee_delta(delta));\n             // Now update all ancestors' modified fees with descendants\n-            vecEntries setAncestors;\n+            vecEntries ancestors;\n             uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n             std::string dummy;\n-            CalculateMemPoolAncestors(*it, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n-            for (txiter ancestorIt : setAncestors) {\n+            CalculateMemPoolAncestors(*it, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n+            for (txiter ancestorIt : ancestors) {\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n             // Now update all descendants' modified fees with ancestors\n@@ -1020,11 +1020,11 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n \n void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, bool validFeeEstimate)\n {\n-    vecEntries setAncestors;\n+    vecEntries ancestors;\n     uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n     std::string dummy;\n-    CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n-    return addUnchecked(entry, setAncestors, validFeeEstimate);\n+    CalculateMemPoolAncestors(entry, ancestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n+    return addUnchecked(entry, ancestors, validFeeEstimate);\n }\n \n void CTxMemPool::UpdateChild(txiter entry, txiter child, bool add)"
      },
      {
        "sha": "067557d71a85e1ff679256c3cf535af0f463f097",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253db28febf97cc36bd9b3511dd8130989403e8/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253db28febf97cc36bd9b3511dd8130989403e8/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=e253db28febf97cc36bd9b3511dd8130989403e8",
        "patch": "@@ -582,7 +582,7 @@ class CTxMemPool\n     // and any other callers may break wallet's in-mempool tracking (due to\n     // lack of CValidationInterface::TransactionAddedToMempool callbacks).\n     void addUnchecked(const CTxMemPoolEntry& entry, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n-    void addUnchecked(const CTxMemPoolEntry& entry, vecEntries& setAncestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n+    void addUnchecked(const CTxMemPoolEntry& entry, vecEntries& ancestors, bool validFeeEstimate = true) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n \n     void removeRecursive(const CTransaction& tx, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void removeForReorg(const CCoinsViewCache* pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs, cs_main);\n@@ -649,7 +649,7 @@ class CTxMemPool\n      *  fSearchForParents = whether to search a tx's vin for in-mempool parents, or\n      *    look up parents from mapLinks. Must be true for entries not in the mempool\n      */\n-    bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, vecEntries& setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, vecEntries& ancestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** Populate setDescendants with all in-mempool descendants of hash.\n      *  Assumes that setDescendants includes all in-mempool descendants of anything\n@@ -745,9 +745,9 @@ class CTxMemPool\n             int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n             stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n-    void UpdateAncestorsOf(bool add, txiter hash, vecEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateAncestorsOf(bool add, txiter hash, vecEntries &ancestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */\n-    void UpdateEntryForAncestors(txiter it, const vecEntries &setAncestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateEntryForAncestors(txiter it, const vecEntries &ancestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */"
      },
      {
        "sha": "57176c6313361cac0805f650bea6b44eebfd36ad",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e253db28febf97cc36bd9b3511dd8130989403e8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e253db28febf97cc36bd9b3511dd8130989403e8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=e253db28febf97cc36bd9b3511dd8130989403e8",
        "patch": "@@ -544,8 +544,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     // Alias what we need out of ws\n     std::set<uint256>& setConflicts = ws.m_conflicts;\n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::vecEntries& setAncestors = ws.m_ancestors;\n-    assert(setAncestors.empty());\n+    CTxMemPool::vecEntries& ancestors = ws.m_ancestors;\n+    assert(ancestors.empty());\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n     bool& fReplacementTransaction = ws.m_replacement_transaction;\n     CAmount& nModifiedFees = ws.m_modified_fees;\n@@ -745,8 +745,8 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     }\n \n     std::string errString;\n-    if (!m_pool.CalculateMemPoolAncestors(*entry, setAncestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n-        setAncestors.clear();\n+    if (!m_pool.CalculateMemPoolAncestors(*entry, ancestors, m_limit_ancestors, m_limit_ancestor_size, m_limit_descendants, m_limit_descendant_size, errString)) {\n+        ancestors.clear();\n         // If CalculateMemPoolAncestors fails second time, we want the original error string.\n         std::string dummy_err_string;\n         // Contracting/payment channels CPFP carve-out:\n@@ -761,16 +761,16 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         // outputs - one for each counterparty. For more info on the uses for\n         // this, see https://lists.linuxfoundation.org/pipermail/bitcoin-dev/2018-November/016518.html\n         if (nSize >  EXTRA_DESCENDANT_TX_SIZE_LIMIT ||\n-                !m_pool.CalculateMemPoolAncestors(*entry, setAncestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n+                !m_pool.CalculateMemPoolAncestors(*entry, ancestors, 2, m_limit_ancestor_size, m_limit_descendants + 1, m_limit_descendant_size + EXTRA_DESCENDANT_TX_SIZE_LIMIT, dummy_err_string)) {\n             return state.Invalid(TxValidationResult::TX_MEMPOOL_POLICY, \"too-long-mempool-chain\", errString);\n         }\n     }\n \n     // A transaction that spends outputs that would be replaced by it is invalid. Now\n     // that we have the set of all ancestors we can detect this\n-    // pathological case by making sure setConflicts and setAncestors don't\n+    // pathological case by making sure setConflicts and ancestors don't\n     // intersect.\n-    for (CTxMemPool::txiter ancestorIt : setAncestors)\n+    for (CTxMemPool::txiter ancestorIt : ancestors)\n     {\n         const uint256 &hashAncestor = ancestorIt->GetTx().GetHash();\n         if (setConflicts.count(hashAncestor))\n@@ -966,7 +966,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     const bool bypass_limits = args.m_bypass_limits;\n \n     CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n-    CTxMemPool::vecEntries& setAncestors = ws.m_ancestors;\n+    CTxMemPool::vecEntries& ancestors = ws.m_ancestors;\n     const CAmount& nModifiedFees = ws.m_modified_fees;\n     const CAmount& nConflictingFees = ws.m_conflicting_fees;\n     const size_t& nConflictingSize = ws.m_conflicting_size;\n@@ -994,7 +994,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     bool validForFeeEstimation = !fReplacementTransaction && !bypass_limits && IsCurrentForFeeEstimation() && m_pool.HasNoInputsOf(tx);\n \n     // Store transaction in memory\n-    m_pool.addUnchecked(*entry, setAncestors, validForFeeEstimation);\n+    m_pool.addUnchecked(*entry, ancestors, validForFeeEstimation);\n \n     // trim mempool and check if tx was trimmed\n     if (!bypass_limits) {"
      }
    ]
  },
  {
    "sha": "2bae8ace1bf61809e271161e5fd33b1ff94f761e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYmFlOGFjZTFiZjYxODA5ZTI3MTE2MWU1ZmQzM2IxZmY5NGY3NjFl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "replace all calls to CalculateDescendants with CalculateDescendantsVec",
      "tree": {
        "sha": "8947f51afc3b9f34f0426c18890d74d7e70bd4c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8947f51afc3b9f34f0426c18890d74d7e70bd4c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2bae8ace1bf61809e271161e5fd33b1ff94f761e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bae8ace1bf61809e271161e5fd33b1ff94f761e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2bae8ace1bf61809e271161e5fd33b1ff94f761e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bae8ace1bf61809e271161e5fd33b1ff94f761e/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e253db28febf97cc36bd9b3511dd8130989403e8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e253db28febf97cc36bd9b3511dd8130989403e8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e253db28febf97cc36bd9b3511dd8130989403e8"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 19,
      "deletions": 14
    },
    "files": [
      {
        "sha": "2eaeae3e8f2cf5cff25dff7c62f5b5b680f019a3",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2bae8ace1bf61809e271161e5fd33b1ff94f761e",
        "patch": "@@ -239,9 +239,13 @@ int BlockAssembler::UpdatePackagesForAdded(const SortedIterable& alreadyAdded,\n         indexed_modified_transaction_set &mapModifiedTx)\n {\n     int nDescendantsUpdated = 0;\n+    CTxMemPool::vecEntries descendants;\n     for (CTxMemPool::txiter it : alreadyAdded) {\n-        CTxMemPool::setEntries descendants;\n-        m_mempool.CalculateDescendants(it, descendants);\n+        descendants.clear();\n+        // can't use external epoch to loop because we want to update\n+        // all descendants\n+        // No need to add self (it) because we would filter it from the loop\n+        m_mempool.CalculateDescendantsVec(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {\n             if (std::binary_search(alreadyAdded.cbegin(), alreadyAdded.cend(), desc, CTxMemPool::CompareIteratorByHash()))"
      },
      {
        "sha": "b46460b6da1887a45a702937e92c5c9fe48a967b",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2bae8ace1bf61809e271161e5fd33b1ff94f761e",
        "patch": "@@ -642,10 +642,8 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not in mempool\");\n     }\n \n-    CTxMemPool::setEntries setDescendants;\n-    mempool.CalculateDescendants(it, setDescendants);\n-    // CTxMemPool::CalculateDescendants will include the given tx\n-    setDescendants.erase(it);\n+    CTxMemPool::vecEntries setDescendants;\n+    mempool.CalculateDescendantsVec(it, setDescendants);\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);"
      },
      {
        "sha": "6fa7e148316f0c72300d414646dfa63ff23b4a4f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2bae8ace1bf61809e271161e5fd33b1ff94f761e/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=2bae8ace1bf61809e271161e5fd33b1ff94f761e",
        "patch": "@@ -465,7 +465,7 @@ class MemPoolAccept\n     struct Workspace {\n         Workspace(const CTransactionRef& ptx) : m_ptx(ptx), m_hash(ptx->GetHash()) {}\n         std::set<uint256> m_conflicts;\n-        CTxMemPool::setEntries m_all_conflicting;\n+        CTxMemPool::vecEntries m_all_conflicting;\n         CTxMemPool::vecEntries m_ancestors;\n         std::unique_ptr<CTxMemPoolEntry> m_entry;\n \n@@ -543,7 +543,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n \n     // Alias what we need out of ws\n     std::set<uint256>& setConflicts = ws.m_conflicts;\n-    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n+    CTxMemPool::vecEntries& all_conflicting = ws.m_all_conflicting;\n     CTxMemPool::vecEntries& ancestors = ws.m_ancestors;\n     assert(ancestors.empty());\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n@@ -788,7 +788,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n     nConflictingSize = 0;\n     uint64_t nConflictingCount = 0;\n \n-    // If we don't hold the lock allConflicting might be incomplete; the\n+    // If we don't hold the lock all_conflicting might be incomplete; the\n     // subsequent RemoveStaged() and addUnchecked() calls don't guarantee\n     // mempool consistency for us.\n     fReplacementTransaction = setConflicts.size();\n@@ -835,10 +835,13 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         if (nConflictingCount <= maxDescendantsToVisit) {\n             // If not too many to replace, then calculate the set of\n             // transactions that would have to be evicted\n+            const uint64_t epoch = m_pool.GetFreshEpoch();\n             for (CTxMemPool::txiter it : setIterConflicting) {\n-                m_pool.CalculateDescendants(it, allConflicting);\n+                if (it->already_touched(epoch)) continue;\n+                m_pool.CalculateDescendantsVec(it, all_conflicting, epoch);\n+                all_conflicting.push_back(it);\n             }\n-            for (CTxMemPool::txiter it : allConflicting) {\n+            for (CTxMemPool::txiter it : all_conflicting) {\n                 nConflictingFees += it->GetModifiedFee();\n                 nConflictingSize += it->GetTxSize();\n             }\n@@ -965,7 +968,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     TxValidationState &state = args.m_state;\n     const bool bypass_limits = args.m_bypass_limits;\n \n-    CTxMemPool::setEntries& allConflicting = ws.m_all_conflicting;\n+    CTxMemPool::vecEntries& all_conflicting = ws.m_all_conflicting;\n     CTxMemPool::vecEntries& ancestors = ws.m_ancestors;\n     const CAmount& nModifiedFees = ws.m_modified_fees;\n     const CAmount& nConflictingFees = ws.m_conflicting_fees;\n@@ -974,7 +977,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n     std::unique_ptr<CTxMemPoolEntry>& entry = ws.m_entry;\n \n     // Remove conflicting transactions from the mempool\n-    for (CTxMemPool::txiter it : allConflicting)\n+    for (CTxMemPool::txiter it : all_conflicting)\n     {\n         LogPrint(BCLog::MEMPOOL, \"replacing tx %s with %s for %s BTC additional fees, %d delta bytes\\n\",\n                 it->GetTx().GetHash().ToString(),\n@@ -984,7 +987,7 @@ bool MemPoolAccept::Finalize(ATMPArgs& args, Workspace& ws)\n         if (args.m_replaced_transactions)\n             args.m_replaced_transactions->push_back(it->GetSharedTx());\n     }\n-    m_pool.RemoveStaged(allConflicting, false, MemPoolRemovalReason::REPLACED);\n+    m_pool.RemoveStaged(all_conflicting, false, MemPoolRemovalReason::REPLACED);\n \n     // This transaction should only count for fee estimation if:\n     // - it isn't a BIP 125 replacement transaction (may not be widely supported)"
      }
    ]
  },
  {
    "sha": "4dee350d07652d9c8d3337f48bf40036f4489d0b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGVlMzUwZDA3NjUyZDljOGQzMzM3ZjQ4YmY0MDAzNmY0NDg5ZDBi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Remove CalculateDescendants",
      "tree": {
        "sha": "de96b33b21214dc2e3a2d329fb6278031fa72f88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/de96b33b21214dc2e3a2d329fb6278031fa72f88"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dee350d07652d9c8d3337f48bf40036f4489d0b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dee350d07652d9c8d3337f48bf40036f4489d0b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dee350d07652d9c8d3337f48bf40036f4489d0b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dee350d07652d9c8d3337f48bf40036f4489d0b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2bae8ace1bf61809e271161e5fd33b1ff94f761e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2bae8ace1bf61809e271161e5fd33b1ff94f761e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2bae8ace1bf61809e271161e5fd33b1ff94f761e"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 12,
      "deletions": 40
    },
    "files": [
      {
        "sha": "2a0f1305cefc15bdf33fe78d82544fc4d72d251b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 28,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dee350d07652d9c8d3337f48bf40036f4489d0b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dee350d07652d9c8d3337f48bf40036f4489d0b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=4dee350d07652d9c8d3337f48bf40036f4489d0b",
        "patch": "@@ -468,34 +468,8 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // Also assumes that if an entry is in setDescendants already, then all\n // in-mempool descendants of it are already in setDescendants as well, so that we\n // can save time by not iterating over those entries.\n-void CTxMemPool::CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const\n-{\n-        for (txiter childiter : GetMemPoolChildren(it)) {\n-            if (childiter->already_touched(epoch)) continue;\n-            if (!setDescendants.insert(childiter).second) continue;\n-            if (limit > 0) CalculateDescendants(childiter, setDescendants, stack, epoch, limit-1);\n-            else stack.push_back(childiter);\n-        }\n-}\n-\n-void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants) const\n-{\n-    CalculateDescendants(entryit, setDescendants, GetFreshEpoch());\n-}\n-\n-void CTxMemPool::CalculateDescendants(txiter entryit, setEntries& setDescendants, const uint64_t cached_epoch) const\n-{\n-    if (!setDescendants.insert(entryit).second) return;\n-    // Traverse down the children of entry, only adding children that are not\n-    // accounted for in setDescendants already (because those children have either\n-    // already been walked, or will be walked in this iteration).\n-    txiter it = entryit;\n-    std::vector<txiter> stack;\n-    do {\n-        CalculateDescendants(it, setDescendants, stack, cached_epoch);\n-    } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n-\n-}\n+//\n+// Note: it does not get inserted into the vector\n \n void CTxMemPool::CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const\n {"
      },
      {
        "sha": "c7700ee4577ae07442f60711633577c1560a5edf",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dee350d07652d9c8d3337f48bf40036f4489d0b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dee350d07652d9c8d3337f48bf40036f4489d0b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=4dee350d07652d9c8d3337f48bf40036f4489d0b",
        "patch": "@@ -437,7 +437,7 @@ class SaltedTxidHasher\n  * in-block transactions by calling UpdateTransactionsFromBlock().  Note that\n  * until this is called, the mempool state is not consistent, and in particular\n  * mapLinks may not be correct (and therefore functions like\n- * CalculateMemPoolAncestors() and CalculateDescendants() that rely\n+ * CalculateMemPoolAncestors() and CalculateDescendantsVec() that rely\n  * on them to walk the mempool are not generally safe to use).\n  *\n  * Computational limits:\n@@ -651,20 +651,18 @@ class CTxMemPool\n      */\n     bool CalculateMemPoolAncestors(const CTxMemPoolEntry& entry, vecEntries& ancestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string& errString, bool fSearchForParents = true) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    /** Populate setDescendants with all in-mempool descendants of hash.\n-     *  Assumes that setDescendants includes all in-mempool descendants of anything\n-     *  already in it.  */\n-\n-    void CalculateDescendants(txiter it, setEntries& setDescendants, std::vector<txiter>& stack,\n-            const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void CalculateDescendants(txiter it, setEntries& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void CalculateDescendants(txiter entryit, setEntries& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-\n-    /* Assumes empty descendants vector. Useful when we are just going to iterate over them\n+    /** Populate descendants with all in-mempool descendants of hash.\n+     *\n+     *  Assumes that if descendants includes a txiter T, then all in-mempool descendants of T are\n+     *  already in it and T->already_touched(cached_epoch)\n+     *\n+     *  Assumes empty descendants vector. Useful when we are just going to\n+     *  iterate over them and don't care about order\n      *\n-     * unlike CalculateDescendants, CalculateDescendantsVec does not include self*/\n+     * CalculateDescendantsVec does not include self (it)*/\n     void CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack,\n             const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    /** Assumes setDescednants is empty */\n     void CalculateDescendantsVec(txiter it, std::vector<txiter>& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void CalculateDescendantsVec(txiter entryit, std::vector<txiter>& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      }
    ]
  },
  {
    "sha": "5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YWJjMzY4MTNhYjU4YzU4OTZiYzJjOWE5YTZkODRmOTViNzQzZmYx",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Drop 'set' from variable names for non-set data structures, replace vector<txiter> with typedef vecEntries",
      "tree": {
        "sha": "db38d64ada83221ea55f019a0cfc00cf1939f977",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/db38d64ada83221ea55f019a0cfc00cf1939f977"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4dee350d07652d9c8d3337f48bf40036f4489d0b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dee350d07652d9c8d3337f48bf40036f4489d0b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4dee350d07652d9c8d3337f48bf40036f4489d0b"
      }
    ],
    "stats": {
      "total": 72,
      "additions": 36,
      "deletions": 36
    },
    "files": [
      {
        "sha": "e57f7dd53a7fbb0f301a38ebbee13e69e2e097fa",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
        "patch": "@@ -59,7 +59,7 @@ size_t CTxMemPoolEntry::GetTxSize() const\n // descendants.\n //\n void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount&\n-        fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n+        fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, vecEntries&\n         stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit) {\n         auto make_state_update = [&](txiter cit) {\n             if (exclude.count(cit->GetTx().GetHash())) return;\n@@ -101,7 +101,7 @@ void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, in\n void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendants, const std::set<uint256> &setExclude)\n {\n     // Our children are natrually uniqueu\n-    std::vector<txiter> stack;\n+    vecEntries stack;\n     uint64_t epoch = GetFreshEpoch();\n \n     int64_t modifySize = 0;\n@@ -284,7 +284,7 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         // we need to preserve until we're finished with all operations that\n         // need to traverse the mempool).\n         for (txiter removeIt : entriesToRemove) {\n-            std::vector<txiter> descendants;\n+            vecEntries descendants;\n             CalculateDescendantsVec(removeIt, descendants);\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n@@ -327,7 +327,7 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n-void CTxMemPool::UpdateForRemoveFromMempool(const std::vector<txiter> &entriesToRemove, bool updateDescendants) {\n+void CTxMemPool::UpdateForRemoveFromMempool(const vecEntries &entriesToRemove, bool updateDescendants) {\n     UpdateForRemoveFromMempoolImpl(entriesToRemove, updateDescendants);\n }\n \n@@ -462,16 +462,16 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n     if (minerPolicyEstimator) {minerPolicyEstimator->removeTx(hash, false);}\n }\n \n-// Calculates descendants of entry that are not already in setDescendants, and adds to\n-// setDescendants. Assumes entryit is already a tx in the mempool and setMemPoolChildren\n+// Calculates descendants of entry that are not already in descendants, and adds to\n+// descendants. Assumes entryit is already a tx in the mempool and setMemPoolChildren\n // is correct for tx and all descendants.\n-// Also assumes that if an entry is in setDescendants already, then all\n-// in-mempool descendants of it are already in setDescendants as well, so that we\n+// Also assumes that if an entry is in descendants already, then all\n+// in-mempool descendants of it are already in descendants as well, so that we\n // can save time by not iterating over those entries.\n //\n // Note: it does not get inserted into the vector\n \n-void CTxMemPool::CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack, const uint64_t epoch, const uint8_t limit) const\n+void CTxMemPool::CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack, const uint64_t epoch, const uint8_t limit) const\n {\n     for (txiter childiter : GetMemPoolChildren(it)) {\n         if (childiter->already_touched(epoch)) continue;\n@@ -481,17 +481,17 @@ void CTxMemPool::CalculateDescendantsVec(txiter it, std::vector<txiter>& descend\n     }\n }\n \n-void CTxMemPool::CalculateDescendantsVec(txiter entryit, std::vector<txiter>& descendants) const\n+void CTxMemPool::CalculateDescendantsVec(txiter entryit, vecEntries& descendants) const\n {\n     CalculateDescendantsVec(entryit, descendants, GetFreshEpoch());\n }\n \n-void CTxMemPool::CalculateDescendantsVec(txiter entryit, std::vector<txiter>& descendants, const uint64_t cached_epoch) const\n+void CTxMemPool::CalculateDescendantsVec(txiter entryit, vecEntries& descendants, const uint64_t cached_epoch) const\n {\n     // Traverse down the children of entry, only adding children that are not marked as visited by\n     // the epoch\n     txiter it = entryit;\n-    std::vector<txiter> stack;\n+    vecEntries stack;\n     do {\n         CalculateDescendantsVec(it, descendants, stack, cached_epoch);\n     } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n@@ -519,15 +519,15 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n                 txToRemove.insert(nextit);\n             }\n         }\n-        std::vector<txiter> setAllRemoves;\n+        vecEntries all_removes;\n         const uint64_t epoch = GetFreshEpoch();\n         for (txiter it : txToRemove) {\n-            CalculateDescendantsVec(it, setAllRemoves, epoch);\n+            CalculateDescendantsVec(it, all_removes, epoch);\n             if (!it->already_touched(epoch))\n-                setAllRemoves.push_back(it);\n+                all_removes.push_back(it);\n         }\n \n-        RemoveStaged(setAllRemoves, false, reason);\n+        RemoveStaged(all_removes, false, reason);\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n@@ -560,14 +560,14 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    std::vector<txiter> setAllRemoves;\n+    vecEntries all_removes;\n     const uint64_t epoch = GetFreshEpoch();\n     for (txiter it : txToRemove) {\n-        CalculateDescendantsVec(it, setAllRemoves, epoch);\n+        CalculateDescendantsVec(it, all_removes, epoch);\n         if (!it->already_touched(epoch))\n-                setAllRemoves.push_back(it);\n+                all_removes.push_back(it);\n     }\n-    RemoveStaged(setAllRemoves, false, MemPoolRemovalReason::REORG);\n+    RemoveStaged(all_removes, false, MemPoolRemovalReason::REORG);\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)\n@@ -608,7 +608,7 @@ void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigne\n     {\n         txiter it = mapTx.find(tx->GetHash());\n         if (it != mapTx.end()) {\n-            std::vector<txiter> stage{it};\n+            vecEntries stage{it};\n             RemoveStaged(stage, true, MemPoolRemovalReason::BLOCK);\n         }\n         removeConflicts(*tx);\n@@ -874,9 +874,9 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n                 mapTx.modify(ancestorIt, update_descendant_state(0, nFeeDelta, 0));\n             }\n             // Now update all descendants' modified fees with ancestors\n-            std::vector<txiter> setDescendants;\n-            CalculateDescendantsVec(it, setDescendants);\n-            for (txiter descendantIt : setDescendants) {\n+            vecEntries descendants;\n+            CalculateDescendantsVec(it, descendants);\n+            for (txiter descendantIt : descendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n             }\n             ++nTransactionsUpdated;\n@@ -965,7 +965,7 @@ void CTxMemPool::RemoveStagedImpl(T &stage, bool updateDescendants, MemPoolRemov\n     }\n }\n \n-void CTxMemPool::RemoveStaged(std::vector<txiter> &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+void CTxMemPool::RemoveStaged(vecEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     RemoveStagedImpl(stage, updateDescendants, reason);\n }\n void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n@@ -981,7 +981,7 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n         toremove.insert(mapTx.project<0>(it));\n         it++;\n     }\n-    std::vector<txiter> stage;\n+    vecEntries stage;\n     const uint64_t epoch = GetFreshEpoch();\n     for (txiter removeit : toremove) {\n         CalculateDescendantsVec(removeit, stage, epoch);\n@@ -1086,7 +1086,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         trackPackageRemoved(removed);\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n \n-        std::vector<txiter> stage;\n+        vecEntries stage;\n         CalculateDescendantsVec(mapTx.project<0>(it), stage);\n         stage.push_back(mapTx.project<0>(it));\n         nTxnRemoved += stage.size();\n@@ -1115,7 +1115,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n \n uint64_t CTxMemPool::CalculateDescendantMaximum(txiter entry) const {\n     // find parent with highest descendant count\n-    std::vector<txiter> candidates;\n+    vecEntries candidates;\n     setEntries counted;\n     candidates.push_back(entry);\n     uint64_t maximum = 0;"
      },
      {
        "sha": "e9d3a213482d3af655560f0dbd0ed346ef0a91db",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
        "patch": "@@ -625,7 +625,7 @@ class CTxMemPool\n      */\n     template <typename T>\n     void RemoveStagedImpl(T& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void RemoveStaged(std::vector<txiter>& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void RemoveStaged(vecEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void RemoveStaged(setEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n@@ -660,11 +660,11 @@ class CTxMemPool\n      *  iterate over them and don't care about order\n      *\n      * CalculateDescendantsVec does not include self (it)*/\n-    void CalculateDescendantsVec(txiter it, std::vector<txiter>& descendants, std::vector<txiter>& stack,\n+    void CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack,\n             const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    /** Assumes setDescednants is empty */\n-    void CalculateDescendantsVec(txiter it, std::vector<txiter>& setDescendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void CalculateDescendantsVec(txiter entryit, std::vector<txiter>& setDescendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    /** Assumes descednants is empty */\n+    void CalculateDescendantsVec(txiter it, vecEntries& descendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void CalculateDescendantsVec(txiter entryit, vecEntries& descendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n@@ -740,7 +740,7 @@ class CTxMemPool\n             cacheMap &cachedDescendants,\n             const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount& fee,\n-            int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, std::vector<txiter>&\n+            int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, vecEntries&\n             stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n     void UpdateAncestorsOf(bool add, txiter hash, vecEntries &ancestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n@@ -751,8 +751,8 @@ class CTxMemPool\n       * ancestor state. */\n     template <typename T>\n     void UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void UpdateForRemoveFromMempool(const std::vector<txiter> &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateForRemoveFromMempool(const vecEntries& entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    void UpdateForRemoveFromMempool(const setEntries& entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Sever link between specified transaction and direct children. */\n     void UpdateChildrenForRemoval(txiter entry) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      }
    ]
  },
  {
    "sha": "d007a5407aefc274de0fea79264704a3cd16e2f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDA3YTU0MDdhZWZjMjc0ZGUwZmVhNzkyNjQ3MDRhM2NkMTZlMmY3",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "skip getting descendants during txToRemove if we've walked it already",
      "tree": {
        "sha": "d6ace06cd77cd20514fe9cdcaf225b0cffe9126d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6ace06cd77cd20514fe9cdcaf225b0cffe9126d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d007a5407aefc274de0fea79264704a3cd16e2f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d007a5407aefc274de0fea79264704a3cd16e2f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d007a5407aefc274de0fea79264704a3cd16e2f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d007a5407aefc274de0fea79264704a3cd16e2f7/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5abc36813ab58c5896bc2c9a9a6d84f95b743ff1"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "0bf8e94ef8b268b9c5a1ab7b7c983de7011bc902",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d007a5407aefc274de0fea79264704a3cd16e2f7/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d007a5407aefc274de0fea79264704a3cd16e2f7/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d007a5407aefc274de0fea79264704a3cd16e2f7",
        "patch": "@@ -522,9 +522,9 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         vecEntries all_removes;\n         const uint64_t epoch = GetFreshEpoch();\n         for (txiter it : txToRemove) {\n+            if (it->already_touched(epoch)) continue;\n             CalculateDescendantsVec(it, all_removes, epoch);\n-            if (!it->already_touched(epoch))\n-                all_removes.push_back(it);\n+            all_removes.push_back(it);\n         }\n \n         RemoveStaged(all_removes, false, reason);\n@@ -563,9 +563,9 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n     vecEntries all_removes;\n     const uint64_t epoch = GetFreshEpoch();\n     for (txiter it : txToRemove) {\n+        if (it->already_touched(epoch)) continue;\n         CalculateDescendantsVec(it, all_removes, epoch);\n-        if (!it->already_touched(epoch))\n-                all_removes.push_back(it);\n+        all_removes.push_back(it);\n     }\n     RemoveStaged(all_removes, false, MemPoolRemovalReason::REORG);\n }"
      }
    ]
  },
  {
    "sha": "8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzI4YzFiMWUzOTViZGY3NjFhZjViNmZmZWNhYmEwYjM2OWRmZTIw",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "make removeRecursive and removeForReorg more efficient in calculating txToRemove",
      "tree": {
        "sha": "fed360fbd7275bf653ef6673d37a7b15a255162a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fed360fbd7275bf653ef6673d37a7b15a255162a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8328c1b1e395bdf761af5b6ffecaba0b369dfe20/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d007a5407aefc274de0fea79264704a3cd16e2f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d007a5407aefc274de0fea79264704a3cd16e2f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d007a5407aefc274de0fea79264704a3cd16e2f7"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 31,
      "deletions": 16
    },
    "files": [
      {
        "sha": "0a1f438557727f67850c6b80fc698a25665d40b4",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 16,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8328c1b1e395bdf761af5b6ffecaba0b369dfe20/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8328c1b1e395bdf761af5b6ffecaba0b369dfe20/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
        "patch": "@@ -501,48 +501,56 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n {\n     // Remove transaction from memory pool\n     AssertLockHeld(cs);\n-        setEntries txToRemove;\n+        vecEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n         if (origit != mapTx.end()) {\n-            txToRemove.insert(origit);\n+            txToRemove.push_back(origit);\n         } else {\n             // When recursively removing but origTx isn't in the mempool\n             // be sure to remove any children that are in the pool. This can\n             // happen during chain re-orgs if origTx isn't re-accepted into\n             // the mempool for any reason.\n+            const uint64_t epoch = GetFreshEpoch();\n             for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n                 auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n                 if (it == mapNextTx.end())\n                     continue;\n                 txiter nextit = mapTx.find(it->second->GetHash());\n                 assert(nextit != mapTx.end());\n-                txToRemove.insert(nextit);\n+                if (nextit->already_touched(epoch)) continue;\n+                txToRemove.push_back(nextit);\n             }\n         }\n-        vecEntries all_removes;\n         const uint64_t epoch = GetFreshEpoch();\n+        // touch all txToRemove first to force CalculateDescendantsVec\n+        // to not recurse if we're going to call it later.\n+        // This guarantees txToRemove gets no duplicates\n         for (txiter it : txToRemove) {\n-            if (it->already_touched(epoch)) continue;\n-            CalculateDescendantsVec(it, all_removes, epoch);\n-            all_removes.push_back(it);\n+            it->already_touched(epoch);\n+        }\n+        // max_idx is used rather than iterator because txToRemove may grow\n+        const size_t max_idx = txToRemove.size();\n+        for (size_t idx = 0; idx < max_idx; ++idx) {\n+            CalculateDescendantsVec(txToRemove[idx], txToRemove, epoch);\n         }\n \n-        RemoveStaged(all_removes, false, reason);\n+        RemoveStaged(txToRemove, false, reason);\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     AssertLockHeld(cs);\n-    setEntries txToRemove;\n+    vecEntries txToRemove;\n+    // no need for an epoch or a set here since we only visit each it one time.\n     for (indexed_transaction_set::const_iterator it = mapTx.begin(); it != mapTx.end(); it++) {\n         const CTransaction& tx = it->GetTx();\n         LockPoints lp = it->GetLockPoints();\n         bool validLP =  TestLockPointValidity(&lp);\n         if (!CheckFinalTx(tx, flags) || !CheckSequenceLocks(*this, tx, flags, &lp, validLP)) {\n             // Note if CheckSequenceLocks fails the LockPoints may still be invalid\n             // So it's critical that we remove the tx and not depend on the LockPoints.\n-            txToRemove.insert(it);\n+            txToRemove.push_back(it);\n         } else if (it->GetSpendsCoinbase()) {\n             for (const CTxIn& txin : tx.vin) {\n                 indexed_transaction_set::const_iterator it2 = mapTx.find(txin.prevout.hash);\n@@ -551,7 +559,7 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n                 const Coin &coin = pcoins->AccessCoin(txin.prevout);\n                 if (nCheckFrequency != 0) assert(!coin.IsSpent());\n                 if (coin.IsSpent() || (coin.IsCoinBase() && ((signed long)nMemPoolHeight) - coin.nHeight < COINBASE_MATURITY)) {\n-                    txToRemove.insert(it);\n+                    txToRemove.push_back(it);\n                     break;\n                 }\n             }\n@@ -560,14 +568,21 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n             mapTx.modify(it, update_lock_points(lp));\n         }\n     }\n-    vecEntries all_removes;\n+\n     const uint64_t epoch = GetFreshEpoch();\n+    // touch all txToRemove first to force CalculateDescendantsVec\n+    // to not recurse if we're going to call it later.\n+    // This guarantees txToRemove gets no duplicates\n     for (txiter it : txToRemove) {\n-        if (it->already_touched(epoch)) continue;\n-        CalculateDescendantsVec(it, all_removes, epoch);\n-        all_removes.push_back(it);\n+        it->already_touched(epoch);\n     }\n-    RemoveStaged(all_removes, false, MemPoolRemovalReason::REORG);\n+    // max_idx is used rather than iterator because txToRemove may grow\n+    const size_t max_idx = txToRemove.size();\n+    for (size_t idx = 0; idx < max_idx; ++idx) {\n+        CalculateDescendantsVec(txToRemove[idx], txToRemove, epoch);\n+    }\n+    RemoveStaged(txToRemove, false, MemPoolRemovalReason::REORG);\n+\n }\n \n void CTxMemPool::removeConflicts(const CTransaction &tx)"
      }
    ]
  },
  {
    "sha": "18555982db38e563c1566d2eddd40b637c875519",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxODU1NTk4MmRiMzhlNTYzYzE1NjZkMmVkZGQ0MGI2MzdjODc1NTE5",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Remove RemoveStagedImpl and UpdateForRemoveFromMemPoolImpl as we have\nupdated dependents which required to use it generically.",
      "tree": {
        "sha": "3183df5cd12be58b28952ce5ace593983bd05006",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3183df5cd12be58b28952ce5ace593983bd05006"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18555982db38e563c1566d2eddd40b637c875519",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18555982db38e563c1566d2eddd40b637c875519",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18555982db38e563c1566d2eddd40b637c875519",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18555982db38e563c1566d2eddd40b637c875519/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8328c1b1e395bdf761af5b6ffecaba0b369dfe20",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8328c1b1e395bdf761af5b6ffecaba0b369dfe20"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 2,
      "deletions": 25
    },
    "files": [
      {
        "sha": "6e77380bd91d15b50e91dcfe089fb95032bf47de",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 19,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18555982db38e563c1566d2eddd40b637c875519/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18555982db38e563c1566d2eddd40b637c875519/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=18555982db38e563c1566d2eddd40b637c875519",
        "patch": "@@ -270,9 +270,7 @@ void CTxMemPool::UpdateChildrenForRemoval(txiter it)\n     }\n }\n \n-template <typename T>\n-void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool updateDescendants)\n-{\n+void CTxMemPool::UpdateForRemoveFromMempool(const vecEntries &entriesToRemove, bool updateDescendants) {\n     // For each entry, walk back all ancestors and decrement size associated with this\n     // transaction\n     const uint64_t nNoLimit = std::numeric_limits<uint64_t>::max();\n@@ -327,13 +325,6 @@ void CTxMemPool::UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool u\n         UpdateChildrenForRemoval(removeIt);\n     }\n }\n-void CTxMemPool::UpdateForRemoveFromMempool(const vecEntries &entriesToRemove, bool updateDescendants) {\n-    UpdateForRemoveFromMempoolImpl(entriesToRemove, updateDescendants);\n-}\n-\n-void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, bool updateDescendants) {\n-    UpdateForRemoveFromMempoolImpl(entriesToRemove, updateDescendants);\n-}\n \n void CTxMemPoolEntry::UpdateDescendantState(int64_t modifySize, CAmount modifyFee, int64_t modifyCount)\n {\n@@ -971,22 +962,14 @@ size_t CTxMemPool::DynamicMemoryUsage() const {\n     return memusage::MallocUsage(sizeof(CTxMemPoolEntry) + 12 * sizeof(void*)) * mapTx.size() + memusage::DynamicUsage(mapNextTx) + memusage::DynamicUsage(mapDeltas) + memusage::DynamicUsage(mapLinks) + memusage::DynamicUsage(vTxHashes) + cachedInnerUsage;\n }\n \n-template<typename T>\n-void CTxMemPool::RemoveStagedImpl(T &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n+void CTxMemPool::RemoveStaged(vecEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n     AssertLockHeld(cs);\n     UpdateForRemoveFromMempool(stage, updateDescendants);\n     for (txiter it : stage) {\n         removeUnchecked(it, reason);\n     }\n }\n \n-void CTxMemPool::RemoveStaged(vecEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n-    RemoveStagedImpl(stage, updateDescendants, reason);\n-}\n-void CTxMemPool::RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason) {\n-    RemoveStagedImpl(stage, updateDescendants, reason);\n-}\n-\n int CTxMemPool::Expire(std::chrono::seconds time)\n {\n     AssertLockHeld(cs);"
      },
      {
        "sha": "569022f0fef1d2e3bef49340a98230391d7b7b27",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18555982db38e563c1566d2eddd40b637c875519/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18555982db38e563c1566d2eddd40b637c875519/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=18555982db38e563c1566d2eddd40b637c875519",
        "patch": "@@ -623,10 +623,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    template <typename T>\n-    void RemoveStagedImpl(T& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void RemoveStaged(vecEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void RemoveStaged(setEntries& stage, bool updateDescendants, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally\n@@ -749,10 +746,7 @@ class CTxMemPool\n     /** For each transaction being removed, update ancestors and any direct children.\n       * If updateDescendants is true, then also update in-mempool descendants'\n       * ancestor state. */\n-    template <typename T>\n-    void UpdateForRemoveFromMempoolImpl(const T &entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void UpdateForRemoveFromMempool(const vecEntries& entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void UpdateForRemoveFromMempool(const setEntries& entriesToRemove, bool updateDescendants) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Sever link between specified transaction and direct children. */\n     void UpdateChildrenForRemoval(txiter entry) EXCLUSIVE_LOCKS_REQUIRED(cs);\n "
      }
    ]
  },
  {
    "sha": "09c58a18be79622b9cf6ca7c8f4b283461281364",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOWM1OGExOGJlNzk2MjJiOWNmNmNhN2M4ZjRiMjgzNDYxMjgxMzY0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Inline state updating function in mempool to make macos analyzer happy",
      "tree": {
        "sha": "550e8d883de4bf97ed7d28eab11eac9e437476eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/550e8d883de4bf97ed7d28eab11eac9e437476eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/09c58a18be79622b9cf6ca7c8f4b283461281364",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09c58a18be79622b9cf6ca7c8f4b283461281364",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/09c58a18be79622b9cf6ca7c8f4b283461281364",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09c58a18be79622b9cf6ca7c8f4b283461281364/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18555982db38e563c1566d2eddd40b637c875519",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18555982db38e563c1566d2eddd40b637c875519",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18555982db38e563c1566d2eddd40b637c875519"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 15,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f2bcb9f5e7f2a21f078d1ac6edcfcdc3917f1c08",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/09c58a18be79622b9cf6ca7c8f4b283461281364/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/09c58a18be79622b9cf6ca7c8f4b283461281364/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=09c58a18be79622b9cf6ca7c8f4b283461281364",
        "patch": "@@ -61,21 +61,19 @@ size_t CTxMemPoolEntry::GetTxSize() const\n void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount&\n         fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, vecEntries&\n         stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit) {\n-        auto make_state_update = [&](txiter cit) {\n-            if (exclude.count(cit->GetTx().GetHash())) return;\n-            size += cit->GetTxSize();\n-            fee += cit->GetModifiedFee();\n-            count++;\n-            cache[update_it].insert(cit);\n-            // Update ancestor state for each descendant\n-            mapTx.modify(cit, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n-        };\n         auto& direct_children = GetMemPoolChildren(param_it);\n         for (txiter cit : direct_children) {\n             if (update_child_epochs) cit->already_touched(epoch);\n \n             // collect stats\n-            make_state_update(cit);\n+            if (!exclude.count(cit->GetTx().GetHash())) {\n+                size += cit->GetTxSize();\n+                fee += cit->GetModifiedFee();\n+                count++;\n+                cache[update_it].insert(cit);\n+                // Update ancestor state for each descendant\n+                mapTx.modify(cit, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n+            }\n \n             const setEntries &setChildren = GetMemPoolChildren(cit);\n             for (txiter childEntry : setChildren) {\n@@ -86,7 +84,13 @@ void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, in\n                     // but don't traverse again.\n                     for (txiter cacheEntry : cacheIt->second) {\n                         if (cacheEntry->already_touched(epoch)) continue;\n-                        make_state_update(cacheEntry);\n+                        if (exclude.count(cacheEntry->GetTx().GetHash())) continue;\n+                        size += cacheEntry->GetTxSize();\n+                        fee += cacheEntry->GetModifiedFee();\n+                        count++;\n+                        cache[update_it].insert(cacheEntry);\n+                        // Update ancestor state for each descendant\n+                        mapTx.modify(cacheEntry, update_ancestor_state(update_it->GetTxSize(), update_it->GetModifiedFee(), 1, update_it->GetSigOpCost()));\n                     }\n                 } else if (limit == 0) {\n                     // Schedule for later processing, we're at the recursion limit"
      }
    ]
  },
  {
    "sha": "a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOGEzNTQ4YmJjY2MyOGI5YjBmZDQ1NTI2YjZiZDk2ZjYxZDdkZWVl",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Replace onlyUnconfirmed custom implementation with the STL way: remove_if/erase idiom",
      "tree": {
        "sha": "8ee3a7d95079114c4743f164deddcd5a5c6e44f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8ee3a7d95079114c4743f164deddcd5a5c6e44f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09c58a18be79622b9cf6ca7c8f4b283461281364",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09c58a18be79622b9cf6ca7c8f4b283461281364",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09c58a18be79622b9cf6ca7c8f4b283461281364"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 2,
      "deletions": 10
    },
    "files": [
      {
        "sha": "6823b3050fe8215f7fdf7168638389b55cdb846f",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 10,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
        "patch": "@@ -178,16 +178,8 @@ std::unique_ptr<CBlockTemplate> BlockAssembler::CreateNewBlock(const CScript& sc\n \n void BlockAssembler::onlyUnconfirmed(CTxMemPool::vecEntries& testSet)\n {\n-    size_t max_element = testSet.size(), i = 0;\n-    while (i < max_element) {\n-        bool not_in_block = !inBlock.count(testSet[i]);\n-        // if !not_in_block, set testSet[i] to testSet[max_element-1]\n-        max_element -= !not_in_block;\n-        testSet[i] = testSet[!not_in_block*max_element + not_in_block*i];\n-        i += not_in_block;\n-    }\n-    // drop erased elements\n-    testSet.resize(max_element);\n+    testSet.erase(std::remove_if(testSet.begin(), testSet.end(),\n+                [this](CTxMemPool::txiter t){return inBlock.count(t);}), testSet.end());\n }\n \n bool BlockAssembler::TestPackage(uint64_t packageSize, int64_t packageSigOpsCost) const"
      }
    ]
  },
  {
    "sha": "2c3721794b734737ef17bcb84153b6527e4ad65b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYzM3MjE3OTRiNzM0NzM3ZWYxN2JjYjg0MTUzYjY1MjdlNGFkNjVi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "In miner.cpp, fix minor performance regression caused by using std::binary_search on a std::set instead of std::count. std::binary_search has to use std::advance on the passed iterators which leads to search taking O(N log N) instead of O(log N).",
      "tree": {
        "sha": "6885af4a3c0a636eab4ed1dde4b326e2681c326a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6885af4a3c0a636eab4ed1dde4b326e2681c326a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2c3721794b734737ef17bcb84153b6527e4ad65b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3721794b734737ef17bcb84153b6527e4ad65b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2c3721794b734737ef17bcb84153b6527e4ad65b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3721794b734737ef17bcb84153b6527e4ad65b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a8a3548bbccc28b9b0fd45526b6bd96f61d7deee"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "e0b1d4331ecf4ffb60fac16755ea8e0156344ef5",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 7,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c3721794b734737ef17bcb84153b6527e4ad65b/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c3721794b734737ef17bcb84153b6527e4ad65b/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=2c3721794b734737ef17bcb84153b6527e4ad65b",
        "patch": "@@ -226,9 +226,9 @@ void BlockAssembler::AddToBlock(CTxMemPool::txiter iter)\n     }\n }\n \n-template<typename SortedIterable>\n-int BlockAssembler::UpdatePackagesForAdded(const SortedIterable& alreadyAdded,\n-        indexed_modified_transaction_set &mapModifiedTx)\n+template<typename Iterable, typename BinPred>\n+int BlockAssembler::UpdatePackagesForAdded(const Iterable& alreadyAdded,\n+        BinPred&& predicate, indexed_modified_transaction_set &mapModifiedTx)\n {\n     int nDescendantsUpdated = 0;\n     CTxMemPool::vecEntries descendants;\n@@ -240,8 +240,7 @@ int BlockAssembler::UpdatePackagesForAdded(const SortedIterable& alreadyAdded,\n         m_mempool.CalculateDescendantsVec(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {\n-            if (std::binary_search(alreadyAdded.cbegin(), alreadyAdded.cend(), desc, CTxMemPool::CompareIteratorByHash()))\n-                continue;\n+            if (predicate(desc)) continue;\n             ++nDescendantsUpdated;\n             modtxiter mit = mapModifiedTx.find(desc);\n             if (mit == mapModifiedTx.end()) {\n@@ -302,7 +301,7 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n \n     // Start by adding all descendants of previously added txs to mapModifiedTx\n     // and modifying them for their already included ancestors\n-    UpdatePackagesForAdded(inBlock, mapModifiedTx);\n+    UpdatePackagesForAdded(inBlock, [&](CTxMemPool::txiter t){return inBlock.count(t);}, mapModifiedTx);\n \n     CTxMemPool::indexed_transaction_set::index<ancestor_score>::type::iterator mi = m_mempool.mapTx.get<ancestor_score>().begin();\n     CTxMemPool::txiter iter;\n@@ -419,7 +418,11 @@ void BlockAssembler::addPackageTxs(int &nPackagesSelected, int &nDescendantsUpda\n         // Sort before passing in\n         // TODO: unclear if hash order is needed or if txiter would suffice\n         std::sort(ancestors.begin(), ancestors.end(), CTxMemPool::CompareIteratorByHash());\n-        nDescendantsUpdated += UpdatePackagesForAdded(ancestors, mapModifiedTx);\n+\n+        nDescendantsUpdated += UpdatePackagesForAdded(ancestors,\n+                [&](CTxMemPool::txiter t){\n+                    return std::binary_search(ancestors.cbegin(), ancestors.cend(), t, CTxMemPool::CompareIteratorByHash());\n+                }, mapModifiedTx);\n     }\n }\n "
      },
      {
        "sha": "186d3cce3455921a565609b0c54472ed51204636",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2c3721794b734737ef17bcb84153b6527e4ad65b/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2c3721794b734737ef17bcb84153b6527e4ad65b/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=2c3721794b734737ef17bcb84153b6527e4ad65b",
        "patch": "@@ -195,9 +195,9 @@ class BlockAssembler\n     void SortForBlock(CTxMemPool::vecEntries& package);\n     /** Add descendants of given transactions to mapModifiedTx with ancestor\n       * state updated assuming given transactions are inBlock. Returns number\n-      * of updated descendants. */\n-    template<typename SortedIterable>\n-    int UpdatePackagesForAdded(const SortedIterable& alreadyAdded, indexed_modified_transaction_set &mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n+      * of updated descendants. Param predicate tests if a child is in alreadyAdded.*/\n+    template<typename Iterable, typename BinPred>\n+    int UpdatePackagesForAdded(const Iterable& alreadyAdded, BinPred&& predicate, indexed_modified_transaction_set &mapModifiedTx) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs);\n };\n \n /** Modify the extranonce in a block */"
      }
    ]
  },
  {
    "sha": "1da99d18e74dce09e4f4d742eaa13161627bbaa1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZGE5OWQxOGU3NGRjZTA5ZTRmNGQ3NDJlYWExMzE2MTYyN2JiYWEx",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Remove epochs from stack variables",
      "tree": {
        "sha": "4275e6efe3e914ebe5ac0bf15d01e8ba724021d6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4275e6efe3e914ebe5ac0bf15d01e8ba724021d6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1da99d18e74dce09e4f4d742eaa13161627bbaa1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1da99d18e74dce09e4f4d742eaa13161627bbaa1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1da99d18e74dce09e4f4d742eaa13161627bbaa1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1da99d18e74dce09e4f4d742eaa13161627bbaa1/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2c3721794b734737ef17bcb84153b6527e4ad65b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2c3721794b734737ef17bcb84153b6527e4ad65b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2c3721794b734737ef17bcb84153b6527e4ad65b"
      }
    ],
    "stats": {
      "total": 117,
      "additions": 62,
      "deletions": 55
    },
    "files": [
      {
        "sha": "124fb5aa919919cd76f712281d5b964dc5420415",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "patch": "@@ -237,6 +237,7 @@ int BlockAssembler::UpdatePackagesForAdded(const Iterable& alreadyAdded,\n         // can't use external epoch to loop because we want to update\n         // all descendants\n         // No need to add self (it) because we would filter it from the loop\n+        m_mempool.GetFreshEpoch();\n         m_mempool.CalculateDescendantsVec(it, descendants);\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {"
      },
      {
        "sha": "6a43a283d7004f83bf86826eb7d016ad341e58a6",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "patch": "@@ -642,6 +642,7 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not in mempool\");\n     }\n \n+    mempool.GetFreshEpoch();\n     CTxMemPool::vecEntries setDescendants;\n     mempool.CalculateDescendantsVec(it, setDescendants);\n "
      },
      {
        "sha": "17e43ecdc9c58efe7043419add2cdf0046a233d6",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 41,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "patch": "@@ -60,10 +60,10 @@ size_t CTxMemPoolEntry::GetTxSize() const\n //\n void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount&\n         fee, int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, vecEntries&\n-        stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit) {\n+        stack, bool update_child_epochs, const uint8_t limit) {\n         auto& direct_children = GetMemPoolChildren(param_it);\n         for (txiter cit : direct_children) {\n-            if (update_child_epochs) cit->already_touched(epoch);\n+            if (update_child_epochs) already_touched(cit);\n \n             // collect stats\n             if (!exclude.count(cit->GetTx().GetHash())) {\n@@ -77,13 +77,13 @@ void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, in\n \n             const setEntries &setChildren = GetMemPoolChildren(cit);\n             for (txiter childEntry : setChildren) {\n-                if (childEntry->already_touched(epoch)) continue;\n+                if (already_touched(childEntry)) continue;\n                 cacheMap::iterator cacheIt = cache.find(childEntry);\n                 if (cacheIt != cache.end()) {\n                     // We've already calculated this one, just add the entries for this set\n                     // but don't traverse again.\n                     for (txiter cacheEntry : cacheIt->second) {\n-                        if (cacheEntry->already_touched(epoch)) continue;\n+                        if (already_touched(cacheEntry)) continue;\n                         if (exclude.count(cacheEntry->GetTx().GetHash())) continue;\n                         size += cacheEntry->GetTxSize();\n                         fee += cacheEntry->GetModifiedFee();\n@@ -97,7 +97,7 @@ void CTxMemPool::UpdateForDescendantsInner(txiter param_it, txiter update_it, in\n                     stack.push_back(childEntry);\n                 } else {\n                     UpdateForDescendantsInner(childEntry, update_it, size, fee, count, cache,\n-                            exclude, stack, false, epoch, limit-1);\n+                            exclude, stack, false, limit-1);\n                 }\n             }\n         }\n@@ -106,7 +106,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n {\n     // Our children are natrually uniqueu\n     vecEntries stack;\n-    uint64_t epoch = GetFreshEpoch();\n+    GetFreshEpoch();\n \n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n@@ -116,7 +116,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n     bool first_pass = true;\n     auto next_it = updateIt;\n     do {\n-        UpdateForDescendantsInner(next_it, updateIt, modifySize, modifyFee, modifyCount, cachedDescendants, setExclude, stack, first_pass, epoch);\n+        UpdateForDescendantsInner(next_it, updateIt, modifySize, modifyFee, modifyCount, cachedDescendants, setExclude, stack, first_pass);\n         first_pass = false;\n     } while (!stack.empty() && (next_it = stack.back(), stack.pop_back(), true));\n     mapTx.modify(updateIt, update_descendant_state(modifySize, modifyFee, modifyCount));\n@@ -146,7 +146,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // UpdateForDescendants.\n     for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n         // we cache the in-mempool children to avoid duplicate updates\n-        uint64_t epoch = GetFreshEpoch();\n+        GetFreshEpoch();\n         // calculate children from mapNextTx\n         txiter it = mapTx.find(hash);\n         if (it == mapTx.end()) {\n@@ -161,7 +161,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n             assert(childIter != mapTx.end());\n             // We can skip updating entries we've encountered before or that\n             // are in the block (which are already accounted for).\n-            if (!childIter->already_touched(epoch) && !setAlreadyIncluded.count(childHash)) {\n+            if (!already_touched(childIter) && !setAlreadyIncluded.count(childHash)) {\n                 UpdateChild(it, childIter, true);\n                 UpdateParent(childIter, it, true);\n             }\n@@ -174,20 +174,18 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntr\n {\n     assert(ancestors.size() == 0);\n     const CTransaction &tx = entry.GetTx();\n-    const uint64_t epoch = GetFreshEpoch();\n+    GetFreshEpoch();\n     if (fSearchForParents) {\n         // Get parents of this transaction that are in the mempool\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n         // iterate mapTx to find parents.\n         for (unsigned int i = 0; i < tx.vin.size(); i++) {\n             Optional<txiter> piter = GetIter(tx.vin[i].prevout.hash);\n-            if (piter) {\n-                if ((*piter)->already_touched(epoch)) continue;\n-                ancestors.push_back(*piter);\n-                if (ancestors.size() + 1 > limitAncestorCount) {\n-                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                    return false;\n-                }\n+            if (already_touched(piter)) continue;\n+            ancestors.push_back(*piter);\n+            if (ancestors.size() + 1 > limitAncestorCount) {\n+                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                return false;\n             }\n         }\n     } else {\n@@ -198,7 +196,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntr\n         ancestors.assign(ref_parents.cbegin(), ref_parents.cend());\n         // touch before walking so we don't add a duplicate\n         for (txiter it : ancestors) {\n-            it->already_touched(epoch);\n+            already_touched(it);\n         }\n     }\n \n@@ -225,7 +223,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntr\n         const setEntries & setMemPoolParents = GetMemPoolParents(stageit);\n         for (txiter phash : setMemPoolParents) {\n             // If this is a new ancestor, add it.\n-            if (phash->already_touched(epoch)) continue;\n+            if (already_touched(phash)) continue;\n             ancestors.push_back(phash);\n             if (ancestors.size() + 1 > limitAncestorCount) {\n                 errString = strprintf(\"too many unconfirmed ancestors [limit: %u]\", limitAncestorCount);\n@@ -287,6 +285,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const vecEntries &entriesToRemove, b\n         // need to traverse the mempool).\n         for (txiter removeIt : entriesToRemove) {\n             vecEntries descendants;\n+            GetFreshEpoch();\n             CalculateDescendantsVec(removeIt, descendants);\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n@@ -401,12 +400,12 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &ancestor\n     cachedInnerUsage += entry.DynamicMemoryUsage();\n \n     const CTransaction& tx = newit->GetTx();\n-    uint64_t epoch = GetFreshEpoch();\n+    GetFreshEpoch();\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         mapNextTx.insert(std::make_pair(&tx.vin[i].prevout, &tx));\n         // Update ancestors with information about this tx\n         auto maybe_it = GetIter(tx.vin[i].prevout.hash);\n-        if (maybe_it && !(*maybe_it)->already_touched(epoch)) UpdateParent(newit, *maybe_it, true);\n+        if (!already_touched(maybe_it)) UpdateParent(newit, *maybe_it, true);\n     }\n     // Don't bother worrying about child transactions of this one.\n     // Normal case of a new transaction arriving is that there can't be any\n@@ -466,29 +465,24 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n //\n // Note: it does not get inserted into the vector\n \n-void CTxMemPool::CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack, const uint64_t epoch, const uint8_t limit) const\n+void CTxMemPool::CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack, const uint8_t limit) const\n {\n     for (txiter childiter : GetMemPoolChildren(it)) {\n-        if (childiter->already_touched(epoch)) continue;\n+        if (already_touched(childiter)) continue;\n         descendants.push_back(childiter);\n-        if (limit > 0) CalculateDescendantsVec(childiter, descendants, stack, epoch, limit-1);\n+        if (limit > 0) CalculateDescendantsVec(childiter, descendants, stack, limit-1);\n         else stack.push_back(childiter);\n     }\n }\n \n void CTxMemPool::CalculateDescendantsVec(txiter entryit, vecEntries& descendants) const\n-{\n-    CalculateDescendantsVec(entryit, descendants, GetFreshEpoch());\n-}\n-\n-void CTxMemPool::CalculateDescendantsVec(txiter entryit, vecEntries& descendants, const uint64_t cached_epoch) const\n {\n     // Traverse down the children of entry, only adding children that are not marked as visited by\n     // the epoch\n     txiter it = entryit;\n     vecEntries stack;\n     do {\n-        CalculateDescendantsVec(it, descendants, stack, cached_epoch);\n+        CalculateDescendantsVec(it, descendants, stack);\n     } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n }\n \n@@ -505,28 +499,28 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n             // be sure to remove any children that are in the pool. This can\n             // happen during chain re-orgs if origTx isn't re-accepted into\n             // the mempool for any reason.\n-            const uint64_t epoch = GetFreshEpoch();\n+            GetFreshEpoch();\n             for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n                 auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n                 if (it == mapNextTx.end())\n                     continue;\n                 txiter nextit = mapTx.find(it->second->GetHash());\n                 assert(nextit != mapTx.end());\n-                if (nextit->already_touched(epoch)) continue;\n+                if (already_touched(nextit)) continue;\n                 txToRemove.push_back(nextit);\n             }\n         }\n-        const uint64_t epoch = GetFreshEpoch();\n+        GetFreshEpoch();\n         // touch all txToRemove first to force CalculateDescendantsVec\n         // to not recurse if we're going to call it later.\n         // This guarantees txToRemove gets no duplicates\n         for (txiter it : txToRemove) {\n-            it->already_touched(epoch);\n+            already_touched(it);\n         }\n         // max_idx is used rather than iterator because txToRemove may grow\n         const size_t max_idx = txToRemove.size();\n         for (size_t idx = 0; idx < max_idx; ++idx) {\n-            CalculateDescendantsVec(txToRemove[idx], txToRemove, epoch);\n+            CalculateDescendantsVec(txToRemove[idx], txToRemove);\n         }\n \n         RemoveStaged(txToRemove, false, reason);\n@@ -564,17 +558,17 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         }\n     }\n \n-    const uint64_t epoch = GetFreshEpoch();\n+    GetFreshEpoch();\n     // touch all txToRemove first to force CalculateDescendantsVec\n     // to not recurse if we're going to call it later.\n     // This guarantees txToRemove gets no duplicates\n     for (txiter it : txToRemove) {\n-        it->already_touched(epoch);\n+        already_touched(it);\n     }\n     // max_idx is used rather than iterator because txToRemove may grow\n     const size_t max_idx = txToRemove.size();\n     for (size_t idx = 0; idx < max_idx; ++idx) {\n-        CalculateDescendantsVec(txToRemove[idx], txToRemove, epoch);\n+        CalculateDescendantsVec(txToRemove[idx], txToRemove);\n     }\n     RemoveStaged(txToRemove, false, MemPoolRemovalReason::REORG);\n \n@@ -885,6 +879,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             }\n             // Now update all descendants' modified fees with ancestors\n             vecEntries descendants;\n+            GetFreshEpoch();\n             CalculateDescendantsVec(it, descendants);\n             for (txiter descendantIt : descendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n@@ -984,10 +979,10 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n         it++;\n     }\n     vecEntries stage;\n-    const uint64_t epoch = GetFreshEpoch();\n+    GetFreshEpoch();\n     for (txiter removeit : toremove) {\n-        CalculateDescendantsVec(removeit, stage, epoch);\n-        if (!removeit->already_touched(epoch))\n+        CalculateDescendantsVec(removeit, stage);\n+        if (!already_touched(removeit))\n                 stage.push_back(removeit);\n     }\n     RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n@@ -1089,6 +1084,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n \n         vecEntries stage;\n+        GetFreshEpoch();\n         CalculateDescendantsVec(mapTx.project<0>(it), stage);\n         stage.push_back(mapTx.project<0>(it));\n         nTxnRemoved += stage.size();"
      },
      {
        "sha": "2b49bc4d578baff1f76a2db915f10ccaf6ca173e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 20,
        "deletions": 11,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "patch": "@@ -129,14 +129,7 @@ class CTxMemPoolEntry\n     int64_t GetSigOpCostWithAncestors() const { return nSigOpCostWithAncestors; }\n \n     mutable size_t vTxHashesIdx; //!< Index in mempool's vTxHashes\n-private:\n     mutable uint64_t m_epoch; //!< epoch when last touched, useful for graph algorithms\n-public:\n-    bool already_touched(uint64_t during) const {\n-        bool ret = m_epoch >= during;\n-        m_epoch = std::max(m_epoch, during);\n-        return ret;\n-    }\n };\n \n // Helpers for modifying CTxMemPool::mapTx, which is a boost multi_index.\n@@ -651,17 +644,16 @@ class CTxMemPool\n     /** Populate descendants with all in-mempool descendants of hash.\n      *\n      *  Assumes that if descendants includes a txiter T, then all in-mempool descendants of T are\n-     *  already in it and T->already_touched(cached_epoch)\n+     *  already in it and already_touched(T)\n      *\n      *  Assumes empty descendants vector. Useful when we are just going to\n      *  iterate over them and don't care about order\n      *\n      * CalculateDescendantsVec does not include self (it)*/\n     void CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack,\n-            const uint64_t epoch, const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+            const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Assumes descednants is empty */\n     void CalculateDescendantsVec(txiter it, vecEntries& descendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    void CalculateDescendantsVec(txiter entryit, vecEntries& descendants, const uint64_t cached_epoch) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough\n       *  for larger-sized transactions.\n@@ -738,7 +730,7 @@ class CTxMemPool\n             const std::set<uint256> &setExclude) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     void UpdateForDescendantsInner(txiter param_it, txiter update_it, int64_t&size, CAmount& fee,\n             int64_t& count, cacheMap& cache, const std::set<uint256>& exclude, vecEntries&\n-            stack, bool update_child_epochs, const uint64_t epoch, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n+            stack, bool update_child_epochs, const uint8_t limit = 25) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Update ancestors of hash to add/remove it as a descendant transaction. */\n     void UpdateAncestorsOf(bool add, txiter hash, vecEntries &ancestors) EXCLUSIVE_LOCKS_REQUIRED(cs);\n     /** Set ancestor state for an entry */\n@@ -762,6 +754,23 @@ class CTxMemPool\n public:\n     // This function mutates mutable state!\n     uint64_t GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+\n+    bool already_touched(txiter it, uint64_t during) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        bool ret = it->m_epoch >= during;\n+        it->m_epoch = std::max(it->m_epoch, during);\n+        return ret;\n+    }\n+    bool already_touched(Optional<txiter> it, uint64_t during) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        return !it || already_touched(*it, during);\n+    }\n+    bool already_touched(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        bool ret = it->m_epoch >= m_epoch;\n+        it->m_epoch = std::max(it->m_epoch, m_epoch);\n+        return ret;\n+    }\n+    bool already_touched(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        return !it || already_touched(*it);\n+    }\n };\n \n /**"
      },
      {
        "sha": "8f173fde054de5f1090100751dcc5391db670a2e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1da99d18e74dce09e4f4d742eaa13161627bbaa1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "patch": "@@ -835,10 +835,10 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         if (nConflictingCount <= maxDescendantsToVisit) {\n             // If not too many to replace, then calculate the set of\n             // transactions that would have to be evicted\n-            const uint64_t epoch = m_pool.GetFreshEpoch();\n+            m_pool.GetFreshEpoch();\n             for (CTxMemPool::txiter it : setIterConflicting) {\n-                if (it->already_touched(epoch)) continue;\n-                m_pool.CalculateDescendantsVec(it, all_conflicting, epoch);\n+                if (m_pool.already_touched(it)) continue;\n+                m_pool.CalculateDescendantsVec(it, all_conflicting);\n                 all_conflicting.push_back(it);\n             }\n             for (CTxMemPool::txiter it : all_conflicting) {"
      }
    ]
  },
  {
    "sha": "75b949252a658db00bfbead60658a6e780783484",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NWI5NDkyNTJhNjU4ZGIwMGJmYmVhZDYwNjU4YTZlNzgwNzgzNDg0",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "remove extra pass over children in removeUnchecked",
      "tree": {
        "sha": "bf2e48d6b6d3e291a82fcbe1d24666de25f77f09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf2e48d6b6d3e291a82fcbe1d24666de25f77f09"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/75b949252a658db00bfbead60658a6e780783484",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b949252a658db00bfbead60658a6e780783484",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/75b949252a658db00bfbead60658a6e780783484",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b949252a658db00bfbead60658a6e780783484/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1da99d18e74dce09e4f4d742eaa13161627bbaa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1da99d18e74dce09e4f4d742eaa13161627bbaa1"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 3,
      "deletions": 8
    },
    "files": [
      {
        "sha": "e77bfc0eaaa644eb060ab49b96001953ba6a9b36",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/75b949252a658db00bfbead60658a6e780783484/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/75b949252a658db00bfbead60658a6e780783484/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=75b949252a658db00bfbead60658a6e780783484",
        "patch": "@@ -490,16 +490,18 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n {\n     // Remove transaction from memory pool\n     AssertLockHeld(cs);\n+        GetFreshEpoch();\n         vecEntries txToRemove;\n         txiter origit = mapTx.find(origTx.GetHash());\n+        // All txToRemove will be touched, this guarantees txToRemove gets no duplicates\n         if (origit != mapTx.end()) {\n             txToRemove.push_back(origit);\n+            already_touched(origit);\n         } else {\n             // When recursively removing but origTx isn't in the mempool\n             // be sure to remove any children that are in the pool. This can\n             // happen during chain re-orgs if origTx isn't re-accepted into\n             // the mempool for any reason.\n-            GetFreshEpoch();\n             for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n                 auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n                 if (it == mapNextTx.end())\n@@ -510,13 +512,6 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n                 txToRemove.push_back(nextit);\n             }\n         }\n-        GetFreshEpoch();\n-        // touch all txToRemove first to force CalculateDescendantsVec\n-        // to not recurse if we're going to call it later.\n-        // This guarantees txToRemove gets no duplicates\n-        for (txiter it : txToRemove) {\n-            already_touched(it);\n-        }\n         // max_idx is used rather than iterator because txToRemove may grow\n         const size_t max_idx = txToRemove.size();\n         for (size_t idx = 0; idx < max_idx; ++idx) {"
      }
    ]
  },
  {
    "sha": "fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTUxYTY1MmZkYmQzZjAwMzI3ZmI0NTk5NzhiNjQ5OWIxZDBlYWYx",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Make mempool use a Smart EpochGuard which prevents (via assertion) multiple simultaneous Mempool Epoch users.",
      "tree": {
        "sha": "949e08cb8167acb1ee7eff4d269e7d720f76e9e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/949e08cb8167acb1ee7eff4d269e7d720f76e9e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "75b949252a658db00bfbead60658a6e780783484",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/75b949252a658db00bfbead60658a6e780783484",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/75b949252a658db00bfbead60658a6e780783484"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 94,
      "deletions": 53
    },
    "files": [
      {
        "sha": "d5a14c42a4a36a0ffafe8e40b51f400be3b4121d",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "patch": "@@ -237,8 +237,10 @@ int BlockAssembler::UpdatePackagesForAdded(const Iterable& alreadyAdded,\n         // can't use external epoch to loop because we want to update\n         // all descendants\n         // No need to add self (it) because we would filter it from the loop\n-        m_mempool.GetFreshEpoch();\n-        m_mempool.CalculateDescendantsVec(it, descendants);\n+        {\n+            const auto epoch = m_mempool.GetFreshEpoch();\n+            m_mempool.CalculateDescendantsVec(it, descendants);\n+        } // release epoch guard just in case predicate uses epochs (it doesn't)\n         // Insert all descendants (not yet in block) into the modified set\n         for (CTxMemPool::txiter desc : descendants) {\n             if (predicate(desc)) continue;"
      },
      {
        "sha": "47ee85c83a36fbaf927df2f5fa3998cbc82bdd40",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "patch": "@@ -642,9 +642,11 @@ static UniValue getmempooldescendants(const JSONRPCRequest& request)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Transaction not in mempool\");\n     }\n \n-    mempool.GetFreshEpoch();\n     CTxMemPool::vecEntries setDescendants;\n-    mempool.CalculateDescendantsVec(it, setDescendants);\n+    {\n+        const auto epoch = mempool.GetFreshEpoch();\n+        mempool.CalculateDescendantsVec(it, setDescendants);\n+    } // release epoch guard because entryToJSON below calls IsRBFOptIn\n \n     if (!fVerbose) {\n         UniValue o(UniValue::VARR);"
      },
      {
        "sha": "01094e33ebb8b36e52bc96aa9ee8e6fd17f03b70",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 75,
        "deletions": 47,
        "changes": 122,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "patch": "@@ -106,7 +106,7 @@ void CTxMemPool::UpdateForDescendants(txiter updateIt, cacheMap &cachedDescendan\n {\n     // Our children are natrually uniqueu\n     vecEntries stack;\n-    GetFreshEpoch();\n+    const auto epoch = GetFreshEpoch();\n \n     int64_t modifySize = 0;\n     CAmount modifyFee = 0;\n@@ -145,8 +145,6 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     // setMemPoolChildren will be updated, an assumption made in\n     // UpdateForDescendants.\n     for (const uint256 &hash : reverse_iterate(vHashesToUpdate)) {\n-        // we cache the in-mempool children to avoid duplicate updates\n-        GetFreshEpoch();\n         // calculate children from mapNextTx\n         txiter it = mapTx.find(hash);\n         if (it == mapTx.end()) {\n@@ -155,17 +153,21 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n-        for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n-            const uint256 &childHash = iter->second->GetHash();\n-            txiter childIter = mapTx.find(childHash);\n-            assert(childIter != mapTx.end());\n-            // We can skip updating entries we've encountered before or that\n-            // are in the block (which are already accounted for).\n-            if (!already_touched(childIter) && !setAlreadyIncluded.count(childHash)) {\n-                UpdateChild(it, childIter, true);\n-                UpdateParent(childIter, it, true);\n+        // we cache the in-mempool children to avoid duplicate updates\n+        {\n+            const auto epoch = GetFreshEpoch();\n+            for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n+                const uint256 &childHash = iter->second->GetHash();\n+                txiter childIter = mapTx.find(childHash);\n+                assert(childIter != mapTx.end());\n+                // We can skip updating entries we've encountered before or that\n+                // are in the block (which are already accounted for).\n+                if (!already_touched(childIter) && !setAlreadyIncluded.count(childHash)) {\n+                    UpdateChild(it, childIter, true);\n+                    UpdateParent(childIter, it, true);\n+                }\n             }\n-        }\n+        } // release epoch guard for UpdateForDescendants\n         UpdateForDescendants(it, mapMemPoolDescendantsToUpdate, setAlreadyIncluded);\n     }\n }\n@@ -174,7 +176,7 @@ bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, vecEntr\n {\n     assert(ancestors.size() == 0);\n     const CTransaction &tx = entry.GetTx();\n-    GetFreshEpoch();\n+    const auto epoch = GetFreshEpoch();\n     if (fSearchForParents) {\n         // Get parents of this transaction that are in the mempool\n         // GetMemPoolParents() is only valid for entries in the mempool, so we\n@@ -285,7 +287,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const vecEntries &entriesToRemove, b\n         // need to traverse the mempool).\n         for (txiter removeIt : entriesToRemove) {\n             vecEntries descendants;\n-            GetFreshEpoch();\n+            const auto epoch = GetFreshEpoch();\n             CalculateDescendantsVec(removeIt, descendants);\n             int64_t modifySize = -((int64_t)removeIt->GetTxSize());\n             CAmount modifyFee = -removeIt->GetModifiedFee();\n@@ -400,13 +402,16 @@ void CTxMemPool::addUnchecked(const CTxMemPoolEntry &entry, vecEntries &ancestor\n     cachedInnerUsage += entry.DynamicMemoryUsage();\n \n     const CTransaction& tx = newit->GetTx();\n-    GetFreshEpoch();\n-    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        mapNextTx.insert(std::make_pair(&tx.vin[i].prevout, &tx));\n-        // Update ancestors with information about this tx\n-        auto maybe_it = GetIter(tx.vin[i].prevout.hash);\n-        if (!already_touched(maybe_it)) UpdateParent(newit, *maybe_it, true);\n-    }\n+    {\n+        const auto epoch = GetFreshEpoch();\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            mapNextTx.insert(std::make_pair(&tx.vin[i].prevout, &tx));\n+            // Update ancestors with information about this tx\n+            auto maybe_it = GetIter(tx.vin[i].prevout.hash);\n+            if (!already_touched(maybe_it)) UpdateParent(newit, *maybe_it, true);\n+        }\n+    } // releasing epoch guard is uneccessary but we don't need it past here\n+\n     // Don't bother worrying about child transactions of this one.\n     // Normal case of a new transaction arriving is that there can't be any\n     // children, because such children would be orphans.\n@@ -490,8 +495,9 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n {\n     // Remove transaction from memory pool\n     AssertLockHeld(cs);\n-        GetFreshEpoch();\n-        vecEntries txToRemove;\n+    vecEntries txToRemove;\n+    {\n+        const auto epoch = GetFreshEpoch();\n         txiter origit = mapTx.find(origTx.GetHash());\n         // All txToRemove will be touched, this guarantees txToRemove gets no duplicates\n         if (origit != mapTx.end()) {\n@@ -517,8 +523,9 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n         for (size_t idx = 0; idx < max_idx; ++idx) {\n             CalculateDescendantsVec(txToRemove[idx], txToRemove);\n         }\n+    } // release epoch guard for RemoveStaged\n \n-        RemoveStaged(txToRemove, false, reason);\n+    RemoveStaged(txToRemove, false, reason);\n }\n \n void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n@@ -553,18 +560,20 @@ void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMem\n         }\n     }\n \n-    GetFreshEpoch();\n-    // touch all txToRemove first to force CalculateDescendantsVec\n-    // to not recurse if we're going to call it later.\n-    // This guarantees txToRemove gets no duplicates\n-    for (txiter it : txToRemove) {\n-        already_touched(it);\n-    }\n-    // max_idx is used rather than iterator because txToRemove may grow\n-    const size_t max_idx = txToRemove.size();\n-    for (size_t idx = 0; idx < max_idx; ++idx) {\n-        CalculateDescendantsVec(txToRemove[idx], txToRemove);\n-    }\n+    {\n+        const auto epoch = GetFreshEpoch();\n+        // touch all txToRemove first to force CalculateDescendantsVec\n+        // to not recurse if we're going to call it later.\n+        // This guarantees txToRemove gets no duplicates\n+        for (txiter it : txToRemove) {\n+            already_touched(it);\n+        }\n+        // max_idx is used rather than iterator because txToRemove may grow\n+        const size_t max_idx = txToRemove.size();\n+        for (size_t idx = 0; idx < max_idx; ++idx) {\n+            CalculateDescendantsVec(txToRemove[idx], txToRemove);\n+        }\n+    } // release epoch guard for RemoveStaged\n     RemoveStaged(txToRemove, false, MemPoolRemovalReason::REORG);\n \n }\n@@ -628,6 +637,8 @@ void CTxMemPool::_clear()\n     blockSinceLastRollingFeeBump = false;\n     rollingMinimumFeeRate = 0;\n     ++nTransactionsUpdated;\n+    has_epoch_guard = false;\n+    m_epoch = 0;\n }\n \n void CTxMemPool::clear()\n@@ -874,7 +885,7 @@ void CTxMemPool::PrioritiseTransaction(const uint256& hash, const CAmount& nFeeD\n             }\n             // Now update all descendants' modified fees with ancestors\n             vecEntries descendants;\n-            GetFreshEpoch();\n+            const auto epoch = GetFreshEpoch();\n             CalculateDescendantsVec(it, descendants);\n             for (txiter descendantIt : descendants) {\n                 mapTx.modify(descendantIt, update_ancestor_state(0, nFeeDelta, 0, 0));\n@@ -974,12 +985,14 @@ int CTxMemPool::Expire(std::chrono::seconds time)\n         it++;\n     }\n     vecEntries stage;\n-    GetFreshEpoch();\n-    for (txiter removeit : toremove) {\n-        CalculateDescendantsVec(removeit, stage);\n-        if (!already_touched(removeit))\n+    {\n+        const auto epoch = GetFreshEpoch();\n+        for (txiter removeit : toremove) {\n+            CalculateDescendantsVec(removeit, stage);\n+            if (!already_touched(removeit))\n                 stage.push_back(removeit);\n-    }\n+        }\n+    } // release epoch guard for RemoveStaged\n     RemoveStaged(stage, false, MemPoolRemovalReason::EXPIRY);\n     return stage.size();\n }\n@@ -1079,8 +1092,10 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<COutPoint>* pvNoSpends\n         maxFeeRateRemoved = std::max(maxFeeRateRemoved, removed);\n \n         vecEntries stage;\n-        GetFreshEpoch();\n-        CalculateDescendantsVec(mapTx.project<0>(it), stage);\n+        {\n+            const auto epoch = GetFreshEpoch();\n+            CalculateDescendantsVec(mapTx.project<0>(it), stage);\n+        } // release epoch guard because RemoveStaged\n         stage.push_back(mapTx.project<0>(it));\n         nTxnRemoved += stage.size();\n \n@@ -1150,9 +1165,22 @@ void CTxMemPool::SetIsLoaded(bool loaded)\n     m_is_loaded = loaded;\n }\n \n-uint64_t CTxMemPool::GetFreshEpoch() const\n+CTxMemPool::EpochGuard CTxMemPool::GetFreshEpoch() const\n+{\n+    return EpochGuard(*this);\n+}\n+CTxMemPool::EpochGuard::EpochGuard(const CTxMemPool& in) : pool(in)\n+{\n+    assert(!pool.has_epoch_guard);\n+    ++pool.m_epoch;\n+    pool.has_epoch_guard = true;\n+}\n+\n+CTxMemPool::EpochGuard::~EpochGuard()\n {\n-    return ++m_epoch;\n+    // prevents stale results being used\n+    ++pool.m_epoch;\n+    pool.has_epoch_guard = false;\n }\n \n SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}"
      },
      {
        "sha": "13dca18af560dbecae46aa5c3f1c2e0ca02e83f3",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "patch": "@@ -455,6 +455,7 @@ class CTxMemPool\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n     mutable uint64_t m_epoch;\n+    mutable bool has_epoch_guard;\n \n     void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n@@ -753,9 +754,16 @@ class CTxMemPool\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason) EXCLUSIVE_LOCKS_REQUIRED(cs);\n public:\n     // This function mutates mutable state!\n-    uint64_t GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n+    class EpochGuard {\n+        const CTxMemPool& pool;\n+        public:\n+        EpochGuard(const CTxMemPool& in);\n+        ~EpochGuard();\n+    };\n+    EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     bool already_touched(txiter it, uint64_t during) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(has_epoch_guard);\n         bool ret = it->m_epoch >= during;\n         it->m_epoch = std::max(it->m_epoch, during);\n         return ret;\n@@ -764,6 +772,7 @@ class CTxMemPool\n         return !it || already_touched(*it, during);\n     }\n     bool already_touched(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n+        assert(has_epoch_guard);\n         bool ret = it->m_epoch >= m_epoch;\n         it->m_epoch = std::max(it->m_epoch, m_epoch);\n         return ret;"
      },
      {
        "sha": "50943ded9436f848ff2edc342f87f8252294b71f",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa51a652fdbd3f00327fb459978b6499b1d0eaf1/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "patch": "@@ -835,7 +835,7 @@ bool MemPoolAccept::PreChecks(ATMPArgs& args, Workspace& ws)\n         if (nConflictingCount <= maxDescendantsToVisit) {\n             // If not too many to replace, then calculate the set of\n             // transactions that would have to be evicted\n-            m_pool.GetFreshEpoch();\n+            const auto epoch = m_pool.GetFreshEpoch();\n             for (CTxMemPool::txiter it : setIterConflicting) {\n                 if (m_pool.already_touched(it)) continue;\n                 m_pool.CalculateDescendantsVec(it, all_conflicting);"
      }
    ]
  },
  {
    "sha": "b25963315c4730ce0c5f7d9323012e253064c9e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMjU5NjMzMTVjNDczMGNlMGM1ZjdkOTMyMzAxMmUyNTMwNjRjOWU1",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "remove unused already_touched variants",
      "tree": {
        "sha": "343aefc257043e1c6249e928becabb996b5278f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/343aefc257043e1c6249e928becabb996b5278f4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b25963315c4730ce0c5f7d9323012e253064c9e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25963315c4730ce0c5f7d9323012e253064c9e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b25963315c4730ce0c5f7d9323012e253064c9e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25963315c4730ce0c5f7d9323012e253064c9e5/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa51a652fdbd3f00327fb459978b6499b1d0eaf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa51a652fdbd3f00327fb459978b6499b1d0eaf1"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 1,
      "deletions": 9
    },
    "files": [
      {
        "sha": "11c92ecfbee50dbf17da1718be886b813919c9e9",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b25963315c4730ce0c5f7d9323012e253064c9e5/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b25963315c4730ce0c5f7d9323012e253064c9e5/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=b25963315c4730ce0c5f7d9323012e253064c9e5",
        "patch": "@@ -762,21 +762,13 @@ class CTxMemPool\n     };\n     EpochGuard GetFreshEpoch() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n-    bool already_touched(txiter it, uint64_t during) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n-        assert(has_epoch_guard);\n-        bool ret = it->m_epoch >= during;\n-        it->m_epoch = std::max(it->m_epoch, during);\n-        return ret;\n-    }\n-    bool already_touched(Optional<txiter> it, uint64_t during) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n-        return !it || already_touched(*it, during);\n-    }\n     bool already_touched(txiter it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n         assert(has_epoch_guard);\n         bool ret = it->m_epoch >= m_epoch;\n         it->m_epoch = std::max(it->m_epoch, m_epoch);\n         return ret;\n     }\n+\n     bool already_touched(Optional<txiter> it) const EXCLUSIVE_LOCKS_REQUIRED(cs) {\n         return !it || already_touched(*it);\n     }"
      }
    ]
  },
  {
    "sha": "8e7e6581315972ad73277ef082ffc471967b068b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZTdlNjU4MTMxNTk3MmFkNzMyNzdlZjA4MmZmYzQ3MTk2N2IwNjhi",
    "commit": {
      "author": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "committer": {
        "name": "Jeremy Rubin",
        "email": "j@rubin.io",
        "date": "2020-01-07T17:35:21Z"
      },
      "message": "Make CalculateDescendantsVec fully stackless",
      "tree": {
        "sha": "fc6f51148ee90e97ca38b888a2048b884587a63c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fc6f51148ee90e97ca38b888a2048b884587a63c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8e7e6581315972ad73277ef082ffc471967b068b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7e6581315972ad73277ef082ffc471967b068b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8e7e6581315972ad73277ef082ffc471967b068b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8e7e6581315972ad73277ef082ffc471967b068b/comments",
    "author": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "JeremyRubin",
      "id": 886523,
      "node_id": "MDQ6VXNlcjg4NjUyMw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/886523?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/JeremyRubin",
      "html_url": "https://github.com/JeremyRubin",
      "followers_url": "https://api.github.com/users/JeremyRubin/followers",
      "following_url": "https://api.github.com/users/JeremyRubin/following{/other_user}",
      "gists_url": "https://api.github.com/users/JeremyRubin/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/JeremyRubin/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/JeremyRubin/subscriptions",
      "organizations_url": "https://api.github.com/users/JeremyRubin/orgs",
      "repos_url": "https://api.github.com/users/JeremyRubin/repos",
      "events_url": "https://api.github.com/users/JeremyRubin/events{/privacy}",
      "received_events_url": "https://api.github.com/users/JeremyRubin/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b25963315c4730ce0c5f7d9323012e253064c9e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b25963315c4730ce0c5f7d9323012e253064c9e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b25963315c4730ce0c5f7d9323012e253064c9e5"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 10,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3a4f45c79998a67b0c60d12528deadf69eaad67b",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 15,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7e6581315972ad73277ef082ffc471967b068b/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7e6581315972ad73277ef082ffc471967b068b/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8e7e6581315972ad73277ef082ffc471967b068b",
        "patch": "@@ -469,26 +469,21 @@ void CTxMemPool::removeUnchecked(txiter it, MemPoolRemovalReason reason)\n // can save time by not iterating over those entries.\n //\n // Note: it does not get inserted into the vector\n-\n-void CTxMemPool::CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack, const uint8_t limit) const\n-{\n-    for (txiter childiter : GetMemPoolChildren(it)) {\n-        if (already_touched(childiter)) continue;\n-        descendants.push_back(childiter);\n-        if (limit > 0) CalculateDescendantsVec(childiter, descendants, stack, limit-1);\n-        else stack.push_back(childiter);\n-    }\n-}\n-\n void CTxMemPool::CalculateDescendantsVec(txiter entryit, vecEntries& descendants) const\n {\n     // Traverse down the children of entry, only adding children that are not marked as visited by\n     // the epoch\n     txiter it = entryit;\n-    vecEntries stack;\n-    do {\n-        CalculateDescendantsVec(it, descendants, stack);\n-    } while (!stack.empty() && (it = stack.back(), stack.pop_back(), true));\n+    size_t idx = descendants.size();\n+    while (true) {\n+        for (const auto& childiter : GetMemPoolChildren(it)) {\n+            if (already_touched(childiter)) continue;\n+            descendants.push_back(childiter);\n+        }\n+        if (idx == descendants.size()) break;\n+        it = descendants[idx];\n+        ++idx;\n+    }\n }\n \n void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReason reason)"
      },
      {
        "sha": "b041dfed281dbf719004065904cc4ae43f9d5845",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8e7e6581315972ad73277ef082ffc471967b068b/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8e7e6581315972ad73277ef082ffc471967b068b/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=8e7e6581315972ad73277ef082ffc471967b068b",
        "patch": "@@ -651,9 +651,6 @@ class CTxMemPool\n      *  iterate over them and don't care about order\n      *\n      * CalculateDescendantsVec does not include self (it)*/\n-    void CalculateDescendantsVec(txiter it, vecEntries& descendants, vecEntries& stack,\n-            const uint8_t limit=25) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n-    /** Assumes descednants is empty */\n     void CalculateDescendantsVec(txiter it, vecEntries& descendants) const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** The minimum fee to get into the mempool, which may itself not be enough"
      }
    ]
  }
]