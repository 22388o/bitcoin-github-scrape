JeremyRubin,2019-10-26 21:30:01,Rebased :+1: ,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-546641159,546641159,
DrahtBot,2019-10-26 22:43:30,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17925](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17925.html) (Improve UpdateTransactionsFromBlock with Ep",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-546645680,546645680,
JeremyRubin,2019-10-28 19:51:37,"Added some changes as per suggestion from @TheBlueMatt, which should make reviewing the final state easier.\n\nThe epochs are no longer stored on the stack (instead we reference them via the mempool itself) and we use a scoped stack guard in order to ensure that only one part of the code is using epochs at a time. This prevents a called function from creating an epoch guard (via assertion). Whil",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-547117050,547117050,
JeremyRubin,2019-10-28 23:23:23,"I just opened up #17292, which adds a motivating benchmark for the Epoch Mempool.\n\n`./src/bench/bench_bitcoin --filter=ComplexMemPool --scaling=5`\n\nBefore:\n```\n# Benchmark, evals, iterations, total, min, max, median\nComplexMemPool, 5, 5, 6.62715, 0.264409, 0.265441, 0.2654\n```\nAfter:\n```\n# Benchmark, evals, iterations, total, min, max, median\nComplexMemPool, 5, 5, 3.07116, ",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-547188487,547188487,
JeremyRubin,2019-10-29 16:29:04,"I ran the test against master, changing the parameter on number transactions. For this test, the 2x improvement seems to hold. They both seem to be quadratic fundamentally, but that may be a reflection of the test setup and not the actual upper bound.\n\n![image](https://user-images.githubusercontent.com/886523/67787134-46cfb300-fa2d-11e9-8bff-ea5dcfa0b1ec.png)\n\n![image](https://user-images.",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-547511193,547511193,
gmaxwell,2019-10-29 21:24:27,"This seems like a moderately important area for optimization.  One thing that might be worth keeping in mind:  It would probably be useful to support a ""fast but imprecise"" accounting method for the first block template after a new block.  This is really easy to do with the current code (just skip updating the costs while inserting transactions), not sure if your work would change that.\n\n[Asid",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-547635956,547635956,
JeremyRubin,2019-10-30 02:19:37,"Thanks for the review @gmaxwell.\n\nI think the ""fast but imprecise"" accounting method is not affected at all by this change, but someone who has implemented that should verify.\n\nI've also used the terminology correctly RE: asymptotes. Imagine a set of O(N) transactions which each have 1 output, and a single transaction which spends all outputs. Assembling the ancestors (e.g., in CalculateMe",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-547709857,547709857,
gmaxwell,2019-10-31 19:34:06,"Ah! Point on asympotics accepted. You might also want to make a benchmark that shows that case! I agree that a 'toy' case isn't a useful _benchmark_, but if you believe your algo is nlogn in some case it's a useful _testing_ point to actually demonstrate that (e.g. and confirm that there isn't a hidden O(N) in an underlying datastructure that breaks your performance).",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-548534894,548534894,
JeremyRubin,2019-11-24 08:21:54,I tried rebasing -- i have no idea how to clear this appveyor cache? @MarcoFalke @sipsorcery may be related to recent changes?,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557867619,557867619,
sipsorcery,2019-11-24 09:27:50,"@JeremyRubin the appveyor cache doesn't need to be cleared (only time that's required are when the vcpkg or Qt dependencies change).\n\nThe appveyor job failure here is due to a compilation error:\n\n````\nC:\projects\bitcoin\src\httpserver.cpp(373,5): error C3861: 'evthread_use_windows_threads': identifier not found [C:\projects\bitcoin\build_msvc\libbitcoin_server\libbitcoin_server.vcxproj]",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557871726,557871726,
sipsorcery,2019-11-24 10:05:08,@JeremyRubin I pulled this PR on top of master and msbuild was good. My only guess is that something has gone wrong when you rebased.,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557874120,557874120,
JeremyRubin,2019-11-24 12:07:32,"Appveyor failure was before rebasing though\n\nOn Sun, Nov 24, 2019, 2:05 AM Aaron Clauson <notifications@github.com>\nwrote:\n\n> @JeremyRubin <https://github.com/JeremyRubin> I pulled this PR on top of\n> master and msbuild was good. My only guess is that something has gone wrong\n> when you rebased.\n>\n> â€”\n> You are receiving this because you were mentioned.\n> Reply to this email directly, v",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557882458,557882458,
sipsorcery,2019-11-24 15:15:43,The appveyor build has been broken on master at a few points in the recent past. It's working on current master at 9cbd87d8ee2910ac55c215451453e5162e1c377a.,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557898047,557898047,
JeremyRubin,2019-11-24 19:46:00,It looks like there are a lot of failures across other branches too... will ignore for now till it's fixed...,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-557921173,557921173,
JeremyRubin,2020-01-07 17:36:42,Rebased,https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-571691587,571691587,
JeremyRubin,2020-01-15 03:44:03,"Just noting here:\n\nMy current plan with this PR is to break it down into some smaller pieces so that the overall review burden is much less.\n\nAs such, I'm closing this PR.\n\nsee #17925 for the first part of this.",https://github.com/bitcoin/bitcoin/pull/17268#issuecomment-574482350,574482350,
JeremyRubin,2019-10-27 18:17:17,"This can be replaced by a std::remove_if and a std::erase idiom, which will be of similar behavior (remove_if keeps order stable) and same complexity. Much easier to read and less chance of bugs.",https://github.com/bitcoin/bitcoin/pull/17268#discussion_r339356314,339356314,src/miner.cpp
JeremyRubin,2019-10-27 18:19:57,"std::binary_search on a std::set takes `O(N log N)` because std::advance on the iterators is `O(N)`.\n\nTo fix this, allow passing in a predicate that knows how to query alreadyAdded efficient. Other options would be to make alreadyAdded a sorted vector or make it a hashtable always. But that's a bigger change than the predicate, which doesn't change any data types.",https://github.com/bitcoin/bitcoin/pull/17268#discussion_r339356418,339356418,src/miner.cpp
sdaftuar,2020-01-14 13:48:50,"So this replaces doing lookups in setParentTransactions (to deduplicate entries) with more lookups in mapTx (via GetIter) -- presumably that is a win because mapTx is using an unordered map, but just want to verify that sounds right?  (If mapTx were using a regular map lookup, then I might think this change could slow things down for big transactions that have lots of inputs coming from the same t",https://github.com/bitcoin/bitcoin/pull/17268#discussion_r366346660,366346660,src/txmempool.cpp
sdaftuar,2020-01-14 13:55:49,"I think it's possible to add the same transaction to `all_descendants` twice here, and thus miscalculate the statistics in the loop starting at line 98.  Imagine the transaction we're passed in (A) has two direct children, B and C, and C is also a child of B.\n\nB and C will both be added to `all_descendants` at line 64.\nSuppose we process B before C when looping over A's children at line 68/6",https://github.com/bitcoin/bitcoin/pull/17268#discussion_r366350279,366350279,src/txmempool.cpp
JeremyRubin,2020-01-14 20:23:51,Yes this is a bug; my bad. It's fixed in some later changes I had staged for the mempool but forgot to propagate to this PR. Will push up a fix.,https://github.com/bitcoin/bitcoin/pull/17268#discussion_r366554455,366554455,src/txmempool.cpp
JeremyRubin,2020-01-14 20:25:49,"Nope; we actually read the map below from GetIterSet so the access to mapTx is the same, we just do it a bit earlier.\n\nThe win is getting rid of setParentTransactions and inlining UpdateParent in this pass.",https://github.com/bitcoin/bitcoin/pull/17268#discussion_r366555249,366555249,src/txmempool.cpp
