[
  {
    "sha": "7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZTZkMjNiMTcxOTE5MWY4M2FmN2QzZTdiMTM0YTkwODg5YjVjMWVm",
    "commit": {
      "author": {
        "name": "Corinne Dashjr",
        "email": "corinne+git@dashjr.org",
        "date": "2015-04-28T14:48:28Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-01T11:21:27Z"
      },
      "message": "Bugfix: Grammar fixes",
      "tree": {
        "sha": "04c8888faab17cbe87ca776ab1076b78da0e875b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/04c8888faab17cbe87ca776ab1076b78da0e875b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/comments",
    "author": null,
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "18d28326785a7111b50528107550c3d37ec40d89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18d28326785a7111b50528107550c3d37ec40d89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/18d28326785a7111b50528107550c3d37ec40d89"
      }
    ],
    "stats": {
      "total": 159,
      "additions": 79,
      "deletions": 80
    },
    "files": [
      {
        "sha": "e8af46e0e49076f9ba986e5c29a788b6d022f6fb",
        "filename": "doc/README_osx.txt",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/README_osx.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/README_osx.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/README_osx.txt?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -1,6 +1,6 @@\n Deterministic OSX Dmg Notes.\n \n-Working OSX DMG's are created in Linux by combining a recent clang,\n+Working OSX DMGs are created in Linux by combining a recent clang,\n the Apple's binutils (ld, ar, etc), and DMG authoring tools.\n \n Apple uses clang extensively for development and has upstreamed the necessary\n@@ -58,7 +58,7 @@ libdmg-hfsplus project is used to compress it. There are several bugs in this\n tool and its maintainer has seemingly abandoned the project. It has been forked\n and is available (with fixes) here: https://github.com/theuni/libdmg-hfsplus .\n \n-The 'dmg' tool has the ability to create DMG's from scratch as well, but this\n+The 'dmg' tool has the ability to create DMGs from scratch as well, but this\n functionality is broken. Only the compression feature is currently used.\n Ideally, the creation could be fixed and genisoimage would no longer be necessary.\n "
      },
      {
        "sha": "90e98ed4197414d15cc9ada3917e3c10a86eba01",
        "filename": "doc/bips.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/bips.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/bips.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/bips.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -11,7 +11,7 @@ BIPs that are implemented by Bitcoin Core (up-to-date up to **v0.10.0**):\n * [`BIP 31`](https://github.com/bitcoin/bips/blob/master/bip-0031.mediawiki): The 'pong' protocol message (and the protocol version bump to 60001) has been implemented since **v0.6.1** ([PR #1081](https://github.com/bitcoin/bitcoin/pull/1081)).\n * [`BIP 34`](https://github.com/bitcoin/bips/blob/master/bip-0034.mediawiki): The rule that requires blocks to contain their height (number) in the coinbase input, and the introduction of version 2 blocks has been implemented since **v0.7.0**. The rule took effect for version 2 blocks as of *block 224413* (March 5th 2013), and version 1 blocks are no longer allowed since *block 227931* (March 25th 2013) ([PR #1526](https://github.com/bitcoin/bitcoin/pull/1526)).\n * [`BIP 35`](https://github.com/bitcoin/bips/blob/master/bip-0035.mediawiki): The 'mempool' protocol message (and the protocol version bump to 60002) has been implemented since **v0.7.0** ([PR #1641](https://github.com/bitcoin/bitcoin/pull/1641)).\n-* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks , and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n+* [`BIP 37`](https://github.com/bitcoin/bips/blob/master/bip-0037.mediawiki): The bloom filtering for transaction relaying, partial merkle trees for blocks, and the protocol version bump to 70001 (enabling low-bandwidth SPV clients) has been implemented since **v0.8.0** ([PR #1795](https://github.com/bitcoin/bitcoin/pull/1795)).\n * [`BIP 42`](https://github.com/bitcoin/bips/blob/master/bip-0042.mediawiki): The bug that would have caused the subsidy schedule to resume after block 13440000 was fixed in **v0.9.2** ([PR #3842](https://github.com/bitcoin/bitcoin/pull/3842)).\n * [`BIP 61`](https://github.com/bitcoin/bips/blob/master/bip-0061.mediawiki): The 'reject' protocol message (and the protocol version bump to 70002) was added in **v0.9.0** ([PR #3185](https://github.com/bitcoin/bitcoin/pull/3185)).\n * [`BIP 66`](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki): The strict DER rules and associated version 3 blocks have been implemented since **v0.10.0** ([PR #5713](https://github.com/bitcoin/bitcoin/pull/5713))."
      },
      {
        "sha": "913e72519fc90e72c1fcc407351ffba2df3d8c4c",
        "filename": "doc/build-osx.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/build-osx.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/build-osx.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-osx.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -1,6 +1,6 @@\n Mac OS X Build Instructions and Notes\n ====================================\n-This guide will show you how to build bitcoind(headless client) for OSX.\n+This guide will show you how to build bitcoind (headless client) for OSX.\n \n Notes\n -----"
      },
      {
        "sha": "f70bf7f1febf9deec6e004bc16238d512f8ae87a",
        "filename": "doc/build-unix.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/build-unix.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/build-unix.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-unix.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -195,12 +195,12 @@ Hardening enables the following features:\n \n * Position Independent Executable\n     Build position independent code to take advantage of Address Space Layout Randomization\n-    offered by some kernels. An attacker who is able to cause execution of code at an arbitrary\n-    memory location is thwarted if he or she doesn't know where anything useful is located.\n+    offered by some kernels. Attackers who can cause execution of code at an arbitrary memory\n+    location are thwarted if they don't know where anything useful is located.\n     The stack and heap are randomly located by default but this allows the code section to be\n     randomly located as well.\n \n-    On an Amd64 processor where a library was not compiled with -fPIC, this will cause an error\n+    On an AMD64 processor where a library was not compiled with -fPIC, this will cause an error\n     such as: \"relocation R_X86_64_32 against `......' can not be used when making a shared object;\"\n \n     To test that you have built PIE executable, install scanelf, part of paxutils, and use:"
      },
      {
        "sha": "8f7db31d596c953019523f924ffbc2e03c01ccd2",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -53,7 +53,7 @@ bool function(int arg1, const char *arg2)\n ```\n A complete list of `@xxx` commands can be found at http://www.stack.nl/~dimitri/doxygen/manual/commands.html.\n As Doxygen recognizes the comments by the delimiters (`/**` and `*/` in this case), you don't\n-*need* to provide any commands for a comment to be valid, just a description text is fine. \n+*need* to provide any commands for a comment to be valid; just a description text is fine.\n \n To describe a class use the same construct above the class definition:\n ```c++\n@@ -175,12 +175,12 @@ Threads\n Pull Request Terminology\n ------------------------\n \n-Concept ACK - Agree with the idea and overall direction, but haven't reviewed the code changes or tested them.\n+Concept ACK - Agree with the idea and overall direction, but have neither reviewed nor tested the code changes.\n \n utACK (untested ACK) - Reviewed and agree with the code changes but haven't actually tested them.\n \n Tested ACK - Reviewed the code changes and have verified the functionality or bug fix.\n \n ACK -  A loose ACK can be confusing. It's best to avoid them unless it's a documentation/comment only change in which case there is nothing to test/verify; therefore the tested/untested distinction is not there.\n \n-NACK - Disagree with the code changes/concept. Should be accompanied by an explanation. \n+NACK - Disagree with the code changes/concept. Should be accompanied by an explanation."
      },
      {
        "sha": "506e171153dceb3a197c55445c757f04a9bed856",
        "filename": "doc/dnsseed-policy.md",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/dnsseed-policy.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/dnsseed-policy.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dnsseed-policy.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -10,15 +10,14 @@ Other implementations of Bitcoin software may also use the same\n seeds and may be more exposed. In light of this exposure, this \n document establishes some basic expectations for operating dnsseeds.\n \n-0. A DNS seed operating organization or person is expected\n-to follow good host security practices and maintain control of\n-their serving infrastructure and not sell or transfer control of their\n-DNS seed. Any hosting services contracted by the operator are\n-equally expected to uphold these expectations.\n+0. A DNS seed operating organization or person is expected to follow good\n+host security practices, maintain control of applicable infrastructure,\n+and not sell or transfer control of the DNS seed. Any hosting services\n+contracted by the operator are equally expected to uphold these expectations.\n \n 1. The DNS seed results must consist exclusively of fairly selected and\n functioning Bitcoin nodes from the public network to the best of the\n-operators understanding and capability.\n+operator's understanding and capability.\n \n 2. For the avoidance of doubt, the results may be randomized but must not\n single-out any group of hosts to receive different results unless due to an\n@@ -28,7 +27,7 @@ urgent technical necessity and disclosed.\n \n 4. Any logging of DNS queries should be only that which is necessary\n for the operation of the service or urgent health of the Bitcoin\n-network and must not be retained longer than necessary or disclosed\n+network and must not be retained longer than necessary nor disclosed\n to any third party.\n \n 5. Information gathered as a result of the operators node-spidering"
      },
      {
        "sha": "b9fbcb30aa050b8d301651c80b83998e098c6182",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -87,7 +87,7 @@ After creating the VM, we need to configure it.\n \n ![](gitian-building/network_settings.png)\n \n-- Click `Advanced`, then `Port Forwarding`. We want to set up a port through where we can reach the VM to get files in and out.\n+- Click `Advanced`, then `Port Forwarding`. We want to set up a port through which we can reach the VM to get files in and out.\n - Create a new rule by clicking the plus icon.\n \n ![](gitian-building/port_forwarding_rules.png)\n@@ -111,7 +111,7 @@ Installing Debian\n \n This section will explain how to install Debian on the newly created VM.\n \n-- Choose the non-graphical installer.  We do not need the graphical environment, it will only increase installation time and disk usage.\n+- Choose the non-graphical installer.  We do not need the graphical environment; it will only increase installation time and disk usage.\n \n ![](gitian-building/debian_install_1_boot_menu.png)\n \n@@ -144,7 +144,7 @@ and proceed, just press `Enter`. To select a different button, press `Tab`.\n \n ![](gitian-building/debian_install_9_user_password.png)\n \n-- The installer will set up the clock using a time server, this process should be automatic\n+- The installer will set up the clock using a time server; this process should be automatic\n - Set up the clock: choose a time zone (depends on the locale settings that you picked earlier; specifics don't matter)  \n \n ![](gitian-building/debian_install_10_configure_clock.png)\n@@ -371,7 +371,7 @@ COMMIT=2014_03_windows_unicode_path\n Signing externally\n -------------------\n \n-If you want to do the PGP signing on another device that's also possible; just define `SIGNER` as mentioned\n+If you want to do the PGP signing on another device, that's also possible; just define `SIGNER` as mentioned\n and follow the steps in the build process as normal.\n \n     gpg: skipped \"laanwj\": secret key not available"
      },
      {
        "sha": "1f206a6c02546580baa8fd6bdb053d9d8e4d7981",
        "filename": "doc/init.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/init.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/init.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/init.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -63,7 +63,7 @@ can then be controlled by group membership.\n \n 4a) systemd\n \n-Installing this .service file consists on just copying it to\n+Installing this .service file consists of just copying it to\n /usr/lib/systemd/system directory, followed by the command\n \"systemctl daemon-reload\" in order to update running systemd configuration.\n "
      },
      {
        "sha": "3653e5302194fd8796b2468c4bc438d6c6dc6c03",
        "filename": "doc/translation_process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/translation_process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/doc/translation_process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/translation_process.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -32,7 +32,7 @@ QToolBar *toolbar = addToolBar(tr(\"Tabs toolbar\"));\n ### Creating a pull-request\n For general PRs, you shouldn\u2019t include any updates to the translation source files. They will be updated periodically, primarily around pre-releases, allowing time for any new phrases to be translated before public releases. This is also important in avoiding translation related merge conflicts.\n \n-When an updated source file is merged into the Github repo,  Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n+When an updated source file is merged into the Github repo, Transifex will automatically detect it (although it can take several hours). Once processed, the new strings will show up as \"Remaining\" in the Transifex web interface and are ready for translators.\n \n To create the pull-request, use the following commands:\n ```\n@@ -108,4 +108,4 @@ To create a new language template, you will need to edit the languages manifest\n ### Questions and general assistance\n The Bitcoin-Core translation maintainers include *tcatm, seone, Diapolo, wumpus and luke-jr*.You can find them, and others, in the Freenode IRC chatroom - `irc.freenode.net #bitcoin-dev`.\n \n-If you are a translator, you should also subscribe to the mailing list, https://groups.google.com/forum/#!forum/bitcoin-translators. Announcements will be posted during application pre-releases to notify translators to check for updates.\n\\ No newline at end of file\n+If you are a translator, you should also subscribe to the mailing list, https://groups.google.com/forum/#!forum/bitcoin-translators. Announcements will be posted during application pre-releases to notify translators to check for updates."
      },
      {
        "sha": "d9fbb109e84e69c4b88083df772149048160d0c6",
        "filename": "qa/rpc-tests/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/README.md?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -28,7 +28,7 @@ Notes\n A 200-block -regtest blockchain and wallets for four nodes\n is created the first time a regression test is run and\n is stored in the cache/ directory. Each node has 25 mature\n-blocks (25*50=1250 BTC) in their wallet.\n+blocks (25*50=1250 BTC) in its wallet.\n \n After the first run, the cache/ blockchain and wallets are\n copied into a temporary directory and used as the initial"
      },
      {
        "sha": "297f2d8b03637daa8cd27da869707aeed971eaaf",
        "filename": "qa/rpc-tests/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/util.py?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -272,7 +272,7 @@ def send_zeropri_transaction(from_node, to_node, amount, fee):\n     Create&broadcast a zero-priority transaction.\n     Returns (txid, hex-encoded-txdata)\n     Ensures transaction is zero-priority by first creating a send-to-self,\n-    then using it's output\n+    then using its output\n     \"\"\"\n \n     # Create a send-to-self with confirmed inputs:"
      },
      {
        "sha": "b8965b3662eebe562a5df683368a7ec18d640112",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -62,7 +62,7 @@ def run_test (self):\n         walletinfo = self.nodes[0].getwalletinfo()\n         assert_equal(walletinfo['immature_balance'], 0)\n \n-        # Have node0 mine a block, thus they will collect their own fee. \n+        # Have node0 mine a block, thus it will collect its own fee.\n         self.nodes[0].generate(1)\n         self.sync_all()\n "
      },
      {
        "sha": "98df370c7dd7ce11b5bb64c81b739f150827a339",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -17,8 +17,8 @@\n #include <stdint.h>\n #include <vector>\n \n-/** \n- * Extended statistics about a CAddress \n+/**\n+ * Extended statistics about a CAddress\n  */\n class CAddrInfo : public CAddress\n {\n@@ -112,7 +112,7 @@ class CAddrInfo : public CAddress\n  *  * Addresses are organized into buckets.\n  *    * Address that have not yet been tried go into 1024 \"new\" buckets.\n  *      * Based on the address range (/16 for IPv4) of source of the information, 64 buckets are selected at random\n- *      * The actual bucket is chosen from one of these, based on the range the address itself is located.\n+ *      * The actual bucket is chosen from one of these, based on the range in which the address itself is located.\n  *      * One single address can occur in up to 8 different buckets, to increase selection chances for addresses that\n  *        are seen frequently. The chance for increasing this multiplicity decreases exponentially.\n  *      * When adding a new address to a full bucket, a randomly chosen entry (with a bias favoring less recently seen"
      },
      {
        "sha": "15bc312c4b588b70b7b828ba9356b95c9f30794d",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -32,14 +32,14 @@ enum bloomflags\n \n /**\n  * BloomFilter is a probabilistic filter which SPV clients provide\n- * so that we can filter the transactions we sends them.\n+ * so that we can filter the transactions we send them.\n  * \n  * This allows for significantly more efficient transaction and block downloads.\n  * \n- * Because bloom filters are probabilistic, an SPV node can increase the false-\n- * positive rate, making us send them transactions which aren't actually theirs, \n+ * Because bloom filters are probabilistic, a SPV node can increase the false-\n+ * positive rate, making us send it transactions which aren't actually its,\n  * allowing clients to trade more bandwidth for more privacy by obfuscating which\n- * keys are owned by them.\n+ * keys are controlled by them.\n  */\n class CBloomFilter\n {"
      },
      {
        "sha": "29513391045f0a9ae4d9fbffef4f301f88066eb8",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -93,8 +93,8 @@ class CChainParams\n };\n \n /**\n- * Return the currently selected parameters. This won't change after app startup\n- * outside of the unit tests.\n+ * Return the currently selected parameters. This won't change after app\n+ * startup, except for unit tests.\n  */\n const CChainParams &Params();\n "
      },
      {
        "sha": "4369d0aef7e3c7dae75062c37fb6e33c899d20fe",
        "filename": "src/chainparamsbase.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/chainparamsbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/chainparamsbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparamsbase.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -34,8 +34,8 @@ class CBaseChainParams\n };\n \n /**\n- * Return the currently selected parameters. This won't change after app startup\n- * outside of the unit tests.\n+ * Return the currently selected parameters. This won't change after app\n+ * startup, except for unit tests.\n  */\n const CBaseChainParams& BaseParams();\n "
      },
      {
        "sha": "b0e5076788ebf911e0fc25dace9cd8b4b4665cb1",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -11,7 +11,7 @@\n \n class CBlockIndex;\n \n-/** \n+/**\n  * Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three.\n  */"
      },
      {
        "sha": "20ba25bb419dd3ecdd6c3316e02f128b0d529889",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -54,7 +54,7 @@ class CCheckQueue\n \n     /**\n      * Number of verifications that haven't completed yet.\n-     * This includes elements that are not anymore in queue, but still in\n+     * This includes elements that are no longer queued, but still in the\n      * worker's own batches.\n      */\n     unsigned int nTodo;\n@@ -81,7 +81,7 @@ class CCheckQueue\n                     fAllOk &= fOk;\n                     nTodo -= nNow;\n                     if (nTodo == 0 && !fMaster)\n-                        // We processed the last element; inform the master he or she can exit and return the result\n+                        // We processed the last element; inform the master it can exit and return the result\n                         condMaster.notify_one();\n                 } else {\n                     // first iteration\n@@ -136,7 +136,7 @@ class CCheckQueue\n         Loop();\n     }\n \n-    //! Wait until execution finishes, and return whether all evaluations where successful.\n+    //! Wait until execution finishes, and return whether all evaluations were successful.\n     bool Wait()\n     {\n         return Loop(true);"
      },
      {
        "sha": "6f852fcaa54c148000a2cf46858dec902d72352b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -52,7 +52,7 @@ bool fFeeEstimatesInitialized = false;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n-// accessing block files, don't count towards to fd_set size limit\n+// accessing block files don't count towards the fd_set size limit\n // anyway.\n #define MIN_CORE_FILEDESCRIPTORS 0\n #else\n@@ -334,7 +334,7 @@ strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current\n     strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n     strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n     strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1));\n-    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"),\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction; setting this too low may abort large transactions (default: %s)\"),\n         FormatMoney(maxTxFee)));\n     strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n     strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));"
      },
      {
        "sha": "263c2abf6fc9800712c35ec8b1afd971933a3fc0",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -941,7 +941,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n \n         // do all inputs exist?\n         // Note that this does not check for the presence of actual outputs (see the next check for that),\n-        // only helps filling in pfMissingInputs (to determine missing vs spent).\n+        // and only helps with filling in pfMissingInputs (to determine missing vs spent).\n         BOOST_FOREACH(const CTxIn txin, tx.vin) {\n             if (!view.HaveCoins(txin.prevout.hash)) {\n                 if (pfMissingInputs)\n@@ -1277,8 +1277,8 @@ void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n         pfork = pfork->pprev;\n     }\n \n-    // We define a condition which we should warn the user about as a fork of at least 7 blocks\n-    // who's tip is within 72 blocks (+/- 12 hours if no one mines it) of ours\n+    // We define a condition where we should warn the user about as a fork of at least 7 blocks\n+    // with a tip within 72 blocks (+/- 12 hours if no one mines it) of ours\n     // We use 7 blocks rather arbitrarily as it represents just under 10% of sustained network\n     // hash rate operating on the fork.\n     // or a chain that is entirely longer than ours and invalid (note that this should be detected by both)\n@@ -1719,7 +1719,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // See BIP30 and http://r6.ca/blog/20120206T005236Z.html for more information.\n     // This logic is not necessary for memory pool transactions, as AcceptToMemoryPool\n     // already refuses previously-known transaction ids entirely.\n-    // This rule was originally applied all blocks whose timestamp was after March 15, 2012, 0:00 UTC.\n+    // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n     // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n     // initial block download.\n@@ -1984,7 +1984,7 @@ void static UpdateTip(CBlockIndex *pindexNew) {\n         if (nUpgraded > 100/2)\n         {\n             // strMiscWarning is read by GetWarnings(), called by Qt and the JSON-RPC code to warn the user:\n-            strMiscWarning = _(\"Warning: This version is obsolete, upgrade required!\");\n+            strMiscWarning = _(\"Warning: This version is obsolete; upgrade required!\");\n             CAlert::Notify(strMiscWarning, true);\n             fWarned = true;\n         }\n@@ -3732,7 +3732,7 @@ void static ProcessGetData(CNode* pfrom)\n                             pfrom->PushMessage(\"merkleblock\", merkleBlock);\n                             // CMerkleBlock just contains hashes, so also push any transactions in the block the client did not see\n                             // This avoids hurting performance by pointlessly requiring a round-trip\n-                            // Note that there is currently no way for a node to request any single transactions we didnt send here -\n+                            // Note that there is currently no way for a node to request any single transactions we didn't send here -\n                             // they must either disconnect and retry or request the full block.\n                             // Thus, the protocol spec specified allows for us to provide duplicate txn here,\n                             // however we MUST always provide at least what the remote peer needs\n@@ -4059,7 +4059,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // First request the headers preceeding the announced block. In the normal fully-synced\n+                    // First request the headers preceding the announced block. In the normal fully-synced\n                     // case where a new block is announced that succeeds the current tip (no reorganization),\n                     // there are no such headers.\n                     // Secondly, and only when we are close to being synced, we request the announced block directly,\n@@ -4466,7 +4466,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     // Nonce mismatches are normal when pings are overlapping\n                     sProblem = \"Nonce mismatch\";\n                     if (nonce == 0) {\n-                        // This is most likely a bug in another implementation somewhere, cancel this ping\n+                        // This is most likely a bug in another implementation somewhere; cancel this ping\n                         bPingFinished = true;\n                         sProblem = \"Nonce zero\";\n                     }\n@@ -4475,7 +4475,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                 sProblem = \"Unsolicited pong without ping\";\n             }\n         } else {\n-            // This is most likely a bug in another implementation somewhere, cancel this ping\n+            // This is most likely a bug in another implementation somewhere; cancel this ping\n             bPingFinished = true;\n             sProblem = \"Short payload\";\n         }\n@@ -4918,7 +4918,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // In case there is a block that has been in flight from this peer for (2 + 0.5 * N) times the block interval\n         // (with N the number of validated blocks that were in flight at the time it was requested), disconnect due to\n         // timeout. We compensate for in-flight blocks to prevent killing off peers due to our own downstream link\n-        // being saturated. We only count validated in-flight blocks so peers can't advertize nonexisting block hashes\n+        // being saturated. We only count validated in-flight blocks so peers can't advertise non-existing block hashes\n         // to unreasonably increase our timeout.\n         if (!pto->fDisconnect && state.vBlocksInFlight.size() > 0 && state.vBlocksInFlight.front().nTime < nNow - 500000 * consensusParams.nPowTargetSpacing * (4 + state.vBlocksInFlight.front().nValidatedQueuedBefore)) {\n             LogPrintf(\"Timeout downloading block %s from peer=%d, disconnecting\\n\", state.vBlocksInFlight.front().hash.ToString(), pto->id);"
      },
      {
        "sha": "38d867675ef58a481d6fe71219b360f60c214442",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -75,7 +75,7 @@ static const int MAX_BLOCKS_IN_TRANSIT_PER_PEER = 16;\n /** Timeout in seconds during which a peer must stall block download progress before being disconnected. */\n static const unsigned int BLOCK_STALLING_TIMEOUT = 2;\n /** Number of headers sent in one getheaders result. We rely on the assumption that if a peer sends\n- *  less than this number, we reached their tip. Changing this value is a protocol upgrade. */\n+ *  less than this number, we reached its tip. Changing this value is a protocol upgrade. */\n static const unsigned int MAX_HEADERS_RESULTS = 2000;\n /** Size of the \"block download window\": how far ahead of our current height do we fetch?\n  *  Larger windows tolerate larger download speed differences between peer, but increase the potential"
      },
      {
        "sha": "4d90fd8cd7dfe6eb6036fb5718f201e8891a627e",
        "filename": "src/merkleblock.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/merkleblock.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/merkleblock.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -119,8 +119,8 @@ uint256 CPartialMerkleTree::TraverseAndExtract(int height, unsigned int pos, uns\n         if (pos*2+1 < CalcTreeWidth(height-1)) {\n             right = TraverseAndExtract(height-1, pos*2+1, nBitsUsed, nHashUsed, vMatch);\n             if (right == left) {\n-                // If the left and right branch should never be identical as the transaction\n-                // hashes covered by them must be unique.\n+                // The left and right branches should never be identical, as the transaction\n+                // hashes covered by them must each be unique.\n                 fBad = true;\n             }\n         } else {"
      },
      {
        "sha": "904c22abc2b942f4a004c275b9a50f83327e93a3",
        "filename": "src/merkleblock.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/merkleblock.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/merkleblock.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/merkleblock.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -104,7 +104,7 @@ class CPartialMerkleTree\n         }\n     }\n \n-    /** Construct a partial merkle tree from a list of transaction id's, and a mask that selects a subset of them */\n+    /** Construct a partial merkle tree from a list of transaction ids, and a mask that selects a subset of them */\n     CPartialMerkleTree(const std::vector<uint256> &vTxid, const std::vector<bool> &vMatch);\n \n     CPartialMerkleTree();"
      },
      {
        "sha": "5ce011b667ea38e85039d0b32b7cf9045f2c7397",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -271,8 +271,8 @@ class CNode\n     bool fDisconnect;\n     // We use fRelayTxes for two purposes -\n     // a) it allows us to not relay tx invs before receiving the peer's version message\n-    // b) the peer may tell us in their version message that we should not relay tx invs\n-    //    until they have initialized their bloom filter.\n+    // b) the peer may tell us in its version message that we should not relay tx invs\n+    //    until it has initialized its bloom filter.\n     bool fRelayTxes;\n     CSemaphoreGrant grantOutbound;\n     CCriticalSection cs_filter;"
      },
      {
        "sha": "441814ff07130f0b8f5840c5b6cac5c440bfadec",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -62,7 +62,7 @@ AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :\n             break;\n         case ChangePass: // Ask old passphrase + new passphrase x2\n             setWindowTitle(tr(\"Change passphrase\"));\n-            ui->warningLabel->setText(tr(\"Enter the old and new passphrase to the wallet.\"));\n+            ui->warningLabel->setText(tr(\"Enter the old passphrase and new passphrase to the wallet.\"));\n             break;\n     }\n     textChanged();"
      },
      {
        "sha": "7531fbddcbef0aebaf612b316fe25ac8c0b089aa",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -129,11 +129,11 @@ CoinControlDialog::CoinControlDialog(QWidget *parent) :\n     ui->treeWidget->setColumnWidth(COLUMN_DATE, 110);\n     ui->treeWidget->setColumnWidth(COLUMN_CONFIRMATIONS, 100);\n     ui->treeWidget->setColumnWidth(COLUMN_PRIORITY, 100);\n-    ui->treeWidget->setColumnHidden(COLUMN_TXHASH, true);         // store transacton hash in this column, but dont show it\n-    ui->treeWidget->setColumnHidden(COLUMN_VOUT_INDEX, true);     // store vout index in this column, but dont show it\n-    ui->treeWidget->setColumnHidden(COLUMN_AMOUNT_INT64, true);   // store amount int64 in this column, but dont show it\n-    ui->treeWidget->setColumnHidden(COLUMN_PRIORITY_INT64, true); // store priority int64 in this column, but dont show it\n-    ui->treeWidget->setColumnHidden(COLUMN_DATE_INT64, true);     // store date int64 in this column, but dont show it\n+    ui->treeWidget->setColumnHidden(COLUMN_TXHASH, true);         // store transacton hash in this column, but don't show it\n+    ui->treeWidget->setColumnHidden(COLUMN_VOUT_INDEX, true);     // store vout index in this column, but don't show it\n+    ui->treeWidget->setColumnHidden(COLUMN_AMOUNT_INT64, true);   // store amount int64 in this column, but don't show it\n+    ui->treeWidget->setColumnHidden(COLUMN_PRIORITY_INT64, true); // store priority int64 in this column, but don't show it\n+    ui->treeWidget->setColumnHidden(COLUMN_DATE_INT64, true);     // store date int64 in this column, but don't show it\n \n     // default view is sorted by amount desc\n     sortView(COLUMN_AMOUNT_INT64, Qt::DescendingOrder);\n@@ -408,8 +408,8 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n     }\n \n     // todo: this is a temporary qt5 fix: when clicking a parent node in tree mode, the parent node\n-    //       including all childs are partially selected. But the parent node should be fully selected\n-    //       as well as the childs. Childs should never be partially selected in the first place.\n+    //       including all children are partially selected. But the parent node should be fully selected\n+    //       as well as the children. Children should never be partially selected in the first place.\n     //       Please remove this ugly fix, once the bug is solved upstream.\n #if QT_VERSION >= 0x050000\n     else if (column == COLUMN_CHECKBOX && item->childCount() > 0)\n@@ -635,15 +635,15 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     l7->setStyleSheet((fDust) ? \"color:red;\" : \"\");                                     // Dust = \"yes\"\n \n     // tool tips\n-    QString toolTip1 = tr(\"This label turns red, if the transaction size is greater than 1000 bytes.\") + \"<br /><br />\";\n+    QString toolTip1 = tr(\"This label turns red if the transaction size is greater than 1000 bytes.\") + \"<br /><br />\";\n     toolTip1 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK())) + \"<br /><br />\";\n     toolTip1 += tr(\"Can vary +/- 1 byte per input.\");\n \n     QString toolTip2 = tr(\"Transactions with higher priority are more likely to get included into a block.\") + \"<br /><br />\";\n-    toolTip2 += tr(\"This label turns red, if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n+    toolTip2 += tr(\"This label turns red if the priority is smaller than \\\"medium\\\".\") + \"<br /><br />\";\n     toolTip2 += tr(\"This means a fee of at least %1 per kB is required.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, CWallet::minTxFee.GetFeePerK()));\n \n-    QString toolTip3 = tr(\"This label turns red, if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n+    QString toolTip3 = tr(\"This label turns red if any recipient receives an amount smaller than %1.\").arg(BitcoinUnits::formatWithUnit(nDisplayUnit, ::minRelayTxFee.GetFee(546)));\n \n     // how many satoshis the estimated fee can vary per byte we guess wrong\n     double dFeeVary;"
      },
      {
        "sha": "efb2bf4158d9eefa96ac0843387c42b885456071",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -208,7 +208,7 @@ void OptionsDialog::on_resetButton_clicked()\n     {\n         // confirmation dialog\n         QMessageBox::StandardButton btnRetVal = QMessageBox::question(this, tr(\"Confirm options reset\"),\n-            tr(\"Client restart required to activate changes.\") + \"<br><br>\" + tr(\"Client will be shutdown, do you want to proceed?\"),\n+            tr(\"Client restart required to activate changes.\") + \"<br><br>\" + tr(\"Client will be shut down. Do you want to proceed?\"),\n             QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n         if(btnRetVal == QMessageBox::Cancel)"
      },
      {
        "sha": "1a931695e1be9bf8c4d4f0fb0b0d7aac18ef26c7",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -505,7 +505,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n     switch(sendCoinsReturn.status)\n     {\n     case WalletModel::InvalidAddress:\n-        msgParams.first = tr(\"The recipient address is not valid, please recheck.\");\n+        msgParams.first = tr(\"The recipient address is not valid. Please recheck.\");\n         break;\n     case WalletModel::InvalidAmount:\n         msgParams.first = tr(\"The amount to pay must be larger than 0.\");\n@@ -517,7 +517,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The total exceeds your balance when the %1 transaction fee is included.\").arg(msgArg);\n         break;\n     case WalletModel::DuplicateAddress:\n-        msgParams.first = tr(\"Duplicate address found, can only send to each address once per send operation.\");\n+        msgParams.first = tr(\"Duplicate address found: can only send to each address once per send operation.\");\n         break;\n     case WalletModel::TransactionCreationFailed:\n         msgParams.first = tr(\"Transaction creation failed!\");"
      },
      {
        "sha": "6eec33ffd4a5d452a7f1e1f08c94eb2c4bf279ba",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -216,7 +216,7 @@ void SendCoinsEntry::setValue(const SendCoinsRecipient &value)\n \n         ui->addAsLabel->clear();\n         ui->payTo->setText(recipient.address); // this may set a label from addressbook\n-        if (!recipient.label.isEmpty()) // if a label had been set from the addressbook, dont overwrite with an empty label\n+        if (!recipient.label.isEmpty()) // if a label had been set from the addressbook, don't overwrite with an empty label\n             ui->addAsLabel->setText(recipient.label);\n         ui->payAmount->setValue(recipient.amount);\n     }"
      },
      {
        "sha": "b57955dae2f411b83f545142ad8042049ad19af9",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7e6d23b1719191f83af7d3e7b134a90889b5c1ef/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "patch": "@@ -35,8 +35,8 @@ bool bSpendZeroConfChange = true;\n bool fSendFreeTransactions = false;\n bool fPayAtLeastCustomFee = true;\n \n-/** \n- * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) \n+/**\n+ * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n  */\n CFeeRate CWallet::minTxFee = CFeeRate(1000);\n@@ -529,7 +529,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n                 delete pwalletdbEncryption;\n             }\n             // We now probably have half of our keys encrypted in memory, and half not...\n-            // die and let the user reload their unencrypted wallet.\n+            // die and let the user reload the unencrypted wallet.\n             assert(false);\n         }\n \n@@ -541,7 +541,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n             if (!pwalletdbEncryption->TxnCommit()) {\n                 delete pwalletdbEncryption;\n                 // We now have keys encrypted in memory, but not on disk...\n-                // die to avoid confusion and let the user reload their unencrypted wallet.\n+                // die to avoid confusion and let the user reload the unencrypted wallet.\n                 assert(false);\n             }\n \n@@ -1097,7 +1097,7 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n void CWallet::ReacceptWalletTransactions()\n {\n-    // If transcations aren't broadcasted, don't let them into local mempool either\n+    // If transactions aren't being broadcasted, don't let them into local mempool either\n     if (!fBroadcastTransactions)\n         return;\n     LOCK2(cs_main, cs_wallet);"
      }
    ]
  },
  {
    "sha": "b05a89b2def301704df8f22f05a45ccf891c2b83",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDVhODliMmRlZjMwMTcwNGRmOGYyMmYwNWE0NWNjZjg5MWMyYjgz",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-04-28T14:47:17Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2015-05-02T15:23:59Z"
      },
      "message": "Non-grammatical language improvements",
      "tree": {
        "sha": "da028bc52de857c1a89fb223ae8973859b1cf150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da028bc52de857c1a89fb223ae8973859b1cf150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b05a89b2def301704df8f22f05a45ccf891c2b83",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b05a89b2def301704df8f22f05a45ccf891c2b83",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b05a89b2def301704df8f22f05a45ccf891c2b83",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b05a89b2def301704df8f22f05a45ccf891c2b83/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e6d23b1719191f83af7d3e7b134a90889b5c1ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e6d23b1719191f83af7d3e7b134a90889b5c1ef"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 33,
      "deletions": 30
    },
    "files": [
      {
        "sha": "1fa5b5f989ea63ca9f3adee4cc798888142785e2",
        "filename": "doc/gitian-building.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/doc/gitian-building.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/doc/gitian-building.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/gitian-building.md?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -393,4 +393,4 @@ Uploading signatures\n \n After building and signing you can push your signatures (both the `.assert` and `.assert.sig` files) to the\n [bitcoin/gitian.sigs](https://github.com/bitcoin/gitian.sigs/) repository, or if that's not possible create a pull\n-request. You can also mail the files to me (laanwj@gmail.com) and I'll commit them.\n+request. You can also mail the files to Wladimir (laanwj@gmail.com) and he will commit them."
      },
      {
        "sha": "cdcee0ec36da640c96695c9d10853a7b4523ce48",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -164,4 +164,4 @@ Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spur\n \n - Add release notes for the new version to the directory `doc/release-notes` in git master\n \n-- Celebrate \n+- Celebrate"
      },
      {
        "sha": "b72dda49d165dd75aa943a82cf0bd88e276c1c83",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -105,7 +105,7 @@ class CAddrInfo : public CAddress\n /** Stochastic address manager\n  *\n  * Design goals:\n- *  * Keep the address tables in-memory, and asynchronously dump the entire to able in peers.dat.\n+ *  * Keep the address tables in-memory, and asynchronously dump the entire table to peers.dat.\n  *  * Make sure no (localized) attacker can fill the entire table with his nodes/addresses.\n  *\n  * To that end:"
      },
      {
        "sha": "787979c8270ecf1e91b73b18f5b2c22da24e19ee",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -6,10 +6,10 @@\n /**\n  * Why base-58 instead of standard base-64 encoding?\n  * - Don't want 0OIl characters that look the same in some fonts and\n- *      could be used to create visually identical looking account numbers.\n- * - A string with non-alphanumeric characters is not as easily accepted as an account number.\n+ *      could be used to create visually identical looking data.\n+ * - A string with non-alphanumeric characters is not as easily accepted as input.\n  * - E-mail usually won't line-break if there's no punctuation to break at.\n- * - Double-clicking selects the whole number as one word if it's all alphanumeric.\n+ * - Double-clicking selects the whole string as one word if it's all alphanumeric.\n  */\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H"
      },
      {
        "sha": "01be2d6e5c940c817b6e27ceec24789a861b81c1",
        "filename": "src/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chain.h?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -74,7 +74,7 @@ enum BlockStatus {\n      */\n     BLOCK_VALID_TRANSACTIONS =    3,\n \n-    //! Outputs do not overspend inputs, no double spends, coinbase output ok, immature coinbase spends, BIP30.\n+    //! Outputs do not overspend inputs, no double spends, coinbase output ok, no immature coinbase spends, BIP30.\n     //! Implies all parents are also at least CHAIN.\n     BLOCK_VALID_CHAIN        =    4,\n "
      },
      {
        "sha": "a9dd4c257a430f8a3b045fd831714c85f937860f",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -112,7 +112,7 @@ class CMainParams : public CChainParams {\n         /** \n          * The message start string is designed to be unlikely to occur in normal data.\n          * The characters are rarely used upper ASCII, not valid as UTF-8, and produce\n-         * a large 4-byte int at any alignment.\n+         * a large 32-bit integer with any alignment.\n          */\n         pchMessageStart[0] = 0xf9;\n         pchMessageStart[1] = 0xbe;\n@@ -124,9 +124,10 @@ class CMainParams : public CChainParams {\n         nPruneAfterHeight = 100000;\n \n         /**\n-         * Build the genesis block. Note that the output of the genesis coinbase cannot\n-         * be spent as it did not originally exist in the database.\n-         * \n+         * Build the genesis block. Note that the output of its generation\n+         * transaction cannot be spent since it did not originally exist in the\n+         * database.\n+         *\n          * CBlock(hash=000000000019d6, ver=1, hashPrevBlock=00000000000000, hashMerkleRoot=4a5e1e, nTime=1231006505, nBits=1d00ffff, nNonce=2083236893, vtx=1)\n          *   CTransaction(hash=4a5e1e, ver=1, vin.size=1, vout.size=1, nLockTime=0)\n          *     CTxIn(COutPoint(000000, -1), coinbase 04ffff001d0104455468652054696d65732030332f4a616e2f32303039204368616e63656c6c6f72206f6e206272696e6b206f66207365636f6e64206261696c6f757420666f722062616e6b73)"
      },
      {
        "sha": "1b039009902133a615fa01c99af0119c861bcfcb",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -56,7 +56,7 @@ class CChainParams\n     bool MiningRequiresPeers() const { return fMiningRequiresPeers; }\n     /** Default value for -checkmempool and -checkblockindex argument */\n     bool DefaultConsistencyChecks() const { return fDefaultConsistencyChecks; }\n-    /** Make standard checks */\n+    /** Policy: Filter transactions that do not match well-defined patterns */\n     bool RequireStandard() const { return fRequireStandard; }\n     int64_t PruneAfterHeight() const { return nPruneAfterHeight; }\n     /** Make miner stop after a block is found. In RPC, don't return until nGenProcLimit blocks are generated */"
      },
      {
        "sha": "e3d42c2957b1aca5d2e4d4b961b665ed219a1f7f",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -15,9 +15,10 @@\n namespace Checkpoints {\n \n     /**\n-     * How many times we expect transactions after the last checkpoint to\n-     * be slower. This number is a compromise, as it can't be accurate for\n-     * every system. When reindexing from a fast disk with a slow CPU, it\n+     * How many times slower we expect checking transactions after the last\n+     * checkpoint to be (from checking signatures, which is skipped up to the\n+     * last checkpoint). This number is a compromise, as it can't be accurate\n+     * for every system. When reindexing from a fast disk with a slow CPU, it\n      * can be up to 20, while when downloading from a slow network with a\n      * fast multicore CPU, it won't be much higher than 1.\n      */"
      },
      {
        "sha": "07156a9af2bc24c278e9ec90c87a9a4c7bca9b5c",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -142,8 +142,9 @@ namespace {\n     uint32_t nBlockSequenceId = 1;\n \n     /**\n-     * Sources of received blocks, to be able to send them reject messages or ban\n-     * them, if processing happens afterwards. Protected by cs_main.\n+     * Sources of received blocks, saved to be able to send them reject\n+     * messages or ban them when processing happens afterwards. Protected by\n+     * cs_main.\n      */\n     map<uint256, NodeId> mapBlockSource;\n \n@@ -389,7 +390,7 @@ void FindNextBlocksToDownload(NodeId nodeid, unsigned int count, std::vector<CBl\n     }\n \n     // If the peer reorganized, our previous pindexLastCommonBlock may not be an ancestor\n-    // of their current tip anymore. Go back enough to fix that.\n+    // of its current tip anymore. Go back enough to fix that.\n     state->pindexLastCommonBlock = LastCommonAncestor(state->pindexLastCommonBlock, state->pindexBestKnownBlock);\n     if (state->pindexLastCommonBlock == state->pindexBestKnownBlock)\n         return;\n@@ -1721,7 +1722,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     // already refuses previously-known transaction ids entirely.\n     // This rule was originally applied to all blocks with a timestamp after March 15, 2012, 0:00 UTC.\n     // Now that the whole chain is irreversibly beyond that time it is applied to all blocks except the\n-    // two in the chain that violate it. This prevents exploiting the issue against nodes in their\n+    // two in the chain that violate it. This prevents exploiting the issue against nodes during their\n     // initial block download.\n     bool fEnforceBIP30 = (!pindex->phashBlock) || // Enforce on CreateNewBlock invocations which don't have a hash.\n                           !((pindex->nHeight==91842 && pindex->GetBlockHash() == uint256S(\"0x00000000000a4d0a398161ffc163c503763b1f4360639393e0e4c8e300e0caec\")) ||\n@@ -2315,7 +2316,7 @@ bool InvalidateBlock(CValidationState& state, CBlockIndex *pindex) {\n     }\n \n     // The resulting new best tip may not be in setBlockIndexCandidates anymore, so\n-    // add them again.\n+    // add it again.\n     BlockMap::iterator it = mapBlockIndex.begin();\n     while (it != mapBlockIndex.end()) {\n         if (it->second->IsValid(BLOCK_VALID_TRANSACTIONS) && it->second->nChainTx && !setBlockIndexCandidates.value_comp()(it->second, chainActive.Tip())) {\n@@ -3745,7 +3746,7 @@ void static ProcessGetData(CNode* pfrom)\n                             // no response\n                     }\n \n-                    // Trigger them to send a getblocks request for the next batch of inventory\n+                    // Trigger the peer node to send a getblocks request for the next batch of inventory\n                     if (inv.hash == pfrom->hashContinue)\n                     {\n                         // Bypass PushInventory, this must send even if redundant,\n@@ -4141,8 +4142,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n             pfrom->PushInventory(CInv(MSG_BLOCK, pindex->GetBlockHash()));\n             if (--nLimit <= 0)\n             {\n-                // When this block is requested, we'll send an inv that'll make them\n-                // getblocks the next batch of inventory.\n+                // When this block is requested, we'll send an inv that'll\n+                // trigger the peer to getblocks the next batch of inventory.\n                 LogPrint(\"net\", \"  getblocks stopping at limit %d %s\\n\", pindex->nHeight, pindex->GetBlockHash().ToString());\n                 pfrom->hashContinue = pindex->GetBlockHash();\n                 break;\n@@ -4379,9 +4380,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n \n     // This asymmetric behavior for inbound and outbound connections was introduced\n     // to prevent a fingerprinting attack: an attacker can send specific fake addresses\n-    // to users' AddrMan and later request them by sending getaddr messages. \n-    // Making users (which are behind NAT and can only make outgoing connections) ignore \n-    // getaddr message mitigates the attack.\n+    // to users' AddrMan and later request them by sending getaddr messages.\n+    // Making nodes which are behind NAT and can only make outgoing connections ignore\n+    // the getaddr message mitigates the attack.\n     else if ((strCommand == \"getaddr\") && (pfrom->fInbound))\n     {\n         pfrom->vAddrToSend.clear();\n@@ -4734,7 +4735,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n {\n     const Consensus::Params& consensusParams = Params().GetConsensus();\n     {\n-        // Don't send anything until we get their version message\n+        // Don't send anything until we get its version message\n         if (pto->nVersion == 0)\n             return true;\n "
      },
      {
        "sha": "7a33e3567b9dc2e54b2fc7dbb8571539f3acc442",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -517,7 +517,7 @@ void SendCoinsDialog::processSendCoinsReturn(const WalletModel::SendCoinsReturn\n         msgParams.first = tr(\"The total exceeds your balance when the %1 transaction fee is included.\").arg(msgArg);\n         break;\n     case WalletModel::DuplicateAddress:\n-        msgParams.first = tr(\"Duplicate address found: can only send to each address once per send operation.\");\n+        msgParams.first = tr(\"Duplicate address found: addresses should only be used once each.\");\n         break;\n     case WalletModel::TransactionCreationFailed:\n         msgParams.first = tr(\"Transaction creation failed!\");"
      },
      {
        "sha": "12a5c4aef907dec830d63185b67aaa6724d9589e",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05a89b2def301704df8f22f05a45ccf891c2b83/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05a89b2def301704df8f22f05a45ccf891c2b83/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=b05a89b2def301704df8f22f05a45ccf891c2b83",
        "patch": "@@ -912,8 +912,8 @@ static bool HTTPReq_JSONRPC(AcceptedConnection *conn,\n     {\n         LogPrintf(\"ThreadRPCServer incorrect password attempt from %s\\n\", conn->peer_address_to_string());\n         /* Deter brute-forcing\n-           If this results in a DoS the user really\n-           shouldn't have their RPC port exposed. */\n+           We don't support exposing the RPC port, so this shouldn't result\n+           in a DoS. */\n         MilliSleep(250);\n \n         conn->stream() << HTTPError(HTTP_UNAUTHORIZED, false) << std::flush;"
      }
    ]
  }
]