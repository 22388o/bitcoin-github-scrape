[
  {
    "sha": "021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjFmZWIzMTg3YjIwN2Q1MTE1NjFjMWYwZmZkN2Y5ZTVlMGM5YzFk",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-09-17T21:23:45Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-11-07T11:35:20Z"
      },
      "message": "refactor: Drop redudant CWallet::GetDBHandle",
      "tree": {
        "sha": "3d05294a61e94c6134871d734381671b7d475d20",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d05294a61e94c6134871d734381671b7d475d20"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7e373294a5ae819099c39d9d03d1f5a311d63cfc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7e373294a5ae819099c39d9d03d1f5a311d63cfc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7e373294a5ae819099c39d9d03d1f5a311d63cfc"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 1,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6ad75d3d69b68a91a18eb212b66a61e1ae01e8d2",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
        "patch": "@@ -732,13 +732,6 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     mutable RecursiveMutex cs_wallet;\n \n-    /** Get database handle used by this wallet. Ideally this function would\n-     * not be necessary.\n-     */\n-    WalletDatabase& GetDBHandle()\n-    {\n-        return *database;\n-    }\n     WalletDatabase& GetDatabase() const override { return *database; }\n \n     /**"
      },
      {
        "sha": "9ed9818479368d547506215a296836cfc0cfa99a",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
        "patch": "@@ -943,7 +943,7 @@ void MaybeCompactWalletDB()\n     }\n \n     for (const std::shared_ptr<CWallet>& pwallet : GetWallets()) {\n-        WalletDatabase& dbh = pwallet->GetDBHandle();\n+        WalletDatabase& dbh = pwallet->GetDatabase();\n \n         unsigned int nUpdateCounter = dbh.nUpdateCounter;\n "
      }
    ]
  },
  {
    "sha": "9b74461fa293453a9eb0b1717b30b3f7fa778d91",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5Yjc0NDYxZmEyOTM0NTNhOWViMGIxNzE3YjMwYjNmN2ZhNzc4ZDkx",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-09-19T23:25:45Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2020-11-07T11:40:27Z"
      },
      "message": "refactor: Assert before dereference in CWallet::GetDatabase",
      "tree": {
        "sha": "2ae37592647fffdcd69303dc8c1f3247fd3054a8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2ae37592647fffdcd69303dc8c1f3247fd3054a8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b74461fa293453a9eb0b1717b30b3f7fa778d91",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b74461fa293453a9eb0b1717b30b3f7fa778d91",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b74461fa293453a9eb0b1717b30b3f7fa778d91",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b74461fa293453a9eb0b1717b30b3f7fa778d91/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/021feb3187b207d511561c1f0ffd7f9e5e0c9c1d"
      }
    ],
    "stats": {
      "total": 66,
      "additions": 35,
      "deletions": 31
    },
    "files": [
      {
        "sha": "8609520c1b632c1f6fc206898484e944ea615bd8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b74461fa293453a9eb0b1717b30b3f7fa778d91/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b74461fa293453a9eb0b1717b30b3f7fa778d91/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=9b74461fa293453a9eb0b1717b30b3f7fa778d91",
        "patch": "@@ -419,7 +419,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                     return false;\n                 if (!crypter.Encrypt(_vMasterKey, pMasterKey.second.vchCryptedKey))\n                     return false;\n-                WalletBatch(*database).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n+                WalletBatch(GetDatabase()).WriteMasterKey(pMasterKey.first, pMasterKey.second);\n                 if (fWasLocked)\n                     Lock();\n                 return true;\n@@ -432,7 +432,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n \n void CWallet::chainStateFlushed(const CBlockLocator& loc)\n {\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n     batch.WriteBestBlock(loc);\n }\n \n@@ -452,7 +452,7 @@ void CWallet::SetMinVersion(enum WalletFeature nVersion, WalletBatch* batch_in,\n         nWalletMaxVersion = nVersion;\n \n     {\n-        WalletBatch* batch = batch_in ? batch_in : new WalletBatch(*database);\n+        WalletBatch* batch = batch_in ? batch_in : new WalletBatch(GetDatabase());\n         if (nWalletVersion > 40000)\n             batch->WriteMinVersion(nWalletVersion);\n         if (!batch_in)\n@@ -504,12 +504,12 @@ bool CWallet::HasWalletSpend(const uint256& txid) const\n \n void CWallet::Flush()\n {\n-    database->Flush();\n+    GetDatabase().Flush();\n }\n \n void CWallet::Close()\n {\n-    database->Close();\n+    GetDatabase().Close();\n }\n \n void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)\n@@ -635,7 +635,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     {\n         LOCK(cs_wallet);\n         mapMasterKeys[++nMasterKeyMaxID] = kMasterKey;\n-        WalletBatch* encrypted_batch = new WalletBatch(*database);\n+        WalletBatch* encrypted_batch = new WalletBatch(GetDatabase());\n         if (!encrypted_batch->TxnBegin()) {\n             delete encrypted_batch;\n             encrypted_batch = nullptr;\n@@ -687,12 +687,12 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n \n         // Need to completely rewrite the wallet file; if we don't, bdb might keep\n         // bits of the unencrypted private key in slack space in the database file.\n-        database->Rewrite();\n+        GetDatabase().Rewrite();\n \n         // BDB seems to have a bad habit of writing old data into\n         // slack space in .dat files; that is bad if the old data is\n         // unencrypted private keys. So:\n-        database->ReloadDbEnv();\n+        GetDatabase().ReloadDbEnv();\n \n     }\n     NotifyStatusChanged(this);\n@@ -703,7 +703,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n DBErrors CWallet::ReorderTransactions()\n {\n     LOCK(cs_wallet);\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n \n     // Old wallets didn't have any defined order for transactions\n     // Probably a bad idea to change the output of this\n@@ -764,7 +764,7 @@ int64_t CWallet::IncOrderPosNext(WalletBatch* batch)\n     if (batch) {\n         batch->WriteOrderPosNext(nOrderPosNext);\n     } else {\n-        WalletBatch(*database).WriteOrderPosNext(nOrderPosNext);\n+        WalletBatch(GetDatabase()).WriteOrderPosNext(nOrderPosNext);\n     }\n     return nRet;\n }\n@@ -794,7 +794,7 @@ bool CWallet::MarkReplaced(const uint256& originalHash, const uint256& newHash)\n \n     wtx.mapValue[\"replaced_by_txid\"] = newHash.ToString();\n \n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n \n     bool success = true;\n     if (!batch.WriteTx(wtx)) {\n@@ -866,7 +866,7 @@ CWalletTx* CWallet::AddToWallet(CTransactionRef tx, const CWalletTx::Confirmatio\n {\n     LOCK(cs_wallet);\n \n-    WalletBatch batch(*database, fFlushOnClose);\n+    WalletBatch batch(GetDatabase(), fFlushOnClose);\n \n     uint256 hash = tx->GetHash();\n \n@@ -1065,7 +1065,7 @@ bool CWallet::AbandonTransaction(const uint256& hashTx)\n {\n     LOCK(cs_wallet);\n \n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -1128,7 +1128,7 @@ void CWallet::MarkConflicted(const uint256& hashBlock, int conflicting_height, c\n         return;\n \n     // Do not flush the wallet here for performance reasons\n-    WalletBatch batch(*database, false);\n+    WalletBatch batch(GetDatabase(), false);\n \n     std::set<uint256> todo;\n     std::set<uint256> done;\n@@ -1466,13 +1466,13 @@ void CWallet::SetWalletFlag(uint64_t flags)\n {\n     LOCK(cs_wallet);\n     m_wallet_flags |= flags;\n-    if (!WalletBatch(*database).WriteWalletFlags(m_wallet_flags))\n+    if (!WalletBatch(GetDatabase()).WriteWalletFlags(m_wallet_flags))\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n }\n \n void CWallet::UnsetWalletFlag(uint64_t flag)\n {\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n     UnsetWalletFlagWithDB(batch, flag);\n }\n \n@@ -1511,7 +1511,7 @@ bool CWallet::AddWalletFlags(uint64_t flags)\n     LOCK(cs_wallet);\n     // We should never be writing unknown non-tolerable wallet flags\n     assert(((flags & KNOWN_WALLET_FLAGS) >> 32) == (flags >> 32));\n-    if (!WalletBatch(*database).WriteWalletFlags(flags)) {\n+    if (!WalletBatch(GetDatabase()).WriteWalletFlags(flags)) {\n         throw std::runtime_error(std::string(__func__) + \": writing wallet flags failed\");\n     }\n \n@@ -1602,7 +1602,7 @@ bool CWallet::ImportScriptPubKeys(const std::string& label, const std::set<CScri\n         return false;\n     }\n     if (apply_label) {\n-        WalletBatch batch(*database);\n+        WalletBatch batch(GetDatabase());\n         for (const CScript& script : script_pub_keys) {\n             CTxDestination dest;\n             ExtractDestination(script, dest);\n@@ -3193,10 +3193,10 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n     LOCK(cs_wallet);\n \n     fFirstRunRet = false;\n-    DBErrors nLoadWalletRet = WalletBatch(*database).LoadWallet(this);\n+    DBErrors nLoadWalletRet = WalletBatch(GetDatabase()).LoadWallet(this);\n     if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n     {\n-        if (database->Rewrite(\"\\x04pool\"))\n+        if (GetDatabase().Rewrite(\"\\x04pool\"))\n         {\n             for (const auto& spk_man_pair : m_spk_managers) {\n                 spk_man_pair.second->RewriteDB();\n@@ -3220,7 +3220,7 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut)\n {\n     AssertLockHeld(cs_wallet);\n-    DBErrors nZapSelectTxRet = WalletBatch(*database).ZapSelectTx(vHashIn, vHashOut);\n+    DBErrors nZapSelectTxRet = WalletBatch(GetDatabase()).ZapSelectTx(vHashIn, vHashOut);\n     for (const uint256& hash : vHashOut) {\n         const auto& it = mapWallet.find(hash);\n         wtxOrdered.erase(it->second.m_it_wtxOrdered);\n@@ -3232,7 +3232,7 @@ DBErrors CWallet::ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256\n \n     if (nZapSelectTxRet == DBErrors::NEED_REWRITE)\n     {\n-        if (database->Rewrite(\"\\x04pool\"))\n+        if (GetDatabase().Rewrite(\"\\x04pool\"))\n         {\n             for (const auto& spk_man_pair : m_spk_managers) {\n                 spk_man_pair.second->RewriteDB();\n@@ -3270,14 +3270,14 @@ bool CWallet::SetAddressBookWithDB(WalletBatch& batch, const CTxDestination& add\n \n bool CWallet::SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& strPurpose)\n {\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n     return SetAddressBookWithDB(batch, address, strName, strPurpose);\n }\n \n bool CWallet::DelAddressBook(const CTxDestination& address)\n {\n     bool is_mine;\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n     {\n         LOCK(cs_wallet);\n         // If we want to delete receiving addresses, we need to take care that DestData \"used\" (and possibly newer DestData) gets preserved (and the \"deleted\" address transformed into a change entry instead of actually being deleted)\n@@ -4024,7 +4024,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n     int rescan_height = 0;\n     if (!gArgs.GetBoolArg(\"-rescan\", false))\n     {\n-        WalletBatch batch(*walletInstance->database);\n+        WalletBatch batch(walletInstance->GetDatabase());\n         CBlockLocator locator;\n         if (batch.ReadBestBlock(locator)) {\n             if (const Optional<int> fork_height = chain.findLocatorFork(locator)) {\n@@ -4087,7 +4087,7 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain& chain, const std::st\n             }\n         }\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n-        walletInstance->database->IncrementUpdateCounter();\n+        walletInstance->GetDatabase().IncrementUpdateCounter();\n     }\n \n     {\n@@ -4168,7 +4168,7 @@ void CWallet::postInitProcess()\n \n bool CWallet::BackupWallet(const std::string& strDest) const\n {\n-    return database->Backup(strDest);\n+    return GetDatabase().Backup(strDest);\n }\n \n CKeyPool::CKeyPool()\n@@ -4471,7 +4471,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n void CWallet::AddActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal)\n {\n-    WalletBatch batch(*database);\n+    WalletBatch batch(GetDatabase());\n     if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n         throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n     }"
      },
      {
        "sha": "5e23622e2379026a94188e7184fe923a2db401f6",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b74461fa293453a9eb0b1717b30b3f7fa778d91/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b74461fa293453a9eb0b1717b30b3f7fa778d91/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=9b74461fa293453a9eb0b1717b30b3f7fa778d91",
        "patch": "@@ -698,7 +698,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     std::string m_name;\n \n     /** Internal database handle. */\n-    std::unique_ptr<WalletDatabase> database;\n+    std::unique_ptr<WalletDatabase> const m_database;\n \n     /**\n      * The following is used to keep track of how far behind the wallet is\n@@ -732,7 +732,11 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      */\n     mutable RecursiveMutex cs_wallet;\n \n-    WalletDatabase& GetDatabase() const override { return *database; }\n+    WalletDatabase& GetDatabase() const override\n+    {\n+        assert(static_cast<bool>(m_database));\n+        return *m_database;\n+    }\n \n     /**\n      * Select a set of coins such that nValueRet >= nTargetValue and at least\n@@ -754,7 +758,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     CWallet(interfaces::Chain* chain, const std::string& name, std::unique_ptr<WalletDatabase> database)\n         : m_chain(chain),\n           m_name(name),\n-          database(std::move(database))\n+          m_database(std::move(database))\n     {\n     }\n "
      }
    ]
  }
]