Diapolo,2014-12-12T09:08:35Z,"Waiting for Travis to pass, but needs some review then.\n @gavinandresen @laanwj Mind looking at this?\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66747915,66747915,
Diapolo,2014-12-12T09:41:05Z,"This was the problem:\n\n<pre>\n********* Start testing of PaymentServerTests *********\nConfig: Using QTest library 4.6.4, Qt 4.6.4\nPASS : PaymentServerTests::initTestCase()\nQDEBUG : PaymentServerTests::paymentServerTests() PaymentServer::initNetManager : No active proxy server found.\nQDEBUG : PaymentServerTests::paymentServerTests() PaymentServer::processPaymentRequest : Secure payment reques",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66751100,66751100,
laanwj,2014-12-12T12:01:30Z,"Isn't this the same discussion we had before? Certificate problems should be logged, but not lead to rejection of the payment request or scary messages shown to the user. It just means that the payment request is unvalidated.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66764407,66764407,
Diapolo,2014-12-12T12:31:37Z,@laanwj You are not serious with your above comment? Current master currently doesn't even explicitly care whats going on if we have cert failures... I'm not sure but perhaps this could potentially be dangerous even. I'm doing my best to improve our code and it feel like this isn't wanted anymore...\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66766945,66766945,
laanwj,2014-12-12T12:34:27Z,"@Diapolo It is dangerous if it is possible to make an invalid signature pass as authenticated merchant. Does that happen?\nIf not it makes no sense. An attacker can just as well replace the payment request with an unsigned one as mess up the signature, so from a security perspective there is no reason to treat signature errors differently from unsigned payment requests.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66767204,66767204,
Diapolo,2014-12-12T12:39:56Z,"IMHO the current behaviour can make invalid secure payment (invalid because of cert errors and authenticatedMerchant not set) requests to be treated like valid insecure payment requests, which is bad as they should be rejected directly!\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66767689,66767689,
Diapolo,2014-12-12T12:42:38Z,From BIP70: `The recipient must verify the certificate chain according to [RFC5280] and reject the PaymentRequest if any validation failure occurs.`\n\nhttps://github.com/bitcoin/bips/blob/master/bip-0070.mediawiki#Certificates\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66767900,66767900,
laanwj,2014-12-12T12:46:14Z,"As I said: Unauthenticated is unauthenticated, it doesn't matter from a security viewpoint if that's caused by an invalid signature (""cert errors"") or not having a signature in the first place (""unsecure""). Both attacks, so stripping or corrupting the signature, require the same effort to pull off.\n\nIf getMerchant returns false in the case of errors, that's enough to signal that authentication w",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66768246,66768246,
Diapolo,2014-12-12T12:47:09Z,"@laanwj It's not correct to rely on false to signal errors, as a valid insecure payment request as per BIP70 would also return false with current master in `getMerchant`.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66768329,66768329,
Diapolo,2014-12-12T12:48:35Z,"Our own protection here currently is a yellow background in the GUI and a tooltip, which sais this is an unverified payment request. Don't you think that could trick our users into a bad situation?\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66768440,66768440,
mikehearn,2014-12-12T12:50:26Z,"Yeah, we should be ignoring cert errors and treating the payment request as unsigned. Sounds like BIP70 doesn't say that explicitly, but IMHO it should. I should spend some time refreshing it and working on pp related stuff.\n\nThe rationale is pretty simple - if we want to introduce a new set of root CAs in future (e.g. that have different requirements from browser root store programs), then we d",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66768618,66768618,
laanwj,2014-12-12T12:52:07Z,"@diapolo As I'm now trying to communicate for the third time: **those two cases are equivalent**. No, it cannot trick the user into anything. An attacker can just as well present an unverified payment request as one with an invalid signature. Showing them differently does not add any extra security. It's security theater.\nA yellow payment request (which will not have an authenticated merchant) al",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66768771,66768771,
Diapolo,2014-12-12T12:58:50Z,Invalid secure == valid insecure seems not right and is against current spec. If an attacker would be able to manipulate a payment request from a merchant to pay him instead of the merchant and the only precaution is that we treat that invalid secure payment request as a valid insecure one is good? If this is consensus I'm out and out of motivation also... sadly.\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66769384,66769384,
laanwj,2014-12-12T13:00:48Z,"**An attacker can manipulate the signed payment request into a valid insecure one that pays him** just as easily. It would make more sense, even, as a user wouldn't expect that, especially if certificate failures were flagged differently.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66769548,66769548,
Diapolo,2014-12-12T13:06:07Z,"This needs at least a clarification in the BIP, also in terms of valid unverified payment requests, which have just set pki_type == ""none"", which is not the case for ones that should have been valid verified ones (but are treated like unverified ones).\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66770028,66770028,
mikehearn,2014-12-12T13:53:07Z,"> If an attacker would be able to manipulate a payment request from a merchant to pay him instead of the merchant and the only precaution is that we treat that invalid secure payment request as a valid insecure one is good?\n\nYes, ultimately the _only_ way we have to ensure users are secure against MITM attacks is to train users to expect signed requests. That's it. It's like SSL in that respect ",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66774732,66774732,
Diapolo,2014-12-12T13:59:07Z,"If we show a warning and the users explicitly chooses to accept that, he can continue by using the invalid verified request as valid unverified request, what about that idea? That would at least be like with browsers and invalid SSL certs or SSL connection problems.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66775340,66775340,
gavinandresen,2014-12-12T13:59:13Z,"Error-handling policy does NOT belong in that BIP; e.g. certificate errors will be handled differently in GUI apps than machine-to-machine scenarios.\n\n> On Dec 12, 2014, at 8:06 AM, P. Kaufmann notifications@github.com wrote:\n> \n> This needs at least a clarification in the BIP, also in terms of valid unverified payment requests, which have just set pki_type == ""none"", which is not the case for",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66775352,66775352,
mikehearn,2014-12-12T14:07:59Z,"BIP should not specify a policy but I think UI recommendations are OK, as otherwise we'll keep having these discussions with every wallet dev.\n\n@Diapolo the way browsers do it is a source of significant discontent in parts of the security community, and generally they try and stop users clicking through or forbid it entirely anyway. The problem with what browsers do is it does make revoking CAs ",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66776368,66776368,
Diapolo,2014-12-12T14:21:17Z,"Fine, so to not make my work obsolete alltogether, what about keeping the code and the added tests but just don't require or add new UX or user interactions needs!? That way it's possible to extend in the future, have more in-depth test cases and speaking return values.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66777890,66777890,
Diapolo,2014-12-12T14:46:49Z,Added a commit to achieve some consensus with this :).\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-66781092,66781092,
Diapolo,2014-12-16T13:18:20Z,@laanwj Is this mergeable in the state after my second commit?\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-67157931,67157931,
Diapolo,2014-12-20T13:32:29Z,Rebased to be a single commit and updated commit-msg.\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-67735909,67735909,
Diapolo,2015-01-13T11:44:53Z,@zander We recently seem to use the term `authenticated payment request` and therefore this change was included by me. IMHO known is not strong or correct enough.\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-69732708,69732708,
Diapolo,2015-03-24T18:15:07Z,@laanwj What about this here?\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-85628604,85628604,
jgarzik,2015-07-23T18:48:04Z,"Current version seems reasonable and appears to account for @laanwj et. al. feedback (correct me if I'm wrong).\n\nThe ""use an enum"" feedback has not yet been addressed.\n",https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-124208427,124208427,
jgarzik,2015-09-15T16:16:21Z,ut ACK - all feedback appears to have been addressed\n,https://github.com/bitcoin/bitcoin/pull/5466#issuecomment-140448224,140448224,
laanwj,2014-12-12T12:04:36Z,Would be clearer as a plain enumeration instead of a bit field?\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r21740580,21740580,src/qt/paymentrequestplus.h
laanwj,2014-12-12T12:39:07Z,Please use authenticated/unauthenticated instead of secure/insecure. \nIf we treat certificate errors as 'unauthenticated' those two statuses are enough.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r21741756,21741756,src/qt/paymentrequestplus.h
Diapolo,2014-12-12T14:24:04Z,"Will do, thanks.\n",https://github.com/bitcoin/bitcoin/pull/5466#discussion_r21746323,21746323,src/qt/paymentrequestplus.h
laanwj,2015-01-08T12:13:41Z,Shouldn't this be `&` instead of `|` ? This will always pass.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r22648402,22648402,src/qt/test/paymentservertests.cpp
Diapolo,2015-01-08T14:39:25Z,"I had the impression because of `PR_ERROR = (PR_NOTINITIALIZED | PR_PKIERROR | PR_CERTERROR)` this is correct, no?\n",https://github.com/bitcoin/bitcoin/pull/5466#discussion_r22654406,22654406,src/qt/test/paymentservertests.cpp
laanwj,2015-01-08T14:45:58Z,QVERIFY(x) where x is not zero will pass.\nx = result | PR_PERROR is always non-zero. An OR operation with a non-zero value always results in a non-zero value.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r22654828,22654828,src/qt/test/paymentservertests.cpp
Diapolo,2015-01-09T14:04:31Z,Changed to be a `&`.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r22716917,22716917,src/qt/test/paymentservertests.cpp
jonasschnelli,2015-07-14T19:36:54Z,A bitfield would only make sense if flags can be combined. But IMO things like `PR_UNAUTHENTICATED`together with `PR_AUTHENTICATED` does not make sense. Agree with @laanwj to use plain enumeration in this case.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r34609662,34609662,src/qt/paymentrequestplus.h
Diapolo,2015-07-16T09:26:34Z,"@jonasschnelli Just to be sure, plain enum means I just don't init the values?\n",https://github.com/bitcoin/bitcoin/pull/5466#discussion_r34769996,34769996,src/qt/paymentrequestplus.h
jonasschnelli,2015-07-23T18:50:58Z,The `GetMerchantStatus` is a bit mask where you can combine things.\nIt's only a nit. But IMO combining a returned status in a bit mask is a bit wired.\n,https://github.com/bitcoin/bitcoin/pull/5466#discussion_r35357432,35357432,src/qt/paymentrequestplus.h
Diapolo,2015-07-24T06:06:59Z,"Let me ask again, how do I make this so it's accepted. Is it just removing the init values in the enum? Hand me some code example ;).\n",https://github.com/bitcoin/bitcoin/pull/5466#discussion_r35397566,35397566,src/qt/paymentrequestplus.h
