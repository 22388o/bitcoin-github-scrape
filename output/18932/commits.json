[
  {
    "sha": "36d0d660d35ba30c650606d3279b64b19e1369d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNmQwZDY2MGQzNWJhMzBjNjUwNjA2ZDMyNzliNjRiMTllMTM2OWQy",
    "commit": {
      "author": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T17:42:40Z"
      },
      "committer": {
        "name": "Harris",
        "email": "brakmic@gmail.com",
        "date": "2020-05-10T17:42:40Z"
      },
      "message": "test: move sync_* implementations to framework member functions\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>",
      "tree": {
        "sha": "7ae5f824bcb0d6d6ef435ad0fa1fd58f096f5b40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ae5f824bcb0d6d6ef435ad0fa1fd58f096f5b40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36d0d660d35ba30c650606d3279b64b19e1369d2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEED2bWxOeRx//n2QOeJiaFvHjtEfsFAl64PRAACgkQJiaFvHjt\nEftCYwf+NUB7OErqFbO2oEthjPbf4SEloUQ4wPYyUJf84/JiKd/uZPo94d2CFgJP\nYCSb6wQrLJ5iySPWbKefE5ETt3Zaczt2NiD2p5410RtaMmxvM3tchI9XaYzFm5Bh\nETu3Ofli32/T1rX+9E6psFCqw33/m105zSwb1JdNCudY+KUg6zQThN2ZKni6tatI\nXQZlWD9I9bgPDTSve40P7RENcdrMkQr/suKLDxqZhkajzzEFLGGV6dIYcFxH3i6G\nn2aqmnFDynPuFYJBzVtdjYN/8Ma/+i9F55Nb6PoHwWcgn/QgmQ5kR0U4RTecbr+L\n87D4S4pawUjZFAIwWz3zwo8VRnQZLA==\n=hDp3\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ae5f824bcb0d6d6ef435ad0fa1fd58f096f5b40\nparent 88d8b4e182bfc75e8496f7046af7aab93307b9d0\nauthor Harris <brakmic@gmail.com> 1589132560 +0200\ncommitter Harris <brakmic@gmail.com> 1589132560 +0200\n\ntest: move sync_* implementations to framework member functions\n\nCo-authored-by: MarcoFalke <falke.marco@gmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d0d660d35ba30c650606d3279b64b19e1369d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36d0d660d35ba30c650606d3279b64b19e1369d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36d0d660d35ba30c650606d3279b64b19e1369d2/comments",
    "author": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brakmic",
      "id": 56779,
      "node_id": "MDQ6VXNlcjU2Nzc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/56779?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brakmic",
      "html_url": "https://github.com/brakmic",
      "followers_url": "https://api.github.com/users/brakmic/followers",
      "following_url": "https://api.github.com/users/brakmic/following{/other_user}",
      "gists_url": "https://api.github.com/users/brakmic/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brakmic/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brakmic/subscriptions",
      "organizations_url": "https://api.github.com/users/brakmic/orgs",
      "repos_url": "https://api.github.com/users/brakmic/repos",
      "events_url": "https://api.github.com/users/brakmic/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brakmic/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 47,
      "deletions": 58
    },
    "files": [
      {
        "sha": "ee67ce7961861d23f3ca7faf27e01ec332815394",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=36d0d660d35ba30c650606d3279b64b19e1369d2",
        "patch": "@@ -28,8 +28,6 @@\n from test_framework.util import (\n     adjust_bitcoin_conf_for_pre_17,\n     assert_equal,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n \n@@ -68,7 +66,7 @@ def setup_nodes(self):\n     def run_test(self):\n         self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n \n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n \n         # Sanity check the test framework:\n         res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n@@ -93,17 +91,17 @@ def run_test(self):\n         # Create a confirmed transaction, receiving coins\n         address = wallet.getnewaddress()\n         self.nodes[0].sendtoaddress(address, 10)\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         # Create a conflicting transaction using RBF\n         return_address = self.nodes[0].getnewaddress()\n         tx1_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx2_id = self.nodes[1].bumpfee(tx1_id)[\"txid\"]\n         # Confirm the transaction\n-        sync_mempools(self.nodes)\n+        self.sync_mempools()\n         self.nodes[0].generate(1)\n-        sync_blocks(self.nodes)\n+        self.sync_blocks()\n         # Create another conflicting transaction using RBF\n         tx3_id = self.nodes[1].sendtoaddress(return_address, 1)\n         tx4_id = self.nodes[1].bumpfee(tx3_id)[\"txid\"]"
      },
      {
        "sha": "67705a40d990d936129460dc8409870cc40e5c8e",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 42,
        "deletions": 6,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=36d0d660d35ba30c650606d3279b64b19e1369d2",
        "patch": "@@ -31,8 +31,6 @@\n     disconnect_nodes,\n     get_datadir_path,\n     initialize_datadir,\n-    sync_blocks,\n-    sync_mempools,\n )\n \n \n@@ -519,11 +517,49 @@ def join_network(self):\n         connect_nodes(self.nodes[1], 2)\n         self.sync_all()\n \n-    def sync_blocks(self, nodes=None, **kwargs):\n-        sync_blocks(nodes or self.nodes, **kwargs)\n+    def sync_blocks(self, nodes=None, *,  wait=1, timeout=60):\n+        rpc_connections = nodes or self.nodes\n+        \"\"\"\n+        Wait until everybody has the same tip.\n \n-    def sync_mempools(self, nodes=None, **kwargs):\n-        sync_mempools(nodes or self.nodes, **kwargs)\n+        sync_blocks needs to be called with an rpc_connections set that has least\n+        one node already synced to the latest, stable tip, otherwise there's a\n+        chance it might return before all nodes are stably synced.\n+        \"\"\"\n+        stop_time = time.time() + (timeout * self.options.factor)\n+        while time.time() <= stop_time:\n+            best_hash = [x.getbestblockhash() for x in rpc_connections]\n+            if best_hash.count(best_hash[0]) == len(rpc_connections):\n+                return\n+            # Check that each peer has at least one connection\n+            assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n+            time.sleep(wait)\n+        raise AssertionError(\"Block sync timed out after {}s:{}\".format(\n+            timeout,\n+            \"\".join(\"\\n  {!r}\".format(b) for b in best_hash),\n+        ))\n+\n+    def sync_mempools(self, nodes=None, *,  wait=1, timeout=60, flush_scheduler=True):\n+        \"\"\"\n+        Wait until everybody has the same transactions in their memory\n+        pools\n+        \"\"\"\n+        rpc_connections = nodes or self.nodes\n+        stop_time = time.time() + (timeout * self.options.factor)\n+        while time.time() <= stop_time:\n+            pool = [set(r.getrawmempool()) for r in rpc_connections]\n+            if pool.count(pool[0]) == len(rpc_connections):\n+                if flush_scheduler:\n+                    for r in rpc_connections:\n+                        r.syncwithvalidationinterfacequeue()\n+                return\n+            # Check that each peer has at least one connection\n+            assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n+            time.sleep(wait)\n+        raise AssertionError(\"Mempool sync timed out after {}s:{}\".format(\n+            timeout,\n+            \"\".join(\"\\n  {!r}\".format(m) for m in pool),\n+        ))\n \n     def sync_all(self, nodes=None, **kwargs):\n         self.sync_blocks(nodes, **kwargs)"
      },
      {
        "sha": "d3dfb954582263321a6e98e7444730b683b66cfa",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 45,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36d0d660d35ba30c650606d3279b64b19e1369d2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=36d0d660d35ba30c650606d3279b64b19e1369d2",
        "patch": "@@ -405,51 +405,6 @@ def connect_nodes(from_connection, node_num):\n     wait_until(lambda: all(peer['version'] != 0 for peer in from_connection.getpeerinfo()))\n     wait_until(lambda: all(peer['bytesrecv_per_msg'].pop('verack', 0) == 24 for peer in from_connection.getpeerinfo()))\n \n-\n-def sync_blocks(rpc_connections, *, wait=1, timeout=60):\n-    \"\"\"\n-    Wait until everybody has the same tip.\n-\n-    sync_blocks needs to be called with an rpc_connections set that has least\n-    one node already synced to the latest, stable tip, otherwise there's a\n-    chance it might return before all nodes are stably synced.\n-    \"\"\"\n-    stop_time = time.time() + timeout\n-    while time.time() <= stop_time:\n-        best_hash = [x.getbestblockhash() for x in rpc_connections]\n-        if best_hash.count(best_hash[0]) == len(rpc_connections):\n-            return\n-        # Check that each peer has at least one connection\n-        assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n-        time.sleep(wait)\n-    raise AssertionError(\"Block sync timed out after {}s:{}\".format(\n-        timeout,\n-        \"\".join(\"\\n  {!r}\".format(b) for b in best_hash),\n-    ))\n-\n-\n-def sync_mempools(rpc_connections, *, wait=1, timeout=60, flush_scheduler=True):\n-    \"\"\"\n-    Wait until everybody has the same transactions in their memory\n-    pools\n-    \"\"\"\n-    stop_time = time.time() + timeout\n-    while time.time() <= stop_time:\n-        pool = [set(r.getrawmempool()) for r in rpc_connections]\n-        if pool.count(pool[0]) == len(rpc_connections):\n-            if flush_scheduler:\n-                for r in rpc_connections:\n-                    r.syncwithvalidationinterfacequeue()\n-            return\n-        # Check that each peer has at least one connection\n-        assert (all([len(x.getpeerinfo()) for x in rpc_connections]))\n-        time.sleep(wait)\n-    raise AssertionError(\"Mempool sync timed out after {}s:{}\".format(\n-        timeout,\n-        \"\".join(\"\\n  {!r}\".format(m) for m in pool),\n-    ))\n-\n-\n # Transaction/Block functions\n #############################\n "
      }
    ]
  }
]