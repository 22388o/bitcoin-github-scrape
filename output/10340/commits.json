[
  {
    "sha": "31b7171cbfef7d66957a7721aff524778dbdf5b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWI3MTcxY2JmZWY3ZDY2OTU3YTc3MjFhZmY1MjQ3NzhkYmRmNWIw",
    "commit": {
      "author": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-04T20:43:36Z"
      },
      "committer": {
        "name": "Matt Corallo",
        "email": "git@bluematt.me",
        "date": "2017-05-04T20:45:07Z"
      },
      "message": "Add harmless missing cs_wallet lock in qt CoinControlDialog\n\nThis is only barely a missing lock - to tickle it you have to\ndelete from mapWallet while populating your coin control dialog.\nThe only way (AFAIK) to do so is to call removeprunedfunds.",
      "tree": {
        "sha": "9fec7ac0bc9278bf97d1c0afc634846ff2a098cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fec7ac0bc9278bf97d1c0afc634846ff2a098cc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31b7171cbfef7d66957a7721aff524778dbdf5b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b7171cbfef7d66957a7721aff524778dbdf5b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31b7171cbfef7d66957a7721aff524778dbdf5b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31b7171cbfef7d66957a7721aff524778dbdf5b0/comments",
    "author": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "TheBlueMatt",
      "id": 649246,
      "node_id": "MDQ6VXNlcjY0OTI0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/649246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/TheBlueMatt",
      "html_url": "https://github.com/TheBlueMatt",
      "followers_url": "https://api.github.com/users/TheBlueMatt/followers",
      "following_url": "https://api.github.com/users/TheBlueMatt/following{/other_user}",
      "gists_url": "https://api.github.com/users/TheBlueMatt/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/TheBlueMatt/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/TheBlueMatt/subscriptions",
      "organizations_url": "https://api.github.com/users/TheBlueMatt/orgs",
      "repos_url": "https://api.github.com/users/TheBlueMatt/repos",
      "events_url": "https://api.github.com/users/TheBlueMatt/events{/privacy}",
      "received_events_url": "https://api.github.com/users/TheBlueMatt/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35da2aeed7d4000dde93957c3b6e048ab83c4f2b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35da2aeed7d4000dde93957c3b6e048ab83c4f2b"
      }
    ],
    "stats": {
      "total": 263,
      "additions": 137,
      "deletions": 126
    },
    "files": [
      {
        "sha": "50849ab977bd0dc18be2d5668dbae92754b56a5d",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 132,
        "deletions": 123,
        "changes": 255,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=31b7171cbfef7d66957a7721aff524778dbdf5b0",
        "patch": "@@ -449,48 +449,52 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n-    std::vector<COutput>   vOutputs;\n-    coinControl->ListSelected(vCoinControl);\n-    model->getOutputs(vCoinControl, vOutputs);\n-\n-    BOOST_FOREACH(const COutput& out, vOutputs) {\n-        // unselect already spent, very unlikely scenario, this could happen\n-        // when selected are spent elsewhere, like rpc or another computer\n-        uint256 txhash = out.tx->GetHash();\n-        COutPoint outpt(txhash, out.i);\n-        if (model->isSpent(outpt))\n-        {\n-            coinControl->UnSelect(outpt);\n-            continue;\n-        }\n \n-        // Quantity\n-        nQuantity++;\n+    {\n+        LOCK2(cs_main, model->wallet->cs_wallet);\n+        std::vector<COutput>   vOutputs;\n+        coinControl->ListSelected(vCoinControl);\n+        model->getOutputs(vCoinControl, vOutputs);\n+\n+        BOOST_FOREACH(const COutput& out, vOutputs) {\n+            // unselect already spent, very unlikely scenario, this could happen\n+            // when selected are spent elsewhere, like rpc or another computer\n+            uint256 txhash = out.tx->GetHash();\n+            COutPoint outpt(txhash, out.i);\n+            if (model->isSpent(outpt))\n+            {\n+                coinControl->UnSelect(outpt);\n+                continue;\n+            }\n+\n+            // Quantity\n+            nQuantity++;\n \n-        // Amount\n-        nAmount += out.tx->tx->vout[out.i].nValue;\n+            // Amount\n+            nAmount += out.tx->tx->vout[out.i].nValue;\n \n-        // Bytes\n-        CTxDestination address;\n-        int witnessversion = 0;\n-        std::vector<unsigned char> witnessprogram;\n-        if (out.tx->tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n-        {\n-            nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n-            fWitness = true;\n-        }\n-        else if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n-        {\n-            CPubKey pubkey;\n-            CKeyID *keyid = boost::get<CKeyID>(&address);\n-            if (keyid && model->getPubKey(*keyid, pubkey))\n+            // Bytes\n+            CTxDestination address;\n+            int witnessversion = 0;\n+            std::vector<unsigned char> witnessprogram;\n+            if (out.tx->tx->vout[out.i].scriptPubKey.IsWitnessProgram(witnessversion, witnessprogram))\n             {\n-                nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n+                nBytesInputs += (32 + 4 + 1 + (107 / WITNESS_SCALE_FACTOR) + 4);\n+                fWitness = true;\n             }\n-            else\n-                nBytesInputs += 148; // in all error cases, simply assume 148 here\n+            else if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, address))\n+            {\n+                CPubKey pubkey;\n+                CKeyID *keyid = boost::get<CKeyID>(&address);\n+                if (keyid && model->getPubKey(*keyid, pubkey))\n+                {\n+                    nBytesInputs += (pubkey.IsCompressed() ? 148 : 180);\n+                }\n+                else\n+                    nBytesInputs += 148; // in all error cases, simply assume 148 here\n+            }\n+            else nBytesInputs += 148;\n         }\n-        else nBytesInputs += 148;\n     }\n \n     // calculation\n@@ -628,112 +632,117 @@ void CoinControlDialog::updateView()\n \n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n-    std::map<QString, std::vector<COutput> > mapCoins;\n-    model->listCoins(mapCoins);\n-\n-    BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n-        CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n-        itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n-        QString sWalletAddress = coins.first;\n-        QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n-        if (sWalletLabel.isEmpty())\n-            sWalletLabel = tr(\"(no label)\");\n+    {\n+        LOCK2(cs_main, model->wallet->cs_wallet);\n \n-        if (treeMode)\n-        {\n-            // wallet address\n-            ui->treeWidget->addTopLevelItem(itemWalletAddress);\n+        std::map<QString, std::vector<COutput> > mapCoins;\n+        model->listCoins(mapCoins);\n \n-            itemWalletAddress->setFlags(flgTristate);\n+        BOOST_FOREACH(const PAIRTYPE(QString, std::vector<COutput>)& coins, mapCoins) {\n+            CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n             itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n+            QString sWalletAddress = coins.first;\n+            QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n+            if (sWalletLabel.isEmpty())\n+                sWalletLabel = tr(\"(no label)\");\n \n-            // label\n-            itemWalletAddress->setText(COLUMN_LABEL, sWalletLabel);\n+            if (treeMode)\n+            {\n+                // wallet address\n+                ui->treeWidget->addTopLevelItem(itemWalletAddress);\n \n-            // address\n-            itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n-        }\n+                itemWalletAddress->setFlags(flgTristate);\n+                itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n \n-        CAmount nSum = 0;\n-        int nChildren = 0;\n-        BOOST_FOREACH(const COutput& out, coins.second) {\n-            nSum += out.tx->tx->vout[out.i].nValue;\n-            nChildren++;\n-\n-            CCoinControlWidgetItem *itemOutput;\n-            if (treeMode)    itemOutput = new CCoinControlWidgetItem(itemWalletAddress);\n-            else             itemOutput = new CCoinControlWidgetItem(ui->treeWidget);\n-            itemOutput->setFlags(flgCheckbox);\n-            itemOutput->setCheckState(COLUMN_CHECKBOX,Qt::Unchecked);\n-\n-            // address\n-            CTxDestination outputAddress;\n-            QString sAddress = \"\";\n-            if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, outputAddress))\n-            {\n-                sAddress = QString::fromStdString(CBitcoinAddress(outputAddress).ToString());\n+                // label\n+                itemWalletAddress->setText(COLUMN_LABEL, sWalletLabel);\n \n-                // if listMode or change => show bitcoin address. In tree mode, address is not shown again for direct wallet address outputs\n-                if (!treeMode || (!(sAddress == sWalletAddress)))\n-                    itemOutput->setText(COLUMN_ADDRESS, sAddress);\n+                // address\n+                itemWalletAddress->setText(COLUMN_ADDRESS, sWalletAddress);\n             }\n \n-            // label\n-            if (!(sAddress == sWalletAddress)) // change\n-            {\n-                // tooltip from where the change comes from\n-                itemOutput->setToolTip(COLUMN_LABEL, tr(\"change from %1 (%2)\").arg(sWalletLabel).arg(sWalletAddress));\n-                itemOutput->setText(COLUMN_LABEL, tr(\"(change)\"));\n-            }\n-            else if (!treeMode)\n-            {\n-                QString sLabel = model->getAddressTableModel()->labelForAddress(sAddress);\n-                if (sLabel.isEmpty())\n-                    sLabel = tr(\"(no label)\");\n-                itemOutput->setText(COLUMN_LABEL, sLabel);\n-            }\n+            CAmount nSum = 0;\n+            int nChildren = 0;\n+            BOOST_FOREACH(const COutput& out, coins.second) {\n+                nSum += out.tx->tx->vout[out.i].nValue;\n+                nChildren++;\n+\n+                CCoinControlWidgetItem *itemOutput;\n+                if (treeMode)    itemOutput = new CCoinControlWidgetItem(itemWalletAddress);\n+                else             itemOutput = new CCoinControlWidgetItem(ui->treeWidget);\n+                itemOutput->setFlags(flgCheckbox);\n+                itemOutput->setCheckState(COLUMN_CHECKBOX,Qt::Unchecked);\n+\n+                // address\n+                CTxDestination outputAddress;\n+                QString sAddress = \"\";\n+                if(ExtractDestination(out.tx->tx->vout[out.i].scriptPubKey, outputAddress))\n+                {\n+                    sAddress = QString::fromStdString(CBitcoinAddress(outputAddress).ToString());\n \n-            // amount\n-            itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->tx->vout[out.i].nValue));\n-            itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.tx->tx->vout[out.i].nValue)); // padding so that sorting works correctly\n+                    // if listMode or change => show bitcoin address. In tree mode, address is not shown again for direct wallet address outputs\n+                    if (!treeMode || (!(sAddress == sWalletAddress)))\n+                        itemOutput->setText(COLUMN_ADDRESS, sAddress);\n+                }\n \n-            // date\n-            itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.tx->GetTxTime()));\n-            itemOutput->setData(COLUMN_DATE, Qt::UserRole, QVariant((qlonglong)out.tx->GetTxTime()));\n+                // label\n+                if (!(sAddress == sWalletAddress)) // change\n+                {\n+                    // tooltip from where the change comes from\n+                    itemOutput->setToolTip(COLUMN_LABEL, tr(\"change from %1 (%2)\").arg(sWalletLabel).arg(sWalletAddress));\n+                    itemOutput->setText(COLUMN_LABEL, tr(\"(change)\"));\n+                }\n+                else if (!treeMode)\n+                {\n+                    QString sLabel = model->getAddressTableModel()->labelForAddress(sAddress);\n+                    if (sLabel.isEmpty())\n+                        sLabel = tr(\"(no label)\");\n+                    itemOutput->setText(COLUMN_LABEL, sLabel);\n+                }\n \n-            // confirmations\n-            itemOutput->setText(COLUMN_CONFIRMATIONS, QString::number(out.nDepth));\n-            itemOutput->setData(COLUMN_CONFIRMATIONS, Qt::UserRole, QVariant((qlonglong)out.nDepth));\n+                // amount\n+                itemOutput->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, out.tx->tx->vout[out.i].nValue));\n+                itemOutput->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)out.tx->tx->vout[out.i].nValue)); // padding so that sorting works correctly\n \n-            // transaction hash\n-            uint256 txhash = out.tx->GetHash();\n-            itemOutput->setText(COLUMN_TXHASH, QString::fromStdString(txhash.GetHex()));\n+                // date\n+                itemOutput->setText(COLUMN_DATE, GUIUtil::dateTimeStr(out.tx->GetTxTime()));\n+                itemOutput->setData(COLUMN_DATE, Qt::UserRole, QVariant((qlonglong)out.tx->GetTxTime()));\n \n-            // vout index\n-            itemOutput->setText(COLUMN_VOUT_INDEX, QString::number(out.i));\n+                // confirmations\n+                itemOutput->setText(COLUMN_CONFIRMATIONS, QString::number(out.nDepth));\n+                itemOutput->setData(COLUMN_CONFIRMATIONS, Qt::UserRole, QVariant((qlonglong)out.nDepth));\n \n-             // disable locked coins\n-            if (model->isLockedCoin(txhash, out.i))\n-            {\n-                COutPoint outpt(txhash, out.i);\n-                coinControl->UnSelect(outpt); // just to be sure\n-                itemOutput->setDisabled(true);\n-                itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n+                // transaction hash\n+                uint256 txhash = out.tx->GetHash();\n+                itemOutput->setText(COLUMN_TXHASH, QString::fromStdString(txhash.GetHex()));\n+\n+                // vout index\n+                itemOutput->setText(COLUMN_VOUT_INDEX, QString::number(out.i));\n+\n+                 // disable locked coins\n+                if (model->isLockedCoin(txhash, out.i))\n+                {\n+                    COutPoint outpt(txhash, out.i);\n+                    coinControl->UnSelect(outpt); // just to be sure\n+                    itemOutput->setDisabled(true);\n+                    itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n+                }\n+\n+                // set checkbox\n+                if (coinControl->IsSelected(COutPoint(txhash, out.i)))\n+                    itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n             }\n \n-            // set checkbox\n-            if (coinControl->IsSelected(COutPoint(txhash, out.i)))\n-                itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n+            // amount\n+            if (treeMode)\n+            {\n+                itemWalletAddress->setText(COLUMN_CHECKBOX, \"(\" + QString::number(nChildren) + \")\");\n+                itemWalletAddress->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, nSum));\n+                itemWalletAddress->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)nSum));\n+            }\n         }\n \n-        // amount\n-        if (treeMode)\n-        {\n-            itemWalletAddress->setText(COLUMN_CHECKBOX, \"(\" + QString::number(nChildren) + \")\");\n-            itemWalletAddress->setText(COLUMN_AMOUNT, BitcoinUnits::format(nDisplayUnit, nSum));\n-            itemWalletAddress->setData(COLUMN_AMOUNT, Qt::UserRole, QVariant((qlonglong)nSum));\n-        }\n-    }\n+    } // Lose cs_wallet for mapCoins\n \n     // expand all partially selected\n     if (treeMode)"
      },
      {
        "sha": "cb1e89366c63167e510cd306f4f9a2323df622d9",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=31b7171cbfef7d66957a7721aff524778dbdf5b0",
        "patch": "@@ -575,7 +575,7 @@ bool WalletModel::getPrivKey(const CKeyID &address, CKey& vchPrivKeyOut) const\n // returns a list of COutputs from COutPoints\n void WalletModel::getOutputs(const std::vector<COutPoint>& vOutpoints, std::vector<COutput>& vOutputs)\n {\n-    LOCK2(cs_main, wallet->cs_wallet);\n+    AssertLockHeld(wallet->cs_wallet); // Have to hold cs_wallet as we return pointers into mapWallet\n     BOOST_FOREACH(const COutPoint& outpoint, vOutpoints)\n     {\n         if (!wallet->mapWallet.count(outpoint.hash)) continue;\n@@ -595,10 +595,11 @@ bool WalletModel::isSpent(const COutPoint& outpoint) const\n // AvailableCoins + LockedCoins grouped by wallet address (put change in one group with wallet address)\n void WalletModel::listCoins(std::map<QString, std::vector<COutput> >& mapCoins) const\n {\n+    AssertLockHeld(wallet->cs_wallet); // Have to hold cs_wallet as we return pointers into mapWallet\n+\n     std::vector<COutput> vCoins;\n     wallet->AvailableCoins(vCoins);\n \n-    LOCK2(cs_main, wallet->cs_wallet); // ListLockedCoins, mapWallet\n     std::vector<COutPoint> vLockedCoins;\n     wallet->ListLockedCoins(vLockedCoins);\n "
      },
      {
        "sha": "701b917dac7276582940e3713bbd8c908326b831",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31b7171cbfef7d66957a7721aff524778dbdf5b0/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=31b7171cbfef7d66957a7721aff524778dbdf5b0",
        "patch": "@@ -215,8 +215,9 @@ class WalletModel : public QObject\n \n     bool getDefaultWalletRbf() const;\n \n+    CWallet *wallet; // Used to lock cs_wallet for getOutputs/listCoins\n+\n private:\n-    CWallet *wallet;\n     bool fHaveWatchOnly;\n     bool fForceCheckBalanceChanged;\n "
      }
    ]
  }
]