[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608984856",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-608984856",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 608984856,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwODk4NDg1Ng==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-04T06:46:46Z",
    "updated_at": "2020-04-04T06:46:46Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18470 (net: Make stale tip check time type-safe, extend test by MarcoFalke)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/608984856/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609062123",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-609062123",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 609062123,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYwOTA2MjEyMw==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-04T17:27:42Z",
    "updated_at": "2020-04-04T17:27:42Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK\r\n\r\nVery nice fuzzing harness! Keep them coming! :)",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/609062123/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610018121",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-610018121",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 610018121,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDAxODEyMQ==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-06T20:25:31Z",
    "updated_at": "2020-04-06T20:25:31Z",
    "author_association": "CONTRIBUTOR",
    "body": "Tested ACK fa6a00843447d53a5708ea3a629b9150cfe58be2\r\n\r\nThanks for adding a very nice harness!",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610018121/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610018603",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-610018603",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 610018603,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDAxODYwMw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-06T20:26:34Z",
    "updated_at": "2020-04-06T20:26:34Z",
    "author_association": "MEMBER",
    "body": "Thanks for testing. Did you find the CVE after re-introducing it?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610018603/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610826738",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-610826738",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 610826738,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMDgyNjczOA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-08T08:31:17Z",
    "updated_at": "2020-04-08T08:31:17Z",
    "author_association": "CONTRIBUTOR",
    "body": "@MarcoFalke \r\n\r\nYes :)\r\n\r\nLive demo:\r\n\r\n```\r\n$ mkdir -p process_messages/\r\n$ src/test/fuzz/process_messages process_messages/\r\n\u2026\r\nbloom.cpp:45:69: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior bloom.cpp:45:69 in\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==17357==ERROR: AddressSanitizer: FPE on unknown address 0x55b551298dca (pc 0x55b551298dca bp 0x7ffd02f6f890 sp 0x7ffd02f6f860 T0)\r\n    #0 0x55b551298dca in CBloomFilter::Hash(unsigned int, std::vector<unsigned char, std::allocator<unsigned char> > const&) const src/bloom.cpp:45:69\r\n    #1 0x55b551298b69 in CBloomFilter::insert(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/bloom.cpp:54:31\r\n    #2 0x55b550a820c6 in ProcessMessage(CNode*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, CDataStream&, long, CChainParams const&, CTxMemPool&, CConnman*, BanMan*, std::atomic<bool> const&) src/net_processing.cpp:3183:45\r\n    #3 0x55b550abd122 in PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) src/net_processing.cpp:3359:16\r\n    #4 0x55b550ac0f25 in non-virtual thunk to PeerLogicValidation::ProcessMessages(CNode*, std::atomic<bool>&) src/net_processing.cpp\r\n    #5 0x55b550907f01 in ConnmanTestMsg::ProcessMessagesOnce(CNode&) src/./test/util/net.h:26:56\r\n    #6 0x55b550904ecf in test_one_input(std::vector<unsigned char, std::allocator<unsigned char> > const&) src/test/fuzz/process_messages.cpp:69:21\r\n\u2026\r\n$ xxd -p < ./crash-55a890a083dbb4291c5dbc367a58651d02854d86\r\n697665726163ffff006e5757a860a80d5d5c6966696c7465726164640061\r\nfc010000000064645757575757a8a8b661a85ca866696c7465726c6f6164\r\n00bb000500000000d08cff00000000613000ad000000005c6966696c7465\r\n72616464031561b800fc40636d7063ffffffffffffff325c6966696c7465\r\n726164640061fc00a8e0a87800000000000000ffff4100ff67cb59570d41\r\n4141fffedf4141415ca8a5a85a006ea5a8a865a867e5cb79570d5c57572f\r\na8a5ffff00ff020d5ca8a8a8a8a8696e76a8a86464\r\n$ strings ./crash-55a890a083dbb4291c5dbc367a58651d02854d86\r\niverac\r\n]\\ifilteradd\r\nddWWWWW\r\nfilterload\r\n\\ifilteradd\r\n@cmpc\r\n2\\ifilteradd\r\nAAA\\\r\n\\WW/\r\n```",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/610826738/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611051980",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-611051980",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 611051980,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxMTA1MTk4MA==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-08T16:15:34Z",
    "updated_at": "2020-04-08T16:15:34Z",
    "author_association": "MEMBER",
    "body": "Going to go ahead and merge this. If someone has feedback or questions, you are welcome to leave them here.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/611051980/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617880540",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#issuecomment-617880540",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18521",
    "id": 617880540,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxNzg4MDU0MA==",
    "user": {
      "login": "narula",
      "id": 177646,
      "node_id": "MDQ6VXNlcjE3NzY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/177646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/narula",
      "html_url": "https://github.com/narula",
      "followers_url": "https://api.github.com/users/narula/followers",
      "following_url": "https://api.github.com/users/narula/following{/other_user}",
      "gists_url": "https://api.github.com/users/narula/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/narula/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/narula/subscriptions",
      "organizations_url": "https://api.github.com/users/narula/orgs",
      "repos_url": "https://api.github.com/users/narula/repos",
      "events_url": "https://api.github.com/users/narula/events{/privacy}",
      "received_events_url": "https://api.github.com/users/narula/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-22T16:18:08Z",
    "updated_at": "2020-04-22T16:18:08Z",
    "author_association": "MEMBER",
    "body": "As a data point, I was able to reproduce the CVE. It took about ~5-6 hours running 16 jobs.\r\n\r\n```\r\nbloom.cpp:45:69: runtime error: division by zero\r\nSUMMARY: UndefinedBehaviorSanitizer: undefined-behavior bloom.cpp:45:69 in \r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==40871==ERROR: AddressSanitizer: FPE on unknown address 0x55931bfc0b75 (pc 0x55931bfc0b75 bp 0x7ffc03d58840 sp 0x7ffc03d58810 T0)\r\n    #0 0x55931bfc0b74  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x2526b74)\r\n    #1 0x55931bfbb90b  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x252190b)\r\n    #2 0x55931b823465  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1d89465)\r\n    #3 0x55931b8528f1  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1db88f1)\r\n    #4 0x55931b855d15  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1dbbd15)\r\n    #5 0x55931b687ea4  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1bedea4)\r\n    #6 0x55931b684453  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1bea453)\r\n    #7 0x55931c85a94f  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x2dc094f)\r\n    #8 0x55931b562ce7  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1ac8ce7)\r\n    #9 0x55931b56d554  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1ad3554)\r\n    #10 0x55931b56ebbf  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1ad4bbf)\r\n    #11 0x55931b55df7c  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1ac3f7c)\r\n    #12 0x55931b5427d2  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1aa87d2)\r\n    #13 0x7f81d6280b96  (/lib/x86_64-linux-gnu/libc.so.6+0x21b96)\r\n    #14 0x55931b550e99  (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x1ab6e99)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: FPE (/home/neha/src/bitcoin/src/test/fuzz/process_messages+0x2526b74) \r\n==40871==ABORTING\r\nMS: 2 ChangeByte-CrossOver-; base unit: 369297d2ec45713fa6113836603e63a500a2403c\r\nartifact_prefix='./'; Test unit written to ./crash-b8f6aae14715726dbd88ef4a5b383e1b50c0fa46\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/617880540/reactions",
      "total_count": 2,
      "+1": 2,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407148167",
    "pull_request_review_id": 391822769,
    "id": 407148167,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE0ODE2Nw==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Could the fuzzer check \"interesting\" cases more quickly by choosing a random but valid command, instead of generating a random string of length `COMMAND_SIZE`?",
    "created_at": "2020-04-12T05:22:33Z",
    "updated_at": "2020-04-12T05:36:04Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407148167",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407148167"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407148167"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407148167/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407190532",
    "pull_request_review_id": 391851642,
    "id": 407190532,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MDUzMg==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Good question. I think there is a trade-off here between giving the fuzz engine as much freedom to explore as possible at a potentially slight cost of performance (citation needed, giving more freedom could also increase efficiency).\r\n\r\nYour suggestion would involve enumerating all netmessage types in an array and then having the fuzz engine pick one from it. This is possible, but as soon as you add a new message type, the developed seeds (inputs) render invalid and need to be adjusted. Readjusting the seeds should not be an issue for the fuzz engine, but it has to be done.\r\n\r\nApart from the above slight inconvenience of having to readjust the seeds on every added (or removed) message type, there is also an issue that the enumeration could accidentally miss one message type. On top, Bitcoin Core ignores unknown message types, and I'd say we want to test this code path as well. (Have at least one unknown message type generated by the fuzzer). This can also be fixed by adding an unknown message type to the fixed array the fuzz engine can pick from. E.g. \"foobarfoo\".\r\n\r\nMoreover, we might also want to test for slight modifications of the same message type and see if they affect behavior in any way. For example b\"filteradd\\x01add\" vs b\"filteradd\\x02\". Those two should never be treated as a valid command and obviously shouldn't crash Bitcoin Core. There should be unit and maybe other fuzz tests in place to check this, but I think allowing the fuzz engine in this test more freedom can't hurt.\r\n\r\nFinally, while I don't know the internals of fuzz engines, I believe they are really smart and quick about figuring out \"interesting\" strings that appear in the source code. If I had to guess what the performance penalty was of allowing any message type as opposed to limiting it to a fixed set of types, I'd presume it is an unnoticeable difference, maybe slight slow down or possibly a slight speed up even. A benchmark might help here.\r\n\r\nI tried a few other presumed performance improvements while writing the test and surprisingly I found that writing the least code, simplest code, while allowing the fuzz engine the most freedom was also the fastest way to find the CVE.",
    "created_at": "2020-04-12T12:21:25Z",
    "updated_at": "2020-04-12T12:21:25Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407190532",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407190532"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407190532"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407190532/reactions",
      "total_count": 5,
      "+1": 5,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407246671",
    "pull_request_review_id": 391891351,
    "id": 407246671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI0NjY3MQ==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "robot-visions",
      "id": 63171930,
      "node_id": "MDQ6VXNlcjYzMTcxOTMw",
      "avatar_url": "https://avatars.githubusercontent.com/u/63171930?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/robot-visions",
      "html_url": "https://github.com/robot-visions",
      "followers_url": "https://api.github.com/users/robot-visions/followers",
      "following_url": "https://api.github.com/users/robot-visions/following{/other_user}",
      "gists_url": "https://api.github.com/users/robot-visions/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/robot-visions/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/robot-visions/subscriptions",
      "organizations_url": "https://api.github.com/users/robot-visions/orgs",
      "repos_url": "https://api.github.com/users/robot-visions/repos",
      "events_url": "https://api.github.com/users/robot-visions/events{/privacy}",
      "received_events_url": "https://api.github.com/users/robot-visions/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for the really thorough explanation!  That tradeoff / your decision makes sense to me, especially since I didn't know that fuzz engines might do better than \"just generate random strings\".",
    "created_at": "2020-04-12T20:12:05Z",
    "updated_at": "2020-04-12T20:17:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407246671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407246671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r407246671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/407246671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408509515",
    "pull_request_review_id": 393379075,
    "id": 408509515,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUwOTUxNQ==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I agree as well that the merged version makes sense, but just out of interest I ran both versions (PR and a version which samples an array with all `NetMsgType`s currently defined in protocol.cpp ) in parallel with libfuzzer and it was the altered version which found the reintroduced CVE first after 2.3M iterations / 2 hours, while the PR version hadn't found it after 10M tries. \r\nI found it interesting that while the `cov` metric was similar between the runs, the `ft` metric of the fuzzer was consistently higher for the array version throughout the run.\r\n\r\nAlthough this was just sample size 1, so finding the CVE might have just been a lucky mutation in the fuzzer algorithm...",
    "created_at": "2020-04-15T00:19:18Z",
    "updated_at": "2020-04-15T00:20:58Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408509515",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408509515"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408509515"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408509515/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408518950",
    "pull_request_review_id": 393389349,
    "id": 408518950,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUxODk1MA==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How many workers did you run in parallel?",
    "created_at": "2020-04-15T00:53:18Z",
    "updated_at": "2020-04-15T00:53:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408518950",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408518950"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408518950"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408518950/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408525052",
    "pull_request_review_id": 393396150,
    "id": 408525052,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNTA1Mg==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Just 1 for each version.",
    "created_at": "2020-04-15T01:16:37Z",
    "updated_at": "2020-04-15T01:16:37Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408525052",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408525052"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408525052"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408525052/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408526863",
    "pull_request_review_id": 393398182,
    "id": 408526863,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyNjg2Mw==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "This sounds like a promising speed-up. I wouldn't object either having this one replaced or a new fuzz target with the array version.",
    "created_at": "2020-04-15T01:23:37Z",
    "updated_at": "2020-04-15T01:23:38Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408526863",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408526863"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408526863"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408526863/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408529541",
    "pull_request_review_id": 393401058,
    "id": 408529541,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUyOTU0MQ==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "mzumsande",
      "id": 48763452,
      "node_id": "MDQ6VXNlcjQ4NzYzNDUy",
      "avatar_url": "https://avatars.githubusercontent.com/u/48763452?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mzumsande",
      "html_url": "https://github.com/mzumsande",
      "followers_url": "https://api.github.com/users/mzumsande/followers",
      "following_url": "https://api.github.com/users/mzumsande/following{/other_user}",
      "gists_url": "https://api.github.com/users/mzumsande/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mzumsande/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mzumsande/subscriptions",
      "organizations_url": "https://api.github.com/users/mzumsande/orgs",
      "repos_url": "https://api.github.com/users/mzumsande/repos",
      "events_url": "https://api.github.com/users/mzumsande/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mzumsande/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I'll do some more runs tomorrow, maybe I was just lucky. I don't have a good feeling for the variance of runtimes yet.",
    "created_at": "2020-04-15T01:33:40Z",
    "updated_at": "2020-04-15T01:33:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408529541",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408529541"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408529541"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408529541/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408532343",
    "pull_request_review_id": 393404038,
    "id": 408532343,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODUzMjM0Mw==",
    "diff_hunk": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};",
    "path": "src/test/fuzz/process_messages.cpp",
    "position": 57,
    "original_position": 57,
    "commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "original_commit_id": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I saw it vary by a factor or 5 or 10 in my tests last week, so it could very well be just noise",
    "created_at": "2020-04-15T01:44:12Z",
    "updated_at": "2020-04-15T01:44:12Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408532343",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408532343"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18521#discussion_r408532343"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18521"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/408532343/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 57,
    "original_line": 57,
    "side": "RIGHT",
    "in_reply_to_id": 407148167
  }
]