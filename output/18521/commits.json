[
  {
    "sha": "fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZhMDA4NDM0NDdkNTNhNTcwOGVhM2E2MjliOTE1MGNmZTU4YmUy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-03T23:30:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-05T02:46:24Z"
      },
      "message": "fuzz: Add process_messages harness",
      "tree": {
        "sha": "788c0a0be44c45cc94bbaad8ea543d0f1b67e3b2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/788c0a0be44c45cc94bbaad8ea543d0f1b67e3b2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6a00843447d53a5708ea3a629b9150cfe58be2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgWhQwArw7e867mAKBdBn/NRuLavrQyWSyCEyNgyNoqDamZ7Aq57WsbKASU+aOe\nprxV0zLzV7EeytB7DshxYhTq7xCo08ImyHmL20VY3xOsmSm0VzgsLmVoj3ipyPMB\nl8fVt6MaoL3whQ6FXNTmwVX2m788zzIsVwcRVNtwAy4bTjEhelgoGuHiBiWHFGmZ\nhjXz5WIzbcYFB25r1hIJK3VoJ4hw7Au3K6ecI1Emo/BwT9T0GZNBj9Nn8xp5DE7I\nJjMJojTY4QZ1uOc64O6hnXfo2yi5fxbYF1Zi8PpnkT5xaBsyE2WqvSU0T1g/s7mc\n070zfsuT4PPT/2Vz38FRj/PqOp83tJoJfueig8f6SJeS0COPrUy+xMRrenjAWJgu\nX61ndd4GX5dLfUG3ZkvF1c2hSb8zKXMq5p8hrU12JY4s8mjkucO4F4NJoajWY9Wn\ncH5uhXWWGx7Hqs3bVU0h3/9Cg8X/pP0NGN7qtAOvAUMoeL1sPec8a7nimQWadCEd\nM+H7UCOt\n=uM/f\n-----END PGP SIGNATURE-----",
        "payload": "tree 788c0a0be44c45cc94bbaad8ea543d0f1b67e3b2\nparent 96a30b98c925b4ca63993759ddf7b4dd1fa58ec1\nauthor MarcoFalke <falke.marco@gmail.com> 1585956651 +0800\ncommitter MarcoFalke <falke.marco@gmail.com> 1586054784 +0800\n\nfuzz: Add process_messages harness\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6a00843447d53a5708ea3a629b9150cfe58be2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6a00843447d53a5708ea3a629b9150cfe58be2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96a30b98c925b4ca63993759ddf7b4dd1fa58ec1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96a30b98c925b4ca63993759ddf7b4dd1fa58ec1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96a30b98c925b4ca63993759ddf7b4dd1fa58ec1"
      }
    ],
    "stats": {
      "total": 164,
      "additions": 164,
      "deletions": 0
    },
    "files": [
      {
        "sha": "b50af8829938b7281767c9634522a89dfc8d6bcb",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -62,6 +62,7 @@ FUZZ_TARGETS = \\\n   test/fuzz/partially_signed_transaction_deserialize \\\n   test/fuzz/pow \\\n   test/fuzz/prefilled_transaction_deserialize \\\n+  test/fuzz/process_messages \\\n   test/fuzz/process_message \\\n   test/fuzz/process_message_addr \\\n   test/fuzz/process_message_block \\\n@@ -642,6 +643,12 @@ test_fuzz_prefilled_transaction_deserialize_LDADD = $(FUZZ_SUITE_LD_COMMON)\n test_fuzz_prefilled_transaction_deserialize_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n test_fuzz_prefilled_transaction_deserialize_SOURCES = test/fuzz/deserialize.cpp\n \n+test_fuzz_process_messages_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n+test_fuzz_process_messages_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n+test_fuzz_process_messages_LDADD = $(FUZZ_SUITE_LD_COMMON)\n+test_fuzz_process_messages_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)\n+test_fuzz_process_messages_SOURCES = test/fuzz/process_messages.cpp\n+\n test_fuzz_process_message_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)\n test_fuzz_process_message_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n test_fuzz_process_message_LDADD = $(FUZZ_SUITE_LD_COMMON)"
      },
      {
        "sha": "d7bc73defb4149469734cac6c8257e201fef47f3",
        "filename": "src/Makefile.test_util.include",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/Makefile.test_util.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/Makefile.test_util.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test_util.include?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -11,6 +11,7 @@ TEST_UTIL_H = \\\n     test/util/blockfilter.h \\\n     test/util/logging.h \\\n     test/util/mining.h \\\n+    test/util/net.h \\\n     test/util/setup_common.h \\\n     test/util/str.h \\\n     test/util/transaction_utils.h \\\n@@ -22,6 +23,7 @@ libtest_util_a_SOURCES = \\\n   test/util/blockfilter.cpp \\\n   test/util/logging.cpp \\\n   test/util/mining.cpp \\\n+  test/util/net.cpp \\\n   test/util/setup_common.cpp \\\n   test/util/str.cpp \\\n   test/util/transaction_utils.cpp \\"
      },
      {
        "sha": "7a2b53f808acb4cbc9741827ef327258ad606baa",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -482,6 +482,7 @@ class CConnman\n     std::atomic<int64_t> m_next_send_inv_to_incoming{0};\n \n     friend struct CConnmanTest;\n+    friend struct ConnmanTestMsg;\n };\n void Discover();\n void StartMapPort();\n@@ -721,6 +722,8 @@ class V1TransportSerializer  : public TransportSerializer {\n class CNode\n {\n     friend class CConnman;\n+    friend struct ConnmanTestMsg;\n+\n public:\n     std::unique_ptr<TransportDeserializer> m_deserializer;\n     std::unique_ptr<TransportSerializer> m_serializer;"
      },
      {
        "sha": "12a5dbb607ef255236e4fd0292920b3597945b8b",
        "filename": "src/test/fuzz/process_messages.cpp",
        "status": "added",
        "additions": 75,
        "deletions": 0,
        "changes": 75,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/fuzz/process_messages.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/fuzz/process_messages.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/process_messages.cpp?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -0,0 +1,75 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <consensus/consensus.h>\n+#include <net.h>\n+#include <net_processing.h>\n+#include <protocol.h>\n+#include <test/fuzz/FuzzedDataProvider.h>\n+#include <test/fuzz/fuzz.h>\n+#include <test/fuzz/util.h>\n+#include <test/util/mining.h>\n+#include <test/util/net.h>\n+#include <test/util/setup_common.h>\n+#include <util/memory.h>\n+#include <validation.h>\n+#include <validationinterface.h>\n+\n+const RegTestingSetup* g_setup;\n+\n+void initialize()\n+{\n+    static RegTestingSetup setup{};\n+    g_setup = &setup;\n+\n+    for (int i = 0; i < 2 * COINBASE_MATURITY; i++) {\n+        MineBlock(g_setup->m_node, CScript() << OP_TRUE);\n+    }\n+    SyncWithValidationInterfaceQueue();\n+}\n+\n+void test_one_input(const std::vector<uint8_t>& buffer)\n+{\n+    FuzzedDataProvider fuzzed_data_provider(buffer.data(), buffer.size());\n+\n+    ConnmanTestMsg& connman = *(ConnmanTestMsg*)g_setup->m_node.connman.get();\n+    std::vector<CNode*> peers;\n+\n+    const auto num_peers_to_add = fuzzed_data_provider.ConsumeIntegralInRange(1, 3);\n+    for (int i = 0; i < num_peers_to_add; ++i) {\n+        const ServiceFlags service_flags = ServiceFlags(fuzzed_data_provider.ConsumeIntegral<uint64_t>());\n+        const bool inbound{fuzzed_data_provider.ConsumeBool()};\n+        const bool block_relay_only{fuzzed_data_provider.ConsumeBool()};\n+        peers.push_back(MakeUnique<CNode>(i, service_flags, 0, INVALID_SOCKET, CAddress{CService{in_addr{0x0100007f}, 7777}, NODE_NETWORK}, 0, 0, CAddress{}, std::string{}, inbound, block_relay_only).release());\n+        CNode& p2p_node = *peers.back();\n+\n+        p2p_node.fSuccessfullyConnected = true;\n+        p2p_node.fPauseSend = false;\n+        p2p_node.nVersion = PROTOCOL_VERSION;\n+        p2p_node.SetSendVersion(PROTOCOL_VERSION);\n+        g_setup->m_node.peer_logic->InitializeNode(&p2p_node);\n+\n+        connman.AddTestNode(p2p_node);\n+    }\n+\n+    while (fuzzed_data_provider.ConsumeBool()) {\n+        const std::string random_message_type{fuzzed_data_provider.ConsumeBytesAsString(CMessageHeader::COMMAND_SIZE).c_str()};\n+\n+        CSerializedNetMsg net_msg;\n+        net_msg.command = random_message_type;\n+        net_msg.data = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n+\n+        CNode& random_node = *peers.at(fuzzed_data_provider.ConsumeIntegralInRange<int>(0, peers.size() - 1));\n+\n+        (void)connman.ReceiveMsgFrom(random_node, net_msg);\n+        random_node.fPauseSend = false;\n+\n+        try {\n+            connman.ProcessMessagesOnce(random_node);\n+        } catch (const std::ios_base::failure&) {\n+        }\n+    }\n+    connman.ClearTestNodes();\n+    SyncWithValidationInterfaceQueue();\n+}"
      },
      {
        "sha": "09f2f1807feb28828cab6337a62eb0ab33d301af",
        "filename": "src/test/util/net.cpp",
        "status": "added",
        "additions": 39,
        "deletions": 0,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.cpp?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -0,0 +1,39 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <test/util/net.h>\n+\n+#include <chainparams.h>\n+#include <net.h>\n+\n+void ConnmanTestMsg::NodeReceiveMsgBytes(CNode& node, const char* pch, unsigned int nBytes, bool& complete) const\n+{\n+    assert(node.ReceiveMsgBytes(pch, nBytes, complete));\n+    if (complete) {\n+        size_t nSizeAdded = 0;\n+        auto it(node.vRecvMsg.begin());\n+        for (; it != node.vRecvMsg.end(); ++it) {\n+            // vRecvMsg contains only completed CNetMessage\n+            // the single possible partially deserialized message are held by TransportDeserializer\n+            nSizeAdded += it->m_raw_message_size;\n+        }\n+        {\n+            LOCK(node.cs_vProcessMsg);\n+            node.vProcessMsg.splice(node.vProcessMsg.end(), node.vRecvMsg, node.vRecvMsg.begin(), it);\n+            node.nProcessQueueSize += nSizeAdded;\n+            node.fPauseRecv = node.nProcessQueueSize > nReceiveFloodSize;\n+        }\n+    }\n+}\n+\n+bool ConnmanTestMsg::ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const\n+{\n+    std::vector<unsigned char> ser_msg_header;\n+    node.m_serializer->prepareForTransport(ser_msg, ser_msg_header);\n+\n+    bool complete;\n+    NodeReceiveMsgBytes(node, (const char*)ser_msg_header.data(), ser_msg_header.size(), complete);\n+    NodeReceiveMsgBytes(node, (const char*)ser_msg.data.data(), ser_msg.data.size(), complete);\n+    return complete;\n+}"
      },
      {
        "sha": "ca8cb7fad5a3057440b78e42e203294e50e9d5ae",
        "filename": "src/test/util/net.h",
        "status": "added",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/net.h?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -0,0 +1,33 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_TEST_UTIL_NET_H\n+#define BITCOIN_TEST_UTIL_NET_H\n+\n+#include <net.h>\n+\n+struct ConnmanTestMsg : public CConnman {\n+    using CConnman::CConnman;\n+    void AddTestNode(CNode& node)\n+    {\n+        LOCK(cs_vNodes);\n+        vNodes.push_back(&node);\n+    }\n+    void ClearTestNodes()\n+    {\n+        LOCK(cs_vNodes);\n+        for (CNode* node : vNodes) {\n+            delete node;\n+        }\n+        vNodes.clear();\n+    }\n+\n+    void ProcessMessagesOnce(CNode& node) { m_msgproc->ProcessMessages(&node, flagInterruptMsgProc); }\n+\n+    void NodeReceiveMsgBytes(CNode& node, const char* pch, unsigned int nBytes, bool& complete) const;\n+\n+    bool ReceiveMsgFrom(CNode& node, CSerializedNetMsg& ser_msg) const;\n+};\n+\n+#endif // BITCOIN_TEST_UTIL_NET_H"
      },
      {
        "sha": "a4d0126925cd8031c1a6dc7723a65b58ea75a90c",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6a00843447d53a5708ea3a629b9150cfe58be2/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=fa6a00843447d53a5708ea3a629b9150cfe58be2",
        "patch": "@@ -139,6 +139,11 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n     m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n     m_node.peer_logic = MakeUnique<PeerLogicValidation>(m_node.connman.get(), m_node.banman.get(), *m_node.scheduler, *m_node.mempool);\n+    {\n+        CConnman::Options options;\n+        options.m_msgproc = m_node.peer_logic.get();\n+        m_node.connman->Init(options);\n+    }\n }\n \n TestingSetup::~TestingSetup()"
      }
    ]
  }
]