[
  {
    "sha": "f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOGRlZDU4OGEyZjc4YWMyNzY3YTYwYzcxNmE3ZDE1YzI3M2I0ZmM3",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-16T21:26:14Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2011-12-19T15:24:23Z"
      },
      "message": "Implement BIP 14 : separate protocol version from client version",
      "tree": {
        "sha": "f8bb01303f5feb0bf04a8fb01ada04b58304a207",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f8bb01303f5feb0bf04a8fb01ada04b58304a207"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8896c2d9d64d71e25b31d7a389f0b8db49a1e50a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8896c2d9d64d71e25b31d7a389f0b8db49a1e50a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8896c2d9d64d71e25b31d7a389f0b8db49a1e50a"
      }
    ],
    "stats": {
      "total": 166,
      "additions": 96,
      "deletions": 70
    },
    "files": [
      {
        "sha": "ee1a5d4a34470c8cfa7ee45b284e69eec8db3f1c",
        "filename": "doc/release-process.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/doc/release-process.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/doc/release-process.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.txt?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -1,6 +1,6 @@\n * update (commit) version in sources\n   bitcoin-qt.pro\n-  src/serialize.h\n+  src/main.h      (CLIENT_VERSION : PROTOCOL_VERSION in serialize.h is updated only on protocol changes)\n   share/setup.nsi\n   doc/README*\n "
      },
      {
        "sha": "f5d545f07e5cd171ee7022f29d7c3ed4dd016fd6",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -338,19 +338,19 @@ class CBigNum : public BIGNUM\n         return ToString(16);\n     }\n \n-    unsigned int GetSerializeSize(int nType=0, int nVersion=VERSION) const\n+    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n     {\n         return ::GetSerializeSize(getvch(), nType, nVersion);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const\n+    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n     {\n         ::Serialize(s, getvch(), nType, nVersion);\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)\n+    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n     {\n         std::vector<unsigned char> vch;\n         ::Unserialize(s, vch, nType, nVersion);"
      },
      {
        "sha": "f29b9dd50ef421e7159f74c1c515285a20cd2d23",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -304,7 +304,8 @@ Value getinfo(const Array& params, bool fHelp)\n             \"Returns an object containing various state info.\");\n \n     Object obj;\n-    obj.push_back(Pair(\"version\",       (int)VERSION));\n+    obj.push_back(Pair(\"version\",       (int)CLIENT_VERSION));\n+    obj.push_back(Pair(\"protocolversion\",(int)PROTOCOL_VERSION));\n     obj.push_back(Pair(\"balance\",       ValueFromAmount(pwalletMain->GetBalance())));\n     obj.push_back(Pair(\"blocks\",        (int)nBestHeight));\n     obj.push_back(Pair(\"connections\",   (int)vNodes.size()));"
      },
      {
        "sha": "696fc736e0045d165efa672286d388c1a4c2a900",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -131,7 +131,7 @@ CDB::CDB(const char* pszFile, const char* pszMode) : pdb(NULL)\n             {\n                 bool fTmp = fReadOnly;\n                 fReadOnly = false;\n-                WriteVersion(VERSION);\n+                WriteVersion(CLIENT_VERSION);\n                 fReadOnly = fTmp;\n             }\n \n@@ -236,7 +236,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                             {\n                                 // Update version:\n                                 ssValue.clear();\n-                                ssValue << VERSION;\n+                                ssValue << CLIENT_VERSION;\n                             }\n                             Dbt datKey(&ssKey[0], ssKey.size());\n                             Dbt datValue(&ssValue[0], ssValue.size());\n@@ -931,7 +931,7 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n             {\n                 int nMinVersion = 0;\n                 ssValue >> nMinVersion;\n-                if (nMinVersion > VERSION)\n+                if (nMinVersion > CLIENT_VERSION)\n                     return DB_TOO_NEW;\n             }\n         }\n@@ -956,13 +956,13 @@ int CWalletDB::LoadWallet(CWallet* pwallet)\n     if (fIsEncrypted && (nFileVersion == 40000 || nFileVersion == 50000))\n         return DB_NEED_REWRITE;\n \n-    if (nFileVersion < VERSION) // Update\n+    if (nFileVersion < CLIENT_VERSION) // Update\n     {\n         // Get rid of old debug.log file in current directory\n         if (nFileVersion <= 105 && !pszSetDataDir[0])\n             unlink(\"debug.log\");\n \n-        WriteVersion(VERSION);\n+        WriteVersion(CLIENT_VERSION);\n     }\n \n     return DB_LOAD_OK;"
      },
      {
        "sha": "1da28d4d9fcd5f3a881327be6781abb0a9fe9dd2",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -17,6 +17,11 @@ using namespace boost;\n // Global state\n //\n \n+// Name of client reported in the 'version' message. Report the same name\n+// for both bitcoind and bitcoin-qt, to make it harder for attackers to\n+// target servers or GUI users specifically.\n+const std::string CLIENT_NAME(\"bitcoin-qt\");\n+\n CCriticalSection cs_setpwalletRegistered;\n set<CWallet*> setpwalletRegistered;\n \n@@ -1847,9 +1852,9 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         // Change version\n         if (pfrom->nVersion >= 209)\n             pfrom->PushMessage(\"verack\");\n-        pfrom->vSend.SetVersion(min(pfrom->nVersion, VERSION));\n+        pfrom->vSend.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n         if (pfrom->nVersion < 209)\n-            pfrom->vRecv.SetVersion(min(pfrom->nVersion, VERSION));\n+            pfrom->vRecv.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n \n         if (!pfrom->fInbound)\n         {\n@@ -1902,7 +1907,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"verack\")\n     {\n-        pfrom->vRecv.SetVersion(min(pfrom->nVersion, VERSION));\n+        pfrom->vRecv.SetVersion(min(pfrom->nVersion, PROTOCOL_VERSION));\n     }\n \n "
      },
      {
        "sha": "e519ef6551023c5cb81c5171a69348cf1140bb60",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -27,6 +27,10 @@ class CRequestTracker;\n class CNode;\n class CBlockIndex;\n \n+static const int CLIENT_VERSION = 59900;\n+static const bool VERSION_IS_BETA = true;\n+extern const std::string CLIENT_NAME;\n+\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n static const unsigned int MAX_BLOCK_SIZE_GEN = MAX_BLOCK_SIZE/2;\n static const int MAX_BLOCK_SIGOPS = MAX_BLOCK_SIZE/50;\n@@ -1521,14 +1525,15 @@ class CAlert : public CUnsignedAlert\n \n     bool AppliesTo(int nVersion, std::string strSubVerIn) const\n     {\n+        // TODO: rework for client-version-embedded-in-strSubVer ?\n         return (IsInEffect() &&\n                 nMinVer <= nVersion && nVersion <= nMaxVer &&\n                 (setSubVer.empty() || setSubVer.count(strSubVerIn)));\n     }\n \n     bool AppliesToMe() const\n     {\n-        return AppliesTo(VERSION, ::pszSubVer);\n+        return AppliesTo(PROTOCOL_VERSION, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<std::string>()));\n     }\n \n     bool RelayTo(CNode* pnode) const"
      },
      {
        "sha": "e20de981f8e83c16d91e56da73b9019d9f3ac179",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -727,6 +727,21 @@ void CNode::Cleanup()\n }\n \n \n+void CNode::PushVersion()\n+{\n+    /// when NTP implemented, change to just nTime = GetAdjustedTime()\n+    int64 nTime = (fInbound ? GetAdjustedTime() : GetTime());\n+    CAddress addrYou = (fUseProxy ? CAddress(\"0.0.0.0\") : addr);\n+    CAddress addrMe = (fUseProxy ? CAddress(\"0.0.0.0\") : addrLocalHost);\n+    RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n+    PushMessage(\"version\", PROTOCOL_VERSION, nLocalServices, nTime, addrYou, addrMe,\n+                nLocalHostNonce, FormatSubVersion(CLIENT_NAME, CLIENT_VERSION, std::vector<string>()), nBestHeight);\n+}\n+\n+\n+\n+\n+\n std::map<unsigned int, int64> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n "
      },
      {
        "sha": "c2637dc6acd358faf912e9b172e2a5f33e37edf9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -355,18 +355,8 @@ class CNode\n \n \n \n-    void PushVersion()\n-    {\n-        /// when NTP implemented, change to just nTime = GetAdjustedTime()\n-        int64 nTime = (fInbound ? GetAdjustedTime() : GetTime());\n-        CAddress addrYou = (fUseProxy ? CAddress(\"0.0.0.0\") : addr);\n-        CAddress addrMe = (fUseProxy ? CAddress(\"0.0.0.0\") : addrLocalHost);\n-        RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n-        PushMessage(\"version\", VERSION, nLocalServices, nTime, addrYou, addrMe,\n-                    nLocalHostNonce, std::string(pszSubVer), nBestHeight);\n-    }\n-\n \n+    void PushVersion();\n \n \n     void PushMessage(const char* pszCommand)"
      },
      {
        "sha": "d3f6b7d7031916d544d9fa953a7c5ea99a43c185",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 37,
        "deletions": 39,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -60,9 +60,7 @@ class CDataStream;\n class CAutoFile;\n static const unsigned int MAX_SIZE = 0x02000000;\n \n-static const int VERSION = 59900;\n-static const char* pszSubVer = \"\";\n-static const bool VERSION_IS_BETA = true;\n+static const int PROTOCOL_VERSION = 60000;\n \n // Used to bypass the rule against non-const reference to temporary\n // where it makes sense with wrappers such as CFlatData or CTxDB\n@@ -91,7 +89,7 @@ enum\n };\n \n #define IMPLEMENT_SERIALIZE(statements)    \\\n-    unsigned int GetSerializeSize(int nType=0, int nVersion=VERSION) const  \\\n+    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const  \\\n     {                                           \\\n         CSerActionGetSerializeSize ser_action;  \\\n         const bool fGetSize = true;             \\\n@@ -105,7 +103,7 @@ enum\n         return nSerSize;                        \\\n     }                                           \\\n     template<typename Stream>                   \\\n-    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const  \\\n+    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const  \\\n     {                                           \\\n         CSerActionSerialize ser_action;         \\\n         const bool fGetSize = false;            \\\n@@ -115,7 +113,7 @@ enum\n         {statements}                            \\\n     }                                           \\\n     template<typename Stream>                   \\\n-    void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)  \\\n+    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)  \\\n     {                                           \\\n         CSerActionUnserialize ser_action;       \\\n         const bool fGetSize = false;            \\\n@@ -362,43 +360,43 @@ template<typename Stream, typename C> void Unserialize(Stream& is, std::basic_st\n // vector\n template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename T, typename A> unsigned int GetSerializeSize_impl(const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion=VERSION);\n+template<typename T, typename A> inline unsigned int GetSerializeSize(const std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename Stream, typename T, typename A> void Serialize_impl(Stream& os, const std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion=VERSION);\n+template<typename Stream, typename T, typename A> inline void Serialize(Stream& os, const std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::true_type&);\n template<typename Stream, typename T, typename A> void Unserialize_impl(Stream& is, std::vector<T, A>& v, int nType, int nVersion, const boost::false_type&);\n-template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion=VERSION);\n+template<typename Stream, typename T, typename A> inline void Unserialize(Stream& is, std::vector<T, A>& v, int nType, int nVersion=PROTOCOL_VERSION);\n \n // others derived from vector\n-extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion=VERSION);\n-template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion=VERSION);\n-template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion=VERSION);\n+extern inline unsigned int GetSerializeSize(const CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream> void Serialize(Stream& os, const CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream> void Unserialize(Stream& is, CScript& v, int nType, int nVersion=PROTOCOL_VERSION);\n \n // pair\n-template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion=VERSION);\n+template<typename K, typename T> unsigned int GetSerializeSize(const std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename T> void Serialize(Stream& os, const std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename T> void Unserialize(Stream& is, std::pair<K, T>& item, int nType, int nVersion=PROTOCOL_VERSION);\n \n // 3 tuple\n-template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion=VERSION);\n+template<typename T0, typename T1, typename T2> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T0, typename T1, typename T2> void Serialize(Stream& os, const boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T0, typename T1, typename T2> void Unserialize(Stream& is, boost::tuple<T0, T1, T2>& item, int nType, int nVersion=PROTOCOL_VERSION);\n \n // 4 tuple\n-template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=VERSION);\n-template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=VERSION);\n+template<typename T0, typename T1, typename T2, typename T3> unsigned int GetSerializeSize(const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Serialize(Stream& os, const boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename T0, typename T1, typename T2, typename T3> void Unserialize(Stream& is, boost::tuple<T0, T1, T2, T3>& item, int nType, int nVersion=PROTOCOL_VERSION);\n \n // map\n-template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion=VERSION);\n+template<typename K, typename T, typename Pred, typename A> unsigned int GetSerializeSize(const std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Serialize(Stream& os, const std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename T, typename Pred, typename A> void Unserialize(Stream& is, std::map<K, T, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n \n // set\n-template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion=VERSION);\n-template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion=VERSION);\n+template<typename K, typename Pred, typename A> unsigned int GetSerializeSize(const std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename Pred, typename A> void Serialize(Stream& os, const std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n+template<typename Stream, typename K, typename Pred, typename A> void Unserialize(Stream& is, std::set<K, Pred, A>& m, int nType, int nVersion=PROTOCOL_VERSION);\n \n \n \n@@ -411,19 +409,19 @@ template<typename Stream, typename K, typename Pred, typename A> void Unserializ\n // Thanks to Boost serialization for this idea.\n //\n template<typename T>\n-inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion=VERSION)\n+inline unsigned int GetSerializeSize(const T& a, long nType, int nVersion=PROTOCOL_VERSION)\n {\n     return a.GetSerializeSize((int)nType, nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Serialize(Stream& os, const T& a, long nType, int nVersion=VERSION)\n+inline void Serialize(Stream& os, const T& a, long nType, int nVersion=PROTOCOL_VERSION)\n {\n     a.Serialize(os, (int)nType, nVersion);\n }\n \n template<typename Stream, typename T>\n-inline void Unserialize(Stream& is, T& a, long nType, int nVersion=VERSION)\n+inline void Unserialize(Stream& is, T& a, long nType, int nVersion=PROTOCOL_VERSION)\n {\n     a.Unserialize(is, (int)nType, nVersion);\n }\n@@ -857,39 +855,39 @@ class CDataStream\n     typedef vector_type::const_iterator   const_iterator;\n     typedef vector_type::reverse_iterator reverse_iterator;\n \n-    explicit CDataStream(int nTypeIn=SER_NETWORK, int nVersionIn=VERSION)\n+    explicit CDataStream(int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(pbegin, pend)\n+    CDataStream(const_iterator pbegin, const_iterator pend, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n #if !defined(_MSC_VER) || _MSC_VER >= 1300\n-    CDataStream(const char* pbegin, const char* pend, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(pbegin, pend)\n+    CDataStream(const char* pbegin, const char* pend, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(pbegin, pend)\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n #endif\n \n-    CDataStream(const vector_type& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const vector_type& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch(vchIn.begin(), vchIn.end())\n+    CDataStream(const std::vector<char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch(vchIn.begin(), vchIn.end())\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n+    CDataStream(const std::vector<unsigned char>& vchIn, int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION) : vch((char*)&vchIn.begin()[0], (char*)&vchIn.end()[0])\n     {\n         Init(nTypeIn, nVersionIn);\n     }\n \n-    void Init(int nTypeIn=SER_NETWORK, int nVersionIn=VERSION)\n+    void Init(int nTypeIn=SER_NETWORK, int nVersionIn=PROTOCOL_VERSION)\n     {\n         nReadPos = 0;\n         nType = nTypeIn;\n@@ -1103,7 +1101,7 @@ class CDataStream\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const\n+    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n     {\n         // Special case: stream << stream concatenates like stream += stream\n         if (!vch.empty())\n@@ -1212,7 +1210,7 @@ class CAutoFile\n \n     typedef FILE element_type;\n \n-    CAutoFile(FILE* filenew=NULL, int nTypeIn=SER_DISK, int nVersionIn=VERSION)\n+    CAutoFile(FILE* filenew=NULL, int nTypeIn=SER_DISK, int nVersionIn=PROTOCOL_VERSION)\n     {\n         file = filenew;\n         nType = nTypeIn;"
      },
      {
        "sha": "b6132822c5dfc0ffa0599d451c83b4af6a34b2c4",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -364,19 +364,19 @@ class base_uint\n     }\n \n \n-    unsigned int GetSerializeSize(int nType=0, int nVersion=VERSION) const\n+    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n     {\n         return sizeof(pn);\n     }\n \n     template<typename Stream>\n-    void Serialize(Stream& s, int nType=0, int nVersion=VERSION) const\n+    void Serialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION) const\n     {\n         s.write((char*)pn, sizeof(pn));\n     }\n \n     template<typename Stream>\n-    void Unserialize(Stream& s, int nType=0, int nVersion=VERSION)\n+    void Unserialize(Stream& s, int nType=0, int nVersion=PROTOCOL_VERSION)\n     {\n         s.read((char*)pn, sizeof(pn));\n     }"
      },
      {
        "sha": "ef276e510339586b41a1a3410fb832c32c5282ef",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -4,6 +4,7 @@\n // file license.txt or http://www.opensource.org/licenses/mit-license.php.\n #include \"headers.h\"\n #include \"strlcpy.h\"\n+#include <boost/algorithm/string/join.hpp>\n #include <boost/program_options/detail/config_file.hpp>\n #include <boost/program_options/parsers.hpp>\n #include <boost/filesystem.hpp>\n@@ -1001,14 +1002,25 @@ string FormatVersion(int nVersion)\n \n string FormatFullVersion()\n {\n-    string s = FormatVersion(VERSION) + pszSubVer;\n+    string s = FormatVersion(CLIENT_VERSION);\n     if (VERSION_IS_BETA) {\n         s += \"-\";\n         s += _(\"beta\");\n     }\n     return s;\n }\n \n+// Format the subversion field according to BIP 14 spec (https://en.bitcoin.it/wiki/BIP_0014)\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n+{\n+    std::ostringstream ss;\n+    ss << \"/\";\n+    ss << name << \":\" << FormatVersion(nClientVersion);\n+    if (!comments.empty())\n+        ss << \"(\" << boost::algorithm::join(comments, \"; \") << \")\";\n+    ss << \"/\";\n+    return ss.str();\n+}\n \n \n "
      },
      {
        "sha": "f5357b7de1b97dfd9036458f9509757f1337b662",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f8ded588a2f78ac2767a60c716a7d15c273b4fc7/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=f8ded588a2f78ac2767a60c716a7d15c273b4fc7",
        "patch": "@@ -205,7 +205,7 @@ void SetMockTime(int64 nMockTimeIn);\n int64 GetAdjustedTime();\n void AddTimeData(unsigned int ip, int64 nTime);\n std::string FormatFullVersion();\n-\n+std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n \n \n \n@@ -559,7 +559,7 @@ inline uint256 Hash(const T1 p1begin, const T1 p1end,\n }\n \n template<typename T>\n-uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=VERSION)\n+uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL_VERSION)\n {\n     // Most of the time is spent allocating and deallocating CDataStream's\n     // buffer.  If this ever needs to be optimized further, make a CStaticStream"
      }
    ]
  }
]