[
  {
    "sha": "fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
    "node_id": "C_kwDOABII59oAKGZhM2NkMjg1MzUzMGM4NmMyNjFhYzcyNjZmZmU0ZjE3MjZmZTljZTY",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-01T15:33:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-01T16:05:33Z"
      },
      "message": "refactor: Remove unused ParsePrechecks from ParseIntegral\n\nAlso:\n* Remove redundant {} from return statement\n* Add missing failing c-string test case and \"-\" and \"+\" strings\n* Add missing failing test cases for non-int32_t integral types",
      "tree": {
        "sha": "6defa00c71da38b5286979f5fa8e4ae110223a2a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6defa00c71da38b5286979f5fa8e4ae110223a2a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiiEAv+PqHh3cgjzFF+x5voPS2PjN7FaIWbXNCAtSYr+4ZkJsopkxfsiifP1mu4\noIVcoPAe/zoGwFIK6ZnGiSPO7erQIe+2ybFmxS9iHO9bnVZ3IekEIYDczK3tpv6E\nE8BZOyn9sPdo/1KYOdE8L1nL4w5RaGAarvumQmtGDTir2llIo4OQUkUqRJqAc+N5\nvGYJnw7PueB7Hd9Yq014m5nYtRDzmetfPvIYLiWOCj4G336EfFpgHfvan2b8wvSX\ntyxreWrKqyso64e+D4h97SL25MH1tSVGJP1g5tY51ud968hD+p2dupDpQOXFuqSv\nRZRsblyRv0Od2pSnN5k6twZ4cSryIB3yS9zPgLOmAWqFT3RiQzVa8JKaZjvwuqen\nqxLjhSJOqnPKY+F1ZMTdGIv3h1dz6Ac4n3KeqXheucyregJwHkO1agdvFNJ7EFAh\nNdzjwSIIeWYhJ0oIOaFIYdDVTtG5/PBU8mrF2qGzEvRdp/xJxnTHw8oHG9XgqAtZ\nQ7HPUz8H\n=WFF/\n-----END PGP SIGNATURE-----",
        "payload": "tree 6defa00c71da38b5286979f5fa8e4ae110223a2a\nparent 35a31d5f7e9cd71a210c1ed10abc9d772ff36049\nauthor MarcoFalke <falke.marco@gmail.com> 1633102415 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1633104333 +0200\n\nrefactor: Remove unused ParsePrechecks from ParseIntegral\n\nAlso:\n* Remove redundant {} from return statement\n* Add missing failing c-string test case and \"-\" and \"+\" strings\n* Add missing failing test cases for non-int32_t integral types\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "35a31d5f7e9cd71a210c1ed10abc9d772ff36049",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35a31d5f7e9cd71a210c1ed10abc9d772ff36049",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/35a31d5f7e9cd71a210c1ed10abc9d772ff36049"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 41,
      "deletions": 28
    },
    "files": [
      {
        "sha": "de78b1bb50997108992a54361110e519c9a4c4b3",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 21,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
        "patch": "@@ -1474,6 +1474,35 @@ BOOST_AUTO_TEST_CASE(test_ParseInt32)\n     BOOST_CHECK(!ParseInt32(\"32482348723847471234\", nullptr));\n }\n \n+template <typename T>\n+static void RunToIntegralTests()\n+{\n+    BOOST_CHECK(!ToIntegral<T>(STRING_WITH_EMBEDDED_NULL_CHAR));\n+    BOOST_CHECK(!ToIntegral<T>(\" 1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1a\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1.1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"1.9\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+01.9\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" -1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\" -1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" +1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\" +1 \"));\n+    BOOST_CHECK(!ToIntegral<T>(\"+-1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-+1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"++1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"--1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"aap\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"0x1\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"-32482348723847471234\"));\n+    BOOST_CHECK(!ToIntegral<T>(\"32482348723847471234\"));\n+}\n+\n BOOST_AUTO_TEST_CASE(test_ToIntegral)\n {\n     BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"1234\").value(), 1'234);\n@@ -1486,27 +1515,14 @@ BOOST_AUTO_TEST_CASE(test_ToIntegral)\n     BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-1234\").value(), -1'234);\n     BOOST_CHECK_EQUAL(ToIntegral<int32_t>(\"-1\").value(), -1);\n \n-    BOOST_CHECK(!ToIntegral<int32_t>(\" 1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"1 \"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"1a\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"1.1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"1.9\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"+01.9\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\" -1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"-1 \"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\" -1 \"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"+1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\" +1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\" +1 \"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"+-1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"-+1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"++1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"--1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"aap\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"0x1\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"-32482348723847471234\"));\n-    BOOST_CHECK(!ToIntegral<int32_t>(\"32482348723847471234\"));\n+    RunToIntegralTests<uint64_t>();\n+    RunToIntegralTests<int64_t>();\n+    RunToIntegralTests<uint32_t>();\n+    RunToIntegralTests<int32_t>();\n+    RunToIntegralTests<uint16_t>();\n+    RunToIntegralTests<int16_t>();\n+    RunToIntegralTests<uint8_t>();\n+    RunToIntegralTests<int8_t>();\n \n     BOOST_CHECK(!ToIntegral<int64_t>(\"-9223372036854775809\"));\n     BOOST_CHECK_EQUAL(ToIntegral<int64_t>(\"-9223372036854775808\").value(), -9'223'372'036'854'775'807LL - 1LL);"
      },
      {
        "sha": "90bf39f010058a32697716d85d90fb090f907145",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
        "patch": "@@ -281,16 +281,11 @@ std::string DecodeBase32(const std::string& str, bool* pf_invalid)\n     return std::string((const char*)vchRet.data(), vchRet.size());\n }\n \n-[[nodiscard]] static bool ParsePrechecks(const std::string&);\n-\n namespace {\n template <typename T>\n bool ParseIntegral(const std::string& str, T* out)\n {\n     static_assert(std::is_integral<T>::value);\n-    if (!ParsePrechecks(str)) {\n-        return false;\n-    }\n     // Replicate the exact behavior of strtol/strtoll/strtoul/strtoull when\n     // handling leading +/- for backwards compatibility.\n     if (str.length() >= 2 && str[0] == '+' && str[1] == '-') {"
      },
      {
        "sha": "07e1966890207e92c0615008f387587065df89dc",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
        "patch": "@@ -97,7 +97,9 @@ constexpr inline bool IsSpace(char c) noexcept {\n }\n \n /**\n- * Convert string to integral type T.\n+ * Convert string to integral type T. Leading whitespace, a leading +, or any\n+ * trailing character fail the parsing. The required format expressed as regex\n+ * is `-?[0-9]+`.\n  *\n  * @returns std::nullopt if the entire string could not be parsed, or if the\n  *   parsed value is not in the range representable by the type T.\n@@ -111,7 +113,7 @@ std::optional<T> ToIntegral(const std::string& str)\n     if (first_nonmatching != str.data() + str.size() || error_condition != std::errc{}) {\n         return std::nullopt;\n     }\n-    return {result};\n+    return result;\n }\n \n /**"
      }
    ]
  },
  {
    "sha": "fa9d72a7947d2cff541794e21e0040c3c1d43b32",
    "node_id": "C_kwDOABII59oAKGZhOWQ3MmE3OTQ3ZDJjZmY1NDE3OTRlMjFlMDA0MGMzYzFkNDNiMzI",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-04T07:55:05Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-10-04T07:46:17Z"
      },
      "message": "Remove unused ParseDouble and ParsePrechecks",
      "tree": {
        "sha": "315f11754660c0efecaf1c64123bb7ebcf279308",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/315f11754660c0efecaf1c64123bb7ebcf279308"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa9d72a7947d2cff541794e21e0040c3c1d43b32",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUiDsQv/RwrBCjktByxYwKUesvVuS8vVwL9CTKyqpV1oi2ep5eqRVDpzxGmynOBF\nc6IUP8d0r7ItUFXQ+xVQ1QsgF0TXmcKiuIV8y9whz9jmkUknXhSOQ679U+As75kJ\nJ34UDHAyfmXPRjztBsy4cB7nsjhvZG7eO9b3UIADC+PpsyBKzNsNvxLZRISDSY/p\nyYotvvxVBeXUHi4IAsLR7xEIYDDGaHYYm0LTN8vxyHDMS0XYQDJt+JC3ZI4YH2yt\ne6bzSIUbFLZ5+IKO3D+sTveZLpI6Hk8H9L5FLVJJ2s60VR/ya3C1ZsVw9NULOlKy\nkWtJy8FYQ/SX27SgMh6cVbOmp9e6OJZcipVh+zYnmMClTz83MxlMHYtyXVsQl7N/\nHvKeYEkCtbRCwA91+yDvqc8F2JHK3Y3xp7nUGD0czFOzTeP8qj5V5LikToESKIv1\ndOHCBm7vLCESeR8fK6inycRbnyb1AuPYstxhq/Fa/Jnt865b8apOoGzYTBOjJgGF\nFja6XGGi\n=apxz\n-----END PGP SIGNATURE-----",
        "payload": "tree 315f11754660c0efecaf1c64123bb7ebcf279308\nparent fa3cd2853530c86c261ac7266ffe4f1726fe9ce6\nauthor MarcoFalke <falke.marco@gmail.com> 1633334105 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1633333577 +0200\n\nRemove unused ParseDouble and ParsePrechecks\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9d72a7947d2cff541794e21e0040c3c1d43b32",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa9d72a7947d2cff541794e21e0040c3c1d43b32",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa9d72a7947d2cff541794e21e0040c3c1d43b32/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa3cd2853530c86c261ac7266ffe4f1726fe9ce6"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 0,
      "deletions": 61
    },
    "files": [
      {
        "sha": "33b500429080acd2375c8c348882c70f1b56ea2f",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=fa9d72a7947d2cff541794e21e0040c3c1d43b32",
        "patch": "@@ -14,9 +14,6 @@ FUZZ_TARGET(parse_numbers)\n \n     (void)ParseMoney(random_string);\n \n-    double d;\n-    (void)ParseDouble(random_string, &d);\n-\n     uint8_t u8;\n     (void)ParseUInt8(random_string, &u8);\n "
      },
      {
        "sha": "dbd94eedfa4683afd377f7b27312c72b0650e95b",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=fa9d72a7947d2cff541794e21e0040c3c1d43b32",
        "patch": "@@ -1730,32 +1730,6 @@ BOOST_AUTO_TEST_CASE(test_ParseUInt64)\n     BOOST_CHECK(!ParseUInt64(\"-1234\", &n));\n }\n \n-BOOST_AUTO_TEST_CASE(test_ParseDouble)\n-{\n-    double n;\n-    // Valid values\n-    BOOST_CHECK(ParseDouble(\"1234\", nullptr));\n-    BOOST_CHECK(ParseDouble(\"0\", &n) && n == 0.0);\n-    BOOST_CHECK(ParseDouble(\"1234\", &n) && n == 1234.0);\n-    BOOST_CHECK(ParseDouble(\"01234\", &n) && n == 1234.0); // no octal\n-    BOOST_CHECK(ParseDouble(\"2147483647\", &n) && n == 2147483647.0);\n-    BOOST_CHECK(ParseDouble(\"-2147483648\", &n) && n == -2147483648.0);\n-    BOOST_CHECK(ParseDouble(\"-1234\", &n) && n == -1234.0);\n-    BOOST_CHECK(ParseDouble(\"1e6\", &n) && n == 1e6);\n-    BOOST_CHECK(ParseDouble(\"-1e6\", &n) && n == -1e6);\n-    // Invalid values\n-    BOOST_CHECK(!ParseDouble(\"\", &n));\n-    BOOST_CHECK(!ParseDouble(\" 1\", &n)); // no padding inside\n-    BOOST_CHECK(!ParseDouble(\"1 \", &n));\n-    BOOST_CHECK(!ParseDouble(\"1a\", &n));\n-    BOOST_CHECK(!ParseDouble(\"aap\", &n));\n-    BOOST_CHECK(!ParseDouble(\"0x1\", &n)); // no hex\n-    BOOST_CHECK(!ParseDouble(STRING_WITH_EMBEDDED_NULL_CHAR, &n));\n-    // Overflow and underflow\n-    BOOST_CHECK(!ParseDouble(\"-1e10000\", nullptr));\n-    BOOST_CHECK(!ParseDouble(\"1e10000\", nullptr));\n-}\n-\n BOOST_AUTO_TEST_CASE(test_FormatParagraph)\n {\n     BOOST_CHECK_EQUAL(FormatParagraph(\"\", 79, 0), \"\");"
      },
      {
        "sha": "53989a8d28ec9befc0b6a86c6de0e0d1c278dda7",
        "filename": "src/util/strencodings.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 25,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/util/strencodings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/util/strencodings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.cpp?ref=fa9d72a7947d2cff541794e21e0040c3c1d43b32",
        "patch": "@@ -302,17 +302,6 @@ bool ParseIntegral(const std::string& str, T* out)\n }\n }; // namespace\n \n-[[nodiscard]] static bool ParsePrechecks(const std::string& str)\n-{\n-    if (str.empty()) // No empty string allowed\n-        return false;\n-    if (str.size() >= 1 && (IsSpace(str[0]) || IsSpace(str[str.size()-1]))) // No padding allowed\n-        return false;\n-    if (!ValidAsCString(str)) // No embedded NUL characters allowed\n-        return false;\n-    return true;\n-}\n-\n bool ParseInt32(const std::string& str, int32_t* out)\n {\n     return ParseIntegral<int32_t>(str, out);\n@@ -343,20 +332,6 @@ bool ParseUInt64(const std::string& str, uint64_t* out)\n     return ParseIntegral<uint64_t>(str, out);\n }\n \n-bool ParseDouble(const std::string& str, double *out)\n-{\n-    if (!ParsePrechecks(str))\n-        return false;\n-    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n-        return false;\n-    std::istringstream text(str);\n-    text.imbue(std::locale::classic());\n-    double result;\n-    text >> result;\n-    if(out) *out = result;\n-    return text.eof() && !text.fail();\n-}\n-\n std::string FormatParagraph(const std::string& in, size_t width, size_t indent)\n {\n     std::stringstream out;"
      },
      {
        "sha": "688707d18848726517300125d300e09ee8c315bc",
        "filename": "src/util/strencodings.h",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/util/strencodings.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa9d72a7947d2cff541794e21e0040c3c1d43b32/src/util/strencodings.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/strencodings.h?ref=fa9d72a7947d2cff541794e21e0040c3c1d43b32",
        "patch": "@@ -158,13 +158,6 @@ std::optional<T> ToIntegral(const std::string& str)\n  */\n [[nodiscard]] bool ParseUInt64(const std::string& str, uint64_t *out);\n \n-/**\n- * Convert string to double with strict parse error feedback.\n- * @returns true if the entire string could be parsed as valid double,\n- *   false if not the entire string could be parsed or when overflow or underflow occurred.\n- */\n-[[nodiscard]] bool ParseDouble(const std::string& str, double *out);\n-\n /**\n  * Convert a span of bytes to a lower-case hexadecimal string.\n  */"
      }
    ]
  }
]