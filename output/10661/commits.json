[
  {
    "sha": "baa8e4c189bfb91c13eb07593002905be83e0596",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWE4ZTRjMTg5YmZiOTFjMTNlYjA3NTkzMDAyOTA1YmU4M2UwNTk2",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-06-23T18:17:21Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-07-04T16:05:18Z"
      },
      "message": "Add multiwallet support to wallet RPCs\n\nThis change adds an optional wallet=filename argument to RPCs that access the\nwallet so they can operate on wallets other than the default wallet.\n\nExample usage:\n\n    bitcoind -regtest -wallet=w1.dat -wallet=w2.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w1.dat\n    bitcoin-cli -regtest -named getwalletinfo wallet=w2.dat\n    bitcoin-cli -regtest -named getbalance wallet=w2.dat",
      "tree": {
        "sha": "52db68da763542d7f18addfa5093e1644534112c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/52db68da763542d7f18addfa5093e1644534112c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/baa8e4c189bfb91c13eb07593002905be83e0596",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baa8e4c189bfb91c13eb07593002905be83e0596",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/baa8e4c189bfb91c13eb07593002905be83e0596",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/baa8e4c189bfb91c13eb07593002905be83e0596/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6dbcc74a0e0a7d45d20b03bb4eb41a027397a21d"
      }
    ],
    "stats": {
      "total": 534,
      "additions": 310,
      "deletions": 224
    },
    "files": [
      {
        "sha": "e2ba115d5d6cc657b836bc21c74a270aade04e0d",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 12,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -44,10 +44,12 @@\n  **/\n UniValue getinfo(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getinfo\\n\"\n+            \"getinfo ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns an object containing various state info.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"      (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"version\\\": xxxxx,           (numeric) the server version\\n\"\n@@ -73,10 +75,14 @@ UniValue getinfo(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n \n     LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : NULL);\n #else\n+    if (!request.params[0].isNull()) {\n+        throw std::runtime_error(\"Wallet support is not enabled.\");\n+    }\n+\n     LOCK(cs_main);\n #endif\n \n@@ -160,12 +166,13 @@ class DescribeAddressVisitor : public boost::static_visitor<UniValue>\n \n UniValue validateaddress(const JSONRPCRequest& request)\n {\n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"validateaddress \\\"address\\\"\\n\"\n+            \"validateaddress \\\"address\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nReturn information about the given bitcoin address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"     (string, required) The bitcoin address to validate\\n\"\n+            \"2. \\\"wallet\\\"      (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"isvalid\\\" : true|false,       (boolean) If the address is valid or not. If not, this is the only property returned.\\n\"\n@@ -187,10 +194,14 @@ UniValue validateaddress(const JSONRPCRequest& request)\n         );\n \n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n \n     LOCK2(cs_main, pwallet ? &pwallet->cs_wallet : NULL);\n #else\n+    if (!request.params[1].isNull()) {\n+        throw std::runtime_error(\"Wallet support is not enabled.\");\n+    }\n+\n     LOCK(cs_main);\n #endif\n \n@@ -307,14 +318,17 @@ CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniValue& pa\n UniValue createmultisig(const JSONRPCRequest& request)\n {\n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n #else\n+    if (!request.params[2].isNull()) {\n+        throw std::runtime_error(\"Wallet support is not enabled.\");\n+    }\n     CWallet * const pwallet = NULL;\n #endif\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n     {\n-        std::string msg = \"createmultisig nrequired [\\\"key\\\",...]\\n\"\n+        std::string msg = \"createmultisig nrequired [\\\"key\\\",...] ( \\\"wallet\\\" )\\n\"\n             \"\\nCreates a multi-signature address with n signature of m keys required.\\n\"\n             \"It returns a json object with the address and redeemScript.\\n\"\n \n@@ -325,6 +339,7 @@ UniValue createmultisig(const JSONRPCRequest& request)\n             \"       \\\"key\\\"    (string) bitcoin address or hex-encoded public key\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n+            \"3. \\\"wallet\\\"     (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -638,10 +653,10 @@ UniValue echo(const JSONRPCRequest& request)\n static const CRPCCommand commands[] =\n { //  category              name                      actor (function)         okSafeMode\n   //  --------------------- ------------------------  -----------------------  ----------\n-    { \"control\",            \"getinfo\",                &getinfo,                true,  {} }, /* uses wallet if enabled */\n+    { \"control\",            \"getinfo\",                &getinfo,                true,  {\"wallet\"} }, /* uses wallet if enabled */\n     { \"control\",            \"getmemoryinfo\",          &getmemoryinfo,          true,  {\"mode\"} },\n-    { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"address\"} }, /* uses wallet if enabled */\n-    { \"util\",               \"createmultisig\",         &createmultisig,         true,  {\"nrequired\",\"keys\"} },\n+    { \"util\",               \"validateaddress\",        &validateaddress,        true,  {\"address\",\"wallet\"} }, /* uses wallet if enabled */\n+    { \"util\",               \"createmultisig\",         &createmultisig,         true,  {\"nrequired\",\"keys\",\"wallet\"} },\n     { \"util\",               \"verifymessage\",          &verifymessage,          true,  {\"address\",\"signature\",\"message\"} },\n     { \"util\",               \"signmessagewithprivkey\", &signmessagewithprivkey, true,  {\"privkey\",\"message\"} },\n "
      },
      {
        "sha": "1a98bc917d529a82c15c638e5fbcef58cd33dfb9",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -556,12 +556,16 @@ static void TxInErrorToJSON(const CTxIn& txin, UniValue& vErrorsRet, const std::\n UniValue signrawtransaction(const JSONRPCRequest& request)\n {\n #ifdef ENABLE_WALLET\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[4]);\n+#else\n+    if (!request.params[4].isNull()) {\n+        throw std::runtime_error(\"Wallet support is not enabled.\");\n+    }\n #endif\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype )\\n\"\n+            \"signrawtransaction \\\"hexstring\\\" ( [{\\\"txid\\\":\\\"id\\\",\\\"vout\\\":n,\\\"scriptPubKey\\\":\\\"hex\\\",\\\"redeemScript\\\":\\\"hex\\\"},...] [\\\"privatekey1\\\",...] sighashtype ) ( \\\"wallet\\\" )\\n\"\n             \"\\nSign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"The second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n             \"this transaction depends on but may not yet be in the block chain.\\n\"\n@@ -596,6 +600,7 @@ UniValue signrawtransaction(const JSONRPCRequest& request)\n             \"       \\\"ALL|ANYONECANPAY\\\"\\n\"\n             \"       \\\"NONE|ANYONECANPAY\\\"\\n\"\n             \"       \\\"SINGLE|ANYONECANPAY\\\"\\n\"\n+            \"5. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -904,7 +909,7 @@ static const CRPCCommand commands[] =\n     { \"rawtransactions\",    \"decoderawtransaction\",   &decoderawtransaction,   true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"decodescript\",           &decodescript,           true,  {\"hexstring\"} },\n     { \"rawtransactions\",    \"sendrawtransaction\",     &sendrawtransaction,     false, {\"hexstring\",\"allowhighfees\"} },\n-    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\"} }, /* uses wallet if enabled */\n+    { \"rawtransactions\",    \"signrawtransaction\",     &signrawtransaction,     false, {\"hexstring\",\"prevtxs\",\"privkeys\",\"sighashtype\",\"wallet\"} }, /* uses wallet if enabled */\n \n     { \"blockchain\",         \"gettxoutproof\",          &gettxoutproof,          true,  {\"txids\", \"blockhash\"} },\n     { \"blockchain\",         \"verifytxoutproof\",       &verifytxoutproof,       true,  {\"proof\"} },"
      },
      {
        "sha": "cd77e7064f523d1a0d8b3f2417d5dbe07e671d00",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 29,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -72,19 +72,20 @@ std::string DecodeDumpString(const std::string &str) {\n \n UniValue importprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan )\\n\"\n+            \"importprivkey \\\"bitcoinprivkey\\\" ( \\\"label\\\" ) ( rescan ) ( \\\"wallet\\\" )\\n\"\n             \"\\nAdds a private key (as returned by dumpprivkey) to your wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"bitcoinprivkey\\\"   (string, required) The private key (see dumpprivkey)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. \\\"wallet\\\"           (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump a private key\\n\"\n@@ -156,15 +157,17 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n UniValue abortrescan(const JSONRPCRequest& request)\n {\n-    CWallet* const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet* const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"abortrescan\\n\"\n+            \"abortrescan ( \\\"wallet\\\" )\\n\"\n             \"\\nStops current wallet rescan triggered e.g. by an importprivkey call.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n@@ -216,20 +219,21 @@ void ImportAddress(CWallet* const pwallet, const CBitcoinAddress& address, const\n \n UniValue importaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[4]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh )\\n\"\n+            \"importaddress \\\"address\\\" ( \\\"label\\\" rescan p2sh ) ( \\\"wallet\\\" )\\n\"\n             \"\\nAdds a script (in hex) or address that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"script\\\"           (string, required) The hex-encoded script (or address)\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n             \"4. p2sh                 (boolean, optional, default=false) Add the P2SH version of the script as well\\n\"\n+            \"5. \\\"wallet\\\"           (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"If you have the full public key, you should call importpubkey instead of this.\\n\"\n             \"\\nNote: If you import a non-standard raw script in hex form, outputs sending to it will be treated\\n\"\n@@ -286,18 +290,19 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n UniValue importprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"importprunedfunds\\n\"\n+            \"importprunedfunds \\\"rawtransaction\\\" \\\"txoutproof\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nImports funds without rescan. Corresponding address or script must previously be included in wallet. Aimed towards pruned wallets. The end-user is responsible to import additional transactions that subsequently spend the imported outputs or rescan after the point in the blockchain the transaction is included.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"rawtransaction\\\" (string, required) A raw transaction in hex funding an already-existing address in wallet\\n\"\n             \"2. \\\"txoutproof\\\"     (string, required) The hex output from gettxoutproof that contains the transaction\\n\"\n+            \"3. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n         );\n \n     CMutableTransaction tx;\n@@ -347,17 +352,18 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n \n UniValue removeprunedfunds(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"removeprunedfunds \\\"txid\\\"\\n\"\n+            \"removeprunedfunds \\\"txid\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDeletes the specified transaction from the wallet. Meant for use with pruned wallets and as a companion to importprunedfunds. This will affect wallet balances.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"           (string, required) The hex-encoded id of the transaction you are deleting\\n\"\n+            \"2. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n@@ -385,19 +391,20 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n \n UniValue importpubkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan )\\n\"\n+            \"importpubkey \\\"pubkey\\\" ( \\\"label\\\" rescan ) ( \\\"wallet\\\" )\\n\"\n             \"\\nAdds a public key (in hex) that can be watched as if it were in your wallet but cannot be used to spend.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"pubkey\\\"           (string, required) The hex-encoded public key\\n\"\n             \"2. \\\"label\\\"            (string, optional, default=\\\"\\\") An optional label\\n\"\n             \"3. rescan               (boolean, optional, default=true) Rescan the wallet for transactions\\n\"\n+            \"4. \\\"wallet\\\"           (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nNote: This call can take minutes to complete if rescan is true.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nImport a public key with rescan\\n\"\n@@ -445,17 +452,18 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n UniValue importwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"importwallet \\\"filename\\\"\\n\"\n+            \"importwallet \\\"filename\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nImports keys from a wallet dump file (see dumpwallet).\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The wallet file\\n\"\n+            \"2. \\\"wallet\\\"      (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nDump the wallet\\n\"\n             + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +\n@@ -546,18 +554,19 @@ UniValue importwallet(const JSONRPCRequest& request)\n \n UniValue dumpprivkey(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"dumpprivkey \\\"address\\\"\\n\"\n+            \"dumpprivkey \\\"address\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nReveals the private key corresponding to 'address'.\\n\"\n             \"Then the importprivkey can be used with this output\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"   (string, required) The bitcoin address for the private key\\n\"\n+            \"2. \\\"wallet\\\"    (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"key\\\"                (string) The private key\\n\"\n             \"\\nExamples:\\n\"\n@@ -587,17 +596,18 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"dumpwallet \\\"filename\\\"\\n\"\n+            \"dumpwallet \\\"filename\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDumps all wallet keys in a human-readable format.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"filename\\\"    (string, required) The filename with path (either absolute or relative to bitcoind)\\n\"\n+            \"2. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{                           (json object)\\n\"\n             \"  \\\"filename\\\" : {        (string) The filename with full absolute path\\n\"\n@@ -1020,15 +1030,15 @@ int64_t GetImportTimestamp(const UniValue& data, int64_t now)\n \n UniValue importmulti(const JSONRPCRequest& mainRequest)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(mainRequest, mainRequest.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, mainRequest.fHelp)) {\n         return NullUniValue;\n     }\n \n     // clang-format off\n-    if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n+    if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 3)\n         throw std::runtime_error(\n-            \"importmulti \\\"requests\\\" \\\"options\\\"\\n\\n\"\n+            \"importmulti \\\"requests\\\" \\\"options\\\" ( \\\"wallet\\\" )\\n\\n\"\n             \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\\n\\n\"\n             \"Arguments:\\n\"\n             \"1. requests     (array, required) Data to be imported\\n\"\n@@ -1054,6 +1064,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n             \"  {\\n\"\n             \"     \\\"rescan\\\": <false>,         (boolean, optional, default: true) Stating if should rescan the blockchain after all imports\\n\"\n             \"  }\\n\"\n+            \"3. \\\"wallet\\\"              (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\" +\n             HelpExampleCli(\"importmulti\", \"'[{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my address>\\\" }, \\\"timestamp\\\":1455191478 }, \"\n                                           \"{ \\\"scriptPubKey\\\": { \\\"address\\\": \\\"<my 2nd address>\\\" }, \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +"
      },
      {
        "sha": "b6b454540c3dfdfc72180a1c4f39458b5efb9ea3",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 230,
        "deletions": 177,
        "changes": 407,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -30,9 +30,16 @@\n \n #include <univalue.h>\n \n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request)\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request, const UniValue& param)\n {\n-    // TODO: Some way to access secondary wallets\n+    if (!param.isNull()) {\n+        for (const auto& wallet : ::vpwallets) {\n+            if (param.getValStr() == wallet->GetName()) {\n+                return wallet;\n+            }\n+        }\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Requested wallet does not exist or is not loaded\");\n+    }\n     return vpwallets.empty() ? nullptr : vpwallets[0];\n }\n \n@@ -110,19 +117,20 @@ std::string AccountFromValue(const UniValue& value)\n \n UniValue getnewaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getnewaddress ( \\\"account\\\" )\\n\"\n+            \"getnewaddress ( \\\"account\\\" ) ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address for receiving payments.\\n\"\n             \"If 'account' is specified (DEPRECATED), it is added to the address book \\n\"\n             \"so payments received with the address will be credited to 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, optional) DEPRECATED. The account name for the address to be linked to. If not provided, the default account \\\"\\\" is used. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created if there is no account by the given name.\\n\"\n+            \"2. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The new bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -166,17 +174,18 @@ CBitcoinAddress GetAccountAddress(CWallet* const pwallet, std::string strAccount\n \n UniValue getaccountaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getaccountaddress \\\"account\\\"\\n\"\n+            \"getaccountaddress \\\"account\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns the current Bitcoin address for receiving payments to this account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"       (string, required) The account name for the address. It can also be set to the empty string \\\"\\\" to represent the default account. The account does not need to exist, it will be created and a new address created  if there is no account by the given name.\\n\"\n+            \"2. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"          (string) The account bitcoin address\\n\"\n             \"\\nExamples:\\n\"\n@@ -200,16 +209,18 @@ UniValue getaccountaddress(const JSONRPCRequest& request)\n \n UniValue getrawchangeaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getrawchangeaddress\\n\"\n+            \"getrawchangeaddress ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n             \"This is for use with raw transactions, NOT normal use.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"address\\\"    (string) The address\\n\"\n             \"\\nExamples:\\n\"\n@@ -238,18 +249,19 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n \n UniValue setaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"setaccount \\\"address\\\" \\\"account\\\"\\n\"\n+            \"setaccount \\\"address\\\" \\\"account\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Sets the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to be associated with an account.\\n\"\n             \"2. \\\"account\\\"         (string, required) The account to assign the address to.\\n\"\n+            \"3. \\\"wallet\\\"          (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setaccount\", \"\\\"1D1ZrZNe3JUo7ZycKEYQQiQAWd9y54F4XX\\\", \\\"tabby\\\"\")\n@@ -285,17 +297,18 @@ UniValue setaccount(const JSONRPCRequest& request)\n \n UniValue getaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getaccount \\\"address\\\"\\n\"\n+            \"getaccount \\\"address\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns the account associated with the given address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address for account lookup.\\n\"\n+            \"2. \\\"wallet\\\"          (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"accountname\\\"        (string) the account address\\n\"\n             \"\\nExamples:\\n\"\n@@ -320,17 +333,18 @@ UniValue getaccount(const JSONRPCRequest& request)\n \n UniValue getaddressesbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"getaddressesbyaccount \\\"account\\\"\\n\"\n+            \"getaddressesbyaccount \\\"account\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns the list of addresses for the given account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"        (string, required) The account name.\\n\"\n+            \"2. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"[                     (json array of string)\\n\"\n             \"  \\\"address\\\"         (string) a bitcoin address associated with the given account\\n\"\n@@ -396,14 +410,14 @@ static void SendMoney(CWallet * const pwallet, const CTxDestination &address, CA\n \n UniValue sendtoaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[5]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 6)\n         throw std::runtime_error(\n-            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount )\\n\"\n+            \"sendtoaddress \\\"address\\\" amount ( \\\"comment\\\" \\\"comment_to\\\" subtractfeefromamount ) ( \\\"wallet\\\" )\\n\"\n             \"\\nSend an amount to a given address.\\n\"\n             + HelpRequiringPassphrase(pwallet) +\n             \"\\nArguments:\\n\"\n@@ -416,6 +430,7 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n             \"                             transaction, just kept in your wallet.\\n\"\n             \"5. subtractfeefromamount  (boolean, optional, default=false) The fee will be deducted from the amount being sent.\\n\"\n             \"                             The recipient will receive less bitcoins than you enter in the amount field.\\n\"\n+            \"6. \\\"wallet\\\"             (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                  (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -456,17 +471,19 @@ UniValue sendtoaddress(const JSONRPCRequest& request)\n \n UniValue listaddressgroupings(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp)\n         throw std::runtime_error(\n-            \"listaddressgroupings\\n\"\n+            \"listaddressgroupings ( \\\"wallet\\\" )\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n             \"made public by common use as inputs or as the resulting change\\n\"\n             \"in past transactions\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  [\\n\"\n@@ -509,19 +526,20 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n \n UniValue signmessage(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 2)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"signmessage \\\"address\\\" \\\"message\\\"\\n\"\n+            \"signmessage \\\"address\\\" \\\"message\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nSign a message with the private key of an address\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address to use for the private key.\\n\"\n             \"2. \\\"message\\\"         (string, required) The message to create a signature of.\\n\"\n+            \"3. \\\"wallet\\\"          (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"signature\\\"          (string) The signature of the message encoded in base 64\\n\"\n             \"\\nExamples:\\n\"\n@@ -568,18 +586,19 @@ UniValue signmessage(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getreceivedbyaddress \\\"address\\\" ( minconf )\\n\"\n+            \"getreceivedbyaddress \\\"address\\\" ( minconf ) ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns the total amount received by the given address in transactions with at least minconf confirmations.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"         (string, required) The bitcoin address for transactions.\\n\"\n             \"2. minconf             (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"3. \\\"wallet\\\"          (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"amount   (numeric) The total amount in \" + CURRENCY_UNIT + \" received at this address.\\n\"\n             \"\\nExamples:\\n\"\n@@ -628,18 +647,19 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"getreceivedbyaccount \\\"account\\\" ( minconf )\\n\"\n+            \"getreceivedbyaccount \\\"account\\\" ( minconf ) ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns the total amount received by addresses with <account> in transactions with at least [minconf] confirmations.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"      (string, required) The selected account, may be the default account using \\\"\\\".\\n\"\n             \"2. minconf          (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n+            \"3. \\\"wallet\\\"       (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -687,14 +707,14 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n UniValue getbalance(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"getbalance ( \\\"account\\\" minconf include_watchonly )\\n\"\n+            \"getbalance ( \\\"account\\\" minconf include_watchonly ) ( \\\"wallet\\\" )\\n\"\n             \"\\nIf account is not specified, returns the server's total available balance.\\n\"\n             \"If account is specified (DEPRECATED), returns the balance in the account.\\n\"\n             \"Note that the account \\\"\\\" is not the same as leaving the parameter out.\\n\"\n@@ -714,6 +734,7 @@ UniValue getbalance(const JSONRPCRequest& request)\n             \"                     avoid passing this argument.\\n\"\n             \"2. minconf           (numeric, optional, default=1) Only include transactions confirmed at least this many times.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Also include balance in watch-only addresses (see 'importaddress')\\n\"\n+            \"4. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"amount              (numeric) The total amount in \" + CURRENCY_UNIT + \" received for this account.\\n\"\n             \"\\nExamples:\\n\"\n@@ -727,17 +748,17 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params.size() == 0)\n+    if (request.params[0].isNull() && request.params[1].isNull() && request.params[2].isNull())\n         return  ValueFromAmount(pwallet->GetBalance());\n \n     const std::string& account_param = request.params[0].get_str();\n     const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n \n     int nMinDepth = 1;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nMinDepth = request.params[1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(request.params.size() > 2)\n+    if(!request.params[2].isNull())\n         if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n@@ -746,14 +767,16 @@ UniValue getbalance(const JSONRPCRequest& request)\n \n UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-                \"getunconfirmedbalance\\n\"\n+                \"getunconfirmedbalance ( \\\"wallet\\\" )\\n\"\n+                \"\\nArguments:\\n\"\n+                \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n                 \"Returns the server's total unconfirmed balance\\n\");\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n@@ -764,21 +787,22 @@ UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n \n UniValue movecmd(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[5]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 3 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n         throw std::runtime_error(\n-            \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" )\\n\"\n+            \"move \\\"fromaccount\\\" \\\"toaccount\\\" amount ( minconf \\\"comment\\\" ) ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Move a specified amount from one account in your wallet to another.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"fromaccount\\\"   (string, required) The name of the account to move funds from. May be the default account using \\\"\\\".\\n\"\n             \"2. \\\"toaccount\\\"     (string, required) The name of the account to move funds to. May be the default account using \\\"\\\".\\n\"\n             \"3. amount            (numeric) Quantity of \" + CURRENCY_UNIT + \" to move between accounts.\\n\"\n             \"4. (dummy)           (numeric, optional) Ignored. Remains for backward compatibility.\\n\"\n             \"5. \\\"comment\\\"       (string, optional) An optional comment, stored in the wallet only.\\n\"\n+            \"6. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"true|false           (boolean) true if successful.\\n\"\n             \"\\nExamples:\\n\"\n@@ -814,14 +838,14 @@ UniValue movecmd(const JSONRPCRequest& request)\n \n UniValue sendfrom(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[6]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 3 || request.params.size() > 6)\n+    if (request.fHelp || request.params.size() < 3 || request.params.size() > 7)\n         throw std::runtime_error(\n-            \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" )\\n\"\n+            \"sendfrom \\\"fromaccount\\\" \\\"toaddress\\\" amount ( minconf \\\"comment\\\" \\\"comment_to\\\" ) ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED (use sendtoaddress). Sent an amount from an account to a bitcoin address.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -837,6 +861,7 @@ UniValue sendfrom(const JSONRPCRequest& request)\n             \"6. \\\"comment_to\\\"        (string, optional) An optional comment to store the name of the person or organization \\n\"\n             \"                                     to which you're sending the transaction. This is not part of the transaction, \\n\"\n             \"                                     it is just kept in your wallet.\\n\"\n+            \"7. \\\"wallet\\\"            (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                 (string) The transaction id.\\n\"\n             \"\\nExamples:\\n\"\n@@ -883,14 +908,14 @@ UniValue sendfrom(const JSONRPCRequest& request)\n \n UniValue sendmany(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[5]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 6)\n         throw std::runtime_error(\n-            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] )\\n\"\n+            \"sendmany \\\"fromaccount\\\" {\\\"address\\\":amount,...} ( minconf \\\"comment\\\" [\\\"address\\\",...] ) ( \\\"wallet\\\" )\\n\"\n             \"\\nSend multiple times. Amounts are double-precision floating point numbers.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments:\\n\"\n@@ -910,6 +935,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n             \"      \\\"address\\\"          (string) Subtract fee from this address\\n\"\n             \"      ,...\\n\"\n             \"    ]\\n\"\n+            \"6. \\\"wallet\\\"              (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\\"txid\\\"                   (string) The transaction id for the send. Only 1 transaction is created regardless of \\n\"\n             \"                                    the number of addresses.\\n\"\n@@ -1006,14 +1032,14 @@ extern CScript _createmultisig_redeemScript(CWallet * const pwallet, const UniVa\n \n UniValue addmultisigaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 2 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 2 || request.params.size() > 4)\n     {\n-        std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" )\\n\"\n+        std::string msg = \"addmultisigaddress nrequired [\\\"key\\\",...] ( \\\"account\\\" ) ( \\\"wallet\\\" )\\n\"\n             \"\\nAdd a nrequired-to-sign multisignature address to the wallet.\\n\"\n             \"Each key is a Bitcoin address or hex-encoded public key.\\n\"\n             \"If 'account' is specified (DEPRECATED), assign address to that account.\\n\"\n@@ -1026,6 +1052,7 @@ UniValue addmultisigaddress(const JSONRPCRequest& request)\n             \"       ...,\\n\"\n             \"     ]\\n\"\n             \"3. \\\"account\\\"      (string, optional) DEPRECATED. An account to assign the addresses to.\\n\"\n+            \"4. \\\"wallet\\\"       (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"address\\\"         (string) A bitcoin address associated with the keys.\\n\"\n@@ -1103,19 +1130,20 @@ class Witnessifier : public boost::static_visitor<bool>\n \n UniValue addwitnessaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n     {\n-        std::string msg = \"addwitnessaddress \\\"address\\\"\\n\"\n+        std::string msg = \"addwitnessaddress \\\"address\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nAdd a witness address for a script (with pubkey or redeemscript known).\\n\"\n             \"It returns the witness script.\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"address\\\"       (string, required) An address known to the wallet\\n\"\n+            \"2. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"\\\"witnessaddress\\\",  (string) The value of the new address (P2SH of witness script).\\n\"\n@@ -1281,19 +1309,20 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n \n UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaddress ( minconf include_empty include_watchonly)\\n\"\n+            \"listreceivedbyaddress ( minconf include_empty include_watchonly ) ( \\\"wallet\\\" )\\n\"\n             \"\\nList balances by receiving address.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include addresses that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n+            \"4. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1325,19 +1354,20 @@ UniValue listreceivedbyaddress(const JSONRPCRequest& request)\n \n UniValue listreceivedbyaccount(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() > 4)\n         throw std::runtime_error(\n-            \"listreceivedbyaccount ( minconf include_empty include_watchonly)\\n\"\n+            \"listreceivedbyaccount ( minconf include_empty include_watchonly ) ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. List balances by account.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf           (numeric, optional, default=1) The minimum number of confirmations before payments are included.\\n\"\n             \"2. include_empty     (bool, optional, default=false) Whether to include accounts that haven't received any payments.\\n\"\n             \"3. include_watchonly (bool, optional, default=false) Whether to include watch-only addresses (see 'importaddress').\\n\"\n+            \"4. \\\"wallet\\\"          (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -1468,20 +1498,21 @@ void AcentryToJSON(const CAccountingEntry& acentry, const std::string& strAccoun\n \n UniValue listtransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[4]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 4)\n+    if (request.fHelp || request.params.size() > 5)\n         throw std::runtime_error(\n-            \"listtransactions ( \\\"account\\\" count skip include_watchonly)\\n\"\n+            \"listtransactions ( \\\"account\\\" count skip include_watchonly ) ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns up to 'count' most recent transactions skipping the first 'from' transactions for account 'account'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"account\\\"    (string, optional) DEPRECATED. The account name. Should be \\\"*\\\".\\n\"\n             \"2. count          (numeric, optional, default=10) The number of transactions to return\\n\"\n             \"3. skip           (numeric, optional, default=0) The number of transactions to skip\\n\"\n             \"4. include_watchonly (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\\n\"\n+            \"5. \\\"wallet\\\"     (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n             \"  {\\n\"\n@@ -1598,18 +1629,19 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n UniValue listaccounts(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"listaccounts ( minconf include_watchonly)\\n\"\n+            \"listaccounts ( minconf include_watchonly) ( \\\"wallet\\\" )\\n\"\n             \"\\nDEPRECATED. Returns Object that has account names as keys, account balances as values.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. minconf             (numeric, optional, default=1) Only include transactions with at least this many confirmations\\n\"\n             \"2. include_watchonly   (bool, optional, default=false) Include balances in watch-only addresses (see 'importaddress')\\n\"\n+            \"3. \\\"wallet\\\"            (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{                      (json object where keys are account names, and values are numeric balances\\n\"\n             \"  \\\"account\\\": x.xxx,  (numeric) The property name is the account name, and the value is the total balance for the account.\\n\"\n@@ -1680,19 +1712,20 @@ UniValue listaccounts(const JSONRPCRequest& request)\n \n UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[3]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp)\n         throw std::runtime_error(\n-            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n+            \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly) ( \\\"wallet\\\" )\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"blockhash\\\"            (string, optional) The block hash to list transactions since\\n\"\n             \"2. target_confirmations:    (numeric, optional) The confirmations required, must be 1 or more\\n\"\n             \"3. include_watchonly:       (bool, optional, default=false) Include transactions to watch-only addresses (see 'importaddress')\"\n+            \"4. \\\"wallet\\\"               (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"transactions\\\": [\\n\"\n@@ -1787,18 +1820,19 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n \n UniValue gettransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"gettransaction \\\"txid\\\" ( include_watchonly )\\n\"\n+            \"gettransaction \\\"txid\\\" ( include_watchonly ) ( \\\"wallet\\\" )\\n\"\n             \"\\nGet detailed information about in-wallet transaction <txid>\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"                  (string, required) The transaction id\\n\"\n             \"2. \\\"include_watchonly\\\"     (bool, optional, default=false) Whether to include watch-only addresses in balance calculation and details[]\\n\"\n+            \"3. \\\"wallet\\\"                (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"amount\\\" : x.xxx,        (numeric) The transaction amount in \" + CURRENCY_UNIT + \"\\n\"\n@@ -1876,21 +1910,22 @@ UniValue gettransaction(const JSONRPCRequest& request)\n \n UniValue abandontransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"abandontransaction \\\"txid\\\"\\n\"\n+            \"abandontransaction \\\"txid\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nMark in-wallet transaction <txid> as abandoned\\n\"\n             \"This will mark this transaction and all its in-wallet descendants as abandoned which will allow\\n\"\n             \"for their inputs to be respent.  It can be used to replace \\\"stuck\\\" or evicted transactions.\\n\"\n             \"It only works on transactions which are not included in a block and are not currently in the mempool.\\n\"\n             \"It has no effect on transactions which are already conflicted or abandoned.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"txid\\\"    (string, required) The transaction id\\n\"\n+            \"2. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n@@ -1915,17 +1950,18 @@ UniValue abandontransaction(const JSONRPCRequest& request)\n \n UniValue backupwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"backupwallet \\\"destination\\\"\\n\"\n+            \"backupwallet \\\"destination\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nSafely copies current wallet file to destination, which can be a directory or a path with filename.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"destination\\\"   (string) The destination directory or file\\n\"\n+            \"2. \\\"wallet\\\"           (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n@@ -1944,18 +1980,19 @@ UniValue backupwallet(const JSONRPCRequest& request)\n \n UniValue keypoolrefill(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"keypoolrefill ( newsize )\\n\"\n+            \"keypoolrefill ( newsize ) ( \\\"wallet\\\" )\\n\"\n             \"\\nFills the keypool.\"\n             + HelpRequiringPassphrase(pwallet) + \"\\n\"\n             \"\\nArguments\\n\"\n             \"1. newsize     (numeric, optional, default=100) The new keypool size\\n\"\n+            \"2. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n@@ -1991,19 +2028,20 @@ static void LockWallet(CWallet* pWallet)\n \n UniValue walletpassphrase(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() < 2 || request.params.size() > 3)) {\n         throw std::runtime_error(\n-            \"walletpassphrase \\\"passphrase\\\" timeout\\n\"\n+            \"walletpassphrase \\\"passphrase\\\" timeout ( \\\"wallet\\\" )\\n\"\n             \"\\nStores the wallet decryption key in memory for 'timeout' seconds.\\n\"\n             \"This is needed prior to performing transactions related to private keys such as sending bitcoins\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"     (string, required) The wallet passphrase\\n\"\n             \"2. timeout            (numeric, required) The time to keep the decryption key in seconds.\\n\"\n+            \"3. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nNote:\\n\"\n             \"Issuing the walletpassphrase command while the wallet is already unlocked will set a new unlock\\n\"\n             \"time that overrides the old one.\\n\"\n@@ -2055,18 +2093,19 @@ UniValue walletpassphrase(const JSONRPCRequest& request)\n \n UniValue walletpassphrasechange(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 2)) {\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() < 2 || request.params.size() > 3)) {\n         throw std::runtime_error(\n-            \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\"\\n\"\n+            \"walletpassphrasechange \\\"oldpassphrase\\\" \\\"newpassphrase\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nChanges the wallet passphrase from 'oldpassphrase' to 'newpassphrase'.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"oldpassphrase\\\"      (string) The current passphrase\\n\"\n             \"2. \\\"newpassphrase\\\"      (string) The new passphrase\\n\"\n+            \"3. \\\"wallet\\\"             (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             + HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n@@ -2106,17 +2145,19 @@ UniValue walletpassphrasechange(const JSONRPCRequest& request)\n \n UniValue walletlock(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() != 0)) {\n+    if (pwallet->IsCrypted() && (request.fHelp || request.params.size() > 1)) {\n         throw std::runtime_error(\n-            \"walletlock\\n\"\n+            \"walletlock ( \\\"wallet\\\" )\\n\"\n             \"\\nRemoves the wallet encryption key from memory, locking the wallet.\\n\"\n             \"After calling this method, you will need to call walletpassphrase again\\n\"\n             \"before being able to call any methods which require the wallet to be unlocked.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nSet the passphrase for 2 minutes to perform a transaction\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 120\") +\n@@ -2146,14 +2187,14 @@ UniValue walletlock(const JSONRPCRequest& request)\n \n UniValue encryptwallet(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() != 1)) {\n+    if (!pwallet->IsCrypted() && (request.fHelp || request.params.size() < 1 || request.params.size() > 2)) {\n         throw std::runtime_error(\n-            \"encryptwallet \\\"passphrase\\\"\\n\"\n+           \"encryptwallet \\\"passphrase\\\" ( \\\"wallet\\\" )\\n\"\n             \"\\nEncrypts the wallet with 'passphrase'. This is for first time encryption.\\n\"\n             \"After this, any calls that interact with private keys such as sending or signing \\n\"\n             \"will require the passphrase to be set prior the making these calls.\\n\"\n@@ -2162,6 +2203,7 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n             \"Note that this will shutdown the server.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. \\\"passphrase\\\"    (string) The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\\n\"\n+            \"2. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nExamples:\\n\"\n             \"\\nEncrypt you wallet\\n\"\n             + HelpExampleCli(\"encryptwallet\", \"\\\"my pass phrase\\\"\") +\n@@ -2208,14 +2250,14 @@ UniValue encryptwallet(const JSONRPCRequest& request)\n \n UniValue lockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-            \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...])\\n\"\n+            \"lockunspent unlock ([{\\\"txid\\\":\\\"txid\\\",\\\"vout\\\":n},...]) ( \\\"wallet\\\" )\\n\"\n             \"\\nUpdates list of temporarily unspendable outputs.\\n\"\n             \"Temporarily lock (unlock=false) or unlock (unlock=true) specified transaction outputs.\\n\"\n             \"If no transaction outputs are specified when unlocking then all current locked transaction outputs are unlocked.\\n\"\n@@ -2233,6 +2275,7 @@ UniValue lockunspent(const JSONRPCRequest& request)\n             \"       }\\n\"\n             \"       ,...\\n\"\n             \"     ]\\n\"\n+            \"3. \\\"wallet\\\"        (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n \n             \"\\nResult:\\n\"\n             \"true|false    (boolean) Whether the command was successful or not\\n\"\n@@ -2252,19 +2295,18 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n \n-    if (request.params.size() == 1)\n-        RPCTypeCheck(request.params, {UniValue::VBOOL});\n-    else\n-        RPCTypeCheck(request.params, {UniValue::VBOOL, UniValue::VARR});\n+    RPCTypeCheckArgument(request.params[0], UniValue::VBOOL);\n \n     bool fUnlock = request.params[0].get_bool();\n \n-    if (request.params.size() == 1) {\n+    if (request.params[1].isNull()) {\n         if (fUnlock)\n             pwallet->UnlockAllCoins();\n         return true;\n     }\n \n+    RPCTypeCheckArgument(request.params[1], UniValue::VARR);\n+\n     UniValue outputs = request.params[1].get_array();\n     for (unsigned int idx = 0; idx < outputs.size(); idx++) {\n         const UniValue& output = outputs[idx];\n@@ -2299,15 +2341,17 @@ UniValue lockunspent(const JSONRPCRequest& request)\n \n UniValue listlockunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"listlockunspent\\n\"\n+            \"listlockunspent ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns list of temporarily unspendable outputs.\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"See the lockunspent call to lock and unlock transactions for spending.\\n\"\n             \"\\nResult:\\n\"\n             \"[\\n\"\n@@ -2350,17 +2394,18 @@ UniValue listlockunspent(const JSONRPCRequest& request)\n \n UniValue settxfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[1]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n-            \"settxfee amount\\n\"\n+            \"settxfee amount ( \\\"wallet\\\" )\\n\"\n             \"\\nSet the transaction fee per kB. Overwrites the paytxfee parameter.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. amount         (numeric or string, required) The transaction fee in \" + CURRENCY_UNIT + \"/kB\\n\"\n+            \"2. \\\"wallet\\\"       (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult\\n\"\n             \"true|false        (boolean) Returns true if successful\\n\"\n             \"\\nExamples:\\n\"\n@@ -2379,14 +2424,16 @@ UniValue settxfee(const JSONRPCRequest& request)\n \n UniValue getwalletinfo(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"getwalletinfo\\n\"\n+            \"getwalletinfo ( \\\"wallet\\\" )\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"Returns an object containing various wallet state info.\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -2434,14 +2481,16 @@ UniValue getwalletinfo(const JSONRPCRequest& request)\n \n UniValue resendwallettransactions(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[0]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() != 0)\n+    if (request.fHelp || request.params.size() > 1)\n         throw std::runtime_error(\n-            \"resendwallettransactions\\n\"\n+            \"resendwallettransactions ( \\\"wallet\\\" )\\n\"\n+            \"\\nArguments:\\n\"\n+            \"1. \\\"wallet\\\"  (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"Immediately re-broadcast unconfirmed wallet transactions to all peers.\\n\"\n             \"Intended only for testing; the wallet code periodically re-broadcasts\\n\"\n             \"automatically.\\n\"\n@@ -2464,14 +2513,14 @@ UniValue resendwallettransactions(const JSONRPCRequest& request)\n \n UniValue listunspent(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[5]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 5)\n+    if (request.fHelp || request.params.size() > 6)\n         throw std::runtime_error(\n-            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] [query_options])\\n\"\n+            \"listunspent ( minconf maxconf  [\\\"addresses\\\",...] [include_unsafe] [query_options] ) ( \\\"wallet\\\" )\\n\"\n             \"\\nReturns array of unspent transaction outputs\\n\"\n             \"with between minconf and maxconf (inclusive) confirmations.\\n\"\n             \"Optionally filter to only include txouts paid to specified addresses.\\n\"\n@@ -2492,6 +2541,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n             \"      \\\"maximumCount\\\"     (numeric or string, default=unlimited) Maximum number of UTXOs\\n\"\n             \"      \\\"minimumSumAmount\\\" (numeric or string, default=unlimited) Minimum sum value of all UTXOs in \" + CURRENCY_UNIT + \"\\n\"\n             \"    }\\n\"\n+            \"6. \\\"wallet\\\"         (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult\\n\"\n             \"[                   (array of json object)\\n\"\n             \"  {\\n\"\n@@ -2622,14 +2672,14 @@ UniValue listunspent(const JSONRPCRequest& request)\n \n UniValue fundrawtransaction(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n     if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n         throw std::runtime_error(\n-                            \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n+                            \"fundrawtransaction \\\"hexstring\\\" ( options ) ( \\\"wallet\\\" )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\"\n                             \"This will not modify existing inputs, and will add at most one change output to the outputs.\\n\"\n                             \"No existing outputs will be modified unless \\\"subtractFeeFromOutputs\\\" is specified.\\n\"\n@@ -2659,6 +2709,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n                             \"     \\\"optIntoRbf\\\"             (boolean, optional) Allow this transaction to be replaced by a transaction with higher fees\\n\"\n                             \"   }\\n\"\n                             \"                         for backward compatibility: passing in a true instead of an object will result in {\\\"includeWatching\\\":true}\\n\"\n+                            \"3. \\\"wallet\\\"              (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n                             \"\\nResult:\\n\"\n                             \"{\\n\"\n                             \"  \\\"hex\\\":       \\\"value\\\", (string)  The resulting raw transaction (hex-encoded string)\\n\"\n@@ -2787,14 +2838,14 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n \n UniValue bumpfee(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp))\n         return NullUniValue;\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n-            \"bumpfee \\\"txid\\\" ( options ) \\n\"\n+            \"bumpfee \\\"txid\\\" ( options ) ( \\\"wallet\\\" )\\n\"\n             \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n             \"An opt-in RBF transaction with the given txid must be in the wallet.\\n\"\n             \"The command will pay the additional fee by decreasing (or perhaps removing) its change output.\\n\"\n@@ -2822,6 +2873,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n             \"                         so the new transaction will not be explicitly bip-125 replaceable (though it may\\n\"\n             \"                         still be replaceable in practice, for example if it has unconfirmed ancestors which\\n\"\n             \"                         are replaceable).\\n\"\n+            \"3. \\\"wallet\\\"              (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"   }\\n\"\n             \"\\nResult:\\n\"\n             \"{\\n\"\n@@ -2925,19 +2977,20 @@ UniValue bumpfee(const JSONRPCRequest& request)\n \n UniValue generate(const JSONRPCRequest& request)\n {\n-    CWallet * const pwallet = GetWalletForJSONRPCRequest(request);\n+    CWallet * const pwallet = GetWalletForJSONRPCRequest(request, request.params[2]);\n \n     if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2) {\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3) {\n         throw std::runtime_error(\n-            \"generate nblocks ( maxtries )\\n\"\n+            \"generate nblocks ( maxtries ) ( \\\"wallet\\\" )\\n\"\n             \"\\nMine up to nblocks blocks immediately (before the RPC call returns) to an address in the wallet.\\n\"\n             \"\\nArguments:\\n\"\n             \"1. nblocks      (numeric, required) How many blocks are generated immediately.\\n\"\n             \"2. maxtries     (numeric, optional) How many iterations to try (default = 1000000).\\n\"\n+            \"3. \\\"wallet\\\"     (string, optional) Optional wallet filename to use non-default wallet.\\n\"\n             \"\\nResult:\\n\"\n             \"[ blockhashes ]     (array) hashes of blocks generated\\n\"\n             \"\\nExamples:\\n\"\n@@ -2982,57 +3035,57 @@ extern UniValue importmulti(const JSONRPCRequest& request);\n static const CRPCCommand commands[] =\n { //  category              name                        actor (function)           okSafeMode\n     //  --------------------- ------------------------    -----------------------    ----------\n-    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\"} },\n-    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true,   {} },\n-    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false,  {\"txid\"} },\n-    { \"wallet\",             \"abortrescan\",              &abortrescan,              false,  {} },\n-    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\"} },\n-    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\"} },\n-    { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\"} },\n-    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true,   {\"txid\", \"options\"} },\n-    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\"}  },\n-    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\"} },\n-    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\"} },\n-    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true,   {\"account\"} },\n-    { \"wallet\",             \"getaccount\",               &getaccount,               true,   {\"address\"} },\n-    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true,   {\"account\"} },\n-    { \"wallet\",             \"getbalance\",               &getbalance,               false,  {\"account\",\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true,   {\"account\"} },\n-    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true,   {} },\n-    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false,  {\"account\",\"minconf\"} },\n-    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false,  {\"address\",\"minconf\"} },\n-    { \"wallet\",             \"gettransaction\",           &gettransaction,           false,  {\"txid\",\"include_watchonly\"} },\n-    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false,  {} },\n-    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false,  {} },\n-    { \"wallet\",             \"importmulti\",              &importmulti,              true,   {\"requests\",\"options\"} },\n-    { \"wallet\",             \"importprivkey\",            &importprivkey,            true,   {\"privkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"importwallet\",             &importwallet,             true,   {\"filename\"} },\n-    { \"wallet\",             \"importaddress\",            &importaddress,            true,   {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n-    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true,   {\"rawtransaction\",\"txoutproof\"} },\n-    { \"wallet\",             \"importpubkey\",             &importpubkey,             true,   {\"pubkey\",\"label\",\"rescan\"} },\n-    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true,   {\"newsize\"} },\n-    { \"wallet\",             \"listaccounts\",             &listaccounts,             false,  {\"minconf\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     false,  {} },\n-    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false,  {} },\n-    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\"} },\n-    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\"} },\n-    { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\"} },\n-    { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\"} },\n-    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\"} },\n-    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\"} },\n-    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\"} },\n-    { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\"} },\n-    { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\"} },\n-    { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\"} },\n-    { \"wallet\",             \"walletlock\",               &walletlock,               true,   {} },\n-    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\"} },\n-    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\"} },\n-    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\"} },\n-\n-    { \"generating\",         \"generate\",                 &generate,                 true,   {\"nblocks\",\"maxtries\"} },\n+    { \"rawtransactions\",    \"fundrawtransaction\",       &fundrawtransaction,       false,  {\"hexstring\",\"options\",\"wallet\"} },\n+    { \"hidden\",             \"resendwallettransactions\", &resendwallettransactions, true,   {\"wallet\"} },\n+    { \"wallet\",             \"abandontransaction\",       &abandontransaction,       false,  {\"txid\",\"wallet\"} },\n+    { \"wallet\",             \"abortrescan\",              &abortrescan,              false,  {\"wallet\"} },\n+    { \"wallet\",             \"addmultisigaddress\",       &addmultisigaddress,       true,   {\"nrequired\",\"keys\",\"account\",\"wallet\"} },\n+    { \"wallet\",             \"addwitnessaddress\",        &addwitnessaddress,        true,   {\"address\",\"wallet\"} },\n+    { \"wallet\",             \"backupwallet\",             &backupwallet,             true,   {\"destination\",\"wallet\"} },\n+    { \"wallet\",             \"bumpfee\",                  &bumpfee,                  true,   {\"txid\", \"options\",\"wallet\"} },\n+    { \"wallet\",             \"dumpprivkey\",              &dumpprivkey,              true,   {\"address\",\"wallet\"} },\n+    { \"wallet\",             \"dumpwallet\",               &dumpwallet,               true,   {\"filename\",\"wallet\"} },\n+    { \"wallet\",             \"encryptwallet\",            &encryptwallet,            true,   {\"passphrase\",\"wallet\"} },\n+    { \"wallet\",             \"getaccountaddress\",        &getaccountaddress,        true,   {\"account\",\"wallet\"} },\n+    { \"wallet\",             \"getaccount\",               &getaccount,               true,   {\"address\",\"wallet\"} },\n+    { \"wallet\",             \"getaddressesbyaccount\",    &getaddressesbyaccount,    true,   {\"account\",\"wallet\"} },\n+    { \"wallet\",             \"getbalance\",               &getbalance,               false,  {\"account\",\"minconf\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"getnewaddress\",            &getnewaddress,            true,   {\"account\",\"wallet\"} },\n+    { \"wallet\",             \"getrawchangeaddress\",      &getrawchangeaddress,      true,   {\"wallet\"} },\n+    { \"wallet\",             \"getreceivedbyaccount\",     &getreceivedbyaccount,     false,  {\"account\",\"minconf\",\"wallet\"} },\n+    { \"wallet\",             \"getreceivedbyaddress\",     &getreceivedbyaddress,     false,  {\"address\",\"minconf\",\"wallet\"} },\n+    { \"wallet\",             \"gettransaction\",           &gettransaction,           false,  {\"txid\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"getunconfirmedbalance\",    &getunconfirmedbalance,    false,  {\"wallet\"} },\n+    { \"wallet\",             \"getwalletinfo\",            &getwalletinfo,            false,  {\"wallet\"} },\n+    { \"wallet\",             \"importmulti\",              &importmulti,              true,   {\"requests\",\"options\",\"wallet\"} },\n+    { \"wallet\",             \"importprivkey\",            &importprivkey,            true,   {\"privkey\",\"label\",\"rescan\",\"wallet\"} },\n+    { \"wallet\",             \"importwallet\",             &importwallet,             true,   {\"filename\",\"wallet\"} },\n+    { \"wallet\",             \"importaddress\",            &importaddress,            true,   {\"address\",\"label\",\"rescan\",\"p2sh\",\"wallet\"} },\n+    { \"wallet\",             \"importprunedfunds\",        &importprunedfunds,        true,   {\"rawtransaction\",\"txoutproof\",\"wallet\"} },\n+    { \"wallet\",             \"importpubkey\",             &importpubkey,             true,   {\"pubkey\",\"label\",\"rescan\",\"wallet\"} },\n+    { \"wallet\",             \"keypoolrefill\",            &keypoolrefill,            true,   {\"newsize\",\"wallet\"} },\n+    { \"wallet\",             \"listaccounts\",             &listaccounts,             false,  {\"minconf\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"listaddressgroupings\",     &listaddressgroupings,     false,  {\"wallet\"} },\n+    { \"wallet\",             \"listlockunspent\",          &listlockunspent,          false,  {\"wallet\"} },\n+    { \"wallet\",             \"listreceivedbyaccount\",    &listreceivedbyaccount,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"listreceivedbyaddress\",    &listreceivedbyaddress,    false,  {\"minconf\",\"include_empty\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"listsinceblock\",           &listsinceblock,           false,  {\"blockhash\",\"target_confirmations\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"listtransactions\",         &listtransactions,         false,  {\"account\",\"count\",\"skip\",\"include_watchonly\",\"wallet\"} },\n+    { \"wallet\",             \"listunspent\",              &listunspent,              false,  {\"minconf\",\"maxconf\",\"addresses\",\"include_unsafe\",\"query_options\",\"wallet\"} },\n+    { \"wallet\",             \"lockunspent\",              &lockunspent,              true,   {\"unlock\",\"transactions\",\"wallet\"} },\n+    { \"wallet\",             \"move\",                     &movecmd,                  false,  {\"fromaccount\",\"toaccount\",\"amount\",\"minconf\",\"comment\",\"wallet\"} },\n+    { \"wallet\",             \"sendfrom\",                 &sendfrom,                 false,  {\"fromaccount\",\"toaddress\",\"amount\",\"minconf\",\"comment\",\"comment_to\",\"wallet\"} },\n+    { \"wallet\",             \"sendmany\",                 &sendmany,                 false,  {\"fromaccount\",\"amounts\",\"minconf\",\"comment\",\"subtractfeefrom\",\"wallet\"} },\n+    { \"wallet\",             \"sendtoaddress\",            &sendtoaddress,            false,  {\"address\",\"amount\",\"comment\",\"comment_to\",\"subtractfeefromamount\",\"wallet\"} },\n+    { \"wallet\",             \"setaccount\",               &setaccount,               true,   {\"address\",\"account\",\"wallet\"} },\n+    { \"wallet\",             \"settxfee\",                 &settxfee,                 true,   {\"amount\",\"wallet\"} },\n+    { \"wallet\",             \"signmessage\",              &signmessage,              true,   {\"address\",\"message\",\"wallet\"} },\n+    { \"wallet\",             \"walletlock\",               &walletlock,               true,   {\"wallet\"} },\n+    { \"wallet\",             \"walletpassphrasechange\",   &walletpassphrasechange,   true,   {\"oldpassphrase\",\"newpassphrase\",\"wallet\"} },\n+    { \"wallet\",             \"walletpassphrase\",         &walletpassphrase,         true,   {\"passphrase\",\"timeout\",\"wallet\"} },\n+    { \"wallet\",             \"removeprunedfunds\",        &removeprunedfunds,        true,   {\"txid\",\"wallet\"} },\n+\n+    { \"generating\",         \"generate\",                 &generate,                 true,   {\"nblocks\",\"maxtries\",\"wallet\"} },\n };\n \n void RegisterWalletRPCCommands(CRPCTable &t)"
      },
      {
        "sha": "4b65d69f08599e5d99eb57ee1cb420b922df6dc2",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -7,16 +7,18 @@\n \n class CRPCTable;\n class JSONRPCRequest;\n+class UniValue;\n \n void RegisterWalletRPCCommands(CRPCTable &t);\n \n /**\n  * Figures out what wallet, if any, to use for a JSONRPCRequest.\n  *\n  * @param[in] request JSONRPCRequest that wishes to access a wallet\n+ * @param[in] param   optional parameter requesting a specific wallet\n  * @return NULL if no wallet should be used, or a pointer to the CWallet\n  */\n-CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest&);\n+CWallet *GetWalletForJSONRPCRequest(const JSONRPCRequest& request, const UniValue& param);\n \n std::string HelpRequiringPassphrase(CWallet *);\n void EnsureWalletIsUnlocked(CWallet *);"
      },
      {
        "sha": "477b4db4a80da00081b5b16d7f1d0245223eb37d",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/baa8e4c189bfb91c13eb07593002905be83e0596/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/baa8e4c189bfb91c13eb07593002905be83e0596/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=baa8e4c189bfb91c13eb07593002905be83e0596",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n     def run_test(self):\n         node = self.nodes[0]\n         h = node.help(command='getinfo')\n-        assert(h.startswith('getinfo\\n'))\n+        assert(h.startswith('getinfo ( \"wallet\" )\\n'))\n \n         assert_raises_jsonrpc(-8, 'Unknown named parameter', node.help, random='getinfo')\n "
      }
    ]
  }
]