[
  {
    "sha": "9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmRmMDVkNzBjYWM0YTYyZDFhZWViNDI5OWUyYzNhOWE4NjZmOGFm",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-04T12:04:10Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-06-12T19:45:46Z"
      },
      "message": "tests: Fix lock-order-inversion (potential deadlock) in DoS_tests. Reported by TSAN.\n\nMakes `src/test/test_bitcoin --run_test=DoS_tests` pass also when\ncompiled with TreadSanitizer (`./configure --with-sanitizers=thread`).",
      "tree": {
        "sha": "b91213c7aa45bc05eabcd67996840f8ca7cd96a7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b91213c7aa45bc05eabcd67996840f8ca7cd96a7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a607d23ae82ee374799d21d02932d945c1ce9616",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a607d23ae82ee374799d21d02932d945c1ce9616",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a607d23ae82ee374799d21d02932d945c1ce9616"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 55,
      "deletions": 23
    },
    "files": [
      {
        "sha": "3bdb4785a2a48149e6cd475d77dc40713d32e4f6",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
        "patch": "@@ -77,7 +77,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     * @param[in]   interrupt       Interrupt condition for processing threads\n     * @return                      True if there is more work to be done\n     */\n-    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n+    bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override EXCLUSIVE_LOCKS_REQUIRED(pto->cs_sendProcessing);\n \n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n     void ConsiderEviction(CNode *pto, int64_t time_in_seconds);"
      },
      {
        "sha": "bebbd6c46460c8447c531705d734036925813227",
        "filename": "src/test/denialofservice_tests.cpp",
        "status": "modified",
        "additions": 54,
        "deletions": 22,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af/src/test/denialofservice_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af/src/test/denialofservice_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/denialofservice_tests.cpp?ref=9fdf05d70cac4a62d1aeeb4299e2c3a9a866f8af",
        "patch": "@@ -66,25 +66,40 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     dummyNode1.fSuccessfullyConnected = true;\n \n     // This test requires that we have a chain with non-zero work.\n-    LOCK(cs_main);\n-    BOOST_CHECK(chainActive.Tip() != nullptr);\n-    BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+    {\n+        LOCK(cs_main);\n+        BOOST_CHECK(chainActive.Tip() != nullptr);\n+        BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n+    }\n \n     // Test starts here\n-    LOCK(dummyNode1.cs_sendProcessing);\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n-    LOCK(dummyNode1.cs_vSend);\n-    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n-    dummyNode1.vSendMsg.clear();\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    }\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+        dummyNode1.vSendMsg.clear();\n+    }\n \n     int64_t nStartTime = GetTime();\n     // Wait 21 minutes\n     SetMockTime(nStartTime+21*60);\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n-    BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    }\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_vSend);\n+        BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n+    }\n     // Wait 3 more minutes\n     SetMockTime(nStartTime+24*60);\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in disconnect\n+    }\n     BOOST_CHECK(dummyNode1.fDisconnect == true);\n     SetMockTime(0);\n \n@@ -190,8 +205,10 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n     }\n-    LOCK(dummyNode1.cs_sendProcessing);\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    }\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n \n@@ -205,15 +222,20 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n         LOCK(cs_main);\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n-    LOCK(dummyNode2.cs_sendProcessing);\n-    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode2, interruptDummy);\n+    }\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode2.GetId(), 50);\n     }\n-    peerLogic->SendMessages(&dummyNode2, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode2.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode2, interruptDummy);\n+    }\n     BOOST_CHECK(connman->IsBanned(addr2));\n \n     bool dummy;\n@@ -237,20 +259,28 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 100);\n     }\n-    LOCK(dummyNode1.cs_sendProcessing);\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    }\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 10);\n     }\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    }\n     BOOST_CHECK(!connman->IsBanned(addr1));\n     {\n         LOCK(cs_main);\n         Misbehaving(dummyNode1.GetId(), 1);\n     }\n-    peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode1.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode1, interruptDummy);\n+    }\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n \n@@ -277,8 +307,10 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n         LOCK(cs_main);\n         Misbehaving(dummyNode.GetId(), 100);\n     }\n-    LOCK(dummyNode.cs_sendProcessing);\n-    peerLogic->SendMessages(&dummyNode, interruptDummy);\n+    {\n+        LOCK2(cs_main, dummyNode.cs_sendProcessing);\n+        peerLogic->SendMessages(&dummyNode, interruptDummy);\n+    }\n     BOOST_CHECK(connman->IsBanned(addr));\n \n     SetMockTime(nStartTime+60*60);"
      }
    ]
  }
]