[
  {
    "sha": "e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmYzMmNiNWM1YzdmMmIxZDFmYzcwMDM1ODdiNjU3M2ZiNTk1MjZh",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-11-26T18:25:56Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-13T01:02:29Z"
      },
      "message": "qa: unify unix epoch time descriptions\n\nto \"UNIX epoch time\".\n\nCall sites updated:\n```\nmocktime\ngetblockheader\ngetblock\npruneblockchain\ngetchaintxstats\ngetblocktemplate\nsetmocktime\ngetpeerinfo\nsetban\ngetnodeaddresses\ngetrawtransaction\nimportmulti\nlisttransactions\nlistsinceblock\ngettransaction\ngetwalletinfo\ngetaddressinfo\n```",
      "tree": {
        "sha": "5a6c59968b478560dc738db8249b6d16a2b2da9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5a6c59968b478560dc738db8249b6d16a2b2da9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3y4yYACgkQT1chs9Dj\nkh23txAAuc8b72Ns7xo6ofdbukQD39zmNUOufQ7B3kakg69BUARR18mVCdb/vWfB\nKkcTgj3k6axc93+yX8UAqoNZRmWviij/IV4sPnmYsZF8tw+qn6/QQJgjwG5DepEF\noRDcTrdOIeWQ4Z7Pxc/x1e+fF+gOTJklywDNxOWpzFPnVNismVqpzu8DE2fzkqhz\nwxsENwW+E42PInrYppWf8gOzivHbHgHxzgML9Gc56v7KYbflItGECzaJeVExY71r\nCynJsgCn1hDH/WgwhXMoh1CEcWuFoLf4FOnSTRCLpYuElSjnYSLP9RgpbesL+caM\nBzshGrQMhSWfafCYEwYJJqu3fGoPubDDxQOgkXZHushUngtTeSC0gQzvJSEBMBm8\n49FPcQaJZ6M/g4PXz/lPJlo7LRF1U5oopTb2Iewy0DyaU2SBGhyuc9eYTrMDmeDy\neieX5J9My+caJBMpNh8Bz65XeG4oEv6anc3IPjoiwJAWZ5+/CcI9EogSft71w94e\nSSVb8LmogqwYEhK3YcqaxbA4T7GufqqjZ3utIoSHpXC7cq8E0AOuRUAg/PLzI/S1\nCGb2mZ2KWTzxqfAkwCOQPrIJLanZAfOTFcF41wbvNUK1+2lkf5m+HF/FVQavrIGx\nN10dI32n15mmKSvXzEFDRBhtmxKyfFSaDv/3K8tj5rSJFJOOdWI=\n=jw+0\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIIEYKcXp3uC6WPlNp+oMLfhMY1XAl5qRQ5OmDhtcp3PVCP/wEArGZoovM5tH\n+BlBcaAA5WYI8CCI0wJ4me2ezwsPTdrBI2DM6wQcIVNlO+bVOv5c7s7BgwjxBF3y\n4yfwCEk9qnJWdIO0AIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5l\ndGVybml0eXdhbGwuY29t//AQloOZJM3PwsLVBlHjMpnRIAjwIFSVAystVUiTwUVK\nnb2peUfT+X/9EMJo7lMx0lRnGE3bCPAgwVFCQKIh8Zv5smYIHkbBKF1LdnwWJ/jV\nJjkvdzr4Z7AI8QRd8uMo8AhxgYLOfeDhrgCD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQtnOOuZekDWFK3o/K\nJyy5yAjxBF3y4yfwCMiKLALGcJZsAIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxl\nbmRhci5jYXRhbGxheHkuY29t8BDjwO5Xtlmq7oz7zgQJHpeBCPAgqXHIw0jyNe1t\n2u4ndC3hbagvqKE6F9tgTeLCffpRkYwI8QRd8uMn8Agi4xpAtQC/eACD3+MNLvkM\njiwraHR0cHM6Ly9ib2IuYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZw==\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 5a6c59968b478560dc738db8249b6d16a2b2da9b\nparent d8a66626d63135fd245d5afc524b88b9a94d208b\nauthor Jon Atack <jon@atack.com> 1574792756 +0100\ncommitter Jon Atack <jon@atack.com> 1576198949 +0100\n\nqa: unify unix epoch time descriptions\n\nto \"UNIX epoch time\".\n\nCall sites updated:\n```\nmocktime\ngetblockheader\ngetblock\npruneblockchain\ngetchaintxstats\ngetblocktemplate\nsetmocktime\ngetpeerinfo\nsetban\ngetnodeaddresses\ngetrawtransaction\nimportmulti\nlisttransactions\nlistsinceblock\ngettransaction\ngetwalletinfo\ngetaddressinfo\n```\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8a66626d63135fd245d5afc524b88b9a94d208b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8a66626d63135fd245d5afc524b88b9a94d208b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8a66626d63135fd245d5afc524b88b9a94d208b"
      }
    ],
    "stats": {
      "total": 54,
      "additions": 31,
      "deletions": 23
    },
    "files": [
      {
        "sha": "fe1a65b5e1f501f9836ce37ce193ce934e715d26",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -497,7 +497,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-logtimestamps\", strprintf(\"Prepend debug output with timestamp (default: %u)\", DEFAULT_LOGTIMESTAMPS), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logthreadnames\", strprintf(\"Prepend debug output with name of the originating thread (only available on platforms supporting thread_local) (default: %u)\", DEFAULT_LOGTHREADNAMES), ArgsManager::ALLOW_ANY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-logtimemicros\", strprintf(\"Add microsecond precision to debug timestamps (default: %u)\", DEFAULT_LOGTIMEMICROS), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n-    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with \" + UNIX_EPOCH_TIME + \" (default: 0)\", ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), ArgsManager::ALLOW_ANY | ArgsManager::DEBUG_ONLY, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "6f97ab8bd14876e5e64de178c8ca059dd53507c3",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -742,8 +742,8 @@ static UniValue getblockheader(const JSONRPCRequest& request)\n             \"  \\\"version\\\" : n,         (numeric) The block version\\n\"\n             \"  \\\"versionHex\\\" : \\\"00000000\\\", (string) The block version formatted in hexadecimal\\n\"\n             \"  \\\"merkleroot\\\" : \\\"xxxx\\\", (string) The merkle root\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -854,8 +854,8 @@ static UniValue getblock(const JSONRPCRequest& request)\n             \"     \\\"transactionid\\\"     (string) The transaction id\\n\"\n             \"     ,...\\n\"\n             \"  ],\\n\"\n-            \"  \\\"time\\\" : ttt,          (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n-            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"time\\\" : ttt,          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n+            \"  \\\"mediantime\\\" : ttt,    (numeric) The median block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"nonce\\\" : n,           (numeric) The nonce\\n\"\n             \"  \\\"bits\\\" : \\\"1d00ffff\\\", (string) The bits\\n\"\n             \"  \\\"difficulty\\\" : x.xxx,  (numeric) The difficulty\\n\"\n@@ -921,7 +921,7 @@ static UniValue pruneblockchain(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"pruneblockchain\", \"\",\n                 {\n-                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or a unix timestamp\\n\"\n+                    {\"height\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The block height to prune up to. May be set to a discrete height, or to a \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"                  to prune blocks whose block time is at least 2 hours older than the provided timestamp.\"},\n                 },\n                 RPCResult{\n@@ -1573,7 +1573,7 @@ static UniValue getchaintxstats(const JSONRPCRequest& request)\n                 },\n                 RPCResult{\n             \"{\\n\"\n-            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window in UNIX format.\\n\"\n+            \"  \\\"time\\\": xxxxx,                         (numeric) The timestamp for the final block in the window, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"txcount\\\": xxxxx,                      (numeric) The total number of transactions in the chain up to that point.\\n\"\n             \"  \\\"window_final_block_hash\\\": \\\"...\\\",      (string) The hash of the final block in the window.\\n\"\n             \"  \\\"window_final_block_height\\\": xxxxx,    (numeric) The height of the final block in the window.\\n\""
      },
      {
        "sha": "fc16a31423d6b2f788b6b338fe6b1d22cdd17abd",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -379,7 +379,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"coinbasevalue\\\" : n,              (numeric) maximum allowable input to coinbase transaction, including the generation award and transaction fees (in satoshis)\\n\"\n             \"  \\\"coinbasetxn\\\" : { ... },          (json object) information for coinbase transaction\\n\"\n             \"  \\\"target\\\" : \\\"xxxx\\\",                (string) The hash target\\n\"\n-            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for next block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"mintime\\\" : xxx,                  (numeric) The minimum timestamp appropriate for the next block time, expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"mutable\\\" : [                     (array of string) list of ways the block template may be changed \\n\"\n             \"     \\\"value\\\"                          (string) A way the block template may be changed, e.g. 'time', 'transactions', 'prevblock'\\n\"\n             \"     ,...\\n\"\n@@ -388,7 +388,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n             \"  \\\"sigoplimit\\\" : n,                 (numeric) limit of sigops in blocks\\n\"\n             \"  \\\"sizelimit\\\" : n,                  (numeric) limit of block size\\n\"\n             \"  \\\"weightlimit\\\" : n,                (numeric) limit of block weight\\n\"\n-            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"curtime\\\" : ttt,                  (numeric) current timestamp in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"bits\\\" : \\\"xxxxxxxx\\\",              (string) compressed target of next block\\n\"\n             \"  \\\"height\\\" : n                      (numeric) The height of the next block\\n\"\n             \"}\\n\""
      },
      {
        "sha": "d967d2bccaa0d1219e18fefe124598c2a77800f9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -343,7 +343,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n             RPCHelpMan{\"setmocktime\",\n                 \"\\nSet the local time to given timestamp (-regtest only)\\n\",\n                 {\n-                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Unix seconds-since-epoch timestamp\\n\"\n+                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n                 RPCResults{},"
      },
      {
        "sha": "6ee91f139de9f5bee648064a6345433f870c0638",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -89,11 +89,11 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n             \"         ...\\n\"\n             \"     ],\\n\"\n             \"    \\\"relaytxes\\\":true|false,    (boolean) Whether peer has asked us to relay transactions to it\\n\"\n-            \"    \\\"lastsend\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last send\\n\"\n-            \"    \\\"lastrecv\\\": ttt,           (numeric) The time in seconds since epoch (Jan 1 1970 GMT) of the last receive\\n\"\n+            \"    \\\"lastsend\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last send\\n\"\n+            \"    \\\"lastrecv\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the last receive\\n\"\n             \"    \\\"bytessent\\\": n,            (numeric) The total bytes sent\\n\"\n             \"    \\\"bytesrecv\\\": n,            (numeric) The total bytes received\\n\"\n-            \"    \\\"conntime\\\": ttt,           (numeric) The connection time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"    \\\"conntime\\\": ttt,           (numeric) The \" + UNIX_EPOCH_TIME + \" of the connection\\n\"\n             \"    \\\"timeoffset\\\": ttt,         (numeric) The time offset in seconds\\n\"\n             \"    \\\"pingtime\\\": n,             (numeric) ping time (if available)\\n\"\n             \"    \\\"minping\\\": n,              (numeric) minimum observed ping time (if any at all)\\n\"\n@@ -534,7 +534,7 @@ static UniValue setban(const JSONRPCRequest& request)\n                     {\"subnet\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The IP/Subnet (see getpeerinfo for nodes IP) with an optional netmask (default is /32 = single IP)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add an IP/Subnet to the list, 'remove' to remove an IP/Subnet from the list\"},\n                     {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n-                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp in seconds since epoch (Jan 1 1970 GMT)\"},\n+                    {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n                 },\n                 RPCResults{},\n                 RPCExamples{\n@@ -691,7 +691,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n                 RPCResult{\n             \"[\\n\"\n             \"  {\\n\"\n-            \"    \\\"time\\\": ttt,                (numeric) Timestamp in seconds since epoch (Jan 1 1970 GMT) keeping track of when the node was last seen\\n\"\n+            \"    \\\"time\\\": ttt,                (numeric) The \" + UNIX_EPOCH_TIME + \" of when the node was last seen\\n\"\n             \"    \\\"services\\\": n,              (numeric) The services offered\\n\"\n             \"    \\\"address\\\": \\\"host\\\",          (string) The address of the node\\n\"\n             \"    \\\"port\\\": n                   (numeric) The port of the node\\n\""
      },
      {
        "sha": "f328f20c7104c2ba4d6d5e22bf061baea5d2737f",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -139,7 +139,7 @@ static UniValue getrawtransaction(const JSONRPCRequest& request)\n             \"  ],\\n\"\n             \"  \\\"blockhash\\\" : \\\"hash\\\",   (string) the block hash\\n\"\n             \"  \\\"confirmations\\\" : n,      (numeric) The confirmations\\n\"\n-            \"  \\\"blocktime\\\" : ttt         (numeric) The block time in seconds since epoch (Jan 1 1970 GMT)\\n\"\n+            \"  \\\"blocktime\\\" : ttt         (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \"\\n\"\n             \"  \\\"time\\\" : ttt,             (numeric) Same as \\\"blocktime\\\"\\n\"\n             \"}\\n\"\n                     },"
      },
      {
        "sha": "78586c22f9b06315faaf856a0b4ec1adcf81f3c0",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -13,6 +13,8 @@\n \n #include <tuple>\n \n+const std::string UNIX_EPOCH_TIME = \"UNIX epoch time\";\n+\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)"
      },
      {
        "sha": "065a992a886cd77fdf1dec3aa585b1ab587e9e2a",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -22,6 +22,12 @@\n \n #include <boost/variant.hpp>\n \n+/**\n+ * String used to describe UNIX epoch time in documentation, factored out to a\n+ * constant for consistency.\n+ */\n+extern const std::string UNIX_EPOCH_TIME;\n+\n class FillableSigningProvider;\n class CPubKey;\n class CScript;"
      },
      {
        "sha": "633ac1b16d46e51016136bf01b0dfd7cb59d9788",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -1286,7 +1286,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n                                     {\"scriptPubKey\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Type of scriptPubKey (string for script, json for address). Should not be provided if using a descriptor\",\n                                         /* oneline_description */ \"\", {\"\\\"<script>\\\" | { \\\"address\\\":\\\"<address>\\\" }\", \"string / json\"}\n                                     },\n-                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key in seconds since epoch (Jan 1 1970 GMT),\\n\"\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Creation time of the key expressed in \" + UNIX_EPOCH_TIME + \",\\n\"\n         \"                                                              or the string \\\"now\\\" to substitute the current synced blockchain time. The timestamp of the oldest\\n\"\n         \"                                                              key will determine how far back blockchain rescans need to begin for missing wallet transactions.\\n\"\n         \"                                                              \\\"now\\\" can be specified to bypass scanning, for keys which are known to never have been used, and\\n\""
      },
      {
        "sha": "63cbe02b179e23e2e1670c94910b330d39c7a494",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "patch": "@@ -1374,14 +1374,14 @@ static const std::string TransactionDescriptionString()\n            \"    \\\"blockhash\\\": \\\"hashvalue\\\",                  (string) The block hash containing the transaction.\\n\"\n            \"    \\\"blockheight\\\": n,                          (numeric) The block height containing the transaction.\\n\"\n            \"    \\\"blockindex\\\": n,                           (numeric) The index of the transaction in the block that includes it.\\n\"\n-           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n+           \"    \\\"blocktime\\\": xxx,                          (numeric) The block time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"txid\\\": \\\"transactionid\\\",                   (string) The transaction id.\\n\"\n            \"    \\\"walletconflicts\\\": [                       (array) Conflicting transaction ids.\\n\"\n            \"      \\\"txid\\\",                                  (string) The transaction id.\\n\"\n            \"      ...\\n\"\n            \"    ],\\n\"\n-           \"    \\\"time\\\": xxx,                               (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n-           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n+           \"    \\\"time\\\": xxx,                               (numeric) The transaction time expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n+           \"    \\\"timereceived\\\": xxx,                       (numeric) The time received expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n            \"    \\\"comment\\\": \\\"...\\\",                          (string) If a comment is associated with the transaction, only present if not empty.\\n\"\n            \"    \\\"bip125-replaceable\\\": \\\"yes|no|unknown\\\",    (string) Whether this transaction could be replaced due to BIP125 (replace-by-fee);\\n\"\n            \"                                                     may be unknown for unconfirmed transactions not in the mempool\\n\";\n@@ -2428,10 +2428,10 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n             \"  \\\"unconfirmed_balance\\\": xxx,        (numeric) DEPRECATED. Identical to getbalances().mine.untrusted_pending\\n\"\n             \"  \\\"immature_balance\\\": xxxxxx,        (numeric) DEPRECATED. Identical to getbalances().mine.immature\\n\"\n             \"  \\\"txcount\\\": xxxxxxx,                (numeric) the total number of transactions in the wallet\\n\"\n-            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the timestamp (seconds since Unix epoch) of the oldest pre-generated key in the key pool\\n\"\n+            \"  \\\"keypoololdest\\\": xxxxxx,           (numeric) the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\\n\"\n             \"  \\\"keypoolsize\\\": xxxx,               (numeric) how many new keys are pre-generated (only counts external keys)\\n\"\n             \"  \\\"keypoolsize_hd_internal\\\": xxxx,   (numeric) how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\\n\"\n-            \"  \\\"unlocked_until\\\": ttt,             (numeric) the timestamp in seconds since epoch (midnight Jan 1 1970 GMT) that the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n+            \"  \\\"unlocked_until\\\": ttt,             (numeric) the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\\n\"\n             \"  \\\"paytxfee\\\": x.xxxx,                (numeric) the transaction fee configuration, set in \" + CURRENCY_UNIT + \"/kB\\n\"\n             \"  \\\"hdseedid\\\": \\\"<hash160>\\\"            (string, optional) the Hash160 of the HD seed (only present when HD is enabled)\\n\"\n             \"  \\\"private_keys_enabled\\\": true|false (boolean) false if privatekeys are disabled for this wallet (enforced watch-only wallet)\\n\"\n@@ -3743,7 +3743,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n             \"                                                         hdseedid) and relation to the wallet (ismine, iswatchonly).\\n\"\n             \"  \\\"iscompressed\\\" : true|false,        (boolean, optional) If the pubkey is compressed.\\n\"\n             \"  \\\"label\\\" :  \\\"label\\\"                  (string) The label associated with the address. Defaults to \\\"\\\". Equivalent to the name field in the labels array.\\n\"\n-            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key if available, expressed in seconds since Epoch Time (Jan 1 1970 GMT).\\n\"\n+            \"  \\\"timestamp\\\" : timestamp,            (number, optional) The creation time of the key, if available, expressed in \" + UNIX_EPOCH_TIME + \".\\n\"\n             \"  \\\"hdkeypath\\\" : \\\"keypath\\\"             (string, optional) The HD keypath, if the key is HD and available.\\n\"\n             \"  \\\"hdseedid\\\" : \\\"<hash160>\\\"            (string, optional) The Hash160 of the HD seed.\\n\"\n             \"  \\\"hdmasterfingerprint\\\" : \\\"<hash160>\\\" (string, optional) The fingerprint of the master key.\\n\""
      }
    ]
  },
  {
    "sha": "d94d34f05f4ae3efa07de409489d68bbcc216346",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTRkMzRmMDVmNGFlM2VmYTA3ZGU0MDk0ODlkNjhiYmNjMjE2MzQ2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-03T17:35:16Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-12-13T01:05:05Z"
      },
      "message": "doc: update developer notes wrt unix epoch time",
      "tree": {
        "sha": "ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d94d34f05f4ae3efa07de409489d68bbcc216346",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl3y48cACgkQT1chs9Dj\nkh3oVRAAu3HR97hypdhHjRc0LBbFR7NZreYJZRWzIrkmefUXJeY0YK3Bpt2p48N1\nvIzl/HPpgV3sJaVy143jojVQmtnlRP3skOEUPGhxbiKol7OQxr6gzQl6CYjI+yTd\nxOlK+HTbVypDhBGdFEn8Df0PagqRIkKbOwStOtfjE4oO9HeYZS0rfHw15RaP18Z/\nrTL1GQ2K7Z8XUnfQPUEvwTCqv7gjsBH30FNtaCHDeaz7hoxxQPV7akuXq2u47qnr\nR7mwWH5Nu9z5GLNcOTdY0VqVYVJ2oocq9BdKZtyKiAqVwU2IeKung6Ekwf7/eecd\nPYbcgtU6GWgrpfX8pyqIcNzWEIWJToj3ldObXVrt0e86ssMpO+lWYsXlwqJsGmn8\nuW9auqbQTelE1wyTVOsZx9xHXBH9dzgESZo4KZb/vug+PzXKFUvjXJnaPyBzHpon\nm3pxQOUTpDHItpBgQpQIjp4sgKCnkv8H/7gpV9/gUGJIRDFLVcRUPHyiaF5ftauP\neQFYB2XICHqGDdpOvY3NpAn01DU9VWfx99JmWZhADDHEAhq4fjQ8mtCzJ/xchvVD\npOEl6Qo1sSd+6urmrD1PIaI6VskVlKA6HyUhoAFK2vjZTWPkRpWuNLSb/odRjKGf\nsxwXxmZxOi3f6RZjq4CNq3Weobgk+CqsS7ifJJZxAin5Tm+9lTw=\n=hQuM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJXdqQwhl8r3iM0RAzlGwSW9kK32+6QS5Lj4rxyo/muOCP/wECJ+513xv777\nb3AykES2fnsI8QRd8uPI8AjeBKfLjLu43wCD3+MNLvkMjikoaHR0cHM6Ly9maW5u\nZXkuY2FsZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wEGRkNXcXiVFrYCVnCYsO72UI\n8QRd8uPJ8Agn99zBp1VmaQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIu\nY2F0YWxsYXh5LmNvbf/wEKHHDxmCHSf4RjuEH0Y7pN8I8CAQeSdes+jaUbjv1xAl\niZHLnTX5Fsts+FtqWxkSwionwAjxBF3y48jwCCLCKnpFSDPjAIPf4w0u+QyOLCto\ndHRwczovL2JvYi5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn8BDnOqve\nHePqGoahg1ZqKpsjCPAgEVnBC+/WxMCyUE1GwN/OBTNZrL3LBnP4kVNHlgD82/YI\n8QRd8uPJ8AhEf6FyHHR6tQCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ca7f60f4c394c0e67af0ca2f863fcde78e44b9dc\nparent e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a\nauthor Jon Atack <jon@atack.com> 1575394516 +0100\ncommitter Jon Atack <jon@atack.com> 1576199105 +0100\n\ndoc: update developer notes wrt unix epoch time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94d34f05f4ae3efa07de409489d68bbcc216346",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d94d34f05f4ae3efa07de409489d68bbcc216346",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d94d34f05f4ae3efa07de409489d68bbcc216346/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f32cb5c5c7f2b1d1fc7003587b6573fb59526a"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 7,
      "deletions": 2
    },
    "files": [
      {
        "sha": "31d9f4e6d41dd3031b9b59a738a1bebcf285f5ad",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d94d34f05f4ae3efa07de409489d68bbcc216346/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d94d34f05f4ae3efa07de409489d68bbcc216346/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=d94d34f05f4ae3efa07de409489d68bbcc216346",
        "patch": "@@ -1014,7 +1014,7 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n - A RPC method must either be a wallet method or a non-wallet method. Do not\n   introduce new methods that differ in behavior based on the presence of a wallet.\n \n-  - *Rationale*: as well as complicating the implementation and interfering\n+  - *Rationale*: As well as complicating the implementation and interfering\n     with the introduction of multi-wallet, wallet and non-wallet code should be\n     separated to avoid introducing circular dependencies between code units.\n \n@@ -1041,8 +1041,13 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: RPC methods registered with the same function pointer will be\n     considered aliases and only the first method name will show up in the\n-    `help` rpc command list.\n+    `help` RPC command list.\n \n   - *Exception*: Using RPC method aliases may be appropriate in cases where a\n     new RPC is replacing a deprecated RPC, to avoid both RPCs confusingly\n     showing up in the command list.\n+\n+- Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or\n+  timestamps in the documentation.\n+\n+  - *Rationale*: User-facing consistency."
      }
    ]
  }
]