JeremyRubin,2019-08-30 20:37:32,"I added a cache which works per call/across calls, but does not store the results semi-permanently.\n\nThis should reduce DoS risk of this change.\n\nThere is no risk of _untrusted_ parents causing a resource exploitation, as we immediately return once that is detected.",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-526741579,526741579,
DrahtBot,2019-08-30 22:33:01,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#15931](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15931.html) (Remove GetDepthInMainChain dependency on lo",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-526769063,526769063,
MarcoFalke,2019-09-03 15:48:00,"> If a parent is not trusted, then a child should not be either.\n\nWould be nice to have a test for this or update the `wallet_balance.py` script in case it is already tested there. (`wallet_balance.py` is failing)",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-527518660,527518660,
JeremyRubin,2019-09-03 17:42:37,"I updated the tests to pass.\n\nIn the test, we  have two nodes with a balance of 50 each and then:\n\nSend 40 from node A to node B.\nSend 60 from node B to node A.\n\nThen we would check the balances.\n\nPreviously, we would immediately report a balance of 30 on node B as unconfirmed and trusted.\n\nNow, we show that balance as unconfirmed.\n\nThe balance is indeed ""trusted"" and ""co",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-527563982,527563982,
JeremyRubin,2019-09-05 18:47:57,Test failure unrelated it seems? In assumevalid,https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-528522217,528522217,
promag,2019-09-06 16:52:00,Do you expect a performance penalty for big wallets?,https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-528930189,528930189,
JeremyRubin,2019-09-06 17:26:42,"Yes and No.\n\nYes:\nA properly constructed wallet, which has long-chains of unconfirmed transactions, will take longer to analyze. However, given the use of the set cache it should still be linear in the number of long-chain inputs (this could be large if there are a ton of fully independent unconfirmeds being spent).\n\nNo:\nA normal wallet, and normal wallet transactions (who is confirmed",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-528941809,528941809,
luke-jr,2019-09-20 21:41:03,"> I think the new behavior is correct; we shouldn't be treating those funds as confirmed. If you want to rely on that specific UTXO existing which has given you that balance, you cannot, as a third party spending the other input would destroy that unconfirmed.\n\nBut your balance isn't specific UTXOs. Users don't care about UTXOs, just total bitcoins.\n\n30 BTC should show as confirmed and tru",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-533717925,533717925,
JeremyRubin,2019-09-21 08:16:30,"Then it's a mistake to compute balance from summing IsTrusted, but we shouldn't rely on broken IsTrusted behavior to compute Balance.\n\nBear in mind for the specific situation you're thinking of, there are also edge cases where we over report correct balance. ",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-533778856,533778856,
fjahr,2019-10-01 08:40:46,"> Otherwise, it's possible that a parent is not IsTrusted but a child is.\n\nWas the test you changed a good example of how this can happen or did you have other examples in mind? Would it be worth to have an explicit test for that?",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-536933191,536933191,
JeremyRubin,2019-10-21 20:11:51,"Hi @ryanofsky, thanks for the review!\n\nThis is a change that came up as a bug-fix esque change while working on OP_SECURETHEBAG. You can see the branch where this change is important here: https://github.com/bitcoin/bitcoin/compare/master...JeremyRubin:stb-with-rpc?expand=1. Essentially, without this change, we can be tricked into accepting an OP_SECURETHEBAG output because we don't properly c",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-544687097,544687097,
JeremyRubin,2019-10-21 20:51:34,"I had to rebase to clear out the release notes; code hasn't changed except the comment in wallet_balances.py. I have also updated the PR message.\n\nre-ack when you have a moment @ryanofsky!",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-544702465,544702465,
ariard,2019-10-25 17:17:31,"Code Review ACK 4671fc3, maybe extend DoS protection in a follow-up PR.",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-546437942,546437942,
fjahr,2019-10-30 21:24:02,"Code review ACK 4671fc3d9e669da8b8781f0cbefee43cb9acd527\n\nThanks for adding the extended description in the test. Good idea @ryanofsky !",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-548118527,548118527,
meshcollider,2019-11-05 08:59:41,"Concept ACK, this looks ready with 4 review ACKs",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-549727433,549727433,
ryanofsky,2019-11-05 18:20:21,"re: https://github.com/bitcoin/bitcoin/pull/16766#pullrequestreview-310861505 from @promag \n\n> Looking into `IsTrusted`, couldn't we change it to not require `cs_main` (just `cs_wallet`)?\n\nIt's not trivial because of the GetDepthInMainChain and checkFinalTx calls, but #16426 does this\n\n",https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-549951998,549951998,
MarcoFalke,2019-09-03 19:16:39,"```suggestion\n            assert_equal(self.nodes[1].getbalance(), Decimal('0'))  # node 1's send had an unsafe input\n```",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r320435215,320435215,test/functional/wallet_balance.py
promag,2019-09-05 23:47:40,With the overloaded `IsTrusted` this could be reverted? Same below.,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321529167,321529167,src/wallet/wallet.cpp
promag,2019-09-05 23:51:38,"nit, join with line above - to follow correct format.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321529969,321529969,src/wallet/wallet.cpp
promag,2019-09-05 23:51:48,"nit, snake case - header too.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321529995,321529995,src/wallet/wallet.cpp
JeremyRubin,2019-09-06 02:52:19,Nope -- because I'm caching the trust across the entire wallet (outside the loop) rather than just a single call.,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321558440,321558440,src/wallet/wallet.cpp
JeremyRubin,2019-09-06 02:52:34,Not sure what you mean,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321558475,321558475,src/wallet/wallet.cpp
JeremyRubin,2019-09-06 02:53:58,Did we change styles?,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321558665,321558665,src/wallet/wallet.cpp
sipa,2019-09-06 03:15:17,We settled on a variable naming style in 2017: 47d84414662,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321561721,321561721,src/wallet/wallet.cpp
JeremyRubin,2019-09-06 16:25:33,got it; went ahead and did this in the entire function (rather than leave it half-styled),https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321813286,321813286,src/wallet/wallet.cpp
promag,2019-09-06 16:50:41,"Right, missed this is in a loop 🤦‍♂",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321822248,321822248,src/wallet/wallet.cpp
promag,2019-09-06 16:51:05,"Yup, that was the idea.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r321822360,321822360,src/wallet/wallet.cpp
promag,2019-09-13 11:42:07,Maybe I'm missing something but I think you could avoid calling `GetDepthInMainChain` for parents if `nDepth >= 1`?,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324154009,324154009,src/wallet/wallet.cpp
promag,2019-09-13 11:44:26,"nit, should be private?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324154718,324154718,src/wallet/wallet.h
promag,2019-09-13 11:51:21,"You could `.insert()` here, and use the result value `.second` to know whether it was missing and then call `parent->IsTrusted`.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324156875,324156875,src/wallet/wallet.cpp
JeremyRubin,2019-09-14 06:16:10,"I'm a little uncomfortable with that design because we then need to remove ourselves from the set if the recursion returns false.\n\nIt's also a bit weird because we add ourselves to the trusted set before recursion so technically there are elements not known to be trusted in the set. This is safe because the element is a child, but it's odd. ",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324414041,324414041,src/wallet/wallet.cpp
JeremyRubin,2019-09-14 06:18:01,"You're right, but we already don't recurse on trusted parents right?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324414084,324414084,src/wallet/wallet.cpp
promag,2019-09-14 06:21:05,Doh!,https://github.com/bitcoin/bitcoin/pull/16766#discussion_r324414154,324414154,src/wallet/wallet.cpp
JeremyRubin,2019-09-19 18:02:04,"Actually I'd rather just get rid of the other function as usually you'd want to share the cache across IsTrusted calls...\n\nSlightly more agressive change but maybe it's ok",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r326309913,326309913,src/wallet/wallet.h
fjahr,2019-10-01 08:43:50,"nit: I would prefer to keep using the old interface here and in 2488, 3784 until the `trusted_parents` are actually used/shared.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r329941238,329941238,src/wallet/wallet.cpp
JeremyRubin,2019-10-01 15:30:22,"What do you mean by ""actually used/shared""?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r330124848,330124848,src/wallet/wallet.cpp
fjahr,2019-10-01 15:42:54,"I mean for now, you could leave this line unchanged since `trusted_parents` is not used outside of `IsTrusted`. I know you eventually want to share the parents for optimization but I would not change this line until that is the case.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r330131687,330131687,src/wallet/wallet.cpp
JeremyRubin,2019-10-01 16:15:31,"I'm not sure what the ""eventually"" or ""actually"" part is... this is what is done by the code already. Note that trusted_parents lives outside the for loop so is shared across calls.\n\nAnd it's less so optimization and more so anti-DoS.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r330147652,330147652,src/wallet/wallet.cpp
fjahr,2019-10-01 16:36:46,"I see, I misunderstood at which level the caching is happening, thanks!",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r330157090,330157090,src/wallet/wallet.cpp
ryanofsky,2019-10-21 18:56:50,"In commit ""Update wallet_balance.py test to reflect new behavior"" (bee1dc9f8a5182f03979fa066dc7937fc945bf29)\n\nYou also have a really nice description of the test setup in https://github.com/bitcoin/bitcoin/pull/16766#issuecomment-527563982 that could be nice to incorporate as a comment or link in the `test_balances` function.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r337184938,337184938,test/functional/wallet_balance.py
ariard,2019-10-24 21:00:42,"Hmm I don't know about the need of DoS protection, can't we rely on mempool DEFAULT_ANCESTOR_LIMIT there ? A transaction to be trusted has to be in-mempool (among other standards), so their unconfirmed parent too, at first parent hit which is not we should return. What's th worst complexity for a graph of 25 parents?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338789552,338789552,src/wallet/wallet.cpp
ariard,2019-10-24 21:02:23,"If you go with DoS protection, can't you go further and reuse the cached set of trusted parents between WalletTxToJSON call in `listtransactions` and `listsinceblock`, they are all after chain locks so shouldn't be an issue ?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338790225,338790225,src/wallet/wallet.cpp
ariard,2019-10-24 21:07:23,"nit: maybe precise how the trust computation has been changed ""to evaluate trustiness of outpoint spent by parent and so recursively""",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338792196,338792196,doc/release-notes.md
JeremyRubin,2019-10-24 23:19:27,"Even so, you can imagine a case where we have a single input single output chain of 25 taking:\n\nsum n = 0 to N n = n * (n-1) /2 = O(N^2).\n\nWhich for 25 = 625 iterations.\n\nImagine what this would be for a tree with no descendants limit!\n\n\nThe caching guarantees that it is O(N*log(N)) worst case (could be improved possibly by switching to unordered_set... but it's worth benchmarkin",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338831279,338831279,src/wallet/wallet.cpp
JeremyRubin,2019-10-24 23:20:54,"Possibly, but because it's through the interfaced call I didn't want to scope creep to include that. But it's maybe worth a follow up PR?",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338831601,338831601,src/wallet/wallet.cpp
JeremyRubin,2019-10-24 23:22:41,"I'm not sure what level of detail is best for the release note; will leave up to maintainer discretion. Since it can be nuanced, if someone is relying on this it's best that they read the PR.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338831988,338831988,doc/release-notes.md
sipa,2019-10-24 23:26:28,"I believe the worst case is O(a^n), where a is the number of inputs/output per transaction, and n is the ancestor limit. Simply build a tx graph where every transaction spends a outputs of the previous layer, in a different inputs.",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r338832764,338832764,src/wallet/wallet.cpp
ariard,2019-10-25 17:15:18,"Okay assuming complexity O(a^n), standard txn are limited by MAX_STANDARD_TX_WEIGHT and 148-bytes input, that gives you 548 inputs/outputs on every tx layer so something like 13700 iterations... Would be interesting to know how `IsTrusted` behaves on such computation order, but the fees burn for a DoS attacker seems pretty high.\n\n> Imagine what this would be for a tree with no descendants limi",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r339154872,339154872,src/wallet/wallet.cpp
ariard,2019-10-25 17:16:45,"Really IMO but if DoS protection is worth it, it should take precedence on creeping into interfaced call. ",https://github.com/bitcoin/bitcoin/pull/16766#discussion_r339155391,339155391,src/wallet/wallet.cpp
