[
  {
    "sha": "6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YTU3Y2E5MWRhMjNjNmE1ZDkxMzk5ZmZjN2ZjMDlhOTliNmQ0Yzc2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T01:00:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-13T17:53:47Z"
      },
      "message": "Use FRC::randbytes instead of reading >32 bytes from RNG\n\nThere was only one place in the codebase where we're directly reading >32 bytes from\nthe RNG. One possibility would be to make the built-in RNG support large reads, but\nusing FastRandomContext lets us reuse code better.\n\nThere is no change in behavior here, because the FastRandomContext constructor\nuses GetRandBytes internally.",
      "tree": {
        "sha": "67e68099bd1d3705608631c854f027c5ed5c403a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/67e68099bd1d3705608631c854f027c5ed5c403a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d71d0d7b7f3f1452ec59c68f9e57f62f60d6dbb3"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f0eca899fc7f3cf829659e6a122eff95004c1cf0",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
        "patch": "@@ -181,12 +181,12 @@ void PaymentServerTests::paymentServerTests()\n     QCOMPARE(PaymentServer::verifyExpired(r.paymentRequest.getDetails()), true);\n \n     // Test BIP70 DoS protection:\n-    unsigned char randData[BIP70_MAX_PAYMENTREQUEST_SIZE + 1];\n-    GetRandBytes(randData, sizeof(randData));\n+    auto randdata = FastRandomContext().randbytes(BIP70_MAX_PAYMENTREQUEST_SIZE + 1);\n+\n     // Write data to a temp file:\n     QTemporaryFile tempFile;\n     tempFile.open();\n-    tempFile.write((const char*)randData, sizeof(randData));\n+    tempFile.write((const char*)randdata.data(), randdata.size());\n     tempFile.close();\n     // compares 50001 <= BIP70_MAX_PAYMENTREQUEST_SIZE == false\n     QCOMPARE(PaymentServer::verifySize(tempFile.size()), false);"
      }
    ]
  },
  {
    "sha": "2d1cc5093949f8ea9487a68724162c8b39035ad8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDFjYzUwOTM5NDlmOGVhOTQ4N2E2ODcyNDE2MmM4YjM5MDM1YWQ4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-19T09:50:36Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:08:03Z"
      },
      "message": "Don't log RandAddSeedPerfmon details\n\nThese are hard to deal with, as in a follow-up this function can get\ncalled before the logging infrastructure is initialized.",
      "tree": {
        "sha": "d51c54e8f9dfd05b4c81ae51a8fffd82cfe53c47",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d51c54e8f9dfd05b4c81ae51a8fffd82cfe53c47"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1cc5093949f8ea9487a68724162c8b39035ad8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6a57ca91da23c6a5d91399ffc7fc09a99b6d4c76"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 6,
      "deletions": 6
    },
    "files": [
      {
        "sha": "7dacc477d48285dd93e1d2dda231d07789dd606b",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d1cc5093949f8ea9487a68724162c8b39035ad8/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d1cc5093949f8ea9487a68724162c8b39035ad8/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=2d1cc5093949f8ea9487a68724162c8b39035ad8",
        "patch": "@@ -166,13 +166,13 @@ static void RandAddSeedPerfmon()\n     if (ret == ERROR_SUCCESS) {\n         RAND_add(vData.data(), nSize, nSize / 100.0);\n         memory_cleanse(vData.data(), nSize);\n-        LogPrint(BCLog::RAND, \"%s: %lu bytes\\n\", __func__, nSize);\n     } else {\n-        static bool warned = false; // Warn only once\n-        if (!warned) {\n-            LogPrintf(\"%s: Warning: RegQueryValueExA(HKEY_PERFORMANCE_DATA) failed with code %i\\n\", __func__, ret);\n-            warned = true;\n-        }\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n     }\n #endif\n }"
      }
    ]
  },
  {
    "sha": "05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWZkZTE0ZTNhZmU2ZjcxNTZlYmI2ZGY2Y2QwZTNhZTEyNjM1Yjg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:48:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:46:27Z"
      },
      "message": "Automatically initialize RNG on first use.",
      "tree": {
        "sha": "cd906acda4ca6c7233b9d4776e1fc129c6dbdfed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cd906acda4ca6c7233b9d4776e1fc129c6dbdfed"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2d1cc5093949f8ea9487a68724162c8b39035ad8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d1cc5093949f8ea9487a68724162c8b39035ad8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2d1cc5093949f8ea9487a68724162c8b39035ad8"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 56,
      "deletions": 22
    },
    "files": [
      {
        "sha": "b804a844788bb737983da51d3ba0aaf5fdafd4ee",
        "filename": "src/bench/bench_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/bench/bench_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/bench/bench_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/bench_bitcoin.cpp?ref=05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "patch": "@@ -6,7 +6,6 @@\n \n #include <crypto/sha256.h>\n #include <key.h>\n-#include <random.h>\n #include <util/system.h>\n #include <util/strencodings.h>\n #include <validation.h>\n@@ -67,7 +66,6 @@ int main(int argc, char** argv)\n     const fs::path bench_datadir{SetDataDir()};\n \n     SHA256AutoDetect();\n-    RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n "
      },
      {
        "sha": "caeb87ff05591994e17c3b83178c6d7476295ec5",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 50,
        "deletions": 18,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "patch": "@@ -74,7 +74,6 @@ static inline int64_t GetPerformanceCounter()\n #endif\n }\n \n-\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n@@ -83,13 +82,24 @@ static void RDRandInit()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n-        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n         rdrand_supported = true;\n     }\n     hwrand_initialized.store(true);\n }\n+\n+static void RDRandReport()\n+{\n+    assert(hwrand_initialized.load(std::memory_order_relaxed));\n+    if (rdrand_supported) {\n+        // This must be done in a separate function, as HWRandInit() may be indirectly called\n+        // from global constructors, before logging is initialized.\n+        LogPrintf(\"Using RdRand as an additional entropy source\\n\");\n+    }\n+}\n+\n #else\n static void RDRandInit() {}\n+static void RDRandReport() {}\n #endif\n \n static bool GetHWRand(unsigned char* ent32) {\n@@ -279,6 +289,26 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+namespace {\n+struct RNGState {\n+    Mutex m_mutex;\n+    unsigned char m_state[32] = {0};\n+    uint64_t m_counter = 0;\n+\n+    explicit RNGState() {\n+        RDRandInit();\n+    }\n+};\n+\n+RNGState& GetRNGState()\n+{\n+    // This C++11 idiom relies on the guarantee that static variable are initialized\n+    // on first call, even when multiple parallel calls are permitted.\n+    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n+    return *g_rng;\n+}\n+}\n+\n static void AddDataToRng(void* data, size_t len);\n \n void RandAddSeedSleep()\n@@ -295,29 +325,28 @@ void RandAddSeedSleep()\n     memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n }\n \n-\n-static Mutex cs_rng_state;\n-static unsigned char rng_state[32] = {0};\n-static uint64_t rng_counter = 0;\n-\n static void AddDataToRng(void* data, size_t len) {\n+    RNGState& rng = GetRNGState();\n+\n     CSHA512 hasher;\n     hasher.Write((const unsigned char*)&len, sizeof(len));\n     hasher.Write((const unsigned char*)data, len);\n     unsigned char buf[64];\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n+        WAIT_LOCK(rng.m_mutex, lock);\n+        hasher.Write(rng.m_state, sizeof(rng.m_state));\n+        hasher.Write((const unsigned char*)&rng.m_counter, sizeof(rng.m_counter));\n+        ++rng.m_counter;\n         hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        memcpy(rng.m_state, buf + 32, 32);\n     }\n     memory_cleanse(buf, 64);\n }\n \n void GetStrongRandBytes(unsigned char* out, int num)\n {\n+    RNGState& rng = GetRNGState();\n+\n     assert(num <= 32);\n     CSHA512 hasher;\n     unsigned char buf[64];\n@@ -338,12 +367,12 @@ void GetStrongRandBytes(unsigned char* out, int num)\n \n     // Combine with and update state\n     {\n-        WAIT_LOCK(cs_rng_state, lock);\n-        hasher.Write(rng_state, sizeof(rng_state));\n-        hasher.Write((const unsigned char*)&rng_counter, sizeof(rng_counter));\n-        ++rng_counter;\n+        WAIT_LOCK(rng.m_mutex, lock);\n+        hasher.Write(rng.m_state, sizeof(rng.m_state));\n+        hasher.Write((const unsigned char*)&rng.m_counter, sizeof(rng.m_counter));\n+        ++rng.m_counter;\n         hasher.Finalize(buf);\n-        memcpy(rng_state, buf + 32, 32);\n+        memcpy(rng.m_state, buf + 32, 32);\n     }\n \n     // Produce output\n@@ -480,5 +509,8 @@ FastRandomContext& FastRandomContext::operator=(FastRandomContext&& from) noexce\n \n void RandomInit()\n {\n-    RDRandInit();\n+    // Invoke RNG code to trigger initialization (if not already performed)\n+    GetRNGState();\n+\n+    RDRandReport();\n }"
      },
      {
        "sha": "221545a8eff73a3f09c4e6d4b39d73303d7c5028",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "patch": "@@ -178,7 +178,12 @@ void GetOSRand(unsigned char *ent32);\n  */\n bool Random_SanityCheck();\n \n-/** Initialize the RNG. */\n+/**\n+ * Initialize global RNG state and log any CPU features that are used.\n+ *\n+ * Calling this function is optional. RNG state will be initialized when first\n+ * needed if it is not called.\n+ */\n void RandomInit();\n \n #endif // BITCOIN_RANDOM_H"
      },
      {
        "sha": "23b2076041d1c1520b56a836c76197f640cd6b2a",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "patch": "@@ -49,7 +49,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName)\n     : m_path_root(fs::temp_directory_path() / \"test_bitcoin\" / strprintf(\"%lu_%i\", (unsigned long)GetTime(), (int)(InsecureRandRange(1 << 30))))\n {\n     SHA256AutoDetect();\n-    RandomInit();\n     ECC_Start();\n     SetupEnvironment();\n     SetupNetworking();"
      }
    ]
  },
  {
    "sha": "d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkM2Y1NGQxYzgyYjEzMWQ4MTdiMjBjZDlkYWE3NWY5ZDNjOTQ3NWUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:15:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T23:46:31Z"
      },
      "message": "Rename some hardware RNG related functions",
      "tree": {
        "sha": "06cc865fcc9c9dcb678a8e5a36f5be275209782e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/06cc865fcc9c9dcb678a8e5a36f5be275209782e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05fde14e3afe6f7156ebb6df6cd0e3ae12635b89"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 13,
      "deletions": 8
    },
    "files": [
      {
        "sha": "f31d14acf67cbd0b3c739404edba2c53799bcfbe",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 8,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
        "patch": "@@ -78,7 +78,7 @@ static inline int64_t GetPerformanceCounter()\n static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n-static void RDRandInit()\n+static void InitHardwareRand()\n {\n     uint32_t eax, ebx, ecx, edx;\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n@@ -87,7 +87,7 @@ static void RDRandInit()\n     hwrand_initialized.store(true);\n }\n \n-static void RDRandReport()\n+static void ReportHardwareRand()\n {\n     assert(hwrand_initialized.load(std::memory_order_relaxed));\n     if (rdrand_supported) {\n@@ -98,11 +98,16 @@ static void RDRandReport()\n }\n \n #else\n-static void RDRandInit() {}\n-static void RDRandReport() {}\n+/* Access to other hardware random number generators could be added here later,\n+ * assuming it is sufficiently fast (in the order of a few hundred CPU cycles).\n+ * Slower sources should probably be invoked separately, and/or only from\n+ * RandAddSeedSleep (which is called during idle background operation).\n+ */\n+static void InitHardwareRand() {}\n+static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHWRand(unsigned char* ent32) {\n+static bool GetHardwareRand(unsigned char* ent32) {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n     assert(hwrand_initialized.load(std::memory_order_relaxed));\n     if (rdrand_supported) {\n@@ -296,7 +301,7 @@ struct RNGState {\n     uint64_t m_counter = 0;\n \n     explicit RNGState() {\n-        RDRandInit();\n+        InitHardwareRand();\n     }\n };\n \n@@ -361,7 +366,7 @@ void GetStrongRandBytes(unsigned char* out, int num)\n     hasher.Write(buf, 32);\n \n     // Third source: HW RNG, if available.\n-    if (GetHWRand(buf)) {\n+    if (GetHardwareRand(buf)) {\n         hasher.Write(buf, 32);\n     }\n \n@@ -512,5 +517,5 @@ void RandomInit()\n     // Invoke RNG code to trigger initialization (if not already performed)\n     GetRNGState();\n \n-    RDRandReport();\n+    ReportHardwareRand();\n }"
      }
    ]
  },
  {
    "sha": "aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYWU4YjliZjBmNGZkMmI4MDFlZTcyY2YxOTE1ODhjOGIzYTY3YzNj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T01:03:30Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:31:34Z"
      },
      "message": "Add thread safety annotations to RNG state",
      "tree": {
        "sha": "acf20ab38f866d16f4287a4220e3588c936d1c99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/acf20ab38f866d16f4287a4220e3588c936d1c99"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d3f54d1c82b131d817b20cd9daa75f9d3c9475e1"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 4,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6b7962aa1333154f86bdf915892a169030075e20",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
        "patch": "@@ -297,10 +297,11 @@ void GetRandBytes(unsigned char* buf, int num)\n namespace {\n struct RNGState {\n     Mutex m_mutex;\n-    unsigned char m_state[32] = {0};\n-    uint64_t m_counter = 0;\n+    unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};\n+    uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n \n-    explicit RNGState() {\n+    RNGState()\n+    {\n         InitHardwareRand();\n     }\n };"
      }
    ]
  },
  {
    "sha": "2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyY2NjM2QzYWEzNDZlOTYyMDYyODFhMzkxYmMyOTg3NGNmNWVlN2Y0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:04:35Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:31:37Z"
      },
      "message": "Abstract out seeding/extracting entropy into RNGState::MixExtract",
      "tree": {
        "sha": "9c32dd35ce9134f4268855545ead5714b1a7813f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c32dd35ce9134f4268855545ead5714b1a7813f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aae8b9bf0f4fd2b801ee72cf191588c8b3a67c3c"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 37,
      "deletions": 25
    },
    "files": [
      {
        "sha": "4118ac1b18943d4ed6aa62391be8b4e916f0ec14",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccc3d3aa346e96206281a391bc29874cf5ee7f4/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccc3d3aa346e96206281a391bc29874cf5ee7f4/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
        "patch": "@@ -17,7 +17,7 @@ class CSHA512\n     uint64_t bytes;\n \n public:\n-    static const size_t OUTPUT_SIZE = 64;\n+    static constexpr size_t OUTPUT_SIZE = 64;\n \n     CSHA512();\n     CSHA512& Write(const unsigned char* data, size_t len);"
      },
      {
        "sha": "c78848d56e5b7362e9d5a0cd66347d179b45bd28",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 24,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2ccc3d3aa346e96206281a391bc29874cf5ee7f4/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2ccc3d3aa346e96206281a391bc29874cf5ee7f4/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
        "patch": "@@ -304,6 +304,34 @@ struct RNGState {\n     {\n         InitHardwareRand();\n     }\n+\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n+    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    {\n+        assert(num <= 32);\n+        unsigned char buf[64];\n+        static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        {\n+            LOCK(m_mutex);\n+            // Write the current state of the RNG into the hasher\n+            hasher.Write(m_state, 32);\n+            // Write a new counter number into the state\n+            hasher.Write((const unsigned char*)&m_counter, sizeof(m_counter));\n+            ++m_counter;\n+            // Finalize the hasher\n+            hasher.Finalize(buf);\n+            // Store the last 32 bytes of the hash output as new RNG state.\n+            memcpy(m_state, buf + 32, 32);\n+        }\n+        // If desired, copy (up to) the first 32 bytes of the hash output as output.\n+        if (num) {\n+            assert(out != nullptr);\n+            memcpy(out, buf, num);\n+        }\n+        // Best effort cleanup of internal state\n+        hasher.Reset();\n+        memory_cleanse(buf, 64);\n+    }\n };\n \n RNGState& GetRNGState()\n@@ -315,38 +343,29 @@ RNGState& GetRNGState()\n }\n }\n \n-static void AddDataToRng(void* data, size_t len);\n+static void AddDataToRng(void* data, size_t len, RNGState& rng);\n \n void RandAddSeedSleep()\n {\n+    RNGState& rng = GetRNGState();\n+\n     int64_t nPerfCounter1 = GetPerformanceCounter();\n     std::this_thread::sleep_for(std::chrono::milliseconds(1));\n     int64_t nPerfCounter2 = GetPerformanceCounter();\n \n     // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1));\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2));\n+    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n+    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n \n     memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n     memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n }\n \n-static void AddDataToRng(void* data, size_t len) {\n-    RNGState& rng = GetRNGState();\n-\n+static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n     CSHA512 hasher;\n     hasher.Write((const unsigned char*)&len, sizeof(len));\n     hasher.Write((const unsigned char*)data, len);\n-    unsigned char buf[64];\n-    {\n-        WAIT_LOCK(rng.m_mutex, lock);\n-        hasher.Write(rng.m_state, sizeof(rng.m_state));\n-        hasher.Write((const unsigned char*)&rng.m_counter, sizeof(rng.m_counter));\n-        ++rng.m_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng.m_state, buf + 32, 32);\n-    }\n-    memory_cleanse(buf, 64);\n+    rng.MixExtract(nullptr, 0, std::move(hasher));\n }\n \n void GetStrongRandBytes(unsigned char* out, int num)\n@@ -372,14 +391,7 @@ void GetStrongRandBytes(unsigned char* out, int num)\n     }\n \n     // Combine with and update state\n-    {\n-        WAIT_LOCK(rng.m_mutex, lock);\n-        hasher.Write(rng.m_state, sizeof(rng.m_state));\n-        hasher.Write((const unsigned char*)&rng.m_counter, sizeof(rng.m_counter));\n-        ++rng.m_counter;\n-        hasher.Finalize(buf);\n-        memcpy(rng.m_state, buf + 32, 32);\n-    }\n+    rng.MixExtract(out, num, std::move(hasher));\n \n     // Produce output\n     memcpy(out, buf, num);"
      }
    ]
  },
  {
    "sha": "16e40a8b562ad849a5f5e8b21ceb375e46038243",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNmU0MGE4YjU2MmFkODQ5YTVmNWU4YjIxY2ViMzc1ZTQ2MDM4MjQz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-16T00:03:54Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:33:08Z"
      },
      "message": "Integrate util/system's CInit into RNGState\n\nThis guarantees that OpenSSL is initialized properly whenever randomness\nis used, even when that randomness is invoked from global constructors.\n\nNote that this patch uses Mutex directly, rather than CCriticalSection.\nThis is because the lock-detection code is not necessarily initialized\nduring global constructors.",
      "tree": {
        "sha": "82f3ecf3b995e3e00eafffd94773038606890404",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82f3ecf3b995e3e00eafffd94773038606890404"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/16e40a8b562ad849a5f5e8b21ceb375e46038243",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2ccc3d3aa346e96206281a391bc29874cf5ee7f4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2ccc3d3aa346e96206281a391bc29874cf5ee7f4"
      }
    ],
    "stats": {
      "total": 94,
      "additions": 43,
      "deletions": 51
    },
    "files": [
      {
        "sha": "6699318ee0dc8c2fdf7410de3cbc42051ceaa245",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e40a8b562ad849a5f5e8b21ceb375e46038243/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e40a8b562ad849a5f5e8b21ceb375e46038243/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=16e40a8b562ad849a5f5e8b21ceb375e46038243",
        "patch": "@@ -47,6 +47,7 @@\n \n #include <openssl/err.h>\n #include <openssl/rand.h>\n+#include <openssl/conf.h>\n \n [[noreturn]] static void RandFailure()\n {\n@@ -294,15 +295,46 @@ void GetRandBytes(unsigned char* buf, int num)\n     }\n }\n \n+void LockingCallbackOpenSSL(int mode, int i, const char* file, int line);\n+\n namespace {\n+\n struct RNGState {\n     Mutex m_mutex;\n     unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n+    std::unique_ptr<Mutex[]> m_mutex_openssl;\n \n     RNGState()\n     {\n         InitHardwareRand();\n+\n+        // Init OpenSSL library multithreading support\n+        m_mutex_openssl.reset(new Mutex[CRYPTO_num_locks()]);\n+        CRYPTO_set_locking_callback(LockingCallbackOpenSSL);\n+\n+        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n+        // We don't use them so we don't require the config. However some of our libs may call functions\n+        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n+        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n+        // that the config appears to have been loaded and there are no modules/engines available.\n+        OPENSSL_no_config();\n+\n+#ifdef WIN32\n+        // Seed OpenSSL PRNG with current contents of the screen\n+        RAND_screen();\n+#endif\n+\n+        // Seed OpenSSL PRNG with performance counter\n+        RandAddSeed();\n+    }\n+\n+    ~RNGState()\n+    {\n+        // Securely erase the memory used by the OpenSSL PRNG\n+        RAND_cleanup();\n+        // Shutdown OpenSSL library multithreading support\n+        CRYPTO_set_locking_callback(nullptr);\n     }\n \n     /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n@@ -343,6 +375,17 @@ RNGState& GetRNGState()\n }\n }\n \n+void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n+{\n+    RNGState& rng = GetRNGState();\n+\n+    if (mode & CRYPTO_LOCK) {\n+        rng.m_mutex_openssl[i].lock();\n+    } else {\n+        rng.m_mutex_openssl[i].unlock();\n+    }\n+}\n+\n static void AddDataToRng(void* data, size_t len, RNGState& rng);\n \n void RandAddSeedSleep()"
      },
      {
        "sha": "6cd4c46bdbb9c58149ca9bcf2de27f51a3e13070",
        "filename": "src/util/system.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 51,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/16e40a8b562ad849a5f5e8b21ceb375e46038243/src/util/system.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/16e40a8b562ad849a5f5e8b21ceb375e46038243/src/util/system.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/system.cpp?ref=16e40a8b562ad849a5f5e8b21ceb375e46038243",
        "patch": "@@ -73,9 +73,6 @@\n #include <malloc.h>\n #endif\n \n-#include <openssl/crypto.h>\n-#include <openssl/rand.h>\n-#include <openssl/conf.h>\n #include <thread>\n \n // Application startup time (used for uptime calculation)\n@@ -86,54 +83,6 @@ const char * const BITCOIN_PID_FILENAME = \"bitcoind.pid\";\n \n ArgsManager gArgs;\n \n-/** Init OpenSSL library multithreading support */\n-static std::unique_ptr<CCriticalSection[]> ppmutexOpenSSL;\n-void locking_callback(int mode, int i, const char* file, int line) NO_THREAD_SAFETY_ANALYSIS\n-{\n-    if (mode & CRYPTO_LOCK) {\n-        ENTER_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    } else {\n-        LEAVE_CRITICAL_SECTION(ppmutexOpenSSL[i]);\n-    }\n-}\n-\n-// Singleton for wrapping OpenSSL setup/teardown.\n-class CInit\n-{\n-public:\n-    CInit()\n-    {\n-        // Init OpenSSL library multithreading support\n-        ppmutexOpenSSL.reset(new CCriticalSection[CRYPTO_num_locks()]);\n-        CRYPTO_set_locking_callback(locking_callback);\n-\n-        // OpenSSL can optionally load a config file which lists optional loadable modules and engines.\n-        // We don't use them so we don't require the config. However some of our libs may call functions\n-        // which attempt to load the config file, possibly resulting in an exit() or crash if it is missing\n-        // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n-        // that the config appears to have been loaded and there are no modules/engines available.\n-        OPENSSL_no_config();\n-\n-#ifdef WIN32\n-        // Seed OpenSSL PRNG with current contents of the screen\n-        RAND_screen();\n-#endif\n-\n-        // Seed OpenSSL PRNG with performance counter\n-        RandAddSeed();\n-    }\n-    ~CInit()\n-    {\n-        // Securely erase the memory used by the PRNG\n-        RAND_cleanup();\n-        // Shutdown OpenSSL library multithreading support\n-        CRYPTO_set_locking_callback(nullptr);\n-        // Clear the set of locks now to maintain symmetry with the constructor.\n-        ppmutexOpenSSL.reset();\n-    }\n-}\n-instance_of_cinit;\n-\n /** A map that contains all the currently held directory locks. After\n  * successful locking, these will be held here until the global destructor\n  * cleans them up and thus automatically unlocks them, or ReleaseDirectoryLocks"
      }
    ]
  },
  {
    "sha": "9d7032e4f066777c97c58b1394884716e213790a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZDcwMzJlNGYwNjY3NzdjOTdjNThiMTM5NDg4NDcxNmUyMTM3OTBh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-14T02:37:29Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "message": "Switch all RNG code to the built-in PRNG.\n\nIt includes the following policy changes:\n* All GetRand* functions seed the stack pointer and rdrand result\n  (in addition to the performance counter)\n* The periodic entropy added by the idle scheduler now seeds stack pointer,\n  rdrand and perfmon data (once every 10 minutes) in addition to\n  just a sleep timing.\n* The entropy added when calling GetStrongRandBytes no longer includes\n  the once-per-10-minutes perfmon data on windows (it is moved to the\n  idle scheduler instead, where latency matters less).\n\nOther changes:\n* OpenSSL is no longer seeded directly anywhere. Instead, any generated\n  randomness through our own RNG is fed back to OpenSSL (after an\n  additional hashing step to prevent leaking our RNG state).\n* Seeding that was previously done directly in RandAddSeedSleep is now\n  moved to SeedSleep(), which is indirectly invoked through ProcRand\n  from RandAddSeedSleep.\n* Seeding that was previously done directly in GetStrongRandBytes()\n  is now moved to SeedSlow(), which is indirectly invoked through\n  ProcRand from GetStrongRandBytes().",
      "tree": {
        "sha": "16a2de523fc29912c6f6e37d63795b46b6234a97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/16a2de523fc29912c6f6e37d63795b46b6234a97"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9d7032e4f066777c97c58b1394884716e213790a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7032e4f066777c97c58b1394884716e213790a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7032e4f066777c97c58b1394884716e213790a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7032e4f066777c97c58b1394884716e213790a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "16e40a8b562ad849a5f5e8b21ceb375e46038243",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/16e40a8b562ad849a5f5e8b21ceb375e46038243",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/16e40a8b562ad849a5f5e8b21ceb375e46038243"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 138,
      "deletions": 80
    },
    "files": [
      {
        "sha": "ca54cc9962890fc8d369e2b49dec12ccbc4469db",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 67,
        "changes": 185,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7032e4f066777c97c58b1394884716e213790a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7032e4f066777c97c58b1394884716e213790a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=9d7032e4f066777c97c58b1394884716e213790a",
        "patch": "@@ -145,18 +145,8 @@ static bool GetHardwareRand(unsigned char* ent32) {\n     return false;\n }\n \n-void RandAddSeed()\n+static void RandAddSeedPerfmon(CSHA512& hasher)\n {\n-    // Seed with CPU performance counter\n-    int64_t nCounter = GetPerformanceCounter();\n-    RAND_add(&nCounter, sizeof(nCounter), 1.5);\n-    memory_cleanse((void*)&nCounter, sizeof(nCounter));\n-}\n-\n-static void RandAddSeedPerfmon()\n-{\n-    RandAddSeed();\n-\n #ifdef WIN32\n     // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n     // Seed with the entire set of perfmon data\n@@ -180,7 +170,7 @@ static void RandAddSeedPerfmon()\n     }\n     RegCloseKey(HKEY_PERFORMANCE_DATA);\n     if (ret == ERROR_SUCCESS) {\n-        RAND_add(vData.data(), nSize, nSize / 100.0);\n+        hasher.Write(vData.data(), nSize);\n         memory_cleanse(vData.data(), nSize);\n     } else {\n         // Performance data is only a best-effort attempt at improving the\n@@ -288,13 +278,6 @@ void GetOSRand(unsigned char *ent32)\n #endif\n }\n \n-void GetRandBytes(unsigned char* buf, int num)\n-{\n-    if (RAND_bytes(buf, num) != 1) {\n-        RandFailure();\n-    }\n-}\n-\n void LockingCallbackOpenSSL(int mode, int i, const char* file, int line);\n \n namespace {\n@@ -303,6 +286,7 @@ struct RNGState {\n     Mutex m_mutex;\n     unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n+    bool m_strongly_seeded GUARDED_BY(m_mutex) = false;\n     std::unique_ptr<Mutex[]> m_mutex_openssl;\n \n     RNGState()\n@@ -319,14 +303,6 @@ struct RNGState {\n         // or corrupt. Explicitly tell OpenSSL not to try to load the file. The result for our libs will be\n         // that the config appears to have been loaded and there are no modules/engines available.\n         OPENSSL_no_config();\n-\n-#ifdef WIN32\n-        // Seed OpenSSL PRNG with current contents of the screen\n-        RAND_screen();\n-#endif\n-\n-        // Seed OpenSSL PRNG with performance counter\n-        RandAddSeed();\n     }\n \n     ~RNGState()\n@@ -337,14 +313,19 @@ struct RNGState {\n         CRYPTO_set_locking_callback(nullptr);\n     }\n \n-    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher. */\n-    void MixExtract(unsigned char* out, size_t num, CSHA512&& hasher)\n+    /** Extract up to 32 bytes of entropy from the RNG state, mixing in new entropy from hasher.\n+     *\n+     * If this function has never been called with strong_seed = true, false is returned.\n+     */\n+    bool MixExtract(unsigned char* out, size_t num, CSHA512&& hasher, bool strong_seed)\n     {\n         assert(num <= 32);\n         unsigned char buf[64];\n         static_assert(sizeof(buf) == CSHA512::OUTPUT_SIZE, \"Buffer needs to have hasher's output size\");\n+        bool ret;\n         {\n             LOCK(m_mutex);\n+            ret = (m_strongly_seeded |= strong_seed);\n             // Write the current state of the RNG into the hasher\n             hasher.Write(m_state, 32);\n             // Write a new counter number into the state\n@@ -363,6 +344,7 @@ struct RNGState {\n         // Best effort cleanup of internal state\n         hasher.Reset();\n         memory_cleanse(buf, 64);\n+        return ret;\n     }\n };\n \n@@ -386,61 +368,128 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng);\n+static void SeedTimestamp(CSHA512& hasher)\n+{\n+    int64_t perfcounter = GetPerformanceCounter();\n+    hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n+}\n \n-void RandAddSeedSleep()\n+static void SeedFast(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    unsigned char buffer[32];\n \n-    int64_t nPerfCounter1 = GetPerformanceCounter();\n-    std::this_thread::sleep_for(std::chrono::milliseconds(1));\n-    int64_t nPerfCounter2 = GetPerformanceCounter();\n+    // Stack pointer to indirectly commit to thread/callstack\n+    const unsigned char* ptr = buffer;\n+    hasher.Write((const unsigned char*)&ptr, sizeof(ptr));\n \n-    // Combine with and update state\n-    AddDataToRng(&nPerfCounter1, sizeof(nPerfCounter1), rng);\n-    AddDataToRng(&nPerfCounter2, sizeof(nPerfCounter2), rng);\n+    // Hardware randomness is very fast when available; use it always.\n+    bool have_hw_rand = GetHardwareRand(buffer);\n+    if (have_hw_rand) hasher.Write(buffer, sizeof(buffer));\n \n-    memory_cleanse(&nPerfCounter1, sizeof(nPerfCounter1));\n-    memory_cleanse(&nPerfCounter2, sizeof(nPerfCounter2));\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n }\n \n-static void AddDataToRng(void* data, size_t len, RNGState& rng) {\n-    CSHA512 hasher;\n-    hasher.Write((const unsigned char*)&len, sizeof(len));\n-    hasher.Write((const unsigned char*)data, len);\n-    rng.MixExtract(nullptr, 0, std::move(hasher));\n+static void SeedSlow(CSHA512& hasher)\n+{\n+    unsigned char buffer[32];\n+\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n+\n+    // OS randomness\n+    GetOSRand(buffer);\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // OpenSSL RNG (for now)\n+    RAND_bytes(buffer, sizeof(buffer));\n+    hasher.Write(buffer, sizeof(buffer));\n+\n+    // High-precision timestamp.\n+    //\n+    // Note that we also commit to a timestamp in the Fast seeder, so we indirectly commit to a\n+    // benchmark of all the entropy gathering sources in this function).\n+    SeedTimestamp(hasher);\n }\n \n-void GetStrongRandBytes(unsigned char* out, int num)\n+static void SeedSleep(CSHA512& hasher)\n {\n-    RNGState& rng = GetRNGState();\n+    // Everything that the 'fast' seeder includes\n+    SeedFast(hasher);\n \n-    assert(num <= 32);\n-    CSHA512 hasher;\n-    unsigned char buf[64];\n+    // High-precision timestamp\n+    SeedTimestamp(hasher);\n \n-    // First source: OpenSSL's RNG\n-    RandAddSeedPerfmon();\n-    GetRandBytes(buf, 32);\n-    hasher.Write(buf, 32);\n+    // Sleep for 1ms\n+    MilliSleep(1);\n \n-    // Second source: OS RNG\n-    GetOSRand(buf);\n-    hasher.Write(buf, 32);\n+    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n+    SeedTimestamp(hasher);\n \n-    // Third source: HW RNG, if available.\n-    if (GetHardwareRand(buf)) {\n-        hasher.Write(buf, 32);\n+    // Windows performance monitor data (once every 10 minutes)\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+static void SeedStartup(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    RAND_screen();\n+#endif\n+\n+    // Everything that the 'slow' seeder includes.\n+    SeedSlow(hasher);\n+\n+    // Windows performance monitor data.\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+enum class RNGLevel {\n+    FAST, //!< Automatically called by GetRandBytes\n+    SLOW, //!< Automatically called by GetStrongRandBytes\n+    SLEEP, //!< Called by RandAddSeedSleep()\n+};\n+\n+static void ProcRand(unsigned char* out, int num, RNGLevel level)\n+{\n+    // Make sure the RNG is initialized first (as all Seed* function possibly need hwrand to be available).\n+    RNGState& rng = GetRNGState();\n+\n+    assert(num <= 32);\n+\n+    CSHA512 hasher;\n+    switch (level) {\n+    case RNGLevel::FAST:\n+        SeedFast(hasher);\n+        break;\n+    case RNGLevel::SLOW:\n+        SeedSlow(hasher);\n+        break;\n+    case RNGLevel::SLEEP:\n+        SeedSleep(hasher);\n+        break;\n     }\n \n     // Combine with and update state\n-    rng.MixExtract(out, num, std::move(hasher));\n+    if (!rng.MixExtract(out, num, std::move(hasher), false)) {\n+        // On the first invocation, also seed with SeedStartup().\n+        CSHA512 startup_hasher;\n+        SeedStartup(startup_hasher);\n+        rng.MixExtract(out, num, std::move(startup_hasher), true);\n+    }\n \n-    // Produce output\n-    memcpy(out, buf, num);\n-    memory_cleanse(buf, 64);\n+    // For anything but the 'fast' level, feed the resulting RNG output (after an additional hashing step) back into OpenSSL.\n+    if (level != RNGLevel::FAST) {\n+        unsigned char buf[64];\n+        CSHA512().Write(out, num).Finalize(buf);\n+        RAND_add(buf, sizeof(buf), num);\n+        memory_cleanse(buf, 64);\n+    }\n }\n \n+void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }\n+\n uint64_t GetRand(uint64_t nMax)\n {\n     if (nMax == 0)\n@@ -539,8 +588,10 @@ bool Random_SanityCheck()\n     if (stop == start) return false;\n \n     // We called GetPerformanceCounter. Use it as entropy.\n-    RAND_add((const unsigned char*)&start, sizeof(start), 1);\n-    RAND_add((const unsigned char*)&stop, sizeof(stop), 1);\n+    CSHA512 to_add;\n+    to_add.Write((const unsigned char*)&start, sizeof(start));\n+    to_add.Write((const unsigned char*)&stop, sizeof(stop));\n+    GetRNGState().MixExtract(nullptr, 0, std::move(to_add), false);\n \n     return true;\n }\n@@ -571,7 +622,7 @@ FastRandomContext& FastRandomContext::operator=(FastRandomContext&& from) noexce\n void RandomInit()\n {\n     // Invoke RNG code to trigger initialization (if not already performed)\n-    GetRNGState();\n+    ProcRand(nullptr, 0, RNGLevel::FAST);\n \n     ReportHardwareRand();\n }"
      },
      {
        "sha": "592f36a406ec5a889f532e4e3b4b3eabb86dc7e6",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 19,
        "deletions": 12,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7032e4f066777c97c58b1394884716e213790a/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7032e4f066777c97c58b1394884716e213790a/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=9d7032e4f066777c97c58b1394884716e213790a",
        "patch": "@@ -13,33 +13,40 @@\n #include <stdint.h>\n #include <limits>\n \n-/* Seed OpenSSL PRNG with additional entropy data */\n-void RandAddSeed();\n-\n /**\n- * Functions to gather random data via the OpenSSL PRNG\n+ * Generate random data via the internal PRNG.\n+ *\n+ * These functions are designed to be fast (sub microsecond), but do not necessarily\n+ * meaningfully add entropy to the PRNG state.\n+ *\n+ * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num);\n uint64_t GetRand(uint64_t nMax);\n int GetRandInt(int nMax);\n uint256 GetRandHash();\n \n /**\n- * Add a little bit of randomness to the output of GetStrongRangBytes.\n- * This sleeps for a millisecond, so should only be called when there is\n- * no other work to be done.\n+ * Gather entropy from various sources, feed it into the internal PRNG, and\n+ * generate random data using it.\n+ *\n+ * This function will cause failure whenever the OS RNG fails.\n+ *\n+ * Thread-safe.\n  */\n-void RandAddSeedSleep();\n+void GetStrongRandBytes(unsigned char* buf, int num);\n \n /**\n- * Function to gather random data from multiple sources, failing whenever any\n- * of those sources fail to provide a result.\n+ * Sleep for 1ms, gather entropy from various sources, and feed them to the PRNG state.\n+ *\n+ * Thread-safe.\n  */\n-void GetStrongRandBytes(unsigned char* buf, int num);\n+void RandAddSeedSleep();\n \n /**\n  * Fast randomness source. This is seeded once with secure random data, but\n- * is completely deterministic and insecure after that.\n+ * is completely deterministic and does not gather more entropy after that.\n+ *\n  * This class is not thread-safe.\n  */\n class FastRandomContext {"
      },
      {
        "sha": "fdc859b3a0fbbc0fba471a1b949f70b795235a7a",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9d7032e4f066777c97c58b1394884716e213790a/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9d7032e4f066777c97c58b1394884716e213790a/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=9d7032e4f066777c97c58b1394884716e213790a",
        "patch": "@@ -41,7 +41,7 @@ void CScheduler::serviceQueue()\n         try {\n             if (!shouldStop() && taskQueue.empty()) {\n                 reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n-                // Use this chance to get a tiny bit more entropy\n+                // Use this chance to get more entropy\n                 RandAddSeedSleep();\n             }\n             while (!shouldStop() && taskQueue.empty()) {"
      }
    ]
  },
  {
    "sha": "4ea8e50837a0932b31a241988fd68d6730a2048a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZWE4ZTUwODM3YTA5MzJiMzFhMjQxOTg4ZmQ2OGQ2NzMwYTIwNDhh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-18T00:22:22Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "message": "Remove hwrand_initialized.\n\n All access to hwrand is now gated by GetRNGState, which initializes the hwrand code.",
      "tree": {
        "sha": "03c43d9e325c5ce2bba307bc096c1626586121a2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/03c43d9e325c5ce2bba307bc096c1626586121a2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4ea8e50837a0932b31a241988fd68d6730a2048a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea8e50837a0932b31a241988fd68d6730a2048a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea8e50837a0932b31a241988fd68d6730a2048a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea8e50837a0932b31a241988fd68d6730a2048a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9d7032e4f066777c97c58b1394884716e213790a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9d7032e4f066777c97c58b1394884716e213790a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9d7032e4f066777c97c58b1394884716e213790a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 0,
      "deletions": 4
    },
    "files": [
      {
        "sha": "3f2465b2ede69e132e4a71cf45ccaf31d27629c8",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4ea8e50837a0932b31a241988fd68d6730a2048a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4ea8e50837a0932b31a241988fd68d6730a2048a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=4ea8e50837a0932b31a241988fd68d6730a2048a",
        "patch": "@@ -76,7 +76,6 @@ static inline int64_t GetPerformanceCounter()\n }\n \n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-static std::atomic<bool> hwrand_initialized{false};\n static bool rdrand_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n static void InitHardwareRand()\n@@ -85,12 +84,10 @@ static void InitHardwareRand()\n     if (__get_cpuid(1, &eax, &ebx, &ecx, &edx) && (ecx & CPUID_F1_ECX_RDRAND)) {\n         rdrand_supported = true;\n     }\n-    hwrand_initialized.store(true);\n }\n \n static void ReportHardwareRand()\n {\n-    assert(hwrand_initialized.load(std::memory_order_relaxed));\n     if (rdrand_supported) {\n         // This must be done in a separate function, as HWRandInit() may be indirectly called\n         // from global constructors, before logging is initialized.\n@@ -110,7 +107,6 @@ static void ReportHardwareRand() {}\n \n static bool GetHardwareRand(unsigned char* ent32) {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-    assert(hwrand_initialized.load(std::memory_order_relaxed));\n     if (rdrand_supported) {\n         uint8_t ok;\n         // Not all assemblers support the rdrand instruction, write it in hex."
      }
    ]
  },
  {
    "sha": "a1f252eda87356fa329c838a7bf569808489648f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMWYyNTJlZGE4NzM1NmZhMzI5YzgzOGE3YmY1Njk4MDg0ODk2NDhm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-12-17T23:11:33Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:56Z"
      },
      "message": "Sprinkle some sweet noexcepts over the RNG code",
      "tree": {
        "sha": "0acb8aa71ee5c1a119cdc75b791d6542d7af0d8b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0acb8aa71ee5c1a119cdc75b791d6542d7af0d8b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a1f252eda87356fa329c838a7bf569808489648f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f252eda87356fa329c838a7bf569808489648f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f252eda87356fa329c838a7bf569808489648f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f252eda87356fa329c838a7bf569808489648f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4ea8e50837a0932b31a241988fd68d6730a2048a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4ea8e50837a0932b31a241988fd68d6730a2048a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4ea8e50837a0932b31a241988fd68d6730a2048a"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 46,
      "deletions": 31
    },
    "files": [
      {
        "sha": "e4c23ceac638117f0aa99feb8c605903d25873cc",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 17,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f252eda87356fa329c838a7bf569808489648f/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f252eda87356fa329c838a7bf569808489648f/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=a1f252eda87356fa329c838a7bf569808489648f",
        "patch": "@@ -55,7 +55,7 @@\n     std::abort();\n }\n \n-static inline int64_t GetPerformanceCounter()\n+static inline int64_t GetPerformanceCounter() noexcept\n {\n     // Read the hardware time stamp counter when available.\n     // See https://en.wikipedia.org/wiki/Time_Stamp_Counter for more information.\n@@ -105,7 +105,7 @@ static void InitHardwareRand() {}\n static void ReportHardwareRand() {}\n #endif\n \n-static bool GetHardwareRand(unsigned char* ent32) {\n+static bool GetHardwareRand(unsigned char* ent32) noexcept {\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n     if (rdrand_supported) {\n         uint8_t ok;\n@@ -285,7 +285,7 @@ struct RNGState {\n     bool m_strongly_seeded GUARDED_BY(m_mutex) = false;\n     std::unique_ptr<Mutex[]> m_mutex_openssl;\n \n-    RNGState()\n+    RNGState() noexcept\n     {\n         InitHardwareRand();\n \n@@ -313,7 +313,7 @@ struct RNGState {\n      *\n      * If this function has never been called with strong_seed = true, false is returned.\n      */\n-    bool MixExtract(unsigned char* out, size_t num, CSHA512&& hasher, bool strong_seed)\n+    bool MixExtract(unsigned char* out, size_t num, CSHA512&& hasher, bool strong_seed) noexcept\n     {\n         assert(num <= 32);\n         unsigned char buf[64];\n@@ -344,7 +344,7 @@ struct RNGState {\n     }\n };\n \n-RNGState& GetRNGState()\n+RNGState& GetRNGState() noexcept\n {\n     // This C++11 idiom relies on the guarantee that static variable are initialized\n     // on first call, even when multiple parallel calls are permitted.\n@@ -364,13 +364,28 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     }\n }\n \n-static void SeedTimestamp(CSHA512& hasher)\n+/* A note on the use of noexcept in the seeding functions below:\n+ *\n+ * None of the RNG code should ever throw any exception, with the sole exception\n+ * of MilliSleep in SeedSleep, which can (and does) support interruptions which\n+ * cause a boost::thread_interrupted to be thrown.\n+ *\n+ * This means that SeedSleep, and all functions that invoke it are throwing.\n+ * However, we know that GetRandBytes() and GetStrongRandBytes() never trigger\n+ * this sleeping logic, so they are noexcept. The same is true for all the\n+ * GetRand*() functions that use GetRandBytes() indirectly.\n+ *\n+ * TODO: After moving away from interruptible boost-based thread management,\n+ * everything can become noexcept here.\n+ */\n+\n+static void SeedTimestamp(CSHA512& hasher) noexcept\n {\n     int64_t perfcounter = GetPerformanceCounter();\n     hasher.Write((const unsigned char*)&perfcounter, sizeof(perfcounter));\n }\n \n-static void SeedFast(CSHA512& hasher)\n+static void SeedFast(CSHA512& hasher) noexcept\n {\n     unsigned char buffer[32];\n \n@@ -386,7 +401,7 @@ static void SeedFast(CSHA512& hasher)\n     SeedTimestamp(hasher);\n }\n \n-static void SeedSlow(CSHA512& hasher)\n+static void SeedSlow(CSHA512& hasher) noexcept\n {\n     unsigned char buffer[32];\n \n@@ -426,7 +441,7 @@ static void SeedSleep(CSHA512& hasher)\n     RandAddSeedPerfmon(hasher);\n }\n \n-static void SeedStartup(CSHA512& hasher)\n+static void SeedStartup(CSHA512& hasher) noexcept\n {\n #ifdef WIN32\n     RAND_screen();\n@@ -482,11 +497,11 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     }\n }\n \n-void GetRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::FAST); }\n-void GetStrongRandBytes(unsigned char* buf, int num) { ProcRand(buf, num, RNGLevel::SLOW); }\n+void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }\n \n-uint64_t GetRand(uint64_t nMax)\n+uint64_t GetRand(uint64_t nMax) noexcept\n {\n     if (nMax == 0)\n         return 0;\n@@ -501,12 +516,12 @@ uint64_t GetRand(uint64_t nMax)\n     return (nRand % nMax);\n }\n \n-int GetRandInt(int nMax)\n+int GetRandInt(int nMax) noexcept\n {\n     return GetRand(nMax);\n }\n \n-uint256 GetRandHash()\n+uint256 GetRandHash() noexcept\n {\n     uint256 hash;\n     GetRandBytes((unsigned char*)&hash, sizeof(hash));\n@@ -520,7 +535,7 @@ void FastRandomContext::RandomSeed()\n     requires_seed = false;\n }\n \n-uint256 FastRandomContext::rand256()\n+uint256 FastRandomContext::rand256() noexcept\n {\n     if (bytebuf_size < 32) {\n         FillByteBuffer();\n@@ -541,7 +556,7 @@ std::vector<unsigned char> FastRandomContext::randbytes(size_t len)\n     return ret;\n }\n \n-FastRandomContext::FastRandomContext(const uint256& seed) : requires_seed(false), bytebuf_size(0), bitbuf_size(0)\n+FastRandomContext::FastRandomContext(const uint256& seed) noexcept : requires_seed(false), bytebuf_size(0), bitbuf_size(0)\n {\n     rng.SetKey(seed.begin(), 32);\n }\n@@ -592,7 +607,7 @@ bool Random_SanityCheck()\n     return true;\n }\n \n-FastRandomContext::FastRandomContext(bool fDeterministic) : requires_seed(!fDeterministic), bytebuf_size(0), bitbuf_size(0)\n+FastRandomContext::FastRandomContext(bool fDeterministic) noexcept : requires_seed(!fDeterministic), bytebuf_size(0), bitbuf_size(0)\n {\n     if (!fDeterministic) {\n         return;"
      },
      {
        "sha": "038e3ecd7806355952499da075a069204a0b8ed7",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a1f252eda87356fa329c838a7bf569808489648f/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a1f252eda87356fa329c838a7bf569808489648f/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=a1f252eda87356fa329c838a7bf569808489648f",
        "patch": "@@ -21,10 +21,10 @@\n  *\n  * Thread-safe.\n  */\n-void GetRandBytes(unsigned char* buf, int num);\n-uint64_t GetRand(uint64_t nMax);\n-int GetRandInt(int nMax);\n-uint256 GetRandHash();\n+void GetRandBytes(unsigned char* buf, int num) noexcept;\n+uint64_t GetRand(uint64_t nMax) noexcept;\n+int GetRandInt(int nMax) noexcept;\n+uint256 GetRandHash() noexcept;\n \n /**\n  * Gather entropy from various sources, feed it into the internal PRNG, and\n@@ -34,7 +34,7 @@ uint256 GetRandHash();\n  *\n  * Thread-safe.\n  */\n-void GetStrongRandBytes(unsigned char* buf, int num);\n+void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n \n /**\n  * Sleep for 1ms, gather entropy from various sources, and feed them to the PRNG state.\n@@ -78,10 +78,10 @@ class FastRandomContext {\n     }\n \n public:\n-    explicit FastRandomContext(bool fDeterministic = false);\n+    explicit FastRandomContext(bool fDeterministic = false) noexcept;\n \n     /** Initialize with explicit seed (only for testing) */\n-    explicit FastRandomContext(const uint256& seed);\n+    explicit FastRandomContext(const uint256& seed) noexcept;\n \n     // Do not permit copying a FastRandomContext (move it, or create a new one to get reseeded).\n     FastRandomContext(const FastRandomContext&) = delete;\n@@ -92,7 +92,7 @@ class FastRandomContext {\n     FastRandomContext& operator=(FastRandomContext&& from) noexcept;\n \n     /** Generate a random 64-bit integer. */\n-    uint64_t rand64()\n+    uint64_t rand64() noexcept\n     {\n         if (bytebuf_size < 8) FillByteBuffer();\n         uint64_t ret = ReadLE64(bytebuf + 64 - bytebuf_size);\n@@ -101,7 +101,7 @@ class FastRandomContext {\n     }\n \n     /** Generate a random (bits)-bit integer. */\n-    uint64_t randbits(int bits) {\n+    uint64_t randbits(int bits) noexcept {\n         if (bits == 0) {\n             return 0;\n         } else if (bits > 32) {\n@@ -116,7 +116,7 @@ class FastRandomContext {\n     }\n \n     /** Generate a random integer in the range [0..range). */\n-    uint64_t randrange(uint64_t range)\n+    uint64_t randrange(uint64_t range) noexcept\n     {\n         --range;\n         int bits = CountBits(range);\n@@ -130,19 +130,19 @@ class FastRandomContext {\n     std::vector<unsigned char> randbytes(size_t len);\n \n     /** Generate a random 32-bit integer. */\n-    uint32_t rand32() { return randbits(32); }\n+    uint32_t rand32() noexcept { return randbits(32); }\n \n     /** generate a random uint256. */\n-    uint256 rand256();\n+    uint256 rand256() noexcept;\n \n     /** Generate a random boolean. */\n-    bool randbool() { return randbits(1); }\n+    bool randbool() noexcept { return randbits(1); }\n \n     // Compatibility with the C++11 UniformRandomBitGenerator concept\n     typedef uint64_t result_type;\n     static constexpr uint64_t min() { return 0; }\n     static constexpr uint64_t max() { return std::numeric_limits<uint64_t>::max(); }\n-    inline uint64_t operator()() { return rand64(); }\n+    inline uint64_t operator()() noexcept { return rand64(); }\n };\n \n /** More efficient than using std::shuffle on a FastRandomContext."
      }
    ]
  },
  {
    "sha": "152146e782d401aa1ce7d989d62306aabc85f22e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNTIxNDZlNzgyZDQwMWFhMWNlN2Q5ODlkNjIzMDZhYWJjODVmMjJl",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-04T10:00:44Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "message": "DRY: Implement GetRand using FastRandomContext::randrange",
      "tree": {
        "sha": "d53ba894771ed716950149e0d5559e0f2d7d2ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d53ba894771ed716950149e0d5559e0f2d7d2ecd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/152146e782d401aa1ce7d989d62306aabc85f22e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152146e782d401aa1ce7d989d62306aabc85f22e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/152146e782d401aa1ce7d989d62306aabc85f22e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152146e782d401aa1ce7d989d62306aabc85f22e/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a1f252eda87356fa329c838a7bf569808489648f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a1f252eda87356fa329c838a7bf569808489648f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a1f252eda87356fa329c838a7bf569808489648f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 1,
      "deletions": 11
    },
    "files": [
      {
        "sha": "f52b5837aa904f9561be5468982265e92ffaf237",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 11,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/152146e782d401aa1ce7d989d62306aabc85f22e/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/152146e782d401aa1ce7d989d62306aabc85f22e/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=152146e782d401aa1ce7d989d62306aabc85f22e",
        "patch": "@@ -503,17 +503,7 @@ void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }\n \n uint64_t GetRand(uint64_t nMax) noexcept\n {\n-    if (nMax == 0)\n-        return 0;\n-\n-    // The range of the random source must be a multiple of the modulus\n-    // to give every possible output value an equal possibility\n-    uint64_t nRange = (std::numeric_limits<uint64_t>::max() / nMax) * nMax;\n-    uint64_t nRand = 0;\n-    do {\n-        GetRandBytes((unsigned char*)&nRand, sizeof(nRand));\n-    } while (nRand >= nRange);\n-    return (nRand % nMax);\n+    return FastRandomContext().randrange(nMax);\n }\n \n int GetRandInt(int nMax) noexcept"
      }
    ]
  },
  {
    "sha": "cddb31bb0a132afa50b5350196cf26f0064fe3e2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGRiMzFiYjBhMTMyYWZhNTBiNTM1MDE5NmNmMjZmMDA2NGZlM2Uy",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-11T02:19:50Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "message": "Encapsulate RNGState better",
      "tree": {
        "sha": "216523d5bfa9047b8955396fa056876b0d0762ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/216523d5bfa9047b8955396fa056876b0d0762ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "152146e782d401aa1ce7d989d62306aabc85f22e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/152146e782d401aa1ce7d989d62306aabc85f22e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/152146e782d401aa1ce7d989d62306aabc85f22e"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 6,
      "deletions": 3
    },
    "files": [
      {
        "sha": "fe5341ba5f0e0a16438374c1af00582ba9a0dd9d",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cddb31bb0a132afa50b5350196cf26f0064fe3e2/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cddb31bb0a132afa50b5350196cf26f0064fe3e2/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=cddb31bb0a132afa50b5350196cf26f0064fe3e2",
        "patch": "@@ -278,13 +278,14 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line);\n \n namespace {\n \n-struct RNGState {\n+class RNGState {\n     Mutex m_mutex;\n     unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n     bool m_strongly_seeded GUARDED_BY(m_mutex) = false;\n     std::unique_ptr<Mutex[]> m_mutex_openssl;\n \n+public:\n     RNGState() noexcept\n     {\n         InitHardwareRand();\n@@ -342,6 +343,8 @@ struct RNGState {\n         memory_cleanse(buf, 64);\n         return ret;\n     }\n+\n+    Mutex& GetOpenSSLMutex(int i) { return m_mutex_openssl[i]; }\n };\n \n RNGState& GetRNGState() noexcept\n@@ -358,9 +361,9 @@ void LockingCallbackOpenSSL(int mode, int i, const char* file, int line) NO_THRE\n     RNGState& rng = GetRNGState();\n \n     if (mode & CRYPTO_LOCK) {\n-        rng.m_mutex_openssl[i].lock();\n+        rng.GetOpenSSLMutex(i).lock();\n     } else {\n-        rng.m_mutex_openssl[i].unlock();\n+        rng.GetOpenSSLMutex(i).unlock();\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMmU2MGNhOTg1MzBlMGE4NjVmZjZjNmZkM2M1NjMzYWVjMTFhNTE1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-11T02:34:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:34:57Z"
      },
      "message": "Use secure allocator for RNG state",
      "tree": {
        "sha": "dbed713723856c2e75ebcb08b6287fad7cdf04d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dbed713723856c2e75ebcb08b6287fad7cdf04d2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cddb31bb0a132afa50b5350196cf26f0064fe3e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cddb31bb0a132afa50b5350196cf26f0064fe3e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cddb31bb0a132afa50b5350196cf26f0064fe3e2"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4cd6c9ddc16acc895a26bc8b2c36ef4b4834567e",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f2e60ca98530e0a865ff6c6fd3c5633aec11a515/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f2e60ca98530e0a865ff6c6fd3c5633aec11a515/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
        "patch": "@@ -19,6 +19,8 @@\n #include <chrono>\n #include <thread>\n \n+#include <support/allocators/secure.h>\n+\n #ifndef WIN32\n #include <fcntl.h>\n #include <sys/time.h>\n@@ -351,8 +353,8 @@ RNGState& GetRNGState() noexcept\n {\n     // This C++11 idiom relies on the guarantee that static variable are initialized\n     // on first call, even when multiple parallel calls are permitted.\n-    static std::unique_ptr<RNGState> g_rng{new RNGState()};\n-    return *g_rng;\n+    static std::vector<RNGState, secure_allocator<RNGState>> g_rng(1);\n+    return g_rng[0];\n }\n }\n "
      }
    ]
  },
  {
    "sha": "223de8d94d6522f795ec3c2e7db27469f24aa68c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjNkZThkOTRkNjUyMmY3OTVlYzNjMmU3ZGIyNzQ2OWYyNGFhNjhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-13T18:51:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-01-17T00:35:54Z"
      },
      "message": "Document RNG design in random.h",
      "tree": {
        "sha": "60448895cf16e6ea5fef6dba41253bcc06208a9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/60448895cf16e6ea5fef6dba41253bcc06208a9a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223de8d94d6522f795ec3c2e7db27469f24aa68c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223de8d94d6522f795ec3c2e7db27469f24aa68c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/223de8d94d6522f795ec3c2e7db27469f24aa68c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223de8d94d6522f795ec3c2e7db27469f24aa68c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f2e60ca98530e0a865ff6c6fd3c5633aec11a515",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f2e60ca98530e0a865ff6c6fd3c5633aec11a515"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3b7f7910b0af86bb623d2eaa0102b72833779311",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223de8d94d6522f795ec3c2e7db27469f24aa68c/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223de8d94d6522f795ec3c2e7db27469f24aa68c/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=223de8d94d6522f795ec3c2e7db27469f24aa68c",
        "patch": "@@ -282,6 +282,14 @@ namespace {\n \n class RNGState {\n     Mutex m_mutex;\n+    /* The RNG state consists of 256 bits of entropy, taken from the output of\n+     * one operation's SHA512 output, and fed as input to the next one.\n+     * Carrying 256 bits of entropy should be sufficient to guarantee\n+     * unpredictability as long as any entropy source was ever unpredictable\n+     * to an attacker. To protect against situations where an attacker might\n+     * observe the RNG's state, fresh entropy is always mixed when\n+     * GetStrongRandBytes is called.\n+     */\n     unsigned char m_state[32] GUARDED_BY(m_mutex) = {0};\n     uint64_t m_counter GUARDED_BY(m_mutex) = 0;\n     bool m_strongly_seeded GUARDED_BY(m_mutex) = false;"
      },
      {
        "sha": "4c73f3822ab2f041fb007b8c0ef01b818fe8bd81",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 43,
        "deletions": 0,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223de8d94d6522f795ec3c2e7db27469f24aa68c/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223de8d94d6522f795ec3c2e7db27469f24aa68c/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=223de8d94d6522f795ec3c2e7db27469f24aa68c",
        "patch": "@@ -13,6 +13,49 @@\n #include <stdint.h>\n #include <limits>\n \n+/**\n+ * Overall design of the RNG and entropy sources.\n+ *\n+ * We maintain a single global 256-bit RNG state for all high-quality randomness.\n+ * The following (classes of) functions interact with that state by mixing in new\n+ * entropy, and optionally extracting random output from it:\n+ *\n+ * - The GetRand*() class of functions, as well as construction of FastRandomContext objects,\n+ *   perform 'fast' seeding, consisting of mixing in:\n+ *   - A stack pointer (indirectly committing to calling thread and call stack)\n+ *   - A high-precision timestamp (rdtsc when available, c++ high_resolution_clock otherwise)\n+ *   - Hardware RNG (rdrand) when available.\n+ *   These entropy sources are very fast, and only designed to protect against situations\n+ *   where a VM state restore/copy results in multiple systems with the same randomness.\n+ *   FastRandomContext on the other hand does not protect against this once created, but\n+ *   is even faster (and acceptable to use inside tight loops).\n+ *\n+ * - The GetStrongRand*() class of function perform 'slow' seeding, including everything\n+ *   that fast seeding includes, but additionally:\n+ *   - OS entropy (/dev/urandom, getrandom(), ...). The application will terminate if\n+ *     this entropy source fails.\n+ *   - Bytes from OpenSSL's RNG (which itself may be seeded from various sources)\n+ *   - Another high-precision timestamp (indirectly committing to a benchmark of all the\n+ *     previous sources).\n+ *   These entropy sources are slower, but designed to make sure the RNG state contains\n+ *   fresh data that is unpredictable to attackers.\n+ *\n+ * - RandAddSeedSleep() seeds everything that fast seeding includes, but additionally:\n+ *   - A high-precision timestamp before and after sleeping 1ms.\n+ *   - (On Windows) Once every 10 minutes, performance monitoring data from the OS.\n+ *   These just exploit the fact the system is idle to improve the quality of the RNG\n+ *   slightly.\n+ *\n+ * On first use of the RNG (regardless of what function is called first), all entropy\n+ * sources used in the 'slow' seeder are included, but also:\n+ * - (On Windows) Performance monitoring data from the OS.\n+ * - (On Windows) Through OpenSSL, the screen contents.\n+ *\n+ * When mixing in new entropy, H = SHA512(entropy || old_rng_state) is computed, and\n+ * (up to) the first 32 bytes of H are produced as output, while the last 32 bytes\n+ * become the new RNG state.\n+*/\n+\n /**\n  * Generate random data via the internal PRNG.\n  *"
      }
    ]
  }
]