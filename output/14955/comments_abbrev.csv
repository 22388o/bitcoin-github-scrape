fanquake,2018-12-14T04:33:23Z,"Compile failure on macOS (10.14.2):\n```\n./autogen.sh\n./configure\nmake check\n\n  CXX      libbitcoin_util_a-logging.o\n  CXX      libbitcoin_util_a-random.o\nrandom.cpp:394:41: error: expected ';' after top level declarator\nstatic unsigned char rng_state[32] = {0} GUARDED_BY(cs_rng_state);\n                                        ^\n                                        ;\nrando",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447210304,447210304,
gmaxwell,2018-12-14T06:04:14Z,"Might be desirable to stick the openssl stuff behind a define already,  I expect we'll be able to ship 0.18 without linking bitcoind to openssl. ",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447223906,447223906,
sipa,2018-12-14T07:08:22Z,"@fanquake Hopefully fixed.\n\n@gmaxwell There are probably a few entropy sources we want to add first, I think.",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447235764,447235764,
gmaxwell,2018-12-14T07:44:03Z,@sipa I am eager to add entropy sources!  (but I meant behind a ifdef that is currently on... just since I think you're touching the only remaining callsites),https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447242460,447242460,
DrahtBot,2018-12-14T08:39:25Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#13746](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/13746.html) (-masterdatadir for datadir bootstrapping by",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-447254979,447254979,
sipa,2018-12-18T01:37:20Z,"Made a number of improvements, and split the history out into hopefully more self-contained commits.",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448064015,448064015,
ken2812221,2018-12-18T12:43:55Z,"In constructor of CTxMemPool require to call random functions, but the constructor of the mutex has not being called yet. (Maybe it is an undefined behavior or it's a bug of VC++)\nhttps://github.com/bitcoin/bitcoin/blob/e7b88ecbc920321290941bc68e4a71634889c3cb/src/validation.cpp#L244\n```\n 	test_bitcoin.exe!SeedStartup(CSHA512 & hasher={...}) 第 417 行	C++\n 	test_bitcoin.exe!ProcRand(unsigned",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448208214,448208214,
sipa,2018-12-19T06:04:10Z,"@ken2812221 That was helpful, thanks! I think I've fixed it, but the same error still appears. Can you check what line number it's on now?",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448479910,448479910,
ken2812221,2018-12-19T09:21:47Z,"```\n 	test_bitcoin.exe!std::_Load_relaxed_4(volatile unsigned long * _Tgt=0x0000000000000074) 第 1338 行	C++\n 	test_bitcoin.exe!std::_Atomic_load_4(volatile unsigned long * _Tgt=0x0000000000000074, std::memory_order _Order=memory_order_relaxed) 第 1357 行	C++\n 	test_bitcoin.exe!std::atomic_load_explicit(const std::_Atomic_uint * _Atom=0x0000000000000074, std::memory_order _Order=memory_order_rel",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448525945,448525945,
sipa,2018-12-19T09:51:51Z,@ken2812221 Thanks so much; this was an actual bug.,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448535124,448535124,
sipa,2018-12-19T23:25:43Z,"I've made a few policy changes still:\n* Startup no longer includes the benchmark-1ms-sleep test, but still does strengthening.\n* The background seeding (called by the scheduler during idle times) no longer sources OpenSSL and /dev/random, as doing so every millisecond seems very much overkill. (it still includes rdrand as that has negligable CPU overhead).\n* The seeders are renamed to ""fast""",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-448786480,448786480,
gmaxwell,2018-12-31T20:00:06Z,utACK,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-450685606,450685606,
sipa,2019-01-03T17:39:58Z,Anything I can do to simplify review here? I can move the strengthening loop to a separate PR if that helps.,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451219690,451219690,
sipa,2019-01-04T11:00:58Z,I've removed the hash strengthening from this PR; I'll open a separate PR for it later.,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451414412,451414412,
practicalswift,2019-01-05T16:42:43Z,Bonus points for the removal of `NO_THREAD_SAFETY_ANALYSIS` (for `locking_callback`) and also the various `noexcept` additions.,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-451670244,451670244,
laanwj,2019-01-08T16:33:42Z,"> Bonus points for the removal of NO_THREAD_SAFETY_ANALYSIS (for locking_callback) and also the various noexcept additions.\n\nGetting rid of `CInit` is wonderful too :tada:\n\nutACK 3a82a46eaa1f1c9e55635f8940a2bda7d3d2a817",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452363804,452363804,
instagibbs,2019-01-09T15:40:05Z,"@sipa when you say it implements ""most of"" the issue, which parts are missing?",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452741242,452741242,
sipa,2019-01-09T16:00:55Z,"@instagibbs There are some potential entropy sources that can still be added (environment data, and a strengthening loop). And of course removing OpenSSL once we have sufficient replacements for all of it.",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749504,452749504,
instagibbs,2019-01-09T16:01:42Z,"""Abstract out seeding/extracting entropy into RandExtract."" <--- commit message refers to presumably old name of function",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452749817,452749817,
instagibbs,2019-01-09T19:22:30Z,re-utACK https://github.com/bitcoin/bitcoin/pull/14955/commits/b1ee8608f2b1700505e24f09ee141d4608c36078,https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-452823765,452823765,
sipa,2019-01-11T03:20:44Z,"Added two commits:\n\n* Turn RNGState into a class with private fields (makes it easier to make sure no code can accidentally wipe it or so), suggested by @pstratem on IRC.\n* Allocate the RNGState in the mlocked pool, suggested by @gmaxwell on IRC.",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453363222,453363222,
sipa,2019-01-13T18:54:26Z,"@ryanofsky Thanks for the review. I've addressed most of your comments, and added a bunch of comments to random.h. I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\n\nI've tried to not interfere with existing review too much by keeping the commit order and not",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-453855697,453855697,
laanwj,2019-01-14T13:55:16Z,"> I'll let others comment on the need for adding release notes about it, but my thinking was to only make a note once we fully remove OpenSSL (which may or may not be in the same release).\n\nIMO, a release note is unnecessary for this (apart from the automatically-generated changelog line). It is an internal change, there are hardly or no user-visible changes, the user doesn't need to *do* anyt",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454012249,454012249,
sipa,2019-01-16T18:19:58Z,"> 6a57ca9 ""There was only one place in the codebase where we're directly reading >32 bytes from the RNG"": what happens in that case? If bad, maybe add an assert or comment in GenerateAuthCookie that const size_t COOKIE_SIZE = 32; shouldn't be increased.\n\nThere already is an assert: `assert(num <= 32);` in `ProcRand()`.\n\n> 1a3b26e the usage of RandAddSeedPerfmon is a bit weird. It's called ",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-454884964,454884964,
Sjors,2019-01-17T12:16:24Z,"Wonderful, re-tACK 223de8d",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455151917,455151917,
sipa,2019-01-17T19:05:25Z,"FWIW, I've benchmarked this before and after this PR on my system. GetRandBytes goes from around ~1 μs to ~3 μs. GetStrongRandBytes stays around ~10 μs. Note that GetRandBytes is no longer called inside tight loops since #14624.",https://github.com/bitcoin/bitcoin/pull/14955#issuecomment-455291623,455291623,
practicalswift,2018-12-14T12:54:51Z,Surround `RandAddSeedPerfmon(CSHA512& hasher)` with `#ifdef WIN32`?,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745482,241745482,src/random.cpp
practicalswift,2018-12-14T12:55:30Z,`#ifdef WIN32` for this call?,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745648,241745648,src/random.cpp
practicalswift,2018-12-14T12:56:23Z,Make sure definition and declaration parameter names match.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241745852,241745852,src/random.cpp
practicalswift,2018-12-14T12:57:53Z,Change to `return stop != start;`?,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746192,241746192,src/random.cpp
practicalswift,2018-12-14T12:59:24Z,~~`ProcRand(…)` doesn't throw – candidate for `noexcept`?~~,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746569,241746569,src/random.cpp
practicalswift,2018-12-14T12:59:45Z,"Should be ""meaningfully"" :-)",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241746664,241746664,src/random.h
sipa,2018-12-14T19:05:48Z,No need for. Perhaps we'll extend the function to do something useful on other platforms too.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858285,241858285,src/random.cpp
sipa,2018-12-14T19:06:25Z,I'd rather not. Limiting the ifdefs to just one place is preferable imo.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858449,241858449,src/random.cpp
sipa,2018-12-14T19:06:35Z,I'm not touching this code.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241858504,241858504,src/random.cpp
gmaxwell,2018-12-14T21:49:14Z,SeedTimestamp() ? ,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241901024,241901024,src/random.cpp
gmaxwell,2018-12-14T21:54:00Z,"Maybe not because I think you should change the strengthening function (just the local_hasher) to 4-wide sha256d64 in order to increase the ""work"" done per unit time, and seed timestamp takes a hasher. We'll do a lot more work with sha-ni/aes and that sha256d64-4-way is probably the most optimized work function in the codebase.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902056,241902056,src/random.cpp
gmaxwell,2018-12-14T21:54:53Z,SeedTimestamp(),https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241902258,241902258,src/random.cpp
gmaxwell,2018-12-14T22:00:40Z,I'd kinda feel better about this if it just directly took the cs_rng_state lock and read the state here instead of calling GetRandBytes... at least then the code won't mysteriously crash if someone upgrades GetRandBytes to use ::Slow.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r241903570,241903570,src/random.cpp
sipa,2018-12-17T23:42:50Z,It does throw when threads get interrupted apparently (as it has a sleep inside).,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242359341,242359341,src/random.cpp
sipa,2018-12-18T01:33:20Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380140,242380140,src/random.cpp
sipa,2018-12-18T01:34:56Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380430,242380430,src/random.h
sipa,2018-12-18T01:35:36Z,"Done (using `SeedTimestamp()`).\n\nLeaving this for now; switching to SHA256-based code requires some refactoring to make sure there are no initialization order issues.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380554,242380554,src/random.cpp
sipa,2018-12-18T01:36:36Z,"I've abstracted the update-the-global-RNG-and-extract-entropy into a separate function, which is invoked from both this seeder and RandProc.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242380709,242380709,src/random.cpp
practicalswift,2018-12-19T09:56:19Z,"Uh, ok. Thanks!",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r242853403,242853403,src/random.cpp
gmaxwell,2018-12-20T10:56:41Z,Maybe we should be checking for shutdown interruption in this loop?  At 10ms it isn't critical...,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243231044,243231044,src/random.cpp
gmaxwell,2018-12-21T01:28:11Z,"Kinda weird that on non-init it throws out all its work.  Why not on non-init, have mixextract still write to out?  Then the research can read that in.   I feel a little uncomfortable with the brittleness of mixextract having a codepath that just returns without updating out.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243467195,243467195,src/random.cpp
sipa,2018-12-21T09:27:57Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243529294,243529294,src/random.cpp
gmaxwell,2018-12-22T01:43:00Z,I think this one can ignore the return value of mix extract.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243721722,243721722,src/random.cpp
sipa,2018-12-25T10:54:28Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r243900544,243900544,src/random.cpp
instagibbs,2019-01-09T16:23:15Z,"nit: also assert if `out==nullptr` that `num==0`, I believe memcpy to nullptr is technically undefined",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246447713,246447713,src/random.cpp
instagibbs,2019-01-09T16:24:46Z,mu-nit: any reason `num` is a signed integer? could simplify assertion below by being unsigned,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246448377,246448377,src/random.cpp
instagibbs,2019-01-09T16:52:25Z,"can there be a description on why `8 * num`?  Not following this one based on the docs.\n\n""The entropy argument is (the lower bound of) an estimate of how much randomness is contained in buf, measured in bytes.""",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246459148,246459148,src/random.cpp
sipa,2019-01-09T17:41:28Z,"I misunderstood the API and assumed the entropy argument was measured in bits.\n\nI don't think this matters much, modern RNGs don't really measure entropy anymore. But I'll fix it.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246475876,246475876,src/random.cpp
sipa,2019-01-09T18:20:01Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488452,246488452,src/random.cpp
sipa,2019-01-09T18:20:10Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488505,246488505,src/random.cpp
sipa,2019-01-09T18:20:43Z,Done (by adding an assert in the `if (num) {` branch).,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r246488679,246488679,src/random.cpp
ryanofsky,2019-01-11T18:55:57Z,"In commit ""Use FRC::randbytes instead of reading >32 bytes from RNG"" (5dfb99059491b1db9133cf0e6b0158ff4bdc9ef0)\n\nNote: seeding behavior is unchanged here because FastRandomContext just calls GetRandBytes internally.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247219641,247219641,src/qt/test/paymentservertests.cpp
ryanofsky,2019-01-11T19:01:35Z,"In commit ""Don't log RandAddSeedPerfmon details"" (ede7e302d55eb37936268caffcc4b31839e58283)\n\nI think this code needs a comment saying why it's safe to ignore the error and skip seeding when the call fails. Just reading the new code, I would be wondering why RandFailure() isn't called.\n\nIt would also be good to mention loss of the printf warning in release notes.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247221335,247221335,src/random.cpp
ryanofsky,2019-01-11T19:10:08Z,"In commit ""Remove adding timestamps in sanity check to OpenSSL RNG"" (2ce2c827115748ebea121e6e2abfded260f50ea6)\n\nWhat's the benefit to dropping these calls? Commit message only says why it is not harmful to remove them, not why it is good to remove them.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247223913,247223913,src/random.cpp
ryanofsky,2019-01-11T19:30:11Z,"In commit ""Automatically initialize RNG on first use."" (2dcb3e938a210b1bbaa178ad6f9a5d418c4e2939)\n\nNew comment is confusing about when this should be called. Would suggest:\n\n```c++\n/**\n * Initialize global RNG state and log any CPU features that are used.\n *\n * Calling this function is optional. RNG state will be initialized when first\n * needed if it is not called.\n */\n```",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247230067,247230067,src/random.h
ryanofsky,2019-01-11T19:40:19Z,"In commit ""Abstract out seeding/extracting entropy into RNGState::MixExtract"" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\n\nThis is moved code, but can it just use `LOCK` instead of `WAIT_LOCK`?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247233048,247233048,src/random.cpp
ryanofsky,2019-01-11T19:46:10Z,"In commit ""Abstract out seeding/extracting entropy into RNGState::MixExtract"" (cef6d52cbed7f30bcdec5b6c5a72e9a49e26eeab)\n\nIt would be good to check the buffer size. Maybe:\n\n```c++\nstatic_assert(sizeof(buf) == hasher.OUTPUT_SIZE);\n```",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247234852,247234852,src/random.cpp
sipa,2019-01-13T18:21:48Z,Added comment in commit.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357030,247357030,src/qt/test/paymentservertests.cpp
sipa,2019-01-13T18:22:03Z,Added a comment and a TODO.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357036,247357036,src/random.cpp
sipa,2019-01-13T18:22:42Z,"They were hard to maintain in an earlier iteration of this patch. I've removed the commit now, and kept the functionality in the big switchover commit.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357052,247357052,src/random.cpp
sipa,2019-01-13T18:22:50Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357055,247357055,src/random.h
sipa,2019-01-13T18:22:58Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357059,247357059,src/random.cpp
sipa,2019-01-13T18:23:05Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247357064,247357064,src/random.cpp
sipa,2019-01-14T00:46:18Z,"I had to change it to `CSHA512::OUTPUT_SIZE`, as clang didn't agree `hasher.OUTPUT_SIZE` was a compile-time constant.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247370960,247370960,src/random.cpp
ryanofsky,2019-01-14T20:54:16Z,"In commit ""Abstract out seeding/extracting entropy into RNGState::MixExtract"" (d76cc6dbb9e1c5c6a0f3b002932ba4033b722255)\n\nDoes it matter that `memory_cleanse` isn't called on the hasher object?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247654362,247654362,src/random.cpp
ryanofsky,2019-01-14T21:13:04Z,"In commit ""Switch all RNG code to the built-in PRNG."" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\n\nCommit message could mention now seeding openssl differently than before: no longer here, no longer in cinit, additionally in MixExtract and SeedStartup.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247660403,247660403,src/random.cpp
ryanofsky,2019-01-14T21:27:01Z,"In commit ""Switch all RNG code to the built-in PRNG."" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\n\nNote: functionality previously in RandAddSeedSleep() is now in SeedSleep().",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247664982,247664982,src/random.cpp
ryanofsky,2019-01-14T21:29:14Z,"In commit ""Switch all RNG code to the built-in PRNG."" (85f8f99e0ae9d1c98f676ae8722cda4b967dcfb4)\n\nNote: functionality previously in GetStrongRandBytes() is now in SeedSlow().",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247665730,247665730,src/random.cpp
ryanofsky,2019-01-14T21:43:32Z,"In commit ""Sprinkle some sweet noexcepts over the RNG code"" (6ff775ff80b090494d115753ddcf488a3cf923a9)\n\nI don't know best practices around noexcept, but it seems like there are parts of ProcRand that could throw exceptions. Maybe it would be worth saying in a comment somewhere how noexcept is used in random.cpp/h code.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247670035,247670035,src/random.cpp
ryanofsky,2019-01-14T21:54:55Z,"In commit ""Use our own locking instead of using OpenSSL in multithreaded mode"" (fa2eabe154d00bf6c54f604acbe758186d044639)\n\nWhy is calling RAND_cleanup no longer necessary?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247673931,247673931,src/util/system.cpp
ryanofsky,2019-01-14T21:56:26Z,"In commit ""Use our own locking instead of using OpenSSL in multithreaded mode"" (fa2eabe154d00bf6c54f604acbe758186d044639)\n\nI don't understand how the two parts of this commit relate:\n\n- removing `CRYPTO_set_locking_callback()` call\n- adding `cs_openssl` mutex\n\nIs the idea that calls like `RAND_add` and `RAND_bytes` are no longer thread safe without `set_locking_callback`, so now we n",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r247674434,247674434,src/util/system.cpp
sipa,2019-01-16T00:57:47Z,"Perhaps it does, though we're all over the code only using memory_cleanse for memory buffers directly, and I feel slightly uneasy to invoke on the state of complex objects.\n\nMaybe in a separate change we can add a Cleanse() method to CSHA512 and others, and start using those were useful?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119274,248119274,src/random.cpp
sipa,2019-01-16T00:58:00Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119311,248119311,src/random.cpp
sipa,2019-01-16T00:58:07Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119329,248119329,src/random.cpp
sipa,2019-01-16T00:58:15Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119354,248119354,src/random.cpp
sipa,2019-01-16T00:58:33Z,I've added a comment on the use of noexcept and why it's not used for everything.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119398,248119398,src/random.cpp
sipa,2019-01-16T00:59:24Z,"I've reverted this change for other reasons. I don't think RAND_cleanup is particularly important, but let's keep it for now as long as we're using the OpenSSL RNG.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248119545,248119545,src/util/system.cpp
sipa,2019-01-16T01:02:45Z,"Right, that was the reasoning. I assumed the payment server code was already not multithreaded (because it's synchronized through the UI), but reading more about OpenSSL's multithreading design, it seems that X509 processing has a bunch of global state which needs locking, so your comment made me uneasy about this.\n\nI've replaced it with a (less satisfying...) commit that moves the `CInit` log",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248120121,248120121,src/util/system.cpp
sipa,2019-01-16T01:08:40Z,Marking as resolved as the hardening code is removed from this PR.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248121024,248121024,src/random.cpp
Sjors,2019-01-16T08:52:21Z,"Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\n\nSo do I understand correctly that the reason `FastRandomContext` needs to *fast* is (mostly) this, or are there also areas of code that need the additional performance?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248194305,248194305,src/random.h
Sjors,2019-01-16T09:30:32Z,"""as a last resort"" makes it sound really important, which contradicts ""it is isn't considered critical"".\n\nMaybe say (in a followup PR): \n```\n// Performance data provides additional entropy, but failure to read it isn't\n// considered critical, so we don't call RandFailure().\n```",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206611,248206611,src/random.cpp
Sjors,2019-01-16T09:30:47Z,"Typo ""conidered"" (but see above)",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248206697,248206697,src/random.cpp
Sjors,2019-01-16T10:05:19Z,"""and"" is ambiguous, is it part of ""Rand"" or does the function name mean ""(init?) HardWare Random (number generator) and Report""?\n\nSuggestion: `ReportHardwareRNG()`",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248218873,248218873,src/random.cpp
Sjors,2019-01-16T10:29:10Z,"Suggested comment above (for those not intimately familiar with `std::atomic`, who might initially think `load()` is some sort of initialisation performing side-effect):\n```\n// Ensure `HWRandInit()` was called first\n```\nThen again, it goes away in a later commit.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248227342,248227342,src/random.cpp
Sjors,2019-01-16T10:31:46Z,"Add comment that this currently looks for `rdrand` support in the CPU. \nSuggested name: `InitHardwareRNG()`",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248228186,248228186,src/random.cpp
Sjors,2019-01-16T10:38:27Z,"Maybe clarify constraints that would apply to future hardware RNGs. E.g. is this an appropriate place to interface with a USB based RNG? Or does it have to be in the CPU for availability and latency reasons? Is it OK to use a lower quality CPU RNG for this, because it's strictly additional entropy?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248230465,248230465,src/random.cpp
Sjors,2019-01-16T10:42:14Z,"Maybe clarify why you chose 32 back in #10338, assuming that reasoning still applies:\n```\n// As we're already using SHA512 to combine the multiple entropy sources,\n// which produces 64 bytes, we can use the last 32 of those as an additional\n// input for the next call. This makes sure that the produced data is secure\n// as long as any entropy source in the past was reliable.\n```",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248231617,248231617,src/random.cpp
Sjors,2019-01-16T10:58:55Z,"Maybe add comment that `rng.state` is initialised to zeros, i.e. initialisation just refers to the C++ action, not to the broader sense of the word (which might include seeding).",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248236954,248236954,src/random.h
Sjors,2019-01-16T11:29:30Z,Thread safety n00b question: what did `WAIT_LOCK` do and why is `LOCK` fine here? ,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248246123,248246123,src/random.cpp
Sjors,2019-01-16T11:41:41Z,"Such a `Cleanse()` method might indeed improve readability, and maybe even offers a way to automatically detect where it's potentially missing. Would it then also make sense to have a `unsigned char []` alternative with a `Cleanse()` method? E.g. `hygienic_char []` :-)",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248249382,248249382,src/random.cpp
Sjors,2019-01-16T12:09:16Z,"Maybe add the above as a comment, so we can consider this once BIP70 goes away.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248256491,248256491,src/util/system.cpp
Sjors,2019-01-16T12:23:35Z,Can you explain why this function must be called at least twice before it's OK to use?,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248260207,248260207,src/random.cpp
Sjors,2019-01-16T12:28:11Z,"This might lead to confusion with the other meaning of initialized that's referred to in ""Initialize global RNG state"".",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248261482,248261482,src/random.cpp
Sjors,2019-01-16T12:59:56Z,"""every 10 minutes"" includes the first usage, right?",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248271203,248271203,src/random.cpp
Sjors,2019-01-16T13:03:35Z,"Assuming it's always CPU based and not same external device, so this assumption should be stated in the empty / placeholder `HWRandInit` implementations for other architectures.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248272384,248272384,src/random.cpp
sipa,2019-01-16T18:22:02Z,"> Does this refer to an accidental scenario, where a user ends up generating the same private keys or accidentally signing with the same nonce? Or also a malicious scenario?\n\nDoes it matter whether it can be triggered accidentally or intentionally?\n\n> So do I understand correctly that the reason FastRandomContext needs to fast is (mostly) this, or are there also areas of code that need the",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248397267,248397267,src/random.h
sipa,2019-01-16T18:25:10Z,"> ""as a last resort"" makes it sound really important, which contradicts ""it is isn't considered critical"".\n\nI don't understand the contradiction.\n\nWe generally assume that the OS RNG is providing us with good randomness. It's only in highly unlikely (but hard to prevent) scenarios that it fails at that. As a last resort belt-and-suspenders, we also seed entropy from elsewhere. However, tha",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398342,248398342,src/random.cpp
sipa,2019-01-16T18:26:36Z,You're nitpicking. Nowhere do we use a naming style where a lowercase character after an uppercase one starts a new word.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248398859,248398859,src/random.cpp
sipa,2019-01-16T18:27:04Z,"Seriously, read the documentation if this isn't clear.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399032,248399032,src/random.cpp
sipa,2019-01-16T18:28:23Z,"It doesn't?\n\nWe just want to make sure it's at least once initialized with sufficient entropy before the caller (ProcRand) wants to use its output.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399514,248399514,src/random.cpp
sipa,2019-01-16T18:28:54Z,"Yes, but not through this code path.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248399701,248399701,src/random.cpp
sipa,2019-01-16T18:31:09Z,"No, it does refer to the broader sense, including seeding.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400496,248400496,src/random.h
sipa,2019-01-16T18:31:40Z,The only difference is that it lets you specify the name of the lock variable.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248400704,248400704,src/random.cpp
Sjors,2019-01-16T18:46:17Z,"I was trying to understand _why_ it needs to be fast. The explanation here suggests it's mostly about protecting against some sort of VM replay scenario. But in later commits it's clear that there's also a performance concern, e.g. the Perfmon can take two seconds.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248405785,248405785,src/random.h
sipa,2019-01-16T18:51:09Z,"Ah, I see. I think you're looking at it the wrong way. Of course there are many places in the code where we need fast randomness (of various sizes); the issue that the speed concern means we can't do very good seeding, so we need a separate function for the few places where we _really_ need good randomness (GetStrongRandBytes).",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248407517,248407517,src/random.h
Sjors,2019-01-16T18:53:54Z,"The way I read the phrase ""as a last resort"" is: *if* there was a way to detect that our RNG attempts thus far have failed, we try this thing as a last resort. In the last resort also fails, that's critical. Hence the contraction.\n\nBut because we normally can't detect if we actually needed the last resort, we don't know if the failure was critical, and most likely it wasn't.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248408522,248408522,src/random.cpp
Sjors,2019-01-16T18:56:30Z,"I spent at least half an hour being confused about what `HWRandInit` and `HWRandReport` were doing, otherwise I wouldn't have brought up this up.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248409459,248409459,src/random.cpp
Sjors,2019-01-16T19:05:21Z,"I do understand that fast also implies weak. The question is why you would ever accept weak, if you already code from strong. The obvious answer is performance. But the comment here talks about a VM replay scenario.\n\nBut now I see what confused me: ""These entropy sources are very fast, and mostly designed to protect against situations  where a VM state restore"" - the part after ""and"" doesn't r",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412403,248412403,src/random.h
Sjors,2019-01-16T19:06:48Z,FastButStillHardToReplayRandomContext :-P,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248412855,248412855,src/random.h
sipa,2019-01-16T19:08:51Z,"No, `FastRandomContext` does *not* protect against replay. `GetRand*()` does.\n\nThe constructor of FRC does use GetRandBytes, but once you have a RFC, any replay is going to result in repeated randomness produced by RFC.\n",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248413469,248413469,src/random.h
Sjors,2019-01-16T19:29:20Z,"Ah yes, see #14623 about keeping `FastRandomContext` available for ""non-critical random numbers needed inside tight loops"".",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248419894,248419894,src/random.h
ryanofsky,2019-01-16T21:32:19Z,"In commit ""Automatically initialize RNG on first use."" (2a02d2c369ee06cbc334a0dd7150ec72ef83a182)\n\nIgnore if this is a pain, or if there is nostalgia for critical sections, but you might want to use `m_mutex` instead of `cs` here, and `m_openssl_mutex` instead of `cs_openssl` in 772fce745c51aa9d09f93e13eeb822e889ae25f7",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248458454,248458454,src/random.cpp
ryanofsky,2019-01-16T22:02:16Z,"In commit ""Encapsulate RNGState better"" (bfd3a23f277c16236ba6ea7391a98277226c1470)\n\nSeems more accurate to call it Mutex than Lock (as in 7939daa351a31a36f2086771611b501418536989), if Mutex is the object that gets locked, and Lock is the object that locks it.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248467631,248467631,src/random.cpp
sipa,2019-01-17T00:00:33Z,Reformulated the text a bit.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248496977,248496977,src/random.cpp
sipa,2019-01-17T00:00:53Z,Fixed.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497019,248497019,src/random.cpp
sipa,2019-01-17T00:01:23Z,"Done, added a separate commit with renames and the comments on HWRNG performance you suggested elsewhere.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497110,248497110,src/random.cpp
sipa,2019-01-17T00:01:34Z,Added a comment.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497144,248497144,src/random.cpp
sipa,2019-01-17T00:01:57Z,Added a similar comment to the RNGState::m_state variable.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497222,248497222,src/random.cpp
sipa,2019-01-17T00:02:18Z,Renamed to `m_strongly_seeded`.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497286,248497286,src/random.cpp
sipa,2019-01-17T00:02:36Z,"Oh, I see the confusion. Removed that phrasing.",https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497334,248497334,src/random.cpp
sipa,2019-01-17T00:02:48Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497372,248497372,src/random.cpp
sipa,2019-01-17T00:03:09Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497443,248497443,src/random.cpp
sipa,2019-01-17T00:03:18Z,Done.,https://github.com/bitcoin/bitcoin/pull/14955#discussion_r248497470,248497470,src/random.cpp
