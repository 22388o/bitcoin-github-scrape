pstratem,2015-07-05T07:46:54Z,This has been tested by setting up a node and then connected to it from the same source ip in a loop.\n\nAdditional testing is needed around multiple source ips.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118594113,118594113,
laanwj,2015-07-05T07:55:25Z,"Concept ACK\n\nThis does need extensive testing in various scenarios - e.g. what happens with Tor hidden service connections, which all appear to come from one IP (localhost) address.\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118594345,118594345,
pstratem,2015-07-05T08:47:17Z,Tested with multiple inbound connections from 128+ source ips.\n\nLong lived connections were stable and the newer connections dropped.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-118596476,118596476,
petertodd,2015-07-06T22:39:45Z,@pstratem How did you actually test that?\n\nWe could make good use of automated scripts to make such testing relocatable.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-119017939,119017939,
pstratem,2015-07-06T23:28:32Z,"@petertodd python script that connects to the node in a loop running on top of torify and me sitting there hitting ""new identity"" in vidalia a bunch until i had unique ips connecting...\n\nnot exactly an automated process\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-119026601,119026601,
pstratem,2015-07-12T21:55:51Z,"@laanwj Missed the second part of your comment.\n\nThis wont ever evict localhost connections, so inbound connections to a hidden service wont ever be disconnected by this.\n\nThat's actually not optimal, but unfortunately getting info on inbound hidden service connections requires interfacing with tors control port.\n\nThat's definitely out of scope for this patch set.\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-120766274,120766274,
laanwj,2015-07-28T09:16:09Z,"@pstratem Absolutely - I wasn't implying that you'd have to interact with Tor's control port in this pull, just that it's a requirement that it didn't make the current situation worse.\n\nNeeds a trivial rebase in net.cpp due to #5288.\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-125515815,125515815,
TheBlueMatt,2015-08-13T11:08:38Z,Spoke with @pstratem about this for a bit and we agreed this should be refactored so that the connection acceptance stuff is in a separate function. Also after this change the nWhiteConnections variable is set in init but goes unused.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-130619710,130619710,
pstratem,2015-08-14T00:35:50Z,@TheBlueMatt I've simply removed the whiteconnections option in favor of protecting any inbound whitelisted connection.  This is safe as outbound connections are never disconnected.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-130902260,130902260,
dcousens,2015-08-14T09:15:21Z,Concept ACK\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-131036709,131036709,
laanwj,2015-08-17T14:36:37Z,I think i'm missing a thing: how does this change make `whiteconnections` redundant? There is no information in the commit message.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-131842931,131842931,
pstratem,2015-08-19T22:56:50Z,@laanwj All whitelisted connections are protected.  Which makes a parameter for protecting a specific number of whitelisted connections redundant.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-132817334,132817334,
TheBlueMatt,2015-08-24T00:56:57Z,"utACK (may want to squash a few of the last commits, but doesnt matter).\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-133976983,133976983,
laanwj,2015-08-25T00:41:52Z,@pstratem Fair enough.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134427007,134427007,
pstratem,2015-08-25T22:39:36Z,"@sipa you're commenting on a commit from ~13 days ago, most of those issues have been fixed since\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134761989,134761989,
sipa,2015-08-25T23:13:34Z,@pstratem I'm going through the commits one by one.\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134767316,134767316,
pstratem,2015-08-25T23:15:20Z,@sipa ah ok then\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134767538,134767538,
sipa,2015-08-25T23:24:21Z,"Concept ACK. I think that calling AddRef/Release without holding cs_vNodes should not be done.\n\nI think the biases can be improved still - for example by computing a score per node based on ping time, and then penalizing the scores of nodes from the same netgroup if there are multiple. But that can be done later.\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134769027,134769027,
pstratem,2015-08-26T00:08:16Z,"@sipa this is definitely intended mostly as a framework, the initial rules are an improvement but certainly not intended to be the final set of rules.\n",https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-134775073,134775073,
laanwj,2015-09-03T16:23:31Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6374#issuecomment-137502499,137502499,
laanwj,2015-08-03T16:36:31Z,"Deleting CNodes happens in the ""Delete disconnected nodes"" loop, which first makes sure that no one is using the node anymore. Adding a `delete pnode` here seems like a danger for race conditions?\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36103572,36103572,src/net.cpp
pstratem,2015-08-03T21:52:16Z,This is deleting the CNode which was created at 984 and which was not added to vNodes.\n\nNot deleting it here would be a memory leak.\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36136096,36136096,src/net.cpp
laanwj,2015-08-07T07:09:16Z,"Bah.\nI wonder if we could use e.g. boost::scoped_ptr or auto_ptr to avoid this. It's too easy to get memory leaks with manual deallocation along a subset of code paths, especially when factoring in exceptions.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36495467,36495467,src/net.cpp
pstratem,2015-08-07T21:39:26Z,Alternatively I could just add it to vNodes and rely on the normal cleanup logic.\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r36563756,36563756,src/net.cpp
Diapolo,2015-08-14T05:53:42Z,size_t to unsigned int is safe? You could use size_t for nMostConnections also.\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37051343,37051343,src/net.cpp
Diapolo,2015-08-14T05:54:41Z,This should be a more detailed comment IMHO.\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37051366,37051366,src/net.cpp
Diapolo,2015-08-14T05:56:58Z,"You seem to use this bool first at line 916, why not move the check there? At first look I had the impression it belongs to the LOCK block.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37051432,37051432,src/net.cpp
Diapolo,2015-08-14T05:58:08Z,Is this the check for the accept call? Would be cleaner if it was below the call. You also wouldn't need the `hSocket != INVALID_SOCKET` check at the top.\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37051503,37051503,src/net.cpp
Diapolo,2015-08-14T06:00:43Z,Is this interresting for `getpeerinfo`?\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37051576,37051576,src/main.cpp
dcousens,2015-08-14T09:13:27Z,"I also had this impression,  though that is a common theme with several of the variables (`nInbound`, `nMaxInbound`).  It'd be nice to see them declared where they are used, rather than C99 style at the top of the function.\n\n**edit**: Though to be fair, this code is simply copied, so this is not @pstratem's fault.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37060766,37060766,src/net.cpp
pstratem,2015-08-14T16:01:10Z,"This is almost certainly safe because the values are heavily constrained, however it's not an issue to switch to size_t so I will\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37091054,37091054,src/net.cpp
pstratem,2015-08-14T16:01:45Z,"This is all copied directly from what was there before.\n\nI can clean up the logic a bit more later, but for now it's nice that the diff is minimal.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37091114,37091114,src/net.cpp
pstratem,2015-08-14T16:02:41Z,"I agree, but I think that's for a separate pull request.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37091191,37091191,src/net.cpp
pstratem,2015-08-14T16:02:54Z,"Probably, but again separate pr\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37091218,37091218,src/main.cpp
dcousens,2015-08-15T11:24:18Z,"Agreed on the clean diff,  @pstratem could you put a TODO in there (or make an issue?) though such that this isn't just forgotten after this though?\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37135362,37135362,src/net.cpp
dcousens,2015-08-15T11:28:03Z,@Diapolo aren't there warnings for this?\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37135377,37135377,src/net.cpp
dcousens,2015-08-15T11:28:29Z,Do we file these as issues or `TODO`s?\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37135379,37135379,src/net.cpp
pstratem,2015-08-15T21:13:12Z,"I would say file them as a single issue. something like ""clean up logic/code in AcceptConnection""\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37139409,37139409,src/net.cpp
pstratem,2015-08-15T23:35:44Z,"@dcousens they're both unsigned, so no\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37140567,37140567,src/net.cpp
TheBlueMatt,2015-08-20T23:13:25Z,Dont you need to increment the use count on the node here?\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37591810,37591810,src/net.cpp
TheBlueMatt,2015-08-20T23:14:33Z,"These constants (4, 8, 64) really need to be a function of your configured maximum connections.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37591882,37591882,src/net.cpp
TheBlueMatt,2015-08-20T23:35:20Z,"Yes, please add a comment above each sort/erase block that explains what/why you are protecting that group.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37593210,37593210,src/net.cpp
pstratem,2015-08-20T23:50:20Z,Comments added\n,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37594072,37594072,src/net.cpp
TheBlueMatt,2015-08-21T18:30:02Z,"Seems my comment was lost in a rebase, can you change the constants (4, 8, 64) to be some multiple of max connections?\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37663532,37663532,src/net.cpp
pstratem,2015-08-21T22:47:40Z,"Hmm not sure that makes sense actually.\n\nThe goal is to prevent a sybil attack, constants are probably best for that.\n",https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37685347,37685347,src/net.cpp
laanwj,2015-08-25T02:08:21Z,This class needs an explicit copy constructor and assignment operator to be safe to use inside STL containers:\n\n``` c++\n    CNodeRef& operator =(const CNodeRef& other)\n    {\n        if (this != &other) {\n            _pnode->Release();\n            _pnode = other._pnode;\n            _pnode->AddRef();\n        }\n        return *this;\n    }\n    CNodeRef(const CNodeRef& other):\n        _pno,https://github.com/bitcoin/bitcoin/pull/6374#discussion_r37826370,37826370,src/net.cpp
