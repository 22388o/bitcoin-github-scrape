[
  {
    "sha": "3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZmQ3ZTc2ZjZkNGI0ZWFlMGIzNmQ5YjMzMzc2Mjc0ZjUzODdhNmYz",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-10-16T15:21:07Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2018-11-01T16:53:49Z"
      },
      "message": "[tests] Move deterministic address import to setup_nodes\n\nThis requires a small changes to a few tests, but means that\ndeterministic addresses will always be imported (unless setup_nodes\nbehaviour is explicitly overridden).",
      "tree": {
        "sha": "e01790c1fba7dba4f6a3954f3d86f8bb3dbf7ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e01790c1fba7dba4f6a3954f3d86f8bb3dbf7ce7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08a57d51e90c232421681c9e6fe037ea4b3ed079",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08a57d51e90c232421681c9e6fe037ea4b3ed079",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08a57d51e90c232421681c9e6fe037ea4b3ed079"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 21,
      "deletions": 42
    },
    "files": [
      {
        "sha": "70d67aa53aca45c7c7c55e42934217d7523d5f76",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -69,6 +69,7 @@ def skip_test_if_missing_module(self):\n     def setup_network(self):\n         self.add_nodes(self.num_nodes, extra_args=self.extra_args)\n         self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n         # Leave them unconnected, we'll use submitblock directly in this test\n \n     def restart_node(self, node_index, expected_tip):"
      },
      {
        "sha": "b68e46adbc75b01f2526ef4539ffbb8b7592b2e4",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -144,6 +144,9 @@ def setup_network(self):\n         # (68k weight is room enough for 120 or so transactions)\n         # Node2 is a stingy miner, that\n         # produces too small blocks (room for only 55 or so transactions)\n+        self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n+        self.stop_nodes()\n \n     def transact_and_mine(self, numblocks, mining_node):\n         min_fee = Decimal(\"0.00001\")\n@@ -171,11 +174,6 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n-    def import_deterministic_coinbase_privkeys(self):\n-        self.start_nodes()\n-        super().import_deterministic_coinbase_privkeys()\n-        self.stop_nodes()\n-\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")"
      },
      {
        "sha": "c820ca33e276940155decf3518938bd606c27834",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -63,6 +63,8 @@ def setup_network(self):\n     def setup_nodes(self):\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n+        for n in self.nodes:\n+            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase', rescan=False)\n \n     def create_big_chain(self):\n         # Start by creating some coinbases we can spend later"
      },
      {
        "sha": "12d484d7c23e5f7f006f2ef56e2fc856513968ab",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -69,6 +69,7 @@ def setup_nodes(self):\n         ]\n         self.add_nodes(self.num_nodes, self.extra_args)\n         self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):\n         try:"
      },
      {
        "sha": "359880506ecd696c0d58b56dd58b40ef3999020b",
        "filename": "test/functional/p2p_node_network_limited.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/p2p_node_network_limited.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/p2p_node_network_limited.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_node_network_limited.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -43,8 +43,8 @@ def disconnect_all(self):\n         disconnect_nodes(self.nodes[1], 2)\n \n     def setup_network(self):\n-        super(NodeNetworkLimitedTest, self).setup_network()\n-        self.disconnect_all()\n+        self.add_nodes(self.num_nodes, self.extra_args)\n+        self.start_nodes()\n \n     def run_test(self):\n         node = self.nodes[0].add_p2p_connection(P2PIgnoreInv())"
      },
      {
        "sha": "44fc185e6db1188449970f84e6cd1ace48d163c5",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -168,7 +168,6 @@ def main(self):\n             self.skip_test_if_missing_module()\n             self.setup_chain()\n             self.setup_network()\n-            self.import_deterministic_coinbase_privkeys()\n             self.run_test()\n             success = TestStatus.PASSED\n         except JSONRPCException as e:\n@@ -261,19 +260,17 @@ def setup_nodes(self):\n             extra_args = self.extra_args\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n+        self.import_deterministic_coinbase_privkeys()\n \n     def import_deterministic_coinbase_privkeys(self):\n-        if self.setup_clean_chain:\n-            return\n-\n         for n in self.nodes:\n             try:\n                 n.getwalletinfo()\n             except JSONRPCException as e:\n                 assert str(e).startswith('Method not found')\n                 continue\n \n-            n.importprivkey(n.get_deterministic_priv_key().key)\n+            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n \n     def run_test(self):\n         \"\"\"Tests must override this method to define test logic\"\"\""
      },
      {
        "sha": "3a6107bb37c0512e6aca4c76ee2c7a6ee030d44d",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 0,
        "deletions": 15,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -199,21 +199,6 @@ def wait_for_rpc_connection(self):\n \n     def generate(self, nblocks, maxtries=1000000):\n         self.log.debug(\"TestNode.generate() dispatches `generate` call to `generatetoaddress`\")\n-        # Try to import the node's deterministic private key. This is a no-op if the private key\n-        # has already been imported.\n-        try:\n-            self.rpc.importprivkey(privkey=self.get_deterministic_priv_key().key, label='coinbase', rescan=False)\n-        except JSONRPCException as e:\n-            # This may fail if:\n-            # - wallet is disabled ('Method not found')\n-            # - there are multiple wallets to import to ('Wallet file not specified')\n-            # - wallet is locked ('Error: Please enter the wallet passphrase with walletpassphrase first')\n-            # Just ignore those errors. We can make this tidier by importing the privkey during TestFramework.setup_nodes\n-            # TODO: tidy up deterministic privkey import.\n-            assert str(e).startswith('Method not found') or \\\n-                str(e).startswith('Wallet file not specified') or \\\n-                str(e).startswith('Error: Please enter the wallet passphrase with walletpassphrase first')\n-\n         return self.generatetoaddress(nblocks=nblocks, address=self.get_deterministic_priv_key().address, maxtries=maxtries)\n \n     def get_wallet_rpc(self, wallet_name):"
      },
      {
        "sha": "6116103fc67c7e2e6edf731e84516430f557c52f",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -28,10 +28,9 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def setup_network(self):\n-        self.add_nodes(4)\n-        self.start_node(0)\n-        self.start_node(1)\n-        self.start_node(2)\n+        self.setup_nodes()\n+        # Only need nodes 0-2 running at start of test\n+        self.stop_node(3)\n         connect_nodes_bi(self.nodes, 0, 1)\n         connect_nodes_bi(self.nodes, 1, 2)\n         connect_nodes_bi(self.nodes, 0, 2)"
      },
      {
        "sha": "08809a688a95be9f23f7d4308052e4db8a7e4531",
        "filename": "test/functional/wallet_import_rescan.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_import_rescan.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_import_rescan.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_import_rescan.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -122,16 +122,14 @@ def setup_network(self):\n \n         # Import keys with pruning disabled\n         self.start_nodes(extra_args=[[]] * self.num_nodes)\n-        super().import_deterministic_coinbase_privkeys()\n+        for n in self.nodes:\n+            n.importprivkey(privkey=n.get_deterministic_priv_key().key, label='coinbase')\n         self.stop_nodes()\n \n         self.start_nodes()\n         for i in range(1, self.num_nodes):\n             connect_nodes(self.nodes[i], 0)\n \n-    def import_deterministic_coinbase_privkeys(self):\n-        pass\n-\n     def run_test(self):\n         # Create one transaction on node 0 with a unique amount for\n         # each possible type of wallet import RPC."
      },
      {
        "sha": "011975e371bd7262c5208611b87bd0166b8b031b",
        "filename": "test/functional/wallet_listreceivedby.py",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_listreceivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3/test/functional/wallet_listreceivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listreceivedby.py?ref=3fd7e76f6d4b4eae0b36d9b33376274f5387a6f3",
        "patch": "@@ -18,11 +18,6 @@ class ReceivedByTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 2\n \n-    def import_deterministic_coinbase_privkeys(self):\n-        assert_equal(0, len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True)))\n-        super().import_deterministic_coinbase_privkeys()\n-        self.num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n-\n     def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n@@ -31,6 +26,9 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)\n \n+        # save the number of coinbase reward addresses so far\n+        num_cb_reward_addresses = len(self.nodes[1].listreceivedbyaddress(minconf=0, include_empty=True, include_watchonly=True))\n+\n         self.log.info(\"listreceivedbyaddress Test\")\n \n         # Send from node 0 to 1\n@@ -76,7 +74,7 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"address_filter parameter was invalid\", self.nodes[1].listreceivedbyaddress, minconf=0, include_empty=True, include_watchonly=True, address_filter=\"bamboozling\")\n         # Another address receive money\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 2 + self.num_cb_reward_addresses)  # Right now 2 entries\n+        assert_equal(len(res), 2 + num_cb_reward_addresses)  # Right now 2 entries\n         other_addr = self.nodes[1].getnewaddress()\n         txid2 = self.nodes[0].sendtoaddress(other_addr, 0.1)\n         self.nodes[0].generate(1)\n@@ -93,7 +91,7 @@ def run_test(self):\n         assert_equal(len(res), 1)\n         # Should be two entries though without filter\n         res = self.nodes[1].listreceivedbyaddress(0, True, True)\n-        assert_equal(len(res), 3 + self.num_cb_reward_addresses)  # Became 3 entries\n+        assert_equal(len(res), 3 + num_cb_reward_addresses)  # Became 3 entries\n \n         # Not on random addr\n         other_addr = self.nodes[0].getnewaddress()  # note on node[0]! just a random addr"
      }
    ]
  }
]