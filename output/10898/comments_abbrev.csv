practicalswift,2017-07-24T14:17:10Z,@benma Thanks for reviewing! Good feedback. All items addressed. Looks good? :-),https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-317436630,317436630,
benma,2017-07-24T20:38:33Z,utACK da5f591c03e04cfc159aa9d8ed1036576f51aa25,https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-317547149,317547149,
practicalswift,2017-08-14T15:49:17Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-322228067,322228067,
practicalswift,2017-09-10T19:11:50Z,Rebased! :-),https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-328364695,328364695,
practicalswift,2017-10-02T14:00:53Z,"@laanwj I've now removed the `Move NULL check prior to dereference` commit.\n\nPlease note that setting a NULL model will result in a null pointer dereference in current `master`. Should I fix that?\n\nWhat about:\n\n```diff\ndiff --git a/src/qt/walletview.cpp b/src/qt/walletview.cpp\nindex 971f5e0..a56a400 100644\n--- a/src/qt/walletview.cpp\n+++ b/src/qt/walletview.cpp\n@@ -122,8 +122",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-333543101,333543101,
laanwj,2017-10-02T15:03:04Z,"@practicalshift Yes that should be fixed, looks good to me!",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-333561765,333561765,
practicalswift,2017-10-02T18:34:02Z,@laanwj I've now added a NULL check for `_walletModel`. Looks good now? :-),https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-333624410,333624410,
practicalswift,2017-10-04T14:11:53Z,"@ryanofsky I use a combination of manual code review, static analysis and fuzzing to find potential issues. In the Apple Swift project most of my results have been from fuzzing (using my own compiler fuzzer): [see my `apple/swift` contributions here](https://github.com/apple/swift/pulls?utf8=%E2%9C%93&q=is%3Apr%20author%3Apracticalswift%20is%3Aclosed%20crash).",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-334168338,334168338,
ryanofsky,2017-10-04T14:38:31Z,Thanks. It could be educational (and also nice to give credit) if you mentioned the specific static analysis & fuzzing tools were that used in your commit messages and PR descriptions.,https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-334177187,334177187,
promag,2017-10-04T14:45:07Z,"Agree with @ryanofsky, also for useful when reviewing!",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-334179266,334179266,
JeremyRubin,2017-10-04T14:50:23Z,"Echoing @ryanofsky, would even be useful to fill this info in on already merged PRs (people often refer to them long after the fact).",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-334181055,334181055,
practicalswift,2017-10-04T15:34:38Z,"@ryanofsky @promag @JeremyRubin  Sure! Thanks for showing interest! That is appreciated.\n\nHere are pointers to some of the open source tools that I use regularly:\n* clang's Thread Safety Analysis - see PR #11226 (**please review!**) + #10866 (**please review!**)\n* `libFuzzer` - see PR #10440 (**please review!**)\n* `afl-fuzz` - see PR #10415 and #10409\n* `valgrind` - see PR #11035 (**pl",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-334196231,334196231,
ryanofsky,2017-10-12T18:19:28Z,"Can this be merged? Has two utACKs and is a small, minor change.",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-336222806,336222806,
laanwj,2017-10-12T21:55:33Z,"Looks good to me, utACK 76fed83",https://github.com/bitcoin/bitcoin/pull/10898#issuecomment-336285268,336285268,
benma,2017-07-24T07:27:04Z,add braces or put on same line according do the dev notes.,https://github.com/bitcoin/bitcoin/pull/10898#discussion_r128964781,128964781,src/rest.cpp
benma,2017-07-24T07:30:18Z,"Now the code is less readable, as I have to guess or look up what `false` means here. I'd restore the var in this case (same issue below).",https://github.com/bitcoin/bitcoin/pull/10898#discussion_r128965288,128965288,src/net_processing.cpp
benma,2017-07-24T07:39:21Z,"A bit off-topic (removing the `!ecc` check looks good):\n\n1. The usage of `Secp256k1Init` is pretty obscure here. Why is it needed for those few commands but not others?\n2. Would it be a better idea to move the Secp256k1Init into the functions that are called? As close as possible to where it is actually required, which is not hard to see now.\n\nPinging @sipa, the author of this.",https://github.com/bitcoin/bitcoin/pull/10898#discussion_r128966597,128966597,src/bitcoin-tx.cpp
benma,2017-07-24T07:45:56Z,After a quick research it looks like `_walletModel` is never passed as NULL. So it would be good to change the argument from a pointer to a reference and remove this check.,https://github.com/bitcoin/bitcoin/pull/10898#discussion_r128967645,128967645,src/qt/walletview.cpp
practicalswift,2017-07-24T14:16:37Z,Fixed by adding two comments :-),https://github.com/bitcoin/bitcoin/pull/10898#discussion_r129047639,129047639,src/net_processing.cpp
benma,2017-07-24T20:38:10Z,"I am not sure whether I like this ðŸ˜† \n\nMaybe nicer to define two constants for true/false, or an enum?\n\nI commend the effort to reduce the number of lines, but in some cases, being descriptive is worth it.\n\nutACK anyway, I'll leave the decision to you.",https://github.com/bitcoin/bitcoin/pull/10898#discussion_r129147047,129147047,src/net_processing.cpp
sipa,2017-07-24T22:05:25Z,"Some libsecp256k1 calls require a context, and some don't. The secp256k1.h header explains which ones, but perhaps that information should be duplicated into at least the pubkey.h/key.h interfaces?",https://github.com/bitcoin/bitcoin/pull/10898#discussion_r129166794,129166794,src/bitcoin-tx.cpp
laanwj,2017-10-02T13:31:05Z,"Please don't change the `setWalletModel()` interface. It is supposed to be consistent over all objects, and setting a `NULL` model is meaningful: it should be possible to use the view classes without a model for simple testing.\n",https://github.com/bitcoin/bitcoin/pull/10898#discussion_r142138940,142138940,src/qt/walletview.h
