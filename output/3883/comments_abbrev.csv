petertodd,2014-03-17T02:00:12Z,You still haven't fixed the DoS attack this enables; there's two ways to fix it FWIW...\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37779576,37779576,
gavinandresen,2014-03-17T12:15:50Z,"Back-of-the-envelope on what it would take to DoS:\n\nAssume wimpy 10mbps (~ 1 megabyte per second) connections that you are trying to DoS.\n\nA double-spend-flood-the-network attack lets you broadcast 100Kilobyte transactions at very low cost (attack is:  broadcast a normal-sized transaction, then broadcast a max-transaction-sized (100K) double-spend version of that transaction).\n\nTo sustain th",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37808835,37808835,
petertodd,2014-03-17T14:45:25Z,"You know, the phrase ""Don't stop your opponent when they're in the middle of digging themselves into a hole."" comes to mind. Especially when in this case the hole you're digging happens to be right where I needed a basement for my new house.\n\nACK\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37823276,37823276,
dgenr8,2014-03-18T01:24:34Z,"With this change in wide use, the probability of a merchant suffering the mining of an adverse double spend will be inversely related to the amount of time he decides to watch for a relayed double spend before delivering the goods.  The rest is just numbers, PROVIDED miners adhere to mining the first spend seen.\n\nAny kind of transaction replacement would create a game for attacker to wait a litt",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37890855,37890855,
jgarzik,2014-03-18T01:51:18Z,@dgenr8 I don't want to follow that logic too far down the rabbit hole.  There are valid use cases for transaction replacement.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37892188,37892188,
petertodd,2014-03-18T04:09:13Z,"Also, now that I've actually looked at the code, I see two implementation-specific DoS attacks above and beyond the problems fundamental to this idea:\n\n1) The double-spent transactions don't end up in the mempool, so they fail AlreadyHave() in the ""inv"" message processing. Since we don't have them, next stop is pfrom->AskFor(inv), which adds them to the size-limited mapAlreadyAskedFor. Unfortuna",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37898012,37898012,
gmaxwell,2014-03-18T20:59:00Z,"> With this change in wide use, the probability of a merchant suffering the mining of an adverse double spend will be inversely related to the amount of time he decides to watch for a relayed double spend before delivering the goods. The rest is just numbers, PROVIDED miners adhere to mining the first spend seen.\n\n::sigh::  No opinion currently on the rest of it (I don't have time at the moment ",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-37987213,37987213,
dgenr8,2014-03-20T02:36:11Z,@petertodd Is this what you had in mind?  Have you got any scripts that might help test this?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38129999,38129999,
dgenr8,2014-03-20T03:41:30Z,@petertodd Doesn't rate-limiting respend relay give attacker a way to silence relay before executing his real double-spend?  Contrast with free transactions where antagonist wants his transaction relayed.  This is the opposite.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38132689,38132689,
dgenr8,2014-03-20T21:12:17Z,"@gmaxwell This change is concerned with countering race attacks on merchants accepting unconfirmed transactions.  I don't think it helps against Finney or any attack requiring hash power.\n\nIt implements one of the three recommendations (""5.3 Communicating Double-Spending Alerts Among Peers"") made by [the research](http://users.encs.concordia.ca/~clark/biblio/bitcoin/Karame%202012.pdf) I am aware",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38221665,38221665,
ghost,2014-03-20T21:27:56Z,@dgenr8 could you add a note about that with reference to https://github.com/bitcoin/bitcoin/blob/master/doc/release-notes.md\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38223187,38223187,
dgenr8,2014-03-22T16:14:19Z,"@petertodd To your concern about bloom filter reset: a DoS attack on a single node runs into the problem that its peer nodes have different randomized bloom filters which will not propagate repeat respend transactions at the moment attacked node's filter is reset unless another 1/1000 hurdle is passed, and so on.\n\nBloom filter states in adjacent peers might be too similar though.  State depends ",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38355668,38355668,
dgenr8,2014-03-24T22:32:50Z,Next commit adds support for immediate UI notification when wallet sees a respend that affects it.\n\n![capture](https://f.cloud.github.com/assets/4284124/2506227/323ceaaa-b3a4-11e3-8189-d2beeba76382.PNG)\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38509878,38509878,
dgenr8,2014-03-25T14:41:58Z,@sipa confirmed via IRC that pull tester failed because of broken tests on git head.  Hopefully auto-test will be re-run when it is fixed.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-38572108,38572108,
gavinandresen,2014-04-03T12:56:08Z,"ACK from me.  better is better, and this is better than the current behavior.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39447198,39447198,
gmaxwell,2014-04-03T14:59:33Z,Is this still alerting on malleability mutants (/simple resignatures that sign the same inputs and have the same outputs)?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39461526,39461526,
dgenr8,2014-04-03T17:49:44Z,@gmaxwell  Any wallet transaction with conflicting spends is highlighted.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39482536,39482536,
gmaxwell,2014-04-03T17:56:17Z,"@dgenr8 then it becomes trivial for a network trouble-maker to make every transaction turn up red. I don't think we should do this. Beyond it being a nuisance if it frequently cries wolf users will be told to ignore it.\n\nA ""double spend"" that continues to pay you as much as the listed payment should probably not trigger the alert. And especially third parties should not be able to trigger the al",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39483314,39483314,
rebroad,2014-04-04T03:47:13Z,"I would like to see some sort of alert, even if triggerable by 3rd parties, but perhaps something more discrete than the red background. It's still nice to know about, and can be a factor in deciding whether to accept a transaction. The indication could be as discrete as the graphic showing the number of confirmations, perhaps an exclamation mark...?\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39529424,39529424,
dgenr8,2014-04-04T12:55:24Z,"@gmaxwell @laanwj Ok, we want a new distinction - that of a transaction whose only conflicts, re-signed or not, have identical inputs and outputs.  And this condition would suppress red highlight and alert, and we sync metadata to those identical conflicts (a single respent input triggers current SyncMetaData).\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-39561500,39561500,
dgenr8,2014-04-09T23:18:15Z,Adds respend txids to RPC output and adds -respendnotify hook for immediate user-defined action when a double-spend is observed.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-40028008,40028008,
dgenr8,2014-04-11T17:07:11Z,"I'm running a [mainnet node](https://github.com/dgenr8/github-maint/blob/mainnet-nodes/mainnet-nodes) on [0.9.0 + this branch](https://github.com/dgenr8/bitcoin/tree/0.9.0+first_double_spend).\n\nConnect some clients to it and double-spend yourself, if you're in the mood.  If it works maybe you can add another respend-relaying node to the list.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-40226476,40226476,
dgenr8,2014-05-01T04:44:29Z,"In the last 10 days, node has relayed just over 50 respend attempts per day.\n\nAs an example, today it tried to warn that SatoshiBONES was being double-spent when it saw 7bd9cab732f33e375f9bf319a9d6c35275d59b941372b365e9ad2a4434533190 at 19:54:34, a standard respend with a .00002 fee bump and missing the .001 payment to merchant.  The merchant-paying tx 6609ecd56281b680cd76c69b2d56f034c70eba067cb",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-41879741,41879741,
mikehearn,2014-05-07T18:12:07Z,"I've brought up a node on this branch running on riker.plan99.net but it seems that your node is unreachable, @dgenr8 ?\n\nmike@mikeh:~/bitcoin/src$ date\nWed May  7 22:11:49 MSK 2014\nmike@mikeh:~/bitcoin/src$ telnet 54.186.233.100 8333\nTrying 54.186.233.100...\ntelnet: Unable to connect to remote host: Connection refused\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-42462483,42462483,
dgenr8,2014-05-07T21:02:49Z,"@mikehearn hmm, bitcoind had died on trap divide.  Try again, thank you!\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-42482785,42482785,
mikehearn,2014-05-07T21:05:39Z,You got a divide by zero? That's .... not good! Any idea how that happened?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-42483110,42483110,
mikehearn,2014-05-07T22:30:26Z,Last time we had a divide by zero it was in the Bloom c'tor where the division happens. I can't see anywhere you initialise a filter with zero elements - it's always set to the constant. I think Gregory said he saw where the bug was.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-42491738,42491738,
BitcoinPullTester,2014-05-08T13:39:33Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/56473b676b8400df3d52d13f232414a6222d5a95 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-42550521,42550521,
mikehearn,2014-05-19T13:53:31Z,"Hey dgenr8, could you tell me what to look for in the logs? I am not seeing anything unusual printed to them by default, perhaps I have my node set up wrong.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-43506467,43506467,
dgenr8,2014-05-19T17:26:58Z,"@mikehearn The extra logging I added is an invasive hack, so it's not part of the branch.  I'll send to you privately for now.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-43532412,43532412,
mikehearn,2014-05-19T17:35:08Z,Hmm. Seems like some logging at least would be useful/needed for node operators and developers.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-43533345,43533345,
mikehearn,2014-05-22T11:24:50Z,"Thanks. Node is up and running and indeed logging double spends that appear related to SatoshiBones. I guess they're getting attacked quite heavily using what we might call classical double spending - and maybe exploiting some miners that applied the stupid ""pick the highest fee"" patch.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-43875667,43875667,
petertodd,2014-05-24T10:23:22Z,Note that SatoshiBones isn't replying to those double-spent transactions and thus isn't vulnerable to them and isn't losing money. \n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44083320,44083320,
dgenr8,2014-05-28T06:17:52Z,"@petertodd These respends are being transmitted only when the original bet placed was a loser, so the house is quite steadily losing money to the perpetrator.\n\nIt's happening to SatoshiDICE also.  Example: 9642d56ac0e4de9a65dfa4579b5eac2ec79cc2bde1578f4f6037d73ad02572a2.  This respend trailed the paying tx by 18 seconds, as observed by our tiny respend-relaying network.  That is time enough for ",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44369487,44369487,
petertodd,2014-05-28T06:50:41Z,"@dgenr8 When I looked into this I didn't observe SatoshiBones or SatoshiDice paying out to unconfirmed bets, whether or not double-spent. Looking at blockchain.info, it appears that SatoshiDice has started responding to unconfirmed bets again, which will predictably cause them to lose money to simple attacks. Why they have decided to make their service less secure is unknown to me and I won't be s",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44371393,44371393,
mikehearn,2014-05-28T09:23:36Z,"I'm curious if the issue these dice sites have is the Eligius ""spam filter"" that's allowing the double spends, or if it's actually that some big miner is running with the highest-fee-in-mempool patch. It'd be good to correlate the blocks that contain the double spends with blockchain.info's list of pools to learn more.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44383025,44383025,
dgenr8,2014-05-28T13:10:59Z,"Per b.i, the two examples listed here were mined by Eligius.  The fact that the respends have higher fees suggests that as the reason (otherwise, why offer the higher fee?)\n\nWe're noticing this because of the green vanity addresses being used.  Digging for likely successful respends against regular merchants will take a little more effort.\n\n@petertodd There are a great many problems that this ",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44403930,44403930,
mikehearn,2014-05-28T13:14:50Z,"For double spends mined by Eligius that come from dice sites it's hard to tell because they deliberately don't allow transactions mentioning dice addresses into their mempool - and attackers know this. It would be better to find blocks not mined by Eligius and see if those miners are using the patch (and ask them to stop, if so).\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44404405,44404405,
luke-jr,2014-05-28T13:18:05Z,"@mikehearn Uh, miners should NOT stop filtering spam. If anything, more need to adopt it.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44404764,44404764,
mikehearn,2014-05-28T13:19:05Z,Perhaps that discussion should be had over on #3715 instead.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44404847,44404847,
luke-jr,2014-05-28T13:21:32Z,"Not really, it'd be off-topic on #3715.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44405142,44405142,
petertodd,2014-05-28T13:24:11Z,"@luke-jr Good point.\n\nWhy would a miner want to keep the transaction in their mempool? They'll use the bandwidth again when the block is broadcast anyway - might as well keep their mempools free of what they consider junk, particularly since not doing so can enable DoS attacks. (e.g. with the sigops issue, or indeed, any case where tx's are being mined by only a minority)\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-44405422,44405422,
dgenr8,2014-06-09T13:25:42Z,"For research, deployed mainnet node now publishes the double-spends it is relaying [here](http://respends.thinlink.com).\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45489850,45489850,
petertodd,2014-06-09T13:27:31Z,@dgenr8 Your site isn't accessible from my machine; firewall?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45489997,45489997,
dgenr8,2014-06-09T13:46:22Z,You're blocked.  Kidding.  Fixed ;)\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45491742,45491742,
petertodd,2014-06-09T13:54:30Z,Your node is seeing way less doublespends than mine; try running a replace-by-fee node and connecting to it explicitly.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45492541,45492541,
petertodd,2014-06-09T13:54:50Z,(specifically my v0.9.1 branch that does preferential peering)\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45492578,45492578,
dgenr8,2014-06-09T17:39:32Z,"@petertodd if you pull the changes from [this branch](https://github.com/dgenr8/bitcoin/tree/0.9.0+first_double_spend), and connect to one of [these nodes](https://github.com/dgenr8/github-maint/blob/mainnet-nodes/mainnet-nodes), all the double-spends your node sees will be on the [list](http://respends.thinlink.com).  That's the idea of this PR after all.\n\nI'm happy to connect to you, where?\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45519689,45519689,
petertodd,2014-06-09T19:28:10Z,"Like I said, if you run a replace-by-fee node and connect to it with your doublespend node you'll get more reliable results. Getting point-to-point connections to stay up in the long run is surprisingly difficult due to how the DoS rules/connection limits of Bitcoin work. Much easier if you either just run two nodes yourself and explicitly connect to either. You'll know it's working if getpeerinfo",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45533103,45533103,
dgenr8,2014-06-09T20:33:54Z,"@petertodd You never addressed my question of Mar 22 regarding your DOS objection, and in fact @gavinandresen had already anticipated that attack by [randomizing the clear moment](https://github.com/dgenr8/bitcoin/blob/first_double_spend/src/main.cpp#L1023).  Also, 5e3ee30 was committed at your explicit request due to general DOS concern.  You could demonstrate an attack at this point.  If txes sh",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45540464,45540464,
petertodd,2014-06-09T20:46:40Z,"@dgenr8 The doublespend proof ""blow-up"" issue is pretty fundamental - I can double spend with a 100K (or heck, ~1MB) transaction and now the network has to propagate a bunch of useless data. My other concerns were just implementation specific mistakes that made that fundamental issue even worse.\n\nBetter to stick with proving double-spends by showing specific inputs were double-spent, and then on",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45541919,45541919,
petertodd,2014-06-09T20:59:03Z,"BTW, as for specifics, there's a few parts:\n\n1) Payment protocol where Alice's wallet makes the promise to _never_ double-spend some set of inputs, or even spend the same scriptPubKey twice. (at least until the payment goes through) To be able to add fees, sign with SIGHASH_ANYONECANPAY.\n\n2) Make double-spend relaying only relay a single double-spending scriptSig + list of SignatureHash() outp",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45543370,45543370,
dgenr8,2014-06-09T23:15:37Z,"@petertodd Many interesting ideas, I look forward to the PR's/projects.  Remember, 5e3ee30 limits bandwidth usage to 50K/10 minutes.\n\nIf relaying respends increased their success rate, nobody is happy about that, even if it makes a cool project like scorched-earth-child-pays-for-parent-double-spend-retaliation more necessary.  But looking at the data, I don't see much evidence that relaying resp",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45556357,45556357,
gavinandresen,2014-06-11T15:51:08Z,DoS and transaction malleability issues have been addressed.  Any issues remaining with this? I still think 'better is better....'\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45760273,45760273,
sipa,2014-06-11T16:58:26Z,"I still think 'an easy to avoid defense is a false sense of security'. It may seem to work now because people aren't trying to avoid the protection that is proposed, but when it becomes succesful, I'm sure that those already intentionally double-spending will adapt their behaviour.\n\nSIGHASH_ANYONECANPAY + just relaying proof of double spending rather than relaying full transactions seems much mo",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45769232,45769232,
dgenr8,2014-06-11T18:21:27Z,"@sipa Consider this: even if receiver only learns of being double-spent AFTER the double-spend is confirmed, it still may not be too late to stop real-world losses.  He may still have time to withhold the unpaid-for goods or service, especially if block was mined quickly.  This can work for any double-spend, even a non-standard one.\n\nThis seems only logical and I am planning to add wallet notifi",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45779689,45779689,
petertodd,2014-06-11T19:34:01Z,"@dgenr8 Yes, but if it doesn't work because of false alarms, DoS attacks, etc. we've made things worse, not better. We can't just consider features in isolation, we need to consider how they'll impact the whole ecosystem. For that matter, this really needs a BIP and public discussion on the mailing list - do you realize how your double-spend relaying mechanism would make for great BitMessage funct",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45788740,45788740,
dgenr8,2014-06-11T20:13:05Z,"@petertodd Sorry if it sounded like I was proposing some new network alert.  I should have explained better.  I only meant that local wallet alert of a double-spend suddenly appearing in a block seems like a no-brainer, and a good example for other wallets.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-45793291,45793291,
tuttleorbuttle,2014-06-22T17:38:47Z,sounds like a pretty good idea imho.\naren't the false alarm and DoS issues already solved?\n\nabout eligius... can't luke-jr just add a simple fix to also refuse to mine double spends related to casino sites?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46787377,46787377,
sipa,2014-06-22T17:46:48Z,"IMHO, the DoS protection and no-false-sense-of-security are mutually exclusive: if the mechanism provided by these notifications are useful in preventing monetary loss, an attacker will just flood the network with other double spend alerts, hoping his real attack will not get through.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46787570,46787570,
mikehearn,2014-06-23T08:09:48Z,".... until he runs out of coins to double spend, unless the network is fast enough that it doesn't matter or unless businesses react to a flood of double spend alerts by temporarily pausing their operations, etc.\n\nI'm very wary of adversarial scenarios where people try to anticipate all the way to the end game. I've seen this sort of discussion before, back when my old team first proposed the Go",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46816400,46816400,
petertodd,2014-06-23T12:03:33Z,"@sipa Agreed. And you know, basically you can say the difference between my ""relay the scriptSig"" proposal - which you also deserve credit for IIRC - and the ""relay the whole tx"" proposal is that the whole tx version requires about 100x more bandwidth to defend against an attacker.\n\nWe could do even better than that though and implement a ""relay the scriptSig"" double-spend alert scheme where the",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46835581,46835581,
gavinandresen,2014-06-23T19:33:59Z,"@dgenr8 : commit history is messy; can you rebase -i to squash bugfix commits?\n\nEverybody else: see any bugs (as opposed to philosophical ""I can think of a better way"") that should prevent me from poking the ""merge pull request"" button?\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46890890,46890890,
sipa,2014-06-23T20:19:02Z,It seems the current default double spending relay limit is 5000 bytes per minute? Is it intentionally so low?\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46896390,46896390,
sipa,2014-06-23T20:46:33Z,"Has anyone tested how this behaves in case a mutated version of an existing transaction is received? Does it broadcast the ""double spend"" and/or warn the user?\n\nEDIT: nevermind, it seems the double-spend logic won't trigger, as the transaction is seen as equivalent.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46899639,46899639,
dgenr8,2014-06-23T21:07:37Z,"@sipa Correct regarding relaying only isStandard, but an additional check could be added to relay only when !(tx1.isEquivalentTo(tx2)).  In [this example](http://respends.thinlink.com/tx/7ac6bffd38609e475768ec466eca49e39630440499da604f888b95558c9f341d), tx1 was admitted to mempool, and only scriptSig differs in tx2.  Wallet alert is already prevented.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46902206,46902206,
dgenr8,2014-06-23T21:14:03Z,"@sipa I chose 5000 bytes/min to be .33 of the free relay limit.  Currently, count of respend relays is less than .1 count of free transactions.  I haven't looked at size stats.  EDIT: the limit was triggered during an attack on my test node on June 10/11, 2014.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46902963,46902963,
sipa,2014-06-23T21:16:45Z,"So broadcasting 50 kB in a short time - by all attackers combined - worth of double spends is enough to flood the double-spend relay channel, globally?\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46903263,46903263,
petertodd,2014-06-23T21:16:59Z,"@dgenr8 You realize how incredibly cheap it'll be to saturate that limit constantly? We're literally talking pennies a day.\n\nHeck, it may very well get saturated by just people bumping tx fees, which would be the more useful use of this patch.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46903285,46903285,
sipa,2014-06-23T21:18:53Z,"Oh, and if you relay simple mutations, it's even cheaper, as you can use any transaction in the network, not just those you own the coins for. So yes, make sure you don't trigger double-spend relays for those.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46903513,46903513,
dgenr8,2014-06-23T21:25:20Z,@petertodd Is your preferred value for this limit no longer zero?  That is progress.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46904290,46904290,
dgenr8,2014-06-23T21:31:16Z,"@sipa Ok, but if I'm not mistaken, third parties cannot create mutants that pass isStandard.  I think that can only be done by altering the signature characteristics, but I'm out of my area there.  It would be great if someone could look at the example to see what is actually different about scriptSig.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46904920,46904920,
sipa,2014-06-23T21:33:30Z,"@dgenr8 They can, it's trivial. In BIP62 a new transaction type is introduced that can optionally be made non-malleable, but we are months away from availability for starters, and even then it can only work for wallets that choose to adopt that new type.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46905145,46905145,
petertodd,2014-06-23T21:39:26Z,"@dgenr8 Yes, this is great for replace-by-fee, and fee bumping in general, so please set the limit high enough to be useful and low enough that you don't take the network down. Something more like 50-150KB/minute should be fine.\n\n@sipa Additionally remember Gavin's relax IsStandard() patch(1) that opens up a whole new classes of malleability. Or for that matter SIGHASH_ANYONECANPAY transactions.",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46905784,46905784,
gavinandresen,2014-06-24T01:35:59Z,"@petertodd : what ""new classes of malleability"" are you thinking of? The only one I can see is ""Superfluous scriptSig operations"" (BIP 62 category 3), but since the reference implementation wallet will never produce any such weird transactions where that malleability is an issue that is not relevant to this pull request.\n\nOther wallet implementations that might produce wacky P2SH transactions mi",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46922978,46922978,
petertodd,2014-06-24T03:04:40Z,@gavinandresen @sipa and I are talking about DoS attacks enabled by unrelated third parties' malleable transactions and the attacker creating fake double-spends through malleability; the sender doesn't necessarily care that their tx's are malleable.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46927445,46927445,
dgenr8,2014-06-24T05:52:37Z,"@sipa @petertodd Your requested changes have been committed, please review.\n\n@gavinandresen I tried, but having brought merges in previously, rather than rebasing, means a lot of edits would be required.  Sorry for the rookie mistake.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46934578,46934578,
dgenr8,2014-06-24T06:29:56Z,"Mainnet node's [observed double-spend tracking page](http://respends.thinlink.com) includes, since 2014-06-22, double-spends that were first seen in a block.  Unless tx1->tx2 elapsed time is very short, these were likely introduced by the miner.  Background shaded red.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-46936427,46936427,
tuttleorbuttle,2014-06-24T17:16:56Z,@dgener8 those red shaded transactions are interesting. the three top ones are all using outputs from tx 8e71c09772e9c456a1ca19c9b1d7fe68e4ac62e10ab88b755781a2421afedf69.\nseems like someone did this repeatedly throughout the day :D\nthe 4th one is pretty cool. seems like someone sent a tx with and without fee and was lucky enough to get the feeless transaction into a block first.\nsorry for the o,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47000884,47000884,
petertodd,2014-06-24T23:46:43Z,"@dgenr8 re: rebase, use git add -p to recreate a sensible set of commits for review. Remember that git isn't a tool to record what you did, it's a tool to communicate to others what you want to do.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47044954,47044954,
dgenr8,2014-06-26T07:35:53Z,"@gavinandresen @petertodd All cleaned up, thanks for the guidance.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47196087,47196087,
dgenr8,2014-06-27T01:53:40Z,@gavinandresen This time I compiled the intermediates :$\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47300499,47300499,
gavinandresen,2014-06-27T16:52:27Z,ACK.\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47373443,47373443,
ghost,2014-06-27T17:46:53Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47379423,47379423,
petertodd,2014-06-27T20:25:20Z,"Code quality ACK.\n\nYeah, that's how you want to split up changes into individual commits, good job. \n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47396220,47396220,
BitcoinPullTester,2014-06-28T00:08:20Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p3883_7a19efe04069d9a1e251cdc94b25184f76d9d901/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47412084,47412084,
dgenr8,2014-06-29T19:12:26Z,"It turns out no changes are needed to alert when a double-spend affecting the local wallet is first seen in a block.  It already works, because the wallet looks at every tx in a newly connected block.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47468940,47468940,
dgenr8,2014-06-30T20:29:11Z,"@jgarzik No, for the general anti-DoS machinery, respends are treated like duplicates.  In recent versions, AcceptToMemoryPool returns false after detecting a respend, and does not flag an error in the validation state.\n\nOne effect is that it won't contribute to a peer ban.  Another is that the peer does not get feedback about the rejection.  I suggested adding a rejection code in response to #4",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47582556,47582556,
gavinandresen,2014-07-01T15:12:54Z,"I think there is a potential attack here (as noted by Sergio in another github thread):\n\nAttacker send you a valid transaction.\nThen attacker sends you a double-spend with an invalid signature.\n\nYou will relay that invalid signature transaction to your peers, and if any didn't happen to see the first transaction (maybe because they just connected to you) they will DoS-ban you.\n\nThere should",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47668597,47668597,
petertodd,2014-07-01T18:22:18Z,Not to mention the second transaction with invalid sigs can be made by anyone. \n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47691934,47691934,
SergioDemianLerner,2014-07-01T22:02:13Z,"It took me long to read all the comments, but I found no clear requirement that the double-spend relay system requires a bloom filter nor a rate-limit. If each double-spend is relayed only once, we have only doubled the attackers DoS capabilities, which imho is completely tolerable. \n\nRegarding allowing transaction replacements: a tx should be allowed to be replaced as long as it has one more in",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47715028,47715028,
petertodd,2014-07-01T23:53:58Z,"The double spend can be hundreds of times larger than the original tx, e.g. a 160 byte minimal tx double spent by a 100k or even 1000k tx. Hence the rate limiter, or my suggestion of relaying just scriptSig's.\n\nAgreed on the relay with higher fee - I proposed that ages ago. Also no reason not to allow additional outputs to be added, or existing output amounts increased. (note how this is very us",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47722798,47722798,
SergioDemianLerner,2014-07-02T01:38:28Z,"Ok. So the idea was to give double-spend alerts other relay algorithm because the second double-spend may be larger than the first. That's a pretty good reason because nodes do not know if miners will include the large or the small one. There is no easy way out this problem.\n\nAs Peter proposed, a minimal double-spend alert could be achieved using scriptsigs.\nI did the same proposal long ago her",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47728608,47728608,
dgenr8,2014-07-02T05:27:42Z,"One reason to relay the tx itself is that it may actually be the first spend.  No node is omniscient, but this change gives the network collectively more information to work with.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47738646,47738646,
sipa,2014-07-02T06:21:15Z,I disagree.\n\nThe reason to relay the full transaction is because it is the only way to\nprove that there was an actual double spend. We wouldn't want people to be\nable to make the network incorrectly think a double spend occurred.\n\nPropagating double-spending transactions largely removes the distinction\nbetween first and second. As a node on the network you have an incentive to\nget the glob,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47741099,47741099,
dgenr8,2014-07-02T07:29:50Z,"@sipa I suspect you are right regarding proof, but I havent really studied the scriptsig idea.\n\nIt should not be possible to isolate a node from tx1, simply by sending it tx2 directly.  When tx1 reaches the ""light cone"" of tx2, it should penetrate it and cause local alerts inside, although in that realm it is the ""double spend"".  \n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47745136,47745136,
mikehearn,2014-07-02T08:04:59Z,"Could we gate this behind a version bump? It seems likely that some clients will not expect this behaviour change and will want to opt into it when they're ready. Consider an app connected to a local ""trusted node"" which knows what to do when a block containing a double spend appears, but isn't programmed to handle mempool double spends.\n\nAdditionally, other wallets will have to make the same ch",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47747619,47747619,
sipa,2014-07-02T08:09:34Z,"Or an explicit negotiation ""I want to receive double spend notifications""?\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47747928,47747928,
petertodd,2014-07-02T08:22:14Z,@SergioDemianLerner Note how a scriptSig-based method really needs payment protocol support as even spending a txout with the same scriptPubKey twice can be turned into a false double-spend. With payment protocol support it works fine though and works well with scorched-earth. (though I need to fix a minor DoS attack w/ ANYONECANPAY transactions re: attackers adding useless inputs to them) \n\n@si,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47748953,47748953,
mikehearn,2014-07-02T08:37:08Z,"@sipa How does that work? If you see A and then B, and you _always_ relay A and then B, then in the absence of other information your peers will agree with you on the ordering. If they saw B and then A first, it doesn't matter what order you relay in. I don't see how it affects the likelihood of changing the perceived order for any transaction. Could you try explaining that again?\n\nAnother way t",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47750231,47750231,
petertodd,2014-07-02T08:41:43Z,@mikehearn Not everyone will accept A to their mempool. \n,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47750647,47750647,
sipa,2014-07-02T08:43:05Z,"What @petertodd said, plus new nodes starting up may just see the double spend, and not the original.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47750742,47750742,
sipa,2014-07-02T08:44:37Z,"@mikehearn A ""dtx"" message sounds like a good idea to me, it removes all risks of accidentally interpreting the transaction that was intended as a double spend as something else.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47750863,47750863,
petertodd,2014-07-02T08:54:42Z,"Of course as the ""dtx"" channel is trivially swamped we're back to the situation where the feature is useless, even for other uses like increasing fees. If we're going to go to the trouble of a separate message might as well just do scriptSig relaying and do it right. \n\nRemember that anyone can write a ""dtx->tx"" message converter and deploy a few nodes doing it. I personally would as that's a mor",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47751721,47751721,
jgarzik,2014-07-02T08:57:50Z,"@petertodd My presumption was that ""dtx"" _must_ include an automatic dtx->tx converter, in the bitcoind implementation.  Otherwise you get the properties you describe.  If you have not seen a ""dtx"", then convert it to a tx and process accordingly.\n\nThus, no ordering problems, and older nodes magically ignore 2nd's.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47752017,47752017,
mikehearn,2014-07-02T09:03:17Z,"No, a ""dtx"" is never treated as a regular transaction, as outlined above.\n\nIf you send a double spend onwards knowing it's a double spend but not marking it as such, and the remote node already saw the first spend, then it will be ignored same as today.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47752518,47752518,
jgarzik,2014-07-02T09:08:32Z,"The haven't-seen-first-spend-yet case should be handled.  Was not referring to opposite.\n\nYou cannot assume anything about a double spend, including intent behind it.  It may be a user attempting a valid recovery, or executing a branch of a smart contract.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47752951,47752951,
mikehearn,2014-07-02T09:11:10Z,"Ah, well I think not knowing about transactions is supposed to be fixed by syncing the mempool at startup, right? But before that we need a limited/ordered mempool. So fixing this case involves the resource management/anti-DoS work.\n\nWith respect to the intent, I think under Bitcoin's current design there are no situations where a double spend of a broadcast transaction is valid. It's always a m",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47753219,47753219,
jgarzik,2014-07-02T09:27:29Z,"Again with the over-assuming.  You cannot assume intent behind a double spend.\n\nEasy counter examples:\n- User's transaction got relayed, but is stuck in limbo (not confirming) due to insufficient fees or some other factor.  Fix is usually to double spend with higher fees.\n- Payment channel (smart contract).  User's refund TX races with payment channel rapidly-revised TX in at least one edge ca",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47754861,47754861,
petertodd,2014-07-02T09:28:30Z,"@mikehearn There isn't a ""design"" of Bitcoin - a decentralised network - only what's possible given the implementations on the network. Right now the ""design"" includes even replace-by-fee by virtue of the fact that some % of hashing power and nodes on the p2p network support it. \n\nIn any case people already do double-spends to get stuck transactions unstuck by bumping fees. Note that you'll neve",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47754964,47754964,
mikehearn,2014-07-02T09:49:57Z,"@jgarzik Replace by fee isn't supposed to work, the fact that it does is a regrettable bug that we must work on, indeed this patch is part of doing that. And if a merchant sold something and then the tx was replaced-by-fee then that would certainly count as a form of payment fraud, no different to passing a bouncing cheque or forged paper currency. The fact that cheques can bounce and paper curren",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47756912,47756912,
jgarzik,2014-07-02T10:26:23Z,"@mikehearn I was not referring to replace-by-fee.  And in general, you seem to be trying to avoid any case that fails to fit neatly inside a pre-conceived box ascribing maliciousness to all double-spends.  The primary mistake is attempting to divine any intent of a double spend, or cast a strict judgement upon the entire class.  The world is not that simple.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47759970,47759970,
jgarzik,2014-07-02T10:42:55Z,"The standard in-the-field advice for a transaction stuck in limbo, not confirming, is to respend [many of] the same inputs with a higher fee.  It is effective field advice because the ""stuck"" transaction usually hasn't propagated well and made it to miners, and it provides 100% guarantee that the other version of the transaction will never confirm.\n\nThis is not some deployed and argued-about ""re",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47761290,47761290,
petertodd,2014-07-02T11:26:35Z,@jgarzik Agreed. Anyway I'll see if I can get some time to write up a better patch after I get home if no-one else is going to write one. \n\n@mikehearn Replace-by-fee scorched-earth can be viewed as a proposed way of meeting that white paper's design goals; coinbase reallocation/blacklisting is another way. Greenaddress's double-spend guarantees is yet another way. \n\nWhich idea(s) are best rema,https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47764629,47764629,
gavinandresen,2014-07-02T13:45:43Z,"Wow, this is veering off-topic quickly...\n\nRE: @mikehearn : suggesting version bump:\n\nAll implementations MUST handle double-spends already. If we have two transactions tx1 and tx2 that spend the same outpoints, you must, today, be able to handle receiving 'inv' and 'tx' data for both of them.\n\nThe only change this makes is that you might now get the inv/tx messages from the same peer instea",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47777393,47777393,
dgenr8,2014-07-02T13:49:14Z,"Agreed. Do we really need to worry about nodes, or cooperating groups of nodes, who have decided to rely totally on the external network never to send them an unconfirmed double-spend?  That kind of faulty assumption must have been punished by nature long ago.\n\n""dtx"" would be a value judgment by one node intended for others, and it could be faked.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47777817,47777817,
petertodd,2014-07-02T14:05:43Z,"@dgenr8 The concern is custom setups, e.g. exchanges with software that assumes Bitcoin never sends a doublespend tx without a block in between. The situation would not be ""punished by nature"" as the node in question is internal and trusted.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47779857,47779857,
gavinandresen,2014-07-02T15:20:16Z,"@petertodd : if such an exchange (using bitcoind as a front-end, relying on it never relaying a double-spend) jumps in here and says ""no, we don't want to know about possible double-spends until we see the second spend in a block"" and they had some good reason (which I can't imagine right now-- why wouldn't you want to know about the double-spend earlier rather than later?) then maybe I'd change m",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47790220,47790220,
petertodd,2014-07-02T17:28:59Z,"@gavinandresen I suspect such an exchange isn't following development as closely as they should... Anyway, good to remember to put in the release notes when this gets settled. \n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-47808740,47808740,
rebroad,2014-07-21T00:37:59Z,"I agree with the ""dtx"" message rather than ""tx"" - this allows bitcoin implementations to choose whether they subscribe to double-spend messages.\n",https://github.com/bitcoin/bitcoin/pull/3883#issuecomment-49564755,49564755,
laanwj,2014-04-03T15:53:19Z,I don't entirely understand why there is no more use for this function.\nThe reason it was added was to make sure that the 'malleated' versions of transactions take over the metadata (such as the payment request data) of the original transaction.\nIs this now handled in another way?\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r11258046,11258046,src/wallet.cpp
dgenr8,2014-04-03T17:50:02Z,"@laanwj Malicious respends affecting the wallet will be tracked by the wallet db, and we don't want to give them that treatment.\n",https://github.com/bitcoin/bitcoin/pull/3883#discussion_r11263531,11263531,src/wallet.cpp
laanwj,2014-04-04T06:44:31Z,But what about genuine mallleated clones (same transaction but different txid)? They should still have that treatment. I don't think it is valid to remove this for every case.\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r11284466,11284466,src/wallet.cpp
sipa,2014-06-23T20:17:24Z,"Can the meaning of this nLimit value be documented somewhere? It looks like it means ""nLimit=X means up to X*1000 per minute"".\n",https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14097476,14097476,src/main.cpp
Diapolo,2014-06-27T21:18:30Z,Nit: Indentation\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14315791,14315791,src/main.cpp
Diapolo,2014-06-27T21:19:53Z,Nit: Could this not be 2 lines?\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14315857,14315857,src/main.cpp
Diapolo,2014-06-27T21:21:35Z,"Nit: Would be more readable, if every variable had a single line.\n",https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14315918,14315918,src/qt/transactionrecord.h
Diapolo,2014-06-27T21:22:19Z,Nit: Indentation\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14315943,14315943,src/qt/walletmodel.cpp
Diapolo,2014-06-27T21:22:37Z,Nit: Indentation\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14315956,14315956,src/qt/transactiontablemodel.cpp
Diapolo,2014-06-27T21:23:49Z,Nit: Indentation\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14316006,14316006,src/wallet.cpp
Diapolo,2014-06-27T21:25:20Z,CT_CONFLICTED? We use that term for this already anyway.\n,https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14316060,14316060,src/ui_interface.h
sipa,2014-06-27T23:15:29Z,"NAK as long as it relays trivial mutations of transactions. That makes it\ntrivial to flood the bandwidth of the double-spend relay traffic.\n\nIf that has been fixed by now (I can't check), my NAK is gone, but I still\nthink it is a bad idea. Let consensus decide, however.\n",https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14319553,14319553,src/ui_interface.h
dgenr8,2014-06-28T00:08:11Z,"@Diapolo Formatting changes applied, thank you.  Despite the name of the updateTransaction ""status"" parameter containing it, CT_GOT_CONFLICT is an event type and not a status.  The transaction being updated is the original spend that just got a conflict.\n\n@sipa It has been fixed.\n",https://github.com/bitcoin/bitcoin/pull/3883#discussion_r14320739,14320739,src/ui_interface.h
