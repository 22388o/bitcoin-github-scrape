[
  {
    "sha": "8fbf03995df9a2003be603be1a930bc3373d56e0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZmJmMDM5OTVkZjlhMjAwM2JlNjAzYmUxYTkzMGJjMzM3M2Q1NmUw",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-25T23:21:29Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T14:54:21Z"
      },
      "message": "CBloomFilter::clear() method",
      "tree": {
        "sha": "e726d2f0b835114c4aa5089813a60ed06971f46a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e726d2f0b835114c4aa5089813a60ed06971f46a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8fbf03995df9a2003be603be1a930bc3373d56e0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fbf03995df9a2003be603be1a930bc3373d56e0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8fbf03995df9a2003be603be1a930bc3373d56e0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fbf03995df9a2003be603be1a930bc3373d56e0/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "62599373883a66a958136f48ab0e2b826e3d5bf8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/62599373883a66a958136f48ab0e2b826e3d5bf8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/62599373883a66a958136f48ab0e2b826e3d5bf8"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "85a2ddc1892b3303caed3988e5915c42dd885776",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fbf03995df9a2003be603be1a930bc3373d56e0/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fbf03995df9a2003be603be1a930bc3373d56e0/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=8fbf03995df9a2003be603be1a930bc3373d56e0",
        "patch": "@@ -94,6 +94,13 @@ bool CBloomFilter::contains(const uint256& hash) const\n     return contains(data);\n }\n \n+void CBloomFilter::clear()\n+{\n+    vData.assign(vData.size(),0);\n+    isFull = false;\n+    isEmpty = true;\n+}\n+\n bool CBloomFilter::IsWithinSizeConstraints() const\n {\n     return vData.size() <= MAX_BLOOM_FILTER_SIZE && nHashFuncs <= MAX_HASH_FUNCS;"
      },
      {
        "sha": "d0caf9e9fafbc5a0e6a9bde92885b2765c477c1b",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fbf03995df9a2003be603be1a930bc3373d56e0/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fbf03995df9a2003be603be1a930bc3373d56e0/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=8fbf03995df9a2003be603be1a930bc3373d56e0",
        "patch": "@@ -78,6 +78,8 @@ class CBloomFilter\n     bool contains(const COutPoint& outpoint) const;\n     bool contains(const uint256& hash) const;\n \n+    void clear();\n+\n     // True if the size is <= MAX_BLOOM_FILTER_SIZE and the number of hash functions is <= MAX_HASH_FUNCS\n     // (catch a filter which was just deserialized which was too big)\n     bool IsWithinSizeConstraints() const;"
      },
      {
        "sha": "5c6c7d85882d8e9b0185e5f67a9e759cfaa5cb81",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8fbf03995df9a2003be603be1a930bc3373d56e0/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8fbf03995df9a2003be603be1a930bc3373d56e0/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=8fbf03995df9a2003be603be1a930bc3373d56e0",
        "patch": "@@ -45,6 +45,10 @@ BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize)\n         expected[i] = (char)vch[i];\n \n     BOOST_CHECK_EQUAL_COLLECTIONS(stream.begin(), stream.end(), expected.begin(), expected.end());\n+\n+    BOOST_CHECK_MESSAGE( filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter doesn't contain just-inserted object!\");\n+    filter.clear();\n+    BOOST_CHECK_MESSAGE( !filter.contains(ParseHex(\"99108ad8ed9bb6274d3980bab5a85c048f0950c8\")), \"BloomFilter should be empty!\");\n }\n \n BOOST_AUTO_TEST_CASE(bloom_create_insert_serialize_with_tweak)"
      }
    ]
  },
  {
    "sha": "d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjQwYTNjZWFiNGY0MzcyYzJhMGY3MzhjMTI4NmNmZGU0YjQxYjUw",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-26T06:41:44Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T14:54:21Z"
      },
      "message": "Relay double-spends, subject to anti-DOS\n\nAllows network wallets and other clients to see transactions that respend\na prevout already spent in an unconfirmed transaction in this node's mempool.\n\nKnowledge of an attempted double-spend is of interest to recipients of the\nfirst spend.  In some cases, it will allow these recipients to withhold\ngoods or services upon being alerted of a double-spend that deprives them\nof payment.\n\nAs before, respends are not added to the mempool.\n\nAnti-Denial-of-Service-Attack provisions:\n - Use a bloom filter to relay only one respend per mempool prevout\n - Rate-limit respend relays to a default of 100 thousand bytes/minute\n - Define tx2.IsEquivalentTo(tx1): equality when scriptSigs are not considered\n - Do not relay these equivalent transactions\n\nRemove an unused variable declaration in txmempool.cpp.",
      "tree": {
        "sha": "48aba47604e601d8b50b23de7ca9bb17f82e9926",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/48aba47604e601d8b50b23de7ca9bb17f82e9926"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8fbf03995df9a2003be603be1a930bc3373d56e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8fbf03995df9a2003be603be1a930bc3373d56e0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8fbf03995df9a2003be603be1a930bc3373d56e0"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 109,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ca28624529709785d499c70ddd85191e97cc4348",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -119,6 +119,22 @@ CTransaction& CTransaction::operator=(const CTransaction &tx) {\n     return *this;\n }\n \n+bool CTransaction::IsEquivalentTo(const CTransaction& tx) const\n+{\n+    if (nVersion   != tx.nVersion   ||\n+        nLockTime  != tx.nLockTime  ||\n+        vin.size() != tx.vin.size() ||\n+        vout       != tx.vout)\n+        return false;\n+    for (unsigned int i = 0; i < vin.size(); i++)\n+    {\n+        if (vin[i].nSequence != tx.vin[i].nSequence ||\n+            vin[i].prevout   != tx.vin[i].prevout)\n+            return false;\n+    }\n+    return true;\n+}\n+\n int64_t CTransaction::GetValueOut() const\n {\n     int64_t nValueOut = 0;"
      },
      {
        "sha": "8606831575a6b300f899a5a8b9040c4f513a44e8",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -256,6 +256,9 @@ class CTransaction\n         return hash;\n     }\n \n+    // True if only scriptSigs are different\n+    bool IsEquivalentTo(const CTransaction& tx) const;\n+\n     // Return sum of txouts.\n     int64_t GetValueOut() const;\n     // GetValueIn() is a method on CCoinsViewCache, because"
      },
      {
        "sha": "bd732753e49c0b50a641082f7442645f0328a6c1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -1175,6 +1175,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     LogPrintf(\"mapAddressBook.size() = %u\\n\",  pwalletMain ? pwalletMain->mapAddressBook.size() : 0);\n #endif\n \n+    RegisterInternalSignals();\n     StartNode(threadGroup);\n     if (fServer)\n         StartRPCThreads();"
      },
      {
        "sha": "48237c1b5402173fbed7a42b7861a648bbcf9250",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 14,
        "changes": 100,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -7,6 +7,7 @@\n \n #include \"addrman.h\"\n #include \"alert.h\"\n+#include \"bloom.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n@@ -122,6 +123,10 @@ namespace {\n     map<uint256, pair<NodeId, list<uint256>::iterator> > mapBlocksToDownload;\n }\n \n+// Forward reference functions defined here:\n+static const unsigned int MAX_DOUBLESPEND_BLOOM = 1000;\n+static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter);\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // dispatching functions\n@@ -143,9 +148,24 @@ struct CMainSignals {\n     boost::signals2::signal<void (const uint256 &)> Inventory;\n     // Tells listeners to broadcast their data.\n     boost::signals2::signal<void ()> Broadcast;\n+    // Notifies listeners of detection of a double-spent transaction. Arguments are outpoint that is\n+    // double-spent, first transaction seen, double-spend transaction, and whether the second double-spend\n+    // transaction was first seen in a block.\n+    // Note: only notifies if the previous transaction is in the memory pool; if previous transction was in a block,\n+    // then the double-spend simply fails when we try to lookup the inputs in the current UTXO set.\n+    boost::signals2::signal<void (const COutPoint&, const CTransaction&, bool)> DetectedDoubleSpend;\n } g_signals;\n }\n \n+void RegisterInternalSignals() {\n+    static CBloomFilter doubleSpendFilter;\n+    seed_insecure_rand();\n+    doubleSpendFilter = CBloomFilter(MAX_DOUBLESPEND_BLOOM, 0.01, insecure_rand(), BLOOM_UPDATE_NONE);\n+\n+    g_signals.DetectedDoubleSpend.connect(boost::bind(RelayDoubleSpend, _1, _2, _3, doubleSpendFilter));\n+}\n+\n+\n void RegisterWallet(CWalletInterface* pwalletIn) {\n     g_signals.SyncTransaction.connect(boost::bind(&CWalletInterface::SyncTransaction, pwalletIn, _1, _2));\n     g_signals.EraseTransaction.connect(boost::bind(&CWalletInterface::EraseFromWallet, pwalletIn, _1));\n@@ -824,6 +844,22 @@ int64_t GetMinFee(const CTransaction& tx, unsigned int nBytes, bool fAllowFree,\n     return nMinFee;\n }\n \n+// Exponentially limit the rate of nSize flow to nLimit.  nLimit unit is thousands-per-minute.\n+bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsigned int nSize)\n+{\n+    static CCriticalSection csLimiter;\n+    int64_t nNow = GetTime();\n+\n+    LOCK(csLimiter);\n+\n+    // Use an exponentially decaying ~10-minute window:\n+    dCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n+    nLastTime = nNow;\n+    if (dCount >= nLimit*10*1000)\n+        return true;\n+    dCount += nSize;\n+    return false;\n+}\n \n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransaction &tx, bool fLimitFree,\n                         bool* pfMissingInputs, bool fRejectInsaneFee)\n@@ -858,9 +894,10 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n     {\n         COutPoint outpoint = tx.vin[i].prevout;\n-        if (pool.mapNextTx.count(outpoint))\n+        // Does tx conflict with a member of the pool, and is it not equivalent to that member?\n+        if (pool.mapNextTx.count(outpoint) && !tx.IsEquivalentTo(*pool.mapNextTx[outpoint].ptx))\n         {\n-            // Disable replacement feature for now\n+            g_signals.DetectedDoubleSpend(outpoint, tx, false);\n             return false;\n         }\n     }\n@@ -932,23 +969,15 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // be annoying or make others' transactions take longer to confirm.\n         if (fLimitFree && nFees < CTransaction::minRelayTxFee.GetFee(nSize))\n         {\n-            static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n-            static int64_t nLastTime;\n-            int64_t nNow = GetTime();\n-\n-            LOCK(csFreeLimiter);\n+            static int64_t nLastFreeTime;\n+            static int64_t nFreeLimit = GetArg(\"-limitfreerelay\", 15);\n \n-            // Use an exponentially decaying ~10-minute window:\n-            dFreeCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n-            nLastTime = nNow;\n-            // -limitfreerelay unit is thousand-bytes-per-minute\n-            // At default rate it would take over a month to fill 1GB\n-            if (dFreeCount >= GetArg(\"-limitfreerelay\", 15)*10*1000)\n+        \tif (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n+\n             LogPrint(\"mempool\", \"Rate limit dFreeCount: %g => %g\\n\", dFreeCount, dFreeCount+nSize);\n-            dFreeCount += nSize;\n         }\n \n         if (fRejectInsaneFee && nFees > CTransaction::minRelayTxFee.GetFee(nSize) * 10000)\n@@ -971,6 +1000,49 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n+static void\n+RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+{\n+    // Relaying double-spend attempts to our peers lets them detect when\n+    // somebody might be trying to cheat them. However, blindly relaying\n+    // every double-spend across the entire network gives attackers\n+    // a denial-of-service attack: just generate a stream of double-spends\n+    // re-spending the same (limited) set of outpoints owned by the attacker.\n+    // So, we use a bloom filter and only relay (at most) the first double\n+    // spend for each outpoint. False-positives (\"we have already relayed\")\n+    // are OK, because if the peer doesn't hear about the double-spend\n+    // from us they are very likely to hear about it from another peer, since\n+    // each peer uses a different, randomized bloom filter.\n+\n+    if (fInBlock || filter.contains(outPoint)) return;\n+\n+    // Apply an independent rate limit to double-spend relays\n+    static double dRespendCount;\n+    static int64_t nLastRespendTime;\n+    static int64_t nRespendLimit = GetArg(\"-limitrespendrelay\", 100);\n+    unsigned int nSize = ::GetSerializeSize(doubleSpend, SER_NETWORK, PROTOCOL_VERSION);\n+\n+    if (RateLimitExceeded(dRespendCount, nLastRespendTime, nRespendLimit, nSize))\n+    {\n+        LogPrint(\"mempool\", \"Double-spend relay rejected by rate limiter\\n\");\n+        return;\n+    }\n+\n+    LogPrint(\"mempool\", \"Rate limit dRespendCount: %g => %g\\n\", dRespendCount, dRespendCount+nSize);\n+\n+    // Clear the filter on average every MAX_DOUBLE_SPEND_BLOOM\n+    // insertions\n+    if (insecure_rand()%MAX_DOUBLESPEND_BLOOM == 0)\n+        filter.clear();\n+\n+    filter.insert(outPoint);\n+\n+    RelayTransaction(doubleSpend);\n+\n+    // Share conflict with wallet\n+    g_signals.SyncTransaction(doubleSpend, NULL);\n+}\n+\n \n int CMerkleTx::GetDepthInMainChainINTERNAL(CBlockIndex* &pindexRet) const\n {"
      },
      {
        "sha": "c7f3dc43889f9ca92d564f9ea3b7bd10064babae",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -108,6 +108,9 @@ struct CNodeStateStats;\n \n struct CBlockTemplate;\n \n+/** Set up internal signal handlers **/\n+void RegisterInternalSignals();\n+\n /** Register a wallet to receive updates from core */\n void RegisterWallet(CWalletInterface* pwalletIn);\n /** Unregister a wallet from core */"
      },
      {
        "sha": "97a426dd355a381c4b6a444f705a7547f3767b0a",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d640a3ceab4f4372c2a0f738c1286cfde4b41b50/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "patch": "@@ -415,7 +415,6 @@ void CTxMemPool::remove(const CTransaction &tx, std::list<CTransaction>& removed\n void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>& removed)\n {\n     // Remove transactions which depend on inputs of tx, recursively\n-    list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n         std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);"
      }
    ]
  },
  {
    "sha": "ada5a067c75f19a724cc054286ecf2254e5dbe8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZGE1YTA2N2M3NWYxOWE3MjRjYzA1NDI4NmVjZjIyNTRlNWRiZThm",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T01:31:05Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T14:54:21Z"
      },
      "message": "UI to alert of respend attempt affecting wallet.\n\nRespend transactions that conflict with transactions already in the\nwallet are added to it.  They are not displayed unless they also involve\nthe wallet, or get into a block.  If they do not involve the wallet,\nthey continue not to affect balance.\n\nTransactions that involve the wallet, and have conflicting non-equivalent\ntransactions, are highlighted in red.  When the conflict first occurs, a\nmodal dialog is thrown.\n\nCWallet::SyncMetaData is changed to sync only to equivalent transactions.\n\nWhen a conflict is added to the wallet, counter nConflictsReceived is\nincremented.  This acts like a change in active block height for the\npurpose of triggering UI updates.",
      "tree": {
        "sha": "dcbb99b8eb6dcce4c9ab8eae70f9a4923ca5f664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcbb99b8eb6dcce4c9ab8eae70f9a4923ca5f664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ada5a067c75f19a724cc054286ecf2254e5dbe8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5a067c75f19a724cc054286ecf2254e5dbe8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ada5a067c75f19a724cc054286ecf2254e5dbe8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5a067c75f19a724cc054286ecf2254e5dbe8f/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d640a3ceab4f4372c2a0f738c1286cfde4b41b50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d640a3ceab4f4372c2a0f738c1286cfde4b41b50"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 87,
      "deletions": 21
    },
    "files": [
      {
        "sha": "44e361e1e50bd793c7e9a500c79dd9c53bae49b8",
        "filename": "src/qt/guiconstants.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/guiconstants.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/guiconstants.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiconstants.h?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -23,6 +23,10 @@ static const int STATUSBAR_ICONSIZE = 16;\n #define COLOR_NEGATIVE QColor(255, 0, 0)\n /* Transaction list -- bare address (without label) */\n #define COLOR_BAREADDRESS QColor(140, 140, 140)\n+/* Transaction list -- has conflicting transactions */\n+#define COLOR_HASCONFLICTING Qt::white;\n+/* Transaction list -- has conflicting transactions - background */\n+#define COLOR_HASCONFLICTING_BG QColor(192, 0, 0)\n \n /* Tooltips longer than this (in characters) are converted into rich text,\n    so that they can be word-wrapped."
      },
      {
        "sha": "7293029787a692c0dbed518c80884c3514ee8e76",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -24,7 +24,7 @@ TransactionFilterProxy::TransactionFilterProxy(QObject *parent) :\n     typeFilter(ALL_TYPES),\n     minAmount(0),\n     limitRows(-1),\n-    showInactive(true)\n+    showInactive(false)\n {\n }\n \n@@ -39,7 +39,7 @@ bool TransactionFilterProxy::filterAcceptsRow(int sourceRow, const QModelIndex &\n     qint64 amount = llabs(index.data(TransactionTableModel::AmountRole).toLongLong());\n     int status = index.data(TransactionTableModel::StatusRole).toInt();\n \n-    if(!showInactive && status == TransactionStatus::Conflicted)\n+    if(!showInactive && status == TransactionStatus::Conflicted && type == TransactionRecord::Other)\n         return false;\n     if(!(TYPE(type) & typeFilter))\n         return false;"
      },
      {
        "sha": "21f1b7356f79b3e278ebea06d4efc1dfe80c149f",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 3,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -170,6 +170,8 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     status.depth = wtx.GetDepthInMainChain();\n     status.cur_num_blocks = chainActive.Height();\n \n+    status.hasConflicting = false;\n+\n     if (!IsFinalTx(wtx, chainActive.Height() + 1))\n     {\n         if (wtx.nLockTime < LOCKTIME_THRESHOLD)\n@@ -213,6 +215,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         if (status.depth < 0)\n         {\n             status.status = TransactionStatus::Conflicted;\n+            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (GetAdjustedTime() - wtx.nTimeReceived > 2 * 60 && wtx.GetRequestCount() == 0)\n         {\n@@ -221,6 +224,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n         else if (status.depth == 0)\n         {\n             status.status = TransactionStatus::Unconfirmed;\n+            status.hasConflicting = !(wtx.GetConflicts(false).empty());\n         }\n         else if (status.depth < RecommendedNumConfirmations)\n         {\n@@ -231,13 +235,13 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n             status.status = TransactionStatus::Confirmed;\n         }\n     }\n-\n }\n \n-bool TransactionRecord::statusUpdateNeeded()\n+bool TransactionRecord::statusUpdateNeeded(int64_t nConflictsReceived)\n {\n     AssertLockHeld(cs_main);\n-    return status.cur_num_blocks != chainActive.Height();\n+    return (status.cur_num_blocks != chainActive.Height() ||\n+            status.cur_num_conflicts != nConflictsReceived);\n }\n \n QString TransactionRecord::getTxID() const"
      },
      {
        "sha": "4c2847144a2bc1390c5bfadc735c8f7e163b0e93",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 11,
        "deletions": 2,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -20,7 +20,8 @@ class TransactionStatus\n public:\n     TransactionStatus():\n         countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Offline), depth(0), open_for(0), cur_num_blocks(-1)\n+        matures_in(0), status(Offline), hasConflicting(false), depth(0), open_for(0), cur_num_blocks(-1),\n+        cur_num_conflicts(-1)\n     { }\n \n     enum Status {\n@@ -51,6 +52,10 @@ class TransactionStatus\n     /** @name Reported status\n        @{*/\n     Status status;\n+\n+    // Has conflicting transactions spending same prevout\n+    bool hasConflicting;\n+\n     qint64 depth;\n     qint64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number\n                       of additional blocks that need to be mined before\n@@ -59,6 +64,10 @@ class TransactionStatus\n \n     /** Current number of blocks (to know whether cached status is still valid) */\n     int cur_num_blocks;\n+\n+    /** Number of conflicts received into wallet as of last status update */\n+    int64_t cur_num_conflicts;\n+\n };\n \n /** UI model for a transaction. A core transaction can be represented by multiple UI transactions if it has\n@@ -133,7 +142,7 @@ class TransactionRecord\n \n     /** Return whether a status update is needed.\n      */\n-    bool statusUpdateNeeded();\n+    bool statusUpdateNeeded(int64_t nConflictsReceived);\n };\n \n #endif // TRANSACTIONRECORD_H"
      },
      {
        "sha": "eb5c3abdbca55919ddcd13e92476d2c5362bda72",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 5,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -168,8 +168,7 @@ class TransactionTablePriv\n                 parent->endRemoveRows();\n                 break;\n             case CT_UPDATED:\n-                // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n-                // visible transactions.\n+                emit parent->dataChanged(parent->index(lowerIndex, parent->Status), parent->index(upperIndex-1, parent->Amount));\n                 break;\n             }\n         }\n@@ -190,20 +189,21 @@ class TransactionTablePriv\n             // stuck if the core is holding the locks for a longer time - for\n             // example, during a wallet rescan.\n             //\n-            // If a status update is needed (blocks came in since last check),\n-            //  update the status of this transaction from the wallet. Otherwise,\n+            // If a status update is needed (blocks or conflicts came in since last check),\n+            // update the status of this transaction from the wallet. Otherwise,\n             // simply re-use the cached status.\n             TRY_LOCK(cs_main, lockMain);\n             if(lockMain)\n             {\n                 TRY_LOCK(wallet->cs_wallet, lockWallet);\n-                if(lockWallet && rec->statusUpdateNeeded())\n+                if(lockWallet && rec->statusUpdateNeeded(wallet->nConflictsReceived))\n                 {\n                     std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(rec->hash);\n \n                     if(mi != wallet->mapWallet.end())\n                     {\n                         rec->updateStatus(mi->second);\n+                        rec->status.cur_num_conflicts = wallet->nConflictsReceived;\n                     }\n                 }\n             }\n@@ -363,6 +363,8 @@ QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n         return tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n         return tr(\"Mined\");\n+    case TransactionRecord::Other:\n+        return tr(\"Other\");\n     default:\n         return QString();\n     }\n@@ -535,7 +537,13 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n         return formatTooltip(rec);\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n+    case Qt::BackgroundColorRole:\n+    \tif (rec->status.hasConflicting)\n+            return COLOR_HASCONFLICTING_BG;\n+    \tbreak;\n     case Qt::ForegroundRole:\n+        if (rec->status.hasConflicting)\n+            return COLOR_HASCONFLICTING;\n         // Non-confirmed (but not immature) as transactions are grey\n         if(!rec->status.countsForBalance && rec->status.status != TransactionStatus::Immature)\n         {"
      },
      {
        "sha": "3d6f2ab9ba4eaa91f4f4f6e143b195b7621ebdb7",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -138,6 +138,14 @@ void WalletModel::checkBalanceChanged()\n \n void WalletModel::updateTransaction(const QString &hash, int status)\n {\n+\tif (status == CT_GOT_CONFLICT)\n+\t{\n+\t    emit message(tr(\"Conflict Received\"),\n+\t    \t         tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n+\t          \t\tCClientUIInterface::MSG_WARNING);\n+\t\treturn;\n+\t}\n+\n     if(transactionTableModel)\n         transactionTableModel->updateTransaction(hash, status);\n "
      },
      {
        "sha": "e9fcd91d41c060e609011a8c06e1153b1c9376e1",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -21,7 +21,8 @@ enum ChangeType\n {\n     CT_NEW,\n     CT_UPDATED,\n-    CT_DELETED\n+    CT_DELETED,\n+    CT_GOT_CONFLICT\n };\n \n /** Signals for UI communication. */"
      },
      {
        "sha": "79cc5ba3c96e288893964b6eb962bdf17ac3ea62",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 6,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -256,7 +256,7 @@ bool CWallet::SetMaxVersion(int nVersion)\n     return true;\n }\n \n-set<uint256> CWallet::GetConflicts(const uint256& txid) const\n+set<uint256> CWallet::GetConflicts(const uint256& txid, bool includeEquivalent) const\n {\n     set<uint256> result;\n     AssertLockHeld(cs_wallet);\n@@ -274,7 +274,8 @@ set<uint256> CWallet::GetConflicts(const uint256& txid) const\n             continue;  // No conflict if zero or one spends\n         range = mapTxSpends.equal_range(txin.prevout);\n         for (TxSpends::const_iterator it = range.first; it != range.second; ++it)\n-            result.insert(it->second);\n+            if (includeEquivalent || !wtx.IsEquivalentTo(mapWallet.at(it->second)))\n+                result.insert(it->second);\n     }\n     return result;\n }\n@@ -303,6 +304,7 @@ void CWallet::SyncMetaData(pair<TxSpends::iterator, TxSpends::iterator> range)\n         const uint256& hash = it->second;\n         CWalletTx* copyTo = &mapWallet[hash];\n         if (copyFrom == copyTo) continue;\n+        if (!copyFrom->IsEquivalentTo(*copyTo)) continue;\n         copyTo->mapValue = copyFrom->mapValue;\n         copyTo->vOrderForm = copyFrom->vOrderForm;\n         // fTimeReceivedIsTxTime not copied on purpose\n@@ -588,6 +590,20 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n         // Notify UI of new or updated transaction\n         NotifyTransactionChanged(this, hash, fInsertedNew ? CT_NEW : CT_UPDATED);\n \n+        // Notifications for existing transactions that now have conflicts with this one\n+        if (fInsertedNew)\n+        {\n+            BOOST_FOREACH(const uint256& conflictHash, wtxIn.GetConflicts(false))\n+            {\n+                CWalletTx& txConflict = mapWallet[conflictHash];\n+                NotifyTransactionChanged(this, conflictHash, CT_UPDATED); //Updates UI table\n+                if (IsFromMe(txConflict) || IsMine(txConflict))\n+                {\n+                    NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n+                }\n+            }\n+        }\n+\n         // notify an external script when a wallet transaction comes in or is updated\n         std::string strCmd = GetArg(\"-walletnotify\", \"\");\n \n@@ -610,7 +626,12 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n         AssertLockHeld(cs_wallet);\n         bool fExisted = mapWallet.count(tx.GetHash());\n         if (fExisted && !fUpdate) return false;\n-        if (fExisted || IsMine(tx) || IsFromMe(tx))\n+\n+        bool fIsConflicting = IsConflicting(tx);\n+        if (fIsConflicting)\n+        \tnConflictsReceived++;\n+\n+        if (fExisted || IsMine(tx) || IsFromMe(tx) || fIsConflicting)\n         {\n             CWalletTx wtx(this,tx);\n             // Get merkle branch if transaction was found in a block\n@@ -896,7 +917,7 @@ void CWallet::ReacceptWalletTransactions()\n \n         int nDepth = wtx.GetDepthInMainChain();\n \n-        if (!wtx.IsCoinBase() && nDepth < 0)\n+        if (!wtx.IsCoinBase() && nDepth < 0 && (IsMine(wtx) || IsFromMe(wtx)))\n         {\n             // Try to add to memory pool\n             LOCK(mempool.cs);\n@@ -916,13 +937,13 @@ void CWalletTx::RelayWalletTransaction()\n     }\n }\n \n-set<uint256> CWalletTx::GetConflicts() const\n+set<uint256> CWalletTx::GetConflicts(bool includeEquivalent) const\n {\n     set<uint256> result;\n     if (pwallet != NULL)\n     {\n         uint256 myHash = GetHash();\n-        result = pwallet->GetConflicts(myHash);\n+        result = pwallet->GetConflicts(myHash, includeEquivalent);\n         result.erase(myHash);\n     }\n     return result;"
      },
      {
        "sha": "1c2512d67819cbaa2d6f74473de359b50a6e650e",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ada5a067c75f19a724cc054286ecf2254e5dbe8f/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "patch": "@@ -141,6 +141,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     MasterKeyMap mapMasterKeys;\n     unsigned int nMasterKeyMaxID;\n \n+    // Increment to cause UI refresh, similar to new block\n+    int64_t nConflictsReceived;\n+\n     CWallet()\n     {\n         SetNull();\n@@ -163,6 +166,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         nNextResend = 0;\n         nLastResend = 0;\n         nTimeFirstKey = 0;\n+        nConflictsReceived = 0;\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n@@ -305,6 +309,13 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx) > 0);\n     }\n+    bool IsConflicting(const CTransaction& tx) const\n+    {\n+  \t    BOOST_FOREACH(const CTxIn& txin, tx.vin)\n+    \t    if (mapTxSpends.count(txin.prevout))\n+    \t        return true;\n+   \t    return false;\n+    }\n     int64_t GetDebit(const CTransaction& tx) const\n     {\n         int64_t nDebit = 0;\n@@ -377,7 +388,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int GetVersion() { LOCK(cs_wallet); return nWalletVersion; }\n \n     // Get wallet transactions that conflict with given transaction (spend same outputs)\n-    std::set<uint256> GetConflicts(const uint256& txid) const;\n+    std::set<uint256> GetConflicts(const uint256& txid, bool includeEquivalent) const;\n \n     /** Address book entry changed.\n      * @note called with lock cs_wallet held.\n@@ -699,7 +710,7 @@ class CWalletTx : public CMerkleTx\n \n     void RelayWalletTransaction();\n \n-    std::set<uint256> GetConflicts() const;\n+    std::set<uint256> GetConflicts(bool includeEquivalent=true) const;\n };\n \n "
      }
    ]
  },
  {
    "sha": "9004798e62e987ddf50030b17fa1881b63dd5e45",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDA0Nzk4ZTYyZTk4N2RkZjUwMDMwYjE3ZmExODgxYjYzZGQ1ZTQ1",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T01:31:40Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T14:54:21Z"
      },
      "message": "Add -respendnotify option and new RPC data\n\n-respendnotify=<cmd> Execute command when a network tx respends wallet\ntx input (%s=respend TxID, %t=wallet TxID)\n\nAdd respendsobserved array to gettransaction, listtransactions, and\nlistsinceblock RPCs.  This omits the malleated clones that are included\nin the walletconflicts array.\n\nAdd RPC help for respendsobserved and walletconflicts (help was missing\nfor the latter).",
      "tree": {
        "sha": "5434905c6482214d8dfd452843cae123a13a2087",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5434905c6482214d8dfd452843cae123a13a2087"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9004798e62e987ddf50030b17fa1881b63dd5e45",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9004798e62e987ddf50030b17fa1881b63dd5e45",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9004798e62e987ddf50030b17fa1881b63dd5e45",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9004798e62e987ddf50030b17fa1881b63dd5e45/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ada5a067c75f19a724cc054286ecf2254e5dbe8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ada5a067c75f19a724cc054286ecf2254e5dbe8f"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 34,
      "deletions": 0
    },
    "files": [
      {
        "sha": "25a423f9c425111e5d8ea61e48868f292c9a5594",
        "filename": "contrib/debian/manpages/bitcoin-qt.1",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9004798e62e987ddf50030b17fa1881b63dd5e45/contrib/debian/manpages/bitcoin-qt.1",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9004798e62e987ddf50030b17fa1881b63dd5e45/contrib/debian/manpages/bitcoin-qt.1",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/manpages/bitcoin-qt.1?ref=9004798e62e987ddf50030b17fa1881b63dd5e45",
        "patch": "@@ -139,6 +139,9 @@ Execute command when the best block changes (%s in cmd is replaced by block hash\n \\fB\\-walletnotify=\\fR<cmd>\n Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\n .TP\n+\\fB\\-respendnotify=\\fR<cmd>\n+Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\n+.TP\n \\fB\\-alertnotify=\\fR<cmd>\n Execute command when a relevant alert is received (%s in cmd is replaced by message)\n .TP"
      },
      {
        "sha": "3d0c03328f3508209baa9329c84efb386570de40",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9004798e62e987ddf50030b17fa1881b63dd5e45/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9004798e62e987ddf50030b17fa1881b63dd5e45/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=9004798e62e987ddf50030b17fa1881b63dd5e45",
        "patch": "@@ -260,6 +260,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n     strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + _(\"(default: wallet.dat)\") + \"\\n\";\n     strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n+    strUsage += \"  -respendnotify=<cmd>   \" + _(\"Execute command when a network tx respends wallet tx input (%s=respend TxID, %t=wallet TxID)\") + \"\\n\";\n     strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those part of the blockchain through -rescan on startup\") + \"\\n\";\n     strUsage += \"                         \" + _(\"(default: 1, 1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n #endif"
      },
      {
        "sha": "38e96133b4c9bc41c8b61ade737288757c69f30e",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9004798e62e987ddf50030b17fa1881b63dd5e45/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9004798e62e987ddf50030b17fa1881b63dd5e45/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=9004798e62e987ddf50030b17fa1881b63dd5e45",
        "patch": "@@ -58,6 +58,10 @@ void WalletTxToJSON(const CWalletTx& wtx, Object& entry)\n     BOOST_FOREACH(const uint256& conflict, wtx.GetConflicts())\n         conflicts.push_back(conflict.GetHex());\n     entry.push_back(Pair(\"walletconflicts\", conflicts));\n+    Array respends;\n+    BOOST_FOREACH(const uint256& respend, wtx.GetConflicts(false))\n+        respends.push_back(respend.GetHex());\n+    entry.push_back(Pair(\"respendsobserved\", respends));\n     entry.push_back(Pair(\"time\", wtx.GetTxTime()));\n     entry.push_back(Pair(\"timereceived\", (int64_t)wtx.nTimeReceived));\n     BOOST_FOREACH(const PAIRTYPE(string,string)& item, wtx.mapValue)\n@@ -1211,6 +1215,12 @@ Value listtransactions(const Array& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive'\\n\"\n             \"                                          category of transactions.\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\", (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"walletconflicts\\\" : [\\n\"\n+            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"respendsobserved\\\" : [\\n\"\n+            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (midnight Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (midnight Jan 1 1970 GMT). Available \\n\"\n             \"                                          for 'send' and 'receive' category of transactions.\\n\"\n@@ -1376,6 +1386,12 @@ Value listsinceblock(const Array& params, bool fHelp)\n             \"    \\\"blockindex\\\": n,          (numeric) The block index containing the transaction. Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"blocktime\\\": xxx,         (numeric) The block time in seconds since epoch (1 Jan 1970 GMT).\\n\"\n             \"    \\\"txid\\\": \\\"transactionid\\\",  (string) The transaction id. Available for 'send' and 'receive' category of transactions.\\n\"\n+            \"    \\\"walletconflicts\\\" : [\\n\"\n+            \"        \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"    ],\\n\"\n+            \"    \\\"respendsobserved\\\" : [\\n\"\n+            \"        \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"    ],\\n\"\n             \"    \\\"time\\\": xxx,              (numeric) The transaction time in seconds since epoch (Jan 1 1970 GMT).\\n\"\n             \"    \\\"timereceived\\\": xxx,      (numeric) The time received in seconds since epoch (Jan 1 1970 GMT). Available for 'send' and 'receive' category of transactions.\\n\"\n             \"    \\\"comment\\\": \\\"...\\\",       (string) If a comment is associated with the transaction.\\n\"\n@@ -1448,6 +1464,12 @@ Value gettransaction(const Array& params, bool fHelp)\n             \"  \\\"blockindex\\\" : xx,       (numeric) The block index\\n\"\n             \"  \\\"blocktime\\\" : ttt,       (numeric) The time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"txid\\\" : \\\"transactionid\\\",   (string) The transaction id.\\n\"\n+            \"  \\\"walletconflicts\\\" : [\\n\"\n+            \"      \\\"conflictid\\\",  (string) Ids of transactions, including equivalent clones, that re-spend a txid input.\\n\"\n+            \"  ],\\n\"\n+            \"  \\\"respendsobserved\\\" : [\\n\"\n+            \"      \\\"respendid\\\",  (string) Ids of transactions, NOT equivalent clones, that re-spend a txid input. \\\"Double-spends.\\\"\\n\"\n+            \"  ],\\n\"\n             \"  \\\"time\\\" : ttt,            (numeric) The transaction time in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"timereceived\\\" : ttt,    (numeric) The time received in seconds since epoch (1 Jan 1970 GMT)\\n\"\n             \"  \\\"details\\\" : [\\n\""
      },
      {
        "sha": "91910c6ea96aa7f65fa087c370aea4c885347cb0",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9004798e62e987ddf50030b17fa1881b63dd5e45/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9004798e62e987ddf50030b17fa1881b63dd5e45/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=9004798e62e987ddf50030b17fa1881b63dd5e45",
        "patch": "@@ -600,6 +600,14 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn, bool fFromLoadWallet)\n                 if (IsFromMe(txConflict) || IsMine(txConflict))\n                 {\n                     NotifyTransactionChanged(this, conflictHash, CT_GOT_CONFLICT);  //Throws dialog\n+                    // external respend notify\n+                    std::string strCmd = GetArg(\"-respendnotify\", \"\");\n+                    if (!strCmd.empty())\n+                    {\n+                        boost::replace_all(strCmd, \"%s\", wtxIn.GetHash().GetHex());\n+                        boost::replace_all(strCmd, \"%t\", conflictHash.GetHex());\n+                        boost::thread t(runCommand, strCmd); // thread runs free\n+                    }\n                 }\n             }\n         }"
      }
    ]
  },
  {
    "sha": "9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZmE1M2RkM2JkYzZmNjJiMTZhN2MyYjk3MDQ0OWM4YzM1ZjRjNDFi",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T14:49:27Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T15:07:14Z"
      },
      "message": "Add release notes entry",
      "tree": {
        "sha": "0eae6904c2b078d792053d7928d60b1d3beef9ca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0eae6904c2b078d792053d7928d60b1d3beef9ca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9004798e62e987ddf50030b17fa1881b63dd5e45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9004798e62e987ddf50030b17fa1881b63dd5e45",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9004798e62e987ddf50030b17fa1881b63dd5e45"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 46,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e68e12310ea6b724d42dc00ef3476955c780f8e6",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
        "patch": "@@ -19,3 +19,49 @@ estimate.\n Statistics used to estimate fees and priorities are saved in the\n data directory in the 'fee_estimates.dat' file just before\n program shutdown, and are read in at startup.\n+\n+Double-Spend Relay and Alerts\n+=============================\n+VERY IMPORTANT: *It has never been safe, and remains unsafe, to rely*\n+*on unconfirmed transactions.*\n+\n+Relay\n+-----\n+When an attempt is seen on the network to spend the same unspent funds\n+more than once, it is no longer ignored.  Instead, it is broadcast, to\n+serve as an alert.  This broadcast is subject to protections against\n+denial-of-service attacks.\n+\n+Wallets and other bitcoin services should alert their users to\n+double-spends that affect them.  Merchants and other users may have\n+enough time to withhold goods or services when payment becomes\n+uncertain, until confirmation.\n+\n+Bitcoin Core Wallet Alerts\n+--------------------------\n+The Bitcoin Core wallet now makes respend attempts visible in several\n+ways.\n+\n+If you are online, and a respend affecting one of your wallet\n+transactions is seen, a notification is immediately issued to the\n+command registered with `-respendnotify=<cmd>`.  Additionally, if\n+using the GUI:\n+ - An alert box is immediately displayed.\n+ - The affected wallet transaction is highlighted in red until it is\n+   confirmed (and it may never be confirmed).\n+\n+A `respendsobserved` array is added to `gettransaction`, `listtransactions`,\n+and `listsinceblock` RPC results.\n+\n+Warning\n+-------\n+*If you rely on an unconfirmed transaction, these change do VERY*\n+*LITTLE to protect you from a malicious double-spend, because:*\n+\n+ - You may learn about the respend too late to avoid doing whatever\n+   you were being paid for\n+ - Using other relay rules, a double-spender can craft his crime to\n+   resist broadcast\n+ - Miners can choose which conflicting spend to confirm, and some\n+   miners may not confirmg the first acceptable spend they see\n+"
      }
    ]
  },
  {
    "sha": "7a19efe04069d9a1e251cdc94b25184f76d9d901",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YTE5ZWZlMDQwNjlkOWExZTI1MWNkYzk0YjI1MTg0Zjc2ZDlkOTAx",
    "commit": {
      "author": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T23:47:33Z"
      },
      "committer": {
        "name": "Tom Harding",
        "email": "tomh@thinlink.com",
        "date": "2014-06-27T23:47:33Z"
      },
      "message": "Formatting, spelling, comment fixes.",
      "tree": {
        "sha": "9852770f0275fa00ce7510b8b77b745e611f9b3f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9852770f0275fa00ce7510b8b77b745e611f9b3f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7a19efe04069d9a1e251cdc94b25184f76d9d901",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a19efe04069d9a1e251cdc94b25184f76d9d901",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7a19efe04069d9a1e251cdc94b25184f76d9d901",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a19efe04069d9a1e251cdc94b25184f76d9d901/comments",
    "author": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "dgenr8",
      "id": 4284124,
      "node_id": "MDQ6VXNlcjQyODQxMjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4284124?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/dgenr8",
      "html_url": "https://github.com/dgenr8",
      "followers_url": "https://api.github.com/users/dgenr8/followers",
      "following_url": "https://api.github.com/users/dgenr8/following{/other_user}",
      "gists_url": "https://api.github.com/users/dgenr8/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/dgenr8/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/dgenr8/subscriptions",
      "organizations_url": "https://api.github.com/users/dgenr8/orgs",
      "repos_url": "https://api.github.com/users/dgenr8/repos",
      "events_url": "https://api.github.com/users/dgenr8/events{/privacy}",
      "received_events_url": "https://api.github.com/users/dgenr8/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9fa53dd3bdc6f62b16a7c2b970449c8c35f4c41b"
      }
    ],
    "stats": {
      "total": 41,
      "additions": 23,
      "deletions": 18
    },
    "files": [
      {
        "sha": "3a4079e437e8cb59b88cc1adbf138bc8c0339d36",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -63,5 +63,5 @@ Warning\n  - Using other relay rules, a double-spender can craft his crime to\n    resist broadcast\n  - Miners can choose which conflicting spend to confirm, and some\n-   miners may not confirmg the first acceptable spend they see\n+   miners may not confirm the first acceptable spend they see\n "
      },
      {
        "sha": "df810f575ffb7b3900c94fce2480d5080fcc6578",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -852,7 +852,6 @@ bool RateLimitExceeded(double& dCount, int64_t& nLastTime, int64_t nLimit, unsig\n \n     LOCK(csLimiter);\n \n-    // Use an exponentially decaying ~10-minute window:\n     dCount *= pow(1.0 - 1.0/600.0, (double)(nNow - nLastTime));\n     nLastTime = nNow;\n     if (dCount >= nLimit*10*1000)\n@@ -973,7 +972,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n             static int64_t nLastFreeTime;\n             static int64_t nFreeLimit = GetArg(\"-limitfreerelay\", 15);\n \n-        \tif (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n+            if (RateLimitExceeded(dFreeCount, nLastFreeTime, nFreeLimit, nSize))\n                 return state.DoS(0, error(\"AcceptToMemoryPool : free transaction rejected by rate limiter\"),\n                                  REJECT_INSUFFICIENTFEE, \"insufficient priority\");\n \n@@ -1000,8 +999,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n     return true;\n }\n \n-static void\n-RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n+static void RelayDoubleSpend(const COutPoint& outPoint, const CTransaction& doubleSpend, bool fInBlock, CBloomFilter& filter)\n {\n     // Relaying double-spend attempts to our peers lets them detect when\n     // somebody might be trying to cheat them. However, blindly relaying"
      },
      {
        "sha": "37679cebfaf75665bf2da8104f1efe30886ec304",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -19,10 +19,17 @@ class TransactionStatus\n {\n public:\n     TransactionStatus():\n-        countsForBalance(false), sortKey(\"\"),\n-        matures_in(0), status(Offline), hasConflicting(false), depth(0), open_for(0), cur_num_blocks(-1),\n+        countsForBalance(false),\n+        sortKey(\"\"),\n+        matures_in(0),\n+        status(Offline),\n+        hasConflicting(false),\n+        depth(0),\n+        open_for(0),\n+        cur_num_blocks(-1),\n         cur_num_conflicts(-1)\n-    { }\n+    {\n+    }\n \n     enum Status {\n         Confirmed,          /**< Have 6 or more confirmations (normal tx) or fully mature (mined tx) **/"
      },
      {
        "sha": "d7f4c043cfee8d8a465d1cada9f0ab50e6ca645d",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -538,9 +538,9 @@ QVariant TransactionTableModel::data(const QModelIndex &index, int role) const\n     case Qt::TextAlignmentRole:\n         return column_alignments[index.column()];\n     case Qt::BackgroundColorRole:\n-    \tif (rec->status.hasConflicting)\n+        if (rec->status.hasConflicting)\n             return COLOR_HASCONFLICTING_BG;\n-    \tbreak;\n+        break;\n     case Qt::ForegroundRole:\n         if (rec->status.hasConflicting)\n             return COLOR_HASCONFLICTING;"
      },
      {
        "sha": "defc815def6c91a869d680634fc8e1275e3f85c4",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -138,13 +138,13 @@ void WalletModel::checkBalanceChanged()\n \n void WalletModel::updateTransaction(const QString &hash, int status)\n {\n-\tif (status == CT_GOT_CONFLICT)\n-\t{\n-\t    emit message(tr(\"Conflict Received\"),\n-\t    \t         tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n-\t          \t\tCClientUIInterface::MSG_WARNING);\n-\t\treturn;\n-\t}\n+    if (status == CT_GOT_CONFLICT)\n+    {\n+        emit message(tr(\"Conflict Received\"),\n+                     tr(\"WARNING: Transaction may never be confirmed. Its input was seen being spent by another transaction on the network. Wait for confirmation!\"),\n+                     CClientUIInterface::MSG_WARNING);\n+        return;\n+    }\n \n     if(transactionTableModel)\n         transactionTableModel->updateTransaction(hash, status);"
      },
      {
        "sha": "daca7ac04b3d20b15c9aee4807c5ff1bee277d02",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7a19efe04069d9a1e251cdc94b25184f76d9d901/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=7a19efe04069d9a1e251cdc94b25184f76d9d901",
        "patch": "@@ -637,7 +637,7 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n \n         bool fIsConflicting = IsConflicting(tx);\n         if (fIsConflicting)\n-        \tnConflictsReceived++;\n+            nConflictsReceived++;\n \n         if (fExisted || IsMine(tx) || IsFromMe(tx) || fIsConflicting)\n         {"
      }
    ]
  }
]