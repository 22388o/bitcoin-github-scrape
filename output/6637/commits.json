[
  {
    "sha": "0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOTE3MzA2ZmRmMzliMTI1NTZiOTVmZTkxYmUyZTdiNDRkMzRiYjlm",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T14:59:04Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:36:50Z"
      },
      "message": "remove univalue, prepare for subtree",
      "tree": {
        "sha": "49e89d23481cb667edae981c01a12a35069d9990",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49e89d23481cb667edae981c01a12a35069d9990"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1119cc3f5918575ca397518c9fd31a64704c7e4f"
      }
    ],
    "stats": {
      "total": 1406,
      "additions": 0,
      "deletions": 1406
    },
    "files": [
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 77,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-//\n-// To re-create univalue_escapes.h:\n-// $ g++ -o gen gen.cpp\n-// $ ./gen > univalue_escapes.h\n-//\n-\n-#include <ctype.h>\n-#include <stdio.h>\n-#include <string.h>\n-#include \"univalue.h\"\n-\n-using namespace std;\n-\n-static bool initEscapes;\n-static const char *escapes[256];\n-\n-static void initJsonEscape()\n-{\n-    escapes[(int)'\"'] = \"\\\\\\\"\";\n-    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n-    escapes[(int)'\\b'] = \"\\\\b\";\n-    escapes[(int)'\\f'] = \"\\\\f\";\n-    escapes[(int)'\\n'] = \"\\\\n\";\n-    escapes[(int)'\\r'] = \"\\\\r\";\n-    escapes[(int)'\\t'] = \"\\\\t\";\n-\n-    initEscapes = true;\n-}\n-\n-static void outputEscape()\n-{\n-\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n-\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n-\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n-\t\t\"static const char *escapes[256] = {\\n\");\n-\n-\tfor (unsigned int i = 0; i < 256; i++) {\n-\t\tif (!escapes[i]) {\n-\t\t\tprintf(\"\\tNULL,\\n\");\n-\t\t} else {\n-\t\t\tprintf(\"\\t\\\"\");\n-\n-\t\t\tunsigned int si;\n-\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n-\t\t\t\tchar ch = escapes[i][si];\n-\t\t\t\tswitch (ch) {\n-\t\t\t\tcase '\"':\n-\t\t\t\t\tprintf(\"\\\\\\\"\");\n-\t\t\t\t\tbreak;\n-\t\t\t\tcase '\\\\':\n-\t\t\t\t\tprintf(\"\\\\\\\\\");\n-\t\t\t\t\tbreak;\n-\t\t\t\tdefault:\n-\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n-\t\t\t}\n-\n-\t\t\tprintf(\"\\\",\\n\");\n-\t\t}\n-\t}\n-\n-\tprintf(\t\"};\\n\"\n-\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n-}\n-\n-int main (int argc, char *argv[])\n-{\n-\tinitJsonEscape();\n-\toutputEscape();\n-\treturn 0;\n-}\n-"
      },
      {
        "sha": "1d49a2cfc9e65680535e43a07b9dfdfb4cbf244a",
        "filename": "src/univalue/univalue.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 303,
        "changes": 303,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,303 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <stdint.h>\n-#include <ctype.h>\n-#include <iomanip>\n-#include <sstream>\n-#include <stdexcept>      // std::runtime_error\n-\n-#include \"univalue.h\"\n-\n-#include \"utilstrencodings.h\" // ParseXX\n-\n-using namespace std;\n-\n-const UniValue NullUniValue;\n-\n-void UniValue::clear()\n-{\n-    typ = VNULL;\n-    val.clear();\n-    keys.clear();\n-    values.clear();\n-}\n-\n-bool UniValue::setNull()\n-{\n-    clear();\n-    return true;\n-}\n-\n-bool UniValue::setBool(bool val_)\n-{\n-    clear();\n-    typ = VBOOL;\n-    if (val_)\n-        val = \"1\";\n-    return true;\n-}\n-\n-static bool validNumStr(const string& s)\n-{\n-    string tokenVal;\n-    unsigned int consumed;\n-    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n-    return (tt == JTOK_NUMBER);\n-}\n-\n-bool UniValue::setNumStr(const string& val_)\n-{\n-    if (!validNumStr(val_))\n-        return false;\n-\n-    clear();\n-    typ = VNUM;\n-    val = val_;\n-    return true;\n-}\n-\n-bool UniValue::setInt(uint64_t val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << val;\n-\n-    return setNumStr(oss.str());\n-}\n-\n-bool UniValue::setInt(int64_t val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << val;\n-\n-    return setNumStr(oss.str());\n-}\n-\n-bool UniValue::setFloat(double val)\n-{\n-    string s;\n-    ostringstream oss;\n-\n-    oss << std::setprecision(16) << val;\n-\n-    bool ret = setNumStr(oss.str());\n-    typ = VNUM;\n-    return ret;\n-}\n-\n-bool UniValue::setStr(const string& val_)\n-{\n-    clear();\n-    typ = VSTR;\n-    val = val_;\n-    return true;\n-}\n-\n-bool UniValue::setArray()\n-{\n-    clear();\n-    typ = VARR;\n-    return true;\n-}\n-\n-bool UniValue::setObject()\n-{\n-    clear();\n-    typ = VOBJ;\n-    return true;\n-}\n-\n-bool UniValue::push_back(const UniValue& val)\n-{\n-    if (typ != VARR)\n-        return false;\n-\n-    values.push_back(val);\n-    return true;\n-}\n-\n-bool UniValue::push_backV(const std::vector<UniValue>& vec)\n-{\n-    if (typ != VARR)\n-        return false;\n-\n-    values.insert(values.end(), vec.begin(), vec.end());\n-\n-    return true;\n-}\n-\n-bool UniValue::pushKV(const std::string& key, const UniValue& val)\n-{\n-    if (typ != VOBJ)\n-        return false;\n-\n-    keys.push_back(key);\n-    values.push_back(val);\n-    return true;\n-}\n-\n-bool UniValue::pushKVs(const UniValue& obj)\n-{\n-    if (typ != VOBJ || obj.typ != VOBJ)\n-        return false;\n-\n-    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n-        keys.push_back(obj.keys[i]);\n-        values.push_back(obj.values[i]);\n-    }\n-\n-    return true;\n-}\n-\n-int UniValue::findKey(const std::string& key) const\n-{\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (keys[i] == key)\n-            return (int) i;\n-    }\n-\n-    return -1;\n-}\n-\n-bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n-{\n-    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n-         it != t.end(); it++) {\n-        int idx = findKey(it->first);\n-        if (idx < 0)\n-            return false;\n-\n-        if (values[idx].getType() != it->second)\n-            return false;\n-    }\n-\n-    return true;\n-}\n-\n-const UniValue& UniValue::operator[](const std::string& key) const\n-{\n-    if (typ != VOBJ)\n-        return NullUniValue;\n-\n-    int index = findKey(key);\n-    if (index < 0)\n-        return NullUniValue;\n-\n-    return values[index];\n-}\n-\n-const UniValue& UniValue::operator[](unsigned int index) const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        return NullUniValue;\n-    if (index >= values.size())\n-        return NullUniValue;\n-\n-    return values[index];\n-}\n-\n-const char *uvTypeName(UniValue::VType t)\n-{\n-    switch (t) {\n-    case UniValue::VNULL: return \"null\";\n-    case UniValue::VBOOL: return \"bool\";\n-    case UniValue::VOBJ: return \"object\";\n-    case UniValue::VARR: return \"array\";\n-    case UniValue::VSTR: return \"string\";\n-    case UniValue::VNUM: return \"number\";\n-    }\n-\n-    // not reached\n-    return NULL;\n-}\n-\n-const UniValue& find_value( const UniValue& obj, const std::string& name)\n-{\n-    for (unsigned int i = 0; i < obj.keys.size(); i++)\n-    {\n-        if( obj.keys[i] == name )\n-        {\n-            return obj.values[i];\n-        }\n-    }\n-\n-    return NullUniValue;\n-}\n-\n-std::vector<std::string> UniValue::getKeys() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return keys;\n-}\n-\n-std::vector<UniValue> UniValue::getValues() const\n-{\n-    if (typ != VOBJ && typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n-    return values;\n-}\n-\n-bool UniValue::get_bool() const\n-{\n-    if (typ != VBOOL)\n-        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n-    return getBool();\n-}\n-\n-std::string UniValue::get_str() const\n-{\n-    if (typ != VSTR)\n-        throw std::runtime_error(\"JSON value is not a string as expected\");\n-    return getValStr();\n-}\n-\n-int UniValue::get_int() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int32_t retval;\n-    if (!ParseInt32(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-int64_t UniValue::get_int64() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not an integer as expected\");\n-    int64_t retval;\n-    if (!ParseInt64(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON integer out of range\");\n-    return retval;\n-}\n-\n-double UniValue::get_real() const\n-{\n-    if (typ != VNUM)\n-        throw std::runtime_error(\"JSON value is not a number as expected\");\n-    double retval;\n-    if (!ParseDouble(getValStr(), &retval))\n-        throw std::runtime_error(\"JSON double out of range\");\n-    return retval;\n-}\n-\n-const UniValue& UniValue::get_obj() const\n-{\n-    if (typ != VOBJ)\n-        throw std::runtime_error(\"JSON value is not an object as expected\");\n-    return *this;\n-}\n-\n-const UniValue& UniValue::get_array() const\n-{\n-    if (typ != VARR)\n-        throw std::runtime_error(\"JSON value is not an array as expected\");\n-    return *this;\n-}\n-"
      },
      {
        "sha": "4742b56f3d566d50d7588b035f38fb886f762f2d",
        "filename": "src/univalue/univalue.h",
        "status": "removed",
        "additions": 0,
        "deletions": 248,
        "changes": 248,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue.h?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,248 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#ifndef BITCOIN_UNIVALUE_UNIVALUE_H\n-#define BITCOIN_UNIVALUE_UNIVALUE_H\n-\n-#include <stdint.h>\n-#include <string>\n-#include <vector>\n-#include <map>\n-#include <cassert>\n-\n-#include <sstream>        // .get_int64()\n-#include <utility>        // std::pair\n-\n-class UniValue {\n-public:\n-    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n-\n-    UniValue() { typ = VNULL; }\n-    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n-        typ = initialType;\n-        val = initialStr;\n-    }\n-    UniValue(uint64_t val_) {\n-        setInt(val_);\n-    }\n-    UniValue(int64_t val_) {\n-        setInt(val_);\n-    }\n-    UniValue(bool val_) {\n-        setBool(val_);\n-    }\n-    UniValue(int val_) {\n-        setInt(val_);\n-    }\n-    UniValue(double val_) {\n-        setFloat(val_);\n-    }\n-    UniValue(const std::string& val_) {\n-        setStr(val_);\n-    }\n-    UniValue(const char *val_) {\n-        std::string s(val_);\n-        setStr(s);\n-    }\n-    ~UniValue() {}\n-\n-    void clear();\n-\n-    bool setNull();\n-    bool setBool(bool val);\n-    bool setNumStr(const std::string& val);\n-    bool setInt(uint64_t val);\n-    bool setInt(int64_t val);\n-    bool setInt(int val) { return setInt((int64_t)val); }\n-    bool setFloat(double val);\n-    bool setStr(const std::string& val);\n-    bool setArray();\n-    bool setObject();\n-\n-    enum VType getType() const { return typ; }\n-    const std::string& getValStr() const { return val; }\n-    bool empty() const { return (values.size() == 0); }\n-\n-    size_t size() const { return values.size(); }\n-\n-    bool getBool() const { return isTrue(); }\n-    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n-    const UniValue& operator[](const std::string& key) const;\n-    const UniValue& operator[](unsigned int index) const;\n-    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n-\n-    bool isNull() const { return (typ == VNULL); }\n-    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n-    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n-    bool isBool() const { return (typ == VBOOL); }\n-    bool isStr() const { return (typ == VSTR); }\n-    bool isNum() const { return (typ == VNUM); }\n-    bool isArray() const { return (typ == VARR); }\n-    bool isObject() const { return (typ == VOBJ); }\n-\n-    bool push_back(const UniValue& val);\n-    bool push_back(const std::string& val_) {\n-        UniValue tmpVal(VSTR, val_);\n-        return push_back(tmpVal);\n-    }\n-    bool push_back(const char *val_) {\n-        std::string s(val_);\n-        return push_back(s);\n-    }\n-    bool push_backV(const std::vector<UniValue>& vec);\n-\n-    bool pushKV(const std::string& key, const UniValue& val);\n-    bool pushKV(const std::string& key, const std::string& val) {\n-        UniValue tmpVal(VSTR, val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, const char *val_) {\n-        std::string val(val_);\n-        return pushKV(key, val);\n-    }\n-    bool pushKV(const std::string& key, int64_t val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, uint64_t val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, int val) {\n-        UniValue tmpVal((int64_t)val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKV(const std::string& key, double val) {\n-        UniValue tmpVal(val);\n-        return pushKV(key, tmpVal);\n-    }\n-    bool pushKVs(const UniValue& obj);\n-\n-    std::string write(unsigned int prettyIndent = 0,\n-                      unsigned int indentLevel = 0) const;\n-\n-    bool read(const char *raw);\n-    bool read(const std::string& rawStr) {\n-        return read(rawStr.c_str());\n-    }\n-\n-private:\n-    UniValue::VType typ;\n-    std::string val;                       // numbers are stored as C++ strings\n-    std::vector<std::string> keys;\n-    std::vector<UniValue> values;\n-\n-    int findKey(const std::string& key) const;\n-    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n-    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n-\n-public:\n-    // Strict type-specific getters, these throw std::runtime_error if the\n-    // value is of unexpected type\n-    std::vector<std::string> getKeys() const;\n-    std::vector<UniValue> getValues() const;\n-    bool get_bool() const;\n-    std::string get_str() const;\n-    int get_int() const;\n-    int64_t get_int64() const;\n-    double get_real() const;\n-    const UniValue& get_obj() const;\n-    const UniValue& get_array() const;\n-\n-    enum VType type() const { return getType(); }\n-    bool push_back(std::pair<std::string,UniValue> pear) {\n-        return pushKV(pear.first, pear.second);\n-    }\n-    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n-};\n-\n-//\n-// The following were added for compatibility with json_spirit.\n-// Most duplicate other methods, and should be removed.\n-//\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(cVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(strVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(u64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(i64Val);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(iVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n-{\n-    std::string key(cKey);\n-    UniValue uVal(dVal);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n-{\n-    std::string key(cKey);\n-    return std::make_pair(key, uVal);\n-}\n-\n-static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n-{\n-    return std::make_pair(key, uVal);\n-}\n-\n-enum jtokentype {\n-    JTOK_ERR        = -1,\n-    JTOK_NONE       = 0,                           // eof\n-    JTOK_OBJ_OPEN,\n-    JTOK_OBJ_CLOSE,\n-    JTOK_ARR_OPEN,\n-    JTOK_ARR_CLOSE,\n-    JTOK_COLON,\n-    JTOK_COMMA,\n-    JTOK_KW_NULL,\n-    JTOK_KW_TRUE,\n-    JTOK_KW_FALSE,\n-    JTOK_NUMBER,\n-    JTOK_STRING,\n-};\n-\n-extern enum jtokentype getJsonToken(std::string& tokenVal,\n-                                    unsigned int& consumed, const char *raw);\n-extern const char *uvTypeName(UniValue::VType t);\n-\n-extern const UniValue NullUniValue;\n-\n-const UniValue& find_value( const UniValue& obj, const std::string& name);\n-\n-#endif // BITCOIN_UNIVALUE_UNIVALUE_H"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/univalue_escapes.h",
        "status": "removed",
        "additions": 0,
        "deletions": 262,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_escapes.h?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,262 +0,0 @@\n-// Automatically generated file. Do not modify.\n-#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n-#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n-static const char *escapes[256] = {\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\b\",\n-\t\"\\\\t\",\n-\t\"\\\\n\",\n-\tNULL,\n-\t\"\\\\f\",\n-\t\"\\\\r\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\\\\"\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\t\"\\\\\\\\\",\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-\tNULL,\n-};\n-#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/univalue_read.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 389,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_read.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,389 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <string.h>\n-#include <vector>\n-#include <stdio.h>\n-#include \"univalue.h\"\n-\n-using namespace std;\n-\n-// convert hexadecimal string to unsigned integer\n-static const char *hatoui(const char *first, const char *last,\n-                          unsigned int& out)\n-{\n-    unsigned int result = 0;\n-    for (; first != last; ++first)\n-    {\n-        int digit;\n-        if (isdigit(*first))\n-            digit = *first - '0';\n-\n-        else if (*first >= 'a' && *first <= 'f')\n-            digit = *first - 'a' + 10;\n-\n-        else if (*first >= 'A' && *first <= 'F')\n-            digit = *first - 'A' + 10;\n-\n-        else\n-            break;\n-\n-        result = 16 * result + digit;\n-    }\n-    out = result;\n-\n-    return first;\n-}\n-\n-enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n-                            const char *raw)\n-{\n-    tokenVal.clear();\n-    consumed = 0;\n-\n-    const char *rawStart = raw;\n-\n-    while ((*raw) && (isspace(*raw)))             // skip whitespace\n-        raw++;\n-\n-    switch (*raw) {\n-\n-    case 0:\n-        return JTOK_NONE;\n-\n-    case '{':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_OBJ_OPEN;\n-    case '}':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_OBJ_CLOSE;\n-    case '[':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_ARR_OPEN;\n-    case ']':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_ARR_CLOSE;\n-\n-    case ':':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_COLON;\n-    case ',':\n-        raw++;\n-        consumed = (raw - rawStart);\n-        return JTOK_COMMA;\n-\n-    case 'n':\n-    case 't':\n-    case 'f':\n-        if (!strncmp(raw, \"null\", 4)) {\n-            raw += 4;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_NULL;\n-        } else if (!strncmp(raw, \"true\", 4)) {\n-            raw += 4;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_TRUE;\n-        } else if (!strncmp(raw, \"false\", 5)) {\n-            raw += 5;\n-            consumed = (raw - rawStart);\n-            return JTOK_KW_FALSE;\n-        } else\n-            return JTOK_ERR;\n-\n-    case '-':\n-    case '0':\n-    case '1':\n-    case '2':\n-    case '3':\n-    case '4':\n-    case '5':\n-    case '6':\n-    case '7':\n-    case '8':\n-    case '9': {\n-        // part 1: int\n-        string numStr;\n-\n-        const char *first = raw;\n-\n-        const char *firstDigit = first;\n-        if (!isdigit(*firstDigit))\n-            firstDigit++;\n-        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n-            return JTOK_ERR;\n-\n-        numStr += *raw;                       // copy first char\n-        raw++;\n-\n-        if ((*first == '-') && (!isdigit(*raw)))\n-            return JTOK_ERR;\n-\n-        while ((*raw) && isdigit(*raw)) {     // copy digits\n-            numStr += *raw;\n-            raw++;\n-        }\n-\n-        // part 2: frac\n-        if (*raw == '.') {\n-            numStr += *raw;                   // copy .\n-            raw++;\n-\n-            if (!isdigit(*raw))\n-                return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n-                numStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        // part 3: exp\n-        if (*raw == 'e' || *raw == 'E') {\n-            numStr += *raw;                   // copy E\n-            raw++;\n-\n-            if (*raw == '-' || *raw == '+') { // copy +/-\n-                numStr += *raw;\n-                raw++;\n-            }\n-\n-            if (!isdigit(*raw))\n-                return JTOK_ERR;\n-            while ((*raw) && isdigit(*raw)) { // copy digits\n-                numStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        tokenVal = numStr;\n-        consumed = (raw - rawStart);\n-        return JTOK_NUMBER;\n-        }\n-\n-    case '\"': {\n-        raw++;                                // skip \"\n-\n-        string valStr;\n-\n-        while (*raw) {\n-            if (*raw < 0x20)\n-                return JTOK_ERR;\n-\n-            else if (*raw == '\\\\') {\n-                raw++;                        // skip backslash\n-\n-                switch (*raw) {\n-                case '\"':  valStr += \"\\\"\"; break;\n-                case '\\\\': valStr += \"\\\\\"; break;\n-                case '/':  valStr += \"/\"; break;\n-                case 'b':  valStr += \"\\b\"; break;\n-                case 'f':  valStr += \"\\f\"; break;\n-                case 'n':  valStr += \"\\n\"; break;\n-                case 'r':  valStr += \"\\r\"; break;\n-                case 't':  valStr += \"\\t\"; break;\n-\n-                case 'u': {\n-                    unsigned int codepoint;\n-                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n-                               raw + 1 + 4)\n-                        return JTOK_ERR;\n-\n-                    if (codepoint <= 0x7f)\n-                        valStr.push_back((char)codepoint);\n-                    else if (codepoint <= 0x7FF) {\n-                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    } else if (codepoint <= 0xFFFF) {\n-                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n-                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    }\n-\n-                    raw += 4;\n-                    break;\n-                    }\n-                default:\n-                    return JTOK_ERR;\n-\n-                }\n-\n-                raw++;                        // skip esc'd char\n-            }\n-\n-            else if (*raw == '\"') {\n-                raw++;                        // skip \"\n-                break;                        // stop scanning\n-            }\n-\n-            else {\n-                valStr += *raw;\n-                raw++;\n-            }\n-        }\n-\n-        tokenVal = valStr;\n-        consumed = (raw - rawStart);\n-        return JTOK_STRING;\n-        }\n-\n-    default:\n-        return JTOK_ERR;\n-    }\n-}\n-\n-bool UniValue::read(const char *raw)\n-{\n-    clear();\n-\n-    bool expectName = false;\n-    bool expectColon = false;\n-    vector<UniValue*> stack;\n-\n-    string tokenVal;\n-    unsigned int consumed;\n-    enum jtokentype tok = JTOK_NONE;\n-    enum jtokentype last_tok = JTOK_NONE;\n-    do {\n-        last_tok = tok;\n-\n-        tok = getJsonToken(tokenVal, consumed, raw);\n-        if (tok == JTOK_NONE || tok == JTOK_ERR)\n-            return false;\n-        raw += consumed;\n-\n-        switch (tok) {\n-\n-        case JTOK_OBJ_OPEN:\n-        case JTOK_ARR_OPEN: {\n-            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n-            if (!stack.size()) {\n-                if (utyp == VOBJ)\n-                    setObject();\n-                else\n-                    setArray();\n-                stack.push_back(this);\n-            } else {\n-                UniValue tmpVal(utyp);\n-                UniValue *top = stack.back();\n-                top->values.push_back(tmpVal);\n-\n-                UniValue *newTop = &(top->values.back());\n-                stack.push_back(newTop);\n-            }\n-\n-            if (utyp == VOBJ)\n-                expectName = true;\n-            break;\n-            }\n-\n-        case JTOK_OBJ_CLOSE:\n-        case JTOK_ARR_CLOSE: {\n-            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n-                return false;\n-\n-            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n-            UniValue *top = stack.back();\n-            if (utyp != top->getType())\n-                return false;\n-\n-            stack.pop_back();\n-            expectName = false;\n-            break;\n-            }\n-\n-        case JTOK_COLON: {\n-            if (!stack.size() || expectName || !expectColon)\n-                return false;\n-\n-            UniValue *top = stack.back();\n-            if (top->getType() != VOBJ)\n-                return false;\n-\n-            expectColon = false;\n-            break;\n-            }\n-\n-        case JTOK_COMMA: {\n-            if (!stack.size() || expectName || expectColon ||\n-                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n-                return false;\n-\n-            UniValue *top = stack.back();\n-            if (top->getType() == VOBJ)\n-                expectName = true;\n-            break;\n-            }\n-\n-        case JTOK_KW_NULL:\n-        case JTOK_KW_TRUE:\n-        case JTOK_KW_FALSE: {\n-            if (!stack.size() || expectName || expectColon)\n-                return false;\n-\n-            UniValue tmpVal;\n-            switch (tok) {\n-            case JTOK_KW_NULL:\n-                // do nothing more\n-                break;\n-            case JTOK_KW_TRUE:\n-                tmpVal.setBool(true);\n-                break;\n-            case JTOK_KW_FALSE:\n-                tmpVal.setBool(false);\n-                break;\n-            default: /* impossible */ break;\n-            }\n-\n-            UniValue *top = stack.back();\n-            top->values.push_back(tmpVal);\n-\n-            break;\n-            }\n-\n-        case JTOK_NUMBER: {\n-            if (!stack.size() || expectName || expectColon)\n-                return false;\n-\n-            UniValue tmpVal(VNUM, tokenVal);\n-            UniValue *top = stack.back();\n-            top->values.push_back(tmpVal);\n-\n-            break;\n-            }\n-\n-        case JTOK_STRING: {\n-            if (!stack.size())\n-                return false;\n-\n-            UniValue *top = stack.back();\n-\n-            if (expectName) {\n-                top->keys.push_back(tokenVal);\n-                expectName = false;\n-                expectColon = true;\n-            } else {\n-                UniValue tmpVal(VSTR, tokenVal);\n-                top->values.push_back(tmpVal);\n-            }\n-\n-            break;\n-            }\n-\n-        default:\n-            return false;\n-        }\n-    } while (!stack.empty ());\n-\n-    /* Check that nothing follows the initial construct (parsed above).  */\n-    tok = getJsonToken(tokenVal, consumed, raw);\n-    if (tok != JTOK_NONE)\n-        return false;\n-\n-    return true;\n-}\n-"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/univalue_write.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 127,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1119cc3f5918575ca397518c9fd31a64704c7e4f/src/univalue/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/univalue_write.cpp?ref=1119cc3f5918575ca397518c9fd31a64704c7e4f",
        "patch": "@@ -1,127 +0,0 @@\n-// Copyright 2014 BitPay Inc.\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#include <ctype.h>\n-#include <iomanip>\n-#include <sstream>\n-#include <stdio.h>\n-#include \"univalue.h\"\n-#include \"univalue_escapes.h\"\n-\n-// TODO: Using UTF8\n-\n-using namespace std;\n-\n-static string json_escape(const string& inS)\n-{\n-    string outS;\n-    outS.reserve(inS.size() * 2);\n-\n-    for (unsigned int i = 0; i < inS.size(); i++) {\n-        unsigned char ch = inS[i];\n-        const char *escStr = escapes[ch];\n-\n-        if (escStr)\n-            outS += escStr;\n-\n-        else if (isprint(ch))\n-            outS += ch;\n-\n-        else {\n-            char tmpesc[16];\n-            sprintf(tmpesc, \"\\\\u%04x\", ch);\n-            outS += tmpesc;\n-        }\n-    }\n-\n-    return outS;\n-}\n-\n-string UniValue::write(unsigned int prettyIndent,\n-                       unsigned int indentLevel) const\n-{\n-    string s;\n-    s.reserve(1024);\n-\n-    unsigned int modIndent = indentLevel;\n-    if (modIndent == 0)\n-        modIndent = 1;\n-\n-    switch (typ) {\n-    case VNULL:\n-        s += \"null\";\n-        break;\n-    case VOBJ:\n-        writeObject(prettyIndent, modIndent, s);\n-        break;\n-    case VARR:\n-        writeArray(prettyIndent, modIndent, s);\n-        break;\n-    case VSTR:\n-        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n-        break;\n-    case VNUM:\n-        s += val;\n-        break;\n-    case VBOOL:\n-        s += (val == \"1\" ? \"true\" : \"false\");\n-        break;\n-    }\n-\n-    return s;\n-}\n-\n-static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n-{\n-    s.append(prettyIndent * indentLevel, ' ');\n-}\n-\n-void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n-{\n-    s += \"[\";\n-    if (prettyIndent)\n-        s += \"\\n\";\n-\n-    for (unsigned int i = 0; i < values.size(); i++) {\n-        if (prettyIndent)\n-            indentStr(prettyIndent, indentLevel, s);\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n-        if (i != (values.size() - 1)) {\n-            s += \",\";\n-            if (prettyIndent)\n-                s += \" \";\n-        }\n-        if (prettyIndent)\n-            s += \"\\n\";\n-    }\n-\n-    if (prettyIndent)\n-        indentStr(prettyIndent, indentLevel - 1, s);\n-    s += \"]\";\n-}\n-\n-void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n-{\n-    s += \"{\";\n-    if (prettyIndent)\n-        s += \"\\n\";\n-\n-    for (unsigned int i = 0; i < keys.size(); i++) {\n-        if (prettyIndent)\n-            indentStr(prettyIndent, indentLevel, s);\n-        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n-        if (prettyIndent)\n-            s += \" \";\n-        s += values[i].write(prettyIndent, indentLevel + 1);\n-        if (i != (values.size() - 1))\n-            s += \",\";\n-        if (prettyIndent)\n-            s += \"\\n\";\n-    }\n-\n-    if (prettyIndent)\n-        indentStr(prettyIndent, indentLevel - 1, s);\n-    s += \"}\";\n-}\n-"
      }
    ]
  },
  {
    "sha": "2f9f082b5ef3c495c70598ef23383effef675f9a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZjlmMDgyYjVlZjNjNDk1YzcwNTk4ZWYyMzM4M2VmZmVmNjc1Zjlh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "message": "Squashed 'src/univalue/' content from commit 87d9045\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: 87d90455ff5e87dedc304353aa23ace47ffb6c1c",
      "tree": {
        "sha": "977f901119038f0ce1351b1d0c78bdfe21f7d354",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/977f901119038f0ce1351b1d0c78bdfe21f7d354"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9f082b5ef3c495c70598ef23383effef675f9a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [],
    "stats": {
      "total": 1994,
      "additions": 1994,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca9e8423481f8c6d5574c6088746fd9ed2dc21f5",
        "filename": ".gitignore",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,22 @@\n+.deps/\n+INSTALL\n+Makefile\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+compile\n+config.log\n+config.status\n+config.guess\n+config.sub\n+configure\n+depcomp\n+install-sh\n+missing\n+stamp-h1\n+univalue-config.h*\n+test-driver\n+libtool\n+ltmain.sh\n+\n+*.o"
      },
      {
        "sha": "af632c78d9c3d2eb1342469180e5dc1db7fcb807",
        "filename": ".travis.yml",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,52 @@\n+\n+language: cpp\n+\n+compiler:\n+  - clang\n+  - gcc\n+\n+os:\n+  - linux\n+  - osx\n+\n+sudo: false\n+\n+env:\n+  global:\n+    - MAKEJOBS=-j3\n+    - RUN_TESTS=true\n+    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+\n+cache:\n+  apt: true\n+\n+addons:\n+  apt:\n+    packages:\n+      - pkg-config\n+\n+before_script:\n+  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n+  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n+\n+script:\n+  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n+  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n+  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n+  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+\n+matrix:\n+  fast_finish: true\n+  include:\n+    - os: linux\n+      compiler: gcc\n+      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n+      addons:\n+        apt:\n+          packages:\n+            - g++-mingw-w64-x86-64\n+            - gcc-mingw-w64-x86-64\n+            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "1fb429f3569c7f8a8e57e69bfb984ab905bccf15",
        "filename": "COPYING",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/COPYING?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,19 @@\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+"
      },
      {
        "sha": "2800f466dc55bfbc94f20d4ededd7f5ac92a1d15",
        "filename": "Makefile.am",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,84 @@\n+ACLOCAL_AMFLAGS = -I build-aux/m4\n+.PHONY: gen\n+.INTERMEDIATE: $(GENBIN)\n+\n+include_HEADERS = include/univalue.h\n+noinst_HEADERS = lib/univalue_escapes.h\n+\n+lib_LTLIBRARIES = lib/libunivalue.la\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = pc/libunivalue.pc\n+\n+lib_libunivalue_la_SOURCES = \\\n+\tlib/univalue.cpp \\\n+\tlib/univalue_read.cpp \\\n+\tlib/univalue_write.cpp\n+\n+lib_libunivalue_la_LDFLAGS = \\\n+\t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n+\t-no-undefined\n+lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+\n+TESTS = test/unitester\n+\n+GENBIN = gen/gen$(BUILD_EXEEXT)\n+GEN_SRCS = gen/gen.cpp\n+\n+$(GENBIN): $(GEN_SRCS)\n+\t@echo Building $@\n+\t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n+\n+gen: lib/univalue_escapes.h $(GENBIN)\n+\t@echo Updating $<\n+\t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n+\n+noinst_PROGRAMS = $(TESTS)\n+\n+TEST_DATA_DIR=test\n+\n+test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+TEST_FILES = \\\n+\t$(TEST_DATA_DIR)/fail10.json \\\n+\t$(TEST_DATA_DIR)/fail11.json \\\n+\t$(TEST_DATA_DIR)/fail12.json \\\n+\t$(TEST_DATA_DIR)/fail13.json \\\n+\t$(TEST_DATA_DIR)/fail14.json \\\n+\t$(TEST_DATA_DIR)/fail15.json \\\n+\t$(TEST_DATA_DIR)/fail16.json \\\n+\t$(TEST_DATA_DIR)/fail17.json \\\n+\t$(TEST_DATA_DIR)/fail18.json \\\n+\t$(TEST_DATA_DIR)/fail19.json \\\n+\t$(TEST_DATA_DIR)/fail1.json \\\n+\t$(TEST_DATA_DIR)/fail20.json \\\n+\t$(TEST_DATA_DIR)/fail21.json \\\n+\t$(TEST_DATA_DIR)/fail22.json \\\n+\t$(TEST_DATA_DIR)/fail23.json \\\n+\t$(TEST_DATA_DIR)/fail24.json \\\n+\t$(TEST_DATA_DIR)/fail25.json \\\n+\t$(TEST_DATA_DIR)/fail26.json \\\n+\t$(TEST_DATA_DIR)/fail27.json \\\n+\t$(TEST_DATA_DIR)/fail28.json \\\n+\t$(TEST_DATA_DIR)/fail29.json \\\n+\t$(TEST_DATA_DIR)/fail2.json \\\n+\t$(TEST_DATA_DIR)/fail30.json \\\n+\t$(TEST_DATA_DIR)/fail31.json \\\n+\t$(TEST_DATA_DIR)/fail32.json \\\n+\t$(TEST_DATA_DIR)/fail33.json \\\n+\t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail3.json \\\n+\t$(TEST_DATA_DIR)/fail4.json \\\n+\t$(TEST_DATA_DIR)/fail5.json \\\n+\t$(TEST_DATA_DIR)/fail6.json \\\n+\t$(TEST_DATA_DIR)/fail7.json \\\n+\t$(TEST_DATA_DIR)/fail8.json \\\n+\t$(TEST_DATA_DIR)/fail9.json \\\n+\t$(TEST_DATA_DIR)/pass1.json \\\n+\t$(TEST_DATA_DIR)/pass2.json \\\n+\t$(TEST_DATA_DIR)/pass3.json\n+\n+EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "README",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/README?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,7 @@\n+\n+\t\tUniValue\n+\n+A universal value object, with JSON encoding (output) and decoding (input).\n+\n+Built as a single dynamic RAII C++ object class, and no templates.\n+"
      },
      {
        "sha": "5530048e923e51909251e7e32f7023f1fc749999",
        "filename": "TODO",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/TODO",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/TODO",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/TODO?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+\n+Rearrange tree for easier 'git subtree' style use\n+\n+Move towards C++11 etc.\n+\n+Namespace support - must come up with useful shorthand, avoiding\n+long Univalue::Univalue::Univalue usages forced upon library users.\n+\n+Improve test suite\n+"
      },
      {
        "sha": "4b38721faad09b9339107bb375d2d31fdbde9d4a",
        "filename": "autogen.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/autogen.sh?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+set -e\n+srcdir=\"$(dirname $0)\"\n+cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n+fi\n+autoreconf --install --force"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "build-aux/m4/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/.empty?ref=2f9f082b5ef3c495c70598ef23383effef675f9a"
      },
      {
        "sha": "6cd951622925afac13d0820b2c25b4f8cac7ff1e",
        "filename": "configure.ac",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,69 @@\n+m4_define([libunivalue_major_version], [1])\n+m4_define([libunivalue_minor_version], [1])\n+m4_define([libunivalue_micro_version], [1])\n+m4_define([libunivalue_interface_age], [1])\n+# If you need a modifier for the version number. \n+# Normally empty, but can be used to make \"fixup\" releases.\n+m4_define([libunivalue_extraversion], [])\n+\n+dnl libtool versioning from libunivalue\n+m4_define([libunivalue_current], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version - libunivalue_interface_age)])\n+m4_define([libunivalue_binary_age], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version)])\n+m4_define([libunivalue_revision], [libunivalue_interface_age])\n+m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_interface_age)])\n+m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n+\n+\n+AC_INIT([univalue], [1.0.0],\n+        [http://github.com/jgarzik/univalue/])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PREREQ(2.60)\n+AC_CONFIG_SRCDIR([lib/univalue.cpp])\n+AC_CONFIG_AUX_DIR([build-aux])\n+AC_CONFIG_MACRO_DIR([build-aux/m4])\n+AC_CONFIG_HEADERS([univalue-config.h])\n+AM_INIT_AUTOMAKE([subdir-objects foreign])\n+\n+LIBUNIVALUE_MAJOR_VERSION=libunivalue_major_version\n+LIBUNIVALUE_MINOR_VERSION=libunivalue_minor_version\n+LIBUNIVALUE_MICRO_VERSION=libunivalue_micro_version\n+LIBUNIVALUE_INTERFACE_AGE=libunivalue_interface_age\n+\n+# ABI version\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+LIBUNIVALUE_CURRENT=libunivalue_current\n+LIBUNIVALUE_REVISION=libunivalue_revision\n+LIBUNIVALUE_AGE=libunivalue_age\n+\n+AC_SUBST(LIBUNIVALUE_CURRENT)\n+AC_SUBST(LIBUNIVALUE_REVISION)\n+AC_SUBST(LIBUNIVALUE_AGE)\n+\n+LT_INIT\n+LT_LANG([C++])\n+\n+case $host in\n+  *mingw*)\n+    LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"\n+  ;;\n+esac\n+\n+BUILD_EXEEXT=\n+case $build in\n+  *mingw*)\n+    BUILD_EXEEXT=\".exe\"\n+  ;;\n+esac\n+\n+AC_CONFIG_FILES([\n+    Makefile\n+    pc/libunivalue.pc\n+    pc/libunivalue-uninstalled.pc])\n+\n+AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(BUILD_EXEEXT)\n+AC_OUTPUT\n+"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "gen/gen.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/gen/gen.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+//\n+// To re-create univalue_escapes.h:\n+// $ g++ -o gen gen.cpp\n+// $ ./gen > univalue_escapes.h\n+//\n+\n+#include <ctype.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+static bool initEscapes;\n+static const char *escapes[256];\n+\n+static void initJsonEscape()\n+{\n+    escapes[(int)'\"'] = \"\\\\\\\"\";\n+    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n+    escapes[(int)'\\b'] = \"\\\\b\";\n+    escapes[(int)'\\f'] = \"\\\\f\";\n+    escapes[(int)'\\n'] = \"\\\\n\";\n+    escapes[(int)'\\r'] = \"\\\\r\";\n+    escapes[(int)'\\t'] = \"\\\\t\";\n+\n+    initEscapes = true;\n+}\n+\n+static void outputEscape()\n+{\n+\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n+\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"static const char *escapes[256] = {\\n\");\n+\n+\tfor (unsigned int i = 0; i < 256; i++) {\n+\t\tif (!escapes[i]) {\n+\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t} else {\n+\t\t\tprintf(\"\\t\\\"\");\n+\n+\t\t\tunsigned int si;\n+\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n+\t\t\t\tchar ch = escapes[i][si];\n+\t\t\t\tswitch (ch) {\n+\t\t\t\tcase '\"':\n+\t\t\t\t\tprintf(\"\\\\\\\"\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase '\\\\':\n+\t\t\t\t\tprintf(\"\\\\\\\\\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprintf(\"\\\",\\n\");\n+\t\t}\n+\t}\n+\n+\tprintf(\t\"};\\n\"\n+\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+\tinitJsonEscape();\n+\toutputEscape();\n+\treturn 0;\n+}\n+"
      },
      {
        "sha": "ac051160118f4ef84237ddc5e766e91d5fb8285e",
        "filename": "include/univalue.h",
        "status": "added",
        "additions": 250,
        "deletions": 0,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/include/univalue.h?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,250 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(bool val_) {\n+        setBool(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    const std::string& getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const { return values.size(); }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    const UniValue& operator[](const std::string& key) const;\n+    const UniValue& operator[](unsigned int index) const;\n+    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+\n+    bool isNull() const { return (typ == VNULL); }\n+    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n+    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n+    bool isBool() const { return (typ == VBOOL); }\n+    bool isStr() const { return (typ == VSTR); }\n+    bool isNum() const { return (typ == VNUM); }\n+    bool isArray() const { return (typ == VARR); }\n+    bool isObject() const { return (typ == VOBJ); }\n+\n+    bool push_back(const UniValue& val);\n+    bool push_back(const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(const char *val_) {\n+        std::string s(val_);\n+        return push_back(s);\n+    }\n+    bool push_backV(const std::vector<UniValue>& vec);\n+\n+    bool pushKV(const std::string& key, const UniValue& val);\n+    bool pushKV(const std::string& key, const std::string& val) {\n+        UniValue tmpVal(VSTR, val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, const char *val_) {\n+        std::string val(val_);\n+        return pushKV(key, val);\n+    }\n+    bool pushKV(const std::string& key, int64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, uint64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, int val) {\n+        UniValue tmpVal((int64_t)val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, double val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKVs(const UniValue& obj);\n+\n+    std::string write(unsigned int prettyIndent = 0,\n+                      unsigned int indentLevel = 0) const;\n+\n+    bool read(const char *raw);\n+    bool read(const std::string& rawStr) {\n+        return read(rawStr.c_str());\n+    }\n+\n+private:\n+    UniValue::VType typ;\n+    std::string val;                       // numbers are stored as C++ strings\n+    std::vector<std::string> keys;\n+    std::vector<UniValue> values;\n+\n+    int findKey(const std::string& key) const;\n+    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    // Strict type-specific getters, these throw std::runtime_error if the\n+    // value is of unexpected type\n+    std::vector<std::string> getKeys() const;\n+    std::vector<UniValue> getValues() const;\n+    bool get_bool() const;\n+    std::string get_str() const;\n+    int get_int() const;\n+    int64_t get_int64() const;\n+    double get_real() const;\n+    const UniValue& get_obj() const;\n+    const UniValue& get_array() const;\n+\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+};\n+\n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n+enum jtokentype {\n+    JTOK_ERR        = -1,\n+    JTOK_NONE       = 0,                           // eof\n+    JTOK_OBJ_OPEN,\n+    JTOK_OBJ_CLOSE,\n+    JTOK_ARR_OPEN,\n+    JTOK_ARR_CLOSE,\n+    JTOK_COLON,\n+    JTOK_COMMA,\n+    JTOK_KW_NULL,\n+    JTOK_KW_TRUE,\n+    JTOK_KW_FALSE,\n+    JTOK_NUMBER,\n+    JTOK_STRING,\n+};\n+\n+extern enum jtokentype getJsonToken(std::string& tokenVal,\n+                                    unsigned int& consumed, const char *raw);\n+extern const char *uvTypeName(UniValue::VType t);\n+\n+extern const UniValue NullUniValue;\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name);\n+\n+#endif // __UNIVALUE_H__\n\\ No newline at end of file"
      },
      {
        "sha": "ca8c16dcd4b0d5ab31a3ac29be11d35e768c3cdb",
        "filename": "lib/.gitignore",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+\n+libunivalue-uninstalled.pc\n+libunivalue.pc\n+libunivalue.a\n+gen\n+\n+.libs\n+*.lo\n+*.la\n+"
      },
      {
        "sha": "883e8651fe3d42e2c5c24a6c436dc2bf4c0f351b",
        "filename": "lib/univalue.cpp",
        "status": "added",
        "additions": 365,
        "deletions": 0,
        "changes": 365,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,365 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <iomanip>\n+#include <limits>\n+#include <sstream>\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"univalue.h\"\n+\n+namespace \n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+using namespace std;\n+\n+const UniValue NullUniValue;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val_)\n+{\n+    clear();\n+    typ = VBOOL;\n+    if (val_)\n+        val = \"1\";\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    return (tt == JTOK_NUMBER);\n+}\n+\n+bool UniValue::setNumStr(const string& val_)\n+{\n+    if (!validNumStr(val_))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(uint64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << std::setprecision(16) << val;\n+\n+    bool ret = setNumStr(oss.str());\n+    typ = VNUM;\n+    return ret;\n+}\n+\n+bool UniValue::setStr(const string& val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push_back(const UniValue& val)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::push_backV(const std::vector<UniValue>& vec)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.insert(values.end(), vec.begin(), vec.end());\n+\n+    return true;\n+}\n+\n+bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+{\n+    if (typ != VOBJ)\n+        return false;\n+\n+    keys.push_back(key);\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::pushKVs(const UniValue& obj)\n+{\n+    if (typ != VOBJ || obj.typ != VOBJ)\n+        return false;\n+\n+    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n+        keys.push_back(obj.keys[i]);\n+        values.push_back(obj.values[i]);\n+    }\n+\n+    return true;\n+}\n+\n+int UniValue::findKey(const std::string& key) const\n+{\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key)\n+            return (int) i;\n+    }\n+\n+    return -1;\n+}\n+\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+{\n+    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n+         it != t.end(); it++) {\n+        int idx = findKey(it->first);\n+        if (idx < 0)\n+            return false;\n+\n+        if (values[idx].getType() != it->second)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n+const UniValue& UniValue::operator[](const std::string& key) const\n+{\n+    if (typ != VOBJ)\n+        return NullUniValue;\n+\n+    int index = findKey(key);\n+    if (index < 0)\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const UniValue& UniValue::operator[](unsigned int index) const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        return NullUniValue;\n+    if (index >= values.size())\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const char *uvTypeName(UniValue::VType t)\n+{\n+    switch (t) {\n+    case UniValue::VNULL: return \"null\";\n+    case UniValue::VBOOL: return \"bool\";\n+    case UniValue::VOBJ: return \"object\";\n+    case UniValue::VARR: return \"array\";\n+    case UniValue::VSTR: return \"string\";\n+    case UniValue::VNUM: return \"number\";\n+    }\n+\n+    // not reached\n+    return NULL;\n+}\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name)\n+{\n+    for (unsigned int i = 0; i < obj.keys.size(); i++)\n+    {\n+        if( obj.keys[i] == name )\n+        {\n+            return obj.values[i];\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+std::vector<std::string> UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+std::vector<UniValue> UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+std::string UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "lib/univalue_escapes.h",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_escapes.h?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,262 @@\n+// Automatically generated file. Do not modify.\n+#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+static const char *escapes[256] = {\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\b\",\n+\t\"\\\\t\",\n+\t\"\\\\n\",\n+\tNULL,\n+\t\"\\\\f\",\n+\t\"\\\\r\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\"\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\\\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+};\n+#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "lib/univalue_read.cpp",
        "status": "added",
        "additions": 389,
        "deletions": 0,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,389 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <string.h>\n+#include <vector>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+// convert hexadecimal string to unsigned integer\n+static const char *hatoui(const char *first, const char *last,\n+                          unsigned int& out)\n+{\n+    unsigned int result = 0;\n+    for (; first != last; ++first)\n+    {\n+        int digit;\n+        if (isdigit(*first))\n+            digit = *first - '0';\n+\n+        else if (*first >= 'a' && *first <= 'f')\n+            digit = *first - 'a' + 10;\n+\n+        else if (*first >= 'A' && *first <= 'F')\n+            digit = *first - 'A' + 10;\n+\n+        else\n+            break;\n+\n+        result = 16 * result + digit;\n+    }\n+    out = result;\n+\n+    return first;\n+}\n+\n+enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+                            const char *raw)\n+{\n+    tokenVal.clear();\n+    consumed = 0;\n+\n+    const char *rawStart = raw;\n+\n+    while ((*raw) && (isspace(*raw)))             // skip whitespace\n+        raw++;\n+\n+    switch (*raw) {\n+\n+    case 0:\n+        return JTOK_NONE;\n+\n+    case '{':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_OPEN;\n+    case '}':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_CLOSE;\n+    case '[':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_OPEN;\n+    case ']':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_CLOSE;\n+\n+    case ':':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COLON;\n+    case ',':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COMMA;\n+\n+    case 'n':\n+    case 't':\n+    case 'f':\n+        if (!strncmp(raw, \"null\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_NULL;\n+        } else if (!strncmp(raw, \"true\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_TRUE;\n+        } else if (!strncmp(raw, \"false\", 5)) {\n+            raw += 5;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_FALSE;\n+        } else\n+            return JTOK_ERR;\n+\n+    case '-':\n+    case '0':\n+    case '1':\n+    case '2':\n+    case '3':\n+    case '4':\n+    case '5':\n+    case '6':\n+    case '7':\n+    case '8':\n+    case '9': {\n+        // part 1: int\n+        string numStr;\n+\n+        const char *first = raw;\n+\n+        const char *firstDigit = first;\n+        if (!isdigit(*firstDigit))\n+            firstDigit++;\n+        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n+            return JTOK_ERR;\n+\n+        numStr += *raw;                       // copy first char\n+        raw++;\n+\n+        if ((*first == '-') && (!isdigit(*raw)))\n+            return JTOK_ERR;\n+\n+        while ((*raw) && isdigit(*raw)) {     // copy digits\n+            numStr += *raw;\n+            raw++;\n+        }\n+\n+        // part 2: frac\n+        if (*raw == '.') {\n+            numStr += *raw;                   // copy .\n+            raw++;\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        // part 3: exp\n+        if (*raw == 'e' || *raw == 'E') {\n+            numStr += *raw;                   // copy E\n+            raw++;\n+\n+            if (*raw == '-' || *raw == '+') { // copy +/-\n+                numStr += *raw;\n+                raw++;\n+            }\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = numStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_NUMBER;\n+        }\n+\n+    case '\"': {\n+        raw++;                                // skip \"\n+\n+        string valStr;\n+\n+        while (*raw) {\n+            if (*raw < 0x20)\n+                return JTOK_ERR;\n+\n+            else if (*raw == '\\\\') {\n+                raw++;                        // skip backslash\n+\n+                switch (*raw) {\n+                case '\"':  valStr += \"\\\"\"; break;\n+                case '\\\\': valStr += \"\\\\\"; break;\n+                case '/':  valStr += \"/\"; break;\n+                case 'b':  valStr += \"\\b\"; break;\n+                case 'f':  valStr += \"\\f\"; break;\n+                case 'n':  valStr += \"\\n\"; break;\n+                case 'r':  valStr += \"\\r\"; break;\n+                case 't':  valStr += \"\\t\"; break;\n+\n+                case 'u': {\n+                    unsigned int codepoint;\n+                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                               raw + 1 + 4)\n+                        return JTOK_ERR;\n+\n+                    if (codepoint <= 0x7f)\n+                        valStr.push_back((char)codepoint);\n+                    else if (codepoint <= 0x7FF) {\n+                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    } else if (codepoint <= 0xFFFF) {\n+                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n+                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    }\n+\n+                    raw += 4;\n+                    break;\n+                    }\n+                default:\n+                    return JTOK_ERR;\n+\n+                }\n+\n+                raw++;                        // skip esc'd char\n+            }\n+\n+            else if (*raw == '\"') {\n+                raw++;                        // skip \"\n+                break;                        // stop scanning\n+            }\n+\n+            else {\n+                valStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = valStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_STRING;\n+        }\n+\n+    default:\n+        return JTOK_ERR;\n+    }\n+}\n+\n+bool UniValue::read(const char *raw)\n+{\n+    clear();\n+\n+    bool expectName = false;\n+    bool expectColon = false;\n+    vector<UniValue*> stack;\n+\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tok = JTOK_NONE;\n+    enum jtokentype last_tok = JTOK_NONE;\n+    do {\n+        last_tok = tok;\n+\n+        tok = getJsonToken(tokenVal, consumed, raw);\n+        if (tok == JTOK_NONE || tok == JTOK_ERR)\n+            return false;\n+        raw += consumed;\n+\n+        switch (tok) {\n+\n+        case JTOK_OBJ_OPEN:\n+        case JTOK_ARR_OPEN: {\n+            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n+            if (!stack.size()) {\n+                if (utyp == VOBJ)\n+                    setObject();\n+                else\n+                    setArray();\n+                stack.push_back(this);\n+            } else {\n+                UniValue tmpVal(utyp);\n+                UniValue *top = stack.back();\n+                top->values.push_back(tmpVal);\n+\n+                UniValue *newTop = &(top->values.back());\n+                stack.push_back(newTop);\n+            }\n+\n+            if (utyp == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_OBJ_CLOSE:\n+        case JTOK_ARR_CLOSE: {\n+            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n+                return false;\n+\n+            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n+            UniValue *top = stack.back();\n+            if (utyp != top->getType())\n+                return false;\n+\n+            stack.pop_back();\n+            expectName = false;\n+            break;\n+            }\n+\n+        case JTOK_COLON: {\n+            if (!stack.size() || expectName || !expectColon)\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() != VOBJ)\n+                return false;\n+\n+            expectColon = false;\n+            break;\n+            }\n+\n+        case JTOK_COMMA: {\n+            if (!stack.size() || expectName || expectColon ||\n+                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_KW_NULL:\n+        case JTOK_KW_TRUE:\n+        case JTOK_KW_FALSE: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal;\n+            switch (tok) {\n+            case JTOK_KW_NULL:\n+                // do nothing more\n+                break;\n+            case JTOK_KW_TRUE:\n+                tmpVal.setBool(true);\n+                break;\n+            case JTOK_KW_FALSE:\n+                tmpVal.setBool(false);\n+                break;\n+            default: /* impossible */ break;\n+            }\n+\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_NUMBER: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal(VNUM, tokenVal);\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_STRING: {\n+            if (!stack.size())\n+                return false;\n+\n+            UniValue *top = stack.back();\n+\n+            if (expectName) {\n+                top->keys.push_back(tokenVal);\n+                expectName = false;\n+                expectColon = true;\n+            } else {\n+                UniValue tmpVal(VSTR, tokenVal);\n+                top->values.push_back(tmpVal);\n+            }\n+\n+            break;\n+            }\n+\n+        default:\n+            return false;\n+        }\n+    } while (!stack.empty ());\n+\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n+        return false;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "lib/univalue_write.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <ctype.h>\n+#include <iomanip>\n+#include <sstream>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+#include \"univalue_escapes.h\"\n+\n+// TODO: Using UTF8\n+\n+using namespace std;\n+\n+static string json_escape(const string& inS)\n+{\n+    string outS;\n+    outS.reserve(inS.size() * 2);\n+\n+    for (unsigned int i = 0; i < inS.size(); i++) {\n+        unsigned char ch = inS[i];\n+        const char *escStr = escapes[ch];\n+\n+        if (escStr)\n+            outS += escStr;\n+\n+        else if (isprint(ch))\n+            outS += ch;\n+\n+        else {\n+            char tmpesc[16];\n+            sprintf(tmpesc, \"\\\\u%04x\", ch);\n+            outS += tmpesc;\n+        }\n+    }\n+\n+    return outS;\n+}\n+\n+string UniValue::write(unsigned int prettyIndent,\n+                       unsigned int indentLevel) const\n+{\n+    string s;\n+    s.reserve(1024);\n+\n+    unsigned int modIndent = indentLevel;\n+    if (modIndent == 0)\n+        modIndent = 1;\n+\n+    switch (typ) {\n+    case VNULL:\n+        s += \"null\";\n+        break;\n+    case VOBJ:\n+        writeObject(prettyIndent, modIndent, s);\n+        break;\n+    case VARR:\n+        writeArray(prettyIndent, modIndent, s);\n+        break;\n+    case VSTR:\n+        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n+        break;\n+    case VNUM:\n+        s += val;\n+        break;\n+    case VBOOL:\n+        s += (val == \"1\" ? \"true\" : \"false\");\n+        break;\n+    }\n+\n+    return s;\n+}\n+\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+{\n+    s.append(prettyIndent * indentLevel, ' ');\n+}\n+\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"[\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < values.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1)) {\n+            s += \",\";\n+            if (prettyIndent)\n+                s += \" \";\n+        }\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"]\";\n+}\n+\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"{\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        if (prettyIndent)\n+            s += \" \";\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1))\n+            s += \",\";\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"}\";\n+}\n+"
      },
      {
        "sha": "b7f53e875e6e45e6e5cdb37dcd3c3b1a12e2b832",
        "filename": "pc/libunivalue-uninstalled.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue-uninstalled.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue-uninstalled.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pc/libunivalue-uninstalled.pc.in?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: ${pc_top_builddir}/${pcfiledir}/libunivalue.la"
      },
      {
        "sha": "358a2d5f73219147d8a2f286146dc4e912363f40",
        "filename": "pc/libunivalue.pc.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/pc/libunivalue.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/pc/libunivalue.pc.in?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,10 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: -L${libdir} -lunivalue\n+Cflags: -I${includedir}"
      },
      {
        "sha": "e4dea0df723bbe22e111e639e394c3d62562dddd",
        "filename": "test/.gitignore",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/.gitignore?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,7 @@\n+\n+unitester\n+\n+*.log\n+*.trs\n+\n+.libs"
      },
      {
        "sha": "6216b865f10219c51c6af21e7a68641bab77ee4f",
        "filename": "test/fail1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail1.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file"
      },
      {
        "sha": "5d8c0047bd522dfa9fbc642051ed76bd3162d936",
        "filename": "test/fail10.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail10.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail10.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail10.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra value after close\": true} \"misplaced quoted value\"\n\\ No newline at end of file"
      },
      {
        "sha": "76eb95b4583c8ee74eee3bdc25e1db69e1aaf4bb",
        "filename": "test/fail11.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail11.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail11.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail11.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal expression\": 1 + 2}\n\\ No newline at end of file"
      },
      {
        "sha": "77580a4522d8c79245851e72a3644a0709b3d28c",
        "filename": "test/fail12.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail12.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail12.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail12.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal invocation\": alert()}\n\\ No newline at end of file"
      },
      {
        "sha": "379406b59bdb943f145afea98ff1bbc45d43ff45",
        "filename": "test/fail13.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail13.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail13.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail13.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot have leading zeroes\": 013}\n\\ No newline at end of file"
      },
      {
        "sha": "0ed366b38a34f551c25735bdcb9282d27beae026",
        "filename": "test/fail14.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail14.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail14.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail14.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot be hex\": 0x14}\n\\ No newline at end of file"
      },
      {
        "sha": "fc8376b605da69dda23f3fcdd9816dcbf2e736cc",
        "filename": "test/fail15.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail15.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail15.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail15.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\x15\"]\n\\ No newline at end of file"
      },
      {
        "sha": "3fe21d4b532498c8b90872ef571c6867f45e645f",
        "filename": "test/fail16.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail16.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail16.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail16.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\\naked]\n\\ No newline at end of file"
      },
      {
        "sha": "62b9214aeda6d74a72ebeceedf0aae3609f1c638",
        "filename": "test/fail17.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail17.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail17.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail17.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\017\"]\n\\ No newline at end of file"
      },
      {
        "sha": "edac92716f186e39d0e3c818b8b110b9a2c4add5",
        "filename": "test/fail18.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail18.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail18.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail18.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "3b9c46fa9a296c9d8c35ce4a6592d8bb7ffe748a",
        "filename": "test/fail19.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail19.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail19.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail19.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Missing colon\" null}\n\\ No newline at end of file"
      },
      {
        "sha": "6b7c11e5a56537f81e651980359c62e263f7399f",
        "filename": "test/fail2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail2.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Unclosed array\"\n\\ No newline at end of file"
      },
      {
        "sha": "27c1af3e72ee37bbf64ccd7b77c5bad8cdea1557",
        "filename": "test/fail20.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail20.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail20.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail20.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Double colon\":: null}\n\\ No newline at end of file"
      },
      {
        "sha": "62474573b2160adefc3dc669b39200ea659d6e59",
        "filename": "test/fail21.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail21.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail21.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail21.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead of colon\", null}\n\\ No newline at end of file"
      },
      {
        "sha": "a7752581bcf7f3b901aef052a2df541c1285b6c2",
        "filename": "test/fail22.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail22.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail22.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail22.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Colon instead of comma\": false]\n\\ No newline at end of file"
      },
      {
        "sha": "494add1ca190e12acd1c8e34ac819a6316c927bc",
        "filename": "test/fail23.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail23.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail23.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail23.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Bad value\", truth]\n\\ No newline at end of file"
      },
      {
        "sha": "caff239bfc36297da08828095105bb497b8aef2a",
        "filename": "test/fail24.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail24.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail24.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail24.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+['single quote']\n\\ No newline at end of file"
      },
      {
        "sha": "8b7ad23e010314591d914519996c28483b5dadc8",
        "filename": "test/fail25.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail25.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail25.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail25.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"\ttab\tcharacter\tin\tstring\t\"]\n\\ No newline at end of file"
      },
      {
        "sha": "845d26a6a54398c49cd492e6836c0d1987f554e4",
        "filename": "test/fail26.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail26.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail26.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail26.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"tab\\   character\\   in\\  string\\  \"]\n\\ No newline at end of file"
      },
      {
        "sha": "6b01a2ca4a97ec36604771dcc3175bbcda865d85",
        "filename": "test/fail27.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail27.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail27.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail27.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "621a0101c664a619457d16f1107a677c911481b4",
        "filename": "test/fail28.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail28.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail28.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail28.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\\\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "47ec421bb6242648e80b2b465049acbae1e6e44a",
        "filename": "test/fail29.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail29.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail29.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail29.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e]\n\\ No newline at end of file"
      },
      {
        "sha": "168c81eb78537ea4006ea0a46b67851d9995564d",
        "filename": "test/fail3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail3.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{unquoted_key: \"keys must be quoted\"}\n\\ No newline at end of file"
      },
      {
        "sha": "8ab0bc4b8b2c73b616a45931d05720555a2f7762",
        "filename": "test/fail30.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail30.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail30.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail30.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e+]\n\\ No newline at end of file"
      },
      {
        "sha": "1cce602b518fc6e7f164a58cc710def27e64b8a5",
        "filename": "test/fail31.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail31.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail31.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail31.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[0e+-1]\n\\ No newline at end of file"
      },
      {
        "sha": "45cba7396ff7462dd6de005c32fd2a95c5318e5f",
        "filename": "test/fail32.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail32.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail32.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail32.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead if closing brace\": true,\n\\ No newline at end of file"
      },
      {
        "sha": "ca5eb19dc97f5ca363ff33a4c3644ad28e612679",
        "filename": "test/fail33.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail33.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail33.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail33.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"mismatch\"}\n\\ No newline at end of file"
      },
      {
        "sha": "3f8be172865d17dd812f50d5cf00a2509f51e6bf",
        "filename": "test/fail34.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail34.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail34.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail34.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{} garbage\n\\ No newline at end of file"
      },
      {
        "sha": "9de168bf34e2e368d044bccc099d44b02316de66",
        "filename": "test/fail4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail4.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"extra comma\",]\n\\ No newline at end of file"
      },
      {
        "sha": "ddf3ce3d2409467011ec7545551d5d078bce1bfd",
        "filename": "test/fail5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail5.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"double extra comma\",,]\n\\ No newline at end of file"
      },
      {
        "sha": "ed91580e1b1c15194a9a758f1b231575074722db",
        "filename": "test/fail6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail6.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[   , \"<-- missing value\"]\n\\ No newline at end of file"
      },
      {
        "sha": "8a96af3e4ee6c7fffd8da641dedcd750a5cc4d9d",
        "filename": "test/fail7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail7.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Comma after the close\"],\n\\ No newline at end of file"
      },
      {
        "sha": "b28479c6ecb21a801d6988b9ea39a4eb00a64702",
        "filename": "test/fail8.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail8.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail8.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail8.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[\"Extra close\"]]\n\\ No newline at end of file"
      },
      {
        "sha": "5815574f363e58cf91578e909ef4dabb402a75de",
        "filename": "test/fail9.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail9.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/fail9.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail9.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra comma\": true,}\n\\ No newline at end of file"
      },
      {
        "sha": "70e26854369282e625e75b302782f581e610f2b3",
        "filename": "test/pass1.json",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass1.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,58 @@\n+[\n+    \"JSON Test Pattern pass1\",\n+    {\"object with 1 member\":[\"array with 1 element\"]},\n+    {},\n+    [],\n+    -42,\n+    true,\n+    false,\n+    null,\n+    {\n+        \"integer\": 1234567890,\n+        \"real\": -9876.543210,\n+        \"e\": 0.123456789e-12,\n+        \"E\": 1.234567890E+34,\n+        \"\":  23456789012E66,\n+        \"zero\": 0,\n+        \"one\": 1,\n+        \"space\": \" \",\n+        \"quote\": \"\\\"\",\n+        \"backslash\": \"\\\\\",\n+        \"controls\": \"\\b\\f\\n\\r\\t\",\n+        \"slash\": \"/ & \\/\",\n+        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\n+        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\n+        \"digit\": \"0123456789\",\n+        \"0123456789\": \"digit\",\n+        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.</>?\",\n+        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\n+        \"true\": true,\n+        \"false\": false,\n+        \"null\": null,\n+        \"array\":[  ],\n+        \"object\":{  },\n+        \"address\": \"50 St. James Street\",\n+        \"url\": \"http://www.JSON.org/\",\n+        \"comment\": \"// /* <!-- --\",\n+        \"# -- --> */\": \" \",\n+        \" s p a c e d \" :[1,2 , 3\n+\n+,\n+\n+4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\n+        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\n+        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\n+        \"\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\n+: \"A key can be any string\"\n+    },\n+    0.5 ,98.6\n+,\n+99.44\n+,\n+\n+1066,\n+1e1,\n+0.1e1,\n+1e-1,\n+1e00,2e+00,2e-00\n+,\"rosebud\"]\n\\ No newline at end of file"
      },
      {
        "sha": "d3c63c7ad845e4cedd0c70d13102b38c51ec197a",
        "filename": "test/pass2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass2.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[\"Not too deep\"]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "4528d51f1ac615e7e11dbb1321dc99187705f0d8",
        "filename": "test/pass3.json",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/pass3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/pass3.json?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,6 @@\n+{\n+    \"JSON Test Pattern pass3\": {\n+        \"The outermost value\": \"must be an object or array.\",\n+        \"In this test\": \"It is an object.\"\n+    }\n+}"
      },
      {
        "sha": "835556e031708f8e3c9d07a8f31980d6a1228986",
        "filename": "test/unitester.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2f9f082b5ef3c495c70598ef23383effef675f9a/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2f9f082b5ef3c495c70598ef23383effef675f9a/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=2f9f082b5ef3c495c70598ef23383effef675f9a",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <cassert>\n+#include <string>\n+#include \"univalue.h\"\n+\n+#ifndef JSON_TEST_SRC\n+#error JSON_TEST_SRC must point to test source directory\n+#endif\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n+#endif\n+\n+using namespace std;\n+string srcdir(JSON_TEST_SRC);\n+\n+static void runtest(string filename, const string& jdata)\n+{\n+        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+\n+        string prefix = filename.substr(0, 4);\n+\n+        bool wantPass = (prefix == \"pass\");\n+        bool wantFail = (prefix == \"fail\");\n+        assert(wantPass || wantFail);\n+\n+        UniValue val;\n+        bool testResult = val.read(jdata);\n+\n+        if (wantPass) {\n+            assert(testResult == true);\n+        } else {\n+            assert(testResult == false);\n+        }\n+}\n+\n+static void runtest_file(const char *filename_)\n+{\n+        string basename(filename_);\n+        string filename = srcdir + \"/\" + basename;\n+        FILE *f = fopen(filename.c_str(), \"r\");\n+        assert(f != NULL);\n+\n+        string jdata;\n+\n+        char buf[4096];\n+        while (!feof(f)) {\n+                int bread = fread(buf, 1, sizeof(buf), f);\n+                assert(!ferror(f));\n+\n+                string s(buf, bread);\n+                jdata += s;\n+        }\n+\n+        assert(!ferror(f));\n+        fclose(f);\n+\n+        runtest(basename, jdata);\n+}\n+\n+static const char *filenames[] = {\n+        \"fail10.json\",\n+        \"fail11.json\",\n+        \"fail12.json\",\n+        \"fail13.json\",\n+        \"fail14.json\",\n+        \"fail15.json\",\n+        \"fail16.json\",\n+        \"fail17.json\",\n+        //\"fail18.json\",             // investigate\n+        \"fail19.json\",\n+        \"fail1.json\",\n+        \"fail20.json\",\n+        \"fail21.json\",\n+        \"fail22.json\",\n+        \"fail23.json\",\n+        \"fail24.json\",\n+        \"fail25.json\",\n+        \"fail26.json\",\n+        \"fail27.json\",\n+        \"fail28.json\",\n+        \"fail29.json\",\n+        \"fail2.json\",\n+        \"fail30.json\",\n+        \"fail31.json\",\n+        \"fail32.json\",\n+        \"fail33.json\",\n+        \"fail34.json\",\n+        \"fail3.json\",\n+        \"fail4.json\",                // extra comma\n+        \"fail5.json\",\n+        \"fail6.json\",\n+        \"fail7.json\",\n+        \"fail8.json\",\n+        \"fail9.json\",               // extra comma\n+        \"pass1.json\",\n+        \"pass2.json\",\n+        \"pass3.json\",\n+};\n+\n+int main (int argc, char *argv[])\n+{\n+    for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n+        runtest_file(filenames[fidx]);\n+    }\n+\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZTE2YTQxMzEzZGJjMjVkODhkZWYxNDNjZjFlMGE5NjRlMzZjN2Mw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:37:19Z"
      },
      "message": "Merge commit '2f9f082b5ef3c495c70598ef23383effef675f9a' as 'src/univalue'",
      "tree": {
        "sha": "46da94414e5fa2e58ad15dda39152376afbad81e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/46da94414e5fa2e58ad15dda39152376afbad81e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0917306fdf39b12556b95fe91be2e7b44d34bb9f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0917306fdf39b12556b95fe91be2e7b44d34bb9f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0917306fdf39b12556b95fe91be2e7b44d34bb9f"
      },
      {
        "sha": "2f9f082b5ef3c495c70598ef23383effef675f9a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2f9f082b5ef3c495c70598ef23383effef675f9a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2f9f082b5ef3c495c70598ef23383effef675f9a"
      }
    ],
    "stats": {
      "total": 1994,
      "additions": 1994,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ca9e8423481f8c6d5574c6088746fd9ed2dc21f5",
        "filename": "src/univalue/.gitignore",
        "status": "added",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,22 @@\n+.deps/\n+INSTALL\n+Makefile\n+Makefile.in\n+aclocal.m4\n+autom4te.cache/\n+compile\n+config.log\n+config.status\n+config.guess\n+config.sub\n+configure\n+depcomp\n+install-sh\n+missing\n+stamp-h1\n+univalue-config.h*\n+test-driver\n+libtool\n+ltmain.sh\n+\n+*.o"
      },
      {
        "sha": "af632c78d9c3d2eb1342469180e5dc1db7fcb807",
        "filename": "src/univalue/.travis.yml",
        "status": "added",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/.travis.yml?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,52 @@\n+\n+language: cpp\n+\n+compiler:\n+  - clang\n+  - gcc\n+\n+os:\n+  - linux\n+  - osx\n+\n+sudo: false\n+\n+env:\n+  global:\n+    - MAKEJOBS=-j3\n+    - RUN_TESTS=true\n+    - BASE_OUTDIR=$TRAVIS_BUILD_DIR/out\n+\n+cache:\n+  apt: true\n+\n+addons:\n+  apt:\n+    packages:\n+      - pkg-config\n+\n+before_script:\n+  - if [ -n \"$USE_SHELL\" ]; then export CONFIG_SHELL=\"$USE_SHELL\"; fi\n+  - test -n \"$USE_SHELL\" && eval '\"$USE_SHELL\" -c \"./autogen.sh\"' || ./autogen.sh\n+\n+script:\n+  - if [ -n \"$UNIVALUE_CONFIG\" ]; then unset CC; unset CXX; fi\n+  - OUTDIR=$BASE_OUTDIR/$TRAVIS_PULL_REQUEST/$TRAVIS_JOB_NUMBER-$HOST\n+  - UNIVALUE_CONFIG_ALL=\"--prefix=$TRAVIS_BUILD_DIR/depends/$HOST --bindir=$OUTDIR/bin --libdir=$OUTDIR/lib\"\n+  - ./configure --cache-file=config.cache $UNIVALUE_CONFIG_ALL $UNIVALUE_CONFIG || ( cat config.log && false)\n+  - make -s $MAKEJOBS $GOAL || ( echo \"Build failure. Verbose build follows.\" && make $GOAL ; false )\n+  - export LD_LIBRARY_PATH=$TRAVIS_BUILD_DIR/depends/$HOST/lib\n+  - if [ \"$RUN_TESTS\" = \"true\" ]; then make check; fi\n+\n+matrix:\n+  fast_finish: true\n+  include:\n+    - os: linux\n+      compiler: gcc\n+      env: UNIVALUE_CONFIG=--host=x86_64-w64-mingw32 RUN_TESTS=false\n+      addons:\n+        apt:\n+          packages:\n+            - g++-mingw-w64-x86-64\n+            - gcc-mingw-w64-x86-64\n+            - binutils-mingw-w64-x86-64"
      },
      {
        "sha": "1fb429f3569c7f8a8e57e69bfb984ab905bccf15",
        "filename": "src/univalue/COPYING",
        "status": "added",
        "additions": 19,
        "deletions": 0,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/COPYING",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/COPYING",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/COPYING?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,19 @@\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in\n+all copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+THE SOFTWARE.\n+"
      },
      {
        "sha": "2800f466dc55bfbc94f20d4ededd7f5ac92a1d15",
        "filename": "src/univalue/Makefile.am",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,84 @@\n+ACLOCAL_AMFLAGS = -I build-aux/m4\n+.PHONY: gen\n+.INTERMEDIATE: $(GENBIN)\n+\n+include_HEADERS = include/univalue.h\n+noinst_HEADERS = lib/univalue_escapes.h\n+\n+lib_LTLIBRARIES = lib/libunivalue.la\n+\n+pkgconfigdir = $(libdir)/pkgconfig\n+pkgconfig_DATA = pc/libunivalue.pc\n+\n+lib_libunivalue_la_SOURCES = \\\n+\tlib/univalue.cpp \\\n+\tlib/univalue_read.cpp \\\n+\tlib/univalue_write.cpp\n+\n+lib_libunivalue_la_LDFLAGS = \\\n+\t-version-info $(LIBUNIVALUE_CURRENT):$(LIBUNIVALUE_REVISION):$(LIBUNIVALUE_AGE) \\\n+\t-no-undefined\n+lib_libunivalue_la_CXXFLAGS = -I$(top_srcdir)/include\n+\n+TESTS = test/unitester\n+\n+GENBIN = gen/gen$(BUILD_EXEEXT)\n+GEN_SRCS = gen/gen.cpp\n+\n+$(GENBIN): $(GEN_SRCS)\n+\t@echo Building $@\n+\t$(AM_V_at)c++ -I$(top_srcdir)/include -o $@ $<\n+\n+gen: lib/univalue_escapes.h $(GENBIN)\n+\t@echo Updating $<\n+\t$(AM_V_at)$(GENBIN) > lib/univalue_escapes.h\n+\n+noinst_PROGRAMS = $(TESTS)\n+\n+TEST_DATA_DIR=test\n+\n+test_unitester_SOURCES = test/unitester.cpp\n+test_unitester_LDADD = lib/libunivalue.la\n+test_unitester_CXXFLAGS = -I$(top_srcdir)/include -DJSON_TEST_SRC=\\\"$(srcdir)/$(TEST_DATA_DIR)\\\"\n+test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)\n+\n+TEST_FILES = \\\n+\t$(TEST_DATA_DIR)/fail10.json \\\n+\t$(TEST_DATA_DIR)/fail11.json \\\n+\t$(TEST_DATA_DIR)/fail12.json \\\n+\t$(TEST_DATA_DIR)/fail13.json \\\n+\t$(TEST_DATA_DIR)/fail14.json \\\n+\t$(TEST_DATA_DIR)/fail15.json \\\n+\t$(TEST_DATA_DIR)/fail16.json \\\n+\t$(TEST_DATA_DIR)/fail17.json \\\n+\t$(TEST_DATA_DIR)/fail18.json \\\n+\t$(TEST_DATA_DIR)/fail19.json \\\n+\t$(TEST_DATA_DIR)/fail1.json \\\n+\t$(TEST_DATA_DIR)/fail20.json \\\n+\t$(TEST_DATA_DIR)/fail21.json \\\n+\t$(TEST_DATA_DIR)/fail22.json \\\n+\t$(TEST_DATA_DIR)/fail23.json \\\n+\t$(TEST_DATA_DIR)/fail24.json \\\n+\t$(TEST_DATA_DIR)/fail25.json \\\n+\t$(TEST_DATA_DIR)/fail26.json \\\n+\t$(TEST_DATA_DIR)/fail27.json \\\n+\t$(TEST_DATA_DIR)/fail28.json \\\n+\t$(TEST_DATA_DIR)/fail29.json \\\n+\t$(TEST_DATA_DIR)/fail2.json \\\n+\t$(TEST_DATA_DIR)/fail30.json \\\n+\t$(TEST_DATA_DIR)/fail31.json \\\n+\t$(TEST_DATA_DIR)/fail32.json \\\n+\t$(TEST_DATA_DIR)/fail33.json \\\n+\t$(TEST_DATA_DIR)/fail34.json \\\n+\t$(TEST_DATA_DIR)/fail3.json \\\n+\t$(TEST_DATA_DIR)/fail4.json \\\n+\t$(TEST_DATA_DIR)/fail5.json \\\n+\t$(TEST_DATA_DIR)/fail6.json \\\n+\t$(TEST_DATA_DIR)/fail7.json \\\n+\t$(TEST_DATA_DIR)/fail8.json \\\n+\t$(TEST_DATA_DIR)/fail9.json \\\n+\t$(TEST_DATA_DIR)/pass1.json \\\n+\t$(TEST_DATA_DIR)/pass2.json \\\n+\t$(TEST_DATA_DIR)/pass3.json\n+\n+EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "48167b083b0e82515a43b9cbd9912d738d260d56",
        "filename": "src/univalue/README",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/README",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/README",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/README?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,7 @@\n+\n+\t\tUniValue\n+\n+A universal value object, with JSON encoding (output) and decoding (input).\n+\n+Built as a single dynamic RAII C++ object class, and no templates.\n+"
      },
      {
        "sha": "5530048e923e51909251e7e32f7023f1fc749999",
        "filename": "src/univalue/TODO",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/TODO",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/TODO",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/TODO?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+\n+Rearrange tree for easier 'git subtree' style use\n+\n+Move towards C++11 etc.\n+\n+Namespace support - must come up with useful shorthand, avoiding\n+long Univalue::Univalue::Univalue usages forced upon library users.\n+\n+Improve test suite\n+"
      },
      {
        "sha": "4b38721faad09b9339107bb375d2d31fdbde9d4a",
        "filename": "src/univalue/autogen.sh",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/autogen.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/autogen.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/autogen.sh?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,9 @@\n+#!/bin/sh\n+set -e\n+srcdir=\"$(dirname $0)\"\n+cd \"$srcdir\"\n+if [ -z ${LIBTOOLIZE} ] && GLIBTOOLIZE=\"`which glibtoolize 2>/dev/null`\"; then\n+  LIBTOOLIZE=\"${GLIBTOOLIZE}\"\n+  export LIBTOOLIZE\n+fi\n+autoreconf --install --force"
      },
      {
        "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
        "filename": "src/univalue/build-aux/m4/.empty",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/build-aux/m4/.empty",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/build-aux/m4/.empty",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/build-aux/m4/.empty?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0"
      },
      {
        "sha": "6cd951622925afac13d0820b2c25b4f8cac7ff1e",
        "filename": "src/univalue/configure.ac",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,69 @@\n+m4_define([libunivalue_major_version], [1])\n+m4_define([libunivalue_minor_version], [1])\n+m4_define([libunivalue_micro_version], [1])\n+m4_define([libunivalue_interface_age], [1])\n+# If you need a modifier for the version number. \n+# Normally empty, but can be used to make \"fixup\" releases.\n+m4_define([libunivalue_extraversion], [])\n+\n+dnl libtool versioning from libunivalue\n+m4_define([libunivalue_current], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version - libunivalue_interface_age)])\n+m4_define([libunivalue_binary_age], [m4_eval(100 * libunivalue_minor_version + libunivalue_micro_version)])\n+m4_define([libunivalue_revision], [libunivalue_interface_age])\n+m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_interface_age)])\n+m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n+\n+\n+AC_INIT([univalue], [1.0.0],\n+        [http://github.com/jgarzik/univalue/])\n+\n+dnl make the compilation flags quiet unless V=1 is used\n+m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])\n+\n+AC_PREREQ(2.60)\n+AC_CONFIG_SRCDIR([lib/univalue.cpp])\n+AC_CONFIG_AUX_DIR([build-aux])\n+AC_CONFIG_MACRO_DIR([build-aux/m4])\n+AC_CONFIG_HEADERS([univalue-config.h])\n+AM_INIT_AUTOMAKE([subdir-objects foreign])\n+\n+LIBUNIVALUE_MAJOR_VERSION=libunivalue_major_version\n+LIBUNIVALUE_MINOR_VERSION=libunivalue_minor_version\n+LIBUNIVALUE_MICRO_VERSION=libunivalue_micro_version\n+LIBUNIVALUE_INTERFACE_AGE=libunivalue_interface_age\n+\n+# ABI version\n+# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html\n+LIBUNIVALUE_CURRENT=libunivalue_current\n+LIBUNIVALUE_REVISION=libunivalue_revision\n+LIBUNIVALUE_AGE=libunivalue_age\n+\n+AC_SUBST(LIBUNIVALUE_CURRENT)\n+AC_SUBST(LIBUNIVALUE_REVISION)\n+AC_SUBST(LIBUNIVALUE_AGE)\n+\n+LT_INIT\n+LT_LANG([C++])\n+\n+case $host in\n+  *mingw*)\n+    LIBTOOL_APP_LDFLAGS=\"$LIBTOOL_APP_LDFLAGS -all-static\"\n+  ;;\n+esac\n+\n+BUILD_EXEEXT=\n+case $build in\n+  *mingw*)\n+    BUILD_EXEEXT=\".exe\"\n+  ;;\n+esac\n+\n+AC_CONFIG_FILES([\n+    Makefile\n+    pc/libunivalue.pc\n+    pc/libunivalue-uninstalled.pc])\n+\n+AC_SUBST(LIBTOOL_APP_LDFLAGS)\n+AC_SUBST(BUILD_EXEEXT)\n+AC_OUTPUT\n+"
      },
      {
        "sha": "5e5a4d4aed43a8a03cf1dbaa24323075ddcac0d9",
        "filename": "src/univalue/gen/gen.cpp",
        "status": "added",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/gen/gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/gen/gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/gen/gen.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,77 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+//\n+// To re-create univalue_escapes.h:\n+// $ g++ -o gen gen.cpp\n+// $ ./gen > univalue_escapes.h\n+//\n+\n+#include <ctype.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+static bool initEscapes;\n+static const char *escapes[256];\n+\n+static void initJsonEscape()\n+{\n+    escapes[(int)'\"'] = \"\\\\\\\"\";\n+    escapes[(int)'\\\\'] = \"\\\\\\\\\";\n+    escapes[(int)'\\b'] = \"\\\\b\";\n+    escapes[(int)'\\f'] = \"\\\\f\";\n+    escapes[(int)'\\n'] = \"\\\\n\";\n+    escapes[(int)'\\r'] = \"\\\\r\";\n+    escapes[(int)'\\t'] = \"\\\\t\";\n+\n+    initEscapes = true;\n+}\n+\n+static void outputEscape()\n+{\n+\tprintf(\t\"// Automatically generated file. Do not modify.\\n\"\n+\t\t\"#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\"\n+\t\t\"static const char *escapes[256] = {\\n\");\n+\n+\tfor (unsigned int i = 0; i < 256; i++) {\n+\t\tif (!escapes[i]) {\n+\t\t\tprintf(\"\\tNULL,\\n\");\n+\t\t} else {\n+\t\t\tprintf(\"\\t\\\"\");\n+\n+\t\t\tunsigned int si;\n+\t\t\tfor (si = 0; si < strlen(escapes[i]); si++) {\n+\t\t\t\tchar ch = escapes[i][si];\n+\t\t\t\tswitch (ch) {\n+\t\t\t\tcase '\"':\n+\t\t\t\t\tprintf(\"\\\\\\\"\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase '\\\\':\n+\t\t\t\t\tprintf(\"\\\\\\\\\");\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tprintf(\"%c\", escapes[i][si]);\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tprintf(\"\\\",\\n\");\n+\t\t}\n+\t}\n+\n+\tprintf(\t\"};\\n\"\n+\t\t\"#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\\n\");\n+}\n+\n+int main (int argc, char *argv[])\n+{\n+\tinitJsonEscape();\n+\toutputEscape();\n+\treturn 0;\n+}\n+"
      },
      {
        "sha": "ac051160118f4ef84237ddc5e766e91d5fb8285e",
        "filename": "src/univalue/include/univalue.h",
        "status": "added",
        "additions": 250,
        "deletions": 0,
        "changes": 250,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/include/univalue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/include/univalue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/include/univalue.h?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,250 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef __UNIVALUE_H__\n+#define __UNIVALUE_H__\n+\n+#include <stdint.h>\n+\n+#include <string>\n+#include <vector>\n+#include <map>\n+#include <cassert>\n+\n+#include <sstream>        // .get_int64()\n+#include <utility>        // std::pair\n+\n+class UniValue {\n+public:\n+    enum VType { VNULL, VOBJ, VARR, VSTR, VNUM, VBOOL, };\n+\n+    UniValue() { typ = VNULL; }\n+    UniValue(UniValue::VType initialType, const std::string& initialStr = \"\") {\n+        typ = initialType;\n+        val = initialStr;\n+    }\n+    UniValue(uint64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(int64_t val_) {\n+        setInt(val_);\n+    }\n+    UniValue(bool val_) {\n+        setBool(val_);\n+    }\n+    UniValue(int val_) {\n+        setInt(val_);\n+    }\n+    UniValue(double val_) {\n+        setFloat(val_);\n+    }\n+    UniValue(const std::string& val_) {\n+        setStr(val_);\n+    }\n+    UniValue(const char *val_) {\n+        std::string s(val_);\n+        setStr(s);\n+    }\n+    ~UniValue() {}\n+\n+    void clear();\n+\n+    bool setNull();\n+    bool setBool(bool val);\n+    bool setNumStr(const std::string& val);\n+    bool setInt(uint64_t val);\n+    bool setInt(int64_t val);\n+    bool setInt(int val) { return setInt((int64_t)val); }\n+    bool setFloat(double val);\n+    bool setStr(const std::string& val);\n+    bool setArray();\n+    bool setObject();\n+\n+    enum VType getType() const { return typ; }\n+    const std::string& getValStr() const { return val; }\n+    bool empty() const { return (values.size() == 0); }\n+\n+    size_t size() const { return values.size(); }\n+\n+    bool getBool() const { return isTrue(); }\n+    bool checkObject(const std::map<std::string,UniValue::VType>& memberTypes);\n+    const UniValue& operator[](const std::string& key) const;\n+    const UniValue& operator[](unsigned int index) const;\n+    bool exists(const std::string& key) const { return (findKey(key) >= 0); }\n+\n+    bool isNull() const { return (typ == VNULL); }\n+    bool isTrue() const { return (typ == VBOOL) && (val == \"1\"); }\n+    bool isFalse() const { return (typ == VBOOL) && (val != \"1\"); }\n+    bool isBool() const { return (typ == VBOOL); }\n+    bool isStr() const { return (typ == VSTR); }\n+    bool isNum() const { return (typ == VNUM); }\n+    bool isArray() const { return (typ == VARR); }\n+    bool isObject() const { return (typ == VOBJ); }\n+\n+    bool push_back(const UniValue& val);\n+    bool push_back(const std::string& val_) {\n+        UniValue tmpVal(VSTR, val_);\n+        return push_back(tmpVal);\n+    }\n+    bool push_back(const char *val_) {\n+        std::string s(val_);\n+        return push_back(s);\n+    }\n+    bool push_backV(const std::vector<UniValue>& vec);\n+\n+    bool pushKV(const std::string& key, const UniValue& val);\n+    bool pushKV(const std::string& key, const std::string& val) {\n+        UniValue tmpVal(VSTR, val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, const char *val_) {\n+        std::string val(val_);\n+        return pushKV(key, val);\n+    }\n+    bool pushKV(const std::string& key, int64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, uint64_t val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, int val) {\n+        UniValue tmpVal((int64_t)val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKV(const std::string& key, double val) {\n+        UniValue tmpVal(val);\n+        return pushKV(key, tmpVal);\n+    }\n+    bool pushKVs(const UniValue& obj);\n+\n+    std::string write(unsigned int prettyIndent = 0,\n+                      unsigned int indentLevel = 0) const;\n+\n+    bool read(const char *raw);\n+    bool read(const std::string& rawStr) {\n+        return read(rawStr.c_str());\n+    }\n+\n+private:\n+    UniValue::VType typ;\n+    std::string val;                       // numbers are stored as C++ strings\n+    std::vector<std::string> keys;\n+    std::vector<UniValue> values;\n+\n+    int findKey(const std::string& key) const;\n+    void writeArray(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+    void writeObject(unsigned int prettyIndent, unsigned int indentLevel, std::string& s) const;\n+\n+public:\n+    // Strict type-specific getters, these throw std::runtime_error if the\n+    // value is of unexpected type\n+    std::vector<std::string> getKeys() const;\n+    std::vector<UniValue> getValues() const;\n+    bool get_bool() const;\n+    std::string get_str() const;\n+    int get_int() const;\n+    int64_t get_int64() const;\n+    double get_real() const;\n+    const UniValue& get_obj() const;\n+    const UniValue& get_array() const;\n+\n+    enum VType type() const { return getType(); }\n+    bool push_back(std::pair<std::string,UniValue> pear) {\n+        return pushKV(pear.first, pear.second);\n+    }\n+    friend const UniValue& find_value( const UniValue& obj, const std::string& name);\n+};\n+\n+//\n+// The following were added for compatibility with json_spirit.\n+// Most duplicate other methods, and should be removed.\n+//\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const char *cVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(cVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, std::string strVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(strVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, uint64_t u64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(u64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int64_t i64Val)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(i64Val);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, bool iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, int iVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(iVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, double dVal)\n+{\n+    std::string key(cKey);\n+    UniValue uVal(dVal);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(const char *cKey, const UniValue& uVal)\n+{\n+    std::string key(cKey);\n+    return std::make_pair(key, uVal);\n+}\n+\n+static inline std::pair<std::string,UniValue> Pair(std::string key, const UniValue& uVal)\n+{\n+    return std::make_pair(key, uVal);\n+}\n+\n+enum jtokentype {\n+    JTOK_ERR        = -1,\n+    JTOK_NONE       = 0,                           // eof\n+    JTOK_OBJ_OPEN,\n+    JTOK_OBJ_CLOSE,\n+    JTOK_ARR_OPEN,\n+    JTOK_ARR_CLOSE,\n+    JTOK_COLON,\n+    JTOK_COMMA,\n+    JTOK_KW_NULL,\n+    JTOK_KW_TRUE,\n+    JTOK_KW_FALSE,\n+    JTOK_NUMBER,\n+    JTOK_STRING,\n+};\n+\n+extern enum jtokentype getJsonToken(std::string& tokenVal,\n+                                    unsigned int& consumed, const char *raw);\n+extern const char *uvTypeName(UniValue::VType t);\n+\n+extern const UniValue NullUniValue;\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name);\n+\n+#endif // __UNIVALUE_H__\n\\ No newline at end of file"
      },
      {
        "sha": "ca8c16dcd4b0d5ab31a3ac29be11d35e768c3cdb",
        "filename": "src/univalue/lib/.gitignore",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+\n+libunivalue-uninstalled.pc\n+libunivalue.pc\n+libunivalue.a\n+gen\n+\n+.libs\n+*.lo\n+*.la\n+"
      },
      {
        "sha": "883e8651fe3d42e2c5c24a6c436dc2bf4c0f351b",
        "filename": "src/univalue/lib/univalue.cpp",
        "status": "added",
        "additions": 365,
        "deletions": 0,
        "changes": 365,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,365 @@\n+// Copyright 2014 BitPay Inc.\n+// Copyright 2015 Bitcoin Core Developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdint.h>\n+#include <ctype.h>\n+#include <errno.h>\n+#include <iomanip>\n+#include <limits>\n+#include <sstream>\n+#include <stdexcept>\n+#include <stdlib.h>\n+#include <string.h>\n+\n+#include \"univalue.h\"\n+\n+namespace \n+{\n+static bool ParsePrechecks(const std::string& str)\n+{\n+    if (str.empty()) // No empty string allowed\n+        return false;\n+    if (str.size() >= 1 && (isspace(str[0]) || isspace(str[str.size()-1]))) // No padding allowed\n+        return false;\n+    if (str.size() != strlen(str.c_str())) // No embedded NUL characters allowed\n+        return false;\n+    return true;\n+}\n+\n+bool ParseInt32(const std::string& str, int32_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtol will not set errno if valid\n+    long int n = strtol(str.c_str(), &endp, 10);\n+    if(out) *out = (int32_t)n;\n+    // Note that strtol returns a *long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int32_t*. On 64-bit\n+    // platforms the size of these types may be different.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int32_t>::min() &&\n+        n <= std::numeric_limits<int32_t>::max();\n+}\n+\n+bool ParseInt64(const std::string& str, int64_t *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    char *endp = NULL;\n+    errno = 0; // strtoll will not set errno if valid\n+    long long int n = strtoll(str.c_str(), &endp, 10);\n+    if(out) *out = (int64_t)n;\n+    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow\n+    // we still have to check that the returned value is within the range of an *int64_t*.\n+    return endp && *endp == 0 && !errno &&\n+        n >= std::numeric_limits<int64_t>::min() &&\n+        n <= std::numeric_limits<int64_t>::max();\n+}\n+\n+bool ParseDouble(const std::string& str, double *out)\n+{\n+    if (!ParsePrechecks(str))\n+        return false;\n+    if (str.size() >= 2 && str[0] == '0' && str[1] == 'x') // No hexadecimal floats allowed\n+        return false;\n+    std::istringstream text(str);\n+    text.imbue(std::locale::classic());\n+    double result;\n+    text >> result;\n+    if(out) *out = result;\n+    return text.eof() && !text.fail();\n+}\n+}\n+\n+using namespace std;\n+\n+const UniValue NullUniValue;\n+\n+void UniValue::clear()\n+{\n+    typ = VNULL;\n+    val.clear();\n+    keys.clear();\n+    values.clear();\n+}\n+\n+bool UniValue::setNull()\n+{\n+    clear();\n+    return true;\n+}\n+\n+bool UniValue::setBool(bool val_)\n+{\n+    clear();\n+    typ = VBOOL;\n+    if (val_)\n+        val = \"1\";\n+    return true;\n+}\n+\n+static bool validNumStr(const string& s)\n+{\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tt = getJsonToken(tokenVal, consumed, s.c_str());\n+    return (tt == JTOK_NUMBER);\n+}\n+\n+bool UniValue::setNumStr(const string& val_)\n+{\n+    if (!validNumStr(val_))\n+        return false;\n+\n+    clear();\n+    typ = VNUM;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setInt(uint64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setInt(int64_t val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << val;\n+\n+    return setNumStr(oss.str());\n+}\n+\n+bool UniValue::setFloat(double val)\n+{\n+    string s;\n+    ostringstream oss;\n+\n+    oss << std::setprecision(16) << val;\n+\n+    bool ret = setNumStr(oss.str());\n+    typ = VNUM;\n+    return ret;\n+}\n+\n+bool UniValue::setStr(const string& val_)\n+{\n+    clear();\n+    typ = VSTR;\n+    val = val_;\n+    return true;\n+}\n+\n+bool UniValue::setArray()\n+{\n+    clear();\n+    typ = VARR;\n+    return true;\n+}\n+\n+bool UniValue::setObject()\n+{\n+    clear();\n+    typ = VOBJ;\n+    return true;\n+}\n+\n+bool UniValue::push_back(const UniValue& val)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::push_backV(const std::vector<UniValue>& vec)\n+{\n+    if (typ != VARR)\n+        return false;\n+\n+    values.insert(values.end(), vec.begin(), vec.end());\n+\n+    return true;\n+}\n+\n+bool UniValue::pushKV(const std::string& key, const UniValue& val)\n+{\n+    if (typ != VOBJ)\n+        return false;\n+\n+    keys.push_back(key);\n+    values.push_back(val);\n+    return true;\n+}\n+\n+bool UniValue::pushKVs(const UniValue& obj)\n+{\n+    if (typ != VOBJ || obj.typ != VOBJ)\n+        return false;\n+\n+    for (unsigned int i = 0; i < obj.keys.size(); i++) {\n+        keys.push_back(obj.keys[i]);\n+        values.push_back(obj.values[i]);\n+    }\n+\n+    return true;\n+}\n+\n+int UniValue::findKey(const std::string& key) const\n+{\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (keys[i] == key)\n+            return (int) i;\n+    }\n+\n+    return -1;\n+}\n+\n+bool UniValue::checkObject(const std::map<std::string,UniValue::VType>& t)\n+{\n+    for (std::map<std::string,UniValue::VType>::const_iterator it = t.begin();\n+         it != t.end(); it++) {\n+        int idx = findKey(it->first);\n+        if (idx < 0)\n+            return false;\n+\n+        if (values[idx].getType() != it->second)\n+            return false;\n+    }\n+\n+    return true;\n+}\n+\n+const UniValue& UniValue::operator[](const std::string& key) const\n+{\n+    if (typ != VOBJ)\n+        return NullUniValue;\n+\n+    int index = findKey(key);\n+    if (index < 0)\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const UniValue& UniValue::operator[](unsigned int index) const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        return NullUniValue;\n+    if (index >= values.size())\n+        return NullUniValue;\n+\n+    return values[index];\n+}\n+\n+const char *uvTypeName(UniValue::VType t)\n+{\n+    switch (t) {\n+    case UniValue::VNULL: return \"null\";\n+    case UniValue::VBOOL: return \"bool\";\n+    case UniValue::VOBJ: return \"object\";\n+    case UniValue::VARR: return \"array\";\n+    case UniValue::VSTR: return \"string\";\n+    case UniValue::VNUM: return \"number\";\n+    }\n+\n+    // not reached\n+    return NULL;\n+}\n+\n+const UniValue& find_value( const UniValue& obj, const std::string& name)\n+{\n+    for (unsigned int i = 0; i < obj.keys.size(); i++)\n+    {\n+        if( obj.keys[i] == name )\n+        {\n+            return obj.values[i];\n+        }\n+    }\n+\n+    return NullUniValue;\n+}\n+\n+std::vector<std::string> UniValue::getKeys() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return keys;\n+}\n+\n+std::vector<UniValue> UniValue::getValues() const\n+{\n+    if (typ != VOBJ && typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an object or array as expected\");\n+    return values;\n+}\n+\n+bool UniValue::get_bool() const\n+{\n+    if (typ != VBOOL)\n+        throw std::runtime_error(\"JSON value is not a boolean as expected\");\n+    return getBool();\n+}\n+\n+std::string UniValue::get_str() const\n+{\n+    if (typ != VSTR)\n+        throw std::runtime_error(\"JSON value is not a string as expected\");\n+    return getValStr();\n+}\n+\n+int UniValue::get_int() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int32_t retval;\n+    if (!ParseInt32(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+int64_t UniValue::get_int64() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not an integer as expected\");\n+    int64_t retval;\n+    if (!ParseInt64(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON integer out of range\");\n+    return retval;\n+}\n+\n+double UniValue::get_real() const\n+{\n+    if (typ != VNUM)\n+        throw std::runtime_error(\"JSON value is not a number as expected\");\n+    double retval;\n+    if (!ParseDouble(getValStr(), &retval))\n+        throw std::runtime_error(\"JSON double out of range\");\n+    return retval;\n+}\n+\n+const UniValue& UniValue::get_obj() const\n+{\n+    if (typ != VOBJ)\n+        throw std::runtime_error(\"JSON value is not an object as expected\");\n+    return *this;\n+}\n+\n+const UniValue& UniValue::get_array() const\n+{\n+    if (typ != VARR)\n+        throw std::runtime_error(\"JSON value is not an array as expected\");\n+    return *this;\n+}\n+"
      },
      {
        "sha": "4133b24ca11f85814a85359131c22bf20b3bfcaf",
        "filename": "src/univalue/lib/univalue_escapes.h",
        "status": "added",
        "additions": 262,
        "deletions": 0,
        "changes": 262,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_escapes.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_escapes.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_escapes.h?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,262 @@\n+// Automatically generated file. Do not modify.\n+#ifndef BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+#define BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H\n+static const char *escapes[256] = {\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\b\",\n+\t\"\\\\t\",\n+\t\"\\\\n\",\n+\tNULL,\n+\t\"\\\\f\",\n+\t\"\\\\r\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\"\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\t\"\\\\\\\\\",\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+\tNULL,\n+};\n+#endif // BITCOIN_UNIVALUE_UNIVALUE_ESCAPES_H"
      },
      {
        "sha": "64591234cb12da4ba8dac3ca9853e8a77b66247f",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "added",
        "additions": 389,
        "deletions": 0,
        "changes": 389,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,389 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <string.h>\n+#include <vector>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+\n+using namespace std;\n+\n+// convert hexadecimal string to unsigned integer\n+static const char *hatoui(const char *first, const char *last,\n+                          unsigned int& out)\n+{\n+    unsigned int result = 0;\n+    for (; first != last; ++first)\n+    {\n+        int digit;\n+        if (isdigit(*first))\n+            digit = *first - '0';\n+\n+        else if (*first >= 'a' && *first <= 'f')\n+            digit = *first - 'a' + 10;\n+\n+        else if (*first >= 'A' && *first <= 'F')\n+            digit = *first - 'A' + 10;\n+\n+        else\n+            break;\n+\n+        result = 16 * result + digit;\n+    }\n+    out = result;\n+\n+    return first;\n+}\n+\n+enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n+                            const char *raw)\n+{\n+    tokenVal.clear();\n+    consumed = 0;\n+\n+    const char *rawStart = raw;\n+\n+    while ((*raw) && (isspace(*raw)))             // skip whitespace\n+        raw++;\n+\n+    switch (*raw) {\n+\n+    case 0:\n+        return JTOK_NONE;\n+\n+    case '{':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_OPEN;\n+    case '}':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_OBJ_CLOSE;\n+    case '[':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_OPEN;\n+    case ']':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_ARR_CLOSE;\n+\n+    case ':':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COLON;\n+    case ',':\n+        raw++;\n+        consumed = (raw - rawStart);\n+        return JTOK_COMMA;\n+\n+    case 'n':\n+    case 't':\n+    case 'f':\n+        if (!strncmp(raw, \"null\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_NULL;\n+        } else if (!strncmp(raw, \"true\", 4)) {\n+            raw += 4;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_TRUE;\n+        } else if (!strncmp(raw, \"false\", 5)) {\n+            raw += 5;\n+            consumed = (raw - rawStart);\n+            return JTOK_KW_FALSE;\n+        } else\n+            return JTOK_ERR;\n+\n+    case '-':\n+    case '0':\n+    case '1':\n+    case '2':\n+    case '3':\n+    case '4':\n+    case '5':\n+    case '6':\n+    case '7':\n+    case '8':\n+    case '9': {\n+        // part 1: int\n+        string numStr;\n+\n+        const char *first = raw;\n+\n+        const char *firstDigit = first;\n+        if (!isdigit(*firstDigit))\n+            firstDigit++;\n+        if ((*firstDigit == '0') && isdigit(firstDigit[1]))\n+            return JTOK_ERR;\n+\n+        numStr += *raw;                       // copy first char\n+        raw++;\n+\n+        if ((*first == '-') && (!isdigit(*raw)))\n+            return JTOK_ERR;\n+\n+        while ((*raw) && isdigit(*raw)) {     // copy digits\n+            numStr += *raw;\n+            raw++;\n+        }\n+\n+        // part 2: frac\n+        if (*raw == '.') {\n+            numStr += *raw;                   // copy .\n+            raw++;\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        // part 3: exp\n+        if (*raw == 'e' || *raw == 'E') {\n+            numStr += *raw;                   // copy E\n+            raw++;\n+\n+            if (*raw == '-' || *raw == '+') { // copy +/-\n+                numStr += *raw;\n+                raw++;\n+            }\n+\n+            if (!isdigit(*raw))\n+                return JTOK_ERR;\n+            while ((*raw) && isdigit(*raw)) { // copy digits\n+                numStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = numStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_NUMBER;\n+        }\n+\n+    case '\"': {\n+        raw++;                                // skip \"\n+\n+        string valStr;\n+\n+        while (*raw) {\n+            if (*raw < 0x20)\n+                return JTOK_ERR;\n+\n+            else if (*raw == '\\\\') {\n+                raw++;                        // skip backslash\n+\n+                switch (*raw) {\n+                case '\"':  valStr += \"\\\"\"; break;\n+                case '\\\\': valStr += \"\\\\\"; break;\n+                case '/':  valStr += \"/\"; break;\n+                case 'b':  valStr += \"\\b\"; break;\n+                case 'f':  valStr += \"\\f\"; break;\n+                case 'n':  valStr += \"\\n\"; break;\n+                case 'r':  valStr += \"\\r\"; break;\n+                case 't':  valStr += \"\\t\"; break;\n+\n+                case 'u': {\n+                    unsigned int codepoint;\n+                    if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n+                               raw + 1 + 4)\n+                        return JTOK_ERR;\n+\n+                    if (codepoint <= 0x7f)\n+                        valStr.push_back((char)codepoint);\n+                    else if (codepoint <= 0x7FF) {\n+                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    } else if (codepoint <= 0xFFFF) {\n+                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n+                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n+                    }\n+\n+                    raw += 4;\n+                    break;\n+                    }\n+                default:\n+                    return JTOK_ERR;\n+\n+                }\n+\n+                raw++;                        // skip esc'd char\n+            }\n+\n+            else if (*raw == '\"') {\n+                raw++;                        // skip \"\n+                break;                        // stop scanning\n+            }\n+\n+            else {\n+                valStr += *raw;\n+                raw++;\n+            }\n+        }\n+\n+        tokenVal = valStr;\n+        consumed = (raw - rawStart);\n+        return JTOK_STRING;\n+        }\n+\n+    default:\n+        return JTOK_ERR;\n+    }\n+}\n+\n+bool UniValue::read(const char *raw)\n+{\n+    clear();\n+\n+    bool expectName = false;\n+    bool expectColon = false;\n+    vector<UniValue*> stack;\n+\n+    string tokenVal;\n+    unsigned int consumed;\n+    enum jtokentype tok = JTOK_NONE;\n+    enum jtokentype last_tok = JTOK_NONE;\n+    do {\n+        last_tok = tok;\n+\n+        tok = getJsonToken(tokenVal, consumed, raw);\n+        if (tok == JTOK_NONE || tok == JTOK_ERR)\n+            return false;\n+        raw += consumed;\n+\n+        switch (tok) {\n+\n+        case JTOK_OBJ_OPEN:\n+        case JTOK_ARR_OPEN: {\n+            VType utyp = (tok == JTOK_OBJ_OPEN ? VOBJ : VARR);\n+            if (!stack.size()) {\n+                if (utyp == VOBJ)\n+                    setObject();\n+                else\n+                    setArray();\n+                stack.push_back(this);\n+            } else {\n+                UniValue tmpVal(utyp);\n+                UniValue *top = stack.back();\n+                top->values.push_back(tmpVal);\n+\n+                UniValue *newTop = &(top->values.back());\n+                stack.push_back(newTop);\n+            }\n+\n+            if (utyp == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_OBJ_CLOSE:\n+        case JTOK_ARR_CLOSE: {\n+            if (!stack.size() || expectColon || (last_tok == JTOK_COMMA))\n+                return false;\n+\n+            VType utyp = (tok == JTOK_OBJ_CLOSE ? VOBJ : VARR);\n+            UniValue *top = stack.back();\n+            if (utyp != top->getType())\n+                return false;\n+\n+            stack.pop_back();\n+            expectName = false;\n+            break;\n+            }\n+\n+        case JTOK_COLON: {\n+            if (!stack.size() || expectName || !expectColon)\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() != VOBJ)\n+                return false;\n+\n+            expectColon = false;\n+            break;\n+            }\n+\n+        case JTOK_COMMA: {\n+            if (!stack.size() || expectName || expectColon ||\n+                (last_tok == JTOK_COMMA) || (last_tok == JTOK_ARR_OPEN))\n+                return false;\n+\n+            UniValue *top = stack.back();\n+            if (top->getType() == VOBJ)\n+                expectName = true;\n+            break;\n+            }\n+\n+        case JTOK_KW_NULL:\n+        case JTOK_KW_TRUE:\n+        case JTOK_KW_FALSE: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal;\n+            switch (tok) {\n+            case JTOK_KW_NULL:\n+                // do nothing more\n+                break;\n+            case JTOK_KW_TRUE:\n+                tmpVal.setBool(true);\n+                break;\n+            case JTOK_KW_FALSE:\n+                tmpVal.setBool(false);\n+                break;\n+            default: /* impossible */ break;\n+            }\n+\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_NUMBER: {\n+            if (!stack.size() || expectName || expectColon)\n+                return false;\n+\n+            UniValue tmpVal(VNUM, tokenVal);\n+            UniValue *top = stack.back();\n+            top->values.push_back(tmpVal);\n+\n+            break;\n+            }\n+\n+        case JTOK_STRING: {\n+            if (!stack.size())\n+                return false;\n+\n+            UniValue *top = stack.back();\n+\n+            if (expectName) {\n+                top->keys.push_back(tokenVal);\n+                expectName = false;\n+                expectColon = true;\n+            } else {\n+                UniValue tmpVal(VSTR, tokenVal);\n+                top->values.push_back(tmpVal);\n+            }\n+\n+            break;\n+            }\n+\n+        default:\n+            return false;\n+        }\n+    } while (!stack.empty ());\n+\n+    /* Check that nothing follows the initial construct (parsed above).  */\n+    tok = getJsonToken(tokenVal, consumed, raw);\n+    if (tok != JTOK_NONE)\n+        return false;\n+\n+    return true;\n+}\n+"
      },
      {
        "sha": "bce3997af77c404f563c2414ecc27ebf10e77171",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "added",
        "additions": 127,
        "deletions": 0,
        "changes": 127,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,127 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <ctype.h>\n+#include <iomanip>\n+#include <sstream>\n+#include <stdio.h>\n+#include \"univalue.h\"\n+#include \"univalue_escapes.h\"\n+\n+// TODO: Using UTF8\n+\n+using namespace std;\n+\n+static string json_escape(const string& inS)\n+{\n+    string outS;\n+    outS.reserve(inS.size() * 2);\n+\n+    for (unsigned int i = 0; i < inS.size(); i++) {\n+        unsigned char ch = inS[i];\n+        const char *escStr = escapes[ch];\n+\n+        if (escStr)\n+            outS += escStr;\n+\n+        else if (isprint(ch))\n+            outS += ch;\n+\n+        else {\n+            char tmpesc[16];\n+            sprintf(tmpesc, \"\\\\u%04x\", ch);\n+            outS += tmpesc;\n+        }\n+    }\n+\n+    return outS;\n+}\n+\n+string UniValue::write(unsigned int prettyIndent,\n+                       unsigned int indentLevel) const\n+{\n+    string s;\n+    s.reserve(1024);\n+\n+    unsigned int modIndent = indentLevel;\n+    if (modIndent == 0)\n+        modIndent = 1;\n+\n+    switch (typ) {\n+    case VNULL:\n+        s += \"null\";\n+        break;\n+    case VOBJ:\n+        writeObject(prettyIndent, modIndent, s);\n+        break;\n+    case VARR:\n+        writeArray(prettyIndent, modIndent, s);\n+        break;\n+    case VSTR:\n+        s += \"\\\"\" + json_escape(val) + \"\\\"\";\n+        break;\n+    case VNUM:\n+        s += val;\n+        break;\n+    case VBOOL:\n+        s += (val == \"1\" ? \"true\" : \"false\");\n+        break;\n+    }\n+\n+    return s;\n+}\n+\n+static void indentStr(unsigned int prettyIndent, unsigned int indentLevel, string& s)\n+{\n+    s.append(prettyIndent * indentLevel, ' ');\n+}\n+\n+void UniValue::writeArray(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"[\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < values.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1)) {\n+            s += \",\";\n+            if (prettyIndent)\n+                s += \" \";\n+        }\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"]\";\n+}\n+\n+void UniValue::writeObject(unsigned int prettyIndent, unsigned int indentLevel, string& s) const\n+{\n+    s += \"{\";\n+    if (prettyIndent)\n+        s += \"\\n\";\n+\n+    for (unsigned int i = 0; i < keys.size(); i++) {\n+        if (prettyIndent)\n+            indentStr(prettyIndent, indentLevel, s);\n+        s += \"\\\"\" + json_escape(keys[i]) + \"\\\":\";\n+        if (prettyIndent)\n+            s += \" \";\n+        s += values[i].write(prettyIndent, indentLevel + 1);\n+        if (i != (values.size() - 1))\n+            s += \",\";\n+        if (prettyIndent)\n+            s += \"\\n\";\n+    }\n+\n+    if (prettyIndent)\n+        indentStr(prettyIndent, indentLevel - 1, s);\n+    s += \"}\";\n+}\n+"
      },
      {
        "sha": "b7f53e875e6e45e6e5cdb37dcd3c3b1a12e2b832",
        "filename": "src/univalue/pc/libunivalue-uninstalled.pc.in",
        "status": "added",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue-uninstalled.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue-uninstalled.pc.in?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,9 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: ${pc_top_builddir}/${pcfiledir}/libunivalue.la"
      },
      {
        "sha": "358a2d5f73219147d8a2f286146dc4e912363f40",
        "filename": "src/univalue/pc/libunivalue.pc.in",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue.pc.in",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/pc/libunivalue.pc.in",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/pc/libunivalue.pc.in?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,10 @@\n+prefix=@prefix@\n+exec_prefix=@exec_prefix@\n+libdir=@libdir@\n+includedir=@includedir@\n+\n+Name: libunivalue\n+Description: libunivalue, C++ universal value object and JSON library\n+Version: @VERSION@\n+Libs: -L${libdir} -lunivalue\n+Cflags: -I${includedir}"
      },
      {
        "sha": "e4dea0df723bbe22e111e639e394c3d62562dddd",
        "filename": "src/univalue/test/.gitignore",
        "status": "added",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/.gitignore",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/.gitignore",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/.gitignore?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,7 @@\n+\n+unitester\n+\n+*.log\n+*.trs\n+\n+.libs"
      },
      {
        "sha": "6216b865f10219c51c6af21e7a68641bab77ee4f",
        "filename": "src/univalue/test/fail1.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail1.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+\"A JSON payload should be an object or array, not a string.\"\n\\ No newline at end of file"
      },
      {
        "sha": "5d8c0047bd522dfa9fbc642051ed76bd3162d936",
        "filename": "src/univalue/test/fail10.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail10.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail10.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail10.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra value after close\": true} \"misplaced quoted value\"\n\\ No newline at end of file"
      },
      {
        "sha": "76eb95b4583c8ee74eee3bdc25e1db69e1aaf4bb",
        "filename": "src/univalue/test/fail11.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail11.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail11.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail11.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal expression\": 1 + 2}\n\\ No newline at end of file"
      },
      {
        "sha": "77580a4522d8c79245851e72a3644a0709b3d28c",
        "filename": "src/univalue/test/fail12.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail12.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail12.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail12.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Illegal invocation\": alert()}\n\\ No newline at end of file"
      },
      {
        "sha": "379406b59bdb943f145afea98ff1bbc45d43ff45",
        "filename": "src/univalue/test/fail13.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail13.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail13.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail13.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot have leading zeroes\": 013}\n\\ No newline at end of file"
      },
      {
        "sha": "0ed366b38a34f551c25735bdcb9282d27beae026",
        "filename": "src/univalue/test/fail14.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail14.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail14.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail14.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Numbers cannot be hex\": 0x14}\n\\ No newline at end of file"
      },
      {
        "sha": "fc8376b605da69dda23f3fcdd9816dcbf2e736cc",
        "filename": "src/univalue/test/fail15.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail15.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail15.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail15.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\x15\"]\n\\ No newline at end of file"
      },
      {
        "sha": "3fe21d4b532498c8b90872ef571c6867f45e645f",
        "filename": "src/univalue/test/fail16.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail16.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail16.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail16.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\\naked]\n\\ No newline at end of file"
      },
      {
        "sha": "62b9214aeda6d74a72ebeceedf0aae3609f1c638",
        "filename": "src/univalue/test/fail17.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail17.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail17.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail17.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Illegal backslash escape: \\017\"]\n\\ No newline at end of file"
      },
      {
        "sha": "edac92716f186e39d0e3c818b8b110b9a2c4add5",
        "filename": "src/univalue/test/fail18.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail18.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail18.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail18.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[[\"Too deep\"]]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "3b9c46fa9a296c9d8c35ce4a6592d8bb7ffe748a",
        "filename": "src/univalue/test/fail19.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail19.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail19.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail19.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Missing colon\" null}\n\\ No newline at end of file"
      },
      {
        "sha": "6b7c11e5a56537f81e651980359c62e263f7399f",
        "filename": "src/univalue/test/fail2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail2.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Unclosed array\"\n\\ No newline at end of file"
      },
      {
        "sha": "27c1af3e72ee37bbf64ccd7b77c5bad8cdea1557",
        "filename": "src/univalue/test/fail20.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail20.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail20.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail20.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Double colon\":: null}\n\\ No newline at end of file"
      },
      {
        "sha": "62474573b2160adefc3dc669b39200ea659d6e59",
        "filename": "src/univalue/test/fail21.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail21.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail21.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail21.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead of colon\", null}\n\\ No newline at end of file"
      },
      {
        "sha": "a7752581bcf7f3b901aef052a2df541c1285b6c2",
        "filename": "src/univalue/test/fail22.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail22.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail22.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail22.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Colon instead of comma\": false]\n\\ No newline at end of file"
      },
      {
        "sha": "494add1ca190e12acd1c8e34ac819a6316c927bc",
        "filename": "src/univalue/test/fail23.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail23.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail23.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail23.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Bad value\", truth]\n\\ No newline at end of file"
      },
      {
        "sha": "caff239bfc36297da08828095105bb497b8aef2a",
        "filename": "src/univalue/test/fail24.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail24.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail24.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail24.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+['single quote']\n\\ No newline at end of file"
      },
      {
        "sha": "8b7ad23e010314591d914519996c28483b5dadc8",
        "filename": "src/univalue/test/fail25.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail25.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail25.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail25.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"\ttab\tcharacter\tin\tstring\t\"]\n\\ No newline at end of file"
      },
      {
        "sha": "845d26a6a54398c49cd492e6836c0d1987f554e4",
        "filename": "src/univalue/test/fail26.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail26.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail26.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail26.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"tab\\   character\\   in\\  string\\  \"]\n\\ No newline at end of file"
      },
      {
        "sha": "6b01a2ca4a97ec36604771dcc3175bbcda865d85",
        "filename": "src/univalue/test/fail27.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail27.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail27.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail27.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "621a0101c664a619457d16f1107a677c911481b4",
        "filename": "src/univalue/test/fail28.json",
        "status": "added",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail28.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail28.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail28.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,2 @@\n+[\"line\\\n+break\"]\n\\ No newline at end of file"
      },
      {
        "sha": "47ec421bb6242648e80b2b465049acbae1e6e44a",
        "filename": "src/univalue/test/fail29.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail29.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail29.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail29.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e]\n\\ No newline at end of file"
      },
      {
        "sha": "168c81eb78537ea4006ea0a46b67851d9995564d",
        "filename": "src/univalue/test/fail3.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail3.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{unquoted_key: \"keys must be quoted\"}\n\\ No newline at end of file"
      },
      {
        "sha": "8ab0bc4b8b2c73b616a45931d05720555a2f7762",
        "filename": "src/univalue/test/fail30.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail30.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail30.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail30.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e+]\n\\ No newline at end of file"
      },
      {
        "sha": "1cce602b518fc6e7f164a58cc710def27e64b8a5",
        "filename": "src/univalue/test/fail31.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail31.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail31.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail31.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[0e+-1]\n\\ No newline at end of file"
      },
      {
        "sha": "45cba7396ff7462dd6de005c32fd2a95c5318e5f",
        "filename": "src/univalue/test/fail32.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail32.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail32.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail32.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Comma instead if closing brace\": true,\n\\ No newline at end of file"
      },
      {
        "sha": "ca5eb19dc97f5ca363ff33a4c3644ad28e612679",
        "filename": "src/univalue/test/fail33.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail33.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail33.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail33.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"mismatch\"}\n\\ No newline at end of file"
      },
      {
        "sha": "3f8be172865d17dd812f50d5cf00a2509f51e6bf",
        "filename": "src/univalue/test/fail34.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail34.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail34.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail34.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{} garbage\n\\ No newline at end of file"
      },
      {
        "sha": "9de168bf34e2e368d044bccc099d44b02316de66",
        "filename": "src/univalue/test/fail4.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail4.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail4.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail4.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"extra comma\",]\n\\ No newline at end of file"
      },
      {
        "sha": "ddf3ce3d2409467011ec7545551d5d078bce1bfd",
        "filename": "src/univalue/test/fail5.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail5.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail5.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail5.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"double extra comma\",,]\n\\ No newline at end of file"
      },
      {
        "sha": "ed91580e1b1c15194a9a758f1b231575074722db",
        "filename": "src/univalue/test/fail6.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail6.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail6.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail6.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[   , \"<-- missing value\"]\n\\ No newline at end of file"
      },
      {
        "sha": "8a96af3e4ee6c7fffd8da641dedcd750a5cc4d9d",
        "filename": "src/univalue/test/fail7.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail7.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail7.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail7.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Comma after the close\"],\n\\ No newline at end of file"
      },
      {
        "sha": "b28479c6ecb21a801d6988b9ea39a4eb00a64702",
        "filename": "src/univalue/test/fail8.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail8.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail8.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail8.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[\"Extra close\"]]\n\\ No newline at end of file"
      },
      {
        "sha": "5815574f363e58cf91578e909ef4dabb402a75de",
        "filename": "src/univalue/test/fail9.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail9.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/fail9.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail9.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+{\"Extra comma\": true,}\n\\ No newline at end of file"
      },
      {
        "sha": "70e26854369282e625e75b302782f581e610f2b3",
        "filename": "src/univalue/test/pass1.json",
        "status": "added",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass1.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass1.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass1.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,58 @@\n+[\n+    \"JSON Test Pattern pass1\",\n+    {\"object with 1 member\":[\"array with 1 element\"]},\n+    {},\n+    [],\n+    -42,\n+    true,\n+    false,\n+    null,\n+    {\n+        \"integer\": 1234567890,\n+        \"real\": -9876.543210,\n+        \"e\": 0.123456789e-12,\n+        \"E\": 1.234567890E+34,\n+        \"\":  23456789012E66,\n+        \"zero\": 0,\n+        \"one\": 1,\n+        \"space\": \" \",\n+        \"quote\": \"\\\"\",\n+        \"backslash\": \"\\\\\",\n+        \"controls\": \"\\b\\f\\n\\r\\t\",\n+        \"slash\": \"/ & \\/\",\n+        \"alpha\": \"abcdefghijklmnopqrstuvwyz\",\n+        \"ALPHA\": \"ABCDEFGHIJKLMNOPQRSTUVWYZ\",\n+        \"digit\": \"0123456789\",\n+        \"0123456789\": \"digit\",\n+        \"special\": \"`1~!@#$%^&*()_+-={':[,]}|;.</>?\",\n+        \"hex\": \"\\u0123\\u4567\\u89AB\\uCDEF\\uabcd\\uef4A\",\n+        \"true\": true,\n+        \"false\": false,\n+        \"null\": null,\n+        \"array\":[  ],\n+        \"object\":{  },\n+        \"address\": \"50 St. James Street\",\n+        \"url\": \"http://www.JSON.org/\",\n+        \"comment\": \"// /* <!-- --\",\n+        \"# -- --> */\": \" \",\n+        \" s p a c e d \" :[1,2 , 3\n+\n+,\n+\n+4 , 5        ,          6           ,7        ],\"compact\":[1,2,3,4,5,6,7],\n+        \"jsontext\": \"{\\\"object with 1 member\\\":[\\\"array with 1 element\\\"]}\",\n+        \"quotes\": \"&#34; \\u0022 %22 0x22 034 &#x22;\",\n+        \"\\/\\\\\\\"\\uCAFE\\uBABE\\uAB98\\uFCDE\\ubcda\\uef4A\\b\\f\\n\\r\\t`1~!@#$%^&*()_+-=[]{}|;:',./<>?\"\n+: \"A key can be any string\"\n+    },\n+    0.5 ,98.6\n+,\n+99.44\n+,\n+\n+1066,\n+1e1,\n+0.1e1,\n+1e-1,\n+1e00,2e+00,2e-00\n+,\"rosebud\"]\n\\ No newline at end of file"
      },
      {
        "sha": "d3c63c7ad845e4cedd0c70d13102b38c51ec197a",
        "filename": "src/univalue/test/pass2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass2.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1 @@\n+[[[[[[[[[[[[[[[[[[[\"Not too deep\"]]]]]]]]]]]]]]]]]]]\n\\ No newline at end of file"
      },
      {
        "sha": "4528d51f1ac615e7e11dbb1321dc99187705f0d8",
        "filename": "src/univalue/test/pass3.json",
        "status": "added",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass3.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/pass3.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/pass3.json?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,6 @@\n+{\n+    \"JSON Test Pattern pass3\": {\n+        \"The outermost value\": \"must be an object or array.\",\n+        \"In this test\": \"It is an object.\"\n+    }\n+}"
      },
      {
        "sha": "835556e031708f8e3c9d07a8f31980d6a1228986",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "added",
        "additions": 115,
        "deletions": 0,
        "changes": 115,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6e16a41313dbc25d88def143cf1e0a964e36c7c0/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "patch": "@@ -0,0 +1,115 @@\n+// Copyright 2014 BitPay Inc.\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#include <cassert>\n+#include <string>\n+#include \"univalue.h\"\n+\n+#ifndef JSON_TEST_SRC\n+#error JSON_TEST_SRC must point to test source directory\n+#endif\n+\n+#ifndef ARRAY_SIZE\n+#define ARRAY_SIZE(arr) (sizeof(arr) / sizeof((arr)[0]))\n+#endif\n+\n+using namespace std;\n+string srcdir(JSON_TEST_SRC);\n+\n+static void runtest(string filename, const string& jdata)\n+{\n+        fprintf(stderr, \"test %s\\n\", filename.c_str());\n+\n+        string prefix = filename.substr(0, 4);\n+\n+        bool wantPass = (prefix == \"pass\");\n+        bool wantFail = (prefix == \"fail\");\n+        assert(wantPass || wantFail);\n+\n+        UniValue val;\n+        bool testResult = val.read(jdata);\n+\n+        if (wantPass) {\n+            assert(testResult == true);\n+        } else {\n+            assert(testResult == false);\n+        }\n+}\n+\n+static void runtest_file(const char *filename_)\n+{\n+        string basename(filename_);\n+        string filename = srcdir + \"/\" + basename;\n+        FILE *f = fopen(filename.c_str(), \"r\");\n+        assert(f != NULL);\n+\n+        string jdata;\n+\n+        char buf[4096];\n+        while (!feof(f)) {\n+                int bread = fread(buf, 1, sizeof(buf), f);\n+                assert(!ferror(f));\n+\n+                string s(buf, bread);\n+                jdata += s;\n+        }\n+\n+        assert(!ferror(f));\n+        fclose(f);\n+\n+        runtest(basename, jdata);\n+}\n+\n+static const char *filenames[] = {\n+        \"fail10.json\",\n+        \"fail11.json\",\n+        \"fail12.json\",\n+        \"fail13.json\",\n+        \"fail14.json\",\n+        \"fail15.json\",\n+        \"fail16.json\",\n+        \"fail17.json\",\n+        //\"fail18.json\",             // investigate\n+        \"fail19.json\",\n+        \"fail1.json\",\n+        \"fail20.json\",\n+        \"fail21.json\",\n+        \"fail22.json\",\n+        \"fail23.json\",\n+        \"fail24.json\",\n+        \"fail25.json\",\n+        \"fail26.json\",\n+        \"fail27.json\",\n+        \"fail28.json\",\n+        \"fail29.json\",\n+        \"fail2.json\",\n+        \"fail30.json\",\n+        \"fail31.json\",\n+        \"fail32.json\",\n+        \"fail33.json\",\n+        \"fail34.json\",\n+        \"fail3.json\",\n+        \"fail4.json\",                // extra comma\n+        \"fail5.json\",\n+        \"fail6.json\",\n+        \"fail7.json\",\n+        \"fail8.json\",\n+        \"fail9.json\",               // extra comma\n+        \"pass1.json\",\n+        \"pass2.json\",\n+        \"pass3.json\",\n+};\n+\n+int main (int argc, char *argv[])\n+{\n+    for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n+        runtest_file(filenames[fidx]);\n+    }\n+\n+    return 0;\n+}\n+"
      }
    ]
  },
  {
    "sha": "9623e934732ba0f0a5176cd3d993ebcda327b413",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NjIzZTkzNDczMmJhMGYwYTUxNzZjZDNkOTkzZWJjZGEzMjdiNDEz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-09-04T14:11:34Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T08:49:57Z"
      },
      "message": "[Univalue] add univalue over subtree\n\nsimilar to secp256k1 include and compile univalue over a subtree",
      "tree": {
        "sha": "fbaf7e369670900b20c1b809885116adbab4c563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fbaf7e369670900b20c1b809885116adbab4c563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9623e934732ba0f0a5176cd3d993ebcda327b413",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6e16a41313dbc25d88def143cf1e0a964e36c7c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6e16a41313dbc25d88def143cf1e0a964e36c7c0"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 39,
      "deletions": 43
    },
    "files": [
      {
        "sha": "dbdc356f5d2b36a72dc4ffb351bfe1de8609c5e1",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -940,7 +940,7 @@ unset PKG_CONFIG_LIBDIR\n PKG_CONFIG_LIBDIR=\"$PKGCONFIG_LIBDIR_TEMP\"\n \n ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no\"\n-AC_CONFIG_SUBDIRS([src/secp256k1])\n+AC_CONFIG_SUBDIRS([src/secp256k1 src/univalue])\n \n AC_OUTPUT\n "
      },
      {
        "sha": "301880dbc344648447e58de62099adc003e4e5a2",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 9,
        "deletions": 14,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -1,4 +1,4 @@\n-DIST_SUBDIRS = secp256k1\n+DIST_SUBDIRS = secp256k1 univalue\n AM_LDFLAGS = $(PTHREAD_CFLAGS) $(LIBTOOL_LDFLAGS)\n \n \n@@ -21,27 +21,30 @@ BITCOIN_CONFIG_INCLUDES=-I$(builddir)/config\n BITCOIN_INCLUDES=-I$(builddir) -I$(builddir)/obj $(BOOST_CPPFLAGS) $(LEVELDB_CPPFLAGS) $(CRYPTO_CFLAGS) $(SSL_CFLAGS)\n \n BITCOIN_INCLUDES += -I$(srcdir)/secp256k1/include\n+BITCOIN_INCLUDES += -I$(srcdir)/univalue/include\n \n LIBBITCOIN_SERVER=libbitcoin_server.a\n LIBBITCOIN_WALLET=libbitcoin_wallet.a\n LIBBITCOIN_COMMON=libbitcoin_common.a\n LIBBITCOIN_CLI=libbitcoin_cli.a\n LIBBITCOIN_UTIL=libbitcoin_util.a\n LIBBITCOIN_CRYPTO=crypto/libbitcoin_crypto.a\n-LIBBITCOIN_UNIVALUE=univalue/libbitcoin_univalue.a\n LIBBITCOINQT=qt/libbitcoinqt.a\n LIBSECP256K1=secp256k1/libsecp256k1.la\n+LIBUNIVALUE=univalue/lib/libunivalue.la\n \n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+  \n+$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:\n EXTRA_LIBRARIES = \\\n   crypto/libbitcoin_crypto.a \\\n   libbitcoin_util.a \\\n   libbitcoin_common.a \\\n-  univalue/libbitcoin_univalue.a \\\n   libbitcoin_server.a \\\n   libbitcoin_cli.a\n if ENABLE_WALLET\n@@ -248,14 +251,6 @@ crypto_libbitcoin_crypto_a_SOURCES = \\\n   crypto/sha512.cpp \\\n   crypto/sha512.h\n \n-# univalue JSON library\n-univalue_libbitcoin_univalue_a_SOURCES = \\\n-  univalue/univalue.cpp \\\n-  univalue/univalue.h \\\n-  univalue/univalue_escapes.h \\\n-  univalue/univalue_read.cpp \\\n-  univalue/univalue_write.cpp\n-\n # common: shared between bitcoind, and bitcoin-qt and non-server tools\n libbitcoin_common_a_CPPFLAGS = $(BITCOIN_INCLUDES)\n libbitcoin_common_a_SOURCES = \\\n@@ -332,7 +327,7 @@ endif\n bitcoind_LDADD = \\\n   $(LIBBITCOIN_SERVER) \\\n   $(LIBBITCOIN_COMMON) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\\n   $(LIBLEVELDB) \\\n@@ -360,7 +355,7 @@ endif\n \n bitcoin_cli_LDADD = \\\n   $(LIBBITCOIN_CLI) \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_UTIL)\n \n bitcoin_cli_LDADD += $(BOOST_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(EVENT_LIBS)\n@@ -376,7 +371,7 @@ bitcoin_tx_SOURCES += bitcoin-tx-res.rc\n endif\n \n bitcoin_tx_LDADD = \\\n-  $(LIBBITCOIN_UNIVALUE) \\\n+  $(LIBUNIVALUE) \\\n   $(LIBBITCOIN_COMMON) \\\n   $(LIBBITCOIN_UTIL) \\\n   $(LIBBITCOIN_CRYPTO) \\"
      },
      {
        "sha": "67fd7c1076e0e92eb4ce98e773b45a22a904aad5",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -367,7 +367,7 @@ endif\n if ENABLE_ZMQ\n qt_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+qt_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(QT_LIBS) $(QT_DBUS_LIBS) $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)\n qt_bitcoin_qt_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(QT_LDFLAGS) $(LIBTOOL_APP_LDFLAGS)"
      },
      {
        "sha": "b8725c872de610dc148ce72066ffc6eefa272a63",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -33,7 +33,7 @@ endif\n if ENABLE_ZMQ\n qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_ZMQ) $(ZMQ_LIBS)\n endif\n-qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) \\\n+qt_test_test_bitcoin_qt_LDADD += $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) \\\n   $(LIBMEMENV) $(BOOST_LIBS) $(QT_DBUS_LIBS) $(QT_TEST_LIBS) $(QT_LIBS) \\\n   $(QR_LIBS) $(PROTOBUF_LIBS) $(BDB_LIBS) $(SSL_LIBS) $(CRYPTO_LIBS) $(MINIUPNPC_LIBS) $(LIBSECP256K1) \\\n   $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS)"
      },
      {
        "sha": "9a6e43631b42611758421d22a2fa02ad3a9cd614",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -91,7 +91,7 @@ endif\n \n test_test_bitcoin_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n test_test_bitcoin_CPPFLAGS = $(BITCOIN_INCLUDES) -I$(builddir)/test/ $(TESTDEFS)\n-test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBBITCOIN_UNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n+test_test_bitcoin_LDADD = $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CRYPTO) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) \\\n   $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1)\n if ENABLE_WALLET\n test_test_bitcoin_LDADD += $(LIBBITCOIN_WALLET)\n@@ -124,6 +124,7 @@ check-local:\n \t@echo \"Running test/bitcoin-util-test.py...\"\n \t$(AM_V_at)srcdir=$(srcdir) PYTHONPATH=$(builddir)/test $(srcdir)/test/bitcoin-util-test.py\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue check\n \n %.json.h: %.json\n \t@$(MKDIR_P) $(@D)"
      },
      {
        "sha": "e0fe6aa5bfde8ccb2b7d26b47bc617b91cc8cb4d",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <event2/buffer.h>\n #include <event2/keyvalq_struct.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "f7518fab5d19f4588957bfa9974565972a027581",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include \"primitives/transaction.h\"\n #include \"script/script.h\"\n #include \"script/sign.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "4be24f8e09725899533d22711af2ac775b400614",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -9,7 +9,7 @@\n #include \"script/script.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n #include \"version.h\""
      },
      {
        "sha": "533fedfe7a68617c583074c76ccf264c5134ab21",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -10,7 +10,7 @@\n #include \"script/standard.h\"\n #include \"serialize.h\"\n #include \"streams.h\"\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"util.h\"\n #include \"utilmoneystr.h\"\n #include \"utilstrencodings.h\""
      },
      {
        "sha": "f387a3ec8c5ef93ef086b6be9b39931e240b0547",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n \n #include <openssl/crypto.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #ifdef ENABLE_WALLET\n #include <db_cxx.h>"
      },
      {
        "sha": "c46d7a8bd2de75874f40b4cc66a1acf2606281f2",
        "filename": "src/rest.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rest.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rest.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rest.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/dynamic_bitset.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "545ac1289081955ee57322d9de46cca99d16f3d7",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <stdint.h>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "4064c2fee320fb93933c354eb320c48ec79ef9aa",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include <stdint.h>\n \n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "8937a56f035e393d1ab78ea104a22b1187b4189d",
        "filename": "src/rpcclient.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcclient.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -6,7 +6,7 @@\n #ifndef BITCOIN_RPCCLIENT_H\n #define BITCOIN_RPCCLIENT_H\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n UniValue RPCConvertValues(const std::string& strMethod, const std::vector<std::string>& strParams);\n /** Non-RFC4627 JSON parser, accepts internal values (such as numbers, true, false, null)"
      },
      {
        "sha": "c49c3e5194a1f4c29061ace337430a25f24c61f1",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -25,7 +25,7 @@\n #include <boost/assign/list_of.hpp>\n #include <boost/shared_ptr.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "0f0457c5cfa2b521f13a8393b464ce1c5f3fd232",
        "filename": "src/rpcmisc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmisc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcmisc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmisc.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "7746be25f73c9af7ddf2c863fa8d35b040a6fab9",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -19,7 +19,7 @@\n \n #include <boost/foreach.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "9cf1ab6d99ce9b1cbb3a9c50ae5860de3b0aae4f",
        "filename": "src/rpcprotocol.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcprotocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcprotocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcprotocol.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -12,7 +12,7 @@\n #include <string>\n #include <boost/filesystem.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n //! HTTP status codes\n enum HTTPStatusCode"
      },
      {
        "sha": "4dec53396de89a9d88dfc582c90ec194bd62eb4f",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -31,7 +31,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "fa60f8c833f0d50247b0d831aac757571b961c98",
        "filename": "src/rpcserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -13,7 +13,7 @@\n #include \"util.h\"\n #include \"utilstrencodings.h\"\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>"
      },
      {
        "sha": "dde8dfdcc3dbecfb9da7f3cce3fc2ec7ac6d5175",
        "filename": "src/rpcserver.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/rpcserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcserver.h?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -17,7 +17,7 @@\n \n #include <boost/function.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n class CRPCCommand;\n "
      },
      {
        "sha": "9845df697f996b8d04f92ac79fd0b8e6e78c51ed",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -18,7 +18,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "2a486f08e43518fb0758e6b81562ba6aa3b2b2b6",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -13,7 +13,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "2e652f76e272dd95142c07bb52210ed3a90eb982",
        "filename": "src/test/rpc_wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/rpc_wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_wallet_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -14,7 +14,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "882f9eb199c2ae1e8b649079a73a0f7472a14695",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -27,7 +27,7 @@\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "6fca64d5da3cd564e69c788642644c591304ab86",
        "filename": "src/test/sighash_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/sighash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/sighash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sighash_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n \n #include <boost/test/unit_test.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n extern UniValue read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "beec39667537718bcf92ca51495303a67fec42d7",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -26,7 +26,7 @@\n #include <boost/test/unit_test.hpp>\n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      },
      {
        "sha": "945c1acbeb49f6d07150d61207bd956a7b5aafdb",
        "filename": "src/test/univalue_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/univalue_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/test/univalue_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/univalue_tests.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -6,7 +6,7 @@\n #include <vector>\n #include <string>\n #include <map>\n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n #include \"test/test_bitcoin.h\"\n \n #include <boost/test/unit_test.hpp>"
      },
      {
        "sha": "c431fc401311dbac3f99c199206ed8f089b8ff46",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -20,7 +20,7 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n #include <boost/foreach.hpp>\n "
      },
      {
        "sha": "30b854477b04b73984330f42a5e24216d5b9b67a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9623e934732ba0f0a5176cd3d993ebcda327b413/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9623e934732ba0f0a5176cd3d993ebcda327b413",
        "patch": "@@ -22,7 +22,7 @@\n \n #include <boost/assign/list_of.hpp>\n \n-#include \"univalue/univalue.h\"\n+#include <univalue.h>\n \n using namespace std;\n "
      }
    ]
  },
  {
    "sha": "95acf3cc6d90d9406030ce897efdee8be0550a53",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NWFjZjNjYzZkOTBkOTQwNjAzMGNlODk3ZWZkZWU4YmUwNTUwYTUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T11:01:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2015-10-01T12:28:44Z"
      },
      "message": "remove $(@F) and subdirs from univalue make",
      "tree": {
        "sha": "a92fc9e9b94c44439b3b205b94607ea68259f650",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a92fc9e9b94c44439b3b205b94607ea68259f650"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/95acf3cc6d90d9406030ce897efdee8be0550a53",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95acf3cc6d90d9406030ce897efdee8be0550a53",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/95acf3cc6d90d9406030ce897efdee8be0550a53",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/95acf3cc6d90d9406030ce897efdee8be0550a53/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9623e934732ba0f0a5176cd3d993ebcda327b413",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9623e934732ba0f0a5176cd3d993ebcda327b413",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9623e934732ba0f0a5176cd3d993ebcda327b413"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "462774389a22b4ad9ebb859b7a8dfdf7a3b5e350",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/95acf3cc6d90d9406030ce897efdee8be0550a53/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/95acf3cc6d90d9406030ce897efdee8be0550a53/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=95acf3cc6d90d9406030ce897efdee8be0550a53",
        "patch": "@@ -36,8 +36,8 @@ LIBUNIVALUE=univalue/lib/libunivalue.la\n $(LIBSECP256K1): $(wildcard secp256k1/src/*) $(wildcard secp256k1/include/*)\n \t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n   \n-$(LIBUNIVALUE): $(wildcard univalue/lib/*) $(wildcard univalue/include/*)\n-\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C $(@D) $(@F)\n+$(LIBUNIVALUE): $(wildcard univalue/lib/*)\n+\t$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C univalue/\n \n # Make is not made aware of per-object dependencies to avoid limiting building parallelization\n # But to build the less dependent modules first, we manually select their order here:"
      }
    ]
  }
]