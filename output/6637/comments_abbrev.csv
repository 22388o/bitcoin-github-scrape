jgarzik,2015-09-04T14:47:15Z,"concept ACK, of course :)\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137756188,137756188,
sipa,2015-09-04T14:55:46Z,"Please use --squash when modifying subtrees. It avoids the confusing incorporation of the other project's commits in our history, and allows the contrib/devtools/git-subtree-check.sh tool to verify that the claimed included commit actually has the intended contents.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137758722,137758722,
jonasschnelli,2015-09-04T15:12:51Z,@sipa: done.\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137762696,137762696,
luke-jr,2015-09-04T16:11:18Z,"Better, but this should really be an external shared library... Concept ACK\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137779229,137779229,
dcousens,2015-09-05T01:25:38Z,Is there any modern package management solution for C++?\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137891807,137891807,
luke-jr,2015-09-05T01:32:51Z,pkg-config works great.\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137892099,137892099,
jonasschnelli,2015-09-05T07:27:06Z,Wouldn't dynamic library and or pkg-config require broad support in various distributions over their package management?\n\nPersonally I would recommend static linking of the JSON stack. It's a critical library and an a hacked JSON stack could lead to coin stealing.\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137924479,137924479,
luke-jr,2015-09-05T07:39:44Z,"@jonasschnelli It's not a consensus-critical library, which is the only exception where static linking makes sense. A hacked glibc, or even any other software on the PC can lead to coin stealing - there is nothing special about the JSON library. (obviously the gitian binaries and depends system would be used to continue to static link regardless of proper dependency handling)\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137924916,137924916,
jonasschnelli,2015-09-05T08:03:15Z,"@luke-jr: ok, fair enough.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137926429,137926429,
sipa,2015-09-05T11:21:18Z,"@jonasschnelli: can you explain why the univalue tests cannot be included?\nI don't see how the current code in Bitcoin Core matters, as it is replaced\nby upstream UniValue.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137944787,137944787,
jonasschnelli,2015-09-05T18:09:18Z,"@sipa: Recently we have coupled UniValue with `utilstrencodings.cpp/h` (see https://github.com/bitcoin/bitcoin/commit/c02309204b8195476945f7066e8d96c60246db08#diff-0f1b401041a14398229cf7e31b6db7eeR13).\nTo re-acchive independence from other sources, i have added the depending numparse functions in UniValue (see https://github.com/jgarzik/univalue/commit/d0ec6ad70f2a1590138adbcbb78ab8f0c1f8a47e and",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137981961,137981961,
jgarzik,2015-09-05T18:11:04Z,"FWIW, the numberparse code is very nicely C/C++ standard and not tied to Univalue or bitcoin at all.\n\nFor the univalue tests, we could create an optional libtest for this case, if no better solution appears.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137982030,137982030,
sipa,2015-09-05T18:12:36Z,"Well that's not good, libunivalue should not depend on any code from\nbitcoin. And apparently, it doesn't even need to because it has its own\nnumber conversion functions. Why not just use those?\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137982180,137982180,
jgarzik,2015-09-05T18:17:42Z,"@sipa It's not a dependency so much as a commonality.  univalue and bitcoin both use ParseInt32\n\ntest/util_tests.cpp uses ParseInt32, ParseInt64 and ParseDouble, but that is a circular unit test dependency to be ignored.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137982625,137982625,
sipa,2015-09-05T18:20:56Z,"How about renaming the one in libunivalue, or putting it in another\nnamespace, so they don't clash. I don't care about duplication of such a\ntiny function.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137982752,137982752,
jonasschnelli,2015-09-05T18:21:31Z,"UniValue doesn't depend on any code. It now just have an option (`--with-numfunc=no`) to avoid linking `numfunc.o` (consuming application of libunivalue can provide own number parse functions [3 functions as Jeff mentioned above] to avoid duplicated code).\n\nI think it would make sense to just namespace the `ParseInt32`, `ParseInt64` and `ParseDouble` into `UniValue::` and compile/link them alway",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137982775,137982775,
sipa,2015-09-05T18:36:24Z,"Got it. Yeah, that seems like the cleanest approach.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-137985556,137985556,
jonasschnelli,2015-09-07T13:58:39Z,"Updated this PR:\n- Refreshed subtree to https://github.com/jgarzik/univalue/commit/a243b3d2e67cdb4550c8801beed987a089afe1a5 (--squashed)\n- Number parse functions are now independently implemented in UniValue over a anonymous namespace\n- Global `make check` does now also covers the UniValue `make check`\n- Replaced all `#include ""univalue/univalue.h""` with `#include <univalue.h>` (was necessary ",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-138305806,138305806,
jonasschnelli,2015-09-07T15:09:46Z,Travis issue is because of missing -fPIC support in UniValue. This PR (https://github.com/jgarzik/univalue/pull/6) should fix it (add libtool script).\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-138321097,138321097,
jgarzik,2015-09-07T20:31:26Z,@jonasschnelli What build object needs -fPIC?  UniValue has been built as a *.a library without problems...\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-138372928,138372928,
jonasschnelli,2015-09-07T20:40:49Z,I think it's recommended to build a *.la (libtool) library to gain more flexibility.\n\nTravis complains about missing -fPIC recompile support:\nhttps://travis-ci.org/bitcoin/bitcoin/jobs/79127433#L1480\n\nSecp256k1 also uses libtool and fPIC:\nhttps://github.com/bitcoin/bitcoin/blob/master/configure.ac#L920\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-138374851,138374851,
laanwj,2015-09-24T10:31:14Z,@theuni can you take a look here please?\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-142885727,142885727,
jonasschnelli,2015-09-24T14:24:00Z,"Updated. Now runs unit tests (univalue's make check) and also passes Win32/64 travis.\n\nUniValue has now a stable ABI and versioning.\n\nBecause it's not available over package management systems, i think adding it over ""/depends"" makes no sense yet.\n\nAdding it over a git subtree would split off discussions and PR for UniValue. If other projects start using UniValue, Bitcoin-Core could also ben",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-142944852,142944852,
dcousens,2015-09-25T06:51:02Z,What is the motivation for this?\nWon't this just be one more thing to keep in sync?\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-143144366,143144366,
sipa,2015-09-25T06:53:05Z,"It's already one more thing to keep in sync, as univalue is being developed\noutside of Bitcoin Core. Using a subtree is just one way of keeping track.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-143144569,143144569,
dcousens,2015-09-25T08:34:40Z,"I hadn't used subtrees before, was confused as to the intention.\nI had the impression we were **just** copying the code in.\n\nAfter some further research,  concept ACK :+1: \n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-143160839,143160839,
laanwj,2015-10-01T08:16:00Z,"@jonasschnelli @theuni @jgarzik Is this ready for merge? If so I think we should do a rebase and then immediately merge, to prevent it getting out of sync due to large number of files touched.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144652368,144652368,
jonasschnelli,2015-10-01T08:39:06Z,"Rebased and force-pushed, ... waiting for travis now.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144656921,144656921,
jgarzik,2015-10-01T09:27:04Z,Upstream univalue tree has all the changes from @theuni - should be ready for merge.\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144668548,144668548,
jgarzik,2015-10-01T09:28:52Z,"""make[3]: **\* No rule to make target `libunivalue.la'.  Stop.""   hrm, might need LT_INIT in bitcoin configure.ac.\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144668854,144668854,
jonasschnelli,2015-10-01T13:20:13Z,Travis is happy now.\nIMO this is ready to merge.\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144724082,144724082,
laanwj,2015-10-01T13:49:16Z,"Note: As usual after large build system changes, if you get:\n\n```\nMaking all in src\nmake[1]: Entering directory `/store/orion/projects/bitcoin/bitcoin/src'\nmake[2]: Entering directory `/store/orion/projects/bitcoin/bitcoin/src'\nmake[3]: Entering directory `/store/orion/projects/bitcoin/bitcoin/src/univalue'\nmake[3]: *** No targets specified and no makefile found.  Stop.\nmake[3]: Leaving di",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144731096,144731096,
btcdrak,2015-10-01T14:21:05Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144742135,144742135,
jgarzik,2015-10-01T16:55:18Z,"""git clean -dfx"" is your friend.  :)\n",https://github.com/bitcoin/bitcoin/pull/6637#issuecomment-144785614,144785614,
