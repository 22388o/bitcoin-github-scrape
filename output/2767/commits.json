[
  {
    "sha": "51ed9ec971614aebdbfbd9527aba365dd0afd437",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MWVkOWVjOTcxNjE0YWViZGJmYmQ5NTI3YWJhMzY1ZGQwYWZkNDM3",
    "commit": {
      "author": {
        "name": "Brandon Dahler",
        "email": "brandon.dahler@gmail.com",
        "date": "2013-04-13T05:13:08Z"
      },
      "committer": {
        "name": "Brandon Dahler",
        "email": "brandon.dahler@gmail.com",
        "date": "2013-11-10T15:36:28Z"
      },
      "message": "Cleanup code using forward declarations.\n\nUse misc methods of avoiding unnecesary header includes.\nReplace int typedefs with int##_t from stdint.h.\nReplace PRI64[xdu] with PRI[xdu]64 from inttypes.h.\nNormalize QT_VERSION ifs where possible.\nResolve some indirect dependencies as direct ones.\nRemove extern declarations from .cpp files.",
      "tree": {
        "sha": "d2f910390e55aef857023812fbdaefdd66cd99ff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d2f910390e55aef857023812fbdaefdd66cd99ff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/51ed9ec971614aebdbfbd9527aba365dd0afd437",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ed9ec971614aebdbfbd9527aba365dd0afd437",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/51ed9ec971614aebdbfbd9527aba365dd0afd437",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51ed9ec971614aebdbfbd9527aba365dd0afd437/comments",
    "author": {
      "login": "brandondahler",
      "id": 1155895,
      "node_id": "MDQ6VXNlcjExNTU4OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1155895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brandondahler",
      "html_url": "https://github.com/brandondahler",
      "followers_url": "https://api.github.com/users/brandondahler/followers",
      "following_url": "https://api.github.com/users/brandondahler/following{/other_user}",
      "gists_url": "https://api.github.com/users/brandondahler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brandondahler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brandondahler/subscriptions",
      "organizations_url": "https://api.github.com/users/brandondahler/orgs",
      "repos_url": "https://api.github.com/users/brandondahler/repos",
      "events_url": "https://api.github.com/users/brandondahler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brandondahler/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "brandondahler",
      "id": 1155895,
      "node_id": "MDQ6VXNlcjExNTU4OTU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1155895?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/brandondahler",
      "html_url": "https://github.com/brandondahler",
      "followers_url": "https://api.github.com/users/brandondahler/followers",
      "following_url": "https://api.github.com/users/brandondahler/following{/other_user}",
      "gists_url": "https://api.github.com/users/brandondahler/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/brandondahler/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/brandondahler/subscriptions",
      "organizations_url": "https://api.github.com/users/brandondahler/orgs",
      "repos_url": "https://api.github.com/users/brandondahler/repos",
      "events_url": "https://api.github.com/users/brandondahler/events{/privacy}",
      "received_events_url": "https://api.github.com/users/brandondahler/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c4c207be8420d394a5abc4368d1bb69ad4f8067",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c4c207be8420d394a5abc4368d1bb69ad4f8067",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c4c207be8420d394a5abc4368d1bb69ad4f8067"
      }
    ],
    "stats": {
      "total": 3653,
      "additions": 2028,
      "deletions": 1625
    },
    "files": [
      {
        "sha": "68dbfdc146eff70c854c5c95e9b2ec3f045ee9b9",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -151,7 +151,7 @@ PKG_PROG_PKG_CONFIG\n ##       compatibility with the legacy buildsystem.\n ##\n CXXFLAGS=\"$CXXFLAGS -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter\"\n-CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO\"\n+CPPFLAGS=\"$CPPFLAGS -DBOOST_SPIRIT_THREADSAFE -DHAVE_BUILD_INFO -D__STDC_FORMAT_MACROS\"\n \n AC_LANG_PUSH([C++])\n "
      },
      {
        "sha": "e6afe3b48b573ac603b268ed88a76063c8ca89d1",
        "filename": "share/qt/extract_strings_qt.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/share/qt/extract_strings_qt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/share/qt/extract_strings_qt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/qt/extract_strings_qt.py?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -57,7 +57,10 @@ def parse_po(text):\n messages = parse_po(out) \n \n f = open(OUT_CPP, 'w')\n-f.write(\"\"\"#include <QtGlobal>\n+f.write(\"\"\"\n+\n+#include <QtGlobal>\n+\n // Automatically generated by extract_strings.py\n #ifdef __GNUC__\n #define UNUSED __attribute__((unused))\n@@ -70,5 +73,5 @@ def parse_po(text):\n for (msgid, msgstr) in messages:\n     if msgid != EMPTY:\n         f.write('QT_TRANSLATE_NOOP(\"bitcoin-core\", %s),\\n' % ('\\n'.join(msgid)))\n-f.write('};')\n+f.write('};\\n')\n f.close()"
      },
      {
        "sha": "2571a6d755fbb15f894679acd1ec5a2dff7168a9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -16,7 +16,7 @@ BITCOIN_CORE_H = addrman.h alert.h allocators.h base58.h bignum.h \\\n   bitcoinrpc.h bloom.h chainparams.h checkpoints.h checkqueue.h \\\n   clientversion.h compat.h core.h crypter.h db.h hash.h init.h \\\n   key.h keystore.h leveldbwrapper.h limitedmap.h main.h miner.h mruset.h \\\n-  netbase.h net.h protocol.h script.h serialize.h sync.h threadsafety.h \\\n+  netbase.h net.h noui.h protocol.h script.h serialize.h sync.h threadsafety.h \\\n   txdb.h txmempool.h ui_interface.h uint256.h util.h version.h walletdb.h wallet.h\n \n JSON_H = json/json_spirit.h json/json_spirit_error_position.h \\"
      },
      {
        "sha": "815da07c9b7e081f0510ea326b0c1a5ae76cadcc",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 17,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,7 +3,9 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"addrman.h\"\n+\n #include \"hash.h\"\n+#include \"serialize.h\"\n \n using namespace std;\n \n@@ -12,12 +14,12 @@ int CAddrInfo::GetTriedBucket(const std::vector<unsigned char> &nKey) const\n     CDataStream ss1(SER_GETHASH, 0);\n     std::vector<unsigned char> vchKey = GetKey();\n     ss1 << nKey << vchKey;\n-    uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     ss2 << nKey << vchGroupKey << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP);\n-    uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n@@ -27,15 +29,15 @@ int CAddrInfo::GetNewBucket(const std::vector<unsigned char> &nKey, const CNetAd\n     std::vector<unsigned char> vchGroupKey = GetGroup();\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n     ss1 << nKey << vchGroupKey << vchSourceGroupKey;\n-    uint64 hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n+    uint64_t hash1 = Hash(ss1.begin(), ss1.end()).Get64();\n \n     CDataStream ss2(SER_GETHASH, 0);\n     ss2 << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP);\n-    uint64 hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n+    uint64_t hash2 = Hash(ss2.begin(), ss2.end()).Get64();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n \n-bool CAddrInfo::IsTerrible(int64 nNow) const\n+bool CAddrInfo::IsTerrible(int64_t nNow) const\n {\n     if (nLastTry && nLastTry >= nNow-60) // never remove things tried the last minute\n         return false;\n@@ -55,12 +57,12 @@ bool CAddrInfo::IsTerrible(int64 nNow) const\n     return false;\n }\n \n-double CAddrInfo::GetChance(int64 nNow) const\n+double CAddrInfo::GetChance(int64_t nNow) const\n {\n     double fChance = 1.0;\n \n-    int64 nSinceLastSeen = nNow - nTime;\n-    int64 nSinceLastTry = nNow - nLastTry;\n+    int64_t nSinceLastSeen = nNow - nTime;\n+    int64_t nSinceLastTry = nNow - nLastTry;\n \n     if (nSinceLastSeen < 0) nSinceLastSeen = 0;\n     if (nSinceLastTry < 0) nSinceLastTry = 0;\n@@ -129,7 +131,7 @@ int CAddrMan::SelectTried(int nKBucket)\n \n     // random shuffle the first few elements (using the entire list)\n     // find the least recently tried among them\n-    int64 nOldest = -1;\n+    int64_t nOldest = -1;\n     int nOldestPos = -1;\n     for (unsigned int i = 0; i < ADDRMAN_TRIED_ENTRIES_INSPECT_ON_EVICT && i < vTried.size(); i++)\n     {\n@@ -259,7 +261,7 @@ void CAddrMan::MakeTried(CAddrInfo& info, int nId, int nOrigin)\n     return;\n }\n \n-void CAddrMan::Good_(const CService &addr, int64 nTime)\n+void CAddrMan::Good_(const CService &addr, int64_t nTime)\n {\n     int nId;\n     CAddrInfo *pinfo = Find(addr, &nId);\n@@ -308,7 +310,7 @@ void CAddrMan::Good_(const CService &addr, int64 nTime)\n     MakeTried(info, nId, nUBucket);\n }\n \n-bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty)\n+bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty)\n {\n     if (!addr.IsRoutable())\n         return false;\n@@ -321,9 +323,9 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePen\n     {\n         // periodically update nTime\n         bool fCurrentlyOnline = (GetAdjustedTime() - addr.nTime < 24 * 60 * 60);\n-        int64 nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n+        int64_t nUpdateInterval = (fCurrentlyOnline ? 60 * 60 : 24 * 60 * 60);\n         if (addr.nTime && (!pinfo->nTime || pinfo->nTime < addr.nTime - nUpdateInterval - nTimePenalty))\n-            pinfo->nTime = max((int64)0, addr.nTime - nTimePenalty);\n+            pinfo->nTime = max((int64_t)0, addr.nTime - nTimePenalty);\n \n         // add services\n         pinfo->nServices |= addr.nServices;\n@@ -348,7 +350,7 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePen\n             return false;\n     } else {\n         pinfo = Create(addr, source, &nId);\n-        pinfo->nTime = max((int64)0, (int64)pinfo->nTime - nTimePenalty);\n+        pinfo->nTime = max((int64_t)0, (int64_t)pinfo->nTime - nTimePenalty);\n         nNew++;\n         fNew = true;\n     }\n@@ -365,7 +367,7 @@ bool CAddrMan::Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePen\n     return fNew;\n }\n \n-void CAddrMan::Attempt_(const CService &addr, int64 nTime)\n+void CAddrMan::Attempt_(const CService &addr, int64_t nTime)\n {\n     CAddrInfo *pinfo = Find(addr);\n \n@@ -504,7 +506,7 @@ void CAddrMan::GetAddr_(std::vector<CAddress> &vAddr)\n     }\n }\n \n-void CAddrMan::Connected_(const CService &addr, int64 nTime)\n+void CAddrMan::Connected_(const CService &addr, int64_t nTime)\n {\n     CAddrInfo *pinfo = Find(addr);\n \n@@ -519,7 +521,7 @@ void CAddrMan::Connected_(const CService &addr, int64 nTime)\n         return;\n \n     // update info\n-    int64 nUpdateInterval = 20 * 60;\n+    int64_t nUpdateInterval = 20 * 60;\n     if (nTime - info.nTime > nUpdateInterval)\n         info.nTime = nTime;\n }"
      },
      {
        "sha": "e2b0cb1093d936d04127b18620bbebceda2dc86b",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 17,
        "deletions": 16,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,21 +1,22 @@\n // Copyright (c) 2012 Pieter Wuille\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef _BITCOIN_ADDRMAN\n #define _BITCOIN_ADDRMAN 1\n \n #include \"netbase.h\"\n #include \"protocol.h\"\n-#include \"util.h\"\n #include \"sync.h\"\n-\n+#include \"util.h\"\n \n #include <map>\n+#include <set>\n+#include <stdint.h>\n #include <vector>\n \n #include <openssl/rand.h>\n \n-\n /** Extended statistics about a CAddress */\n class CAddrInfo : public CAddress\n {\n@@ -24,10 +25,10 @@ class CAddrInfo : public CAddress\n     CNetAddr source;\n \n     // last successful connection by us\n-    int64 nLastSuccess;\n+    int64_t nLastSuccess;\n \n     // last try whatsoever by us:\n-    // int64 CAddress::nLastTry\n+    // int64_t CAddress::nLastTry\n \n     // connection attempts since last successful attempt\n     int nAttempts;\n@@ -86,10 +87,10 @@ class CAddrInfo : public CAddress\n     }\n \n     // Determine whether the statistics about this entry are bad enough so that it can just be deleted\n-    bool IsTerrible(int64 nNow = GetAdjustedTime()) const;\n+    bool IsTerrible(int64_t nNow = GetAdjustedTime()) const;\n \n     // Calculate the relative chance this entry should be given when selecting nodes to connect to\n-    double GetChance(int64 nNow = GetAdjustedTime()) const;\n+    double GetChance(int64_t nNow = GetAdjustedTime()) const;\n \n };\n \n@@ -220,13 +221,13 @@ class CAddrMan\n     void MakeTried(CAddrInfo& info, int nId, int nOrigin);\n \n     // Mark an entry \"good\", possibly moving it from \"new\" to \"tried\".\n-    void Good_(const CService &addr, int64 nTime);\n+    void Good_(const CService &addr, int64_t nTime);\n \n     // Add an entry to the \"new\" table.\n-    bool Add_(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty);\n+    bool Add_(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty);\n \n     // Mark an entry as attempted to connect.\n-    void Attempt_(const CService &addr, int64 nTime);\n+    void Attempt_(const CService &addr, int64_t nTime);\n \n     // Select an address to connect to.\n     // nUnkBias determines how much to favor new addresses over tried ones (min=0, max=100)\n@@ -241,7 +242,7 @@ class CAddrMan\n     void GetAddr_(std::vector<CAddress> &vAddr);\n \n     // Mark an entry as currently-connected-to.\n-    void Connected_(const CService &addr, int64 nTime);\n+    void Connected_(const CService &addr, int64_t nTime);\n \n public:\n \n@@ -409,7 +410,7 @@ class CAddrMan\n     }\n \n     // Add a single address.\n-    bool Add(const CAddress &addr, const CNetAddr& source, int64 nTimePenalty = 0)\n+    bool Add(const CAddress &addr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n         bool fRet = false;\n         {\n@@ -424,7 +425,7 @@ class CAddrMan\n     }\n \n     // Add multiple addresses.\n-    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64 nTimePenalty = 0)\n+    bool Add(const std::vector<CAddress> &vAddr, const CNetAddr& source, int64_t nTimePenalty = 0)\n     {\n         int nAdd = 0;\n         {\n@@ -440,7 +441,7 @@ class CAddrMan\n     }\n \n     // Mark an entry as accessible.\n-    void Good(const CService &addr, int64 nTime = GetAdjustedTime())\n+    void Good(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n         {\n             LOCK(cs);\n@@ -451,7 +452,7 @@ class CAddrMan\n     }\n \n     // Mark an entry as connection attempted to.\n-    void Attempt(const CService &addr, int64 nTime = GetAdjustedTime())\n+    void Attempt(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n         {\n             LOCK(cs);\n@@ -489,7 +490,7 @@ class CAddrMan\n     }\n \n     // Mark an entry as currently-connected-to.\n-    void Connected(const CService &addr, int64 nTime = GetAdjustedTime())\n+    void Connected(const CService &addr, int64_t nTime = GetAdjustedTime())\n     {\n         {\n             LOCK(cs);"
      },
      {
        "sha": "b900fe41e56b139f78a0b38fdcf336512b967d77",
        "filename": "src/alert.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/alert.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/alert.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,17 +2,20 @@\n // Alert system\n //\n \n-#include <algorithm>\n-#include <boost/algorithm/string/classification.hpp>\n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/foreach.hpp>\n-#include <map>\n-\n #include \"alert.h\"\n+\n #include \"key.h\"\n #include \"net.h\"\n-#include \"sync.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n+\n+#include <algorithm>\n+#include <inttypes.h>\n+#include <map>\n+\n+#include <boost/algorithm/string/classification.hpp>\n+#include <boost/algorithm/string/replace.hpp>\n+#include <boost/foreach.hpp>\n \n using namespace std;\n \n@@ -48,8 +51,8 @@ std::string CUnsignedAlert::ToString() const\n     return strprintf(\n         \"CAlert(\\n\"\n         \"    nVersion     = %d\\n\"\n-        \"    nRelayUntil  = %\"PRI64d\"\\n\"\n-        \"    nExpiration  = %\"PRI64d\"\\n\"\n+        \"    nRelayUntil  = %\"PRId64\"\\n\"\n+        \"    nExpiration  = %\"PRId64\"\\n\"\n         \"    nID          = %d\\n\"\n         \"    nCancel      = %d\\n\"\n         \"    setCancel    = %s\\n\""
      },
      {
        "sha": "da140be5e59a809f8d751fb1112cd1c4e0cc4e83",
        "filename": "src/alert.h",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/alert.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/alert.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alert.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,13 +6,20 @@\n #ifndef _BITCOINALERT_H_\n #define _BITCOINALERT_H_ 1\n \n+#include \"serialize.h\"\n+#include \"sync.h\"\n+\n+#include <map>\n #include <set>\n+#include <stdint.h>\n #include <string>\n \n-#include \"uint256.h\"\n-#include \"util.h\"\n-\n+class CAlert;\n class CNode;\n+class uint256;\n+\n+extern std::map<uint256, CAlert> mapAlerts;\n+extern CCriticalSection cs_mapAlerts;\n \n /** Alerts are for notifying old versions if they become too obsolete and\n  * need to upgrade.  The message is displayed in the status bar.\n@@ -24,8 +31,8 @@ class CUnsignedAlert\n {\n public:\n     int nVersion;\n-    int64 nRelayUntil;      // when newer nodes stop relaying to newer nodes\n-    int64 nExpiration;\n+    int64_t nRelayUntil;      // when newer nodes stop relaying to newer nodes\n+    int64_t nExpiration;\n     int nID;\n     int nCancel;\n     std::set<int> setCancel;"
      },
      {
        "sha": "7012ef7e2a24e8efb27b47665862efc35935471d",
        "filename": "src/allocators.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/allocators.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/allocators.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/allocators.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,17 +2,18 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_ALLOCATORS_H\n #define BITCOIN_ALLOCATORS_H\n \n-#include <string.h>\n+#include <map>\n #include <string>\n+#include <string.h>\n+\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/once.hpp>\n-#include <map>\n #include <openssl/crypto.h> // for OPENSSL_cleanse()\n \n-\n /**\n  * Thread-safe class to keep track of locked (ie, non-swappable) memory pages.\n  *"
      },
      {
        "sha": "ebe53768252cd55acae3bdc25a06538f5d463a78",
        "filename": "src/base58.h",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/base58.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/base58.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/base58.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,7 +3,6 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-\n //\n // Why base-58 instead of standard base-64 encoding?\n // - Don't want 0OIl characters that look the same in some fonts and\n@@ -15,14 +14,18 @@\n #ifndef BITCOIN_BASE58_H\n #define BITCOIN_BASE58_H\n \n-#include <string>\n-#include <vector>\n-\n-#include \"chainparams.h\"\n #include \"bignum.h\"\n+#include \"chainparams.h\"\n+#include \"hash.h\"\n #include \"key.h\"\n #include \"script.h\"\n-#include \"allocators.h\"\n+#include \"uint256.h\"\n+\n+#include <string>\n+#include <vector>\n+\n+#include <boost/variant/apply_visitor.hpp>\n+#include <boost/variant/static_visitor.hpp>\n \n static const char* pszBase58 = \"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz\";\n "
      },
      {
        "sha": "0259338b319d70f65d5a1d1c69c7a7001573ec46",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 22,
        "deletions": 17,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,19 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_BIGNUM_H\n #define BITCOIN_BIGNUM_H\n \n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"version.h\"\n+\n #include <stdexcept>\n+#include <stdint.h>\n #include <vector>\n-#include <openssl/bn.h>\n \n-#include \"util.h\" // for uint64\n+#include <openssl/bn.h>\n \n /** Errors thrown by the bignum class */\n class bignum_error : public std::runtime_error\n@@ -79,17 +84,17 @@ class CBigNum : public BIGNUM\n     }\n \n     //CBigNum(char n) is not portable.  Use 'signed char' or 'unsigned char'.\n-    CBigNum(signed char n)      { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(short n)            { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(int n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(long n)             { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n-    CBigNum(int64 n)            { BN_init(this); setint64(n); }\n-    CBigNum(unsigned char n)    { BN_init(this); setulong(n); }\n-    CBigNum(unsigned short n)   { BN_init(this); setulong(n); }\n-    CBigNum(unsigned int n)     { BN_init(this); setulong(n); }\n-    CBigNum(unsigned long n)    { BN_init(this); setulong(n); }\n-    CBigNum(uint64 n)           { BN_init(this); setuint64(n); }\n-    explicit CBigNum(uint256 n) { BN_init(this); setuint256(n); }\n+    CBigNum(signed char n)        { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n+    CBigNum(short n)              { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n+    CBigNum(int n)                { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n+    CBigNum(long n)               { BN_init(this); if (n >= 0) setulong(n); else setint64(n); }\n+    CBigNum(long long n)          { BN_init(this); setint64(n); }\n+    CBigNum(unsigned char n)      { BN_init(this); setulong(n); }\n+    CBigNum(unsigned short n)     { BN_init(this); setulong(n); }\n+    CBigNum(unsigned int n)       { BN_init(this); setulong(n); }\n+    CBigNum(unsigned long n)      { BN_init(this); setulong(n); }\n+    CBigNum(unsigned long long n) { BN_init(this); setuint64(n); }\n+    explicit CBigNum(uint256 n)   { BN_init(this); setuint256(n); }\n \n     explicit CBigNum(const std::vector<unsigned char>& vch)\n     {\n@@ -122,14 +127,14 @@ class CBigNum : public BIGNUM\n             return (n > (unsigned long)std::numeric_limits<int>::max() ? std::numeric_limits<int>::min() : -(int)n);\n     }\n \n-    void setint64(int64 sn)\n+    void setint64(int64_t sn)\n     {\n         unsigned char pch[sizeof(sn) + 6];\n         unsigned char* p = pch + 4;\n         bool fNegative;\n-        uint64 n;\n+        uint64_t n;\n \n-        if (sn < (int64)0)\n+        if (sn < (int64_t)0)\n         {\n             // Since the minimum signed integer cannot be represented as positive so long as its type is signed, \n             // and it's not well-defined what happens if you make it unsigned before negating it,\n@@ -167,7 +172,7 @@ class CBigNum : public BIGNUM\n         BN_mpi2bn(pch, p - pch, this);\n     }\n \n-    void setuint64(uint64 n)\n+    void setuint64(uint64_t n)\n     {\n         unsigned char pch[sizeof(n) + 6];\n         unsigned char* p = pch + 4;"
      },
      {
        "sha": "aa6ce27c528046b16efe4dd336e73560ddc7fb1b",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,6 +8,8 @@\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\" /* for _(...) */\n \n+#include <boost/filesystem/operations.hpp>\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Start"
      },
      {
        "sha": "c1b26812b5e604b0a5bddbb1b1f1000f63b7e79d",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,12 +3,17 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"ui_interface.h\"\n+\n+\n+#include \"bitcoinrpc.h\"\n #include \"init.h\"\n-#include \"util.h\"\n #include \"main.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"noui.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n+\n #include <boost/algorithm/string/predicate.hpp>\n+#include <boost/filesystem.hpp>\n \n void DetectShutdownThread(boost::thread_group* threadGroup)\n {\n@@ -138,7 +143,6 @@ bool AppInit(int argc, char* argv[])\n     return fRet;\n }\n \n-extern void noui_connect();\n int main(int argc, char* argv[])\n {\n     bool fRet = false;"
      },
      {
        "sha": "6ecb70309ba2875c58e2c2dd5506ee416f2fe172",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 15,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,30 +3,27 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n-#include \"main.h\"\n-#include \"wallet.h\"\n+#include \"bitcoinrpc.h\"\n+\n+#include \"base58.h\"\n #include \"init.h\"\n+#include \"main.h\"\n #include \"util.h\"\n-#include \"sync.h\"\n-#include \"ui_interface.h\"\n-#include \"base58.h\"\n-#include \"bitcoinrpc.h\"\n-#include \"db.h\"\n+#include \"wallet.h\"\n+\n+#include <stdint.h>\n \n #include <boost/algorithm/string.hpp>\n #include <boost/asio.hpp>\n-#include <boost/asio/ip/v6_only.hpp>\n #include <boost/asio/ssl.hpp>\n #include <boost/bind.hpp>\n #include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n #include <boost/foreach.hpp>\n #include <boost/iostreams/concepts.hpp>\n #include <boost/iostreams/stream.hpp>\n #include <boost/lexical_cast.hpp>\n #include <boost/shared_ptr.hpp>\n-#include <list>\n+#include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n using namespace boost;\n@@ -89,18 +86,18 @@ void RPCTypeCheck(const Object& o,\n     }\n }\n \n-int64 AmountFromValue(const Value& value)\n+int64_t AmountFromValue(const Value& value)\n {\n     double dAmount = value.get_real();\n     if (dAmount <= 0.0 || dAmount > 21000000.0)\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n-    int64 nAmount = roundint64(dAmount * COIN);\n+    int64_t nAmount = roundint64(dAmount * COIN);\n     if (!MoneyRange(nAmount))\n         throw JSONRPCError(RPC_TYPE_ERROR, \"Invalid amount\");\n     return nAmount;\n }\n \n-Value ValueFromAmount(int64 amount)\n+Value ValueFromAmount(int64_t amount)\n {\n     return (double)amount / (double)COIN;\n }\n@@ -897,7 +894,7 @@ void RPCRunHandler(const boost::system::error_code& err, boost::function<void(vo\n         func();\n }\n \n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64 nSeconds)\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds)\n {\n     assert(rpc_io_service != NULL);\n "
      },
      {
        "sha": "46e3ba4f1d16f4b3b8f4133c95d1ca130bd99008",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,18 +6,19 @@\n #ifndef _BITCOINRPC_H_\n #define _BITCOINRPC_H_ 1\n \n-#include <string>\n+#include \"uint256.h\"\n+\n #include <list>\n #include <map>\n-\n-class CBlockIndex;\n-class CReserveKey;\n+#include <stdint.h>\n+#include <string>\n \n #include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_writer_template.h\"\n #include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_writer_template.h\"\n \n-#include \"util.h\"\n+class CBlockIndex;\n+class CReserveKey;\n \n // HTTP status codes\n enum HTTPStatusCode\n@@ -96,7 +97,7 @@ void RPCTypeCheck(const json_spirit::Object& o,\n   Run func nSeconds from now. Uses boost deadline timers.\n   Overrides previous timer <name> (if any).\n  */\n-void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64 nSeconds);\n+void RPCRunLater(const std::string& name, boost::function<void(void)> func, int64_t nSeconds);\n \n typedef json_spirit::Value(*rpcfn_type)(const json_spirit::Array& params, bool fHelp);\n \n@@ -146,9 +147,9 @@ extern std::vector<unsigned char> ParseHexO(const json_spirit::Object& o, std::s\n extern void InitRPCMining();\n extern void ShutdownRPCMining();\n \n-extern int64 nWalletUnlockTime;\n-extern int64 AmountFromValue(const json_spirit::Value& value);\n-extern json_spirit::Value ValueFromAmount(int64 amount);\n+extern int64_t nWalletUnlockTime;\n+extern int64_t AmountFromValue(const json_spirit::Value& value);\n+extern json_spirit::Value ValueFromAmount(int64_t amount);\n extern double GetDifficulty(const CBlockIndex* blockindex = NULL);\n extern std::string HexBits(unsigned int nBits);\n extern std::string HelpRequiringPassphrase();"
      },
      {
        "sha": "cbb8cf4a823131f1a0c3cf74f6571183eaf34f2b",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,15 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include <math.h>\n-#include <stdlib.h>\n \n #include \"bloom.h\"\n+\n #include \"core.h\"\n #include \"script.h\"\n \n+#include <math.h>\n+#include <stdlib.h>\n+\n #define LN2SQUARED 0.4804530139182014246671025263266649717305529515945455\n #define LN2 0.6931471805599453094172321214581765680755001343602552\n "
      },
      {
        "sha": "75e3f38c55cce1afd3958947a1301b18f9a1592b",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,16 +1,17 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_BLOOM_H\n #define BITCOIN_BLOOM_H\n \n-#include <vector>\n-\n-#include \"uint256.h\"\n #include \"serialize.h\"\n \n+#include <vector>\n+\n class COutPoint;\n class CTransaction;\n+class uint256;\n \n // 20,000 items with fp rate < 0.1% or 10,000 items and <0.0001%\n static const unsigned int MAX_BLOOM_FILTER_SIZE = 36000; // bytes"
      },
      {
        "sha": "14da3860ad9757c3f2efb4ecd38599dbbc2098db",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,9 +3,9 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"assert.h\"\n-\n #include \"chainparams.h\"\n+\n+#include \"assert.h\"\n #include \"core.h\"\n #include \"protocol.h\"\n #include \"util.h\"\n@@ -158,7 +158,7 @@ class CMainParams : public CChainParams {\n             // it'll get a pile of addresses with newer timestamps.\n             // Seed nodes are given a random 'last seen time' of between one and two\n             // weeks ago.\n-            const int64 nOneWeek = 7*24*60*60;\n+            const int64_t nOneWeek = 7*24*60*60;\n             struct in_addr ip;\n             memcpy(&ip, &pnSeed[i], sizeof(ip));\n             CAddress addr(CService(ip, GetDefaultPort()));"
      },
      {
        "sha": "542afeaf92bd514491d77bddbc2d587d95b17b16",
        "filename": "src/chainparams.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/chainparams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/chainparams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,7 +8,6 @@\n \n #include \"bignum.h\"\n #include \"uint256.h\"\n-#include \"util.h\"\n \n #include <vector>\n "
      },
      {
        "sha": "40dd30d1a412ae57aeecdb685cfc7262c012a755",
        "filename": "src/checkpoints.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkpoints.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkpoints.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,16 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-#include <boost/foreach.hpp>\n-\n #include \"checkpoints.h\"\n \n #include \"main.h\"\n #include \"uint256.h\"\n \n+#include <stdint.h>\n+\n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+#include <boost/foreach.hpp>\n+\n namespace Checkpoints\n {\n     typedef std::map<int, uint256> MapCheckpoints;\n@@ -23,8 +25,8 @@ namespace Checkpoints\n \n     struct CCheckpointData {\n         const MapCheckpoints *mapCheckpoints;\n-        int64 nTimeLastCheckpoint;\n-        int64 nTransactionsLastCheckpoint;\n+        int64_t nTimeLastCheckpoint;\n+        int64_t nTransactionsLastCheckpoint;\n         double fTransactionsPerDay;\n     };\n \n@@ -105,7 +107,7 @@ namespace Checkpoints\n         if (pindex==NULL)\n             return 0.0;\n \n-        int64 nNow = time(NULL);\n+        int64_t nNow = time(NULL);\n \n         double fWorkBefore = 0.0; // Amount of work done before pindex\n         double fWorkAfter = 0.0;  // Amount of work left after pindex (estimated)"
      },
      {
        "sha": "3724c57533041c686e0f4a9f79f5406d9ed2135e",
        "filename": "src/checkpoints.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkpoints.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkpoints.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkpoints.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,14 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_CHECKPOINT_H\n #define BITCOIN_CHECKPOINT_H\n \n #include <map>\n \n-class uint256;\n class CBlockIndex;\n+class uint256;\n \n /** Block-chain checkpoints are compiled-in sanity checks.\n  * They are updated every release or three."
      },
      {
        "sha": "ef7b4ca4221a924a61866a9340dfbd68a2e84a16",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,16 +1,17 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef CHECKQUEUE_H\n #define CHECKQUEUE_H\n \n+#include <algorithm>\n+#include <vector>\n+\n #include <boost/foreach.hpp>\n-#include <boost/thread/mutex.hpp>\n-#include <boost/thread/locks.hpp>\n #include <boost/thread/condition_variable.hpp>\n-\n-#include <vector>\n-#include <algorithm>\n+#include <boost/thread/locks.hpp>\n+#include <boost/thread/mutex.hpp>\n \n template<typename T> class CCheckQueueControl;\n "
      },
      {
        "sha": "1deef493c2a07adeebc315d3460962a856a4b88e",
        "filename": "src/compat.h",
        "status": "modified",
        "additions": 14,
        "deletions": 6,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/compat.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/compat.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,6 +2,7 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef _BITCOIN_COMPAT_H\n #define _BITCOIN_COMPAT_H\n \n@@ -18,17 +19,24 @@\n #undef FD_SETSIZE // prevent redefinition compiler warning\n #endif\n #define FD_SETSIZE 1024 // max number of fds in fd_set\n-#include <winsock2.h>\n+\n+#include <winsock2.h>     // Must be included before mswsock.h and windows.h\n+\n+#include <mswsock.h>\n+#include <windows.h>\n #include <ws2tcpip.h>\n #else\n-#include <sys/types.h>\n-#include <sys/socket.h>\n-#include <sys/fcntl.h>\n #include <arpa/inet.h>\n-#include <netdb.h>\n+#include <ifaddrs.h>\n+#include <limits.h>\n #include <net/if.h>\n+#include <netdb.h>\n #include <netinet/in.h>\n-#include <ifaddrs.h>\n+#include <sys/fcntl.h>\n+#include <sys/mman.h>\n+#include <sys/socket.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n #endif\n \n #ifdef WIN32"
      },
      {
        "sha": "26c2cfc5c55938274ae271a7052a10197583f493",
        "filename": "src/core.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/core.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/core.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,8 +4,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"core.h\"\n+\n #include \"util.h\"\n \n+#include <stdint.h>\n+\n std::string COutPoint::ToString() const\n {\n     return strprintf(\"COutPoint(%s, %u)\", hash.ToString().substr(0,10).c_str(), n);\n@@ -50,7 +53,7 @@ void CTxIn::print() const\n     LogPrintf(\"%s\\n\", ToString().c_str());\n }\n \n-CTxOut::CTxOut(int64 nValueIn, CScript scriptPubKeyIn)\n+CTxOut::CTxOut(int64_t nValueIn, CScript scriptPubKeyIn)\n {\n     nValue = nValueIn;\n     scriptPubKey = scriptPubKeyIn;\n@@ -63,7 +66,7 @@ uint256 CTxOut::GetHash() const\n \n std::string CTxOut::ToString() const\n {\n-    return strprintf(\"CTxOut(nValue=%\"PRI64d\".%08\"PRI64d\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n+    return strprintf(\"CTxOut(nValue=%\"PRId64\".%08\"PRId64\", scriptPubKey=%s)\", nValue / COIN, nValue % COIN, scriptPubKey.ToString().substr(0,30).c_str());\n }\n \n void CTxOut::print() const\n@@ -135,7 +138,7 @@ void CTransaction::print() const\n // * if e==9, we only know the resulting number is not zero, so output 1 + 10*(n - 1) + 9\n // (this is decodable, as d is in [1-9] and e is in [0-9])\n \n-uint64 CTxOutCompressor::CompressAmount(uint64 n)\n+uint64_t CTxOutCompressor::CompressAmount(uint64_t n)\n {\n     if (n == 0)\n         return 0;\n@@ -154,7 +157,7 @@ uint64 CTxOutCompressor::CompressAmount(uint64 n)\n     }\n }\n \n-uint64 CTxOutCompressor::DecompressAmount(uint64 x)\n+uint64_t CTxOutCompressor::DecompressAmount(uint64_t x)\n {\n     // x = 0  OR  x = 1+10*(9*n + d - 1) + e  OR  x = 1+10*(n - 1) + 9\n     if (x == 0)\n@@ -163,7 +166,7 @@ uint64 CTxOutCompressor::DecompressAmount(uint64 x)\n     // x = 10*(9*n + d - 1) + e\n     int e = x % 10;\n     x /= 10;\n-    uint64 n = 0;\n+    uint64_t n = 0;\n     if (e < 9) {\n         // x = 9*n + d - 1\n         int d = (x % 9) + 1;"
      },
      {
        "sha": "c881a78f9d093f3de842a7506c224b1a6056c59e",
        "filename": "src/core.h",
        "status": "modified",
        "additions": 17,
        "deletions": 14,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/core.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/core.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,17 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_CORE_H\n #define BITCOIN_CORE_H\n \n-#include \"uint256.h\"\n-#include \"serialize.h\"\n #include \"script.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+#include <stdint.h>\n \n-#include <stdio.h>\n+#include <boost/foreach.hpp>\n \n class CTransaction;\n \n@@ -114,15 +117,15 @@ class CTxIn\n class CTxOut\n {\n public:\n-    int64 nValue;\n+    int64_t nValue;\n     CScript scriptPubKey;\n \n     CTxOut()\n     {\n         SetNull();\n     }\n \n-    CTxOut(int64 nValueIn, CScript scriptPubKeyIn);\n+    CTxOut(int64_t nValueIn, CScript scriptPubKeyIn);\n \n     IMPLEMENT_SERIALIZE\n     (\n@@ -143,7 +146,7 @@ class CTxOut\n \n     uint256 GetHash() const;\n \n-    bool IsDust(int64 nMinRelayTxFee) const\n+    bool IsDust(int64_t nMinRelayTxFee) const\n     {\n         // \"Dust\" is defined in terms of CTransaction::nMinRelayTxFee,\n         // which has units satoshis-per-kilobyte.\n@@ -178,8 +181,8 @@ class CTxOut\n class CTransaction\n {\n public:\n-    static int64 nMinTxFee;\n-    static int64 nMinRelayTxFee;\n+    static int64_t nMinTxFee;\n+    static int64_t nMinRelayTxFee;\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n     std::vector<CTxIn> vin;\n@@ -246,17 +249,17 @@ class CTxOutCompressor\n     CTxOut &txout;\n \n public:\n-    static uint64 CompressAmount(uint64 nAmount);\n-    static uint64 DecompressAmount(uint64 nAmount);\n+    static uint64_t CompressAmount(uint64_t nAmount);\n+    static uint64_t DecompressAmount(uint64_t nAmount);\n \n     CTxOutCompressor(CTxOut &txoutIn) : txout(txoutIn) { }\n \n     IMPLEMENT_SERIALIZE(({\n         if (!fRead) {\n-            uint64 nVal = CompressAmount(txout.nValue);\n+            uint64_t nVal = CompressAmount(txout.nValue);\n             READWRITE(VARINT(nVal));\n         } else {\n-            uint64 nVal = 0;\n+            uint64_t nVal = 0;\n             READWRITE(VARINT(nVal));\n             txout.nValue = DecompressAmount(nVal);\n         }\n@@ -599,9 +602,9 @@ class CBlockHeader\n \n     uint256 GetHash() const;\n \n-    int64 GetBlockTime() const\n+    int64_t GetBlockTime() const\n     {\n-        return (int64)nTime;\n+        return (int64_t)nTime;\n     }\n };\n "
      },
      {
        "sha": "10a34ae24afd8a363c81c90559d1e98a437bf97c",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,12 +2,13 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <openssl/aes.h>\n-#include <openssl/evp.h>\n-#include <vector>\n+#include \"crypter.h\"\n+\n #include <string>\n+#include <vector>\n \n-#include \"crypter.h\"\n+#include <openssl/aes.h>\n+#include <openssl/evp.h>\n \n bool CCrypter::SetKeyFromPassphrase(const SecureString& strKeyData, const std::vector<unsigned char>& chSalt, const unsigned int nRounds, const unsigned int nDerivationMethod)\n {"
      },
      {
        "sha": "861c4f944196f00cae90524f4d29ef27046515db",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,15 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef __CRYPTER_H__\n #define __CRYPTER_H__\n \n-#include \"allocators.h\" /* for SecureString */\n-#include \"key.h\"\n+#include \"allocators.h\"\n #include \"serialize.h\"\n \n+class uint256;\n+\n const unsigned int WALLET_CRYPTO_KEY_SIZE = 32;\n const unsigned int WALLET_CRYPTO_SALT_SIZE = 8;\n "
      },
      {
        "sha": "a286d9f726fc1c079a05cb9295a2a0519e69c062",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 9,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,19 +3,24 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"chainparams.h\"\n #include \"db.h\"\n-#include \"util.h\"\n-#include \"hash.h\"\n+\n #include \"addrman.h\"\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <openssl/rand.h>\n+#include \"hash.h\"\n+#include \"protocol.h\"\n+#include \"util.h\"\n+\n+#include <inttypes.h>\n+#include <stdint.h>\n \n #ifndef WIN32\n-#include \"sys/stat.h\"\n+#include <sys/stat.h>\n #endif\n \n+#include <boost/filesystem.hpp>\n+#include <boost/version.hpp>\n+#include <openssl/rand.h>\n+\n using namespace std;\n using namespace boost;\n \n@@ -430,7 +435,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n \n void CDBEnv::Flush(bool fShutdown)\n {\n-    int64 nStart = GetTimeMillis();\n+    int64_t nStart = GetTimeMillis();\n     // Flush log data to the actual data file\n     //  on all files that are not in use\n     LogPrint(\"db\", \"Flush(%s)%s\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" db not started\");\n@@ -459,7 +464,7 @@ void CDBEnv::Flush(bool fShutdown)\n             else\n                 mi++;\n         }\n-        LogPrint(\"db\", \"DBFlush(%s)%s ended %15\"PRI64d\"ms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" db not started\", GetTimeMillis() - nStart);\n+        LogPrint(\"db\", \"DBFlush(%s)%s ended %15\"PRId64\"ms\\n\", fShutdown ? \"true\" : \"false\", fDbEnvInit ? \"\" : \" db not started\", GetTimeMillis() - nStart);\n         if (fShutdown)\n         {\n             char** listp;"
      },
      {
        "sha": "e041a59300c714b47910909a76fb9aa055b404a7",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,30 +2,29 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_DB_H\n #define BITCOIN_DB_H\n \n-#include \"sync.h\"\n #include \"serialize.h\"\n+#include \"sync.h\"\n+#include \"version.h\"\n \n #include <map>\n #include <string>\n #include <vector>\n \n-#include <boost/filesystem.hpp>\n+#include <boost/filesystem/path.hpp>\n #include <db_cxx.h>\n \n class CAddrMan;\n struct CBlockLocator;\n class CDiskBlockIndex;\n-class CMasterKey;\n class COutPoint;\n-class CWallet;\n \n extern unsigned int nWalletDBUpdated;\n \n void ThreadFlushWalletDB(const std::string& strWalletFile);\n-bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n \n \n class CDBEnv"
      },
      {
        "sha": "7dbf1b64484c466b7b28b7888d59bde013ecc2a5",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,16 +2,19 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n-#include \"uint256.h\"\n #include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"version.h\"\n \n-#include <openssl/sha.h>\n-#include <openssl/ripemd.h>\n #include <vector>\n \n+#include <openssl/ripemd.h>\n+#include <openssl/sha.h>\n+\n template<typename T1>\n inline uint256 Hash(const T1 pbegin, const T1 pend)\n {"
      },
      {
        "sha": "6749064ed5144ca0a126552ea5f6dacc4935f36f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 22,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,29 +8,30 @@\n #endif\n \n #include \"init.h\"\n-#include \"main.h\"\n-#include \"core.h\"\n-#include \"chainparams.h\"\n-#include \"txdb.h\"\n-#include \"walletdb.h\"\n+\n+#include \"addrman.h\"\n #include \"bitcoinrpc.h\"\n-#include \"net.h\"\n-#include \"util.h\"\n+#include \"checkpoints.h\"\n #include \"miner.h\"\n+#include \"net.h\"\n+#include \"txdb.h\"\n #include \"ui_interface.h\"\n-#include \"checkpoints.h\"\n+#include \"util.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n \n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <boost/filesystem/convenience.hpp>\n-#include <boost/interprocess/sync/file_lock.hpp>\n-#include <boost/algorithm/string/predicate.hpp>\n-#include <openssl/crypto.h>\n+#include <inttypes.h>\n+#include <stdint.h>\n \n #ifndef WIN32\n #include <signal.h>\n #endif\n \n+#include <boost/algorithm/string/predicate.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/interprocess/sync/file_lock.hpp>\n+#include <openssl/crypto.h>\n+\n using namespace std;\n using namespace boost;\n \n@@ -520,15 +521,15 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     // cost to you of processing a transaction.\n     if (mapArgs.count(\"-mintxfee\"))\n     {\n-        int64 n = 0;\n+        int64_t n = 0;\n         if (ParseMoney(mapArgs[\"-mintxfee\"], n) && n > 0)\n             CTransaction::nMinTxFee = n;\n         else\n             return InitError(strprintf(_(\"Invalid amount for -mintxfee=<amount>: '%s'\"), mapArgs[\"-mintxfee\"].c_str()));\n     }\n     if (mapArgs.count(\"-minrelaytxfee\"))\n     {\n-        int64 n = 0;\n+        int64_t n = 0;\n         if (ParseMoney(mapArgs[\"-minrelaytxfee\"], n) && n > 0)\n             CTransaction::nMinRelayTxFee = n;\n         else\n@@ -582,7 +583,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             threadGroup.create_thread(&ThreadScriptCheck);\n     }\n \n-    int64 nStart;\n+    int64_t nStart;\n \n     // ********************************************************* Step 5: verify wallet database integrity\n \n@@ -592,7 +593,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     {\n         // try moving the database env out of the way\n         boost::filesystem::path pathDatabase = GetDataDir() / \"database\";\n-        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRI64d\".bak\", GetTime());\n+        boost::filesystem::path pathDatabaseBak = GetDataDir() / strprintf(\"database.%\"PRId64\".bak\", GetTime());\n         try {\n             boost::filesystem::rename(pathDatabase, pathDatabaseBak);\n             LogPrintf(\"Moved old %s to %s. Retrying.\\n\", pathDatabase.string().c_str(), pathDatabaseBak.string().c_str());\n@@ -864,7 +865,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n         LogPrintf(\"Shutdown requested. Exiting.\\n\");\n         return false;\n     }\n-    LogPrintf(\" block index %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    LogPrintf(\" block index %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n \n     if (GetBoolArg(\"-printblockindex\", false) || GetBoolArg(\"-printblocktree\", false))\n     {\n@@ -957,7 +958,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n     }\n \n     LogPrintf(\"%s\", strErrors.str().c_str());\n-    LogPrintf(\" wallet      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+    LogPrintf(\" wallet      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n \n     RegisterWallet(pwalletMain);\n \n@@ -979,7 +980,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n         LogPrintf(\"Rescanning last %i blocks (from block %i)...\\n\", chainActive.Height() - pindexRescan->nHeight, pindexRescan->nHeight);\n         nStart = GetTimeMillis();\n         pwalletMain->ScanForWalletTransactions(pindexRescan, true);\n-        LogPrintf(\" rescan      %15\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+        LogPrintf(\" rescan      %15\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n         pwalletMain->SetBestChain(chainActive.GetLocator());\n         nWalletDBUpdated++;\n     }\n@@ -1011,7 +1012,7 @@ bool AppInit2(boost::thread_group& threadGroup, bool fForceServer)\n             LogPrintf(\"Invalid or missing peers.dat; recreating\\n\");\n     }\n \n-    LogPrintf(\"Loaded %i addresses from peers.dat  %\"PRI64d\"ms\\n\",\n+    LogPrintf(\"Loaded %i addresses from peers.dat  %\"PRId64\"ms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n \n     // ********************************************************* Step 11: start node"
      },
      {
        "sha": "864f2f4614eae148ebc9fb1d5fa807d10d084a5e",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,18 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_INIT_H\n #define BITCOIN_INIT_H\n \n #include <string>\n-#include <boost/thread.hpp>\n \n class CWallet;\n \n+namespace boost {\n+    class thread_group;\n+};\n+\n extern std::string strWalletFile;\n extern CWallet* pwalletMain;\n "
      },
      {
        "sha": "2fd68fa56b6601b7e1abb42940649756cc9a17f3",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,13 +2,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"key.h\"\n+\n #include <openssl/bn.h>\n #include <openssl/ecdsa.h>\n-#include <openssl/rand.h>\n #include <openssl/obj_mac.h>\n-\n-#include \"key.h\"\n-\n+#include <openssl/rand.h>\n \n // anonymous namespace with local implementation code (OpenSSL interaction)\n namespace {"
      },
      {
        "sha": "bb3777e384ed36c422625f3ccca5ce7cdbc49047",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,15 +2,17 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n-#include <vector>\n-\n #include \"allocators.h\"\n+#include \"hash.h\"\n #include \"serialize.h\"\n #include \"uint256.h\"\n-#include \"hash.h\"\n+\n+#include <stdexcept>\n+#include <vector>\n \n // secp256k1:\n // const unsigned int PRIVATE_KEY_SIZE = 279;"
      },
      {
        "sha": "05427291e0d106584e4a56becf3f8ed0cec802a7",
        "filename": "src/keystore.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/keystore.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/keystore.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,8 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"keystore.h\"\n+\n+#include \"crypter.h\"\n+#include \"key.h\"\n #include \"script.h\"\n \n+#include <boost/foreach.hpp>\n+\n bool CKeyStore::GetPubKey(const CKeyID &address, CPubKey &vchPubKeyOut) const\n {\n     CKey key;"
      },
      {
        "sha": "8d936bcab74fbcad56500b44e2bee208537ad94e",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,11 +2,13 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_KEYSTORE_H\n #define BITCOIN_KEYSTORE_H\n \n-#include \"crypter.h\"\n+#include \"key.h\"\n #include \"sync.h\"\n+\n #include <boost/signals2/signal.hpp>\n \n class CScript;\n@@ -88,8 +90,10 @@ class CBasicKeyStore : public CKeyStore\n     virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n };\n \n+typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;\n typedef std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char> > > CryptedKeyMap;\n \n+\n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n  */"
      },
      {
        "sha": "39ed63b46320ebf2d4e2c21375a57e6ba1b0a53f",
        "filename": "src/leveldbwrapper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/leveldbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/leveldbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,15 +3,15 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"leveldbwrapper.h\"\n+\n #include \"util.h\"\n \n-#include <leveldb/env.h>\n+#include <boost/filesystem.hpp>\n #include <leveldb/cache.h>\n+#include <leveldb/env.h>\n #include <leveldb/filter_policy.h>\n #include <memenv/memenv.h>\n \n-#include <boost/filesystem.hpp>\n-\n void HandleError(const leveldb::Status &status) throw(leveldb_error) {\n     if (status.ok())\n         return;"
      },
      {
        "sha": "53e9e439bdd7f90a88fe20c12489a9e78a0d2286",
        "filename": "src/leveldbwrapper.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/leveldbwrapper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/leveldbwrapper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/leveldbwrapper.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,12 +7,12 @@\n \n #include \"serialize.h\"\n #include \"util.h\"\n+#include \"version.h\"\n \n+#include <boost/filesystem/path.hpp>\n #include <leveldb/db.h>\n #include <leveldb/write_batch.h>\n \n-#include <boost/filesystem/path.hpp>\n-\n class leveldb_error : public std::runtime_error\n {\n public:"
      },
      {
        "sha": "1623a372b30c861f3e00780893b14b3108fd1fc0",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,12 +1,12 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_LIMITEDMAP_H\n #define BITCOIN_LIMITEDMAP_H\n \n #include <assert.h> // TODO: remove\n #include <map>\n-#include <deque>\n \n /** STL-like map container that only keeps the N elements with the highest value. */\n template <typename K, typename V> class limitedmap"
      },
      {
        "sha": "2a133b3eaea377f861d3017494a9f4da93312f52",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 76,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,20 +3,26 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <boost/algorithm/string/replace.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n+#include \"main.h\"\n \n+#include \"addrman.h\"\n #include \"alert.h\"\n #include \"chainparams.h\"\n #include \"checkpoints.h\"\n #include \"checkqueue.h\"\n-#include \"db.h\"\n #include \"init.h\"\n #include \"net.h\"\n #include \"txdb.h\"\n #include \"txmempool.h\"\n #include \"ui_interface.h\"\n+#include \"util.h\"\n+\n+#include <inttypes.h>\n+#include <stdint.h>\n+\n+#include <boost/algorithm/string/replace.hpp>\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n \n using namespace std;\n using namespace boost;\n@@ -25,16 +31,13 @@ using namespace boost;\n // Global state\n //\n \n-CCriticalSection cs_setpwalletRegistered;\n-set<CWallet*> setpwalletRegistered;\n-\n CCriticalSection cs_main;\n \n CTxMemPool mempool;\n \n map<uint256, CBlockIndex*> mapBlockIndex;\n CChain chainActive;\n-int64 nTimeBestReceived = 0;\n+int64_t nTimeBestReceived = 0;\n int nScriptCheckThreads = 0;\n bool fImporting = false;\n bool fReindex = false;\n@@ -43,9 +46,9 @@ bool fTxIndex = false;\n unsigned int nCoinCacheSize = 5000;\n \n /** Fees smaller than this (in satoshi) are considered zero fee (for transaction creation) */\n-int64 CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n+int64_t CTransaction::nMinTxFee = 10000;  // Override with -mintxfee\n /** Fees smaller than this (in satoshi) are considered zero fee (for relaying) */\n-int64 CTransaction::nMinRelayTxFee = 10000;\n+int64_t CTransaction::nMinRelayTxFee = 10000;\n \n static CMedianFilter<int> cPeerBlockCounts(8, 0); // Amount of blocks that other nodes claim to have\n \n@@ -61,7 +64,7 @@ CScript COINBASE_FLAGS;\n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n // Settings\n-int64 nTransactionFee = 0;\n+int64_t nTransactionFee = 0;\n \n // Internal stuff\n namespace {\n@@ -481,7 +484,7 @@ bool IsStandardTx(const CTransaction& tx, string& reason)\n     return true;\n }\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64 nBlockTime)\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64_t nBlockTime)\n {\n     // Time based nLockTime implemented in 0.1.6\n     if (tx.nLockTime == 0)\n@@ -490,7 +493,7 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64 nBlockTime)\n         nBlockHeight = chainActive.Height();\n     if (nBlockTime == 0)\n         nBlockTime = GetAdjustedTime();\n-    if ((int64)tx.nLockTime < ((int64)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64)nBlockHeight : nBlockTime))\n+    if ((int64_t)tx.nLockTime < ((int64_t)tx.nLockTime < LOCKTIME_THRESHOLD ? (int64_t)nBlockHeight : nBlockTime))\n         return true;\n     BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         if (!txin.IsFinal())\n@@ -501,9 +504,9 @@ bool IsFinalTx(const CTransaction &tx, int nBlockHeight, int64 nBlockTime)\n /** Amount of bitcoins spent by the transaction.\n     @return sum of all outputs (note: does not include fees)\n  */\n-int64 GetValueOut(const CTransaction& tx)\n+int64_t GetValueOut(const CTransaction& tx)\n {\n-    int64 nValueOut = 0;\n+    int64_t nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         nValueOut += txout.nValue;\n@@ -672,7 +675,7 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n         return state.DoS(100, error(\"CTransaction::CheckTransaction() : size limits failed\"));\n \n     // Check for negative or overflow output values\n-    int64 nValueOut = 0;\n+    int64_t nValueOut = 0;\n     BOOST_FOREACH(const CTxOut& txout, tx.vout)\n     {\n         if (txout.nValue < 0)\n@@ -708,13 +711,13 @@ bool CheckTransaction(const CTransaction& tx, CValidationState &state)\n     return true;\n }\n \n-int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode)\n+int64_t GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode)\n {\n     // Base fee is either nMinTxFee or nMinRelayTxFee\n-    int64 nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n+    int64_t nBaseFee = (mode == GMF_RELAY) ? tx.nMinRelayTxFee : tx.nMinTxFee;\n \n     unsigned int nBytes = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n-    int64 nMinFee = (1 + (int64)nBytes / 1000) * nBaseFee;\n+    int64_t nMinFee = (1 + (int64_t)nBytes / 1000) * nBaseFee;\n \n     if (fAllowFree)\n     {\n@@ -842,13 +845,13 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         // you should add code here to check that the transaction does a\n         // reasonable number of ECDSA signature verifications.\n \n-        int64 nFees = view.GetValueIn(tx)-GetValueOut(tx);\n+        int64_t nFees = view.GetValueIn(tx)-GetValueOut(tx);\n         unsigned int nSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n         // Don't accept it if it can't get into a block\n-        int64 txMinFee = GetMinFee(tx, true, GMF_RELAY);\n+        int64_t txMinFee = GetMinFee(tx, true, GMF_RELAY);\n         if (fLimitFree && nFees < txMinFee)\n-            return error(\"AcceptToMemoryPool: : not enough fees %s, %\"PRI64d\" < %\"PRI64d,\n+            return error(\"AcceptToMemoryPool: : not enough fees %s, %\"PRId64\" < %\"PRId64,\n                          hash.ToString().c_str(),\n                          nFees, txMinFee);\n \n@@ -859,8 +862,8 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         {\n             static CCriticalSection csFreeLimiter;\n             static double dFreeCount;\n-            static int64 nLastTime;\n-            int64 nNow = GetTime();\n+            static int64_t nLastTime;\n+            int64_t nNow = GetTime();\n \n             LOCK(csFreeLimiter);\n \n@@ -876,7 +879,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         }\n \n         if (fRejectInsaneFee && nFees > CTransaction::nMinRelayTxFee * 10000)\n-            return error(\"AcceptToMemoryPool: : insane fees %s, %\"PRI64d\" > %\"PRI64d,\n+            return error(\"AcceptToMemoryPool: : insane fees %s, %\"PRId64\" > %\"PRId64,\n                          hash.ToString().c_str(),\n                          nFees, CTransaction::nMinRelayTxFee * 10000);\n \n@@ -1090,25 +1093,25 @@ uint256 static GetOrphanRoot(const CBlockHeader* pblock)\n     return pblock->GetHash();\n }\n \n-int64 GetBlockValue(int nHeight, int64 nFees)\n+int64_t GetBlockValue(int nHeight, int64_t nFees)\n {\n-    int64 nSubsidy = 50 * COIN;\n+    int64_t nSubsidy = 50 * COIN;\n \n     // Subsidy is cut in half every 210,000 blocks which will occur approximately every 4 years.\n     nSubsidy >>= (nHeight / Params().SubsidyHalvingInterval());\n \n     return nSubsidy + nFees;\n }\n \n-static const int64 nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n-static const int64 nTargetSpacing = 10 * 60;\n-static const int64 nInterval = nTargetTimespan / nTargetSpacing;\n+static const int64_t nTargetTimespan = 14 * 24 * 60 * 60; // two weeks\n+static const int64_t nTargetSpacing = 10 * 60;\n+static const int64_t nInterval = nTargetTimespan / nTargetSpacing;\n \n //\n // minimum amount of work that could possibly be required nTime after\n // minimum work required was nBase\n //\n-unsigned int ComputeMinWork(unsigned int nBase, int64 nTime)\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime)\n {\n     const CBigNum &bnLimit = Params().ProofOfWorkLimit();\n     // Testnet has min-difficulty blocks\n@@ -1167,8 +1170,8 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n     assert(pindexFirst);\n \n     // Limit adjustment step\n-    int64 nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n-    LogPrintf(\"  nActualTimespan = %\"PRI64d\"  before bounds\\n\", nActualTimespan);\n+    int64_t nActualTimespan = pindexLast->GetBlockTime() - pindexFirst->GetBlockTime();\n+    LogPrintf(\"  nActualTimespan = %\"PRId64\"  before bounds\\n\", nActualTimespan);\n     if (nActualTimespan < nTargetTimespan/4)\n         nActualTimespan = nTargetTimespan/4;\n     if (nActualTimespan > nTargetTimespan*4)\n@@ -1185,7 +1188,7 @@ unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHead\n \n     /// debug print\n     LogPrintf(\"GetNextWorkRequired RETARGET\\n\");\n-    LogPrintf(\"nTargetTimespan = %\"PRI64d\"    nActualTimespan = %\"PRI64d\"\\n\", nTargetTimespan, nActualTimespan);\n+    LogPrintf(\"nTargetTimespan = %\"PRId64\"    nActualTimespan = %\"PRId64\"\\n\", nTargetTimespan, nActualTimespan);\n     LogPrintf(\"Before: %08x  %s\\n\", pindexLast->nBits, CBigNum().SetCompact(pindexLast->nBits).getuint256().ToString().c_str());\n     LogPrintf(\"After:  %08x  %s\\n\", bnNew.GetCompact(), bnNew.getuint256().ToString().c_str());\n \n@@ -1218,7 +1221,7 @@ bool IsInitialBlockDownload()\n {\n     if (fImporting || fReindex || chainActive.Height() < Checkpoints::GetTotalBlocksEstimate())\n         return true;\n-    static int64 nLastUpdate;\n+    static int64_t nLastUpdate;\n     static CBlockIndex* pindexLastBest;\n     if (chainActive.Tip() != pindexLastBest)\n     {\n@@ -1420,12 +1423,12 @@ const CTxOut &CCoinsViewCache::GetOutputFor(const CTxIn& input)\n     return coins.vout[input.prevout.n];\n }\n \n-int64 CCoinsViewCache::GetValueIn(const CTransaction& tx)\n+int64_t CCoinsViewCache::GetValueIn(const CTransaction& tx)\n {\n     if (tx.IsCoinBase())\n         return 0;\n \n-    int64 nResult = 0;\n+    int64_t nResult = 0;\n     for (unsigned int i = 0; i < tx.vin.size(); i++)\n         nResult += GetOutputFor(tx.vin[i]).nValue;\n \n@@ -1496,8 +1499,8 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n         // While checking, GetBestBlock() refers to the parent block.\n         // This is also true for mempool checks.\n         int nSpendHeight = inputs.GetBestBlock()->nHeight + 1;\n-        int64 nValueIn = 0;\n-        int64 nFees = 0;\n+        int64_t nValueIn = 0;\n+        int64_t nFees = 0;\n         for (unsigned int i = 0; i < tx.vin.size(); i++)\n         {\n             const COutPoint &prevout = tx.vin[i].prevout;\n@@ -1520,7 +1523,7 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, CCoinsViewCach\n             return state.DoS(100, error(\"CheckInputs() : %s value in < value out\", tx.GetHash().ToString().c_str()));\n \n         // Tally transaction fees\n-        int64 nTxFee = nValueIn - GetValueOut(tx);\n+        int64_t nTxFee = nValueIn - GetValueOut(tx);\n         if (nTxFee < 0)\n             return state.DoS(100, error(\"CheckInputs() : %s nTxFee < 0\", tx.GetHash().ToString().c_str()));\n         nFees += nTxFee;\n@@ -1725,7 +1728,7 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n     }\n \n     // BIP16 didn't become active until Apr 1 2012\n-    int64 nBIP16SwitchTime = 1333238400;\n+    int64_t nBIP16SwitchTime = 1333238400;\n     bool fStrictPayToScriptHash = (pindex->nTime >= nBIP16SwitchTime);\n \n     unsigned int flags = SCRIPT_VERIFY_NOCACHE |\n@@ -1735,8 +1738,8 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n \n     CCheckQueueControl<CScriptCheck> control(fScriptChecks && nScriptCheckThreads ? &scriptcheckqueue : NULL);\n \n-    int64 nStart = GetTimeMicros();\n-    int64 nFees = 0;\n+    int64_t nStart = GetTimeMicros();\n+    int64_t nFees = 0;\n     int nInputs = 0;\n     unsigned int nSigOps = 0;\n     CDiskTxPos pos(pindex->GetBlockPos(), GetSizeOfCompactSize(block.vtx.size()));\n@@ -1782,16 +1785,16 @@ bool ConnectBlock(CBlock& block, CValidationState& state, CBlockIndex* pindex, C\n         vPos.push_back(std::make_pair(block.GetTxHash(i), pos));\n         pos.nTxOffset += ::GetSerializeSize(tx, SER_DISK, CLIENT_VERSION);\n     }\n-    int64 nTime = GetTimeMicros() - nStart;\n+    int64_t nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n         LogPrintf(\"- Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin)\\n\", (unsigned)block.vtx.size(), 0.001 * nTime, 0.001 * nTime / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * nTime / (nInputs-1));\n \n     if (GetValueOut(block.vtx[0]) > GetBlockValue(pindex->nHeight, nFees))\n-        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRI64d\" vs limit=%\"PRI64d\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n+        return state.DoS(100, error(\"ConnectBlock() : coinbase pays too much (actual=%\"PRId64\" vs limit=%\"PRId64\")\", GetValueOut(block.vtx[0]), GetBlockValue(pindex->nHeight, nFees)));\n \n     if (!control.Wait())\n         return state.DoS(100, false);\n-    int64 nTime2 = GetTimeMicros() - nStart;\n+    int64_t nTime2 = GetTimeMicros() - nStart;\n     if (fBenchmark)\n         LogPrintf(\"- Verify %u txins: %.2fms (%.3fms/txin)\\n\", nInputs - 1, 0.001 * nTime2, nInputs <= 1 ? 0 : 0.001 * nTime2 / (nInputs-1));\n \n@@ -1879,7 +1882,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         CBlock block;\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n-        int64 nStart = GetTimeMicros();\n+        int64_t nStart = GetTimeMicros();\n         if (!DisconnectBlock(block, state, pindex, view))\n             return error(\"SetBestBlock() : DisconnectBlock %s failed\", pindex->GetBlockHash().ToString().c_str());\n         if (fBenchmark)\n@@ -1899,7 +1902,7 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n         CBlock block;\n         if (!ReadBlockFromDisk(block, pindex))\n             return state.Abort(_(\"Failed to read block\"));\n-        int64 nStart = GetTimeMicros();\n+        int64_t nStart = GetTimeMicros();\n         if (!ConnectBlock(block, state, pindex, view)) {\n             if (state.IsInvalid()) {\n                 InvalidChainFound(pindexNew);\n@@ -1916,10 +1919,10 @@ bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew)\n     }\n \n     // Flush changes to global coin state\n-    int64 nStart = GetTimeMicros();\n+    int64_t nStart = GetTimeMicros();\n     int nModified = view.GetCacheSize();\n     assert(view.Flush());\n-    int64 nTime = GetTimeMicros() - nStart;\n+    int64_t nTime = GetTimeMicros() - nStart;\n     if (fBenchmark)\n         LogPrintf(\"- Flush %i transactions: %.2fms (%.4fms/tx)\\n\", nModified, 0.001 * nTime, 0.001 * nTime / nModified);\n \n@@ -2056,7 +2059,7 @@ bool AddToBlockIndex(CBlock& block, CValidationState& state, const CDiskBlockPos\n }\n \n \n-bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64 nTime, bool fKnown = false)\n+bool FindBlockPos(CValidationState &state, CDiskBlockPos &pos, unsigned int nAddSize, unsigned int nHeight, uint64_t nTime, bool fKnown = false)\n {\n     bool fUpdatedLast = false;\n \n@@ -2309,7 +2312,7 @@ bool CBlockIndex::IsSuperMajority(int minVersion, const CBlockIndex* pstart, uns\n     return (nFound >= nRequired);\n }\n \n-int64 CBlockIndex::GetMedianTime() const\n+int64_t CBlockIndex::GetMedianTime() const\n {\n     const CBlockIndex* pindex = this;\n     for (int i = 0; i < nMedianTimeSpan/2; i++)\n@@ -2349,7 +2352,7 @@ bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBl\n     if (pcheckpoint && pblock->hashPrevBlock != (chainActive.Tip() ? chainActive.Tip()->GetBlockHash() : uint256(0)))\n     {\n         // Extra checks to prevent \"fill up memory by spamming with bogus blocks\"\n-        int64 deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n+        int64_t deltaTime = pblock->GetBlockTime() - pcheckpoint->nTime;\n         if (deltaTime < 0)\n         {\n             return state.DoS(100, error(\"ProcessBlock() : block with timestamp before last checkpoint\"));\n@@ -2579,9 +2582,9 @@ bool AbortNode(const std::string &strMessage) {\n     return false;\n }\n \n-bool CheckDiskSpace(uint64 nAdditionalBytes)\n+bool CheckDiskSpace(uint64_t nAdditionalBytes)\n {\n-    uint64 nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n+    uint64_t nFreeBytesAvailable = filesystem::space(GetDataDir()).available;\n \n     // Check for nMinDiskSpace bytes (currently 50MB)\n     if (nFreeBytesAvailable < nMinDiskSpace + nAdditionalBytes)\n@@ -2888,12 +2891,12 @@ void PrintBlockTree()\n \n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n {\n-    int64 nStart = GetTimeMillis();\n+    int64_t nStart = GetTimeMillis();\n \n     int nLoaded = 0;\n     try {\n         CBufferedFile blkdat(fileIn, 2*MAX_BLOCK_SIZE, MAX_BLOCK_SIZE+8, SER_DISK, CLIENT_VERSION);\n-        uint64 nStartByte = 0;\n+        uint64_t nStartByte = 0;\n         if (dbp) {\n             // (try to) skip already indexed part\n             CBlockFileInfo info;\n@@ -2902,7 +2905,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n                 blkdat.Seek(info.nSize);\n             }\n         }\n-        uint64 nRewind = blkdat.GetPos();\n+        uint64_t nRewind = blkdat.GetPos();\n         while (blkdat.good() && !blkdat.eof()) {\n             boost::this_thread::interruption_point();\n \n@@ -2928,7 +2931,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             }\n             try {\n                 // read block\n-                uint64 nBlockPos = blkdat.GetPos();\n+                uint64_t nBlockPos = blkdat.GetPos();\n                 blkdat.SetLimit(nBlockPos + nSize);\n                 CBlock block;\n                 blkdat >> block;\n@@ -2954,7 +2957,7 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n         AbortNode(_(\"Error: system error: \") + e.what());\n     }\n     if (nLoaded > 0)\n-        LogPrintf(\"Loaded %i blocks from external file in %\"PRI64d\"ms\\n\", nLoaded, GetTimeMillis() - nStart);\n+        LogPrintf(\"Loaded %i blocks from external file in %\"PRId64\"ms\\n\", nLoaded, GetTimeMillis() - nStart);\n     return nLoaded > 0;\n }\n \n@@ -2972,9 +2975,6 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n // CAlert\n //\n \n-extern map<uint256, CAlert> mapAlerts;\n-extern CCriticalSection cs_mapAlerts;\n-\n string GetWarnings(string strFor)\n {\n     int nPriority = 0;\n@@ -3197,10 +3197,10 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n             return false;\n         }\n \n-        int64 nTime;\n+        int64_t nTime;\n         CAddress addrMe;\n         CAddress addrFrom;\n-        uint64 nNonce = 1;\n+        uint64_t nNonce = 1;\n         vRecv >> pfrom->nVersion >> pfrom->nServices >> nTime >> addrMe;\n         if (pfrom->nVersion < MIN_PEER_PROTO_VERSION)\n         {\n@@ -3321,8 +3321,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n         // Store the new addresses\n         vector<CAddress> vAddrOk;\n-        int64 nNow = GetAdjustedTime();\n-        int64 nSince = nNow - 10 * 60;\n+        int64_t nNow = GetAdjustedTime();\n+        int64_t nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n             boost::this_thread::interruption_point();\n@@ -3341,7 +3341,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                     static uint256 hashSalt;\n                     if (hashSalt == 0)\n                         hashSalt = GetRandHash();\n-                    uint64 hashAddr = addr.GetHash();\n+                    uint64_t hashAddr = addr.GetHash();\n                     uint256 hashRand = hashSalt ^ (hashAddr<<32) ^ ((GetTime()+hashAddr)/(24*60*60));\n                     hashRand = Hash(BEGIN(hashRand), END(hashRand));\n                     multimap<uint256, CNode*> mapMix;\n@@ -3655,7 +3655,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n     {\n         if (pfrom->nVersion > BIP0031_VERSION)\n         {\n-            uint64 nonce = 0;\n+            uint64_t nonce = 0;\n             vRecv >> nonce;\n             // Echo the message back with the nonce. This allows for two useful features:\n             //\n@@ -3675,8 +3675,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n \n     else if (strCommand == \"pong\")\n     {\n-        int64 pingUsecEnd = GetTimeMicros();\n-        uint64 nonce = 0;\n+        int64_t pingUsecEnd = GetTimeMicros();\n+        uint64_t nonce = 0;\n         size_t nAvail = vRecv.in_avail();\n         bool bPingFinished = false;\n         std::string sProblem;\n@@ -3689,7 +3689,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n                 if (nonce == pfrom->nPingNonceSent) {\n                     // Matching pong received, this ping is no longer outstanding\n                     bPingFinished = true;\n-                    int64 pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n+                    int64_t pingUsecTime = pingUsecEnd - pfrom->nPingUsecStart;\n                     if (pingUsecTime > 0) {\n                         // Successful ping time measurement, replace previous\n                         pfrom->nPingUsecTime = pingUsecTime;\n@@ -3716,7 +3716,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         }\n         \n         if (!(sProblem.empty())) {\n-            LogPrint(\"net\", \"pong %s %s: %s, %\"PRI64x\" expected, %\"PRI64x\" received, %\"PRIszu\" bytes\\n\",\n+            LogPrint(\"net\", \"pong %s %s: %s, %\"PRIx64\" expected, %\"PRIx64\" received, %\"PRIszu\" bytes\\n\",\n                 pfrom->addr.ToString().c_str(),\n                 pfrom->strSubVer.c_str(),\n                 sProblem.c_str(),\n@@ -3965,7 +3965,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n             pingSend = true;\n         }\n         if (pingSend) {\n-            uint64 nonce = 0;\n+            uint64_t nonce = 0;\n             while (nonce == 0) {\n                 RAND_bytes((unsigned char*)&nonce, sizeof(nonce));\n             }\n@@ -3983,7 +3983,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         }\n \n         // Address refresh broadcast\n-        static int64 nLastRebroadcast;\n+        static int64_t nLastRebroadcast;\n         if (!IsInitialBlockDownload() && (GetTime() - nLastRebroadcast > 24 * 60 * 60))\n         {\n             {\n@@ -4103,7 +4103,7 @@ bool SendMessages(CNode* pto, bool fSendTrickle)\n         // Message: getdata\n         //\n         vector<CInv> vGetData;\n-        int64 nNow = GetTime() * 1000000;\n+        int64_t nNow = GetTime() * 1000000;\n         while (!pto->mapAskFor.empty() && (*pto->mapAskFor.begin()).first <= nNow)\n         {\n             const CInv& inv = (*pto->mapAskFor.begin()).second;"
      },
      {
        "sha": "d7178026186ed0e1fc3332f1bcf941323ef9c5a4",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 44,
        "deletions": 39,
        "changes": 83,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,29 +2,35 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_MAIN_H\n #define BITCOIN_MAIN_H\n \n #if defined(HAVE_CONFIG_H)\n #include \"bitcoin-config.h\"\n #endif\n \n-#include \"core.h\"\n #include \"bignum.h\"\n-#include \"sync.h\"\n-#include \"txmempool.h\"\n+#include \"chainparams.h\"\n+#include \"core.h\"\n #include \"net.h\"\n #include \"script.h\"\n+#include \"sync.h\"\n+#include \"txmempool.h\"\n+#include \"uint256.h\"\n \n-#include <list>\n+#include <algorithm>\n+#include <exception>\n+#include <map>\n+#include <set>\n+#include <stdint.h>\n+#include <string>\n+#include <utility>\n+#include <vector>\n \n-class CBlock;\n class CBlockIndex;\n+class CBloomFilter;\n class CInv;\n-class CKeyItem;\n-class CNode;\n-class CReserveKey;\n-class CWallet;\n \n /** The maximum allowed size for a serialized block, in bytes (network rule) */\n static const unsigned int MAX_BLOCK_SIZE = 1000000;\n@@ -45,8 +51,8 @@ static const unsigned int UNDOFILE_CHUNK_SIZE = 0x100000; // 1 MiB\n /** Fake height value used in CCoins to signify they are only in the memory pool (since 0.8) */\n static const unsigned int MEMPOOL_HEIGHT = 0x7FFFFFFF;\n /** No amount larger than this (in satoshi) is valid */\n-static const int64 MAX_MONEY = 21000000 * COIN;\n-inline bool MoneyRange(int64 nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n+static const int64_t MAX_MONEY = 21000000 * COIN;\n+inline bool MoneyRange(int64_t nValue) { return (nValue >= 0 && nValue <= MAX_MONEY); }\n /** Coinbase transaction outputs can only be spent after this number of new blocks (network rule) */\n static const int COINBASE_MATURITY = 100;\n /** Threshold for nLockTime: below this value it is interpreted as block number, otherwise as UNIX timestamp. */\n@@ -72,10 +78,10 @@ extern CScript COINBASE_FLAGS;\n extern CCriticalSection cs_main;\n extern CTxMemPool mempool;\n extern std::map<uint256, CBlockIndex*> mapBlockIndex;\n-extern uint64 nLastBlockTx;\n-extern uint64 nLastBlockSize;\n+extern uint64_t nLastBlockTx;\n+extern uint64_t nLastBlockSize;\n extern const std::string strMessageMagic;\n-extern int64 nTimeBestReceived;\n+extern int64_t nTimeBestReceived;\n extern bool fImporting;\n extern bool fReindex;\n extern bool fBenchmark;\n@@ -85,17 +91,15 @@ extern unsigned int nCoinCacheSize;\n extern bool fHaveGUI;\n \n // Settings\n-extern int64 nTransactionFee;\n+extern int64_t nTransactionFee;\n \n // Minimum disk space required - used in CheckDiskSpace()\n-static const uint64 nMinDiskSpace = 52428800;\n+static const uint64_t nMinDiskSpace = 52428800;\n \n \n-class CReserveKey;\n class CCoinsDB;\n class CBlockTreeDB;\n struct CDiskBlockPos;\n-class CCoins;\n class CTxUndo;\n class CCoinsView;\n class CCoinsViewCache;\n@@ -124,7 +128,7 @@ void PushGetBlocks(CNode* pnode, CBlockIndex* pindexBegin, uint256 hashEnd);\n /** Process an incoming block */\n bool ProcessBlock(CValidationState &state, CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n /** Check whether enough disk space is available for an incoming block */\n-bool CheckDiskSpace(uint64 nAdditionalBytes = 0);\n+bool CheckDiskSpace(uint64_t nAdditionalBytes = 0);\n /** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n /** Open an undo file (rev?????.dat) */\n@@ -150,7 +154,7 @@ void ThreadScriptCheck();\n /** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n /** Calculate the minimum amount of work a received block needs, without knowing its direct parent */\n-unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n+unsigned int ComputeMinWork(unsigned int nBase, int64_t nTime);\n /** Get the number of active peers */\n int GetNumBlocksOfPeers();\n /** Check whether we are doing an initial block download (synchronizing from disk or network) */\n@@ -163,7 +167,7 @@ bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, b\n bool SetBestChain(CValidationState &state, CBlockIndex* pindexNew);\n /** Find the best known block, and make it the tip of the block chain */\n bool ConnectBestBlock(CValidationState &state);\n-int64 GetBlockValue(int nHeight, int64 nFees);\n+int64_t GetBlockValue(int nHeight, int64_t nFees);\n unsigned int GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlockHeader *pblock);\n \n void UpdateTime(CBlockHeader& block, const CBlockIndex* pindexPrev);\n@@ -247,7 +251,7 @@ enum GetMinFee_mode\n     GMF_SEND,\n };\n \n-int64 GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode);\n+int64_t GetMinFee(const CTransaction& tx, bool fAllowFree, enum GetMinFee_mode mode);\n \n //\n // Check transaction inputs, and make sure any\n@@ -307,12 +311,12 @@ bool CheckTransaction(const CTransaction& tx, CValidationState& state);\n */\n bool IsStandardTx(const CTransaction& tx, std::string& reason);\n \n-bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64 nBlockTime = 0);\n+bool IsFinalTx(const CTransaction &tx, int nBlockHeight = 0, int64_t nBlockTime = 0);\n \n /** Amount of bitcoins spent by the transaction.\n     @return sum of all outputs (note: does not include fees)\n  */\n-int64 GetValueOut(const CTransaction& tx);\n+int64_t GetValueOut(const CTransaction& tx);\n \n /** Undo information for a CBlock */\n class CBlockUndo\n@@ -600,8 +604,8 @@ class CBlockFileInfo\n     unsigned int nUndoSize;    // number of used bytes in the undo file\n     unsigned int nHeightFirst; // lowest height of block in file\n     unsigned int nHeightLast;  // highest height of block in file\n-    uint64 nTimeFirst;         // earliest time of block in file\n-    uint64 nTimeLast;          // latest time of block in file\n+    uint64_t nTimeFirst;         // earliest time of block in file\n+    uint64_t nTimeLast;          // latest time of block in file\n \n     IMPLEMENT_SERIALIZE(\n         READWRITE(VARINT(nBlocks));\n@@ -632,7 +636,7 @@ class CBlockFileInfo\n      }\n \n      // update statistics (does not update nSize)\n-     void AddBlock(unsigned int nHeightIn, uint64 nTimeIn) {\n+     void AddBlock(unsigned int nHeightIn, uint64_t nTimeIn) {\n          if (nBlocks==0 || nHeightFirst > nHeightIn)\n              nHeightFirst = nHeightIn;\n          if (nBlocks==0 || nTimeFirst > nTimeIn)\n@@ -786,9 +790,9 @@ class CBlockIndex\n         return *phashBlock;\n     }\n \n-    int64 GetBlockTime() const\n+    int64_t GetBlockTime() const\n     {\n-        return (int64)nTime;\n+        return (int64_t)nTime;\n     }\n \n     CBigNum GetBlockWork() const\n@@ -807,11 +811,11 @@ class CBlockIndex\n \n     enum { nMedianTimeSpan=11 };\n \n-    int64 GetMedianTimePast() const\n+    int64_t GetMedianTimePast() const\n     {\n-        int64 pmedian[nMedianTimeSpan];\n-        int64* pbegin = &pmedian[nMedianTimeSpan];\n-        int64* pend = &pmedian[nMedianTimeSpan];\n+        int64_t pmedian[nMedianTimeSpan];\n+        int64_t* pbegin = &pmedian[nMedianTimeSpan];\n+        int64_t* pend = &pmedian[nMedianTimeSpan];\n \n         const CBlockIndex* pindex = this;\n         for (int i = 0; i < nMedianTimeSpan && pindex; i++, pindex = pindex->pprev)\n@@ -821,7 +825,7 @@ class CBlockIndex\n         return pbegin[(pend - pbegin)/2];\n     }\n \n-    int64 GetMedianTime() const;\n+    int64_t GetMedianTime() const;\n \n     /**\n      * Returns true if there are nRequired or more blocks of minVersion or above\n@@ -1035,11 +1039,11 @@ struct CCoinsStats\n {\n     int nHeight;\n     uint256 hashBlock;\n-    uint64 nTransactions;\n-    uint64 nTransactionOutputs;\n-    uint64 nSerializedSize;\n+    uint64_t nTransactions;\n+    uint64_t nTransactionOutputs;\n+    uint64_t nSerializedSize;\n     uint256 hashSerialized;\n-    int64 nTotalAmount;\n+    int64_t nTotalAmount;\n \n     CCoinsStats() : nHeight(0), hashBlock(0), nTransactions(0), nTransactionOutputs(0), nSerializedSize(0), hashSerialized(0), nTotalAmount(0) {}\n };\n@@ -1130,7 +1134,8 @@ class CCoinsViewCache : public CCoinsViewBacked\n         @return\tSum of value of all inputs (scriptSigs)\n         @see CTransaction::FetchInputs\n      */\n-    int64 GetValueIn(const CTransaction& tx);\n+    int64_t GetValueIn(const CTransaction& tx);\n+\n \n     // Check whether all prevouts of the transaction are present in the UTXO set represented by this view\n     bool HaveInputs(const CTransaction& tx);"
      },
      {
        "sha": "397c95c6248bcf23c0f55ab063c5836a6c7dd2b7",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 13,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,10 +4,16 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"miner.h\"\n+\n+#include \"core.h\"\n #include \"main.h\"\n+#include \"net.h\"\n+#include \"wallet.h\"\n+\n+#include <stdint.h>\n \n double dHashesPerSec = 0.0;\n-int64 nHPSTimerStart = 0;\n+int64_t nHPSTimerStart = 0;\n \n //////////////////////////////////////////////////////////////////////////////\n //\n@@ -110,8 +116,8 @@ class COrphan\n };\n \n \n-uint64 nLastBlockTx = 0;\n-uint64 nLastBlockSize = 0;\n+uint64_t nLastBlockTx = 0;\n+uint64_t nLastBlockSize = 0;\n \n // We want to sort transactions by priority and fee, so:\n typedef boost::tuple<double, double, CTransaction*> TxPriority;\n@@ -173,7 +179,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n     nBlockMinSize = std::min(nBlockMaxSize, nBlockMinSize);\n \n     // Collect memory pool transactions into the block\n-    int64 nFees = 0;\n+    int64_t nFees = 0;\n     {\n         LOCK2(cs_main, mempool.cs);\n         CBlockIndex* pindexPrev = chainActive.Tip();\n@@ -195,7 +201,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n             COrphan* porphan = NULL;\n             double dPriority = 0;\n-            int64 nTotalIn = 0;\n+            int64_t nTotalIn = 0;\n             bool fMissingInputs = false;\n             BOOST_FOREACH(const CTxIn& txin, tx.vin)\n             {\n@@ -229,7 +235,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n                 }\n                 const CCoins &coins = view.GetCoins(txin.prevout.hash);\n \n-                int64 nValueIn = coins.vout[txin.prevout.n].nValue;\n+                int64_t nValueIn = coins.vout[txin.prevout.n].nValue;\n                 nTotalIn += nValueIn;\n \n                 int nConf = pindexPrev->nHeight - coins.nHeight + 1;\n@@ -269,8 +275,8 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n         }\n \n         // Collect transactions into block\n-        uint64 nBlockSize = 1000;\n-        uint64 nBlockTx = 0;\n+        uint64_t nBlockSize = 1000;\n+        uint64_t nBlockTx = 0;\n         int nBlockSigOps = 100;\n         bool fSortedByFee = (nBlockPrioritySize <= 0);\n \n@@ -314,7 +320,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n             if (!view.HaveInputs(tx))\n                 continue;\n \n-            int64 nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n+            int64_t nTxFees = view.GetValueIn(tx)-GetValueOut(tx);\n \n             nTxSigOps += GetP2SHSigOpCount(tx, view);\n             if (nBlockSigOps + nTxSigOps >= MAX_BLOCK_SIGOPS)\n@@ -363,7 +369,7 @@ CBlockTemplate* CreateNewBlock(const CScript& scriptPubKeyIn)\n \n         nLastBlockTx = nBlockTx;\n         nLastBlockSize = nBlockSize;\n-        LogPrintf(\"CreateNewBlock(): total size %\"PRI64u\"\\n\", nBlockSize);\n+        LogPrintf(\"CreateNewBlock(): total size %\"PRIu64\"\\n\", nBlockSize);\n \n         pblock->vtx[0].vout[0].nValue = GetBlockValue(pindexPrev->nHeight+1, nFees);\n         pblocktemplate->vTxFees[0] = -nFees;\n@@ -550,7 +556,7 @@ void static BitcoinMiner(CWallet *pwallet)\n         //\n         // Search\n         //\n-        int64 nStart = GetTime();\n+        int64_t nStart = GetTime();\n         uint256 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n         uint256 hashbuf[2];\n         uint256& hash = *alignup<16>(hashbuf);\n@@ -589,7 +595,7 @@ void static BitcoinMiner(CWallet *pwallet)\n             }\n \n             // Meter hashes/sec\n-            static int64 nHashCounter;\n+            static int64_t nHashCounter;\n             if (nHPSTimerStart == 0)\n             {\n                 nHPSTimerStart = GetTimeMillis();\n@@ -607,7 +613,7 @@ void static BitcoinMiner(CWallet *pwallet)\n                         dHashesPerSec = 1000.0 * nHashCounter / (GetTimeMillis() - nHPSTimerStart);\n                         nHPSTimerStart = GetTimeMillis();\n                         nHashCounter = 0;\n-                        static int64 nLogTime;\n+                        static int64_t nLogTime;\n                         if (GetTime() - nLogTime > 30 * 60)\n                         {\n                             nLogTime = GetTime();"
      },
      {
        "sha": "2d953a16ae337253971c1c3e53d452f637f3013a",
        "filename": "src/miner.h",
        "status": "modified",
        "additions": 10,
        "deletions": 3,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/miner.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/miner.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,11 +2,18 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_MINER_H\n #define BITCOIN_MINER_H\n \n-#include \"core.h\"\n-#include \"wallet.h\"\n+#include <stdint.h>\n+\n+class CBlock;\n+class CBlockIndex;\n+class CBlockTemplate;\n+class CReserveKey;\n+class CScript;\n+class CWallet;\n \n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n@@ -23,6 +30,6 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n extern double dHashesPerSec;\n-extern int64 nHPSTimerStart;\n+extern int64_t nHPSTimerStart;\n \n #endif // BITCOIN_MINER_H"
      },
      {
        "sha": "c36a0c8f37992d74b44d1c3ecf93e4c867484f8b",
        "filename": "src/mruset.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/mruset.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/mruset.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/mruset.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,11 +1,13 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_MRUSET_H\n #define BITCOIN_MRUSET_H\n \n-#include <set>\n #include <deque>\n+#include <set>\n+#include <utility>\n \n /** STL-like set container that only keeps the most recent N elements. */\n template <typename T> class mruset"
      },
      {
        "sha": "954fe5947ca73e03ff8070cf982bc8ca23b66f35",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 32,
        "deletions": 30,
        "changes": 62,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,32 +7,34 @@\n #include \"bitcoin-config.h\"\n #endif\n \n-#include \"chainparams.h\"\n-#include \"db.h\"\n #include \"net.h\"\n-#include \"core.h\"\n+\n #include \"addrman.h\"\n+#include \"chainparams.h\"\n+#include \"core.h\"\n+#include \"db.h\"\n #include \"ui_interface.h\"\n-#include \"script.h\"\n+\n+#include <inttypes.h>\n+#include <stdint.h>\n \n #ifdef WIN32\n #include <string.h>\n-#endif\n-\n-#ifndef WIN32\n+#else\n #include <fcntl.h>\n #endif\n \n #ifdef USE_UPNP\n-#include <miniupnpc/miniwget.h>\n #include <miniupnpc/miniupnpc.h>\n+#include <miniupnpc/miniwget.h>\n #include <miniupnpc/upnpcommands.h>\n #include <miniupnpc/upnperrors.h>\n #endif\n \n // Dump addresses to peers.dat every 15 minutes (900s)\n #define DUMP_ADDRESSES_INTERVAL 900\n-#if !defined(HAVE_MSG_NOSIGNAL)\n+\n+#if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n \n@@ -53,24 +55,24 @@ struct LocalServiceInfo {\n // Global state variables\n //\n bool fDiscover = true;\n-uint64 nLocalServices = NODE_NETWORK;\n+uint64_t nLocalServices = NODE_NETWORK;\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n static CNode* pnodeSync = NULL;\n-uint64 nLocalHostNonce = 0;\n+uint64_t nLocalHostNonce = 0;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n int nMaxConnections = 125;\n \n vector<CNode*> vNodes;\n CCriticalSection cs_vNodes;\n map<CInv, CDataStream> mapRelay;\n-deque<pair<int64, CInv> > vRelayExpiration;\n+deque<pair<int64_t, CInv> > vRelayExpiration;\n CCriticalSection cs_mapRelay;\n-limitedmap<CInv, int64> mapAlreadyAskedFor(MAX_INV_SZ);\n+limitedmap<CInv, int64_t> mapAlreadyAskedFor(MAX_INV_SZ);\n \n static deque<string> vOneShots;\n CCriticalSection cs_vOneShots;\n@@ -426,8 +428,8 @@ void AddressCurrentlyConnected(const CService& addr)\n \n \n \n-uint64 CNode::nTotalBytesRecv = 0;\n-uint64 CNode::nTotalBytesSent = 0;\n+uint64_t CNode::nTotalBytesRecv = 0;\n+uint64_t CNode::nTotalBytesSent = 0;\n CCriticalSection CNode::cs_totalBytesRecv;\n CCriticalSection CNode::cs_totalBytesSent;\n \n@@ -545,7 +547,7 @@ void CNode::PushVersion()\n     int nBestHeight = g_signals.GetHeight().get_value_or(0);\n \n     /// when NTP implemented, change to just nTime = GetAdjustedTime()\n-    int64 nTime = (fInbound ? GetAdjustedTime() : GetTime());\n+    int64_t nTime = (fInbound ? GetAdjustedTime() : GetTime());\n     CAddress addrYou = (addr.IsRoutable() && !IsProxy(addr) ? addr : CAddress(CService(\"0.0.0.0\",0)));\n     CAddress addrMe = GetLocalAddress(&addr);\n     RAND_bytes((unsigned char*)&nLocalHostNonce, sizeof(nLocalHostNonce));\n@@ -558,7 +560,7 @@ void CNode::PushVersion()\n \n \n \n-std::map<CNetAddr, int64> CNode::setBanned;\n+std::map<CNetAddr, int64_t> CNode::setBanned;\n CCriticalSection CNode::cs_setBanned;\n \n void CNode::ClearBanned()\n@@ -571,10 +573,10 @@ bool CNode::IsBanned(CNetAddr ip)\n     bool fResult = false;\n     {\n         LOCK(cs_setBanned);\n-        std::map<CNetAddr, int64>::iterator i = setBanned.find(ip);\n+        std::map<CNetAddr, int64_t>::iterator i = setBanned.find(ip);\n         if (i != setBanned.end())\n         {\n-            int64 t = (*i).second;\n+            int64_t t = (*i).second;\n             if (GetTime() < t)\n                 fResult = true;\n         }\n@@ -593,7 +595,7 @@ bool CNode::Misbehaving(int howmuch)\n     nMisbehavior += howmuch;\n     if (nMisbehavior >= GetArg(\"-banscore\", 100))\n     {\n-        int64 banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n+        int64_t banTime = GetTime()+GetArg(\"-bantime\", 60*60*24);  // Default 24-hour ban\n         LogPrintf(\"Misbehaving: %s (%d -> %d) DISCONNECTING\\n\", addr.ToString().c_str(), nMisbehavior-howmuch, nMisbehavior);\n         {\n             LOCK(cs_setBanned);\n@@ -631,7 +633,7 @@ void CNode::copyStats(CNodeStats &stats)\n     // since pingtime does not update until the ping is complete, which might take a while.\n     // So, if a ping is taking an unusually long time in flight,\n     // the caller can immediately detect that this is happening.\n-    int64 nPingUsecWait = 0;\n+    int64_t nPingUsecWait = 0;\n     if ((0 != nPingNonceSent) && (0 != nPingUsecStart)) {\n         nPingUsecWait = GetTimeMicros() - nPingUsecStart;\n     }\n@@ -1252,12 +1254,12 @@ void ThreadDNSAddressSeed()\n \n void DumpAddresses()\n {\n-    int64 nStart = GetTimeMillis();\n+    int64_t nStart = GetTimeMillis();\n \n     CAddrDB adb;\n     adb.Write(addrman);\n \n-    LogPrint(\"net\", \"Flushed %d addresses to peers.dat  %\"PRI64d\"ms\\n\",\n+    LogPrint(\"net\", \"Flushed %d addresses to peers.dat  %\"PRId64\"ms\\n\",\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n@@ -1284,7 +1286,7 @@ void ThreadOpenConnections()\n     // Connect to specific addresses\n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n     {\n-        for (int64 nLoop = 0;; nLoop++)\n+        for (int64_t nLoop = 0;; nLoop++)\n         {\n             ProcessOneShot();\n             BOOST_FOREACH(string strAddr, mapMultiArgs[\"-connect\"])\n@@ -1301,7 +1303,7 @@ void ThreadOpenConnections()\n     }\n \n     // Initiate network connections\n-    int64 nStart = GetTime();\n+    int64_t nStart = GetTime();\n     while (true)\n     {\n         ProcessOneShot();\n@@ -1340,7 +1342,7 @@ void ThreadOpenConnections()\n             }\n         }\n \n-        int64 nANow = GetAdjustedTime();\n+        int64_t nANow = GetAdjustedTime();\n \n         int nTries = 0;\n         while (true)\n@@ -1885,25 +1887,25 @@ void RelayTransaction(const CTransaction& tx, const uint256& hash, const CDataSt\n     }\n }\n \n-void CNode::RecordBytesRecv(uint64 bytes)\n+void CNode::RecordBytesRecv(uint64_t bytes)\n {\n     LOCK(cs_totalBytesRecv);\n     nTotalBytesRecv += bytes;\n }\n \n-void CNode::RecordBytesSent(uint64 bytes)\n+void CNode::RecordBytesSent(uint64_t bytes)\n {\n     LOCK(cs_totalBytesSent);\n     nTotalBytesSent += bytes;\n }\n \n-uint64 CNode::GetTotalBytesRecv()\n+uint64_t CNode::GetTotalBytesRecv()\n {\n     LOCK(cs_totalBytesRecv);\n     return nTotalBytesRecv;\n }\n \n-uint64 CNode::GetTotalBytesSent()\n+uint64_t CNode::GetTotalBytesSent()\n {\n     LOCK(cs_totalBytesSent);\n     return nTotalBytesSent;"
      },
      {
        "sha": "b07c10610dbdad015f54e72277d8409017fb38f9",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 59,
        "deletions": 48,
        "changes": 107,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,34 +2,45 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_NET_H\n #define BITCOIN_NET_H\n \n+#include \"bloom.h\"\n+#include \"compat.h\"\n+#include \"hash.h\"\n+#include \"limitedmap.h\"\n+#include \"mruset.h\"\n+#include \"netbase.h\"\n+#include \"protocol.h\"\n+#include \"sync.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n #include <deque>\n-#include <boost/array.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/signals2/signal.hpp>\n-#include <openssl/rand.h>\n+#include <inttypes.h>\n+#include <stdint.h>\n \n #ifndef WIN32\n #include <arpa/inet.h>\n #endif\n \n-#include \"mruset.h\"\n-#include \"limitedmap.h\"\n-#include \"netbase.h\"\n-#include \"protocol.h\"\n-#include \"addrman.h\"\n-#include \"hash.h\"\n-#include \"bloom.h\"\n-\n-/** The maximum number of entries in an 'inv' protocol message */\n-static const unsigned int MAX_INV_SZ = 50000;\n+//#include <boost/array.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/signals2/signal.hpp>\n+#include <openssl/rand.h>\n \n-class CNode;\n+class CAddrMan;\n class CBlockIndex;\n+class CNetAddr;\n+class CNode;\n \n+namespace boost {\n+    class thread_group;\n+}\n \n+/** The maximum number of entries in an 'inv' protocol message */\n+static const unsigned int MAX_INV_SZ = 50000;\n \n inline unsigned int ReceiveFloodSize() { return 1000*GetArg(\"-maxreceivebuffer\", 5*1000); }\n inline unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", 1*1000); }\n@@ -85,17 +96,17 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n \n extern bool fDiscover;\n-extern uint64 nLocalServices;\n-extern uint64 nLocalHostNonce;\n+extern uint64_t nLocalServices;\n+extern uint64_t nLocalHostNonce;\n extern CAddrMan addrman;\n extern int nMaxConnections;\n \n extern std::vector<CNode*> vNodes;\n extern CCriticalSection cs_vNodes;\n extern std::map<CInv, CDataStream> mapRelay;\n-extern std::deque<std::pair<int64, CInv> > vRelayExpiration;\n+extern std::deque<std::pair<int64_t, CInv> > vRelayExpiration;\n extern CCriticalSection cs_mapRelay;\n-extern limitedmap<CInv, int64> mapAlreadyAskedFor;\n+extern limitedmap<CInv, int64_t> mapAlreadyAskedFor;\n \n extern std::vector<std::string> vAddedNodes;\n extern CCriticalSection cs_vAddedNodes;\n@@ -106,18 +117,18 @@ extern CCriticalSection cs_vAddedNodes;\n class CNodeStats\n {\n public:\n-    uint64 nServices;\n-    int64 nLastSend;\n-    int64 nLastRecv;\n-    int64 nTimeConnected;\n+    uint64_t nServices;\n+    int64_t nLastSend;\n+    int64_t nLastRecv;\n+    int64_t nTimeConnected;\n     std::string addrName;\n     int nVersion;\n     std::string strSubVer;\n     bool fInbound;\n     int nStartingHeight;\n     int nMisbehavior;\n-    uint64 nSendBytes;\n-    uint64 nRecvBytes;\n+    uint64_t nSendBytes;\n+    uint64_t nRecvBytes;\n     bool fSyncNode;\n     double dPingTime;\n     double dPingWait;\n@@ -171,25 +182,25 @@ class CNode\n {\n public:\n     // socket\n-    uint64 nServices;\n+    uint64_t nServices;\n     SOCKET hSocket;\n     CDataStream ssSend;\n     size_t nSendSize; // total size of all vSendMsg entries\n     size_t nSendOffset; // offset inside the first vSendMsg already sent\n-    uint64 nSendBytes;\n+    uint64_t nSendBytes;\n     std::deque<CSerializeData> vSendMsg;\n     CCriticalSection cs_vSend;\n \n     std::deque<CInv> vRecvGetData;\n     std::deque<CNetMessage> vRecvMsg;\n     CCriticalSection cs_vRecvMsg;\n-    uint64 nRecvBytes;\n+    uint64_t nRecvBytes;\n     int nRecvVersion;\n \n-    int64 nLastSend;\n-    int64 nLastRecv;\n-    int64 nLastSendEmpty;\n-    int64 nTimeConnected;\n+    int64_t nLastSend;\n+    int64_t nLastRecv;\n+    int64_t nLastSendEmpty;\n+    int64_t nTimeConnected;\n     CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n@@ -214,7 +225,7 @@ class CNode\n \n     // Denial-of-service detection/prevention\n     // Key is IP address, value is banned-until-time\n-    static std::map<CNetAddr, int64> setBanned;\n+    static std::map<CNetAddr, int64_t> setBanned;\n     static CCriticalSection cs_setBanned;\n     int nMisbehavior;\n \n@@ -238,12 +249,12 @@ class CNode\n     mruset<CInv> setInventoryKnown;\n     std::vector<CInv> vInventoryToSend;\n     CCriticalSection cs_inventory;\n-    std::multimap<int64, CInv> mapAskFor;\n+    std::multimap<int64_t, CInv> mapAskFor;\n \n     // Ping time measurement\n-    uint64 nPingNonceSent;\n-    int64 nPingUsecStart;\n-    int64 nPingUsecTime;\n+    uint64_t nPingNonceSent;\n+    int64_t nPingUsecStart;\n+    int64_t nPingUsecTime;\n     bool fPingQueued;\n     \n     CNode(SOCKET hSocketIn, CAddress addrIn, std::string addrNameIn = \"\", bool fInboundIn=false) : ssSend(SER_NETWORK, INIT_PROTO_VERSION)\n@@ -305,8 +316,8 @@ class CNode\n     // Network usage totals\n     static CCriticalSection cs_totalBytesRecv;\n     static CCriticalSection cs_totalBytesSent;\n-    static uint64 nTotalBytesRecv;\n-    static uint64 nTotalBytesSent;\n+    static uint64_t nTotalBytesRecv;\n+    static uint64_t nTotalBytesSent;\n \n     CNode(const CNode&);\n     void operator=(const CNode&);\n@@ -389,17 +400,17 @@ class CNode\n     {\n         // We're using mapAskFor as a priority queue,\n         // the key is the earliest time the request can be sent\n-        int64 nRequestTime;\n-        limitedmap<CInv, int64>::const_iterator it = mapAlreadyAskedFor.find(inv);\n+        int64_t nRequestTime;\n+        limitedmap<CInv, int64_t>::const_iterator it = mapAlreadyAskedFor.find(inv);\n         if (it != mapAlreadyAskedFor.end())\n             nRequestTime = it->second;\n         else\n             nRequestTime = 0;\n-        LogPrint(\"net\", \"askfor %s   %\"PRI64d\" (%s)\\n\", inv.ToString().c_str(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n+        LogPrint(\"net\", \"askfor %s   %\"PRId64\" (%s)\\n\", inv.ToString().c_str(), nRequestTime, DateTimeStrFormat(\"%H:%M:%S\", nRequestTime/1000000).c_str());\n \n         // Make sure not to reuse time indexes to keep things in the same order\n-        int64 nNow = (GetTime() - 1) * 1000000;\n-        static int64 nLastTime;\n+        int64_t nNow = (GetTime() - 1) * 1000000;\n+        static int64_t nLastTime;\n         ++nLastTime;\n         nNow = std::max(nNow, nLastTime);\n         nLastTime = nNow;\n@@ -664,11 +675,11 @@ class CNode\n     void copyStats(CNodeStats &stats);\n \n     // Network stats\n-    static void RecordBytesRecv(uint64 bytes);\n-    static void RecordBytesSent(uint64 bytes);\n+    static void RecordBytesRecv(uint64_t bytes);\n+    static void RecordBytesSent(uint64_t bytes);\n \n-    static uint64 GetTotalBytesRecv();\n-    static uint64 GetTotalBytesSent();\n+    static uint64_t GetTotalBytesRecv();\n+    static uint64_t GetTotalBytesSent();\n };\n \n "
      },
      {
        "sha": "88c58f854ec7a0e9e4e72b4452e41e6c87917a63",
        "filename": "src/netbase.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/netbase.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/netbase.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,9 +4,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"netbase.h\"\n-#include \"util.h\"\n-#include \"sync.h\"\n+\n #include \"hash.h\"\n+#include \"sync.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <stdint.h>\n \n #ifndef WIN32\n #include <fcntl.h>\n@@ -15,7 +19,7 @@\n #include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n #include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n \n-#if !defined(HAVE_MSG_NOSIGNAL)\n+#if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n \n@@ -883,10 +887,10 @@ std::vector<unsigned char> CNetAddr::GetGroup() const\n     return vchRet;\n }\n \n-uint64 CNetAddr::GetHash() const\n+uint64_t CNetAddr::GetHash() const\n {\n     uint256 hash = Hash(&ip[0], &ip[16]);\n-    uint64 nRet;\n+    uint64_t nRet;\n     memcpy(&nRet, &hash, sizeof(nRet));\n     return nRet;\n }"
      },
      {
        "sha": "af40aee94bbd9f35f80de356a2bd5c93ca8f5638",
        "filename": "src/netbase.h",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/netbase.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/netbase.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/netbase.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,19 +1,21 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_NETBASE_H\n #define BITCOIN_NETBASE_H\n \n #if defined(HAVE_CONFIG_H)\n #include \"bitcoin-config.h\"\n #endif\n \n+#include \"compat.h\"\n+#include \"serialize.h\"\n+\n+#include <stdint.h>\n #include <string>\n #include <vector>\n \n-#include \"serialize.h\"\n-#include \"compat.h\"\n-\n extern int nConnectTimeout;\n \n #ifdef WIN32\n@@ -69,7 +71,7 @@ class CNetAddr\n         std::string ToString() const;\n         std::string ToStringIP() const;\n         unsigned int GetByte(int n) const;\n-        uint64 GetHash() const;\n+        uint64_t GetHash() const;\n         bool GetInAddr(struct in_addr* pipv4Addr) const;\n         std::vector<unsigned char> GetGroup() const;\n         int GetReachabilityFrom(const CNetAddr *paddrPartner = NULL) const;"
      },
      {
        "sha": "fd285c571988e8d20ae5e837d3b2987b15cc96e6",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,10 +3,12 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"noui.h\"\n+\n #include \"ui_interface.h\"\n-#include \"init.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"util.h\"\n \n+#include <stdint.h>\n #include <string>\n \n static bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style)\n@@ -32,7 +34,7 @@ static bool noui_ThreadSafeMessageBox(const std::string& message, const std::str\n     return false;\n }\n \n-static bool noui_ThreadSafeAskFee(int64 /*nFeeRequired*/)\n+static bool noui_ThreadSafeAskFee(int64_t /*nFeeRequired*/)\n {\n     return true;\n }"
      },
      {
        "sha": "755d987fdd0a6ccb794e009a3c57d1da3cf12981",
        "filename": "src/noui.h",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/noui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/noui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2013 The Bitcoin developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NOUI_H\n+#define BITCOIN_NOUI_H\n+\n+extern void noui_connect();\n+\n+#endif"
      },
      {
        "sha": "798227581e3660a41c12cbe95c7654b0b234829a",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,8 +4,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"protocol.h\"\n+\n #include \"util.h\"\n-#include \"netbase.h\"\n+\n+#include <stdint.h>\n \n #ifndef WIN32\n # include <arpa/inet.h>\n@@ -81,7 +83,7 @@ CAddress::CAddress() : CService()\n     Init();\n }\n \n-CAddress::CAddress(CService ipIn, uint64 nServicesIn) : CService(ipIn)\n+CAddress::CAddress(CService ipIn, uint64_t nServicesIn) : CService(ipIn)\n {\n     Init();\n     nServices = nServicesIn;"
      },
      {
        "sha": "86e08ddcfa404bb7ac2e5655fca6c39bc108ae7f",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -11,11 +11,13 @@\n #define __INCLUDED_PROTOCOL_H__\n \n #include \"chainparams.h\"\n-#include \"serialize.h\"\n #include \"netbase.h\"\n-#include <string>\n+#include \"serialize.h\"\n #include \"uint256.h\"\n \n+#include <stdint.h>\n+#include <string>\n+\n /** Message header.\n  * (4) message start.\n  * (12) command.\n@@ -67,7 +69,7 @@ class CAddress : public CService\n {\n     public:\n         CAddress();\n-        explicit CAddress(CService ipIn, uint64 nServicesIn=NODE_NETWORK);\n+        explicit CAddress(CService ipIn, uint64_t nServicesIn=NODE_NETWORK);\n \n         void Init();\n \n@@ -90,13 +92,13 @@ class CAddress : public CService\n \n     // TODO: make private (improves encapsulation)\n     public:\n-        uint64 nServices;\n+        uint64_t nServices;\n \n         // disk and network only\n         unsigned int nTime;\n \n         // memory only\n-        int64 nLastTry;\n+        int64_t nLastTry;\n };\n \n /** inv message data */"
      },
      {
        "sha": "797ebf97ed13a60a69330a245b252c0236685260",
        "filename": "src/qt/aboutdialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/aboutdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/aboutdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/aboutdialog.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,6 +6,7 @@\n #include \"ui_aboutdialog.h\"\n \n #include \"clientmodel.h\"\n+\n #include \"clientversion.h\"\n \n AboutDialog::AboutDialog(QWidget *parent) :"
      },
      {
        "sha": "b02be748441d7acb1ed62fc6631a96902d95cab5",
        "filename": "src/qt/aboutdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/aboutdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/aboutdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/aboutdialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,10 +7,11 @@\n \n #include <QDialog>\n \n+class ClientModel;\n+\n namespace Ui {\n     class AboutDialog;\n }\n-class ClientModel;\n \n /** \"About\" dialog box */\n class AboutDialog : public QDialog"
      },
      {
        "sha": "5e82d4d17d0709dc32f4c29d9e9c92768a9073f0",
        "filename": "src/qt/addressbookpage.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addressbookpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addressbookpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -11,14 +11,14 @@\n \n #include \"addresstablemodel.h\"\n #include \"bitcoingui.h\"\n-#include \"editaddressdialog.h\"\n #include \"csvmodelwriter.h\"\n+#include \"editaddressdialog.h\"\n #include \"guiutil.h\"\n \n-#include <QSortFilterProxyModel>\n-#include <QClipboard>\n-#include <QMessageBox>\n+#include <QIcon>\n #include <QMenu>\n+#include <QMessageBox>\n+#include <QSortFilterProxyModel>\n \n AddressBookPage::AddressBookPage(Mode mode, Tabs tab, QWidget *parent) :\n     QDialog(parent),"
      },
      {
        "sha": "a9192efc84df04cea064a67adf151f14a4564958",
        "filename": "src/qt/addressbookpage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addressbookpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addressbookpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addressbookpage.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,17 +7,19 @@\n \n #include <QDialog>\n \n+class AddressTableModel;\n+class OptionsModel;\n+\n namespace Ui {\n     class AddressBookPage;\n }\n-class AddressTableModel;\n \n QT_BEGIN_NAMESPACE\n-class QTableView;\n class QItemSelection;\n-class QSortFilterProxyModel;\n class QMenu;\n class QModelIndex;\n+class QSortFilterProxyModel;\n+class QTableView;\n QT_END_NAMESPACE\n \n /** Widget that shows a list of sending or receiving addresses."
      },
      {
        "sha": "d686cd4fd8142ce6c94ecc2f50ffe4dc3db7591b",
        "filename": "src/qt/addresstablemodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addresstablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addresstablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,8 +7,8 @@\n #include \"guiutil.h\"\n #include \"walletmodel.h\"\n \n-#include \"wallet.h\"\n #include \"base58.h\"\n+#include \"wallet.h\"\n \n #include <QFont>\n #include <QDebug>"
      },
      {
        "sha": "71691f5a262f3bced9ecfcf8b949c35989c403da",
        "filename": "src/qt/addresstablemodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addresstablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/addresstablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/addresstablemodel.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -9,9 +9,10 @@\n #include <QStringList>\n \n class AddressTablePriv;\n-class CWallet;\n class WalletModel;\n \n+class CWallet;\n+\n /**\n    Qt model of the address book in the core. This allows views to access and modify the address book.\n  */"
      },
      {
        "sha": "2a6d6abc35bf6b1fe1d6a3a91bf211a3b01ff0a1",
        "filename": "src/qt/askpassphrasedialog.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/askpassphrasedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/askpassphrasedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,9 +8,11 @@\n #include \"guiconstants.h\"\n #include \"walletmodel.h\"\n \n+#include \"allocators.h\"\n+\n+#include <QKeyEvent>\n #include <QMessageBox>\n #include <QPushButton>\n-#include <QKeyEvent>\n \n AskPassphraseDialog::AskPassphraseDialog(Mode mode, QWidget *parent) :\n     QDialog(parent),"
      },
      {
        "sha": "4c92afcd542d55a41bd43b692fb4c31e3d289f45",
        "filename": "src/qt/askpassphrasedialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/askpassphrasedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/askpassphrasedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/askpassphrasedialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,10 +7,11 @@\n \n #include <QDialog>\n \n+class WalletModel;\n+\n namespace Ui {\n     class AskPassphraseDialog;\n }\n-class WalletModel;\n \n /** Multifunctional dialog to ask for passphrases. Used for encryption, unlocking, and changing the passphrase.\n  */"
      },
      {
        "sha": "2fa7979eae89f2ea262acec2dfcfe1d34c0c2d0b",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 13,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,28 +3,35 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"bitcoingui.h\"\n+\n #include \"clientmodel.h\"\n-#include \"walletmodel.h\"\n-#include \"optionsmodel.h\"\n-#include \"guiutil.h\"\n #include \"guiconstants.h\"\n-#include \"init.h\"\n-#include \"util.h\"\n-#include \"ui_interface.h\"\n+#include \"guiutil.h\"\n+#include \"intro.h\"\n+#include \"optionsmodel.h\"\n #include \"paymentserver.h\"\n #include \"splashscreen.h\"\n-#include \"intro.h\"\n+#include \"walletmodel.h\"\n+\n+#include \"init.h\"\n+#include \"main.h\"\n+#include \"ui_interface.h\"\n+#include \"util.h\"\n \n+#include <stdint.h>\n+\n+#include <boost/filesystem/operations.hpp>\n #include <QApplication>\n+#include <QLibraryInfo>\n+#include <QLocale>\n #include <QMessageBox>\n+#include <QSettings>\n+#include <QTimer>\n+#include <QTranslator>\n+\n #if QT_VERSION < 0x050000\n #include <QTextCodec>\n #endif\n-#include <QLocale>\n-#include <QTimer>\n-#include <QTranslator>\n-#include <QLibraryInfo>\n-#include <QSettings>\n \n #if defined(BITCOIN_NEED_QT_PLUGINS) && !defined(_BITCOIN_QT_PLUGINS_INCLUDED)\n #define _BITCOIN_QT_PLUGINS_INCLUDED\n@@ -68,7 +75,7 @@ static bool ThreadSafeMessageBox(const std::string& message, const std::string&\n     }\n }\n \n-static bool ThreadSafeAskFee(int64 nFeeRequired)\n+static bool ThreadSafeAskFee(int64_t nFeeRequired)\n {\n     if(!guiref)\n         return false;"
      },
      {
        "sha": "6b083331d35adbd2ee36dd18a12e5c5f18dc27bd",
        "filename": "src/qt/bitcoinamountfield.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinamountfield.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinamountfield.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinamountfield.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,15 +4,14 @@\n \n #include \"bitcoinamountfield.h\"\n \n-#include \"qvaluecombobox.h\"\n #include \"bitcoinunits.h\"\n #include \"guiconstants.h\"\n+#include \"qvaluecombobox.h\"\n \n #include <QApplication>\n+#include <QDoubleSpinBox>\n #include <QHBoxLayout>\n #include <QKeyEvent>\n-#include <QDoubleSpinBox>\n-\n #include <qmath.h> // for qPow()\n \n BitcoinAmountField::BitcoinAmountField(QWidget *parent):"
      },
      {
        "sha": "a1bb0ee2f48176085a6cff0e32ca594ef2694fd2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 22,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,49 +4,54 @@\n \n #include \"bitcoingui.h\"\n \n-#include \"optionsdialog.h\"\n #include \"aboutdialog.h\"\n-#include \"clientmodel.h\"\n-#include \"walletmodel.h\"\n-#include \"walletframe.h\"\n-#include \"optionsmodel.h\"\n #include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n #include \"guiconstants.h\"\n-#include \"notificator.h\"\n #include \"guiutil.h\"\n+#include \"notificator.h\"\n+#include \"optionsdialog.h\"\n+#include \"optionsmodel.h\"\n #include \"rpcconsole.h\"\n-#include \"ui_interface.h\"\n-#include \"wallet.h\"\n-#include \"init.h\"\n+#include \"walletframe.h\"\n+#include \"walletmodel.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n #endif\n \n+#include \"init.h\"\n+#include \"ui_interface.h\"\n+\n+#include <iostream>\n+\n #include <QApplication>\n-#include <QMenuBar>\n-#include <QMenu>\n+#include <QDateTime>\n+#include <QDesktopWidget>\n+#include <QDragEnterEvent>\n #include <QIcon>\n-#include <QVBoxLayout>\n-#include <QToolBar>\n-#include <QStatusBar>\n #include <QLabel>\n+#include <QListWidget>\n+#include <QMenu>\n+#include <QMenuBar>\n #include <QMessageBox>\n+#include <QMimeData>\n+#include <QMovie>\n #include <QProgressBar>\n+#include <QSettings>\n #include <QStackedWidget>\n-#include <QDateTime>\n-#include <QMovie>\n+#include <QStatusBar>\n+#include <QStyle>\n #include <QTimer>\n-#include <QDragEnterEvent>\n+#include <QToolBar>\n+#include <QVBoxLayout>\n+\n #if QT_VERSION < 0x050000\n #include <QUrl>\n #include <QTextDocument>\n+#else\n+#include <QUrlQuery>\n #endif\n-#include <QMimeData>\n-#include <QStyle>\n-#include <QListWidget>\n-\n-#include <iostream>\n \n const QString BitcoinGUI::DEFAULT_WALLET = \"~Default\";\n "
      },
      {
        "sha": "2e3b3e74b957408a4718ad24e4abbb4ca6fc4e13",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,32 +6,22 @@\n #define BITCOINGUI_H\n \n #include <QMainWindow>\n-#include <QSystemTrayIcon>\n #include <QMap>\n+#include <QSystemTrayIcon>\n \n-class WalletFrame;\n-class WalletView;\n class ClientModel;\n-class WalletModel;\n-class WalletStack;\n-class OverviewPage;\n-class SendCoinsDialog;\n-class SendCoinsRecipient;\n-class SignVerifyMessageDialog;\n class Notificator;\n class RPCConsole;\n+class SendCoinsRecipient;\n+class WalletFrame;\n+class WalletModel;\n \n class CWallet;\n \n QT_BEGIN_NAMESPACE\n+class QAction;\n class QLabel;\n-class QModelIndex;\n class QProgressBar;\n-class QStackedWidget;\n-class QUrl;\n-class QListWidget;\n-class QPushButton;\n-class QAction;\n QT_END_NAMESPACE\n \n /**"
      },
      {
        "sha": "45a9bf6a41a6653fe97dd18ba0de687aa41177cb",
        "filename": "src/qt/bitcoinstrings.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinstrings.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinstrings.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinstrings.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,4 +1,7 @@\n+\n+\n #include <QtGlobal>\n+\n // Automatically generated by extract_strings.py\n #ifdef __GNUC__\n #define UNUSED __attribute__((unused))\n@@ -221,4 +224,4 @@ QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"Warning: This version is obsolete, upgrade required!\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"You need to rebuild the database using -reindex to change -txindex\"),\n QT_TRANSLATE_NOOP(\"bitcoin-core\", \"wallet.dat corrupt, salvage failed\"),\n-};\n\\ No newline at end of file\n+};"
      },
      {
        "sha": "46517fc07b7fb16cd8651dfd56c3483a2f2f1046",
        "filename": "src/qt/bitcoinunits.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinunits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/bitcoinunits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoinunits.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef BITCOINUNITS_H\n #define BITCOINUNITS_H\n \n-#include <QString>\n #include <QAbstractListModel>\n+#include <QString>\n \n /** Bitcoin unit definitions. Encapsulates parsing and formatting\n    and serves as list model for drop-down selection boxes."
      },
      {
        "sha": "c64e411bca4480e656780bf667b665669b13a431",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,21 +5,21 @@\n #include \"clientmodel.h\"\n \n #include \"guiconstants.h\"\n-#include \"optionsmodel.h\"\n-#include \"addresstablemodel.h\"\n-#include \"transactiontablemodel.h\"\n \n-#include \"chainparams.h\"\n #include \"alert.h\"\n-#include \"main.h\"\n+#include \"chainparams.h\"\n #include \"checkpoints.h\"\n+#include \"main.h\"\n+#include \"net.h\"\n #include \"ui_interface.h\"\n \n+#include <stdint.h>\n+\n #include <QDateTime>\n-#include <QTimer>\n #include <QDebug>\n+#include <QTimer>\n \n-static const int64 nClientStartupTime = GetTime();\n+static const int64_t nClientStartupTime = GetTime();\n \n ClientModel::ClientModel(OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), optionsModel(optionsModel),"
      },
      {
        "sha": "dcc528f4fd65132772df88359e2c2672796a0ddd",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,9 +7,10 @@\n \n #include <QObject>\n \n-class OptionsModel;\n class AddressTableModel;\n+class OptionsModel;\n class TransactionTableModel;\n+\n class CWallet;\n \n QT_BEGIN_NAMESPACE"
      },
      {
        "sha": "29de251efe10f2b9e4251947f3067bb242de0b76",
        "filename": "src/qt/csvmodelwriter.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/csvmodelwriter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/csvmodelwriter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/csvmodelwriter.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef CSVMODELWRITER_H\n #define CSVMODELWRITER_H\n \n-#include <QObject>\n #include <QList>\n+#include <QObject>\n \n QT_BEGIN_NAMESPACE\n class QAbstractItemModel;"
      },
      {
        "sha": "a448c4b23fc9f9d9bc256b7f5285dfab604a6008",
        "filename": "src/qt/editaddressdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/editaddressdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/editaddressdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/editaddressdialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,10 +7,11 @@\n \n #include <QDialog>\n \n+class AddressTableModel;\n+\n namespace Ui {\n     class EditAddressDialog;\n }\n-class AddressTableModel;\n \n QT_BEGIN_NAMESPACE\n class QDataWidgetMapper;"
      },
      {
        "sha": "e6a1138f11bcce56a3b1751145ba63c094e0f0b6",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 26,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,33 +5,12 @@\n #include \"guiutil.h\"\n \n #include \"bitcoinaddressvalidator.h\"\n-#include \"walletmodel.h\"\n #include \"bitcoinunits.h\"\n+#include \"walletmodel.h\"\n \n-#include \"util.h\"\n+#include \"core.h\"\n #include \"init.h\"\n-\n-#include <QApplication>\n-#include <QDateTime>\n-#include <QDoubleValidator>\n-#include <QFont>\n-#include <QLineEdit>\n-#if QT_VERSION >= 0x050000\n-#include <QUrlQuery>\n-#else\n-#include <QUrl>\n-#endif\n-#include <QTextDocument> // for Qt::mightBeRichText\n-#include <QAbstractItemView>\n-#include <QClipboard>\n-#include <QFileDialog>\n-#include <QDesktopServices>\n-#include <QThread>\n-#include <QSettings>\n-#include <QDesktopWidget>\n-\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n+#include \"util.h\"\n \n #ifdef WIN32\n #ifdef _WIN32_WINNT\n@@ -46,9 +25,31 @@\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n-#include \"shlwapi.h\"\n-#include \"shlobj.h\"\n #include \"shellapi.h\"\n+#include \"shlobj.h\"\n+#include \"shlwapi.h\"\n+#endif\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <QAbstractItemView>\n+#include <QApplication>\n+#include <QClipboard>\n+#include <QDateTime>\n+#include <QDesktopServices>\n+#include <QDesktopWidget>\n+#include <QDoubleValidator>\n+#include <QFileDialog>\n+#include <QFont>\n+#include <QLineEdit>\n+#include <QSettings>\n+#include <QTextDocument> // for Qt::mightBeRichText\n+#include <QThread>\n+\n+#if QT_VERSION < 0x050000\n+#include <QUrl>\n+#else\n+#include <QUrlQuery>\n #endif\n \n namespace GUIUtil {"
      },
      {
        "sha": "8bd0eab9deba3b7360f782cbf1ef3490ce88598d",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,19 +5,19 @@\n #ifndef GUIUTIL_H\n #define GUIUTIL_H\n \n-#include <QString>\n-#include <QObject>\n #include <QMessageBox>\n+#include <QObject>\n+#include <QString>\n \n class SendCoinsRecipient;\n \n QT_BEGIN_NAMESPACE\n+class QAbstractItemView;\n+class QDateTime;\n class QFont;\n class QLineEdit;\n-class QWidget;\n-class QDateTime;\n class QUrl;\n-class QAbstractItemView;\n+class QWidget;\n QT_END_NAMESPACE\n \n /** Utility functions used by the Bitcoin Qt UI."
      },
      {
        "sha": "3ecd96cc426b1514eccb21433e979e7bebc52f08",
        "filename": "src/qt/intro.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/intro.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/intro.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,17 +4,17 @@\n \n #include \"intro.h\"\n #include \"ui_intro.h\"\n+\n #include \"util.h\"\n \n+#include <boost/filesystem.hpp>\n #include <QFileDialog>\n #include <QSettings>\n #include <QMessageBox>\n \n-#include <boost/filesystem.hpp>\n-\n /* Minimum free space (in bytes) needed for data directory */\n-static const uint64 GB_BYTES = 1000000000LL;\n-static const uint64 BLOCK_CHAIN_SIZE = 10LL * GB_BYTES;\n+static const uint64_t GB_BYTES = 1000000000LL;\n+static const uint64_t BLOCK_CHAIN_SIZE = 10LL * GB_BYTES;\n \n /* Check free space asynchronously to prevent hanging the UI thread.\n \n@@ -60,7 +60,7 @@ void FreespaceChecker::check()\n     namespace fs = boost::filesystem;\n     QString dataDirStr = intro->getPathToCheck();\n     fs::path dataDir = fs::path(dataDirStr.toStdString());\n-    uint64 freeBytesAvailable = 0;\n+    uint64_t freeBytesAvailable = 0;\n     int replyStatus = ST_OK;\n     QString replyMessage = tr(\"A new data directory will be created.\");\n "
      },
      {
        "sha": "72693d5544f3e63370d9045bdd712ef0d3fc244f",
        "filename": "src/qt/intro.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/intro.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/intro.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/intro.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,13 +6,14 @@\n #define INTRO_H\n \n #include <QDialog>\n-#include <QThread>\n #include <QMutex>\n+#include <QThread>\n+\n+class FreespaceChecker;\n \n namespace Ui {\n class Intro;\n }\n-class FreespaceChecker;\n \n /** Introduction screen (pre-GUI startup).\n   Allows the user to choose a data directory,"
      },
      {
        "sha": "b21a61cb071dbc3b73300bea06b1ca92fbe34ce0",
        "filename": "src/qt/macdockiconhandler.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/macdockiconhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/macdockiconhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,12 +5,12 @@\n #ifndef MACDOCKICONHANDLER_H\n #define MACDOCKICONHANDLER_H\n \n-#include <QObject>\n #include <QMainWindow>\n+#include <QObject>\n \n QT_BEGIN_NAMESPACE\n-class QMenu;\n class QIcon;\n+class QMenu;\n class QWidget;\n QT_END_NAMESPACE\n "
      },
      {
        "sha": "bc335edede37062d42cf8287b3359d5fdc383d85",
        "filename": "src/qt/macnotificationhandler.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/macnotificationhandler.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/macnotificationhandler.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,6 +4,7 @@\n \n #ifndef MACNOTIFICATIONHANDLER_H\n #define MACNOTIFICATIONHANDLER_H\n+\n #include <QObject>\n \n /** Macintosh-specific notification handler (supports UserNotificationCenter and Growl)."
      },
      {
        "sha": "5931c538729ed190929332adae6eb58f4077f59a",
        "filename": "src/qt/monitoreddatamapper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/monitoreddatamapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/monitoreddatamapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/monitoreddatamapper.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,9 +4,9 @@\n \n #include \"monitoreddatamapper.h\"\n \n-#include <QWidget>\n #include <QMetaObject>\n #include <QMetaProperty>\n+#include <QWidget>\n \n MonitoredDataMapper::MonitoredDataMapper(QObject *parent) :\n     QDataWidgetMapper(parent)"
      },
      {
        "sha": "c9f6834ec2cb870496fa2140f0e001a98e5fd0e7",
        "filename": "src/qt/notificator.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/notificator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/notificator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,27 +4,31 @@\n \n #include \"notificator.h\"\n \n+\n #include <QApplication>\n-#include <QMetaType>\n-#include <QVariant>\n+#include <QByteArray>\n #include <QIcon>\n+#include <QImageWriter>\n+#include <QMessageBox>\n+#include <QMetaType>\n #include <QStyle>\n-#include <QByteArray>\n #include <QSystemTrayIcon>\n-#include <QMessageBox>\n #include <QTemporaryFile>\n-#include <QImageWriter>\n+#include <QVariant>\n+\n+#ifdef Q_OS_MAC\n+#include \"macnotificationhandler.h\"\n+\n+#include <ApplicationServices/ApplicationServices.h>\n+#endif\n \n #ifdef USE_DBUS\n-#include <QtDBus>\n #include <stdint.h>\n-#endif\n \n-#ifdef Q_OS_MAC\n-#include <ApplicationServices/ApplicationServices.h>\n-#include \"macnotificationhandler.h\"\n+#include <QtDBus>\n #endif\n \n+\n // https://wiki.ubuntu.com/NotificationDevelopmentGuidelines recommends at least 128\n const int FREEDESKTOP_NOTIFICATION_ICON_SIZE = 128;\n "
      },
      {
        "sha": "d6298c3c0df487db2b25eb535dfa9ef778f30e5b",
        "filename": "src/qt/notificator.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/notificator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/notificator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/notificator.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -9,11 +9,12 @@\n #include \"bitcoin-config.h\"\n #endif\n \n-#include <QObject>\n #include <QIcon>\n+#include <QObject>\n \n QT_BEGIN_NAMESPACE\n class QSystemTrayIcon;\n+\n #ifdef USE_DBUS\n class QDBusInterface;\n #endif"
      },
      {
        "sha": "1e91a877a9f989e8333f4e72e2f543d150c7c9c9",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -11,9 +11,10 @@\n \n #include \"bitcoinunits.h\"\n #include \"monitoreddatamapper.h\"\n-#include \"netbase.h\"\n #include \"optionsmodel.h\"\n \n+#include \"netbase.h\"\n+\n #include <QDir>\n #include <QIntValidator>\n #include <QLocale>"
      },
      {
        "sha": "05234f645beeb116470a3bc21e79f3af21842e56",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,12 +7,13 @@\n \n #include <QDialog>\n \n+class MonitoredDataMapper;\n+class OptionsModel;\n+class QValidatedLineEdit;\n+\n namespace Ui {\n class OptionsDialog;\n }\n-class OptionsModel;\n-class MonitoredDataMapper;\n-class QValidatedLineEdit;\n \n /** Preferences dialog. */\n class OptionsDialog : public QDialog"
      },
      {
        "sha": "65c017f0887db1883b4600ffcba2eff0058d26eb",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -9,12 +9,12 @@\n #include \"optionsmodel.h\"\n \n #include \"bitcoinunits.h\"\n+#include \"guiutil.h\"\n+\n #include \"init.h\"\n-#include \"core.h\"\n-#include \"wallet.h\"\n-#include \"netbase.h\"\n+#include \"main.h\"\n+#include \"net.h\"\n #include \"walletdb.h\"\n-#include \"guiutil.h\"\n \n #include <QSettings>\n \n@@ -200,7 +200,7 @@ QVariant OptionsModel::data(const QModelIndex & index, int role) const\n                 return QVariant(5);\n         }\n         case Fee:\n-            return QVariant(nTransactionFee);\n+            return QVariant((qint64) nTransactionFee);\n         case DisplayUnit:\n             return QVariant(nDisplayUnit);\n         case DisplayAddresses:\n@@ -274,7 +274,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n         break;\n         case Fee:\n             nTransactionFee = value.toLongLong();\n-            settings.setValue(\"nTransactionFee\", nTransactionFee);\n+            settings.setValue(\"nTransactionFee\", (qint64) nTransactionFee);\n             break;\n         case DisplayUnit:\n             nDisplayUnit = value.toInt();\n@@ -299,7 +299,7 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n \n qint64 OptionsModel::getTransactionFee()\n {\n-    return nTransactionFee;\n+    return (qint64) nTransactionFee;\n }\n \n bool OptionsModel::getProxySettings(QString& proxyIP, quint16 &proxyPort) const"
      },
      {
        "sha": "016097c5a03f33f1cc9f761846ad45df646618dd",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,14 +5,14 @@\n #include \"overviewpage.h\"\n #include \"ui_overviewpage.h\"\n \n-#include \"clientmodel.h\"\n-#include \"walletmodel.h\"\n #include \"bitcoinunits.h\"\n+#include \"clientmodel.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"transactiontablemodel.h\"\n #include \"transactionfilterproxy.h\"\n-#include \"guiutil.h\"\n-#include \"guiconstants.h\"\n+#include \"transactiontablemodel.h\"\n+#include \"walletmodel.h\"\n \n #include <QAbstractItemDelegate>\n #include <QPainter>"
      },
      {
        "sha": "2507a3fb3177b0d1a5f55d3286d6bf625bb5dd3c",
        "filename": "src/qt/overviewpage.h",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/overviewpage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/overviewpage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,13 +7,14 @@\n \n #include <QWidget>\n \n+class ClientModel;\n+class TransactionFilterProxy;\n+class TxViewDelegate;\n+class WalletModel;\n+\n namespace Ui {\n     class OverviewPage;\n }\n-class ClientModel;\n-class WalletModel;\n-class TxViewDelegate;\n-class TransactionFilterProxy;\n \n QT_BEGIN_NAMESPACE\n class QModelIndex;"
      },
      {
        "sha": "e369734a98699178f6a90f3ad9a4d5f4ac490176",
        "filename": "src/qt/paymentrequestplus.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentrequestplus.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentrequestplus.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,16 +7,16 @@\n // with some extra methods\n //\n \n-#include <QDateTime>\n-#include <QDebug>\n-#include <QSslCertificate>\n+#include \"paymentrequestplus.h\"\n+\n+#include <stdexcept>\n \n #include <openssl/x509.h>\n #include <openssl/x509_vfy.h>\n+#include <QDateTime>\n+#include <QDebug>\n+#include <QSslCertificate>\n \n-#include <stdexcept>\n-\n-#include \"paymentrequestplus.h\"\n \n class SSLVerifyError : public std::runtime_error\n {"
      },
      {
        "sha": "8c126b1fada8b65b0fc286dc9c5c7adf2907b145",
        "filename": "src/qt/paymentrequestplus.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentrequestplus.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentrequestplus.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentrequestplus.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,13 +5,14 @@\n #ifndef PAYMENTREQUESTPLUS_H\n #define PAYMENTREQUESTPLUS_H\n \n+#include \"paymentrequest.pb.h\"\n+\n+#include \"base58.h\"\n+\n #include <QByteArray>\n #include <QList>\n #include <QString>\n \n-#include \"base58.h\"\n-#include \"paymentrequest.pb.h\"\n-\n //\n // Wraps dumb protocol buffer paymentRequest\n // with extra methods"
      },
      {
        "sha": "cb6291c35df557ffc58e8238356703313981b7c9",
        "filename": "src/qt/paymentserver.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 20,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,6 +2,23 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"paymentserver.h\"\n+\n+#include \"bitcoinunits.h\"\n+#include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"paymentserver.h\"\n+#include \"walletmodel.h\"\n+\n+#include \"base58.h\"\n+#include \"ui_interface.h\"\n+#include \"wallet.h\"\n+\n+#include <cstdlib>\n+\n+#include <openssl/x509.h>\n+#include <openssl/x509_vfy.h>\n #include <QApplication>\n #include <QByteArray>\n #include <QDataStream>\n@@ -13,36 +30,23 @@\n #include <QList>\n #include <QLocalServer>\n #include <QLocalSocket>\n-#include <QStringList>\n-#include <QTextDocument>\n #include <QNetworkAccessManager>\n #include <QNetworkProxy>\n #include <QNetworkReply>\n #include <QNetworkRequest>\n #include <QSslCertificate>\n #include <QSslError>\n #include <QSslSocket>\n+#include <QStringList>\n+#include <QTextDocument>\n+\n #if QT_VERSION < 0x050000\n #include <QUrl>\n #else\n #include <QUrlQuery>\n #endif\n \n-#include <cstdlib>\n-\n-#include <openssl/x509.h>\n-#include <openssl/x509_vfy.h>\n-\n-#include \"base58.h\"\n-#include \"bitcoinunits.h\"\n-#include \"guiconstants.h\"\n-#include \"guiutil.h\"\n-#include \"optionsmodel.h\"\n-#include \"paymentserver.h\"\n-#include \"ui_interface.h\"\n-#include \"util.h\"\n-#include \"wallet.h\"\n-#include \"walletmodel.h\"\n+using namespace boost;\n \n const int BITCOIN_IPC_CONNECT_TIMEOUT = 1000; // milliseconds\n const QString BITCOIN_IPC_PREFIX(\"bitcoin:\");\n@@ -357,10 +361,10 @@ void PaymentServer::handleURIOrFile(const QString& s)\n \n     if (s.startsWith(BITCOIN_IPC_PREFIX, Qt::CaseInsensitive)) // bitcoin:\n     {\n-#if QT_VERSION >= 0x050000\n-        QUrlQuery uri((QUrl(s)));\n-#else\n+#if QT_VERSION < 0x050000\n         QUrl uri(s);\n+#else\n+        QUrlQuery uri((QUrl(s)));\n #endif\n         if (uri.hasQueryItem(\"request\"))\n         {"
      },
      {
        "sha": "65bf03435488888005eb48f3dd47a040110c9151",
        "filename": "src/qt/paymentserver.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentserver.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/paymentserver.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/paymentserver.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,8 +4,6 @@\n \n #ifndef PAYMENTSERVER_H\n #define PAYMENTSERVER_H\n-\n-//\n // This class handles payment requests from clicking on\n // bitcoin: URIs\n //\n@@ -32,13 +30,13 @@\n // and, if a server is running in another process,\n // sends them to the server.\n //\n-#include <QObject>\n-#include <QString>\n \n #include \"paymentrequestplus.h\"\n #include \"walletmodel.h\"\n \n-class CWallet;\n+#include <QObject>\n+#include <QString>\n+\n class OptionsModel;\n \n QT_BEGIN_NAMESPACE\n@@ -51,6 +49,8 @@ class QSslError;\n class QUrl;\n QT_END_NAMESPACE\n \n+class CWallet;\n+\n class PaymentServer : public QObject\n {\n     Q_OBJECT"
      },
      {
        "sha": "64a3a68ba796aa1b706e6c197833139bf5a29293",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 6,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,18 +6,20 @@\n #include \"ui_rpcconsole.h\"\n \n #include \"clientmodel.h\"\n-#include \"bitcoinrpc.h\"\n #include \"guiutil.h\"\n \n-#include <QTime>\n-#include <QThread>\n+#include \"bitcoinrpc.h\"\n+\n+#include \"json/json_spirit_value.h\"\n+#include <openssl/crypto.h>\n #include <QKeyEvent>\n+#include <QScrollBar>\n+#include <QThread>\n+#include <QTime>\n+\n #if QT_VERSION < 0x050000\n #include <QUrl>\n #endif\n-#include <QScrollBar>\n-\n-#include <openssl/crypto.h>\n \n // TODO: add a scrollback limit, as there is currently none\n // TODO: make it possible to filter out categories (esp debug messages when implemented)"
      },
      {
        "sha": "1370d0b10307a7aba29a51d6c7b6f986b27ca645",
        "filename": "src/qt/rpcconsole.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/rpcconsole.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/rpcconsole.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,10 +7,11 @@\n \n #include <QDialog>\n \n+class ClientModel;\n+\n namespace Ui {\n     class RPCConsole;\n }\n-class ClientModel;\n \n /** Local Bitcoin RPC console. */\n class RPCConsole: public QDialog"
      },
      {
        "sha": "b9c5eb08d6a7234c2fd31299dbfc52cae1d403d9",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,16 +6,17 @@\n #include \"ui_sendcoinsdialog.h\"\n \n #include \"bitcoinunits.h\"\n+#include \"guiutil.h\"\n #include \"optionsmodel.h\"\n #include \"sendcoinsentry.h\"\n-#include \"guiutil.h\"\n-#include \"askpassphrasedialog.h\"\n+#include \"walletmodel.h\"\n+\n #include \"base58.h\"\n #include \"ui_interface.h\"\n \n #include <QMessageBox>\n-#include <QTextDocument>\n #include <QScrollBar>\n+#include <QTextDocument>\n \n SendCoinsDialog::SendCoinsDialog(QWidget *parent) :\n     QDialog(parent),\n@@ -324,7 +325,7 @@ bool SendCoinsDialog::handlePaymentRequest(const SendCoinsRecipient &rv)\n     if (rv.paymentRequest.IsInitialized()) {\n         // Expired payment request?\n         const payments::PaymentDetails& details = rv.paymentRequest.getDetails();\n-        if (details.has_expires() && (int64)details.expires() < GetTime())\n+        if (details.has_expires() && (int64_t)details.expires() < GetTime())\n         {\n             emit message(strSendCoins, tr(\"Payment request expired\"),\n                 CClientUIInterface::MSG_WARNING);"
      },
      {
        "sha": "9d5f34f0c20093ec23463484fa5151af07d57563",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,19 +8,19 @@\n #include \"walletmodel.h\"\n \n #include <QDialog>\n-#include <QVariant>\n-#include <QPair>\n \n-namespace Ui {\n-    class SendCoinsDialog;\n-}\n+class OptionsModel;\n class SendCoinsEntry;\n class SendCoinsRecipient;\n \n QT_BEGIN_NAMESPACE\n class QUrl;\n QT_END_NAMESPACE\n \n+namespace Ui {\n+    class SendCoinsDialog;\n+}\n+\n /** Dialog for sending bitcoins */\n class SendCoinsDialog : public QDialog\n {"
      },
      {
        "sha": "2d240f1fe5d1f6e628a94c8ae6491e88c4d6a733",
        "filename": "src/qt/sendcoinsentry.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsentry.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsentry.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,12 +5,11 @@\n #include \"sendcoinsentry.h\"\n #include \"ui_sendcoinsentry.h\"\n \n-#include \"guiutil.h\"\n-#include \"bitcoinunits.h\"\n #include \"addressbookpage.h\"\n-#include \"walletmodel.h\"\n-#include \"optionsmodel.h\"\n #include \"addresstablemodel.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"walletmodel.h\"\n \n #include <QApplication>\n #include <QClipboard>"
      },
      {
        "sha": "6fc36f9787b39ae04ef0cb86f66333ff814ef218",
        "filename": "src/qt/sendcoinsentry.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsentry.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/sendcoinsentry.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsentry.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,14 +5,15 @@\n #ifndef SENDCOINSENTRY_H\n #define SENDCOINSENTRY_H\n \n+#include \"walletmodel.h\"\n+\n #include <QStackedWidget>\n \n-#include \"walletmodel.h\"\n+class WalletModel;\n \n namespace Ui {\n     class SendCoinsEntry;\n }\n-class WalletModel;\n \n /**\n  * A single entry in the dialog for sending bitcoins."
      },
      {
        "sha": "0fa51cb92aa65d5ad84220baf56796b3367128ec",
        "filename": "src/qt/signverifymessagedialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/signverifymessagedialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/signverifymessagedialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,19 +6,18 @@\n #include \"ui_signverifymessagedialog.h\"\n \n #include \"addressbookpage.h\"\n-#include \"base58.h\"\n #include \"guiutil.h\"\n-#include \"init.h\"\n-#include \"main.h\"\n-#include \"optionsmodel.h\"\n #include \"walletmodel.h\"\n-#include \"wallet.h\"\n \n-#include <QClipboard>\n+#include \"base58.h\"\n+#include \"init.h\"\n+#include \"wallet.h\"\n \n #include <string>\n #include <vector>\n \n+#include <QClipboard>\n+\n SignVerifyMessageDialog::SignVerifyMessageDialog(QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::SignVerifyMessageDialog),"
      },
      {
        "sha": "c741450b8a792612d6d77cdbad026f340b5dbe53",
        "filename": "src/qt/signverifymessagedialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/signverifymessagedialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/signverifymessagedialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/signverifymessagedialog.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,10 +7,11 @@\n \n #include <QDialog>\n \n+class WalletModel;\n+\n namespace Ui {\n     class SignVerifyMessageDialog;\n }\n-class WalletModel;\n \n class SignVerifyMessageDialog : public QDialog\n {"
      },
      {
        "sha": "12280bb7029c7ccb4de16e72f7ab47f6093c483e",
        "filename": "src/qt/splashscreen.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/splashscreen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/splashscreen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/splashscreen.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,9 +3,10 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"splashscreen.h\"\n+\n+#include \"chainparams.h\"\n #include \"clientversion.h\"\n #include \"util.h\"\n-#include \"chainparams.h\"\n \n #include <QApplication>\n #include <QPainter>"
      },
      {
        "sha": "f7d26fb91912f68862c3ad119a73c02bcd9cfc6f",
        "filename": "src/qt/test/paymentservertests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/paymentservertests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/paymentservertests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,17 +1,17 @@\n-#include <QCoreApplication>\n-#include <QDebug>\n-#include <QTemporaryFile>\n-#include <QVariant>\n-#include <QFileOpenEvent>\n-\n-#include <openssl/x509.h>\n-#include <openssl/x509_vfy.h>\n+#include \"paymentservertests.h\"\n \n #include \"optionsmodel.h\"\n-#include \"paymentservertests.h\"\n #include \"paymentrequestdata.h\"\n+\n #include \"util.h\"\n \n+#include <openssl/x509.h>\n+#include <openssl/x509_vfy.h>\n+#include <QCoreApplication>\n+#include <QDebug>\n+#include <QFileOpenEvent>\n+#include <QTemporaryFile>\n+#include <QVariant>\n \n \n X509 *parse_b64der_cert(const char* cert_data)"
      },
      {
        "sha": "0bff923ad47f42f2e2ec09b37a17637037911974",
        "filename": "src/qt/test/paymentservertests.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/paymentservertests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/paymentservertests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/paymentservertests.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,11 +1,11 @@\n #ifndef PAYMENTSERVERTESTS_H\n #define PAYMENTSERVERTESTS_H\n \n-#include <QTest>\n-#include <QObject>\n-\n #include \"../paymentserver.h\"\n \n+#include <QObject>\n+#include <QTest>\n+\n class PaymentServerTests : public QObject\n {\n     Q_OBJECT"
      },
      {
        "sha": "5c941c63873e1ef759a4db27e46b8c636fd75015",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,10 @@\n-#include <QTest>\n-#include <QObject>\n \n-#include \"uritests.h\"\n+\n #include \"paymentservertests.h\"\n+#include \"uritests.h\"\n+\n+#include <QObject>\n+#include <QTest>\n \n // This is all you need to run all the tests\n int main(int argc, char *argv[])"
      },
      {
        "sha": "5c0f4406a71e6337be75d5b935f998ba7616f104",
        "filename": "src/qt/test/uritests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/uritests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/uritests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,6 +1,7 @@\n #include \"uritests.h\"\n-#include \"../guiutil.h\"\n-#include \"../walletmodel.h\"\n+\n+#include \"guiutil.h\"\n+#include \"walletmodel.h\"\n \n #include <QUrl>\n "
      },
      {
        "sha": "17d4280a90a0ab18ce7211e0dcf377d353d2b195",
        "filename": "src/qt/test/uritests.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/uritests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/test/uritests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/uritests.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,8 @@\n #ifndef URITESTS_H\n #define URITESTS_H\n \n-#include <QTest>\n #include <QObject>\n+#include <QTest>\n \n class URITests : public QObject\n {"
      },
      {
        "sha": "8bd2bf564a9fbaec68894ae7eb3d4390de645c43",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,16 +4,18 @@\n \n #include \"transactiondesc.h\"\n \n-#include \"guiutil.h\"\n #include \"bitcoinunits.h\"\n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"db.h\"\n-#include \"ui_interface.h\"\n+#include \"guiutil.h\"\n+\n #include \"base58.h\"\n+#include \"db.h\"\n+#include \"main.h\"\n #include \"paymentserver.h\"\n #include \"transactionrecord.h\"\n+#include \"ui_interface.h\"\n+#include \"wallet.h\"\n \n+#include <stdint.h>\n #include <string>\n \n QString TransactionDesc::FormatTxStatus(const CWalletTx& wtx)\n@@ -46,10 +48,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n         strHTML.reserve(4000);\n         strHTML += \"<html><font face='verdana, arial, helvetica, sans-serif'>\";\n \n-        int64 nTime = wtx.GetTxTime();\n-        int64 nCredit = wtx.GetCredit();\n-        int64 nDebit = wtx.GetDebit();\n-        int64 nNet = nCredit - nDebit;\n+        int64_t nTime = wtx.GetTxTime();\n+        int64_t nCredit = wtx.GetCredit();\n+        int64_t nDebit = wtx.GetDebit();\n+        int64_t nNet = nCredit - nDebit;\n \n         strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n         int nRequests = wtx.GetRequestCount();\n@@ -129,7 +131,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n             //\n             // Coinbase\n             //\n-            int64 nUnmatured = 0;\n+            int64_t nUnmatured = 0;\n             BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n                 nUnmatured += wallet->GetCredit(txout);\n             strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \";\n@@ -186,13 +188,13 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, int vout, int u\n                 if (fAllToMe)\n                 {\n                     // Payment to self\n-                    int64 nChange = wtx.GetChange();\n-                    int64 nValue = nCredit - nChange;\n+                    int64_t nChange = wtx.GetChange();\n+                    int64_t nValue = nCredit - nChange;\n                     strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nValue) + \"<br>\";\n                     strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, nValue) + \"<br>\";\n                 }\n \n-                int64 nTxFee = nDebit - GetValueOut(wtx);\n+                int64_t nTxFee = nDebit - GetValueOut(wtx);\n                 if (nTxFee > 0)\n                     strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatWithUnit(unit, -nTxFee) + \"<br>\";\n             }"
      },
      {
        "sha": "92d093b3eb4f07c8e1711c829c891e0e55da745c",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef TRANSACTIONDESC_H\n #define TRANSACTIONDESC_H\n \n-#include <QString>\n #include <QObject>\n+#include <QString>\n \n class CWallet;\n class CWalletTx;"
      },
      {
        "sha": "a14e74a469b7ee900db3caaead2957e7869af3a4",
        "filename": "src/qt/transactionfilterproxy.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionfilterproxy.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionfilterproxy.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,10 +6,10 @@\n \n #include \"transactiontablemodel.h\"\n \n-#include <QDateTime>\n-\n #include <cstdlib>\n \n+#include <QDateTime>\n+\n // Earliest date that can be represented (far in the past)\n const QDateTime TransactionFilterProxy::MIN_DATE = QDateTime::fromTime_t(0);\n // Last date that can be represented (far in the future)"
      },
      {
        "sha": "6d1644d48dbfc11868fc3dac72d10a065e5509bd",
        "filename": "src/qt/transactionfilterproxy.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionfilterproxy.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionfilterproxy.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionfilterproxy.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,8 +5,8 @@\n #ifndef TRANSACTIONFILTERPROXY_H\n #define TRANSACTIONFILTERPROXY_H\n \n-#include <QSortFilterProxyModel>\n #include <QDateTime>\n+#include <QSortFilterProxyModel>\n \n /** Filter the transaction list according to pre-specified rules. */\n class TransactionFilterProxy : public QSortFilterProxyModel"
      },
      {
        "sha": "675daa9c9c39c2301abf572d03aa0d29b20a15a7",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,8 +4,10 @@\n \n #include \"transactionrecord.h\"\n \n-#include \"wallet.h\"\n #include \"base58.h\"\n+#include \"wallet.h\"\n+\n+#include <stdint.h>\n \n /* Return positive answer if transaction should be shown in list.\n  */\n@@ -28,10 +30,10 @@ bool TransactionRecord::showTransaction(const CWalletTx &wtx)\n QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *wallet, const CWalletTx &wtx)\n {\n     QList<TransactionRecord> parts;\n-    int64 nTime = wtx.GetTxTime();\n-    int64 nCredit = wtx.GetCredit(true);\n-    int64 nDebit = wtx.GetDebit();\n-    int64 nNet = nCredit - nDebit;\n+    int64_t nTime = wtx.GetTxTime();\n+    int64_t nCredit = wtx.GetCredit(true);\n+    int64_t nDebit = wtx.GetDebit();\n+    int64_t nNet = nCredit - nDebit;\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n@@ -83,7 +85,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n         if (fAllFromMe && fAllToMe)\n         {\n             // Payment to self\n-            int64 nChange = wtx.GetChange();\n+            int64_t nChange = wtx.GetChange();\n \n             parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n                             -(nDebit - nChange), nCredit - nChange));\n@@ -93,7 +95,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             //\n             // Debit\n             //\n-            int64 nTxFee = nDebit - GetValueOut(wtx);\n+            int64_t nTxFee = nDebit - GetValueOut(wtx);\n \n             for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n             {\n@@ -122,7 +124,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n                     sub.address = mapValue[\"to\"];\n                 }\n \n-                int64 nValue = txout.nValue;\n+                int64_t nValue = txout.nValue;\n                 /* Add fee to first output */\n                 if (nTxFee > 0)\n                 {\n@@ -198,7 +200,7 @@ void TransactionRecord::updateStatus(const CWalletTx &wtx)\n     // For generated transactions, determine maturity\n     if(type == TransactionRecord::Generated)\n     {\n-        int64 nCredit = wtx.GetCredit(true);\n+        int64_t nCredit = wtx.GetCredit(true);\n         if (nCredit == 0)\n         {\n             status.maturity = TransactionStatus::Immature;"
      },
      {
        "sha": "8a7c9044e3bb4524e04e2d566d31f2003193d570",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -51,8 +51,8 @@ class TransactionStatus\n     /** @name Reported status\n        @{*/\n     Status status;\n-    int64 depth;\n-    int64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number\n+    qint64 depth;\n+    qint64 open_for; /**< Timestamp if status==OpenUntilDate, otherwise number\n                       of additional blocks that need to be mined before\n                       finalization */\n     /**@}*/\n@@ -86,15 +86,15 @@ class TransactionRecord\n     {\n     }\n \n-    TransactionRecord(uint256 hash, int64 time):\n+    TransactionRecord(uint256 hash, qint64 time):\n             hash(hash), time(time), type(Other), address(\"\"), debit(0),\n             credit(0), idx(0)\n     {\n     }\n \n-    TransactionRecord(uint256 hash, int64 time,\n+    TransactionRecord(uint256 hash, qint64 time,\n                 Type type, const std::string &address,\n-                int64 debit, int64 credit):\n+                qint64 debit, qint64 credit):\n             hash(hash), time(time), type(type), address(address), debit(debit), credit(credit),\n             idx(0)\n     {\n@@ -108,11 +108,11 @@ class TransactionRecord\n     /** @name Immutable transaction attributes\n       @{*/\n     uint256 hash;\n-    int64 time;\n+    qint64 time;\n     Type type;\n     std::string address;\n-    int64 debit;\n-    int64 credit;\n+    qint64 debit;\n+    qint64 credit;\n     /**@}*/\n \n     /** Subtransaction index, for sort key */"
      },
      {
        "sha": "3777e82f31b1f26b4fbcc194399fd78cb94a92e3",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 9,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,24 +4,27 @@\n \n #include \"transactiontablemodel.h\"\n \n-#include \"guiutil.h\"\n-#include \"transactionrecord.h\"\n+#include \"addresstablemodel.h\"\n+#include \"bitcoinunits.h\"\n #include \"guiconstants.h\"\n+#include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n #include \"transactiondesc.h\"\n+#include \"transactionrecord.h\"\n #include \"walletmodel.h\"\n-#include \"optionsmodel.h\"\n-#include \"addresstablemodel.h\"\n-#include \"bitcoinunits.h\"\n \n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n #include \"wallet.h\"\n-#include \"ui_interface.h\"\n \n-#include <QList>\n #include <QColor>\n-#include <QTimer>\n-#include <QIcon>\n #include <QDateTime>\n #include <QDebug>\n+#include <QIcon>\n+#include <QList>\n+#include <QTimer>\n \n // Amount column is right-aligned it contains numbers\n static int column_alignments[] = {"
      },
      {
        "sha": "c23c606c31f0c31c9995d9b1dc3699911a3c3af4",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -8,11 +8,12 @@\n #include <QAbstractTableModel>\n #include <QStringList>\n \n-class CWallet;\n-class TransactionTablePriv;\n class TransactionRecord;\n+class TransactionTablePriv;\n class WalletModel;\n \n+class CWallet;\n+\n /** UI model for the transaction table of a wallet.\n  */\n class TransactionTableModel : public QAbstractTableModel"
      },
      {
        "sha": "d3e2bdf4005faa1a61516b3fedd1f25df532dbca",
        "filename": "src/qt/transactionview.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 13,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,31 +4,32 @@\n \n #include \"transactionview.h\"\n \n-#include \"transactionfilterproxy.h\"\n-#include \"transactionrecord.h\"\n-#include \"walletmodel.h\"\n #include \"addresstablemodel.h\"\n-#include \"transactiontablemodel.h\"\n #include \"bitcoinunits.h\"\n #include \"csvmodelwriter.h\"\n-#include \"transactiondescdialog.h\"\n #include \"editaddressdialog.h\"\n-#include \"optionsmodel.h\"\n #include \"guiutil.h\"\n+#include \"optionsmodel.h\"\n+#include \"transactiondescdialog.h\"\n+#include \"transactionfilterproxy.h\"\n+#include \"transactionrecord.h\"\n+#include \"transactiontablemodel.h\"\n+#include \"walletmodel.h\"\n+\n #include \"ui_interface.h\"\n \n-#include <QScrollBar>\n #include <QComboBox>\n+#include <QDateTimeEdit>\n #include <QDoubleValidator>\n #include <QHBoxLayout>\n-#include <QVBoxLayout>\n-#include <QLineEdit>\n-#include <QTableView>\n #include <QHeaderView>\n-#include <QPoint>\n-#include <QMenu>\n #include <QLabel>\n-#include <QDateTimeEdit>\n+#include <QLineEdit>\n+#include <QMenu>\n+#include <QPoint>\n+#include <QScrollBar>\n+#include <QTableView>\n+#include <QVBoxLayout>\n \n TransactionView::TransactionView(QWidget *parent) :\n     QWidget(parent), model(0), transactionProxyModel(0),"
      },
      {
        "sha": "18f2b9bfc9fe8bcea017fa3bd3c10f0743b77004",
        "filename": "src/qt/transactionview.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/transactionview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionview.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,17 +7,17 @@\n \n #include <QWidget>\n \n-class WalletModel;\n class TransactionFilterProxy;\n+class WalletModel;\n \n QT_BEGIN_NAMESPACE\n-class QTableView;\n class QComboBox;\n+class QDateTimeEdit;\n+class QFrame;\n class QLineEdit;\n-class QModelIndex;\n class QMenu;\n-class QFrame;\n-class QDateTimeEdit;\n+class QModelIndex;\n+class QTableView;\n QT_END_NAMESPACE\n \n /** Widget showing the transaction list for a wallet, including a filter row."
      },
      {
        "sha": "04eea591696992b55cebea1d92a20d6e0f616226",
        "filename": "src/qt/walletframe.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletframe.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletframe.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletframe.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,12 +3,13 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"walletframe.h\"\n-#include \"walletview.h\"\n+\n #include \"bitcoingui.h\"\n+#include \"walletview.h\"\n+\n+#include <cstdio>\n \n #include <QHBoxLayout>\n-#include <QMessageBox>\n-#include <QStackedWidget>\n \n WalletFrame::WalletFrame(BitcoinGUI *_gui) :\n     QFrame(_gui),"
      },
      {
        "sha": "b1d770e1a78ae61208ff1cbef84bec670c38b0e3",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,18 +3,25 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"walletmodel.h\"\n-#include \"guiconstants.h\"\n-#include \"optionsmodel.h\"\n+\n #include \"addresstablemodel.h\"\n+#include \"guiconstants.h\"\n #include \"transactiontablemodel.h\"\n \n+#include \"base58.h\"\n+#include \"db.h\"\n+#include \"keystore.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n #include \"ui_interface.h\"\n+#include \"wallet.h\"\n #include \"walletdb.h\" // for BackupWallet\n-#include \"base58.h\"\n \n+#include <stdint.h>\n+\n+#include <QDebug>\n #include <QSet>\n #include <QTimer>\n-#include <QDebug>\n \n WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *parent) :\n     QObject(parent), wallet(wallet), optionsModel(optionsModel), addressTableModel(0),\n@@ -133,7 +140,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n {\n     qint64 total = 0;\n     QList<SendCoinsRecipient> recipients = transaction.getRecipients();\n-    std::vector<std::pair<CScript, int64> > vecSend;\n+    std::vector<std::pair<CScript, int64_t> > vecSend;\n \n     if(recipients.empty())\n     {\n@@ -148,7 +155,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         if (rcp.paymentRequest.IsInitialized())\n         {   // PaymentRequest...\n-            int64 subtotal = 0;\n+            int64_t subtotal = 0;\n             const payments::PaymentDetails& details = rcp.paymentRequest.getDetails();\n             for (int i = 0; i < details.outputs_size(); i++)\n             {\n@@ -157,7 +164,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n                 subtotal += out.amount();\n                 const unsigned char* scriptStr = (const unsigned char*)out.script().data();\n                 CScript scriptPubKey(scriptStr, scriptStr+out.script().size());\n-                vecSend.push_back(std::pair<CScript, int64>(scriptPubKey, out.amount()));\n+                vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, out.amount()));\n             }\n             if (subtotal <= 0)\n             {\n@@ -180,7 +187,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n \n             CScript scriptPubKey;\n             scriptPubKey.SetDestination(CBitcoinAddress(rcp.address.toStdString()).Get());\n-            vecSend.push_back(std::pair<CScript, int64>(scriptPubKey, rcp.amount));\n+            vecSend.push_back(std::pair<CScript, int64_t>(scriptPubKey, rcp.amount));\n \n             total += rcp.amount;\n         }\n@@ -205,7 +212,7 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n         LOCK2(cs_main, wallet->cs_wallet);\n \n         transaction.newPossibleKeyChange(wallet);\n-        int64 nFeeRequired = 0;\n+        int64_t nFeeRequired = 0;\n         std::string strFailReason;\n \n         CWalletTx *newTx = transaction.getTransaction();"
      },
      {
        "sha": "f39e9dfca0b1de39ddac48cbb08bd3f9445ac00e",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,19 +5,20 @@\n #ifndef WALLETMODEL_H\n #define WALLETMODEL_H\n \n-#include <QObject>\n+#include \"paymentrequestplus.h\"\n+#include \"walletmodeltransaction.h\"\n \n #include \"allocators.h\" /* for SecureString */\n-#include \"wallet.h\"\n-#include \"walletmodeltransaction.h\"\n-#include \"paymentrequestplus.h\"\n \n-class OptionsModel;\n+#include <QObject>\n+\n class AddressTableModel;\n+class OptionsModel;\n class TransactionTableModel;\n-class CWallet;\n class WalletModelTransaction;\n \n+class CWallet;\n+\n QT_BEGIN_NAMESPACE\n class QTimer;\n QT_END_NAMESPACE"
      },
      {
        "sha": "943f13e2089b0929be19cb8f0f0fd1ef9fa6c520",
        "filename": "src/qt/walletmodeltransaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodeltransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodeltransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,6 +4,8 @@\n \n #include \"walletmodeltransaction.h\"\n \n+#include \"wallet.h\"\n+\n WalletModelTransaction::WalletModelTransaction(const QList<SendCoinsRecipient> &recipients) :\n     recipients(recipients),\n     walletTransaction(0),"
      },
      {
        "sha": "a948808a75056ae55d333f99ec2fc6c0a2a30cf8",
        "filename": "src/qt/walletmodeltransaction.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodeltransaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletmodeltransaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodeltransaction.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -7,8 +7,14 @@\n \n #include \"walletmodel.h\"\n \n+#include <QObject>\n+\n class SendCoinsRecipient;\n \n+class CReserveKey;\n+class CWallet;\n+class CWalletTx;\n+\n /** Data model for a walletmodel transaction. */\n class WalletModelTransaction\n {"
      },
      {
        "sha": "248568853139a7380e8bc9e6345194cb9680d189",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 11,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,25 +3,29 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"walletview.h\"\n-#include \"bitcoingui.h\"\n-#include \"transactiontablemodel.h\"\n+\n #include \"addressbookpage.h\"\n-#include \"sendcoinsdialog.h\"\n-#include \"receivecoinsdialog.h\"\n-#include \"signverifymessagedialog.h\"\n+#include \"askpassphrasedialog.h\"\n+#include \"bitcoingui.h\"\n #include \"clientmodel.h\"\n-#include \"walletmodel.h\"\n+#include \"guiutil.h\"\n #include \"optionsmodel.h\"\n-#include \"transactionview.h\"\n #include \"overviewpage.h\"\n-#include \"askpassphrasedialog.h\"\n+#include \"receivecoinsdialog.h\"\n+#include \"sendcoinsdialog.h\"\n+#include \"signverifymessagedialog.h\"\n+#include \"transactiontablemodel.h\"\n+#include \"transactionview.h\"\n+#include \"walletmodel.h\"\n+\n #include \"ui_interface.h\"\n-#include \"guiutil.h\"\n \n-#include <QHBoxLayout>\n-#include <QVBoxLayout>\n #include <QAction>\n+#include <QActionGroup>\n+#include <QFileDialog>\n+#include <QHBoxLayout>\n #include <QPushButton>\n+#include <QVBoxLayout>\n \n WalletView::WalletView(QWidget *parent):\n     QStackedWidget(parent),"
      },
      {
        "sha": "d9516916216e791b124bd0d9de4e3a00f4adc133",
        "filename": "src/qt/walletview.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletview.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/qt/walletview.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -9,17 +9,14 @@\n \n class BitcoinGUI;\n class ClientModel;\n-class WalletModel;\n-class TransactionView;\n class OverviewPage;\n-class SendCoinsDialog;\n class ReceiveCoinsDialog;\n+class SendCoinsDialog;\n class SendCoinsRecipient;\n-class SignVerifyMessageDialog;\n-class RPCConsole;\n+class TransactionView;\n+class WalletModel;\n \n QT_BEGIN_NAMESPACE\n-class QLabel;\n class QModelIndex;\n QT_END_NAMESPACE\n "
      },
      {
        "sha": "18e213257e4fb75602e44b4ed9ca3473f8c439c1",
        "filename": "src/rpcblockchain.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 2,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcblockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcblockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcblockchain.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,8 +3,15 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"main.h\"\n+\n+\n #include \"bitcoinrpc.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+\n+#include <stdint.h>\n+\n+#include \"json/json_spirit_value.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -112,7 +119,7 @@ Value settxfee(const Array& params, bool fHelp)\n             \"<amount> is a real and is rounded to the nearest 0.00000001 btc per kb\");\n \n     // Amount\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     if (params[0].get_real() != 0.0)\n         nAmount = AmountFromValue(params[0]);        // rejects 0.0 amounts\n "
      },
      {
        "sha": "68d412490b7c8331cf7d9f2653e282b3d0c6549e",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 17,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,30 +2,33 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <iostream>\n-#include <fstream>\n \n-#include \"init.h\" // for pwalletMain\n-#include \"wallet.h\"\n-#include \"bitcoinrpc.h\"\n-#include \"ui_interface.h\"\n+\n #include \"base58.h\"\n+#include \"bitcoinrpc.h\"\n+#include \"init.h\"\n+#include \"main.h\"\n+#include \"sync.h\"\n+#include \"wallet.h\"\n \n+#include <fstream>\n+#include <stdint.h>\n+\n+#include <boost/algorithm/string.hpp>\n #include <boost/date_time/posix_time/posix_time.hpp>\n #include <boost/lexical_cast.hpp>\n-#include <boost/variant/get.hpp>\n-#include <boost/algorithm/string.hpp>\n+#include \"json/json_spirit_value.h\"\n \n using namespace json_spirit;\n using namespace std;\n \n void EnsureWalletIsUnlocked();\n \n-std::string static EncodeDumpTime(int64 nTime) {\n-    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+std::string static EncodeDumpTime(int64_t nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%\"PRId64\"T%H:%M:%SZ\", nTime);\n }\n \n-int64 static DecodeDumpTime(const std::string &str) {\n+int64_t static DecodeDumpTime(const std::string &str) {\n     static boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n     static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n     const std::locale loc(std::locale::classic(), &facet);\n@@ -125,7 +128,8 @@ Value importwallet(const Array& params, bool fHelp)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    int64 nTimeBegin = chainActive.Tip()->nTime;\n+    int64_t nTimeBegin = chainActive.Tip()->nTime;\n+\n \n     bool fGood = true;\n \n@@ -149,7 +153,7 @@ Value importwallet(const Array& params, bool fHelp)\n             LogPrintf(\"Skipping import of %s (key already present)\\n\", CBitcoinAddress(keyid).ToString().c_str());\n             continue;\n         }\n-        int64 nTime = DecodeDumpTime(vstr[1]);\n+        int64_t nTime = DecodeDumpTime(vstr[1]);\n         std::string strLabel;\n         bool fLabel = true;\n         for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n@@ -228,14 +232,14 @@ Value dumpwallet(const Array& params, bool fHelp)\n     if (!file.is_open())\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n \n-    std::map<CKeyID, int64> mapKeyBirth;\n+    std::map<CKeyID, int64_t> mapKeyBirth;\n     std::set<CKeyID> setKeyPool;\n     pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n     pwalletMain->GetAllReserveKeys(setKeyPool);\n \n     // sort time/key pairs\n-    std::vector<std::pair<int64, CKeyID> > vKeyBirth;\n-    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+    std::vector<std::pair<int64_t, CKeyID> > vKeyBirth;\n+    for (std::map<CKeyID, int64_t>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n         vKeyBirth.push_back(std::make_pair(it->second, it->first));\n     }\n     mapKeyBirth.clear();\n@@ -247,7 +251,7 @@ Value dumpwallet(const Array& params, bool fHelp)\n     file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", chainActive.Height(), chainActive.Tip()->GetBlockHash().ToString().c_str());\n     file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(chainActive.Tip()->nTime).c_str());\n     file << \"\\n\";\n-    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+    for (std::vector<std::pair<int64_t, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n         const CKeyID &keyid = it->second;\n         std::string strTime = EncodeDumpTime(it->first);\n         std::string strAddr = CBitcoinAddress(keyid).ToString();"
      },
      {
        "sha": "5fe464da8114b43a5d011b2d7c2684a1c6615e27",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 7,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,11 +3,21 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+\n+\n+#include \"bitcoinrpc.h\"\n #include \"chainparams.h\"\n #include \"db.h\"\n #include \"init.h\"\n+#include \"net.h\"\n+#include \"main.h\"\n #include \"miner.h\"\n-#include \"bitcoinrpc.h\"\n+#include \"wallet.h\"\n+\n+#include <stdint.h>\n+\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_value.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -51,11 +61,11 @@ Value GetNetworkHashPS(int lookup, int height) {\n         lookup = pb->nHeight;\n \n     CBlockIndex *pb0 = pb;\n-    int64 minTime = pb0->GetBlockTime();\n-    int64 maxTime = minTime;\n+    int64_t minTime = pb0->GetBlockTime();\n+    int64_t maxTime = minTime;\n     for (int i = 0; i < lookup; i++) {\n         pb0 = pb0->pprev;\n-        int64 time = pb0->GetBlockTime();\n+        int64_t time = pb0->GetBlockTime();\n         minTime = std::min(time, minTime);\n         maxTime = std::max(time, maxTime);\n     }\n@@ -65,7 +75,7 @@ Value GetNetworkHashPS(int lookup, int height) {\n         return 0;\n \n     uint256 workDiff = pb->nChainWork - pb0->nChainWork;\n-    int64 timeDiff = maxTime - minTime;\n+    int64_t timeDiff = maxTime - minTime;\n \n     return (boost::int64_t)(workDiff.getdouble() / timeDiff);\n }\n@@ -187,7 +197,7 @@ Value getwork(const Array& params, bool fHelp)\n         // Update block\n         static unsigned int nTransactionsUpdatedLast;\n         static CBlockIndex* pindexPrev;\n-        static int64 nStart;\n+        static int64_t nStart;\n         static CBlockTemplate* pblocktemplate;\n         if (pindexPrev != chainActive.Tip() ||\n             (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 60))\n@@ -323,7 +333,7 @@ Value getblocktemplate(const Array& params, bool fHelp)\n     // Update block\n     static unsigned int nTransactionsUpdatedLast;\n     static CBlockIndex* pindexPrev;\n-    static int64 nStart;\n+    static int64_t nStart;\n     static CBlockTemplate* pblocktemplate;\n     if (pindexPrev != chainActive.Tip() ||\n         (mempool.GetTransactionsUpdated() != nTransactionsUpdatedLast && GetTime() - nStart > 5))"
      },
      {
        "sha": "488575839562d25ba43788deba84706da6d9d3f3",
        "filename": "src/rpcnet.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcnet.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,8 +2,19 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"net.h\"\n+\n+\n #include \"bitcoinrpc.h\"\n+#include \"net.h\"\n+#include \"netbase.h\"\n+#include \"protocol.h\"\n+#include \"sync.h\"\n+#include \"util.h\"\n+\n+#include <inttypes.h>\n+\n+#include <boost/foreach.hpp>\n+#include \"json/json_spirit_value.h\"\n \n using namespace json_spirit;\n using namespace std;\n@@ -68,7 +79,7 @@ Value getpeerinfo(const Array& params, bool fHelp)\n         obj.push_back(Pair(\"addr\", stats.addrName));\n         if (!(stats.addrLocal.empty()))\n             obj.push_back(Pair(\"addrlocal\", stats.addrLocal));\n-        obj.push_back(Pair(\"services\", strprintf(\"%08\"PRI64x, stats.nServices)));\n+        obj.push_back(Pair(\"services\", strprintf(\"%08\"PRIx64, stats.nServices)));\n         obj.push_back(Pair(\"lastsend\", (boost::int64_t)stats.nLastSend));\n         obj.push_back(Pair(\"lastrecv\", (boost::int64_t)stats.nLastRecv));\n         obj.push_back(Pair(\"bytessent\", (boost::int64_t)stats.nSendBytes));"
      },
      {
        "sha": "4912f71f9d2dc23acb42dedff37e9edbc1d2bf68",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,15 +3,21 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <boost/assign/list_of.hpp>\n+\n \n #include \"base58.h\"\n #include \"bitcoinrpc.h\"\n-#include \"db.h\"\n #include \"init.h\"\n #include \"net.h\"\n+#include \"uint256.h\"\n #include \"wallet.h\"\n \n+#include <stdint.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_value.h\"\n+\n using namespace std;\n using namespace boost;\n using namespace boost::assign;\n@@ -188,7 +194,7 @@ Value listunspent(const Array& params, bool fHelp)\n                 continue;\n         }\n \n-        int64 nValue = out.tx->vout[out.i].nValue;\n+        int64_t nValue = out.tx->vout[out.i].nValue;\n         const CScript& pk = out.tx->vout[out.i].scriptPubKey;\n         Object entry;\n         entry.push_back(Pair(\"txid\", out.tx->GetHash().GetHex()));\n@@ -269,7 +275,7 @@ Value createrawtransaction(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64 nAmount = AmountFromValue(s.value_);\n+        int64_t nAmount = AmountFromValue(s.value_);\n \n         CTxOut out(nAmount, scriptPubKey);\n         rawTx.vout.push_back(out);"
      },
      {
        "sha": "cb445ed11df9f4f18735d78a07dbb67fa8a5d102",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 50,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,20 +3,29 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <boost/assign/list_of.hpp>\n \n-#include \"wallet.h\"\n-#include \"walletdb.h\"\n+\n+#include \"base58.h\"\n #include \"bitcoinrpc.h\"\n #include \"init.h\"\n-#include \"base58.h\"\n+#include \"net.h\"\n+#include \"netbase.h\"\n+#include \"util.h\"\n+#include \"wallet.h\"\n+#include \"walletdb.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/assign/list_of.hpp>\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_value.h\"\n \n using namespace std;\n using namespace boost;\n using namespace boost::assign;\n using namespace json_spirit;\n \n-int64 nWalletUnlockTime;\n+int64_t nWalletUnlockTime;\n static CCriticalSection cs_nWalletUnlockTime;\n \n std::string HelpRequiringPassphrase()\n@@ -287,7 +296,7 @@ Value sendtoaddress(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n \n     // Amount\n-    int64 nAmount = AmountFromValue(params[1]);\n+    int64_t nAmount = AmountFromValue(params[1]);\n \n     // Wallet comments\n     CWalletTx wtx;\n@@ -316,7 +325,7 @@ Value listaddressgroupings(const Array& params, bool fHelp)\n             \"in past transactions\");\n \n     Array jsonGroupings;\n-    map<CTxDestination, int64> balances = pwalletMain->GetAddressBalances();\n+    map<CTxDestination, int64_t> balances = pwalletMain->GetAddressBalances();\n     BOOST_FOREACH(set<CTxDestination> grouping, pwalletMain->GetAddressGroupings())\n     {\n         Array jsonGrouping;\n@@ -431,7 +440,7 @@ Value getreceivedbyaddress(const Array& params, bool fHelp)\n         nMinDepth = params[1].get_int();\n \n     // Tally\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -465,7 +474,7 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n     set<CTxDestination> setAddress = pwalletMain->GetAccountAddresses(strAccount);\n \n     // Tally\n-    int64 nAmount = 0;\n+    int64_t nAmount = 0;\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n@@ -485,9 +494,9 @@ Value getreceivedbyaccount(const Array& params, bool fHelp)\n }\n \n \n-int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinDepth)\n {\n-    int64 nBalance = 0;\n+    int64_t nBalance = 0;\n \n     // Tally wallet transactions\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n@@ -496,7 +505,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n         if (!IsFinalTx(wtx))\n             continue;\n \n-        int64 nReceived, nSent, nFee;\n+        int64_t nReceived, nSent, nFee;\n         wtx.GetAccountAmounts(strAccount, nReceived, nSent, nFee);\n \n         if (nReceived != 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n@@ -510,7 +519,7 @@ int64 GetAccountBalance(CWalletDB& walletdb, const string& strAccount, int nMinD\n     return nBalance;\n }\n \n-int64 GetAccountBalance(const string& strAccount, int nMinDepth)\n+int64_t GetAccountBalance(const string& strAccount, int nMinDepth)\n {\n     CWalletDB walletdb(pwalletMain->strWalletFile);\n     return GetAccountBalance(walletdb, strAccount, nMinDepth);\n@@ -536,24 +545,24 @@ Value getbalance(const Array& params, bool fHelp)\n         // Calculate total balance a different way from GetBalance()\n         // (GetBalance() sums up all unspent TxOuts)\n         // getbalance and getbalance '*' 0 should return the same number\n-        int64 nBalance = 0;\n+        int64_t nBalance = 0;\n         for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n         {\n             const CWalletTx& wtx = (*it).second;\n             if (!wtx.IsConfirmed())\n                 continue;\n \n-            int64 allFee;\n+            int64_t allFee;\n             string strSentAccount;\n-            list<pair<CTxDestination, int64> > listReceived;\n-            list<pair<CTxDestination, int64> > listSent;\n+            list<pair<CTxDestination, int64_t> > listReceived;\n+            list<pair<CTxDestination, int64_t> > listSent;\n             wtx.GetAmounts(listReceived, listSent, allFee, strSentAccount);\n             if (wtx.GetDepthInMainChain() >= nMinDepth)\n             {\n-                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n+                BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n                     nBalance += r.second;\n             }\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listSent)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listSent)\n                 nBalance -= r.second;\n             nBalance -= allFee;\n         }\n@@ -562,7 +571,7 @@ Value getbalance(const Array& params, bool fHelp)\n \n     string strAccount = AccountFromValue(params[0]);\n \n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n \n     return ValueFromAmount(nBalance);\n }\n@@ -577,7 +586,7 @@ Value movecmd(const Array& params, bool fHelp)\n \n     string strFrom = AccountFromValue(params[0]);\n     string strTo = AccountFromValue(params[1]);\n-    int64 nAmount = AmountFromValue(params[2]);\n+    int64_t nAmount = AmountFromValue(params[2]);\n     if (params.size() > 3)\n         // unused parameter, used to be nMinDepth, keep type-checking it though\n         (void)params[3].get_int();\n@@ -589,7 +598,7 @@ Value movecmd(const Array& params, bool fHelp)\n     if (!walletdb.TxnBegin())\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"database error\");\n \n-    int64 nNow = GetAdjustedTime();\n+    int64_t nNow = GetAdjustedTime();\n \n     // Debit\n     CAccountingEntry debit;\n@@ -630,7 +639,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     CBitcoinAddress address(params[1].get_str());\n     if (!address.IsValid())\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid Bitcoin address\");\n-    int64 nAmount = AmountFromValue(params[2]);\n+    int64_t nAmount = AmountFromValue(params[2]);\n     int nMinDepth = 1;\n     if (params.size() > 3)\n         nMinDepth = params[3].get_int();\n@@ -645,7 +654,7 @@ Value sendfrom(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (nAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n@@ -678,9 +687,9 @@ Value sendmany(const Array& params, bool fHelp)\n         wtx.mapValue[\"comment\"] = params[3].get_str();\n \n     set<CBitcoinAddress> setAddress;\n-    vector<pair<CScript, int64> > vecSend;\n+    vector<pair<CScript, int64_t> > vecSend;\n \n-    int64 totalAmount = 0;\n+    int64_t totalAmount = 0;\n     BOOST_FOREACH(const Pair& s, sendTo)\n     {\n         CBitcoinAddress address(s.name_);\n@@ -693,7 +702,7 @@ Value sendmany(const Array& params, bool fHelp)\n \n         CScript scriptPubKey;\n         scriptPubKey.SetDestination(address.Get());\n-        int64 nAmount = AmountFromValue(s.value_);\n+        int64_t nAmount = AmountFromValue(s.value_);\n         totalAmount += nAmount;\n \n         vecSend.push_back(make_pair(scriptPubKey, nAmount));\n@@ -702,13 +711,13 @@ Value sendmany(const Array& params, bool fHelp)\n     EnsureWalletIsUnlocked();\n \n     // Check funds\n-    int64 nBalance = GetAccountBalance(strAccount, nMinDepth);\n+    int64_t nBalance = GetAccountBalance(strAccount, nMinDepth);\n     if (totalAmount > nBalance)\n         throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, \"Account has insufficient funds\");\n \n     // Send\n     CReserveKey keyChange(pwalletMain);\n-    int64 nFeeRequired = 0;\n+    int64_t nFeeRequired = 0;\n     string strFailReason;\n     bool fCreated = pwalletMain->CreateTransaction(vecSend, wtx, keyChange, nFeeRequired, strFailReason);\n     if (!fCreated)\n@@ -826,7 +835,7 @@ Value createmultisig(const Array& params, bool fHelp)\n \n struct tallyitem\n {\n-    int64 nAmount;\n+    int64_t nAmount;\n     int nConf;\n     vector<uint256> txids;\n     tallyitem()\n@@ -885,7 +894,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n         if (it == mapTally.end() && !fIncludeEmpty)\n             continue;\n \n-        int64 nAmount = 0;\n+        int64_t nAmount = 0;\n         int nConf = std::numeric_limits<int>::max();\n         if (it != mapTally.end())\n         {\n@@ -923,7 +932,7 @@ Value ListReceived(const Array& params, bool fByAccounts)\n     {\n         for (map<string, tallyitem>::iterator it = mapAccountTally.begin(); it != mapAccountTally.end(); ++it)\n         {\n-            int64 nAmount = (*it).second.nAmount;\n+            int64_t nAmount = (*it).second.nAmount;\n             int nConf = (*it).second.nConf;\n             Object obj;\n             obj.push_back(Pair(\"account\",       (*it).first));\n@@ -977,10 +986,10 @@ static void MaybePushAddress(Object & entry, const CTxDestination &dest)\n \n void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDepth, bool fLong, Array& ret)\n {\n-    int64 nFee;\n+    int64_t nFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64> > listReceived;\n-    list<pair<CTxDestination, int64> > listSent;\n+    list<pair<CTxDestination, int64_t> > listReceived;\n+    list<pair<CTxDestination, int64_t> > listSent;\n \n     wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n \n@@ -989,7 +998,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Sent\n     if ((!listSent.empty() || nFee != 0) && (fAllAccounts || strAccount == strSentAccount))\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n         {\n             Object entry;\n             entry.push_back(Pair(\"account\", strSentAccount));\n@@ -1006,7 +1015,7 @@ void ListTransactions(const CWalletTx& wtx, const string& strAccount, int nMinDe\n     // Received\n     if (listReceived.size() > 0 && wtx.GetDepthInMainChain() >= nMinDepth)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n         {\n             string account;\n             if (pwalletMain->mapAddressBook.count(r.first))\n@@ -1122,7 +1131,7 @@ Value listaccounts(const Array& params, bool fHelp)\n     if (params.size() > 0)\n         nMinDepth = params[0].get_int();\n \n-    map<string, int64> mapAccountBalances;\n+    map<string, int64_t> mapAccountBalances;\n     BOOST_FOREACH(const PAIRTYPE(CTxDestination, CAddressBookData)& entry, pwalletMain->mapAddressBook) {\n         if (IsMine(*pwalletMain, entry.first)) // This address belongs to me\n             mapAccountBalances[entry.second.name] = 0;\n@@ -1131,17 +1140,17 @@ Value listaccounts(const Array& params, bool fHelp)\n     for (map<uint256, CWalletTx>::iterator it = pwalletMain->mapWallet.begin(); it != pwalletMain->mapWallet.end(); ++it)\n     {\n         const CWalletTx& wtx = (*it).second;\n-        int64 nFee;\n+        int64_t nFee;\n         string strSentAccount;\n-        list<pair<CTxDestination, int64> > listReceived;\n-        list<pair<CTxDestination, int64> > listSent;\n+        list<pair<CTxDestination, int64_t> > listReceived;\n+        list<pair<CTxDestination, int64_t> > listSent;\n         wtx.GetAmounts(listReceived, listSent, nFee, strSentAccount);\n         mapAccountBalances[strSentAccount] -= nFee;\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& s, listSent)\n             mapAccountBalances[strSentAccount] -= s.second;\n         if (wtx.GetDepthInMainChain() >= nMinDepth)\n         {\n-            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64)& r, listReceived)\n+            BOOST_FOREACH(const PAIRTYPE(CTxDestination, int64_t)& r, listReceived)\n                 if (pwalletMain->mapAddressBook.count(r.first))\n                     mapAccountBalances[pwalletMain->mapAddressBook[r.first].name] += r.second;\n                 else\n@@ -1155,7 +1164,7 @@ Value listaccounts(const Array& params, bool fHelp)\n         mapAccountBalances[entry.strAccount] += entry.nCreditDebit;\n \n     Object ret;\n-    BOOST_FOREACH(const PAIRTYPE(string, int64)& accountBalance, mapAccountBalances) {\n+    BOOST_FOREACH(const PAIRTYPE(string, int64_t)& accountBalance, mapAccountBalances) {\n         ret.push_back(Pair(accountBalance.first, ValueFromAmount(accountBalance.second)));\n     }\n     return ret;\n@@ -1226,10 +1235,10 @@ Value gettransaction(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Invalid or non-wallet transaction id\");\n     const CWalletTx& wtx = pwalletMain->mapWallet[hash];\n \n-    int64 nCredit = wtx.GetCredit();\n-    int64 nDebit = wtx.GetDebit();\n-    int64 nNet = nCredit - nDebit;\n-    int64 nFee = (wtx.IsFromMe() ? GetValueOut(wtx) - nDebit : 0);\n+    int64_t nCredit = wtx.GetCredit();\n+    int64_t nDebit = wtx.GetDebit();\n+    int64_t nNet = nCredit - nDebit;\n+    int64_t nFee = (wtx.IsFromMe() ? GetValueOut(wtx) - nDebit : 0);\n \n     entry.push_back(Pair(\"amount\", ValueFromAmount(nNet - nFee)));\n     if (wtx.IsFromMe())\n@@ -1268,7 +1277,7 @@ Value keypoolrefill(const Array& params, bool fHelp)\n             \"Fills the keypool.\"\n             + HelpRequiringPassphrase());\n \n-    unsigned int kpSize = max(GetArg(\"-keypool\", 100), 0LL);\n+    unsigned int kpSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n     if (params.size() > 0) {\n         if (params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size\");\n@@ -1325,7 +1334,7 @@ Value walletpassphrase(const Array& params, bool fHelp)\n \n     pwalletMain->TopUpKeyPool();\n \n-    int64 nSleepTime = params[1].get_int64();\n+    int64_t nSleepTime = params[1].get_int64();\n     LOCK(cs_nWalletUnlockTime);\n     nWalletUnlockTime = GetTime() + nSleepTime;\n     RPCRunLater(\"lockwallet\", boost::bind(LockWallet, pwalletMain), nSleepTime);"
      },
      {
        "sha": "dbf391b2ab0309dde8854f9e698070ffdc268f12",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,24 +2,27 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #include \"script.h\"\n-#include \"core.h\"\n-#include \"keystore.h\"\n+\n #include \"bignum.h\"\n+#include \"core.h\"\n+#include \"hash.h\"\n #include \"key.h\"\n+#include \"keystore.h\"\n #include \"sync.h\"\n+#include \"uint256.h\"\n #include \"util.h\"\n \n+#include <stdint.h>\n+\n #include <boost/foreach.hpp>\n #include <boost/tuple/tuple.hpp>\n+#include <boost/tuple/tuple_comparison.hpp>\n \n using namespace std;\n using namespace boost;\n \n-bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n-\n-\n-\n typedef vector<unsigned char> valtype;\n static const valtype vchFalse(0);\n static const valtype vchZero(0);\n@@ -30,6 +33,7 @@ static const CBigNum bnFalse(0);\n static const CBigNum bnTrue(1);\n static const size_t nMaxNumSize = 4;\n \n+bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n \n CBigNum CastToBigNum(const valtype& vch)\n {\n@@ -1124,12 +1128,12 @@ class CSignatureCache\n         // (~200 bytes per cache entry times 50,000 entries)\n         // Since there are a maximum of 20,000 signature operations per block\n         // 50,000 is a reasonable default.\n-        int64 nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n+        int64_t nMaxCacheSize = GetArg(\"-maxsigcachesize\", 50000);\n         if (nMaxCacheSize <= 0) return;\n \n         boost::unique_lock<boost::shared_mutex> lock(cs_sigcache);\n \n-        while (static_cast<int64>(setValid.size()) > nMaxCacheSize)\n+        while (static_cast<int64_t>(setValid.size()) > nMaxCacheSize)\n         {\n             // Evict a random entry. Random because that helps\n             // foil would-be DoS attackers who might try to pre-generate"
      },
      {
        "sha": "bd120cc07d4c5f804402b250f4e02164d635e967",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 30,
        "deletions": 25,
        "changes": 55,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,19 +2,24 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef H_BITCOIN_SCRIPT\n #define H_BITCOIN_SCRIPT\n \n+#include \"bignum.h\"\n+#include \"key.h\"\n+#include \"util.h\"\n+\n+#include <stdexcept>\n+#include <stdint.h>\n #include <string>\n #include <vector>\n \n #include <boost/foreach.hpp>\n #include <boost/variant.hpp>\n \n-#include \"keystore.h\"\n-#include \"bignum.h\"\n-\n class CCoins;\n+class CKeyStore;\n class CTransaction;\n \n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n@@ -247,7 +252,7 @@ inline std::string StackString(const std::vector<std::vector<unsigned char> >& v\n class CScript : public std::vector<unsigned char>\n {\n protected:\n-    CScript& push_int64(int64 n)\n+    CScript& push_int64(int64_t n)\n     {\n         if (n == -1 || (n >= 1 && n <= 16))\n         {\n@@ -261,7 +266,7 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n-    CScript& push_uint64(uint64 n)\n+    CScript& push_uint64(uint64_t n)\n     {\n         if (n >= 1 && n <= 16)\n         {\n@@ -298,16 +303,16 @@ class CScript : public std::vector<unsigned char>\n \n \n     //explicit CScript(char b) is not portable.  Use 'signed char' or 'unsigned char'.\n-    explicit CScript(signed char b)    { operator<<(b); }\n-    explicit CScript(short b)          { operator<<(b); }\n-    explicit CScript(int b)            { operator<<(b); }\n-    explicit CScript(long b)           { operator<<(b); }\n-    explicit CScript(int64 b)          { operator<<(b); }\n-    explicit CScript(unsigned char b)  { operator<<(b); }\n-    explicit CScript(unsigned int b)   { operator<<(b); }\n-    explicit CScript(unsigned short b) { operator<<(b); }\n-    explicit CScript(unsigned long b)  { operator<<(b); }\n-    explicit CScript(uint64 b)         { operator<<(b); }\n+    explicit CScript(signed char b)        { operator<<(b); }\n+    explicit CScript(short b)              { operator<<(b); }\n+    explicit CScript(int b)                { operator<<(b); }\n+    explicit CScript(long b)               { operator<<(b); }\n+    explicit CScript(long long b)          { operator<<(b); }\n+    explicit CScript(unsigned char b)      { operator<<(b); }\n+    explicit CScript(unsigned int b)       { operator<<(b); }\n+    explicit CScript(unsigned short b)     { operator<<(b); }\n+    explicit CScript(unsigned long b)      { operator<<(b); }\n+    explicit CScript(unsigned long long b) { operator<<(b); }\n \n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const uint256& b) { operator<<(b); }\n@@ -316,16 +321,16 @@ class CScript : public std::vector<unsigned char>\n \n \n     //CScript& operator<<(char b) is not portable.  Use 'signed char' or 'unsigned char'.\n-    CScript& operator<<(signed char b)    { return push_int64(b); }\n-    CScript& operator<<(short b)          { return push_int64(b); }\n-    CScript& operator<<(int b)            { return push_int64(b); }\n-    CScript& operator<<(long b)           { return push_int64(b); }\n-    CScript& operator<<(int64 b)          { return push_int64(b); }\n-    CScript& operator<<(unsigned char b)  { return push_uint64(b); }\n-    CScript& operator<<(unsigned int b)   { return push_uint64(b); }\n-    CScript& operator<<(unsigned short b) { return push_uint64(b); }\n-    CScript& operator<<(unsigned long b)  { return push_uint64(b); }\n-    CScript& operator<<(uint64 b)         { return push_uint64(b); }\n+    CScript& operator<<(signed char b)        { return push_int64(b); }\n+    CScript& operator<<(short b)              { return push_int64(b); }\n+    CScript& operator<<(int b)                { return push_int64(b); }\n+    CScript& operator<<(long b)               { return push_int64(b); }\n+    CScript& operator<<(long long b)          { return push_int64(b); }\n+    CScript& operator<<(unsigned char b)      { return push_uint64(b); }\n+    CScript& operator<<(unsigned int b)       { return push_uint64(b); }\n+    CScript& operator<<(unsigned short b)     { return push_uint64(b); }\n+    CScript& operator<<(unsigned long b)      { return push_uint64(b); }\n+    CScript& operator<<(unsigned long long b) { return push_uint64(b); }\n \n     CScript& operator<<(opcodetype opcode)\n     {"
      },
      {
        "sha": "4a9ff579f4ecfe94da8dd01b4c18138730c5788d",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 76,
        "deletions": 77,
        "changes": 153,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,32 +2,31 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_SERIALIZE_H\n #define BITCOIN_SERIALIZE_H\n \n-#include <string>\n-#include <vector>\n+#include \"allocators.h\"\n+\n+#include <algorithm>\n+#include <assert.h>\n+#include <limits>\n+#include <ios>\n #include <map>\n #include <set>\n-#include <cassert>\n-#include <limits>\n-#include <cstring>\n-#include <cstdio>\n+#include <stdint.h>\n+#include <string>\n+#include <string.h>\n+#include <utility>\n+#include <vector>\n \n-#include <boost/type_traits/is_fundamental.hpp>\n #include <boost/tuple/tuple.hpp>\n-#include <boost/tuple/tuple_comparison.hpp>\n-#include <boost/tuple/tuple_io.hpp>\n-\n-#include \"allocators.h\"\n-#include \"version.h\"\n-\n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n+#include <boost/type_traits/is_fundamental.hpp>\n \n-class CScript;\n-class CDataStream;\n class CAutoFile;\n+class CDataStream;\n+class CScript;\n+\n static const unsigned int MAX_SIZE = 0x02000000;\n \n // Used to bypass the rule against non-const reference to temporary\n@@ -103,47 +102,47 @@ enum\n #define WRITEDATA(s, obj)   s.write((char*)&(obj), sizeof(obj))\n #define READDATA(s, obj)    s.read((char*)&(obj), sizeof(obj))\n \n-inline unsigned int GetSerializeSize(char a,           int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed char a,    int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned char a,  int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed short a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned short a, int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed int a,     int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned int a,   int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(signed long a,    int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(unsigned long a,  int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(int64 a,          int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(uint64 a,         int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(float a,          int, int=0) { return sizeof(a); }\n-inline unsigned int GetSerializeSize(double a,         int, int=0) { return sizeof(a); }\n-\n-template<typename Stream> inline void Serialize(Stream& s, char a,           int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed char a,    int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned char a,  int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed short a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned short a, int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed int a,     int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned int a,   int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, signed long a,    int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, unsigned long a,  int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, int64 a,          int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, uint64 a,         int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, float a,          int, int=0) { WRITEDATA(s, a); }\n-template<typename Stream> inline void Serialize(Stream& s, double a,         int, int=0) { WRITEDATA(s, a); }\n-\n-template<typename Stream> inline void Unserialize(Stream& s, char& a,           int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed char& a,    int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,  int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed short& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a, int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed int& a,     int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,   int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, signed long& a,    int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,  int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, int64& a,          int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, uint64& a,         int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, float& a,          int, int=0) { READDATA(s, a); }\n-template<typename Stream> inline void Unserialize(Stream& s, double& a,         int, int=0) { READDATA(s, a); }\n+inline unsigned int GetSerializeSize(char a,               int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(signed char a,        int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(unsigned char a,      int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(signed short a,       int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(unsigned short a,     int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(signed int a,         int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(unsigned int a,       int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(signed long a,        int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(unsigned long a,      int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(signed long long a,   int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(unsigned long long a, int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(float a,              int, int=0) { return sizeof(a); }\n+inline unsigned int GetSerializeSize(double a,             int, int=0) { return sizeof(a); }\n+\n+template<typename Stream> inline void Serialize(Stream& s, char a,               int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, signed char a,        int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, unsigned char a,      int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, signed short a,       int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, unsigned short a,     int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, signed int a,         int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, unsigned int a,       int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, signed long a,        int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, unsigned long a,      int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, signed long long a,   int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, unsigned long long a, int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, float a,              int, int=0) { WRITEDATA(s, a); }\n+template<typename Stream> inline void Serialize(Stream& s, double a,             int, int=0) { WRITEDATA(s, a); }\n+\n+template<typename Stream> inline void Unserialize(Stream& s, char& a,               int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, signed char& a,        int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, unsigned char& a,      int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, signed short& a,       int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, unsigned short& a,     int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, signed int& a,         int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, unsigned int& a,       int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, signed long& a,        int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, unsigned long& a,      int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, signed long long& a,   int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, unsigned long long& a, int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, float& a,              int, int=0) { READDATA(s, a); }\n+template<typename Stream> inline void Unserialize(Stream& s, double& a,             int, int=0) { READDATA(s, a); }\n \n inline unsigned int GetSerializeSize(bool a, int, int=0)                          { return sizeof(char); }\n template<typename Stream> inline void Serialize(Stream& s, bool a, int, int=0)    { char f=a; WRITEDATA(s, f); }\n@@ -161,16 +160,16 @@ template<typename Stream> inline void Unserialize(Stream& s, bool& a, int, int=0\n //  size <= UINT_MAX   -- 5 bytes  (254 + 4 bytes)\n //  size >  UINT_MAX   -- 9 bytes  (255 + 8 bytes)\n //\n-inline unsigned int GetSizeOfCompactSize(uint64 nSize)\n+inline unsigned int GetSizeOfCompactSize(uint64_t nSize)\n {\n     if (nSize < 253)             return sizeof(unsigned char);\n     else if (nSize <= std::numeric_limits<unsigned short>::max()) return sizeof(unsigned char) + sizeof(unsigned short);\n     else if (nSize <= std::numeric_limits<unsigned int>::max())  return sizeof(unsigned char) + sizeof(unsigned int);\n-    else                         return sizeof(unsigned char) + sizeof(uint64);\n+    else                         return sizeof(unsigned char) + sizeof(uint64_t);\n }\n \n template<typename Stream>\n-void WriteCompactSize(Stream& os, uint64 nSize)\n+void WriteCompactSize(Stream& os, uint64_t nSize)\n {\n     if (nSize < 253)\n     {\n@@ -194,19 +193,19 @@ void WriteCompactSize(Stream& os, uint64 nSize)\n     else\n     {\n         unsigned char chSize = 255;\n-        uint64 xSize = nSize;\n+        uint64_t xSize = nSize;\n         WRITEDATA(os, chSize);\n         WRITEDATA(os, xSize);\n     }\n     return;\n }\n \n template<typename Stream>\n-uint64 ReadCompactSize(Stream& is)\n+uint64_t ReadCompactSize(Stream& is)\n {\n     unsigned char chSize;\n     READDATA(is, chSize);\n-    uint64 nSizeRet = 0;\n+    uint64_t nSizeRet = 0;\n     if (chSize < 253)\n     {\n         nSizeRet = chSize;\n@@ -229,13 +228,13 @@ uint64 ReadCompactSize(Stream& is)\n     }\n     else\n     {\n-        uint64 xSize;\n+        uint64_t xSize;\n         READDATA(is, xSize);\n         nSizeRet = xSize;\n         if (nSizeRet < 0x100000000LLu)\n             throw std::ios_base::failure(\"non-canonical ReadCompactSize()\");\n     }\n-    if (nSizeRet > (uint64)MAX_SIZE)\n+    if (nSizeRet > (uint64_t)MAX_SIZE)\n         throw std::ios_base::failure(\"ReadCompactSize() : size too large\");\n     return nSizeRet;\n }\n@@ -1227,10 +1226,10 @@ class CBufferedFile\n {\n private:\n     FILE *src;          // source file\n-    uint64 nSrcPos;     // how many bytes have been read from source\n-    uint64 nReadPos;    // how many bytes have been read from this\n-    uint64 nReadLimit;  // up to which position we're allowed to read\n-    uint64 nRewind;     // how many bytes we guarantee to rewind\n+    uint64_t nSrcPos;     // how many bytes have been read from source\n+    uint64_t nReadPos;    // how many bytes have been read from this\n+    uint64_t nReadLimit;  // up to which position we're allowed to read\n+    uint64_t nRewind;     // how many bytes we guarantee to rewind\n     std::vector<char> vchBuf; // the buffer\n \n     short state;\n@@ -1266,8 +1265,8 @@ class CBufferedFile\n     int nType;\n     int nVersion;\n \n-    CBufferedFile(FILE *fileIn, uint64 nBufSize, uint64 nRewindIn, int nTypeIn, int nVersionIn) :\n-        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n+    CBufferedFile(FILE *fileIn, uint64_t nBufSize, uint64_t nRewindIn, int nTypeIn, int nVersionIn) :\n+        src(fileIn), nSrcPos(0), nReadPos(0), nReadLimit((uint64_t)(-1)), nRewind(nRewindIn), vchBuf(nBufSize, 0),\n         state(0), exceptmask(std::ios_base::badbit | std::ios_base::failbit), nType(nTypeIn), nVersion(nVersionIn) {\n     }\n \n@@ -1305,12 +1304,12 @@ class CBufferedFile\n     }\n \n     // return the current reading position\n-    uint64 GetPos() {\n+    uint64_t GetPos() {\n         return nReadPos;\n     }\n \n     // rewind to a given reading position\n-    bool SetPos(uint64 nPos) {\n+    bool SetPos(uint64_t nPos) {\n         nReadPos = nPos;\n         if (nReadPos + nRewind < nSrcPos) {\n             nReadPos = nSrcPos - nRewind;\n@@ -1323,9 +1322,9 @@ class CBufferedFile\n         }\n     }\n \n-    bool Seek(uint64 nPos) {\n+    bool Seek(uint64_t nPos) {\n         long nLongPos = nPos;\n-        if (nPos != (uint64)nLongPos)\n+        if (nPos != (uint64_t)nLongPos)\n             return false;\n         if (fseek(src, nLongPos, SEEK_SET))\n             return false;\n@@ -1338,7 +1337,7 @@ class CBufferedFile\n \n     // prevent reading beyond a certain position\n     // no argument removes the limit\n-    bool SetLimit(uint64 nPos = (uint64)(-1)) {\n+    bool SetLimit(uint64_t nPos = (uint64_t)(-1)) {\n         if (nPos < nReadPos)\n             return false;\n         nReadLimit = nPos;"
      },
      {
        "sha": "33e1219541880f7356c8cd56e0930597b2085637",
        "filename": "src/sync.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/sync.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/sync.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"sync.h\"\n+\n #include \"util.h\"\n \n #include <boost/foreach.hpp>"
      },
      {
        "sha": "39f2cb51553e530a22a064f7766e7f555449f45b",
        "filename": "src/sync.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/sync.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/sync.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/sync.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,16 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_SYNC_H\n #define BITCOIN_SYNC_H\n \n+#include \"threadsafety.h\"\n+\n+#include <boost/thread/condition_variable.hpp>\n+#include <boost/thread/locks.hpp>\n #include <boost/thread/mutex.hpp>\n #include <boost/thread/recursive_mutex.hpp>\n-#include <boost/thread/locks.hpp>\n-#include <boost/thread/condition_variable.hpp>\n-#include \"threadsafety.h\"\n \n \n ////////////////////////////////////////////////"
      },
      {
        "sha": "78b0236b74ea4a6e16c6d3ef446eae47c73e708d",
        "filename": "src/test/Checkpoints_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/Checkpoints_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/Checkpoints_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Checkpoints_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,12 +1,12 @@\n //\n // Unit tests for block-chain checkpoints\n //\n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n \n-#include \"../checkpoints.h\"\n-#include \"../util.h\"\n+#include \"checkpoints.h\"\n+\n+#include \"uint256.h\"\n+\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "f0fb84bc542549f48877c6bc1a64e21ccafe6023",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,21 +1,23 @@\n //\n // Unit tests for denial-of-service detection/prevention code\n //\n-#include <algorithm>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-#include <boost/date_time/posix_time/posix_time_types.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n \n-#include \"chainparams.h\"\n+\n+#include \"bignum.h\"\n+#include \"keystore.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n #include \"net.h\"\n-#include \"util.h\"\n+#include \"script.h\"\n+#include \"serialize.h\"\n \n #include <stdint.h>\n \n+#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n+#include <boost/date_time/posix_time/posix_time_types.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n // Tests this internal-to-main.cpp method:\n extern bool AddOrphanTx(const CTransaction& tx);\n extern unsigned int LimitOrphanTxSize(unsigned int nMaxOrphans);\n@@ -67,7 +69,7 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n BOOST_AUTO_TEST_CASE(DoS_bantime)\n {\n     CNode::ClearBanned();\n-    int64 nStartTime = GetTime();\n+    int64_t nStartTime = GetTime();\n     SetMockTime(nStartTime); // Overrides future calls to GetTime()\n \n     CAddress addr(ip(0xa0b0c001));\n@@ -83,11 +85,11 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     BOOST_CHECK(!CNode::IsBanned(addr));\n }\n \n-static bool CheckNBits(unsigned int nbits1, int64 time1, unsigned int nbits2, int64 time2)\\\n+static bool CheckNBits(unsigned int nbits1, int64_t time1, unsigned int nbits2, int64_t time2)\\\n {\n     if (time1 > time2)\n         return CheckNBits(nbits2, time2, nbits1, time1);\n-    int64 deltaTime = time2-time1;\n+    int64_t deltaTime = time2-time1;\n \n     CBigNum required;\n     required.SetCompact(ComputeMinWork(nbits1, deltaTime));\n@@ -102,7 +104,7 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // Timestamps,nBits from the bitcoin block chain.\n     // These are the block-chain checkpoint blocks\n-    typedef std::map<int64, unsigned int> BlockData;\n+    typedef std::map<int64_t, unsigned int> BlockData;\n     BlockData chainData =\n         map_list_of(1239852051,486604799)(1262749024,486594666)\n         (1279305360,469854461)(1280200847,469830746)(1281678674,469809688)"
      },
      {
        "sha": "5f79436e4882b8ddb1fae1393d1358e1aef02147",
        "filename": "src/test/accounting_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/accounting_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/accounting_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/accounting_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,15 +1,19 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include <boost/foreach.hpp>\n \n-#include \"init.h\"\n #include \"wallet.h\"\n #include \"walletdb.h\"\n \n+#include <stdint.h>\n+\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n+extern CWallet* pwalletMain;\n+\n BOOST_AUTO_TEST_SUITE(accounting_tests)\n \n static void\n-GetResults(CWalletDB& walletdb, std::map<int64, CAccountingEntry>& results)\n+GetResults(CWalletDB& walletdb, std::map<int64_t, CAccountingEntry>& results)\n {\n     std::list<CAccountingEntry> aes;\n \n@@ -28,7 +32,7 @@ BOOST_AUTO_TEST_CASE(acc_orderupgrade)\n     std::vector<CWalletTx*> vpwtx;\n     CWalletTx wtx;\n     CAccountingEntry ae;\n-    std::map<int64, CAccountingEntry> results;\n+    std::map<int64_t, CAccountingEntry> results;\n \n     ae.strAccount = \"\";\n     ae.nCreditDebit = 1;"
      },
      {
        "sha": "adfbec9decaa1b0f02677f92acfdcadf72d2aaf3",
        "filename": "src/test/alert_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/alert_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/alert_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/alert_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,14 +2,18 @@\n // Unit tests for alert system\n //\n \n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include <fstream>\n-\n #include \"alert.h\"\n+#include \"data/alertTests.raw.h\"\n+\n #include \"serialize.h\"\n #include \"util.h\"\n-#include \"data/alertTests.raw.h\"\n+#include \"version.h\"\n+\n+#include <fstream>\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n \n #if 0\n //"
      },
      {
        "sha": "490dff87e585180cef856c211095331ac6d3a35a",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,9 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include \"init.h\"\n-#include \"main.h\"\n+\n #include \"util.h\"\n \n+#include <boost/test/unit_test.hpp>\n+\n BOOST_AUTO_TEST_SUITE(allocator_tests)\n \n // Dummy memory page locker for platform independent tests"
      },
      {
        "sha": "580e87f65fbf308adc3e388b1e3b874d2ad03b14",
        "filename": "src/test/base32_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base32_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,7 +1,9 @@\n-#include <boost/test/unit_test.hpp>\n+\n \n #include \"util.h\"\n \n+#include <boost/test/unit_test.hpp>\n+\n BOOST_AUTO_TEST_SUITE(base32_tests)\n \n BOOST_AUTO_TEST_CASE(base32_testvectors)"
      },
      {
        "sha": "84db99d8165f21833132a99b87f289056628db8e",
        "filename": "src/test/base58_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 5,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base58_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base58_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base58_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,20 @@\n-#include <boost/test/unit_test.hpp>\n-#include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_writer_template.h\"\n-#include \"json/json_spirit_utils.h\"\n+#include \"base58.h\"\n+\n #include \"data/base58_encode_decode.json.h\"\n #include \"data/base58_keys_invalid.json.h\"\n #include \"data/base58_keys_valid.json.h\"\n \n-#include \"base58.h\"\n+#include \"key.h\"\n+#include \"script.h\"\n+#include \"uint256.h\"\n #include \"util.h\"\n+\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include \"json/json_spirit_reader_template.h\"\n+#include \"json/json_spirit_utils.h\"\n+#include \"json/json_spirit_writer_template.h\"\n+\n using namespace json_spirit;\n extern Array read_json(const std::string& jsondata);\n "
      },
      {
        "sha": "c59c29066977a57e3a8eccc386ec7d2621cb7bc8",
        "filename": "src/test/base64_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base64_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/base64_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/base64_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,9 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include \"main.h\"\n-#include \"wallet.h\"\n+\n #include \"util.h\"\n \n+#include <boost/test/unit_test.hpp>\n+\n BOOST_AUTO_TEST_SUITE(base64_tests)\n \n BOOST_AUTO_TEST_CASE(base64_testvectors)"
      },
      {
        "sha": "9d67324c76e9b95ef8041fb100ed3e16b69c1db0",
        "filename": "src/test/bignum_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bignum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bignum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,9 @@\n-#include <boost/test/unit_test.hpp>\n+#include \"bignum.h\"\n+\n #include <limits>\n+#include <stdint.h>\n \n-#include \"bignum.h\"\n-#include \"util.h\"\n+#include <boost/test/unit_test.hpp>\n \n BOOST_AUTO_TEST_SUITE(bignum_tests)\n \n@@ -46,7 +47,7 @@ BOOST_AUTO_TEST_SUITE(bignum_tests)\n // Let's force this code not to be inlined, in order to actually\n // test a generic version of the function. This increases the chance\n // that -ftrapv will detect overflows.\n-NOINLINE void mysetint64(CBigNum& num, int64 n)\n+NOINLINE void mysetint64(CBigNum& num, int64_t n)\n {\n     num.setint64(n);\n }\n@@ -55,7 +56,7 @@ NOINLINE void mysetint64(CBigNum& num, int64 n)\n // value to 0, then the second one with a non-inlined function.\n BOOST_AUTO_TEST_CASE(bignum_setint64)\n {\n-    int64 n;\n+    int64_t n;\n \n     {\n         n = 0;\n@@ -103,7 +104,7 @@ BOOST_AUTO_TEST_CASE(bignum_setint64)\n         BOOST_CHECK(num.ToString() == \"-5\");\n     }\n     {\n-        n = std::numeric_limits<int64>::min();\n+        n = std::numeric_limits<int64_t>::min();\n         CBigNum num(n);\n         BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n         num.setulong(0);\n@@ -112,7 +113,7 @@ BOOST_AUTO_TEST_CASE(bignum_setint64)\n         BOOST_CHECK(num.ToString() == \"-9223372036854775808\");\n     }\n     {\n-        n = std::numeric_limits<int64>::max();\n+        n = std::numeric_limits<int64_t>::max();\n         CBigNum num(n);\n         BOOST_CHECK(num.ToString() == \"9223372036854775807\");\n         num.setulong(0);"
      },
      {
        "sha": "2bcca24336c6388a0328959ba2610a11db7c26e0",
        "filename": "src/test/bip32_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bip32_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bip32_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bip32_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,13 @@\n #include <boost/test/unit_test.hpp>\n \n-#include <string>\n-#include <vector>\n-\n-#include \"key.h\"\n #include \"base58.h\"\n+#include \"key.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include <string>\n+#include <vector>\n+\n struct TestDerivation {\n     std::string pub;\n     std::string prv;"
      },
      {
        "sha": "c4e4403b7027c43e8317f56a178a33ad1a79a9bd",
        "filename": "src/test/bloom_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 5,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bloom_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/bloom_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bloom_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,11 +1,15 @@\n-#include <boost/test/unit_test.hpp>\n-#include <vector>\n-\n #include \"bloom.h\"\n-#include \"util.h\"\n-#include \"key.h\"\n+\n #include \"base58.h\"\n+#include \"key.h\"\n #include \"main.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n using namespace boost::tuples;"
      },
      {
        "sha": "c521f2cf9c5fce7d68ed5756bff606780e77170b",
        "filename": "src/test/canonical_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/canonical_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/canonical_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/canonical_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,16 +1,19 @@\n //\n // Unit tests for canonical signatures\n+//\n+\n \n-#include \"json/json_spirit_writer_template.h\"\n-#include <boost/test/unit_test.hpp>\n-#include <openssl/ecdsa.h>\n \n-#include \"key.h\"\n #include \"script.h\"\n #include \"util.h\"\n #include \"data/sig_noncanonical.json.h\"\n #include \"data/sig_canonical.json.h\"\n \n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+#include \"json/json_spirit_writer_template.h\"\n+#include <openssl/ecdsa.h>\n+\n using namespace std;\n using namespace json_spirit;\n "
      },
      {
        "sha": "d47a33fd46f6ae47f0c0738e7d7ccf17b586e7d7",
        "filename": "src/test/checkblock_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/checkblock_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/checkblock_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/checkblock_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,17 +1,17 @@\n //\n // Unit tests for block.CheckBlock()\n //\n-#include <algorithm>\n \n-#include <boost/assign/list_of.hpp> // for 'map_list_of()'\n-#include <boost/date_time/posix_time/posix_time_types.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n+\n \n #include \"main.h\"\n-#include \"wallet.h\"\n-#include \"net.h\"\n-#include \"util.h\"\n+\n+#include <cstdio>\n+\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/filesystem/path.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n \n BOOST_AUTO_TEST_SUITE(CheckBlock_tests)\n "
      },
      {
        "sha": "4d169147745abb946de847560f322d50b760a3bd",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,11 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include <string>\n-#include <vector>\n \n #include \"main.h\"\n+#include \"util.h\"\n+\n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n \n // amounts 0.00000001 .. 0.00100000\n #define NUM_MULTIPLES_UNIT 100000\n@@ -17,19 +19,17 @@\n // amounts 50 .. 21000000\n #define NUM_MULTIPLES_50BTC 420000\n \n-using namespace std;\n-\n BOOST_AUTO_TEST_SUITE(compress_tests)\n \n-bool static TestEncode(uint64 in) {\n+bool static TestEncode(uint64_t in) {\n     return in == CTxOutCompressor::DecompressAmount(CTxOutCompressor::CompressAmount(in));\n }\n \n-bool static TestDecode(uint64 in) {\n+bool static TestDecode(uint64_t in) {\n     return in == CTxOutCompressor::CompressAmount(CTxOutCompressor::DecompressAmount(in));\n }\n \n-bool static TestPair(uint64 dec, uint64 enc) {\n+bool static TestPair(uint64_t dec, uint64_t enc) {\n     return CTxOutCompressor::CompressAmount(dec) == enc &&\n            CTxOutCompressor::DecompressAmount(enc) == dec;\n }\n@@ -43,19 +43,19 @@ BOOST_AUTO_TEST_CASE(compress_amounts)\n     BOOST_CHECK(TestPair(      50*COIN,      0x32));\n     BOOST_CHECK(TestPair(21000000*COIN, 0x1406f40));\n \n-    for (uint64 i = 1; i <= NUM_MULTIPLES_UNIT; i++)\n+    for (uint64_t i = 1; i <= NUM_MULTIPLES_UNIT; i++)\n         BOOST_CHECK(TestEncode(i));\n \n-    for (uint64 i = 1; i <= NUM_MULTIPLES_CENT; i++)\n+    for (uint64_t i = 1; i <= NUM_MULTIPLES_CENT; i++)\n         BOOST_CHECK(TestEncode(i * CENT));\n \n-    for (uint64 i = 1; i <= NUM_MULTIPLES_1BTC; i++)\n+    for (uint64_t i = 1; i <= NUM_MULTIPLES_1BTC; i++)\n         BOOST_CHECK(TestEncode(i * COIN));\n \n-    for (uint64 i = 1; i <= NUM_MULTIPLES_50BTC; i++)\n+    for (uint64_t i = 1; i <= NUM_MULTIPLES_50BTC; i++)\n         BOOST_CHECK(TestEncode(i * 50 * COIN));\n \n-    for (uint64 i = 0; i < 100000; i++)\n+    for (uint64_t i = 0; i < 100000; i++)\n         BOOST_CHECK(TestDecode(i));\n }\n "
      },
      {
        "sha": "d76124885b30a5e7efc701a170d2561903a71316",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,14 @@\n+\n+\n+#include \"util.h\"\n+\n+#include <string>\n+#include <vector>\n+\n #include <boost/algorithm/string.hpp>\n #include <boost/foreach.hpp>\n #include <boost/test/unit_test.hpp>\n \n-#include \"util.h\"\n-\n BOOST_AUTO_TEST_SUITE(getarg_tests)\n \n static void ResetArgs(const std::string& strArg)"
      },
      {
        "sha": "28410f0fed12544445b6da22bc141997317431ca",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,11 @@\n-#include <boost/test/unit_test.hpp>\n-#include <vector>\n \n-#include \"util.h\"\n+\n #include \"hash.h\"\n+#include \"util.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "68868866aa23dfba4ce0498d71413d7c161c289a",
        "filename": "src/test/hmac_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/hmac_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/hmac_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hmac_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,10 @@\n-#include <boost/test/unit_test.hpp>\n+\n \n #include \"hash.h\"\n #include \"util.h\"\n \n+#include <boost/test/unit_test.hpp>\n+\n using namespace std;\n \n BOOST_AUTO_TEST_SUITE(hmac_tests)"
      },
      {
        "sha": "421ffeac452b27e6a9d9d0d9135012268bacd4dc",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,15 @@\n-#include <boost/test/unit_test.hpp>\n-\n-#include <string>\n-#include <vector>\n-\n #include \"key.h\"\n+\n #include \"base58.h\"\n+#include \"script.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n \n+#include <string>\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n+\n using namespace std;\n \n static const string strSecret1     (\"5HxWvvfubhXpYYpS3tJkw6fq9jE9j18THftkZjHHfmFiWtmAbrj\");"
      },
      {
        "sha": "dcb7f9abd4b3b6c6ac5fea7ca3152ff423ee650d",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,12 +1,14 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include \"init.h\"\n+\n #include \"main.h\"\n+#include \"miner.h\"\n #include \"uint256.h\"\n #include \"util.h\"\n-#include \"miner.h\"\n #include \"wallet.h\"\n \n+#include <boost/test/unit_test.hpp>\n+\n+extern CWallet* pwalletMain;\n extern void SHA256Transform(void* pstate, void* pinput, const void* pinit);\n \n BOOST_AUTO_TEST_SUITE(miner_tests)"
      },
      {
        "sha": "638c88fabe2a18d2ac0f17bcde5da51b55689cb5",
        "filename": "src/test/mruset_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 4,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/mruset_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/mruset_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mruset_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,16 @@\n-#include <boost/test/unit_test.hpp>\n-\n-using namespace std;\n-\n #include \"mruset.h\"\n+\n #include \"util.h\"\n \n+#include <set>\n+\n+#include <boost/test/unit_test.hpp>\n+\n #define NUM_TESTS 16\n #define MAX_SIZE 100\n \n+using namespace std;\n+\n class mrutester\n {\n private:"
      },
      {
        "sha": "772217b888f592da9503ea7374164ef0b501ca77",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 10,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,18 +1,14 @@\n-#include <boost/assert.hpp>\n-#include <boost/assign/list_of.hpp>\n-#include <boost/assign/list_inserter.hpp>\n-#include <boost/assign/std/vector.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/tuple/tuple.hpp>\n \n-#include <openssl/ec.h>\n-#include <openssl/err.h>\n \n+#include \"key.h\"\n #include \"keystore.h\"\n #include \"main.h\"\n #include \"script.h\"\n-#include \"wallet.h\"\n+#include \"uint256.h\"\n+\n+#include <boost/assign/std/vector.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n using namespace boost::assign;"
      },
      {
        "sha": "412ba0491096cadcae816889264a84607a30b664",
        "filename": "src/test/netbase_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/netbase_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/netbase_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/netbase_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,8 @@\n-#include <boost/test/unit_test.hpp>\n+#include \"netbase.h\"\n \n #include <string>\n-#include <vector>\n \n-#include \"netbase.h\"\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "dea5e1b824825bedf00bee73937ab1226829b11e",
        "filename": "src/test/pmt_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/pmt_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/pmt_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/pmt_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,7 +1,12 @@\n-#include <boost/test/unit_test.hpp>\n \n-#include \"uint256.h\"\n+\n #include \"main.h\"\n+#include \"serialize.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "4fb2aeb6ae2bde08a638e6d3f9dbe4ca6e402a8f",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 5,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,10 +1,9 @@\n-#include <boost/algorithm/string.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/test/unit_test.hpp>\n+#include \"bitcoinrpc.h\"\n \n #include \"base58.h\"\n-#include \"util.h\"\n-#include \"bitcoinrpc.h\"\n+\n+#include <boost/algorithm/string.hpp>\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n using namespace json_spirit;"
      },
      {
        "sha": "e57dc9bbbad15909e37efa49999629d9079bc314",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,13 @@\n-#include <boost/assert.hpp>\n-#include <boost/assign/list_of.hpp>\n-#include <boost/assign/list_inserter.hpp>\n-#include <boost/assign/std/vector.hpp>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n+#include \"script.h\"\n+\n+#include \"key.h\"\n+#include \"keystore.h\"\n+#include \"main.h\"\n+#include \"script.h\"\n \n-#include \"../main.h\"\n-#include \"../script.h\"\n-#include \"../wallet.h\"\n+#include <vector>\n+\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "dee0f110ad7d7a0aab61bda48513e0769f04fe2d",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,21 +1,28 @@\n-#include <iostream>\n+#include \"script.h\"\n+\n+#include \"data/script_invalid.json.h\"\n+#include \"data/script_valid.json.h\"\n+\n+#include \"key.h\"\n+#include \"keystore.h\"\n+#include \"main.h\"\n+\n #include <fstream>\n+#include <stdint.h>\n+#include <string>\n #include <vector>\n+\n #include <boost/algorithm/string/classification.hpp>\n #include <boost/algorithm/string/predicate.hpp>\n #include <boost/algorithm/string/replace.hpp>\n #include <boost/algorithm/string/split.hpp>\n+#include <boost/filesystem/operations.hpp>\n+#include <boost/filesystem/path.hpp>\n #include <boost/foreach.hpp>\n-#include <boost/preprocessor/stringize.hpp>\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_reader_template.h\"\n-#include \"json/json_spirit_writer_template.h\"\n #include \"json/json_spirit_utils.h\"\n-\n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"data/script_invalid.json.h\"\n-#include \"data/script_valid.json.h\"\n+#include \"json/json_spirit_writer_template.h\"\n \n using namespace std;\n using namespace json_spirit;\n@@ -60,7 +67,7 @@ ParseScript(string s)\n             (starts_with(w, \"-\") && all(string(w.begin()+1, w.end()), is_digit())))\n         {\n             // Number\n-            int64 n = atoi64(w);\n+            int64_t n = atoi64(w);\n             result << n;\n         }\n         else if (starts_with(w, \"0x\") && IsHex(string(w.begin()+2, w.end())))"
      },
      {
        "sha": "afcdd118bc5359faacfa703316d4e4ce3b4519ce",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,8 @@\n-#include <boost/test/unit_test.hpp>\n+#include \"serialize.h\"\n \n-#include <string>\n-#include <vector>\n+#include <stdint.h>\n \n-#include \"serialize.h\"\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n@@ -21,7 +20,7 @@ BOOST_AUTO_TEST_CASE(varints)\n         BOOST_CHECK(size == ss.size());\n     }\n \n-    for (uint64 i = 0;  i < 100000000000ULL; i += 999999937) {\n+    for (uint64_t i = 0;  i < 100000000000ULL; i += 999999937) {\n         ss << VARINT(i);\n         size += ::GetSerializeSize(VARINT(i), 0, 0);\n         BOOST_CHECK(size == ss.size());\n@@ -34,8 +33,8 @@ BOOST_AUTO_TEST_CASE(varints)\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }\n \n-    for (uint64 i = 0;  i < 100000000000ULL; i += 999999937) {\n-        uint64 j = -1;\n+    for (uint64_t i = 0;  i < 100000000000ULL; i += 999999937) {\n+        uint64_t j = -1;\n         ss >> VARINT(j);\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }"
      },
      {
        "sha": "96f663ccef6e912bdae85fee0ee5532fb4131755",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,9 +1,13 @@\n-#include <vector>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n \n-#include \"script.h\"\n+\n #include \"key.h\"\n+#include \"script.h\"\n+#include \"uint256.h\"\n+\n+#include <vector>\n+\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n "
      },
      {
        "sha": "f9471675978774943fa89812a8612a9ea49f625e",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,12 +1,17 @@\n #define BOOST_TEST_MODULE Bitcoin Test Suite\n-#include <boost/test/unit_test.hpp>\n-#include <boost/filesystem.hpp>\n+\n+\n \n #include \"db.h\"\n-#include \"txdb.h\"\n #include \"main.h\"\n-#include \"wallet.h\"\n+#include \"txdb.h\"\n+#include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"wallet.h\"\n+\n+#include <boost/filesystem.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n \n CWallet* pwalletMain;\n CClientUIInterface uiInterface;"
      },
      {
        "sha": "ad33184bc5f360acdb3a9fd85467518b6aa10549",
        "filename": "src/test/transaction_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 5,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/transaction_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/transaction_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/transaction_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,13 +1,19 @@\n+\n+\n+#include \"data/tx_invalid.json.h\"\n+#include \"data/tx_valid.json.h\"\n+\n+#include \"key.h\"\n+#include \"keystore.h\"\n+#include \"main.h\"\n+#include \"script.h\"\n+\n #include <map>\n #include <string>\n+\n #include <boost/test/unit_test.hpp>\n #include \"json/json_spirit_writer_template.h\"\n \n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"data/tx_invalid.json.h\"\n-#include \"data/tx_valid.json.h\"\n-\n using namespace std;\n using namespace json_spirit;\n "
      },
      {
        "sha": "87418fabec44b41d78334e66182b4794c8b38547",
        "filename": "src/test/uint160_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/uint160_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/uint160_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint160_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,7 +1,9 @@\n-#include <boost/test/unit_test.hpp>\n-\n #include \"uint256.h\"\n \n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n BOOST_AUTO_TEST_SUITE(uint160_tests)\n \n BOOST_AUTO_TEST_CASE(uint160_equality)\n@@ -10,7 +12,7 @@ BOOST_AUTO_TEST_CASE(uint160_equality)\n     uint160 num2 = 11;\n     BOOST_CHECK(num1+1 == num2);\n \n-    uint64 num3 = 10;\n+    uint64_t num3 = 10;\n     BOOST_CHECK(num1 == num3);\n     BOOST_CHECK(num1+num2 == num3+num2);\n }"
      },
      {
        "sha": "188635dcbd10ef523d469e22a0f095b41d861d39",
        "filename": "src/test/uint256_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/uint256_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/uint256_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/uint256_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,10 @@\n-#include <boost/test/unit_test.hpp>\n-\n #include \"uint256.h\"\n #include <string>\n \n+#include <stdint.h>\n+\n+#include <boost/test/unit_test.hpp>\n+\n BOOST_AUTO_TEST_SUITE(uint256_tests)\n \n BOOST_AUTO_TEST_CASE(uint256_equality)\n@@ -11,7 +13,7 @@ BOOST_AUTO_TEST_CASE(uint256_equality)\n     uint256 num2 = 11;\n     BOOST_CHECK(num1+1 == num2);\n \n-    uint64 num3 = 10;\n+    uint64_t num3 = 10;\n     BOOST_CHECK(num1 == num3);\n     BOOST_CHECK(num1+num2 == num3+num2);\n }"
      },
      {
        "sha": "6a9a787fa6cc7586229d551dac8c4d84569b0ade",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,10 +1,11 @@\n+#include \"util.h\"\n+\n+#include \"sync.h\"\n+\n+#include <stdint.h>\n #include <vector>\n-#include <boost/test/unit_test.hpp>\n-#include <boost/foreach.hpp>\n \n-#include \"main.h\"\n-#include \"wallet.h\"\n-#include \"util.h\"\n+#include <boost/test/unit_test.hpp>\n \n using namespace std;\n \n@@ -200,7 +201,7 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    int64 ret = 0;\n+    int64_t ret = 0;\n     BOOST_CHECK(ParseMoney(\"0.0\", ret));\n     BOOST_CHECK_EQUAL(ret, 0);\n "
      },
      {
        "sha": "0acd94ef36ca6d0c100f59481aeccbf367048956",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 5,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,8 +1,13 @@\n-#include <boost/test/unit_test.hpp>\n-\n-#include \"main.h\"\n #include \"wallet.h\"\n \n+#include <set>\n+#include <stdint.h>\n+#include <utility>\n+#include <vector>\n+\n+#include <boost/foreach.hpp>\n+#include <boost/test/unit_test.hpp>\n+\n // how many times to run all the tests to have a chance to catch errors that only show up with particular random shuffles\n #define RUN_TESTS 100\n \n@@ -19,7 +24,7 @@ BOOST_AUTO_TEST_SUITE(wallet_tests)\n static CWallet wallet;\n static vector<COutput> vCoins;\n \n-static void add_coin(int64 nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n+static void add_coin(int64_t nValue, int nAge = 6*24, bool fIsFromMe = false, int nInput=0)\n {\n     static int nextLockTime = 0;\n     CTransaction tx;\n@@ -55,7 +60,7 @@ static bool equal_sets(CoinSet a, CoinSet b)\n BOOST_AUTO_TEST_CASE(coin_selection_tests)\n {\n     CoinSet setCoinsRet, setCoinsRet2;\n-    int64 nValueRet;\n+    int64_t nValueRet;\n \n     // test multiple times to allow for differences in the shuffle order\n     for (int i = 0; i < RUN_TESTS; i++)"
      },
      {
        "sha": "176060ac65994176a78b0386e6f7b6992e7c3576",
        "filename": "src/threadsafety.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/threadsafety.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/threadsafety.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/threadsafety.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,6 +2,7 @@\n // Copyright (c) 2009-2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_THREADSAFETY_H\n #define BITCOIN_THREADSAFETY_H\n "
      },
      {
        "sha": "3c8b0b7fe13f699d13b5d0d9d1ee27fb0525ba2f",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,9 +4,11 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"txdb.h\"\n-#include \"main.h\"\n-#include \"hash.h\"\n-#include \"chainparams.h\"\n+\n+#include \"core.h\"\n+#include \"uint256.h\"\n+\n+#include <stdint.h>\n \n using namespace std;\n \n@@ -115,7 +117,7 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n     CHashWriter ss(SER_GETHASH, PROTOCOL_VERSION);\n     stats.hashBlock = GetBestBlock()->GetBlockHash();\n     ss << stats.hashBlock;\n-    int64 nTotalAmount = 0;\n+    int64_t nTotalAmount = 0;\n     while (pcursor->Valid()) {\n         boost::this_thread::interruption_point();\n         try {"
      },
      {
        "sha": "8043a595a84e4c095f71bf3843337ff8c11d0e12",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 11,
        "deletions": 1,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,11 +2,21 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_TXDB_LEVELDB_H\n #define BITCOIN_TXDB_LEVELDB_H\n \n-#include \"main.h\"\n #include \"leveldbwrapper.h\"\n+#include \"main.h\"\n+\n+#include <map>\n+#include <string>\n+#include <utility>\n+#include <vector>\n+\n+class CBigNum;\n+class CCoins;\n+class uint256;\n \n /** CCoinsView backed by the LevelDB coin database (chainstate/) */\n class CCoinsViewDB : public CCoinsView"
      },
      {
        "sha": "d5a7832ff7e9626c70af19ef8949b1cd35661d68",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_TXMEMPOOL_H\n \n #include \"core.h\"\n+#include \"sync.h\"\n \n /*\n  * CTxMemPool stores valid-according-to-the-current-best-chain"
      },
      {
        "sha": "2378d5dfbb8a17d7e24b2a43fb3f351f2d487bc6",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,13 +2,15 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_UI_INTERFACE_H\n #define BITCOIN_UI_INTERFACE_H\n \n+#include <stdint.h>\n #include <string>\n-#include \"util.h\" // for int64\n-#include <boost/signals2/signal.hpp>\n+\n #include <boost/signals2/last_value.hpp>\n+#include <boost/signals2/signal.hpp>\n \n class CBasicKeyStore;\n class CWallet;\n@@ -71,7 +73,7 @@ class CClientUIInterface\n     boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;\n \n     /** Ask the user whether they want to pay a fee or not. */\n-    boost::signals2::signal<bool (int64 nFeeRequired), boost::signals2::last_value<bool> > ThreadSafeAskFee;\n+    boost::signals2::signal<bool (int64_t nFeeRequired), boost::signals2::last_value<bool> > ThreadSafeAskFee;\n \n     /** Handle a URL passed at the command line. */\n     boost::signals2::signal<void (const std::string& strURI)> ThreadSafeHandleURI;"
      },
      {
        "sha": "7dbb3f83bbaf053cf0eabf7afdc26acb66f15c84",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 57,
        "deletions": 60,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,18 +2,16 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_UINT256_H\n #define BITCOIN_UINT256_H\n \n-#include <limits.h>\n+#include <stdint.h>\n #include <stdio.h>\n-#include <string.h>\n-#include <inttypes.h>\n #include <string>\n+#include <string.h>\n #include <vector>\n \n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n extern const signed char p_util_hexdigit[256]; // defined in util.cpp\n \n inline signed char HexDigit(char c)\n@@ -24,7 +22,6 @@ inline signed char HexDigit(char c)\n inline int Testuint256AdHoc(std::vector<std::string> vArg);\n \n \n-\n /** Base class without constructors for uint256 and uint160.\n  * This makes the compiler let you use it in a union.\n  */\n@@ -72,7 +69,7 @@ class base_uint\n         return ret;\n     }\n \n-    base_uint& operator=(uint64 b)\n+    base_uint& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -102,14 +99,14 @@ class base_uint\n         return *this;\n     }\n \n-    base_uint& operator^=(uint64 b)\n+    base_uint& operator^=(uint64_t b)\n     {\n         pn[0] ^= (unsigned int)b;\n         pn[1] ^= (unsigned int)(b >> 32);\n         return *this;\n     }\n \n-    base_uint& operator|=(uint64 b)\n+    base_uint& operator|=(uint64_t b)\n     {\n         pn[0] |= (unsigned int)b;\n         pn[1] |= (unsigned int)(b >> 32);\n@@ -152,10 +149,10 @@ class base_uint\n \n     base_uint& operator+=(const base_uint& b)\n     {\n-        uint64 carry = 0;\n+        uint64_t carry = 0;\n         for (int i = 0; i < WIDTH; i++)\n         {\n-            uint64 n = carry + pn[i] + b.pn[i];\n+            uint64_t n = carry + pn[i] + b.pn[i];\n             pn[i] = n & 0xffffffff;\n             carry = n >> 32;\n         }\n@@ -168,15 +165,15 @@ class base_uint\n         return *this;\n     }\n \n-    base_uint& operator+=(uint64 b64)\n+    base_uint& operator+=(uint64_t b64)\n     {\n         base_uint b;\n         b = b64;\n         *this += b;\n         return *this;\n     }\n \n-    base_uint& operator-=(uint64 b64)\n+    base_uint& operator-=(uint64_t b64)\n     {\n         base_uint b;\n         b = b64;\n@@ -276,7 +273,7 @@ class base_uint\n         return true;\n     }\n \n-    friend inline bool operator==(const base_uint& a, uint64 b)\n+    friend inline bool operator==(const base_uint& a, uint64_t b)\n     {\n         if (a.pn[0] != (unsigned int)b)\n             return false;\n@@ -293,7 +290,7 @@ class base_uint\n         return (!(a == b));\n     }\n \n-    friend inline bool operator!=(const base_uint& a, uint64 b)\n+    friend inline bool operator!=(const base_uint& a, uint64_t b)\n     {\n         return (!(a == b));\n     }\n@@ -373,9 +370,9 @@ class base_uint\n         return sizeof(pn);\n     }\n \n-    uint64 Get64(int n=0) const\n+    uint64_t Get64(int n=0) const\n     {\n-        return pn[2*n] | (uint64)pn[2*n+1] << 32;\n+        return pn[2*n] | (uint64_t)pn[2*n+1] << 32;\n     }\n \n //    unsigned int GetSerializeSize(int nType=0, int nVersion=PROTOCOL_VERSION) const\n@@ -446,15 +443,15 @@ class uint160 : public base_uint160\n         return *this;\n     }\n \n-    uint160(uint64 b)\n+    uint160(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n-    uint160& operator=(uint64 b)\n+    uint160& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -477,8 +474,8 @@ class uint160 : public base_uint160\n     }\n };\n \n-inline bool operator==(const uint160& a, uint64 b)                           { return (base_uint160)a == b; }\n-inline bool operator!=(const uint160& a, uint64 b)                           { return (base_uint160)a != b; }\n+inline bool operator==(const uint160& a, uint64_t b)                         { return (base_uint160)a == b; }\n+inline bool operator!=(const uint160& a, uint64_t b)                         { return (base_uint160)a != b; }\n inline const uint160 operator<<(const base_uint160& a, unsigned int shift)   { return uint160(a) <<= shift; }\n inline const uint160 operator>>(const base_uint160& a, unsigned int shift)   { return uint160(a) >>= shift; }\n inline const uint160 operator<<(const uint160& a, unsigned int shift)        { return uint160(a) <<= shift; }\n@@ -490,41 +487,41 @@ inline const uint160 operator|(const base_uint160& a, const base_uint160& b) { r\n inline const uint160 operator+(const base_uint160& a, const base_uint160& b) { return uint160(a) += b; }\n inline const uint160 operator-(const base_uint160& a, const base_uint160& b) { return uint160(a) -= b; }\n \n-inline bool operator<(const base_uint160& a, const uint160& b)          { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const base_uint160& a, const uint160& b)         { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const base_uint160& a, const uint160& b)          { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const base_uint160& a, const uint160& b)         { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const base_uint160& a, const uint160& b)         { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const base_uint160& a, const uint160& b)         { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const base_uint160& a, const uint160& b) { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const base_uint160& a, const uint160& b) { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const base_uint160& a, const uint160& b) { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const base_uint160& a, const uint160& b) { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const base_uint160& a, const uint160& b) { return (base_uint160)a -  (base_uint160)b; }\n-\n-inline bool operator<(const uint160& a, const base_uint160& b)          { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const uint160& a, const base_uint160& b)         { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const uint160& a, const base_uint160& b)          { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const uint160& a, const base_uint160& b)         { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const uint160& a, const base_uint160& b)         { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const uint160& a, const base_uint160& b)         { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const uint160& a, const base_uint160& b) { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const uint160& a, const base_uint160& b) { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const uint160& a, const base_uint160& b) { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const uint160& a, const base_uint160& b) { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const uint160& a, const base_uint160& b) { return (base_uint160)a -  (base_uint160)b; }\n-\n-inline bool operator<(const uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }\n-inline bool operator<=(const uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }\n-inline bool operator>(const uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }\n-inline bool operator>=(const uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }\n-inline bool operator==(const uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }\n-inline bool operator!=(const uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }\n-inline const uint160 operator^(const uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }\n-inline const uint160 operator&(const uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }\n-inline const uint160 operator|(const uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }\n-inline const uint160 operator+(const uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }\n-inline const uint160 operator-(const uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }\n+inline bool operator<(const base_uint160& a, const uint160& b)               { return (base_uint160)a <  (base_uint160)b; }\n+inline bool operator<=(const base_uint160& a, const uint160& b)              { return (base_uint160)a <= (base_uint160)b; }\n+inline bool operator>(const base_uint160& a, const uint160& b)               { return (base_uint160)a >  (base_uint160)b; }\n+inline bool operator>=(const base_uint160& a, const uint160& b)              { return (base_uint160)a >= (base_uint160)b; }\n+inline bool operator==(const base_uint160& a, const uint160& b)              { return (base_uint160)a == (base_uint160)b; }\n+inline bool operator!=(const base_uint160& a, const uint160& b)              { return (base_uint160)a != (base_uint160)b; }\n+inline const uint160 operator^(const base_uint160& a, const uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }\n+inline const uint160 operator&(const base_uint160& a, const uint160& b)      { return (base_uint160)a &  (base_uint160)b; }\n+inline const uint160 operator|(const base_uint160& a, const uint160& b)      { return (base_uint160)a |  (base_uint160)b; }\n+inline const uint160 operator+(const base_uint160& a, const uint160& b)      { return (base_uint160)a +  (base_uint160)b; }\n+inline const uint160 operator-(const base_uint160& a, const uint160& b)      { return (base_uint160)a -  (base_uint160)b; }\n+\n+inline bool operator<(const uint160& a, const base_uint160& b)               { return (base_uint160)a <  (base_uint160)b; }\n+inline bool operator<=(const uint160& a, const base_uint160& b)              { return (base_uint160)a <= (base_uint160)b; }\n+inline bool operator>(const uint160& a, const base_uint160& b)               { return (base_uint160)a >  (base_uint160)b; }\n+inline bool operator>=(const uint160& a, const base_uint160& b)              { return (base_uint160)a >= (base_uint160)b; }\n+inline bool operator==(const uint160& a, const base_uint160& b)              { return (base_uint160)a == (base_uint160)b; }\n+inline bool operator!=(const uint160& a, const base_uint160& b)              { return (base_uint160)a != (base_uint160)b; }\n+inline const uint160 operator^(const uint160& a, const base_uint160& b)      { return (base_uint160)a ^  (base_uint160)b; }\n+inline const uint160 operator&(const uint160& a, const base_uint160& b)      { return (base_uint160)a &  (base_uint160)b; }\n+inline const uint160 operator|(const uint160& a, const base_uint160& b)      { return (base_uint160)a |  (base_uint160)b; }\n+inline const uint160 operator+(const uint160& a, const base_uint160& b)      { return (base_uint160)a +  (base_uint160)b; }\n+inline const uint160 operator-(const uint160& a, const base_uint160& b)      { return (base_uint160)a -  (base_uint160)b; }\n+\n+inline bool operator<(const uint160& a, const uint160& b)                    { return (base_uint160)a <  (base_uint160)b; }\n+inline bool operator<=(const uint160& a, const uint160& b)                   { return (base_uint160)a <= (base_uint160)b; }\n+inline bool operator>(const uint160& a, const uint160& b)                    { return (base_uint160)a >  (base_uint160)b; }\n+inline bool operator>=(const uint160& a, const uint160& b)                   { return (base_uint160)a >= (base_uint160)b; }\n+inline bool operator==(const uint160& a, const uint160& b)                   { return (base_uint160)a == (base_uint160)b; }\n+inline bool operator!=(const uint160& a, const uint160& b)                   { return (base_uint160)a != (base_uint160)b; }\n+inline const uint160 operator^(const uint160& a, const uint160& b)           { return (base_uint160)a ^  (base_uint160)b; }\n+inline const uint160 operator&(const uint160& a, const uint160& b)           { return (base_uint160)a &  (base_uint160)b; }\n+inline const uint160 operator|(const uint160& a, const uint160& b)           { return (base_uint160)a |  (base_uint160)b; }\n+inline const uint160 operator+(const uint160& a, const uint160& b)           { return (base_uint160)a +  (base_uint160)b; }\n+inline const uint160 operator-(const uint160& a, const uint160& b)           { return (base_uint160)a -  (base_uint160)b; }\n \n \n \n@@ -561,15 +558,15 @@ class uint256 : public base_uint256\n         return *this;\n     }\n \n-    uint256(uint64 b)\n+    uint256(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n         for (int i = 2; i < WIDTH; i++)\n             pn[i] = 0;\n     }\n \n-    uint256& operator=(uint64 b)\n+    uint256& operator=(uint64_t b)\n     {\n         pn[0] = (unsigned int)b;\n         pn[1] = (unsigned int)(b >> 32);\n@@ -592,8 +589,8 @@ class uint256 : public base_uint256\n     }\n };\n \n-inline bool operator==(const uint256& a, uint64 b)                           { return (base_uint256)a == b; }\n-inline bool operator!=(const uint256& a, uint64 b)                           { return (base_uint256)a != b; }\n+inline bool operator==(const uint256& a, uint64_t b)                          { return (base_uint256)a == b; }\n+inline bool operator!=(const uint256& a, uint64_t b)                          { return (base_uint256)a != b; }\n inline const uint256 operator<<(const base_uint256& a, unsigned int shift)   { return uint256(a) <<= shift; }\n inline const uint256 operator>>(const base_uint256& a, unsigned int shift)   { return uint256(a) >>= shift; }\n inline const uint256 operator<<(const uint256& a, unsigned int shift)        { return uint256(a) <<= shift; }"
      },
      {
        "sha": "9562cf310a5bec63811fc3a46710c3b9f9b82637",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 85,
        "deletions": 69,
        "changes": 154,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -3,71 +3,87 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"util.h\"\n+\n+#include \"chainparams.h\"\n+#include \"netbase.h\"\n+#include \"sync.h\"\n+#include \"ui_interface.h\"\n+#include \"uint256.h\"\n+#include \"version.h\"\n+\n+#include <inttypes.h>\n+#include <stdarg.h>\n+#include <stdint.h>\n+\n #ifndef WIN32\n // for posix_fallocate\n-#ifdef __linux__\n+#ifdef __linux_\n+\n+#ifdef _POSIX_C_SOURCE\n+#undef _POSIX_C_SOURCE\n+#endif\n+\n #define _POSIX_C_SOURCE 200112L\n+#include <sys/prctl.h>\n+\n #endif\n+\n #include <algorithm>\n #include <fcntl.h>\n-#include <sys/stat.h>\n #include <sys/resource.h>\n-#endif\n-\n-#include \"chainparams.h\"\n-#include \"util.h\"\n-#include \"sync.h\"\n-#include \"version.h\"\n-#include \"ui_interface.h\"\n-#include <boost/algorithm/string/join.hpp>\n-#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n-#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n-\n-// Work around clang compilation problem in Boost 1.46:\n-// /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n-// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options\n-//           http://clang.debian.net/status.php?version=3.0&key=CANNOT_FIND_FUNCTION\n-namespace boost {\n-    namespace program_options {\n-        std::string to_internal(const std::string&);\n-    }\n-}\n+#include <sys/stat.h>\n \n-#include <boost/program_options/detail/config_file.hpp>\n-#include <boost/program_options/parsers.hpp>\n-#include <boost/filesystem.hpp>\n-#include <boost/filesystem/fstream.hpp>\n-#include <boost/foreach.hpp>\n-#include <boost/thread.hpp>\n-#include <openssl/crypto.h>\n-#include <openssl/rand.h>\n-#include <stdarg.h>\n+#else\n \n-#ifdef WIN32\n #ifdef _MSC_VER\n #pragma warning(disable:4786)\n #pragma warning(disable:4804)\n #pragma warning(disable:4805)\n #pragma warning(disable:4717)\n #endif\n+\n #ifdef _WIN32_WINNT\n #undef _WIN32_WINNT\n #endif\n #define _WIN32_WINNT 0x0501\n+\n #ifdef _WIN32_IE\n #undef _WIN32_IE\n #endif\n #define _WIN32_IE 0x0501\n+\n #define WIN32_LEAN_AND_MEAN 1\n #ifndef NOMINMAX\n #define NOMINMAX\n #endif\n+\n #include <io.h> /* for _commit */\n-#include \"shlobj.h\"\n-#elif defined(__linux__)\n-# include <sys/prctl.h>\n+#include <shlobj.h>\n #endif\n \n+#include <boost/algorithm/string/case_conv.hpp> // for to_lower()\n+#include <boost/algorithm/string/join.hpp>\n+#include <boost/algorithm/string/predicate.hpp> // for startswith() and endswith()\n+#include <boost/filesystem.hpp>\n+#include <boost/filesystem/fstream.hpp>\n+#include <boost/foreach.hpp>\n+#include <boost/program_options/detail/config_file.hpp>\n+#include <boost/program_options/parsers.hpp>\n+#include <openssl/crypto.h>\n+#include <openssl/rand.h>\n+\n+// Work around clang compilation problem in Boost 1.46:\n+// /usr/include/boost/program_options/detail/config_file.hpp:163:17: error: call to function 'to_internal' that is neither visible in the template definition nor found by argument-dependent lookup\n+// See also: http://stackoverflow.com/questions/10020179/compilation-fail-in-boost-librairies-program-options\n+//           http://clang.debian.net/status.php?version=3.0&key=CANNOT_FIND_FUNCTION\n+namespace boost {\n+    namespace program_options {\n+        std::string to_internal(const std::string&);\n+    }\n+}\n+\n+\n using namespace std;\n \n map<string, string> mapArgs;\n@@ -134,7 +150,7 @@ instance_of_cinit;\n void RandAddSeed()\n {\n     // Seed with CPU performance counter\n-    int64 nCounter = GetPerformanceCounter();\n+    int64_t nCounter = GetPerformanceCounter();\n     RAND_add(&nCounter, sizeof(nCounter), 1.5);\n     memset(&nCounter, 0, sizeof(nCounter));\n }\n@@ -144,7 +160,7 @@ void RandAddSeedPerfmon()\n     RandAddSeed();\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64 nLastPerfmon;\n+    static int64_t nLastPerfmon;\n     if (GetTime() < nLastPerfmon + 10 * 60)\n         return;\n     nLastPerfmon = GetTime();\n@@ -166,15 +182,15 @@ void RandAddSeedPerfmon()\n #endif\n }\n \n-uint64 GetRand(uint64 nMax)\n+uint64_t GetRand(uint64_t nMax)\n {\n     if (nMax == 0)\n         return 0;\n \n     // The range of the random source must be a multiple of the modulus\n     // to give every possible output value an equal possibility\n-    uint64 nRange = (std::numeric_limits<uint64>::max() / nMax) * nMax;\n-    uint64 nRand = 0;\n+    uint64_t nRange = (std::numeric_limits<uint64_t>::max() / nMax) * nMax;\n+    uint64_t nRand = 0;\n     do\n         RAND_bytes((unsigned char*)&nRand, sizeof(nRand));\n     while (nRand >= nRange);\n@@ -390,14 +406,14 @@ void ParseString(const string& str, char c, vector<string>& v)\n }\n \n \n-string FormatMoney(int64 n, bool fPlus)\n+string FormatMoney(int64_t n, bool fPlus)\n {\n     // Note: not using straight sprintf here because we do NOT want\n     // localized number formatting.\n-    int64 n_abs = (n > 0 ? n : -n);\n-    int64 quotient = n_abs/COIN;\n-    int64 remainder = n_abs%COIN;\n-    string str = strprintf(\"%\"PRI64d\".%08\"PRI64d, quotient, remainder);\n+    int64_t n_abs = (n > 0 ? n : -n);\n+    int64_t quotient = n_abs/COIN;\n+    int64_t remainder = n_abs%COIN;\n+    string str = strprintf(\"%\"PRId64\".%08\"PRId64, quotient, remainder);\n \n     // Right-trim excess zeros before the decimal point:\n     int nTrim = 0;\n@@ -414,15 +430,15 @@ string FormatMoney(int64 n, bool fPlus)\n }\n \n \n-bool ParseMoney(const string& str, int64& nRet)\n+bool ParseMoney(const string& str, int64_t& nRet)\n {\n     return ParseMoney(str.c_str(), nRet);\n }\n \n-bool ParseMoney(const char* pszIn, int64& nRet)\n+bool ParseMoney(const char* pszIn, int64_t& nRet)\n {\n     string strWhole;\n-    int64 nUnits = 0;\n+    int64_t nUnits = 0;\n     const char* p = pszIn;\n     while (isspace(*p))\n         p++;\n@@ -431,7 +447,7 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n         if (*p == '.')\n         {\n             p++;\n-            int64 nMult = CENT*10;\n+            int64_t nMult = CENT*10;\n             while (isdigit(*p) && (nMult > 0))\n             {\n                 nUnits += nMult * (*p++ - '0');\n@@ -452,8 +468,8 @@ bool ParseMoney(const char* pszIn, int64& nRet)\n         return false;\n     if (nUnits < 0 || nUnits > COIN)\n         return false;\n-    int64 nWhole = atoi64(strWhole);\n-    int64 nValue = nWhole*COIN + nUnits;\n+    int64_t nWhole = atoi64(strWhole);\n+    int64_t nValue = nWhole*COIN + nUnits;\n \n     nRet = nValue;\n     return true;\n@@ -581,7 +597,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault)\n     return strDefault;\n }\n \n-int64 GetArg(const std::string& strArg, int64 nDefault)\n+int64_t GetArg(const std::string& strArg, int64_t nDefault)\n {\n     if (mapArgs.count(strArg))\n         return atoi64(mapArgs[strArg]);\n@@ -1215,7 +1231,7 @@ void AllocateFileRange(FILE *file, unsigned int offset, unsigned int length) {\n     // Windows-specific version\n     HANDLE hFile = (HANDLE)_get_osfhandle(_fileno(file));\n     LARGE_INTEGER nFileSize;\n-    int64 nEndPos = (int64)offset + length;\n+    int64_t nEndPos = (int64_t)offset + length;\n     nFileSize.u.LowPart = nEndPos & 0xFFFFFFFF;\n     nFileSize.u.HighPart = nEndPos >> 32;\n     SetFilePointerEx(hFile, nFileSize, 0, FILE_BEGIN);\n@@ -1290,37 +1306,37 @@ void ShrinkDebugFile()\n //  - Median of other nodes clocks\n //  - The user (asking the user to fix the system clock if the first two disagree)\n //\n-static int64 nMockTime = 0;  // For unit testing\n+static int64_t nMockTime = 0;  // For unit testing\n \n-int64 GetTime()\n+int64_t GetTime()\n {\n     if (nMockTime) return nMockTime;\n \n     return time(NULL);\n }\n \n-void SetMockTime(int64 nMockTimeIn)\n+void SetMockTime(int64_t nMockTimeIn)\n {\n     nMockTime = nMockTimeIn;\n }\n \n static CCriticalSection cs_nTimeOffset;\n-static int64 nTimeOffset = 0;\n+static int64_t nTimeOffset = 0;\n \n-int64 GetTimeOffset()\n+int64_t GetTimeOffset()\n {\n     LOCK(cs_nTimeOffset);\n     return nTimeOffset;\n }\n \n-int64 GetAdjustedTime()\n+int64_t GetAdjustedTime()\n {\n     return GetTime() + GetTimeOffset();\n }\n \n-void AddTimeData(const CNetAddr& ip, int64 nTime)\n+void AddTimeData(const CNetAddr& ip, int64_t nTime)\n {\n-    int64 nOffsetSample = nTime - GetTime();\n+    int64_t nOffsetSample = nTime - GetTime();\n \n     LOCK(cs_nTimeOffset);\n     // Ignore duplicates\n@@ -1329,13 +1345,13 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n         return;\n \n     // Add data\n-    static CMedianFilter<int64> vTimeOffsets(200,0);\n+    static CMedianFilter<int64_t> vTimeOffsets(200,0);\n     vTimeOffsets.input(nOffsetSample);\n-    LogPrintf(\"Added time data, samples %d, offset %+\"PRI64d\" (%+\"PRI64d\" minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n+    LogPrintf(\"Added time data, samples %d, offset %+\"PRId64\" (%+\"PRId64\" minutes)\\n\", vTimeOffsets.size(), nOffsetSample, nOffsetSample/60);\n     if (vTimeOffsets.size() >= 5 && vTimeOffsets.size() % 2 == 1)\n     {\n-        int64 nMedian = vTimeOffsets.median();\n-        std::vector<int64> vSorted = vTimeOffsets.sorted();\n+        int64_t nMedian = vTimeOffsets.median();\n+        std::vector<int64_t> vSorted = vTimeOffsets.sorted();\n         // Only let other nodes change our time by so much\n         if (abs64(nMedian) < 70 * 60)\n         {\n@@ -1350,7 +1366,7 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n             {\n                 // If nobody has a time different than ours but within 5 minutes of ours, give a warning\n                 bool fMatch = false;\n-                BOOST_FOREACH(int64 nOffset, vSorted)\n+                BOOST_FOREACH(int64_t nOffset, vSorted)\n                     if (nOffset != 0 && abs64(nOffset) < 5 * 60)\n                         fMatch = true;\n \n@@ -1365,11 +1381,11 @@ void AddTimeData(const CNetAddr& ip, int64 nTime)\n             }\n         }\n         if (fDebug) {\n-            BOOST_FOREACH(int64 n, vSorted)\n-                LogPrintf(\"%+\"PRI64d\"  \", n);\n+            BOOST_FOREACH(int64_t n, vSorted)\n+                LogPrintf(\"%+\"PRId64\"  \", n);\n             LogPrintf(\"|  \");\n         }\n-        LogPrintf(\"nTimeOffset = %+\"PRI64d\"  (%+\"PRI64d\" minutes)\\n\", nTimeOffset, nTimeOffset/60);\n+        LogPrintf(\"nTimeOffset = %+\"PRId64\"  (%+\"PRId64\" minutes)\\n\", nTimeOffset, nTimeOffset/60);\n     }\n }\n "
      },
      {
        "sha": "e52e6986b56f55326ff788b841013ba8f483aad8",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 51,
        "deletions": 57,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -2,57 +2,50 @@\n // Copyright (c) 2009-2013 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n #ifndef BITCOIN_UTIL_H\n #define BITCOIN_UTIL_H\n \n-#include \"uint256.h\"\n+#if defined(HAVE_CONFIG_H)\n+#include \"bitcoin-config.h\"\n+#endif\n+\n+#include \"compat.h\"\n+#include \"serialize.h\"\n \n+#include <cstdio>\n+#include <exception>\n+#include <inttypes.h>\n+#include <map>\n #include <stdarg.h>\n+#include <stdint.h>\n+#include <string>\n+#include <utility>\n+#include <vector>\n \n #ifndef WIN32\n-#include <sys/types.h>\n-#include <sys/time.h>\n #include <sys/resource.h>\n+#include <sys/time.h>\n+#include <sys/types.h>\n+#else\n+typedef int pid_t; /* define for Windows compatibility */\n #endif\n-#include <map>\n-#include <list>\n-#include <utility>\n-#include <vector>\n-#include <string>\n \n-#include <boost/version.hpp>\n-#include <boost/thread.hpp>\n-#include <boost/filesystem.hpp>\n #include <boost/filesystem/path.hpp>\n-#include <boost/date_time/gregorian/gregorian_types.hpp>\n-#include <boost/date_time/posix_time/posix_time_types.hpp>\n-\n-#include \"netbase.h\" // for AddTimeData\n+#include <boost/thread.hpp>\n \n-typedef long long  int64;\n-typedef unsigned long long  uint64;\n+class CNetAddr;\n+class uint256;\n \n-static const int64 COIN = 100000000;\n-static const int64 CENT = 1000000;\n+static const int64_t COIN = 100000000;\n+static const int64_t CENT = 1000000;\n \n #define BEGIN(a)            ((char*)&(a))\n #define END(a)              ((char*)&((&(a))[1]))\n #define UBEGIN(a)           ((unsigned char*)&(a))\n #define UEND(a)             ((unsigned char*)&((&(a))[1]))\n #define ARRAYLEN(array)     (sizeof(array)/sizeof((array)[0]))\n \n-#ifndef PRI64d\n-#if defined(_MSC_VER) || defined(__MSVCRT__)\n-#define PRI64d  \"I64d\"\n-#define PRI64u  \"I64u\"\n-#define PRI64x  \"I64x\"\n-#else\n-#define PRI64d  \"lld\"\n-#define PRI64u  \"llu\"\n-#define PRI64x  \"llx\"\n-#endif\n-#endif\n-\n /* Format characters for (s)size_t and ptrdiff_t */\n #if defined(_MSC_VER) || defined(__MSVCRT__)\n   /* (s)size_t and ptrdiff_t have the same size specifier in MSVC:\n@@ -73,6 +66,7 @@ static const int64 CENT = 1000000;\n   #define PRIpdd    \"td\"\n #endif\n \n+\n // This is needed because the foreach macro can't get over the comma in pair<t1, t2>\n #define PAIRTYPE(t1, t2)    std::pair<t1, t2>\n \n@@ -101,11 +95,11 @@ T* alignup(T* p)\n #define MAX_PATH            1024\n #endif\n // As Solaris does not have the MSG_NOSIGNAL flag for send(2) syscall, it is defined as 0\n-#ifndef MSG_NOSIGNAL\n+#if !defined(HAVE_MSG_NOSIGNAL) && !defined(MSG_NOSIGNAL)\n #define MSG_NOSIGNAL 0\n #endif\n \n-inline void MilliSleep(int64 n)\n+inline void MilliSleep(int64_t n)\n {\n // Boost's sleep_for was uninterruptable when backed by nanosleep from 1.50\n // until fixed in 1.52. Use the deprecated sleep method for the broken case.\n@@ -178,9 +172,9 @@ void LogException(std::exception* pex, const char* pszThread);\n void PrintException(std::exception* pex, const char* pszThread);\n void PrintExceptionContinue(std::exception* pex, const char* pszThread);\n void ParseString(const std::string& str, char c, std::vector<std::string>& v);\n-std::string FormatMoney(int64 n, bool fPlus=false);\n-bool ParseMoney(const std::string& str, int64& nRet);\n-bool ParseMoney(const char* pszIn, int64& nRet);\n+std::string FormatMoney(int64_t n, bool fPlus=false);\n+bool ParseMoney(const std::string& str, int64_t& nRet);\n+bool ParseMoney(const char* pszIn, int64_t& nRet);\n std::vector<unsigned char> ParseHex(const char* psz);\n std::vector<unsigned char> ParseHex(const std::string& str);\n bool IsHex(const std::string& str);\n@@ -215,15 +209,15 @@ boost::filesystem::path GetSpecialFolderPath(int nFolder, bool fCreate = true);\n boost::filesystem::path GetTempPath();\n void ShrinkDebugFile();\n int GetRandInt(int nMax);\n-uint64 GetRand(uint64 nMax);\n+uint64_t GetRand(uint64_t nMax);\n uint256 GetRandHash();\n-int64 GetTime();\n-void SetMockTime(int64 nMockTimeIn);\n-int64 GetAdjustedTime();\n-int64 GetTimeOffset();\n+int64_t GetTime();\n+void SetMockTime(int64_t nMockTimeIn);\n+int64_t GetAdjustedTime();\n+int64_t GetTimeOffset();\n std::string FormatFullVersion();\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments);\n-void AddTimeData(const CNetAddr& ip, int64 nTime);\n+void AddTimeData(const CNetAddr& ip, int64_t nTime);\n void runCommand(std::string strCommand);\n \n \n@@ -234,17 +228,17 @@ void runCommand(std::string strCommand);\n \n \n \n-inline std::string i64tostr(int64 n)\n+inline std::string i64tostr(int64_t n)\n {\n-    return strprintf(\"%\"PRI64d, n);\n+    return strprintf(\"%\"PRId64, n);\n }\n \n inline std::string itostr(int n)\n {\n     return strprintf(\"%d\", n);\n }\n \n-inline int64 atoi64(const char* psz)\n+inline int64_t atoi64(const char* psz)\n {\n #ifdef _MSC_VER\n     return _atoi64(psz);\n@@ -253,7 +247,7 @@ inline int64 atoi64(const char* psz)\n #endif\n }\n \n-inline int64 atoi64(const std::string& str)\n+inline int64_t atoi64(const std::string& str)\n {\n #ifdef _MSC_VER\n     return _atoi64(str.c_str());\n@@ -272,12 +266,12 @@ inline int roundint(double d)\n     return (int)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-inline int64 roundint64(double d)\n+inline int64_t roundint64(double d)\n {\n-    return (int64)(d > 0 ? d + 0.5 : d - 0.5);\n+    return (int64_t)(d > 0 ? d + 0.5 : d - 0.5);\n }\n \n-inline int64 abs64(int64 n)\n+inline int64_t abs64(int64_t n)\n {\n     return (n >= 0 ? n : -n);\n }\n@@ -318,32 +312,32 @@ inline void PrintHex(const std::vector<unsigned char>& vch, const char* pszForma\n     LogPrintf(pszFormat, HexStr(vch, fSpaces).c_str());\n }\n \n-inline int64 GetPerformanceCounter()\n+inline int64_t GetPerformanceCounter()\n {\n-    int64 nCounter = 0;\n+    int64_t nCounter = 0;\n #ifdef WIN32\n     QueryPerformanceCounter((LARGE_INTEGER*)&nCounter);\n #else\n     timeval t;\n     gettimeofday(&t, NULL);\n-    nCounter = (int64) t.tv_sec * 1000000 + t.tv_usec;\n+    nCounter = (int64_t) t.tv_sec * 1000000 + t.tv_usec;\n #endif\n     return nCounter;\n }\n \n-inline int64 GetTimeMillis()\n+inline int64_t GetTimeMillis()\n {\n     return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_milliseconds();\n }\n \n-inline int64 GetTimeMicros()\n+inline int64_t GetTimeMicros()\n {\n     return (boost::posix_time::ptime(boost::posix_time::microsec_clock::universal_time()) -\n             boost::posix_time::ptime(boost::gregorian::date(1970,1,1))).total_microseconds();\n }\n \n-inline std::string DateTimeStrFormat(const char* pszFormat, int64 nTime)\n+inline std::string DateTimeStrFormat(const char* pszFormat, int64_t nTime)\n {\n     time_t n = nTime;\n     struct tm* ptmTime = gmtime(&n);\n@@ -384,7 +378,7 @@ std::string GetArg(const std::string& strArg, const std::string& strDefault);\n  * @param default (e.g. 1)\n  * @return command-line argument (0 if invalid number) or default value\n  */\n-int64 GetArg(const std::string& strArg, int64 nDefault);\n+int64_t GetArg(const std::string& strArg, int64_t nDefault);\n \n /**\n  * Return boolean argument or default value\n@@ -549,7 +543,7 @@ inline uint32_t ByteReverse(uint32_t value)\n // or maybe:\n //    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n //    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n-template <typename Callable> void LoopForever(const char* name,  Callable func, int64 msecs)\n+template <typename Callable> void LoopForever(const char* name,  Callable func, int64_t msecs)\n {\n     std::string s = strprintf(\"bitcoin-%s\", name);\n     RenameThread(s.c_str());"
      },
      {
        "sha": "904451ac594b6e3dd66f11849b103a6ff8976109",
        "filename": "src/version.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/version.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/version.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -1,10 +1,11 @@\n // Copyright (c) 2012 The Bitcoin developers\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include <string>\n \n #include \"version.h\"\n \n+#include <string>\n+\n // Name of client reported in the 'version' message. Report the same name\n // for both bitcoind and bitcoin-qt, to make it harder for attackers to\n // target servers or GUI users specifically."
      },
      {
        "sha": "9ae929c0ac9bb000dd108556f94d5b77c2acbffd",
        "filename": "src/version.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/version.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/version.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/version.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,6 +5,7 @@\n #define BITCOIN_VERSION_H\n \n #include \"clientversion.h\"\n+\n #include <string>\n \n //"
      },
      {
        "sha": "6e49ef7b8e726b1f3ea7e9f408ae7c5e53e3594f",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 91,
        "deletions": 87,
        "changes": 178,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,11 +4,15 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"wallet.h\"\n-#include \"walletdb.h\"\n-#include \"crypter.h\"\n-#include \"ui_interface.h\"\n+\n #include \"base58.h\"\n+#include \"net.h\"\n+\n+#include <inttypes.h>\n+#include <stdint.h>\n+\n #include <boost/algorithm/string/replace.hpp>\n+#include <openssl/rand.h>\n \n using namespace std;\n \n@@ -20,8 +24,8 @@ using namespace std;\n \n struct CompareValueOnly\n {\n-    bool operator()(const pair<int64, pair<const CWalletTx*, unsigned int> >& t1,\n-                    const pair<int64, pair<const CWalletTx*, unsigned int> >& t2) const\n+    bool operator()(const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t1,\n+                    const pair<int64_t, pair<const CWalletTx*, unsigned int> >& t2) const\n     {\n         return t1.first < t2.first;\n     }\n@@ -42,7 +46,7 @@ CPubKey CWallet::GenerateNewKey()\n     CPubKey pubkey = secret.GetPubKey();\n \n     // Create new metadata\n-    int64 nCreationTime = GetTime();\n+    int64_t nCreationTime = GetTime();\n     mapKeyMetadata[pubkey.GetID()] = CKeyMetadata(nCreationTime);\n     if (!nTimeFirstKey || nCreationTime < nTimeFirstKey)\n         nTimeFirstKey = nCreationTime;\n@@ -148,7 +152,7 @@ bool CWallet::ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase,\n                 return false;\n             if (CCryptoKeyStore::Unlock(vMasterKey))\n             {\n-                int64 nStartTime = GetTimeMillis();\n+                int64_t nStartTime = GetTimeMillis();\n                 crypter.SetKeyFromPassphrase(strNewWalletPassphrase, pMasterKey.second.vchSalt, pMasterKey.second.nDeriveIterations, pMasterKey.second.nDerivationMethod);\n                 pMasterKey.second.nDeriveIterations = pMasterKey.second.nDeriveIterations * (100 / ((double)(GetTimeMillis() - nStartTime)));\n \n@@ -256,7 +260,7 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     RAND_bytes(&kMasterKey.vchSalt[0], WALLET_CRYPTO_SALT_SIZE);\n \n     CCrypter crypter;\n-    int64 nStartTime = GetTimeMillis();\n+    int64_t nStartTime = GetTimeMillis();\n     crypter.SetKeyFromPassphrase(strWalletPassphrase, kMasterKey.vchSalt, 25000, kMasterKey.nDerivationMethod);\n     kMasterKey.nDeriveIterations = 2500000 / ((double)(GetTimeMillis() - nStartTime));\n \n@@ -319,9 +323,9 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n     return true;\n }\n \n-int64 CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n+int64_t CWallet::IncOrderPosNext(CWalletDB *pwalletdb)\n {\n-    int64 nRet = nOrderPosNext++;\n+    int64_t nRet = nOrderPosNext++;\n     if (pwalletdb) {\n         pwalletdb->WriteOrderPosNext(nOrderPosNext);\n     } else {\n@@ -414,7 +418,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                     unsigned int latestEntry = 0;\n                     {\n                         // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-                        int64 latestTolerated = latestNow + 300;\n+                        int64_t latestTolerated = latestNow + 300;\n                         std::list<CAccountingEntry> acentries;\n                         TxItems txOrdered = OrderedTxItems(acentries);\n                         for (TxItems::reverse_iterator it = txOrdered.rbegin(); it != txOrdered.rend(); ++it)\n@@ -423,7 +427,7 @@ bool CWallet::AddToWallet(const CWalletTx& wtxIn)\n                             if (pwtx == &wtx)\n                                 continue;\n                             CAccountingEntry *const pacentry = (*it).second.second;\n-                            int64 nSmartTime;\n+                            int64_t nSmartTime;\n                             if (pwtx)\n                             {\n                                 nSmartTime = pwtx->nTimeSmart;\n@@ -558,7 +562,7 @@ bool CWallet::IsMine(const CTxIn &txin) const\n     return false;\n }\n \n-int64 CWallet::GetDebit(const CTxIn &txin) const\n+int64_t CWallet::GetDebit(const CTxIn &txin) const\n {\n     {\n         LOCK(cs_wallet);\n@@ -594,9 +598,9 @@ bool CWallet::IsChange(const CTxOut& txout) const\n     return false;\n }\n \n-int64 CWalletTx::GetTxTime() const\n+int64_t CWalletTx::GetTxTime() const\n {\n-    int64 n = nTimeSmart;\n+    int64_t n = nTimeSmart;\n     return n ? n : nTimeReceived;\n }\n \n@@ -639,19 +643,19 @@ int CWalletTx::GetRequestCount() const\n     return nRequests;\n }\n \n-void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n-                           list<pair<CTxDestination, int64> >& listSent, int64& nFee, string& strSentAccount) const\n+void CWalletTx::GetAmounts(list<pair<CTxDestination, int64_t> >& listReceived,\n+                           list<pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, string& strSentAccount) const\n {\n     nFee = 0;\n     listReceived.clear();\n     listSent.clear();\n     strSentAccount = strFromAccount;\n \n     // Compute fee:\n-    int64 nDebit = GetDebit();\n+    int64_t nDebit = GetDebit();\n     if (nDebit > 0) // debit>0 means we signed/sent this transaction\n     {\n-        int64 nValueOut = GetValueOut(*this);\n+        int64_t nValueOut = GetValueOut(*this);\n         nFee = nDebit - nValueOut;\n     }\n \n@@ -692,26 +696,26 @@ void CWalletTx::GetAmounts(list<pair<CTxDestination, int64> >& listReceived,\n \n }\n \n-void CWalletTx::GetAccountAmounts(const string& strAccount, int64& nReceived,\n-                                  int64& nSent, int64& nFee) const\n+void CWalletTx::GetAccountAmounts(const string& strAccount, int64_t& nReceived,\n+                                  int64_t& nSent, int64_t& nFee) const\n {\n     nReceived = nSent = nFee = 0;\n \n-    int64 allFee;\n+    int64_t allFee;\n     string strSentAccount;\n-    list<pair<CTxDestination, int64> > listReceived;\n-    list<pair<CTxDestination, int64> > listSent;\n+    list<pair<CTxDestination, int64_t> > listReceived;\n+    list<pair<CTxDestination, int64_t> > listSent;\n     GetAmounts(listReceived, listSent, allFee, strSentAccount);\n \n     if (strAccount == strSentAccount)\n     {\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& s, listSent)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& s, listSent)\n             nSent += s.second;\n         nFee = allFee;\n     }\n     {\n         LOCK(pwallet->cs_wallet);\n-        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64)& r, listReceived)\n+        BOOST_FOREACH(const PAIRTYPE(CTxDestination,int64_t)& r, listReceived)\n         {\n             if (pwallet->mapAddressBook.count(r.first))\n             {\n@@ -932,7 +936,7 @@ void CWallet::ResendWalletTransactions()\n             CWalletTx& wtx = item.second;\n             // Don't rebroadcast until it's had plenty of time that\n             // it should have gotten in already by now.\n-            if (nTimeBestReceived - (int64)wtx.nTimeReceived > 5 * 60)\n+            if (nTimeBestReceived - (int64_t)wtx.nTimeReceived > 5 * 60)\n                 mapSorted.insert(make_pair(wtx.nTimeReceived, &wtx));\n         }\n         BOOST_FOREACH(PAIRTYPE(const unsigned int, CWalletTx*)& item, mapSorted)\n@@ -954,9 +958,9 @@ void CWallet::ResendWalletTransactions()\n //\n \n \n-int64 CWallet::GetBalance() const\n+int64_t CWallet::GetBalance() const\n {\n-    int64 nTotal = 0;\n+    int64_t nTotal = 0;\n     {\n         LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -970,9 +974,9 @@ int64 CWallet::GetBalance() const\n     return nTotal;\n }\n \n-int64 CWallet::GetUnconfirmedBalance() const\n+int64_t CWallet::GetUnconfirmedBalance() const\n {\n-    int64 nTotal = 0;\n+    int64_t nTotal = 0;\n     {\n         LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -985,9 +989,9 @@ int64 CWallet::GetUnconfirmedBalance() const\n     return nTotal;\n }\n \n-int64 CWallet::GetImmatureBalance() const\n+int64_t CWallet::GetImmatureBalance() const\n {\n-    int64 nTotal = 0;\n+    int64_t nTotal = 0;\n     {\n         LOCK(cs_wallet);\n         for (map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); ++it)\n@@ -1028,8 +1032,8 @@ void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed) const\n     }\n }\n \n-static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsigned int> > >vValue, int64 nTotalLower, int64 nTargetValue,\n-                                  vector<char>& vfBest, int64& nBest, int iterations = 1000)\n+static void ApproximateBestSubset(vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > >vValue, int64_t nTotalLower, int64_t nTargetValue,\n+                                  vector<char>& vfBest, int64_t& nBest, int iterations = 1000)\n {\n     vector<char> vfIncluded;\n \n@@ -1041,7 +1045,7 @@ static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsig\n     for (int nRep = 0; nRep < iterations && nBest != nTargetValue; nRep++)\n     {\n         vfIncluded.assign(vValue.size(), false);\n-        int64 nTotal = 0;\n+        int64_t nTotal = 0;\n         bool fReachedTarget = false;\n         for (int nPass = 0; nPass < 2 && !fReachedTarget; nPass++)\n         {\n@@ -1074,18 +1078,18 @@ static void ApproximateBestSubset(vector<pair<int64, pair<const CWalletTx*,unsig\n     }\n }\n \n-bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n-                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const\n+bool CWallet::SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, vector<COutput> vCoins,\n+                                 set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n {\n     setCoinsRet.clear();\n     nValueRet = 0;\n \n     // List of values less than target\n-    pair<int64, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n-    coinLowestLarger.first = std::numeric_limits<int64>::max();\n+    pair<int64_t, pair<const CWalletTx*,unsigned int> > coinLowestLarger;\n+    coinLowestLarger.first = std::numeric_limits<int64_t>::max();\n     coinLowestLarger.second.first = NULL;\n-    vector<pair<int64, pair<const CWalletTx*,unsigned int> > > vValue;\n-    int64 nTotalLower = 0;\n+    vector<pair<int64_t, pair<const CWalletTx*,unsigned int> > > vValue;\n+    int64_t nTotalLower = 0;\n \n     random_shuffle(vCoins.begin(), vCoins.end(), GetRandInt);\n \n@@ -1097,9 +1101,9 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n             continue;\n \n         int i = output.i;\n-        int64 n = pcoin->vout[i].nValue;\n+        int64_t n = pcoin->vout[i].nValue;\n \n-        pair<int64,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n+        pair<int64_t,pair<const CWalletTx*,unsigned int> > coin = make_pair(n,make_pair(pcoin, i));\n \n         if (n == nTargetValue)\n         {\n@@ -1140,7 +1144,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n     // Solve subset sum by stochastic approximation\n     sort(vValue.rbegin(), vValue.rend(), CompareValueOnly());\n     vector<char> vfBest;\n-    int64 nBest;\n+    int64_t nBest;\n \n     ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n     if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n@@ -1172,7 +1176,7 @@ bool CWallet::SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfThe\n     return true;\n }\n \n-bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const\n+bool CWallet::SelectCoins(int64_t nTargetValue, set<pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const\n {\n     vector<COutput> vCoins;\n     AvailableCoins(vCoins);\n@@ -1185,11 +1189,11 @@ bool CWallet::SelectCoins(int64 nTargetValue, set<pair<const CWalletTx*,unsigned\n \n \n \n-bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n+bool CWallet::CreateTransaction(const vector<pair<CScript, int64_t> >& vecSend,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason)\n {\n-    int64 nValue = 0;\n-    BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+    int64_t nValue = 0;\n+    BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n     {\n         if (nValue < 0)\n         {\n@@ -1216,10 +1220,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 wtxNew.vout.clear();\n                 wtxNew.fFromMe = true;\n \n-                int64 nTotalValue = nValue + nFeeRet;\n+                int64_t nTotalValue = nValue + nFeeRet;\n                 double dPriority = 0;\n                 // vouts to the payees\n-                BOOST_FOREACH (const PAIRTYPE(CScript, int64)& s, vecSend)\n+                BOOST_FOREACH (const PAIRTYPE(CScript, int64_t)& s, vecSend)\n                 {\n                     CTxOut txout(s.second, s.first);\n                     if (txout.IsDust(CTransaction::nMinRelayTxFee))\n@@ -1232,29 +1236,29 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n \n                 // Choose coins to use\n                 set<pair<const CWalletTx*,unsigned int> > setCoins;\n-                int64 nValueIn = 0;\n+                int64_t nValueIn = 0;\n                 if (!SelectCoins(nTotalValue, setCoins, nValueIn))\n                 {\n                     strFailReason = _(\"Insufficient funds\");\n                     return false;\n                 }\n                 BOOST_FOREACH(PAIRTYPE(const CWalletTx*, unsigned int) pcoin, setCoins)\n                 {\n-                    int64 nCredit = pcoin.first->vout[pcoin.second].nValue;\n+                    int64_t nCredit = pcoin.first->vout[pcoin.second].nValue;\n                     //The priority after the next block (depth+1) is used instead of the current,\n                     //reflecting an assumption the user would accept a bit more delay for\n                     //a chance at a free transaction.\n                     dPriority += (double)nCredit * (pcoin.first->GetDepthInMainChain()+1);\n                 }\n \n-                int64 nChange = nValueIn - nValue - nFeeRet;\n+                int64_t nChange = nValueIn - nValue - nFeeRet;\n                 // The following if statement should be removed once enough miners\n                 // have upgraded to the 0.9 GetMinFee() rules. Until then, this avoids\n                 // creating free transactions that have change outputs less than\n                 // CENT bitcoins.\n                 if (nFeeRet < CTransaction::nMinTxFee && nChange > 0 && nChange < CENT)\n                 {\n-                    int64 nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n+                    int64_t nMoveToFee = min(nChange, CTransaction::nMinTxFee - nFeeRet);\n                     nChange -= nMoveToFee;\n                     nFeeRet += nMoveToFee;\n                 }\n@@ -1328,9 +1332,9 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n                 dPriority /= nTxSizeMod;\n \n                 // Check that enough fee is included\n-                int64 nPayFee = nTransactionFee * (1 + (int64)nBytes / 1000);\n+                int64_t nPayFee = nTransactionFee * (1 + (int64_t)nBytes / 1000);\n                 bool fAllowFree = AllowFree(dPriority);\n-                int64 nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n+                int64_t nMinFee = GetMinFee(wtxNew, fAllowFree, GMF_SEND);\n                 if (nFeeRet < max(nPayFee, nMinFee))\n                 {\n                     nFeeRet = max(nPayFee, nMinFee);\n@@ -1348,10 +1352,10 @@ bool CWallet::CreateTransaction(const vector<pair<CScript, int64> >& vecSend,\n     return true;\n }\n \n-bool CWallet::CreateTransaction(CScript scriptPubKey, int64 nValue,\n-                                CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason)\n+bool CWallet::CreateTransaction(CScript scriptPubKey, int64_t nValue,\n+                                CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason)\n {\n-    vector< pair<CScript, int64> > vecSend;\n+    vector< pair<CScript, int64_t> > vecSend;\n     vecSend.push_back(make_pair(scriptPubKey, nValue));\n     return CreateTransaction(vecSend, wtxNew, reservekey, nFeeRet, strFailReason);\n }\n@@ -1408,10 +1412,10 @@ bool CWallet::CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey)\n \n \n \n-string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     CReserveKey reservekey(this);\n-    int64 nFeeRequired;\n+    int64_t nFeeRequired;\n \n     if (IsLocked())\n     {\n@@ -1439,7 +1443,7 @@ string CWallet::SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew,\n \n \n \n-string CWallet::SendMoneyToDestination(const CTxDestination& address, int64 nValue, CWalletTx& wtxNew, bool fAskFee)\n+string CWallet::SendMoneyToDestination(const CTxDestination& address, int64_t nValue, CWalletTx& wtxNew, bool fAskFee)\n {\n     // Check amount\n     if (nValue <= 0)\n@@ -1528,21 +1532,21 @@ bool CWallet::NewKeyPool()\n     {\n         LOCK(cs_wallet);\n         CWalletDB walletdb(strWalletFile);\n-        BOOST_FOREACH(int64 nIndex, setKeyPool)\n+        BOOST_FOREACH(int64_t nIndex, setKeyPool)\n             walletdb.ErasePool(nIndex);\n         setKeyPool.clear();\n \n         if (IsLocked())\n             return false;\n \n-        int64 nKeys = max(GetArg(\"-keypool\", 100), (int64)0);\n+        int64_t nKeys = max(GetArg(\"-keypool\", 100), (int64_t)0);\n         for (int i = 0; i < nKeys; i++)\n         {\n-            int64 nIndex = i+1;\n+            int64_t nIndex = i+1;\n             walletdb.WritePool(nIndex, CKeyPool(GenerateNewKey()));\n             setKeyPool.insert(nIndex);\n         }\n-        LogPrintf(\"CWallet::NewKeyPool wrote %\"PRI64d\" new keys\\n\", nKeys);\n+        LogPrintf(\"CWallet::NewKeyPool wrote %\"PRId64\" new keys\\n\", nKeys);\n     }\n     return true;\n }\n@@ -1562,23 +1566,23 @@ bool CWallet::TopUpKeyPool(unsigned int kpSize)\n         if (kpSize > 0)\n             nTargetSize = kpSize;\n         else\n-            nTargetSize = max(GetArg(\"-keypool\", 100), 0LL);\n+            nTargetSize = max(GetArg(\"-keypool\", 100), (int64_t) 0);\n \n         while (setKeyPool.size() < (nTargetSize + 1))\n         {\n-            int64 nEnd = 1;\n+            int64_t nEnd = 1;\n             if (!setKeyPool.empty())\n                 nEnd = *(--setKeyPool.end()) + 1;\n             if (!walletdb.WritePool(nEnd, CKeyPool(GenerateNewKey())))\n                 throw runtime_error(\"TopUpKeyPool() : writing generated key failed\");\n             setKeyPool.insert(nEnd);\n-            LogPrintf(\"keypool added key %\"PRI64d\", size=%\"PRIszu\"\\n\", nEnd, setKeyPool.size());\n+            LogPrintf(\"keypool added key %\"PRId64\", size=%\"PRIszu\"\\n\", nEnd, setKeyPool.size());\n         }\n     }\n     return true;\n }\n \n-void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n+void CWallet::ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool)\n {\n     nIndex = -1;\n     keypool.vchPubKey = CPubKey();\n@@ -1601,17 +1605,17 @@ void CWallet::ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool)\n         if (!HaveKey(keypool.vchPubKey.GetID()))\n             throw runtime_error(\"ReserveKeyFromKeyPool() : unknown key in key pool\");\n         assert(keypool.vchPubKey.IsValid());\n-        LogPrintf(\"keypool reserve %\"PRI64d\"\\n\", nIndex);\n+        LogPrintf(\"keypool reserve %\"PRId64\"\\n\", nIndex);\n     }\n }\n \n-int64 CWallet::AddReserveKey(const CKeyPool& keypool)\n+int64_t CWallet::AddReserveKey(const CKeyPool& keypool)\n {\n     {\n         LOCK2(cs_main, cs_wallet);\n         CWalletDB walletdb(strWalletFile);\n \n-        int64 nIndex = 1 + *(--setKeyPool.end());\n+        int64_t nIndex = 1 + *(--setKeyPool.end());\n         if (!walletdb.WritePool(nIndex, keypool))\n             throw runtime_error(\"AddReserveKey() : writing added key failed\");\n         setKeyPool.insert(nIndex);\n@@ -1620,30 +1624,30 @@ int64 CWallet::AddReserveKey(const CKeyPool& keypool)\n     return -1;\n }\n \n-void CWallet::KeepKey(int64 nIndex)\n+void CWallet::KeepKey(int64_t nIndex)\n {\n     // Remove from key pool\n     if (fFileBacked)\n     {\n         CWalletDB walletdb(strWalletFile);\n         walletdb.ErasePool(nIndex);\n     }\n-    LogPrintf(\"keypool keep %\"PRI64d\"\\n\", nIndex);\n+    LogPrintf(\"keypool keep %\"PRId64\"\\n\", nIndex);\n }\n \n-void CWallet::ReturnKey(int64 nIndex)\n+void CWallet::ReturnKey(int64_t nIndex)\n {\n     // Return to key pool\n     {\n         LOCK(cs_wallet);\n         setKeyPool.insert(nIndex);\n     }\n-    LogPrintf(\"keypool return %\"PRI64d\"\\n\", nIndex);\n+    LogPrintf(\"keypool return %\"PRId64\"\\n\", nIndex);\n }\n \n bool CWallet::GetKeyFromPool(CPubKey& result)\n {\n-    int64 nIndex = 0;\n+    int64_t nIndex = 0;\n     CKeyPool keypool;\n     {\n         LOCK(cs_wallet);\n@@ -1660,9 +1664,9 @@ bool CWallet::GetKeyFromPool(CPubKey& result)\n     return true;\n }\n \n-int64 CWallet::GetOldestKeyPoolTime()\n+int64_t CWallet::GetOldestKeyPoolTime()\n {\n-    int64 nIndex = 0;\n+    int64_t nIndex = 0;\n     CKeyPool keypool;\n     ReserveKeyFromKeyPool(nIndex, keypool);\n     if (nIndex == -1)\n@@ -1671,9 +1675,9 @@ int64 CWallet::GetOldestKeyPoolTime()\n     return keypool.nTime;\n }\n \n-std::map<CTxDestination, int64> CWallet::GetAddressBalances()\n+std::map<CTxDestination, int64_t> CWallet::GetAddressBalances()\n {\n-    map<CTxDestination, int64> balances;\n+    map<CTxDestination, int64_t> balances;\n \n     {\n         LOCK(cs_wallet);\n@@ -1699,7 +1703,7 @@ std::map<CTxDestination, int64> CWallet::GetAddressBalances()\n                 if(!ExtractDestination(pcoin->vout[i].scriptPubKey, addr))\n                     continue;\n \n-                int64 n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n+                int64_t n = pcoin->IsSpent(i) ? 0 : pcoin->vout[i].nValue;\n \n                 if (!balances.count(addr))\n                     balances[addr] = 0;\n@@ -1860,7 +1864,7 @@ void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n     CWalletDB walletdb(strWalletFile);\n \n     LOCK2(cs_main, cs_wallet);\n-    BOOST_FOREACH(const int64& id, setKeyPool)\n+    BOOST_FOREACH(const int64_t& id, setKeyPool)\n     {\n         CKeyPool keypool;\n         if (!walletdb.ReadPool(id, keypool))\n@@ -1915,7 +1919,7 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n-void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n+void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const {\n     mapKeyBirth.clear();\n \n     // get birth times for keys with metadata"
      },
      {
        "sha": "5c38d7a1a0766bcf904f1fd988781071a88438f0",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 78,
        "deletions": 74,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -5,25 +5,29 @@\n #ifndef BITCOIN_WALLET_H\n #define BITCOIN_WALLET_H\n \n-#include \"walletdb.h\"\n-\n-#include <string>\n-#include <vector>\n-\n-#include <stdlib.h>\n-\n-#include \"main.h\"\n+#include \"core.h\"\n+#include \"crypter.h\"\n #include \"key.h\"\n #include \"keystore.h\"\n-#include \"script.h\"\n+#include \"main.h\"\n #include \"ui_interface.h\"\n #include \"util.h\"\n+#include \"walletdb.h\"\n+\n+#include <algorithm>\n+#include <map>\n+#include <set>\n+#include <stdexcept>\n+#include <stdint.h>\n+#include <string>\n+#include <utility>\n+#include <vector>\n \n class CAccountingEntry;\n-class CWalletTx;\n-class CReserveKey;\n class COutput;\n-class CWalletDB;\n+class CReserveKey;\n+class CScript;\n+class CWalletTx;\n \n /** (client) version numbers for particular wallet features */\n enum WalletFeature\n@@ -41,7 +45,7 @@ enum WalletFeature\n class CKeyPool\n {\n public:\n-    int64 nTime;\n+    int64_t nTime;\n     CPubKey vchPubKey;\n \n     CKeyPool()\n@@ -83,7 +87,7 @@ class CAddressBookData\n class CWallet : public CCryptoKeyStore, public CWalletInterface\n {\n private:\n-    bool SelectCoins(int64 nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n+    bool SelectCoins(int64_t nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n \n     CWalletDB *pwalletdbEncryption;\n \n@@ -93,16 +97,16 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     // the maximum wallet format version: memory-only variable that specifies to what version this wallet may be upgraded\n     int nWalletMaxVersion;\n \n-    int64 nNextResend;\n-    int64 nLastResend;\n+    int64_t nNextResend;\n+    int64_t nLastResend;\n \n public:\n     mutable CCriticalSection cs_wallet;\n \n     bool fFileBacked;\n     std::string strWalletFile;\n \n-    std::set<int64> setKeyPool;\n+    std::set<int64_t> setKeyPool;\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n \n     typedef std::map<unsigned int, CMasterKey> MasterKeyMap;\n@@ -134,7 +138,7 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     }\n \n     std::map<uint256, CWalletTx> mapWallet;\n-    int64 nOrderPosNext;\n+    int64_t nOrderPosNext;\n     std::map<uint256, int> mapRequestCount;\n \n     std::map<CTxDestination, CAddressBookData> mapAddressBook;\n@@ -143,13 +147,13 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n \n     std::set<COutPoint> setLockedCoins;\n \n-    int64 nTimeFirstKey;\n+    int64_t nTimeFirstKey;\n \n     // check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { return nWalletMaxVersion >= wf; }\n \n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true) const;\n-    bool SelectCoinsMinConf(int64 nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64& nValueRet) const;\n+    bool SelectCoinsMinConf(int64_t nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, int64_t& nValueRet) const;\n     bool IsLockedCoin(uint256 hash, unsigned int n) const;\n     void LockCoin(COutPoint& output);\n     void UnlockCoin(COutPoint& output);\n@@ -179,15 +183,15 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CKeyID, int64_t> &mapKeyBirth) const;\n \n     /** Increment the next transaction order id\n         @return next transaction order id\n      */\n-    int64 IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n+    int64_t IncOrderPosNext(CWalletDB *pwalletdb = NULL);\n \n     typedef std::pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef std::multimap<int64, TxPair > TxItems;\n+    typedef std::multimap<int64_t, TxPair > TxItems;\n \n     /** Get the wallet's activity log\n         @return multimap of ordered transactions and accounting entries\n@@ -204,46 +208,46 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions();\n-    int64 GetBalance() const;\n-    int64 GetUnconfirmedBalance() const;\n-    int64 GetImmatureBalance() const;\n-    bool CreateTransaction(const std::vector<std::pair<CScript, int64> >& vecSend,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n-    bool CreateTransaction(CScript scriptPubKey, int64 nValue,\n-                           CWalletTx& wtxNew, CReserveKey& reservekey, int64& nFeeRet, std::string& strFailReason);\n+    int64_t GetBalance() const;\n+    int64_t GetUnconfirmedBalance() const;\n+    int64_t GetImmatureBalance() const;\n+    bool CreateTransaction(const std::vector<std::pair<CScript, int64_t> >& vecSend,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason);\n+    bool CreateTransaction(CScript scriptPubKey, int64_t nValue,\n+                           CWalletTx& wtxNew, CReserveKey& reservekey, int64_t& nFeeRet, std::string& strFailReason);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);\n-    std::string SendMoney(CScript scriptPubKey, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n-    std::string SendMoneyToDestination(const CTxDestination &address, int64 nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoney(CScript scriptPubKey, int64_t nValue, CWalletTx& wtxNew, bool fAskFee=false);\n+    std::string SendMoneyToDestination(const CTxDestination &address, int64_t nValue, CWalletTx& wtxNew, bool fAskFee=false);\n \n     bool NewKeyPool();\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n-    int64 AddReserveKey(const CKeyPool& keypool);\n-    void ReserveKeyFromKeyPool(int64& nIndex, CKeyPool& keypool);\n-    void KeepKey(int64 nIndex);\n-    void ReturnKey(int64 nIndex);\n+    int64_t AddReserveKey(const CKeyPool& keypool);\n+    void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool);\n+    void KeepKey(int64_t nIndex);\n+    void ReturnKey(int64_t nIndex);\n     bool GetKeyFromPool(CPubKey &key);\n-    int64 GetOldestKeyPoolTime();\n+    int64_t GetOldestKeyPoolTime();\n     void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, int64> GetAddressBalances();\n+    std::map<CTxDestination, int64_t> GetAddressBalances();\n \n     std::set<CTxDestination> GetAccountAddresses(std::string strAccount) const;\n \n     bool IsMine(const CTxIn& txin) const;\n-    int64 GetDebit(const CTxIn& txin) const;\n+    int64_t GetDebit(const CTxIn& txin) const;\n     bool IsMine(const CTxOut& txout) const\n     {\n         return ::IsMine(*this, txout.scriptPubKey);\n     }\n-    int64 GetCredit(const CTxOut& txout) const\n+    int64_t GetCredit(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetCredit() : value out of range\");\n         return (IsMine(txout) ? txout.nValue : 0);\n     }\n     bool IsChange(const CTxOut& txout) const;\n-    int64 GetChange(const CTxOut& txout) const\n+    int64_t GetChange(const CTxOut& txout) const\n     {\n         if (!MoneyRange(txout.nValue))\n             throw std::runtime_error(\"CWallet::GetChange() : value out of range\");\n@@ -260,9 +264,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n     {\n         return (GetDebit(tx) > 0);\n     }\n-    int64 GetDebit(const CTransaction& tx) const\n+    int64_t GetDebit(const CTransaction& tx) const\n     {\n-        int64 nDebit = 0;\n+        int64_t nDebit = 0;\n         BOOST_FOREACH(const CTxIn& txin, tx.vin)\n         {\n             nDebit += GetDebit(txin);\n@@ -271,9 +275,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nDebit;\n     }\n-    int64 GetCredit(const CTransaction& tx) const\n+    int64_t GetCredit(const CTransaction& tx) const\n     {\n-        int64 nCredit = 0;\n+        int64_t nCredit = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nCredit += GetCredit(txout);\n@@ -282,9 +286,9 @@ class CWallet : public CCryptoKeyStore, public CWalletInterface\n         }\n         return nCredit;\n     }\n-    int64 GetChange(const CTransaction& tx) const\n+    int64_t GetChange(const CTransaction& tx) const\n     {\n-        int64 nChange = 0;\n+        int64_t nChange = 0;\n         BOOST_FOREACH(const CTxOut& txout, tx.vout)\n         {\n             nChange += GetChange(txout);\n@@ -349,7 +353,7 @@ class CReserveKey\n {\n protected:\n     CWallet* pwallet;\n-    int64 nIndex;\n+    int64_t nIndex;\n     CPubKey vchPubKey;\n public:\n     CReserveKey(CWallet* pwalletIn)\n@@ -372,7 +376,7 @@ class CReserveKey\n typedef std::map<std::string, std::string> mapValue_t;\n \n \n-static void ReadOrderPos(int64& nOrderPos, mapValue_t& mapValue)\n+static void ReadOrderPos(int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (!mapValue.count(\"n\"))\n     {\n@@ -383,7 +387,7 @@ static void ReadOrderPos(int64& nOrderPos, mapValue_t& mapValue)\n }\n \n \n-static void WriteOrderPos(const int64& nOrderPos, mapValue_t& mapValue)\n+static void WriteOrderPos(const int64_t& nOrderPos, mapValue_t& mapValue)\n {\n     if (nOrderPos == -1)\n         return;\n@@ -409,19 +413,19 @@ class CWalletTx : public CMerkleTx\n     char fFromMe;\n     std::string strFromAccount;\n     std::vector<char> vfSpent; // which outputs are already spent\n-    int64 nOrderPos;  // position in ordered transaction list\n+    int64_t nOrderPos;  // position in ordered transaction list\n \n     // memory only\n     mutable bool fDebitCached;\n     mutable bool fCreditCached;\n     mutable bool fImmatureCreditCached;\n     mutable bool fAvailableCreditCached;\n     mutable bool fChangeCached;\n-    mutable int64 nDebitCached;\n-    mutable int64 nCreditCached;\n-    mutable int64 nImmatureCreditCached;\n-    mutable int64 nAvailableCreditCached;\n-    mutable int64 nChangeCached;\n+    mutable int64_t nDebitCached;\n+    mutable int64_t nCreditCached;\n+    mutable int64_t nImmatureCreditCached;\n+    mutable int64_t nAvailableCreditCached;\n+    mutable int64_t nChangeCached;\n \n     CWalletTx()\n     {\n@@ -581,7 +585,7 @@ class CWalletTx : public CMerkleTx\n         return (!!vfSpent[nOut]);\n     }\n \n-    int64 GetDebit() const\n+    int64_t GetDebit() const\n     {\n         if (vin.empty())\n             return 0;\n@@ -592,7 +596,7 @@ class CWalletTx : public CMerkleTx\n         return nDebitCached;\n     }\n \n-    int64 GetCredit(bool fUseCache=true) const\n+    int64_t GetCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -606,7 +610,7 @@ class CWalletTx : public CMerkleTx\n         return nCreditCached;\n     }\n \n-    int64 GetImmatureCredit(bool fUseCache=true) const\n+    int64_t GetImmatureCredit(bool fUseCache=true) const\n     {\n         if (IsCoinBase() && GetBlocksToMaturity() > 0 && IsInMainChain())\n         {\n@@ -620,7 +624,7 @@ class CWalletTx : public CMerkleTx\n         return 0;\n     }\n \n-    int64 GetAvailableCredit(bool fUseCache=true) const\n+    int64_t GetAvailableCredit(bool fUseCache=true) const\n     {\n         // Must wait until coinbase is safely deep enough in the chain before valuing it\n         if (IsCoinBase() && GetBlocksToMaturity() > 0)\n@@ -629,7 +633,7 @@ class CWalletTx : public CMerkleTx\n         if (fUseCache && fAvailableCreditCached)\n             return nAvailableCreditCached;\n \n-        int64 nCredit = 0;\n+        int64_t nCredit = 0;\n         for (unsigned int i = 0; i < vout.size(); i++)\n         {\n             if (!IsSpent(i))\n@@ -647,7 +651,7 @@ class CWalletTx : public CMerkleTx\n     }\n \n \n-    int64 GetChange() const\n+    int64_t GetChange() const\n     {\n         if (fChangeCached)\n             return nChangeCached;\n@@ -656,11 +660,11 @@ class CWalletTx : public CMerkleTx\n         return nChangeCached;\n     }\n \n-    void GetAmounts(std::list<std::pair<CTxDestination, int64> >& listReceived,\n-                    std::list<std::pair<CTxDestination, int64> >& listSent, int64& nFee, std::string& strSentAccount) const;\n+    void GetAmounts(std::list<std::pair<CTxDestination, int64_t> >& listReceived,\n+                    std::list<std::pair<CTxDestination, int64_t> >& listSent, int64_t& nFee, std::string& strSentAccount) const;\n \n-    void GetAccountAmounts(const std::string& strAccount, int64& nReceived,\n-                           int64& nSent, int64& nFee) const;\n+    void GetAccountAmounts(const std::string& strAccount, int64_t& nReceived,\n+                           int64_t& nSent, int64_t& nFee) const;\n \n     bool IsFromMe() const\n     {\n@@ -712,7 +716,7 @@ class CWalletTx : public CMerkleTx\n \n     bool WriteToDisk();\n \n-    int64 GetTxTime() const;\n+    int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n     void AddSupportingTransactions();\n@@ -754,13 +758,13 @@ class CWalletKey\n {\n public:\n     CPrivKey vchPrivKey;\n-    int64 nTimeCreated;\n-    int64 nTimeExpires;\n+    int64_t nTimeCreated;\n+    int64_t nTimeExpires;\n     std::string strComment;\n     //// todo: add something to note what created it (user, getnewaddress, change)\n     ////   maybe should have a map<string, string> property map\n \n-    CWalletKey(int64 nExpires=0)\n+    CWalletKey(int64_t nExpires=0)\n     {\n         nTimeCreated = (nExpires ? GetTime() : 0);\n         nTimeExpires = nExpires;\n@@ -817,13 +821,13 @@ class CAccountingEntry\n {\n public:\n     std::string strAccount;\n-    int64 nCreditDebit;\n-    int64 nTime;\n+    int64_t nCreditDebit;\n+    int64_t nTime;\n     std::string strOtherAccount;\n     std::string strComment;\n     mapValue_t mapValue;\n-    int64 nOrderPos;  // position in ordered transaction list\n-    uint64 nEntryNo;\n+    int64_t nOrderPos;  // position in ordered transaction list\n+    uint64_t nEntryNo;\n \n     CAccountingEntry()\n     {"
      },
      {
        "sha": "8317862f7c63eff65672455062e6330bda39fffa",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 142,
        "deletions": 20,
        "changes": 162,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -4,15 +4,24 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include \"walletdb.h\"\n+\n+#include \"base58.h\"\n+#include \"protocol.h\"\n+#include \"serialize.h\"\n+#include \"sync.h\"\n #include \"wallet.h\"\n-#include <boost/version.hpp>\n+\n+#include <inttypes.h>\n+#include <stdint.h>\n+\n #include <boost/filesystem.hpp>\n+#include <boost/foreach.hpp>\n \n using namespace std;\n using namespace boost;\n \n \n-static uint64 nAccountingEntryNumber = 0;\n+static uint64_t nAccountingEntryNumber = 0;\n \n //\n // CWalletDB\n@@ -44,6 +53,119 @@ bool CWalletDB::ErasePurpose(const string& strPurpose)\n     return Erase(make_pair(string(\"purpose\"), strPurpose));\n }\n \n+bool CWalletDB::WriteTx(uint256 hash, const CWalletTx& wtx)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n+}\n+\n+bool CWalletDB::EraseTx(uint256 hash)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"tx\"), hash));\n+}\n+\n+bool CWalletDB::WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata& keyMeta)\n+{\n+    nWalletDBUpdated++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+               keyMeta, false))\n+        return false;\n+\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> vchKey;\n+    vchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n+    vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n+    vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n+\n+    return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n+}\n+\n+bool CWalletDB::WriteCryptedKey(const CPubKey& vchPubKey, \n+                                const std::vector<unsigned char>& vchCryptedSecret, \n+                                const CKeyMetadata &keyMeta)\n+{\n+    const bool fEraseUnencryptedKey = true;\n+    nWalletDBUpdated++;\n+\n+    if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n+            keyMeta))\n+        return false;\n+\n+    if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n+        return false;\n+    if (fEraseUnencryptedKey)\n+    {\n+        Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n+        Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n+    }\n+    return true;\n+}\n+\n+bool CWalletDB::WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n+}\n+\n+bool CWalletDB::WriteCScript(const uint160& hash, const CScript& redeemScript)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n+}\n+\n+bool CWalletDB::WriteBestBlock(const CBlockLocator& locator)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"bestblock\"), locator);\n+}\n+\n+bool CWalletDB::ReadBestBlock(CBlockLocator& locator)\n+{\n+    return Read(std::string(\"bestblock\"), locator);\n+}\n+\n+bool CWalletDB::WriteOrderPosNext(int64_t nOrderPosNext)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"orderposnext\"), nOrderPosNext);\n+}\n+\n+bool CWalletDB::WriteDefaultKey(const CPubKey& vchPubKey)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::string(\"defaultkey\"), vchPubKey);\n+}\n+\n+bool CWalletDB::ReadPool(int64_t nPool, CKeyPool& keypool)\n+{\n+    return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+}\n+\n+bool CWalletDB::WritePool(int64_t nPool, const CKeyPool& keypool)\n+{\n+    nWalletDBUpdated++;\n+    return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n+}\n+\n+bool CWalletDB::ErasePool(int64_t nPool)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"pool\"), nPool));\n+}\n+\n+bool CWalletDB::EraseSetting(const std::string& strKey)\n+{\n+    nWalletDBUpdated++;\n+    return Erase(std::make_pair(std::string(\"setting\"), strKey));\n+}\n+\n+bool CWalletDB::WriteMinVersion(int nVersion)\n+{\n+    return Write(std::string(\"minversion\"), nVersion);\n+}\n+\n bool CWalletDB::ReadAccount(const string& strAccount, CAccount& account)\n {\n     account.SetNull();\n@@ -55,7 +177,7 @@ bool CWalletDB::WriteAccount(const string& strAccount, const CAccount& account)\n     return Write(make_pair(string(\"acc\"), strAccount), account);\n }\n \n-bool CWalletDB::WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry)\n+bool CWalletDB::WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry)\n {\n     return Write(boost::make_tuple(string(\"acentry\"), acentry.strAccount, nAccEntryNum), acentry);\n }\n@@ -65,12 +187,12 @@ bool CWalletDB::WriteAccountingEntry(const CAccountingEntry& acentry)\n     return WriteAccountingEntry(++nAccountingEntryNumber, acentry);\n }\n \n-int64 CWalletDB::GetAccountCreditDebit(const string& strAccount)\n+int64_t CWalletDB::GetAccountCreditDebit(const string& strAccount)\n {\n     list<CAccountingEntry> entries;\n     ListAccountCreditDebit(strAccount, entries);\n \n-    int64 nCreditDebit = 0;\n+    int64_t nCreditDebit = 0;\n     BOOST_FOREACH (const CAccountingEntry& entry, entries)\n         nCreditDebit += entry.nCreditDebit;\n \n@@ -90,7 +212,7 @@ void CWalletDB::ListAccountCreditDebit(const string& strAccount, list<CAccountin\n         // Read next record\n         CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n         if (fFlags == DB_SET_RANGE)\n-            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64(0));\n+            ssKey << boost::make_tuple(string(\"acentry\"), (fAllAccounts? string(\"\") : strAccount), uint64_t(0));\n         CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n         int ret = ReadAtCursor(pcursor, ssKey, ssValue, fFlags);\n         fFlags = DB_NEXT;\n@@ -130,7 +252,7 @@ CWalletDB::ReorderTransactions(CWallet* pwallet)\n \n     // First: get all CWalletTx and CAccountingEntry into a sorted-by-time multimap.\n     typedef pair<CWalletTx*, CAccountingEntry*> TxPair;\n-    typedef multimap<int64, TxPair > TxItems;\n+    typedef multimap<int64_t, TxPair > TxItems;\n     TxItems txByTime;\n \n     for (map<uint256, CWalletTx>::iterator it = pwallet->mapWallet.begin(); it != pwallet->mapWallet.end(); ++it)\n@@ -145,14 +267,14 @@ CWalletDB::ReorderTransactions(CWallet* pwallet)\n         txByTime.insert(make_pair(entry.nTime, TxPair((CWalletTx*)0, &entry)));\n     }\n \n-    int64& nOrderPosNext = pwallet->nOrderPosNext;\n+    int64_t& nOrderPosNext = pwallet->nOrderPosNext;\n     nOrderPosNext = 0;\n-    std::vector<int64> nOrderPosOffsets;\n+    std::vector<int64_t> nOrderPosOffsets;\n     for (TxItems::iterator it = txByTime.begin(); it != txByTime.end(); ++it)\n     {\n         CWalletTx *const pwtx = (*it).second.first;\n         CAccountingEntry *const pacentry = (*it).second.second;\n-        int64& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n+        int64_t& nOrderPos = (pwtx != 0) ? pwtx->nOrderPos : pacentry->nOrderPos;\n \n         if (nOrderPos == -1)\n         {\n@@ -166,8 +288,8 @@ CWalletDB::ReorderTransactions(CWallet* pwallet)\n         }\n         else\n         {\n-            int64 nOrderPosOff = 0;\n-            BOOST_FOREACH(const int64& nOffsetStart, nOrderPosOffsets)\n+            int64_t nOrderPosOff = 0;\n+            BOOST_FOREACH(const int64_t& nOffsetStart, nOrderPosOffsets)\n             {\n                 if (nOrderPos >= nOffsetStart)\n                     ++nOrderPosOff;\n@@ -272,7 +394,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n \n             //// debug print\n             //LogPrintf(\"LoadWallet  %s\\n\", wtx.GetHash().ToString().c_str());\n-            //LogPrintf(\" %12\"PRI64d\"  %s  %s  %s\\n\",\n+            //LogPrintf(\" %12\"PRId64\"  %s  %s  %s\\n\",\n             //    wtx.vout[0].nValue,\n             //    DateTimeStrFormat(\"%Y-%m-%d %H:%M:%S\", wtx.GetBlockTime()).c_str(),\n             //    wtx.hashBlock.ToString().c_str(),\n@@ -282,7 +404,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             string strAccount;\n             ssKey >> strAccount;\n-            uint64 nNumber;\n+            uint64_t nNumber;\n             ssKey >> nNumber;\n             if (nNumber > nAccountingEntryNumber)\n                 nAccountingEntryNumber = nNumber;\n@@ -410,7 +532,7 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         }\n         else if (strType == \"pool\")\n         {\n-            int64 nIndex;\n+            int64_t nIndex;\n             ssKey >> nIndex;\n             CKeyPool keypool;\n             ssValue >> keypool;\n@@ -573,7 +695,7 @@ void ThreadFlushWalletDB(const string& strFile)\n \n     unsigned int nLastSeen = nWalletDBUpdated;\n     unsigned int nLastFlushed = nWalletDBUpdated;\n-    int64 nLastWalletUpdate = GetTime();\n+    int64_t nLastWalletUpdate = GetTime();\n     while (true)\n     {\n         MilliSleep(500);\n@@ -606,14 +728,14 @@ void ThreadFlushWalletDB(const string& strFile)\n                     {\n                         LogPrint(\"db\", \"Flushing wallet.dat\\n\");\n                         nLastFlushed = nWalletDBUpdated;\n-                        int64 nStart = GetTimeMillis();\n+                        int64_t nStart = GetTimeMillis();\n \n                         // Flush wallet.dat so it's self contained\n                         bitdb.CloseDb(strFile);\n                         bitdb.CheckpointLSN(strFile);\n \n                         bitdb.mapFileUseCount.erase(mi++);\n-                        LogPrint(\"db\", \"Flushed wallet.dat %\"PRI64d\"ms\\n\", GetTimeMillis() - nStart);\n+                        LogPrint(\"db\", \"Flushed wallet.dat %\"PRId64\"ms\\n\", GetTimeMillis() - nStart);\n                     }\n                 }\n             }\n@@ -673,8 +795,8 @@ bool CWalletDB::Recover(CDBEnv& dbenv, std::string filename, bool fOnlyKeys)\n     // Rewrite salvaged data to wallet.dat\n     // Set -rescan so any missing transactions will be\n     // found.\n-    int64 now = GetTime();\n-    std::string newFilename = strprintf(\"wallet.%\"PRI64d\".bak\", now);\n+    int64_t now = GetTime();\n+    std::string newFilename = strprintf(\"wallet.%\"PRId64\".bak\", now);\n \n     int result = dbenv.dbenv.dbrename(NULL, filename.c_str(), NULL,\n                                       newFilename.c_str(), DB_AUTO_COMMIT);"
      },
      {
        "sha": "c3b87bb2a67186ed159cdde82dbb4939f02a9191",
        "filename": "src/walletdb.h",
        "status": "modified",
        "additions": 33,
        "deletions": 111,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/51ed9ec971614aebdbfbd9527aba365dd0afd437/src/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.h?ref=51ed9ec971614aebdbfbd9527aba365dd0afd437",
        "patch": "@@ -6,13 +6,24 @@\n #define BITCOIN_WALLETDB_H\n \n #include \"db.h\"\n-#include \"base58.h\"\n+#include \"key.h\"\n+\n+#include <list>\n+#include <stdint.h>\n+#include <string>\n+#include <utility>\n+#include <vector>\n \n-class CKeyPool;\n class CAccount;\n class CAccountingEntry;\n+class CBlockLocator;\n+class CKeyPool;\n+class CMasterKey;\n+class CScript;\n class CWallet;\n class CWalletTx;\n+class uint160;\n+class uint256;\n \n /** Error statuses for the wallet database */\n enum DBErrors\n@@ -30,13 +41,13 @@ class CKeyMetadata\n public:\n     static const int CURRENT_VERSION=1;\n     int nVersion;\n-    int64 nCreateTime; // 0 means unknown\n+    int64_t nCreateTime; // 0 means unknown\n \n     CKeyMetadata()\n     {\n         SetNull();\n     }\n-    CKeyMetadata(int64 nCreateTime_)\n+    CKeyMetadata(int64_t nCreateTime_)\n     {\n         nVersion = CKeyMetadata::CURRENT_VERSION;\n         nCreateTime = nCreateTime_;\n@@ -73,108 +84,25 @@ class CWalletDB : public CDB\n     bool WritePurpose(const std::string& strAddress, const std::string& purpose);\n     bool ErasePurpose(const std::string& strAddress);\n \n-    bool WriteTx(uint256 hash, const CWalletTx& wtx)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"tx\"), hash), wtx);\n-    }\n+    bool WriteTx(uint256 hash, const CWalletTx& wtx);\n+    bool EraseTx(uint256 hash);\n \n-    bool EraseTx(uint256 hash)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"tx\"), hash));\n-    }\n+    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey, const CKeyMetadata &keyMeta);\n+    bool WriteCryptedKey(const CPubKey& vchPubKey, const std::vector<unsigned char>& vchCryptedSecret, const CKeyMetadata &keyMeta);\n+    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey);\n \n-    bool WriteKey(const CPubKey& vchPubKey, const CPrivKey& vchPrivKey,\n-                  const CKeyMetadata &keyMeta)\n-    {\n-        nWalletDBUpdated++;\n+    bool WriteCScript(const uint160& hash, const CScript& redeemScript);\n \n-        if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta))\n-            return false;\n-        \n-        // hash pubkey/privkey to accelerate wallet load\n-        std::vector<unsigned char> vchKey;\n-        vchKey.reserve(vchPubKey.size() + vchPrivKey.size());\n-        vchKey.insert(vchKey.end(), vchPubKey.begin(), vchPubKey.end());\n-        vchKey.insert(vchKey.end(), vchPrivKey.begin(), vchPrivKey.end());\n-        \n-        return Write(std::make_pair(std::string(\"key\"), vchPubKey), std::make_pair(vchPrivKey, Hash(vchKey.begin(), vchKey.end())), false);\n-    }\n+    bool WriteBestBlock(const CBlockLocator& locator);\n+    bool ReadBestBlock(CBlockLocator& locator);\n \n-    bool WriteCryptedKey(const CPubKey& vchPubKey,\n-                         const std::vector<unsigned char>& vchCryptedSecret,\n-                         const CKeyMetadata &keyMeta)\n-    {\n-        const bool fEraseUnencryptedKey = true;\n-        nWalletDBUpdated++;\n+    bool WriteOrderPosNext(int64_t nOrderPosNext);\n \n-        if (!Write(std::make_pair(std::string(\"keymeta\"), vchPubKey),\n-                   keyMeta))\n-            return false;\n-\n-        if (!Write(std::make_pair(std::string(\"ckey\"), vchPubKey), vchCryptedSecret, false))\n-            return false;\n-        if (fEraseUnencryptedKey)\n-        {\n-            Erase(std::make_pair(std::string(\"key\"), vchPubKey));\n-            Erase(std::make_pair(std::string(\"wkey\"), vchPubKey));\n-        }\n-        return true;\n-    }\n+    bool WriteDefaultKey(const CPubKey& vchPubKey);\n \n-    bool WriteMasterKey(unsigned int nID, const CMasterKey& kMasterKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"mkey\"), nID), kMasterKey, true);\n-    }\n-\n-    bool WriteCScript(const uint160& hash, const CScript& redeemScript)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"cscript\"), hash), redeemScript, false);\n-    }\n-\n-    bool WriteBestBlock(const CBlockLocator& locator)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool ReadBestBlock(CBlockLocator& locator)\n-    {\n-        return Read(std::string(\"bestblock\"), locator);\n-    }\n-\n-    bool WriteOrderPosNext(int64 nOrderPosNext)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"orderposnext\"), nOrderPosNext);\n-    }\n-\n-    bool WriteDefaultKey(const CPubKey& vchPubKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::string(\"defaultkey\"), vchPubKey);\n-    }\n-\n-    bool ReadPool(int64 nPool, CKeyPool& keypool)\n-    {\n-        return Read(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool WritePool(int64 nPool, const CKeyPool& keypool)\n-    {\n-        nWalletDBUpdated++;\n-        return Write(std::make_pair(std::string(\"pool\"), nPool), keypool);\n-    }\n-\n-    bool ErasePool(int64 nPool)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"pool\"), nPool));\n-    }\n+    bool ReadPool(int64_t nPool, CKeyPool& keypool);\n+    bool WritePool(int64_t nPool, const CKeyPool& keypool);\n+    bool ErasePool(int64_t nPool);\n \n     // Settings are no longer stored in wallet.dat; these are\n     // used only for backwards compatibility:\n@@ -189,24 +117,18 @@ class CWalletDB : public CDB\n         nWalletDBUpdated++;\n         return Write(std::make_pair(std::string(\"setting\"), strKey), value);\n     }\n-    bool EraseSetting(const std::string& strKey)\n-    {\n-        nWalletDBUpdated++;\n-        return Erase(std::make_pair(std::string(\"setting\"), strKey));\n-    }\n+ \n+    bool EraseSetting(const std::string& strKey);\n \n-    bool WriteMinVersion(int nVersion)\n-    {\n-        return Write(std::string(\"minversion\"), nVersion);\n-    }\n+    bool WriteMinVersion(int nVersion);\n \n     bool ReadAccount(const std::string& strAccount, CAccount& account);\n     bool WriteAccount(const std::string& strAccount, const CAccount& account);\n private:\n-    bool WriteAccountingEntry(const uint64 nAccEntryNum, const CAccountingEntry& acentry);\n+    bool WriteAccountingEntry(const uint64_t nAccEntryNum, const CAccountingEntry& acentry);\n public:\n     bool WriteAccountingEntry(const CAccountingEntry& acentry);\n-    int64 GetAccountCreditDebit(const std::string& strAccount);\n+    int64_t GetAccountCreditDebit(const std::string& strAccount);\n     void ListAccountCreditDebit(const std::string& strAccount, std::list<CAccountingEntry>& acentries);\n \n     DBErrors ReorderTransactions(CWallet*);"
      }
    ]
  }
]