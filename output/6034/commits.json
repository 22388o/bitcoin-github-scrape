[
  {
    "sha": "8cf1485f3b7a976548128c0d3866747819cbea51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Y2YxNDg1ZjNiN2E5NzY1NDgxMjhjMGQzODY2NzQ3ODE5Y2JlYTUx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2014-01-25T19:05:00Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-02T09:17:16Z"
      },
      "message": "Abstract chaincodes into CChainCode\n\n# Conflicts:\n#\tsrc/key.cpp\n#\tsrc/key.h",
      "tree": {
        "sha": "ad83b8d3a8bdaa661b825a86142ded62cb03ce0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad83b8d3a8bdaa661b825a86142ded62cb03ce0c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8cf1485f3b7a976548128c0d3866747819cbea51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf1485f3b7a976548128c0d3866747819cbea51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf1485f3b7a976548128c0d3866747819cbea51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf1485f3b7a976548128c0d3866747819cbea51/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90c37bc16c3416f133fb15b726873960e00f2262",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90c37bc16c3416f133fb15b726873960e00f2262",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90c37bc16c3416f133fb15b726873960e00f2262"
      }
    ],
    "stats": {
      "total": 60,
      "additions": 44,
      "deletions": 16
    },
    "files": [
      {
        "sha": "83128e4acc034a1a4d8d8b418abf386ca4e9a602",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf1485f3b7a976548128c0d3866747819cbea51/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf1485f3b7a976548128c0d3866747819cbea51/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=8cf1485f3b7a976548128c0d3866747819cbea51",
        "patch": "@@ -152,7 +152,7 @@ bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n     CKeyID id = key.GetPubKey().GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n     out.nChild = nChild;\n-    return key.Derive(out.key, out.vchChainCode, nChild, vchChainCode);\n+    return key.Derive(out.key, out.chaincode.data, nChild, chaincode.data);\n }\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n@@ -161,7 +161,7 @@ void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     LockObject(out);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n     key.Set(&out[0], &out[32], true);\n-    memcpy(vchChainCode, &out[32], 32);\n+    memcpy(chaincode.data, &out[32], 32);\n     UnlockObject(out);\n     nDepth = 0;\n     nChild = 0;\n@@ -174,7 +174,7 @@ CExtPubKey CExtKey::Neuter() const {\n     memcpy(&ret.vchFingerprint[0], &vchFingerprint[0], 4);\n     ret.nChild = nChild;\n     ret.pubkey = key.GetPubKey();\n-    memcpy(&ret.vchChainCode[0], &vchChainCode[0], 32);\n+    memcpy(&ret.chaincode.data[0], &chaincode.data[0], 32);\n     return ret;\n }\n \n@@ -183,7 +183,7 @@ void CExtKey::Encode(unsigned char code[74]) const {\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n-    memcpy(code+9, vchChainCode, 32);\n+    memcpy(code+9, chaincode.data, 32);\n     code[41] = 0;\n     assert(key.size() == 32);\n     memcpy(code+42, key.begin(), 32);\n@@ -193,7 +193,7 @@ void CExtKey::Decode(const unsigned char code[74]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n-    memcpy(vchChainCode, code+9, 32);\n+    memcpy(chaincode.data, code+9, 32);\n     key.Set(code+42, code+74, true);\n }\n "
      },
      {
        "sha": "d3c7a28e01278643290a1016800b8ddfb5e11fce",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf1485f3b7a976548128c0d3866747819cbea51/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf1485f3b7a976548128c0d3866747819cbea51/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=8cf1485f3b7a976548128c0d3866747819cbea51",
        "patch": "@@ -6,16 +6,14 @@\n #ifndef BITCOIN_KEY_H\n #define BITCOIN_KEY_H\n \n+#include \"pubkey.h\"\n #include \"serialize.h\"\n #include \"support/allocators/secure.h\"\n #include \"uint256.h\"\n \n #include <stdexcept>\n #include <vector>\n \n-class CPubKey;\n-\n-struct CExtPubKey;\n \n /** \n  * secp256k1:\n@@ -157,13 +155,13 @@ struct CExtKey {\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n-    unsigned char vchChainCode[32];\n+    CChainCode chaincode;\n     CKey key;\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.key == b.key;\n+               memcmp(&a.chaincode.data[0], &b.chaincode.data[0], 32) == 0 && a.key == b.key;\n     }\n \n     void Encode(unsigned char code[74]) const;"
      },
      {
        "sha": "52aeb7be8bdc3a19e65b1e70daf2e5c4a7b9518a",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf1485f3b7a976548128c0d3866747819cbea51/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf1485f3b7a976548128c0d3866747819cbea51/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=8cf1485f3b7a976548128c0d3866747819cbea51",
        "patch": "@@ -75,7 +75,7 @@ void CExtPubKey::Encode(unsigned char code[74]) const {\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n-    memcpy(code+9, vchChainCode, 32);\n+    memcpy(code+9, chaincode.data, 32);\n     assert(pubkey.size() == 33);\n     memcpy(code+41, pubkey.begin(), 33);\n }\n@@ -84,7 +84,7 @@ void CExtPubKey::Decode(const unsigned char code[74]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n-    memcpy(vchChainCode, code+9, 32);\n+    memcpy(chaincode.data, code+9, 32);\n     pubkey.Set(code+41, code+74);\n }\n \n@@ -93,5 +93,5 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n     CKeyID id = pubkey.GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n     out.nChild = nChild;\n-    return pubkey.Derive(out.pubkey, out.vchChainCode, nChild, vchChainCode);\n+    return pubkey.Derive(out.pubkey, out.chaincode.data, nChild, chaincode.data);\n }"
      },
      {
        "sha": "89247088358a2576371505f4f6bc524ccbe0d727",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 33,
        "deletions": 3,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8cf1485f3b7a976548128c0d3866747819cbea51/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8cf1485f3b7a976548128c0d3866747819cbea51/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=8cf1485f3b7a976548128c0d3866747819cbea51",
        "patch": "@@ -31,6 +31,36 @@ class CKeyID : public uint160\n     CKeyID(const uint160& in) : uint160(in) {}\n };\n \n+struct CChainCode\n+{\n+    unsigned char data[32];\n+    \n+    void SetNull()\n+    {\n+        memset(data, 0, sizeof(data));\n+    }\n+    \n+    CChainCode()\n+    {\n+        SetNull();\n+    }\n+    \n+    bool IsNull() const\n+    {\n+        for (int i=0; i<32; i++)\n+            if (data[i])\n+                return false;\n+        return true;\n+    }\n+    \n+    ADD_SERIALIZE_METHODS;\n+    \n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n+        READWRITE(FLATDATA(data));\n+    }\n+};\n+\n /** An encapsulated public key. */\n class CPubKey\n {\n@@ -189,13 +219,13 @@ struct CExtPubKey {\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n-    unsigned char vchChainCode[32];\n+    CChainCode chaincode;\n     CPubKey pubkey;\n \n-    friend bool operator==(const CExtPubKey& a, const CExtPubKey& b)\n+    friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)\n     {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               memcmp(&a.vchChainCode[0], &b.vchChainCode[0], 32) == 0 && a.pubkey == b.pubkey;\n+               memcmp(&a.chaincode.data[0], &b.chaincode.data[0], 32) == 0 && a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[74]) const;"
      }
    ]
  },
  {
    "sha": "a574899671d428682b339ff988363ecaf7dfcd07",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNTc0ODk5NjcxZDQyODY4MmIzMzlmZjk4ODM2M2VjYWY3ZGZjZDA3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2015-04-21T22:09:37Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "jonas.schnelli@include7.ch",
        "date": "2015-05-06T15:22:46Z"
      },
      "message": "chaincodes: abstract away more chaincode behavior\n[squashme] replace struct CCainCode with a typedef uint256 ChainCode",
      "tree": {
        "sha": "dcf40bfa5daab7b6d18a9f301eb460069859ee8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcf40bfa5daab7b6d18a9f301eb460069859ee8c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a574899671d428682b339ff988363ecaf7dfcd07",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a574899671d428682b339ff988363ecaf7dfcd07",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a574899671d428682b339ff988363ecaf7dfcd07",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a574899671d428682b339ff988363ecaf7dfcd07/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cf1485f3b7a976548128c0d3866747819cbea51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cf1485f3b7a976548128c0d3866747819cbea51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cf1485f3b7a976548128c0d3866747819cbea51"
      }
    ],
    "stats": {
      "total": 78,
      "additions": 25,
      "deletions": 53
    },
    "files": [
      {
        "sha": "9711293e38695c69496f0c609c0f6b600798c54a",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -5,6 +5,7 @@\n #include \"hash.h\"\n #include \"crypto/common.h\"\n #include \"crypto/hmac_sha512.h\"\n+#include \"pubkey.h\"\n \n \n inline uint32_t ROTL32(uint32_t x, int8_t r)\n@@ -71,15 +72,12 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n     return h1;\n }\n \n-void BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])\n+void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64])\n {\n     unsigned char num[4];\n     num[0] = (nChild >> 24) & 0xFF;\n     num[1] = (nChild >> 16) & 0xFF;\n     num[2] = (nChild >>  8) & 0xFF;\n     num[3] = (nChild >>  0) & 0xFF;\n-    CHMAC_SHA512(chainCode, 32).Write(&header, 1)\n-                               .Write(data, 32)\n-                               .Write(num, 4)\n-                               .Finalize(output);\n+    CHMAC_SHA512(chainCode.begin(), chainCode.size()).Write(&header, 1).Write(data, 32).Write(num, 4).Finalize(output);\n }"
      },
      {
        "sha": "0771555623975cceaedf9eb4518f6b5e4a5e6833",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -14,6 +14,8 @@\n \n #include <vector>\n \n+typedef uint256 ChainCode;\n+\n /** A hasher class for Bitcoin's 256-bit hash (double SHA-256). */\n class CHash256 {\n private:\n@@ -159,6 +161,6 @@ uint256 SerializeHash(const T& obj, int nType=SER_GETHASH, int nVersion=PROTOCOL\n \n unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char>& vDataToHash);\n \n-void BIP32Hash(const unsigned char chainCode[32], unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n+void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "308d43ea347fef3f6be3160b41acb5afef8af708",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -125,7 +125,7 @@ bool CKey::Load(CPrivKey &privkey, CPubKey &vchPubKey, bool fSkipCheck=false) {\n     return VerifyPubKey(vchPubKey);\n }\n \n-bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n+bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert(IsCompressed());\n     unsigned char out[64];\n@@ -138,7 +138,7 @@ bool CKey::Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild\n         assert(begin() + 32 == end());\n         BIP32Hash(cc, nChild, 0, begin(), out);\n     }\n-    memcpy(ccChild, out+32, 32);\n+    memcpy(ccChild.begin(), out+32, 32);\n     memcpy((unsigned char*)keyChild.begin(), begin(), 32);\n     bool ret = secp256k1_ec_privkey_tweak_add((unsigned char*)keyChild.begin(), out);\n     UnlockObject(out);\n@@ -152,7 +152,7 @@ bool CExtKey::Derive(CExtKey &out, unsigned int nChild) const {\n     CKeyID id = key.GetPubKey().GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n     out.nChild = nChild;\n-    return key.Derive(out.key, out.chaincode.data, nChild, chaincode.data);\n+    return key.Derive(out.key, out.chaincode, nChild, chaincode);\n }\n \n void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n@@ -161,7 +161,7 @@ void CExtKey::SetMaster(const unsigned char *seed, unsigned int nSeedLen) {\n     LockObject(out);\n     CHMAC_SHA512(hashkey, sizeof(hashkey)).Write(seed, nSeedLen).Finalize(out);\n     key.Set(&out[0], &out[32], true);\n-    memcpy(chaincode.data, &out[32], 32);\n+    memcpy(chaincode.begin(), &out[32], 32);\n     UnlockObject(out);\n     nDepth = 0;\n     nChild = 0;\n@@ -174,7 +174,7 @@ CExtPubKey CExtKey::Neuter() const {\n     memcpy(&ret.vchFingerprint[0], &vchFingerprint[0], 4);\n     ret.nChild = nChild;\n     ret.pubkey = key.GetPubKey();\n-    memcpy(&ret.chaincode.data[0], &chaincode.data[0], 32);\n+    ret.chaincode = chaincode;\n     return ret;\n }\n \n@@ -183,7 +183,7 @@ void CExtKey::Encode(unsigned char code[74]) const {\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n-    memcpy(code+9, chaincode.data, 32);\n+    memcpy(code+9, chaincode.begin(), 32);\n     code[41] = 0;\n     assert(key.size() == 32);\n     memcpy(code+42, key.begin(), 32);\n@@ -193,7 +193,7 @@ void CExtKey::Decode(const unsigned char code[74]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n-    memcpy(chaincode.data, code+9, 32);\n+    memcpy(chaincode.begin(), code+9, 32);\n     key.Set(code+42, code+74, true);\n }\n "
      },
      {
        "sha": "b2ef801ee8c657fce141128da72d9926b4c170cf",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -136,7 +136,7 @@ class CKey\n     bool SignCompact(const uint256& hash, std::vector<unsigned char>& vchSig) const;\n \n     //! Derive BIP32 child key.\n-    bool Derive(CKey& keyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n+    bool Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n \n     /**\n      * Verify thoroughly whether a private key and a public key match.\n@@ -155,13 +155,13 @@ struct CExtKey {\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n-    CChainCode chaincode;\n+    ChainCode chaincode;\n     CKey key;\n \n     friend bool operator==(const CExtKey& a, const CExtKey& b)\n     {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               memcmp(&a.chaincode.data[0], &b.chaincode.data[0], 32) == 0 && a.key == b.key;\n+               a.chaincode == b.chaincode && a.key == b.key;\n     }\n \n     void Encode(unsigned char code[74]) const;"
      },
      {
        "sha": "bdab1376000ecab38bf2305bfa3f88c0bc17e045",
        "filename": "src/pubkey.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/pubkey.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/pubkey.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.cpp?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -54,13 +54,13 @@ bool CPubKey::Decompress() {\n     return true;\n }\n \n-bool CPubKey::Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const {\n+bool CPubKey::Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const {\n     assert(IsValid());\n     assert((nChild >> 31) == 0);\n     assert(begin() + 33 == end());\n     unsigned char out[64];\n     BIP32Hash(cc, nChild, *begin(), begin()+1, out);\n-    memcpy(ccChild, out+32, 32);\n+    memcpy(ccChild.begin(), out+32, 32);\n     CECKey key;\n     bool ret = key.SetPubKey(begin(), size());\n     ret &= key.TweakPublic(out);\n@@ -75,7 +75,7 @@ void CExtPubKey::Encode(unsigned char code[74]) const {\n     memcpy(code+1, vchFingerprint, 4);\n     code[5] = (nChild >> 24) & 0xFF; code[6] = (nChild >> 16) & 0xFF;\n     code[7] = (nChild >>  8) & 0xFF; code[8] = (nChild >>  0) & 0xFF;\n-    memcpy(code+9, chaincode.data, 32);\n+    memcpy(code+9, chaincode.begin(), 32);\n     assert(pubkey.size() == 33);\n     memcpy(code+41, pubkey.begin(), 33);\n }\n@@ -84,7 +84,7 @@ void CExtPubKey::Decode(const unsigned char code[74]) {\n     nDepth = code[0];\n     memcpy(vchFingerprint, code+1, 4);\n     nChild = (code[5] << 24) | (code[6] << 16) | (code[7] << 8) | code[8];\n-    memcpy(chaincode.data, code+9, 32);\n+    memcpy(chaincode.begin(), code+9, 32);\n     pubkey.Set(code+41, code+74);\n }\n \n@@ -93,5 +93,5 @@ bool CExtPubKey::Derive(CExtPubKey &out, unsigned int nChild) const {\n     CKeyID id = pubkey.GetID();\n     memcpy(&out.vchFingerprint[0], &id, 4);\n     out.nChild = nChild;\n-    return pubkey.Derive(out.pubkey, out.chaincode.data, nChild, chaincode.data);\n+    return pubkey.Derive(out.pubkey, out.chaincode, nChild, chaincode);\n }"
      },
      {
        "sha": "cce9c826e5de8c7c4f343b62261d6d67f718e656",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 4,
        "deletions": 32,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a574899671d428682b339ff988363ecaf7dfcd07/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a574899671d428682b339ff988363ecaf7dfcd07/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=a574899671d428682b339ff988363ecaf7dfcd07",
        "patch": "@@ -31,35 +31,7 @@ class CKeyID : public uint160\n     CKeyID(const uint160& in) : uint160(in) {}\n };\n \n-struct CChainCode\n-{\n-    unsigned char data[32];\n-    \n-    void SetNull()\n-    {\n-        memset(data, 0, sizeof(data));\n-    }\n-    \n-    CChainCode()\n-    {\n-        SetNull();\n-    }\n-    \n-    bool IsNull() const\n-    {\n-        for (int i=0; i<32; i++)\n-            if (data[i])\n-                return false;\n-        return true;\n-    }\n-    \n-    ADD_SERIALIZE_METHODS;\n-    \n-    template <typename Stream, typename Operation>\n-    inline void SerializationOp(Stream& s, Operation ser_action, int nType, int nVersion) {\n-        READWRITE(FLATDATA(data));\n-    }\n-};\n+typedef uint256 ChainCode;\n \n /** An encapsulated public key. */\n class CPubKey\n@@ -212,20 +184,20 @@ class CPubKey\n     bool Decompress();\n \n     //! Derive BIP32 child pubkey.\n-    bool Derive(CPubKey& pubkeyChild, unsigned char ccChild[32], unsigned int nChild, const unsigned char cc[32]) const;\n+    bool Derive(CPubKey& pubkeyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n };\n \n struct CExtPubKey {\n     unsigned char nDepth;\n     unsigned char vchFingerprint[4];\n     unsigned int nChild;\n-    CChainCode chaincode;\n+    ChainCode chaincode;\n     CPubKey pubkey;\n \n     friend bool operator==(const CExtPubKey &a, const CExtPubKey &b)\n     {\n         return a.nDepth == b.nDepth && memcmp(&a.vchFingerprint[0], &b.vchFingerprint[0], 4) == 0 && a.nChild == b.nChild &&\n-               memcmp(&a.chaincode.data[0], &b.chaincode.data[0], 32) == 0 && a.pubkey == b.pubkey;\n+               a.chaincode == b.chaincode && a.pubkey == b.pubkey;\n     }\n \n     void Encode(unsigned char code[74]) const;"
      }
    ]
  }
]