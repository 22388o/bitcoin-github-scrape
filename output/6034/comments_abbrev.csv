sipa,2015-04-21T11:13:14Z,utACK\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-94748260,94748260,
theuni,2015-04-21T22:14:11Z,"Looks good to me, but if you're going to the trouble of abstracting CChainCode, you may as well treat chaincodes as objects wholesale. See https://github.com/theuni/bitcoin/commit/58fe156ec2672b354650c3e3d89d0724723bbc34 for a quick (untested) example. \n",https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-94958425,94958425,
jonasschnelli,2015-04-22T06:29:03Z,Thanks @theuni! Right. This would be the next logical step. Reviewed and added (as it is) your https://github.com/theuni/bitcoin/commit/58fe156ec2672b354650c3e3d89d0724723bbc34 to this PR.\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-95045951,95045951,
sipa,2015-04-22T07:07:47Z,key already implicitly depends on pubkey anyway (through the forward\ndeclaration).\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-95054869,95054869,
sipa,2015-04-24T10:46:22Z,utACK both commits\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-95889716,95889716,
jgarzik,2015-04-24T13:05:58Z,ACK\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-95927551,95927551,
laanwj,2015-05-01T13:57:50Z,"Playing devil's advocate: how is  a `CChainCode` different from a `uint256`? (the new type without arithmethic operators) It is the same size, has a superset of the methods (like `SetNull` and such) and serializes the same way.\n",https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-98139843,98139843,
theuni,2015-05-01T14:06:01Z,"@laanwj heh, very good point.\n",https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-98140851,98140851,
jonasschnelli,2015-05-01T18:15:56Z,Indeed!\nIf there are no concerns i'll change this so it will use `uint256` instead of `CChainCode` (or the current `unsigned char chainCode[32]`)\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-98193505,98193505,
sipa,2015-05-01T18:23:42Z,"If you plan to later extend CChainCode with extra functionality, you could at this point just do a\n\ntypedef uint256 ChainCode;\n\n(leave the C prefix of for new classes, we don't care)\n",https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-98197269,98197269,
jonasschnelli,2015-05-02T09:32:29Z,Replaced the CChainCode struct with a uint256 typedef.\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-98340225,98340225,
laanwj,2015-05-06T15:14:31Z,utACK (after squash)\n,https://github.com/bitcoin/bitcoin/pull/6034#issuecomment-99507392,99507392,
jonasschnelli,2015-04-20T14:31:55Z,I hope nobody complains about this new include?\n,https://github.com/bitcoin/bitcoin/pull/6034#discussion_r28693394,28693394,src/key.h
theuni,2015-04-21T21:01:51Z,"From my POV, that's on the list of ""safe to include everywhere"" since it's used in libbitcoinconsensus.\n",https://github.com/bitcoin/bitcoin/pull/6034#discussion_r28821839,28821839,src/key.h
sipa,2015-05-02T12:57:59Z,"Indentation is off now. No problem if you don't want to keep this style, but now it becomes inconsistent.\n",https://github.com/bitcoin/bitcoin/pull/6034#discussion_r29547289,29547289,src/hash.cpp
jonasschnelli,2015-05-02T13:01:42Z,Agreed. Removed the indentation.\n,https://github.com/bitcoin/bitcoin/pull/6034#discussion_r29547305,29547305,src/hash.cpp
