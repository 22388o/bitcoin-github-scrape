[
  {
    "sha": "a70d025366bfd242567ef4ecdb911eaf4907a6cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzBkMDI1MzY2YmZkMjQyNTY3ZWY0ZWNkYjkxMWVhZjQ5MDdhNmNi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-10T15:43:17Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-17T12:53:06Z"
      },
      "message": "fixup some rpc param counting for rpc help",
      "tree": {
        "sha": "f4f1bd8734b700ee1751488c5118f8e5e9e9d89e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4f1bd8734b700ee1751488c5118f8e5e9e9d89e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a70d025366bfd242567ef4ecdb911eaf4907a6cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70d025366bfd242567ef4ecdb911eaf4907a6cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a70d025366bfd242567ef4ecdb911eaf4907a6cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70d025366bfd242567ef4ecdb911eaf4907a6cb/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8bc6d1f179a0f51f86b78b9b394b4ba5c2543e93"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 4,
      "deletions": 4
    },
    "files": [
      {
        "sha": "eeaeebaa3e48047deeb84719a75d5c38cdebaa5a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a70d025366bfd242567ef4ecdb911eaf4907a6cb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a70d025366bfd242567ef4ecdb911eaf4907a6cb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=a70d025366bfd242567ef4ecdb911eaf4907a6cb",
        "patch": "@@ -205,7 +205,7 @@ UniValue getrawchangeaddress(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() > 1)\n+    if (request.fHelp || request.params.size() > 0)\n         throw std::runtime_error(\n             \"getrawchangeaddress\\n\"\n             \"\\nReturns a new Bitcoin address, for receiving change.\\n\"\n@@ -484,7 +484,7 @@ UniValue listaddressgroupings(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp)\n+    if (request.fHelp || request.params.size() != 0)\n         throw std::runtime_error(\n             \"listaddressgroupings\\n\"\n             \"\\nLists groups of addresses which have had their common ownership\\n\"\n@@ -1730,7 +1730,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp)\n+    if (request.fHelp || request.params.size() > 3)\n         throw std::runtime_error(\n             \"listsinceblock ( \\\"blockhash\\\" target_confirmations include_watchonly)\\n\"\n             \"\\nGet all transactions in blocks since block [blockhash], or all transactions if omitted\\n\"\n@@ -2672,7 +2672,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n         return NullUniValue;\n     }\n \n-    if (request.fHelp || request.params.size() < 1 || request.params.size() > 3)\n+    if (request.fHelp || request.params.size() < 1 || request.params.size() > 2)\n         throw std::runtime_error(\n                             \"fundrawtransaction \\\"hexstring\\\" ( options )\\n\"\n                             \"\\nAdd inputs to a transaction until it has enough in value to meet its out value.\\n\""
      }
    ]
  },
  {
    "sha": "999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OTllZjIwNzNhYTJiNGFlYmZiZTliZWE2ZjliMTJkYTUyYjhiMmNi",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-10T15:43:41Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-17T12:53:06Z"
      },
      "message": "importmulti options are optional",
      "tree": {
        "sha": "34e855a1974c5c3cd8b34744bdaab5b50fb83860",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/34e855a1974c5c3cd8b34744bdaab5b50fb83860"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a70d025366bfd242567ef4ecdb911eaf4907a6cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a70d025366bfd242567ef4ecdb911eaf4907a6cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a70d025366bfd242567ef4ecdb911eaf4907a6cb"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "e9705f51354d04e0fce85861b7a074bed27177c8",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
        "patch": "@@ -1028,7 +1028,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     // clang-format off\n     if (mainRequest.fHelp || mainRequest.params.size() < 1 || mainRequest.params.size() > 2)\n         throw std::runtime_error(\n-            \"importmulti \\\"requests\\\" \\\"options\\\"\\n\\n\"\n+            \"importmulti \\\"requests\\\" ( \\\"options\\\" )\\n\\n\"\n             \"Import addresses/scripts (with private or public keys, redeem script (P2SH)), rescanning all addresses in one-shot-only (rescan can be disabled via options).\\n\\n\"\n             \"Arguments:\\n\"\n             \"1. requests     (array, required) Data to be imported\\n\""
      }
    ]
  },
  {
    "sha": "4dc1915bceacb94446454428da676772290b8c48",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZGMxOTE1YmNlYWNiOTQ0NDY0NTQ0MjhkYTY3Njc3MjI5MGI4YzQ4",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-10T15:44:39Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2017-07-17T12:53:18Z"
      },
      "message": "check for null values in rpc args and handle appropriately",
      "tree": {
        "sha": "10fa6d12a08414ccb2011f14f188574fcc14a789",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10fa6d12a08414ccb2011f14f188574fcc14a789"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4dc1915bceacb94446454428da676772290b8c48",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc1915bceacb94446454428da676772290b8c48",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4dc1915bceacb94446454428da676772290b8c48",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4dc1915bceacb94446454428da676772290b8c48/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999ef2073aa2b4aebfbe9bea6f9b12da52b8b2cb"
      }
    ],
    "stats": {
      "total": 92,
      "additions": 46,
      "deletions": 46
    },
    "files": [
      {
        "sha": "d65e107e3c4684c9a9232f4dd1bcd5032170034c",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -210,7 +210,7 @@ UniValue waitfornewblock(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"waitfornewblock\", \"1000\")\n         );\n     int timeout = 0;\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         timeout = request.params[0].get_int();\n \n     CUpdatedBlock block;\n@@ -252,7 +252,7 @@ UniValue waitforblock(const JSONRPCRequest& request)\n \n     uint256 hash = uint256S(request.params[0].get_str());\n \n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n@@ -295,7 +295,7 @@ UniValue waitforblockheight(const JSONRPCRequest& request)\n \n     int height = request.params[0].get_int();\n \n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         timeout = request.params[1].get_int();\n \n     CUpdatedBlock block;\n@@ -434,7 +434,7 @@ UniValue getrawmempool(const JSONRPCRequest& request)\n         );\n \n     bool fVerbose = false;\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         fVerbose = request.params[0].get_bool();\n \n     return mempoolToJSON(fVerbose);\n@@ -467,7 +467,7 @@ UniValue getmempoolancestors(const JSONRPCRequest& request)\n     }\n \n     bool fVerbose = false;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -531,7 +531,7 @@ UniValue getmempooldescendants(const JSONRPCRequest& request)\n     }\n \n     bool fVerbose = false;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n \n     uint256 hash = ParseHashV(request.params[0], \"parameter 1\");\n@@ -666,7 +666,7 @@ UniValue getblockheader(const JSONRPCRequest& request)\n     uint256 hash(uint256S(strHash));\n \n     bool fVerbose = true;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         fVerbose = request.params[1].get_bool();\n \n     if (mapBlockIndex.count(hash) == 0)\n@@ -741,7 +741,7 @@ UniValue getblock(const JSONRPCRequest& request)\n     uint256 hash(uint256S(strHash));\n \n     int verbosity = 1;\n-    if (request.params.size() > 1) {\n+    if (!request.params[1].isNull()) {\n         if(request.params[1].isNum())\n             verbosity = request.params[1].get_int();\n         else\n@@ -984,7 +984,7 @@ UniValue gettxout(const JSONRPCRequest& request)\n     int n = request.params[1].get_int();\n     COutPoint out(hash, n);\n     bool fMempool = true;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         fMempool = request.params[2].get_bool();\n \n     Coin coin;\n@@ -1037,9 +1037,9 @@ UniValue verifychain(const JSONRPCRequest& request)\n \n     LOCK(cs_main);\n \n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         nCheckLevel = request.params[0].get_int();\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nCheckDepth = request.params[1].get_int();\n \n     return CVerifyDB().VerifyDB(Params(), pcoinsTip, nCheckLevel, nCheckDepth);"
      },
      {
        "sha": "26f4378718f83ae039e1529fe88cb35bdbd83d4f",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -101,7 +101,7 @@ UniValue getnetworkhashps(const JSONRPCRequest& request)\n        );\n \n     LOCK(cs_main);\n-    return GetNetworkHashPS(request.params.size() > 0 ? request.params[0].get_int() : 120, request.params.size() > 1 ? request.params[1].get_int() : -1);\n+    return GetNetworkHashPS(!request.params[0].isNull() ? request.params[0].get_int() : 120, !request.params[1].isNull() ? request.params[1].get_int() : -1);\n }\n \n UniValue generateBlocks(std::shared_ptr<CReserveScript> coinbaseScript, int nGenerate, uint64_t nMaxTries, bool keepScript)\n@@ -171,7 +171,7 @@ UniValue generatetoaddress(const JSONRPCRequest& request)\n \n     int nGenerate = request.params[0].get_int();\n     uint64_t nMaxTries = 1000000;\n-    if (request.params.size() > 2) {\n+    if (!request.params[2].isNull()) {\n         nMaxTries = request.params[2].get_int();\n     }\n \n@@ -373,7 +373,7 @@ UniValue getblocktemplate(const JSONRPCRequest& request)\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n     int64_t nMaxVersionPreVB = -1;\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n     {\n         const UniValue& oparam = request.params[0].get_obj();\n         const UniValue& modeval = find_value(oparam, \"mode\");"
      },
      {
        "sha": "fde0b27a3383c114347daf44480d91815660e356",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -310,7 +310,7 @@ UniValue getaddednodeinfo(const JSONRPCRequest& request)\n \n     std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n \n-    if (request.params.size() == 1) {\n+    if (request.params.size() == 1 && !request.params[0].isNull()) {\n         bool found = false;\n         for (const AddedNodeInfo& info : vInfo) {\n             if (info.strAddedNode == request.params[0].get_str()) {"
      },
      {
        "sha": "185bc7fd3d66bf51d8d645e1c4f38a48b6bc4480",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -137,7 +137,7 @@ UniValue getrawtransaction(const JSONRPCRequest& request)\n \n     // Accept either a bool (true) or a num (>=1) to indicate verbose output.\n     bool fVerbose = false;\n-    if (request.params.size() > 1) {\n+    if (!request.params[1].isNull()) {\n         if (request.params[1].isNum()) {\n             if (request.params[1].get_int() != 0) {\n                 fVerbose = true;\n@@ -211,7 +211,7 @@ UniValue gettxoutproof(const JSONRPCRequest& request)\n     CBlockIndex* pblockindex = NULL;\n \n     uint256 hashBlock;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n     {\n         hashBlock = uint256S(request.params[1].get_str());\n         if (!mapBlockIndex.count(hashBlock))\n@@ -412,7 +412,7 @@ UniValue createrawtransaction(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (request.params.size() > 3 && rbfOptIn != SignalsOptInRBF(rawTx)) {\n+    if (!request.params[3].isNull() && rbfOptIn != SignalsOptInRBF(rawTx)) {\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter combination: Sequence number(s) contradict replaceable option\");\n     }\n "
      },
      {
        "sha": "5abf32480a846cfa482c4b49706caec6a80f8082",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -106,12 +106,12 @@ UniValue importprivkey(const JSONRPCRequest& request)\n \n     std::string strSecret = request.params[0].get_str();\n     std::string strLabel = \"\";\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n@@ -245,20 +245,20 @@ UniValue importaddress(const JSONRPCRequest& request)\n \n \n     std::string strLabel = \"\";\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Rescan is disabled in pruned mode\");\n \n     // Whether to import a p2sh version, too\n     bool fP2SH = false;\n-    if (request.params.size() > 3)\n+    if (!request.params[3].isNull())\n         fP2SH = request.params[3].get_bool();\n \n     LOCK2(cs_main, pwallet->cs_wallet);\n@@ -410,12 +410,12 @@ UniValue importpubkey(const JSONRPCRequest& request)\n \n \n     std::string strLabel = \"\";\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         strLabel = request.params[1].get_str();\n \n     // Whether to perform rescan after import\n     bool fRescan = true;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         fRescan = request.params[2].get_bool();\n \n     if (fRescan && fPruneMode)\n@@ -1071,7 +1071,7 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n     //Default options\n     bool fRescan = true;\n \n-    if (mainRequest.params.size() > 1) {\n+    if (!mainRequest.params[1].isNull()) {\n         const UniValue& options = mainRequest.params[1];\n \n         if (options.exists(\"rescan\")) {"
      },
      {
        "sha": "55f4abd7a38e3f368e4ba08093137a95c839e772",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 20,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4dc1915bceacb94446454428da676772290b8c48/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4dc1915bceacb94446454428da676772290b8c48/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=4dc1915bceacb94446454428da676772290b8c48",
        "patch": "@@ -134,7 +134,7 @@ UniValue getnewaddress(const JSONRPCRequest& request)\n \n     // Parse the account first so we don't generate a key if there's an error\n     std::string strAccount;\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         strAccount = AccountFromValue(request.params[0]);\n \n     if (!pwallet->IsLocked()) {\n@@ -629,7 +629,7 @@ UniValue getreceivedbyaddress(const JSONRPCRequest& request)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nMinDepth = request.params[1].get_int();\n \n     // Tally\n@@ -680,7 +680,7 @@ UniValue getreceivedbyaccount(const JSONRPCRequest& request)\n \n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nMinDepth = request.params[1].get_int();\n \n     // Get the set of pub keys assigned to account\n@@ -757,10 +757,10 @@ UniValue getbalance(const JSONRPCRequest& request)\n     const std::string* account = account_param != \"*\" ? &account_param : nullptr;\n \n     int nMinDepth = 1;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nMinDepth = request.params[1].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(request.params.size() > 2)\n+    if(!request.params[2].isNull())\n         if(request.params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n@@ -963,7 +963,7 @@ UniValue sendmany(const JSONRPCRequest& request)\n     std::string strAccount = AccountFromValue(request.params[0]);\n     UniValue sendTo = request.params[1].get_obj();\n     int nMinDepth = 1;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         nMinDepth = request.params[2].get_int();\n \n     CWalletTx wtx;\n@@ -1210,16 +1210,16 @@ UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool fByA\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n-    if (params.size() > 0)\n+    if (!params[0].isNull())\n         nMinDepth = params[0].get_int();\n \n     // Whether to include empty accounts\n     bool fIncludeEmpty = false;\n-    if (params.size() > 1)\n+    if (!params[1].isNull())\n         fIncludeEmpty = params[1].get_bool();\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(params.size() > 2)\n+    if(!params[2].isNull())\n         if(params[2].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n@@ -1581,16 +1581,16 @@ UniValue listtransactions(const JSONRPCRequest& request)\n     LOCK2(cs_main, pwallet->cs_wallet);\n \n     std::string strAccount = \"*\";\n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n         strAccount = request.params[0].get_str();\n     int nCount = 10;\n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n         nCount = request.params[1].get_int();\n     int nFrom = 0;\n-    if (request.params.size() > 2)\n+    if (!request.params[2].isNull())\n         nFrom = request.params[2].get_int();\n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(request.params.size() > 3)\n+    if(!request.params[3].isNull())\n         if(request.params[3].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n@@ -1777,7 +1777,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n     int target_confirms = 1;\n     isminefilter filter = ISMINE_SPENDABLE;\n \n-    if (request.params.size() > 0)\n+    if (!request.params[0].isNull())\n     {\n         uint256 blockId;\n \n@@ -1796,7 +1796,7 @@ UniValue listsinceblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (request.params.size() > 1)\n+    if (!request.params[1].isNull())\n     {\n         target_confirms = request.params[1].get_int();\n \n@@ -1888,7 +1888,7 @@ UniValue gettransaction(const JSONRPCRequest& request)\n     hash.SetHex(request.params[0].get_str());\n \n     isminefilter filter = ISMINE_SPENDABLE;\n-    if(request.params.size() > 1)\n+    if(!request.params[1].isNull())\n         if(request.params[1].get_bool())\n             filter = filter | ISMINE_WATCH_ONLY;\n \n@@ -2010,7 +2010,7 @@ UniValue keypoolrefill(const JSONRPCRequest& request)\n \n     // 0 is interpreted by TopUpKeyPool() as the default keypool size given by -keypool\n     unsigned int kpSize = 0;\n-    if (request.params.size() > 0) {\n+    if (!request.params[0].isNull()) {\n         if (request.params[0].get_int() < 0)\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid parameter, expected valid size.\");\n         kpSize = (unsigned int)request.params[0].get_int();\n@@ -2603,7 +2603,7 @@ UniValue listunspent(const JSONRPCRequest& request)\n     CAmount nMinimumSumAmount = MAX_MONEY;\n     uint64_t nMaximumCount = 0;\n \n-    if (request.params.size() > 4) {\n+    if (!request.params[4].isNull()) {\n         const UniValue& options = request.params[4].get_obj();\n \n         if (options.exists(\"minimumAmount\"))\n@@ -2736,7 +2736,7 @@ UniValue fundrawtransaction(const JSONRPCRequest& request)\n     UniValue subtractFeeFromOutputs;\n     std::set<int> setSubtractFeeFromOutputs;\n \n-    if (request.params.size() > 1) {\n+    if (!request.params[1].isNull()) {\n       if (request.params[1].type() == UniValue::VBOOL) {\n         // backward compatibility bool only fallback\n         coinControl.fAllowWatchOnly = request.params[1].get_bool();\n@@ -2904,7 +2904,7 @@ UniValue bumpfee(const JSONRPCRequest& request)\n     CAmount totalFee = 0;\n     CCoinControl coin_control;\n     coin_control.signalRbf = true;\n-    if (request.params.size() > 1) {\n+    if (!request.params[1].isNull()) {\n         UniValue options = request.params[1];\n         RPCTypeCheckObj(options,\n             {"
      }
    ]
  }
]