promag,2017-07-11T10:05:10Z,"Needs rebase, #10589 added more RPC arguments.",https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-314397333,314397333,
instagibbs,2017-07-11T13:41:27Z,"@ryanofsky since things are moving underneath me I'll leave the code simplification for a follow-up PR\n\nnow covering the getbalance and lockunspent cases",https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-314447096,314447096,
instagibbs,2017-07-11T16:19:52Z,reverted two changes as suggested and simplified PR(need to improve my sed foo),https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-314496837,314496837,
TheBlueMatt,2017-07-11T23:02:02Z,utACK 534963d50bd6454db330432c122805b26750b257,https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-314595929,314595929,
ryanofsky,2017-07-17T12:50:25Z,"Needs rebase. Would be nice to have more review, too because (as mentioned) I'd like to do some more cleanup on top of this.",https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-315746206,315746206,
instagibbs,2017-07-17T12:54:09Z,rebased,https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-315747023,315747023,
sipa,2017-07-19T00:20:09Z,utACK 4dc1915bceacb94446454428da676772290b8c48. @promag has a number of useful suggestions that could be included.,https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-316235967,316235967,
sipa,2017-07-19T03:52:19Z,I would like to see this in 0.15 still - it's effectively (at least partially) fixing the incomplete support for named arguments introduced in the previous version.,https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-316265252,316265252,
instagibbs,2017-07-19T12:38:20Z,for the purpose of getting this merged as a 0.15 bugfix I'm going to avoid invalidating review for nits (unless told otherwise),https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-316372324,316372324,
laanwj,2017-07-19T17:22:23Z,"utACK 4dc1915, I didn't know univalue returned NullUniValue for out-of-bounds accesses, I always wrote bound checks, but this is better.",https://github.com/bitcoin/bitcoin/pull/10783#issuecomment-316457443,316457443,
ryanofsky,2017-07-10T18:14:09Z,"In commit ""check for null values in rpc args and handle appropriately""\n\nInstead of writing `request.params.size() > X && !request.params[X].isNull()` everywhere, I think you should just prefer  `!request.params[X].isNull()`. The UniValue array implementation has bounds checking built in and already returns null for missing elements.",https://github.com/bitcoin/bitcoin/pull/10783#discussion_r126497178,126497178,src/rpc/blockchain.cpp
ryanofsky,2017-07-11T14:58:42Z,"Please revert this line. This is treating a null account the same as the default account (`""""`) instead of treating a null account the same as an unspecified account (`params.size() == 0`), which you would need to do by changing the `params.size()` check above (like I did in https://github.com/bitcoin/bitcoin/compare/master...ryanofsky:pr/multiopt and verified with 3fc286bbf21df9bfebcb6a9f685f2236",https://github.com/bitcoin/bitcoin/pull/10783#discussion_r126714996,126714996,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-11T15:04:57Z,"Should revert this line too. This is pointless because of the type check above.\n\nI think it's best to stick to just handling the simple cases of missing values being treated differently from null values in this PR and handle the other cases more thoughtfully in another PR. Again, I already have the changes to do this in my multiopt branch, and would be happy to post a followup that builds on y",https://github.com/bitcoin/bitcoin/pull/10783#discussion_r126716987,126716987,src/wallet/rpcwallet.cpp
ryanofsky,2017-07-11T18:14:00Z,Missing ! here,https://github.com/bitcoin/bitcoin/pull/10783#discussion_r126767525,126767525,src/wallet/rpcwallet.cpp
promag,2017-07-17T13:22:51Z,Remove `request.params.size() == 1 && `?,https://github.com/bitcoin/bitcoin/pull/10783#discussion_r127705770,127705770,src/rpc/net.cpp
promag,2017-07-17T13:26:17Z,"Avoid negation?\n```cpp\nreturn GetNetworkHashPS(request.params[0].isNull() ? 120 : request.params[0].get_int(), request.params[1].isNull() ? -1 : request.params[1].get_int());\n```",https://github.com/bitcoin/bitcoin/pull/10783#discussion_r127706572,127706572,src/rpc/mining.cpp
promag,2017-07-18T22:14:59Z,"This could be simplified to:\n```cpp\nbool fVerbose = false;\nif (request.params[1].isNum()) {\n    fVerbose = request.params[1].get_int() != 0;\n} else if (!request.params[1].isNull()) {\n    fVerbose = request.params[1].get_bool();\n}\n```\nWith the advantage of removing custom error handling.",https://github.com/bitcoin/bitcoin/pull/10783#discussion_r128110313,128110313,src/rpc/rawtransaction.cpp
