DrahtBot,2019-04-11T17:59:10Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-482227923,482227923,
instagibbs,2019-04-12T21:35:23Z,"secp unit test failure, reported here in one build: https://github.com/bitcoin-core/secp256k1/issues/610\n\nrestarted.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-482730720,482730720,
jnewbery,2019-04-15T15:16:18Z,"I think the whole `CReserveKey` cycle needs to be rethought. It's too easy to accidentally not mark a key as used (eg https://github.com/bitcoin/bitcoin/pull/15557#discussion_r271956393). I'm not sure whether this change is an improvement. It removes the possibility of a key being re-used, but it does mean that if `CreateTranasction` fails after reserving a key (eg here https://github.com/bitcoin/",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-483294976,483294976,
instagibbs,2019-04-15T15:24:36Z,"Granted this is an extremely timid change, but you can make more keys. You cannot make more privacy when this fails.\n\nI'll let others chime in before I try to nibble at the edges and make sure these `return false` situations are handled explicitly.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-483298385,483298385,
jnewbery,2019-04-15T15:30:00Z,"> Granted this is an extremely timid change, but you can make more keys. You cannot make more privacy when this fails.\n\nYep. To be clear, I'm not NACKing this. Just trying to figure out what the least bad option is.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-483300780,483300780,
luke-jr,2019-04-18T18:57:24Z,assert seems better IMO,https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-484641708,484641708,
MarcoFalke,2019-05-14T13:17:48Z,Needs documentation updated (after rebase),https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-492233340,492233340,
instagibbs,2019-05-14T13:24:34Z,"Deciding if it's worth the rebase. There are as many opinions here. \n\nI'm also fine with an assert to be honest.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-492235879,492235879,
promag,2019-05-14T14:41:59Z,"> assert seems better IMO\n\nYou mean `assert(nIndex == -1)`?",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-492267181,492267181,
luke-jr,2019-05-18T15:13:04Z,"Sure, something like that.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-493684343,493684343,
instagibbs,2019-06-13T13:30:20Z,"@jnewbery @ryanofsky are you guys ok with an assert instead? I'd rather do something than let this languish, and it seems reasonable.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501703511,501703511,
ryanofsky,2019-06-13T13:38:21Z,"> @jnewbery @ryanofsky are you guys ok with an assert instead? I'd rather do something than let this languish, and it seems reasonable.\n\nI'd prefer the assert, but I think the current change is also an improvement. I'd be happy with either change.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501706528,501706528,
jnewbery,2019-06-13T13:43:34Z,"> other less timid options would be logging errors when they aren't called, or asserting that they are called in --debug builds.\n\nI would prefer to do this.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501708568,501708568,
instagibbs,2019-06-13T14:12:04Z,"TIL about debug builds. Added an assert behind that, and a print otherwise telling the user to report it.",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501720135,501720135,
instagibbs,2019-06-13T14:55:56Z,pushed fancier reporting error log courtesy of @MarcoFalke ,https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501739041,501739041,
instagibbs,2019-06-13T18:40:39Z,"Having second-thoughts, mea culpa. Basically anytime there's a wallet error of any sort, you need to make sure you handle it and ReturnKey. This happens in dozens of places, including in `CommitTransaction` itself in a number of places. \n\nOpened an alternative here: https://github.com/bitcoin/bitcoin/pull/16208\n",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501830573,501830573,
instagibbs,2019-06-13T19:53:51Z,closing this one for now,https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-501854988,501854988,
ryanofsky,2019-07-11T00:10:11Z,"This pr is closed, and the alternate implementation in #16208 seems good, but I just wanted to note that it would be possible to check with compile errors, not just runtime asserts that the `CReserveKey`/`ReserveDestination` destructor is only called after after the key is returned or kept. Clang apparently has `set_typestate(consumed)` and `callable_when(consumed)` annotations which could enforce",https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-510275914,510275914,
instagibbs,2019-07-11T13:37:36Z,@ryanofsky interesting!,https://github.com/bitcoin/bitcoin/pull/15796#issuecomment-510488753,510488753,
MarcoFalke,2019-06-13T14:26:10Z,"What about.\n\n```suggestion\n            LogPrintf(""Warning! A CReserveKey was not dealt with until destructor. This is a bug. Please report this if possible, e.g. here: "" PACKAGE_BUGREPORT ""/new?title=wallet:%20ReserveKey%20was%20not%20dealt%20with%20until%20destructor"");\n```",https://github.com/bitcoin/bitcoin/pull/15796#discussion_r293407862,293407862,src/wallet/wallet.h
instagibbs,2019-06-13T14:53:03Z,"wrestled with tinyformat a bit, but took heart of suggestion",https://github.com/bitcoin/bitcoin/pull/15796#discussion_r293422141,293422141,src/wallet/wallet.h
instagibbs,2019-06-13T14:54:16Z,"```\n2019-06-13T14:45:00Z Error ""tinyformat: Too many conversion specifiers in format string"" while formatting log message: Warning! A CReserveKey was not dealt with until destructor. This is a bug. Please report this if possible , e.g. here: https://github.com/bitcoin/bitcoin/issues/new?title=wallet:%20ReserveKey%20was%20not%20dealt%20with%20until%20destructor\n```\nto\n```\n2019-06-13T14:50",https://github.com/bitcoin/bitcoin/pull/15796#discussion_r293422768,293422768,src/wallet/wallet.h
MarcoFalke,2019-06-13T15:53:47Z,"Sorry for continued nit-picking, but the logprint could be made even if we assert out in the destructor.\n\n```suggestion\n            LogPrintf(""Warning! A CReserveKey was not dealt with until destructor. This is a bug. Please report this if possible, e.g. here: %s%s\n"", PACKAGE_BUGREPORT, ""/new\?title=wallet:%20ReserveKey%20was%20not%20dealt%20with%20until%20destructor"");\n#ifdef DEBUG\n   ",https://github.com/bitcoin/bitcoin/pull/15796#discussion_r293453411,293453411,src/wallet/wallet.h
instagibbs,2019-06-13T17:08:00Z,"indeed, a run of RPC tests appears to fail and it'd be nice to have it be obvious why",https://github.com/bitcoin/bitcoin/pull/15796#discussion_r293485338,293485338,src/wallet/wallet.h
