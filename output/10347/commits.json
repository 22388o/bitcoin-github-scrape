[
  {
    "sha": "211adc074a662505f2b54f3f2755f4fefc167aac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTFhZGMwNzRhNjYyNTA1ZjJiNTRmM2YyNzU1ZjRmZWZjMTY3YWFj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-18T07:42:14Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-05-19T07:56:16Z"
      },
      "message": "Use range-based for loops (C++11) when looping over vector elements",
      "tree": {
        "sha": "75ae8f49fcd201cc359664317df049f04c78c41b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/75ae8f49fcd201cc359664317df049f04c78c41b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/211adc074a662505f2b54f3f2755f4fefc167aac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/211adc074a662505f2b54f3f2755f4fefc167aac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/211adc074a662505f2b54f3f2755f4fefc167aac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/211adc074a662505f2b54f3f2755f4fefc167aac/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea6fde3f1d2694176a657b69fb0eeb5426e6f309",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea6fde3f1d2694176a657b69fb0eeb5426e6f309",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea6fde3f1d2694176a657b69fb0eeb5426e6f309"
      }
    ],
    "stats": {
      "total": 47,
      "additions": 22,
      "deletions": 25
    },
    "files": [
      {
        "sha": "3102c2ef9a7071b8d0b506c2e9582e6a2031f5fc",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211adc074a662505f2b54f3f2755f4fefc167aac/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211adc074a662505f2b54f3f2755f4fefc167aac/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=211adc074a662505f2b54f3f2755f4fefc167aac",
        "patch": "@@ -754,8 +754,8 @@ void PeerLogicValidation::BlockConnected(const std::shared_ptr<const CBlock>& pb\n         const CTransaction& tx = *ptx;\n \n         // Which orphan pool entries must we evict?\n-        for (size_t j = 0; j < tx.vin.size(); j++) {\n-            auto itByPrev = mapOrphanTransactionsByPrev.find(tx.vin[j].prevout);\n+        for (const auto& txin : tx.vin) {\n+            auto itByPrev = mapOrphanTransactionsByPrev.find(txin.prevout);\n             if (itByPrev == mapOrphanTransactionsByPrev.end()) continue;\n             for (auto mi = itByPrev->second.begin(); mi != itByPrev->second.end(); ++mi) {\n                 const CTransaction& orphanTx = *(*mi)->second.tx;\n@@ -1553,10 +1553,8 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n \n-        for (unsigned int nInv = 0; nInv < vInv.size(); nInv++)\n+        for (CInv &inv : vInv)\n         {\n-            CInv &inv = vInv[nInv];\n-\n             if (interruptMsgProc)\n                 return true;\n "
      },
      {
        "sha": "37c47f22326e30563a4c66e8287dbffb7dc1053b",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211adc074a662505f2b54f3f2755f4fefc167aac/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211adc074a662505f2b54f3f2755f4fefc167aac/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=211adc074a662505f2b54f3f2755f4fefc167aac",
        "patch": "@@ -604,8 +604,8 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n     unsigned int countedTxs = 0;\n     // Update averages with data points from current block\n-    for (unsigned int i = 0; i < entries.size(); i++) {\n-        if (processBlockTx(nBlockHeight, entries[i]))\n+    for (const auto& entry : entries) {\n+        if (processBlockTx(nBlockHeight, entry))\n             countedTxs++;\n     }\n "
      },
      {
        "sha": "1ba0f775bd39bb11da869eee22641b09f73af897",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211adc074a662505f2b54f3f2755f4fefc167aac/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211adc074a662505f2b54f3f2755f4fefc167aac/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=211adc074a662505f2b54f3f2755f4fefc167aac",
        "patch": "@@ -1142,24 +1142,24 @@ class CTransactionSignatureSerializer {\n \n uint256 GetPrevoutHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-        ss << txTo.vin[n].prevout;\n+    for (const auto& txin : txTo.vin) {\n+        ss << txin.prevout;\n     }\n     return ss.GetHash();\n }\n \n uint256 GetSequenceHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vin.size(); n++) {\n-        ss << txTo.vin[n].nSequence;\n+    for (const auto& txin : txTo.vin) {\n+        ss << txin.nSequence;\n     }\n     return ss.GetHash();\n }\n \n uint256 GetOutputsHash(const CTransaction& txTo) {\n     CHashWriter ss(SER_GETHASH, 0);\n-    for (unsigned int n = 0; n < txTo.vout.size(); n++) {\n-        ss << txTo.vout[n];\n+    for (const auto& txout : txTo.vout) {\n+        ss << txout;\n     }\n     return ss.GetHash();\n }"
      },
      {
        "sha": "77cd5985acdfc079eb8fa3f702fab8d5bc7755e0",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211adc074a662505f2b54f3f2755f4fefc167aac/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211adc074a662505f2b54f3f2755f4fefc167aac/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=211adc074a662505f2b54f3f2755f4fefc167aac",
        "patch": "@@ -309,7 +309,6 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp, bool\n     return EvaluateSequenceLocks(index, lockPair);\n }\n \n-\n void LimitMempoolSize(CTxMemPool& pool, size_t limit, unsigned long age) {\n     int expired = pool.Expire(GetTime() - age);\n     if (expired != 0) {\n@@ -2817,8 +2816,8 @@ bool ContextualCheckBlock(const CBlock& block, CValidationState& state, const Co\n \n     // No witness data is allowed in blocks that don't commit to witness data, as this would otherwise leave room for spam\n     if (!fHaveWitness) {\n-        for (size_t i = 0; i < block.vtx.size(); i++) {\n-            if (block.vtx[i]->HasWitness()) {\n+      for (const auto& tx : block.vtx) {\n+            if (tx->HasWitness()) {\n                 return state.DoS(100, false, REJECT_INVALID, \"unexpected-witness\", true, strprintf(\"%s : unexpected witness data found\", __func__));\n             }\n         }"
      },
      {
        "sha": "993776252b0dd0ed142c8587c6eaf0619f0b6464",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/211adc074a662505f2b54f3f2755f4fefc167aac/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/211adc074a662505f2b54f3f2755f4fefc167aac/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=211adc074a662505f2b54f3f2755f4fefc167aac",
        "patch": "@@ -1781,8 +1781,8 @@ bool CWalletTx::IsEquivalentTo(const CWalletTx& _tx) const\n {\n         CMutableTransaction tx1 = *this->tx;\n         CMutableTransaction tx2 = *_tx.tx;\n-        for (unsigned int i = 0; i < tx1.vin.size(); i++) tx1.vin[i].scriptSig = CScript();\n-        for (unsigned int i = 0; i < tx2.vin.size(); i++) tx2.vin[i].scriptSig = CScript();\n+        for (auto& txin : tx1.vin) txin.scriptSig = CScript();\n+        for (auto& txin : tx2.vin) txin.scriptSig = CScript();\n         return CTransaction(tx1) == CTransaction(tx2);\n }\n \n@@ -2183,10 +2183,10 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const int nConfMin\n \n     if (nTotalLower == nTargetValue)\n     {\n-        for (unsigned int i = 0; i < vValue.size(); ++i)\n+        for (const auto& input : vValue)\n         {\n-            setCoinsRet.insert(vValue[i]);\n-            nValueRet += vValue[i].txout.nValue;\n+            setCoinsRet.insert(input);\n+            nValueRet += input.txout.nValue;\n         }\n         return true;\n     }\n@@ -2316,7 +2316,7 @@ bool CWallet::SignTransaction(CMutableTransaction &tx)\n     // sign the new tx\n     CTransaction txNewConst(tx);\n     int nIn = 0;\n-    for (auto& input : tx.vin) {\n+    for (const auto& input : tx.vin) {\n         std::map<uint256, CWalletTx>::const_iterator mi = mapWallet.find(input.prevout.hash);\n         if(mi == mapWallet.end() || input.prevout.n >= mi->second.tx->vout.size()) {\n             return false;\n@@ -3258,11 +3258,11 @@ std::set< std::set<CTxDestination> > CWallet::GetAddressGroupings()\n         }\n \n         // group lone addrs by themselves\n-        for (unsigned int i = 0; i < pcoin->tx->vout.size(); i++)\n-            if (IsMine(pcoin->tx->vout[i]))\n+        for (const auto& txout : pcoin->tx->vout)\n+            if (IsMine(txout))\n             {\n                 CTxDestination address;\n-                if(!ExtractDestination(pcoin->tx->vout[i].scriptPubKey, address))\n+                if(!ExtractDestination(txout.scriptPubKey, address))\n                     continue;\n                 grouping.insert(address);\n                 groupings.insert(grouping);"
      }
    ]
  }
]