[
  {
    "sha": "598b25d5ee9c08947a52824f47531208943a3c65",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OThiMjVkNWVlOWMwODk0N2E1MjgyNGY0NzUzMTIwODk0M2EzYzY1",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@chaincode.com",
        "date": "2015-09-23T15:46:36Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-09-23T19:12:19Z"
      },
      "message": "Add test showing bug in mempool packages",
      "tree": {
        "sha": "d1cefb8db59ea62780f5218107ccdd1419916c36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1cefb8db59ea62780f5218107ccdd1419916c36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/598b25d5ee9c08947a52824f47531208943a3c65",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598b25d5ee9c08947a52824f47531208943a3c65",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/598b25d5ee9c08947a52824f47531208943a3c65",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598b25d5ee9c08947a52824f47531208943a3c65/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "999c8be81a00146cc0ee0f6fb49104e906e08835",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/999c8be81a00146cc0ee0f6fb49104e906e08835",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/999c8be81a00146cc0ee0f6fb49104e906e08835"
      }
    ],
    "stats": {
      "total": 93,
      "additions": 82,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6bc6e43f0b4369c05a841fa7efd72f41875217a8",
        "filename": "qa/rpc-tests/mempool_packages.py",
        "status": "modified",
        "additions": 82,
        "deletions": 11,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/598b25d5ee9c08947a52824f47531208943a3c65/qa/rpc-tests/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/598b25d5ee9c08947a52824f47531208943a3c65/qa/rpc-tests/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/mempool_packages.py?ref=598b25d5ee9c08947a52824f47531208943a3c65",
        "patch": "@@ -15,22 +15,24 @@ class MempoolPackagesTest(BitcoinTestFramework):\n \n     def setup_network(self):\n         self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\", \"-relaypriority=0\"]))\n+        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\", \"-relaypriority=0\", \"-debug\"]))\n+        self.nodes.append(start_node(1, self.options.tmpdir, [\"-maxorphantx=1000\", \"-relaypriority=0\", \"-limitancestorcount=5\", \"-debug\"]))\n+        connect_nodes(self.nodes[0], 1)\n         self.is_network_split = False\n         self.sync_all()\n \n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent\n-    def chain_transaction(self, parent_txid, vout, value, fee, num_outputs):\n+    def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         send_value = satoshi_round((value - fee)/num_outputs)\n         inputs = [ {'txid' : parent_txid, 'vout' : vout} ]\n         outputs = {}\n         for i in xrange(num_outputs):\n-            outputs[self.nodes[0].getnewaddress()] = send_value\n-        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        signedtx = self.nodes[0].signrawtransaction(rawtx)\n-        txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n-        fulltx = self.nodes[0].getrawtransaction(txid, 1)\n+            outputs[node.getnewaddress()] = send_value\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signedtx = node.signrawtransaction(rawtx)\n+        txid = node.sendrawtransaction(signedtx['hex'])\n+        fulltx = node.getrawtransaction(txid, 1)\n         assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n         return (txid, send_value)\n \n@@ -46,7 +48,7 @@ def run_test(self):\n         # 100 transactions off a confirmed tx should be fine\n         chain = []\n         for i in xrange(100):\n-            (txid, sent_value) = self.chain_transaction(txid, 0, value, fee, 1)\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, 0, value, fee, 1)\n             value = sent_value\n             chain.append(txid)\n \n@@ -69,10 +71,12 @@ def run_test(self):\n \n         # Adding one more transaction on to the chain should fail.\n         try:\n-            self.chain_transaction(txid, vout, value, fee, 1)\n+            self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n         except JSONRPCException as e:\n             print \"too-long-ancestor-chain successfully rejected\"\n \n+        # TODO: check that node1's mempool is as expected\n+\n         # TODO: test ancestor size limits\n \n         # Now test descendant chain limits\n@@ -82,15 +86,15 @@ def run_test(self):\n \n         transaction_package = []\n         # First create one parent tx with 10 children\n-        (txid, sent_value) = self.chain_transaction(txid, vout, value, fee, 10)\n+        (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 10)\n         parent_transaction = txid\n         for i in xrange(10):\n             transaction_package.append({'txid': txid, 'vout': i, 'amount': sent_value})\n \n         for i in xrange(1000):\n             utxo = transaction_package.pop(0)\n             try:\n-                (txid, sent_value) = self.chain_transaction(utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n+                (txid, sent_value) = self.chain_transaction(self.nodes[0], utxo['txid'], utxo['vout'], utxo['amount'], fee, 10)\n                 for j in xrange(10):\n                     transaction_package.append({'txid': txid, 'vout': j, 'amount': sent_value})\n                 if i == 998:\n@@ -101,7 +105,74 @@ def run_test(self):\n                 assert_equal(i, 999)\n                 print \"tx that would create too large descendant package successfully rejected\"\n \n+        # TODO: check that node1's mempool is as expected\n+\n         # TODO: test descendant size limits\n \n+        # Test reorg handling\n+        # First, the basics:\n+        self.nodes[0].generate(1)\n+        sync_blocks(self.nodes)\n+        self.nodes[1].invalidateblock(self.nodes[0].getbestblockhash())\n+        self.nodes[1].reconsiderblock(self.nodes[0].getbestblockhash())\n+\n+        # Now test the case where node1 has a transaction T in its mempool that\n+        # depends on transactions A and B which are in a mined block, and the\n+        # block containing A and B is disconnected, AND B is not accepted back\n+        # into node1's mempool because its ancestor count is too high.\n+\n+        # Create 8 transactions, like so:\n+        # Tx0 -> Tx1 (vout0)\n+        #   \\--> Tx2 (vout1) -> Tx3 -> Tx4 -> Tx5 -> Tx6 -> Tx7\n+        #\n+        # Mine them in the next block, then generate a new tx8 that spends\n+        # Tx1 and Tx7, and add to node1's mempool, then disconnect the\n+        # last block.\n+\n+        # Create tx0 with 2 outputs\n+        utxo = self.nodes[0].listunspent()\n+        txid = utxo[0]['txid']\n+        value = utxo[0]['amount']\n+        vout = utxo[0]['vout']\n+\n+        send_value = satoshi_round((value - fee)/2)\n+        inputs = [ {'txid' : txid, 'vout' : vout} ]\n+        outputs = {}\n+        for i in xrange(2):\n+            outputs[self.nodes[0].getnewaddress()] = send_value\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n+        tx0_id = txid\n+        value = send_value\n+\n+        # Create tx1\n+        (tx1_id, tx1_value) = self.chain_transaction(self.nodes[0], tx0_id, 0, value, fee, 1)\n+\n+        # Create tx2-7\n+        vout = 1\n+        txid = tx0_id\n+        for i in xrange(6):\n+            (txid, sent_value) = self.chain_transaction(self.nodes[0], txid, vout, value, fee, 1)\n+            vout = 0\n+            value = sent_value\n+\n+        # Mine these in a block\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Now generate tx8, with a big fee\n+        inputs = [ {'txid' : tx1_id, 'vout': 0}, {'txid' : txid, 'vout': 0} ]\n+        outputs = { self.nodes[0].getnewaddress() : send_value + value - 4*fee }\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        signedtx = self.nodes[0].signrawtransaction(rawtx)\n+        txid = self.nodes[0].sendrawtransaction(signedtx['hex'])\n+        sync_mempools(self.nodes)\n+        \n+        # Now try to disconnect the tip on each node...\n+        self.nodes[1].invalidateblock(self.nodes[1].getbestblockhash())\n+        self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n+        sync_blocks(self.nodes)\n+\n if __name__ == '__main__':\n     MempoolPackagesTest().main()"
      }
    ]
  },
  {
    "sha": "60de0d5826f1b848a43ec989ff712f002eddc3dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGRlMGQ1ODI2ZjFiODQ4YTQzZWM5ODlmZjcxMmYwMDJlZGRjM2Rj",
    "commit": {
      "author": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-09-23T17:37:32Z"
      },
      "committer": {
        "name": "Suhas Daftuar",
        "email": "sdaftuar@gmail.com",
        "date": "2015-09-23T19:30:41Z"
      },
      "message": "Fix mempool package tracking edge case\n\nCalculateMemPoolAncestors was always looping over a transaction's inputs\nto find in-mempool parents.  When adding a new transaction, this is the\ncorrect behavior, but when removing a transaction, we want to use the\nancestor set that would be calculated by walking mapLinks (which should\nin general be the same set, except during a reorg when the mempool is\nin an inconsistent state, and the mapLinks-based calculation would be the\ncorrect one).",
      "tree": {
        "sha": "f30240eccceb817d58cb7a35e287f5ef979118df",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f30240eccceb817d58cb7a35e287f5ef979118df"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60de0d5826f1b848a43ec989ff712f002eddc3dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60de0d5826f1b848a43ec989ff712f002eddc3dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60de0d5826f1b848a43ec989ff712f002eddc3dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60de0d5826f1b848a43ec989ff712f002eddc3dc/comments",
    "author": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sdaftuar",
      "id": 7463573,
      "node_id": "MDQ6VXNlcjc0NjM1NzM=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7463573?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sdaftuar",
      "html_url": "https://github.com/sdaftuar",
      "followers_url": "https://api.github.com/users/sdaftuar/followers",
      "following_url": "https://api.github.com/users/sdaftuar/following{/other_user}",
      "gists_url": "https://api.github.com/users/sdaftuar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sdaftuar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sdaftuar/subscriptions",
      "organizations_url": "https://api.github.com/users/sdaftuar/orgs",
      "repos_url": "https://api.github.com/users/sdaftuar/repos",
      "events_url": "https://api.github.com/users/sdaftuar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sdaftuar/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "598b25d5ee9c08947a52824f47531208943a3c65",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/598b25d5ee9c08947a52824f47531208943a3c65",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/598b25d5ee9c08947a52824f47531208943a3c65"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 39,
      "deletions": 16
    },
    "files": [
      {
        "sha": "1370cab0c05e97413014a7396789c13b474cb0e1",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 15,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60de0d5826f1b848a43ec989ff712f002eddc3dc/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60de0d5826f1b848a43ec989ff712f002eddc3dc/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=60de0d5826f1b848a43ec989ff712f002eddc3dc",
        "patch": "@@ -159,26 +159,30 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n     }\n }\n \n-bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString)\n+bool CTxMemPool::CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents /* = true */)\n {\n     setEntries parentHashes;\n     const CTransaction &tx = entry.GetTx();\n \n-    // Get parents of this transaction that are in the mempool\n-    // Entry may or may not already be in the mempool, and GetMemPoolParents()\n-    // is only valid for entries in the mempool, so we iterate mapTx to find\n-    // parents.\n-    // TODO: optimize this so that we only check limits and walk\n-    // tx.vin when called on entries not already in the mempool.\n-    for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n-        if (piter != mapTx.end()) {\n-            parentHashes.insert(piter);\n-            if (parentHashes.size() + 1 > limitAncestorCount) {\n-                errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n-                return false;\n+    if (fSearchForParents) {\n+        // Get parents of this transaction that are in the mempool\n+        // GetMemPoolParents() is only valid for entries in the mempool, so we\n+        // iterate mapTx to find parents.\n+        for (unsigned int i = 0; i < tx.vin.size(); i++) {\n+            txiter piter = mapTx.find(tx.vin[i].prevout.hash);\n+            if (piter != mapTx.end()) {\n+                parentHashes.insert(piter);\n+                if (parentHashes.size() + 1 > limitAncestorCount) {\n+                    errString = strprintf(\"too many unconfirmed parents [limit: %u]\", limitAncestorCount);\n+                    return false;\n+                }\n             }\n         }\n+    } else {\n+        // If we're not searching for parents, we require this to be an\n+        // entry in the mempool already.\n+        txiter it = mapTx.iterator_to(entry);\n+        parentHashes = GetMemPoolParents(it);\n     }\n \n     size_t totalSizeWithAncestors = entry.GetTxSize();\n@@ -249,7 +253,24 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove)\n         setEntries setAncestors;\n         const CTxMemPoolEntry &entry = *removeIt;\n         std::string dummy;\n-        CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy);\n+        // Since this is a tx that is already in the mempool, we can call CMPA\n+        // with fSearchForParents = false.  If the mempool is in a consistent\n+        // state, then using true or false should both be correct, though false\n+        // should be a bit faster.\n+        // However, if we happen to be in the middle of processing a reorg, then\n+        // the mempool can be in an inconsistent state.  In this case, the set\n+        // of ancestors reachable via mapLinks will be the same as the set of \n+        // ancestors whose packages include this transaction, because when we\n+        // add a new transaction to the mempool in addUnchecked(), we assume it\n+        // has no children, and in the case of a reorg where that assumption is\n+        // false, the in-mempool children aren't linked to the in-block tx's\n+        // until UpdateTransactionsFromBlock() is called.\n+        // So if we're being called during a reorg, ie before\n+        // UpdateTransactionsFromBlock() has been called, then mapLinks[] will\n+        // differ from the set of mempool parents we'd calculate by searching,\n+        // and it's important that we use the mapLinks[] notion of ancestor\n+        // transactions as the set of things to update for removal.\n+        CalculateMemPoolAncestors(entry, setAncestors, nNoLimit, nNoLimit, nNoLimit, nNoLimit, dummy, false);\n         // Note that UpdateAncestorsOf severs the child links that point to\n         // removeIt in the entries for the parents of removeIt.  This is\n         // fine since we don't need to use the mempool children of any entries"
      },
      {
        "sha": "c0eef0dd222aef31d19cd554b9c99ccfba62057e",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60de0d5826f1b848a43ec989ff712f002eddc3dc/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60de0d5826f1b848a43ec989ff712f002eddc3dc/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=60de0d5826f1b848a43ec989ff712f002eddc3dc",
        "patch": "@@ -392,8 +392,10 @@ class CTxMemPool\n      *  limitDescendantCount = max number of descendants any ancestor can have\n      *  limitDescendantSize = max size of descendants any ancestor can have\n      *  errString = populated with error reason if any limits are hit\n+     *  fSearchForParents = whether to search a tx's vin for in-mempool parents, or\n+     *    look up parents from mapLinks. Must be true for entries not in the mempool\n      */\n-    bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString);\n+    bool CalculateMemPoolAncestors(const CTxMemPoolEntry &entry, setEntries &setAncestors, uint64_t limitAncestorCount, uint64_t limitAncestorSize, uint64_t limitDescendantCount, uint64_t limitDescendantSize, std::string &errString, bool fSearchForParents = true);\n \n     unsigned long size()\n     {"
      }
    ]
  }
]