DrahtBot,2020-12-16 06:06:11,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23549](https://github.com/bitcoin/bitcoin/pull/23549) (Add scanblocks RPC call (attempt 2) by jamesob)\n\nIf you conside",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-745787257,745787257,
luke-jr,2021-01-03 21:20:10,"Seems like block filters are just a potential implementation detail/optimisation here, not part of the fundamental concept...\n\nMaybe rename it to `scanblocks` (and consider supporting a slow scan when the filters are disabled?)",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-753677860,753677860,
fjahr,2021-01-06 00:11:02,Concept ACK,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-754977795,754977795,
jonasschnelli,2021-01-06 08:51:14,"> Maybe rename it to scanblocks (and consider supporting a slow scan when the filters are disabled?)\n\nI can do that. But the call doesn't scan blocks (hence your proposed name `scanblocks`). It looks for relevant block**hashes** based on descriptors.\n`scanblocks` doesn't sound after what this call is doing.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755169858,755169858,
flack,2021-01-06 10:17:33,maybe call it `findblockhashes` then? Or `findblocks` even?,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755213223,755213223,
Sjors,2021-01-06 12:03:01,"I think `scanblocks` is fine. Without filters it ""scans blocks"" and returns block hashes. With filter it doesn't scan raw block data, but it scans filters block by block.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755260665,755260665,
jonasschnelli,2021-01-06 15:02:20,"> Without filters it ""scans blocks"" and returns block hashes. With filter it doesn't scan raw block data, but it scans filters block by block.\n\nWouldn't it be inconsistent to have `scanblocks` (general) in relation to `rescanblockchain` (wallet)?\nBut yes... using `scanblock` perhaps is acceptable.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-755350162,755350162,
jonasschnelli,2021-01-08 10:56:50,"Overhauled this PR. Fixed all the reported issues.\n\nAdded the same interface then `scantxoutset` (with action ""start"", ""abort"", ""status""). Allows to get progress reports via a different RPC call (or abort the current scan). No concurrent scans possible.\n\nAlso added `stop_height`.\n\nSome performance reports on an `i7-8700 CPU @ 3.20GHz` with NVme disk:\n* Scanning an pkh xpub (`m/0/*` &",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756692398,756692398,
Sjors,2021-01-08 16:11:39,"Thanks for the update! Unfortunately unlike `rescanblockchain` we actually need the result of this call. Just having `status` is not enough to obtain the result if RPC times out. I think we need to store the result somewhere too, perhaps in a way that you can only read once. However if that's too difficult we could instead recommend that the user pays attention to the `start_height` and `stop_heig",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756843472,756843472,
jonasschnelli,2021-01-08 16:59:33,"> Thanks for the update! Unfortunately unlike rescanblockchain we actually need the result of this call. Just having status is not enough to obtain the result if RPC times out.\n\nI think we can handle this the same way as `scantxoutset` (both call are in the same group of how much time they consume).\nYou just need to set the rpctimeout correctly (as one has to do for the three `waitfor*` call",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756872327,756872327,
Sjors,2021-01-08 17:11:57,"Having long running tasks that you can manage via a UUID does sound useful, but I agree it would be overkill in this PR.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-756886762,756886762,
jonasschnelli,2021-01-29 09:00:51,Rebased,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-769673951,769673951,
jonasschnelli,2021-02-18 09:09:57,Thanks @fjahr for the review. Fixed the reported points (see also answer https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578245439).,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-781197518,781197518,
Sjors,2021-02-18 16:44:07,"CI is unhappy. The ""prune wallet rescans"" comment in the description needs an update. Maybe add test for a pruned chain?\n\n~When I call `scanblocks status` the `progress` fields updates every now and then, but the `current_height` field is stuck at the initial height.~\n\nWhen I called `abort` it returned `true`, but then when I called `status` again it was still there. I guess that's because",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-781478834,781478834,
jonasschnelli,2021-03-04 16:19:16,Fixed the RPC test failure and implemented some of @Sjors suggestions.,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-790738691,790738691,
chrisguida,2021-03-12 02:03:23,"ACK 71b7cdb460e2d0179aa87bdd0d30a82a821f6d05\n\nI reviewed the code, ran the functional tests, and did some manual testing. This rpc call works great; I was able to scan 1000 addresses from genesis to tip on an M1 Macbook Air in 3 min 27 sec.\n\nThe only nit I have is that the `bitcoin-cli help scanblocks` examples don't work, but the functions that create the examples (`HelpExampleCli` and `H",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-797181308,797181308,
prayank23,2021-04-12 02:19:07,"Concept ACK. Will test today.\n\nTwo questions:\n\n1. Can we include `-rpcclienttimeout=0` by default if not mentioned by the user because the call can take time?\n~~2. Do we have any RPC which scans mempool instead of blocks and return the transactions associated with it?~~ `getrawmempool` works for mempool",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-817433922,817433922,
prayank23,2021-04-12 20:50:10,"Compiled successfully on Ubuntu. Two functional tests failed:\n\n```\nfeature_config_args.py                             | ✖ Failed  | 34 s\nfeature_pruning.py                                 | ✖ Failed  | 480 s\n```",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818223366,818223366,
MarcoFalke,2021-04-13 04:29:34,What is the combined log of the test failure? `./test/functional/combine_logs.py`,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818428147,818428147,
prayank23,2021-04-13 13:24:43,"Logs:\n\n1. feature_block.py  : https://ghostbin.com/paste/Q6fRX\n2. feature_pruning.py : https://ghostbin.com/paste/GQP81\n\n",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-818733325,818733325,
theStack,2021-07-30 14:11:14,"Concept ACK\n\nThere have been various code reviews but no changes since months. @jonasschnelli: are you still working on this PR? (Just checking out before I start to code-review).",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-889919935,889919935,
MarcoFalke,2021-07-31 07:59:59,"Removed from high-prio for now, but can be added back any time.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-890308534,890308534,
Kirandevraj,2021-08-24 07:17:09,"Compiled and tested Successfully 6a69dd267e4b96e6657de7b77521311994b2a902 at Ubuntu 18.04. \nStarted Bitcoin Core in regtest with keypool=5. Created and mined blocks to addresses in descriptor wallet after creating addresses more than the keypool size using getnewaddress. Scanned blocks for all the addresses using `scanblocks` RPC and were able to get the right blocks that contained the transacti",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-904386712,904386712,
jamesob,2021-10-05 01:54:23,"Concept ACK. Would love to see this, or any other mechanism that allows performing wallet rescans in ~2min on good hardware, make it in.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-933994002,933994002,
luke-jr,2021-10-05 21:57:41,Rebased here: https://github.com/bitcoin/bitcoin/compare/master...luke-jr:rpc_filterblocks,https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-934907012,934907012,
MarcoFalke,2021-10-06 11:03:45,"Should this be marked ""up for grabs"" @jonasschnelli ?",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-935979926,935979926,
jamesob,2021-10-10 21:19:06,"I haven't started review yet, but given @MarcoFalke has done some previous work on this, we should ensure that this change isn't subject to the bugs he points out here: https://github.com/bitcoin/bitcoin/pull/15845#issuecomment-625768563",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-939554671,939554671,
jamesob,2021-11-18 20:16:17,"For what it's worth, I'm working on resurrecting this PR. Hoping to have a branch pushed by end of day.",https://github.com/bitcoin/bitcoin/pull/20664#issuecomment-973226879,973226879,
Sjors,2020-12-30 16:14:53,`scanblockfilters`,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247480,550247480,test/functional/rpc_scanblockfilters.py
Sjors,2020-12-30 16:15:36,Maybe add a node without this index and test that the RPC call fails.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550247720,550247720,test/functional/rpc_scanblockfilters.py
Sjors,2020-12-30 16:17:25,"This is a bit hard to read, maybe start with `start_height = self.nodes[0].getblockheader(blockhash_new)['height']`",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550248324,550248324,test/functional/rpc_scanblockfilters.py
Sjors,2020-12-30 16:19:53,Would be good to add an object descriptor too.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550249111,550249111,src/rpc/blockchain.cpp
Sjors,2020-12-30 16:25:04,"I think this is worth logging in general rather than RPC only, just like `rescanwallet`. It took a few seconds between issuing the RPC command and seeing these log entries, any idea why?",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550250917,550250917,src/rpc/blockchain.cpp
jonatack,2020-12-30 19:06:18,"Looks like the example is missing quotes\n```suggestion\n                    HelpExampleCli(""scanblockfilters"", ""'[\""addr(bcrt1q4u4nsgk6ug0sqz7r3rj9tykjxrsl0yy4d0wwte)\""]' 300000"") +\n```\n```\n$ bitcoin-cli -signet scanblockfilters [""addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)""] 0\nerror: Error parsing JSON: [addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)]\n```\n```\n$ bitcoin-cli",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550297373,550297373,src/rpc/blockchain.cpp
jonatack,2020-12-30 19:13:33,"The actual default start height currently seems to be the tip, not 0.\n```cpp\nblock = ::ChainActive().Tip();\n```",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550299205,550299205,src/rpc/blockchain.cpp
jonatack,2020-12-30 19:19:47,"Looks like this should be `params[2]`\n```suggestion\n        filtertype_name = request.params[2].get_str();\n```\n\nIn the functional test, suggest asserting that a call with ""basic"" and another with no arg return the same result:\n```\nbitcoin-cli -signet scanblockfilters \\n  '[""addr(tb1qdydhyacp7tj2asc0u4mhtf6rn65dfjxclrdd7a)""]' 0 basic\n[\n  ""0000013b318daf6e8d4c531b8293ebf800871f42",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550300920,550300920,src/rpc/blockchain.cpp
jonatack,2020-12-30 19:21:02,"Can be `const`\n```diff\n- std::string filtertype_name = ""basic"";\n- if (!request.params[2].isNull()) {\n-     filtertype_name = request.params[1].get_str();\n- }\n+ const std::string filtertype_name{request.params[2].isNull() ? ""basic"" : request.params[2].get_str()};\n```\n",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550301218,550301218,src/rpc/blockchain.cpp
jonatack,2020-12-30 19:31:53,"Perhaps also `assert_raises_rpc_error` on\n- ""Unknown filtertype""\n- ""Index is not enabled for filtertype "" + filtertype_name\n- ""Invalid stopheight""",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r550304054,550304054,test/functional/rpc_scanblockfilters.py
jonasschnelli,2021-01-06 08:57:29,Nice. Will adapt this.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552445929,552445929,src/rpc/blockchain.cpp
jonasschnelli,2021-01-06 15:49:06,Fixed,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r552733300,552733300,src/rpc/blockchain.cpp
fjahr,2021-02-07 15:06:10,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nYou can move this line outside the if..elseif, it's repeated each time.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630663,571630663,src/rpc/blockchain.cpp
fjahr,2021-02-07 15:08:17,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nnit: add something like ""(returns Null if there is no ongoing scan)""",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571630982,571630982,src/rpc/blockchain.cpp
fjahr,2021-02-07 15:48:21,"in ab315e5294bdd01c839463b0736a67a326ba38b5:\n\nnit: Could put `[""addr(""+addr_1+"")""]` in a variable since it's reused many times.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637110,571637110,test/functional/rpc_scanblockfilters.py
fjahr,2021-02-07 15:52:17,"in ab315e5294bdd01c839463b0736a67a326ba38b5:\n\nWhere you going to use this addr in an assert explicitly? I don't think it is at the moment.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571637628,571637628,test/functional/rpc_scanblockfilters.py
fjahr,2021-02-07 15:55:28,"in ab315e5294bdd01c839463b0736a67a326ba38b5:\n\nnit: 2020 - 2021",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571638024,571638024,test/functional/rpc_scanblockfilters.py
fjahr,2021-02-07 16:06:08,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nCould put these into `else` blocks of the respective options so these calls only run when needed.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639553,571639553,src/rpc/blockchain.cpp
fjahr,2021-02-07 16:07:49,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nIs this meant to say `needle_set`?",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571639839,571639839,src/rpc/blockchain.cpp
fjahr,2021-02-07 16:25:19,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nI think you could use `g_scanfilter_progress_height` here and remove `last_scanned_block` completely.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571642073,571642073,src/rpc/blockchain.cpp
fjahr,2021-02-07 16:32:36,"Actually, I think it would have to be used because otherwise reported results could be inconsistent in case of the abort because it's not really the last scanned block but the last block that the `while(block)` loop has gone through.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571643067,571643067,src/rpc/blockchain.cpp
fjahr,2021-02-07 16:41:07,"in 7bb2c05e576f56f9ccfc44f7b95c3a8ebfb9419c:\n\nformatting nit: spaces aroung the `+`",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r571644271,571644271,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 08:57:36,"Could.. yes. But since there is no `else` (unknown action), I tend to keep it at that level.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578238932,578238932,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 09:02:04,Yes. That would be possible. But IMO it makes the code hard(er) to read and I guess performance wise is it almost no impact.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242000,578242000,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 09:02:26,Good catch. Fixed.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578242215,578242215,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 09:07:23,Not sure about this. The interruption point is at the beginning of the while loop. Processing blocks (scanning filters) can't be done without setting `last_scanned_block = block;`. Shouldn't therefore `last_scanned_block` always point to `stopindex` of `LookupFilterRange()` (a.k.a. the last scanned block)? Or do I miss something?,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578245439,578245439,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 09:08:21,Fixed.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246170,578246170,src/rpc/blockchain.cpp
jonasschnelli,2021-02-18 09:09:09,Good point. Added.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578246706,578246706,src/rpc/blockchain.cpp
Sjors,2021-02-18 17:10:30,Maybe add a hint here that `-debug=rpc` will show progress in the log (this behavior is different from `rescanblockchain` which always prints to the log),https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578596183,578596183,src/rpc/blockchain.cpp
Sjors,2021-02-18 17:13:52,"nit: ""Invalid action argument""",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578599572,578599572,src/rpc/blockchain.cpp
Sjors,2021-02-18 17:30:35,Maybe add ` (height)`,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r578612412,578612412,src/rpc/blockchain.cpp
jonasschnelli,2021-03-04 09:55:09,Would require to fetch the height from the hash (just for the sake of logging).,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587322743,587322743,src/rpc/blockchain.cpp
fjahr,2021-03-05 00:14:51,"Sorry, that I didn't get around to answer earlier. I am trying to simplify so please ignore if I get some minor details wrong: Let's say we are scanning blocks 10.000 - 30.000. The while loop runs through every block and with each block `last_scanned_block` is updated. But no scanning is actually happening. At 20.000 it does the actual scanning for the first time, blocks 10k-20k. So at height 20k ",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r587930086,587930086,src/rpc/blockchain.cpp
Sjors,2021-03-12 08:48:04,Can we move the actual scanning code away from RPC land?,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593002948,593002948,src/rpc/blockchain.cpp
Sjors,2021-03-12 09:11:57,This assertion fails frequently on my machine.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018025,593018025,test/functional/rpc_scanblockfilters.py
Sjors,2021-03-12 09:12:27,"When the above assertion doesn't fail, then this one tends to fail.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593018310,593018310,test/functional/rpc_scanblockfilters.py
chrisguida,2021-03-12 16:03:25,"Was thinking this, I'm guessing we'll want it abstracted out if we want to be able to perform internal rescans, if, for example, the user decides to add an old wallet.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593282847,593282847,src/rpc/blockchain.cpp
Sjors,2021-03-12 18:10:54,It would also help with GUI support. I imagine soon (tm) to have a wizard where you can import a BIP39 seed and it recovers coins.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r593365755,593365755,src/rpc/blockchain.cpp
kiminuo,2021-04-23 14:47:42,nit: It seems to me that this line can be put out of `while` cycle. ,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619279994,619279994,src/rpc/blockchain.cpp
kiminuo,2021-04-23 14:50:00,Would it be helpful to log that the scanning was aborted?,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619281660,619281660,src/rpc/blockchain.cpp
kiminuo,2021-04-23 14:59:22,"```suggestion\n                    {""start_height"", RPCArg::Type::NUM, /*default*/ ""0"", ""Height to start to filter from""},\n```\n?\n\nIs `filter` correct verb here? `scan`?",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289075,619289075,src/rpc/blockchain.cpp
kiminuo,2021-04-23 14:59:39,Similar to above.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289292,619289292,src/rpc/blockchain.cpp
kiminuo,2021-04-23 15:00:31,"```suggestion\n                ""This call may take several minutes. Make sure to use no RPC timeout (bitcoin-cli -rpcclienttimeout=0)"",\n```",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619289998,619289998,src/rpc/blockchain.cpp
kiminuo,2021-04-23 15:12:39,"For my information: This array seems to unbounded. The bound is probably some maximum size of RPC requests in general. Anyway, I wonder whether it is an issue or not. I guess not because nobody mentioned it here. Could anybody elaborate on this a bit, please?",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619298914,619298914,src/rpc/blockchain.cpp
kiminuo,2021-04-23 15:27:46,"For my information: Would it make sense to move this line to L2414 and to make the for-loop on L2417 abortable too? Or is it an overkill? I'm not sure how long the for loop can take for ""many scanobjects"".\n\nIf the for-loop can take a long time then this `g_scanfilter_should_abort_scan = false;` assignment may mean that a user abort request might be ignored.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619310187,619310187,src/rpc/blockchain.cpp
kiminuo,2021-04-23 15:32:37,"nit: What about:\n\n```suggestion\n""""""Test the scanblocks RPC call.""""""\n```\n?\n\nIt looks like it is mostly written in this way in tests.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619313659,619313659,test/functional/rpc_scanblockfilters.py
kiminuo,2021-04-23 15:34:14,"Nit:\n\n```suggestion\nclass ScanblocksTest(BitcoinTestFramework):\n```\n",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r619314758,619314758,test/functional/rpc_scanblockfilters.py
achow101,2021-05-10 19:20:45,"In 6a69dd267e4b96e6657de7b77521311994b2a902 ""Add scanblocks RPC call - scan for relevant blocks with descriptors""\n\nThis `RPCResult` does not reflect the actual results.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629622396,629622396,src/rpc/blockchain.cpp
achow101,2021-05-10 19:26:25,"In 6a69dd267e4b96e6657de7b77521311994b2a902 ""Add scanblocks RPC call - scan for relevant blocks with descriptors""\n\nI agree with @fjahr here. `last_scanned_block` isn't actually the last block we have scanned, and if we abort, then `to_height` does not accurately reflect where we have actually scanned up to. It would be better to move it up into the `if` the guards the actual scanning. But in t",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629625592,629625592,src/rpc/blockchain.cpp
achow101,2021-05-10 19:35:14,"In 71b7cdb460e2d0179aa87bdd0d30a82a821f6d05 ""Add scanblock functional test""\n\nSince the indexes are built asynchronously, it is possible that after generating the block, the block filter index has not updated to include the new block, so scanblocks might not find anything. Instead, we need to wait for it to become synced:\n\n```suggestion\n        blockhash = self.nodes[0].generate(1)[0]\n ",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r629630832,629630832,test/functional/rpc_scanblockfilters.py
luke-jr,2021-10-10 20:55:07,relevent ==> relevant,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r725696957,725696957,test/functional/rpc_scanblockfilters.py
jamesob,2021-11-18 21:02:59,"I'd like to handle moving this code out of RPC land in a future change. It isn't a trivial move (given the global progress state), people are probably going to want unittests if we do the move, and IMO the important short-term objective here is getting fast rescans working ASAP. So if it's okay with you guys I'd like to save this move for a later PR once.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623127,752623127,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:03:49,This is only subject to authenticated RPC user input and isn't handled in previous RPC calls (e.g. `scantxoutset`) so if someone wants to DoS their own node with a massive input array that seems okay to me.,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752623617,752623617,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:05:48,"This is overkill IMO; even for a long list, `EvalDescriptorStringOrObject` should be quite fast since it doesn't rely on any disk IO, unlike the calls below.",https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752624685,752624685,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:16,Fixed in https://github.com/bitcoin/bitcoin/pull/23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656192,752656192,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:23,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656256,752656256,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:28,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656322,752656322,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:38,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656439,752656439,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:44,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656509,752656509,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:48,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656549,752656549,src/rpc/blockchain.cpp
jamesob,2021-11-18 21:57:55,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656608,752656608,test/functional/rpc_scanblockfilters.py
jamesob,2021-11-18 21:57:58,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656652,752656652,test/functional/rpc_scanblockfilters.py
jamesob,2021-11-18 21:58:02,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656686,752656686,test/functional/rpc_scanblockfilters.py
jamesob,2021-11-18 21:58:07,Fixed in #23549,https://github.com/bitcoin/bitcoin/pull/20664#discussion_r752656745,752656745,test/functional/rpc_scanblockfilters.py
