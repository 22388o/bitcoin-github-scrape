MarcoFalke,2021-06-11 07:57:46,"I was hoping to have both fixes in the same pull in different commits, since they require the reviewers to look up all call sites anyway:\n* std::optional\n* Check money range inside ParseMoney (#22193, #22044)\n",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859365823,859365823,
theStack,2021-06-11 08:52:40,Concept ACK,https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859400208,859400208,
kiminuo,2021-06-11 12:09:52,"Concept ACK\n\n_____\nJust out of curiosity, I was interested how this changes perf numbers for `ParseMoney`. It's not important though because the function is not used in a repeated way anywhere. Anyway, a [benchmark](c061e79edf04fbf0e05ddbdf4e9a0ec1ba2720f6) says:\n\n|               ns/op |                op/s |    err% |     total | benchmark\n|--------------------:|--------------------:|",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859536228,859536228,
DrahtBot,2021-06-11 15:15:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22766](https://github.com/bitcoin/bitcoin/pull/22766) (refactor: Clarify and disable unused ArgsManager flags by ryanofs",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859653199,859653199,
laanwj,2021-06-11 15:38:58,"Concept ACK, I like this kind of API much better than passing around separate booleans or error codes.",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859667300,859667300,
practicalswift,2021-06-11 18:46:18,"Concept ACK\n\nNon-blocking nit: Personally I think `auto foo = [RHS];` is appropriate in contexts where the type of `foo` is immediately obvious from reading `[RHS]` (such as when `[RHS]` is `std::make_unique<SomeType>(â€¦)`, `v.begin()` or similar), or when the type is irrelevant. In the context of this PR I think `std::optional<CAmount> parsed = ParseMoney(â€¦);` would be slightly more clear comp",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-859773126,859773126,
laanwj,2021-08-02 11:03:31,"> In the context of this PR I think std::optional<CAmount> parsed = ParseMoney(â€¦); would be slightly more clear compared to the suggested auto parsed = ParseMoney(â€¦);.\n\nI hate the verbosity but I do agree in this case, the return type is not obvious.",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-890934431,890934431,
fanquake,2021-08-03 05:08:34,"> Check money range inside ParseMoney \n\nI've added that now.\n\n> I hate the verbosity but I do agree in this case, the return type is not obvious.\n\nChanged to using `std::optional<CAmount>` over `auto`.\n\nI've also rebased and removed some unrelated arg refactoring. Will PR that separately.",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-891530820,891530820,
fanquake,2021-08-03 08:12:55,"> approach ACK, didn't review the src/wallet/wallet.cpp part yet\n\nAddressed suggestions so far.",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-891635731,891635731,
MarcoFalke,2021-08-23 11:47:10,"review ACK f7752adba5dd35fccd3f2144cfcf03538ebf275b ðŸ“„\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK f7752adba5dd35fccd3f2144cfcf03538ebf275b ðŸ“„\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh9JgwApNfnr4XDam6JFxoS7iOSf7DQeVVVn0nExZiL",https://github.com/bitcoin/bitcoin/pull/22220#issuecomment-903692179,903692179,
laanwj,2021-08-02 11:01:50,TFW no rust-like unwrapping pattern matching `if let Some(inc_relay_fee) = Parsemoney(arg) {`,https://github.com/bitcoin/bitcoin/pull/22220#discussion_r680876960,680876960,src/init.cpp
MarcoFalke,2021-08-03 06:59:50,"```suggestion\n            ::incrementalRelayFee = CFeeRate{inc_relay_fee.value()};\n```",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681487924,681487924,src/init.cpp
MarcoFalke,2021-08-03 07:00:04,"```suggestion\n        if (!ParseMoney(args.GetArg(""-blockmintxfee"", """"))) {\n```",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681488064,681488064,src/init.cpp
MarcoFalke,2021-08-03 07:03:52,"```suggestion\n            if (min_tx_fee.value() == 0) {\n```",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681490519,681490519,src/wallet/wallet.cpp
MarcoFalke,2021-08-03 07:05:37,"Also wouldn't it be easier to review to keep the `min_tx_fee` symbol outside the if and then keep the if conditions the same?\n\n```cpp\nfee = Parse;\nif (!fee || !*fee) {\n // same\n}\n// same",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681491525,681491525,src/wallet/wallet.cpp
fanquake,2021-08-03 08:11:59,"Possibly, going to leave for the minute, as I could change this again in a followup.",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681536025,681536025,src/wallet/wallet.cpp
jnewbery,2021-08-03 12:34:45,"Why is this allowed to move inside the `if (gArgs.IsArgSet(""-fallbackfee"")) {` code block? Prior to this change, `walletInstance->m_fallback_fee` would be set to the default (0), and `walletInstance->m_allow_fallback_fee` would therefore be flipped from its initialized value (true) to false.",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681714563,681714563,src/wallet/wallet.cpp
jnewbery,2021-08-03 12:35:59,"I think you could achieve the same, with a smaller diff and less code duplication as follows:\n\n```diff\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -2602,22 +2602,16 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::st\n     }\n \n     if (gArgs.IsArgSet(""-mintxfee"")) {\n-        if (std::optional<CAmount> min_tx_fee = ParseMoney(gArgs.Get",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681715465,681715465,src/wallet/wallet.cpp
MarcoFalke,2021-08-03 12:46:15,Suggested the same in https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681491525 ;),https://github.com/bitcoin/bitcoin/pull/22220#discussion_r681723105,681723105,src/wallet/wallet.cpp
fanquake,2021-08-04 03:23:32,Think this was just a mistake.,https://github.com/bitcoin/bitcoin/pull/22220#discussion_r682257309,682257309,src/wallet/wallet.cpp
fanquake,2021-08-04 03:53:16,Updated to take your suggestions.,https://github.com/bitcoin/bitcoin/pull/22220#discussion_r682266429,682266429,src/wallet/wallet.cpp
jnewbery,2021-08-04 11:02:16,"I don't think this improves clarity. Previously, `ParseMoney()` would only be called if `-blockmintxfee` is set. Now, we call `ParseMoney()` even if `-blockmintxfee` has not been set, and rely on the fact that it'll return a nullopt if we pass it an empty string.",https://github.com/bitcoin/bitcoin/pull/22220#discussion_r682512813,682512813,src/miner.cpp
fanquake,2021-08-04 11:48:54,Reverted to something more like the previous code.,https://github.com/bitcoin/bitcoin/pull/22220#discussion_r682541647,682541647,src/miner.cpp
