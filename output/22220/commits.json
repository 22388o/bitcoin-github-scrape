[
  {
    "sha": "5ef2738089efd396186775ad23aaec71ea44ebb1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZWYyNzM4MDg5ZWZkMzk2MTg2Nzc1YWQyM2FhZWM3MWVhNDRlYmIx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-06-11T04:33:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-04T11:48:24Z"
      },
      "message": "util: make ParseMoney return a std::optional<CAmount>",
      "tree": {
        "sha": "78b1d357ae955c7481f6dee1d15217a7271b2ecd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78b1d357ae955c7481f6dee1d15217a7271b2ecd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5ef2738089efd396186775ad23aaec71ea44ebb1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEKfogACgkQLuufXMCV\nJsEgGBAAlggPZMRDJwlhFWnmyQqC4QOr6QfThIu2WyEPZL2BG1jxoXNFm94Z42te\nH5KgDo5uKNv1S2fN0My5JjEpZ7MI/i6gnsWpct6m5Ub/dV+LKZbfrNXf+jhfhHBz\nyYh0dTf3Ra7CgbximlhyL7funTC6NPyrQKHqfrZViCRaDdC2hVsKaB8L27uEbOlO\nxsb85mo8DX9TrO7B/r70kVGGZA0SQ8kgHFQrmpD1mbcrKbP9SmEJKmAkD0VnzBxb\n0sd+gLiTSvKOdkG4EcBqBxKNOka9Rc+JbEIKVUuxFrQ+vQZIT3cGEXFlxSEb8Dss\nNFZS1QU2vKq8tUuqfbBJhfngCTz/meTRG6VwA7kdCnrUqlpHfwZNzovsjQLidQn8\ntHaPiJvn9zEjDCnupgckguYs6AyTkvM/biFAiqHUohJMdKONV65w6k66nWlDlyhH\nkLQjRcMOimEMSZehin7ItcvhkZCAB0Nz99+dcIWWiYS3TK1Cf0gsRkrHtqRd/P7K\nF5XIXZGMbZqUfMeLzmWyZGJWqXASikJOH+X5Et1pDiLdij0By1UDBO9bVegCf7P9\nbefgz1I/clTVBs/PBOrxtxMxjqONjIMHo8Tv8WE2qC+UJ6oLtyz9Kwwbx5dw6ksg\nUGxMgzQkPzDxxJTcrz0uYdEYOPhWBb5BnmJWaONDpzii2J3FPBA=\n=eP2Q\n-----END PGP SIGNATURE-----",
        "payload": "tree 78b1d357ae955c7481f6dee1d15217a7271b2ecd\nparent 3308c61091b6b7cb22569f3abadea6d001295c90\nauthor fanquake <fanquake@gmail.com> 1623386000 +0800\ncommitter fanquake <fanquake@gmail.com> 1628077704 +0800\n\nutil: make ParseMoney return a std::optional<CAmount>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef2738089efd396186775ad23aaec71ea44ebb1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5ef2738089efd396186775ad23aaec71ea44ebb1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef2738089efd396186775ad23aaec71ea44ebb1/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3308c61091b6b7cb22569f3abadea6d001295c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3308c61091b6b7cb22569f3abadea6d001295c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3308c61091b6b7cb22569f3abadea6d001295c90"
      }
    ],
    "stats": {
      "total": 265,
      "additions": 122,
      "deletions": 143
    },
    "files": [
      {
        "sha": "cd2cdf01f22272445ba15a886e92ed2ecfc88a38",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -188,10 +188,11 @@ static void RegisterLoad(const std::string& strInput)\n \n static CAmount ExtractAndValidateValue(const std::string& strValue)\n {\n-    CAmount value;\n-    if (!ParseMoney(strValue, value))\n+    if (std::optional<CAmount> parsed = ParseMoney(strValue)) {\n+        return parsed.value();\n+    } else {\n         throw std::runtime_error(\"invalid TX output value\");\n-    return value;\n+    }\n }\n \n static void MutateTxVersion(CMutableTransaction& tx, const std::string& cmdVal)"
      },
      {
        "sha": "b234ede43736bbb0779ffea03b5ebfc5968cb913",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 12,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -915,10 +915,11 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // incremental relay fee sets the minimum feerate increase necessary for BIP 125 replacement in the mempool\n     // and the amount the mempool min fee increases above the feerate of txs evicted due to mempool limiting.\n     if (args.IsArgSet(\"-incrementalrelayfee\")) {\n-        CAmount n = 0;\n-        if (!ParseMoney(args.GetArg(\"-incrementalrelayfee\", \"\"), n))\n+        if (std::optional<CAmount> inc_relay_fee = ParseMoney(args.GetArg(\"-incrementalrelayfee\", \"\"))) {\n+            ::incrementalRelayFee = CFeeRate{inc_relay_fee.value()};\n+        } else {\n             return InitError(AmountErrMsg(\"incrementalrelayfee\", args.GetArg(\"-incrementalrelayfee\", \"\")));\n-        incrementalRelayFee = CFeeRate(n);\n+        }\n     }\n \n     // block pruning; get the amount of disk space (in MiB) to allot for block & undo files\n@@ -950,12 +951,12 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     }\n \n     if (args.IsArgSet(\"-minrelaytxfee\")) {\n-        CAmount n = 0;\n-        if (!ParseMoney(args.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n+        if (std::optional<CAmount> min_relay_fee = ParseMoney(args.GetArg(\"-minrelaytxfee\", \"\"))) {\n+            // High fee check is done afterward in CWallet::Create()\n+            ::minRelayTxFee = CFeeRate{min_relay_fee.value()};\n+        } else {\n             return InitError(AmountErrMsg(\"minrelaytxfee\", args.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n-        // High fee check is done afterward in CWallet::Create()\n-        ::minRelayTxFee = CFeeRate(n);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {\n         // Allow only setting incrementalRelayFee to control both\n         ::minRelayTxFee = incrementalRelayFee;\n@@ -965,18 +966,19 @@ bool AppInitParameterInteraction(const ArgsManager& args)\n     // Sanity check argument for min fee for including tx in block\n     // TODO: Harmonize which arguments need sanity checking and where that happens\n     if (args.IsArgSet(\"-blockmintxfee\")) {\n-        CAmount n = 0;\n-        if (!ParseMoney(args.GetArg(\"-blockmintxfee\", \"\"), n))\n+        if (!ParseMoney(args.GetArg(\"-blockmintxfee\", \"\"))) {\n             return InitError(AmountErrMsg(\"blockmintxfee\", args.GetArg(\"-blockmintxfee\", \"\")));\n+        }\n     }\n \n     // Feerate used to define dust.  Shouldn't be changed lightly as old\n     // implementations may inadvertently create non-standard transactions\n     if (args.IsArgSet(\"-dustrelayfee\")) {\n-        CAmount n = 0;\n-        if (!ParseMoney(args.GetArg(\"-dustrelayfee\", \"\"), n))\n+        if (std::optional<CAmount> parsed = ParseMoney(args.GetArg(\"-dustrelayfee\", \"\"))) {\n+            dustRelayFee = CFeeRate{parsed.value()};\n+        } else {\n             return InitError(AmountErrMsg(\"dustrelayfee\", args.GetArg(\"-dustrelayfee\", \"\")));\n-        dustRelayFee = CFeeRate(n);\n+        }\n     }\n \n     fRequireStandard = !args.GetBoolArg(\"-acceptnonstdtxn\", !chainparams.RequireStandard());"
      },
      {
        "sha": "168ade5507568e0d2f355c93e779dfcef157b006",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -73,11 +73,11 @@ static BlockAssembler::Options DefaultOptions()\n     // If -blockmaxweight is not given, limit to DEFAULT_BLOCK_MAX_WEIGHT\n     BlockAssembler::Options options;\n     options.nBlockMaxWeight = gArgs.GetArg(\"-blockmaxweight\", DEFAULT_BLOCK_MAX_WEIGHT);\n-    CAmount n = 0;\n-    if (gArgs.IsArgSet(\"-blockmintxfee\") && ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"), n)) {\n-        options.blockMinFeeRate = CFeeRate(n);\n+    if (gArgs.IsArgSet(\"-blockmintxfee\")) {\n+        std::optional<CAmount> parsed = ParseMoney(gArgs.GetArg(\"-blockmintxfee\", \"\"));\n+        options.blockMinFeeRate = CFeeRate{parsed.value_or(DEFAULT_BLOCK_MIN_TX_FEE)};\n     } else {\n-        options.blockMinFeeRate = CFeeRate(DEFAULT_BLOCK_MIN_TX_FEE);\n+        options.blockMinFeeRate = CFeeRate{DEFAULT_BLOCK_MIN_TX_FEE};\n     }\n     return options;\n }"
      },
      {
        "sha": "5d26529837f9ee852ae9f77ab4a2b78257a4236f",
        "filename": "src/test/fuzz/integer.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/fuzz/integer.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/fuzz/integer.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/integer.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -83,9 +83,8 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n     (void)FormatISO8601Date(i64);\n     (void)FormatISO8601DateTime(i64);\n     {\n-        int64_t parsed_money;\n-        if (ParseMoney(FormatMoney(i64), parsed_money)) {\n-            assert(parsed_money == i64);\n+        if (std::optional<CAmount> parsed = ParseMoney(FormatMoney(i64))) {\n+            assert(parsed.value() == i64);\n         }\n     }\n     (void)GetSizeOfCompactSize(u64);\n@@ -126,9 +125,8 @@ FUZZ_TARGET_INIT(integer, initialize_integer)\n     (void)ToLower(ch);\n     (void)ToUpper(ch);\n     {\n-        int64_t parsed_money;\n-        if (ParseMoney(ValueFromAmount(i64).getValStr(), parsed_money)) {\n-            assert(parsed_money == i64);\n+        if (std::optional<CAmount> parsed = ParseMoney(ValueFromAmount(i64).getValStr())) {\n+            assert(parsed.value() == i64);\n         }\n     }\n     if (i32 >= 0 && i32 <= 16) {"
      },
      {
        "sha": "69e58c3f63c948189d6cae6f358f7ee252fb3760",
        "filename": "src/test/fuzz/parse_numbers.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/fuzz/parse_numbers.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/fuzz/parse_numbers.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/parse_numbers.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -12,8 +12,7 @@ FUZZ_TARGET(parse_numbers)\n {\n     const std::string random_string(buffer.begin(), buffer.end());\n \n-    CAmount amount;\n-    (void)ParseMoney(random_string, amount);\n+    (void)ParseMoney(random_string);\n \n     double d;\n     (void)ParseDouble(random_string, &d);"
      },
      {
        "sha": "b953df580f828ef7ff5c85c795c6f7f40eb0d904",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 70,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -1222,86 +1222,59 @@ BOOST_AUTO_TEST_CASE(util_FormatMoney)\n \n BOOST_AUTO_TEST_CASE(util_ParseMoney)\n {\n-    CAmount ret = 0;\n-    BOOST_CHECK(ParseMoney(\"0.0\", ret));\n-    BOOST_CHECK_EQUAL(ret, 0);\n-\n-    BOOST_CHECK(ParseMoney(\"12345.6789\", ret));\n-    BOOST_CHECK_EQUAL(ret, (COIN/10000)*123456789);\n-\n-    BOOST_CHECK(ParseMoney(\"100000000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*100000000);\n-    BOOST_CHECK(ParseMoney(\"10000000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*10000000);\n-    BOOST_CHECK(ParseMoney(\"1000000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*1000000);\n-    BOOST_CHECK(ParseMoney(\"100000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*100000);\n-    BOOST_CHECK(ParseMoney(\"10000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*10000);\n-    BOOST_CHECK(ParseMoney(\"1000.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*1000);\n-    BOOST_CHECK(ParseMoney(\"100.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*100);\n-    BOOST_CHECK(ParseMoney(\"10.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN*10);\n-    BOOST_CHECK(ParseMoney(\"1.00\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN);\n-    BOOST_CHECK(ParseMoney(\"1\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN);\n-    BOOST_CHECK(ParseMoney(\"   1\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN);\n-    BOOST_CHECK(ParseMoney(\"1   \", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN);\n-    BOOST_CHECK(ParseMoney(\"  1 \", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN);\n-    BOOST_CHECK(ParseMoney(\"0.1\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/10);\n-    BOOST_CHECK(ParseMoney(\"0.01\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100);\n-    BOOST_CHECK(ParseMoney(\"0.001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/1000);\n-    BOOST_CHECK(ParseMoney(\"0.0001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/10000);\n-    BOOST_CHECK(ParseMoney(\"0.00001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100000);\n-    BOOST_CHECK(ParseMoney(\"0.000001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/1000000);\n-    BOOST_CHECK(ParseMoney(\"0.0000001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/10000000);\n-    BOOST_CHECK(ParseMoney(\"0.00000001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n-    BOOST_CHECK(ParseMoney(\" 0.00000001 \", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n-    BOOST_CHECK(ParseMoney(\"0.00000001 \", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n-    BOOST_CHECK(ParseMoney(\" 0.00000001\", ret));\n-    BOOST_CHECK_EQUAL(ret, COIN/100000000);\n-\n-    // Parsing amount that can not be represented in ret should fail\n-    BOOST_CHECK(!ParseMoney(\"0.000000001\", ret));\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.0\").value(), 0);\n+\n+    BOOST_CHECK_EQUAL(ParseMoney(\"12345.6789\").value(), (COIN/10000)*123456789);\n+\n+    BOOST_CHECK_EQUAL(ParseMoney(\"100000000.00\").value(), COIN*100000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"10000000.00\").value(), COIN*10000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"1000000.00\").value(), COIN*1000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"100000.00\").value(), COIN*100000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"10000.00\").value(), COIN*10000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"1000.00\").value(), COIN*1000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"100.00\").value(), COIN*100);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"10.00\").value(), COIN*10);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"1.00\").value(), COIN);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"1\").value(), COIN);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"   1\").value(), COIN);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"1   \").value(), COIN);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"  1 \").value(), COIN);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.1\").value(), COIN/10);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.01\").value(), COIN/100);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.001\").value(), COIN/1000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.0001\").value(), COIN/10000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.00001\").value(), COIN/100000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.000001\").value(), COIN/1000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.0000001\").value(), COIN/10000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.00000001\").value(), COIN/100000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\" 0.00000001 \").value(), COIN/100000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\"0.00000001 \").value(), COIN/100000000);\n+    BOOST_CHECK_EQUAL(ParseMoney(\" 0.00000001\").value(), COIN/100000000);\n+\n+    // Parsing amount that can not be represented should fail\n+    BOOST_CHECK(!ParseMoney(\"0.000000001\"));\n \n     // Parsing empty string should fail\n-    BOOST_CHECK(!ParseMoney(\"\", ret));\n-    BOOST_CHECK(!ParseMoney(\" \", ret));\n-    BOOST_CHECK(!ParseMoney(\"  \", ret));\n+    BOOST_CHECK(!ParseMoney(\"\"));\n+    BOOST_CHECK(!ParseMoney(\" \"));\n+    BOOST_CHECK(!ParseMoney(\"  \"));\n \n     // Parsing two numbers should fail\n-    BOOST_CHECK(!ParseMoney(\"1 2\", ret));\n-    BOOST_CHECK(!ParseMoney(\" 1 2 \", ret));\n-    BOOST_CHECK(!ParseMoney(\" 1.2 3 \", ret));\n-    BOOST_CHECK(!ParseMoney(\" 1 2.3 \", ret));\n+    BOOST_CHECK(!ParseMoney(\"1 2\"));\n+    BOOST_CHECK(!ParseMoney(\" 1 2 \"));\n+    BOOST_CHECK(!ParseMoney(\" 1.2 3 \"));\n+    BOOST_CHECK(!ParseMoney(\" 1 2.3 \"));\n \n     // Attempted 63 bit overflow should fail\n-    BOOST_CHECK(!ParseMoney(\"92233720368.54775808\", ret));\n+    BOOST_CHECK(!ParseMoney(\"92233720368.54775808\"));\n \n     // Parsing negative amounts must fail\n-    BOOST_CHECK(!ParseMoney(\"-1\", ret));\n+    BOOST_CHECK(!ParseMoney(\"-1\"));\n \n     // Parsing strings with embedded NUL characters should fail\n-    BOOST_CHECK(!ParseMoney(\"\\0-1\"s, ret));\n-    BOOST_CHECK(!ParseMoney(STRING_WITH_EMBEDDED_NULL_CHAR, ret));\n-    BOOST_CHECK(!ParseMoney(\"1\\0\"s, ret));\n+    BOOST_CHECK(!ParseMoney(\"\\0-1\"s));\n+    BOOST_CHECK(!ParseMoney(STRING_WITH_EMBEDDED_NULL_CHAR));\n+    BOOST_CHECK(!ParseMoney(\"1\\0\"s));\n }\n \n BOOST_AUTO_TEST_CASE(util_IsHex)"
      },
      {
        "sha": "d72164f3bfa3cc7f28c2998e6c6a71c2e6ec8d8a",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 11,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -5,10 +5,13 @@\n \n #include <util/moneystr.h>\n \n+#include <amount.h>\n #include <tinyformat.h>\n #include <util/strencodings.h>\n #include <util/string.h>\n \n+#include <optional>\n+\n std::string FormatMoney(const CAmount n)\n {\n     // Note: not using straight sprintf here because we do NOT want\n@@ -35,14 +38,14 @@ std::string FormatMoney(const CAmount n)\n }\n \n \n-bool ParseMoney(const std::string& money_string, CAmount& nRet)\n+std::optional<CAmount> ParseMoney(const std::string& money_string)\n {\n     if (!ValidAsCString(money_string)) {\n-        return false;\n+        return std::nullopt;\n     }\n     const std::string str = TrimString(money_string);\n     if (str.empty()) {\n-        return false;\n+        return std::nullopt;\n     }\n \n     std::string strWhole;\n@@ -62,21 +65,21 @@ bool ParseMoney(const std::string& money_string, CAmount& nRet)\n             break;\n         }\n         if (IsSpace(*p))\n-            return false;\n+            return std::nullopt;\n         if (!IsDigit(*p))\n-            return false;\n+            return std::nullopt;\n         strWhole.insert(strWhole.end(), *p);\n     }\n     if (*p) {\n-        return false;\n+        return std::nullopt;\n     }\n     if (strWhole.size() > 10) // guard against 63 bit overflow\n-        return false;\n+        return std::nullopt;\n     if (nUnits < 0 || nUnits > COIN)\n-        return false;\n+        return std::nullopt;\n     int64_t nWhole = atoi64(strWhole);\n-    CAmount nValue = nWhole*COIN + nUnits;\n \n-    nRet = nValue;\n-    return true;\n+    CAmount value = nWhole * COIN + nUnits;\n+\n+    return value;\n }"
      },
      {
        "sha": "b71dffd0db3798cee7d31bb64980667cf084c1d3",
        "filename": "src/util/moneystr.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/util/moneystr.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/util/moneystr.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.h?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -12,13 +12,14 @@\n #include <amount.h>\n #include <attributes.h>\n \n+#include <optional>\n #include <string>\n \n /* Do not use these functions to represent or parse monetary amounts to or from\n  * JSON but use AmountFromValue and ValueFromAmount for that.\n  */\n std::string FormatMoney(const CAmount n);\n /** Parse an amount denoted in full coins. E.g. \"0.0034\" supplied on the command line. **/\n-[[nodiscard]] bool ParseMoney(const std::string& str, CAmount& nRet);\n+std::optional<CAmount> ParseMoney(const std::string& str);\n \n #endif // BITCOIN_UTIL_MONEYSTR_H"
      },
      {
        "sha": "198717f17358920060c5972adbba54e7bcc8b00f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 34,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5ef2738089efd396186775ad23aaec71ea44ebb1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5ef2738089efd396186775ad23aaec71ea44ebb1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=5ef2738089efd396186775ad23aaec71ea44ebb1",
        "patch": "@@ -2602,72 +2602,73 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::st\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n-        CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n+        std::optional<CAmount> min_tx_fee = ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"));\n+        if (!min_tx_fee || min_tx_fee.value() == 0) {\n             error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\"));\n             return nullptr;\n-        }\n-        if (n > HIGH_TX_FEE_PER_KB) {\n+        } else if (min_tx_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-mintxfee\") + Untranslated(\" \") +\n                                _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n-        walletInstance->m_min_fee = CFeeRate(n);\n+\n+        walletInstance->m_min_fee = CFeeRate{min_tx_fee.value()};\n     }\n \n     if (gArgs.IsArgSet(\"-maxapsfee\")) {\n         const std::string max_aps_fee{gArgs.GetArg(\"-maxapsfee\", \"\")};\n-        CAmount n = 0;\n         if (max_aps_fee == \"-1\") {\n-            n = -1;\n-        } else if (!ParseMoney(max_aps_fee, n)) {\n+            walletInstance->m_max_aps_fee = -1;\n+        } else if (std::optional<CAmount> max_fee = ParseMoney(max_aps_fee)) {\n+            if (max_fee.value() > HIGH_APS_FEE) {\n+                warnings.push_back(AmountHighWarn(\"-maxapsfee\") + Untranslated(\" \") +\n+                                  _(\"This is the maximum transaction fee you pay (in addition to the normal fee) to prioritize partial spend avoidance over regular coin selection.\"));\n+            }\n+            walletInstance->m_max_aps_fee = max_fee.value();\n+        } else {\n             error = AmountErrMsg(\"maxapsfee\", max_aps_fee);\n             return nullptr;\n         }\n-        if (n > HIGH_APS_FEE) {\n-            warnings.push_back(AmountHighWarn(\"-maxapsfee\") + Untranslated(\" \") +\n-                              _(\"This is the maximum transaction fee you pay (in addition to the normal fee) to prioritize partial spend avoidance over regular coin selection.\"));\n-        }\n-        walletInstance->m_max_aps_fee = n;\n     }\n \n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n+        std::optional<CAmount> fallback_fee = ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"));\n+        if (!fallback_fee) {\n             error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n-        }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        } else if (fallback_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-fallbackfee\") + Untranslated(\" \") +\n                                _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n-        walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n+        walletInstance->m_fallback_fee = CFeeRate{fallback_fee.value()};\n     }\n+\n     // Disable fallback fee in case value was set to 0, enable if non-null value\n     walletInstance->m_allow_fallback_fee = walletInstance->m_fallback_fee.GetFeePerK() != 0;\n \n     if (gArgs.IsArgSet(\"-discardfee\")) {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n+        std::optional<CAmount> discard_fee = ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"));\n+        if (!discard_fee) {\n             error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n-        }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        } else if (discard_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-discardfee\") + Untranslated(\" \") +\n                                _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n-        walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n+        walletInstance->m_discard_rate = CFeeRate{discard_fee.value()};\n     }\n+\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n+        std::optional<CAmount> pay_tx_fee = ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"));\n+        if (!pay_tx_fee) {\n             error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"));\n             return nullptr;\n-        }\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n+        } else if (pay_tx_fee.value() > HIGH_TX_FEE_PER_KB) {\n             warnings.push_back(AmountHighWarn(\"-paytxfee\") + Untranslated(\" \") +\n                                _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n-        walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n+\n+        walletInstance->m_pay_tx_fee = CFeeRate{pay_tx_fee.value(), 1000};\n+\n         if (chain && walletInstance->m_pay_tx_fee < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), chain->relayMinFee().ToString());\n@@ -2676,20 +2677,21 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::st\n     }\n \n     if (gArgs.IsArgSet(\"-maxtxfee\")) {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n+        std::optional<CAmount> max_fee = ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"));\n+        if (!max_fee) {\n             error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\"));\n             return nullptr;\n-        }\n-        if (nMaxFee > HIGH_MAX_TX_FEE) {\n+        } else if (max_fee.value() > HIGH_MAX_TX_FEE) {\n             warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n-        if (chain && CFeeRate(nMaxFee, 1000) < chain->relayMinFee()) {\n+\n+        if (chain && CFeeRate{max_fee.value(), 1000} < chain->relayMinFee()) {\n             error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n                 gArgs.GetArg(\"-maxtxfee\", \"\"), chain->relayMinFee().ToString());\n             return nullptr;\n         }\n-        walletInstance->m_default_max_tx_fee = nMaxFee;\n+\n+        walletInstance->m_default_max_tx_fee = max_fee.value();\n     }\n \n     if (chain && chain->relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {"
      }
    ]
  },
  {
    "sha": "f7752adba5dd35fccd3f2144cfcf03538ebf275b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzc1MmFkYmE1ZGQzNWZjY2QzZjIxNDRjZmNmMDM1MzhlYmYyNzVi",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-07-09T05:12:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-04T11:48:24Z"
      },
      "message": "util: check MoneyRange() inside ParseMoney()",
      "tree": {
        "sha": "deb01f8d53f0b85bf5cf35b6b045bd869c8eac02",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/deb01f8d53f0b85bf5cf35b6b045bd869c8eac02"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f7752adba5dd35fccd3f2144cfcf03538ebf275b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEKfogACgkQLuufXMCV\nJsGg/xAAmRopqcIcsZU+5ioyrcbVq2K8GpWw8R8V3Sb3w9VvP4/GYKGn1/mvx+Km\n8dL54l4lQBDZv1lES3eCRLyHYvMLb6NQjwKe8F1i7ymxJ+2XWAWAw0q/ykdaN6rB\nnp+L+/LjTTC0l18v3XqZy+bSDyVN+nnLmXYa8l7G6eZC59YB0XHwgNAH/p3d4xtz\n+RnEHNZ5msfgYWazML2oke0npnvYEzBUHn4FLJ/CYRG/9G4u56/BWhk5FaGWmdr2\n6D9ipGyH4R/JPtl0/PGE/nbX+Ymf0qpgLYv0UnhBvHtfvOd9Eky/FrVaGi+5m7mj\nr9DH3orp/el6h0Gd/p3nstaDGddZDh53QH2iaRUFXGv1NUBD0wMCYWBPZProBFTe\n3foNFlT+hxzVY7sy6snHj7gnCTnSP+Au0YbTsXPJp8AZXUUag8JRzIHfKZzxTqSF\nYZH8yjO8QkPJLSbgl03ZQ4ovVjQ4CwsgDv8D0yYBlpwWDs+0pyZcLJUZzkmUt5lC\nxJv2Q1X4xJep4CGnrn2jHqYSpvjMUmFDmEk5+RhzN/ueHD1vfTu3UctKsIX1aE8f\n6QT7eKlBjY+U2k+G6FiDr/Ddb/Ugd+mxV36HqR6KiKXdf+JwcJgE0HfAt3ykJ3Z/\npD6jXA4qyITeISZHu5MOYXJUcWM9Dbz+DsdAYiV4qezyCODE4f0=\n=JGg9\n-----END PGP SIGNATURE-----",
        "payload": "tree deb01f8d53f0b85bf5cf35b6b045bd869c8eac02\nparent 5ef2738089efd396186775ad23aaec71ea44ebb1\nauthor fanquake <fanquake@gmail.com> 1625807571 +0800\ncommitter fanquake <fanquake@gmail.com> 1628077704 +0800\n\nutil: check MoneyRange() inside ParseMoney()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7752adba5dd35fccd3f2144cfcf03538ebf275b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f7752adba5dd35fccd3f2144cfcf03538ebf275b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f7752adba5dd35fccd3f2144cfcf03538ebf275b/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5ef2738089efd396186775ad23aaec71ea44ebb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5ef2738089efd396186775ad23aaec71ea44ebb1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5ef2738089efd396186775ad23aaec71ea44ebb1"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4f9d10cf1d2407447a72c4f25735a6abcf73ca21",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7752adba5dd35fccd3f2144cfcf03538ebf275b/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7752adba5dd35fccd3f2144cfcf03538ebf275b/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=f7752adba5dd35fccd3f2144cfcf03538ebf275b",
        "patch": "@@ -1226,7 +1226,6 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n \n     BOOST_CHECK_EQUAL(ParseMoney(\"12345.6789\").value(), (COIN/10000)*123456789);\n \n-    BOOST_CHECK_EQUAL(ParseMoney(\"100000000.00\").value(), COIN*100000000);\n     BOOST_CHECK_EQUAL(ParseMoney(\"10000000.00\").value(), COIN*10000000);\n     BOOST_CHECK_EQUAL(ParseMoney(\"1000000.00\").value(), COIN*1000000);\n     BOOST_CHECK_EQUAL(ParseMoney(\"100000.00\").value(), COIN*100000);\n@@ -1252,6 +1251,7 @@ BOOST_AUTO_TEST_CASE(util_ParseMoney)\n     BOOST_CHECK_EQUAL(ParseMoney(\" 0.00000001\").value(), COIN/100000000);\n \n     // Parsing amount that can not be represented should fail\n+    BOOST_CHECK(!ParseMoney(\"100000000.00\"));\n     BOOST_CHECK(!ParseMoney(\"0.000000001\"));\n \n     // Parsing empty string should fail"
      },
      {
        "sha": "d3f40296079569fa02f256184e0f8010231b11a8",
        "filename": "src/util/moneystr.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f7752adba5dd35fccd3f2144cfcf03538ebf275b/src/util/moneystr.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f7752adba5dd35fccd3f2144cfcf03538ebf275b/src/util/moneystr.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/moneystr.cpp?ref=f7752adba5dd35fccd3f2144cfcf03538ebf275b",
        "patch": "@@ -81,5 +81,9 @@ std::optional<CAmount> ParseMoney(const std::string& money_string)\n \n     CAmount value = nWhole * COIN + nUnits;\n \n+    if (!MoneyRange(value)) {\n+        return std::nullopt;\n+    }\n+\n     return value;\n }"
      }
    ]
  }
]