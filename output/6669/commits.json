[
  {
    "sha": "6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjBlNjIyYzI1ZGRiYTY1NjE0OWRlMGY5ZjhiN2YyYTBhYTBkZWJh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-13T21:23:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-28T09:52:46Z"
      },
      "message": "[wallet] Refactor to use new MIN_CHANGE\n\n* Introduce new constant MIN_CHANGE and use it instead of the\nhardcoded \"CENT\"\n* Add test case for MIN_CHANGE\n* Introduce new constant for -mintxfee default:\n  DEFAULT_TRANSACTION_MINFEE = 1000",
      "tree": {
        "sha": "5e4f6bc4931e4d687174c742ec5cb3112755b261",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e4f6bc4931e4d687174c742ec5cb3112755b261"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0143a1f228c3447ae2e025c697b0ad53a0d8d306",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0143a1f228c3447ae2e025c697b0ad53a0d8d306",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0143a1f228c3447ae2e025c697b0ad53a0d8d306"
      }
    ],
    "stats": {
      "total": 141,
      "additions": 85,
      "deletions": 56
    },
    "files": [
      {
        "sha": "74bc8dbec9b7df1e6300bc572e3364425ddf0747",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -567,7 +567,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nChange -= nPayFee;\n \n             // Never create dust outputs; if we would, just add the dust to the fee.\n-            if (nChange > 0 && nChange < CENT)\n+            if (nChange > 0 && nChange < MIN_CHANGE)\n             {\n                 CTxOut txout(nChange, (CScript)std::vector<unsigned char>(24, 0));\n                 if (txout.IsDust(::minRelayTxFee))"
      },
      {
        "sha": "8b9292bd14d7f91a37298283182924263c1c2241",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 46,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -117,7 +117,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n         BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_GT(nValueRet, 34 * CENT);         // but should get more than 34 cents\n+        BOOST_CHECK_EQUAL(nValueRet, 35 * CENT);       // but 35 cents is closest\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n@@ -185,33 +185,34 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n-        // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance\n+        // empty the wallet and start again, now with fractions of a cent, to test small change avoidance\n+\n         empty_wallet();\n-        add_coin(0.1*CENT);\n-        add_coin(0.2*CENT);\n-        add_coin(0.3*CENT);\n-        add_coin(0.4*CENT);\n-        add_coin(0.5*CENT);\n-\n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 = 1.5 cents\n-        // we'll get sub-cent change whatever happens, so can expect 1.0 exactly\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);\n+        add_coin(0.1*MIN_CHANGE);\n+        add_coin(0.2*MIN_CHANGE);\n+        add_coin(0.3*MIN_CHANGE);\n+        add_coin(0.4*MIN_CHANGE);\n+        add_coin(0.5*MIN_CHANGE);\n+\n+        // try making 1 * MIN_CHANGE from the 1.5 * MIN_CHANGE\n+        // we'll get change smaller than MIN_CHANGE whatever happens, so can expect MIN_CHANGE exactly\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);\n \n-        // but if we add a bigger coin, making it possible to avoid sub-cent change, things change:\n-        add_coin(1111*CENT);\n+        // but if we add a bigger coin, small change is avoided\n+        add_coin(1111*MIN_CHANGE);\n \n-        // try making 1 cent from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // try making 1 from 0.1 + 0.2 + 0.3 + 0.4 + 0.5 + 1111 = 1112.5\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n-        // if we add more sub-cent coins:\n-        add_coin(0.6*CENT);\n-        add_coin(0.7*CENT);\n+        // if we add more small coins:\n+        add_coin(0.6*MIN_CHANGE);\n+        add_coin(0.7*MIN_CHANGE);\n \n-        // and try again to make 1.0 cents, we can still make 1.0 cents\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT); // we should get the exact amount\n+        // and try again to make 1.0 * MIN_CHANGE\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1 * MIN_CHANGE); // we should get the exact amount\n \n         // run the 'mtgox' test (see http://blockexplorer.com/tx/29a3efd3ef04f9153d47a990bd7b048a4b2d213daaa5fb8ed670fb85f13bdbcf)\n         // they tried to consolidate 10 50k coins into one 500k coin, and ended up with 50k in change\n@@ -223,45 +224,65 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n-        // if there's not enough in the smaller coins to make at least 1 cent change (0.5+0.6+0.7 < 1.0+1.0),\n+        // if there's not enough in the smaller coins to make at least 1 * MIN_CHANGE change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n \n         // sometimes it will fail, and so we use the next biggest coin:\n         empty_wallet();\n-        add_coin(0.5 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.7 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1111 * CENT); // we get the bigger coin\n+        add_coin(0.5 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.7 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 1111 * MIN_CHANGE); // we get the bigger coin\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n-        add_coin(0.4 * CENT);\n-        add_coin(0.6 * CENT);\n-        add_coin(0.8 * CENT);\n-        add_coin(1111 * CENT);\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);   // we should get the exact amount\n+        add_coin(0.4 * MIN_CHANGE);\n+        add_coin(0.6 * MIN_CHANGE);\n+        add_coin(0.8 * MIN_CHANGE);\n+        add_coin(1111 * MIN_CHANGE);\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, MIN_CHANGE);   // we should get the exact amount\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n-        // test avoiding sub-cent change\n+        // test avoiding small change\n         empty_wallet();\n-        add_coin(0.0005 * COIN);\n-        add_coin(0.01 * COIN);\n-        add_coin(1 * COIN);\n+        add_coin(0.05 * MIN_CHANGE);\n+        add_coin(1    * MIN_CHANGE);\n+        add_coin(100  * MIN_CHANGE);\n \n-        // trying to make 1.0001 from these three coins\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(1.0001 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.0105 * COIN);   // we should get all coins\n+        // trying to make 100.01 from these three coins\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(100.01 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101.05 * MIN_CHANGE);   // we should get all coins\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n-        // but if we try to make 0.999, we should take the bigger of the two small coins to avoid sub-cent change\n-        BOOST_CHECK( wallet.SelectCoinsMinConf(0.999 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n-        BOOST_CHECK_EQUAL(nValueRet, 1.01 * COIN);   // we should get 1 + 0.01\n+        // but if we try to make 99.9, we should take the bigger of the two small coins to avoid small change\n+        BOOST_CHECK( wallet.SelectCoinsMinConf(99.9 * MIN_CHANGE, 1, 1, vCoins, setCoinsRet, nValueRet));\n+        BOOST_CHECK_EQUAL(nValueRet, 101 * MIN_CHANGE);\n         BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n+        // test with many inputs\n+        for (CAmount amt=1500; amt < COIN; amt*=10) {\n+             empty_wallet();\n+             // Create 676 inputs (= MAX_STANDARD_TX_SIZE / 148 bytes per input)\n+             for (uint16_t j = 0; j < 676; j++)\n+                 add_coin(amt);\n+             BOOST_CHECK(wallet.SelectCoinsMinConf(2000, 1, 1, vCoins, setCoinsRet, nValueRet));\n+             if (amt - 2000 < MIN_CHANGE) {\n+                 // needs more than one input:\n+                 uint16_t returnSize = std::ceil((2000.0 + MIN_CHANGE)/amt);\n+                 CAmount returnValue = amt * returnSize;\n+                 BOOST_CHECK_EQUAL(nValueRet, returnValue);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), returnSize);\n+             } else {\n+                 // one input is sufficient:\n+                 BOOST_CHECK_EQUAL(nValueRet, amt);\n+                 BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n+             }\n+        }\n+\n         // test randomness\n         {\n             empty_wallet();"
      },
      {
        "sha": "2414532f7539243e2fd135b758226709f03d78c7",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -47,7 +47,7 @@ bool fPayAtLeastCustomFee = true;\n  * Fees smaller than this (in satoshi) are considered zero fee (for transaction creation)\n  * Override with -mintxfee\n  */\n-CFeeRate CWallet::minTxFee = CFeeRate(1000);\n+CFeeRate CWallet::minTxFee = CFeeRate(DEFAULT_TRANSACTION_MINFEE);\n \n /** @defgroup mapWallet\n  *\n@@ -1498,9 +1498,6 @@ CAmount CWallet::GetImmatureWatchOnlyBalance() const\n     return nTotal;\n }\n \n-/**\n- * populate vCoins with vector of available COutputs.\n- */\n void CWallet::AvailableCoins(vector<COutput>& vCoins, bool fOnlyConfirmed, const CCoinControl *coinControl, bool fIncludeZeroValue) const\n {\n     vCoins.clear();\n@@ -1620,7 +1617,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n             nValueRet += coin.first;\n             return true;\n         }\n-        else if (n < nTargetValue + CENT)\n+        else if (n < nTargetValue + MIN_CHANGE)\n         {\n             vValue.push_back(coin);\n             nTotalLower += n;\n@@ -1655,14 +1652,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int\n     vector<char> vfBest;\n     CAmount nBest;\n \n-    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest, 1000);\n-    if (nBest != nTargetValue && nTotalLower >= nTargetValue + CENT)\n-        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + CENT, vfBest, nBest, 1000);\n+    ApproximateBestSubset(vValue, nTotalLower, nTargetValue, vfBest, nBest);\n+    if (nBest != nTargetValue && nTotalLower >= nTargetValue + MIN_CHANGE)\n+        ApproximateBestSubset(vValue, nTotalLower, nTargetValue + MIN_CHANGE, vfBest, nBest);\n \n     // If we have a bigger coin and (either the stochastic approximation didn't find a good solution,\n     //                                   or the next bigger coin is closer), return the bigger coin\n     if (coinLowestLarger.second.first &&\n-        ((nBest != nTargetValue && nBest < nTargetValue + CENT) || coinLowestLarger.first <= nBest))\n+        ((nBest != nTargetValue && nBest < nTargetValue + MIN_CHANGE) || coinLowestLarger.first <= nBest))\n     {\n         setCoinsRet.insert(coinLowestLarger.second);\n         nValueRet += coinLowestLarger.first;"
      },
      {
        "sha": "143ca22bdcd2f61c842e2a457fd8ef7367a7b46d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "patch": "@@ -41,8 +41,12 @@ extern bool fPayAtLeastCustomFee;\n static const CAmount DEFAULT_TRANSACTION_FEE = 0;\n //! -paytxfee will warn if called with a higher fee than this amount (in satoshis) per KB\n static const CAmount nHighTransactionFeeWarning = 0.01 * COIN;\n+//! -mintxfee default\n+static const CAmount DEFAULT_TRANSACTION_MINFEE = 1000;\n //! -maxtxfee default\n static const CAmount DEFAULT_TRANSACTION_MAXFEE = 0.1 * COIN;\n+//! minimum change amount\n+static const CAmount MIN_CHANGE = CENT;\n //! -txconfirmtarget default\n static const unsigned int DEFAULT_TX_CONFIRM_TARGET = 2;\n //! -maxtxfee will warn if called with a higher fee than this amount (in satoshis)\n@@ -544,7 +548,14 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! check whether we are allowed to upgrade (or already support) to the named feature\n     bool CanSupportFeature(enum WalletFeature wf) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n+    /**\n+     * populate vCoins with vector of available COutputs.\n+     */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+    /**\n+     * Select coins until nTargetValue is reached. Return the actual value\n+     * and the corresponding coin set.\n+     */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n     bool IsSpent(const uint256& hash, unsigned int n) const;"
      }
    ]
  },
  {
    "sha": "a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphOWM3M2ExMzBlYmYyMzY5MzgxMjQxZDAwNTNjOGZhMGEzMDFlMGZj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-09-14T12:49:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-28T10:15:48Z"
      },
      "message": "[wallet] Add comments for doxygen",
      "tree": {
        "sha": "90a453e9451ee7b35ecf0d59c34b01491fce977b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/90a453e9451ee7b35ecf0d59c34b01491fce977b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b0e622c25ddba656149de0f9f8b7f2a0aa0deba"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 21,
      "deletions": 2
    },
    "files": [
      {
        "sha": "4e05f519cc2b0f626d728028cf2ad6ee15ad65d3",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "patch": "@@ -1842,6 +1842,7 @@ bool CWallet::CreateTransaction(const vector<CRecipient>& vecSend, CWalletTx& wt\n         LOCK2(cs_main, cs_wallet);\n         {\n             nFeeRet = 0;\n+            // Start with no fee and loop until there is enough fee\n             while (true)\n             {\n                 txNew.vin.clear();"
      },
      {
        "sha": "cb2c09b8923b853b2d6ece42f574891706c1a01a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 20,
        "deletions": 2,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a9c73a130ebf2369381241d0053c8fa0a301e0fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "patch": "@@ -451,6 +451,11 @@ class CWalletKey\n class CWallet : public CCryptoKeyStore, public CValidationInterface\n {\n private:\n+    /**\n+     * Select a set of coins such that nValueRet >= nTargetValue and at least\n+     * all coins from coinControl are selected; Never select unconfirmed coins\n+     * if they are not ours\n+     */\n     bool SelectCoins(const CAmount& nTargetValue, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet, const CCoinControl *coinControl = NULL) const;\n \n     CWalletDB *pwalletdbEncryption;\n@@ -552,9 +557,12 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n      * populate vCoins with vector of available COutputs.\n      */\n     void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlyConfirmed=true, const CCoinControl *coinControl = NULL, bool fIncludeZeroValue=false) const;\n+\n     /**\n-     * Select coins until nTargetValue is reached. Return the actual value\n-     * and the corresponding coin set.\n+     * Shuffle and select coins until nTargetValue is reached while avoiding\n+     * small change; This method is stochastic for some inputs and upon\n+     * completion the coin set and corresponding actual target value is\n+     * assembled\n      */\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, int nConfMine, int nConfTheirs, std::vector<COutput> vCoins, std::set<std::pair<const CWalletTx*,unsigned int> >& setCoinsRet, CAmount& nValueRet) const;\n \n@@ -638,7 +646,17 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     CAmount GetWatchOnlyBalance() const;\n     CAmount GetUnconfirmedWatchOnlyBalance() const;\n     CAmount GetImmatureWatchOnlyBalance() const;\n+\n+    /**\n+     * Insert additional inputs into the transaction by\n+     * calling CreateTransaction();\n+     */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosRet, std::string& strFailReason, bool includeWatching);\n+\n+    /**\n+     * Create a new transaction paying the recipients with a set of coins\n+     * selected by SelectCoins(); Also create the change output, when needed\n+     */\n     bool CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet, int& nChangePosRet,\n                            std::string& strFailReason, const CCoinControl *coinControl = NULL, bool sign = true);\n     bool CommitTransaction(CWalletTx& wtxNew, CReserveKey& reservekey);"
      }
    ]
  },
  {
    "sha": "6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzQyYTQ4ODliYzRhZGQ0MmMyNzBlMWUwYWVlMjQ2YTdmMDY5MmRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T15:52:40Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2015-10-29T15:52:40Z"
      },
      "message": "Init: Use DEFAULT_TRANSACTION_MINFEE in help message",
      "tree": {
        "sha": "31f04f5dba3b802ad901aac945c08af538f76f9b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/31f04f5dba3b802ad901aac945c08af538f76f9b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6342a4889bc4add42c270e1e0aee246a7f0692dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6342a4889bc4add42c270e1e0aee246a7f0692dc/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a9c73a130ebf2369381241d0053c8fa0a301e0fc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a9c73a130ebf2369381241d0053c8fa0a301e0fc"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "48680edc2428e7f0d0b8e503a42c29145e0c1ef4",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6342a4889bc4add42c270e1e0aee246a7f0692dc/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6342a4889bc4add42c270e1e0aee246a7f0692dc/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6342a4889bc4add42c270e1e0aee246a7f0692dc",
        "patch": "@@ -374,7 +374,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (showDebug)\n         strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\",\n-            CURRENCY_UNIT, FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n     strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n         CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n     strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));"
      }
    ]
  }
]