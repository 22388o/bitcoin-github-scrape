icota,2020-05-16 13:16:54,"Exciting stuff but I question the logic of there being a framework just for ""alternatives"". Shouldn't ipv4/6 and onion be one of many drivers with their own capabilities and trustworthiness?\n\nMore work initially but probably easier maintenance down the road and a guarantee that any type of  smoke signal protocol driver could be a first-class citizen like ip.\n\nConcept NACK for not being amb",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629644207,629644207,
DrahtBot,2020-05-16 17:52:34,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n* #16365 (Log RPC parameters (arguments) if -debug=rpcparams b",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629683305,629683305,
ariard,2020-05-17 00:08:09,"@TheBlueMatt what's about a thread pool for every blocking alternative and a `CDriver::IsReady` when we try to read from it ? Have you in mind other alternative which needs a really specific threading model ? That's a bit more complexity but you may allocate priority to avoid starvation.\n\nI agree that the `mapNodeState` isn't great and ideally you do want to defer every peer policy to the driv",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-629722377,629722377,
willcl-ark,2020-05-18 08:20:24,"Hello @ariard pluggable alternative transport systems for Bitcoin Core gets a concept ACK from me.\n\nI wonder if in the future this framework could include some transport prioritisation which might, for example, relay blocks over an internet/Tor connection but attempt to broadcast and relay transactions over Amateur radio/bluetooth (as available) with a new Tor circuit as a fallback, to further",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630023966,630023966,
remyers,2020-05-18 09:53:15,"I love this concept! I will need some more time to have implementation comments, but will try to think about this in the context of the alt net I'm most familiar with (stateless unlicensed UHF Mesh / goTenna). Some preliminary big picture thoughts:\n\n 1) should the Watchdog functionality eventually be broken out as its own RFC? even without an altnet transport wouldn't a core wallet also want n",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630075496,630075496,
MarcoFalke,2020-05-18 12:36:18,"Concept ACK, but I am wondering if some of this would be better off outside the Bitcoin Core build system. Obviously stuff that can be done with no additional requirements (additional requirements could be a proxy, another daemon or even new hardware like an antenna) and that is a clear benefit to Bitcoin Core can live inside of Bitcoin Core. For example something like the existing `TipMayBeStale`",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630153460,630153460,
ariard,2020-05-19 06:48:04,"Hi @willcl-ark,\n\n> I wonder if in the future this framework could include some transport prioritisation which might, for example, relay blocks over an internet/Tor connection but attempt to broadcast and relay transactions over Amateur radio/bluetooth (as available) with a new Tor circuit as a fallback, to further obscure a transactions origin.\n\nYes introducing drivers capabilities (`fHead",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630619829,630619829,
ariard,2020-05-19 07:17:35,"@remyers \n\n> should the Watchdog functionality eventually be broken out Do you envision a plugin-driver model so that core would support the high level CDriver/Watchdog, but people could plug-in their own low-level implementations?\n3a) In the case of goTenna, we have a low-level C driver that is not open source so would not be appropriate to include in core. Would something like the HWI syst",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630632988,630632988,
ariard,2020-05-19 07:36:58,"> However, for transports that would pull in additional dependencies, a more flexible approach would be to define a common interface.\n\nYes that's the idea defining a `CDriver` interface, even if it needs refinement. `drivers/` should be elsewhere and you just keep the fetching logic/interface in Core. I don't think drivers should ask for raw validation data on their own, i.e you may receive yo",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-630643033,630643033,
TheBlueMatt,2020-05-21 19:24:56,"> but I am wondering if some of this would be better off outside the Bitcoin Core build system.\n\n@MarcoFalke sadly, such a design kicks something out to live in purgatory forever. We've never materially seen any real adoption of ""additional, on the side"" contrib things. Even opt-in configuration is rarely used, let alone something with additional setup requirements. I don't think this carries ",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632297532,632297532,
TheBlueMatt,2020-05-21 19:27:32,"> @TheBlueMatt what's about a thread pool for every blocking alternative and a CDriver::IsReady when we try to read from it ? Have you in mind other alternative which needs a really specific threading model ? That's a bit more complexity but you may allocate priority to avoid starvation.\n\nI don't know that the framework even needs to provide any kind of threading? Why not let the applications ",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632298835,632298835,
ryanofsky,2020-05-22 15:07:41,"I'm starting to look at this and my first impressions are basically the things Matt's saying: that the API for transports can probably be very minimal and not deal with threading, and not interact with (or duplicate and fork) existing net_processing and net code.\n\nA real anomaly detection implementation, on the other hand, may need to have access to more things, but hopefully that could happen",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-632742644,632742644,
DrahtBot,2020-05-23 12:05:56,<!--cf906140f33d8803c4a75a2196329ecb-->\n🐙 This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).,https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-633038609,633038609,
ariard,2020-05-27 07:21:04,"> Using the net.h stuff like NetMsgType, CBlockLocator, NetMsgMaker and the connection types really limits the utility here. eg radio stuff probably wants to read/write from a tty, not a ""real socket"". Let alone something like DNS which doesn't even have a file descriptor, only a libc call to poll.\n\nI think message translation from a wire format suiting communication channel should be done by ",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634477797,634477797,
ariard,2020-05-27 07:33:35,"Thanks @ryanofsky for review !\n\n> and not interact with (or duplicate and fork) existing net_processing and net code.\n\nRight, what are all the reasons between net_processing and net code separation ?\n\n> A real anomaly detection implementation, on the other hand, may need to have access to more things, but hopefully that could happen more by passively receiving events than actively look",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634483858,634483858,
luisan00,2020-05-27 16:26:51,"> Concept ACK, but I am wondering if some of this would be better off outside the Bitcoin Core build system. ...\n\nTotally agree.\nIn principle could be better as a separate project. It seems interesting but as you say, a common interface can help in this particular, separating transport logic from the Bitcoin Core logic.\n\nI like the idea and will think carefully the next days in the conte",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-634781514,634781514,
icota,2020-05-30 00:58:51,"> Do you have in mind a different ipv4/ipv6 flow that the one implemented by main net ? Path-aware routing could be cool and definitely something belonging there.\n\nMy point is that rather than making a separate framework I would prefer to change `net` to support the functionality you are suggesting for AltNet. \n\nLook at what I am greeted with when I run `getnetworkinfo`:\n```\n""networks""",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-636250801,636250801,
ariard,2020-06-01 01:17:40,"@icota \n\n> My point is that rather than making a separate framework I would prefer to change net to support the functionality you are suggesting for AltNet.\n\nI spend some time thinking to integrate this in our currently net/net_processing.\n\nWith regards to net you need to abstract any socket operation behind some interface, make peer stateful to know which stack they are relying on and",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-636565041,636565041,
Ayms,2020-06-11 10:36:46,"I am not expert at all with bitcoin code so I don't know what approach could be the best\n\nBut let's take another network example, IPFS, despite of their efforts (ie libp2p) it is not so simple to plug ""other codebase"" to the system, see  ``https://github.com/ipfs/ipfs/issues/439#issuecomment-593116241``, even with the same techno\n\nAnd as we can see the codebase I am referring too here is h",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-642561533,642561533,
ryanofsky,2020-06-11 15:20:51,"re: https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-642561533\n\n> Yes it's a bit ugly but I don't see other way today without using a localhost/socks, which I don't want, even if suppported, for sure it would be better to pipe directly\n\nNot completely sure about the context but 52192725a3ec1f814cf40049de45efffc226cd5b from #19160 is an example showing how to spawn a new process a",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-642731876,642731876,
icota,2020-06-11 16:19:50,"I almost forgot since it was some time ago but in c-lightning we added local socket (`AF_UNIX`) support (https://github.com/ElementsProject/lightning/pull/1323, https://github.com/ElementsProject/lightning/pull/1450) and with a couple of processes in between I ran the protocol over NFC.\n\nPipes and sockets approach can support a lot (but not all) of ""alternative transport"" use cases and seems l",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-642785282,642785282,
ariard,2020-06-17 20:45:04,"@icota \n\n> Pipes and sockets approach can support a lot (but not all) of ""alternative transport"" use cases and seems like low hanging fruit. It is definitely something to consider.\n\nAfter reviewing Russ PR (#19160), you can reuse process spawning and ipc framework to let communicate between a `bitcoin-node` and `bitcoin-altnet` one. And then again it could be reused to let `bitcoin-altnet`",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-645614972,645614972,
ariard,2020-06-17 20:53:21,"@Ayms \n\n> Yes it's a bit ugly but I don't see other way today without using a localhost/socks, which I don't want, even if suppported, for sure it would be better to pipe directly to the nodejs module (is there a way to do unix pipe today for some potential testing ?)\n\nWhat issue do you have with sockets ? Let's envision this setup : `bitcoin-node <-> bitcoin-altnet <-> tor-driver <-> node",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-645618706,645618706,
icota,2020-06-18 15:17:52,"> Pipes and sockets seems to me suited for ""internal"" communications between our collections of processes, not mandatory for talking with external, or do you see things differently ?\n\nWhen I wrote the comment I wasn't aware that @laanwj already attempted what I had in mind in https://github.com/bitcoin/bitcoin/pull/9979. The idea was that (in addition to AltNet that you are building) having P2",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646089400,646089400,
Ayms,2020-06-18 23:06:55,"@ariard , no real issue with sockets and (as you write) it should better be ``bitcoin <-> node-Tor`` and not ``bitcoin -> node-Tor -> bitcoin`` (basic stdin/stdout), I was talking about unix sockets in my previous message (which I assimilated to unix pipe in terms of wording) and not inter unix processes pipes \n\nI would just modify ``bitcoin-node <-> bitcoin-altnet <-> tor-driver <-> node-tor`",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646348599,646348599,
ryanofsky,2020-06-19 00:08:53,"> @ryanofsky , thanks for all the links, I will look at it in more details when I need it but it still looks a bit complicate, for simple testing, is there a simple way (modif in the bitcoin core code) to redirect/listen the bitcoin protocol via stdin/stdout?\n\nWith #10102 you could start unmodified bitcoin-node or bitcoin-wallet binaries via [socat](http://www.dest-unreach.org/socat/) if you w",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646365336,646365336,
Ayms,2020-06-19 10:35:28,"What I want to do is:\n\n	bitcoin | node-Tor | bitcoin via stdin/stdout or bitcoin <-> node-Tor via unix sockets\n			|\n		send/receive\n		via Tor or\n		node-Tor nodes\n			|\n		optional: node-Tor RDV point\n			|\n		node-Tor or Tor nodes\n			|\n		bitcoin node via Tor exit node\n			or\n		bitcoin <-> node-Tor process\n\nThis is one phase of some funding proposals for the more global Co",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646564853,646564853,
ryanofsky,2020-06-19 12:47:53,"> What I want to do is:\n> \n> ```\n> bitcoin | node-Tor | bitcoin via stdin/stdout or bitcoin <-> node-Tor via unix sockets\n> ```\n\nThis is really interesting. Maybe it would be good to create a specific issue to discuss this here or in the node-Tor github repo.\n\nIf I were trying to connect bitcoind <--> node-Tor, I think the simplest approach to start with would be to get existing bi",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646616999,646616999,
Ayms,2020-06-19 16:03:36,">This is really interesting. Maybe it would be good to create a specific issue to discuss this here or in the node-Tor github repo.\n\nThanks, probably @ariard can tell us if this discussion should be moved to other places, I don't find it uninteresting to compare the different approaches\n\nnode-Tor does support the socks interface since the very beginning but I don't see the point of using a",https://github.com/bitcoin/bitcoin/pull/18988#issuecomment-646713939,646713939,
TheBlueMatt,2020-05-16 20:27:48,I think this should be way more disconnected from the existing P2P stack. Accessing anything but validation.h and some utils seems bad.,https://github.com/bitcoin/bitcoin/pull/18988#discussion_r426188237,426188237,src/altnet.h
