[
  {
    "sha": "816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MTZmNTBmNGIxMmUyMGIzMTA2YzI1NGFiNTJiN2NjNmU3NjVhYTk4",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T05:40:06Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:51:57Z"
      },
      "message": "[watchdog] Introduce CWatchdog class\n\nCWatchdog is a cross-layer anomalies detection module aims to\ncover block issuance, peer management, local clock or net level.\n\nIf any anomalie is detected an event is triggered to inform an\napplication layer or any internal consumer of a future watchdog\ninterface.\n\nThis code is only integrated in next commit.",
      "tree": {
        "sha": "10c29b9df2bb12148012648fd8d78884722030e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/10c29b9df2bb12148012648fd8d78884722030e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7a5767423f3757e876fbcb0f4ffb534172dd734d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7a5767423f3757e876fbcb0f4ffb534172dd734d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7a5767423f3757e876fbcb0f4ffb534172dd734d"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bd227f247ec48da2d3cb1eda3e2bd772b061a5a1",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -250,6 +250,7 @@ BITCOIN_CORE_H = \\\n   wallet/walletutil.h \\\n   wallet/coinselection.h \\\n   warnings.h \\\n+  watchdog.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -317,6 +318,7 @@ libbitcoin_server_a_SOURCES = \\\n   validation.cpp \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n+  watchdog.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "5b865db4b76137417be696b94616dddfddd2ed45",
        "filename": "src/watchdog.cpp",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.cpp?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <watchdog.h>\n+\n+#include <util/time.h>\n+\n+CWatchdog::CWatchdog()\n+{\n+    nLastHeader = 0;\n+}\n+\n+CWatchdog::~CWatchdog() {}\n+\n+void CWatchdog::ScanAnomalies()\n+{\n+}\n+\n+void CWatchdog::LogHeader(const std::vector<CBlockHeader>& block)\n+{\n+    nLastHeader = GetTime();\n+}"
      },
      {
        "sha": "68154d2f5e013268407b4c04cc757a9d2fb034b3",
        "filename": "src/watchdog.h",
        "status": "added",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/816f50f4b12e20b3106c254ab52b7cc6e765aa98/src/watchdog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.h?ref=816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "patch": "@@ -0,0 +1,26 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WATCHDOG_H\n+#define BITCOIN_WATCHDOG_H\n+\n+#include <primitives/block.h>\n+#include <stdint.h>\n+\n+class CWatchdog\n+{\n+public:\n+    ~CWatchdog();\n+    CWatchdog();\n+    //! Launch scan of block issuance or network anomalies\n+    //! This is periodically called by scheduler.\n+    void ScanAnomalies();\n+    //! Log header to detect block issuance anomalies.\n+    void LogHeader(const std::vector<CBlockHeader>& block);\n+private:\n+    //! Last time header has been logged.\n+    int64_t nLastHeader;\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNGMzOTJhZTA4MGIxMGE2OTk3ZmFmN2Q2ZDM3OGZjYTk4OTdiOGY3",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T07:40:29Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:53:46Z"
      },
      "message": "[watchdoginterface] Introduce CWatchdogInterface class\n\nCWatchdogInterface is consumed by another module or application\nwillingly to take corrective actions based on anomalies detected.\n\nCWatchdogInterface only callback is BlockHeaderAnomalies, meaning\nblock header aren't received at a normal rate modulo block variance.",
      "tree": {
        "sha": "d658c77ecc6b5ab92389bc0b6ccd740c0d83776b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d658c77ecc6b5ab92389bc0b6ccd740c0d83776b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/14c392ae080b10a6997faf7d6d378fca9897b8f7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/816f50f4b12e20b3106c254ab52b7cc6e765aa98",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/816f50f4b12e20b3106c254ab52b7cc6e765aa98"
      }
    ],
    "stats": {
      "total": 189,
      "additions": 189,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f9ff48cad3f99a9bcdc5701d48f0350e660376d8",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -251,6 +251,7 @@ BITCOIN_CORE_H = \\\n   wallet/coinselection.h \\\n   warnings.h \\\n   watchdog.h \\\n+  watchdoginterface.h \\\n   zmq/zmqabstractnotifier.h \\\n   zmq/zmqconfig.h\\\n   zmq/zmqnotificationinterface.h \\\n@@ -319,6 +320,7 @@ libbitcoin_server_a_SOURCES = \\\n   validationinterface.cpp \\\n   versionbits.cpp \\\n   watchdog.cpp \\\n+  watchdoginterface.cpp \\\n   $(BITCOIN_CORE_H)\n \n if ENABLE_WALLET"
      },
      {
        "sha": "4e547f16f5e84b976c979138014ba092cf4cc81e",
        "filename": "src/watchdog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.cpp?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -5,6 +5,7 @@\n #include <watchdog.h>\n \n #include <util/time.h>\n+#include <watchdoginterface.h>\n \n CWatchdog::CWatchdog()\n {\n@@ -15,6 +16,7 @@ CWatchdog::~CWatchdog() {}\n \n void CWatchdog::ScanAnomalies()\n {\n+    GetWatchSignals().BlockHeaderAnomalie();\n }\n \n void CWatchdog::LogHeader(const std::vector<CBlockHeader>& block)"
      },
      {
        "sha": "e82e573dee5ff8206292bc5330821427d176aa3f",
        "filename": "src/watchdoginterface.cpp",
        "status": "added",
        "additions": 125,
        "deletions": 0,
        "changes": 125,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdoginterface.cpp?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -0,0 +1,125 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <watchdoginterface.h>\n+\n+#include <scheduler.h>\n+#include <logging.h>\n+\n+#include <future>\n+#include <unordered_map>\n+#include <utility>\n+\n+struct WatchSignalsInstance {\n+private:\n+    Mutex m_mutex;\n+    //! List entries consist of a callback pointer and reference count. The\n+    //! count is equal to the number of current executions of that entry, plus 1\n+    //! if it's registered. It cannot be 0 because that would imply it is\n+    //! unregistered and also not being executed (so shouldn't exist).\n+    struct ListEntry { std::shared_ptr<CWatchdogInterface> callbacks; int count = 1; };\n+    std::list<ListEntry> m_list GUARDED_BY(m_mutex);\n+    std::unordered_map<CWatchdogInterface*, std::list<ListEntry>::iterator> m_map GUARDED_BY(m_mutex);\n+\n+public:\n+    // We are not allowed to assume the scheduler only runs in one thread,\n+    // but must ensure all callbacks happen in-order, so we end up creating\n+    // our own queue here :(\n+    SingleThreadedSchedulerClient m_schedulerClient;\n+\n+    explicit WatchSignalsInstance(CScheduler *pscheduler) : m_schedulerClient(pscheduler) {}\n+\n+    void Register(std::shared_ptr<CWatchdogInterface> callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto inserted = m_map.emplace(callbacks.get(), m_list.end());\n+        if (inserted.second) inserted.first->second = m_list.emplace(m_list.end());\n+        inserted.first->second->callbacks = std::move(callbacks);\n+    }\n+\n+    void Unregister(CWatchdogInterface* callbacks)\n+    {\n+        LOCK(m_mutex);\n+        auto it = m_map.find(callbacks);\n+        if (it != m_map.end()) {\n+            if (!--it->second->count) m_list.erase(it->second);\n+            m_map.erase(it);\n+        }\n+    }\n+\n+    //! Clear unregisters every previously registered callback, erasing every\n+    //! map entry. After this call, the list may still contain callbacks that\n+    //! are currently executing, but it will be cleared when they are done\n+    //! executing.\n+    void Clear()\n+    {\n+        LOCK(m_mutex);\n+        for (const auto& entry : m_map) {\n+            if (!--entry.second->count) m_list.erase(entry.second);\n+        }\n+        m_map.clear();\n+    }\n+\n+    template<typename F> void Iterate(F&& f)\n+    {\n+        WAIT_LOCK(m_mutex, lock);\n+        for (auto it = m_list.begin(); it != m_list.end();) {\n+            ++it->count;\n+            {\n+                REVERSE_LOCK(lock);\n+                f(*it->callbacks);\n+            }\n+            it = --it->count ? std::next(it) : m_list.erase(it);\n+        }\n+    }\n+};\n+\n+static CWatchSignals g_watch_signals;\n+\n+void CWatchSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+    assert(!m_internals);\n+    m_internals.reset(new WatchSignalsInstance(&scheduler));\n+}\n+\n+void CWatchSignals::UnregisterBackgroundSignalScheduler() {\n+    m_internals.reset(nullptr);\n+}\n+\n+void CWatchSignals::FlushBackgroundCallbacks() {\n+    if (m_internals) {\n+        m_internals->m_schedulerClient.EmptyQueue();\n+    }\n+}\n+\n+size_t CWatchSignals::CallbacksPending() {\n+    if (!m_internals) return 0;\n+    return m_internals->m_schedulerClient.CallbacksPending();\n+}\n+\n+CWatchSignals& GetWatchSignals()\n+{\n+    return g_watch_signals;\n+}\n+\n+void RegisterSharedWatchdogInterface(std::shared_ptr<CWatchdogInterface> callback) {\n+    // Each connection captures pwalletIn to ensure that each callback is\n+    // executed before pwalletIn is destroyed. For more details see #18338.\n+    g_watch_signals.m_internals->Register(std::move(callback));\n+}\n+\n+void RegisterWatchdogInterface(CWatchdogInterface* callbacks)\n+{\n+    // Create a shared_ptr with a no-op deleter - CValidationInterface lifecycle\n+    // is managed by the caller.\n+    RegisterSharedWatchdogInterface({callbacks, [](CWatchdogInterface*){}});\n+}\n+\n+void CWatchSignals::BlockHeaderAnomalie() {\n+    auto event = [this] {\n+        m_internals->Iterate([&](CWatchdogInterface& callbacks) { callbacks.BlockHeaderAnomalie(); });\n+    };\n+    m_internals->m_schedulerClient.AddToProcessQueue([=] {\n+        event();\n+    });\n+}"
      },
      {
        "sha": "a1a0aa962027379915adfbfe3a01ece826b560fe",
        "filename": "src/watchdoginterface.h",
        "status": "added",
        "additions": 60,
        "deletions": 0,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/14c392ae080b10a6997faf7d6d378fca9897b8f7/src/watchdoginterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdoginterface.h?ref=14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "patch": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WATCHDOGINTERFACE_H\n+#define BITCOIN_WATCHDOGINTERFACE_H\n+\n+#include <validationinterface.h>\n+\n+class CWatchdogInterface;\n+\n+/** Register a wallet to receive updates from core */\n+void RegisterWatchdogInterface(CWatchdogInterface* callback);\n+\n+/**\n+ * Implement this to subscribe to events generated in watchdog\n+ *\n+ * Each CWatchdogInterface() subscriber will receive event callbacks\n+ * in the order in which the events were generated by watchdog.\n+ *\n+*/\n+class CWatchdogInterface {\n+protected:\n+    /**\n+     * Protected destructor so that instances can only be deleted by derived classes.\n+     * If that restriction is no longer desired, this should be made public and virtual.\n+     */\n+    ~CWatchdogInterface() = default;\n+    /**\n+     * Notifies listeners a block header have been detected.\n+     *\n+     * Called on a background thread.\n+     */\n+    virtual void BlockHeaderAnomalie() {}\n+    friend class CWatchSignals;\n+};\n+\n+struct WatchSignalsInstance;\n+class CWatchSignals {\n+private:\n+    std::unique_ptr<WatchSignalsInstance> m_internals;\n+\n+    friend void ::RegisterSharedWatchdogInterface(std::shared_ptr<CWatchdogInterface>);\n+\n+public:\n+    /** Register a CScheduler to give callbacks which should run in the background (may only be called once) */\n+    void RegisterBackgroundSignalScheduler(CScheduler& scheduler);\n+    /** Unregister a CScheduler to give callbacks which should run in the background - these callbacks will now be dropped! */\n+    void UnregisterBackgroundSignalScheduler();\n+    /** Call any remaining callbacks on the calling thread */\n+    void FlushBackgroundCallbacks();\n+\n+    size_t CallbacksPending();\n+\n+    void BlockHeaderAnomalie();\n+};\n+\n+CWatchSignals& GetWatchSignals();\n+\n+#endif // BITCOIN_WATCHDOGINTERFACE_H"
      }
    ]
  },
  {
    "sha": "fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmY2FmZTU3ODdmNWQ5MGJmZjE4MmEwMWQ3ZDFkOWUyNDJkMWNlNzc2",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T06:12:08Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:54:21Z"
      },
      "message": "[init] Integrate CWatchdog and its interface in init sequence\n\nCWatchdog is integrated in NodeContext to make it accessible to any\nfutute rpc calls. Some application may fine-tune watchdog according\nto their requirements.\n\nThis code is not scheduled yet.",
      "tree": {
        "sha": "bb2a4dfefa5df1918049bfed0416cb38a38828be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb2a4dfefa5df1918049bfed0416cb38a38828be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/14c392ae080b10a6997faf7d6d378fca9897b8f7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/14c392ae080b10a6997faf7d6d378fca9897b8f7"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "46cf8c8fd57381ae94a199790e6f960e490ed25e",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -53,6 +53,8 @@\n #include <util/threadnames.h>\n #include <util/translation.h>\n #include <validation.h>\n+#include <watchdog.h>\n+#include <watchdoginterface.h>\n #include <hash.h>\n \n \n@@ -255,6 +257,7 @@ void Shutdown(NodeContext& node)\n     // After there are no more peers/RPC left to give us new data which may generate\n     // CValidationInterface callbacks, flush them...\n     GetMainSignals().FlushBackgroundCallbacks();\n+    GetWatchSignals().FlushBackgroundCallbacks();\n \n     // Stop and delete all indexes only after flushing background callbacks.\n     if (g_txindex) {\n@@ -295,6 +298,7 @@ void Shutdown(NodeContext& node)\n     node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    GetWatchSignals().UnregisterBackgroundSignalScheduler();\n     globalVerifyHandle.reset();\n     ECC_Stop();\n     node.args = nullptr;\n@@ -1317,6 +1321,7 @@ bool AppInitMain(NodeContext& node)\n     }, std::chrono::minutes{1});\n \n     GetMainSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n+    GetWatchSignals().RegisterBackgroundSignalScheduler(*node.scheduler);\n \n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs\n@@ -1370,6 +1375,9 @@ bool AppInitMain(NodeContext& node)\n     assert(!node.mempool);\n     node.mempool = &::mempool;\n \n+    assert(!node.watchdog);\n+    node.watchdog = MakeUnique<CWatchdog>();\n+\n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n "
      },
      {
        "sha": "f574d22dc5fdaba386daa30f24d890f32c39217c",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -9,6 +9,7 @@\n #include <net.h>\n #include <net_processing.h>\n #include <scheduler.h>\n+#include <watchdog.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "d5544fdcd6cfa2736d2a908f810a3ebe711dd68a",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fcafe5787f5d90bff182a01d7d1d9e242d1ce776/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "patch": "@@ -14,6 +14,7 @@ class CConnman;\n class CScheduler;\n class CTxMemPool;\n class PeerLogicValidation;\n+class CWatchdog;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -38,6 +39,7 @@ struct NodeContext {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n+    std::unique_ptr<CWatchdog> watchdog;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      }
    ]
  },
  {
    "sha": "7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZGQxYjIyYjZmNzhkYTc3NTkxYzQzMDNiYWZhYjAwNmM5YTliZTEz",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T06:32:31Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:56:25Z"
      },
      "message": "[scheduler] Schedule ScanAnomalies every 60min\n\nRun ScanAnomalies to process any heuristics and trigger watchdog\ninterface callback.\n\nAs of present commit, there is no heuristic implemented, callback\nis blankly called to exerce watchdog interface.",
      "tree": {
        "sha": "eab890653650b4ddc418cbf2da928cfd716c2d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/eab890653650b4ddc418cbf2da928cfd716c2d05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd1b22b6f78da77591c4303bafab006c9a9be13",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fcafe5787f5d90bff182a01d7d1d9e242d1ce776",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fcafe5787f5d90bff182a01d7d1d9e242d1ce776"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 9,
      "deletions": 0
    },
    "files": [
      {
        "sha": "4ac601b6ae5e7b404813bf6631b4a719f8ae0404",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "patch": "@@ -1949,5 +1949,9 @@ bool AppInitMain(NodeContext& node)\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL);\n \n+    CWatchdog* watchdog = node.watchdog.get();\n+    node.scheduler->scheduleEvery([watchdog]{\n+            watchdog->ScanAnomalies();\n+    }, SCAN_ANOMALIES_INTERVAL);\n     return true;\n }"
      },
      {
        "sha": "ec4d9c0f22bb725ccbd5ca0a8b38b71fc4c67b25",
        "filename": "src/watchdog.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/watchdog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7dd1b22b6f78da77591c4303bafab006c9a9be13/src/watchdog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.h?ref=7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "patch": "@@ -5,9 +5,14 @@\n #ifndef BITCOIN_WATCHDOG_H\n #define BITCOIN_WATCHDOG_H\n \n+#include <chrono>\n #include <primitives/block.h>\n #include <stdint.h>\n \n+/* How often to scan for anomalies */\n+//TODO: make if configurable\n+static constexpr std::chrono::minutes SCAN_ANOMALIES_INTERVAL{60};\n+\n class CWatchdog\n {\n public:"
      }
    ]
  },
  {
    "sha": "7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDBlN2M5ODg0OWM5MzI5NjYwYzlkMGM5ZjNjN2NmN2ZlNWNlNTRi",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T05:57:43Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:57:45Z"
      },
      "message": "[net] Integrate CWatchdog in CConman\n\nInsert watchdog LogHeader after a successful ProcessNewBlockHeaders,\ntherefore updating last time watchdog have seen a step forward\non headers tree construction.\n\nWatchdog loggers should be designed on being invasive-minimal at they\nmay encumber hot paths.",
      "tree": {
        "sha": "cfa9d7059346e7088fb2025245bb56e7a96c8a89",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cfa9d7059346e7088fb2025245bb56e7a96c8a89"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7dd1b22b6f78da77591c4303bafab006c9a9be13",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7dd1b22b6f78da77591c4303bafab006c9a9be13"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 8,
      "deletions": 0
    },
    "files": [
      {
        "sha": "98edc81a5c0b2f2ba2dbe66085b1fb335758823f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -1891,6 +1891,7 @@ bool AppInitMain(NodeContext& node)\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n     connOptions.m_banman = node.banman.get();\n+    connOptions.m_watchdog = node.watchdog.get();\n     connOptions.m_msgproc = node.peer_logic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);"
      },
      {
        "sha": "4c586cd72547a9ec654cca666cc4114509831f78",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -23,6 +23,7 @@\n #include <sync.h>\n #include <threadinterrupt.h>\n #include <uint256.h>\n+#include <watchdog.h>\n \n #include <atomic>\n #include <deque>\n@@ -136,6 +137,7 @@ class CConnman\n         CClientUIInterface* uiInterface = nullptr;\n         NetEventsInterface* m_msgproc = nullptr;\n         BanMan* m_banman = nullptr;\n+        CWatchdog* m_watchdog = nullptr;\n         unsigned int nSendBufferMaxSize = 0;\n         unsigned int nReceiveFloodSize = 0;\n         uint64_t nMaxOutboundTimeframe = 0;\n@@ -163,6 +165,7 @@ class CConnman\n         nBestHeight = connOptions.nBestHeight;\n         clientInterface = connOptions.uiInterface;\n         m_banman = connOptions.m_banman;\n+        m_watchdog = connOptions.m_watchdog;\n         m_msgproc = connOptions.m_msgproc;\n         nSendBufferMaxSize = connOptions.nSendBufferMaxSize;\n         nReceiveFloodSize = connOptions.nReceiveFloodSize;\n@@ -325,6 +328,9 @@ class CConnman\n \n     void SetAsmap(std::vector<bool> asmap) { addrman.m_asmap = std::move(asmap); }\n \n+    /* Connection manager watchdog pointer access */\n+    CWatchdog* m_watchdog;\n+\n private:\n     struct ListenSocket {\n     public:"
      },
      {
        "sha": "8f35b08c6cce1954031c2eca40eef9f377aee564",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "patch": "@@ -1792,6 +1792,7 @@ bool static ProcessHeadersMessage(CNode* pfrom, CConnman* connman, CTxMemPool& m\n             MaybePunishNodeForBlock(pfrom->GetId(), state, via_compact_block, \"invalid header received\");\n             return false;\n         }\n+        connman->m_watchdog->LogHeader(headers);\n     }\n \n     {"
      }
    ]
  },
  {
    "sha": "e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOGQ4MjVmNmZhNzQzZmM0OTU0MzAwM2Y3ZmE4ZTdkYTM1NjdmZTFj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T23:42:05Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:00:24Z"
      },
      "message": "[altnet] Introduce CAltstack class\n\nCAltstack is a secondary network stack for alternative transports.\nIt aims to provide a pluggable framework to host diverse transports,\nlike obfuscated traffic, radio-based, protocols piggy-backing, ...\n\nThis class introduces a foundation, followed-up in next commits.",
      "tree": {
        "sha": "ec739f89ecee40ea2fa20f46fd4375b59b160a5e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec739f89ecee40ea2fa20f46fd4375b59b160a5e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d825f6fa743fc49543003f7fa8e7da3567fe1c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7d0e7c98849c9329660c9d0c9f3c7cf7fe5ce54b"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 56,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2a9689255daa0945b9e0adee38de262dcaafe37b",
        "filename": "src/altnet.cpp",
        "status": "added",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8d825f6fa743fc49543003f7fa8e7da3567fe1c/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8d825f6fa743fc49543003f7fa8e7da3567fe1c/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
        "patch": "@@ -0,0 +1,31 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <altnet.h>\n+\n+CAltstack::CAltstack() {\n+    m_node_id = 0;\n+}\n+\n+CAltstack::~CAltstack()\n+{\n+    m_node_id = 0;\n+    Interrupt();\n+    Stop();\n+}\n+\n+bool CAltstack::Start()\n+{\n+    interruptNet.reset();\n+    flagInterruptAltProc = false;\n+    return true;\n+}\n+\n+void CAltstack::Stop() {}\n+\n+void CAltstack::Interrupt() {\n+    flagInterruptAltProc = true;\n+    interruptNet();\n+}"
      },
      {
        "sha": "d75f176f54d99a43b475321738de7e3612c8162d",
        "filename": "src/altnet.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e8d825f6fa743fc49543003f7fa8e7da3567fe1c/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e8d825f6fa743fc49543003f7fa8e7da3567fe1c/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALTNET_H\n+#define BITCOIN_ALTNET_H\n+\n+#include <threadinterrupt.h>\n+\n+class CAltstack\n+{\n+private:\n+    uint32_t m_node_id;\n+    CThreadInterrupt interruptNet;\n+    std::atomic<bool> flagInterruptAltProc{false};\n+public:\n+    CAltstack();\n+    ~CAltstack();\n+    void Start();\n+    void Stop();\n+    void Interrupt();\n+}\n+\n+#endif // BITCOIN_ALTNET_H"
      }
    ]
  },
  {
    "sha": "748518006615972565ee03900dbe5dfb0aa29292",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDg1MTgwMDY2MTU5NzI1NjVlZTAzOTAwZGJlNWRmYjBhYTI5Mjky",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T07:53:58Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:01:00Z"
      },
      "message": "[altnet] Add CAltMsg class\n\nThis new class helps to communicate identifier payload between low-level\nalternative stack drivers and message processing logic.\n\nAdd vRecvMsg to CAltstack to serve as a buffer between drivers processing\nand messages processing.",
      "tree": {
        "sha": "ccc12fda187a46438f5d76560111165205406640",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccc12fda187a46438f5d76560111165205406640"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/748518006615972565ee03900dbe5dfb0aa29292",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748518006615972565ee03900dbe5dfb0aa29292",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/748518006615972565ee03900dbe5dfb0aa29292",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748518006615972565ee03900dbe5dfb0aa29292/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e8d825f6fa743fc49543003f7fa8e7da3567fe1c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e8d825f6fa743fc49543003f7fa8e7da3567fe1c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "73e2410d1dff16e68be1c495d03e2eb8b0becc68",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/748518006615972565ee03900dbe5dfb0aa29292/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/748518006615972565ee03900dbe5dfb0aa29292/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=748518006615972565ee03900dbe5dfb0aa29292",
        "patch": "@@ -7,13 +7,30 @@\n #define BITCOIN_ALTNET_H\n \n #include <threadinterrupt.h>\n+#include <streams.h>\n+\n+/* Data payload and its origin node */\n+class CAltMsg {\n+public:\n+    uint32_t m_node_id;\n+    CDataStream m_recv; // received message data\n+\n+    std::string m_command;\n+\n+    CAltMsg() : m_node_id(0), m_recv(0, 0) {\n+        m_recv.clear();\n+    }\n+};\n \n class CAltstack\n {\n private:\n     uint32_t m_node_id;\n     CThreadInterrupt interruptNet;\n     std::atomic<bool> flagInterruptAltProc{false};\n+\n+    RecursiveMutex cs_vRecvMsg;\n+    std::vector<CAltMsg> vRecvMsg;\n public:\n     CAltstack();\n     ~CAltstack();"
      }
    ]
  },
  {
    "sha": "e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNzI3YmE2ZmMxN2FmZDgxZjhiODhmZDg4OWNjNTdjMmM4NGFmZDlj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-12T23:53:41Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:01:40Z"
      },
      "message": "[init] Integrate CAltstack and its interface in init sequence\n\nCAltstack is integrated in NodeContext to make it accessible to any\nfuture rpc calls. Some application may load alternative drivers\naccording to their requirements.",
      "tree": {
        "sha": "1f4df9468a56448743c9ac47f126d7b5ccedc5fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1f4df9468a56448743c9ac47f126d7b5ccedc5fa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "748518006615972565ee03900dbe5dfb0aa29292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/748518006615972565ee03900dbe5dfb0aa29292",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/748518006615972565ee03900dbe5dfb0aa29292"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 20,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8d01486b69c4d12495f3b452488bb22188f8c443",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "patch": "@@ -102,6 +102,7 @@ endif\n BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n+  altnet.h \\\n   attributes.h \\\n   banman.h \\\n   base58.h \\\n@@ -274,6 +275,7 @@ libbitcoin_server_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n libbitcoin_server_a_SOURCES = \\\n   addrdb.cpp \\\n   addrman.cpp \\\n+  altnet.cpp \\\n   banman.cpp \\\n   blockencodings.cpp \\\n   blockfilter.cpp \\"
      },
      {
        "sha": "5f10cfaddaa43a2647d67dc5b81d350676bf3c5b",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "patch": "@@ -34,9 +34,9 @@ class CAltstack\n public:\n     CAltstack();\n     ~CAltstack();\n-    void Start();\n+    bool Start();\n     void Stop();\n     void Interrupt();\n-}\n+};\n \n #endif // BITCOIN_ALTNET_H"
      },
      {
        "sha": "c8602cf4f13828788e9afa992419ccbd908e9484",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "patch": "@@ -10,6 +10,7 @@\n #include <init.h>\n \n #include <addrman.h>\n+#include <altnet.h>\n #include <amount.h>\n #include <banman.h>\n #include <blockfilter.h>\n@@ -169,6 +170,8 @@ void Interrupt(NodeContext& node)\n     if (g_txindex) {\n         g_txindex->Interrupt();\n     }\n+    if (node.altstack)\n+        node.altstack->Interrupt();\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n }\n \n@@ -213,6 +216,9 @@ void Shutdown(NodeContext& node)\n         LOCK2(::cs_main, ::g_cs_orphans);\n         node.connman->StopNodes();\n     }\n+    if (node.altstack) {\n+        node.altstack->Stop();\n+    }\n \n     StopTorControl();\n \n@@ -227,6 +233,7 @@ void Shutdown(NodeContext& node)\n     node.peer_logic.reset();\n     node.connman.reset();\n     node.banman.reset();\n+    node.altstack.reset();\n \n     if (::mempool.IsLoaded() && gArgs.GetArg(\"-persistmempool\", DEFAULT_PERSIST_MEMPOOL)) {\n         DumpMempool(::mempool);\n@@ -1378,6 +1385,9 @@ bool AppInitMain(NodeContext& node)\n     assert(!node.watchdog);\n     node.watchdog = MakeUnique<CWatchdog>();\n \n+    assert(!node.altstack);\n+    node.altstack = MakeUnique<CAltstack>();\n+\n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n \n@@ -1935,6 +1945,9 @@ bool AppInitMain(NodeContext& node)\n     if (!node.connman->Start(*node.scheduler, connOptions)) {\n         return false;\n     }\n+    if (!node.altstack->Start()) {\n+        return false;\n+    }\n \n     // ********************************************************* Step 13: finished\n "
      },
      {
        "sha": "8c07372a68d6595224d4aedeeade5e220e875951",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <node/context.h>\n \n+#include <altnet.h>\n #include <banman.h>\n #include <interfaces/chain.h>\n #include <net.h>"
      },
      {
        "sha": "190f68ddd406692c809b58891a13119789785645",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "patch": "@@ -15,6 +15,7 @@ class CScheduler;\n class CTxMemPool;\n class PeerLogicValidation;\n class CWatchdog;\n+class CAltstack;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -40,6 +41,7 @@ struct NodeContext {\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n     std::unique_ptr<CScheduler> scheduler;\n     std::unique_ptr<CWatchdog> watchdog;\n+    std::unique_ptr<CAltstack> altstack;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      }
    ]
  },
  {
    "sha": "d599505e210816d9f8a644570e0e2ed0c7f0444e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTk5NTA1ZTIxMDgxNmQ5ZjhhNjQ0NTcwZTBlMmVkMGM3ZjA0NDRl",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T00:09:48Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:03:24Z"
      },
      "message": "[altnet] Add CDriver class\n\nCDriver is an abstract interface which must be implemented by each\ntransport protocol driver to interface with CAltstack.\n\nIt contains basic methods to separate warmup, preprocessing, flusing\nand receiving.\n\nThis is used in next commit.",
      "tree": {
        "sha": "efb4f7578eed92dd7d982c9815f71e752265a5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/efb4f7578eed92dd7d982c9815f71e752265a5e7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d599505e210816d9f8a644570e0e2ed0c7f0444e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d599505e210816d9f8a644570e0e2ed0c7f0444e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d599505e210816d9f8a644570e0e2ed0c7f0444e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d599505e210816d9f8a644570e0e2ed0c7f0444e/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e727ba6fc17afd81f8b88fd889cc57c2c84afd9c"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 62,
      "deletions": 0
    },
    "files": [
      {
        "sha": "99ea51f6574c45c4fc483faae3b16a7f384f12a4",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d599505e210816d9f8a644570e0e2ed0c7f0444e/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d599505e210816d9f8a644570e0e2ed0c7f0444e/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d599505e210816d9f8a644570e0e2ed0c7f0444e",
        "patch": "@@ -130,6 +130,7 @@ BITCOIN_CORE_H = \\\n   core_io.h \\\n   core_memusage.h \\\n   cuckoocache.h \\\n+  drivers.h \\\n   flatfile.h \\\n   fs.h \\\n   httprpc.h \\"
      },
      {
        "sha": "fb8660061f04f9635e646f891420ee15bb2dcdc1",
        "filename": "src/drivers.h",
        "status": "added",
        "additions": 61,
        "deletions": 0,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d599505e210816d9f8a644570e0e2ed0c7f0444e/src/drivers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d599505e210816d9f8a644570e0e2ed0c7f0444e/src/drivers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drivers.h?ref=d599505e210816d9f8a644570e0e2ed0c7f0444e",
        "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_DRIVERS_H\n+#define BITCOIN_DRIVERS_H\n+\n+#include <altnet.h>\n+\n+#include <net.h>\n+\n+#include <string>\n+#include <vector>\n+\n+class CAltMsg;\n+\n+/**\n+ * Implement a transport-specific driver to support natively its\n+ * processing.\n+ *\n+ * Each CDriver implementation must maintain its protocol specific\n+ * connnection state, control logic and peer management.\n+ *\n+ */\n+class CDriver {\n+private:\n+    uint32_t m_driver_id; // used to link peer back to its hosting driver\n+public:\n+    /* Warmup a driver until it's ready to service connection */\n+    virtual bool Warmup() = 0;\n+\n+    /* Flush a batch of messages pending on all peers hosted on this\n+     * device\n+     */\n+    virtual bool Flush() = 0;\n+\n+    /* Receive messages for all peers hosted on this device */\n+    //TODO: std::vector<std::tuple(node_id, msgs)>> ?\n+    virtual bool Receive(CAltMsg& msg) = 0;\n+\n+    /* Establish incoming connections */\n+    virtual bool Listen(uint32_t potential_node_id) = 0;\n+\n+    /* Send a message to given node_id, driver MUST not flush yet */\n+    virtual bool Send(CSerializedNetMsg msg) = 0;\n+\n+    /* Return driver capabilities */\n+    virtual TransportCapabilities GetCapabilities() = 0;\n+\n+    /* Set driver identifier. */\n+    void SetId(uint32_t driver_id) {\n+        m_driver_id = driver_id;\n+    }\n+\n+    /* Return driver identifier */\n+    uint32_t GetId() {\n+        return m_driver_id;\n+    }\n+};\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "e9a676d459ae7153e2a6ce2937de3da27b187fa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplOWE2NzZkNDU5YWU3MTUzZTJhNmNlMjkzN2RlM2RhMjdiMTg3ZmEw",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T00:37:23Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:04:16Z"
      },
      "message": "[altnet] Add ThreadWarmupDrivers\n\nAdd a thread iterating over all drivers and warmup, associating to\neach a driver id.",
      "tree": {
        "sha": "84a6d44af36733098f9779a7c5f6a4afc455931f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/84a6d44af36733098f9779a7c5f6a4afc455931f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e9a676d459ae7153e2a6ce2937de3da27b187fa0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a676d459ae7153e2a6ce2937de3da27b187fa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a676d459ae7153e2a6ce2937de3da27b187fa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a676d459ae7153e2a6ce2937de3da27b187fa0/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d599505e210816d9f8a644570e0e2ed0c7f0444e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d599505e210816d9f8a644570e0e2ed0c7f0444e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d599505e210816d9f8a644570e0e2ed0c7f0444e"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 32,
      "deletions": 1
    },
    "files": [
      {
        "sha": "857cc8fe4669bcb8ae07722c3fce384f9cdc62d8",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a676d459ae7153e2a6ce2937de3da27b187fa0/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a676d459ae7153e2a6ce2937de3da27b187fa0/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=e9a676d459ae7153e2a6ce2937de3da27b187fa0",
        "patch": "@@ -20,12 +20,29 @@ bool CAltstack::Start()\n {\n     interruptNet.reset();\n     flagInterruptAltProc = false;\n+\n+    threadWarmupDrivers = std::thread(&TraceThread<std::function<void()> >, \"drivers-warmup\", std::function<void()>(std::bind(&CAltstack::ThreadWarmupDrivers, this)));\n     return true;\n }\n \n-void CAltstack::Stop() {}\n+void CAltstack::Stop() {\n+    if (threadWarmupDrivers.joinable())\n+        threadWarmupDrivers.join();\n+}\n \n void CAltstack::Interrupt() {\n     flagInterruptAltProc = true;\n     interruptNet();\n }\n+\n+void CAltstack::ThreadWarmupDrivers()\n+{\n+    uint32_t id = 0;\n+    LOCK(cs_vDrivers);\n+    for (auto&& pdriver: vDrivers) {\n+        //TODO: CDriver::LoadAtInit() ?\n+        pdriver->SetId(id);\n+        pdriver->Warmup();\n+        id++;\n+    }\n+}"
      },
      {
        "sha": "2280fbb25ebeb1baea428a922d3708b42d1c05c8",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e9a676d459ae7153e2a6ce2937de3da27b187fa0/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e9a676d459ae7153e2a6ce2937de3da27b187fa0/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=e9a676d459ae7153e2a6ce2937de3da27b187fa0",
        "patch": "@@ -6,8 +6,13 @@\n #ifndef BITCOIN_ALTNET_H\n #define BITCOIN_ALTNET_H\n \n+#include <drivers.h>\n+#include <thread>\n #include <threadinterrupt.h>\n #include <streams.h>\n+#include <sync.h>\n+#include <util/system.h>\n+#include <vector>\n \n /* Data payload and its origin node */\n class CAltMsg {\n@@ -31,12 +36,21 @@ class CAltstack\n \n     RecursiveMutex cs_vRecvMsg;\n     std::vector<CAltMsg> vRecvMsg;\n+\n+    RecursiveMutex cs_vDrivers;\n+    std::vector<CDriver*> vDrivers GUARDED_BY(cs_vDrivers);\n+\n+    std::thread threadWarmupDrivers;\n+\n public:\n     CAltstack();\n     ~CAltstack();\n     bool Start();\n     void Stop();\n     void Interrupt();\n+\n+    /* Altstack threads */\n+    void ThreadWarmupDrivers();\n };\n \n #endif // BITCOIN_ALTNET_H"
      }
    ]
  },
  {
    "sha": "8dc65ad811cb19d049294c19f4a76e9593dd759c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZGM2NWFkODExY2IxOWQwNDkyOTRjMTlmNGE3NmU5NTkzZGQ3NTlj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T00:44:26Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:05:16Z"
      },
      "message": "[altnet] Add ThreadHandleDrivers\n\nThreadHandleDrivers is the logical equivalent of CConnman::ThreadSocketHandler,\nlisten for incoming connections, serve and receive messages per-transport\nprotocol drivers.",
      "tree": {
        "sha": "5bd097ac364371ab7e23ff457758f59e2adf1372",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5bd097ac364371ab7e23ff457758f59e2adf1372"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8dc65ad811cb19d049294c19f4a76e9593dd759c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc65ad811cb19d049294c19f4a76e9593dd759c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8dc65ad811cb19d049294c19f4a76e9593dd759c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc65ad811cb19d049294c19f4a76e9593dd759c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e9a676d459ae7153e2a6ce2937de3da27b187fa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e9a676d459ae7153e2a6ce2937de3da27b187fa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e9a676d459ae7153e2a6ce2937de3da27b187fa0"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 36,
      "deletions": 0
    },
    "files": [
      {
        "sha": "04553f523f913b9620101a403c2f8dc2b18b03ce",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc65ad811cb19d049294c19f4a76e9593dd759c/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc65ad811cb19d049294c19f4a76e9593dd759c/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=8dc65ad811cb19d049294c19f4a76e9593dd759c",
        "patch": "@@ -22,12 +22,16 @@ bool CAltstack::Start()\n     flagInterruptAltProc = false;\n \n     threadWarmupDrivers = std::thread(&TraceThread<std::function<void()> >, \"drivers-warmup\", std::function<void()>(std::bind(&CAltstack::ThreadWarmupDrivers, this)));\n+\n+    threadHandleDrivers = std::thread(&TraceThread<std::function<void()> >, \"altstack-handle\", std::function<void()>(std::bind(&CAltstack::ThreadHandleDrivers, this)));\n     return true;\n }\n \n void CAltstack::Stop() {\n     if (threadWarmupDrivers.joinable())\n         threadWarmupDrivers.join();\n+    if (threadHandleDrivers.joinable())\n+        threadHandleDrivers.join();\n }\n \n void CAltstack::Interrupt() {\n@@ -46,3 +50,33 @@ void CAltstack::ThreadWarmupDrivers()\n         id++;\n     }\n }\n+\n+void CAltstack::ThreadHandleDrivers()\n+{\n+    while (!interruptNet)\n+    {\n+        LOCK(cs_vDrivers);\n+        // Listen for new connections on any driver.\n+        for (auto&& pdriver: vDrivers) {\n+            if (pdriver->Listen(m_node_id)) {\n+                m_node_id++;\n+            }\n+            if (interruptNet) return;\n+        }\n+\n+        // Send pending messages to peer hosted on any driver.\n+        for (auto&& pdriver: vDrivers) {\n+            pdriver->Flush();\n+            if (interruptNet) return;\n+        }\n+\n+        // Receive messages from peer hosted on any driver.\n+        for (auto&& pdriver: vDrivers) {\n+            CAltMsg msg;\n+            pdriver->Receive(msg);\n+            LOCK(cs_vRecvMsg);\n+            vRecvMsg.push_back(msg);\n+            if (interruptNet) return;\n+        }\n+    }\n+}"
      },
      {
        "sha": "a2e4c2a52e43d700c160a9551453338d80871316",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8dc65ad811cb19d049294c19f4a76e9593dd759c/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8dc65ad811cb19d049294c19f4a76e9593dd759c/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=8dc65ad811cb19d049294c19f4a76e9593dd759c",
        "patch": "@@ -41,6 +41,7 @@ class CAltstack\n     std::vector<CDriver*> vDrivers GUARDED_BY(cs_vDrivers);\n \n     std::thread threadWarmupDrivers;\n+    std::thread threadHandleDrivers;\n \n public:\n     CAltstack();\n@@ -51,6 +52,7 @@ class CAltstack\n \n     /* Altstack threads */\n     void ThreadWarmupDrivers();\n+    void ThreadHandleDrivers();\n };\n \n #endif // BITCOIN_ALTNET_H"
      }
    ]
  },
  {
    "sha": "7262d0c498b37360aa141280a458e7189ebc2442",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjYyZDBjNDk4YjM3MzYwYWExNDEyODBhNDU4ZTcxODllYmMyNDQy",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T01:45:54Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:05:46Z"
      },
      "message": "[altnet] Add ThreadAltProcessing\n\nThreadAltProcessing is the logical equivalent of Cconnman::ThreadAltProcessing,\nprocessing messages to and from drivers.",
      "tree": {
        "sha": "0f9da3027f0af5f93dccd7869daeb78b3d5cf48b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0f9da3027f0af5f93dccd7869daeb78b3d5cf48b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7262d0c498b37360aa141280a458e7189ebc2442",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7262d0c498b37360aa141280a458e7189ebc2442",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7262d0c498b37360aa141280a458e7189ebc2442",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7262d0c498b37360aa141280a458e7189ebc2442/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "8dc65ad811cb19d049294c19f4a76e9593dd759c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8dc65ad811cb19d049294c19f4a76e9593dd759c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8dc65ad811cb19d049294c19f4a76e9593dd759c"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 17,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1212f233d4206750583a603a644d77bc3bf1c046",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7262d0c498b37360aa141280a458e7189ebc2442/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7262d0c498b37360aa141280a458e7189ebc2442/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=7262d0c498b37360aa141280a458e7189ebc2442",
        "patch": "@@ -24,6 +24,8 @@ bool CAltstack::Start()\n     threadWarmupDrivers = std::thread(&TraceThread<std::function<void()> >, \"drivers-warmup\", std::function<void()>(std::bind(&CAltstack::ThreadWarmupDrivers, this)));\n \n     threadHandleDrivers = std::thread(&TraceThread<std::function<void()> >, \"altstack-handle\", std::function<void()>(std::bind(&CAltstack::ThreadHandleDrivers, this)));\n+\n+    threadAltProcessing = std::thread(&TraceThread<std::function<void()> >, \"altstack-processing\", std::function<void()>(std::bind(&CAltstack::ThreadAltProcessing, this)));\n     return true;\n }\n \n@@ -32,6 +34,8 @@ void CAltstack::Stop() {\n         threadWarmupDrivers.join();\n     if (threadHandleDrivers.joinable())\n         threadHandleDrivers.join();\n+    if (threadAltProcessing.joinable())\n+        threadAltProcessing.join();\n }\n \n void CAltstack::Interrupt() {\n@@ -80,3 +84,14 @@ void CAltstack::ThreadHandleDrivers()\n         }\n     }\n }\n+\n+void CAltstack::ThreadAltProcessing()\n+{\n+    while (!flagInterruptAltProc) {\n+        {\n+            LOCK(cs_vRecvMsg);\n+            for (auto&& msg: vRecvMsg)\n+            vRecvMsg.clear();\n+        }\n+    }\n+}"
      },
      {
        "sha": "6fcf95d6b0efb2d46289855fd4ea7e27b18ddd62",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7262d0c498b37360aa141280a458e7189ebc2442/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7262d0c498b37360aa141280a458e7189ebc2442/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=7262d0c498b37360aa141280a458e7189ebc2442",
        "patch": "@@ -42,6 +42,7 @@ class CAltstack\n \n     std::thread threadWarmupDrivers;\n     std::thread threadHandleDrivers;\n+    std::thread threadAltProcessing;\n \n public:\n     CAltstack();\n@@ -53,6 +54,7 @@ class CAltstack\n     /* Altstack threads */\n     void ThreadWarmupDrivers();\n     void ThreadHandleDrivers();\n+    void ThreadAltProcessing();\n };\n \n #endif // BITCOIN_ALTNET_H"
      }
    ]
  },
  {
    "sha": "c784a40a1cd67efbe0d1e0653a77e97562006424",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNzg0YTQwYTFjZDY3ZWZiZTBkMWUwNjUzYTc3ZTk3NTYyMDA2NDI0",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T07:28:50Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:06:07Z"
      },
      "message": "[altnet] Add TransportCapabilities class\n\nThis new class represents all capabilities supported by driver and must\nbe inherited to peer processing state.\n\nCapabilities may be relatives to link bidirectionality, protocol\nmessages supported, privacy niceness, priority.",
      "tree": {
        "sha": "59520a0f47617711ea2797975c0e19f504186953",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/59520a0f47617711ea2797975c0e19f504186953"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c784a40a1cd67efbe0d1e0653a77e97562006424",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c784a40a1cd67efbe0d1e0653a77e97562006424",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c784a40a1cd67efbe0d1e0653a77e97562006424",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c784a40a1cd67efbe0d1e0653a77e97562006424/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "7262d0c498b37360aa141280a458e7189ebc2442",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7262d0c498b37360aa141280a458e7189ebc2442",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7262d0c498b37360aa141280a458e7189ebc2442"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "75b97f9d3dc86e837869864f07920857d845cd13",
        "filename": "src/drivers.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c784a40a1cd67efbe0d1e0653a77e97562006424/src/drivers.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c784a40a1cd67efbe0d1e0653a77e97562006424/src/drivers.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drivers.h?ref=c784a40a1cd67efbe0d1e0653a77e97562006424",
        "patch": "@@ -14,6 +14,26 @@\n \n class CAltMsg;\n \n+/* Represents a transport capabilities */\n+class TransportCapabilities\n+{\n+public:\n+    /** Whether this transport can send */\n+    bool fSending;\n+\n+    /** Whether this transport can receive */\n+    bool fReceiving;\n+\n+    /** Whether this transport support headers */\n+    bool fHeaders;\n+\n+    TransportCapabilities(bool fSendingIn, bool fReceivingIn, bool fHeadersIn)\n+        : fSending(fSendingIn),\n+          fReceiving(fReceivingIn),\n+          fHeaders(fHeadersIn)\n+    {}\n+};\n+\n /**\n  * Implement a transport-specific driver to support natively its\n  * processing."
      }
    ]
  },
  {
    "sha": "59e33cade4ef9443ebb47693af4612b71b67f310",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OWUzM2NhZGU0ZWY5NDQzZWJiNDc2OTNhZjQ2MTJiNzFiNjdmMzEw",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T06:12:56Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:07:36Z"
      },
      "message": "[alt_processing] Add AltLogicValidation class\n\nThis new class aims to process protocol messages from alternatives\ntransports. As those may not be bidirectional, prohibitive, privacy-\nleaking or size-scoped, processing logic needs to do different\nassumptions based on capabilities.\n\nThis is used in next commit.",
      "tree": {
        "sha": "71e9fe5b76583a27127999b507e7b1150afd974b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/71e9fe5b76583a27127999b507e7b1150afd974b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59e33cade4ef9443ebb47693af4612b71b67f310",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e33cade4ef9443ebb47693af4612b71b67f310",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59e33cade4ef9443ebb47693af4612b71b67f310",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e33cade4ef9443ebb47693af4612b71b67f310/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "c784a40a1cd67efbe0d1e0653a77e97562006424",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c784a40a1cd67efbe0d1e0653a77e97562006424",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c784a40a1cd67efbe0d1e0653a77e97562006424"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 53,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c48ff0f686e47ae7e2a0d3a6df17bb5df963c075",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e33cade4ef9443ebb47693af4612b71b67f310/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e33cade4ef9443ebb47693af4612b71b67f310/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=59e33cade4ef9443ebb47693af4612b71b67f310",
        "patch": "@@ -103,6 +103,7 @@ BITCOIN_CORE_H = \\\n   addrdb.h \\\n   addrman.h \\\n   altnet.h \\\n+  alt_processing.h\\\n   attributes.h \\\n   banman.h \\\n   base58.h \\\n@@ -277,6 +278,7 @@ libbitcoin_server_a_SOURCES = \\\n   addrdb.cpp \\\n   addrman.cpp \\\n   altnet.cpp \\\n+  alt_processing.cpp \\\n   banman.cpp \\\n   blockencodings.cpp \\\n   blockfilter.cpp \\"
      },
      {
        "sha": "e0200629a86778944daf2a8940bad464f0f2cfb9",
        "filename": "src/alt_processing.cpp",
        "status": "added",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e33cade4ef9443ebb47693af4612b71b67f310/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e33cade4ef9443ebb47693af4612b71b67f310/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=59e33cade4ef9443ebb47693af4612b71b67f310",
        "patch": "@@ -0,0 +1,21 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <alt_processing.h>\n+\n+AltLogicValidation::AltLogicValidation(CAltstack* altstack)\n+    : m_altstack(altstack)\n+{}\n+\n+bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n+    return true;\n+}\n+\n+bool AltLogicValidation::SendMessage() {\n+    return true;\n+}\n+\n+void AltLogicValidation::InitializeNode(uint32_t driver_id, TransportCapabilities caps, uint32_t node_id) {}\n+\n+void AltLogicValidation::FinalizeNode() {}"
      },
      {
        "sha": "39ebe50e8531e690f73c1f3393d99589c8569ac6",
        "filename": "src/alt_processing.h",
        "status": "added",
        "additions": 30,
        "deletions": 0,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59e33cade4ef9443ebb47693af4612b71b67f310/src/alt_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59e33cade4ef9443ebb47693af4612b71b67f310/src/alt_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.h?ref=59e33cade4ef9443ebb47693af4612b71b67f310",
        "patch": "@@ -0,0 +1,30 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_ALT_PROCESSING_H\n+#define BITCOIN_ALT_PROCESSING_H\n+\n+#include <altnet.h>\n+#include <drivers.h>\n+\n+class AltLogicValidation final {\n+private:\n+    CAltstack* const m_altstack;\n+public:\n+    AltLogicValidation(CAltstack* altstack);\n+    /** Initialize a peer */\n+    void InitializeNode(uint32_t driver_id, TransportCapabilities caps, uint32_t node_id);\n+    /** Remove a peer due to processing and call its host driver */\n+    void FinalizeNode();\n+    /**\n+     * Process protocol message from a given node id\n+     */\n+    bool ProcessMessage(CAltMsg& msg);\n+    /**\n+     * Send queued protocol messages to be sent to a given node id\n+     */\n+    bool SendMessage();\n+};\n+\n+#endif // BITCOIN_ALT_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "374074523f3cb3dbefa3324274b7483b3c385548",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNzQwNzQ1MjNmM2NiM2RiZWZhMzMyNDI3NGI3NDgzYjNjMzg1NTQ4",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T21:22:09Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:08:07Z"
      },
      "message": "[altnet] Integrate AltLogicValidation\n\nAltLogicValidation is integrated in NodeContext to make it accessible\nto any future rpc calls. Some application may favor protocol messages\ndifferently according to their requirement.",
      "tree": {
        "sha": "64876b631ef24a075bc81adcda20bfad1398f4ae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/64876b631ef24a075bc81adcda20bfad1398f4ae"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/374074523f3cb3dbefa3324274b7483b3c385548",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/374074523f3cb3dbefa3324274b7483b3c385548",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/374074523f3cb3dbefa3324274b7483b3c385548",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/374074523f3cb3dbefa3324274b7483b3c385548/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "59e33cade4ef9443ebb47693af4612b71b67f310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59e33cade4ef9443ebb47693af4612b71b67f310",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59e33cade4ef9443ebb47693af4612b71b67f310"
      }
    ],
    "stats": {
      "total": 26,
      "additions": 22,
      "deletions": 4
    },
    "files": [
      {
        "sha": "048e867a4b7fdf6a5fc18ad3f43774e1b22c5b80",
        "filename": "src/alt_processing.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/alt_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/alt_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.h?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -8,6 +8,8 @@\n #include <altnet.h>\n #include <drivers.h>\n \n+class CAltstack;\n+\n class AltLogicValidation final {\n private:\n     CAltstack* const m_altstack;"
      },
      {
        "sha": "15c63c1bce6ab77c729ab55e2aaf822eed3d5b77",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -16,8 +16,9 @@ CAltstack::~CAltstack()\n     Stop();\n }\n \n-bool CAltstack::Start()\n+bool CAltstack::Start(AltLogicValidation *alt_logic)\n {\n+    m_msgproc = alt_logic;\n     interruptNet.reset();\n     flagInterruptAltProc = false;\n \n@@ -63,6 +64,7 @@ void CAltstack::ThreadHandleDrivers()\n         // Listen for new connections on any driver.\n         for (auto&& pdriver: vDrivers) {\n             if (pdriver->Listen(m_node_id)) {\n+                m_msgproc->InitializeNode(pdriver->GetId(), pdriver->GetCapabilities(), m_node_id);\n                 m_node_id++;\n             }\n             if (interruptNet) return;\n@@ -90,8 +92,11 @@ void CAltstack::ThreadAltProcessing()\n     while (!flagInterruptAltProc) {\n         {\n             LOCK(cs_vRecvMsg);\n-            for (auto&& msg: vRecvMsg)\n+            for (auto&& msg: vRecvMsg) {\n+                m_msgproc->ProcessMessage(msg);\n+            }\n             vRecvMsg.clear();\n         }\n+        m_msgproc->SendMessage();\n     }\n }"
      },
      {
        "sha": "36373c664db9d71678a063bf1725b5685f5e54ff",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_ALTNET_H\n #define BITCOIN_ALTNET_H\n \n+#include <alt_processing.h>\n #include <drivers.h>\n #include <thread>\n #include <threadinterrupt.h>\n@@ -14,6 +15,8 @@\n #include <util/system.h>\n #include <vector>\n \n+class AltLogicValidation;\n+\n /* Data payload and its origin node */\n class CAltMsg {\n public:\n@@ -44,10 +47,12 @@ class CAltstack\n     std::thread threadHandleDrivers;\n     std::thread threadAltProcessing;\n \n+    AltLogicValidation* m_msgproc;\n+\n public:\n     CAltstack();\n     ~CAltstack();\n-    bool Start();\n+    bool Start(AltLogicValidation* alt_logic);\n     void Stop();\n     void Interrupt();\n "
      },
      {
        "sha": "432c35a6e1571a8ac391688d4908c564e957562a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -1391,6 +1391,9 @@ bool AppInitMain(NodeContext& node)\n     node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), *node.scheduler, *node.mempool));\n     RegisterValidationInterface(node.peer_logic.get());\n \n+    node.alt_logic.reset(new AltLogicValidation(node.altstack.get()));\n+    RegisterWatchdogInterface(node.alt_logic.get());\n+\n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n     for (const std::string& cmt : gArgs.GetArgs(\"-uacomment\")) {\n@@ -1945,7 +1948,7 @@ bool AppInitMain(NodeContext& node)\n     if (!node.connman->Start(*node.scheduler, connOptions)) {\n         return false;\n     }\n-    if (!node.altstack->Start()) {\n+    if (!node.altstack->Start(node.alt_logic.get())) {\n         return false;\n     }\n "
      },
      {
        "sha": "1796b2735fe4e709c48e2f32117072fb5f071373",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -5,6 +5,7 @@\n #include <node/context.h>\n \n #include <altnet.h>\n+#include <alt_processing.h>\n #include <banman.h>\n #include <interfaces/chain.h>\n #include <net.h>"
      },
      {
        "sha": "6be2b87dc380d806ebd64690f759f7bec0e744f5",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/374074523f3cb3dbefa3324274b7483b3c385548/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/374074523f3cb3dbefa3324274b7483b3c385548/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=374074523f3cb3dbefa3324274b7483b3c385548",
        "patch": "@@ -16,6 +16,7 @@ class CTxMemPool;\n class PeerLogicValidation;\n class CWatchdog;\n class CAltstack;\n+class AltLogicValidation;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -42,6 +43,7 @@ struct NodeContext {\n     std::unique_ptr<CScheduler> scheduler;\n     std::unique_ptr<CWatchdog> watchdog;\n     std::unique_ptr<CAltstack> altstack;\n+    std::unique_ptr<AltLogicValidation> alt_logic;\n \n     //! Declare default constructor and destructor that are not inline, so code\n     //! instantiating the NodeContext struct doesn't need to #include class"
      }
    ]
  },
  {
    "sha": "ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZTFlM2YwZmMwZTE5MGE1NDg3YWM2ZDRkY2FmNDEyNTY4OGM0MzU5",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T22:12:15Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:08:57Z"
      },
      "message": "[alt_processing] Add CAltNodeState class\n\nThis new class encapsulate a alternative validation-specific state.\nIt makes available peer capabilites to processing layer.\n\nThis design is exploratory, per-peer state may be dropped completely\nand processing logic may only rely on drivers capabilities to make\ndecision.",
      "tree": {
        "sha": "635e3c8b7054aa6c5e151384ac61ac94d9829761",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/635e3c8b7054aa6c5e151384ac61ac94d9829761"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "374074523f3cb3dbefa3324274b7483b3c385548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/374074523f3cb3dbefa3324274b7483b3c385548",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/374074523f3cb3dbefa3324274b7483b3c385548"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 41,
      "deletions": 1
    },
    "files": [
      {
        "sha": "4fc126772ef8d1848cd6bdc3fadaedae4d3c2425",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
        "patch": "@@ -8,6 +8,13 @@ AltLogicValidation::AltLogicValidation(CAltstack* altstack)\n     : m_altstack(altstack)\n {}\n \n+CAltNodeState *AltLogicValidation::State(uint32_t node_id) {\n+    std::map<uint32_t, CAltNodeState>::iterator it = mapNodeState.find(node_id);\n+    if (it == mapNodeState.end())\n+        return nullptr;\n+    return &it->second;\n+}\n+\n bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n     return true;\n }\n@@ -16,6 +23,10 @@ bool AltLogicValidation::SendMessage() {\n     return true;\n }\n \n-void AltLogicValidation::InitializeNode(uint32_t driver_id, TransportCapabilities caps, uint32_t node_id) {}\n+void AltLogicValidation::InitializeNode(uint32_t driver_id, TransportCapabilities caps, uint32_t node_id) {\n+    CAltNodeState node(driver_id, caps);\n+    LOCK(cs_vNodeState);\n+    mapNodeState.emplace(node_id, node);\n+}\n \n void AltLogicValidation::FinalizeNode() {}"
      },
      {
        "sha": "a2deabe8ca37f379870c7136f5d422702a359339",
        "filename": "src/alt_processing.h",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/alt_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/alt_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.h?ref=ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
        "patch": "@@ -6,13 +6,38 @@\n #define BITCOIN_ALT_PROCESSING_H\n \n #include <altnet.h>\n+\n #include <drivers.h>\n+#include <sync.h>\n+#include <validation.h>\n+\n+#include <map>\n \n class CAltstack;\n \n+/* Maitains validation-specific state about nodes */\n+class CAltNodeState {\n+private:\n+    /* Host driver id */\n+    uint32_t driver_id;\n+    /* Capabilities supported by this peer */\n+    TransportCapabilities caps;\n+    /* Best header received from this peer */\n+    const CBlockIndex *pindexBestHeaderReceived;\n+    friend class AltLogicValidation;\n+public:\n+    CAltNodeState(uint32_t driver_id, TransportCapabilities caps) :\n+        driver_id(driver_id), caps(caps), pindexBestHeaderReceived(nullptr) {}\n+};\n+\n class AltLogicValidation final {\n private:\n     CAltstack* const m_altstack;\n+\n+    RecursiveMutex cs_vNodeState;\n+    std::map<uint32_t, CAltNodeState> mapNodeState GUARDED_BY(cs_vNodeState);\n+\n+    CAltNodeState *State(uint32_t node_id);\n public:\n     AltLogicValidation(CAltstack* altstack);\n     /** Initialize a peer */"
      },
      {
        "sha": "194c671687be3d5bb8f1744b4a513e70395b9038",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
        "patch": "@@ -52,6 +52,10 @@ void CAltstack::ThreadWarmupDrivers()\n         //TODO: CDriver::LoadAtInit() ?\n         pdriver->SetId(id);\n         pdriver->Warmup();\n+        if (pdriver->Warmup()) { // Warmup==true implies default connection\n+            m_msgproc->InitializeNode(pdriver->GetId(), pdriver->GetCapabilities(), m_node_id);\n+            m_node_id++;\n+        }\n         id++;\n     }\n }"
      }
    ]
  },
  {
    "sha": "9335da7e2513e57ccbbe960782e67fed6bf67fd4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MzM1ZGE3ZTI1MTNlNTdjY2JiZTk2MDc4MmU2N2ZlZDZiZjY3ZmQ0",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T23:46:40Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:10:14Z"
      },
      "message": "[altnet] Add mapNodesDriver, mapping node_id back to their driver",
      "tree": {
        "sha": "b40acc1b781b446ecc9d783e77238de97b96887a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b40acc1b781b446ecc9d783e77238de97b96887a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9335da7e2513e57ccbbe960782e67fed6bf67fd4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9335da7e2513e57ccbbe960782e67fed6bf67fd4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9335da7e2513e57ccbbe960782e67fed6bf67fd4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9335da7e2513e57ccbbe960782e67fed6bf67fd4/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ae1e3f0fc0e190a5487ac6d4dcaf4125688c4359"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "55b137773405637e193a1be9a209891582acc4e5",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9335da7e2513e57ccbbe960782e67fed6bf67fd4/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9335da7e2513e57ccbbe960782e67fed6bf67fd4/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=9335da7e2513e57ccbbe960782e67fed6bf67fd4",
        "patch": "@@ -47,11 +47,12 @@ void CAltstack::Interrupt() {\n void CAltstack::ThreadWarmupDrivers()\n {\n     uint32_t id = 0;\n-    LOCK(cs_vDrivers);\n+    LOCK2(cs_vDrivers, cs_vNodesDriver);\n     for (auto&& pdriver: vDrivers) {\n         //TODO: CDriver::LoadAtInit() ?\n         pdriver->SetId(id);\n         pdriver->Warmup();\n+        mapNodesDriver.emplace(id, pdriver);\n         if (pdriver->Warmup()) { // Warmup==true implies default connection\n             m_msgproc->InitializeNode(pdriver->GetId(), pdriver->GetCapabilities(), m_node_id);\n             m_node_id++;\n@@ -104,3 +105,10 @@ void CAltstack::ThreadAltProcessing()\n         m_msgproc->SendMessage();\n     }\n }\n+\n+CDriver *CAltstack::Driver(uint32_t node_id) {\n+    std::map<uint32_t, CDriver*>::iterator it = mapNodesDriver.find(node_id);\n+    if (it == mapNodesDriver.end())\n+        return nullptr;\n+    return it->second;\n+}"
      },
      {
        "sha": "b1353991265046d03875eadffc681bd22b00b85f",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9335da7e2513e57ccbbe960782e67fed6bf67fd4/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9335da7e2513e57ccbbe960782e67fed6bf67fd4/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=9335da7e2513e57ccbbe960782e67fed6bf67fd4",
        "patch": "@@ -13,6 +13,8 @@\n #include <streams.h>\n #include <sync.h>\n #include <util/system.h>\n+\n+#include <map>\n #include <vector>\n \n class AltLogicValidation;\n@@ -43,12 +45,17 @@ class CAltstack\n     RecursiveMutex cs_vDrivers;\n     std::vector<CDriver*> vDrivers GUARDED_BY(cs_vDrivers);\n \n+    RecursiveMutex cs_vNodesDriver;\n+    std::map<uint32_t, CDriver*> mapNodesDriver GUARDED_BY(cs_vNodesDriver);\n+\n     std::thread threadWarmupDrivers;\n     std::thread threadHandleDrivers;\n     std::thread threadAltProcessing;\n \n     AltLogicValidation* m_msgproc;\n \n+    CDriver *Driver(uint32_t node_id);\n+\n public:\n     CAltstack();\n     ~CAltstack();"
      }
    ]
  },
  {
    "sha": "b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOGY0MzgzNGJmZjZjMmQzNDBkNTA0ZjJmM2QwYzBmYzNiNDczZjBm",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T23:48:14Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:10:36Z"
      },
      "message": "[altnet] Add PushMessage to send message from processing\n\nPushMessage dispatch message to the requested driver.",
      "tree": {
        "sha": "9b5df7c516e4c92f007432ba42bc21328da4df00",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9b5df7c516e4c92f007432ba42bc21328da4df00"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "9335da7e2513e57ccbbe960782e67fed6bf67fd4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9335da7e2513e57ccbbe960782e67fed6bf67fd4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9335da7e2513e57ccbbe960782e67fed6bf67fd4"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "651c26a3850e1163e396f2d3ab881a401a16d06d",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
        "patch": "@@ -112,3 +112,10 @@ CDriver *CAltstack::Driver(uint32_t node_id) {\n         return nullptr;\n     return it->second;\n }\n+\n+void CAltstack::PushMessage(uint32_t driver_id, CSerializedNetMsg&& msg)\n+{\n+    LOCK(cs_vDrivers);\n+    CDriver *driver = Driver(driver_id);\n+    driver->Send(std::move(msg));\n+}"
      },
      {
        "sha": "7dc422af08c9933b6b7d82224906222956ba6163",
        "filename": "src/altnet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f/src/altnet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f/src/altnet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.h?ref=b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
        "patch": "@@ -8,6 +8,8 @@\n \n #include <alt_processing.h>\n #include <drivers.h>\n+#include <net.h>\n+#include <netmessagemaker.h>\n #include <thread>\n #include <threadinterrupt.h>\n #include <streams.h>\n@@ -67,6 +69,8 @@ class CAltstack\n     void ThreadWarmupDrivers();\n     void ThreadHandleDrivers();\n     void ThreadAltProcessing();\n+\n+    void PushMessage(uint32_t node_id, CSerializedNetMsg&& msg);\n };\n \n #endif // BITCOIN_ALTNET_H"
      }
    ]
  },
  {
    "sha": "ebdea790d4e51a9c1513e4e9469603722e208003",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYmRlYTc5MGQ0ZTUxYTljMTUxM2U0ZTk0Njk2MDM3MjJlMjA4MDAz",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-13T23:10:05Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:13:27Z"
      },
      "message": "[alt_processing] Support GETHEADERS processing\n\nAt GETHEADERS reception if peer capabilities support sending we\nreply back with headers.",
      "tree": {
        "sha": "e3ecaa814aecfe8f3eae813cffac33ce2ee4e805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3ecaa814aecfe8f3eae813cffac33ce2ee4e805"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ebdea790d4e51a9c1513e4e9469603722e208003",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdea790d4e51a9c1513e4e9469603722e208003",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdea790d4e51a9c1513e4e9469603722e208003",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdea790d4e51a9c1513e4e9469603722e208003/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b8f43834bff6c2d340d504f2f3d0c0fc3b473f0f"
      }
    ],
    "stats": {
      "total": 33,
      "additions": 33,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bf0ca864ab7e757f90463928aa5f0d4cb92a414b",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 0,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ebdea790d4e51a9c1513e4e9469603722e208003/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ebdea790d4e51a9c1513e4e9469603722e208003/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=ebdea790d4e51a9c1513e4e9469603722e208003",
        "patch": "@@ -4,6 +4,9 @@\n \n #include <alt_processing.h>\n \n+#include <primitives/block.h>\n+#include <protocol.h>\n+\n AltLogicValidation::AltLogicValidation(CAltstack* altstack)\n     : m_altstack(altstack)\n {}\n@@ -16,6 +19,36 @@ CAltNodeState *AltLogicValidation::State(uint32_t node_id) {\n }\n \n bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n+    if (msg.m_command == NetMsgType::GETHEADERS) {\n+\n+        LOCK(cs_vNodeState);\n+        CAltNodeState *node = State(msg.m_node_id);\n+        // Peer ask for a reply, check receiving capability\n+        if (!node->caps.fReceiving)\n+            return false;\n+\n+        CBlockLocator locator;\n+        uint256 hashStop;\n+        msg.m_recv >> locator >> hashStop;\n+\n+        //TODO: implement checks\n+        const CBlockIndex* pindex = nullptr;\n+        pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+        if (pindex)\n+            pindex = ::ChainActive().Next(pindex);\n+\n+        std::vector<CBlock> vHeaders;\n+        for (; pindex; pindex = ::ChainActive().Next(pindex))\n+        {\n+            vHeaders.push_back(pindex->GetBlockHeader());\n+            if (pindex->GetBlockHash() == hashStop)\n+                break;\n+        }\n+        const CNetMsgMaker msgMaker(209);\n+        if (vHeaders.size() > 0)\n+            m_altstack->PushMessage(node->driver_id, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n+        return true;\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "d6e4b3d61b9048efb10a4449bac48cb210dd785c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNmU0YjNkNjFiOTA0OGVmYjEwYTQ0NDliYWM0OGNiMjEwZGQ3ODVj",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-14T00:28:11Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:13:37Z"
      },
      "message": "[alt_processing] Implement CWatchdogInterface for AltLogicValidation\n\nThis is used in next commit.",
      "tree": {
        "sha": "2c1046fac29dc12d4d4882a9d200644b6ee904da",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c1046fac29dc12d4d4882a9d200644b6ee904da"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d6e4b3d61b9048efb10a4449bac48cb210dd785c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e4b3d61b9048efb10a4449bac48cb210dd785c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e4b3d61b9048efb10a4449bac48cb210dd785c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e4b3d61b9048efb10a4449bac48cb210dd785c/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ebdea790d4e51a9c1513e4e9469603722e208003",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ebdea790d4e51a9c1513e4e9469603722e208003",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ebdea790d4e51a9c1513e4e9469603722e208003"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ad42f5def716d95b1a9495b0a1b49e86024f413b",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e4b3d61b9048efb10a4449bac48cb210dd785c/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e4b3d61b9048efb10a4449bac48cb210dd785c/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=d6e4b3d61b9048efb10a4449bac48cb210dd785c",
        "patch": "@@ -63,3 +63,5 @@ void AltLogicValidation::InitializeNode(uint32_t driver_id, TransportCapabilitie\n }\n \n void AltLogicValidation::FinalizeNode() {}\n+\n+void AltLogicValidation::BlockHeaderAnomalie() {}"
      },
      {
        "sha": "8a358fc4d3a67f65977778c78fcd1d77f6cb95b8",
        "filename": "src/alt_processing.h",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d6e4b3d61b9048efb10a4449bac48cb210dd785c/src/alt_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d6e4b3d61b9048efb10a4449bac48cb210dd785c/src/alt_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.h?ref=d6e4b3d61b9048efb10a4449bac48cb210dd785c",
        "patch": "@@ -10,6 +10,7 @@\n #include <drivers.h>\n #include <sync.h>\n #include <validation.h>\n+#include <watchdoginterface.h>\n \n #include <map>\n \n@@ -30,7 +31,7 @@ class CAltNodeState {\n         driver_id(driver_id), caps(caps), pindexBestHeaderReceived(nullptr) {}\n };\n \n-class AltLogicValidation final {\n+class AltLogicValidation final : public CWatchdogInterface {\n private:\n     CAltstack* const m_altstack;\n \n@@ -52,6 +53,11 @@ class AltLogicValidation final {\n      * Send queued protocol messages to be sent to a given node id\n      */\n     bool SendMessage();\n+\n+    /**\n+     * Overriden from CValidationInterface *\n+     */\n+    void BlockHeaderAnomalie();\n };\n \n #endif // BITCOIN_ALT_PROCESSING_H"
      }
    ]
  },
  {
    "sha": "10794716b0e609fe993a634371dbfc899bd6b75a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDc5NDcxNmIwZTYwOWZlOTkzYTYzNDM3MWRiZmM4OTliZDZiNzVh",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-14T00:50:06Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:16:49Z"
      },
      "message": "[alt_processing] Implement \"anycast\" block headers fetching\n\n\"Anycast\" is a header-fetching strategy where any abstract drivers\nsupporting header and bidirectionality is send a GETHEADERS, aiming\nto receive back a longuer-valid headers chain.",
      "tree": {
        "sha": "6feaa5c001049fb4d60a9f7e93490d7a471a18c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6feaa5c001049fb4d60a9f7e93490d7a471a18c8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/10794716b0e609fe993a634371dbfc899bd6b75a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10794716b0e609fe993a634371dbfc899bd6b75a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/10794716b0e609fe993a634371dbfc899bd6b75a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10794716b0e609fe993a634371dbfc899bd6b75a/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d6e4b3d61b9048efb10a4449bac48cb210dd785c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d6e4b3d61b9048efb10a4449bac48cb210dd785c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d6e4b3d61b9048efb10a4449bac48cb210dd785c"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "1aaa36f65f9576fff8cc482e6368733f8d191bf8",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/10794716b0e609fe993a634371dbfc899bd6b75a/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/10794716b0e609fe993a634371dbfc899bd6b75a/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=10794716b0e609fe993a634371dbfc899bd6b75a",
        "patch": "@@ -64,4 +64,15 @@ void AltLogicValidation::InitializeNode(uint32_t driver_id, TransportCapabilitie\n \n void AltLogicValidation::FinalizeNode() {}\n \n-void AltLogicValidation::BlockHeaderAnomalie() {}\n+void AltLogicValidation::BlockHeaderAnomalie() {\n+    LOCK(cs_main);\n+    CBlockIndex *pindexBestHeader = ::ChainActive().Tip();\n+    const CNetMsgMaker msgMaker(209);\n+\n+    // \"Anycast\" headers fetching\n+    for (std::map<uint32_t, CAltNodeState>::iterator iter = mapNodeState.begin(); iter != mapNodeState.end(); iter++)\n+    {\n+        if (iter->second.caps.fSending && iter->second.caps.fReceiving && iter->second.caps.fHeaders)\n+            m_altstack->PushMessage(iter->second.driver_id, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), uint256()));\n+    }\n+}"
      }
    ]
  },
  {
    "sha": "ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYjZmYWE1NTNiNmRmZTljOWQyNzlmODE3ZGVlYThmNDFjOWJkY2Yx",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-14T01:23:05Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:18:47Z"
      },
      "message": "[alt_processing] Integrate some basic logging",
      "tree": {
        "sha": "c12330e2e18d75c6fd7216747de4e3975c3b6139",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c12330e2e18d75c6fd7216747de4e3975c3b6139"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "10794716b0e609fe993a634371dbfc899bd6b75a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/10794716b0e609fe993a634371dbfc899bd6b75a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/10794716b0e609fe993a634371dbfc899bd6b75a"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e403c563bb8aa44051031a6dffd65a0e60d02b12",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "patch": "@@ -21,6 +21,8 @@ CAltNodeState *AltLogicValidation::State(uint32_t node_id) {\n bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n     if (msg.m_command == NetMsgType::GETHEADERS) {\n \n+        LogPrint(BCLog::ALTSTACK, \"Receive GETHEADERS from %d\\n\", msg.m_node_id);\n+\n         LOCK(cs_vNodeState);\n         CAltNodeState *node = State(msg.m_node_id);\n         // Peer ask for a reply, check receiving capability\n@@ -33,7 +35,10 @@ bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n \n         //TODO: implement checks\n         const CBlockIndex* pindex = nullptr;\n+        const CBlockIndex* tip = nullptr;\n+        tip = ::ChainActive().Tip();\n         pindex = FindForkInGlobalIndex(::ChainActive(), locator);\n+        LogPrint(BCLog::ALTSTACK, \"Fetch header starting from %s, tip %s\\n\", pindex->GetBlockHeader().GetHash().ToString(), tip->GetBlockHeader().GetHash().ToString());\n         if (pindex)\n             pindex = ::ChainActive().Next(pindex);\n \n@@ -44,6 +49,7 @@ bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n             if (pindex->GetBlockHash() == hashStop)\n                 break;\n         }\n+        LogPrint(BCLog::ALTSTACK, \"Sending back %d headers\\n\", vHeaders.size());\n         const CNetMsgMaker msgMaker(209);\n         if (vHeaders.size() > 0)\n             m_altstack->PushMessage(node->driver_id, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n@@ -69,6 +75,10 @@ void AltLogicValidation::BlockHeaderAnomalie() {\n     CBlockIndex *pindexBestHeader = ::ChainActive().Tip();\n     const CNetMsgMaker msgMaker(209);\n \n+    const CBlockIndex* pindex = nullptr;\n+    pindex = ::ChainActive().Tip();\n+    LogPrint(BCLog::ALTSTACK, \"Block header anomalie detected - Anycasting header fetching from %s\\n\", pindex->GetBlockHeader().GetHash().ToString());\n+\n     // \"Anycast\" headers fetching\n     for (std::map<uint32_t, CAltNodeState>::iterator iter = mapNodeState.begin(); iter != mapNodeState.end(); iter++)\n     {"
      },
      {
        "sha": "f32ed216c7bfec736184b5ee618adee50f40d141",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "patch": "@@ -18,6 +18,7 @@ CAltstack::~CAltstack()\n \n bool CAltstack::Start(AltLogicValidation *alt_logic)\n {\n+    LogPrint(BCLog::ALTSTACK, \"Boostrapping Altstack\\n\");\n     m_msgproc = alt_logic;\n     interruptNet.reset();\n     flagInterruptAltProc = false;"
      },
      {
        "sha": "5e1f542f251c192b3d552ff4ef454ecbf84812f8",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "patch": "@@ -163,6 +163,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::QT, \"qt\"},\n     {BCLog::LEVELDB, \"leveldb\"},\n     {BCLog::VALIDATION, \"validation\"},\n+    {BCLog::ALTSTACK, \"altstack\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "d9d637ef54cbe616c5f3b349d30ceae150150d21",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "patch": "@@ -55,6 +55,7 @@ namespace BCLog {\n         QT          = (1 << 19),\n         LEVELDB     = (1 << 20),\n         VALIDATION  = (1 << 21),\n+        ALTSTACK    = (1 << 22),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "a1f9ef6c9c40fab078ad36357e348a8962b15aa6",
        "filename": "src/watchdog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/watchdog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1/src/watchdog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/watchdog.cpp?ref=ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <watchdog.h>\n \n+#include <logging.h>\n #include <util/time.h>\n #include <watchdoginterface.h>\n \n@@ -16,6 +17,7 @@ CWatchdog::~CWatchdog() {}\n \n void CWatchdog::ScanAnomalies()\n {\n+    LogPrint(BCLog::ALTSTACK, \"Block header anomalie detected - notifying subscribers\\n\");\n     GetWatchSignals().BlockHeaderAnomalie();\n }\n "
      }
    ]
  },
  {
    "sha": "e7ff7a579669b4f476dea2d6502544152703e2ce",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2ZmN2E1Nzk2NjliNGY0NzZkZWEyZDY1MDI1NDQxNTI3MDNlMmNl",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T06:47:31Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:18:54Z"
      },
      "message": "[bugfix] Fix locking logic\n\nAs this whole patch is a PoC, threading and locking model is\nnon-robust.",
      "tree": {
        "sha": "e37f53dff16d731d622a063c3f8462affb0cc08e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e37f53dff16d731d622a063c3f8462affb0cc08e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7ff7a579669b4f476dea2d6502544152703e2ce",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ff7a579669b4f476dea2d6502544152703e2ce",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ff7a579669b4f476dea2d6502544152703e2ce",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ff7a579669b4f476dea2d6502544152703e2ce/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab6faa553b6dfe9c9d279f817deea8f41c9bdcf1"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 2,
      "deletions": 1
    },
    "files": [
      {
        "sha": "bf35c8e459678aaf6d8f91b1d7c73091ab381d37",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7ff7a579669b4f476dea2d6502544152703e2ce/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7ff7a579669b4f476dea2d6502544152703e2ce/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=e7ff7a579669b4f476dea2d6502544152703e2ce",
        "patch": "@@ -97,7 +97,8 @@ void CAltstack::ThreadAltProcessing()\n {\n     while (!flagInterruptAltProc) {\n         {\n-            LOCK(cs_vRecvMsg);\n+            LOCK(cs_main);\n+            LOCK2(cs_vDrivers, cs_vRecvMsg);\n             for (auto&& msg: vRecvMsg) {\n                 m_msgproc->ProcessMessage(msg);\n             }"
      }
    ]
  },
  {
    "sha": "06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNmM0NTZhN2NmMWM4MzVhYjBlNWQ2ZDZmYzU4Y2U4NjIyOWM0NWNi",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-14T09:01:48Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:19:36Z"
      },
      "message": "[alt_processing] Support HEADERS processing\n\nAt HEADERS reception we print headers received against our\non tip.\n\nThis processing may be easily plug to some validation interface\nto call ProcessNewBlockHeaders.",
      "tree": {
        "sha": "e867572936e9931d672448893360b8e57039eab0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e867572936e9931d672448893360b8e57039eab0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "e7ff7a579669b4f476dea2d6502544152703e2ce",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7ff7a579669b4f476dea2d6502544152703e2ce",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7ff7a579669b4f476dea2d6502544152703e2ce"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e8a727b672eb622b42a0d51b979e6bd370877dbe",
        "filename": "src/alt_processing.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb/src/alt_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb/src/alt_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/alt_processing.cpp?ref=06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
        "patch": "@@ -55,6 +55,21 @@ bool AltLogicValidation::ProcessMessage(CAltMsg& msg) {\n             m_altstack->PushMessage(node->driver_id, msgMaker.Make(NetMsgType::HEADERS, vHeaders));\n         return true;\n     }\n+    if (msg.m_command == NetMsgType::HEADERS) {\n+\n+        LogPrint(BCLog::ALTSTACK, \"Receive HEADERS from %d\\n\", msg.m_node_id);\n+\n+        std::vector<CBlockHeader> headers;\n+\n+        unsigned int nCount = ReadCompactSize(msg.m_recv);\n+        headers.resize(nCount);\n+        for (unsigned int n = 0; n < nCount; n++) {\n+            msg.m_recv >> headers[n];\n+        }\n+        const CBlockIndex* pindex = nullptr;\n+        pindex = ::ChainActive().Tip();\n+        LogPrint(BCLog::ALTSTACK, \"Receiver header %s vs tip %s\\n\", headers[0].GetHash().ToString(), pindex->GetBlockHeader().GetHash().ToString());\n+    }\n     return true;\n }\n "
      }
    ]
  },
  {
    "sha": "3667d18a76f72acf0741a886715b6c9fee40001d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjY3ZDE4YTc2ZjcyYWNmMDc0MWE4ODY3MTViNmM5ZmVlNDAwMDFk",
    "commit": {
      "author": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-14T08:45:17Z"
      },
      "committer": {
        "name": "Antoine Riard",
        "email": "ariard@student.42.fr",
        "date": "2020-05-16T07:20:33Z"
      },
      "message": "[drivers] Add ClighntingDriver support\n\nClightningDriver connects through a bridge to a C-lightning node\nto exchange headers on the LN transport layer through custom LN\nmessages.\n\nPlugin uses C-lightning's `sendcustommessage` rpc aand \"custommsg\" hook.",
      "tree": {
        "sha": "df0e24eb63edffcab8243a44776da7dfa83c8437",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/df0e24eb63edffcab8243a44776da7dfa83c8437"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3667d18a76f72acf0741a886715b6c9fee40001d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3667d18a76f72acf0741a886715b6c9fee40001d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3667d18a76f72acf0741a886715b6c9fee40001d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3667d18a76f72acf0741a886715b6c9fee40001d/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06c456a7cf1c835ab0e5d6d6fc58ce86229c45cb"
      }
    ],
    "stats": {
      "total": 188,
      "additions": 188,
      "deletions": 0
    },
    "files": [
      {
        "sha": "53682cd6a7a4efdfee69c342d8a5318da99dfc8b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3667d18a76f72acf0741a886715b6c9fee40001d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=3667d18a76f72acf0741a886715b6c9fee40001d",
        "patch": "@@ -132,6 +132,7 @@ BITCOIN_CORE_H = \\\n   core_memusage.h \\\n   cuckoocache.h \\\n   drivers.h \\\n+  drivers/clightning.h \\\n   flatfile.h \\\n   fs.h \\\n   httprpc.h \\\n@@ -284,6 +285,7 @@ libbitcoin_server_a_SOURCES = \\\n   blockfilter.cpp \\\n   chain.cpp \\\n   consensus/tx_verify.cpp \\\n+  drivers/clightning.cpp \\\n   flatfile.cpp \\\n   httprpc.cpp \\\n   httpserver.cpp \\"
      },
      {
        "sha": "6ccbbe1998e094cffabb892c1100faca8981e422",
        "filename": "src/altnet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/altnet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3667d18a76f72acf0741a886715b6c9fee40001d/src/altnet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/altnet.cpp?ref=3667d18a76f72acf0741a886715b6c9fee40001d",
        "patch": "@@ -5,6 +5,11 @@\n \n #include <altnet.h>\n \n+#include <drivers/clightning.h>\n+\n+//TODO: hack, need dynamic module loading\n+std::unique_ptr<ClightningDriver> g_clightning = MakeUnique<ClightningDriver>();\n+\n CAltstack::CAltstack() {\n     m_node_id = 0;\n }\n@@ -23,6 +28,8 @@ bool CAltstack::Start(AltLogicValidation *alt_logic)\n     interruptNet.reset();\n     flagInterruptAltProc = false;\n \n+    vDrivers.emplace_back(std::move(g_clightning.get()));\n+\n     threadWarmupDrivers = std::thread(&TraceThread<std::function<void()> >, \"drivers-warmup\", std::function<void()>(std::bind(&CAltstack::ThreadWarmupDrivers, this)));\n \n     threadHandleDrivers = std::thread(&TraceThread<std::function<void()> >, \"altstack-handle\", std::function<void()>(std::bind(&CAltstack::ThreadHandleDrivers, this)));"
      },
      {
        "sha": "3dfddc3f2df9804ec9206555605c11281a0a3a5c",
        "filename": "src/drivers/clightning.cpp",
        "status": "added",
        "additions": 128,
        "deletions": 0,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/drivers/clightning.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3667d18a76f72acf0741a886715b6c9fee40001d/src/drivers/clightning.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drivers/clightning.cpp?ref=3667d18a76f72acf0741a886715b6c9fee40001d",
        "patch": "@@ -0,0 +1,128 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <drivers/clightning.h>\n+\n+#include <altnet.h>\n+#include <drivers.h>\n+\n+#include <sys/socket.h>\n+#include <netinet/in.h>\n+#include <arpa/inet.h>\n+#include <string.h>\n+\n+bool ClightningDriver::Warmup() {\n+    struct protoent *proto;\n+    struct sockaddr_in sin;\n+\n+    LogPrint(BCLog::ALTSTACK, \"Clightning - Warmup\\n\");\n+    if ((proto = getprotobyname(\"tcp\")) == 0)\n+        return false;\n+\n+    /* Establish socket */\n+    if ((driver_socket = socket(AF_INET, SOCK_STREAM, proto->p_proto)) == -1) {\n+        LogPrint(BCLog::ALTSTACK, \"Clightning - Bridge socket failure\\n\");\n+        return false;\n+    }\n+\n+    sin.sin_family = AF_INET;\n+    sin.sin_port = htons(hardcoded_port);\n+    sin.sin_addr.s_addr = inet_addr(hardcoded_addr);\n+\n+    /* Connect to bridge */\n+    if (connect(driver_socket, (const struct sockaddr *)&sin, sizeof(sin)) == -1) {\n+        LogPrint(BCLog::ALTSTACK, \"Clightning - Bridge connect failure\\n\");\n+        return false;\n+    }\n+\n+    LogPrint(BCLog::ALTSTACK, \"Clightning - Bridge connection\\n\");\n+\n+    offset = 0;\n+    return true;\n+}\n+\n+bool ClightningDriver::Flush() {\n+    auto it = vSendMsg.begin();\n+\n+    while (it != vSendMsg.end()) {\n+        const auto &data = *it;\n+        int nBytes = 0;\n+        nBytes = send(driver_socket, reinterpret_cast<const char*>(data.data()) + offset, data.size() - offset, MSG_NOSIGNAL | MSG_DONTWAIT);\n+\n+        if (nBytes > 0) {\n+            LogPrint(BCLog::ALTSTACK, \"Cligthning - Bridge send success %d\\n\", nBytes);\n+            offset += nBytes;\n+            if (offset == data.size()) {\n+                offset = 0;\n+                it++;\n+            } else {\n+                break;\n+            }\n+        } else {\n+            if (nBytes < 0) {\n+                LogPrint(BCLog::ALTSTACK, \"Cligthning - Bridge send failure\\n\");\n+                return false;\n+            }\n+            break;\n+        }\n+    }\n+\n+    vSendMsg.erase(vSendMsg.begin(), it);\n+    return true;\n+}\n+\n+bool ClightningDriver::Receive(CAltMsg& msg) {\n+    char pchBuf[0x10000];\n+    int nBytes = 0;\n+    nBytes = recv(driver_socket, pchBuf, sizeof(pchBuf), MSG_DONTWAIT);\n+    if (nBytes > 0) {\n+        LogPrint(BCLog::ALTSTACK, \"Cligtning - Bridge receive success\\n\");\n+        msg.m_recv.resize(256 * 1024);\n+\n+        // Parse message command from its LN message type\n+        if (pchBuf[1] == 0x35) {\n+            msg.m_command = NetMsgType::GETHEADERS;\n+        } else if (pchBuf[1] == 0x37) {\n+            msg.m_command = NetMsgType::HEADERS;\n+        } else {\n+            LogPrint(BCLog::ALTSTACK, \"Cligtning - Bridge receive unknown cmd %x%x\\n\", pchBuf[0], pchBuf[1]);\n+        }\n+\n+        // Associate unique node_id\n+        msg.m_node_id = 0; // hack\n+        memcpy(&msg.m_recv[0], pchBuf+2, nBytes-2);\n+    } else {\n+        //LogPrint(BCLog::ALTSTACK, \"Cligtning - Bridge receive failure\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n+bool ClightningDriver::Listen(uint32_t potential_node_id) {\n+    return false;\n+}\n+\n+bool ClightningDriver::Send(CSerializedNetMsg msg) {\n+\n+    // Pre-process message with its LN message type\n+    std::vector<unsigned char>::iterator it;\n+    if (msg.command == NetMsgType::GETHEADERS) {\n+        LogPrint(BCLog::ALTSTACK, \"Clightning - Preprocessing getheader\\n\");\n+        it = msg.data.begin();\n+        msg.data.insert(it, 0x35);\n+        msg.data.insert(it, 0x82);\n+    }\n+    if (msg.command == NetMsgType::HEADERS) {\n+        LogPrint(BCLog::ALTSTACK, \"Clightning - Preprocessing header\\n\");\n+        it = msg.data.begin();\n+        msg.data.insert(it, 0x37);\n+        msg.data.insert(it, 0x82);\n+    }\n+    vSendMsg.push_back(std::move(msg.data));\n+    return true;\n+}\n+\n+TransportCapabilities ClightningDriver::GetCapabilities() {\n+    return TransportCapabilities(true, true, true);\n+}"
      },
      {
        "sha": "da45af6c58b728890c63935388a9bd942392684f",
        "filename": "src/drivers/clightning.h",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3667d18a76f72acf0741a886715b6c9fee40001d/src/drivers/clightning.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3667d18a76f72acf0741a886715b6c9fee40001d/src/drivers/clightning.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/drivers/clightning.h?ref=3667d18a76f72acf0741a886715b6c9fee40001d",
        "patch": "@@ -0,0 +1,51 @@\n+// Copyright (c) 2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CLIGHTNING_H\n+#define BITCOIN_CLIGHTNING_H\n+\n+#include <altnet.h>\n+#include <drivers.h>\n+\n+class ClightningDriver final : public CDriver {\n+private:\n+    int hardcoded_port = 10309;\n+    const char*  hardcoded_addr = \"127.0.0.1\";\n+    int driver_socket{0};\n+    size_t offset{0};\n+\n+    std::deque<std::vector<unsigned char>> vSendMsg;\n+public:\n+    /**\n+     * Overriden from CDriver\n+     */\n+    bool Warmup() override;\n+\n+    /**\n+     * Overriden from CDriver\n+     */\n+    bool Flush() override;\n+\n+    /**\n+     * Overriden from CDriver\n+     */\n+    bool Receive(CAltMsg& msg) override;\n+\n+    /*\n+     * Overriden from CDriver\n+     */\n+    bool Listen(uint32_t potential_node_id) override;\n+\n+    /*\n+     * Overriden from CDriver\n+     */\n+    bool Send(CSerializedNetMsg msg) override;\n+\n+    /*\n+     * Overriden from CDriver\n+     */\n+    TransportCapabilities GetCapabilities() override;\n+};\n+\n+#endif"
      }
    ]
  }
]