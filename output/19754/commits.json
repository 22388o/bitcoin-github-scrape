[
  {
    "sha": "f1ee37319a7a211e5fb325406d62db5b61dbd30e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWVlMzczMTlhN2EyMTFlNWZiMzI1NDA2ZDYyZGI1YjYxZGJkMzBl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-08-17T19:21:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-09-01T16:13:50Z"
      },
      "message": "wallet: Reload previously loaded wallets on GUI startup\n\nEnable the GUI to also use the load_on_startup feature.\nWallets loaded in the GUI always have load_on_startup=true.\nWhen they are unloaded from the GUI, load_on_startup=false.\n\nTo facilitate this change, UpdateWalletSetting is moved into the wallet\nmodule and called from within LoadWallet, RemoveWallet, and\nCreatewallet. This change does not actually touch the GUI code but\nrather the wallet functions that are shared between the GUI and RPC.",
      "tree": {
        "sha": "c2d5552423172f378ce6c3b8fd34ace41404f0b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c2d5552423172f378ce6c3b8fd34ace41404f0b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ee37319a7a211e5fb325406d62db5b61dbd30e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ee37319a7a211e5fb325406d62db5b61dbd30e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ee37319a7a211e5fb325406d62db5b61dbd30e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ee37319a7a211e5fb325406d62db5b61dbd30e/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89a8299a14af68c1f96ca1650cbfd4fc2952e77b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89a8299a14af68c1f96ca1650cbfd4fc2952e77b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89a8299a14af68c1f96ca1650cbfd4fc2952e77b"
      }
    ],
    "stats": {
      "total": 181,
      "additions": 104,
      "deletions": 77
    },
    "files": [
      {
        "sha": "1ab817b0e59684c5215106f72e0e95c4f70e94ae",
        "filename": "doc/release-notes-15937.md",
        "status": "modified",
        "additions": 11,
        "deletions": 8,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/doc/release-notes-15937.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/doc/release-notes-15937.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-15937.md?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -1,12 +1,15 @@\n Configuration\n -------------\n \n-The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n-`load_on_startup` options that modify bitcoin's dynamic configuration in\n-`\\<datadir\\>/settings.json`, and can add or remove a wallet from the list of\n-wallets automatically loaded at startup. Unless these options are explicitly\n-set to true or false, the load on startup wallet list is not modified, so this\n-change is backwards compatible.\n+Wallets created or loaded in the GUI will now be automatically loaded on\n+startup, so they don't need to be manually reloaded next time Bitcoin is\n+started. The list of wallets to load on startup is stored in\n+`\\<datadir\\>/settings.json` and augments any command line or `bitcoin.conf`\n+`-wallet=` settings that specify more wallets to load. Wallets that are\n+unloaded in the GUI get removed from the settings list so they won't load again\n+automatically next startup. (#19754)\n \n-In the future, the GUI will start updating the same startup wallet list as the\n-RPCs to automatically reopen wallets previously opened in the GUI.\n+The `createwallet`, `loadwallet`, and `unloadwallet` RPCs now accept\n+`load_on_startup` options to modify the settings list. Unless these options are\n+explicitly set to true or false, the list is not modified, so the RPC methods\n+remain backwards compatible. (#15937)"
      },
      {
        "sha": "28839b2ffc7fc27e7543d49745063c91983825d7",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -446,7 +446,7 @@ class WalletImpl : public Wallet\n     CAmount getDefaultMaxTxFee() override { return m_wallet->m_default_max_tx_fee; }\n     void remove() override\n     {\n-        RemoveWallet(m_wallet);\n+        RemoveWallet(m_wallet, false /* load_on_start */);\n     }\n     bool isLegacy() override { return m_wallet->IsLegacy(); }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n@@ -517,12 +517,12 @@ class WalletClientImpl : public WalletClient\n     std::unique_ptr<Wallet> createWallet(const std::string& name, const SecureString& passphrase, uint64_t wallet_creation_flags, WalletCreationStatus& status, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, true /* load_on_start */, error, warnings, wallet);\n         return MakeWallet(std::move(wallet));\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_context.chain, WalletLocation(name), error, warnings));\n+        return MakeWallet(LoadWallet(*m_context.chain, WalletLocation(name), true /* load_on_start */, error, warnings));\n     }\n     std::string getWalletDir() override\n     {"
      },
      {
        "sha": "d6781460a71bc049a228b9af7ba18bd79af7cb14",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -112,7 +112,7 @@ void TestAddAddressesToSendBook(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet);\n+    RemoveWallet(wallet, nullopt);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n "
      },
      {
        "sha": "98065803e9bc559fc932a84b30587ebe2fc92c1a",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -167,7 +167,7 @@ void TestGUI(interfaces::Node& node)\n     ClientModel clientModel(node, &optionsModel);\n     AddWallet(wallet);\n     WalletModel walletModel(interfaces::MakeWallet(wallet), clientModel, platformStyle.get());\n-    RemoveWallet(wallet);\n+    RemoveWallet(wallet, nullopt);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n "
      },
      {
        "sha": "5bbc8b91f714a9ef46ee53e1cfa6633907227f18",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 24,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -118,30 +118,8 @@ void UnloadWallets()\n     while (!wallets.empty()) {\n         auto wallet = wallets.back();\n         wallets.pop_back();\n-        RemoveWallet(wallet);\n+        std::vector<bilingual_str> warnings;\n+        RemoveWallet(wallet, nullopt, warnings);\n         UnloadWallet(std::move(wallet));\n     }\n }\n-\n-bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n-{\n-    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n-    if (!setting_value.isArray()) setting_value.setArray();\n-    for (const util::SettingsValue& value : setting_value.getValues()) {\n-        if (value.isStr() && value.get_str() == wallet_name) return true;\n-    }\n-    setting_value.push_back(wallet_name);\n-    return chain.updateRwSetting(\"wallet\", setting_value);\n-}\n-\n-bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n-{\n-    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n-    if (!setting_value.isArray()) return true;\n-    util::SettingsValue new_value(util::SettingsValue::VARR);\n-    for (const util::SettingsValue& value : setting_value.getValues()) {\n-        if (!value.isStr() || value.get_str() != wallet_name) new_value.push_back(value);\n-    }\n-    if (new_value.size() == setting_value.size()) return true;\n-    return chain.updateRwSetting(\"wallet\", new_value);\n-}"
      },
      {
        "sha": "ff4f5b4b23da604f65af16fe64df6df4fabcbf87",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -34,10 +34,4 @@ void StopWallets();\n //! Close all wallets.\n void UnloadWallets();\n \n-//! Add wallet name to persistent configuration so it will be loaded on startup.\n-bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n-\n-//! Remove wallet name from persistent configuration so it will not be loaded on startup.\n-bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n-\n #endif // BITCOIN_WALLET_LOAD_H"
      },
      {
        "sha": "74259099c9105ce98c748f5db6f64d4ae5fbcc24",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 23,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -230,18 +230,6 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n     }\n }\n \n-static void UpdateWalletSetting(interfaces::Chain& chain,\n-                                const std::string& wallet_name,\n-                                const UniValue& load_on_startup,\n-                                std::vector<bilingual_str>& warnings)\n-{\n-    if (load_on_startup.isTrue() && !AddWalletSetting(chain, wallet_name)) {\n-        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n-    } else if (load_on_startup.isFalse() && !RemoveWalletSetting(chain, wallet_name)) {\n-        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may still be loaded next node startup.\"));\n-    }\n-}\n-\n static UniValue getnewaddress(const JSONRPCRequest& request)\n {\n             RPCHelpMan{\"getnewaddress\",\n@@ -2528,11 +2516,10 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     bilingual_str error;\n     std::vector<bilingual_str> warnings;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, location, error, warnings);\n+    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*context.chain, location, load_on_start, error, warnings);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n-    UpdateWalletSetting(*context.chain, location.GetName(), request.params[1], warnings);\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n@@ -2662,7 +2649,8 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     bilingual_str error;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*context.chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n+    Optional<bool> load_on_start = request.params[6].isNull() ? nullopt : Optional<bool>(request.params[6].get_bool());\n+    WalletCreationStatus status = CreateWallet(*context.chain, passphrase, flags, request.params[0].get_str(), load_on_start, error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n@@ -2673,8 +2661,6 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         // no default case, so the compiler can warn about missing cases\n     }\n \n-    UpdateWalletSetting(*context.chain, request.params[0].get_str(), request.params[6], warnings);\n-\n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n     obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n@@ -2717,15 +2703,13 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n     // Release the \"main\" shared pointer and prevent further notifications.\n     // Note that any attempt to load the same wallet would fail until the wallet\n     // is destroyed (see CheckUniqueFileid).\n-    if (!RemoveWallet(wallet)) {\n+    std::vector<bilingual_str> warnings;\n+    Optional<bool> load_on_start = request.params[1].isNull() ? nullopt : Optional<bool>(request.params[1].get_bool());\n+    if (!RemoveWallet(wallet, load_on_start, warnings)) {\n         throw JSONRPCError(RPC_MISC_ERROR, \"Requested wallet already unloaded\");\n     }\n \n-    interfaces::Chain& chain = wallet->chain();\n-    std::vector<bilingual_str> warnings;\n-\n     UnloadWallet(std::move(wallet));\n-    UpdateWalletSetting(chain, wallet_name, request.params[1], warnings);\n \n     UniValue result(UniValue::VOBJ);\n     result.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);"
      },
      {
        "sha": "f400e7e9442ead3332f38f04f06494baa2f7a5fb",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -229,7 +229,7 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n                       \"downloading and rescanning the relevant blocks (see -reindex and -rescan \"\n                       \"options).\\\"}},{\\\"success\\\":true}]\",\n                               0, oldTip->GetBlockTimeMax(), TIMESTAMP_WINDOW));\n-        RemoveWallet(wallet);\n+        RemoveWallet(wallet, nullopt);\n     }\n }\n \n@@ -275,7 +275,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         request.params.push_back(backup_file);\n \n         ::dumpwallet().HandleRequest(request);\n-        RemoveWallet(wallet);\n+        RemoveWallet(wallet, nullopt);\n     }\n \n     // Call importwallet RPC and verify all blocks with timestamps >= BLOCK_TIME\n@@ -292,7 +292,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         AddWallet(wallet);\n         wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n         ::importwallet().HandleRequest(request);\n-        RemoveWallet(wallet);\n+        RemoveWallet(wallet, nullopt);\n \n         BOOST_CHECK_EQUAL(wallet->mapWallet.size(), 3U);\n         BOOST_CHECK_EQUAL(m_coinbase_txns.size(), 103U);"
      },
      {
        "sha": "fcdf3b9c7da7076b07ba4989f80e6814e507fe3b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 5,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -33,6 +33,8 @@\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n \n+#include <univalue.h>\n+\n #include <algorithm>\n #include <assert.h>\n \n@@ -54,6 +56,42 @@ static RecursiveMutex cs_wallets;\n static std::vector<std::shared_ptr<CWallet>> vpwallets GUARDED_BY(cs_wallets);\n static std::list<LoadWalletFn> g_load_wallet_fns GUARDED_BY(cs_wallets);\n \n+bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n+{\n+    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n+    if (!setting_value.isArray()) setting_value.setArray();\n+    for (const util::SettingsValue& value : setting_value.getValues()) {\n+        if (value.isStr() && value.get_str() == wallet_name) return true;\n+    }\n+    setting_value.push_back(wallet_name);\n+    return chain.updateRwSetting(\"wallet\", setting_value);\n+}\n+\n+bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name)\n+{\n+    util::SettingsValue setting_value = chain.getRwSetting(\"wallet\");\n+    if (!setting_value.isArray()) return true;\n+    util::SettingsValue new_value(util::SettingsValue::VARR);\n+    for (const util::SettingsValue& value : setting_value.getValues()) {\n+        if (!value.isStr() || value.get_str() != wallet_name) new_value.push_back(value);\n+    }\n+    if (new_value.size() == setting_value.size()) return true;\n+    return chain.updateRwSetting(\"wallet\", new_value);\n+}\n+\n+static void UpdateWalletSetting(interfaces::Chain& chain,\n+                                const std::string& wallet_name,\n+                                Optional<bool> load_on_startup,\n+                                std::vector<bilingual_str>& warnings)\n+{\n+    if (load_on_startup == nullopt) return;\n+    if (load_on_startup.get() && !AddWalletSetting(chain, wallet_name)) {\n+        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may not be loaded next node startup.\"));\n+    } else if (!load_on_startup.get() && !RemoveWalletSetting(chain, wallet_name)) {\n+        warnings.emplace_back(Untranslated(\"Wallet load on startup setting could not be updated, so wallet may still be loaded next node startup.\"));\n+    }\n+}\n+\n bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n {\n     LOCK(cs_wallets);\n@@ -65,18 +103,32 @@ bool AddWallet(const std::shared_ptr<CWallet>& wallet)\n     return true;\n }\n \n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet)\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings)\n {\n     assert(wallet);\n+\n+    interfaces::Chain& chain = wallet->chain();\n+    std::string name = wallet->GetName();\n+\n     // Unregister with the validation interface which also drops shared ponters.\n     wallet->m_chain_notifications_handler.reset();\n     LOCK(cs_wallets);\n     std::vector<std::shared_ptr<CWallet>>::iterator i = std::find(vpwallets.begin(), vpwallets.end(), wallet);\n     if (i == vpwallets.end()) return false;\n     vpwallets.erase(i);\n+\n+    // Write the wallet setting\n+    UpdateWalletSetting(chain, name, load_on_start, warnings);\n+\n     return true;\n }\n \n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start)\n+{\n+    std::vector<bilingual_str> warnings;\n+    return RemoveWallet(wallet, load_on_start, warnings);\n+}\n+\n std::vector<std::shared_ptr<CWallet>> GetWallets()\n {\n     LOCK(cs_wallets);\n@@ -148,7 +200,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n }\n \n namespace {\n-std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         if (!CWallet::Verify(chain, location, error, warnings)) {\n@@ -163,6 +215,10 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const Wall\n         }\n         AddWallet(wallet);\n         wallet->postInitProcess();\n+\n+        // Write the wallet setting\n+        UpdateWalletSetting(chain, location.GetName(), load_on_start, warnings);\n+\n         return wallet;\n     } catch (const std::runtime_error& e) {\n         error = Untranslated(e.what());\n@@ -171,19 +227,19 @@ std::shared_ptr<CWallet> LoadWalletInternal(interfaces::Chain& chain, const Wall\n }\n } // namespace\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     auto result = WITH_LOCK(g_loading_wallet_mutex, return g_loading_wallet_set.insert(location.GetName()));\n     if (!result.second) {\n         error = Untranslated(\"Wallet already being loading.\");\n         return nullptr;\n     }\n-    auto wallet = LoadWalletInternal(chain, location, error, warnings);\n+    auto wallet = LoadWalletInternal(chain, location, load_on_start, error, warnings);\n     WITH_LOCK(g_loading_wallet_mutex, g_loading_wallet_set.erase(result.first));\n     return wallet;\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n@@ -254,6 +310,10 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     AddWallet(wallet);\n     wallet->postInitProcess();\n     result = wallet;\n+\n+    // Write the wallet settings\n+    UpdateWalletSetting(chain, name, load_on_start, warnings);\n+\n     return WalletCreationStatus::SUCCESS;\n }\n "
      },
      {
        "sha": "73e9aef8ca5d885b263694bb2674e6864d9522e1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 11,
        "deletions": 3,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ee37319a7a211e5fb325406d62db5b61dbd30e/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f1ee37319a7a211e5fb325406d62db5b61dbd30e",
        "patch": "@@ -50,10 +50,11 @@ struct bilingual_str;\n void UnloadWallet(std::shared_ptr<CWallet>&& wallet);\n \n bool AddWallet(const std::shared_ptr<CWallet>& wallet);\n-bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start, std::vector<bilingual_str>& warnings);\n+bool RemoveWallet(const std::shared_ptr<CWallet>& wallet, Optional<bool> load_on_start);\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n \n enum class WalletCreationStatus {\n@@ -62,7 +63,7 @@ enum class WalletCreationStatus {\n     ENCRYPTION_FAILED\n };\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, Optional<bool> load_on_start, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n \n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n@@ -1340,4 +1341,11 @@ class WalletRescanReserver\n // be IsAllFromMe).\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, bool use_max_sig = false) EXCLUSIVE_LOCKS_REQUIRED(wallet->cs_wallet);\n int64_t CalculateMaximumSignedTxSize(const CTransaction &tx, const CWallet *wallet, const std::vector<CTxOut>& txouts, bool use_max_sig = false);\n+\n+//! Add wallet name to persistent configuration so it will be loaded on startup.\n+bool AddWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n+\n+//! Remove wallet name from persistent configuration so it will not be loaded on startup.\n+bool RemoveWalletSetting(interfaces::Chain& chain, const std::string& wallet_name);\n+\n #endif // BITCOIN_WALLET_WALLET_H"
      }
    ]
  }
]