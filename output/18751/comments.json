[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619273930",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619273930",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619273930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTI3MzkzMA==",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?u=f0ef8142342bcda68fe46c952d3c653456811ed4&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-24T23:04:26Z",
    "updated_at": "2020-04-24T23:04:26Z",
    "author_association": "MEMBER",
    "body": "ACK fa6c75bdbe7f842c7c4c3846467cb47dd1431a75... but not sure if my ack counts anymore \ud83d\ude42 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619273930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619308096",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619308096",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619308096,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTMwODA5Ng==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-25T02:40:46Z",
    "updated_at": "2020-04-25T02:40:46Z",
    "author_association": "MEMBER",
    "body": "It does actually seem possible to create a templated `GetRandDur` that works as expected(?) when assigning to higher-resolution duration types. I'm not sure it's a good idea, but posting this here in case people are interested:\r\n\r\n```c++\r\ntemplate<typename D>\r\nclass RandDur\r\n{\r\n    const D m_max;\r\npublic:\r\n    constexpr RandDur(D max) : m_max(max) {}\r\n    template<typename D2>\r\n    operator D2() const { return D2{GetRand(D2{m_max}.count())}; }\r\n};\r\n\r\ntemplate<typename D>\r\nRandDur<D> GetRandDur(D duration_max)\r\n{\r\n    return RandDur<D>(duration_max);\r\n}\r\n\r\nstd::chrono::seconds s = GetRandDur(std::chrono::hours{2});\r\n```\r\n\r\n`s` will take on a value between 0 and 7200 seconds here. It works by returning an object `RandDuration` from `GetRandDur` that is an unevaluated random-duration operation. It's evaluated when converting it to seconds, at which time the destination type is known.\r\n\r\nA reason this may not be a good idea is because now\r\n\r\n```c++\r\nauto r = GetRandDur(std::chrono::hours{2});\r\nstd::chrono::seconds s1 = r;\r\nstd::chrono::seconds s2 = r;\r\nprintf(\"%i, %i\\n\", (int)s1.count(), (int)s2.count());\r\n```\r\n\r\nwould print two different numbers.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619308096/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619561836",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619561836",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619561836,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTU2MTgzNg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-26T14:34:29Z",
    "updated_at": "2020-04-26T14:34:29Z",
    "author_association": "MEMBER",
    "body": "> What if we prevent template argument deduction?\r\n\r\nhow?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619561836/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619635073",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619635073",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619635073,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTYzNTA3Mw==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-26T22:32:18Z",
    "updated_at": "2020-04-26T22:37:03Z",
    "author_association": "MEMBER",
    "body": "@promag That would work, for example using:\r\n\r\n```c++\r\ntemplate<typename D>\r\nD GetRandDur(typename std::common_type<D>::type max) { ... }\r\n```\r\n\r\nbut you'd still be left with a templated function which you'd need to call as\r\n\r\n```c++\r\nstd::chrono::microseconds r = GetRandDur<std::chrono::microseconds>(std::chrono::hours{2});\r\n```\r\n\r\nso it wouldn't avoid the need for explicitly passing in the precision. The current codebase's approach effectively does the same thing, but with a slightly shorter notation (where `GetRandMicros` is effectively `GetRandDur<std::chrono::microseconds>`.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619635073/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619640697",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619640697",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619640697,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY0MDY5Nw==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-26T23:21:16Z",
    "updated_at": "2020-04-26T23:21:16Z",
    "author_association": "MEMBER",
    "body": "I wasn't aware that there is a way to tell the compiler that a template argument must be passed. I'll switch out the implementation here with the `std::common_type` one.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619640697/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619680891",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619680891",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619680891,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTY4MDg5MQ==",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?u=7999a16349f0df0fb273fffa18e5a955c9d3f11c&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T02:51:28Z",
    "updated_at": "2020-04-27T02:51:28Z",
    "author_association": "MEMBER",
    "body": "Why?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619680891/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619807887",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619807887",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/18751",
    "id": 619807887,
    "node_id": "MDEyOklzc3VlQ29tbWVudDYxOTgwNzg4Nw==",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?u=4a9af998e1a560b3f49c3827f453e1bcbe6a5cfb&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2020-04-27T08:04:24Z",
    "updated_at": "2020-04-27T08:04:24Z",
    "author_association": "MEMBER",
    "body": "Maybe because scoped changed Marco will open a new PR? \ud83e\udd14 ",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/619807887/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414103517",
    "pull_request_review_id": 399453431,
    "id": 414103517,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwMzUxNw==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't understand this.",
    "created_at": "2020-04-23T20:31:46Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414103517",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414103517"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414103517"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414103517/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414105697",
    "pull_request_review_id": 399455968,
    "id": 414105697,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwNTY5Nw==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Oh you mean because it would use the type of the input (hours) as precision, effectively, and then converted to microseconds afterwards?\r\n\r\nThat's a very roundabout way of describing the problem, and wouldn't apply to a `GetRandMicros` that always interpreted the input as microseconds.",
    "created_at": "2020-04-23T20:35:36Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414105697",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414105697"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414105697"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414105697/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 414103517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414109709",
    "pull_request_review_id": 399460302,
    "id": 414109709,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwOTcwOQ==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> I don't understand this.\r\n\r\n\r\nHere is the code. I am happy to remove the sentence and replace it with code instead.\r\n\r\n```cpp\r\ntemplate <typename D>\r\nD GetRandDur(const D& duration_max)\r\n{\r\n    return D{GetRand(duration_max.count())};\r\n}\r\n\r\nBOOST_AUTO_TEST_CASE(util_time_GetRandTime)\r\n{\r\n    std::chrono::seconds rand_hour = GetRandDur(std::chrono::hours{1});\r\n    // Want seconds to be in range [0..1hour), but always get zero :((((\r\n    BOOST_CHECK_EQUAL(rand_hour.count(), 0);\r\n}\r\n\r\n",
    "created_at": "2020-04-23T20:41:59Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414109709",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414109709"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414109709"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414109709/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 414103517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414111751",
    "pull_request_review_id": 399462615,
    "id": 414111751,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExMTc1MQ==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> That's a very roundabout way of describing the problem, and wouldn't apply to a GetRandMicros that always interpreted the input as microseconds.\r\n\r\nYes, that is the reason why I added GetRandMicros in fa883ab35ad2d4328e35b1e855d0833740a6b910, but I forgot to add documentation back then.",
    "created_at": "2020-04-23T20:45:26Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414111751",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414111751"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414111751"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414111751/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 414103517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414130756",
    "pull_request_review_id": 399483897,
    "id": 414130756,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzMDc1Ng==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Yeah, I understand now. You mean templatizing to avoid the \"Micros\" in the function name (and implicitly pass the resolution of the result that).\r\n\r\nThere's a rather crazy way to work around that:\r\n\r\n```c++\r\ntemplate<typename In, typename OutRep = typename In::rep, typename OutPeriod = typename In::period>\r\nstd::chrono::duration<OutRep, OutPeriod> GetRand(std::chrono::duration<OutRep, OutPeriod> arg) {\r\n    return arg;\r\n}\r\n```\r\nThat's a GetRand that only applies to durations, but you still always have to explicitly state the resolution you want (e.g. `GetRand<std::chrono::milliseconds>(SOME_CONSTANT_OF_TYPE_CHRONO_HOURS)` will work as expected; `GetRand(...)` won't compile).",
    "created_at": "2020-04-23T21:17:48Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414130756",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414130756"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414130756"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414130756/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 414103517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414132382",
    "pull_request_review_id": 399485719,
    "id": 414132382,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEzMjM4Mg==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will",
    "path": "src/random.h",
    "position": null,
    "original_position": 9,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I doubt that's more appealing than just GetRandMicros, GetRandMillis, ... functions, though.",
    "created_at": "2020-04-23T21:20:45Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414132382",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414132382"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414132382"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414132382/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 75,
    "side": "RIGHT",
    "in_reply_to_id": 414103517
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414819576",
    "pull_request_review_id": 400223405,
    "id": 414819576,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgxOTU3Ng==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it",
    "path": "src/random.h",
    "position": null,
    "original_position": 7,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "glozow",
      "id": 25183001,
      "node_id": "MDQ6VXNlcjI1MTgzMDAx",
      "avatar_url": "https://avatars.githubusercontent.com/u/25183001?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glozow",
      "html_url": "https://github.com/glozow",
      "followers_url": "https://api.github.com/users/glozow/followers",
      "following_url": "https://api.github.com/users/glozow/following{/other_user}",
      "gists_url": "https://api.github.com/users/glozow/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glozow/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glozow/subscriptions",
      "organizations_url": "https://api.github.com/users/glozow/orgs",
      "repos_url": "https://api.github.com/users/glozow/repos",
      "events_url": "https://api.github.com/users/glozow/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glozow/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "My knowledge is pretty limited, but maybe I can make a suggestion for clearer wording?\r\n\r\nIt seems like the issue is that, if `GetRand*(std::chrono::*)` is templated with this implementation, the `max_duration`'s count() is used as-is instead of converting between the argument type and return type like we would expect it to. Instead, the conversion happens at the end. In simple terms, the `std::chrono` types won't convert nicely which means we lose precision if we want random small units of time over the duration of a large unit of time (which I'm guessing is a common use case). For example, when you try to get random seconds over the duration of 1 hour, the only return value you can get is 0 hours = 0 seconds.\r\n\r\nOther example: `std::chrono::seconds rand_seconds = GetRandDur(std::chrono::hours{4});` can return non-zero values, but only at the precision of hours (i.e. 0, 3600, 7200, or 10800 seconds). \r\n\r\nIf you were to make a template, it only necessarily works as intended if you pass in a `max_duration` of strictly the same type (or @sipa's workaround).",
    "created_at": "2020-04-24T19:42:30Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414819576",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414819576"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414819576"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414819576/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414833700",
    "pull_request_review_id": 400238797,
    "id": 414833700,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzMzcwMA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will\n+// always be set to a constant, not a random duration.",
    "path": "src/random.h",
    "position": null,
    "original_position": 10,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I don't think this is true? its just random in relation to the duration type of the input. \r\n\r\neg. `std::chrono::seconds foo = GetRand(std::chrono::hours{5})`\r\nmight return 3600, 7200, 10800 etc.",
    "created_at": "2020-04-24T20:09:04Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414833700",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414833700"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414833700"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414833700/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414836790",
    "pull_request_review_id": 400238797,
    "id": 414836790,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDgzNjc5MA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "is it impossible, or does the compiler just select template duration of param thats passed & then tries to convert afterwards? \r\n\r\nseems that way to me because `std::chrono::seconds val = GetRandDur(std::chrono::hours)` gives a type conversion error",
    "created_at": "2020-04-24T20:15:11Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414836790",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414836790"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414836790"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414836790/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856381",
    "pull_request_review_id": 400263471,
    "id": 414856381,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NjM4MQ==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "No it doesn't give a type conversion error.\r\n\r\nThis compiles fine for me and the test pass:\r\n\r\n```cpp\r\ntemplate <typename D>\r\nD GetRandDur(const D& duration_max)\r\n{\r\n    return D{GetRand(duration_max.count())};\r\n}\r\n\r\nBOOST_AUTO_TEST_CASE(util_time_GetRandTime)\r\n{\r\n    std::chrono::seconds rand_hour = GetRandDur(std::chrono::hours{1});\r\n    // Want seconds to be in range [0..1hour), but always get zero :((((\r\n    BOOST_CHECK_EQUAL(rand_hour.count(), 0);\r\n}",
    "created_at": "2020-04-24T20:53:14Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856381",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856381"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856381"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856381/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414836790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856628",
    "pull_request_review_id": 400263724,
    "id": 414856628,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg1NjYyOA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will\n+// always be set to a constant, not a random duration.",
    "path": "src/random.h",
    "position": null,
    "original_position": 10,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Any suggestions to improve the wording? Something with \"quantized\", maybe?",
    "created_at": "2020-04-24T20:53:42Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856628",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856628"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856628"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414856628/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 414833700
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414895938",
    "pull_request_review_id": 400303884,
    "id": 414895938,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NTkzOA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "oh interesting. maybe its different in gcc vs clang?? or I'm missing something obvious.",
    "created_at": "2020-04-24T22:23:11Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414895938",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414895938"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414895938"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414895938/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414836790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414897548",
    "pull_request_review_id": 400305420,
    "id": 414897548,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NzU0OA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I hope not; that would violate the language spec.\n\nstd::chrono::hours should always be implicitly convertible into std::chrono::seconds.",
    "created_at": "2020-04-24T22:27:37Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414897548",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414897548"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414897548"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414897548/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414836790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414899354",
    "pull_request_review_id": 400307112,
    "id": 414899354,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5OTM1NA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ok I tried again and it works. I must have made an accidental error. my mistake!",
    "created_at": "2020-04-24T22:32:46Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414899354",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414899354"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414899354"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414899354/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414836790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902570",
    "pull_request_review_id": 400310135,
    "id": 414902570,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMjU3MA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it",
    "path": "src/random.h",
    "position": null,
    "original_position": 7,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "@MarcoFalke - I built on @gzhao408's description. here's an attempt at a comment: \r\n\r\nThe following `GetRand<duration>` MUST NOT be templated on the type of the `<duration>` to prevent unexpected results. If there is a mismatch between the return type and the argument type, the compiler is unable to reliably select the correct template. The unexpected conversion handling can lead to precision loss. \r\n\r\nEg. \r\n`std::chrono::seconds rand_seconds = GetRandDur(std::chrono::hours{2})` will return 1 of 2 values rather than 1 of 120 values. \r\n",
    "created_at": "2020-04-24T22:42:17Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902570",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902570"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902570"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902570/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 414819576
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902826",
    "pull_request_review_id": 400310412,
    "id": 414902826,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMjgyNg==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.\n+// assuming that a GetRand<T> exists for all duration types, then `foo` will\n+// always be set to a constant, not a random duration.",
    "path": "src/random.h",
    "position": null,
    "original_position": 10,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "think precision loss captures it better, esp with example. attempted in other comment thread.",
    "created_at": "2020-04-24T22:43:07Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902826",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902826"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902826"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414902826/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 76,
    "side": "RIGHT",
    "in_reply_to_id": 414833700
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907465",
    "pull_request_review_id": 400314616,
    "id": 414907465,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNzQ2NQ==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it",
    "path": "src/random.h",
    "position": null,
    "original_position": 7,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks @gzhao408 and @amitiuttarwar for helping me to explain this. Took your suggestion and added you both as co author in the commit.",
    "created_at": "2020-04-24T22:57:45Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907465",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907465"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907465"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907465/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 1,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 73,
    "side": "RIGHT",
    "in_reply_to_id": 414819576
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907943",
    "pull_request_review_id": 400314983,
    "id": 414907943,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwNzk0Mw==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRand*(std::chrono::*) MUST NOT be templated on the type of\n+// the duration to prevent unsafe use at the call site. If it was templated, it\n+// would be impossible for the compiler to select the right template. E.g.",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "333393d96dff6c05831d09bc5d9bc2b2c3754ea8",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "oh, my error was in what I was typing here. I get conversion issue when I do `std::chrono::minutes val = GetRandDur(std::chrono::seconds{120})` \r\n\r\nso when function arg is higher precision than return value. \r\n\r\nwhich is why I was suspecting compiler selects template duration based on function arg, then tries to convert afterwards. so selection is deterministic vs unexpected, but can lead to unexpected results.",
    "created_at": "2020-04-24T22:58:54Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907943",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907943"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907943"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414907943/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414836790
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414912568",
    "pull_request_review_id": 400319081,
    "id": 414912568,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxMjU2OA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRandDur<duration> MUST NOT be templated on the type of the\n+// <duration> to prevent unexpected results. If there is a mismatch between the\n+// return type and the argument type, the compiler is unable to reliably select",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "fa6c75bdbe7f842c7c4c3846467cb47dd1431a75",
    "user": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Sorry to nitpick here, but i think this is still confusing.\r\n\r\nIn a hypothetical\r\n\r\n```c++\r\ntemplate<typename T>\r\nT GetRandDur(T max) { return T{GetRand(max.count())}; }\r\n\r\nstd::chrono::seconds r = GetRandDur(std::chrono::hours{1})\r\n```\r\n\r\nthere is no unreliable template selection or mismatch between types. `GetRandDur` is reliably instantiated with `T`=`std::chrono::hours`, and is returning a random value of the same type. It's in the assignment outside of the function call that the conversion to `std::chrono::seconds` happens, and this assignment doesn't lose precision; the precision was never requested in the first place.\r\n\r\nHow about this instead:\r\n\r\n    Templates cannot be used here to avoid stating explicitly what precision\r\n    is desired in the result. A hypothetical\r\n    `template<typename T> T GetRandDur(T)` invoked on a\r\n    `std::chrono::hours` argument will only ever return a duration with the\r\n    resolution of 1 hours, which may be unexpected when assigning to\r\n    a variable of a higher resolution duration like `std::chrono::seconds`.",
    "created_at": "2020-04-24T23:13:15Z",
    "updated_at": "2020-04-24T23:41:40Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414912568",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414912568"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414912568"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414912568/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414921034",
    "pull_request_review_id": 400325969,
    "id": 414921034,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMTAzNA==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRandDur<duration> MUST NOT be templated on the type of the\n+// <duration> to prevent unexpected results. If there is a mismatch between the\n+// return type and the argument type, the compiler is unable to reliably select",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "fa6c75bdbe7f842c7c4c3846467cb47dd1431a75",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks. Copy-pasted your text.",
    "created_at": "2020-04-24T23:42:19Z",
    "updated_at": "2020-04-24T23:42:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414921034",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414921034"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414921034"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414921034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414912568
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923293",
    "pull_request_review_id": 400327767,
    "id": 414923293,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkyMzI5Mw==",
    "diff_hunk": "@@ -67,7 +67,17 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n+// The following GetRandDur<duration> MUST NOT be templated on the type of the\n+// <duration> to prevent unexpected results. If there is a mismatch between the\n+// return type and the argument type, the compiler is unable to reliably select",
    "path": "src/random.h",
    "position": null,
    "original_position": 8,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "fa6c75bdbe7f842c7c4c3846467cb47dd1431a75",
    "user": {
      "login": "amitiuttarwar",
      "id": 1500952,
      "node_id": "MDQ6VXNlcjE1MDA5NTI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1500952?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/amitiuttarwar",
      "html_url": "https://github.com/amitiuttarwar",
      "followers_url": "https://api.github.com/users/amitiuttarwar/followers",
      "following_url": "https://api.github.com/users/amitiuttarwar/following{/other_user}",
      "gists_url": "https://api.github.com/users/amitiuttarwar/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/amitiuttarwar/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/amitiuttarwar/subscriptions",
      "organizations_url": "https://api.github.com/users/amitiuttarwar/orgs",
      "repos_url": "https://api.github.com/users/amitiuttarwar/repos",
      "events_url": "https://api.github.com/users/amitiuttarwar/events{/privacy}",
      "received_events_url": "https://api.github.com/users/amitiuttarwar/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "ah yes. ok this confirms what I was trying to get at in the other thread. thanks!",
    "created_at": "2020-04-24T23:50:19Z",
    "updated_at": "2020-04-24T23:50:19Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414923293",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923293"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414923293"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/414923293/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 74,
    "side": "RIGHT",
    "in_reply_to_id": 414912568
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415432459",
    "pull_request_review_id": 400565249,
    "id": 415432459,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQzMjQ1OQ==",
    "diff_hunk": "@@ -1348,6 +1348,13 @@ BOOST_AUTO_TEST_CASE(gettime)\n     BOOST_CHECK((GetTime() & ~0xFFFFFFFFLL) == 0);\n }\n \n+BOOST_AUTO_TEST_CASE(util_time_GetRandTime)\n+{\n+    // Check that GetRand* can not magically increase the resolution of the result",
    "path": "src/test/util_tests.cpp",
    "position": 6,
    "original_position": 6,
    "commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "original_commit_id": "fa13199e89ee6524c74747774b2031ec7d50accb",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "What magic? ",
    "created_at": "2020-04-26T23:59:01Z",
    "updated_at": "2020-04-27T00:06:18Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r415432459",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415432459"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/18751#discussion_r415432459"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/18751"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/415432459/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 1353,
    "original_line": 1353,
    "side": "RIGHT"
  }
]