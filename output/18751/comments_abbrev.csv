amitiuttarwar,2020-04-24 23:04:26,ACK fa6c75bdbe7f842c7c4c3846467cb47dd1431a75... but not sure if my ack counts anymore ðŸ™‚ ,https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619273930,619273930,
sipa,2020-04-25 02:40:46,"It does actually seem possible to create a templated `GetRandDur` that works as expected(?) when assigning to higher-resolution duration types. I'm not sure it's a good idea, but posting this here in case people are interested:\n\n```c++\ntemplate<typename D>\nclass RandDur\n{\n    const D m_max;\npublic:\n    constexpr RandDur(D max) : m_max(max) {}\n    template<typename D2>\n    opera",https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619308096,619308096,
MarcoFalke,2020-04-26 14:34:29,"> What if we prevent template argument deduction?\n\nhow?",https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619561836,619561836,
sipa,2020-04-26 22:32:18,"@promag That would work, for example using:\n\n```c++\ntemplate<typename D>\nD GetRandDur(typename std::common_type<D>::type max) { ... }\n```\n\nbut you'd still be left with a templated function which you'd need to call as\n\n```c++\nstd::chrono::microseconds r = GetRandDur<std::chrono::microseconds>(std::chrono::hours{2});\n```\n\nso it wouldn't avoid the need for explicitly passing",https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619635073,619635073,
MarcoFalke,2020-04-26 23:21:16,I wasn't aware that there is a way to tell the compiler that a template argument must be passed. I'll switch out the implementation here with the `std::common_type` one.,https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619640697,619640697,
sipa,2020-04-27 02:51:28,Why?,https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619680891,619680891,
promag,2020-04-27 08:04:24,Maybe because scoped changed Marco will open a new PR? ðŸ¤” ,https://github.com/bitcoin/bitcoin/pull/18751#issuecomment-619807887,619807887,
sipa,2020-04-23 20:31:46,I don't understand this.,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414103517,414103517,src/random.h
sipa,2020-04-23 20:35:36,"Oh you mean because it would use the type of the input (hours) as precision, effectively, and then converted to microseconds afterwards?\n\nThat's a very roundabout way of describing the problem, and wouldn't apply to a `GetRandMicros` that always interpreted the input as microseconds.",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414105697,414105697,src/random.h
MarcoFalke,2020-04-23 20:41:59,"> I don't understand this.\n\n\nHere is the code. I am happy to remove the sentence and replace it with code instead.\n\n```cpp\ntemplate <typename D>\nD GetRandDur(const D& duration_max)\n{\n    return D{GetRand(duration_max.count())};\n}\n\nBOOST_AUTO_TEST_CASE(util_time_GetRandTime)\n{\n    std::chrono::seconds rand_hour = GetRandDur(std::chrono::hours{1});\n    // Want seconds t",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414109709,414109709,src/random.h
MarcoFalke,2020-04-23 20:45:26,"> That's a very roundabout way of describing the problem, and wouldn't apply to a GetRandMicros that always interpreted the input as microseconds.\n\nYes, that is the reason why I added GetRandMicros in fa883ab35ad2d4328e35b1e855d0833740a6b910, but I forgot to add documentation back then.",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414111751,414111751,src/random.h
sipa,2020-04-23 21:17:48,"Yeah, I understand now. You mean templatizing to avoid the ""Micros"" in the function name (and implicitly pass the resolution of the result that).\n\nThere's a rather crazy way to work around that:\n\n```c++\ntemplate<typename In, typename OutRep = typename In::rep, typename OutPeriod = typename In::period>\nstd::chrono::duration<OutRep, OutPeriod> GetRand(std::chrono::duration<OutRep, OutPer",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414130756,414130756,src/random.h
sipa,2020-04-23 21:20:45,"I doubt that's more appealing than just GetRandMicros, GetRandMillis, ... functions, though.",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414132382,414132382,src/random.h
glozow,2020-04-24 19:42:30,"My knowledge is pretty limited, but maybe I can make a suggestion for clearer wording?\n\nIt seems like the issue is that, if `GetRand*(std::chrono::*)` is templated with this implementation, the `max_duration`'s count() is used as-is instead of converting between the argument type and return type like we would expect it to. Instead, the conversion happens at the end. In simple terms, the `std::",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414819576,414819576,src/random.h
amitiuttarwar,2020-04-24 20:09:04,"I don't think this is true? its just random in relation to the duration type of the input. \n\neg. `std::chrono::seconds foo = GetRand(std::chrono::hours{5})`\nmight return 3600, 7200, 10800 etc.",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414833700,414833700,src/random.h
amitiuttarwar,2020-04-24 20:15:11,"is it impossible, or does the compiler just select template duration of param thats passed & then tries to convert afterwards? \n\nseems that way to me because `std::chrono::seconds val = GetRandDur(std::chrono::hours)` gives a type conversion error",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414836790,414836790,src/random.h
MarcoFalke,2020-04-24 20:53:14,"No it doesn't give a type conversion error.\n\nThis compiles fine for me and the test pass:\n\n```cpp\ntemplate <typename D>\nD GetRandDur(const D& duration_max)\n{\n    return D{GetRand(duration_max.count())};\n}\n\nBOOST_AUTO_TEST_CASE(util_time_GetRandTime)\n{\n    std::chrono::seconds rand_hour = GetRandDur(std::chrono::hours{1});\n    // Want seconds to be in range [0..1hour), b",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856381,414856381,src/random.h
MarcoFalke,2020-04-24 20:53:42,"Any suggestions to improve the wording? Something with ""quantized"", maybe?",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414856628,414856628,src/random.h
amitiuttarwar,2020-04-24 22:23:11,oh interesting. maybe its different in gcc vs clang?? or I'm missing something obvious.,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414895938,414895938,src/random.h
sipa,2020-04-24 22:27:37,I hope not; that would violate the language spec.\n\nstd::chrono::hours should always be implicitly convertible into std::chrono::seconds.,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414897548,414897548,src/random.h
amitiuttarwar,2020-04-24 22:32:46,ok I tried again and it works. I must have made an accidental error. my mistake!,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414899354,414899354,src/random.h
amitiuttarwar,2020-04-24 22:42:17,"@MarcoFalke - I built on @gzhao408's description. here's an attempt at a comment: \n\nThe following `GetRand<duration>` MUST NOT be templated on the type of the `<duration>` to prevent unexpected results. If there is a mismatch between the return type and the argument type, the compiler is unable to reliably select the correct template. The unexpected conversion handling can lead to precision lo",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902570,414902570,src/random.h
amitiuttarwar,2020-04-24 22:43:07,"think precision loss captures it better, esp with example. attempted in other comment thread.",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414902826,414902826,src/random.h
MarcoFalke,2020-04-24 22:57:45,Thanks @gzhao408 and @amitiuttarwar for helping me to explain this. Took your suggestion and added you both as co author in the commit.,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907465,414907465,src/random.h
amitiuttarwar,2020-04-24 22:58:54,"oh, my error was in what I was typing here. I get conversion issue when I do `std::chrono::minutes val = GetRandDur(std::chrono::seconds{120})` \n\nso when function arg is higher precision than return value. \n\nwhich is why I was suspecting compiler selects template duration based on function arg, then tries to convert afterwards. so selection is deterministic vs unexpected, but can lead to u",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414907943,414907943,src/random.h
sipa,2020-04-24 23:13:15,"Sorry to nitpick here, but i think this is still confusing.\n\nIn a hypothetical\n\n```c++\ntemplate<typename T>\nT GetRandDur(T max) { return T{GetRand(max.count())}; }\n\nstd::chrono::seconds r = GetRandDur(std::chrono::hours{1})\n```\n\nthere is no unreliable template selection or mismatch between types. `GetRandDur` is reliably instantiated with `T`=`std::chrono::hours`, and is retu",https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414912568,414912568,src/random.h
MarcoFalke,2020-04-24 23:42:19,Thanks. Copy-pasted your text.,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414921034,414921034,src/random.h
amitiuttarwar,2020-04-24 23:50:19,ah yes. ok this confirms what I was trying to get at in the other thread. thanks!,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r414923293,414923293,src/random.h
promag,2020-04-26 23:59:01,What magic? ,https://github.com/bitcoin/bitcoin/pull/18751#discussion_r415432459,415432459,src/test/util_tests.cpp
