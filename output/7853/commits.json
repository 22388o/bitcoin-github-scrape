[
  {
    "sha": "faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE0MWVlMjA0MTI0ZGExOWRjZjFlNWI4YTNhZWYxZTIxNmJmNWU2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-10T14:54:28Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2016-04-10T18:35:57Z"
      },
      "message": "[qa] py2: Unfiddle strings into bytes explicitly",
      "tree": {
        "sha": "4b33bcb6db57bcde90e12d1b0e9140c4d8cb32ba",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4b33bcb6db57bcde90e12d1b0e9140c4d8cb32ba"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0afac87e8173dd71616e211aa08dcd59cb5cf90e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0afac87e8173dd71616e211aa08dcd59cb5cf90e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0afac87e8173dd71616e211aa08dcd59cb5cf90e"
      }
    ],
    "stats": {
      "total": 418,
      "additions": 205,
      "deletions": 213
    },
    "files": [
      {
        "sha": "99d74344aef955db2f50926a20956071be4eb218",
        "filename": "qa/rpc-tests/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip65-cltv-p2p.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_CHECKLOCKTIMEVERIFY, OP_DROP\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -60,7 +59,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "3bcfdabe269a1914d1fa2a23c5cde780077885b9",
        "filename": "qa/rpc-tests/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip68-112-113-p2p.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import *\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -119,15 +118,15 @@ def create_transaction(self, node, txid, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(rawtx))\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n         tx.deserialize(f)\n         return tx\n \n     def sign_transaction(self, node, unsignedtx):\n         rawtx = ToHex(unsignedtx)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "d131eed92dc147dc514d0f591150296cec82f8e2",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript, OP_1NEGATE, OP_NOP3, OP_DROP\n-from binascii import hexlify, unhexlify\n from io import BytesIO\n import time\n import itertools\n@@ -30,7 +29,6 @@\n '''\n \n \n-\n class BIP9SoftForksTest(ComparisonTestFramework):\n \n     def __init__(self):\n@@ -53,15 +51,15 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         outputs = { to_address : amount }\n         rawtx = node.createrawtransaction(inputs, outputs)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(rawtx))\n+        f = BytesIO(hex_str_to_bytes(rawtx))\n         tx.deserialize(f)\n         tx.nVersion = 2\n         return tx\n \n     def sign_transaction(self, node, tx):\n-        signresult = node.signrawtransaction(hexlify(tx.serialize()))\n+        signresult = node.signrawtransaction(bytes_to_hex_str(tx.serialize()))\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n \n@@ -184,7 +182,6 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         NetworkThread().start() # Start up network handling in another thread\n \n \n-\n     def get_tests(self):\n         for test in itertools.chain(\n                 self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),"
      },
      {
        "sha": "bba86a50c4c56c5bd154b76675d99b50d9866361",
        "filename": "qa/rpc-tests/bipdersig-p2p.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bipdersig-p2p.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.blocktools import create_coinbase, create_block\n from test_framework.comptool import TestInstance, TestManager\n from test_framework.script import CScript\n-from binascii import unhexlify\n from io import BytesIO\n import time\n \n@@ -25,7 +24,7 @@ def unDERify(tx):\n     newscript = []\n     for i in scriptSig:\n         if (len(newscript) == 0):\n-            newscript.append(i[0:-1] + '\\0' + i[-1])\n+            newscript.append(i[0:-1] + b'\\0' + i[-1:])\n         else:\n             newscript.append(i)\n     tx.vin[0].scriptSig = CScript(newscript)\n@@ -68,7 +67,7 @@ def create_transaction(self, node, coinbase, to_address, amount):\n         rawtx = node.createrawtransaction(inputs, outputs)\n         signresult = node.signrawtransaction(rawtx)\n         tx = CTransaction()\n-        f = BytesIO(unhexlify(signresult['hex']))\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n         tx.deserialize(f)\n         return tx\n "
      },
      {
        "sha": "578844f2c5bb0a238ad55dec7a9f36da5154f0ef",
        "filename": "qa/rpc-tests/decodescript.py",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/decodescript.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -6,7 +6,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n from test_framework.mininode import *\n-from binascii import hexlify, unhexlify\n from io import BytesIO\n \n class DecodeScriptTest(BitcoinTestFramework):\n@@ -131,7 +130,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         assert_equal('OP_DUP OP_HASH160 dc863734a218bfe83ef770ee9d41a27f824a6e56 OP_EQUALVERIFY OP_CHECKSIG', rpc_result['vout'][0]['scriptPubKey']['asm'])\n         assert_equal('OP_HASH160 2a5edea39971049a540474c6a99edf0aa4074c58 OP_EQUAL', rpc_result['vout'][1]['scriptPubKey']['asm'])\n         txSave = CTransaction()\n-        txSave.deserialize(BytesIO(unhexlify(tx)))\n+        txSave.deserialize(BytesIO(hex_str_to_bytes(tx)))\n \n         # make sure that a specifically crafted op_return value will not pass all the IsDERSignature checks and then get decoded as a sighash type\n         tx = '01000000015ded05872fdbda629c7d3d02b194763ce3b9b1535ea884e3c8e765d42e316724020000006b48304502204c10d4064885c42638cbff3585915b322de33762598321145ba033fc796971e2022100bb153ad3baa8b757e30a2175bd32852d2e1cb9080f84d7e32fcdfd667934ef1b012103163c0ff73511ea1743fb5b98384a2ff09dd06949488028fd819f4d83f56264efffffffff0200000000000000000b6a0930060201000201000180380100000000001976a9141cabd296e753837c086da7a45a6c2fe0d49d7b7b88ac00000000'\n@@ -147,7 +146,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         # some more full transaction tests of varying specific scriptSigs. used instead of\n         # tests in decodescript_script_sig because the decodescript RPC is specifically\n         # for working on scriptPubKeys (argh!).\n-        push_signature = hexlify(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        push_signature = bytes_to_hex_str(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n         signature = push_signature[2:]\n         der_signature = signature[:-2]\n         signature_sighash_decoded = der_signature + '[ALL]'\n@@ -156,25 +155,24 @@ def decoderawtransaction_asm_sighashtype(self):\n         signature_2_sighash_decoded = der_signature + '[NONE|ANYONECANPAY]'\n \n         # 1) P2PK scriptSig\n-        txSave.vin[0].scriptSig = unhexlify(push_signature)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n-        txSave.vin[0].scriptSig = unhexlify(push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 2) multisig scriptSig\n-        txSave.vin[0].scriptSig = unhexlify('00' + push_signature + push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('00' + push_signature + push_signature_2)\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 3) test a scriptSig that contains more than push operations.\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n-        txSave.vin[0].scriptSig = unhexlify('6a143011020701010101010101020601010101010101')\n-        rpc_result = self.nodes[0].decoderawtransaction(hexlify(txSave.serialize()))\n-        print(hexlify('636174'))\n+        txSave.vin[0].scriptSig = hex_str_to_bytes('6a143011020701010101010101020601010101010101')\n+        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n \n     def run_test(self):"
      },
      {
        "sha": "4492ea398f4bad40c1f8cbe15f35e9b59776ee6f",
        "filename": "qa/rpc-tests/fundrawtransaction.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/fundrawtransaction.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -148,7 +148,6 @@ def run_test(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n-\n         #####################################################################\n         # test a fundrawtransaction with which will not get a change output #\n         #####################################################################\n@@ -178,7 +177,6 @@ def run_test(self):\n         assert_equal(fee + totalOut, utx['amount']) #compare vin total and totalout+fee\n \n \n-\n         #########################################################################\n         # test a fundrawtransaction with a VIN smaller than the required amount #\n         #########################################################################\n@@ -484,7 +482,6 @@ def run_test(self):\n         assert_equal(oldBalance+Decimal('51.10000000'), self.nodes[0].getbalance())\n \n \n-\n         ###############################################\n         # multiple (~19) inputs tx test | Compare fee #\n         ###############################################"
      },
      {
        "sha": "07bfe69c6d869a0e0760b930419c602cd72b0323",
        "filename": "qa/rpc-tests/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/getblocktemplate_proposals.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -130,7 +130,7 @@ def run_test(self):\n \n         # Test 5: Add an invalid tx to the end (non-duplicate)\n         txlist.append(bytearray(txlist[0]))\n-        txlist[-1][4+1] = b'\\xff'\n+        txlist[-1][4+1] = 0xff\n         assert_template(node, tmpl, txlist, 'bad-txns-inputs-missingorspent')\n         txlist.pop()\n "
      },
      {
        "sha": "cf37976a4ed8558653d1043a5ba00ba988be6ce7",
        "filename": "qa/rpc-tests/httpbasics.py",
        "status": "modified",
        "additions": 5,
        "deletions": 6,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/httpbasics.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -9,7 +9,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import *\n-import base64\n \n try:\n     import http.client as httplib\n@@ -31,7 +30,7 @@ def run_test(self):\n         #################################################\n         url = urlparse.urlparse(self.nodes[0].url)\n         authpair = url.username + ':' + url.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -48,7 +47,7 @@ def run_test(self):\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\": \"keep-alive\"}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\": \"keep-alive\"}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -65,7 +64,7 @@ def run_test(self):\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair), \"Connection\":\"close\"}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair), \"Connection\":\"close\"}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -77,7 +76,7 @@ def run_test(self):\n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urlparse.urlparse(self.nodes[1].url)\n         authpair = urlNode1.username + ':' + urlNode1.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(urlNode1.hostname, urlNode1.port)\n         conn.connect()\n@@ -88,7 +87,7 @@ def run_test(self):\n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urlparse.urlparse(self.nodes[2].url)\n         authpair = urlNode2.username + ':' + urlNode2.password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(urlNode2.hostname, urlNode2.port)\n         conn.connect()"
      },
      {
        "sha": "de6be8d5b5b5d894157ca5c13edb48b97f05f708",
        "filename": "qa/rpc-tests/invalidblockrequest.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/invalidblockrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/invalidblockrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidblockrequest.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -77,9 +77,9 @@ def get_tests(self):\n         block2 = create_block(self.tip, create_coinbase(height), self.block_time)\n         self.block_time += 1\n \n-        # chr(81) is OP_TRUE\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(81), 50 * COIN)\n-        tx2 = create_transaction(tx1, 0, chr(81), 50 * COIN)\n+        # b'0x51' is OP_TRUE\n+        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x51', 50 * COIN)\n+        tx2 = create_transaction(tx1, 0, b'\\x51', 50 * COIN)\n \n         block2.vtx.extend([tx1, tx2])\n         block2.hashMerkleRoot = block2.calc_merkle_root()\n@@ -95,7 +95,7 @@ def get_tests(self):\n         assert(block2_orig.vtx != block2.vtx)\n \n         self.tip = block2.sha256\n-        yield TestInstance([[block2, RejectResult(16,'bad-txns-duplicate')], [block2_orig, True]])\n+        yield TestInstance([[block2, RejectResult(16, b'bad-txns-duplicate')], [block2_orig, True]])\n         height += 1\n \n         '''\n@@ -110,7 +110,7 @@ def get_tests(self):\n         block3.rehash()\n         block3.solve()\n \n-        yield TestInstance([[block3, RejectResult(16,'bad-cb-amount')]])\n+        yield TestInstance([[block3, RejectResult(16, b'bad-cb-amount')]])\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "7b8199bab0cc45d4e4cec449484eff75cdd9781d",
        "filename": "qa/rpc-tests/invalidtxrequest.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/invalidtxrequest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/invalidtxrequest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/invalidtxrequest.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -61,10 +61,10 @@ def get_tests(self):\n             height += 1\n         yield test\n \n-        # chr(100) is OP_NOTIF\n+        # b'\\x64' is OP_NOTIF\n         # Transaction will be rejected with code 16 (REJECT_INVALID)\n-        tx1 = create_transaction(self.block1.vtx[0], 0, chr(100), 50 * COIN - 12000)\n-        yield TestInstance([[tx1, RejectResult(16, 'mandatory-script-verify-flag-failed')]])\n+        tx1 = create_transaction(self.block1.vtx[0], 0, b'\\x64', 50 * COIN - 12000)\n+        yield TestInstance([[tx1, RejectResult(16, b'mandatory-script-verify-flag-failed')]])\n \n         # TODO: test further transactions...\n "
      },
      {
        "sha": "0783a1f3d37179566e69eba81b43ee06374d7beb",
        "filename": "qa/rpc-tests/listtransactions.py",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/listtransactions.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -9,11 +9,10 @@\n from test_framework.util import *\n from test_framework.mininode import CTransaction, COIN\n from io import BytesIO\n-import binascii\n \n def txFromHex(hexstring):\n     tx = CTransaction()\n-    f = BytesIO(binascii.unhexlify(hexstring))\n+    f = BytesIO(hex_str_to_bytes(hexstring))\n     tx.deserialize(f)\n     return tx\n \n@@ -167,7 +166,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3 = self.nodes[0].createrawtransaction(inputs, outputs)\n         tx3_modified = txFromHex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n-        tx3 = binascii.hexlify(tx3_modified.serialize()).decode('utf-8')\n+        tx3 = bytes_to_hex_str(tx3_modified.serialize())\n         tx3_signed = self.nodes[0].signrawtransaction(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n@@ -193,7 +192,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN) # bump the fee\n-        tx3_b = binascii.hexlify(tx3_b.serialize()).decode('utf-8')\n+        tx3_b = bytes_to_hex_str(tx3_b.serialize())\n         tx3_b_signed = self.nodes[0].signrawtransaction(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))"
      },
      {
        "sha": "afb18cf3da20db7c850e0b361e98e298d0218a22",
        "filename": "qa/rpc-tests/multi_rpc.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/multi_rpc.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -53,7 +53,7 @@ def run_test(self):\n         password2 = \"8/F3uMDw4KSEbw96U3CA1C4X05dkHDN2BPFjTgZW4KI=\"\n         authpairnew = \"rt:\"+password\n \n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpair)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpair)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -63,7 +63,7 @@ def run_test(self):\n         conn.close()\n         \n         #Use new authpair to confirm both work\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -74,7 +74,7 @@ def run_test(self):\n \n         #Wrong login name with rt's password\n         authpairnew = \"rtwrong:\"+password\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -85,7 +85,7 @@ def run_test(self):\n \n         #Wrong password for rt\n         authpairnew = \"rt:\"+password+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -96,7 +96,7 @@ def run_test(self):\n \n         #Correct for rt2\n         authpairnew = \"rt2:\"+password2\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -107,7 +107,7 @@ def run_test(self):\n \n         #Wrong password for rt2\n         authpairnew = \"rt2:\"+password2+\"wrong\"\n-        headers = {\"Authorization\": \"Basic \" + base64.b64encode(authpairnew)}\n+        headers = {\"Authorization\": \"Basic \" + str_to_b64str(authpairnew)}\n \n         conn = httplib.HTTPConnection(url.hostname, url.port)\n         conn.connect()\n@@ -117,6 +117,5 @@ def run_test(self):\n         conn.close()\n \n \n-\n if __name__ == '__main__':\n     HTTPBasicsTest ().main ()"
      },
      {
        "sha": "281b6ca37a0ce1f454960d6a0d02c1a5f1715f9e",
        "filename": "qa/rpc-tests/p2p-feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-feefilter.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -14,7 +14,7 @@\n '''\n \n def hashToHex(hash):\n-    return format(hash, '064x').decode('utf-8')\n+    return format(hash, '064x')\n \n # Wait up to 60 secs to see if the testnode has received all the expected invs\n def allInvsMatch(invsExpected, testnode):"
      },
      {
        "sha": "ae82d9dca9266bfc8361c9fa83a12a656d496ef0",
        "filename": "qa/rpc-tests/p2p-fullblocktest.py",
        "status": "modified",
        "additions": 16,
        "deletions": 16,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/p2p-fullblocktest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/p2p-fullblocktest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/p2p-fullblocktest.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -33,7 +33,7 @@ def __init__(self):\n         self.num_nodes = 1\n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n-        self.coinbase_key.set_secretbytes(bytes(\"horsebattery\"))\n+        self.coinbase_key.set_secretbytes(b\"horsebattery\")\n         self.coinbase_pubkey = self.coinbase_key.get_pubkey()\n         self.block_time = int(time.time())+1\n         self.tip = None\n@@ -70,7 +70,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=Non\n         block = create_block(base_block_hash, coinbase, self.block_time)\n         if (spend != None):\n             tx = CTransaction()\n-            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), \"\", 0xffffffff))  # no signature yet\n+            tx.vin.append(CTxIn(COutPoint(spend.tx.sha256, spend.n), b\"\", 0xffffffff))  # no signature yet\n             # This copies the java comparison tool testing behavior: the first\n             # txout has a garbage scriptPubKey, \"to make sure we're not\n             # pre-verifying too much\" (?)\n@@ -80,7 +80,7 @@ def next_block(self, number, spend=None, additional_coinbase_value=0, script=Non\n             else:\n                 tx.vout.append(CTxOut(1, script))\n             # Now sign it if necessary\n-            scriptSig = \"\"\n+            scriptSig = b\"\"\n             scriptPubKey = bytearray(spend.tx.vout[spend.n].scriptPubKey)\n             if (scriptPubKey[0] == OP_TRUE):  # looks like an anyone-can-spend\n                 scriptSig = CScript([OP_TRUE])\n@@ -225,7 +225,7 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(6)\n         block(9, spend=out4, additional_coinbase_value=1)\n-        yield rejected(RejectResult(16, 'bad-cb-amount'))\n+        yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n         \n         # Create a fork that ends in a block with too much fee (the one that causes the reorg)\n@@ -237,7 +237,7 @@ def update_block(block_number, new_transactions):\n         yield rejected()\n \n         block(11, spend=out4, additional_coinbase_value=1)\n-        yield rejected(RejectResult(16, 'bad-cb-amount'))\n+        yield rejected(RejectResult(16, b'bad-cb-amount'))\n \n \n         # Try again, but with a valid fork first\n@@ -279,7 +279,7 @@ def update_block(block_number, new_transactions):\n         out6 = get_spendable_output()\n         too_many_checksigs = CScript([OP_CHECKSIG] * (1000000 // 50))\n         block(16, spend=out6, script=too_many_checksigs)\n-        yield rejected(RejectResult(16, 'bad-blk-sigops'))\n+        yield rejected(RejectResult(16, b'bad-blk-sigops'))\n \n \n         # Attempt to spend a transaction created on a different fork\n@@ -288,7 +288,7 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n         block(17, spend=txout_b3)\n-        yield rejected(RejectResult(16, 'bad-txns-inputs-missingorspent'))\n+        yield rejected(RejectResult(16, b'bad-txns-inputs-missingorspent'))\n \n         # Attempt to spend a transaction created on a different fork (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -309,7 +309,7 @@ def update_block(block_number, new_transactions):\n         tip(15)\n         out7 = get_spendable_output()\n         block(20, spend=out7)\n-        yield rejected(RejectResult(16, 'bad-txns-premature-spend-of-coinbase'))\n+        yield rejected(RejectResult(16, b'bad-txns-premature-spend-of-coinbase'))\n \n         # Attempt to spend a coinbase at depth too low (on a fork this time)\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -333,7 +333,7 @@ def update_block(block_number, new_transactions):\n         old_hash = b23.sha256\n         tx = CTransaction()\n         script_length = MAX_BLOCK_SIZE - len(b23.serialize()) - 69\n-        script_output = CScript([chr(0)*script_length])\n+        script_output = CScript([b'\\x00' * script_length])\n         tx.vout.append(CTxOut(0, script_output))\n         tx.vin.append(CTxIn(COutPoint(b23.vtx[1].sha256, 1)))\n         b23 = update_block(23, [tx])\n@@ -345,11 +345,11 @@ def update_block(block_number, new_transactions):\n         tip(15)\n         b24 = block(24, spend=out6)\n         script_length = MAX_BLOCK_SIZE - len(b24.serialize()) - 69\n-        script_output = CScript([chr(0)*(script_length+1)])\n+        script_output = CScript([b'\\x00' * (script_length+1)])\n         tx.vout = [CTxOut(0, script_output)]\n         b24 = update_block(24, [tx])\n         assert_equal(len(b24.serialize()), MAX_BLOCK_SIZE+1)\n-        yield rejected(RejectResult(16, 'bad-blk-length'))\n+        yield rejected(RejectResult(16, b'bad-blk-length'))\n \n         b25 = block(25, spend=out7)\n         yield rejected()\n@@ -361,12 +361,12 @@ def update_block(block_number, new_transactions):\n         #                      \\-> b3 (1) -> b4 (2)\n         tip(15)\n         b26 = block(26, spend=out6)\n-        b26.vtx[0].vin[0].scriptSig = chr(0)\n+        b26.vtx[0].vin[0].scriptSig = b'\\x00'\n         b26.vtx[0].rehash()\n         # update_block causes the merkle root to get updated, even with no new\n         # transactions, and updates the required state.\n         b26 = update_block(26, [])\n-        yield rejected(RejectResult(16, 'bad-cb-length'))\n+        yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b26 chain to make sure bitcoind isn't accepting b26\n         b27 = block(27, spend=out7)\n@@ -375,10 +375,10 @@ def update_block(block_number, new_transactions):\n         # Now try a too-large-coinbase script\n         tip(15)\n         b28 = block(28, spend=out6)\n-        b28.vtx[0].vin[0].scriptSig = chr(0)*101\n+        b28.vtx[0].vin[0].scriptSig = b'\\x00' * 101\n         b28.vtx[0].rehash()\n         b28 = update_block(28, [])\n-        yield rejected(RejectResult(16, 'bad-cb-length'))\n+        yield rejected(RejectResult(16, b'bad-cb-length'))\n \n         # Extend the b28 chain to make sure bitcoind isn't accepted b28\n         b29 = block(29, spend=out7)\n@@ -390,7 +390,7 @@ def update_block(block_number, new_transactions):\n         # b30 has a max-sized coinbase scriptSig.\n         tip(23)\n         b30 = block(30)\n-        b30.vtx[0].vin[0].scriptSig = chr(0)*100\n+        b30.vtx[0].vin[0].scriptSig = b'\\x00' * 100\n         b30.vtx[0].rehash()\n         b30 = update_block(30, [])\n         yield accepted()"
      },
      {
        "sha": "91c871ddc900316c9ab2f867d2a0dbec31e6f70f",
        "filename": "qa/rpc-tests/proxy_test.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/proxy_test.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -86,7 +86,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         assert(isinstance(cmd, Socks5Command))\n         # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"15.61.23.23\")\n+        assert_equal(cmd.addr, b\"15.61.23.23\")\n         assert_equal(cmd.port, 1234)\n         if not auth:\n             assert_equal(cmd.username, None)\n@@ -100,7 +100,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             assert(isinstance(cmd, Socks5Command))\n             # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-            assert_equal(cmd.addr, \"1233:3432:2434:2343:3234:2345:6546:4534\")\n+            assert_equal(cmd.addr, b\"1233:3432:2434:2343:3234:2345:6546:4534\")\n             assert_equal(cmd.port, 5443)\n             if not auth:\n                 assert_equal(cmd.username, None)\n@@ -113,7 +113,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             cmd = proxies[2].queue.get()\n             assert(isinstance(cmd, Socks5Command))\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-            assert_equal(cmd.addr, \"bitcoinostk4e4re.onion\")\n+            assert_equal(cmd.addr, b\"bitcoinostk4e4re.onion\")\n             assert_equal(cmd.port, 8333)\n             if not auth:\n                 assert_equal(cmd.username, None)\n@@ -125,7 +125,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         cmd = proxies[3].queue.get()\n         assert(isinstance(cmd, Socks5Command))\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n-        assert_equal(cmd.addr, \"node.noumenon\")\n+        assert_equal(cmd.addr, b\"node.noumenon\")\n         assert_equal(cmd.port, 8333)\n         if not auth:\n             assert_equal(cmd.username, None)"
      },
      {
        "sha": "eccd157e5c085e77a2c3e5c555bc52e942012d7e",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -311,7 +311,7 @@ def run_test(self):\n         #                   \\                 \\\n         #                    ++...++(1044)     ..\n         #\n-        # N0    ********************(1032) @@...@@@(1552) \n+        # N0    ********************(1032) @@...@@@(1552)\n         #                                 \\\n         #                                  *...**(1320)\n "
      },
      {
        "sha": "e38ef6c8b10713b76173f595b208ca2820bdec21",
        "filename": "qa/rpc-tests/rawtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rawtransactions.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -88,8 +88,6 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), bal+Decimal('1.20000000')) #node2 has both keys of the 2of2 ms addr., tx should affect the balance\n \n \n-\n-\n         # 2of3 test from different nodes\n         bal = self.nodes[2].getbalance()\n         addr1 = self.nodes[1].getnewaddress()"
      },
      {
        "sha": "4c8ef6de26eb2a58faa20a42f1bbf05f84b10133",
        "filename": "qa/rpc-tests/replace-by-fee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 8,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/replace-by-fee.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -11,15 +11,11 @@\n from test_framework.util import *\n from test_framework.script import *\n from test_framework.mininode import *\n-import binascii\n \n MAX_REPLACEMENT_LIMIT = 100\n \n-def satoshi_round(amount):\n-    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n-\n def txToHex(tx):\n-    return binascii.hexlify(tx.serialize()).decode('utf-8')\n+    return bytes_to_hex_str(tx.serialize())\n \n def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     \"\"\"Create a txout with a given amount and scriptPubKey\n@@ -53,9 +49,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     tx2.vout = [CTxOut(amount, scriptPubKey)]\n     tx2.rehash()\n \n-    binascii.hexlify(tx2.serialize()).decode('utf-8')\n-\n-    signed_tx = node.signrawtransaction(binascii.hexlify(tx2.serialize()).decode('utf-8'))\n+    signed_tx = node.signrawtransaction(txToHex(tx2))\n \n     txid = node.sendrawtransaction(signed_tx['hex'], True)\n "
      },
      {
        "sha": "359f9239fb3700493e3f25501fd5b3b6b57bab05",
        "filename": "qa/rpc-tests/rest.py",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/rest.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -39,7 +39,7 @@ def http_get_call(host, port, path, response_object = 0):\n     if response_object:\n         return conn.getresponse()\n \n-    return conn.getresponse().read()\n+    return conn.getresponse().read().decode('utf-8')\n \n #allows simple http post calls with a request body\n def http_post_call(host, port, path, requestdata = '', response_object = 0):\n@@ -141,9 +141,9 @@ def run_test(self):\n         bb_hash = self.nodes[0].getbestblockhash()\n \n         binaryRequest = b'\\x01\\x02'\n-        binaryRequest += binascii.unhexlify(txid)\n+        binaryRequest += hex_str_to_bytes(txid)\n         binaryRequest += pack(\"i\", n)\n-        binaryRequest += binascii.unhexlify(vintx)\n+        binaryRequest += hex_str_to_bytes(vintx)\n         binaryRequest += pack(\"i\", 0)\n \n         bin_response = http_post_call(url.hostname, url.port, '/rest/getutxos'+self.FORMAT_SEPARATOR+'bin', binaryRequest)\n@@ -234,15 +234,15 @@ def run_test(self):\n         assert_equal(response_hex.status, 200)\n         assert_greater_than(int(response_hex.getheader('content-length')), 160)\n         response_hex_str = response_hex.read()\n-        assert_equal(encode(response_str, \"hex\")[0:160], response_hex_str[0:160])\n+        assert_equal(encode(response_str, \"hex_codec\")[0:160], response_hex_str[0:160])\n \n         # compare with hex block header\n         response_header_hex = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"hex\", True)\n         assert_equal(response_header_hex.status, 200)\n         assert_greater_than(int(response_header_hex.getheader('content-length')), 160)\n         response_header_hex_str = response_header_hex.read()\n         assert_equal(response_hex_str[0:160], response_header_hex_str[0:160])\n-        assert_equal(encode(response_header_str, \"hex\")[0:160], response_header_hex_str[0:160])\n+        assert_equal(encode(response_header_str, \"hex_codec\")[0:160], response_header_hex_str[0:160])\n \n         # check json format\n         block_json_string = http_get_call(url.hostname, url.port, '/rest/block/'+bb_hash+self.FORMAT_SEPARATOR+'json')\n@@ -252,7 +252,7 @@ def run_test(self):\n         # compare with json block header\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/1/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n+        response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str, parse_float=Decimal)\n         assert_equal(len(json_obj), 1) #ensure that there is one header in the json response\n         assert_equal(json_obj[0]['hash'], bb_hash) #request/response hash should be the same\n@@ -276,7 +276,7 @@ def run_test(self):\n         self.sync_all()\n         response_header_json = http_get_call(url.hostname, url.port, '/rest/headers/5/'+bb_hash+self.FORMAT_SEPARATOR+\"json\", True)\n         assert_equal(response_header_json.status, 200)\n-        response_header_json_str = response_header_json.read()\n+        response_header_json_str = response_header_json.read().decode('utf-8')\n         json_obj = json.loads(response_header_json_str)\n         assert_equal(len(json_obj), 5) #now we should have 5 header objects\n \n@@ -292,7 +292,6 @@ def run_test(self):\n         assert_greater_than(int(response.getheader('content-length')), 10)\n \n \n-\n         # check block tx details\n         # let's make 3 tx and mine them on node 1\n         txs = []"
      },
      {
        "sha": "384f40e62dfca6aa9463ba445bdaad06100881a4",
        "filename": "qa/rpc-tests/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/blocktools.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -62,6 +62,6 @@ def create_transaction(prevtx, n, sig, value):\n     tx = CTransaction()\n     assert(n < len(prevtx.vout))\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), sig, 0xffffffff))\n-    tx.vout.append(CTxOut(value, \"\"))\n+    tx.vout.append(CTxOut(value, b\"\"))\n     tx.calc_sha256()\n     return tx"
      },
      {
        "sha": "17626cf8dada4d4056ca513b6b9953feace0fd39",
        "filename": "qa/rpc-tests/test_framework/comptool.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/comptool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/comptool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/comptool.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -31,7 +31,7 @@ class RejectResult(object):\n     '''\n     Outcome that expects rejection of a transaction or block.\n     '''\n-    def __init__(self, code, reason=''):\n+    def __init__(self, code, reason=b''):\n         self.code = code\n         self.reason = reason\n     def match(self, other):\n@@ -97,9 +97,9 @@ def on_pong(self, conn, message):\n             raise AssertionError(\"Got pong for unknown ping [%s]\" % repr(message))\n \n     def on_reject(self, conn, message):\n-        if message.message == 'tx':\n+        if message.message == b'tx':\n             self.tx_reject_map[message.data] = RejectResult(message.code, message.reason)\n-        if message.message == 'block':\n+        if message.message == b'block':\n             self.block_reject_map[message.data] = RejectResult(message.code, message.reason)\n \n     def send_inv(self, obj):"
      },
      {
        "sha": "5ee5b132757d4cc21d333e064b0eb984c8ea284e",
        "filename": "qa/rpc-tests/test_framework/mininode.py",
        "status": "modified",
        "additions": 93,
        "deletions": 93,
        "changes": 186,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/mininode.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -20,10 +20,10 @@\n import struct\n import socket\n import asyncore\n-import binascii\n import time\n import sys\n import random\n+from binascii import hexlify, unhexlify\n from io import BytesIO\n from codecs import encode\n import hashlib\n@@ -34,7 +34,7 @@\n \n BIP0031_VERSION = 60000\n MY_VERSION = 60001  # past bip-31 for ping/pong\n-MY_SUBVERSION = \"/python-mininode-tester:0.0.1/\"\n+MY_SUBVERSION = b\"/python-mininode-tester:0.0.2/\"\n \n MAX_INV_SZ = 50000\n MAX_BLOCK_SIZE = 1000000\n@@ -131,7 +131,7 @@ def deser_vector(f, c):\n \n \n def ser_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -161,7 +161,7 @@ def deser_uint256_vector(f):\n \n \n def ser_uint256_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -221,7 +221,7 @@ def deser_int_vector(f):\n \n \n def ser_int_vector(l):\n-    r = \"\"\n+    r = b\"\"\n     if len(l) < 253:\n         r = struct.pack(\"B\", len(l))\n     elif len(l) < 0x10000:\n@@ -236,19 +236,19 @@ def ser_int_vector(l):\n \n # Deserialize from a hex string representation (eg from RPC)\n def FromHex(obj, hex_string):\n-    obj.deserialize(BytesIO(binascii.unhexlify(hex_string)))\n+    obj.deserialize(BytesIO(unhexlify(hex_string.encode('ascii'))))\n     return obj\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return binascii.hexlify(obj.serialize()).decode('utf-8')\n+    return hexlify(obj.serialize()).decode('ascii')\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n class CAddress(object):\n     def __init__(self):\n         self.nServices = 1\n-        self.pchReserved = \"\\x00\" * 10 + \"\\xff\" * 2\n+        self.pchReserved = b\"\\x00\" * 10 + b\"\\xff\" * 2\n         self.ip = \"0.0.0.0\"\n         self.port = 0\n \n@@ -259,7 +259,7 @@ def deserialize(self, f):\n         self.port = struct.unpack(\">H\", f.read(2))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nServices)\n         r += self.pchReserved\n         r += socket.inet_aton(self.ip)\n@@ -286,7 +286,7 @@ def deserialize(self, f):\n         self.hash = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.type)\n         r += ser_uint256(self.hash)\n         return r\n@@ -306,7 +306,7 @@ def deserialize(self, f):\n         self.vHave = deser_uint256_vector(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_uint256_vector(self.vHave)\n         return r\n@@ -326,7 +326,7 @@ def deserialize(self, f):\n         self.n = struct.unpack(\"<I\", f.read(4))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += ser_uint256(self.hash)\n         r += struct.pack(\"<I\", self.n)\n         return r\n@@ -336,7 +336,7 @@ def __repr__(self):\n \n \n class CTxIn(object):\n-    def __init__(self, outpoint=None, scriptSig=\"\", nSequence=0):\n+    def __init__(self, outpoint=None, scriptSig=b\"\", nSequence=0):\n         if outpoint is None:\n             self.prevout = COutPoint()\n         else:\n@@ -351,20 +351,20 @@ def deserialize(self, f):\n         self.nSequence = struct.unpack(\"<I\", f.read(4))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.prevout.serialize()\n         r += ser_string(self.scriptSig)\n         r += struct.pack(\"<I\", self.nSequence)\n         return r\n \n     def __repr__(self):\n         return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), binascii.hexlify(self.scriptSig),\n+            % (repr(self.prevout), hexlify(self.scriptSig),\n                self.nSequence)\n \n \n class CTxOut(object):\n-    def __init__(self, nValue=0, scriptPubKey=\"\"):\n+    def __init__(self, nValue=0, scriptPubKey=b\"\"):\n         self.nValue = nValue\n         self.scriptPubKey = scriptPubKey\n \n@@ -373,15 +373,15 @@ def deserialize(self, f):\n         self.scriptPubKey = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<q\", self.nValue)\n         r += ser_string(self.scriptPubKey)\n         return r\n \n     def __repr__(self):\n         return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n             % (self.nValue // COIN, self.nValue % COIN,\n-               binascii.hexlify(self.scriptPubKey))\n+               hexlify(self.scriptPubKey))\n \n \n class CTransaction(object):\n@@ -410,7 +410,7 @@ def deserialize(self, f):\n         self.hash = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_vector(self.vin)\n         r += ser_vector(self.vout)\n@@ -424,7 +424,7 @@ def rehash(self):\n     def calc_sha256(self):\n         if self.sha256 is None:\n             self.sha256 = uint256_from_str(hash256(self.serialize()))\n-        self.hash = encode(hash256(self.serialize())[::-1], 'hex')\n+        self.hash = encode(hash256(self.serialize())[::-1], 'hex_codec').decode('ascii')\n \n     def is_valid(self):\n         self.calc_sha256()\n@@ -474,7 +474,7 @@ def deserialize(self, f):\n         self.hash = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += ser_uint256(self.hashPrevBlock)\n         r += ser_uint256(self.hashMerkleRoot)\n@@ -485,15 +485,15 @@ def serialize(self):\n \n     def calc_sha256(self):\n         if self.sha256 is None:\n-            r = \"\"\n+            r = b\"\"\n             r += struct.pack(\"<i\", self.nVersion)\n             r += ser_uint256(self.hashPrevBlock)\n             r += ser_uint256(self.hashMerkleRoot)\n             r += struct.pack(\"<I\", self.nTime)\n             r += struct.pack(\"<I\", self.nBits)\n             r += struct.pack(\"<I\", self.nNonce)\n             self.sha256 = uint256_from_str(hash256(r))\n-            self.hash = encode(hash256(r)[::-1], 'hex')\n+            self.hash = encode(hash256(r)[::-1], 'hex_codec').decode('ascii')\n \n     def rehash(self):\n         self.sha256 = None\n@@ -516,7 +516,7 @@ def deserialize(self, f):\n         self.vtx = deser_vector(f, CTransaction)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += super(CBlock, self).serialize()\n         r += ser_vector(self.vtx)\n         return r\n@@ -571,9 +571,9 @@ def __init__(self):\n         self.nMaxVer = 0\n         self.setSubVer = []\n         self.nPriority = 0\n-        self.strComment = \"\"\n-        self.strStatusBar = \"\"\n-        self.strReserved = \"\"\n+        self.strComment = b\"\"\n+        self.strStatusBar = b\"\"\n+        self.strReserved = b\"\"\n \n     def deserialize(self, f):\n         self.nVersion = struct.unpack(\"<i\", f.read(4))[0]\n@@ -591,7 +591,7 @@ def deserialize(self, f):\n         self.strReserved = deser_string(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<q\", self.nRelayUntil)\n         r += struct.pack(\"<q\", self.nExpiration)\n@@ -616,8 +616,8 @@ def __repr__(self):\n \n class CAlert(object):\n     def __init__(self):\n-        self.vchMsg = \"\"\n-        self.vchSig = \"\"\n+        self.vchMsg = b\"\"\n+        self.vchSig = b\"\"\n \n     def deserialize(self, f):\n         self.vchMsg = deser_string(f)\n@@ -636,7 +636,7 @@ def __repr__(self):\n \n # Objects that correspond to messages on the wire\n class msg_version(object):\n-    command = \"version\"\n+    command = b\"version\"\n \n     def __init__(self):\n         self.nVersion = MY_VERSION\n@@ -672,7 +672,7 @@ def deserialize(self, f):\n             self.nStartingHeight = None\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<i\", self.nVersion)\n         r += struct.pack(\"<Q\", self.nServices)\n         r += struct.pack(\"<q\", self.nTime)\n@@ -691,7 +691,7 @@ def __repr__(self):\n \n \n class msg_verack(object):\n-    command = \"verack\"\n+    command = b\"verack\"\n \n     def __init__(self):\n         pass\n@@ -700,14 +700,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_verack()\"\n \n \n class msg_addr(object):\n-    command = \"addr\"\n+    command = b\"addr\"\n \n     def __init__(self):\n         self.addrs = []\n@@ -723,7 +723,7 @@ def __repr__(self):\n \n \n class msg_alert(object):\n-    command = \"alert\"\n+    command = b\"alert\"\n \n     def __init__(self):\n         self.alert = CAlert()\n@@ -733,7 +733,7 @@ def deserialize(self, f):\n         self.alert.deserialize(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.alert.serialize()\n         return r\n \n@@ -742,7 +742,7 @@ def __repr__(self):\n \n \n class msg_inv(object):\n-    command = \"inv\"\n+    command = b\"inv\"\n \n     def __init__(self, inv=None):\n         if inv is None:\n@@ -761,7 +761,7 @@ def __repr__(self):\n \n \n class msg_getdata(object):\n-    command = \"getdata\"\n+    command = b\"getdata\"\n \n     def __init__(self, inv=None):\n         self.inv = inv if inv != None else []\n@@ -777,7 +777,7 @@ def __repr__(self):\n \n \n class msg_getblocks(object):\n-    command = \"getblocks\"\n+    command = b\"getblocks\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -789,7 +789,7 @@ def deserialize(self, f):\n         self.hashstop = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.locator.serialize()\n         r += ser_uint256(self.hashstop)\n         return r\n@@ -800,7 +800,7 @@ def __repr__(self):\n \n \n class msg_tx(object):\n-    command = \"tx\"\n+    command = b\"tx\"\n \n     def __init__(self, tx=CTransaction()):\n         self.tx = tx\n@@ -816,7 +816,7 @@ def __repr__(self):\n \n \n class msg_block(object):\n-    command = \"block\"\n+    command = b\"block\"\n \n     def __init__(self, block=None):\n         if block is None:\n@@ -835,7 +835,7 @@ def __repr__(self):\n \n \n class msg_getaddr(object):\n-    command = \"getaddr\"\n+    command = b\"getaddr\"\n \n     def __init__(self):\n         pass\n@@ -844,14 +844,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_getaddr()\"\n \n \n class msg_ping_prebip31(object):\n-    command = \"ping\"\n+    command = b\"ping\"\n \n     def __init__(self):\n         pass\n@@ -860,14 +860,14 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_ping() (pre-bip31)\"\n \n \n class msg_ping(object):\n-    command = \"ping\"\n+    command = b\"ping\"\n \n     def __init__(self, nonce=0L):\n         self.nonce = nonce\n@@ -876,7 +876,7 @@ def deserialize(self, f):\n         self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nonce)\n         return r\n \n@@ -885,16 +885,16 @@ def __repr__(self):\n \n \n class msg_pong(object):\n-    command = \"pong\"\n+    command = b\"pong\"\n \n-    def __init__(self, nonce=0L):\n+    def __init__(self, nonce=0):\n         self.nonce = nonce\n \n     def deserialize(self, f):\n         self.nonce = struct.unpack(\"<Q\", f.read(8))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.nonce)\n         return r\n \n@@ -903,7 +903,7 @@ def __repr__(self):\n \n \n class msg_mempool(object):\n-    command = \"mempool\"\n+    command = b\"mempool\"\n \n     def __init__(self):\n         pass\n@@ -912,13 +912,13 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_mempool()\"\n \n class msg_sendheaders(object):\n-    command = \"sendheaders\"\n+    command = b\"sendheaders\"\n \n     def __init__(self):\n         pass\n@@ -927,7 +927,7 @@ def deserialize(self, f):\n         pass\n \n     def serialize(self):\n-        return \"\"\n+        return b\"\"\n \n     def __repr__(self):\n         return \"msg_sendheaders()\"\n@@ -937,7 +937,7 @@ def __repr__(self):\n # vector of hashes\n # hash_stop (hash of last desired block header, 0 to get as many as possible)\n class msg_getheaders(object):\n-    command = \"getheaders\"\n+    command = b\"getheaders\"\n \n     def __init__(self):\n         self.locator = CBlockLocator()\n@@ -949,7 +949,7 @@ def deserialize(self, f):\n         self.hashstop = deser_uint256(f)\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += self.locator.serialize()\n         r += ser_uint256(self.hashstop)\n         return r\n@@ -962,7 +962,7 @@ def __repr__(self):\n # headers message has\n # <count> <vector of block headers>\n class msg_headers(object):\n-    command = \"headers\"\n+    command = b\"headers\"\n \n     def __init__(self):\n         self.headers = []\n@@ -982,10 +982,10 @@ def __repr__(self):\n \n \n class msg_reject(object):\n-    command = \"reject\"\n+    command = b\"reject\"\n \n     def __init__(self):\n-        self.message = \"\"\n+        self.message = b\"\"\n         self.code = 0\n         self.reason = \"\"\n         self.data = 0L\n@@ -1025,7 +1025,7 @@ def wait_until(predicate, attempts=float('inf'), timeout=float('inf')):\n     return False\n \n class msg_feefilter(object):\n-    command = \"feefilter\"\n+    command = b\"feefilter\"\n \n     def __init__(self, feerate=0L):\n         self.feerate = feerate\n@@ -1034,7 +1034,7 @@ def deserialize(self, f):\n         self.feerate = struct.unpack(\"<Q\", f.read(8))[0]\n \n     def serialize(self):\n-        r = \"\"\n+        r = b\"\"\n         r += struct.pack(\"<Q\", self.feerate)\n         return r\n \n@@ -1149,28 +1149,28 @@ def received_pong():\n # This class provides an interface for a p2p connection to a specified node\n class NodeConn(asyncore.dispatcher):\n     messagemap = {\n-        \"version\": msg_version,\n-        \"verack\": msg_verack,\n-        \"addr\": msg_addr,\n-        \"alert\": msg_alert,\n-        \"inv\": msg_inv,\n-        \"getdata\": msg_getdata,\n-        \"getblocks\": msg_getblocks,\n-        \"tx\": msg_tx,\n-        \"block\": msg_block,\n-        \"getaddr\": msg_getaddr,\n-        \"ping\": msg_ping,\n-        \"pong\": msg_pong,\n-        \"headers\": msg_headers,\n-        \"getheaders\": msg_getheaders,\n-        \"reject\": msg_reject,\n-        \"mempool\": msg_mempool,\n-        \"feefilter\": msg_feefilter\n+        b\"version\": msg_version,\n+        b\"verack\": msg_verack,\n+        b\"addr\": msg_addr,\n+        b\"alert\": msg_alert,\n+        b\"inv\": msg_inv,\n+        b\"getdata\": msg_getdata,\n+        b\"getblocks\": msg_getblocks,\n+        b\"tx\": msg_tx,\n+        b\"block\": msg_block,\n+        b\"getaddr\": msg_getaddr,\n+        b\"ping\": msg_ping,\n+        b\"pong\": msg_pong,\n+        b\"headers\": msg_headers,\n+        b\"getheaders\": msg_getheaders,\n+        b\"reject\": msg_reject,\n+        b\"mempool\": msg_mempool,\n+        b\"feefilter\": msg_feefilter\n     }\n     MAGIC_BYTES = {\n-        \"mainnet\": \"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n-        \"testnet3\": \"\\x0b\\x11\\x09\\x07\",  # testnet3\n-        \"regtest\": \"\\xfa\\xbf\\xb5\\xda\"    # regtest\n+        \"mainnet\": b\"\\xf9\\xbe\\xb4\\xd9\",   # mainnet\n+        \"testnet3\": b\"\\x0b\\x11\\x09\\x07\",  # testnet3\n+        \"regtest\": b\"\\xfa\\xbf\\xb5\\xda\"    # regtest\n     }\n \n     def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n@@ -1179,8 +1179,8 @@ def __init__(self, dstaddr, dstport, rpc, callback, net=\"regtest\", services=1):\n         self.dstaddr = dstaddr\n         self.dstport = dstport\n         self.create_socket(socket.AF_INET, socket.SOCK_STREAM)\n-        self.sendbuf = \"\"\n-        self.recvbuf = \"\"\n+        self.sendbuf = b\"\"\n+        self.recvbuf = b\"\"\n         self.ver_send = 209\n         self.ver_recv = 209\n         self.last_sent = 0\n@@ -1217,8 +1217,8 @@ def handle_close(self):\n         self.show_debug_msg(\"MiniNode: Closing Connection to %s:%d... \"\n                             % (self.dstaddr, self.dstport))\n         self.state = \"closed\"\n-        self.recvbuf = \"\"\n-        self.sendbuf = \"\"\n+        self.recvbuf = b\"\"\n+        self.sendbuf = b\"\"\n         try:\n             self.close()\n         except:\n@@ -1261,7 +1261,7 @@ def got_data(self):\n                 if self.ver_recv < 209:\n                     if len(self.recvbuf) < 4 + 12 + 4:\n                         return\n-                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n                     msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n                     checksum = None\n                     if len(self.recvbuf) < 4 + 12 + 4 + msglen:\n@@ -1271,7 +1271,7 @@ def got_data(self):\n                 else:\n                     if len(self.recvbuf) < 4 + 12 + 4 + 4:\n                         return\n-                    command = self.recvbuf[4:4+12].split(\"\\x00\", 1)[0]\n+                    command = self.recvbuf[4:4+12].split(b\"\\x00\", 1)[0]\n                     msglen = struct.unpack(\"<i\", self.recvbuf[4+12:4+12+4])[0]\n                     checksum = self.recvbuf[4+12+4:4+12+4+4]\n                     if len(self.recvbuf) < 4 + 12 + 4 + 4 + msglen:\n@@ -1301,7 +1301,7 @@ def send_message(self, message, pushbuf=False):\n         data = message.serialize()\n         tmsg = self.MAGIC_BYTES[self.network]\n         tmsg += command\n-        tmsg += \"\\x00\" * (12 - len(command))\n+        tmsg += b\"\\x00\" * (12 - len(command))\n         tmsg += struct.pack(\"<I\", len(data))\n         if self.ver_send >= 209:\n             th = sha256(data)\n@@ -1313,11 +1313,11 @@ def send_message(self, message, pushbuf=False):\n             self.last_sent = time.time()\n \n     def got_message(self, message):\n-        if message.command == \"version\":\n+        if message.command == b\"version\":\n             if message.nVersion <= BIP0031_VERSION:\n-                self.messagemap['ping'] = msg_ping_prebip31\n+                self.messagemap[b'ping'] = msg_ping_prebip31\n         if self.last_sent + 30 * 60 < time.time():\n-            self.send_message(self.messagemap['ping']())\n+            self.send_message(self.messagemap[b'ping']())\n         self.show_debug_msg(\"Recv %s\" % repr(message))\n         self.cb.deliver(self, message)\n "
      },
      {
        "sha": "52a7ab74890f134e6b32e4e32779e019ab482b0a",
        "filename": "qa/rpc-tests/test_framework/netutil.py",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/netutil.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -4,13 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n # Linux network utilities\n+\n import sys\n import socket\n import fcntl\n import struct\n import array\n import os\n-import binascii\n+from binascii import unhexlify, hexlify\n \n # Roughly based on http://voorloopnul.com/blog/a-python-netstat-in-less-than-100-lines-of-code/ by Ricardo Pascal\n STATE_ESTABLISHED = '01'\n@@ -43,7 +44,7 @@ def _remove_empty(array):\n def _convert_ip_port(array):\n     host,port = array.split(':')\n     # convert host from mangled-per-four-bytes form as used by kernel\n-    host = binascii.unhexlify(host)\n+    host = unhexlify(host)\n     host_out = ''\n     for x in range(0, len(host) // 4):\n         (val,) = struct.unpack('=I', host[x*4:(x+1)*4])\n@@ -94,7 +95,7 @@ def all_interfaces():\n     max_possible = 8 # initial value\n     while True:\n         bytes = max_possible * struct_size\n-        names = array.array('B', '\\0' * bytes)\n+        names = array.array('B', b'\\0' * bytes)\n         outbytes = struct.unpack('iL', fcntl.ioctl(\n             s.fileno(),\n             0x8912,  # SIOCGIFCONF\n@@ -105,7 +106,7 @@ def all_interfaces():\n         else:\n             break\n     namestr = names.tostring()\n-    return [(namestr[i:i+16].split('\\0', 1)[0],\n+    return [(namestr[i:i+16].split(b'\\0', 1)[0],\n              socket.inet_ntoa(namestr[i+20:i+24]))\n             for i in range(0, outbytes, struct_size)]\n \n@@ -136,7 +137,7 @@ def addr_to_hex(addr):\n         addr = sub[0] + ([0] * nullbytes) + sub[1]\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n-    return binascii.hexlify(bytearray(addr))\n+    return hexlify(bytearray(addr)).decode('ascii')\n \n def test_ipv6_local():\n     '''"
      },
      {
        "sha": "5fb5758f81fa3a34555367569151cd1d6b25fb9e",
        "filename": "qa/rpc-tests/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/script.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -629,7 +629,7 @@ def encode(obj):\n         neg = obj.value < 0\n         absvalue = -obj.value if neg else obj.value\n         while (absvalue):\n-            r.append(chr(absvalue & 0xff))\n+            r.append(absvalue & 0xff)\n             absvalue >>= 8\n         if r[-1] & 0x80:\n             r.append(0x80 if neg else 0)\n@@ -777,7 +777,7 @@ def __repr__(self):\n         # need to change\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return \"x('%s')\" % hexlify(o).decode('utf8')\n+                return b\"x('%s')\" % hexlify(o).decode('ascii')\n             else:\n                 return repr(o)\n "
      },
      {
        "sha": "f725d9770174732322b6fe8380b521e22d1f1a54",
        "filename": "qa/rpc-tests/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/socks5.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -102,7 +102,7 @@ def handle(self):\n                 addr = recvall(self.conn, 4)\n             elif atyp == AddressType.DOMAINNAME:\n                 n = recvall(self.conn, 1)[0]\n-                addr = str(recvall(self.conn, n))\n+                addr = recvall(self.conn, n)\n             elif atyp == AddressType.IPV6:\n                 addr = recvall(self.conn, 16)\n             else:"
      },
      {
        "sha": "42541b4162e96c2ab01e1fc74a51af43f6f75503",
        "filename": "qa/rpc-tests/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/util.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -1,6 +1,8 @@\n # Copyright (c) 2014-2015 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+\n #\n # Helpful routines for regression testing\n #\n@@ -9,6 +11,8 @@\n import os\n import sys\n \n+from binascii import hexlify, unhexlify\n+from base64 import b64encode\n from decimal import Decimal, ROUND_DOWN\n import json\n import random\n@@ -91,6 +95,15 @@ def check_json_precision():\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n+def bytes_to_hex_str(byte_str):\n+    return hexlify(byte_str).decode('ascii')\n+\n+def hex_str_to_bytes(hex_str):\n+    return unhexlify(hex_str.encode('ascii'))\n+\n+def str_to_b64str(string):\n+    return b64encode(string.encode('utf-8')).decode('ascii')\n+\n def sync_blocks(rpc_connections, wait=1):\n     \"\"\"\n     Wait until everybody has the same block count\n@@ -466,7 +479,7 @@ def assert_is_hash_string(string, length=64):\n             \"String %r contains invalid characters for a hash.\" % string)\n \n def satoshi_round(amount):\n-    return  Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n+    return Decimal(amount).quantize(Decimal('0.00000001'), rounding=ROUND_DOWN)\n \n # Helper to create at least \"count\" utxos\n # Pass in a fee that is sufficient for relay and mining new transactions."
      },
      {
        "sha": "3a8d62ef2eddc7d0688b1aa514f58b2a147eb556",
        "filename": "qa/rpc-tests/zmq_test.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/qa/rpc-tests/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/zmq_test.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -28,8 +28,8 @@ class ZMQTest (BitcoinTestFramework):\n     def setup_nodes(self):\n         self.zmqContext = zmq.Context()\n         self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashblock\")\n-        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, \"hashtx\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n+        self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n         return start_nodes(4, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n@@ -46,13 +46,13 @@ def run_test(self):\n \n         print \"listen...\"\n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n \n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n-        blkhash = binascii.hexlify(body)\n+        blkhash = bytes_to_hex_str(body)\n \n         assert_equal(genhashes[0], blkhash) #blockhash from generate must be equal to the hash received over zmq\n \n@@ -63,10 +63,10 @@ def run_test(self):\n         zmqHashes = []\n         for x in range(0,n*2):\n             msg = self.zmqSubSocket.recv_multipart()\n-            topic = str(msg[0])\n+            topic = msg[0]\n             body = msg[1]\n-            if topic == \"hashblock\":\n-                zmqHashes.append(binascii.hexlify(body))\n+            if topic == b\"hashblock\":\n+                zmqHashes.append(bytes_to_hex_str(body))\n \n         for x in range(0,n):\n             assert_equal(genhashes[x], zmqHashes[x]) #blockhash from generate must be equal to the hash received over zmq\n@@ -77,11 +77,11 @@ def run_test(self):\n \n         # now we should receive a zmq msg because the tx was broadcast\n         msg = self.zmqSubSocket.recv_multipart()\n-        topic = str(msg[0])\n+        topic = msg[0]\n         body = msg[1]\n         hashZMQ = \"\"\n-        if topic == \"hashtx\":\n-            hashZMQ = binascii.hexlify(body)\n+        if topic == b\"hashtx\":\n+            hashZMQ = bytes_to_hex_str(body)\n \n         assert_equal(hashRPC, hashZMQ) #blockhash from generate must be equal to the hash received over zmq\n "
      },
      {
        "sha": "fc59152ba12f117f0db5871812ad229cf60935af",
        "filename": "src/test/bctest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/src/test/bctest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa41ee204124da19dcf1e5b8a3aef1e216bf5e6/src/test/bctest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bctest.py?ref=faa41ee204124da19dcf1e5b8a3aef1e216bf5e6",
        "patch": "@@ -2,6 +2,7 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n from __future__ import division,print_function,unicode_literals\n+from io import open\n import subprocess\n import os\n import json\n@@ -16,7 +17,7 @@ def bctest(testDir, testObj, exeext):\n \tinputData = None\n \tif \"input\" in testObj:\n \t\tfilename = testDir + \"/\" + testObj['input']\n-\t\tinputData = open(filename).read()\n+\t\tinputData = open(filename, 'rb').read()\n \t\tstdinCfg = subprocess.PIPE\n \n \toutputFn = None"
      }
    ]
  }
]