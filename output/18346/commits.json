[
  {
    "sha": "fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWRkOTlmNjEwMzJjMGI3NWFkOWIxOThlYjVkOGUzMDdiMDUxOGVl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-13T19:44:11Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-13T19:35:41Z"
      },
      "message": "rpc: Add missing newline in RPCResult description",
      "tree": {
        "sha": "88780ad4f8059c80a616c3b52555c272166aef13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/88780ad4f8059c80a616c3b52555c272166aef13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjuVAwAhUUJ7Uqb9bgCSRGvoBjm9WWvx1YMV/4K2P9oQngB2fKfkNjyfuXwvFly\nzt5Qg9M5xE2aH4yKd32akyVjsi+bGVQEs2K4r6pfBlLr6WZELRArxOk1HMUJM5UZ\n/6z7dPwWoYu6BreON1YrMDO4GF8lwecV2te9R8O2HDKalq7h35gMyc+klp5DKNOf\nA8wv4RJNu/B0b7KfHOP/FY4nrYeV2HPMtbyQCn0xipnisLqClXrGY7p5jnuWg+6t\nI2lLHroxCvxCl2ZbCUBXhka8vez176CMXcFzLwyRe0dITCz7O9xkhttT7Ak10g6s\nr1kOFNHgJ+zrgfmupSocwQi1Av7FqDGAwrpZ+pM679u/34GCBF6VOYdipav1aOKA\nFPC+bklgpA+zFw3hwgZ0OjOiRs4Cqm96cbJbVpWj9lSlA0qJhO+xkxU71hjv8G4P\n8Rhs8EJoleNRU3IyNKJHPI3i7tuDzTRuBQo9Hj8KM+hZkCHgnUv2b0T2uvZ+60XY\n/OeALSHf\n=8ahw\n-----END PGP SIGNATURE-----",
        "payload": "tree 88780ad4f8059c80a616c3b52555c272166aef13\nparent e2d36639ca87b980b147047e4e47cf160b2c9406\nauthor MarcoFalke <falke.marco@gmail.com> 1584128651 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584128141 -0400\n\nrpc: Add missing newline in RPCResult description\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadd99f61032c0b75ad9b198eb5d8e307b0518ee/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2d36639ca87b980b147047e4e47cf160b2c9406",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2d36639ca87b980b147047e4e47cf160b2c9406",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2d36639ca87b980b147047e4e47cf160b2c9406"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "56083b6c981e4247f4878bc84ba4666b0c90b274",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fadd99f61032c0b75ad9b198eb5d8e307b0518ee/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fadd99f61032c0b75ad9b198eb5d8e307b0518ee/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
        "patch": "@@ -2851,9 +2851,9 @@ static UniValue listunspent(const JSONRPCRequest& request)\n                             {RPCResult::Type::BOOL, \"solvable\", \"Whether we know how to spend this output, ignoring the lack of keys\"},\n                             {RPCResult::Type::BOOL, \"reused\", \"(only present if avoid_reuse is set) Whether this output is reused/dirty (sent to an address that was previously spent from)\"},\n                             {RPCResult::Type::STR, \"desc\", \"(only when solvable) A descriptor for spending this output\"},\n-                            {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\"\n-            \"                              from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n-                                \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n+                            {RPCResult::Type::BOOL, \"safe\", \"Whether this output is considered safe to spend. Unconfirmed transactions\\n\"\n+                                                            \"from outside keys and unconfirmed replacement transactions are considered unsafe\\n\"\n+                                                            \"and are not eligible for spending by fundrawtransaction and sendtoaddress.\"},\n                         }},\n                     }\n                 },"
      }
    ]
  },
  {
    "sha": "fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWM1MjI1M2Y4MWE0ZjBkMDRiMjVlYjRiNmMyOGQwNGI4NWVmMTBi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-13T18:40:53Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-03-13T19:36:15Z"
      },
      "message": "rpc: Document an RPCResult for all calls; Enforce at compile time",
      "tree": {
        "sha": "e3993df152dc5f417cbe85375e903e125a0bae34",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3993df152dc5f417cbe85375e903e125a0bae34"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUh6fwwAj5WiYGyPYfwPKItC31R2Xil1BAxs9gm+flaO//mcr4fGY6kyaXXg/RhF\nKZj1IBxc5IrQaYKiMhtw2k6uQxgeyDOcSSo0/P6SgcMRvBaC10bDfxsarXYA6HiU\nqHCZvGxmgI3wKVOPYk1QDFHpzy7wQSEXJeIPOHlUIHCmvBqJLHBajexeYgsXqelR\n0YpZJeBdd+ALTslUbvDqbnbZZXeErZRrQ3YZnypO4klbazI2QOgiL7nAV+Me9GkR\n0N2YxVjsLTp9MA/aaykJGnDnnM00QIdbRrdoyC7pvIMbJWECuM4KC2O0+bULEPnk\nJZlk0sI8AchsWQ9fZABeMI7bPMofUCSEa/qQMH+iJ5H4uHMCxlPDXiXlexT6sB9p\nkT2OiLVJ+9ZSMFmkplu4Jtri+LHRPy9xbwDMY8HgStsUPUcpJ7yGaLBN8O2cTejM\npaT5VAyO2HLaoturwjiHOgo9WFH+V3JID4X89w/VcK6cYB8EahGj3TlfJOFs6Sll\nQ44DNFAg\n=RlDO\n-----END PGP SIGNATURE-----",
        "payload": "tree e3993df152dc5f417cbe85375e903e125a0bae34\nparent fadd99f61032c0b75ad9b198eb5d8e307b0518ee\nauthor MarcoFalke <falke.marco@gmail.com> 1584124853 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1584128175 -0400\n\nrpc: Document an RPCResult for all calls; Enforce at compile time\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fadd99f61032c0b75ad9b198eb5d8e307b0518ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fadd99f61032c0b75ad9b198eb5d8e307b0518ee"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 46,
      "deletions": 41
    },
    "files": [
      {
        "sha": "177ae46eb6b5d98d867d0f56238084549a518baf",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -345,7 +345,7 @@ static UniValue syncwithvalidationinterfacequeue(const JSONRPCRequest& request)\n             RPCHelpMan{\"syncwithvalidationinterfacequeue\",\n                 \"\\nWaits for the validation interface queue to catch up on everything that was there when we entered this function.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"syncwithvalidationinterfacequeue\",\"\")\n             + HelpExampleRpc(\"syncwithvalidationinterfacequeue\",\"\")\n@@ -1435,7 +1435,7 @@ static UniValue preciousblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as precious\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"preciousblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"preciousblock\", \"\\\"blockhash\\\"\")\n@@ -1470,7 +1470,7 @@ static UniValue invalidateblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to mark as invalid\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"invalidateblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"invalidateblock\", \"\\\"blockhash\\\"\")\n@@ -1509,7 +1509,7 @@ static UniValue reconsiderblock(const JSONRPCRequest& request)\n                 {\n                     {\"blockhash\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hash of the block to reconsider\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n             + HelpExampleRpc(\"reconsiderblock\", \"\\\"blockhash\\\"\")\n@@ -1933,7 +1933,7 @@ static UniValue savemempool(const JSONRPCRequest& request)\n             RPCHelpMan{\"savemempool\",\n                 \"\\nDumps the mempool to disk. It will fail until the previous dump is fully loaded.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"savemempool\", \"\")\n             + HelpExampleRpc(\"savemempool\", \"\")"
      },
      {
        "sha": "1bbb5c4beee6f67c6a071b965c38a956cd3ee2c9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -751,7 +751,7 @@ static UniValue submitblock(const JSONRPCRequest& request)\n                     {\"hexdata\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"the hex-encoded block data to submit\"},\n                     {\"dummy\", RPCArg::Type::STR, /* default */ \"ignored\", \"dummy value, for compatibility with BIP22. This value is ignored.\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"Returns JSON Null when valid, a string according to BIP22 otherwise\"},\n                 RPCExamples{\n                     HelpExampleCli(\"submitblock\", \"\\\"mydata\\\"\")\n             + HelpExampleRpc(\"submitblock\", \"\\\"mydata\\\"\")"
      },
      {
        "sha": "c87c1a54189f0109a9699e4b279676a2c25a30a9",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -347,7 +347,7 @@ static UniValue setmocktime(const JSONRPCRequest& request)\n                     {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, UNIX_EPOCH_TIME + \"\\n\"\n             \"   Pass 0 to go back to using the system time.\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n@@ -375,7 +375,7 @@ static UniValue mockscheduler(const JSONRPCRequest& request)\n         {\n             {\"delta_time\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Number of seconds to forward the scheduler into the future.\" },\n         },\n-        RPCResults{},\n+        RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n         RPCExamples{\"\"},\n     }.Check(request);\n \n@@ -579,7 +579,7 @@ static UniValue echo(const JSONRPCRequest& request)\n                 \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n                 \"bitcoin-cli and the GUI. There is no server-side difference.\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"Returns whatever was passed in\"},\n                 RPCExamples{\"\"},\n             }.ToString()\n         );"
      },
      {
        "sha": "e26ca1b07ab1e817fb1b79555f772ebbb134e02e",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 7,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -54,7 +54,7 @@ static UniValue ping(const JSONRPCRequest& request)\n                 \"Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds.\\n\"\n                 \"Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"ping\", \"\")\n             + HelpExampleRpc(\"ping\", \"\")\n@@ -240,7 +240,7 @@ static UniValue addnode(const JSONRPCRequest& request)\n                     {\"node\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The node (see getpeerinfo for nodes)\"},\n                     {\"command\", RPCArg::Type::STR, RPCArg::Optional::NO, \"'add' to add a node to the list, 'remove' to remove a node from the list, 'onetry' to try a connection to the node once\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"addnode\", \"\\\"192.168.0.6:8333\\\" \\\"onetry\\\"\")\n             + HelpExampleRpc(\"addnode\", \"\\\"192.168.0.6:8333\\\", \\\"onetry\\\"\")\n@@ -283,7 +283,7 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, /* default */ \"fallback to nodeid\", \"The IP address/port of the node\"},\n                     {\"nodeid\", RPCArg::Type::NUM, /* default */ \"fallback to address\", \"The node ID (see getpeerinfo for node IDs)\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"disconnectnode\", \"\\\"192.168.0.6:8333\\\"\")\n             + HelpExampleCli(\"disconnectnode\", \"\\\"\\\" 1\")\n@@ -553,7 +553,7 @@ static UniValue setban(const JSONRPCRequest& request)\n                     {\"bantime\", RPCArg::Type::NUM, /* default */ \"0\", \"time in seconds how long (or until when if [absolute] is set) the IP is banned (0 or empty means using the default time of 24h which can also be overwritten by the -bantime startup argument)\"},\n                     {\"absolute\", RPCArg::Type::BOOL, /* default */ \"false\", \"If set, the bantime must be an absolute timestamp expressed in \" + UNIX_EPOCH_TIME},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"setban\", \"\\\"192.168.0.6\\\" \\\"add\\\" 86400\")\n                             + HelpExampleCli(\"setban\", \"\\\"192.168.0.0/24\\\" \\\"add\\\"\")\n@@ -628,7 +628,16 @@ static UniValue listbanned(const JSONRPCRequest& request)\n             RPCHelpMan{\"listbanned\",\n                 \"\\nList all banned IPs/Subnets.\\n\",\n                 {},\n-                RPCResults{},\n+        RPCResult{RPCResult::Type::ARR, \"\", \"\",\n+            {\n+                {RPCResult::Type::OBJ, \"\", \"\",\n+                    {\n+                        {RPCResult::Type::STR, \"address\", \"\"},\n+                        {RPCResult::Type::NUM_TIME, \"banned_until\", \"\"},\n+                        {RPCResult::Type::NUM_TIME, \"ban_created\", \"\"},\n+                        {RPCResult::Type::STR, \"ban_reason\", \"\"},\n+                    }},\n+            }},\n                 RPCExamples{\n                     HelpExampleCli(\"listbanned\", \"\")\n                             + HelpExampleRpc(\"listbanned\", \"\")\n@@ -663,7 +672,7 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n             RPCHelpMan{\"clearbanned\",\n                 \"\\nClear all banned IPs.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"clearbanned\", \"\")\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n@@ -685,7 +694,7 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n                 {\n                     {\"state\", RPCArg::Type::BOOL, RPCArg::Optional::NO, \"true to enable networking, false to disable\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::BOOL, \"\", \"The value that was passed in\"},\n                 RPCExamples{\"\"},\n             }.Check(request);\n "
      },
      {
        "sha": "e2618c16dad9106fb243ee7c5977f94caa08a7e0",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -153,6 +153,7 @@ UniValue help(const JSONRPCRequest& jsonRequest)\n \n UniValue stop(const JSONRPCRequest& jsonRequest)\n {\n+    static const std::string RESULT{PACKAGE_NAME \" stopping\"};\n     // Accept the deprecated and ignored 'detach' boolean argument\n     // Also accept the hidden 'wait' integer argument (milliseconds)\n     // For instance, 'stop 1000' makes the call wait 1 second before returning\n@@ -162,7 +163,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n             RPCHelpMan{\"stop\",\n                 \"\\nRequest a graceful shutdown of \" PACKAGE_NAME \".\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::STR, \"\", \"A string with the content '\" + RESULT + \"'\"},\n                 RPCExamples{\"\"},\n             }.ToString());\n     // Event loop will exit after current HTTP requests have been handled, so\n@@ -171,7 +172,7 @@ UniValue stop(const JSONRPCRequest& jsonRequest)\n     if (jsonRequest.params[0].isNum()) {\n         UninterruptibleSleep(std::chrono::milliseconds{jsonRequest.params[0].get_int()});\n     }\n-    return PACKAGE_NAME \" stopping\";\n+    return RESULT;\n }\n \n static UniValue uptime(const JSONRPCRequest& jsonRequest)"
      },
      {
        "sha": "f65ad1246b8b6159b0faf2cb9aad88ad3666818f",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -290,11 +290,6 @@ struct RPCResult {\n struct RPCResults {\n     const std::vector<RPCResult> m_results;\n \n-    RPCResults()\n-        : m_results{}\n-    {\n-    }\n-\n     RPCResults(RPCResult result)\n         : m_results{{result}}\n     {"
      },
      {
        "sha": "e4d0a3fa6d5fd8d64055f51e99565ad59d3e7598",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -106,7 +106,7 @@ UniValue importprivkey(const JSONRPCRequest& request)\n                     {\"label\", RPCArg::Type::STR, /* default */ \"current label if address exists, otherwise \\\"\\\"\", \"An optional label\"},\n                     {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nDump a private key\\n\"\n             + HelpExampleCli(\"dumpprivkey\", \"\\\"myaddress\\\"\") +\n@@ -203,7 +203,7 @@ UniValue abortrescan(const JSONRPCRequest& request)\n                 \"\\nStops current wallet rescan triggered by an RPC call, e.g. by an importprivkey call.\\n\"\n                 \"Note: Use \\\"getwalletinfo\\\" to query the scanning progress.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::BOOL, \"\", \"Whether the abort was successful\"},\n                 RPCExamples{\n             \"\\nImport a private key\\n\"\n             + HelpExampleCli(\"importprivkey\", \"\\\"mykey\\\"\") +\n@@ -242,7 +242,7 @@ UniValue importaddress(const JSONRPCRequest& request)\n                     {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                     {\"p2sh\", RPCArg::Type::BOOL, /* default */ \"false\", \"Add the P2SH version of the script as well\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nImport an address with rescan\\n\"\n             + HelpExampleCli(\"importaddress\", \"\\\"myaddress\\\"\") +\n@@ -337,7 +337,7 @@ UniValue importprunedfunds(const JSONRPCRequest& request)\n                     {\"rawtransaction\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"A raw transaction in hex funding an already-existing address in wallet\"},\n                     {\"txoutproof\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex output from gettxoutproof that contains the transaction\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n@@ -397,7 +397,7 @@ UniValue removeprunedfunds(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The hex-encoded id of the transaction you are deleting\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"removeprunedfunds\", \"\\\"a8d0c0184dde994a09ec054286f1ce581bebf46446a512166eae7628734ea0a5\\\"\") +\n             \"\\nAs a JSON-RPC call\\n\"\n@@ -443,7 +443,7 @@ UniValue importpubkey(const JSONRPCRequest& request)\n                     {\"label\", RPCArg::Type::STR, /* default */ \"\\\"\\\"\", \"An optional label\"},\n                     {\"rescan\", RPCArg::Type::BOOL, /* default */ \"true\", \"Rescan the wallet for transactions\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nImport a public key with rescan\\n\"\n             + HelpExampleCli(\"importpubkey\", \"\\\"mypubkey\\\"\") +\n@@ -527,7 +527,7 @@ UniValue importwallet(const JSONRPCRequest& request)\n                 {\n                     {\"filename\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet file\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nDump the wallet\\n\"\n             + HelpExampleCli(\"dumpwallet\", \"\\\"test\\\"\") +"
      },
      {
        "sha": "a8164f4393491aee1aa151e022ed7e53ef010b63",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fac52253f81a4f0d04b25eb4b6c28d04b85ef10b/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fac52253f81a4f0d04b25eb4b6c28d04b85ef10b",
        "patch": "@@ -301,7 +301,7 @@ static UniValue setlabel(const JSONRPCRequest& request)\n                     {\"address\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The bitcoin address to be associated with a label.\"},\n                     {\"label\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The label to assign to the address.\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\" \\\"tabby\\\"\")\n             + HelpExampleRpc(\"setlabel\", \"\\\"\" + EXAMPLE_ADDRESS[0] + \"\\\", \\\"tabby\\\"\")\n@@ -784,7 +784,7 @@ static UniValue getunconfirmedbalance(const JSONRPCRequest &request)\n             RPCHelpMan{\"getunconfirmedbalance\",\n                 \"DEPRECATED\\nIdentical to getbalances().mine.untrusted_pending\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NUM, \"\", \"The balance\"},\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n@@ -1776,7 +1776,7 @@ static UniValue abandontransaction(const JSONRPCRequest& request)\n                 {\n                     {\"txid\", RPCArg::Type::STR_HEX, RPCArg::Optional::NO, \"The transaction id\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n             + HelpExampleRpc(\"abandontransaction\", \"\\\"1075db55d416d3ca199f55b6084e2115b9345e16c5cf302fc80e9d5fbf5d48d\\\"\")\n@@ -1817,7 +1817,7 @@ static UniValue backupwallet(const JSONRPCRequest& request)\n                 {\n                     {\"destination\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The destination directory or file\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"backupwallet\", \"\\\"backup.dat\\\"\")\n             + HelpExampleRpc(\"backupwallet\", \"\\\"backup.dat\\\"\")\n@@ -1855,7 +1855,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 {\n                     {\"newsize\", RPCArg::Type::NUM, /* default */ \"100\", \"The new keypool size\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"keypoolrefill\", \"\")\n             + HelpExampleRpc(\"keypoolrefill\", \"\")\n@@ -1907,7 +1907,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n                     {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The wallet passphrase\"},\n                     {\"timeout\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"The time to keep the decryption key in seconds; capped at 100000000 (~3 years).\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nUnlock the wallet for 60 seconds\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 60\") +\n@@ -1987,7 +1987,7 @@ static UniValue walletpassphrasechange(const JSONRPCRequest& request)\n                     {\"oldpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The current passphrase\"},\n                     {\"newpassphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The new passphrase\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"walletpassphrasechange\", \"\\\"old one\\\" \\\"new one\\\"\")\n             + HelpExampleRpc(\"walletpassphrasechange\", \"\\\"old one\\\", \\\"new one\\\"\")\n@@ -2037,7 +2037,7 @@ static UniValue walletlock(const JSONRPCRequest& request)\n                 \"After calling this method, you will need to call walletpassphrase again\\n\"\n                 \"before being able to call any methods which require the wallet to be unlocked.\\n\",\n                 {},\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n             \"\\nSet the passphrase for 2 minutes to perform a transaction\\n\"\n             + HelpExampleCli(\"walletpassphrase\", \"\\\"my pass phrase\\\" 120\") +\n@@ -2082,7 +2082,7 @@ static UniValue encryptwallet(const JSONRPCRequest& request)\n                 {\n                     {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::NO, \"The pass phrase to encrypt the wallet with. It must be at least 1 character, but should be long.\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::STR, \"\", \"A string with further instructions\"},\n                 RPCExamples{\n             \"\\nEncrypt your wallet\\n\"\n             + HelpExampleCli(\"encryptwallet\", \"\\\"my pass phrase\\\"\") +\n@@ -2767,7 +2767,7 @@ static UniValue unloadwallet(const JSONRPCRequest& request)\n                 {\n                     {\"wallet_name\", RPCArg::Type::STR, /* default */ \"the wallet name from the RPC request\", \"The name of the wallet to unload.\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"unloadwallet\", \"wallet_name\")\n             + HelpExampleRpc(\"unloadwallet\", \"wallet_name\")\n@@ -4013,7 +4013,7 @@ UniValue sethdseed(const JSONRPCRequest& request)\n                     {\"seed\", RPCArg::Type::STR, /* default */ \"random seed\", \"The WIF private key to use as the new HD seed.\\n\"\n             \"                             The seed value can be retrieved using the dumpwallet command. It is the private key marked hdseed=1\"},\n                 },\n-                RPCResults{},\n+                RPCResult{RPCResult::Type::NONE, \"\", \"\"},\n                 RPCExamples{\n                     HelpExampleCli(\"sethdseed\", \"\")\n             + HelpExampleCli(\"sethdseed\", \"false\")"
      }
    ]
  }
]