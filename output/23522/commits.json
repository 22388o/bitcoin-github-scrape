[
  {
    "sha": "9b575f1c734c052b695ce921fb6412b22c18fdb4",
    "node_id": "C_kwDOABII59oAKDliNTc1ZjFjNzM0YzA1MmI2OTVjZTkyMWZiNjQxMmIyMmMxOGZkYjQ",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-11T14:54:21Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-11-15T17:08:49Z"
      },
      "message": "Improve fs::PathToString documentation",
      "tree": {
        "sha": "aa4c80b07b92e0385ae0c45c62b44fcb86045310",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa4c80b07b92e0385ae0c45c62b44fcb86045310"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9b575f1c734c052b695ce921fb6412b22c18fdb4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b575f1c734c052b695ce921fb6412b22c18fdb4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9b575f1c734c052b695ce921fb6412b22c18fdb4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9b575f1c734c052b695ce921fb6412b22c18fdb4/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7f0f853373703a020529dd9394fca525475086b7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7f0f853373703a020529dd9394fca525475086b7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7f0f853373703a020529dd9394fca525475086b7"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 34,
      "deletions": 21
    },
    "files": [
      {
        "sha": "188889785686f8c7188c21393eb34c02a06a7884",
        "filename": "doc/developer-notes.md",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b575f1c734c052b695ce921fb6412b22c18fdb4/doc/developer-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b575f1c734c052b695ce921fb6412b22c18fdb4/doc/developer-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/developer-notes.md?ref=9b575f1c734c052b695ce921fb6412b22c18fdb4",
        "patch": "@@ -1254,6 +1254,12 @@ A few guidelines for introducing and reviewing new RPC interfaces:\n \n   - *Rationale*: User-facing consistency.\n \n+- Use `fs::path::u8string()` and `fs::u8path()` functions when converting path\n+  to JSON strings, not `fs::PathToString` and `fs::PathFromString`\n+\n+  - *Rationale*: JSON strings are Unicode strings, not byte strings, and\n+    RFC8259 requires JSON to be encoded as UTF-8.\n+\n Internal interface guidelines\n -----------------------------\n "
      },
      {
        "sha": "dbae2c45f22bfbdd95facc551e19d74f0c6f434c",
        "filename": "src/dbwrapper.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b575f1c734c052b695ce921fb6412b22c18fdb4/src/dbwrapper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b575f1c734c052b695ce921fb6412b22c18fdb4/src/dbwrapper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dbwrapper.cpp?ref=9b575f1c734c052b695ce921fb6412b22c18fdb4",
        "patch": "@@ -136,6 +136,10 @@ CDBWrapper::CDBWrapper(const fs::path& path, size_t nCacheSize, bool fMemory, bo\n         TryCreateDirectories(path);\n         LogPrintf(\"Opening LevelDB in %s\\n\", fs::PathToString(path));\n     }\n+    // PathToString() return value is safe to pass to leveldb open function,\n+    // because on POSIX leveldb passes the byte string directly to ::open(), and\n+    // on Windows it converts from UTF-8 to UTF-16 before calling ::CreateFileW\n+    // (see env_posix.cc and env_windows.cc).\n     leveldb::Status status = leveldb::DB::Open(options, fs::PathToString(path), &pdb);\n     dbwrapper_private::HandleError(status);\n     LogPrintf(\"Opened LevelDB successfully\\n\");"
      },
      {
        "sha": "3cf4371fb4ea0b91aba45d6b8240fa807c15c8ea",
        "filename": "src/fs.h",
        "status": "modified",
        "additions": 24,
        "deletions": 21,
        "changes": 45,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9b575f1c734c052b695ce921fb6412b22c18fdb4/src/fs.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9b575f1c734c052b695ce921fb6412b22c18fdb4/src/fs.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/fs.h?ref=9b575f1c734c052b695ce921fb6412b22c18fdb4",
        "patch": "@@ -94,31 +94,34 @@ static inline path operator+(path p1, path p2)\n \n /**\n  * Convert path object to byte string. On POSIX, paths natively are byte\n- * strings so this is trivial. On Windows, paths natively are Unicode, so an\n- * encoding step is necessary.\n+ * strings, so this is trivial. On Windows, paths natively are Unicode, so an\n+ * encoding step is necessary. The inverse of \\ref PathToString is \\ref\n+ * PathFromString. The strings returned and parsed by these functions can be\n+ * used to call POSIX APIs, and for roundtrip conversion, logging, and\n+ * debugging.\n  *\n- * The inverse of \\ref PathToString is \\ref PathFromString. The strings\n- * returned and parsed by these functions can be used to call POSIX APIs, and\n- * for roundtrip conversion, logging, and debugging. But they are not\n- * guaranteed to be valid UTF-8, and are generally meant to be used internally,\n- * not externally. When communicating with external programs and libraries that\n- * require UTF-8, fs::path::u8string() and fs::u8path() methods can be used.\n- * For other applications, if support for non UTF-8 paths is required, or if\n- * higher-level JSON or XML or URI or C-style escapes are preferred, it may be\n- * also be appropriate to use different path encoding functions.\n- *\n- * Implementation note: On Windows, the std::filesystem::path(string)\n- * constructor and std::filesystem::path::string() method are not safe to use\n- * here, because these methods encode the path using C++'s narrow multibyte\n- * encoding, which on Windows corresponds to the current \"code page\", which is\n- * unpredictable and typically not able to represent all valid paths. So\n- * std::filesystem::path::u8string() and std::filesystem::u8path() functions\n- * are used instead on Windows. On POSIX, u8string/u8path functions are not\n- * safe to use because paths are not always valid UTF-8, so plain string\n- * methods which do not transform the path there are used.\n+ * Because \\ref PathToString and \\ref PathFromString functions don't specify an\n+ * encoding, they are meant to be used internally, not externally. They are not\n+ * appropriate to use in applications requiring UTF-8, where\n+ * fs::path::u8string() and fs::u8path() methods should be used instead. Other\n+ * applications could require still different encodings. For example, JSON, XML,\n+ * or URI applications might prefer to use higher level escapes (\\uXXXX or\n+ * &XXXX; or %XX) instead of multibyte encoding. Rust, Python, Java applications\n+ * may require encoding paths with their respective UTF-8 derivatives WTF-8,\n+ * PEP-383, and CESU-8 (see https://en.wikipedia.org/wiki/UTF-8#Derivatives).\n  */\n static inline std::string PathToString(const path& path)\n {\n+    // Implementation note: On Windows, the std::filesystem::path(string)\n+    // constructor and std::filesystem::path::string() method are not safe to\n+    // use here, because these methods encode the path using C++'s narrow\n+    // multibyte encoding, which on Windows corresponds to the current \"code\n+    // page\", which is unpredictable and typically not able to represent all\n+    // valid paths. So std::filesystem::path::u8string() and\n+    // std::filesystem::u8path() functions are used instead on Windows. On\n+    // POSIX, u8string/u8path functions are not safe to use because paths are\n+    // not always valid UTF-8, so plain string methods which do not transform\n+    // the path there are used.\n #ifdef WIN32\n     return path.u8string();\n #else"
      }
    ]
  }
]