[
  {
    "sha": "f0641f274ffe94fbe7cae43c07a9373013739df2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDY0MWYyNzRmZmU5NGZiZTdjYWU0M2MwN2E5MzczMDEzNzM5ZGYy",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-04-29T21:39:45Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-19T16:20:22Z"
      },
      "message": "Prepend the error/warning prefix for GUI messages",
      "tree": {
        "sha": "74b4f55fef7c2917d02000d492f70e83fd947e4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74b4f55fef7c2917d02000d492f70e83fd947e4f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f0641f274ffe94fbe7cae43c07a9373013739df2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0KYMYACgkQQQEIES5+\nqB8KYRAAgAdxVk3DIuGa2VW4enSlCOYVwsvr8LhZV+IQyHaMh8LXO8EcsT7Sy5bA\nYj69T9kKeierYqdC0UdHQxdMr9W5XIb4XHUXnjTOwo/iB31i1bebUf0pxte2Qvwc\ne+Pq67SwYHTD6iVqXuOD9XnSb4qZbIv07fllRQoBWV36u04gL+bXRT1L6fzry9h0\npGxRyhWcoM5mDmGjo6u6BSPEBcYSAaWybSyT+6TftvLAnIEcQg0FjtMezckA6VGU\nlBBWT/jpw+1wEJ94DrQBbHNrmnHJ17EHahgH/XPYlelNpefoznwqUdmMdtzql0eR\nqtm1zM9FrdB8UzYc4Uij1V4UdiIgLsU72L1ysyKWRNfSkQ8cFHNivTYU5l2+0+J/\nuFY8jZASWz6ptoXkIvRfyCsw6mhfbanvbCVuq/H1EZTb35OTGpo6XWM3QCOPVuSJ\nWF3Us6GVwnQ332GYNFcSF6fegz133+duQl/BvTffALUsrKvaFwYQUtYWlg9nuCq0\nntsvc0FQFUzGDIR0Vem5ptZJ9zYo5Y8XwZTEP6abQnxY0QtKYoQQO8ejU/3YWTrk\nxlpO/Mvsmxy1fRIvmDP9OdJD52tbLd5qYVsG+gl7PBNvjwlgjcSHi6kc6j4ghL3+\nXCsCDJLxmmblxE0RlwsIroT5B2NOjXcQJoblQbaAnq9VMcn1uKw=\n=gltR\n-----END PGP SIGNATURE-----",
        "payload": "tree 74b4f55fef7c2917d02000d492f70e83fd947e4f\nparent 0221420d1a0550cd849e0f3a5ada3738d5931bdd\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1556573985 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560961222 +0300\n\nPrepend the error/warning prefix for GUI messages\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0641f274ffe94fbe7cae43c07a9373013739df2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f0641f274ffe94fbe7cae43c07a9373013739df2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0641f274ffe94fbe7cae43c07a9373013739df2/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0221420d1a0550cd849e0f3a5ada3738d5931bdd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0221420d1a0550cd849e0f3a5ada3738d5931bdd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0221420d1a0550cd849e0f3a5ada3738d5931bdd"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 14,
      "deletions": 13
    },
    "files": [
      {
        "sha": "59fe58a1e2343f4872ae3f18dc5ff75c28a9c9cd",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 12,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0641f274ffe94fbe7cae43c07a9373013739df2/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0641f274ffe94fbe7cae43c07a9373013739df2/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=f0641f274ffe94fbe7cae43c07a9373013739df2",
        "patch": "@@ -1038,9 +1038,10 @@ void BitcoinGUI::setNumBlocks(int count, const QDateTime& blockDate, double nVer\n     progressBar->setToolTip(tooltip);\n }\n \n-void BitcoinGUI::message(const QString &title, const QString &message, unsigned int style, bool *ret)\n+void BitcoinGUI::message(const QString& title, QString message, unsigned int style, bool* ret)\n {\n-    QString strTitle = tr(\"Bitcoin\"); // default title\n+    // Default title. On macOS, the window title is ignored (as required by the macOS Guidelines).\n+    QString strTitle{PACKAGE_NAME};\n     // Default to information icon\n     int nMBoxIcon = QMessageBox::Information;\n     int nNotifyIcon = Notificator::Information;\n@@ -1050,37 +1051,37 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n     // Prefer supplied title over style based title\n     if (!title.isEmpty()) {\n         msgType = title;\n-    }\n-    else {\n+    } else {\n         switch (style) {\n         case CClientUIInterface::MSG_ERROR:\n             msgType = tr(\"Error\");\n+            message = tr(\"Error: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_WARNING:\n             msgType = tr(\"Warning\");\n+            message = tr(\"Warning: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_INFORMATION:\n             msgType = tr(\"Information\");\n+            // No need to prepend the prefix here.\n             break;\n         default:\n             break;\n         }\n     }\n-    // Append title to \"Bitcoin - \"\n-    if (!msgType.isEmpty())\n+\n+    if (!msgType.isEmpty()) {\n         strTitle += \" - \" + msgType;\n+    }\n \n-    // Check for error/warning icon\n     if (style & CClientUIInterface::ICON_ERROR) {\n         nMBoxIcon = QMessageBox::Critical;\n         nNotifyIcon = Notificator::Critical;\n-    }\n-    else if (style & CClientUIInterface::ICON_WARNING) {\n+    } else if (style & CClientUIInterface::ICON_WARNING) {\n         nMBoxIcon = QMessageBox::Warning;\n         nNotifyIcon = Notificator::Warning;\n     }\n \n-    // Display message\n     if (style & CClientUIInterface::MODAL) {\n         // Check for buttons, use OK as default, if none was supplied\n         QMessageBox::StandardButton buttons;\n@@ -1093,9 +1094,9 @@ void BitcoinGUI::message(const QString &title, const QString &message, unsigned\n         int r = mBox.exec();\n         if (ret != nullptr)\n             *ret = r == QMessageBox::Ok;\n-    }\n-    else\n+    } else {\n         notificator->notify(static_cast<Notificator::Class>(nNotifyIcon), strTitle, message);\n+    }\n }\n \n void BitcoinGUI::changeEvent(QEvent *e)"
      },
      {
        "sha": "54a4b3903ca0388beb21244fd9b657201a4b7e84",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f0641f274ffe94fbe7cae43c07a9373013739df2/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f0641f274ffe94fbe7cae43c07a9373013739df2/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=f0641f274ffe94fbe7cae43c07a9373013739df2",
        "patch": "@@ -219,7 +219,7 @@ public Q_SLOTS:\n                             @see CClientUIInterface::MessageBoxFlags\n        @param[in] ret       pointer to a bool that will be modified to whether Ok was clicked (modal only)\n     */\n-    void message(const QString &title, const QString &message, unsigned int style, bool *ret = nullptr);\n+    void message(const QString& title, QString message, unsigned int style, bool* ret = nullptr);\n \n #ifdef ENABLE_WALLET\n     void setCurrentWallet(WalletModel* wallet_model);"
      }
    ]
  },
  {
    "sha": "96fd4ee02f6c3be21cade729b95a85c60634b0f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmZkNGVlMDJmNmMzYmUyMWNhZGU3MjliOTVhODVjNjA2MzRiMGY4",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-04-30T17:55:12Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-19T16:22:34Z"
      },
      "message": "Add MSG_NOPREFIX flag for user messages\n\nIt forces do not prepend error/warning prefix.",
      "tree": {
        "sha": "25cc4654e027e8e78671f7a523384c6405c4604d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/25cc4654e027e8e78671f7a523384c6405c4604d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96fd4ee02f6c3be21cade729b95a85c60634b0f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0KYUoACgkQQQEIES5+\nqB//RA/+J7f36Aog4x00GUvOcLZU7ht7CCqok8JOvSau+iWAWTjMOoMYT6gCZAcf\nBKcKh7etpt6xZeosk696N8Qa/Xz1KpU2dl+pPxoZ4XquOdHeowu84OHg5vFuzRI4\nwpbiicH6qbRSufKKB0XA6ftdRR6hyqZE0f6/vIhS9hhjBESRyqVQdUsa9BCH3W0O\nzl8rE1QDaszle4uTOpdo+GFi+7eQTwF5lhAPmlBiCvgX+GGoBWyYWw/MigzbWT8O\nM7Ej2PtFQYzU7gCNgvwCGXIaLJPXmInSBxb/bhr5CWGq07rp74Jb2utsLveJ6bnx\nhAHWSzw8WR0P0XqMJja2wLMEg5XU5zK0GZTZ0e/6xLA+h4R04YSoDl6hOVmu5peN\nQ+J9XDX+/+QxQ5a81Mx9E5vYngGSVeKcSec1kkzV7fmm/RzUbSLdrLPvVnmAMK7B\nahF073ige4wFfFfZ4o38VdW5SkjNAJtPLNvJSqk2SMTInDYCpbxj32c5LhM4qvzP\n/G73JLRnu2+Jv7GiT4KZIic74xduRJtbGjLBZlzs8/cqH03FRJIw4ZLPcKZjmL2O\nIDoEnef7a+kU7TF0HPSxvC0a3qNkpsSfC7dhikrdeIfzXpb45xVuVpvBXK8IIwyz\ns7aLn5qDdlgyTBCShwQCql3+AIObMs7CvxeRMZ75S/fDdD9DxQY=\n=esMo\n-----END PGP SIGNATURE-----",
        "payload": "tree 25cc4654e027e8e78671f7a523384c6405c4604d\nparent f0641f274ffe94fbe7cae43c07a9373013739df2\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1556646912 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560961354 +0300\n\nAdd MSG_NOPREFIX flag for user messages\n\nIt forces do not prepend error/warning prefix.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fd4ee02f6c3be21cade729b95a85c60634b0f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96fd4ee02f6c3be21cade729b95a85c60634b0f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fd4ee02f6c3be21cade729b95a85c60634b0f8/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f0641f274ffe94fbe7cae43c07a9373013739df2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f0641f274ffe94fbe7cae43c07a9373013739df2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f0641f274ffe94fbe7cae43c07a9373013739df2"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 28,
      "deletions": 20
    },
    "files": [
      {
        "sha": "caab9f326e9ed8e946fb1b2f468736324abdc5d4",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 16,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=96fd4ee02f6c3be21cade729b95a85c60634b0f8",
        "patch": "@@ -18,26 +18,30 @@ bool noui_ThreadSafeMessageBox(const std::string& message, const std::string& ca\n {\n     bool fSecure = style & CClientUIInterface::SECURE;\n     style &= ~CClientUIInterface::SECURE;\n+    bool prefix = !(style & CClientUIInterface::MSG_NOPREFIX);\n+    style &= ~CClientUIInterface::MSG_NOPREFIX;\n \n     std::string strCaption;\n-    // Check for usage of predefined caption\n-    switch (style) {\n-    case CClientUIInterface::MSG_ERROR:\n-        strCaption += _(\"Error\");\n-        break;\n-    case CClientUIInterface::MSG_WARNING:\n-        strCaption += _(\"Warning\");\n-        break;\n-    case CClientUIInterface::MSG_INFORMATION:\n-        strCaption += _(\"Information\");\n-        break;\n-    default:\n-        strCaption += caption; // Use supplied caption (can be empty)\n+    if (prefix) {\n+        switch (style) {\n+        case CClientUIInterface::MSG_ERROR:\n+            strCaption = \"Error: \";\n+            break;\n+        case CClientUIInterface::MSG_WARNING:\n+            strCaption = \"Warning: \";\n+            break;\n+        case CClientUIInterface::MSG_INFORMATION:\n+            strCaption = \"Information: \";\n+            break;\n+        default:\n+            strCaption = caption + \": \"; // Use supplied caption (can be empty)\n+        }\n     }\n \n-    if (!fSecure)\n-        LogPrintf(\"%s: %s\\n\", strCaption, message);\n-    tfm::format(std::cerr, \"%s: %s\\n\", strCaption.c_str(), message.c_str());\n+    if (!fSecure) {\n+        LogPrintf(\"%s%s\\n\", strCaption, message);\n+    }\n+    tfm::format(std::cerr, \"%s%s\\n\", strCaption.c_str(), message.c_str());\n     return false;\n }\n "
      },
      {
        "sha": "ee0680429acb565ba0d1838ee3639b94b9bc1ad2",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=96fd4ee02f6c3be21cade729b95a85c60634b0f8",
        "patch": "@@ -1046,20 +1046,21 @@ void BitcoinGUI::message(const QString& title, QString message, unsigned int sty\n     int nMBoxIcon = QMessageBox::Information;\n     int nNotifyIcon = Notificator::Information;\n \n-    QString msgType;\n+    bool prefix = !(style & CClientUIInterface::MSG_NOPREFIX);\n+    style &= ~CClientUIInterface::MSG_NOPREFIX;\n \n-    // Prefer supplied title over style based title\n+    QString msgType;\n     if (!title.isEmpty()) {\n         msgType = title;\n     } else {\n         switch (style) {\n         case CClientUIInterface::MSG_ERROR:\n             msgType = tr(\"Error\");\n-            message = tr(\"Error: %1\").arg(message);\n+            if (prefix) message = tr(\"Error: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_WARNING:\n             msgType = tr(\"Warning\");\n-            message = tr(\"Warning: %1\").arg(message);\n+            if (prefix) message = tr(\"Warning: %1\").arg(message);\n             break;\n         case CClientUIInterface::MSG_INFORMATION:\n             msgType = tr(\"Information\");"
      },
      {
        "sha": "5e0380dc45ec2df819916b3400777c972756645e",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96fd4ee02f6c3be21cade729b95a85c60634b0f8/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=96fd4ee02f6c3be21cade729b95a85c60634b0f8",
        "patch": "@@ -69,6 +69,9 @@ class CClientUIInterface\n         /** Force blocking, modal message box dialog (not just OS notification) */\n         MODAL               = 0x10000000U,\n \n+        /** Do not prepend error/warning prefix */\n+        MSG_NOPREFIX        = 0x20000000U,\n+\n         /** Do not print contents of message to debug log */\n         SECURE              = 0x40000000U,\n "
      }
    ]
  },
  {
    "sha": "f724f31401b963c75bd64f5e2c5b9d9561a9a9dd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzI0ZjMxNDAxYjk2M2M3NWJkNjRmNWUyYzViOWQ5NTYxYTlhOWRk",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-04-30T17:16:45Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2019-06-19T16:22:34Z"
      },
      "message": "Make AbortNode() aware of MSG_NOPREFIX flag",
      "tree": {
        "sha": "ed3eb33a74bacab01ed7771bc0ee4c1627156451",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ed3eb33a74bacab01ed7771bc0ee4c1627156451"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl0KYUoACgkQQQEIES5+\nqB++lxAAuAIaJ9TeVuD6cfIZ8pg43x9xVVgp/HO7h7DxZa+s2fZUvqEuBP0AbeT+\nBoZOzAC9e/dXjCLkjeHtOkKA4Sf4GXe5APaPN4p1GDb/ac9ZxK4OjYfDbwIfcI8L\nHABp12MKakaLq9kixImcDu76pynkOcXGejrHWLhRWSU2Btv5pQV8P0k7bVb+poVn\npspbWRx0LsEWMdL1STNOARphoaUi1SFo2iYFldu2cgc9TMmztzO7fufnqqujicCx\nMZyNzpcrvSP8hjvdEcfVcIGXgjzXqR/ntWr1Pa9F0dS6O7JOWrVcvCOM0YfvhMTH\nxySgp6CSWs3VhaELLHx0U2fxj7eNeqcDaubBzgjvue4jNRNlwq+0LIHOU45hUO2J\nUYqRptuRkiTIMIcVLABX4TsLVwBS0dkpuksw8EgRmhbXZmkb9Vjvd6LBF5lc3z36\nHsLorKrw1XuQL5qBGMpsTlhWY9rBGHU221CxbtbOX7uZFToKazC6Kby9PqmCMIge\n3WIOulmGMF+Wp0mMr+v0g2gaA28JGoVL6GwVT26aTj4n6WCa9EfrR1OoZKtbUjwv\n4UBTwWv4ymoaJi3OW4QQUkziBTtkhxyaItTW7q77v5NB6NtchL/4oR7ig1OUl/x5\nVfjMNN531qYdHxEsJyt5CE6cLJ0jwRqhE2WC01fr2vhoQk7A8dg=\n=QG5D\n-----END PGP SIGNATURE-----",
        "payload": "tree ed3eb33a74bacab01ed7771bc0ee4c1627156451\nparent 96fd4ee02f6c3be21cade729b95a85c60634b0f8\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1556644605 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1560961354 +0300\n\nMake AbortNode() aware of MSG_NOPREFIX flag\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96fd4ee02f6c3be21cade729b95a85c60634b0f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96fd4ee02f6c3be21cade729b95a85c60634b0f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96fd4ee02f6c3be21cade729b95a85c60634b0f8"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 12,
      "deletions": 10
    },
    "files": [
      {
        "sha": "d39b78614ccb5d5124169c2a5ef99b874cfd3e5a",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 10,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f724f31401b963c75bd64f5e2c5b9d9561a9a9dd/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=f724f31401b963c75bd64f5e2c5b9d9561a9a9dd",
        "patch": "@@ -1374,20 +1374,22 @@ bool UndoReadFromDisk(CBlockUndo& blockundo, const CBlockIndex* pindex)\n }\n \n /** Abort with a message */\n-static bool AbortNode(const std::string& strMessage, const std::string& userMessage=\"\")\n+static bool AbortNode(const std::string& strMessage, const std::string& userMessage = \"\", unsigned int prefix = 0)\n {\n     SetMiscWarning(strMessage);\n     LogPrintf(\"*** %s\\n\", strMessage);\n-    uiInterface.ThreadSafeMessageBox(\n-        userMessage.empty() ? _(\"Error: A fatal internal error occurred, see debug.log for details\") : userMessage,\n-        \"\", CClientUIInterface::MSG_ERROR);\n+    if (!userMessage.empty()) {\n+        uiInterface.ThreadSafeMessageBox(userMessage, \"\", CClientUIInterface::MSG_ERROR | prefix);\n+    } else {\n+        uiInterface.ThreadSafeMessageBox(_(\"Error: A fatal internal error occurred, see debug.log for details\"), \"\", CClientUIInterface::MSG_ERROR | CClientUIInterface::MSG_NOPREFIX);\n+    }\n     StartShutdown();\n     return false;\n }\n \n-static bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage=\"\")\n+static bool AbortNode(CValidationState& state, const std::string& strMessage, const std::string& userMessage = \"\", unsigned int prefix = 0)\n {\n-    AbortNode(strMessage, userMessage);\n+    AbortNode(strMessage, userMessage, prefix);\n     return state.Error(strMessage);\n }\n \n@@ -1998,7 +2000,7 @@ bool CChainState::FlushStateToDisk(\n         if (fDoFullFlush || fPeriodicWrite) {\n             // Depend on nMinDiskSpace to ensure we can write block index\n             if (!CheckDiskSpace(GetBlocksDir())) {\n-                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n             }\n             // First make sure all block and undo data is flushed to disk.\n             FlushBlockFile();\n@@ -2033,7 +2035,7 @@ bool CChainState::FlushStateToDisk(\n             // an overestimation, as most will delete an existing entry or\n             // overwrite one. Still, use a conservative safety factor of 2.\n             if (!CheckDiskSpace(GetDataDir(), 48 * 2 * 2 * pcoinsTip->GetCacheSize())) {\n-                return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+                return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n             }\n             // Flush the chainstate (which may refer to block index entries).\n             if (!pcoinsTip->Flush())\n@@ -2899,7 +2901,7 @@ static bool FindBlockPos(FlatFilePos &pos, unsigned int nAddSize, unsigned int n\n         bool out_of_space;\n         size_t bytes_allocated = BlockFileSeq().Allocate(pos, nAddSize, out_of_space);\n         if (out_of_space) {\n-            return AbortNode(\"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+            return AbortNode(\"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n         }\n         if (bytes_allocated != 0 && fPruneMode) {\n             fCheckForPruning = true;\n@@ -2923,7 +2925,7 @@ static bool FindUndoPos(CValidationState &state, int nFile, FlatFilePos &pos, un\n     bool out_of_space;\n     size_t bytes_allocated = UndoFileSeq().Allocate(pos, nAddSize, out_of_space);\n     if (out_of_space) {\n-        return AbortNode(state, \"Disk space is low!\", _(\"Error: Disk space is low!\"));\n+        return AbortNode(state, \"Disk space is too low!\", _(\"Error: Disk space is too low!\"), CClientUIInterface::MSG_NOPREFIX);\n     }\n     if (bytes_allocated != 0 && fPruneMode) {\n         fCheckForPruning = true;"
      }
    ]
  }
]