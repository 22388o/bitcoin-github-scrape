luke-jr,2014-07-26T18:21:43Z,"Big NACK here... Especially on creating our own package system. This also makes a major step backwards for gitian, by undoing the split yml files.\n\nIf you want a new package manager, please do it outside the main repository. It doesn't have any need to be so closely tied.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50244442,50244442,
theuni,2014-07-26T20:27:35Z,"Please read the entire description. This is in no way a step backwards. Split yml files are a goal of yours that I have never shared. The package cache negates the need entirely. It will only rebuild the parts that are necessary. If a dep is changed, that dep gets rebuilt (and any anything that depends on it). That is superior to split yml's in every way.\n\nGitian is a mechanism for regulating th",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50247538,50247538,
sipa,2014-07-27T13:36:37Z,Works perfectly here (Ubuntu 14.04).\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50264520,50264520,
luke-jr,2014-07-27T14:02:52Z,"I agree it makes sense to share it with other systems, but putting it in the main repo accomplishes the _opposite_ of that. Nothing else can practically use this as proposed since it is tightly tied to Bitcoin Core.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50265123,50265123,
theuni,2014-07-27T15:36:36Z,"@luke-jr By other systems, i meant other Core subsystems. My mistake. Unified deps are useful for building bitcoin for dev (as @sipa probably just tested), for c-i, for release processes, etc. It's tightly tied to Bitcoin Core because it was designed to fit Bitcoin Core's needs - it sacrifices build-speed for determinism, and targets our release goals in terms of static/shared dependencies.\n\nSha",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50270809,50270809,
luke-jr,2014-07-27T16:12:00Z,"@theuni The goal of the project is to be modular, splitting Core into multiple independent components. The more we throw in this one repo, the harder that becomes. It also increases the burden on those who are not using and/or don't care about the static binaries. Furthermore, there is no benefit to including a package manager in Core itself. Finally, Bitcoin is more than just Bitcoin Core, and we",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50277761,50277761,
sipa,2014-07-27T16:16:56Z,"I'm certainly in favor of modularizing the code. Initially inside the repository, and hopefully eventually into separate repositories once APIs are sufficiently stable.\n\nStill, we'll want some way of easily building the release binaries, which will be built from some predetermined set of sources. It can even be a separate repository in its own right - bitcoin-release for example, which you're fr",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50277876,50277876,
sipa,2014-07-27T16:34:38Z,My only real requirement is that we remain capable of building gitian binaries when this gets merged.\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50278402,50278402,
theuni,2014-07-27T16:55:33Z,"@luke-jr To your points\n- If anything, this makes modularization easier. For example, with this in place, we could use libsecp256k1 and leveldb much more easily as external libraries, because we could be sure of how they were built for release. Same goes for new modules as we continue to break them out.\n- This does not increase anyone's burden. The Core build-system remains exactly as-is, this j",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50278940,50278940,
sipa,2014-07-27T17:11:47Z,"@theuni I'm not arguing for that now, just suggesting it as a possible way forward for if/when we're actually at the stage where we want separate repositories.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50279358,50279358,
luke-jr,2014-07-27T17:19:39Z,"Releases are code. Binaries are just a convenience for people too lazy to build it. Deterministic binaries is outside the scope of Bitcoin Core in general, which is to be a full node and wallet implementation. If you want to improve the process for deterministic binaries, I agree you should be contributing to the upstream tools (gitian) designed for that, rather than trying to throw an entire pack",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50279535,50279535,
theuni,2014-07-27T17:42:24Z,Please stop focusing on Gitian. This work was done primarily to replace the current pull-tester. Gitian can use the results as a side-effect. It would be silly not to. I'll not argue these non-points anymore.\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50280151,50280151,
ghost,2014-07-27T20:14:55Z,"@sipa @luke-jr A true CI system does all the testing and building of binary releases every time a pull is merged. What @theuni is creating here is a proper CI system. What he is doing is absolutely the right thing and very standard in commercial software development. It makes testing painless, building painless. Of course you can still ask others to build to check the final builds and this would m",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50284382,50284382,
luke-jr,2014-07-27T20:27:00Z,"@drak Nobody builds every dependency for every test. And if they do, they don't put the build scripts for every dependency in the main code repo.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50284697,50284697,
luke-jr,2014-07-27T20:30:40Z,Testing everything does not mean including everythings' build scripts in every end-project repo.\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50284816,50284816,
luke-jr,2014-07-27T20:43:45Z,"@drak So in your world (which seems quite different from what I've seen in reality..), every single program's source code has its own unique copy of the build scripts for every library it uses? Why?\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50285161,50285161,
ghost,2014-07-27T21:05:20Z,"@luke-jr In the case of projects that are happy to rely on a given build environment, say the standard packages of a known linux distribution then you would just accept the VM state. In a project that does not trust the dependencies except those which it compiles itself, you recreate your deps. It doesn't sound like you have much experience of CI in the real world. It's very common to have multipl",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50285737,50285737,
luke-jr,2014-07-27T21:12:59Z,"@drak That's my point: Bitcoin Core should be the super-project, while dependencies should live outside it in (potentially reused) child projects.\n\nAs for ""now anyone, including normal users can test out new GUI features etc"" and ""verifying builds are in fact as they should be (hashes match) will be a trivial exercise"", we already have both of these with the pulltester and gitian. This PR in fac",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50285947,50285947,
theuni,2014-07-27T21:45:26Z,"@luke-jr seriously, read the description before commenting any further. This was written meticulously to _avoid_ rebuilding every dependency for each build. 99% of the time, none will be built. Gitian as well. A full pull-tester build, or Gitian build, will complete in 3-4 minutes. I repeat: Nothing will be rebuilt if it hasn't been modified.\n\nIf you're not going to bother reading the descriptio",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50286896,50286896,
luke-jr,2014-07-27T22:09:58Z,@theuni I don't see that in the code.\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50287505,50287505,
theuni,2014-07-27T22:48:01Z,"@luke-jr The entirety of the work is based on avoiding rebuilding. You've now confirmed that you've neither read the description nor the readme, and that you drew your conclusions based on the file structure alone. As I said earlier, I'm happy to have a spirited debate about the merits or implementation of the work. But I'm not going to argue your preconceived notions, there's nothing to be gained",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50288509,50288509,
luke-jr,2014-07-27T23:07:10Z,"Ok, I see the gitian patch. But the other points still stand (although perhaps this PR doesn't make it much _worse_ than it previously was in light of the gitian patch). I suppose things can be improved later on if people are dead-set on having this merged.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50289004,50289004,
theuni,2014-07-27T23:33:22Z,"The PR that I sent upstream to gitian introduces 2 caches: one for common (shared) artifacts, and one for project-specific artifacts. This means that all projects can share a single generic cache pool, as well as maintaining one of their own.\n\nIt's a very primitive patch, and I only meant for it to be a starting point for the discussion. But it does work, and achieves what I set out to do. It im",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50289624,50289624,
laanwj,2014-07-28T07:06:30Z,"Looks good to me. Worked fine the last time I tried and I really like how it works. \n\nBTW: If we can get this to work on msys, we can throw out the incomplete steps in `doc/build-msw.md` and make building on windows easy.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50306221,50306221,
laanwj,2014-07-28T07:49:17Z,How to configure/build with the dependencies that I've built in depends/ ? Are they picked up automatically? I think this should be documented.\n,https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50308855,50308855,
theuni,2014-07-28T16:13:06Z,"@laanwj See the readme here: https://github.com/theuni/bitcoin/blob/depends-travis/depends/README\n\nReal docs are high on my todo, once the major build issues are fixed.\n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50360039,50360039,
theuni,2014-07-30T04:18:36Z,"Quick update:\nSee https://travis-ci.org/coryfields/bitcoin/builds/31201853 for most recent run.\nTemporarily, only Linux is enabled on the current build with caching. Completes in ~2.5 minutes, including ComparisonTool checks\n- Caching has been enabled, so builds are very speedy now. I hooked up ccache as well, so the actual 'make' is down to a few seconds.\n- As suggested by @sipa, the comparis",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50572056,50572056,
laanwj,2014-07-30T06:38:21Z,"@theuni Thanks, that was exactly what I was looking for.\n\nA small nit, from that doc\n\n>   A prefix will be generated that's suitable for plugging into Bitcoin's configure. In the above example, a dir named i686-w64-mingw32 will be created. To use it for Bitcoin: \n> \n>  ./configure --prefix=`pwd`/depends/i686-w64-mingw32\n\nI'm not sure that using '--prefix' for this is  the right way here. P",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50579011,50579011,
theuni,2014-07-30T15:54:37Z,"The --prefix thing is an autoconf trick, and I'm afraid there's probably no avoiding it (if you want the convenience of it, anyway). When --prefix is used, it checks $prefix/share/config.site for data that can be used to seed configure. One slightly possible alternative is using a config.cache instead, but I think that would be quite a bit of trouble.\n\nThe cost of not using the --prefix trick is",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50635080,50635080,
laanwj,2014-07-30T16:00:42Z,"Thanks, it sounds completely sensible now, I had no idea configure looked for a configuration file in the --prefix. \n",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-50635996,50635996,
BitcoinPullTester,2014-08-08T19:32:27Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/p4592_1dec09b341f61836147d87656aea7f7be02aab6d/ for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-te",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-51647403,51647403,
theuni,2014-08-08T19:36:16Z,"Updated title and description.\n\ntl;dr: Ready for review and (I believe) usage. I added some docs in depends, please fire away with additional questions and I'll add answers there.\n\nPulling this in won't change anything, as Travis and Gitian are not yet hooked up. Once merged, I'm hoping to have Travis setup and running along-side the current pull-tester a few days later. After that, I'll PR th",https://github.com/bitcoin/bitcoin/pull/4592#issuecomment-51647799,51647799,
sipa,2014-07-31T01:22:21Z,"Any reason for not just keeping all hashes (recipe hashes, build ids, ...) full sha256 checksums (without any cut), and only at the last step, for the filename, shorten things if necessary?\n",https://github.com/bitcoin/bitcoin/pull/4592#discussion_r15622606,15622606,depends/funcs.mk
theuni,2014-07-31T02:02:00Z,"Uhmm, probably not. I'll make that change.\n",https://github.com/bitcoin/bitcoin/pull/4592#discussion_r15623465,15623465,depends/funcs.mk
