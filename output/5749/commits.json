[
  {
    "sha": "1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZmRiOWZhM2Y5MDVkZjk1NmVkNjFkYmY2YWUwODZjOTYzZmQxNzkz",
    "commit": {
      "author": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-02-04T08:11:49Z"
      },
      "committer": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-11T05:07:17Z"
      },
      "message": "Help messages correctly formatted (79 chars)\n\nHelp messages are formatted programmatically with FormatParagraph\nin order not to break existing strings in Transifex.\n\nThe new format works even if the translation of the strings\nmodifies the lenght of the message.\n\nSqashed 6 commits in a single one.\nHelp messages correctly formatted for SVGA text mode (132 chars)\n\nHelp messages are formatted programmatically with FormatParagraph\nin order not to break existing strings in Transifex.\n\nThe new format should work even if the translation of the strings\nmodifies the lenght of the message.\n\nFix - syntax error\n\nCorrect formatting for 79 chars\n\nCorrectly based on C++ functions\n\nRemoved spare spaces from option strings\n\nFix - syntax error",
      "tree": {
        "sha": "e41a28ea27ed9d6a43a0ce375f7c251c0de40e5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e41a28ea27ed9d6a43a0ce375f7c251c0de40e5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/comments",
    "author": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8cbe1f4f5870a165be729cabb9b55dcbf0f85e09"
      }
    ],
    "stats": {
      "total": 354,
      "additions": 193,
      "deletions": 161
    },
    "files": [
      {
        "sha": "2fa8de6fd83996e2543e5670be49730053ed2736",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -20,21 +20,21 @@ using namespace json_spirit;\n std::string HelpMessageCli()\n {\n     string strUsage;\n-    strUsage += _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-    strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n-                                                \"solved instantly. This is intended for regression testing tools and app development.\") + \"\\n\";\n-    strUsage += \"  -rpcconnect=<ip>       \" + strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcwait               \" + _(\"Wait for RPC server to start\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+    strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be \"\n+                                             \"solved instantly. This is intended for regression testing tools and app development.\"));\n+    strUsage += HelpMessageOpt(\"-rpcconnect=<ip>\", strprintf(_(\"Send commands to node running on <ip> (default: %s)\"), \"127.0.0.1\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Connect to JSON-RPC on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcwait\", _(\"Wait for RPC server to start\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+\n+    strUsage += HelpMessageGroup(_(\"SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "78f5c2c4b6bf6fe21846e7c1d6ca906d8e333e08",
        "filename": "src/bitcoin-tx.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 27,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-tx.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/bitcoin-tx.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-tx.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -54,38 +54,34 @@ static bool AppInitRawTx(int argc, char* argv[])\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Options:\") + \"\\n\";\n-        strUsage += \"  -?                      \" + _(\"This help message\") + \"\\n\";\n-        strUsage += \"  -create                 \" + _(\"Create new, empty TX.\") + \"\\n\";\n-        strUsage += \"  -json                   \" + _(\"Select JSON output\") + \"\\n\";\n-        strUsage += \"  -txid                   \" + _(\"Output only the hex-encoded transaction id of the resultant transaction.\") + \"\\n\";\n-        strUsage += \"  -regtest                \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"  -testnet                \" + _(\"Use the test network\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Options:\"));\n+        strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+        strUsage += HelpMessageOpt(\"-create\", _(\"Create new, empty TX.\"));\n+        strUsage += HelpMessageOpt(\"-json\", _(\"Select JSON output\"));\n+        strUsage += HelpMessageOpt(\"-txid\", _(\"Output only the hex-encoded transaction id of the resultant transaction.\"));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\"));\n+        strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n \n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-\n-        strUsage = _(\"Commands:\") + \"\\n\";\n-        strUsage += \"  delin=N                \" + _(\"Delete input N from TX\") + \"\\n\";\n-        strUsage += \"  delout=N               \" + _(\"Delete output N from TX\") + \"\\n\";\n-        strUsage += \"  in=TXID:VOUT           \" + _(\"Add input to TX\") + \"\\n\";\n-        strUsage += \"  locktime=N             \" + _(\"Set TX lock time to N\") + \"\\n\";\n-        strUsage += \"  nversion=N             \" + _(\"Set TX version to N\") + \"\\n\";\n-        strUsage += \"  outaddr=VALUE:ADDRESS  \" + _(\"Add address-based output to TX\") + \"\\n\";\n-        strUsage += \"  outscript=VALUE:SCRIPT \" + _(\"Add raw script output to TX\") + \"\\n\";\n-        strUsage += \"  sign=SIGHASH-FLAGS     \" + _(\"Add zero or more signatures to transaction\") + \"\\n\";\n-        strUsage += \"      This command requires JSON registers:\\n\";\n-        strUsage += \"      prevtxs=JSON object\\n\";\n-        strUsage += \"      privatekeys=JSON object\\n\";\n-        strUsage += \"      See signrawtransaction docs for format of sighash flags, JSON objects.\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Commands:\"));\n+        strUsage += HelpMessageOpt(\"delin=N\", _(\"Delete input N from TX\"));\n+        strUsage += HelpMessageOpt(\"delout=N\", _(\"Delete output N from TX\"));\n+        strUsage += HelpMessageOpt(\"in=TXID:VOUT\", _(\"Add input to TX\"));\n+        strUsage += HelpMessageOpt(\"locktime=N\", _(\"Set TX lock time to N\"));\n+        strUsage += HelpMessageOpt(\"nversion=N\", _(\"Set TX version to N\"));\n+        strUsage += HelpMessageOpt(\"outaddr=VALUE:ADDRESS\", _(\"Add address-based output to TX\"));\n+        strUsage += HelpMessageOpt(\"outscript=VALUE:SCRIPT\", _(\"Add raw script output to TX\"));\n+        strUsage += HelpMessageOpt(\"sign=SIGHASH-FLAGS\", _(\"Add zero or more signatures to transaction\") + \". \" +\n+            _(\"This command requires JSON registers:\") +\n+            _(\"prevtxs=JSON object\") + \", \" +\n+            _(\"privatekeys=JSON object\") + \". \" +\n+            _(\"See signrawtransaction docs for format of sighash flags, JSON objects.\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n-        strUsage = _(\"Register Commands:\") + \"\\n\";\n-        strUsage += \"  load=NAME:FILENAME     \" + _(\"Load JSON file FILENAME into register NAME\") + \"\\n\";\n-        strUsage += \"  set=NAME:JSON-STRING   \" + _(\"Set register NAME to given JSON-STRING\") + \"\\n\";\n-        strUsage += \"\\n\";\n+        strUsage = HelpMessageGroup(_(\"Register Commands:\"));\n+        strUsage += HelpMessageOpt(\"load=NAME:FILENAME\", _(\"Load JSON file FILENAME into register NAME\"));\n+        strUsage += HelpMessageOpt(\"set=NAME:JSON-STRING\", _(\"Set register NAME to given JSON-STRING\"));\n         fprintf(stdout, \"%s\", strUsage.c_str());\n \n         return false;"
      },
      {
        "sha": "eea02dc242ffb754b409cdd4c348deb9bb61818b",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 119,
        "changes": 242,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -256,157 +256,161 @@ void OnRPCPreCommand(const CRPCCommand& cmd)\n \n std::string HelpMessage(HelpMessageMode mode)\n {\n+\n     // When adding new options to the categories, please keep and ensure alphabetical ordering.\n-    string strUsage = _(\"Options:\") + \"\\n\";\n-    strUsage += \"  -?                     \" + _(\"This help message\") + \"\\n\";\n-    strUsage += \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\") + \"\\n\";\n-    strUsage += \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\";\n-    strUsage += \"  -checkblocks=<n>       \" + strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288) + \"\\n\";\n-    strUsage += \"  -checklevel=<n>        \" + strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3) + \"\\n\";\n-    strUsage += \"  -conf=<file>           \" + strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\") + \"\\n\";\n+    string strUsage = HelpMessageGroup(_(\"Options:\"));\n+    strUsage += HelpMessageOpt(\"-?\", _(\"This help message\"));\n+    strUsage += HelpMessageOpt(\"-alertnotify=<cmd>\", _(\"Execute command when a relevant alert is received or we see a really long fork (%s in cmd is replaced by message)\"));\n+    strUsage += HelpMessageOpt(\"-blocknotify=<cmd>\", _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\"));\n+    strUsage += HelpMessageOpt(\"-checkblocks=<n>\", strprintf(_(\"How many blocks to check at startup (default: %u, 0 = all)\"), 288));\n+    strUsage += HelpMessageOpt(\"-checklevel=<n>\", strprintf(_(\"How thorough the block verification of -checkblocks is (0-4, default: %u)\"), 3));\n+    strUsage += HelpMessageOpt(\"-conf=<file>\", strprintf(_(\"Specify configuration file (default: %s)\"), \"bitcoin.conf\"));\n     if (mode == HMM_BITCOIND)\n     {\n #if !defined(WIN32)\n-        strUsage += \"  -daemon                \" + _(\"Run in the background as a daemon and accept commands\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-daemon\", _(\"Run in the background as a daemon and accept commands\"));\n #endif\n     }\n-    strUsage += \"  -datadir=<dir>         \" + _(\"Specify data directory\") + \"\\n\";\n-    strUsage += \"  -dbcache=<n>           \" + strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache) + \"\\n\";\n-    strUsage += \"  -loadblock=<file>      \" + _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -maxorphantx=<n>       \" + strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS) + \"\\n\";\n-    strUsage += \"  -par=<n>               \" + strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"), -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-datadir=<dir>\", _(\"Specify data directory\"));\n+    strUsage += HelpMessageOpt(\"-dbcache=<n>\", strprintf(_(\"Set database cache size in megabytes (%d to %d, default: %d)\"), nMinDbCache, nMaxDbCache, nDefaultDbCache));\n+    strUsage += HelpMessageOpt(\"-loadblock=<file>\", _(\"Imports blocks from external blk000??.dat file\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-maxorphantx=<n>\", strprintf(_(\"Keep at most <n> unconnectable transactions in memory (default: %u)\"), DEFAULT_MAX_ORPHAN_TRANSACTIONS));\n+    strUsage += HelpMessageOpt(\"-par=<n>\", strprintf(_(\"Set the number of script verification threads (%u to %d, 0 = auto, <0 = leave that many cores free, default: %d)\"),\n+        -(int)boost::thread::hardware_concurrency(), MAX_SCRIPTCHECK_THREADS, DEFAULT_SCRIPTCHECK_THREADS));\n #ifndef WIN32\n-    strUsage += \"  -pid=<file>            \" + strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-pid=<file>\", strprintf(_(\"Specify pid file (default: %s)\"), \"bitcoind.pid\"));\n #endif\n-    strUsage += \"  -reindex               \" + _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-reindex\", _(\"Rebuild block chain index from current blk000??.dat files\") + \" \" + _(\"on startup\"));\n #if !defined(WIN32)\n-    strUsage += \"  -sysperms              \" + _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-sysperms\", _(\"Create new files with system default permissions, instead of umask 077 (only effective with disabled wallet functionality)\"));\n #endif\n-    strUsage += \"  -txindex               \" + strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Connection options:\") + \"\\n\";\n-    strUsage += \"  -addnode=<ip>          \" + _(\"Add a node to connect to and attempt to keep the connection open\") + \"\\n\";\n-    strUsage += \"  -banscore=<n>          \" + strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100) + \"\\n\";\n-    strUsage += \"  -bantime=<n>           \" + strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400) + \"\\n\";\n-    strUsage += \"  -bind=<addr>           \" + _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -connect=<ip>          \" + _(\"Connect only to the specified node(s)\") + \"\\n\";\n-    strUsage += \"  -discover              \" + _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\") + \"\\n\";\n-    strUsage += \"  -dns                   \" + _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\") + \"\\n\";\n-    strUsage += \"  -dnsseed               \" + _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\") + \"\\n\";\n-    strUsage += \"  -externalip=<ip>       \" + _(\"Specify your own public address\") + \"\\n\";\n-    strUsage += \"  -forcednsseed          \" + strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -listen                \" + _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\") + \"\\n\";\n-    strUsage += \"  -maxconnections=<n>    \" + strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125) + \"\\n\";\n-    strUsage += \"  -maxreceivebuffer=<n>  \" + strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000) + \"\\n\";\n-    strUsage += \"  -maxsendbuffer=<n>     \" + strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000) + \"\\n\";\n-    strUsage += \"  -onion=<ip:port>       \" + strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\") + \"\\n\";\n-    strUsage += \"  -onlynet=<net>         \" + _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\") + \"\\n\";\n-    strUsage += \"  -permitbaremultisig    \" + strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -port=<port>           \" + strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333) + \"\\n\";\n-    strUsage += \"  -proxy=<ip:port>       \" + _(\"Connect through SOCKS5 proxy\") + \"\\n\";\n-    strUsage += \"  -seednode=<ip>         \" + _(\"Connect to a node to retrieve peer addresses, and disconnect\") + \"\\n\";\n-    strUsage += \"  -timeout=<n>           \" + strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-txindex\", strprintf(_(\"Maintain a full transaction index, used by the getrawtransaction rpc call (default: %u)\"), 0));\n+\n+    strUsage += HelpMessageGroup(_(\"Connection options:\"));\n+    strUsage += HelpMessageOpt(\"-addnode=<ip>\", _(\"Add a node to connect to and attempt to keep the connection open\"));\n+    strUsage += HelpMessageOpt(\"-banscore=<n>\", strprintf(_(\"Threshold for disconnecting misbehaving peers (default: %u)\"), 100));\n+    strUsage += HelpMessageOpt(\"-bantime=<n>\", strprintf(_(\"Number of seconds to keep misbehaving peers from reconnecting (default: %u)\"), 86400));\n+    strUsage += HelpMessageOpt(\"-bind=<addr>\", _(\"Bind to given address and always listen on it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-connect=<ip>\", _(\"Connect only to the specified node(s)\"));\n+    strUsage += HelpMessageOpt(\"-discover\", _(\"Discover own IP addresses (default: 1 when listening and no -externalip or -proxy)\"));\n+    strUsage += HelpMessageOpt(\"-dns\", _(\"Allow DNS lookups for -addnode, -seednode and -connect\") + \" \" + _(\"(default: 1)\"));\n+    strUsage += HelpMessageOpt(\"-dnsseed\", _(\"Query for peer addresses via DNS lookup, if low on addresses (default: 1 unless -connect)\"));\n+    strUsage += HelpMessageOpt(\"-externalip=<ip>\", _(\"Specify your own public address\"));\n+    strUsage += HelpMessageOpt(\"-forcednsseed\", strprintf(_(\"Always query for peer addresses via DNS lookup (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-listen\", _(\"Accept connections from outside (default: 1 if no -proxy or -connect)\"));\n+    strUsage += HelpMessageOpt(\"-maxconnections=<n>\", strprintf(_(\"Maintain at most <n> connections to peers (default: %u)\"), 125));\n+    strUsage += HelpMessageOpt(\"-maxreceivebuffer=<n>\", strprintf(_(\"Maximum per-connection receive buffer, <n>*1000 bytes (default: %u)\"), 5000));\n+    strUsage += HelpMessageOpt(\"-maxsendbuffer=<n>\", strprintf(_(\"Maximum per-connection send buffer, <n>*1000 bytes (default: %u)\"), 1000));\n+    strUsage += HelpMessageOpt(\"-onion=<ip:port>\", strprintf(_(\"Use separate SOCKS5 proxy to reach peers via Tor hidden services (default: %s)\"), \"-proxy\"));\n+    strUsage += HelpMessageOpt(\"-onlynet=<net>\", _(\"Only connect to nodes in network <net> (ipv4, ipv6 or onion)\"));\n+    strUsage += HelpMessageOpt(\"-permitbaremultisig\", strprintf(_(\"Relay non-P2SH multisig (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-port=<port>\", strprintf(_(\"Listen for connections on <port> (default: %u or testnet: %u)\"), 8333, 18333));\n+    strUsage += HelpMessageOpt(\"-proxy=<ip:port>\", _(\"Connect through SOCKS5 proxy\"));\n+    strUsage += HelpMessageOpt(\"-seednode=<ip>\", _(\"Connect to a node to retrieve peer addresses, and disconnect\"));\n+    strUsage += HelpMessageOpt(\"-timeout=<n>\", strprintf(_(\"Specify connection timeout in milliseconds (minimum: 1, default: %d)\"), DEFAULT_CONNECT_TIMEOUT));\n #ifdef USE_UPNP\n #if USE_UPNP\n-    strUsage += \"  -upnp                  \" + _(\"Use UPnP to map the listening port (default: 1 when listening)\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", _(\"Use UPnP to map the listening port (default: 1 when listening)\"));\n #else\n-    strUsage += \"  -upnp                  \" + strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-upnp\", strprintf(_(\"Use UPnP to map the listening port (default: %u)\"), 0));\n #endif\n #endif\n-    strUsage += \"  -whitebind=<addr>      \" + _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\") + \"\\n\";\n-    strUsage += \"  -whitelist=<netmask>   \" + _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-whitebind=<addr>\", _(\"Bind to given address and whitelist peers connecting to it. Use [host]:port notation for IPv6\"));\n+    strUsage += HelpMessageOpt(\"-whitelist=<netmask>\", _(\"Whitelist peers connecting from the given netmask or IP address. Can be specified multiple times.\") +\n+        \" \" + _(\"Whitelisted peers cannot be DoS banned and their transactions are always relayed, even if they are already in the mempool, useful e.g. for a gateway\"));\n+        \n \n #ifdef ENABLE_WALLET\n-    strUsage += \"\\n\" + _(\"Wallet options:\") + \"\\n\";\n-    strUsage += \"  -disablewallet         \" + _(\"Do not load the wallet and disable wallet RPC calls\") + \"\\n\";\n-    strUsage += \"  -keypool=<n>           \" + strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100) + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), 100));\n     if (GetBoolArg(\"-help-debug\", false))\n-        strUsage += \"  -mintxfee=<amt>        \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"), FormatMoney(CWallet::minTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -paytxfee=<amt>        \" + strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -rescan                \" + _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -salvagewallet         \" + _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -sendfreetransactions  \" + strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -spendzeroconfchange   \" + strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -txconfirmtarget=<n>   \" + strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -maxtxfee=<amt>        \" + strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"), FormatMoney(maxTxFee)) + \"\\n\";\n-    strUsage += \"  -upgradewallet         \" + _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\") + \"\\n\";\n-    strUsage += \"  -wallet=<file>         \" + _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\") + \"\\n\";\n-    strUsage += \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\";\n-    strUsage += \"  -zapwallettxes=<mode>  \" + _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+            FormatMoney(CWallet::minTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in BTC/kB) to add to transactions you send (default: %s)\"), FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet.dat\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-sendfreetransactions\", strprintf(_(\"Send transactions as zero-fee transactions if possible (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-maxtxfee=<amt>\", strprintf(_(\"Maximum total fees to use in a single wallet transaction, setting too low may abort large transactions (default: %s)\"),\n+        FormatMoney(maxTxFee)));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format\") + \" \" + _(\"on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), \"wallet.dat\"));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+        \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+                    \n #endif\n \n-    strUsage += \"\\n\" + _(\"Debugging/Testing options:\") + \"\\n\";\n+    strUsage += HelpMessageGroup(_(\"Debugging/Testing options:\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -checkpoints           \" + strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -dblogsize=<n>         \" + strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100) + \"\\n\";\n-        strUsage += \"  -disablesafemode       \" + strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -testsafemode          \" + strprintf(_(\"Force safe mode (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -dropmessagestest=<n>  \" + _(\"Randomly drop 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -fuzzmessagestest=<n>  \" + _(\"Randomly fuzz 1 of every <n> network messages\") + \"\\n\";\n-        strUsage += \"  -flushwallet           \" + strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -stopafterblockimport  \" + strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-checkpoints\", strprintf(_(\"Only accept block chain matching built-in checkpoints (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(_(\"Flush database activity from memory pool to disk log every <n> megabytes (default: %u)\"), 100));\n+        strUsage += HelpMessageOpt(\"-disablesafemode\", strprintf(_(\"Disable safemode, override a real safe mode event (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-testsafemode\", strprintf(_(\"Force safe mode (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-dropmessagestest=<n>\", _(\"Randomly drop 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-fuzzmessagestest=<n>\", _(\"Randomly fuzz 1 of every <n> network messages\"));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(_(\"Run a thread to flush wallet periodically (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-stopafterblockimport\", strprintf(_(\"Stop running after importing blocks from disk (default: %u)\"), 0));\n     }\n-    strUsage += \"  -debug=<category>      \" + strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \"\\n\";\n-    strUsage += \"                         \" + _(\"If <category> is not supplied, output all debugging information.\") + \"\\n\";\n-    strUsage += \"                         \" + _(\"<category> can be:\");\n-    strUsage +=                                 \" addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n+    string debugCategories = \"addrman, alert, bench, coindb, db, lock, rand, rpc, selectcoins, mempool, net\"; // Don't translate these and qt below\n     if (mode == HMM_BITCOIN_QT)\n-        strUsage += \", qt\";\n-    strUsage += \".\\n\";\n+        debugCategories += \", qt\";\n+    strUsage += HelpMessageOpt(\"-debug=<category>\", strprintf(_(\"Output debugging information (default: %u, supplying <category> is optional)\"), 0) + \". \" +\n+        _(\"If <category> is not supplied, output all debugging information.\") + _(\"<category> can be:\") + \" \" + debugCategories + \".\");\n #ifdef ENABLE_WALLET\n-    strUsage += \"  -gen                   \" + strprintf(_(\"Generate coins (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -genproclimit=<n>      \" + strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-gen\", strprintf(_(\"Generate coins (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-genproclimit=<n>\", strprintf(_(\"Set the number of threads for coin generation if enabled (-1 = all cores, default: %d)\"), 1));\n #endif\n-    strUsage += \"  -help-debug            \" + _(\"Show all debugging options (usage: --help -help-debug)\") + \"\\n\";\n-    strUsage += \"  -logips                \" + strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -logtimestamps         \" + strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1) + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-help-debug\", _(\"Show all debugging options (usage: --help -help-debug)\"));\n+    strUsage += HelpMessageOpt(\"-logips\", strprintf(_(\"Include IP addresses in debug output (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-logtimestamps\", strprintf(_(\"Prepend debug output with timestamp (default: %u)\"), 1));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -limitfreerelay=<n>    \" + strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15) + \"\\n\";\n-        strUsage += \"  -relaypriority         \" + strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1) + \"\\n\";\n-        strUsage += \"  -maxsigcachesize=<n>   \" + strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000) + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-limitfreerelay=<n>\", strprintf(_(\"Continuously rate-limit free transactions to <n>*1000 bytes per minute (default:%u)\"), 15));\n+        strUsage += HelpMessageOpt(\"-relaypriority\", strprintf(_(\"Require high priority for relaying free or low-fee transactions (default:%u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-maxsigcachesize=<n>\", strprintf(_(\"Limit size of signature cache to <n> entries (default: %u)\"), 50000));\n     }\n-    strUsage += \"  -minrelaytxfee=<amt>   \" + strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())) + \"\\n\";\n-    strUsage += \"  -printtoconsole        \" + _(\"Send trace/debug info to console instead of debug.log file\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-minrelaytxfee=<amt>\", strprintf(_(\"Fees (in BTC/Kb) smaller than this are considered zero fee for relaying (default: %s)\"), FormatMoney(::minRelayTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-printtoconsole\", _(\"Send trace/debug info to console instead of debug.log file\"));\n     if (GetBoolArg(\"-help-debug\", false))\n     {\n-        strUsage += \"  -printpriority         \" + strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0) + \"\\n\";\n-        strUsage += \"  -privdb                \" + strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1) + \"\\n\";\n-        strUsage += \"  -regtest               \" + _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"This is intended for regression testing tools and app development.\") + \"\\n\";\n-        strUsage += \"                         \" + _(\"In this mode -genproclimit controls how many blocks are generated immediately.\") + \"\\n\";\n+        strUsage += HelpMessageOpt(\"-printpriority\", strprintf(_(\"Log transaction priority and fee per kB when mining blocks (default: %u)\"), 0));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(_(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\"), 1));\n+        strUsage += HelpMessageOpt(\"-regtest\", _(\"Enter regression test mode, which uses a special chain in which blocks can be solved instantly.\") + \" \" +\n+            _(\"This is intended for regression testing tools and app development.\") + \" \" +\n+            _(\"In this mode -genproclimit controls how many blocks are generated immediately.\"));\n     }\n-    strUsage += \"  -shrinkdebugfile       \" + _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\") + \"\\n\";\n-    strUsage += \"  -testnet               \" + _(\"Use the test network\") + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Node relay options:\") + \"\\n\";\n-    strUsage += \"  -datacarrier           \" + strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1) + \"\\n\";\n-    strUsage += \"  -datacarriersize       \" + strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"Block creation options:\") + \"\\n\";\n-    strUsage += \"  -blockminsize=<n>      \" + strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -blockmaxsize=<n>      \" + strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE) + \"\\n\";\n-    strUsage += \"  -blockprioritysize=<n> \" + strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC server options:\") + \"\\n\";\n-    strUsage += \"  -server                \" + _(\"Accept command line and JSON-RPC commands\") + \"\\n\";\n-    strUsage += \"  -rest                  \" + strprintf(_(\"Accept public REST requests (default: %u)\"), 0) + \"\\n\";\n-    strUsage += \"  -rpcbind=<addr>        \" + _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\") + \"\\n\";\n-    strUsage += \"  -rpcuser=<user>        \" + _(\"Username for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcpassword=<pw>      \" + _(\"Password for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcport=<port>        \" + strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332) + \"\\n\";\n-    strUsage += \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\") + \"\\n\";\n-    strUsage += \"  -rpcthreads=<n>        \" + strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4) + \"\\n\";\n-    strUsage += \"  -rpckeepalive          \" + strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1) + \"\\n\";\n-\n-    strUsage += \"\\n\" + _(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\") + \"\\n\";\n-    strUsage += \"  -rpcssl                                  \" + _(\"Use OpenSSL (https) for JSON-RPC connections\") + \"\\n\";\n-    strUsage += \"  -rpcsslcertificatechainfile=<file.cert>  \" + strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\") + \"\\n\";\n-    strUsage += \"  -rpcsslprivatekeyfile=<file.pem>         \" + strprintf(_(\"Server private key (default: %s)\"), \"server.pem\") + \"\\n\";\n-    strUsage += \"  -rpcsslciphers=<ciphers>                 \" + strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\") + \"\\n\";\n+    strUsage += HelpMessageOpt(\"-shrinkdebugfile\", _(\"Shrink debug.log file on client startup (default: 1 when no -debug)\"));\n+    strUsage += HelpMessageOpt(\"-testnet\", _(\"Use the test network\"));\n+\n+    strUsage += HelpMessageGroup(_(\"Node relay options:\"));\n+    strUsage += HelpMessageOpt(\"-datacarrier\", strprintf(_(\"Relay and mine data carrier transactions (default: %u)\"), 1));\n+    strUsage += HelpMessageOpt(\"-datacarriersize\", strprintf(_(\"Maximum size of data in data carrier transactions we relay and mine (default: %u)\"), MAX_OP_RETURN_RELAY));\n+\n+    strUsage += HelpMessageGroup(_(\"Block creation options:\"));\n+    strUsage += HelpMessageOpt(\"-blockminsize=<n>\", strprintf(_(\"Set minimum block size in bytes (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-blockmaxsize=<n>\", strprintf(_(\"Set maximum block size in bytes (default: %d)\"), DEFAULT_BLOCK_MAX_SIZE));\n+    strUsage += HelpMessageOpt(\"-blockprioritysize=<n>\", strprintf(_(\"Set maximum size of high-priority/low-fee transactions in bytes (default: %d)\"), DEFAULT_BLOCK_PRIORITY_SIZE));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC server options:\"));\n+    strUsage += HelpMessageOpt(\"-server\", _(\"Accept command line and JSON-RPC commands\"));\n+    strUsage += HelpMessageOpt(\"-rest\", strprintf(_(\"Accept public REST requests (default: %u)\"), 0));\n+    strUsage += HelpMessageOpt(\"-rpcbind=<addr>\", _(\"Bind to given address to listen for JSON-RPC connections. Use [host]:port notation for IPv6. This option can be specified multiple times (default: bind to all interfaces)\"));\n+    strUsage += HelpMessageOpt(\"-rpcuser=<user>\", _(\"Username for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcpassword=<pw>\", _(\"Password for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcport=<port>\", strprintf(_(\"Listen for JSON-RPC connections on <port> (default: %u or testnet: %u)\"), 8332, 18332));\n+    strUsage += HelpMessageOpt(\"-rpcallowip=<ip>\", _(\"Allow JSON-RPC connections from specified source. Valid for <ip> are a single IP (e.g. 1.2.3.4), a network/netmask (e.g. 1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This option can be specified multiple times\"));\n+    strUsage += HelpMessageOpt(\"-rpcthreads=<n>\", strprintf(_(\"Set the number of threads to service RPC calls (default: %d)\"), 4));\n+    strUsage += HelpMessageOpt(\"-rpckeepalive\", strprintf(_(\"RPC support for HTTP persistent connections (default: %d)\"), 1));\n+\n+    strUsage += HelpMessageGroup(_(\"RPC SSL options: (see the Bitcoin Wiki for SSL setup instructions)\"));\n+    strUsage += HelpMessageOpt(\"-rpcssl\", _(\"Use OpenSSL (https) for JSON-RPC connections\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslcertificatechainfile=<file.cert>\", strprintf(_(\"Server certificate file (default: %s)\"), \"server.cert\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n+    strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n     return strUsage;\n }"
      },
      {
        "sha": "792f00b61d3ea79b734f6054d228fbf575a838de",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -346,6 +346,21 @@ bool SoftSetBoolArg(const std::string& strArg, bool fValue)\n         return SoftSetArg(strArg, std::string(\"0\"));\n }\n \n+static const int screenWidth = 79;\n+static const int optIndent = 2;\n+static const int msgIndent = 7;\n+\n+std::string HelpMessageGroup(const std::string &message) {\n+    return std::string(message) + std::string(\"\\n\\n\");\n+}\n+\n+std::string HelpMessageOpt(const std::string &option, const std::string &message) {\n+    return std::string(optIndent,' ') + std::string(option) +\n+           std::string(\"\\n\") + std::string(msgIndent,' ') +\n+           FormatParagraph(message, screenWidth - msgIndent, msgIndent) +\n+           std::string(\"\\n\\n\");\n+}\n+\n static std::string FormatException(const std::exception* pex, const char* pszThread)\n {\n #ifdef WIN32"
      },
      {
        "sha": "9b5a4153dd9a86db45667865b5654d5f4768f74c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1fdb9fa3f905df956ed61dbf6ae086c963fd1793/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "patch": "@@ -162,6 +162,23 @@ bool SoftSetArg(const std::string& strArg, const std::string& strValue);\n  */\n bool SoftSetBoolArg(const std::string& strArg, bool fValue);\n \n+/**\n+ * Format a string to be used as group of options in help messages\n+ *\n+ * @param message Group name (e.g. \"RPC server options:\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageGroup(const std::string& message);\n+\n+/**\n+ * Format a string to be used as option description in help messages\n+ *\n+ * @param option Option message (e.g. \"-rpcuser=<user>\")\n+ * @param message Option description (e.g. \"Username for JSON-RPC connections\")\n+ * @return the formatted string\n+ */\n+std::string HelpMessageOpt(const std::string& option, const std::string& message);\n+\n void SetThreadPriority(int nPriority);\n void RenameThread(const char* name);\n "
      }
    ]
  },
  {
    "sha": "f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNzU0NzA3OTRiZDM0NGVjMjVlMWE1NDA2MzdjNjc1ZTdmMmFkNmIw",
    "commit": {
      "author": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-09T07:29:59Z"
      },
      "committer": {
        "name": "Luca Venturini",
        "email": "luca@yepa.com",
        "date": "2015-03-11T05:07:17Z"
      },
      "message": "Fix - bitcoin-qt usage message\n\n. Closes the bug from commit e179eb3d9bfec7e67908242c71c87b716a41c97c\n(\"bitcoin-qt -help\" did not show any message)\n. Move all the options in init.cpp (there were already some\noptions related to bitcoin-qt)",
      "tree": {
        "sha": "ca9e7f1fb147418585caad636358e9abf731ebbd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca9e7f1fb147418585caad636358e9abf731ebbd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f75470794bd344ec25e1a540637c675e7f2ad6b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f75470794bd344ec25e1a540637c675e7f2ad6b0/comments",
    "author": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "lucayepa",
      "id": 697159,
      "node_id": "MDQ6VXNlcjY5NzE1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/697159?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/lucayepa",
      "html_url": "https://github.com/lucayepa",
      "followers_url": "https://api.github.com/users/lucayepa/followers",
      "following_url": "https://api.github.com/users/lucayepa/following{/other_user}",
      "gists_url": "https://api.github.com/users/lucayepa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/lucayepa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/lucayepa/subscriptions",
      "organizations_url": "https://api.github.com/users/lucayepa/orgs",
      "repos_url": "https://api.github.com/users/lucayepa/repos",
      "events_url": "https://api.github.com/users/lucayepa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/lucayepa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1fdb9fa3f905df956ed61dbf6ae086c963fd1793",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1fdb9fa3f905df956ed61dbf6ae086c963fd1793"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 37,
      "deletions": 54
    },
    "files": [
      {
        "sha": "1e3cc1d899eb7694a17771630b68e19807ba8137",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "patch": "@@ -412,6 +412,19 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-rpcsslprivatekeyfile=<file.pem>\", strprintf(_(\"Server private key (default: %s)\"), \"server.pem\"));\n     strUsage += HelpMessageOpt(\"-rpcsslciphers=<ciphers>\", strprintf(_(\"Acceptable ciphers (default: %s)\"), \"TLSv1.2+HIGH:TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!3DES:@STRENGTH\"));\n \n+    if (mode == HMM_BITCOIN_QT)\n+    {\n+        strUsage += HelpMessageGroup(_(\"UI Options:\"));\n+        if (GetBoolArg(\"-help-debug\", false)) {\n+            strUsage += HelpMessageOpt(\"-allowselfsignedrootcertificates\", _(\"Allow self signed root certificates (default: 0)\"));\n+        }\n+        strUsage += HelpMessageOpt(\"-choosedatadir\", _(\"Choose data directory on startup (default: 0)\"));\n+        strUsage += HelpMessageOpt(\"-lang=<lang>\", _(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n+        strUsage += HelpMessageOpt(\"-min\", _(\"Start minimized\"));\n+        strUsage += HelpMessageOpt(\"-rootcertificates=<file>\", _(\"Set SSL root certificates for payment request (default: -system-)\"));\n+        strUsage += HelpMessageOpt(\"-splash\", _(\"Show splash screen on startup (default: 1)\"));\n+    }\n+\n     return strUsage;\n }\n "
      },
      {
        "sha": "386cf31d736850acc2bf95eebe3c76ddebeee2f6",
        "filename": "src/qt/utilitydialog.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 54,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/qt/utilitydialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f75470794bd344ec25e1a540637c675e7f2ad6b0/src/qt/utilitydialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/utilitydialog.cpp?ref=f75470794bd344ec25e1a540637c675e7f2ad6b0",
        "patch": "@@ -62,77 +62,47 @@ HelpMessageDialog::HelpMessageDialog(QWidget *parent, bool about) :\n         ui->helpMessage->setVisible(false);\n     } else {\n         setWindowTitle(tr(\"Command-line options\"));\n+        QString header = tr(\"Usage:\") + \"\\n\" +\n+            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]                     \" + \"\\n\";\n         QTextCursor cursor(ui->helpMessage->document());\n         cursor.insertText(version);\n         cursor.insertBlock();\n-        cursor.insertText(tr(\"Usage:\") + '\\n' +\n-            \"  bitcoin-qt [\" + tr(\"command-line options\") + \"]\\n\");\n-\n+        cursor.insertText(header);\n         cursor.insertBlock();\n+\n+        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n+        text = version + \"\\n\" + header + \"\\n\" + coreOptions;\n+\n         QTextTableFormat tf;\n         tf.setBorderStyle(QTextFrameFormat::BorderStyle_None);\n         tf.setCellPadding(2);\n         QVector<QTextLength> widths;\n         widths << QTextLength(QTextLength::PercentageLength, 35);\n         widths << QTextLength(QTextLength::PercentageLength, 65);\n         tf.setColumnWidthConstraints(widths);\n-        QTextTable *table = cursor.insertTable(2, 2, tf);\n \n-        QString coreOptions = QString::fromStdString(HelpMessage(HMM_BITCOIN_QT));\n-        bool first = true;\n         QTextCharFormat bold;\n         bold.setFontWeight(QFont::Bold);\n-        // note that coreOptions is not translated.\n-        foreach (const QString &line, coreOptions.split('\\n')) {\n-            if (!first) {\n-                table->appendRows(1);\n+\n+        foreach (const QString &line, coreOptions.split(\"\\n\")) {\n+            if (line.startsWith(\"  -\"))\n+            {\n+                cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::PreviousCell);\n                 cursor.movePosition(QTextCursor::NextRow);\n+                cursor.insertText(line.trimmed());\n+                cursor.movePosition(QTextCursor::NextCell);\n+            } else if (line.startsWith(\"   \")) {\n+                cursor.insertText(line.trimmed()+' ');\n+            } else if (line.size() > 0) {\n+                //Title of a group\n+                if (cursor.currentTable())\n+                    cursor.currentTable()->appendRows(1);\n+                cursor.movePosition(QTextCursor::Down);\n+                cursor.insertText(line.trimmed(), bold);\n+                cursor.insertTable(1, 2, tf);\n             }\n-            first = false;\n-\n-            if (line.startsWith(\"  \")) {\n-                int index = line.indexOf(' ', 3);\n-                if (index > 0) {\n-                    cursor.insertText(line.left(index).trimmed());\n-                    cursor.movePosition(QTextCursor::NextCell);\n-                    cursor.insertText(line.mid(index).trimmed());\n-                    continue;\n-                }\n-            }\n-            cursor.movePosition(QTextCursor::NextCell, QTextCursor::KeepAnchor);\n-            table->mergeCells(cursor);\n-            cursor.insertText(line.trimmed(), bold);\n-        }\n-\n-        table->appendRows(6);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        cursor.insertText(tr(\"UI options\") + \":\", bold);\n-        cursor.movePosition(QTextCursor::NextRow);\n-        if (GetBoolArg(\"-help-debug\", false)) {\n-            cursor.insertText(\"-allowselfsignedrootcertificates\");\n-            cursor.movePosition(QTextCursor::NextCell);\n-            cursor.insertText(tr(\"Allow self signed root certificates (default: 0)\"));\n-            cursor.movePosition(QTextCursor::NextCell);\n         }\n-        cursor.insertText(\"-choosedatadir\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Choose data directory on startup (default: 0)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-lang=<lang>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set language, for example \\\"de_DE\\\" (default: system locale)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-min\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Start minimized\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-rootcertificates=<file>\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Set SSL root certificates for payment request (default: -system-)\"));\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(\"-splash\");\n-        cursor.movePosition(QTextCursor::NextCell);\n-        cursor.insertText(tr(\"Show splash screen on startup (default: 1)\"));\n \n         ui->helpMessage->moveCursor(QTextCursor::Start);\n         ui->scrollArea->setVisible(false);"
      }
    ]
  }
]