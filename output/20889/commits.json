[
  {
    "sha": "a83cccc4326f7ee90dd1491dd9d5017a5c9384ca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODNjY2NjNDMyNmY3ZWU5MGRkMTQ5MWRkOWQ1MDE3YTVjOTM4NGNh",
    "commit": {
      "author": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-02-01T21:04:04Z"
      },
      "committer": {
        "name": "Michael Dietz",
        "email": "michael.dietz@waya.ai",
        "date": "2021-04-28T15:12:05Z"
      },
      "message": "test: ensure any failing method in miniwallet leaves no side-effects",
      "tree": {
        "sha": "2b595a8ca1f8334873aebcf4051e7a98c61e48de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2b595a8ca1f8334873aebcf4051e7a98c61e48de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEENKwpEUV32QrrIOeYc3/VzfHRRrkFAmCJe0UACgkQc3/VzfHR\nRrmbkQ/+IG9hxc8c65a9GSuI4JruUANTAnWCZo8nVjn5h1DyTmZ0+uUYxSLxVAyi\n51m3TQAVfgjUXj6av8buBCPKS7T7S9Q+AcDHNqt/yl/CLvDcBSrAycJdvb6DNY61\nFc1fGsMJHTqpqt8MVddo/oeaJOSnL5YVTfHaG2iTCiE8UFoabgcG7HEKxYxaADBG\nozvN5NpqKaQHajk4GJ+f8fIEBMRruOb95wRZ+iTcTDVw/0ssAkkm0corSkZ+FQLk\nQChsrsDu3Yycv1ie0x8mxV7SzWJYWkM8fOHxKHLoir4q+1Vei0OUrLKj/61jXNld\njWdtXm2B60MmgDY6hyJxJITno4Sot69fY0gJOVQKs4m1e/bpbz8o9SxyLk1PJU7m\nIV2u/2XuG/WFr+c1TKEvhVevdcjUtCTYSWIJb3hfLgfOkjURiICJlkrz1Q88jAZK\n1T3UTHbWYeqgKJZvc8c8Nf7zL4EpiX3gsrWTYHrodRe0bhOY/eEMMoVEphcgJDLy\nNiOASbhllEeA/xsAlCvkEYUArHRtG5qPMW3Qn3csmsODnHkSDct90kxZkoavSSph\nTfrRrb7VfjLANsj+hUYNEjdiaBMzVw3P1iywUeDoqTT+yuqMO4zCe1PyhDazqGg2\nBUbrFcxg92fJCU9Mq1R6jl8UNxCooS8vnDWaaD2mohWwYYBXP/w=\n=Ajt8\n-----END PGP SIGNATURE-----",
        "payload": "tree 2b595a8ca1f8334873aebcf4051e7a98c61e48de\nparent 549d20a31beaf71c722970af32d0076b70b5ffcb\nauthor Michael Dietz <michael.dietz@waya.ai> 1612213444 -0600\ncommitter Michael Dietz <michael.dietz@waya.ai> 1619622725 -0400\n\ntest: ensure any failing method in miniwallet leaves no side-effects\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca/comments",
    "author": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "mjdietzx",
      "id": 7217256,
      "node_id": "MDQ6VXNlcjcyMTcyNTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7217256?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mjdietzx",
      "html_url": "https://github.com/mjdietzx",
      "followers_url": "https://api.github.com/users/mjdietzx/followers",
      "following_url": "https://api.github.com/users/mjdietzx/following{/other_user}",
      "gists_url": "https://api.github.com/users/mjdietzx/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mjdietzx/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mjdietzx/subscriptions",
      "organizations_url": "https://api.github.com/users/mjdietzx/orgs",
      "repos_url": "https://api.github.com/users/mjdietzx/repos",
      "events_url": "https://api.github.com/users/mjdietzx/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mjdietzx/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "549d20a31beaf71c722970af32d0076b70b5ffcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/549d20a31beaf71c722970af32d0076b70b5ffcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/549d20a31beaf71c722970af32d0076b70b5ffcb"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "c726b8c4b7a30ff5f17ad36e3006403763de9141",
        "filename": "test/functional/test_framework/wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca/test/functional/test_framework/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a83cccc4326f7ee90dd1491dd9d5017a5c9384ca/test/functional/test_framework/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet.py?ref=a83cccc4326f7ee90dd1491dd9d5017a5c9384ca",
        "patch": "@@ -44,9 +44,9 @@ def scan_blocks(self, *, start=1, num):\n     def generate(self, num_blocks):\n         \"\"\"Generate blocks with coinbase outputs to the internal address, and append the outputs to the internal list\"\"\"\n         blocks = self._test_node.generatetoaddress(num_blocks, self._address)\n-        for b in blocks:\n-            cb_tx = self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0]\n-            self._utxos.append({'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']})\n+        cb_txs = map(lambda b: self._test_node.getblock(blockhash=b, verbosity=2)['tx'][0], blocks)\n+        cb_utxos = map(lambda cb_tx: {'txid': cb_tx['txid'], 'vout': 0, 'value': cb_tx['vout'][0]['value']}, cb_txs)\n+        self._utxos.extend(list(cb_utxos))\n         return blocks\n \n     def get_address(self):\n@@ -69,8 +69,8 @@ def get_utxo(self, *, txid=''):\n \n     def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_spend=None):\n         \"\"\"Create and send a tx with the specified fee_rate. Fee may be exact or at most one satoshi higher than needed.\"\"\"\n-        self._utxos = sorted(self._utxos, key=lambda k: k['value'])\n-        utxo_to_spend = utxo_to_spend or self._utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n+        utxos = sorted(self._utxos, key=lambda k: k['value'])\n+        utxo_to_spend = utxo_to_spend or utxos.pop()  # Pick the largest utxo (if none provided) and hope it covers the fee\n         vsize = Decimal(96)\n         send_value = satoshi_round(utxo_to_spend['value'] - fee_rate * (vsize / 1000))\n         fee = utxo_to_spend['value'] - send_value\n@@ -84,8 +84,11 @@ def send_self_transfer(self, *, fee_rate=Decimal(\"0.003\"), from_node, utxo_to_sp\n         tx_hex = tx.serialize().hex()\n \n         tx_info = from_node.testmempoolaccept([tx_hex])[0]\n-        self._utxos.append({'txid': tx_info['txid'], 'vout': 0, 'value': send_value})\n+        utxos.append({'txid': tx_info['txid'], 'vout': 0, 'value': send_value})\n         from_node.sendrawtransaction(tx_hex)\n         assert_equal(tx_info['vsize'], vsize)\n         assert_equal(tx_info['fees']['base'], fee)\n+        # update our internal utxo set after `sendrawtransaction` and the above assertions succeed to ensure a thrown exception\n+        # doesn't mutate state and leave an unwanted side-effect (in case the caller of `send_self_transfer` handles this exception)\n+        self._utxos = utxos\n         return {'txid': tx_info['txid'], 'wtxid': tx_info['wtxid'], 'hex': tx_hex}"
      }
    ]
  }
]