[
  {
    "sha": "60ab9b200654ef0914459711cf2b22be16be3dc2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MGFiOWIyMDA2NTRlZjA5MTQ0NTk3MTFjZjJiMjJiZTE2YmUzZGMy",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:19:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:19:51Z"
      },
      "message": "Squashed 'src/univalue/' changes from 2740c4f..f32df99\n\nf32df99 Merge branch '2016_04_unicode' into bitcoin\n280b191 Merge remote-tracking branch 'jgarzik/master' into bitcoin\nc9a716c Handle UTF-8\nbed8dd9 Version 1.0.2.\n5e7985a Merge pull request #14 from laanwj/2015_11_escape_plan\n\ngit-subtree-dir: src/univalue\ngit-subtree-split: f32df99e96d99ab49e5eeda16cac93747d388245",
      "tree": {
        "sha": "b884bbb13dd9c2e911ed27d33043be1084f97989",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b884bbb13dd9c2e911ed27d33043be1084f97989"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/60ab9b200654ef0914459711cf2b22be16be3dc2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ab9b200654ef0914459711cf2b22be16be3dc2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/60ab9b200654ef0914459711cf2b22be16be3dc2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ab9b200654ef0914459711cf2b22be16be3dc2/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "982709199f1b4e9e35211c419a81938f9f1dd4ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/982709199f1b4e9e35211c419a81938f9f1dd4ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/982709199f1b4e9e35211c419a81938f9f1dd4ed"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 181,
      "deletions": 37
    },
    "files": [
      {
        "sha": "6c1ec81e63fb7c75bb6ce4b7fefe63b7d6038b69",
        "filename": "Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/Makefile.am?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -3,7 +3,7 @@ ACLOCAL_AMFLAGS = -I build-aux/m4\n .INTERMEDIATE: $(GENBIN)\n \n include_HEADERS = include/univalue.h\n-noinst_HEADERS = lib/univalue_escapes.h\n+noinst_HEADERS = lib/univalue_escapes.h lib/univalue_utffilter.h\n \n lib_LTLIBRARIES = libunivalue.la\n \n@@ -73,6 +73,10 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail35.json \\\n \t$(TEST_DATA_DIR)/fail36.json \\\n \t$(TEST_DATA_DIR)/fail37.json \\\n+\t$(TEST_DATA_DIR)/fail38.json \\\n+\t$(TEST_DATA_DIR)/fail39.json \\\n+\t$(TEST_DATA_DIR)/fail40.json \\\n+\t$(TEST_DATA_DIR)/fail41.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -83,6 +87,7 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass1.json \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n-\t$(TEST_DATA_DIR)/round1.json\n+\t$(TEST_DATA_DIR)/round1.json \\\n+\t$(TEST_DATA_DIR)/round2.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "93d3ba945d143ba9c00cf29e804ce63260d61d8d",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [1])\n-m4_define([libunivalue_interface_age], [1])\n+m4_define([libunivalue_micro_version], [2])\n+m4_define([libunivalue_interface_age], [2])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.1],\n+AC_INIT([univalue], [1.0.2],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "95bac6958d0fa70bb1af154f7655b96950b452ad",
        "filename": "lib/univalue_read.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 22,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_read.cpp?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -6,6 +6,7 @@\n #include <vector>\n #include <stdio.h>\n #include \"univalue.h\"\n+#include \"univalue_utffilter.h\"\n \n using namespace std;\n \n@@ -174,41 +175,31 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         raw++;                                // skip \"\n \n         string valStr;\n+        JSONUTF8StringFilter writer(valStr);\n \n         while (*raw) {\n-            if (*raw < 0x20)\n+            if ((unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n                 switch (*raw) {\n-                case '\"':  valStr += \"\\\"\"; break;\n-                case '\\\\': valStr += \"\\\\\"; break;\n-                case '/':  valStr += \"/\"; break;\n-                case 'b':  valStr += \"\\b\"; break;\n-                case 'f':  valStr += \"\\f\"; break;\n-                case 'n':  valStr += \"\\n\"; break;\n-                case 'r':  valStr += \"\\r\"; break;\n-                case 't':  valStr += \"\\t\"; break;\n+                case '\"':  writer.push_back('\\\"'); break;\n+                case '\\\\': writer.push_back('\\\\'); break;\n+                case '/':  writer.push_back('/'); break;\n+                case 'b':  writer.push_back('\\b'); break;\n+                case 'f':  writer.push_back('\\f'); break;\n+                case 'n':  writer.push_back('\\n'); break;\n+                case 'r':  writer.push_back('\\r'); break;\n+                case 't':  writer.push_back('\\t'); break;\n \n                 case 'u': {\n                     unsigned int codepoint;\n                     if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n-\n-                    if (codepoint <= 0x7f)\n-                        valStr.push_back((char)codepoint);\n-                    else if (codepoint <= 0x7FF) {\n-                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    } else if (codepoint <= 0xFFFF) {\n-                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n-                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    }\n-\n+                    writer.push_back_u(codepoint);\n                     raw += 4;\n                     break;\n                     }\n@@ -226,11 +217,13 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n             }\n \n             else {\n-                valStr += *raw;\n+                writer.push_back(*raw);\n                 raw++;\n             }\n         }\n \n+        if (!writer.finalize())\n+            return JTOK_ERR;\n         tokenVal = valStr;\n         consumed = (raw - rawStart);\n         return JTOK_STRING;"
      },
      {
        "sha": "0e330dce9cd04a0725853563c059f32cf11cf446",
        "filename": "lib/univalue_utffilter.h",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_utffilter.h?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2016 Wladimir J. van der Laan\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef UNIVALUE_UTFFILTER_H\n+#define UNIVALUE_UTFFILTER_H\n+\n+#include <string>\n+\n+/**\n+ * Filter that generates and validates UTF-8, as well as collates UTF-16\n+ * surrogate pairs as specified in RFC4627.\n+ */\n+class JSONUTF8StringFilter\n+{\n+public:\n+    JSONUTF8StringFilter(std::string &s):\n+        str(s), is_valid(true), codepoint(0), state(0), surpair(0)\n+    {\n+    }\n+    // Write single 8-bit char (may be part of UTF-8 sequence)\n+    void push_back(unsigned char ch)\n+    {\n+        if (state == 0) {\n+            if (ch < 0x80) // 7-bit ASCII, fast direct pass-through\n+                str.push_back(ch);\n+            else if (ch < 0xc0) // Mid-sequence character, invalid in this state\n+                is_valid = false;\n+            else if (ch < 0xe0) { // Start of 2-byte sequence\n+                codepoint = (ch & 0x1f) << 6;\n+                state = 6;\n+            } else if (ch < 0xf0) { // Start of 3-byte sequence\n+                codepoint = (ch & 0x0f) << 12;\n+                state = 12;\n+            } else if (ch < 0xf8) { // Start of 4-byte sequence\n+                codepoint = (ch & 0x07) << 18;\n+                state = 18;\n+            } else // Reserved, invalid\n+                is_valid = false;\n+        } else {\n+            if ((ch & 0xc0) != 0x80) // Not a continuation, invalid\n+                is_valid = false;\n+            state -= 6;\n+            codepoint |= (ch & 0x3f) << state;\n+            if (state == 0)\n+                push_back_u(codepoint);\n+        }\n+    }\n+    // Write codepoint directly, possibly collating surrogate pairs\n+    void push_back_u(unsigned int codepoint)\n+    {\n+        if (state) // Only accept full codepoints in open state\n+            is_valid = false;\n+        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+            if (surpair) // Two subsequent surrogate pair openers - fail\n+                is_valid = false;\n+            else\n+                surpair = codepoint;\n+        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+            if (surpair) { // Open surrogate pair, expect second half\n+                // Compute code point from UTF-16 surrogate pair\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                surpair = 0;\n+            } else // Second half doesn't follow a first half - fail\n+                is_valid = false;\n+        } else {\n+            if (surpair) // First half of surrogate pair not followed by second - fail\n+                is_valid = false;\n+            else\n+                append_codepoint(codepoint);\n+        }\n+    }\n+    // Check that we're in a state where the string can be ended\n+    // No open sequences, no open surrogate pairs, etc\n+    bool finalize()\n+    {\n+        if (state || surpair)\n+            is_valid = false;\n+        return is_valid;\n+    }\n+private:\n+    std::string &str;\n+    bool is_valid;\n+    // Current UTF-8 decoding state\n+    unsigned int codepoint;\n+    int state; // Top bit to be filled in for next UTF-8 byte, or 0\n+\n+    // Keep track of the following state to handle the following section of\n+    // RFC4627:\n+    //\n+    //    To escape an extended character that is not in the Basic Multilingual\n+    //    Plane, the character is represented as a twelve-character sequence,\n+    //    encoding the UTF-16 surrogate pair.  So, for example, a string\n+    //    containing only the G clef character (U+1D11E) may be represented as\n+    //    \"\\uD834\\uDD1E\".\n+    //\n+    //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n+    unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n+\n+    void append_codepoint(unsigned int codepoint)\n+    {\n+        if (codepoint <= 0x7f)\n+            str.push_back((char)codepoint);\n+        else if (codepoint <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint >> 6)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        } else if (codepoint <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        } else if (codepoint <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        }\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "cfbdad3284ed53215258eba8b6166840c9813937",
        "filename": "lib/univalue_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/lib/univalue_write.cpp?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -8,8 +8,6 @@\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n \n-// TODO: Using UTF8\n-\n using namespace std;\n \n static string json_escape(const string& inS)\n@@ -23,15 +21,8 @@ static string json_escape(const string& inS)\n \n         if (escStr)\n             outS += escStr;\n-\n-        else if (ch < 0x80)\n+        else\n             outS += ch;\n-\n-        else { // TODO handle UTF-8 properly\n-            char tmpesc[16];\n-            sprintf(tmpesc, \"\\\\u%04x\", ch);\n-            outS += tmpesc;\n-        }\n     }\n \n     return outS;"
      },
      {
        "sha": "b245e2e46cad56d6b13075de10304cccf2c6efa7",
        "filename": "test/fail38.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail38.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail38.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail38.json?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1 @@\n+[\"\\ud834\"]"
      },
      {
        "sha": "7c9e263f27de5dcf82f83be2e00981fce4da4957",
        "filename": "test/fail39.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail39.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail39.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail39.json?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1 @@\n+[\"\\udd61\"]"
      },
      {
        "sha": "664dc9e245f65c30c64281df6d2096c2b9afe430",
        "filename": "test/fail40.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail40.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail40.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail40.json?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1 @@\n+[\"\ufffd\ufffd\ufffd\"]\n\\ No newline at end of file"
      },
      {
        "sha": "0de342a2b5fdf5803efb5fd59f95133ed2230971",
        "filename": "test/fail41.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail41.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/fail41.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/fail41.json?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1 @@\n+[\"\ufffd\"]\n\\ No newline at end of file"
      },
      {
        "sha": "b766cccc688992aff4806b1261947d00d7e848c6",
        "filename": "test/round2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/round2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/round2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/round2.json?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -0,0 +1 @@\n+[\"a\u00a7\u25a0\ud800\udf92\ud834\udd61\"]"
      },
      {
        "sha": "05f3842cd1eb6323cf442962ed2e76290b385a5d",
        "filename": "test/unitester.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/60ab9b200654ef0914459711cf2b22be16be3dc2/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/60ab9b200654ef0914459711cf2b22be16be3dc2/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/unitester.cpp?ref=60ab9b200654ef0914459711cf2b22be16be3dc2",
        "patch": "@@ -22,6 +22,7 @@ string srcdir(JSON_TEST_SRC);\n static bool test_failed = false;\n \n #define d_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", filename.c_str()); } }\n+#define f_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", __func__); } }\n \n static std::string rtrim(std::string s)\n {\n@@ -108,6 +109,10 @@ static const char *filenames[] = {\n         \"fail35.json\",\n         \"fail36.json\",\n         \"fail37.json\",\n+        \"fail38.json\",               // invalid unicode: only first half of surrogate pair\n+        \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n+        \"fail40.json\",               // invalid unicode: broken UTF-8\n+        \"fail41.json\",               // invalid unicode: unfinished UTF-8\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -119,14 +124,40 @@ static const char *filenames[] = {\n         \"pass2.json\",\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n+        \"round2.json\",              // unicode\n };\n \n+// Test \\u handling\n+void unescape_unicode_test()\n+{\n+    UniValue val;\n+    bool testResult;\n+    // Escaped ASCII (quote)\n+    testResult = val.read(\"[\\\"\\\\u0022\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\\"\");\n+    // Escaped Basic Plane character, two-byte UTF-8\n+    testResult = val.read(\"[\\\"\\\\u0191\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xc6\\x91\");\n+    // Escaped Basic Plane character, three-byte UTF-8\n+    testResult = val.read(\"[\\\"\\\\u2191\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xe2\\x86\\x91\");\n+    // Escaped Supplementary Plane character U+1d161\n+    testResult = val.read(\"[\\\"\\\\ud834\\\\udd61\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xf0\\x9d\\x85\\xa1\");\n+}\n+\n int main (int argc, char *argv[])\n {\n     for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n         runtest_file(filenames[fidx]);\n     }\n \n+    unescape_unicode_test();\n+\n     return test_failed ? 1 : 0;\n }\n "
      }
    ]
  },
  {
    "sha": "63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2MzE1MTUyMWZkMDZjY2RkZDZkNWM0ZTNmMjgzZjI2ZDViOWIwMjRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:19:51Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:19:51Z"
      },
      "message": "Merge commit '60ab9b200654ef0914459711cf2b22be16be3dc2'",
      "tree": {
        "sha": "da3abd8cf9732e2272a99ffd9c8bb395c07c73ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/da3abd8cf9732e2272a99ffd9c8bb395c07c73ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1445835bd3c41ce17092dd9439f262fa29606d7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1445835bd3c41ce17092dd9439f262fa29606d7c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1445835bd3c41ce17092dd9439f262fa29606d7c"
      },
      {
        "sha": "60ab9b200654ef0914459711cf2b22be16be3dc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/60ab9b200654ef0914459711cf2b22be16be3dc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/60ab9b200654ef0914459711cf2b22be16be3dc2"
      }
    ],
    "stats": {
      "total": 218,
      "additions": 181,
      "deletions": 37
    },
    "files": [
      {
        "sha": "6c1ec81e63fb7c75bb6ce4b7fefe63b7d6038b69",
        "filename": "src/univalue/Makefile.am",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/Makefile.am?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -3,7 +3,7 @@ ACLOCAL_AMFLAGS = -I build-aux/m4\n .INTERMEDIATE: $(GENBIN)\n \n include_HEADERS = include/univalue.h\n-noinst_HEADERS = lib/univalue_escapes.h\n+noinst_HEADERS = lib/univalue_escapes.h lib/univalue_utffilter.h\n \n lib_LTLIBRARIES = libunivalue.la\n \n@@ -73,6 +73,10 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/fail35.json \\\n \t$(TEST_DATA_DIR)/fail36.json \\\n \t$(TEST_DATA_DIR)/fail37.json \\\n+\t$(TEST_DATA_DIR)/fail38.json \\\n+\t$(TEST_DATA_DIR)/fail39.json \\\n+\t$(TEST_DATA_DIR)/fail40.json \\\n+\t$(TEST_DATA_DIR)/fail41.json \\\n \t$(TEST_DATA_DIR)/fail3.json \\\n \t$(TEST_DATA_DIR)/fail4.json \\\n \t$(TEST_DATA_DIR)/fail5.json \\\n@@ -83,6 +87,7 @@ TEST_FILES = \\\n \t$(TEST_DATA_DIR)/pass1.json \\\n \t$(TEST_DATA_DIR)/pass2.json \\\n \t$(TEST_DATA_DIR)/pass3.json \\\n-\t$(TEST_DATA_DIR)/round1.json\n+\t$(TEST_DATA_DIR)/round1.json \\\n+\t$(TEST_DATA_DIR)/round2.json\n \n EXTRA_DIST=$(TEST_FILES) $(GEN_SRCS)"
      },
      {
        "sha": "93d3ba945d143ba9c00cf29e804ce63260d61d8d",
        "filename": "src/univalue/configure.ac",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/configure.ac?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -1,7 +1,7 @@\n m4_define([libunivalue_major_version], [1])\n m4_define([libunivalue_minor_version], [1])\n-m4_define([libunivalue_micro_version], [1])\n-m4_define([libunivalue_interface_age], [1])\n+m4_define([libunivalue_micro_version], [2])\n+m4_define([libunivalue_interface_age], [2])\n # If you need a modifier for the version number. \n # Normally empty, but can be used to make \"fixup\" releases.\n m4_define([libunivalue_extraversion], [])\n@@ -14,7 +14,7 @@ m4_define([libunivalue_age], [m4_eval(libunivalue_binary_age - libunivalue_inter\n m4_define([libunivalue_version], [libunivalue_major_version().libunivalue_minor_version().libunivalue_micro_version()libunivalue_extraversion()])\n \n \n-AC_INIT([univalue], [1.0.1],\n+AC_INIT([univalue], [1.0.2],\n         [http://github.com/jgarzik/univalue/])\n \n dnl make the compilation flags quiet unless V=1 is used"
      },
      {
        "sha": "95bac6958d0fa70bb1af154f7655b96950b452ad",
        "filename": "src/univalue/lib/univalue_read.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 22,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_read.cpp?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -6,6 +6,7 @@\n #include <vector>\n #include <stdio.h>\n #include \"univalue.h\"\n+#include \"univalue_utffilter.h\"\n \n using namespace std;\n \n@@ -174,41 +175,31 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n         raw++;                                // skip \"\n \n         string valStr;\n+        JSONUTF8StringFilter writer(valStr);\n \n         while (*raw) {\n-            if (*raw < 0x20)\n+            if ((unsigned char)*raw < 0x20)\n                 return JTOK_ERR;\n \n             else if (*raw == '\\\\') {\n                 raw++;                        // skip backslash\n \n                 switch (*raw) {\n-                case '\"':  valStr += \"\\\"\"; break;\n-                case '\\\\': valStr += \"\\\\\"; break;\n-                case '/':  valStr += \"/\"; break;\n-                case 'b':  valStr += \"\\b\"; break;\n-                case 'f':  valStr += \"\\f\"; break;\n-                case 'n':  valStr += \"\\n\"; break;\n-                case 'r':  valStr += \"\\r\"; break;\n-                case 't':  valStr += \"\\t\"; break;\n+                case '\"':  writer.push_back('\\\"'); break;\n+                case '\\\\': writer.push_back('\\\\'); break;\n+                case '/':  writer.push_back('/'); break;\n+                case 'b':  writer.push_back('\\b'); break;\n+                case 'f':  writer.push_back('\\f'); break;\n+                case 'n':  writer.push_back('\\n'); break;\n+                case 'r':  writer.push_back('\\r'); break;\n+                case 't':  writer.push_back('\\t'); break;\n \n                 case 'u': {\n                     unsigned int codepoint;\n                     if (hatoui(raw + 1, raw + 1 + 4, codepoint) !=\n                                raw + 1 + 4)\n                         return JTOK_ERR;\n-\n-                    if (codepoint <= 0x7f)\n-                        valStr.push_back((char)codepoint);\n-                    else if (codepoint <= 0x7FF) {\n-                        valStr.push_back((char)(0xC0 | (codepoint >> 6)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    } else if (codepoint <= 0xFFFF) {\n-                        valStr.push_back((char)(0xE0 | (codepoint >> 12)));\n-                        valStr.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n-                        valStr.push_back((char)(0x80 | (codepoint & 0x3F)));\n-                    }\n-\n+                    writer.push_back_u(codepoint);\n                     raw += 4;\n                     break;\n                     }\n@@ -226,11 +217,13 @@ enum jtokentype getJsonToken(string& tokenVal, unsigned int& consumed,\n             }\n \n             else {\n-                valStr += *raw;\n+                writer.push_back(*raw);\n                 raw++;\n             }\n         }\n \n+        if (!writer.finalize())\n+            return JTOK_ERR;\n         tokenVal = valStr;\n         consumed = (raw - rawStart);\n         return JTOK_STRING;"
      },
      {
        "sha": "0e330dce9cd04a0725853563c059f32cf11cf446",
        "filename": "src/univalue/lib/univalue_utffilter.h",
        "status": "added",
        "additions": 119,
        "deletions": 0,
        "changes": 119,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_utffilter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_utffilter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_utffilter.h?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1,119 @@\n+// Copyright 2016 Wladimir J. van der Laan\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+#ifndef UNIVALUE_UTFFILTER_H\n+#define UNIVALUE_UTFFILTER_H\n+\n+#include <string>\n+\n+/**\n+ * Filter that generates and validates UTF-8, as well as collates UTF-16\n+ * surrogate pairs as specified in RFC4627.\n+ */\n+class JSONUTF8StringFilter\n+{\n+public:\n+    JSONUTF8StringFilter(std::string &s):\n+        str(s), is_valid(true), codepoint(0), state(0), surpair(0)\n+    {\n+    }\n+    // Write single 8-bit char (may be part of UTF-8 sequence)\n+    void push_back(unsigned char ch)\n+    {\n+        if (state == 0) {\n+            if (ch < 0x80) // 7-bit ASCII, fast direct pass-through\n+                str.push_back(ch);\n+            else if (ch < 0xc0) // Mid-sequence character, invalid in this state\n+                is_valid = false;\n+            else if (ch < 0xe0) { // Start of 2-byte sequence\n+                codepoint = (ch & 0x1f) << 6;\n+                state = 6;\n+            } else if (ch < 0xf0) { // Start of 3-byte sequence\n+                codepoint = (ch & 0x0f) << 12;\n+                state = 12;\n+            } else if (ch < 0xf8) { // Start of 4-byte sequence\n+                codepoint = (ch & 0x07) << 18;\n+                state = 18;\n+            } else // Reserved, invalid\n+                is_valid = false;\n+        } else {\n+            if ((ch & 0xc0) != 0x80) // Not a continuation, invalid\n+                is_valid = false;\n+            state -= 6;\n+            codepoint |= (ch & 0x3f) << state;\n+            if (state == 0)\n+                push_back_u(codepoint);\n+        }\n+    }\n+    // Write codepoint directly, possibly collating surrogate pairs\n+    void push_back_u(unsigned int codepoint)\n+    {\n+        if (state) // Only accept full codepoints in open state\n+            is_valid = false;\n+        if (codepoint >= 0xD800 && codepoint < 0xDC00) { // First half of surrogate pair\n+            if (surpair) // Two subsequent surrogate pair openers - fail\n+                is_valid = false;\n+            else\n+                surpair = codepoint;\n+        } else if (codepoint >= 0xDC00 && codepoint < 0xE000) { // Second half of surrogate pair\n+            if (surpair) { // Open surrogate pair, expect second half\n+                // Compute code point from UTF-16 surrogate pair\n+                append_codepoint(0x10000 | ((surpair - 0xD800)<<10) | (codepoint - 0xDC00));\n+                surpair = 0;\n+            } else // Second half doesn't follow a first half - fail\n+                is_valid = false;\n+        } else {\n+            if (surpair) // First half of surrogate pair not followed by second - fail\n+                is_valid = false;\n+            else\n+                append_codepoint(codepoint);\n+        }\n+    }\n+    // Check that we're in a state where the string can be ended\n+    // No open sequences, no open surrogate pairs, etc\n+    bool finalize()\n+    {\n+        if (state || surpair)\n+            is_valid = false;\n+        return is_valid;\n+    }\n+private:\n+    std::string &str;\n+    bool is_valid;\n+    // Current UTF-8 decoding state\n+    unsigned int codepoint;\n+    int state; // Top bit to be filled in for next UTF-8 byte, or 0\n+\n+    // Keep track of the following state to handle the following section of\n+    // RFC4627:\n+    //\n+    //    To escape an extended character that is not in the Basic Multilingual\n+    //    Plane, the character is represented as a twelve-character sequence,\n+    //    encoding the UTF-16 surrogate pair.  So, for example, a string\n+    //    containing only the G clef character (U+1D11E) may be represented as\n+    //    \"\\uD834\\uDD1E\".\n+    //\n+    //  Two subsequent \\u.... may have to be replaced with one actual codepoint.\n+    unsigned int surpair; // First half of open UTF-16 surrogate pair, or 0\n+\n+    void append_codepoint(unsigned int codepoint)\n+    {\n+        if (codepoint <= 0x7f)\n+            str.push_back((char)codepoint);\n+        else if (codepoint <= 0x7FF) {\n+            str.push_back((char)(0xC0 | (codepoint >> 6)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        } else if (codepoint <= 0xFFFF) {\n+            str.push_back((char)(0xE0 | (codepoint >> 12)));\n+            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        } else if (codepoint <= 0x1FFFFF) {\n+            str.push_back((char)(0xF0 | (codepoint >> 18)));\n+            str.push_back((char)(0x80 | ((codepoint >> 12) & 0x3F)));\n+            str.push_back((char)(0x80 | ((codepoint >> 6) & 0x3F)));\n+            str.push_back((char)(0x80 | (codepoint & 0x3F)));\n+        }\n+    }\n+};\n+\n+#endif"
      },
      {
        "sha": "cfbdad3284ed53215258eba8b6166840c9813937",
        "filename": "src/univalue/lib/univalue_write.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/lib/univalue_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/lib/univalue_write.cpp?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -8,8 +8,6 @@\n #include \"univalue.h\"\n #include \"univalue_escapes.h\"\n \n-// TODO: Using UTF8\n-\n using namespace std;\n \n static string json_escape(const string& inS)\n@@ -23,15 +21,8 @@ static string json_escape(const string& inS)\n \n         if (escStr)\n             outS += escStr;\n-\n-        else if (ch < 0x80)\n+        else\n             outS += ch;\n-\n-        else { // TODO handle UTF-8 properly\n-            char tmpesc[16];\n-            sprintf(tmpesc, \"\\\\u%04x\", ch);\n-            outS += tmpesc;\n-        }\n     }\n \n     return outS;"
      },
      {
        "sha": "b245e2e46cad56d6b13075de10304cccf2c6efa7",
        "filename": "src/univalue/test/fail38.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail38.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail38.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail38.json?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1 @@\n+[\"\\ud834\"]"
      },
      {
        "sha": "7c9e263f27de5dcf82f83be2e00981fce4da4957",
        "filename": "src/univalue/test/fail39.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail39.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail39.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail39.json?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1 @@\n+[\"\\udd61\"]"
      },
      {
        "sha": "664dc9e245f65c30c64281df6d2096c2b9afe430",
        "filename": "src/univalue/test/fail40.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail40.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail40.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail40.json?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1 @@\n+[\"\ufffd\ufffd\ufffd\"]\n\\ No newline at end of file"
      },
      {
        "sha": "0de342a2b5fdf5803efb5fd59f95133ed2230971",
        "filename": "src/univalue/test/fail41.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail41.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/fail41.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/fail41.json?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1 @@\n+[\"\ufffd\"]\n\\ No newline at end of file"
      },
      {
        "sha": "b766cccc688992aff4806b1261947d00d7e848c6",
        "filename": "src/univalue/test/round2.json",
        "status": "added",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/round2.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/round2.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/round2.json?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -0,0 +1 @@\n+[\"a\u00a7\u25a0\ud800\udf92\ud834\udd61\"]"
      },
      {
        "sha": "05f3842cd1eb6323cf442962ed2e76290b385a5d",
        "filename": "src/univalue/test/unitester.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 0,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/unitester.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63151521fd06ccddd6d5c4e3f283f26d5b9b024d/src/univalue/test/unitester.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/univalue/test/unitester.cpp?ref=63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "patch": "@@ -22,6 +22,7 @@ string srcdir(JSON_TEST_SRC);\n static bool test_failed = false;\n \n #define d_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", filename.c_str()); } }\n+#define f_assert(expr) { if (!(expr)) { test_failed = true; fprintf(stderr, \"%s failed\\n\", __func__); } }\n \n static std::string rtrim(std::string s)\n {\n@@ -108,6 +109,10 @@ static const char *filenames[] = {\n         \"fail35.json\",\n         \"fail36.json\",\n         \"fail37.json\",\n+        \"fail38.json\",               // invalid unicode: only first half of surrogate pair\n+        \"fail39.json\",               // invalid unicode: only second half of surrogate pair\n+        \"fail40.json\",               // invalid unicode: broken UTF-8\n+        \"fail41.json\",               // invalid unicode: unfinished UTF-8\n         \"fail3.json\",\n         \"fail4.json\",                // extra comma\n         \"fail5.json\",\n@@ -119,14 +124,40 @@ static const char *filenames[] = {\n         \"pass2.json\",\n         \"pass3.json\",\n         \"round1.json\",              // round-trip test\n+        \"round2.json\",              // unicode\n };\n \n+// Test \\u handling\n+void unescape_unicode_test()\n+{\n+    UniValue val;\n+    bool testResult;\n+    // Escaped ASCII (quote)\n+    testResult = val.read(\"[\\\"\\\\u0022\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\\"\");\n+    // Escaped Basic Plane character, two-byte UTF-8\n+    testResult = val.read(\"[\\\"\\\\u0191\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xc6\\x91\");\n+    // Escaped Basic Plane character, three-byte UTF-8\n+    testResult = val.read(\"[\\\"\\\\u2191\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xe2\\x86\\x91\");\n+    // Escaped Supplementary Plane character U+1d161\n+    testResult = val.read(\"[\\\"\\\\ud834\\\\udd61\\\"]\");\n+    f_assert(testResult);\n+    f_assert(val[0].get_str() == \"\\xf0\\x9d\\x85\\xa1\");\n+}\n+\n int main (int argc, char *argv[])\n {\n     for (unsigned int fidx = 0; fidx < ARRAY_SIZE(filenames); fidx++) {\n         runtest_file(filenames[fidx]);\n     }\n \n+    unescape_unicode_test();\n+\n     return test_failed ? 1 : 0;\n }\n "
      }
    ]
  },
  {
    "sha": "a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNDA2ZmNiNmNhY2RjNDljZTExZmM2MTQ3ZGY1OGMwYzgyN2E3YTA2",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T13:17:41Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:20:49Z"
      },
      "message": "test: add ensure_ascii setting to AuthServiceProxy\n\nAdd a setting ensure_ascii to AuthServiceProxy. This setting,\ndefaulting to True (backwards compatible),\nis passed through to json.dumps. If set to False, non-ASCII characters\n>0x80 are not escaped. This is useful for testing server\ninput processing, as well as slightly more bandwidth friendly in case of\nheavy unicode usage.",
      "tree": {
        "sha": "bb9c62862519dffb823f86b83556b0e037816cf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bb9c62862519dffb823f86b83556b0e037816cf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a406fcb6cacdc49ce11fc6147df58c0c827a7a06/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63151521fd06ccddd6d5c4e3f283f26d5b9b024d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/63151521fd06ccddd6d5c4e3f283f26d5b9b024d"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 9,
      "deletions": 7
    },
    "files": [
      {
        "sha": "d095a56ce75e3529ffe2a8773d7e8ea5bf1bd0db",
        "filename": "qa/rpc-tests/test_framework/authproxy.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a406fcb6cacdc49ce11fc6147df58c0c827a7a06/qa/rpc-tests/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a406fcb6cacdc49ce11fc6147df58c0c827a7a06/qa/rpc-tests/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/authproxy.py?ref=a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
        "patch": "@@ -67,9 +67,11 @@ def EncodeDecimal(o):\n class AuthServiceProxy(object):\n     __id_count = 0\n \n-    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None):\n+    # ensure_ascii: escape unicode as \\uXXXX, passed to json.dumps\n+    def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connection=None, ensure_ascii=True):\n         self.__service_url = service_url\n         self._service_name = service_name\n+        self.ensure_ascii = ensure_ascii # can be toggled on the fly by tests\n         self.__url = urlparse.urlparse(service_url)\n         if self.__url.port is None:\n             port = 80\n@@ -134,12 +136,12 @@ def __call__(self, *args):\n         AuthServiceProxy.__id_count += 1\n \n         log.debug(\"-%s-> %s %s\"%(AuthServiceProxy.__id_count, self._service_name,\n-                                 json.dumps(args, default=EncodeDecimal)))\n+                                 json.dumps(args, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         postdata = json.dumps({'version': '1.1',\n                                'method': self._service_name,\n                                'params': args,\n-                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal)\n-        response = self._request('POST', self.__url.path, postdata)\n+                               'id': AuthServiceProxy.__id_count}, default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n+        response = self._request('POST', self.__url.path, postdata.encode('utf-8'))\n         if response['error'] is not None:\n             raise JSONRPCException(response['error'])\n         elif 'result' not in response:\n@@ -149,9 +151,9 @@ def __call__(self, *args):\n             return response['result']\n \n     def _batch(self, rpc_call_list):\n-        postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal)\n+        postdata = json.dumps(list(rpc_call_list), default=EncodeDecimal, ensure_ascii=self.ensure_ascii)\n         log.debug(\"--> \"+postdata)\n-        return self._request('POST', self.__url.path, postdata)\n+        return self._request('POST', self.__url.path, postdata.encode('utf-8'))\n \n     def _get_response(self):\n         http_response = self.__conn.getresponse()\n@@ -167,7 +169,7 @@ def _get_response(self):\n         responsedata = http_response.read().decode('utf8')\n         response = json.loads(responsedata, parse_float=decimal.Decimal)\n         if \"error\" in response and response[\"error\"] is None:\n-            log.debug(\"<-%s- %s\"%(response[\"id\"], json.dumps(response[\"result\"], default=EncodeDecimal)))\n+            log.debug(\"<-%s- %s\"%(response[\"id\"], json.dumps(response[\"result\"], default=EncodeDecimal, ensure_ascii=self.ensure_ascii)))\n         else:\n             log.debug(\"<-- \"+responsedata)\n         return response"
      }
    ]
  },
  {
    "sha": "6bbb4ef39989ff75167da48faec581b55ba51240",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YmJiNGVmMzk5ODlmZjc1MTY3ZGE0OGZhZWM1ODFiNTViYTUxMjQw",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-28T13:18:01Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:20:49Z"
      },
      "message": "test: test utf-8 for labels in wallet",
      "tree": {
        "sha": "e6428733ee33acbb77793322001c0cd8d33976f0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e6428733ee33acbb77793322001c0cd8d33976f0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6bbb4ef39989ff75167da48faec581b55ba51240",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbb4ef39989ff75167da48faec581b55ba51240",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbb4ef39989ff75167da48faec581b55ba51240",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbb4ef39989ff75167da48faec581b55ba51240/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a406fcb6cacdc49ce11fc6147df58c0c827a7a06",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a406fcb6cacdc49ce11fc6147df58c0c827a7a06"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ba84f0d5686dcd4142a768eab259b490885ab68d",
        "filename": "qa/rpc-tests/wallet.py",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6bbb4ef39989ff75167da48faec581b55ba51240/qa/rpc-tests/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6bbb4ef39989ff75167da48faec581b55ba51240/qa/rpc-tests/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet.py?ref=6bbb4ef39989ff75167da48faec581b55ba51240",
        "patch": "@@ -314,6 +314,20 @@ def run_test (self):\n         balance_nodes = [self.nodes[i].getbalance() for i in range(3)]\n         block_count = self.nodes[0].getblockcount()\n \n+        # Check modes:\n+        #   - True: unicode escaped as \\u....\n+        #   - False: unicode directly as UTF-8\n+        for mode in [True, False]:\n+            self.nodes[0].ensure_ascii = mode\n+            # unicode check: Basic Multilingual Plane, Supplementary Plane respectively\n+            for s in [u'\u0440\u044b\u0431\u0430', u'\ud834\udd61']:\n+                addr = self.nodes[0].getaccountaddress(s)\n+                label = self.nodes[0].getaccount(addr)\n+                assert_equal(label, s)\n+                assert(s in self.nodes[0].listaccounts().keys())\n+        self.nodes[0].ensure_ascii = True # restore to default\n+\n+        # maintenance tests\n         maintenance = [\n             '-rescan',\n             '-reindex',"
      }
    ]
  },
  {
    "sha": "7982fce64c61c53d1e2e8cc6a8724f878701796d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OTgyZmNlNjRjNjFjNTNkMWUyZThjYzZhODcyNGY4Nzg3MDE3OTZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-04-16T13:21:47Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-06-10T13:20:50Z"
      },
      "message": "doc: Mention full UTF-8 support in release notes",
      "tree": {
        "sha": "8d77cbb501b957c6367d7a65888c3e047314ce8a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d77cbb501b957c6367d7a65888c3e047314ce8a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7982fce64c61c53d1e2e8cc6a8724f878701796d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7982fce64c61c53d1e2e8cc6a8724f878701796d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7982fce64c61c53d1e2e8cc6a8724f878701796d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7982fce64c61c53d1e2e8cc6a8724f878701796d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6bbb4ef39989ff75167da48faec581b55ba51240",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6bbb4ef39989ff75167da48faec581b55ba51240",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6bbb4ef39989ff75167da48faec581b55ba51240"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0d457714d58564708c98381d9d28443d9d80c33c",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7982fce64c61c53d1e2e8cc6a8724f878701796d/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7982fce64c61c53d1e2e8cc6a8724f878701796d/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=7982fce64c61c53d1e2e8cc6a8724f878701796d",
        "patch": "@@ -43,6 +43,11 @@ RPC low-level changes\n   32-bit and 64-bit platforms, and the txids were missing in the hashed data. This has been\n   fixed, but this means that the output will be different than from previous versions.\n \n+- Full UTF-8 support in the RPC API. Non-ASCII characters in, for example,\n+  wallet labels have always been malformed because they weren't taken into account\n+  properly in JSON RPC processing. This is no longer the case. This also affects\n+  the GUI debug console.\n+\n C++11 and Python 3\n -------------------\n "
      }
    ]
  }
]