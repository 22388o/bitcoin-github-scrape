[
  {
    "sha": "50b55065156436c75a5f27d33d35afdd001982b6",
    "node_id": "C_kwDOABII59oAKDUwYjU1MDY1MTU2NDM2Yzc1YTVmMjdkMzNkMzVhZmRkMDAxOTgyYjY",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T15:18:42Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:40Z"
      },
      "message": "policy/fees: make processBlockTx a procedure\n\nWe'll need to check if the tx is tracked in the caller, processBlock.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "12eca11d9d11e2f79dd90a2195908bc3f59c61cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/12eca11d9d11e2f79dd90a2195908bc3f59c61cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50b55065156436c75a5f27d33d35afdd001982b6",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CAACgkQ4T/BRc0/\nQwS2zgwAq5tegpYHD8ZcLhoE9pYjHHf/PeweJV3/dqxKt8Ljieu290PI2gtHaPsx\n1MofHCTHbGG4dEqFLWuhzSsfnzmZ8Xsevf3ux1d4CB4FA31VxUqkU7m0xTVJn1rg\nWxyPaPPOMROwhbfX66b96xDnKtq2mjMOttdDsj1aXX/hsZDywobvs+JmC4tq6vg5\n+FNfbJqrTk9F6fMApv+6PWpEGBwGzPJCqWIzOnCZd/SUg5eDrSvoPuMWMLVrILJg\nEcoSNu60E21iNFzR22kk8fDDJZ6CrbgOtilNPDbgPtleILgEDdX/V28l9x3i7AMB\nso26sWflZ9Lj3CBWkO+2sYul2JW3bvBOc9gkbocuCYYD7Oc9z5fJQ3L2EiALv8uq\n+bu8ygnEaNsbNQ2Y6UpXKA4ZXe7msKNm6Tt5OBz9o0h+K8OephgpwKIfzzXmabXN\ncdBb2CnZl3oxXcBNEKUtci9VgjVaqVxsBLdeDDZdpN7e/uzyQTKiWB6n6BbWbOgF\nzfbOAl+V\n=jQma\n-----END PGP SIGNATURE-----",
        "payload": "tree 12eca11d9d11e2f79dd90a2195908bc3f59c61cd\nparent 747f91c0a385df19bced69deca4d9da6d6e756b8\nauthor Antoine Poinsot <darosior@protonmail.com> 1632237522 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555040 +0200\n\npolicy/fees: make processBlockTx a procedure\n\nWe'll need to check if the tx is tracked in the caller, processBlock.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b55065156436c75a5f27d33d35afdd001982b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50b55065156436c75a5f27d33d35afdd001982b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b55065156436c75a5f27d33d35afdd001982b6/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "747f91c0a385df19bced69deca4d9da6d6e756b8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/747f91c0a385df19bced69deca4d9da6d6e756b8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/747f91c0a385df19bced69deca4d9da6d6e756b8"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 9,
      "deletions": 11
    },
    "files": [
      {
        "sha": "775fe652f9b348360167541531c2330c7f7c29ce",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 10,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b55065156436c75a5f27d33d35afdd001982b6/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b55065156436c75a5f27d33d35afdd001982b6/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=50b55065156436c75a5f27d33d35afdd001982b6",
        "patch": "@@ -574,13 +574,8 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     assert(bucketIndex == bucketIndex3);\n }\n \n-bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n+void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n {\n-    if (!removeTx(entry->GetTx().GetHash(), true)) {\n-        // This transaction wasn't being tracked for fee estimation\n-        return false;\n-    }\n-\n     // How many blocks did it take for miners to include this transaction?\n     // blocksToConfirm is 1-based, so a transaction included in the earliest\n     // possible block has confirmation count of 1\n@@ -589,7 +584,7 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         // This can't happen because we don't process transactions from a block with a height\n         // lower than our greatest seen height\n         LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy error Transaction had negative blocksToConfirm\\n\");\n-        return false;\n+        return;\n     }\n \n     // Feerates are stored and reported as BTC-per-kb:\n@@ -598,7 +593,6 @@ bool CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n     feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n     shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n     longStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n-    return true;\n }\n \n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n@@ -632,8 +626,12 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     unsigned int countedTxs = 0;\n     // Update averages with data points from current block\n     for (const auto& entry : entries) {\n-        if (processBlockTx(nBlockHeight, entry))\n-            countedTxs++;\n+        if (!removeTx(entry->GetTx().GetHash(), true)) {\n+            // This transaction wasn't being tracked for fee estimation\n+            continue;\n+        }\n+        processBlockTx(nBlockHeight, entry);\n+        countedTxs++;\n     }\n \n     if (firstRecordedHeight == 0 && countedTxs > 0) {"
      },
      {
        "sha": "b7512a144a0acc1ca244a4f50673daa41edd070a",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50b55065156436c75a5f27d33d35afdd001982b6/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50b55065156436c75a5f27d33d35afdd001982b6/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=50b55065156436c75a5f27d33d35afdd001982b6",
        "patch": "@@ -255,7 +255,7 @@ class CBlockPolicyEstimator\n     std::map<double, unsigned int> bucketMap GUARDED_BY(m_cs_fee_estimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    bool processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n \n     /** Helper for estimateSmartFee */\n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);"
      }
    ]
  },
  {
    "sha": "467377413c9d3d4a6afb76d586629b1890c54d67",
    "node_id": "C_kwDOABII59oAKDQ2NzM3NzQxM2M5ZDNkNGE2YWZiNzZkNTg2NjI5YjE4OTBjNTRkNjc",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T15:22:04Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:40Z"
      },
      "message": "policy/fee: pass the feerate to processBlockTx\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "74a298d063be6c2761998414742ef0ffa258b4c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74a298d063be6c2761998414742ef0ffa258b4c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/467377413c9d3d4a6afb76d586629b1890c54d67",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CAACgkQ4T/BRc0/\nQwQSgwwAx+HkelHuFlHWIUm8IGdb4qa7xKyfGEdQ62tcafi2I9jzu+vf4hOmsRfr\n7Y7M08L+iCh4ja3AdaFEmhWGVZkfJ6DzyHTzvwH3wV4CM3Nl/LFR5FVCeljvR530\n0bKl5iYYUTMy78mTHqv4sPLufORFAALhLUD85wYKR75fHJ4Kex21vci2YCNNATY2\n/DDB/3E4g1dviUcjRNifK6RDzyHeG2n0ARMCpM7BSDC+IrClfpWeOxdy5o13hLD6\n4xc4PjcUQ0CGS13DN/1mZWGIwXx7Sr7VM2FxI4JCULes1L02mkbuxROWTn4z3KZb\nz5Zbi2rgtm8bffCk7bvlncq478P6HvmM9LBqttQQEnFtaCC/tIcO3bNnZKBbfWYe\nr62tjUpLCmtqJUYbtb8xl+inzbs1d1dAt9oi1h2Ij4Shn7ayUsW4q4RYVGbHIjE0\nU2bWNft9AYfAX2O67JsFLN97sqO4Ld/4Cnfibi2QIMsHgTyF9xTO8hdlihN16KLg\n2gygeeS0\n=78nX\n-----END PGP SIGNATURE-----",
        "payload": "tree 74a298d063be6c2761998414742ef0ffa258b4c9\nparent 50b55065156436c75a5f27d33d35afdd001982b6\nauthor Antoine Poinsot <darosior@protonmail.com> 1632237724 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555040 +0200\n\npolicy/fee: pass the feerate to processBlockTx\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467377413c9d3d4a6afb76d586629b1890c54d67",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/467377413c9d3d4a6afb76d586629b1890c54d67",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467377413c9d3d4a6afb76d586629b1890c54d67/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50b55065156436c75a5f27d33d35afdd001982b6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50b55065156436c75a5f27d33d35afdd001982b6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50b55065156436c75a5f27d33d35afdd001982b6"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 8,
      "deletions": 9
    },
    "files": [
      {
        "sha": "53e93cc503d0cb92dadbb65edb0122f1feacd377",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/467377413c9d3d4a6afb76d586629b1890c54d67/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/467377413c9d3d4a6afb76d586629b1890c54d67/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=467377413c9d3d4a6afb76d586629b1890c54d67",
        "patch": "@@ -574,7 +574,7 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     assert(bucketIndex == bucketIndex3);\n }\n \n-void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry)\n+void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry, CFeeRate fee_rate)\n {\n     // How many blocks did it take for miners to include this transaction?\n     // blocksToConfirm is 1-based, so a transaction included in the earliest\n@@ -587,12 +587,9 @@ void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n         return;\n     }\n \n-    // Feerates are stored and reported as BTC-per-kb:\n-    CFeeRate feeRate(entry->GetFee(), entry->GetTxSize());\n-\n-    feeStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n-    shortStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n-    longStats->Record(blocksToConfirm, (double)feeRate.GetFeePerK());\n+    feeStats->Record(blocksToConfirm, (double)fee_rate.GetFeePerK());\n+    shortStats->Record(blocksToConfirm, (double)fee_rate.GetFeePerK());\n+    longStats->Record(blocksToConfirm, (double)fee_rate.GetFeePerK());\n }\n \n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n@@ -630,7 +627,9 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n             // This transaction wasn't being tracked for fee estimation\n             continue;\n         }\n-        processBlockTx(nBlockHeight, entry);\n+        // Feerates are stored and reported as BTC-per-kb:\n+        CFeeRate fee_rate(entry->GetFee(), entry->GetTxSize());\n+        processBlockTx(nBlockHeight, entry, fee_rate);\n         countedTxs++;\n     }\n "
      },
      {
        "sha": "8f36e13a7c4c9c76cd5c29872b6402d6d707e688",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/467377413c9d3d4a6afb76d586629b1890c54d67/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/467377413c9d3d4a6afb76d586629b1890c54d67/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=467377413c9d3d4a6afb76d586629b1890c54d67",
        "patch": "@@ -255,7 +255,7 @@ class CBlockPolicyEstimator\n     std::map<double, unsigned int> bucketMap GUARDED_BY(m_cs_fee_estimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry, CFeeRate fee_rate) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n \n     /** Helper for estimateSmartFee */\n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);"
      }
    ]
  },
  {
    "sha": "8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
    "node_id": "C_kwDOABII59oAKDg3NTQ1OTJlMzZhZTdlOTg4NWIyMzg1ZWEzMGNjZDMyYmE3MWQ1ZWQ",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T16:19:49Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:41Z"
      },
      "message": "txmempool: give to fee estimator a set of references, not a vector of pointer\n\nWe'll need to lookup in the set whether a descendant of an entry was\nactually confirmed.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "e82e3763b6ad5b3a8ffd81c7c0034411ea058225",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e82e3763b6ad5b3a8ffd81c7c0034411ea058225"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CEACgkQ4T/BRc0/\nQwQNRgwAgpxDyxsyA4vLip8xg1ehv7WbhtBFV/VIv3UXosZ0Bgt+Yj49FKAWIAQx\nw7wEiU6OFEsb0MWquz1IyLUb0UCOK8Rs8cHCEsTRLDDju5jo5pvLzC+YomTfEsKz\nwVjV2qAby9/ipckWEGrKk09Q5FC7tPoM4f1LASYjZcDmhsP5I7E2ASdbbBzesaOs\nbu31IO0EKDUN6epzfySxR9PUVzk7dMy/KTtXOpn9LNqZktCM3J5bY7LfKpDorZ30\nKtrCEt/YpnAn6OukyEoa7ruzjdOh1mN670ahjTQbPJugyipDvxfF/zij9mv7fAd4\nMw38kBnXpIpk85nzOWJzthdoZSKC2z56gyKZqpMhf2tT7ipfIYlYgZCxcpur6GCR\ngBdcsa7F51+dTwlnrvGEvb0Qn46qz56THoiNTnGF5pOMhIqymttRp/iG7IzsC82q\n7v2QXAWS4T7eyq/vJ4DMvEt/0EdOFjkfTzhnBfxbGZmq5+IjplyK+NfRcOXQd6nA\ndqvnkXUF\n=sLUr\n-----END PGP SIGNATURE-----",
        "payload": "tree e82e3763b6ad5b3a8ffd81c7c0034411ea058225\nparent 467377413c9d3d4a6afb76d586629b1890c54d67\nauthor Antoine Poinsot <darosior@protonmail.com> 1632241189 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555041 +0200\n\ntxmempool: give to fee estimator a set of references, not a vector of pointer\n\nWe'll need to lookup in the set whether a descendant of an entry was\nactually confirmed.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "467377413c9d3d4a6afb76d586629b1890c54d67",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/467377413c9d3d4a6afb76d586629b1890c54d67",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/467377413c9d3d4a6afb76d586629b1890c54d67"
      }
    ],
    "stats": {
      "total": 30,
      "additions": 15,
      "deletions": 15
    },
    "files": [
      {
        "sha": "4a6539e3538635e8162327205b2ae8b43aa06a7a",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "patch": "@@ -9,7 +9,6 @@\n #include <fs.h>\n #include <logging.h>\n #include <streams.h>\n-#include <txmempool.h>\n #include <util/serfloat.h>\n #include <util/system.h>\n \n@@ -574,12 +573,12 @@ void CBlockPolicyEstimator::processTransaction(const CTxMemPoolEntry& entry, boo\n     assert(bucketIndex == bucketIndex3);\n }\n \n-void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry, CFeeRate fee_rate)\n+void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry, CFeeRate fee_rate)\n {\n     // How many blocks did it take for miners to include this transaction?\n     // blocksToConfirm is 1-based, so a transaction included in the earliest\n     // possible block has confirmation count of 1\n-    int blocksToConfirm = nBlockHeight - entry->GetHeight();\n+    int blocksToConfirm = nBlockHeight - entry.GetHeight();\n     if (blocksToConfirm <= 0) {\n         // This can't happen because we don't process transactions from a block with a height\n         // lower than our greatest seen height\n@@ -593,7 +592,7 @@ void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n }\n \n void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n-                                         std::vector<const CTxMemPoolEntry*>& entries)\n+                                         std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash>& entries)\n {\n     LOCK(m_cs_fee_estimator);\n     if (nBlockHeight <= nBestSeenHeight) {\n@@ -622,13 +621,13 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n     unsigned int countedTxs = 0;\n     // Update averages with data points from current block\n-    for (const auto& entry : entries) {\n-        if (!removeTx(entry->GetTx().GetHash(), true)) {\n+    for (const CTxMemPoolEntry& entry : entries) {\n+        if (!removeTx(entry.GetTx().GetHash(), true)) {\n             // This transaction wasn't being tracked for fee estimation\n             continue;\n         }\n         // Feerates are stored and reported as BTC-per-kb:\n-        CFeeRate fee_rate(entry->GetFee(), entry->GetTxSize());\n+        CFeeRate fee_rate(entry.GetFee(), entry.GetTxSize());\n         processBlockTx(nBlockHeight, entry, fee_rate);\n         countedTxs++;\n     }"
      },
      {
        "sha": "17db15b162c59619e2861979b47716ff48ec1611",
        "filename": "src/policy/fees.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/policy/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/policy/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.h?ref=8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "patch": "@@ -10,6 +10,7 @@\n #include <uint256.h>\n #include <random.h>\n #include <sync.h>\n+#include <txmempool.h>\n \n #include <array>\n #include <map>\n@@ -186,7 +187,7 @@ class CBlockPolicyEstimator\n \n     /** Process all the transactions that have been included in a block */\n     void processBlock(unsigned int nBlockHeight,\n-                      std::vector<const CTxMemPoolEntry*>& entries);\n+                      std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash>& entries);\n \n     /** Process a transaction accepted to the mempool*/\n     void processTransaction(const CTxMemPoolEntry& entry, bool validFeeEstimate);\n@@ -255,7 +256,7 @@ class CBlockPolicyEstimator\n     std::map<double, unsigned int> bucketMap GUARDED_BY(m_cs_fee_estimator); // Map of bucket upper-bound to index into all vectors by bucket\n \n     /** Process a transaction confirmed in a block*/\n-    void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry* entry, CFeeRate fee_rate) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n+    void processBlockTx(unsigned int nBlockHeight, const CTxMemPoolEntry& entry, CFeeRate fee_rate) EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);\n \n     /** Helper for estimateSmartFee */\n     double estimateCombinedFee(unsigned int confTarget, double successThreshold, bool checkShorterHorizon, EstimationResult *result) const EXCLUSIVE_LOCKS_REQUIRED(m_cs_fee_estimator);"
      },
      {
        "sha": "2c094736b264f3fa5ccb87f35558019235511244",
        "filename": "src/test/fuzz/policy_estimator.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/test/fuzz/policy_estimator.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/test/fuzz/policy_estimator.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/policy_estimator.cpp?ref=8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <cstdint>\n #include <optional>\n+#include <set>\n #include <string>\n #include <vector>\n \n@@ -48,12 +49,11 @@ FUZZ_TARGET_INIT(policy_estimator, initialize_policy_estimator)\n                     const CTransaction tx{*mtx};\n                     mempool_entries.push_back(ConsumeTxMemPoolEntry(fuzzed_data_provider, tx));\n                 }\n-                std::vector<const CTxMemPoolEntry*> ptrs;\n-                ptrs.reserve(mempool_entries.size());\n+                std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash> refs;\n                 for (const CTxMemPoolEntry& mempool_entry : mempool_entries) {\n-                    ptrs.push_back(&mempool_entry);\n+                    refs.insert(mempool_entry);\n                 }\n-                block_policy_estimator.processBlock(fuzzed_data_provider.ConsumeIntegral<unsigned int>(), ptrs);\n+                block_policy_estimator.processBlock(fuzzed_data_provider.ConsumeIntegral<unsigned int>(), refs);\n             },\n             [&] {\n                 (void)block_policy_estimator.removeTx(ConsumeUInt256(fuzzed_data_provider), /* inBlock */ fuzzed_data_provider.ConsumeBool());"
      },
      {
        "sha": "473a1bffee4a3be703e160cb9a8a74087a79e306",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8754592e36ae7e9885b2385ea30ccd32ba71d5ed/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "patch": "@@ -626,14 +626,14 @@ void CTxMemPool::removeConflicts(const CTransaction &tx)\n void CTxMemPool::removeForBlock(const std::vector<CTransactionRef>& vtx, unsigned int nBlockHeight)\n {\n     AssertLockHeld(cs);\n-    std::vector<const CTxMemPoolEntry*> entries;\n+    std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash> entries;\n     for (const auto& tx : vtx)\n     {\n         uint256 hash = tx->GetHash();\n \n         indexed_transaction_set::iterator i = mapTx.find(hash);\n         if (i != mapTx.end())\n-            entries.push_back(&*i);\n+            entries.insert(*i);\n     }\n     // Before the txs in the new block have been removed from the mempool, update policy estimates\n     if (minerPolicyEstimator) {minerPolicyEstimator->processBlock(nBlockHeight, entries);}"
      }
    ]
  },
  {
    "sha": "cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
    "node_id": "C_kwDOABII59oAKGNiNDhkNDU2OWVkYjUzZDBhOGNjYmNlNzBhNDUxMGYxYzFkNWU3NWU",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T17:26:25Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:41Z"
      },
      "message": "policy: package-aware block policy estimator\n\nThe fee estimation logic would previously assume a miner was\nincentivized to include a given transaction only by this transaction's\nfee. This isn't true anymore since c82a4e9a63a28fc8c482c7c8e5b7bfcc51a6805a.\n\nCPFP is actively used on the network today [FIXME provide numbers], and\nthe usage can be expected to increase a lot with the adoption of\nCPFP-based fee bumping for L2 protocols such as the Lightning Network\n(see the anchor outputs proposal).\n\nThe more CPFP is used, the more the fee estimator will *underestimate*\nthe fee required to get into a target number of blocks.\nThis may become at best a nuisance for onchain transaction users and at\nworst a security issue for protocol requiring timely confirmation of\npre-sign transactions.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "bf71f1a8f3772f13d4236714a7cc136e0bba2910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf71f1a8f3772f13d4236714a7cc136e0bba2910"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CEACgkQ4T/BRc0/\nQwTtKwv/WnXNK0XVRg8QOwSmDVzuhWWiUxFQqiW54CfnpG/9b03KBC5YmyGQZglc\nMtVLQhOdrufjnnhK++ENOuyj9/nNxvuIdlg7VcV1j6ayvZlSlDt0OutKy5f0OQzK\nBozISmeSkDXROIsqcGb+mb4aGDElqHoumq8WLa8cdjjuiqyp3NDXSSRJMD3ryKYB\neLLHHLnl8pPNHqpvLgM9rMP0u6Vy+RXbA8c/PvVZTwa8NWq33gtySYIhW5KG493I\nLLQ28lukycoSPk7pm+rOGjQ4HIwmeQImgLGsh/hA//61pK6VAL0VFMWo6vYocE9o\n8cMgH3lzWJz0dNOHkKyxmQjMwIPwVDtanelCyUzrlWJPoJ1hzarrStzLjRavqwFb\nYxVs8K4ZXpkRw32YxyKobNiR4qPrp8r3cswVqTjOaXquIYhedvjC98gp+DX3RuUm\nXwU8vS/NInbPA0PZMJd+0dVpTIptKgpbw1T5XZm2Fl9/W/KF8+4I7ZXCv59LXX7J\nVygye3fU\n=D3Py\n-----END PGP SIGNATURE-----",
        "payload": "tree bf71f1a8f3772f13d4236714a7cc136e0bba2910\nparent 8754592e36ae7e9885b2385ea30ccd32ba71d5ed\nauthor Antoine Poinsot <darosior@protonmail.com> 1632245185 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555041 +0200\n\npolicy: package-aware block policy estimator\n\nThe fee estimation logic would previously assume a miner was\nincentivized to include a given transaction only by this transaction's\nfee. This isn't true anymore since c82a4e9a63a28fc8c482c7c8e5b7bfcc51a6805a.\n\nCPFP is actively used on the network today [FIXME provide numbers], and\nthe usage can be expected to increase a lot with the adoption of\nCPFP-based fee bumping for L2 protocols such as the Lightning Network\n(see the anchor outputs proposal).\n\nThe more CPFP is used, the more the fee estimator will *underestimate*\nthe fee required to get into a target number of blocks.\nThis may become at best a nuisance for onchain transaction users and at\nworst a security issue for protocol requiring timely confirmation of\npre-sign transactions.\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8754592e36ae7e9885b2385ea30ccd32ba71d5ed",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8754592e36ae7e9885b2385ea30ccd32ba71d5ed"
      }
    ],
    "stats": {
      "total": 198,
      "additions": 191,
      "deletions": 7
    },
    "files": [
      {
        "sha": "182c70c17aa60e88a79fa03dc35088d6d9592f4e",
        "filename": "src/policy/fees.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 7,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e/src/policy/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e/src/policy/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/fees.cpp?ref=cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
        "patch": "@@ -16,6 +16,10 @@ static const char* FEE_ESTIMATES_FILENAME = \"fee_estimates.dat\";\n \n static constexpr double INF_FEERATE = 1e99;\n \n+// Same as CTxMemPoolEntry::[Parent, Children], not used to avoid confusion with actual\n+// decendants and ancestors.\n+typedef std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash> setMemPoolEntry;\n+\n std::string StringForFeeEstimateHorizon(FeeEstimateHorizon horizon)\n {\n     switch (horizon) {\n@@ -591,8 +595,33 @@ void CBlockPolicyEstimator::processBlockTx(unsigned int nBlockHeight, const CTxM\n     longStats->Record(blocksToConfirm, (double)fee_rate.GetFeePerK());\n }\n \n-void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n-                                         std::set<CTxMemPoolEntry::CTxMemPoolEntryRef, CompareIteratorByHash>& entries)\n+std::pair<CAmount, uint64_t> FeeSizeWithDescendants(setMemPoolEntry& mined_entries,\n+                                                    CTxMemPoolEntry::Children& accounted_descendants,\n+                                                    const CTxMemPoolEntry& entry)\n+{\n+    std::pair<CAmount, uint64_t> entry_fee_size{entry.GetFee(), entry.GetTxSize()};\n+\n+    for (const CTxMemPoolEntry& child_entry : entry.GetMemPoolChildrenConst()) {\n+        // If the child was not mined, don't account for it.\n+        if (mined_entries.find(child_entry) == mined_entries.end()) {\n+            continue;\n+        }\n+\n+        // Don't account for it twice\n+        if (accounted_descendants.find(child_entry) != accounted_descendants.end()) {\n+            continue;\n+        }\n+\n+        std::pair<CAmount, uint64_t> child_entry_fee_size{FeeSizeWithDescendants(mined_entries, accounted_descendants, child_entry)};\n+        entry_fee_size.first += child_entry_fee_size.first;\n+        entry_fee_size.second += child_entry_fee_size.second;\n+        accounted_descendants.insert(child_entry);\n+    }\n+\n+    return entry_fee_size;\n+}\n+\n+void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight, setMemPoolEntry& mined_entries)\n {\n     LOCK(m_cs_fee_estimator);\n     if (nBlockHeight <= nBestSeenHeight) {\n@@ -620,14 +649,30 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n     longStats->UpdateMovingAverages();\n \n     unsigned int countedTxs = 0;\n-    // Update averages with data points from current block\n-    for (const CTxMemPoolEntry& entry : entries) {\n+    CTxMemPoolEntry::Children accounted_descendants;\n+    // Update averages with data points from current block.\n+    // We account for the feerate of a transaction with its descendants. Note this\n+    // assigns the feerate of a child transaction to its first seen parent, ie for\n+    // a transaction chain like:\n+    //     -- C\n+    //   /\n+    // A ---- D -- E\n+    //      /\n+    //     /\n+    // B -\n+    // This would assign the feerate of the package ACDE to A and only assign B's own\n+    // feerate to itself. It's a middleground between an expensive accurate tracking of\n+    // all a descendants' ancestors and completely disregarding CPFP.\n+    for (const CTxMemPoolEntry& entry : mined_entries) {\n         if (!removeTx(entry.GetTx().GetHash(), true)) {\n             // This transaction wasn't being tracked for fee estimation\n             continue;\n         }\n-        // Feerates are stored and reported as BTC-per-kb:\n-        CFeeRate fee_rate(entry.GetFee(), entry.GetTxSize());\n+\n+        // Note that we would never track transactions with unconfirmed ancestors,\n+        // so we are good looking only for descendants.\n+        std::pair<CAmount, uint64_t> fee_size{FeeSizeWithDescendants(mined_entries, accounted_descendants, entry)};\n+        CFeeRate fee_rate(fee_size.first, fee_size.second);\n         processBlockTx(nBlockHeight, entry, fee_rate);\n         countedTxs++;\n     }\n@@ -639,7 +684,7 @@ void CBlockPolicyEstimator::processBlock(unsigned int nBlockHeight,\n \n \n     LogPrint(BCLog::ESTIMATEFEE, \"Blockpolicy estimates updated by %u of %u block txs, since last block %u of %u tracked, mempool map size %u, max target %u from %s\\n\",\n-             countedTxs, entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n+             countedTxs, mined_entries.size(), trackedTxs, trackedTxs + untrackedTxs, mapMemPoolTxs.size(),\n              MaxUsableEstimate(), HistoricalBlockSpan() > BlockSpan() ? \"historical\" : \"current\");\n \n     trackedTxs = 0;"
      },
      {
        "sha": "e0f2b2826e94a9b44701ff4bc38cd16b70fac06a",
        "filename": "src/test/policyestimator_tests.cpp",
        "status": "modified",
        "additions": 139,
        "deletions": 0,
        "changes": 139,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e/src/test/policyestimator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e/src/test/policyestimator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/policyestimator_tests.cpp?ref=cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
        "patch": "@@ -6,6 +6,7 @@\n #include <policy/policy.h>\n #include <txmempool.h>\n #include <uint256.h>\n+#include <util/strencodings.h>\n #include <util/time.h>\n \n #include <test/util/setup_common.h>\n@@ -180,4 +181,142 @@ BOOST_AUTO_TEST_CASE(BlockPolicyEstimates)\n     }\n }\n \n+BOOST_AUTO_TEST_CASE(BlockPolicyEstimatesSegwitCpfp)\n+{\n+    CBlockPolicyEstimator fee_est;\n+    CTxMemPool mpool(&fee_est);\n+    LOCK2(cs_main, mpool.cs);\n+\n+    // A transaction template spending a P2WPKH and paying to a P2WPKH\n+    CMutableTransaction tx;\n+    tx.nVersion = 1;\n+    tx.vin.resize(1);\n+    tx.vin[0].prevout.SetNull();\n+    tx.vin[0].scriptSig = CScript();\n+    tx.vin[0].scriptWitness.stack.push_back(ParseHex(\"3045022100d743c23d7e5f8c9ee792533d333f60c03a5fda7b97d781dc042305e215e34d290220339ff8710fa0bc74e02b36cd960be8d42b0e542f1822659e46107054e243304601\"));\n+    tx.vin[0].scriptWitness.stack.push_back(ParseHex(\"0214c20e48bb2c90d880aa0c1acb65a666607c7b3f72da399b60da9eb91bcf787d\"));\n+    tx.vout.resize(1);\n+    tx.vout[0].nValue = 0LL;\n+    tx.vout[0].scriptPubKey = CScript() << OP_0 << ParseHex(\"ffffffffffffffffffffffffffffffffffffffff\");\n+    // Another template for a child that will spend 4 P2PWPKH instead\n+    CMutableTransaction child_tx{tx};\n+    child_tx.vin.resize(4);\n+    for (CTxIn& txin : child_tx.vin) {\n+        txin = tx.vin[0];\n+    }\n+\n+    // We'll use low fee parents, higher fee standalone txs and child transactions\n+    // bumping the low fee parents above the standalone tx feerate.\n+    TestMemPoolEntryHelper entry;\n+    CAmount fee_parents(1000), fee_childs(39000), fee_childless(10000);\n+    CFeeRate feerate_parents(fee_parents, GetVirtualTransactionSize(CTransaction(tx)));\n+    CFeeRate feerate_childs(fee_childs, GetVirtualTransactionSize(CTransaction(tx)));\n+    CFeeRate feerate_package(fee_parents + fee_childs, GetVirtualTransactionSize(CTransaction(tx)) * 2);\n+    CFeeRate feerate_childless(fee_childless, GetVirtualTransactionSize(CTransaction(tx)));\n+\n+    std::vector<CTransactionRef> block;\n+    unsigned blocknum = 0;\n+    std::vector<uint256> parents_hashes;\n+\n+    // Used to make parent and standalone txs uniques\n+    unsigned txuid = 0;\n+\n+    // Mine 20 blocks where both low and higher fee txs are broadcast but only\n+    // higher fees are mined.\n+    while (blocknum < 20) {\n+        for (unsigned i = 0; i < 10; i++) {\n+            tx.vin[0].prevout.n = ++txuid;\n+            mpool.addUnchecked(entry.Fee(fee_childless).Time(GetTime()).Height(blocknum).FromTx(tx));\n+            block.push_back(mpool.get(tx.GetHash()));\n+\n+            for (unsigned j = 0; j < 2; j++) {\n+                tx.vin[0].prevout.n = ++txuid;\n+                mpool.addUnchecked(entry.Fee(fee_parents).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                parents_hashes.push_back(tx.GetHash());\n+            }\n+        }\n+        mpool.removeForBlock(block, ++blocknum);\n+        block.clear();\n+    }\n+    BOOST_CHECK(fee_est.estimateFee(10).GetFeePerK() == feerate_childless.GetFeePerK());\n+\n+    // Now continue mining higher fee transactions, but get the low fee tx to be included\n+    // thanks to CPFP.\n+    // Our estimate should increase toward the package feerate value.\n+    while (blocknum < 60) {\n+        for (unsigned i = 0; i < 50; i++) {\n+            tx.vin[0].prevout.SetNull();\n+            tx.vin[0].prevout.n = ++txuid;\n+            mpool.addUnchecked(entry.Fee(fee_childless).Time(GetTime()).Height(blocknum).FromTx(tx));\n+            block.push_back(mpool.get(tx.GetHash()));\n+\n+            for (unsigned j = 0; j < 2; j++) {\n+                // Bump the parents' fees until there is no more.\n+                uint256 parent_txid;\n+                if (parents_hashes.size() > 0) {\n+                    parent_txid = parents_hashes.back();\n+                    parents_hashes.pop_back();\n+                } else {\n+                    tx.vin[0].prevout.SetNull();\n+                    tx.vin[0].prevout.n = ++txuid;\n+                    mpool.addUnchecked(entry.Fee(fee_parents).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                    block.push_back(mpool.get(tx.GetHash()));\n+                    parent_txid = tx.GetHash();\n+                }\n+\n+                tx.vin[0].prevout.n = 0;\n+                tx.vin[0].prevout.hash = parent_txid;\n+                CTxMemPool::txiter parent_iter = *mpool.GetIter(parent_txid);\n+                CTxMemPool::setEntries parents_set{parent_iter};\n+                // false as it has an unconfirmed parents, see `validForFeeEstimation`\n+                // in validation.\n+                mpool.addUnchecked(entry.Fee(fee_childs).Time(GetTime()).Height(blocknum).FromTx(tx), false);\n+                block.push_back(mpool.get(tx.GetHash()));\n+                block.push_back(mpool.get(parent_txid));\n+            }\n+        }\n+        mpool.removeForBlock(block, ++blocknum);\n+        block.clear();\n+    }\n+    BOOST_CHECK(fee_est.estimateFee(10).GetFeePerK() == feerate_package.GetFeePerK());\n+\n+    // Now do the same but with 4 parents spent by a low fee child (E) itself spent\n+    // by a high-fee child (F) paying for the entire package:\n+    //    F\n+    //    E\n+    // A B C D\n+    // Our estimates should be decreased down to the low feerate of parent transactions\n+    // as we'll account for a large feerate for AEF and 3 low feerate B, C, D that get\n+    // immediately confirmed.\n+    while (blocknum < 70) {\n+        for (unsigned i = 0; i < 10; i++) {\n+            tx.vin[0].prevout.SetNull();\n+            tx.vin[0].prevout.n = ++txuid;\n+            mpool.addUnchecked(entry.Fee(fee_childless).Time(GetTime()).Height(blocknum).FromTx(tx));\n+            block.push_back(mpool.get(tx.GetHash()));\n+\n+            for (unsigned j = 0; j < 4; j++) {\n+                tx.vin[0].prevout.n = ++txuid;\n+                uint256 parent_txid = tx.GetHash();\n+                mpool.addUnchecked(entry.Fee(fee_parents).Time(GetTime()).Height(blocknum).FromTx(tx));\n+                block.push_back(mpool.get(parent_txid));\n+\n+                child_tx.vin[j].prevout.n = j;\n+                child_tx.vin[j].prevout.hash = parent_txid;\n+            }\n+            uint256 first_child_txid{child_tx.GetHash()};\n+            mpool.addUnchecked(entry.Fee(fee_parents).Time(GetTime()).Height(blocknum).FromTx(child_tx), false);\n+            block.push_back(mpool.get(first_child_txid));\n+\n+            tx.vin[0].prevout.n = 0;\n+            tx.vin[0].prevout.hash = first_child_txid;\n+            mpool.addUnchecked(entry.Fee(fee_childs * 5).Time(GetTime()).Height(blocknum).FromTx(tx), false);\n+            block.push_back(mpool.get(tx.GetHash()));\n+        }\n+        mpool.removeForBlock(block, ++blocknum);\n+        block.clear();\n+    }\n+    BOOST_CHECK(fee_est.estimateFee(10).GetFeePerK() == feerate_parents.GetFeePerK());\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  },
  {
    "sha": "bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
    "node_id": "C_kwDOABII59oAKGJjNmIwZjlkYjMwYjA4NDZjMTI5MDZhMzhlOWEwODhmNmM0MmEwNGI",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T10:44:41Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:42Z"
      },
      "message": "qa: split run_test into smaller parts\n\nLet's not have run_test get into a giant function as we add more tests\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "9240ca3c3546a179e1dc0ac0f2b7926f671b89b0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9240ca3c3546a179e1dc0ac0f2b7926f671b89b0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CIACgkQ4T/BRc0/\nQwT9IAwAmSXZ6HU7cOM8YFlTXJa5zalIApD2WdRNtmz9+Vr/jAnpSmtlKZ/ovB8y\nH1XUmQQvZpn6iRifBFYpdn/5Iqv6fibYyqkd3H5es/fxxO04vs321rLLsC3cdOWJ\nKf5lD+AGxgrl+4ombbXp4q41dA3cJkV7wNPRJZQGkSQ0sb4TwzXzAta88W5xEF9O\nwJjICJrklz+Z9BJ1eaH90yuv2TOnHom3PlrkAV4TlLR3FBvECg5yeB+e9yQGCfhD\naVVMsylPtnZKrObzdH7cyicp2MjfMh7xrTbS7VHbCOmuVYRz5KnDQ15XAqSaTZe/\n4FeA73mFnqEet+k0y9loypkIc0K0CLw+/8gW0X9XxkSUC3nZLX30GVkR+kZj4C9u\nIHSimz1EFTcMHV56peDMm23AduHUHPXxkVLkKjihIWZj348Y+IxGMjS4xE1cOQig\n4Qpeksdxoo3j1hAYiqNl7QHuvp/2pUx1FWXUjSLERbTeVQQci9LzxMxNO3cwEgDO\n4WaFhOyk\n=ii1E\n-----END PGP SIGNATURE-----",
        "payload": "tree 9240ca3c3546a179e1dc0ac0f2b7926f671b89b0\nparent cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e\nauthor Antoine Poinsot <darosior@protonmail.com> 1632221081 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555042 +0200\n\nqa: split run_test into smaller parts\n\nLet's not have run_test get into a giant function as we add more tests\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6b0f9db30b0846c12906a38e9a088f6c42a04b/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb48d4569edb53d0a8ccbce70a4510f1c1d5e75e"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 35,
      "deletions": 26
    },
    "files": [
      {
        "sha": "1ef2e1a413cc20ab84a7ee4d5c4240f0a8ef9ef8",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 35,
        "deletions": 26,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc6b0f9db30b0846c12906a38e9a088f6c42a04b/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc6b0f9db30b0846c12906a38e9a088f6c42a04b/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
        "patch": "@@ -208,48 +208,36 @@ def transact_and_mine(self, numblocks, mining_node):\n                     newmem.append(utx)\n             self.memutxo = newmem\n \n-    def run_test(self):\n-        self.log.info(\"This test is time consuming, please be patient\")\n-        self.log.info(\"Splitting inputs so we can generate tx's\")\n-\n-        # Start node0\n-        self.start_node(0)\n+    def initial_split(self, node):\n+        \"\"\"Split two coinbase UTxOs into many small coins\"\"\"\n         self.txouts = []\n         self.txouts2 = []\n         # Split a coinbase into two transaction puzzle outputs\n-        split_inputs(self.nodes[0], self.nodes[0].listunspent(0), self.txouts, True)\n+        split_inputs(node, node.listunspent(0), self.txouts, True)\n \n         # Mine\n-        while len(self.nodes[0].getrawmempool()) > 0:\n-            self.generate(self.nodes[0], 1)\n+        while len(node.getrawmempool()) > 0:\n+            self.generate(node, 1)\n \n         # Repeatedly split those 2 outputs, doubling twice for each rep\n         # Use txouts to monitor the available utxo, since these won't be tracked in wallet\n         reps = 0\n         while reps < 5:\n             # Double txouts to txouts2\n             while len(self.txouts) > 0:\n-                split_inputs(self.nodes[0], self.txouts, self.txouts2)\n-            while len(self.nodes[0].getrawmempool()) > 0:\n-                self.generate(self.nodes[0], 1)\n+                split_inputs(node, self.txouts, self.txouts2)\n+            while len(node.getrawmempool()) > 0:\n+                self.generate(node, 1)\n             # Double txouts2 to txouts\n             while len(self.txouts2) > 0:\n-                split_inputs(self.nodes[0], self.txouts2, self.txouts)\n-            while len(self.nodes[0].getrawmempool()) > 0:\n-                self.generate(self.nodes[0], 1)\n+                split_inputs(node, self.txouts2, self.txouts)\n+            while len(node.getrawmempool()) > 0:\n+                self.generate(node, 1)\n             reps += 1\n-        self.log.info(\"Finished splitting\")\n-\n-        # Now we can connect the other nodes, didn't want to connect them earlier\n-        # so the estimates would not be affected by the splitting transactions\n-        self.start_node(1)\n-        self.start_node(2)\n-        self.connect_nodes(1, 0)\n-        self.connect_nodes(0, 2)\n-        self.connect_nodes(2, 1)\n-\n-        self.sync_all()\n \n+    def sanity_check_estimates_range(self):\n+        \"\"\"Populate estimation buckets, assert estimates are in a sane range and\n+        are strictly increasing as the target decreases.\"\"\"\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts  # Start with the set of confirmed txouts after splitting\n@@ -275,6 +263,27 @@ def run_test(self):\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n+    def run_test(self):\n+        self.log.info(\"This test is time consuming, please be patient\")\n+        self.log.info(\"Splitting inputs so we can generate tx's\")\n+\n+        # Split two coinbases into many small utxos\n+        self.start_node(0)\n+        self.initial_split(self.nodes[0])\n+        self.log.info(\"Finished splitting\")\n+\n+        # Now we can connect the other nodes, didn't want to connect them earlier\n+        # so the estimates would not be affected by the splitting transactions\n+        self.start_node(1)\n+        self.start_node(2)\n+        self.connect_nodes(1, 0)\n+        self.connect_nodes(0, 2)\n+        self.connect_nodes(2, 1)\n+        self.sync_all()\n+\n+        self.log.info(\"Testing estimates with single transactions.\")\n+        self.sanity_check_estimates_range()\n+\n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])\n         assert_raises_rpc_error(-32603, \"Fee estimation disabled\","
      }
    ]
  },
  {
    "sha": "18399e5fdc95d1d604f35e135ac88c25e443452c",
    "node_id": "C_kwDOABII59oAKDE4Mzk5ZTVmZGM5NWQxZDYwNGYzNWUxMzVhYzg4YzI1ZTQ0MzQ1MmM",
    "commit": {
      "author": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-21T13:12:42Z"
      },
      "committer": {
        "name": "Antoine Poinsot",
        "email": "darosior@protonmail.com",
        "date": "2021-09-25T07:30:42Z"
      },
      "message": "qa: test fee estimation handling of CPFP\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>",
      "tree": {
        "sha": "150c33391a26e571cc77f43ad70c9ebc6a0c54b3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/150c33391a26e571cc77f43ad70c9ebc6a0c54b3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/18399e5fdc95d1d604f35e135ac88c25e443452c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEWQtykmla/6W2csuy4T/BRc0/QwQFAmFO0CMACgkQ4T/BRc0/\nQwSWbQv+OYu3smbYkj5q7ubecpZqK2t3erMCDlWuYYR0SyfIfoKJebOUzt1PrZSL\nlFl6FfEBJf2pPMhpEblgyNHXrp88vK32/+QP5xiPlpbXGBWIfidBmEwPuCEIAjKk\nh0K383KikXUJpl5Ki0rqR1l3swF5t+5zr/Bh4qQ6OWaT+D1WN4PsWOBY6uqq69k0\nrCCTxndPcw2tezmjEHy4iDZUwu8VciodInZB6qKyt17vl0vbchf9qijfFKl0Hpwb\n45PPl2WvJvYA4VgKJGWwPs540YhcBCebZF8cCrUjbQdBElLb/ukyYCTYJDxhdBbF\ngNLNt6sV0+uAciMBgxiHNpkdEdvHGq2UwoXFmeJ9hW440mnWID9OxMw0QhQxSWl3\no6BMj7cgKiHDC6dnDEFjUZZgLQbzWZN9PtTTD1HGTMFUU6VomVmWr9KTqRt2VhRg\nqoFECRC2lHeSWquUsfuYzzXusGmfrgVaeVUbemRlji7TKhuduEN67esGJPCJsq76\nEIp4W2PG\n=nMp+\n-----END PGP SIGNATURE-----",
        "payload": "tree 150c33391a26e571cc77f43ad70c9ebc6a0c54b3\nparent bc6b0f9db30b0846c12906a38e9a088f6c42a04b\nauthor Antoine Poinsot <darosior@protonmail.com> 1632229962 +0200\ncommitter Antoine Poinsot <darosior@protonmail.com> 1632555042 +0200\n\nqa: test fee estimation handling of CPFP\n\nSigned-off-by: Antoine Poinsot <darosior@protonmail.com>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18399e5fdc95d1d604f35e135ac88c25e443452c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/18399e5fdc95d1d604f35e135ac88c25e443452c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/18399e5fdc95d1d604f35e135ac88c25e443452c/comments",
    "author": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "darosior",
      "id": 22457751,
      "node_id": "MDQ6VXNlcjIyNDU3NzUx",
      "avatar_url": "https://avatars.githubusercontent.com/u/22457751?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/darosior",
      "html_url": "https://github.com/darosior",
      "followers_url": "https://api.github.com/users/darosior/followers",
      "following_url": "https://api.github.com/users/darosior/following{/other_user}",
      "gists_url": "https://api.github.com/users/darosior/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/darosior/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/darosior/subscriptions",
      "organizations_url": "https://api.github.com/users/darosior/orgs",
      "repos_url": "https://api.github.com/users/darosior/repos",
      "events_url": "https://api.github.com/users/darosior/events{/privacy}",
      "received_events_url": "https://api.github.com/users/darosior/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc6b0f9db30b0846c12906a38e9a088f6c42a04b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc6b0f9db30b0846c12906a38e9a088f6c42a04b"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 59,
      "deletions": 0
    },
    "files": [
      {
        "sha": "05c1388447a7cc1465e4b6284cd26fc06a8be318",
        "filename": "test/functional/feature_fee_estimation.py",
        "status": "modified",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/18399e5fdc95d1d604f35e135ac88c25e443452c/test/functional/feature_fee_estimation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/18399e5fdc95d1d604f35e135ac88c25e443452c/test/functional/feature_fee_estimation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_fee_estimation.py?ref=18399e5fdc95d1d604f35e135ac88c25e443452c",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test fee estimation code.\"\"\"\n from decimal import Decimal\n+import os\n import random\n \n from test_framework.messages import (\n@@ -151,6 +152,22 @@ def check_estimates(node, fees_seen):\n     check_raw_estimates(node, fees_seen)\n     check_smart_estimates(node, fees_seen)\n \n+\n+def send_tx(node, utxo, feerate):\n+    \"\"\"Broadcast a 1in-1out transaction with a specific input and feerate (sat/vb).\"\"\"\n+    overhead, op, scriptsig, nseq, value, spk = 10, 36, 5, 4, 8, 24\n+    tx_size = overhead + op + scriptsig + nseq + value + spk\n+    fee = tx_size * feerate\n+\n+    tx = CTransaction()\n+    tx.vin = [CTxIn(COutPoint(int(utxo[\"txid\"], 16), utxo[\"vout\"]), SCRIPT_SIG[utxo[\"vout\"]])]\n+    tx.vout = [CTxOut(int(utxo[\"amount\"] * COIN) - fee, P2SH_1)]\n+    txid = node.sendrawtransaction(tx.serialize().hex())\n+\n+    new_utxo = {\"amount\": Decimal(tx.vout[-1].nValue) / COIN, \"txid\": txid, \"vout\": 0}\n+    return new_utxo\n+\n+\n class EstimateFeeTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 3\n@@ -263,6 +280,37 @@ def sanity_check_estimates_range(self):\n         self.log.info(\"Final estimates after emptying mempools\")\n         check_estimates(self.nodes[1], self.fees_per_kb)\n \n+    def sanity_check_cpfp_estimates(self, utxos):\n+        \"\"\"Broadcast and mine 5 batches of low fee transactions, simulating that\n+        90% of them need a high fee-paying child to get mined. Make sure the\n+        estimation reflects that miners considered the entire package feerate to\n+        decide to include a pair of transactions.\n+        \"\"\"\n+        # In sat/vb\n+        low_feerate = 1\n+        high_feerate = 10\n+\n+        assert len(utxos) >= 500\n+        for _ in range(5):\n+            # Broadcast 90 low fee transactions that need a fee-paying child\n+            for _ in range(90):\n+                utxo = send_tx(self.nodes[0], utxos.pop(0), low_feerate)\n+                send_tx(self.nodes[0], utxo, high_feerate)\n+            # Broadcast 10 low fee transaction which don't need one\n+            for _ in range(10):\n+                send_tx(self.nodes[0], utxos.pop(0), low_feerate)\n+            # Mine the transactions on another node\n+            self.sync_mempools(wait=.1)\n+            while len(self.nodes[1].getrawmempool()) > 0:\n+                self.generate(self.nodes[1], 1)\n+            self.sync_blocks(wait=.1)\n+\n+        # Only 10% of the transactions were really confirmed with a low feerate,\n+        # we must not return it.\n+        low_feerate_kvb = Decimal(low_feerate) / COIN * 10**3\n+        est_feerate = self.nodes[0].estimatesmartfee(2)[\"feerate\"]\n+        assert est_feerate > low_feerate_kvb\n+\n     def run_test(self):\n         self.log.info(\"This test is time consuming, please be patient\")\n         self.log.info(\"Splitting inputs so we can generate tx's\")\n@@ -284,6 +332,17 @@ def run_test(self):\n         self.log.info(\"Testing estimates with single transactions.\")\n         self.sanity_check_estimates_range()\n \n+        self.log.info(\"Restarting node with fresh estimation\")\n+        self.stop_node(0)\n+        fee_dat = os.path.join(self.nodes[0].datadir, self.chain, \"fee_estimates.dat\")\n+        os.remove(fee_dat)\n+        self.start_node(0)\n+        self.connect_nodes(0, 1)\n+        self.connect_nodes(0, 2)\n+\n+        self.log.info(\"Testing estimates with CPFP.\")\n+        self.sanity_check_cpfp_estimates(self.confutxo + self.memutxo)\n+\n         self.log.info(\"Testing that fee estimation is disabled in blocksonly.\")\n         self.restart_node(0, [\"-blocksonly\"])\n         assert_raises_rpc_error(-32603, \"Fee estimation disabled\","
      }
    ]
  }
]