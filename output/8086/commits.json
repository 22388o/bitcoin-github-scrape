[
  {
    "sha": "053930ffc41ba33fe7ce26bde7097951fe0b8462",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNTM5MzBmZmM0MWJhMzNmZTdjZTI2YmRlNzA5Nzk1MWZlMGI4NDYy",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2016-05-23T07:21:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T14:20:40Z"
      },
      "message": "Avoid recalculating vchKeyedNetGroup in eviction logic.\n\nLazy calculate vchKeyedNetGroup in CNode::GetKeyedNetGroup.",
      "tree": {
        "sha": "dd1af5cb63bb465d0a639ee880d28a60271bb73b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dd1af5cb63bb465d0a639ee880d28a60271bb73b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/053930ffc41ba33fe7ce26bde7097951fe0b8462",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053930ffc41ba33fe7ce26bde7097951fe0b8462",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/053930ffc41ba33fe7ce26bde7097951fe0b8462",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053930ffc41ba33fe7ce26bde7097951fe0b8462/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "22e0b35676230961aeb848a4f5c6b007cb8a43c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/22e0b35676230961aeb848a4f5c6b007cb8a43c9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/22e0b35676230961aeb848a4f5c6b007cb8a43c9"
      }
    ],
    "stats": {
      "total": 63,
      "additions": 29,
      "deletions": 34
    },
    "files": [
      {
        "sha": "eb62ee8a06e5333bfb267cffda196dc5c0dd4aec",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 34,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053930ffc41ba33fe7ce26bde7097951fe0b8462/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053930ffc41ba33fe7ce26bde7097951fe0b8462/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=053930ffc41ba33fe7ce26bde7097951fe0b8462",
        "patch": "@@ -14,6 +14,7 @@\n #include \"clientversion.h\"\n #include \"consensus/consensus.h\"\n #include \"crypto/common.h\"\n+#include \"crypto/sha256.h\"\n #include \"hash.h\"\n #include \"primitives/transaction.h\"\n #include \"scheduler.h\"\n@@ -838,6 +839,7 @@ struct NodeEvictionCandidate\n     int64_t nTimeConnected;\n     int64_t nMinPingUsecTime;\n     CAddress addr;\n+    std::vector<unsigned char> vchKeyedNetGroup;\n };\n \n static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n@@ -850,36 +852,8 @@ static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, cons\n     return a.nTimeConnected > b.nTimeConnected;\n }\n \n-class CompareNetGroupKeyed\n-{\n-    std::vector<unsigned char> vchSecretKey;\n-public:\n-    CompareNetGroupKeyed()\n-    {\n-        vchSecretKey.resize(32, 0);\n-        GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n-    }\n-\n-    bool operator()(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n-    {\n-        std::vector<unsigned char> vchGroupA, vchGroupB;\n-        CSHA256 hashA, hashB;\n-        std::vector<unsigned char> vchA(32), vchB(32);\n-\n-        vchGroupA = a.addr.GetGroup();\n-        vchGroupB = b.addr.GetGroup();\n-\n-        hashA.Write(begin_ptr(vchGroupA), vchGroupA.size());\n-        hashB.Write(begin_ptr(vchGroupB), vchGroupB.size());\n-\n-        hashA.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-        hashB.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-\n-        hashA.Finalize(begin_ptr(vchA));\n-        hashB.Finalize(begin_ptr(vchB));\n-\n-        return vchA < vchB;\n-    }\n+static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n+    return a.vchKeyedNetGroup < b.vchKeyedNetGroup;\n };\n \n /** Try to find a connection to evict when the node is full.\n@@ -902,7 +876,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr};\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr, node->vchKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -912,9 +886,8 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n     // Protect connections with certain characteristics\n \n     // Deterministically select 4 peers to protect by netgroup.\n-    // An attacker cannot predict which netgroups will be protected.\n-    static CompareNetGroupKeyed comparerNetGroupKeyed;\n-    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), comparerNetGroupKeyed);\n+    // An attacker cannot predict which netgroups will be protected\n+    std::sort(vEvictionCandidates.begin(), vEvictionCandidates.end(), CompareNetGroupKeyed);\n     vEvictionCandidates.erase(vEvictionCandidates.end() - std::min(4, static_cast<int>(vEvictionCandidates.size())), vEvictionCandidates.end());\n \n     if (vEvictionCandidates.empty()) return false;\n@@ -2392,6 +2365,8 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n \n+    CalculateKeyedNetGroup();\n+\n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;"
      },
      {
        "sha": "019a3f7ee3e206ac0e17c87278fc9eb7a0c9920b",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/053930ffc41ba33fe7ce26bde7097951fe0b8462/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/053930ffc41ba33fe7ce26bde7097951fe0b8462/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=053930ffc41ba33fe7ce26bde7097951fe0b8462",
        "patch": "@@ -9,6 +9,8 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n+#include \"crypto/common.h\"\n+#include \"crypto/sha256.h\"\n #include \"limitedmap.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n@@ -362,6 +364,8 @@ class CNode\n     CBloomFilter* pfilter;\n     int nRefCount;\n     NodeId id;\n+\n+    std::vector<unsigned char> vchKeyedNetGroup;\n protected:\n \n     // Denial-of-service detection/prevention\n@@ -450,6 +454,22 @@ class CNode\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n+    void CalculateKeyedNetGroup() {\n+        static std::vector<unsigned char> vchSecretKey;\n+        if (vchSecretKey.empty()) {\n+            vchSecretKey.resize(32, 0);\n+            GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n+        }\n+\n+        std::vector<unsigned char> vchNetGroup(this->addr.GetGroup());\n+\n+        CSHA256 hash;\n+        hash.Write(begin_ptr(vchNetGroup), vchNetGroup.size());\n+        hash.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n+\n+        vchKeyedNetGroup.resize(32, 0);\n+        hash.Finalize(begin_ptr(vchKeyedNetGroup));\n+    }\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "9bf156bb9ee4915fa7e8f84589d65f6598563c97",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5YmYxNTZiYjllZTQ5MTVmYTdlOGY4NDU4OWQ2NWY2NTk4NTYzYzk3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-22T09:06:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T14:20:40Z"
      },
      "message": "Support SipHash with arbitrary byte writes",
      "tree": {
        "sha": "c9be046c2bcc72f0bb80d97e09543e633e68da04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c9be046c2bcc72f0bb80d97e09543e633e68da04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9bf156bb9ee4915fa7e8f84589d65f6598563c97",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf156bb9ee4915fa7e8f84589d65f6598563c97",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf156bb9ee4915fa7e8f84589d65f6598563c97",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf156bb9ee4915fa7e8f84589d65f6598563c97/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "053930ffc41ba33fe7ce26bde7097951fe0b8462",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/053930ffc41ba33fe7ce26bde7097951fe0b8462",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/053930ffc41ba33fe7ce26bde7097951fe0b8462"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 69,
      "deletions": 8
    },
    "files": [
      {
        "sha": "20a83342db4c9ffcf010396d0cd881a8027c0b2b",
        "filename": "src/hash.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 3,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/hash.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/hash.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.cpp?ref=9bf156bb9ee4915fa7e8f84589d65f6598563c97",
        "patch": "@@ -100,12 +100,15 @@ CSipHasher::CSipHasher(uint64_t k0, uint64_t k1)\n     v[2] = 0x6c7967656e657261ULL ^ k0;\n     v[3] = 0x7465646279746573ULL ^ k1;\n     count = 0;\n+    tmp = 0;\n }\n \n CSipHasher& CSipHasher::Write(uint64_t data)\n {\n     uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n \n+    assert(count % 8 == 0);\n+\n     v3 ^= data;\n     SIPROUND;\n     SIPROUND;\n@@ -116,18 +119,48 @@ CSipHasher& CSipHasher::Write(uint64_t data)\n     v[2] = v2;\n     v[3] = v3;\n \n-    count++;\n+    count += 8;\n+    return *this;\n+}\n+\n+CSipHasher& CSipHasher::Write(const unsigned char* data, size_t size)\n+{\n+    uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n+    uint64_t t = tmp;\n+    int c = count;\n+\n+    while (size--) {\n+        t |= ((uint64_t)(*(data++))) << (8 * (c % 8));\n+        c++;\n+        if ((c & 7) == 0) {\n+            v3 ^= t;\n+            SIPROUND;\n+            SIPROUND;\n+            v0 ^= t;\n+            t = 0;\n+        }\n+    }\n+\n+    v[0] = v0;\n+    v[1] = v1;\n+    v[2] = v2;\n+    v[3] = v3;\n+    count = c;\n+    tmp = t;\n+\n     return *this;\n }\n \n uint64_t CSipHasher::Finalize() const\n {\n     uint64_t v0 = v[0], v1 = v[1], v2 = v[2], v3 = v[3];\n \n-    v3 ^= ((uint64_t)count) << 59;\n+    uint64_t t = tmp | (((uint64_t)count) << 56);\n+\n+    v3 ^= t;\n     SIPROUND;\n     SIPROUND;\n-    v0 ^= ((uint64_t)count) << 59;\n+    v0 ^= t;\n     v2 ^= 0xFF;\n     SIPROUND;\n     SIPROUND;"
      },
      {
        "sha": "db4e130ae7fec8032d8e5638b30d8b89d60e4471",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 20,
        "deletions": 1,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=9bf156bb9ee4915fa7e8f84589d65f6598563c97",
        "patch": "@@ -171,19 +171,38 @@ unsigned int MurmurHash3(unsigned int nHashSeed, const std::vector<unsigned char\n \n void BIP32Hash(const ChainCode &chainCode, unsigned int nChild, unsigned char header, const unsigned char data[32], unsigned char output[64]);\n \n-/** SipHash-2-4, using a uint64_t-based (rather than byte-based) interface */\n+/** SipHash-2-4 */\n class CSipHasher\n {\n private:\n     uint64_t v[4];\n+    uint64_t tmp;\n     int count;\n \n public:\n+    /** Construct a SipHash calculator initialized with 128-bit key (k0, k1) */\n     CSipHasher(uint64_t k0, uint64_t k1);\n+    /** Hash a 64-bit integer worth of data\n+     *  It is treated as if this was the little-endian interpretation of 8 bytes.\n+     *  This function can only be used when a multiple of 8 bytes have been written so far.\n+     */\n     CSipHasher& Write(uint64_t data);\n+    /** Hash arbitrary bytes. */\n+    CSipHasher& Write(const unsigned char* data, size_t size);\n+    /** Compute the 64-bit SipHash-2-4 of the data written so far. The object remains untouched. */\n     uint64_t Finalize() const;\n };\n \n+/** Optimized SipHash-2-4 implementation for uint256.\n+ *\n+ *  It is identical to:\n+ *    SipHasher(k0, k1)\n+ *      .Write(val.GetUint64(0))\n+ *      .Write(val.GetUint64(1))\n+ *      .Write(val.GetUint64(2))\n+ *      .Write(val.GetUint64(3))\n+ *      .Finalize()\n+ */\n uint64_t SipHashUint256(uint64_t k0, uint64_t k1, const uint256& val);\n \n #endif // BITCOIN_HASH_H"
      },
      {
        "sha": "f62080c1d24f8ff895d1f46f5d5317b166485702",
        "filename": "src/test/hash_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 4,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/test/hash_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9bf156bb9ee4915fa7e8f84589d65f6598563c97/src/test/hash_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/hash_tests.cpp?ref=9bf156bb9ee4915fa7e8f84589d65f6598563c97",
        "patch": "@@ -51,13 +51,22 @@ BOOST_AUTO_TEST_CASE(siphash)\n {\n     CSipHasher hasher(0x0706050403020100ULL, 0x0F0E0D0C0B0A0908ULL);\n     BOOST_CHECK_EQUAL(hasher.Finalize(),  0x726fdb47dd0e0e31ull);\n-    hasher.Write(0x0706050403020100ULL);\n+    static const unsigned char t0[1] = {0};\n+    hasher.Write(t0, 1);\n+    BOOST_CHECK_EQUAL(hasher.Finalize(),  0x74f839c593dc67fdull);\n+    static const unsigned char t1[7] = {1,2,3,4,5,6,7};\n+    hasher.Write(t1, 7);\n     BOOST_CHECK_EQUAL(hasher.Finalize(),  0x93f5f5799a932462ull);\n     hasher.Write(0x0F0E0D0C0B0A0908ULL);\n     BOOST_CHECK_EQUAL(hasher.Finalize(),  0x3f2acc7f57c29bdbull);\n-    hasher.Write(0x1716151413121110ULL);\n-    BOOST_CHECK_EQUAL(hasher.Finalize(),  0xb8ad50c6f649af94ull);\n-    hasher.Write(0x1F1E1D1C1B1A1918ULL);\n+    static const unsigned char t2[2] = {16,17};\n+    hasher.Write(t2, 2);\n+    BOOST_CHECK_EQUAL(hasher.Finalize(),  0x4bc1b3f0968dd39cull);\n+    static const unsigned char t3[9] = {18,19,20,21,22,23,24,25,26};\n+    hasher.Write(t3, 9);\n+    BOOST_CHECK_EQUAL(hasher.Finalize(),  0x2f2e6163076bcfadull);\n+    static const unsigned char t4[5] = {27,28,29,30,31};\n+    hasher.Write(t4, 5);\n     BOOST_CHECK_EQUAL(hasher.Finalize(),  0x7127512f72f27cceull);\n     hasher.Write(0x2726252423222120ULL);\n     BOOST_CHECK_EQUAL(hasher.Finalize(),  0x0e3ea96b5304a7d0ull);"
      }
    ]
  },
  {
    "sha": "c31b24f745a84669f2af729052da7fd7ed2da868",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMzFiMjRmNzQ1YTg0NjY5ZjJhZjcyOTA1MmRhN2ZkN2VkMmRhODY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-05-25T13:38:32Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T14:20:40Z"
      },
      "message": "Use 64-bit SipHash of netgroups in eviction",
      "tree": {
        "sha": "d5f2ad6c4df5dbedbe4f3fc23619960f2035e099",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5f2ad6c4df5dbedbe4f3fc23619960f2035e099"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c31b24f745a84669f2af729052da7fd7ed2da868",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31b24f745a84669f2af729052da7fd7ed2da868",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c31b24f745a84669f2af729052da7fd7ed2da868",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31b24f745a84669f2af729052da7fd7ed2da868/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9bf156bb9ee4915fa7e8f84589d65f6598563c97",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9bf156bb9ee4915fa7e8f84589d65f6598563c97",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9bf156bb9ee4915fa7e8f84589d65f6598563c97"
      }
    ],
    "stats": {
      "total": 61,
      "additions": 29,
      "deletions": 32
    },
    "files": [
      {
        "sha": "0bc501601dd9774b68744e55d77b1bea03b7fd22",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 13,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31b24f745a84669f2af729052da7fd7ed2da868/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31b24f745a84669f2af729052da7fd7ed2da868/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c31b24f745a84669f2af729052da7fd7ed2da868",
        "patch": "@@ -839,7 +839,7 @@ struct NodeEvictionCandidate\n     int64_t nTimeConnected;\n     int64_t nMinPingUsecTime;\n     CAddress addr;\n-    std::vector<unsigned char> vchKeyedNetGroup;\n+    uint64_t nKeyedNetGroup;\n };\n \n static bool ReverseCompareNodeMinPingTime(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b)\n@@ -853,7 +853,7 @@ static bool ReverseCompareNodeTimeConnected(const NodeEvictionCandidate &a, cons\n }\n \n static bool CompareNetGroupKeyed(const NodeEvictionCandidate &a, const NodeEvictionCandidate &b) {\n-    return a.vchKeyedNetGroup < b.vchKeyedNetGroup;\n+    return a.nKeyedNetGroup < b.nKeyedNetGroup;\n };\n \n /** Try to find a connection to evict when the node is full.\n@@ -876,7 +876,7 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n                 continue;\n             if (node->fDisconnect)\n                 continue;\n-            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr, node->vchKeyedNetGroup};\n+            NodeEvictionCandidate candidate = {node->id, node->nTimeConnected, node->nMinPingUsecTime, node->addr, node->nKeyedNetGroup};\n             vEvictionCandidates.push_back(candidate);\n         }\n     }\n@@ -908,24 +908,24 @@ static bool AttemptToEvictConnection(bool fPreferNewConnection) {\n \n     // Identify the network group with the most connections and youngest member.\n     // (vEvictionCandidates is already sorted by reverse connect time)\n-    std::vector<unsigned char> naMostConnections;\n+    uint64_t naMostConnections;\n     unsigned int nMostConnections = 0;\n     int64_t nMostConnectionsTime = 0;\n-    std::map<std::vector<unsigned char>, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n+    std::map<uint64_t, std::vector<NodeEvictionCandidate> > mapAddrCounts;\n     BOOST_FOREACH(const NodeEvictionCandidate &node, vEvictionCandidates) {\n-        mapAddrCounts[node.addr.GetGroup()].push_back(node);\n-        int64_t grouptime = mapAddrCounts[node.addr.GetGroup()][0].nTimeConnected;\n-        size_t groupsize = mapAddrCounts[node.addr.GetGroup()].size();\n+        mapAddrCounts[node.nKeyedNetGroup].push_back(node);\n+        int64_t grouptime = mapAddrCounts[node.nKeyedNetGroup][0].nTimeConnected;\n+        size_t groupsize = mapAddrCounts[node.nKeyedNetGroup].size();\n \n         if (groupsize > nMostConnections || (groupsize == nMostConnections && grouptime > nMostConnectionsTime)) {\n             nMostConnections = groupsize;\n             nMostConnectionsTime = grouptime;\n-            naMostConnections = node.addr.GetGroup();\n+            naMostConnections = node.nKeyedNetGroup;\n         }\n     }\n \n     // Reduce to the network group with the most connections\n-    vEvictionCandidates = mapAddrCounts[naMostConnections];\n+    vEvictionCandidates = std::move(mapAddrCounts[naMostConnections]);\n \n     // Do not disconnect peers if there is only one unprotected connection from their network group.\n     // This step excessively favors netgroup diversity, and should be removed once more protective criteria are established.\n@@ -2318,6 +2318,8 @@ unsigned int SendBufferSize() { return 1000*GetArg(\"-maxsendbuffer\", DEFAULT_MAX\n \n CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNameIn, bool fInboundIn) :\n     ssSend(SER_NETWORK, INIT_PROTO_VERSION),\n+    addr(addrIn),\n+    nKeyedNetGroup(CalculateKeyedNetGroup(addrIn)),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001)\n {\n@@ -2330,7 +2332,6 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     nRecvBytes = 0;\n     nTimeConnected = GetTime();\n     nTimeOffset = 0;\n-    addr = addrIn;\n     addrName = addrNameIn == \"\" ? addr.ToStringIPPort() : addrNameIn;\n     nVersion = 0;\n     strSubVer = \"\";\n@@ -2365,8 +2366,6 @@ CNode::CNode(SOCKET hSocketIn, const CAddress& addrIn, const std::string& addrNa\n     lastSentFeeFilter = 0;\n     nextSendTimeFeeFilter = 0;\n \n-    CalculateKeyedNetGroup();\n-\n     BOOST_FOREACH(const std::string &msg, getAllNetMessageTypes())\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n@@ -2599,3 +2598,17 @@ bool CBanDB::Read(banmap_t& banSet)\n int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n     return nNow + (int64_t)(log1p(GetRand(1ULL << 48) * -0.0000000000000035527136788 /* -1/2^48 */) * average_interval_seconds * -1000000.0 + 0.5);\n }\n+\n+/* static */ uint64_t CNode::CalculateKeyedNetGroup(const CAddress& ad)\n+{\n+    static uint64_t k0 = 0, k1 = 0;\n+    while (k0 == 0 && k1 == 0) {\n+        // Make sure this only runs on the first invocation.\n+        GetRandBytes((unsigned char*)&k0, sizeof(k0));\n+        GetRandBytes((unsigned char*)&k1, sizeof(k1));\n+    }\n+\n+    std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n+\n+    return CSipHasher(k0, k1).Write(&vchNetGroup[0], vchNetGroup.size()).Finalize();\n+}"
      },
      {
        "sha": "8df3cb421fea4b4b067f2175aed4af2ef4042850",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 19,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c31b24f745a84669f2af729052da7fd7ed2da868/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c31b24f745a84669f2af729052da7fd7ed2da868/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c31b24f745a84669f2af729052da7fd7ed2da868",
        "patch": "@@ -9,8 +9,6 @@\n #include \"amount.h\"\n #include \"bloom.h\"\n #include \"compat.h\"\n-#include \"crypto/common.h\"\n-#include \"crypto/sha256.h\"\n #include \"limitedmap.h\"\n #include \"netbase.h\"\n #include \"protocol.h\"\n@@ -337,7 +335,7 @@ class CNode\n     int64_t nLastRecv;\n     int64_t nTimeConnected;\n     int64_t nTimeOffset;\n-    CAddress addr;\n+    const CAddress addr;\n     std::string addrName;\n     CService addrLocal;\n     int nVersion;\n@@ -365,7 +363,7 @@ class CNode\n     int nRefCount;\n     NodeId id;\n \n-    std::vector<unsigned char> vchKeyedNetGroup;\n+    const uint64_t nKeyedNetGroup;\n protected:\n \n     // Denial-of-service detection/prevention\n@@ -454,22 +452,8 @@ class CNode\n     CNode(const CNode&);\n     void operator=(const CNode&);\n \n-    void CalculateKeyedNetGroup() {\n-        static std::vector<unsigned char> vchSecretKey;\n-        if (vchSecretKey.empty()) {\n-            vchSecretKey.resize(32, 0);\n-            GetRandBytes(vchSecretKey.data(), vchSecretKey.size());\n-        }\n-\n-        std::vector<unsigned char> vchNetGroup(this->addr.GetGroup());\n+    static uint64_t CalculateKeyedNetGroup(const CAddress& ad);\n \n-        CSHA256 hash;\n-        hash.Write(begin_ptr(vchNetGroup), vchNetGroup.size());\n-        hash.Write(begin_ptr(vchSecretKey), vchSecretKey.size());\n-\n-        vchKeyedNetGroup.resize(32, 0);\n-        hash.Finalize(begin_ptr(vchKeyedNetGroup));\n-    }\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "888483098e60f2a944f1d246bbfec4d14a2975f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODg0ODMwOThlNjBmMmE5NDRmMWQyNDZiYmZlYzRkMTRhMjk3NWY4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T14:29:03Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-06-07T14:29:03Z"
      },
      "message": "Use C++11 thread-safe static initializers",
      "tree": {
        "sha": "3c1ebad509c274f0bdedbc9193aef45aefb1e104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c1ebad509c274f0bdedbc9193aef45aefb1e104"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/888483098e60f2a944f1d246bbfec4d14a2975f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/888483098e60f2a944f1d246bbfec4d14a2975f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/888483098e60f2a944f1d246bbfec4d14a2975f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/888483098e60f2a944f1d246bbfec4d14a2975f8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c31b24f745a84669f2af729052da7fd7ed2da868",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c31b24f745a84669f2af729052da7fd7ed2da868",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c31b24f745a84669f2af729052da7fd7ed2da868"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 6,
      "deletions": 17
    },
    "files": [
      {
        "sha": "39db7dedfbbe1b1db28fb74b85c2499be9e10cca",
        "filename": "src/coins.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/888483098e60f2a944f1d246bbfec4d14a2975f8/src/coins.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/888483098e60f2a944f1d246bbfec4d14a2975f8/src/coins.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.cpp?ref=888483098e60f2a944f1d246bbfec4d14a2975f8",
        "patch": "@@ -56,11 +56,7 @@ void CCoinsViewBacked::SetBackend(CCoinsView &viewIn) { base = &viewIn; }\n bool CCoinsViewBacked::BatchWrite(CCoinsMap &mapCoins, const uint256 &hashBlock) { return base->BatchWrite(mapCoins, hashBlock); }\n CCoinsViewCursor *CCoinsViewBacked::Cursor() const { return base->Cursor(); }\n \n-SaltedTxidHasher::SaltedTxidHasher()\n-{\n-    GetRandBytes((unsigned char*)&k0, sizeof(k0));\n-    GetRandBytes((unsigned char*)&k1, sizeof(k1));\n-}\n+SaltedTxidHasher::SaltedTxidHasher() : k0(GetRand(std::numeric_limits<uint64_t>::max())), k1(GetRand(std::numeric_limits<uint64_t>::max())) {}\n \n CCoinsViewCache::CCoinsViewCache(CCoinsView *baseIn) : CCoinsViewBacked(baseIn), hasModifier(false), cachedCoinsUsage(0) { }\n "
      },
      {
        "sha": "033651a435c04c839bf3b4e3558471fa46ae7a3d",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/888483098e60f2a944f1d246bbfec4d14a2975f8/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/888483098e60f2a944f1d246bbfec4d14a2975f8/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=888483098e60f2a944f1d246bbfec4d14a2975f8",
        "patch": "@@ -269,7 +269,7 @@ class SaltedTxidHasher\n {\n private:\n     /** Salt */\n-    uint64_t k0, k1;\n+    const uint64_t k0, k1;\n \n public:\n     SaltedTxidHasher();"
      },
      {
        "sha": "da140cffacfc30010d1b447236597831eea9609d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/888483098e60f2a944f1d246bbfec4d14a2975f8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/888483098e60f2a944f1d246bbfec4d14a2975f8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=888483098e60f2a944f1d246bbfec4d14a2975f8",
        "patch": "@@ -4784,11 +4784,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv,\n                     LOCK(cs_vNodes);\n                     // Use deterministic randomness to send to the same nodes for 24 hours\n                     // at a time so the addrKnowns of the chosen nodes prevent repeats\n-                    static uint64_t salt0 = 0, salt1 = 0;\n-                    while (salt0 == 0 && salt1 == 0) {\n-                        GetRandBytes((unsigned char*)&salt0, sizeof(salt0));\n-                        GetRandBytes((unsigned char*)&salt1, sizeof(salt1));\n-                    }\n+                    static const uint64_t salt0 = GetRand(std::numeric_limits<uint64_t>::max());\n+                    static const uint64_t salt1 = GetRand(std::numeric_limits<uint64_t>::max());\n                     uint64_t hashAddr = addr.GetHash();\n                     multimap<uint64_t, CNode*> mapMix;\n                     const CSipHasher hasher = CSipHasher(salt0, salt1).Write(hashAddr << 32).Write((GetTime() + hashAddr) / (24*60*60));"
      },
      {
        "sha": "e29053cf548c2e14a6f33d6396796783dfdbec10",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/888483098e60f2a944f1d246bbfec4d14a2975f8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/888483098e60f2a944f1d246bbfec4d14a2975f8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=888483098e60f2a944f1d246bbfec4d14a2975f8",
        "patch": "@@ -2601,12 +2601,8 @@ int64_t PoissonNextSend(int64_t nNow, int average_interval_seconds) {\n \n /* static */ uint64_t CNode::CalculateKeyedNetGroup(const CAddress& ad)\n {\n-    static uint64_t k0 = 0, k1 = 0;\n-    while (k0 == 0 && k1 == 0) {\n-        // Make sure this only runs on the first invocation.\n-        GetRandBytes((unsigned char*)&k0, sizeof(k0));\n-        GetRandBytes((unsigned char*)&k1, sizeof(k1));\n-    }\n+    static const uint64_t k0 = GetRand(std::numeric_limits<uint64_t>::max());\n+    static const uint64_t k1 = GetRand(std::numeric_limits<uint64_t>::max());\n \n     std::vector<unsigned char> vchNetGroup(ad.GetGroup());\n "
      }
    ]
  }
]