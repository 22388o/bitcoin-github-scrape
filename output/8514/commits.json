[
  {
    "sha": "e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplM2QyZjg1ZmJkZTk4ODBlMTJkMmNiM2QyNDdiOWYxYWNhZjYxMmY2",
    "commit": {
      "author": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-15T17:02:27Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-15T17:02:49Z"
      },
      "message": "Enforce LOW_S rules on all transactions with WITNESS BIP9 parameters",
      "tree": {
        "sha": "e63afa642a29827f45bac305c89b495e077a389f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e63afa642a29827f45bac305c89b495e077a389f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/comments",
    "author": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/38590729631c0984abf5c1bb26a0f2d21ccd4916",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/38590729631c0984abf5c1bb26a0f2d21ccd4916"
      }
    ],
    "stats": {
      "total": 179,
      "additions": 178,
      "deletions": 1
    },
    "files": [
      {
        "sha": "05e8c4e995994b405af67baad7e5be8c72c5ea63",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
        "patch": "@@ -143,6 +143,7 @@\n     'importprunedfunds.py',\n     'signmessages.py',\n     'p2p-compactblocks.py',\n+    'biplows-p2p.py',\n ]\n if ENABLE_ZMQ:\n     testScripts.append('zmq_test.py')"
      },
      {
        "sha": "edaac13b3d2ea7172011e7c94029523f58ac5432",
        "filename": "qa/rpc-tests/biplows-p2p.py",
        "status": "added",
        "additions": 175,
        "deletions": 0,
        "changes": 175,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/qa/rpc-tests/biplows-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/qa/rpc-tests/biplows-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/biplows-p2p.py?ref=e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
        "patch": "@@ -0,0 +1,175 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import ComparisonTestFramework\n+from test_framework.util import *\n+from test_framework.mininode import CTransaction, NetworkThread, ToHex\n+from test_framework.blocktools import create_coinbase, create_block, add_witness_commitment\n+from test_framework.comptool import TestManager\n+from test_framework.script import CScript\n+from io import BytesIO\n+import time\n+\n+LOW_S_ERROR = \"64: non-mandatory-script-verify-flag (Non-canonical signature: S value is unnecessarily high)\"\n+\n+def highSifyTx(tx):\n+    scriptSig = CScript(tx.vin[0].scriptSig)\n+    newscript = []\n+    for i in scriptSig:\n+        if (len(newscript) == 0):\n+            newscript.append(highSifySig(i))\n+        else:\n+            newscript.append(i)\n+    tx.vin[0].scriptSig = CScript(newscript)\n+\n+def highSifySig(sig):\n+    '''\n+    Transform lowS signature to highS\n+    A canonical signature consists of:\n+    <30> <total len> <02> <len R> <R> <02> <len S> <S> <hashtype>\n+    '''\n+    assert(len(sig) >= 9)\n+    rsize = sig[3]\n+    ssize = sig[5 + rsize]\n+    assert_equal(rsize+ssize+7, len(sig))\n+    lows = int.from_bytes(sig[6+rsize:-1], byteorder='big')\n+    assert(lows <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0)\n+    highs = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - lows\n+    highsbytes = (highs).to_bytes(33, byteorder='big')\n+    tsizebyte = (sig[1] + 33 - ssize).to_bytes(1, byteorder='big')\n+    newsig = b'\\x30' + tsizebyte + sig[2:4+rsize] + b'\\x02\\x21' + highsbytes + sig[-1:]\n+    return newsig\n+\n+\n+'''\n+This test is meant to exercise BIP_LOW_S.\n+Connect to a single node.\n+Mine 3 (version 0x20000002) blocks (save the coinbases for later).\n+Generate 426 more version 0x20000002 blocks.\n+[Policy/Consensus] Check that LOW_S transaction is accepted in the 430th block.\n+[Policy] Check that HIGH_S transaction is rejected.\n+[Policy] Check that LOW_S transaction is accepted.\n+[Consensus] Check that the new LOW_S rules are not enforced on the 431st block.\n+[Policy/Consensus] Check that the new LOW_S rules are enforced on the 432nd block.\n+'''\n+\n+class BIPLOWSTest(ComparisonTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.num_nodes = 1\n+\n+    def setup_network(self):\n+        # Must set the blockversion for this test\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n+                                 extra_args=[['-debug', '-whitelist=127.0.0.1', '-blockversion=536870914', '-walletprematurewitness']])\n+\n+    def run_test(self):\n+        self.nodeaddress = self.nodes[0].getnewaddress()\n+        self.nodewitaddress = self.nodes[0].addwitnessaddress(self.nodeaddress)\n+\n+        test = TestManager(self, self.options.tmpdir)\n+        test.add_all_connections(self.nodes)\n+        NetworkThread().start() # Start up network handling in another thread\n+        self.coinbase_blocks = self.nodes[0].generate(3) # Block 3\n+        ctxid1 = self.nodes[0].getblock(self.coinbase_blocks[0])['tx'][0]\n+        ctxid2 = self.nodes[0].getblock(self.coinbase_blocks[1])['tx'][0]\n+        ctxid3 = self.nodes[0].getblock(self.coinbase_blocks[2])['tx'][0]\n+        self.nodes[0].generate(426) # Block 429\n+        self.last_block_time = int(time.time()) + 430\n+\n+        print (\"Test 1: LOW_S base transaction should be accepted to mempool and mined before activation [430]\")\n+        spendtx = self.create_transaction(self.nodes[0], ctxid1, self.nodewitaddress, 1.0)\n+        txid1 = self.nodes[0].sendrawtransaction(ToHex(spendtx), True)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.nodes[0].gettransaction(txid1)['blockhash'])\n+        self.tip = int(\"0x\" + self.nodes[0].getbestblockhash(), 0)\n+\n+        print (\"Test 2: HIGH_S base transaction should not be accepted to mempool before activation\")\n+        spendtx = self.create_transaction(self.nodes[0], ctxid2, self.nodewitaddress, 1.0)\n+        highSifyTx(spendtx)\n+        spendtx.rehash()\n+        try:\n+            self.nodes[0].sendrawtransaction(ToHex(spendtx), True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], LOW_S_ERROR)\n+        else:\n+            assert(False)\n+\n+\n+        print (\"Test 3: HIGH_S base transaction should be accepted in a block before activation [431]\")\n+        block = create_block(self.tip, create_coinbase(431), self.last_block_time)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n+        self.tip = block.sha256\n+        lastblockhash = block.hash\n+\n+\n+        print (\"Test 4: Block with HIGH_S base transaction should be rejected after activation\")\n+        spendtx = self.create_transaction(self.nodes[0], ctxid3, self.nodewitaddress, 1.0)\n+        lowspendtxhex = ToHex(spendtx)\n+        highSifyTx(spendtx)\n+        spendtx.rehash()\n+        block = create_block(self.tip, create_coinbase(432), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendtx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        block.rehash()\n+        block.solve()\n+        self.nodes[0].submitblock(ToHex(block))\n+        assert_equal(self.nodes[0].getbestblockhash(), lastblockhash)\n+\n+\n+        print (\"Test 5: HIGH_S witness transaction should not be accepted to mempool\")\n+        spendwittx = self.create_transaction(self.nodes[0], txid1, self.nodewitaddress, 0.9)\n+        lowspendwittxhex = bytes_to_hex_str(spendwittx.serialize_with_witness())\n+        spendwittx.wit.vtxinwit[0].scriptWitness.stack[0] = highSifySig(spendwittx.wit.vtxinwit[0].scriptWitness.stack[0])\n+        spendwittx.rehash()\n+        highspendwittxhex = bytes_to_hex_str(spendwittx.serialize_with_witness())\n+        try:\n+            self.nodes[0].sendrawtransaction(highspendwittxhex, True)\n+        except JSONRPCException as exp:\n+            assert_equal(exp.error[\"message\"], LOW_S_ERROR)\n+        else:\n+            assert(False)\n+\n+\n+        print (\"Test 6: Block with HIGH_S witness transaction should be rejected after activation\")\n+        block = create_block(self.tip, create_coinbase(432), self.last_block_time + 1)\n+        block.nVersion = 4\n+        block.vtx.append(spendwittx)\n+        block.hashMerkleRoot = block.calc_merkle_root()\n+        add_witness_commitment(block)\n+        block.rehash()\n+        block.solve()\n+        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        assert_equal(self.nodes[0].getbestblockhash(), lastblockhash)\n+\n+\n+        print (\"Test 7: LOW_S base/witness transactions should be accepted to mempool and mined after activation [432]\")\n+        txid2 = self.nodes[0].sendrawtransaction(lowspendtxhex, True)\n+        txid3 = self.nodes[0].sendrawtransaction(lowspendwittxhex, True)\n+        self.nodes[0].generate(1)\n+        assert_equal(self.nodes[0].getbestblockhash(), self.nodes[0].gettransaction(txid2)['blockhash'])\n+        assert_equal(self.nodes[0].getbestblockhash(), self.nodes[0].gettransaction(txid3)['blockhash'])\n+\n+\n+    def create_transaction(self, node, txid, to_address, amount):\n+        inputs = [{ \"txid\" : txid, \"vout\" : 0}]\n+        outputs = { to_address : amount }\n+        rawtx = node.createrawtransaction(inputs, outputs)\n+        signresult = node.signrawtransaction(rawtx)\n+        tx = CTransaction()\n+        f = BytesIO(hex_str_to_bytes(signresult['hex']))\n+        tx.deserialize(f)\n+        return tx\n+\n+if __name__ == '__main__':\n+    BIPLOWSTest().main()\n\\ No newline at end of file"
      },
      {
        "sha": "11fa81781d7c98643f8505c199145969582dde69",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
        "patch": "@@ -2384,9 +2384,10 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n         nLockTimeFlags |= LOCKTIME_VERIFY_SEQUENCE;\n     }\n \n-    // Start enforcing WITNESS rules using versionbits logic.\n+    // Start enforcing WITNESS and LOW_S rules using versionbits logic.\n     if (IsWitnessEnabled(pindex->pprev, chainparams.GetConsensus())) {\n         flags |= SCRIPT_VERIFY_WITNESS;\n+        flags |= SCRIPT_VERIFY_LOW_S;\n     }\n \n     int64_t nTime2 = GetTimeMicros(); nTimeForks += nTime2 - nTime1;"
      }
    ]
  },
  {
    "sha": "7ae9df7df2f603eee44db7ad8d0328d7e0e6670c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YWU5ZGY3ZGYyZjYwM2VlZTQ0ZGI3YWQ4ZDAzMjhkN2UwZTY2NzBj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-08-15T12:21:42Z"
      },
      "committer": {
        "name": "Johnson Lau",
        "email": "jl2012@xbt.hk",
        "date": "2016-08-15T17:02:49Z"
      },
      "message": "Make test framework produce lowS signatures",
      "tree": {
        "sha": "4e93371156816423c8e0dda4fc37c05a31cba548",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4e93371156816423c8e0dda4fc37c05a31cba548"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jl2012",
      "id": 8403418,
      "node_id": "MDQ6VXNlcjg0MDM0MTg=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8403418?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jl2012",
      "html_url": "https://github.com/jl2012",
      "followers_url": "https://api.github.com/users/jl2012/followers",
      "following_url": "https://api.github.com/users/jl2012/following{/other_user}",
      "gists_url": "https://api.github.com/users/jl2012/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jl2012/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jl2012/subscriptions",
      "organizations_url": "https://api.github.com/users/jl2012/orgs",
      "repos_url": "https://api.github.com/users/jl2012/repos",
      "events_url": "https://api.github.com/users/jl2012/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jl2012/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e3d2f85fbde9880e12d2cb3d247b9f1acaf612f6"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dac104431766949caa1b476401e97423f36d19bf",
        "filename": "qa/rpc-tests/test_framework/key.py",
        "status": "modified",
        "additions": 10,
        "deletions": 2,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c/qa/rpc-tests/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7ae9df7df2f603eee44db7ad8d0328d7e0e6670c/qa/rpc-tests/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/test_framework/key.py?ref=7ae9df7df2f603eee44db7ad8d0328d7e0e6670c",
        "patch": "@@ -157,8 +157,16 @@ def sign(self, hash):\n         sig_size0 = ctypes.c_uint32()\n         sig_size0.value = ssl.ECDSA_size(self.k)\n         mb_sig = ctypes.create_string_buffer(sig_size0.value)\n-        result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n-        assert 1 == result\n+        ok = False\n+        while not ok:\n+          result = ssl.ECDSA_sign(0, hash, len(hash), mb_sig, ctypes.byref(sig_size0), self.k)\n+          assert 1 == result\n+          assert mb_sig.raw[0] == 0x30\n+          assert mb_sig.raw[1] == sig_size0.value - 2\n+          assert mb_sig.raw[2] == 2\n+          assert mb_sig.raw[4 + mb_sig.raw[3]] == 2\n+          # Hacky test for lowS DER signature\n+          ok = (mb_sig.raw[5 + mb_sig.raw[3]] < 33) and (mb_sig.raw[6 + mb_sig.raw[3]] <= 0xFE)\n         return mb_sig.raw[:sig_size0.value]\n \n     def verify(self, hash, sig):"
      }
    ]
  }
]