[
  {
    "sha": "aa95947ded93e7e45f222f255baf186433cc11fc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphYTk1OTQ3ZGVkOTNlN2U0NWYyMjJmMjU1YmFmMTg2NDMzY2MxMWZj",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-20T19:58:56Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-06-28T00:12:06Z"
      },
      "message": "Use the override specifier (C++11) where we expect to be overriding the virtual function of a base class",
      "tree": {
        "sha": "5c57ac83b17f7d0ac6095a8e36c359e5f3121ae6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c57ac83b17f7d0ac6095a8e36c359e5f3121ae6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aa95947ded93e7e45f222f255baf186433cc11fc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa95947ded93e7e45f222f255baf186433cc11fc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aa95947ded93e7e45f222f255baf186433cc11fc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aa95947ded93e7e45f222f255baf186433cc11fc/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acb11535cb8499fd47fdde7f52457f8945b58856",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acb11535cb8499fd47fdde7f52457f8945b58856",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acb11535cb8499fd47fdde7f52457f8945b58856"
      }
    ],
    "stats": {
      "total": 136,
      "additions": 68,
      "deletions": 68
    },
    "files": [
      {
        "sha": "8c2e0da32fd166f9af9a787e360d7697b81379f4",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -47,11 +47,11 @@ class HTTPRPCTimerInterface : public RPCTimerInterface\n     HTTPRPCTimerInterface(struct event_base* _base) : base(_base)\n     {\n     }\n-    const char* Name()\n+    const char* Name() override\n     {\n         return \"HTTP\";\n     }\n-    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis)\n+    RPCTimerBase* NewTimer(std::function<void(void)>& func, int64_t millis) override\n     {\n         return new HTTPRPCTimer(base, func, millis);\n     }"
      },
      {
        "sha": "1c53d8d49d2a16da4b8a5940aae9225032d75911",
        "filename": "src/httpserver.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/httpserver.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/httpserver.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httpserver.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -46,7 +46,7 @@ class HTTPWorkItem : public HTTPClosure\n         req(std::move(_req)), path(_path), func(_func)\n     {\n     }\n-    void operator()()\n+    void operator()() override\n     {\n         func(req.get(), path);\n     }"
      },
      {
        "sha": "965ae0c79ad865193afe0fb7041ca2c0ffe5f751",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -60,9 +60,9 @@ class CBasicKeyStore : public CKeyStore\n     WatchOnlySet setWatchOnly;\n \n public:\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         bool result;\n         {\n@@ -71,7 +71,7 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return result;\n     }\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         setAddress.clear();\n         {\n@@ -84,7 +84,7 @@ class CBasicKeyStore : public CKeyStore\n             }\n         }\n     }\n-    bool GetKey(const CKeyID &address, CKey &keyOut) const\n+    bool GetKey(const CKeyID &address, CKey &keyOut) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -97,14 +97,14 @@ class CBasicKeyStore : public CKeyStore\n         }\n         return false;\n     }\n-    virtual bool AddCScript(const CScript& redeemScript);\n-    virtual bool HaveCScript(const CScriptID &hash) const;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const;\n+    virtual bool AddCScript(const CScript& redeemScript) override;\n+    virtual bool HaveCScript(const CScriptID &hash) const override;\n+    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const override;\n \n-    virtual bool AddWatchOnly(const CScript &dest);\n-    virtual bool RemoveWatchOnly(const CScript &dest);\n-    virtual bool HaveWatchOnly(const CScript &dest) const;\n-    virtual bool HaveWatchOnly() const;\n+    virtual bool AddWatchOnly(const CScript &dest) override;\n+    virtual bool RemoveWatchOnly(const CScript &dest) override;\n+    virtual bool HaveWatchOnly(const CScript &dest) const override;\n+    virtual bool HaveWatchOnly() const override;\n };\n \n typedef std::vector<unsigned char, secure_allocator<unsigned char> > CKeyingMaterial;"
      },
      {
        "sha": "ab1dc4e681b4c628898ff3a6885b9154b9e62df7",
        "filename": "src/script/interpreter.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/interpreter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/interpreter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -160,9 +160,9 @@ class TransactionSignatureChecker : public BaseSignatureChecker\n public:\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(NULL) {}\n     TransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, const PrecomputedTransactionData& txdataIn) : txTo(txToIn), nIn(nInIn), amount(amountIn), txdata(&txdataIn) {}\n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const;\n-    bool CheckLockTime(const CScriptNum& nLockTime) const;\n-    bool CheckSequence(const CScriptNum& nSequence) const;\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override;\n+    bool CheckLockTime(const CScriptNum& nLockTime) const override;\n+    bool CheckSequence(const CScriptNum& nSequence) const override;\n };\n \n class MutableTransactionSignatureChecker : public TransactionSignatureChecker"
      },
      {
        "sha": "5832b264b36fdb344f3dd63d7645f21c6e0e4841",
        "filename": "src/script/sigcache.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sigcache.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sigcache.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sigcache.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -48,7 +48,7 @@ class CachingTransactionSignatureChecker : public TransactionSignatureChecker\n public:\n     CachingTransactionSignatureChecker(const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, bool storeIn, PrecomputedTransactionData& txdataIn) : TransactionSignatureChecker(txToIn, nInIn, amountIn, txdataIn), store(storeIn) {}\n \n-    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const;\n+    bool VerifySignature(const std::vector<unsigned char>& vchSig, const CPubKey& vchPubKey, const uint256& sighash) const override;\n };\n \n void InitSignatureCache();"
      },
      {
        "sha": "ec93c5451b0cc3be2430a9c2795983f5ddb255bc",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -393,7 +393,7 @@ class DummySignatureChecker : public BaseSignatureChecker\n public:\n     DummySignatureChecker() {}\n \n-    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const\n+    bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const override\n     {\n         return true;\n     }"
      },
      {
        "sha": "bd458628922253fe2e85a87019102b678819b628",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -40,8 +40,8 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n \n public:\n     TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n-    const BaseSignatureChecker& Checker() const { return checker; }\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override { return checker; }\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n@@ -55,8 +55,8 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n     DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n-    const BaseSignatureChecker& Checker() const;\n-    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const;\n+    const BaseSignatureChecker& Checker() const override;\n+    bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n \n struct SignatureData {"
      },
      {
        "sha": "2df6b84a5997bfd1dbdaca1555e07899944f14a8",
        "filename": "src/support/lockedpool.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/support/lockedpool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/support/lockedpool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/support/lockedpool.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -148,9 +148,9 @@ class Win32LockedPageAllocator: public LockedPageAllocator\n {\n public:\n     Win32LockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };\n@@ -200,9 +200,9 @@ class PosixLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     PosixLockedPageAllocator();\n-    void* AllocateLocked(size_t len, bool *lockingSuccess);\n-    void FreeLocked(void* addr, size_t len);\n-    size_t GetLimit();\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override;\n+    void FreeLocked(void* addr, size_t len) override;\n+    size_t GetLimit() override;\n private:\n     size_t page_size;\n };"
      },
      {
        "sha": "bc6aef2c1152fbb470ff8512f1f5130a2fa29144",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -27,7 +27,7 @@ class CAddrManTest : public CAddrMan\n         insecure_rand = FastRandomContext(true);\n     }\n \n-    int RandomInt(int nMax)\n+    int RandomInt(int nMax) override\n     {\n         state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n         return (unsigned int)(state % nMax);"
      },
      {
        "sha": "4a533b5bf2fb5cbb376ef6b0db8b648649c4aa9a",
        "filename": "src/test/allocator_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/allocator_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/allocator_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/allocator_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -131,7 +131,7 @@ class TestLockedPageAllocator: public LockedPageAllocator\n {\n public:\n     TestLockedPageAllocator(int count_in, int lockedcount_in): count(count_in), lockedcount(lockedcount_in) {}\n-    void* AllocateLocked(size_t len, bool *lockingSuccess)\n+    void* AllocateLocked(size_t len, bool *lockingSuccess) override\n     {\n         *lockingSuccess = false;\n         if (count > 0) {\n@@ -146,10 +146,10 @@ class TestLockedPageAllocator: public LockedPageAllocator\n         }\n         return 0;\n     }\n-    void FreeLocked(void* addr, size_t len)\n+    void FreeLocked(void* addr, size_t len) override\n     {\n     }\n-    size_t GetLimit()\n+    size_t GetLimit() override\n     {\n         return std::numeric_limits<size_t>::max();\n     }"
      },
      {
        "sha": "095d86834c0b3711512a8708b78d62275a78f4fe",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -29,7 +29,7 @@ class CAddrManSerializationMock : public CAddrMan\n class CAddrManUncorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         CAddrMan::Serialize(s);\n     }\n@@ -38,7 +38,7 @@ class CAddrManUncorrupted : public CAddrManSerializationMock\n class CAddrManCorrupted : public CAddrManSerializationMock\n {\n public:\n-    void Serialize(CDataStream& s) const\n+    void Serialize(CDataStream& s) const override\n     {\n         // Produces corrupt output that claims addrman has 20 addrs when it only has one addr.\n         unsigned char nVersion = 1;"
      },
      {
        "sha": "722f6ae059ce4d8fc49fc8bc0e52a12a33b5c62a",
        "filename": "src/test/versionbits_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/versionbits_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/test/versionbits_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/versionbits_tests.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -22,11 +22,11 @@ class TestConditionChecker : public AbstractThresholdConditionChecker\n     mutable ThresholdConditionCache cache;\n \n public:\n-    int64_t BeginTime(const Consensus::Params& params) const { return TestTime(10000); }\n-    int64_t EndTime(const Consensus::Params& params) const { return TestTime(20000); }\n-    int Period(const Consensus::Params& params) const { return 1000; }\n-    int Threshold(const Consensus::Params& params) const { return 900; }\n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const { return (pindex->nVersion & 0x100); }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return TestTime(10000); }\n+    int64_t EndTime(const Consensus::Params& params) const override { return TestTime(20000); }\n+    int Period(const Consensus::Params& params) const override { return 1000; }\n+    int Threshold(const Consensus::Params& params) const override { return 900; }\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override { return (pindex->nVersion & 0x100); }\n \n     ThresholdState GetStateFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateFor(pindexPrev, paramsDummy, cache); }\n     int GetStateSinceHeightFor(const CBlockIndex* pindexPrev) const { return AbstractThresholdConditionChecker::GetStateSinceHeightFor(pindexPrev, paramsDummy, cache); }"
      },
      {
        "sha": "b14a0af147e490c00c150a58c55ad0be6406fc67",
        "filename": "src/txdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/txdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/txdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -88,12 +88,12 @@ class CCoinsViewDBCursor: public CCoinsViewCursor\n public:\n     ~CCoinsViewDBCursor() {}\n \n-    bool GetKey(COutPoint &key) const;\n-    bool GetValue(Coin &coin) const;\n-    unsigned int GetValueSize() const;\n+    bool GetKey(COutPoint &key) const override;\n+    bool GetValue(Coin &coin) const override;\n+    unsigned int GetValueSize() const override;\n \n-    bool Valid() const;\n-    void Next();\n+    bool Valid() const override;\n+    void Next() override;\n \n private:\n     CCoinsViewDBCursor(CDBIterator* pcursorIn, const uint256 &hashBlockIn):"
      },
      {
        "sha": "8d47b52ebec1162cb266a5e7527d0efbc9d88026",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -1462,12 +1462,12 @@ class WarningBitsConditionChecker : public AbstractThresholdConditionChecker\n public:\n     WarningBitsConditionChecker(int bitIn) : bit(bitIn) {}\n \n-    int64_t BeginTime(const Consensus::Params& params) const { return 0; }\n-    int64_t EndTime(const Consensus::Params& params) const { return std::numeric_limits<int64_t>::max(); }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return 0; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return std::numeric_limits<int64_t>::max(); }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return ((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) &&\n                ((pindex->nVersion >> bit) & 1) != 0 &&"
      },
      {
        "sha": "8047e17aa826dab5f97848c2488a6ad273d17b3d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -174,12 +174,12 @@ class VersionBitsConditionChecker : public AbstractThresholdConditionChecker {\n     const Consensus::DeploymentPos id;\n \n protected:\n-    int64_t BeginTime(const Consensus::Params& params) const { return params.vDeployments[id].nStartTime; }\n-    int64_t EndTime(const Consensus::Params& params) const { return params.vDeployments[id].nTimeout; }\n-    int Period(const Consensus::Params& params) const { return params.nMinerConfirmationWindow; }\n-    int Threshold(const Consensus::Params& params) const { return params.nRuleChangeActivationThreshold; }\n+    int64_t BeginTime(const Consensus::Params& params) const override { return params.vDeployments[id].nStartTime; }\n+    int64_t EndTime(const Consensus::Params& params) const override { return params.vDeployments[id].nTimeout; }\n+    int Period(const Consensus::Params& params) const override { return params.nMinerConfirmationWindow; }\n+    int Threshold(const Consensus::Params& params) const override { return params.nRuleChangeActivationThreshold; }\n \n-    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const\n+    bool Condition(const CBlockIndex* pindex, const Consensus::Params& params) const override\n     {\n         return (((pindex->nVersion & VERSIONBITS_TOP_MASK) == VERSIONBITS_TOP_BITS) && (pindex->nVersion & Mask(params)) != 0);\n     }"
      },
      {
        "sha": "1dc44e424f631f4cd419443a0b338fc68b9f9f47",
        "filename": "src/wallet/crypter.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/crypter.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -157,8 +157,8 @@ class CCryptoKeyStore : public CBasicKeyStore\n     bool Lock();\n \n     virtual bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret);\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey);\n-    bool HaveKey(const CKeyID &address) const\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n+    bool HaveKey(const CKeyID &address) const override\n     {\n         {\n             LOCK(cs_KeyStore);\n@@ -168,9 +168,9 @@ class CCryptoKeyStore : public CBasicKeyStore\n         }\n         return false;\n     }\n-    bool GetKey(const CKeyID &address, CKey& keyOut) const;\n-    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const;\n-    void GetKeys(std::set<CKeyID> &setAddress) const\n+    bool GetKey(const CKeyID &address, CKey& keyOut) const override;\n+    bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const override;\n+    void GetKeys(std::set<CKeyID> &setAddress) const override\n     {\n         if (!IsCrypted())\n         {"
      },
      {
        "sha": "a3fd7408a0e38f01583a6df0bc52335cfb823c45",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -1153,7 +1153,7 @@ class CReserveKey : public CReserveScript\n     void ReturnKey();\n     bool GetReservedKey(CPubKey &pubkey, bool internal = false);\n     void KeepKey();\n-    void KeepScript() { KeepKey(); }\n+    void KeepScript() override { KeepKey(); }\n };\n \n "
      },
      {
        "sha": "1790fe56982a1a34c0521ce9c70bf910e0da765f",
        "filename": "src/zmq/zmqpublishnotifier.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aa95947ded93e7e45f222f255baf186433cc11fc/src/zmq/zmqpublishnotifier.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aa95947ded93e7e45f222f255baf186433cc11fc/src/zmq/zmqpublishnotifier.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqpublishnotifier.h?ref=aa95947ded93e7e45f222f255baf186433cc11fc",
        "patch": "@@ -24,32 +24,32 @@ class CZMQAbstractPublishNotifier : public CZMQAbstractNotifier\n     */\n     bool SendMessage(const char *command, const void* data, size_t size);\n \n-    bool Initialize(void *pcontext);\n-    void Shutdown();\n+    bool Initialize(void *pcontext) override;\n+    void Shutdown() override;\n };\n \n class CZMQPublishHashBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishHashTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n class CZMQPublishRawBlockNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyBlock(const CBlockIndex *pindex);\n+    bool NotifyBlock(const CBlockIndex *pindex) override;\n };\n \n class CZMQPublishRawTransactionNotifier : public CZMQAbstractPublishNotifier\n {\n public:\n-    bool NotifyTransaction(const CTransaction &transaction);\n+    bool NotifyTransaction(const CTransaction &transaction) override;\n };\n \n #endif // BITCOIN_ZMQ_ZMQPUBLISHNOTIFIER_H"
      }
    ]
  }
]