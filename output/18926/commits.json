[
  {
    "sha": "357f02bf2942f2944a04a1ceaa687f89d5da7d28",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNTdmMDJiZjI5NDJmMjk0NGEwNGExY2VhYTY4N2Y4OWQ1ZGE3ZDI4",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-05-12T04:50:54Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-05-28T13:21:43Z"
      },
      "message": "Create a local class inherited from BasicTestingSetup with a localized args manager\nand put it into the getarg_tests namespace",
      "tree": {
        "sha": "ec2321001bab89af8e62697f2bdfbe88c91e332e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec2321001bab89af8e62697f2bdfbe88c91e332e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/357f02bf2942f2944a04a1ceaa687f89d5da7d28",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357f02bf2942f2944a04a1ceaa687f89d5da7d28",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/357f02bf2942f2944a04a1ceaa687f89d5da7d28",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357f02bf2942f2944a04a1ceaa687f89d5da7d28/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/88d8b4e182bfc75e8496f7046af7aab93307b9d0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/88d8b4e182bfc75e8496f7046af7aab93307b9d0"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 12,
      "deletions": 3
    },
    "files": [
      {
        "sha": "e902bf908289d89622fa29967db3af7c62343fea",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 3,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/357f02bf2942f2944a04a1ceaa687f89d5da7d28/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/357f02bf2942f2944a04a1ceaa687f89d5da7d28/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=357f02bf2942f2944a04a1ceaa687f89d5da7d28",
        "patch": "@@ -13,9 +13,18 @@\n #include <boost/algorithm/string.hpp>\n #include <boost/test/unit_test.hpp>\n \n-BOOST_FIXTURE_TEST_SUITE(getarg_tests, BasicTestingSetup)\n+namespace getarg_tests{\n+    class LocalTestingSetup : BasicTestingSetup {\n+        protected:\n+        void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args);\n+        void ResetArgs(const std::string& strArg);\n+        ArgsManager m_args;\n+    };\n+}\n+\n+BOOST_FIXTURE_TEST_SUITE(getarg_tests, LocalTestingSetup)\n \n-static void ResetArgs(const std::string& strArg)\n+void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n {\n     std::vector<std::string> vecArg;\n     if (strArg.size())\n@@ -33,7 +42,7 @@ static void ResetArgs(const std::string& strArg)\n     BOOST_CHECK(gArgs.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n-static void SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n+void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n     gArgs.ClearArgs();\n     for (const auto& arg : args) {"
      }
    ]
  },
  {
    "sha": "f871f15c9d760b56a6a3b78b3941d3983d60810c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODcxZjE1YzlkNzYwYjU2YTZhM2I3OGIzOTQxZDM5ODNkNjA4MTBj",
    "commit": {
      "author": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-05-28T13:22:19Z"
      },
      "committer": {
        "name": "glowang",
        "email": "wanggloria21@gmail.com",
        "date": "2020-05-28T13:22:19Z"
      },
      "message": "scripted-diff: replace gArgs with argsman\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's/\\<gArgs\\>/m_args/g' src/test/getarg_tests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "593a8fd7da47c665b03d4e37a4d69e2539f7aefc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/593a8fd7da47c665b03d4e37a4d69e2539f7aefc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f871f15c9d760b56a6a3b78b3941d3983d60810c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f871f15c9d760b56a6a3b78b3941d3983d60810c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f871f15c9d760b56a6a3b78b3941d3983d60810c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f871f15c9d760b56a6a3b78b3941d3983d60810c/comments",
    "author": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "glowang",
      "id": 38899812,
      "node_id": "MDQ6VXNlcjM4ODk5ODEy",
      "avatar_url": "https://avatars.githubusercontent.com/u/38899812?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/glowang",
      "html_url": "https://github.com/glowang",
      "followers_url": "https://api.github.com/users/glowang/followers",
      "following_url": "https://api.github.com/users/glowang/following{/other_user}",
      "gists_url": "https://api.github.com/users/glowang/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/glowang/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/glowang/subscriptions",
      "organizations_url": "https://api.github.com/users/glowang/orgs",
      "repos_url": "https://api.github.com/users/glowang/repos",
      "events_url": "https://api.github.com/users/glowang/events{/privacy}",
      "received_events_url": "https://api.github.com/users/glowang/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "357f02bf2942f2944a04a1ceaa687f89d5da7d28",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/357f02bf2942f2944a04a1ceaa687f89d5da7d28",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/357f02bf2942f2944a04a1ceaa687f89d5da7d28"
      }
    ],
    "stats": {
      "total": 118,
      "additions": 59,
      "deletions": 59
    },
    "files": [
      {
        "sha": "45c9b90ee997d1bb7c8e35a4728e96b59c8f55cc",
        "filename": "src/test/getarg_tests.cpp",
        "status": "modified",
        "additions": 59,
        "deletions": 59,
        "changes": 118,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f871f15c9d760b56a6a3b78b3941d3983d60810c/src/test/getarg_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f871f15c9d760b56a6a3b78b3941d3983d60810c/src/test/getarg_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/getarg_tests.cpp?ref=f871f15c9d760b56a6a3b78b3941d3983d60810c",
        "patch": "@@ -39,14 +39,14 @@ void LocalTestingSetup :: ResetArgs(const std::string& strArg)\n         vecChar.push_back(s.c_str());\n \n     std::string error;\n-    BOOST_CHECK(gArgs.ParseParameters(vecChar.size(), vecChar.data(), error));\n+    BOOST_CHECK(m_args.ParseParameters(vecChar.size(), vecChar.data(), error));\n }\n \n void LocalTestingSetup :: SetupArgs(const std::vector<std::pair<std::string, unsigned int>>& args)\n {\n-    gArgs.ClearArgs();\n+    m_args.ClearArgs();\n     for (const auto& arg : args) {\n-        gArgs.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n+        m_args.AddArg(arg.first, \"\", arg.second, OptionsCategory::OPTIONS);\n     }\n }\n \n@@ -55,52 +55,52 @@ BOOST_AUTO_TEST_CASE(boolarg)\n     const auto foo = std::make_pair(\"-foo\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo});\n     ResetArgs(\"-foo\");\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n \n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-fo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-fo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-fo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-fo\", true));\n \n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-fooo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-fooo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-fooo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-fooo\", true));\n \n     ResetArgs(\"-foo=0\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1\");\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: auto-map -nosomething to !-something:\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo -nofoo\");  // -nofoo should win\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=1 -nofoo=1\");  // -nofoo should win\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"-foo=0 -nofoo=0\");  // -nofoo=0 should win\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n \n     // New 0.6 feature: treat -- same as -:\n     ResetArgs(\"--foo=1\");\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n \n     ResetArgs(\"--nofoo=1\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n \n }\n \n@@ -110,24 +110,24 @@ BOOST_AUTO_TEST_CASE(stringarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"\");\n \n     ResetArgs(\"-foo=11\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"11\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"11\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"11\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"11\");\n \n     ResetArgs(\"-foo=eleven\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"eleven\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"eleven\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"eleven\"), \"eleven\");\n \n }\n \n@@ -137,20 +137,20 @@ BOOST_AUTO_TEST_CASE(intarg)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 11);\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 0);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 11), 11);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 0), 0);\n \n     ResetArgs(\"-foo -bar\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 11), 0);\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 0);\n \n     ResetArgs(\"-foo=11 -bar=12\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 0), 11);\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 12);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 0), 11);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 12);\n \n     ResetArgs(\"-foo=NaN -bar=NotANumber\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", 1), 0);\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 11), 0);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", 1), 0);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 11), 0);\n }\n \n BOOST_AUTO_TEST_CASE(doubledash)\n@@ -159,11 +159,11 @@ BOOST_AUTO_TEST_CASE(doubledash)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"--foo\");\n-    BOOST_CHECK_EQUAL(gArgs.GetBoolArg(\"-foo\", false), true);\n+    BOOST_CHECK_EQUAL(m_args.GetBoolArg(\"-foo\", false), true);\n \n     ResetArgs(\"--foo=verbose --bar=1\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-foo\", \"\"), \"verbose\");\n-    BOOST_CHECK_EQUAL(gArgs.GetArg(\"-bar\", 0), 1);\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-foo\", \"\"), \"verbose\");\n+    BOOST_CHECK_EQUAL(m_args.GetArg(\"-bar\", 0), 1);\n }\n \n BOOST_AUTO_TEST_CASE(boolargno)\n@@ -172,24 +172,24 @@ BOOST_AUTO_TEST_CASE(boolargno)\n     const auto bar = std::make_pair(\"-bar\", ArgsManager::ALLOW_ANY);\n     SetupArgs({foo, bar});\n     ResetArgs(\"-nofoo\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=1\");\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo=0\");\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-foo --nofoo\"); // --nofoo should win\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(!gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(!m_args.GetBoolArg(\"-foo\", false));\n \n     ResetArgs(\"-nofoo -foo\"); // foo always wins:\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", true));\n-    BOOST_CHECK(gArgs.GetBoolArg(\"-foo\", false));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", true));\n+    BOOST_CHECK(m_args.GetBoolArg(\"-foo\", false));\n }\n \n BOOST_AUTO_TEST_CASE(logargs)\n@@ -209,7 +209,7 @@ BOOST_AUTO_TEST_CASE(logargs)\n         });\n \n     // Log the arguments\n-    gArgs.LogArgs();\n+    m_args.LogArgs();\n \n     LogInstance().DeleteCallback(print_connection);\n     // Check that what should appear does, and what shouldn't doesn't."
      }
    ]
  }
]