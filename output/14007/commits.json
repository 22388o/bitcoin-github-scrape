[
  {
    "sha": "2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMTQ4YzM2YjZlYzAyZmNmMTBkNmQzYjc2ZTUwYjY5MGVlOTNiZGZk",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-19T18:54:54Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-17T01:56:49Z"
      },
      "message": "tests: Make it possible to run functional tests on Windows",
      "tree": {
        "sha": "c3ec637a5285aefb72d08de0e153b7335b72c4e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c3ec637a5285aefb72d08de0e153b7335b72c4e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3832c25f176753b7ddb724c26ee7543fb1e1819e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3832c25f176753b7ddb724c26ee7543fb1e1819e"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 59,
      "deletions": 26
    },
    "files": [
      {
        "sha": "3230d5cb6b6a9aca26d78fda7c013202a3b62e9d",
        "filename": "test/functional/combine_logs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/combine_logs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/combine_logs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/combine_logs.py?ref=2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "patch": "@@ -25,10 +25,6 @@ def main():\n     parser.add_argument('--html', dest='html', action='store_true', help='outputs the combined log as html. Requires jinja2. pip install jinja2')\n     args, unknown_args = parser.parse_known_args()\n \n-    if args.color and os.name != 'posix':\n-        print(\"Color output requires posix terminal colors.\")\n-        sys.exit(1)\n-\n     if args.html and args.color:\n         print(\"Only one out of --color or --html should be specified\")\n         sys.exit(1)"
      },
      {
        "sha": "8218abf455c1c910b51b64176c8a05a415e6413a",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "patch": "@@ -827,7 +827,7 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize(): iostream error')\n+        self.sync_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize():')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just"
      },
      {
        "sha": "1140fe9b3e05372c6fdc0382307fa6ca6e993cf4",
        "filename": "test/functional/test_framework/authproxy.py",
        "status": "modified",
        "additions": 17,
        "deletions": 9,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/test_framework/authproxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/test_framework/authproxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/authproxy.py?ref=2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "patch": "@@ -38,6 +38,7 @@\n import http.client\n import json\n import logging\n+import os\n import socket\n import time\n import urllib.parse\n@@ -71,19 +72,12 @@ def __init__(self, service_url, service_name=None, timeout=HTTP_TIMEOUT, connect\n         self._service_name = service_name\n         self.ensure_ascii = ensure_ascii  # can be toggled on the fly by tests\n         self.__url = urllib.parse.urlparse(service_url)\n-        port = 80 if self.__url.port is None else self.__url.port\n         user = None if self.__url.username is None else self.__url.username.encode('utf8')\n         passwd = None if self.__url.password is None else self.__url.password.encode('utf8')\n         authpair = user + b':' + passwd\n         self.__auth_header = b'Basic ' + base64.b64encode(authpair)\n-\n-        if connection:\n-            # Callables re-use the connection of the original proxy\n-            self.__conn = connection\n-        elif self.__url.scheme == 'https':\n-            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port, timeout=timeout)\n-        else:\n-            self.__conn = http.client.HTTPConnection(self.__url.hostname, port, timeout=timeout)\n+        self.timeout = timeout\n+        self._set_conn(connection)\n \n     def __getattr__(self, name):\n         if name.startswith('__') and name.endswith('__'):\n@@ -102,6 +96,10 @@ def _request(self, method, path, postdata):\n                    'User-Agent': USER_AGENT,\n                    'Authorization': self.__auth_header,\n                    'Content-type': 'application/json'}\n+        if os.name == 'nt':\n+            # Windows somehow does not like to re-use connections\n+            # TODO: Find out why the connection would disconnect occasionally and make it reusable on Windows\n+            self._set_conn()\n         try:\n             self.__conn.request(method, path, postdata, headers)\n             return self._get_response()\n@@ -178,3 +176,13 @@ def _get_response(self):\n \n     def __truediv__(self, relative_uri):\n         return AuthServiceProxy(\"{}/{}\".format(self.__service_url, relative_uri), self._service_name, connection=self.__conn)\n+\n+    def _set_conn(self, connection=None):\n+        port = 80 if self.__url.port is None else self.__url.port\n+        if connection:\n+            self.__conn = connection\n+            self.timeout = connection.timeout\n+        elif self.__url.scheme == 'https':\n+            self.__conn = http.client.HTTPSConnection(self.__url.hostname, port, timeout=self.timeout)\n+        else:\n+            self.__conn = http.client.HTTPConnection(self.__url.hostname, port, timeout=self.timeout)"
      },
      {
        "sha": "28437f892556c487d80cd9aeb27a276217e76455",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 30,
        "deletions": 6,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "patch": "@@ -29,7 +29,7 @@\n import logging\n \n # Formatting. Default colors to empty strings.\n-BOLD, BLUE, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n+BOLD, GREEN, RED, GREY = (\"\", \"\"), (\"\", \"\"), (\"\", \"\"), (\"\", \"\")\n try:\n     # Make sure python thinks it can write unicode to its stdout\n     \"\\u2713\".encode(\"utf_8\").decode(sys.stdout.encoding)\n@@ -41,11 +41,27 @@\n     CROSS = \"x \"\n     CIRCLE = \"o \"\n \n-if os.name == 'posix':\n+if os.name != 'nt' or sys.getwindowsversion() >= (10, 0, 14393):\n+    if os.name == 'nt':\n+        import ctypes\n+        kernel32 = ctypes.windll.kernel32\n+        ENABLE_VIRTUAL_TERMINAL_PROCESSING = 4\n+        STD_OUTPUT_HANDLE = -11\n+        STD_ERROR_HANDLE = -12\n+        # Enable ascii color control to stdout\n+        stdout = kernel32.GetStdHandle(STD_OUTPUT_HANDLE)\n+        stdout_mode = ctypes.c_int32()\n+        kernel32.GetConsoleMode(stdout, ctypes.byref(stdout_mode))\n+        kernel32.SetConsoleMode(stdout, stdout_mode.value | ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n+        # Enable ascii color control to stderr\n+        stderr = kernel32.GetStdHandle(STD_ERROR_HANDLE)\n+        stderr_mode = ctypes.c_int32()\n+        kernel32.GetConsoleMode(stderr, ctypes.byref(stderr_mode))\n+        kernel32.SetConsoleMode(stderr, stderr_mode.value | ENABLE_VIRTUAL_TERMINAL_PROCESSING)\n     # primitive formatting on supported\n     # terminal via ANSI escape sequences:\n     BOLD = ('\\033[0m', '\\033[1m')\n-    BLUE = ('\\033[0m', '\\033[0;34m')\n+    GREEN = ('\\033[0m', '\\033[0;32m')\n     RED = ('\\033[0m', '\\033[0;31m')\n     GREY = ('\\033[0m', '\\033[1;30m')\n \n@@ -227,6 +243,11 @@ def main():\n \n     # Create base test directory\n     tmpdir = \"%s/test_runner_\u20bf_\ud83c\udfc3_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n+\n+    # If we fixed the command-line and filename encoding issue on Windows, these two lines could be removed\n+    if config[\"environment\"][\"EXEEXT\"] == \".exe\":\n+        tmpdir = \"%s/test_runner_%s\" % (args.tmpdirprefix, datetime.datetime.now().strftime(\"%Y%m%d_%H%M%S\"))\n+\n     os.makedirs(tmpdir)\n \n     logging.debug(\"Temporary test directory at %s\" % tmpdir)\n@@ -264,7 +285,7 @@ def main():\n \n     # Remove the test cases that the user has explicitly asked to exclude.\n     if args.exclude:\n-        exclude_tests = [re.sub(\"\\.py$\", \"\", test) + \".py\" for test in args.exclude.split(',')]\n+        exclude_tests = [re.sub(\"\\.py$\", \"\", test) + (\".py\" if \".py\" not in test else \"\") for test in args.exclude.split(',')]\n         for exclude_test in exclude_tests:\n             if exclude_test in test_list:\n                 test_list.remove(exclude_test)\n@@ -359,7 +380,10 @@ def run_tests(test_list, src_dir, build_dir, tmpdir, jobs=1, enable_coverage=Fal\n                 print('\\n============')\n                 print('{}Combined log for {}:{}'.format(BOLD[1], testdir, BOLD[0]))\n                 print('============\\n')\n-                combined_logs, _ = subprocess.Popen([sys.executable, os.path.join(tests_dir, 'combine_logs.py'), '-c', testdir], universal_newlines=True, stdout=subprocess.PIPE).communicate()\n+                combined_logs_args = [sys.executable, os.path.join(tests_dir, 'combine_logs.py'), testdir]\n+                if BOLD[0]:\n+                    combined_logs_args += ['--color']\n+                combined_logs, _ = subprocess.Popen(combined_logs_args, universal_newlines=True, stdout=subprocess.PIPE).communicate()\n                 print(\"\\n\".join(deque(combined_logs.splitlines(), combined_logs_len)))\n \n             if failfast:\n@@ -498,7 +522,7 @@ def sort_key(self):\n \n     def __repr__(self):\n         if self.status == \"Passed\":\n-            color = BLUE\n+            color = GREEN\n             glyph = TICK\n         elif self.status == \"Failed\":\n             color = RED"
      },
      {
        "sha": "189bc2d50eb41811f0ea727a4660b8a179333964",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 11,
        "deletions": 6,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "patch": "@@ -44,8 +44,9 @@ def wallet_file(name):\n \n         # create symlink to verify wallet directory path can be referenced\n         # through symlink\n-        os.mkdir(wallet_dir('w7'))\n-        os.symlink('w7', wallet_dir('w7_symlink'))\n+        if os.name != 'nt':\n+            os.mkdir(wallet_dir('w7'))\n+            os.symlink('w7', wallet_dir('w7_symlink'))\n \n         # rename wallet.dat to make sure plain wallet file paths (as opposed to\n         # directory paths) can be loaded\n@@ -66,6 +67,8 @@ def wallet_file(name):\n         #   w8         - to verify existing wallet file is loaded correctly\n         #   ''         - to verify default wallet file is created correctly\n         wallet_names = ['w1', 'w2', 'w3', 'w', 'sub/w5', os.path.join(self.options.tmpdir, 'extern/w6'), 'w7_symlink', 'w8', '']\n+        if os.name == 'nt':\n+            wallet_names.remove('w7_symlink')\n         extra_args = ['-wallet={}'.format(n) for n in wallet_names]\n         self.start_node(0, extra_args)\n         assert_equal(set(node.listwallets()), set(wallet_names))\n@@ -76,7 +79,7 @@ def wallet_file(name):\n             assert_equal(os.path.isfile(wallet_file(wallet_name)), True)\n \n         # should not initialize if wallet path can't be created\n-        exp_stderr = \"boost::filesystem::create_directory: (The system cannot find the path specified|Not a directory):\"\n+        exp_stderr = \"boost::filesystem::create_directory:\"\n         self.nodes[0].assert_start_raises_init_error(['-wallet=wallet.dat/bad'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         self.nodes[0].assert_start_raises_init_error(['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n@@ -92,8 +95,9 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-wallet=w8', '-wallet=w8_copy'], exp_stderr, match=ErrorMatch.PARTIAL_REGEX)\n \n         # should not initialize if wallet file is a symlink\n-        os.symlink('w8', wallet_dir('w8_symlink'))\n-        self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n+        if os.name != 'nt':\n+            os.symlink('w8', wallet_dir('w8_symlink'))\n+            self.nodes[0].assert_start_raises_init_error(['-wallet=w8_symlink'], 'Error: Invalid -wallet path \\'w8_symlink\\'\\. .*', match=ErrorMatch.FULL_REGEX)\n \n         # should not initialize if the specified walletdir does not exist\n         self.nodes[0].assert_start_raises_init_error(['-walletdir=bad'], 'Error: Specified -walletdir \"bad\" does not exist')\n@@ -220,7 +224,8 @@ def wallet_file(name):\n         assert_raises_rpc_error(-1, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n \n         # Fail to load if wallet file is a symlink\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n+        if os.name != 'nt':\n+            assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))"
      }
    ]
  },
  {
    "sha": "661ac15a4aafae6ec1579721ef36ca2fde9c17b0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NjFhYzE1YTRhYWZhZTZlYzE1Nzk3MjFlZjM2Y2EyZmRlOWMxN2Iw",
    "commit": {
      "author": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-08-27T09:51:06Z"
      },
      "committer": {
        "name": "Chun Kuan Lee",
        "email": "ken2812221@gmail.com",
        "date": "2018-09-17T13:45:34Z"
      },
      "message": "appveyor: Run functional tests on appveyor",
      "tree": {
        "sha": "0d9fdf636bdafc6efb22d538496fa69d97346884",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0d9fdf636bdafc6efb22d538496fa69d97346884"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/661ac15a4aafae6ec1579721ef36ca2fde9c17b0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661ac15a4aafae6ec1579721ef36ca2fde9c17b0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/661ac15a4aafae6ec1579721ef36ca2fde9c17b0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/661ac15a4aafae6ec1579721ef36ca2fde9c17b0/comments",
    "author": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ken2812221",
      "id": 11154118,
      "node_id": "MDQ6VXNlcjExMTU0MTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/11154118?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ken2812221",
      "html_url": "https://github.com/ken2812221",
      "followers_url": "https://api.github.com/users/ken2812221/followers",
      "following_url": "https://api.github.com/users/ken2812221/following{/other_user}",
      "gists_url": "https://api.github.com/users/ken2812221/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ken2812221/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ken2812221/subscriptions",
      "organizations_url": "https://api.github.com/users/ken2812221/orgs",
      "repos_url": "https://api.github.com/users/ken2812221/repos",
      "events_url": "https://api.github.com/users/ken2812221/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ken2812221/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2148c36b6ec02fcf10d6d3b76e50b690ee93bdfd"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c2e1c00b8da7bafce783775ba27e885d3d315bd9",
        "filename": "appveyor.yml",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/661ac15a4aafae6ec1579721ef36ca2fde9c17b0/appveyor.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/661ac15a4aafae6ec1579721ef36ca2fde9c17b0/appveyor.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/appveyor.yml?ref=661ac15a4aafae6ec1579721ef36ca2fde9c17b0",
        "patch": "@@ -7,6 +7,7 @@ environment:\n   APPVEYOR_SAVE_CACHE_ON_ERROR: true\n   CLCACHE_SERVER: 1\n   PACKAGES: boost-filesystem boost-signals2 boost-interprocess boost-test libevent openssl zeromq berkeleydb secp256k1 leveldb\n+  PYTHONIOENCODING: utf-8\n cache:\n - C:\\tools\\vcpkg\\installed\n - C:\\Users\\appveyor\\clcache\n@@ -15,6 +16,8 @@ init:\n - cmd: set PATH=C:\\Python36-x64;C:\\Python36-x64\\Scripts;%PATH%\n install:\n - cmd: pip install git+https://github.com/frerich/clcache.git\n+# Disable zmq test for now since python zmq library on Windows would cause Access violation sometimes.\n+# - cmd: pip install zmq\n - ps:  $packages = $env:PACKAGES -Split ' '\n - ps:  for ($i=0; $i -lt $packages.length; $i++) {\n            $env:ALL_PACKAGES += $packages[$i] + \":\" + $env:PLATFORM + \"-windows-static \"\n@@ -40,6 +43,17 @@ after_build:\n - cmd: move build_msvc\\%PLATFORM%\\%CONFIGURATION%\\*.iobj build_msvc\\cache\\\n - cmd: move build_msvc\\%PLATFORM%\\%CONFIGURATION%\\*.ipdb build_msvc\\cache\\\n - cmd: del C:\\Users\\appveyor\\clcache\\stats.txt\n+before_test:\n+- ps:  ${conf_ini} = (Get-Content([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini.in\")))\n+- ps:  ${conf_ini} = $conf_ini.Replace(\"@abs_top_srcdir@\", ${env:APPVEYOR_BUILD_FOLDER}).Replace(\"@abs_top_builddir@\", ${env:APPVEYOR_BUILD_FOLDER}).Replace(\"@EXEEXT@\", \".exe\")\n+- ps:  ${conf_ini} = $conf_ini.Replace(\"@ENABLE_WALLET_TRUE@\", \"\").Replace(\"@BUILD_BITCOIN_UTILS_TRUE@\", \"\").Replace(\"@BUILD_BITCOIND_TRUE@\", \"\").Replace(\"@ENABLE_ZMQ_TRUE@\", \"\")\n+- ps:  ${utf8} = New-Object System.Text.UTF8Encoding ${false}\n+- ps:  '[IO.File]::WriteAllLines([IO.Path]::Combine(${env:APPVEYOR_BUILD_FOLDER}, \"test\", \"config.ini\"), $conf_ini, ${utf8})'\n+- ps:  move \"build_msvc\\${env:PLATFORM}\\${env:CONFIGURATION}\\*.exe\" src\n test_script:\n-- cmd: build_msvc\\%PLATFORM%\\%CONFIGURATION%\\test_bitcoin.exe\n+- cmd: src\\test_bitcoin.exe\n+- ps:  src\\bench_bitcoin.exe -evals=1 -scaling=0\n+- ps:  python test\\util\\bitcoin-util-test.py\n+- cmd: python test\\util\\rpcauth-test.py\n+- cmd: python test\\functional\\test_runner.py --force --quiet --combinedlogslen=4000 --exclude \"feature_notifications,wallet_multiwallet,wallet_multiwallet.py --usecli\"\n deploy: off"
      }
    ]
  }
]