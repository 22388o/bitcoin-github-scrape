sanjaykdragon,2020-02-03 19:13:02,ut: i think the compiler would optimize strlen being called twice into once,https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-581571461,581571461,
elichai,2020-02-03 19:15:26,"@sanjaykdragon good question. I'll check godbolt later. But even if you're right it's A. compiler dependent. B. still one time more than this. \n\nEDIT: even with simplification, and force inlining everything it still calls `strlen` twice https://godbolt.org/z/ZBpdWa ",https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-581572507,581572507,
DrahtBot,2020-02-03 23:43:41,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21328 (net, refactor: pass uint16 CService::port as uint16 by jonatack)\n\nIf you consider this pull request important, p",https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-581673554,581673554,
elichai,2020-02-04 15:37:12,"So added some benchmarks, and it seems to be within the margin of noise except for `ParseHex`.(which is twice as fast for the 32 byte case) so I think I'll rebase to only do the `ParseHex` pre-allocation\nBefore:\n```\n$ ./src/bench/bench_bitcoin -filter=""Base64Decode|Base64DecodeVec|HexParse""\n# Benchmark,    evals,   iterations,  total,      min,         max,       median\nBase64Decode,    ",https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-581968054,581968054,
sanjaykdragon,2020-02-04 17:05:10,"> So added some benchmarks, and it seems to be within the margin of noise except for `ParseHex`.(which is twice as fast for the 32 byte case) so I think I'll rebase to only do the `ParseHex` pre-allocation\n> Before:\n> \n> ```\n> $ ./src/bench/bench_bitcoin -filter=""Base64Decode|Base64DecodeVec|HexParse""\n> # Benchmark,    evals,   iterations,  total,      min,         max,       median\n> ",https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-582012742,582012742,
DrahtBot,2021-03-19 21:15:48,"<!--cf906140f33d8803c4a75a2196329ecb-->\nüêô This pull request conflicts with the target branch and [needs rebase](https://github.com/bitcoin/bitcoin/blob/master/CONTRIBUTING.md#rebasing-changes).\n\n<sub>Want to unsubscribe from rebase notifications on this pull request? Just convert this pull request to a ""draft"".</sub>",https://github.com/bitcoin/bitcoin/pull/18061#issuecomment-803138182,803138182,
promag,2020-02-03 22:22:04,"3fad849f2f9d4c250e44fb7c329e1f93c14e48c7\n\nNACK this change. Instead you can drop `ParseHex(const char*)` and move the code here with the proper changes - I've done it and `make check` ran fine. ",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r374375151,374375151,src/util/strencodings.cpp
elichai,2020-02-04 09:28:01,Well we have places where it's called with `const char*`. probably by dropping that it just calls the std::string constructor,https://github.com/bitcoin/bitcoin/pull/18061#discussion_r374557796,374557796,src/util/strencodings.cpp
laanwj,2020-02-05 15:26:33,"Same suggestion: can't we remove the `std::vector<unsigned char> ParseHex(const char* psz);` variant completely? \nDoes this cause any actual issues if we did?\nI'd like to move away from C-strings where possible and it seems more of a simplification.",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r375323997,375323997,src/util/strencodings.cpp
elichai,2020-02-05 15:36:42,"The only ""problem"" is a degregation in speed for places where we call this with C strings which I think is mostly(if not only?) tests(their raw strings usage)\nIt's probably worth the simplicity though. ",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r375330910,375330910,src/util/strencodings.cpp
MarcoFalke,2020-02-10 17:57:36,"Is copying a string actually relevant performance wise here? Even if it was, parsing hex should only happen on user or rpc inputs, so I don't think we need to over-optimize this.",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r377222967,377222967,src/util/strencodings.cpp
elichai,2020-02-11 14:15:04,"@MarcoFalke in my benchmarks if you have `char*` and you convert it into `std::string` it spends almost the same time as the code before this PR (X2 slower). I think it's not about copying, it's about heap allocation. \nBut if you prefer I'll be fine with removing the raw `char*` support because we probably only ever benefit from it in tests.\n\nI agree that there's no need to over-optimize thi",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r377659149,377659149,src/util/strencodings.cpp
practicalswift,2020-02-11 22:17:29,"Echoing the request of simply dropping `ParseHex(const char* psz)`.\n\nGenerally I think we should try move away from C-strings where possible.",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r377932996,377932996,src/util/strencodings.cpp
MarcoFalke,2020-02-11 22:23:25,"@elichai Is there a single call site that needs the raw string interface? If not, and you have performance concerns, you may explicitly delete the interface, and thus force all callers to explicitly call `ParseHex(std::string{psz})` and be aware of the performance impact.",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r377935682,377935682,src/util/strencodings.cpp
elichai,2020-02-12 15:44:55,"Checked now, it seems like `ParseHex(const char* psz)` is only used in tests except for 2 places:\nhttps://github.com/bitcoin/bitcoin/blob/master/src/chainparams.cpp#L55\nhttps://github.com/bitcoin/bitcoin/blob/master/src/net_processing.cpp#L2101\n\nBoth should almost never really run, so I'll just drop it",https://github.com/bitcoin/bitcoin/pull/18061#discussion_r378335545,378335545,src/util/strencodings.cpp
