DrahtBot,2019-10-27 02:24:48,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#12557](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12557.html) ([WIP] 64 bit iOS device support by Sjors)\n",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546655782,546655782,
laanwj,2019-10-27 10:19:50,"Errors on MacOSX (looks like it doesn't have `environ` and `CLOCK_MONOTONIC`):\n```\nandomenv.cpp:177:19: error: use of undeclared identifier 'CLOCK_MONOTONIC'\n    clock_gettime(CLOCK_MONOTONIC, &ts);\nrandomenv.cpp:222:64: error: use of undeclared identifier 'environ'\n    hasher << &x << &RandAddStaticEnv << &malloc << &errno << &environ << addr;                                            ",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546680696,546680696,
practicalswift,2019-10-27 20:30:07,Concept ACK: good idea,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546731211,546731211,
sipa,2019-10-27 21:34:22,"I think I've addressed a compatibility/build issues. Can someone try this on OSX, and perhaps some BSD flavor?",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546736892,546736892,
RandyMcMillan,2019-10-27 22:43:56,"@sipa, \nIt runs....\nhttps://github.com/RandyMcMillan/bitcoin/blob/201910_seedrandom/debug.log\nhttps://github.com/RandyMcMillan/bitcoin/blob/201910_seedrandom/mojave10.14.6build.txt",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546742728,546742728,
RandyMcMillan,2019-10-27 22:56:04,travis-ci > https://travis-ci.org/RandyMcMillan/bitcoin/jobs/603655433,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546743659,546743659,
fanquake,2019-10-28 14:13:04,"> Can someone try this on OSX, and perhaps some BSD flavor?\n\nI get the following error when building eed8cfec452a538d644844fb96606e6bc24f47c8 on OpenBSD 6.6:\n```\n  CXX      libbitcoin_util_a-randomenv.o\nIn file included from randomenv.cpp:37:\n/usr/include/netinet/ip.h:67:19: error: field has incomplete type 'struct in_addr'\n        struct    in_addr ip_src, ip_dst; /* source and dest",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-546964842,546964842,
laanwj,2019-10-28 15:37:07,"Log on FreeBSD 12.0-RELEASE-p10 (same complaint, about `sockaddr`)\n<details>\n\n```\nMaking all in src\ngmake[1]: Entering directory '/usr/home/user/src/bitcoin/src'\ngmake[2]: Entering directory '/usr/home/user/src/bitcoin/src'\n  CXX      libbitcoin_util_a-randomenv.o\nIn file included from randomenv.cpp:37:\n/usr/include/netinet/ip.h:71:17: error: field has incomplete type 'struct in_",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547005320,547005320,
MarcoFalke,2019-10-28 15:37:52,"Building freeBSD here: https://cirrus-ci.com/task/5690364417015808\n\n\nEdit: Same error: https://cirrus-ci.com/task/5690364417015808?command=make#L734",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547005637,547005637,
MarcoFalke,2019-10-28 15:50:40,Does the comment in `random.h` need to be updated?,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547011765,547011765,
fanquake,2019-10-28 15:58:28,"> Does the comment in random.h need to be updated?\n\nIf that is updated, you could also cherry-pick https://github.com/bitcoin/bitcoin/pull/17265/commits/770cd9640e8b38d3456527bdf3d84b589cbd3418 out of #17265 which contains some related corrections.",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547015568,547015568,
MarcoFalke,2019-10-28 18:41:44,New freeBSD build: https://cirrus-ci.com/task/4712584309112832,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547089920,547089920,
MarcoFalke,2019-10-28 19:28:01,"New freeBSD build failure: https://cirrus-ci.com/task/4712584309112832?command=make#L761\n\n<details><summary>log</summary>\n\n```\n/usr/local/bin/ccache c++ -std=c++11 -DHAVE_CONFIG_H -I. -I../src/config   -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=2 -I. -I/tmp/cirrus-ci-build/db4/include -DBOOST_SP_USE_STD_ATOMIC -DBOOST_AC_USE_STD_ATOMIC -pthread -I/usr/local/include -I./leveldb/include -I./level",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547108271,547108271,
MarcoFalke,2019-10-28 20:49:46,new build :pray: https://cirrus-ci.com/task/6286311933083648,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547139733,547139733,
sipa,2019-10-28 21:09:19,"@MarcoFalke Hmm, ""checking whether sysctlbyname is declared... no"". Does FreeBSD not have `sysctlbyname`?",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547146948,547146948,
fanquake,2019-10-28 22:19:18,"> MarcoFalke Hmm, ""checking whether sysctlbyname is declared... no"". Does FreeBSD not have sysctlbyname?\n\nIt does, looks like you'll just need to include `sys/types.h` as well. See the [sysctlbyname docs](http://nixdoc.net/man-pages/FreeBSD/man3/sysctlbyname.3.html).\n\nAfter including `sys/types.h`I've tested using `12.0-RELEASE-p6` and see `sysctlbyname is declared... yes`.",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547170020,547170020,
MarcoFalke,2019-10-29 13:40:53,New build: https://cirrus-ci.com/task/5389706841292800,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547424674,547424674,
jamesob,2019-10-29 16:02:30,"Concept ACK. I have to review more closely, but how do we detect situations ""where system entropy is somehow broken""? Are these sources now unconditionally rolled into our seeding process?",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547497557,547497557,
sipa,2019-10-29 16:05:26,"@jamesob They're undetectable in general.\n\nTo clarify: I mean situations where system entropy is broken, for example because /dev/urandum is initialized to just 2^32 possible states and nothing new is fed into it.  An attacker who knows this could predict the random numbers you're going to generate, by simply looping over all 2^32 possibilities and comparing them with your output.\n\nThis is gen",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547499248,547499248,
MarcoFalke,2019-10-29 17:27:12,"For obviously broken cases (e.g. the random number generator returns a constant) it is possible to detect it with automated tools that apply heuristics such as those described in https://web.archive.org/web/20110602194701/http://users.eecs.northwestern.edu/~nickle/310/2010/headRuns.pdf . However, these tools can only hint at potential problems and never certify correctness. See https://nvlpubs.nis",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547538883,547538883,
sipa,2019-10-29 19:42:46,"A bunch of updates over the past days:\n* Cherry-picked https://github.com/bitcoin/bitcoin/commit/770cd9640e8b38d3456527bdf3d84b589cbd3418\n* Added a moveonly commit to merge the cpuid code in random and crypto/sha256, making it reusable for randomenv.\n* Added a commit to use `getauxval` on Linux.\n* Added a commit to use `sysctlbyname` on BSD/MacOS.\n* Added a commit to make sure dynamic en",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547596533,547596533,
gmaxwell,2019-10-29 20:40:31,"A reminder that this sort of thing is important:  Some ryzen cpus rng returns a constant (and success), and in default configs linux relies on it for many purposes (I think, /dev/random in current default kernel configs mostly manages to dodge the over-reliance, but many other things do-- so it's a narrow miss.)\n\nhttps://arstechnica.com/gadgets/2019/10/how-a-months-old-amd-microcode-bug-destro",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547619465,547619465,
laanwj,2019-10-30 13:26:10,"Travis error on mingw:\n```\nrandomenv.cpp: In function ‘void {anonymous}::RandAddSeedPerfmon(CSHA512&)’:\nrandomenv.cpp:63:33: error: variable ‘std::atomic<long long int> last_perfmon’ has initializer but incomplete type\n     static std::atomic<int64_t> last_perfmon{0};\n                                 ^~~~~~~~~~~~\n```",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-547901395,547901395,
fanquake,2019-10-31 18:38:18,"> sysctlbyname isn't being picked up on OpenBSD (works on macOS and FreeBSD). Will investigate.\n\nLooks like it doesn't actually exist on OpenBSD. It only has [`sysctl`](https://man.openbsd.org/OpenBSD-6.6/sysctl.2). On OpenBSD 6.6:\n```bash\nbazinga# cat sysctl.h | grep sysctlbyname\nbazinga# cat sysctl.h | grep ""sysctl(""\n * pairs to be used by sysctl(1) in manipulating the subsystem.\n ",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548513791,548513791,
sipa,2019-10-31 18:48:28,"Addressed the comments above (AT_RANDOM gives a pointer, removed /etc/hostconfig, added a comment that not all sysctls are available on every system).\n\nAlso added:\n* Added more clocks (they're gathered once a minute, some redundancy won't hurt).\n* Improved the CPUID code (also adds extended leaves now)\n* Added compiler version string (`__VERSION__`).\n* Added Bitcoin Core version inform",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548517871,548517871,
sipa,2019-10-31 18:49:03,"@fanquake Ok, annoying. Perhaps that means we should use sysctl instead of sysctlbyname.",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548518085,548518085,
laanwj,2019-11-01 10:59:50,Changes now look good to me. Tested on Linux RISC-V 64 bit w/ no issues.,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548749200,548749200,
sipa,2019-11-01 22:51:45,"Replaced the use of `sysctlbyname` by `sysctl`; it's less extensive and needs more code, but likely supports more systems.",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-548976525,548976525,
laanwj,2019-11-05 09:32:53,"it's pretty hard to verify that this is doing anything, at runtime; it would be too much hassle to keep track of everything that is hashed, but it would be nice to have (optionally enabled. category RAND?) summarizing debug log messages like;\n`N bytes of static environment data added to random state`\n`N bytes of dynamic environment data added to random state`",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-549740513,549740513,
sipa,2019-11-05 23:19:06,@laanwj I've added a commit that logs the number of bytes gathered.,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-550067759,550067759,
laanwj,2019-11-10 16:52:59,"Tested on a few different platforms;\n\nFreeBSD x86_64:\n```\n2019-11-10T13:02:15Z Feeding 66012 of dynamic environment data into RNG\n2019-11-10T13:02:15Z Feeding 10350 bytes of static environment data into RNG\n```\nLinux x86_64 VM:\n```\n2019-11-10T15:33:02Z Feeding 16094 of dynamic environment data into RNG\n2019-11-10T15:33:02Z Feeding 14944 bytes of static environment data into RNG",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-552212368,552212368,
sipa,2019-11-10 19:29:37,Added a commit to always avoids sysctl on Linux.,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-552225553,552225553,
TheBlueMatt,2019-11-13 01:44:24,utACK d1c02775aa74a0610809ac54bb241ddad61d2d8c. Certainly no longer measuring the time elapsed between a 1ms sleep (which got removed in the latest change) is a fair tradeoff for adding about 2 million other actually-higher-entropy bits :).,https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-553198817,553198817,
fanquake,2019-11-14 01:10:13,"I've been testing d1c02775aa74a0610809ac54bb241ddad61d2d8c across various operating systems. Few logs for anyone who's interested. Will post a final review shortly.\n\n#### macOS 10.14.6\n```bash\n2019-11-13T18:24:03Z Feeding 1066350 bytes of environment data into RNG\n2019-11-13T18:25:03Z Feeding 216 bytes of dynamic environment data into RNG\n2019-11-13T18:26:03Z Feeding 216 bytes of dynam",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-553677392,553677392,
laanwj,2019-11-18 12:21:21,"ACK d1c02775aa74a0610809ac54bb241ddad61d2d8c\n\nI agree with @fanquake. I think this is good for merge. It has been tested on a wide range of platforms, and unarguably works.\n\nAdditional bits of entropy for specific arch and OS can be added later.",https://github.com/bitcoin/bitcoin/pull/17270#issuecomment-554992585,554992585,
laanwj,2019-10-27 09:39:41,"To also have CPU features bits for other architectures (on Linux) you could include `getauxval(AT_HWCAP)` and `getauxval(AT_HWCAP2)`.\n(maybe some other `getauxval` are relevant too, e.g. `AT_RANDOM` has 16 bytes of random data)",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r339333532,339333532,src/randomenv.cpp
sipa,2019-10-27 20:05:19,"Good idea, added!",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r339361181,339361181,src/randomenv.cpp
Sjors,2019-10-29 16:51:45,Are you sure you don't need to keep `if defined(USE_ASM)` around for `void Transform(`?,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340200295,340200295,src/crypto/sha256.cpp
sipa,2019-10-29 18:14:21,Fixed.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340246307,340246307,src/crypto/sha256.cpp
MarcoFalke,2019-10-30 20:15:25,"in commit ad09ad707e0ed6e3a537e1a204843792e5d06108:\n\n`GetTime` is deprecated (see https://dev.visucore.com/bitcoin/doxygen/time_8cpp.html#a350f99e2a13df31f2afbd7f80ab21a5e). I guess you wanted to use `GetSystemTimeInSeconds`",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340835357,340835357,src/randomenv.cpp
MarcoFalke,2019-10-30 20:16:42,"`GetTime<std::chrono::seconds>()` can't hurt here either, as far as I can tell",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340835915,340835915,src/randomenv.cpp
sipa,2019-10-30 23:03:50,Fixed. Also done elsewhere in the previous commit.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r340898164,340898164,src/randomenv.cpp
fanquake,2019-10-31 15:02:46,I think this should be `/proc/self/schedstat`,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341190312,341190312,src/randomenv.cpp
fanquake,2019-10-31 15:18:59,Note `vm.swapusage` seems to be macOS only. I can't find it on OpenBSD or FreeBSD.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341199938,341199938,src/randomenv.cpp
fanquake,2019-10-31 15:23:34,"I couldn't find `/etc/hostconfig` on any of the platforms I tested (macOS, *BSD, Linux). Seems it used to exist on at least macOS, but was removed in `10.10`.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341202812,341202812,src/randomenv.cpp
laanwj,2019-10-31 15:24:34,"`getauxval(AT_RANDOM)`, if present, returns a pointer to 16 bytes of random data; it's not itself random data",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341203400,341203400,src/randomenv.cpp
fanquake,2019-10-31 15:45:46,It looks like upstream OpenSSL uses `CLOCK_REALTIME` when generating a timestamp. Could you explain why `CLOCK_MONOTONIC` is the better choice for us? I assume it's TODO with it being less manipulable and kernel compatibility?,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341216159,341216159,src/randomenv.cpp
fanquake,2019-10-31 15:47:30,"There's not a heap of documentation on  `mach_absolute_time` and I can't find any calls to it in recent OpenSSL, however looks like it's available for macOS versions > 10.9. `/usr/include/mach/mach_time.h`.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341217176,341217176,src/randomenv.cpp
sipa,2019-10-31 18:34:01,It seems both exist.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341304182,341304182,src/randomenv.cpp
sipa,2019-10-31 18:35:15,That's ok; I combined lists of sysctls listed for various platforms. Not all will exist on each.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341304784,341304784,src/randomenv.cpp
sipa,2019-10-31 18:36:09,"Ok, removing.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305217,341305217,src/randomenv.cpp
sipa,2019-10-31 18:36:33,I'm expanding this piece of code to just use all clocks available.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305399,341305399,src/randomenv.cpp
sipa,2019-10-31 18:37:13,"Yeah, I tried to find an equivalent to CLOCK_MONOTONIC on MacOS, and found this. It doesn't exactly match what OpenSSL did.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341305714,341305714,src/randomenv.cpp
sipa,2019-10-31 18:49:14,Fixed.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r341310902,341310902,src/randomenv.cpp
laanwj,2019-11-05 09:26:12,"Shouldn't this ifdef be outside the function instead of outside it? I mean, I don't think it should be possible to call `AddSysctl` on systems without sysctl?",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342455629,342455629,src/randomenv.cpp
laanwj,2019-11-05 09:27:31,could creating the service fail? is there a return value to handle here?,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342456219,342456219,src/randomenv.cpp
sipa,2019-11-05 23:09:58,Fixed.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845005,342845005,src/randomenv.cpp
sipa,2019-11-05 23:10:05,Fixed.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845049,342845049,src/randomenv.cpp
narula,2019-11-05 23:10:07,Might you consider only reading up to a certain number of bytes? I'm not sure you're guaranteed that some of these files won't be enormous.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342845055,342845055,src/randomenv.cpp
sipa,2019-11-05 23:18:38,Done.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342847638,342847638,src/randomenv.cpp
madars,2019-11-05 23:49:37,"Should we make this comment explicitly enforced, e.g. having `static_assert(!std::is_same<T, char*>::value, ""calling hasher.operator<< on char* probably won't do what you want"");` or similar?",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342856120,342856120,src/randomenv.cpp
laanwj,2019-11-05 23:54:29,"it's only defined in this cpp file, where the hasher is only used for one thing, so the scope for potential accidental misuse is very little (and who knows, maybe you'd *want* to hash a pointer here, if it's random enough due to ASLR)",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342857493,342857493,src/randomenv.cpp
sipa,2019-11-06 00:01:03,"There are plenty of internal pointers being fed to the RNG here (stack locations, standard library locations, ...).",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342859263,342859263,src/randomenv.cpp
madars,2019-11-06 00:08:02,"They don't appear to be `char*` pointers (e.g. `environ` is `char**`, result of a temp malloc below is `void*`, etc) but potential for misuse is a judgement call.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342861048,342861048,src/randomenv.cpp
sipa,2019-11-06 00:10:24,"Ah, good point. Let's see if that compiles.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342861634,342861634,src/randomenv.cpp
sipa,2019-11-06 00:16:40,Done. I added `std::decay<T>` so that it also catches const char* and char arrays.,https://github.com/bitcoin/bitcoin/pull/17270#discussion_r342863159,342863159,src/randomenv.cpp
laanwj,2019-11-12 10:58:28,"Thanks!\nThough, I'd slightly prefer to handle this in the build system, so that the symbol `HAVE_DECL_SYSCTL` doesn't get set in the first place in Linux. This avoids having to handle it on a case by case basis on all caller sites.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345140294,345140294,src/randomenv.cpp
TheBlueMatt,2019-11-12 17:23:28,"Hmm, we here write a struct timeval directly into the hasher, but in other places we avoid it by writing the fields. I presume the avoiding it cases are to avoid writing padding bytes into the hasher (otherwise why both)?",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345339937,345339937,src/randomenv.cpp
TheBlueMatt,2019-11-12 18:34:34,"I don't get the point of this commit.\nYou're avoiding doing something that sleeps 1ms but runs in a tight loop for 10ms.\nThe real meat of the function gets called on a timer every minute, but also my be called at other times, but only runs if its been 10 minutes since the last run.\n\nMaybe we should just skip the SeedInfrequent call in SeedSleep and then we can drop all the once-per-minute ",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345374202,345374202,src/random.cpp
sipa,2019-11-12 22:51:42,"Good point, fixed.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345488583,345488583,src/randomenv.cpp
sipa,2019-11-12 22:56:30,"One reason to writing the fields directly is because these structures may have implementation-defined other fields, which are perhaps left uninitialized. Feeding them into the hasher would then trip up valgrind & co. Perhaps this is not a real concern and we should just feed the struct in until someone notices a problem?",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345490375,345490375,src/randomenv.cpp
sipa,2019-11-12 22:58:06,"I think you're right, there is fairly little advantage to having both RandAddSeedSleep and RandAddPeriodic. I've redone this PR to instead just have a RandAddPeriodic, which indeed simplifies a bunch of things including not keeping track of when the last run of the expensive stuff was (there is a still a counter in the perfmon data for windows, which only runs once every 10 minutes instead of ever",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345490911,345490911,src/random.cpp
sipa,2019-11-12 23:43:50,"Ok, fixed: I'm zero initializing all the structs, and then just feeding them directly into the hasher.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345505151,345505151,src/randomenv.cpp
TheBlueMatt,2019-11-13 01:42:29,"I can't say I feel strongly. I see reasons to do it both ways, and as long as valgrind doesn't complain and we hash in the higher-entropy bits, it doesn't matter either way. Just figured I'd flag it since you appeared to be very careful about it in all places but here.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r345533727,345533727,src/randomenv.cpp
fanquake,2019-11-14 01:30:12,"Using `__MACH__` here and above is unusual for a our codebase, we use `MAC_OSX` throughout. Also `__MACH__` by itself isn't necessarily macOS, looks like if you were to use it you'd want to couple it with `__APPLE__`.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r346088506,346088506,src/randomenv.cpp
fanquake,2019-11-14 01:39:52,"After #16392 (bumping our SDK and minimum required macOS to 10.12), `clock_gettime`, `CLOCK_REALTIME` and `CLOCK_MONOTONIC` will be available to use on macOS. Not necessarily anything that needs to change here now, but the potential to simplify this later.",https://github.com/bitcoin/bitcoin/pull/17270#discussion_r346090606,346090606,src/randomenv.cpp
