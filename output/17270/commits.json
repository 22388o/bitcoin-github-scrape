[
  {
    "sha": "b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTFiYWUxYTVhNGZhOGVmNzgyNWRkMWJiMDllM2Y0N2Y5NmQ3YTVh",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2019-10-26T12:05:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "message": "doc: minor corrections in random.cpp\n\nThis should have been part of #17151.",
      "tree": {
        "sha": "bd08df6d431f6f5bc3578cb95e50e75ead3510a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd08df6d431f6f5bc3578cb95e50e75ead3510a5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "270616228bc9a3856a0a82dea26ac3480b7585cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/270616228bc9a3856a0a82dea26ac3480b7585cd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/270616228bc9a3856a0a82dea26ac3480b7585cd"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "b453fdd9b85511dfe72ddb95271e372142531628",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
        "patch": "@@ -11,8 +11,8 @@\n #include <compat.h> // for Windows API\n #include <wincrypt.h>\n #endif\n-#include <logging.h>  // for LogPrint()\n-#include <sync.h>     // for WAIT_LOCK\n+#include <logging.h>  // for LogPrintf()\n+#include <sync.h>     // for Mutex\n #include <util/time.h> // for GetTime()\n \n #include <stdlib.h>\n@@ -716,7 +716,7 @@ bool Random_SanityCheck()\n     uint64_t start = GetPerformanceCounter();\n \n     /* This does not measure the quality of randomness, but it does test that\n-     * OSRandom() overwrites all 32 bytes of the output given a maximum\n+     * GetOSRand() overwrites all 32 bytes of the output given a maximum\n      * number of tries.\n      */\n     static const ssize_t MAX_TRIES = 1024;"
      },
      {
        "sha": "b5a7faf48cfa8e23be2367cfeafada5f4defc7e3",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
        "patch": "@@ -52,7 +52,6 @@\n  * sources used in the 'slow' seeder are included, but also:\n  * - 256 bits from the hardware RNG (rdseed or rdrand) when available.\n  * - (On Windows) Performance monitoring data from the OS.\n- * - (On Windows) Through OpenSSL, the screen contents.\n  * - Strengthen the entropy for 100 ms using repeated SHA512.\n  *\n  * When mixing in new entropy, H = SHA512(entropy || old_rng_state) is computed, and"
      }
    ]
  },
  {
    "sha": "cea3902015185adc88adbd031d919f91bc844fd7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWEzOTAyMDE1MTg1YWRjODhhZGJkMDMxZDkxOWY5MWJjODQ0ZmQ3",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-26T19:20:12Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "message": "[MOVEONLY] Move perfmon data gathering to new randomenv module",
      "tree": {
        "sha": "845d407ac3c2c00364ba64c12896ab927c9421b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/845d407ac3c2c00364ba64c12896ab927c9421b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cea3902015185adc88adbd031d919f91bc844fd7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea3902015185adc88adbd031d919f91bc844fd7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cea3902015185adc88adbd031d919f91bc844fd7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea3902015185adc88adbd031d919f91bc844fd7/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b51bae1a5a4fa8ef7825dd1bb09e3f47f96d7a5a"
      }
    ],
    "stats": {
      "total": 139,
      "additions": 97,
      "deletions": 42
    },
    "files": [
      {
        "sha": "dd67bf3240c1714b984709e269229ac8342e25cc",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea3902015185adc88adbd031d919f91bc844fd7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea3902015185adc88adbd031d919f91bc844fd7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cea3902015185adc88adbd031d919f91bc844fd7",
        "patch": "@@ -175,6 +175,7 @@ BITCOIN_CORE_H = \\\n   protocol.h \\\n   psbt.h \\\n   random.h \\\n+  randomenv.h \\\n   reverse_iterator.h \\\n   reverselock.h \\\n   rpc/blockchain.h \\\n@@ -502,6 +503,7 @@ libbitcoin_util_a_SOURCES = \\\n   interfaces/handler.cpp \\\n   logging.cpp \\\n   random.cpp \\\n+  randomenv.cpp \\\n   rpc/request.cpp \\\n   support/cleanse.cpp \\\n   sync.cpp \\"
      },
      {
        "sha": "25ff7b3198951e3ff6519c092f973317915f163b",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 42,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea3902015185adc88adbd031d919f91bc844fd7/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea3902015185adc88adbd031d919f91bc844fd7/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=cea3902015185adc88adbd031d919f91bc844fd7",
        "patch": "@@ -18,6 +18,8 @@\n #include <stdlib.h>\n #include <thread>\n \n+#include <randomenv.h>\n+\n #include <support/allocators/secure.h>\n \n #ifndef WIN32\n@@ -263,44 +265,6 @@ static void Strengthen(const unsigned char (&seed)[32], int microseconds, CSHA51\n     memory_cleanse(buffer, sizeof(buffer));\n }\n \n-static void RandAddSeedPerfmon(CSHA512& hasher)\n-{\n-#ifdef WIN32\n-    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n-    // Seed with the entire set of perfmon data\n-\n-    // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64_t nLastPerfmon;\n-    if (GetTime() < nLastPerfmon + 10 * 60)\n-        return;\n-    nLastPerfmon = GetTime();\n-\n-    std::vector<unsigned char> vData(250000, 0);\n-    long ret = 0;\n-    unsigned long nSize = 0;\n-    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n-    while (true) {\n-        nSize = vData.size();\n-        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n-        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n-            break;\n-        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n-    }\n-    RegCloseKey(HKEY_PERFORMANCE_DATA);\n-    if (ret == ERROR_SUCCESS) {\n-        hasher.Write(vData.data(), nSize);\n-        memory_cleanse(vData.data(), nSize);\n-    } else {\n-        // Performance data is only a best-effort attempt at improving the\n-        // situation when the OS randomness (and other sources) aren't\n-        // adequate. As a result, failure to read it is isn't considered critical,\n-        // so we don't call RandFailure().\n-        // TODO: Add logging when the logger is made functional before global\n-        // constructors have been invoked.\n-    }\n-#endif\n-}\n-\n #ifndef WIN32\n /** Fallback: get 32 bytes of system entropy from /dev/urandom. The most\n  * compatible way to get cryptographic randomness on UNIX-ish platforms.\n@@ -585,8 +549,8 @@ static void SeedSleep(CSHA512& hasher, RNGState& rng)\n     // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n     SeedTimestamp(hasher);\n \n-    // Windows performance monitor data (once every 10 minutes)\n-    RandAddSeedPerfmon(hasher);\n+    // Dynamic environment data (performance monitoring, ...; once every 10 minutes)\n+    RandAddDynamicEnv(hasher);\n \n     // Strengthen every minute\n     SeedStrengthen(hasher, rng);\n@@ -600,8 +564,11 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n     // Everything that the 'slow' seeder includes.\n     SeedSlow(hasher);\n \n-    // Windows performance monitor data.\n-    RandAddSeedPerfmon(hasher);\n+    // Dynamic environment data\n+    RandAddDynamicEnv(hasher);\n+\n+    // Static environment data\n+    RandAddStaticEnv(hasher);\n \n     // Strengthen\n     SeedStrengthen(hasher, rng);"
      },
      {
        "sha": "529dd039b22c261206c312d44568d742de5f3497",
        "filename": "src/randomenv.cpp",
        "status": "added",
        "additions": 69,
        "deletions": 0,
        "changes": 69,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea3902015185adc88adbd031d919f91bc844fd7/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea3902015185adc88adbd031d919f91bc844fd7/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=cea3902015185adc88adbd031d919f91bc844fd7",
        "patch": "@@ -0,0 +1,69 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <randomenv.h>\n+\n+#include <crypto/sha512.h>\n+#include <support/cleanse.h>\n+#include <util/time.h> // for GetTime()\n+#ifdef WIN32\n+#include <compat.h> // for Windows API\n+#endif\n+\n+#include <algorithm>\n+#include <vector>\n+\n+#include <stdint.h>\n+\n+namespace {\n+\n+void RandAddSeedPerfmon(CSHA512& hasher)\n+{\n+#ifdef WIN32\n+    // Don't need this on Linux, OpenSSL automatically uses /dev/urandom\n+    // Seed with the entire set of perfmon data\n+\n+    // This can take up to 2 seconds, so only do it every 10 minutes\n+    static int64_t nLastPerfmon;\n+    if (GetTime() < nLastPerfmon + 10 * 60)\n+        return;\n+    nLastPerfmon = GetTime();\n+\n+    std::vector<unsigned char> vData(250000, 0);\n+    long ret = 0;\n+    unsigned long nSize = 0;\n+    const size_t nMaxSize = 10000000; // Bail out at more than 10MB of performance data\n+    while (true) {\n+        nSize = vData.size();\n+        ret = RegQueryValueExA(HKEY_PERFORMANCE_DATA, \"Global\", nullptr, nullptr, vData.data(), &nSize);\n+        if (ret != ERROR_MORE_DATA || vData.size() >= nMaxSize)\n+            break;\n+        vData.resize(std::max((vData.size() * 3) / 2, nMaxSize)); // Grow size of buffer exponentially\n+    }\n+    RegCloseKey(HKEY_PERFORMANCE_DATA);\n+    if (ret == ERROR_SUCCESS) {\n+        hasher.Write(vData.data(), nSize);\n+        memory_cleanse(vData.data(), nSize);\n+    } else {\n+        // Performance data is only a best-effort attempt at improving the\n+        // situation when the OS randomness (and other sources) aren't\n+        // adequate. As a result, failure to read it is isn't considered critical,\n+        // so we don't call RandFailure().\n+        // TODO: Add logging when the logger is made functional before global\n+        // constructors have been invoked.\n+    }\n+#endif\n+}\n+\n+} // namespace\n+\n+void RandAddDynamicEnv(CSHA512& hasher)\n+{\n+    RandAddSeedPerfmon(hasher);\n+}\n+\n+void RandAddStaticEnv(CSHA512& hasher)\n+{\n+}"
      },
      {
        "sha": "46cea6f6f281bcedbfd793919f828f01890fb263",
        "filename": "src/randomenv.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cea3902015185adc88adbd031d919f91bc844fd7/src/randomenv.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cea3902015185adc88adbd031d919f91bc844fd7/src/randomenv.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.h?ref=cea3902015185adc88adbd031d919f91bc844fd7",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_RANDOMENV_H\n+#define BITCOIN_RANDOMENV_H\n+\n+#include <crypto/sha512.h>\n+\n+/** Gather non-cryptographic environment data that changes over time. */\n+void RandAddDynamicEnv(CSHA512& hasher);\n+\n+/** Gather non-cryptographic environment data that does not change over time. */\n+void RandAddStaticEnv(CSHA512& hasher);\n+\n+#endif"
      }
    ]
  },
  {
    "sha": "723c79666770b30cce9f962bed5ece8cc7d74580",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjNjNzk2NjY3NzBiMzBjY2U5Zjk2MmJlZDVlY2U4Y2M3ZDc0NTgw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T19:52:31Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "message": "[MOVEONLY] Move cpuid code from random & sha256 to compat/cpuid",
      "tree": {
        "sha": "b1dbaecda34a61030ede89845bcb271fb4687277",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b1dbaecda34a61030ede89845bcb271fb4687277"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723c79666770b30cce9f962bed5ece8cc7d74580",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c79666770b30cce9f962bed5ece8cc7d74580",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723c79666770b30cce9f962bed5ece8cc7d74580",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c79666770b30cce9f962bed5ece8cc7d74580/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cea3902015185adc88adbd031d919f91bc844fd7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cea3902015185adc88adbd031d919f91bc844fd7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cea3902015185adc88adbd031d919f91bc844fd7"
      }
    ],
    "stats": {
      "total": 62,
      "additions": 32,
      "deletions": 30
    },
    "files": [
      {
        "sha": "b04d2ecbbfc04db6585deafc4a946c189d2ca4c9",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723c79666770b30cce9f962bed5ece8cc7d74580/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723c79666770b30cce9f962bed5ece8cc7d74580/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=723c79666770b30cce9f962bed5ece8cc7d74580",
        "patch": "@@ -119,6 +119,7 @@ BITCOIN_CORE_H = \\\n   compat.h \\\n   compat/assumptions.h \\\n   compat/byteswap.h \\\n+  compat/cpuid.h \\\n   compat/endian.h \\\n   compat/sanity.h \\\n   compressor.h \\"
      },
      {
        "sha": "0877ad47d302ba56594673a84b5e43b70ed676a7",
        "filename": "src/compat/cpuid.h",
        "status": "added",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723c79666770b30cce9f962bed5ece8cc7d74580/src/compat/cpuid.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723c79666770b30cce9f962bed5ece8cc7d74580/src/compat/cpuid.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/cpuid.h?ref=723c79666770b30cce9f962bed5ece8cc7d74580",
        "patch": "@@ -0,0 +1,24 @@\n+// Copyright (c) 2017-2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_COMPAT_CPUID_H\n+#define BITCOIN_COMPAT_CPUID_H\n+\n+#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#define HAVE_GETCPUID\n+\n+#include <cpuid.h>\n+\n+// We can't use cpuid.h's __get_cpuid as it does not support subleafs.\n+void static inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n+{\n+#ifdef __GNUC__\n+    __cpuid_count(leaf, subleaf, a, b, c, d);\n+#else\n+  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n+#endif\n+}\n+\n+#endif // defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#endif // BITCOIN_COMPAT_CPUID_H"
      },
      {
        "sha": "dda7e5230fe8fbdc1b7ca581424ea3d64dde5373",
        "filename": "src/crypto/sha256.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 15,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723c79666770b30cce9f962bed5ece8cc7d74580/src/crypto/sha256.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723c79666770b30cce9f962bed5ece8cc7d74580/src/crypto/sha256.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha256.cpp?ref=723c79666770b30cce9f962bed5ece8cc7d74580",
        "patch": "@@ -8,9 +8,10 @@\n #include <assert.h>\n #include <string.h>\n \n+#include <compat/cpuid.h>\n+\n #if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n #if defined(USE_ASM)\n-#include <cpuid.h>\n namespace sha256_sse4\n {\n void Transform(uint32_t* s, const unsigned char* chunk, size_t blocks);\n@@ -546,18 +547,7 @@ bool SelfTest() {\n     return true;\n }\n \n-\n #if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__) || defined(__i386__))\n-// We can't use cpuid.h's __get_cpuid as it does not support subleafs.\n-void inline cpuid(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n-{\n-#ifdef __GNUC__\n-    __cpuid_count(leaf, subleaf, a, b, c, d);\n-#else\n-  __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n-#endif\n-}\n-\n /** Check whether the OS has enabled AVX registers. */\n bool AVXEnabled()\n {\n@@ -572,7 +562,7 @@ bool AVXEnabled()\n std::string SHA256AutoDetect()\n {\n     std::string ret = \"standard\";\n-#if defined(USE_ASM) && (defined(__x86_64__) || defined(__amd64__) || defined(__i386__))\n+#if defined(USE_ASM) && defined(HAVE_GETCPUID)\n     bool have_sse4 = false;\n     bool have_xsave = false;\n     bool have_avx = false;\n@@ -589,15 +579,15 @@ std::string SHA256AutoDetect()\n     (void)enabled_avx;\n \n     uint32_t eax, ebx, ecx, edx;\n-    cpuid(1, 0, eax, ebx, ecx, edx);\n+    GetCPUID(1, 0, eax, ebx, ecx, edx);\n     have_sse4 = (ecx >> 19) & 1;\n     have_xsave = (ecx >> 27) & 1;\n     have_avx = (ecx >> 28) & 1;\n     if (have_xsave && have_avx) {\n         enabled_avx = AVXEnabled();\n     }\n     if (have_sse4) {\n-        cpuid(7, 0, eax, ebx, ecx, edx);\n+        GetCPUID(7, 0, eax, ebx, ecx, edx);\n         have_avx2 = (ebx >> 5) & 1;\n         have_shani = (ebx >> 29) & 1;\n     }"
      },
      {
        "sha": "6f162a7cf0a816faaa170c150ca6eee0eb3831d0",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723c79666770b30cce9f962bed5ece8cc7d74580/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723c79666770b30cce9f962bed5ece8cc7d74580/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=723c79666770b30cce9f962bed5ece8cc7d74580",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <random.h>\n \n+#include <compat/cpuid.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #ifdef WIN32\n@@ -42,11 +43,6 @@\n #include <sys/sysctl.h>\n #endif\n \n-\n-#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n-#include <cpuid.h>\n-#endif\n-\n #include <openssl/err.h>\n #include <openssl/rand.h>\n #include <openssl/conf.h>\n@@ -77,7 +73,7 @@ static inline int64_t GetPerformanceCounter() noexcept\n #endif\n }\n \n-#if defined(__x86_64__) || defined(__amd64__) || defined(__i386__)\n+#ifdef HAVE_GETCPUID\n static bool g_rdrand_supported = false;\n static bool g_rdseed_supported = false;\n static constexpr uint32_t CPUID_F1_ECX_RDRAND = 0x40000000;\n@@ -88,15 +84,6 @@ static_assert(CPUID_F1_ECX_RDRAND == bit_RDRND, \"Unexpected value for bit_RDRND\"\n #ifdef bit_RDSEED\n static_assert(CPUID_F7_EBX_RDSEED == bit_RDSEED, \"Unexpected value for bit_RDSEED\");\n #endif\n-static void inline GetCPUID(uint32_t leaf, uint32_t subleaf, uint32_t& a, uint32_t& b, uint32_t& c, uint32_t& d)\n-{\n-    // We can't use __get_cpuid as it doesn't support subleafs.\n-#ifdef __GNUC__\n-    __cpuid_count(leaf, subleaf, a, b, c, d);\n-#else\n-    __asm__ (\"cpuid\" : \"=a\"(a), \"=b\"(b), \"=c\"(c), \"=d\"(d) : \"0\"(leaf), \"2\"(subleaf));\n-#endif\n-}\n \n static void InitHardwareRand()\n {"
      }
    ]
  },
  {
    "sha": "c2a262a78c3bcc4d5e13612ab0214874abe15de0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjMmEyNjJhNzhjM2JjYzRkNWUxMzYxMmFiMDIxNDg3NGFiZTE1ZGUw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T00:14:21Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T22:50:44Z"
      },
      "message": "Seed randomness with process id / thread id / various clocks\n\nThis sort of data is also used by OpenSSL.",
      "tree": {
        "sha": "cc91016fcd06686bd9af06f21b78f49737784bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc91016fcd06686bd9af06f21b78f49737784bcb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "723c79666770b30cce9f962bed5ece8cc7d74580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723c79666770b30cce9f962bed5ece8cc7d74580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/723c79666770b30cce9f962bed5ece8cc7d74580"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3f970ec3303c8664a241dccb30e8cda0c0846553",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c2a262a78c3bcc4d5e13612ab0214874abe15de0/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c2a262a78c3bcc4d5e13612ab0214874abe15de0/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=c2a262a78c3bcc4d5e13612ab0214874abe15de0",
        "patch": "@@ -13,9 +13,22 @@\n #endif\n \n #include <algorithm>\n+#include <chrono>\n+#include <thread>\n #include <vector>\n \n #include <stdint.h>\n+#include <string.h>\n+#ifndef WIN32\n+#include <sys/time.h>\n+#include <sys/types.h>\n+#include <unistd.h>\n+#endif\n+#ifdef __MACH__\n+#include <mach/clock.h>\n+#include <mach/mach.h>\n+#include <mach/mach_time.h>\n+#endif\n \n namespace {\n \n@@ -57,13 +70,77 @@ void RandAddSeedPerfmon(CSHA512& hasher)\n #endif\n }\n \n+/** Helper to easily feed data into a CSHA512.\n+ *\n+ * Note that this does not serialize the passed object (like stream.h's << operators do).\n+ * Its raw memory representation is used directly.\n+ */\n+template<typename T>\n+CSHA512& operator<<(CSHA512& hasher, const T& data) {\n+    static_assert(!std::is_same<typename std::decay<T>::type, char*>::value, \"Calling operator<<(CSHA512, char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, unsigned char*>::value, \"Calling operator<<(CSHA512, unsigned char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const char*>::value, \"Calling operator<<(CSHA512, const char*) is probably not what you want\");\n+    static_assert(!std::is_same<typename std::decay<T>::type, const unsigned char*>::value, \"Calling operator<<(CSHA512, const unsigned char*) is probably not what you want\");\n+    hasher.Write((const unsigned char*)&data, sizeof(data));\n+    return hasher;\n+}\n+\n } // namespace\n \n void RandAddDynamicEnv(CSHA512& hasher)\n {\n     RandAddSeedPerfmon(hasher);\n+\n+    // Various clocks\n+#ifdef WIN32\n+    FILETIME ftime;\n+    GetSystemTimeAsFileTime(&ftime);\n+    hasher << ftime;\n+#else\n+#  ifndef __MACH__\n+    // On non-MacOS systems, use various clock_gettime() calls.\n+    struct timespec ts;\n+#    ifdef CLOCK_MONOTONIC\n+    clock_gettime(CLOCK_MONOTONIC, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_REALTIME\n+    clock_gettime(CLOCK_REALTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#    ifdef CLOCK_BOOTTIME\n+    clock_gettime(CLOCK_BOOTTIME, &ts);\n+    hasher << ts.tv_sec << ts.tv_nsec;\n+#    endif\n+#  else\n+    // On MacOS use mach_absolute_time (number of CPU ticks since boot) as a replacement for CLOCK_MONOTONIC,\n+    // and clock_get_time for CALENDAR_CLOCK as a replacement for CLOCK_REALTIME.\n+    hasher << mach_absolute_time();\n+    // From https://gist.github.com/jbenet/1087739\n+    clock_serv_t cclock;\n+    mach_timespec_t mts;\n+    if (host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock) == KERN_SUCCESS && clock_get_time(cclock, &mts) == KERN_SUCCESS) {\n+        hasher << mts.tv_sec << mts.tv_nsec;\n+        mach_port_deallocate(mach_task_self(), cclock);\n+    }\n+#  endif\n+    // gettimeofday is available on all UNIX systems, but only has microsecond precision.\n+    struct timeval tv;\n+    gettimeofday(&tv, nullptr);\n+    hasher << tv.tv_sec << tv.tv_usec;\n+#endif\n+    // Probably redundant, but also use all the clocks C++11 provides:\n+    hasher << std::chrono::system_clock::now().time_since_epoch().count();\n+    hasher << std::chrono::steady_clock::now().time_since_epoch().count();\n+    hasher << std::chrono::high_resolution_clock::now().time_since_epoch().count();\n }\n \n void RandAddStaticEnv(CSHA512& hasher)\n {\n+#ifdef WIN32\n+    hasher << GetCurrentProcessId() << GetCurrentThreadId();\n+#else\n+    hasher << getpid();\n+#endif\n+    hasher << std::this_thread::get_id();\n }"
      }
    ]
  },
  {
    "sha": "2554c1b81bb8c40e1989025c6f18e7935720b156",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTU0YzFiODFiYjhjNDBlMTk4OTAyNWM2ZjE4ZTc5MzU3MjBiMTU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T01:05:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:24:02Z"
      },
      "message": "Gather additional entropy from the environment\n\nThis based on code by Gregory Maxwell.",
      "tree": {
        "sha": "86dc2f698d86ed556c2fa0ac0f141dfde2f40b23",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/86dc2f698d86ed556c2fa0ac0f141dfde2f40b23"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2554c1b81bb8c40e1989025c6f18e7935720b156",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2554c1b81bb8c40e1989025c6f18e7935720b156",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2554c1b81bb8c40e1989025c6f18e7935720b156",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2554c1b81bb8c40e1989025c6f18e7935720b156/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2a262a78c3bcc4d5e13612ab0214874abe15de0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2a262a78c3bcc4d5e13612ab0214874abe15de0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2a262a78c3bcc4d5e13612ab0214874abe15de0"
      }
    ],
    "stats": {
      "total": 194,
      "additions": 184,
      "deletions": 10
    },
    "files": [
      {
        "sha": "1faf2f4613f1266bdf963dbd2ad2612ab60b9fd2",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 184,
        "deletions": 10,
        "changes": 194,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2554c1b81bb8c40e1989025c6f18e7935720b156/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2554c1b81bb8c40e1989025c6f18e7935720b156/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=2554c1b81bb8c40e1989025c6f18e7935720b156",
        "patch": "@@ -3,8 +3,13 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n #include <randomenv.h>\n \n+#include <clientversion.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #include <util/time.h> // for GetTime()\n@@ -14,21 +19,34 @@\n \n #include <algorithm>\n #include <chrono>\n+#include <climits>\n #include <thread>\n #include <vector>\n \n #include <stdint.h>\n #include <string.h>\n #ifndef WIN32\n+#include <sys/types.h> // must go before a number of other headers\n+#include <fcntl.h>\n+#include <netinet/in.h>\n+#include <sys/resource.h>\n+#include <sys/socket.h>\n+#include <sys/stat.h>\n #include <sys/time.h>\n-#include <sys/types.h>\n+#include <sys/utsname.h>\n #include <unistd.h>\n #endif\n #ifdef __MACH__\n #include <mach/clock.h>\n #include <mach/mach.h>\n #include <mach/mach_time.h>\n #endif\n+#if HAVE_DECL_GETIFADDRS\n+#include <ifaddrs.h>\n+#endif\n+\n+//! Necessary on some platforms\n+extern char** environ;\n \n namespace {\n \n@@ -85,6 +103,53 @@ CSHA512& operator<<(CSHA512& hasher, const T& data) {\n     return hasher;\n }\n \n+#ifndef WIN32\n+void AddSockaddr(CSHA512& hasher, const struct sockaddr *addr)\n+{\n+    if (addr == nullptr) return;\n+    switch (addr->sa_family) {\n+    case AF_INET:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in));\n+        break;\n+    case AF_INET6:\n+        hasher.Write((const unsigned char*)addr, sizeof(sockaddr_in6));\n+        break;\n+    default:\n+        hasher.Write((const unsigned char*)&addr->sa_family, sizeof(addr->sa_family));\n+    }\n+}\n+\n+void AddFile(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    int f = open(path, O_RDONLY);\n+    size_t total = 0;\n+    if (f != -1) {\n+        unsigned char fbuf[4096];\n+        int n;\n+        hasher.Write((const unsigned char*)&f, sizeof(f));\n+        if (fstat(f, &sb) == 0) hasher << sb;\n+        do {\n+            n = read(f, fbuf, sizeof(fbuf));\n+            if (n > 0) hasher.Write(fbuf, n);\n+            total += n;\n+            /* not bothering with EINTR handling. */\n+        } while (n == sizeof(fbuf) && total < 1048576); // Read only the first 1 Mbyte\n+        close(f);\n+    }\n+}\n+\n+void AddPath(CSHA512& hasher, const char *path)\n+{\n+    struct stat sb = {};\n+    if (stat(path, &sb) == 0) {\n+        hasher.Write((const unsigned char*)path, strlen(path) + 1);\n+        hasher << sb;\n+    }\n+}\n+#endif\n+\n+\n } // namespace\n \n void RandAddDynamicEnv(CSHA512& hasher)\n@@ -99,48 +164,157 @@ void RandAddDynamicEnv(CSHA512& hasher)\n #else\n #  ifndef __MACH__\n     // On non-MacOS systems, use various clock_gettime() calls.\n-    struct timespec ts;\n+    struct timespec ts = {};\n #    ifdef CLOCK_MONOTONIC\n     clock_gettime(CLOCK_MONOTONIC, &ts);\n-    hasher << ts.tv_sec << ts.tv_nsec;\n+    hasher << ts;\n #    endif\n #    ifdef CLOCK_REALTIME\n     clock_gettime(CLOCK_REALTIME, &ts);\n-    hasher << ts.tv_sec << ts.tv_nsec;\n+    hasher << ts;\n #    endif\n #    ifdef CLOCK_BOOTTIME\n     clock_gettime(CLOCK_BOOTTIME, &ts);\n-    hasher << ts.tv_sec << ts.tv_nsec;\n+    hasher << ts;\n #    endif\n #  else\n     // On MacOS use mach_absolute_time (number of CPU ticks since boot) as a replacement for CLOCK_MONOTONIC,\n     // and clock_get_time for CALENDAR_CLOCK as a replacement for CLOCK_REALTIME.\n     hasher << mach_absolute_time();\n     // From https://gist.github.com/jbenet/1087739\n     clock_serv_t cclock;\n-    mach_timespec_t mts;\n+    mach_timespec_t mts = {};\n     if (host_get_clock_service(mach_host_self(), CALENDAR_CLOCK, &cclock) == KERN_SUCCESS && clock_get_time(cclock, &mts) == KERN_SUCCESS) {\n-        hasher << mts.tv_sec << mts.tv_nsec;\n+        hasher << mts;\n         mach_port_deallocate(mach_task_self(), cclock);\n     }\n #  endif\n     // gettimeofday is available on all UNIX systems, but only has microsecond precision.\n-    struct timeval tv;\n+    struct timeval tv = {};\n     gettimeofday(&tv, nullptr);\n-    hasher << tv.tv_sec << tv.tv_usec;\n+    hasher << tv;\n #endif\n     // Probably redundant, but also use all the clocks C++11 provides:\n     hasher << std::chrono::system_clock::now().time_since_epoch().count();\n     hasher << std::chrono::steady_clock::now().time_since_epoch().count();\n     hasher << std::chrono::high_resolution_clock::now().time_since_epoch().count();\n+\n+#ifndef WIN32\n+    // Current resource usage.\n+    struct rusage usage = {};\n+    if (getrusage(RUSAGE_SELF, &usage) == 0) hasher << usage;\n+#endif\n+\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/diskstats\");\n+    AddFile(hasher, \"/proc/vmstat\");\n+    AddFile(hasher, \"/proc/schedstat\");\n+    AddFile(hasher, \"/proc/zoneinfo\");\n+    AddFile(hasher, \"/proc/meminfo\");\n+    AddFile(hasher, \"/proc/softirqs\");\n+    AddFile(hasher, \"/proc/stat\");\n+    AddFile(hasher, \"/proc/self/schedstat\");\n+    AddFile(hasher, \"/proc/self/status\");\n+#endif\n+\n+    // Stack and heap location\n+    void* addr = malloc(4097);\n+    hasher << &addr << addr;\n+    free(addr);\n }\n \n void RandAddStaticEnv(CSHA512& hasher)\n {\n+    // Some compile-time static properties\n+    hasher << (CHAR_MIN < 0) << sizeof(void*) << sizeof(long) << sizeof(int);\n+#if defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n+    hasher << __GNUC__ << __GNUC_MINOR__ << __GNUC_PATCHLEVEL__;\n+#endif\n+#ifdef _MSC_VER\n+    hasher << _MSC_VER;\n+#endif\n+    hasher << __cplusplus;\n+#ifdef _XOPEN_VERSION\n+    hasher << _XOPEN_VERSION;\n+#endif\n+#ifdef __VERSION__\n+    const char* COMPILER_VERSION = __VERSION__;\n+    hasher.Write((const unsigned char*)COMPILER_VERSION, strlen(COMPILER_VERSION) + 1);\n+#endif\n+\n+    // Bitcoin client version\n+    hasher << CLIENT_VERSION;\n+\n+    // Memory locations\n+    hasher << &hasher << &RandAddStaticEnv << &malloc << &errno << &environ;\n+\n+    // Hostname\n+    char hname[256];\n+    if (gethostname(hname, 256) == 0) {\n+        hasher.Write((const unsigned char*)hname, strnlen(hname, 256));\n+    }\n+\n+#if HAVE_DECL_GETIFADDRS\n+    // Network interfaces\n+    struct ifaddrs *ifad = NULL;\n+    getifaddrs(&ifad);\n+    struct ifaddrs *ifit = ifad;\n+    while (ifit != NULL) {\n+        hasher.Write((const unsigned char*)&ifit, sizeof(ifit));\n+        hasher.Write((const unsigned char*)ifit->ifa_name, strlen(ifit->ifa_name) + 1);\n+        hasher.Write((const unsigned char*)&ifit->ifa_flags, sizeof(ifit->ifa_flags));\n+        AddSockaddr(hasher, ifit->ifa_addr);\n+        AddSockaddr(hasher, ifit->ifa_netmask);\n+        AddSockaddr(hasher, ifit->ifa_dstaddr);\n+        ifit = ifit->ifa_next;\n+    }\n+    freeifaddrs(ifad);\n+#endif\n+\n+#ifndef WIN32\n+    // UNIX kernel information\n+    struct utsname name;\n+    if (uname(&name) != -1) {\n+        hasher.Write((const unsigned char*)&name.sysname, strlen(name.sysname) + 1);\n+        hasher.Write((const unsigned char*)&name.nodename, strlen(name.nodename) + 1);\n+        hasher.Write((const unsigned char*)&name.release, strlen(name.release) + 1);\n+        hasher.Write((const unsigned char*)&name.version, strlen(name.version) + 1);\n+        hasher.Write((const unsigned char*)&name.machine, strlen(name.machine) + 1);\n+    }\n+\n+    /* Path and filesystem provided data */\n+    AddPath(hasher, \"/\");\n+    AddPath(hasher, \".\");\n+    AddPath(hasher, \"/tmp\");\n+    AddPath(hasher, \"/home\");\n+    AddPath(hasher, \"/proc\");\n+#ifdef __linux__\n+    AddFile(hasher, \"/proc/cmdline\");\n+    AddFile(hasher, \"/proc/cpuinfo\");\n+    AddFile(hasher, \"/proc/version\");\n+#endif\n+    AddFile(hasher, \"/etc/passwd\");\n+    AddFile(hasher, \"/etc/group\");\n+    AddFile(hasher, \"/etc/hosts\");\n+    AddFile(hasher, \"/etc/resolv.conf\");\n+    AddFile(hasher, \"/etc/timezone\");\n+    AddFile(hasher, \"/etc/localtime\");\n+\n+    /* TODO: sysctl's for OSX to fetch information not available from /proc */\n+#endif\n+\n+    // Env variables\n+    if (environ) {\n+        for (size_t i = 0; environ[i]; ++i) {\n+            hasher.Write((const unsigned char*)environ[i], strlen(environ[i]));\n+        }\n+    }\n+\n+    // Process, thread, user, session, group, ... ids.\n #ifdef WIN32\n     hasher << GetCurrentProcessId() << GetCurrentThreadId();\n #else\n-    hasher << getpid();\n+    hasher << getpid() << getppid() << getsid(0) << getpgid(0) << getuid() << geteuid() << getgid() << getegid();\n #endif\n     hasher << std::this_thread::get_id();\n }"
      }
    ]
  },
  {
    "sha": "a81c494b4c9a8c2f1a319a03375826f12863706f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphODFjNDk0YjRjOWE4YzJmMWEzMTlhMDMzNzU4MjZmMTI4NjM3MDZm",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-28T17:42:25Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:22Z"
      },
      "message": "Use sysctl for seeding on MacOS/BSD",
      "tree": {
        "sha": "89c230f261ae7c7ab3125d53b61ae69d945e77e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89c230f261ae7c7ab3125d53b61ae69d945e77e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a81c494b4c9a8c2f1a319a03375826f12863706f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81c494b4c9a8c2f1a319a03375826f12863706f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a81c494b4c9a8c2f1a319a03375826f12863706f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81c494b4c9a8c2f1a319a03375826f12863706f/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2554c1b81bb8c40e1989025c6f18e7935720b156",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2554c1b81bb8c40e1989025c6f18e7935720b156",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2554c1b81bb8c40e1989025c6f18e7935720b156"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 140,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e1db71a7bff38ea357c151c5baf8f93453d764ca",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a81c494b4c9a8c2f1a319a03375826f12863706f/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a81c494b4c9a8c2f1a319a03375826f12863706f/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=a81c494b4c9a8c2f1a319a03375826f12863706f",
        "patch": "@@ -788,7 +788,7 @@ if test x$TARGET_OS = xdarwin; then\n   AX_CHECK_LINK_FLAG([[-Wl,-dead_strip]], [LDFLAGS=\"$LDFLAGS -Wl,-dead_strip\"])\n fi\n \n-AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h])\n+AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n # FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n # check that it fails to build without memcpy, then that it builds with\n@@ -948,6 +948,18 @@ AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <unistd.h>\n  [ AC_MSG_RESULT(no)]\n )\n \n+AC_MSG_CHECKING(for sysctl)\n+AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n+  #include <sys/sysctl.h>]],\n+ [[ static const int name[2] = {CTL_KERN, KERN_VERSION};\n+    #ifdef __linux__\n+    #error \"Don't use sysctl on Linux, it's deprecated even when it works\"\n+    #endif\n+    sysctl(name, 2, nullptr, nullptr, nullptr, 0); ]])],\n+ [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_SYSCTL, 1,[Define this symbol if the BSD sysctl() is available]) ],\n+ [ AC_MSG_RESULT(no)]\n+)\n+\n AC_MSG_CHECKING(for sysctl KERN_ARND)\n AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#include <sys/types.h>\n   #include <sys/sysctl.h>]],"
      },
      {
        "sha": "197c5ce154f719c0263f128745d2ee4c4b23f37a",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 127,
        "deletions": 1,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a81c494b4c9a8c2f1a319a03375826f12863706f/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a81c494b4c9a8c2f1a319a03375826f12863706f/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=a81c494b4c9a8c2f1a319a03375826f12863706f",
        "patch": "@@ -44,6 +44,18 @@\n #if HAVE_DECL_GETIFADDRS\n #include <ifaddrs.h>\n #endif\n+#if HAVE_SYSCTL\n+#include <sys/sysctl.h>\n+#if HAVE_VM_VM_PARAM_H\n+#include <vm/vm_param.h>\n+#endif\n+#if HAVE_SYS_RESOURCES_H\n+#include <sys/resources.h>\n+#endif\n+#if HAVE_SYS_VMMETER_H\n+#include <sys/vmmeter.h>\n+#endif\n+#endif\n \n //! Necessary on some platforms\n extern char** environ;\n@@ -149,6 +161,23 @@ void AddPath(CSHA512& hasher, const char *path)\n }\n #endif\n \n+#if HAVE_SYSCTL\n+template<int... S>\n+void AddSysctl(CSHA512& hasher)\n+{\n+    int CTL[sizeof...(S)] = {S...};\n+    unsigned char buffer[65536];\n+    size_t siz = 65536;\n+    int ret = sysctl(CTL, sizeof...(S), buffer, &siz, nullptr, 0);\n+    if (ret == 0 || (ret == -1 && errno == ENOMEM)) {\n+        hasher << sizeof(CTL);\n+        hasher.Write((const unsigned char*)CTL, sizeof(CTL));\n+        if (siz > sizeof(buffer)) siz = sizeof(buffer);\n+        hasher << siz;\n+        hasher.Write(buffer, siz);\n+    }\n+}\n+#endif\n \n } // namespace\n \n@@ -217,6 +246,30 @@ void RandAddDynamicEnv(CSHA512& hasher)\n     AddFile(hasher, \"/proc/self/status\");\n #endif\n \n+#if HAVE_SYSCTL\n+#  ifdef CTL_KERN\n+#    if defined(KERN_PROC) && defined(KERN_PROC_ALL)\n+    AddSysctl<CTL_KERN, KERN_PROC, KERN_PROC_ALL>(hasher);\n+#    endif\n+#  endif\n+#  ifdef CTL_HW\n+#    ifdef HW_DISKSTATS\n+    AddSysctl<CTL_HW, HW_DISKSTATS>(hasher);\n+#    endif\n+#  endif\n+#  ifdef CTL_VM\n+#    ifdef VM_LOADAVG\n+    AddSysctl<CTL_VM, VM_LOADAVG>(hasher);\n+#    endif\n+#    ifdef VM_TOTAL\n+    AddSysctl<CTL_VM, VM_TOTAL>(hasher);\n+#    endif\n+#    ifdef VM_METER\n+    AddSysctl<CTL_VM, VM_METER>(hasher);\n+#    endif\n+#  endif\n+#endif\n+\n     // Stack and heap location\n     void* addr = malloc(4097);\n     hasher << &addr << addr;\n@@ -299,8 +352,81 @@ void RandAddStaticEnv(CSHA512& hasher)\n     AddFile(hasher, \"/etc/resolv.conf\");\n     AddFile(hasher, \"/etc/timezone\");\n     AddFile(hasher, \"/etc/localtime\");\n+#endif\n \n-    /* TODO: sysctl's for OSX to fetch information not available from /proc */\n+    // For MacOS/BSDs, gather data through sysctl instead of /proc. Not all of these\n+    // will exist on every system.\n+#if HAVE_SYSCTL\n+#  ifdef CTL_HW\n+#    ifdef HW_MACHINE\n+    AddSysctl<CTL_HW, HW_MACHINE>(hasher);\n+#    endif\n+#    ifdef HW_MODEL\n+    AddSysctl<CTL_HW, HW_MODEL>(hasher);\n+#    endif\n+#    ifdef HW_NCPU\n+    AddSysctl<CTL_HW, HW_NCPU>(hasher);\n+#    endif\n+#    ifdef HW_PHYSMEM\n+    AddSysctl<CTL_HW, HW_PHYSMEM>(hasher);\n+#    endif\n+#    ifdef HW_USERMEM\n+    AddSysctl<CTL_HW, HW_USERMEM>(hasher);\n+#    endif\n+#    ifdef HW_MACHINE_ARCH\n+    AddSysctl<CTL_HW, HW_MACHINE_ARCH>(hasher);\n+#    endif\n+#    ifdef HW_REALMEM\n+    AddSysctl<CTL_HW, HW_REALMEM>(hasher);\n+#    endif\n+#    ifdef HW_CPU_FREQ\n+    AddSysctl<CTL_HW, HW_CPU_FREQ>(hasher);\n+#    endif\n+#    ifdef HW_BUS_FREQ\n+    AddSysctl<CTL_HW, HW_BUS_FREQ>(hasher);\n+#    endif\n+#    ifdef HW_CACHELINE\n+    AddSysctl<CTL_HW, HW_CACHELINE>(hasher);\n+#    endif\n+#  endif\n+#  ifdef CTL_KERN\n+#    ifdef KERN_BOOTFILE\n+     AddSysctl<CTL_KERN, KERN_BOOTFILE>(hasher);\n+#    endif\n+#    ifdef KERN_BOOTTIME\n+     AddSysctl<CTL_KERN, KERN_BOOTTIME>(hasher);\n+#    endif\n+#    ifdef KERN_CLOCKRATE\n+     AddSysctl<CTL_KERN, KERN_CLOCKRATE>(hasher);\n+#    endif\n+#    ifdef KERN_HOSTID\n+     AddSysctl<CTL_KERN, KERN_HOSTID>(hasher);\n+#    endif\n+#    ifdef KERN_HOSTUUID\n+     AddSysctl<CTL_KERN, KERN_HOSTUUID>(hasher);\n+#    endif\n+#    ifdef KERN_HOSTNAME\n+     AddSysctl<CTL_KERN, KERN_HOSTNAME>(hasher);\n+#    endif\n+#    ifdef KERN_OSRELDATE\n+     AddSysctl<CTL_KERN, KERN_OSRELDATE>(hasher);\n+#    endif\n+#    ifdef KERN_OSRELEASE\n+     AddSysctl<CTL_KERN, KERN_OSRELEASE>(hasher);\n+#    endif\n+#    ifdef KERN_OSREV\n+     AddSysctl<CTL_KERN, KERN_OSREV>(hasher);\n+#    endif\n+#    ifdef KERN_OSTYPE\n+     AddSysctl<CTL_KERN, KERN_OSTYPE>(hasher);\n+#    endif\n+#    ifdef KERN_POSIX1\n+     AddSysctl<CTL_KERN, KERN_OSREV>(hasher);\n+#    endif\n+#    ifdef KERN_VERSION\n+     AddSysctl<CTL_KERN, KERN_VERSION>(hasher);\n+#    endif\n+#  endif\n #endif\n \n     // Env variables"
      }
    ]
  },
  {
    "sha": "11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMTc5M2VhMjJlMTI5OGZhN2QzYjQ0YTViNmQyMDgzMDI0OGQ4Y2Y0",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T01:17:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "message": "Feed CPUID data into RNG",
      "tree": {
        "sha": "a2966747e094a86d3760314b0da81d3b4a9b6aff",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2966747e094a86d3760314b0da81d3b4a9b6aff"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a81c494b4c9a8c2f1a319a03375826f12863706f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a81c494b4c9a8c2f1a319a03375826f12863706f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a81c494b4c9a8c2f1a319a03375826f12863706f"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 35,
      "deletions": 0
    },
    "files": [
      {
        "sha": "bfe57dafe50cb371ad1c6d3bd65fcd5cc926946a",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 0,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11793ea22e1298fa7d3b44a5b6d20830248d8cf4/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11793ea22e1298fa7d3b44a5b6d20830248d8cf4/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
        "patch": "@@ -10,6 +10,7 @@\n #include <randomenv.h>\n \n #include <clientversion.h>\n+#include <compat/cpuid.h>\n #include <crypto/sha512.h>\n #include <support/cleanse.h>\n #include <util/time.h> // for GetTime()\n@@ -179,6 +180,36 @@ void AddSysctl(CSHA512& hasher)\n }\n #endif\n \n+#ifdef HAVE_GETCPUID\n+void inline AddCPUID(CSHA512& hasher, uint32_t leaf, uint32_t subleaf, uint32_t& ax, uint32_t& bx, uint32_t& cx, uint32_t& dx)\n+{\n+    GetCPUID(leaf, subleaf, ax, bx, cx, dx);\n+    hasher << leaf << subleaf << ax << bx << cx << dx;\n+}\n+\n+void AddAllCPUID(CSHA512& hasher)\n+{\n+    uint32_t ax, bx, cx, dx;\n+    // Iterate over all standard leaves\n+    AddCPUID(hasher, 0, 0, ax, bx, cx, dx); // Returns max leaf in ax\n+    uint32_t max = ax;\n+    for (uint32_t leaf = 1; leaf <= max; ++leaf) {\n+        for (uint32_t subleaf = 0;; ++subleaf) {\n+            AddCPUID(hasher, leaf, subleaf, ax, bx, cx, dx);\n+            // Iterate over subleaves for leaf 4, 11, 13\n+            if (leaf != 4 && leaf != 11 && leaf != 13) break;\n+            if ((leaf == 4 || leaf == 13) && ax == 0) break;\n+            if (leaf == 11 && (cx & 0xFF00) == 0) break;\n+        }\n+    }\n+    // Iterate over all extended leaves\n+    AddCPUID(hasher, 0x80000000, 0, ax, bx, cx, dx); // Returns max extended leaf in ax\n+    uint32_t ext_max = ax;\n+    for (uint32_t leaf = 0x80000001; leaf <= ext_max; ++leaf) {\n+        AddCPUID(hasher, leaf, 0, ax, bx, cx, dx);\n+    }\n+}\n+#endif\n } // namespace\n \n void RandAddDynamicEnv(CSHA512& hasher)\n@@ -298,6 +329,10 @@ void RandAddStaticEnv(CSHA512& hasher)\n     // Bitcoin client version\n     hasher << CLIENT_VERSION;\n \n+#ifdef HAVE_GETCPUID\n+    AddAllCPUID(hasher);\n+#endif\n+\n     // Memory locations\n     hasher << &hasher << &RandAddStaticEnv << &malloc << &errno << &environ;\n "
      }
    ]
  },
  {
    "sha": "483b94292e89587e5ab40a30b8a90e2f56e847f3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODNiOTQyOTJlODk1ODdlNWFiNDBhMzBiOGE5MGUyZjU2ZTg0N2Yz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-27T19:36:05Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "message": "Add information gathered through getauxval()\n\nSuggested by Wladimir van der Laan.",
      "tree": {
        "sha": "cc2844001bfc7610bf08b807f51728a208981c0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc2844001bfc7610bf08b807f51728a208981c0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/483b94292e89587e5ab40a30b8a90e2f56e847f3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11793ea22e1298fa7d3b44a5b6d20830248d8cf4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11793ea22e1298fa7d3b44a5b6d20830248d8cf4"
      }
    ],
    "stats": {
      "total": 25,
      "additions": 25,
      "deletions": 0
    },
    "files": [
      {
        "sha": "05be090d9326adf7b601ff6eb6cd87c6af23cf5a",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/483b94292e89587e5ab40a30b8a90e2f56e847f3/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/483b94292e89587e5ab40a30b8a90e2f56e847f3/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=483b94292e89587e5ab40a30b8a90e2f56e847f3",
        "patch": "@@ -57,6 +57,9 @@\n #include <sys/vmmeter.h>\n #endif\n #endif\n+#ifdef __linux__\n+#include <sys/auxv.h>\n+#endif\n \n //! Necessary on some platforms\n extern char** environ;\n@@ -329,6 +332,28 @@ void RandAddStaticEnv(CSHA512& hasher)\n     // Bitcoin client version\n     hasher << CLIENT_VERSION;\n \n+#ifdef __linux__\n+    // Information available through getauxval()\n+#  ifdef AT_HWCAP\n+    hasher << getauxval(AT_HWCAP);\n+#  endif\n+#  ifdef AT_HWCAP2\n+    hasher << getauxval(AT_HWCAP2);\n+#  endif\n+#  ifdef AT_RANDOM\n+    const unsigned char* random_aux = (const unsigned char*)getauxval(AT_RANDOM);\n+    if (random_aux) hasher.Write(random_aux, 16);\n+#  endif\n+#  ifdef AT_PLATFORM\n+    const char* platform_str = (const char*)getauxval(AT_PLATFORM);\n+    if (platform_str) hasher.Write((const unsigned char*)platform_str, strlen(platform_str) + 1);\n+#  endif\n+#  ifdef AT_EXECFN\n+    const char* exec_str = (const char*)getauxval(AT_EXECFN);\n+    if (exec_str) hasher.Write((const unsigned char*)exec_str, strlen(exec_str) + 1);\n+#  endif\n+#endif // __linux__\n+\n #ifdef HAVE_GETCPUID\n     AddAllCPUID(hasher);\n #endif"
      }
    ]
  },
  {
    "sha": "d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNjFmMmJiMDc2ZDhmMTc4NDBhOGU3OWYxNTgzZDdmNmUzZTZkMDlh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-29T18:55:59Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "message": "Run background seeding periodically instead of unpredictably\n\n* Instead of calling RandAddSeedSleep anytime the scheduler goes\n  idle, call its replacement (RandAddSeedPeriodic) just once per\n  minute. This has better guarantees of actually being run, and\n  helps limit how frequently the dynamic env data is gathered.\n* Since this code runs once per minute regardless now, we no\n  longer need to keep track of the last time strengthening was\n  run; just do it always.\n* Make strengthening time context dependent (100 ms at startup,\n  10 ms once per minute afterwards).",
      "tree": {
        "sha": "e36bc22346ff81282bc46dffea7ba9313fc49e0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e36bc22346ff81282bc46dffea7ba9313fc49e0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "483b94292e89587e5ab40a30b8a90e2f56e847f3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/483b94292e89587e5ab40a30b8a90e2f56e847f3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/483b94292e89587e5ab40a30b8a90e2f56e847f3"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 24,
      "deletions": 33
    },
    "files": [
      {
        "sha": "2abdf7dbc404f3d30201ce0672146319da49d285",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "patch": "@@ -1258,6 +1258,11 @@ bool AppInitMain(NodeContext& node)\n     CScheduler::Function serviceLoop = std::bind(&CScheduler::serviceQueue, &scheduler);\n     threadGroup.create_thread(std::bind(&TraceThread<CScheduler::Function>, \"scheduler\", serviceLoop));\n \n+    // Gather some entropy once per minute.\n+    scheduler.scheduleEvery([]{\n+        RandAddPeriodic();\n+    }, 60000);\n+\n     GetMainSignals().RegisterBackgroundSignalScheduler(scheduler);\n     GetMainSignals().RegisterWithMempoolSignals(mempool);\n "
      },
      {
        "sha": "2847aacf6f3a0046e4ea7d2193b0a2f2e4946c77",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 29,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "patch": "@@ -507,40 +507,28 @@ static void SeedSlow(CSHA512& hasher) noexcept\n }\n \n /** Extract entropy from rng, strengthen it, and feed it into hasher. */\n-static void SeedStrengthen(CSHA512& hasher, RNGState& rng) noexcept\n+static void SeedStrengthen(CSHA512& hasher, RNGState& rng, int microseconds) noexcept\n {\n-    static std::atomic<int64_t> last_strengthen{0};\n-    int64_t last_time = last_strengthen.load();\n-    int64_t current_time = GetTimeMicros();\n-    if (current_time > last_time + 60000000) { // Only run once a minute\n-        // Generate 32 bytes of entropy from the RNG, and a copy of the entropy already in hasher.\n-        unsigned char strengthen_seed[32];\n-        rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false);\n-        // Strengthen it for 10ms (100ms on first run), and feed it into hasher.\n-        Strengthen(strengthen_seed, last_time == 0 ? 100000 : 10000, hasher);\n-        last_strengthen = current_time;\n-    }\n+    // Generate 32 bytes of entropy from the RNG, and a copy of the entropy already in hasher.\n+    unsigned char strengthen_seed[32];\n+    rng.MixExtract(strengthen_seed, sizeof(strengthen_seed), CSHA512(hasher), false);\n+    // Strengthen the seed, and feed it into hasher.\n+    Strengthen(strengthen_seed, microseconds, hasher);\n }\n \n-static void SeedSleep(CSHA512& hasher, RNGState& rng)\n+static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n {\n     // Everything that the 'fast' seeder includes\n     SeedFast(hasher);\n \n     // High-precision timestamp\n     SeedTimestamp(hasher);\n \n-    // Sleep for 1ms\n-    MilliSleep(1);\n-\n-    // High-precision timestamp after sleeping (as we commit to both the time before and after, this measures the delay)\n-    SeedTimestamp(hasher);\n-\n-    // Dynamic environment data (performance monitoring, ...; once every 10 minutes)\n+    // Dynamic environment data (performance monitoring, ...)\n     RandAddDynamicEnv(hasher);\n \n-    // Strengthen every minute\n-    SeedStrengthen(hasher, rng);\n+    // Strengthen for 10 ms\n+    SeedStrengthen(hasher, rng, 10000);\n }\n \n static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n@@ -551,20 +539,20 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n     // Everything that the 'slow' seeder includes.\n     SeedSlow(hasher);\n \n-    // Dynamic environment data\n+    // Dynamic environment data (performance monitoring, ...)\n     RandAddDynamicEnv(hasher);\n \n     // Static environment data\n     RandAddStaticEnv(hasher);\n \n-    // Strengthen\n-    SeedStrengthen(hasher, rng);\n+    // Strengthen for 100 ms\n+    SeedStrengthen(hasher, rng, 100000);\n }\n \n enum class RNGLevel {\n     FAST, //!< Automatically called by GetRandBytes\n     SLOW, //!< Automatically called by GetStrongRandBytes\n-    SLEEP, //!< Called by RandAddSeedSleep()\n+    PERIODIC, //!< Called by RandAddPeriodic()\n };\n \n static void ProcRand(unsigned char* out, int num, RNGLevel level)\n@@ -582,8 +570,8 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n     case RNGLevel::SLOW:\n         SeedSlow(hasher);\n         break;\n-    case RNGLevel::SLEEP:\n-        SeedSleep(hasher, rng);\n+    case RNGLevel::PERIODIC:\n+        SeedPeriodic(hasher, rng);\n         break;\n     }\n \n@@ -606,7 +594,7 @@ static void ProcRand(unsigned char* out, int num, RNGLevel level)\n \n void GetRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::FAST); }\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept { ProcRand(buf, num, RNGLevel::SLOW); }\n-void RandAddSeedSleep() { ProcRand(nullptr, 0, RNGLevel::SLEEP); }\n+void RandAddPeriodic() { ProcRand(nullptr, 0, RNGLevel::PERIODIC); }\n \n bool g_mock_deterministic_tests{false};\n "
      },
      {
        "sha": "7768f9d3c50ac19eff8e32fbcbf3316bf508a998",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "patch": "@@ -84,11 +84,11 @@ uint256 GetRandHash() noexcept;\n void GetStrongRandBytes(unsigned char* buf, int num) noexcept;\n \n /**\n- * Sleep for 1ms, gather entropy from various sources, and feed them to the PRNG state.\n+ * Gather entropy from various expensive sources, and feed them to the PRNG state.\n  *\n  * Thread-safe.\n  */\n-void RandAddSeedSleep();\n+void RandAddPeriodic();\n \n /**\n  * Fast randomness source. This is seeded once with secure random data, but"
      },
      {
        "sha": "07a54335ac8991cb09e446467d583665aa4f4805",
        "filename": "src/scheduler.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/scheduler.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a/src/scheduler.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/scheduler.cpp?ref=d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "patch": "@@ -41,8 +41,6 @@ void CScheduler::serviceQueue()\n         try {\n             if (!shouldStop() && taskQueue.empty()) {\n                 reverse_lock<boost::unique_lock<boost::mutex> > rlock(lock);\n-                // Use this chance to get more entropy\n-                RandAddSeedSleep();\n             }\n             while (!shouldStop() && taskQueue.empty()) {\n                 // Wait until there is something to do."
      }
    ]
  },
  {
    "sha": "64e1e022cedf6776c5dffd488ca2e766adca5dc3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NGUxZTAyMmNlZGY2Nzc2YzVkZmZkNDg4Y2EyZTc2NmFkY2E1ZGMz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-10-29T19:35:06Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "message": "Use thread-safe atomic in perfmon seeder\n\nAlso switch to chrono based types.",
      "tree": {
        "sha": "9391261422d31946cf184a5fbb599649b48625aa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9391261422d31946cf184a5fbb599649b48625aa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d61f2bb076d8f17840a8e79f1583d7f6e3e6d09a"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 6,
      "deletions": 4
    },
    "files": [
      {
        "sha": "603c88eaabe1333e4418e2296d4e8f4a363d44fd",
        "filename": "src/randomenv.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/64e1e022cedf6776c5dffd488ca2e766adca5dc3/src/randomenv.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/64e1e022cedf6776c5dffd488ca2e766adca5dc3/src/randomenv.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/randomenv.cpp?ref=64e1e022cedf6776c5dffd488ca2e766adca5dc3",
        "patch": "@@ -19,6 +19,7 @@\n #endif\n \n #include <algorithm>\n+#include <atomic>\n #include <chrono>\n #include <climits>\n #include <thread>\n@@ -73,10 +74,11 @@ void RandAddSeedPerfmon(CSHA512& hasher)\n     // Seed with the entire set of perfmon data\n \n     // This can take up to 2 seconds, so only do it every 10 minutes\n-    static int64_t nLastPerfmon;\n-    if (GetTime() < nLastPerfmon + 10 * 60)\n-        return;\n-    nLastPerfmon = GetTime();\n+    static std::atomic<std::chrono::seconds> last_perfmon{std::chrono::seconds{0}};\n+    auto last_time = last_perfmon.load();\n+    auto current_time = GetTime<std::chrono::seconds>();\n+    if (current_time < last_time + std::chrono::minutes{10}) return;\n+    last_perfmon = current_time;\n \n     std::vector<unsigned char> vData(250000, 0);\n     long ret = 0;"
      }
    ]
  },
  {
    "sha": "d1c02775aa74a0610809ac54bb241ddad61d2d8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWMwMjc3NWFhNzRhMDYxMDgwOWFjNTRiYjI0MWRkYWQ2MWQyZDhj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-05T18:54:20Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2019-11-12T23:35:26Z"
      },
      "message": "Report amount of data gathered from environment",
      "tree": {
        "sha": "13e7fe1e6c46f0870f0e308c72d7957717be95fe",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/13e7fe1e6c46f0870f0e308c72d7957717be95fe"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1c02775aa74a0610809ac54bb241ddad61d2d8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1c02775aa74a0610809ac54bb241ddad61d2d8c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64e1e022cedf6776c5dffd488ca2e766adca5dc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64e1e022cedf6776c5dffd488ca2e766adca5dc3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64e1e022cedf6776c5dffd488ca2e766adca5dc3"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 5,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fc7dd1b87eaae4f37a733379d12250f2f5b1fc77",
        "filename": "src/crypto/sha512.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1c02775aa74a0610809ac54bb241ddad61d2d8c/src/crypto/sha512.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1c02775aa74a0610809ac54bb241ddad61d2d8c/src/crypto/sha512.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/sha512.h?ref=d1c02775aa74a0610809ac54bb241ddad61d2d8c",
        "patch": "@@ -23,6 +23,7 @@ class CSHA512\n     CSHA512& Write(const unsigned char* data, size_t len);\n     void Finalize(unsigned char hash[OUTPUT_SIZE]);\n     CSHA512& Reset();\n+    uint64_t Size() const { return bytes; }\n };\n \n #endif // BITCOIN_CRYPTO_SHA512_H"
      },
      {
        "sha": "3e6398f7b49e3b580cd8e3e9631762d7a23fe226",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1c02775aa74a0610809ac54bb241ddad61d2d8c/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1c02775aa74a0610809ac54bb241ddad61d2d8c/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=d1c02775aa74a0610809ac54bb241ddad61d2d8c",
        "patch": "@@ -525,7 +525,9 @@ static void SeedPeriodic(CSHA512& hasher, RNGState& rng)\n     SeedTimestamp(hasher);\n \n     // Dynamic environment data (performance monitoring, ...)\n+    auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n+    LogPrintf(\"Feeding %i bytes of dynamic environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 10 ms\n     SeedStrengthen(hasher, rng, 10000);\n@@ -540,10 +542,12 @@ static void SeedStartup(CSHA512& hasher, RNGState& rng) noexcept\n     SeedSlow(hasher);\n \n     // Dynamic environment data (performance monitoring, ...)\n+    auto old_size = hasher.Size();\n     RandAddDynamicEnv(hasher);\n \n     // Static environment data\n     RandAddStaticEnv(hasher);\n+    LogPrintf(\"Feeding %i bytes of environment data into RNG\\n\", hasher.Size() - old_size);\n \n     // Strengthen for 100 ms\n     SeedStrengthen(hasher, rng, 100000);"
      }
    ]
  }
]