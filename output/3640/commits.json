[
  {
    "sha": "b523a1a9a2cfe7da964859d05cffedf2f030e74d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNTIzYTFhOWEyY2ZlN2RhOTY0ODU5ZDA1Y2ZmZWRmMmYwMzBlNzRk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-02-07T14:38:22Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-05-10T08:56:18Z"
      },
      "message": "Make datadir handling more consistent\n\n- Don't error out with an exception when it is impossible to create\n  the default data directory, but return an empty datadir just like\n  when otherwise passing an invalid datadir.\n\n- Move --help handling before data directory check and config\n  file parsing.\n\n- Don't force existence of datadir in bitcoin-cli. It\n  should be possible to run it without.\n\n- Don't log in BitcoinApplication::~BitcoinApplication(), it's very\n  possible that the data directory isn't set up. This avoids creating\n  ~/.bitcoin on bitcoin-qt --help.",
      "tree": {
        "sha": "01cbf372c30f9deee0df9ad8a6b6b4efa2b5b5be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/01cbf372c30f9deee0df9ad8a6b6b4efa2b5b5be"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b523a1a9a2cfe7da964859d05cffedf2f030e74d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b523a1a9a2cfe7da964859d05cffedf2f030e74d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b523a1a9a2cfe7da964859d05cffedf2f030e74d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b523a1a9a2cfe7da964859d05cffedf2f030e74d/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "605d5b55582f00ea8a089fe632cd8a52e951126b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/605d5b55582f00ea8a089fe632cd8a52e951126b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/605d5b55582f00ea8a089fe632cd8a52e951126b"
      }
    ],
    "stats": {
      "total": 91,
      "additions": 51,
      "deletions": 40
    },
    "files": [
      {
        "sha": "1f86b321b74c5b294083fda3472e3b3cde13f273",
        "filename": "src/bitcoin-cli.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/bitcoin-cli.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/bitcoin-cli.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-cli.cpp?ref=b523a1a9a2cfe7da964859d05cffedf2f030e74d",
        "patch": "@@ -22,23 +22,6 @@ static bool AppInitRPC(int argc, char* argv[])\n     // Parameters\n     //\n     ParseParameters(argc, argv);\n-    if (!boost::filesystem::is_directory(GetDataDir(false)))\n-    {\n-        fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n-        return false;\n-    }\n-    try {\n-        ReadConfigFile(mapArgs, mapMultiArgs);\n-    } catch(std::exception &e) {\n-        fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n-        return false;\n-    }\n-    // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n-    if (!SelectParamsFromCommandLine()) {\n-        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n-        return false;\n-    }\n-\n     if (argc<2 || mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n     {\n         // First part of help message is specific to RPC client\n@@ -53,6 +36,23 @@ static bool AppInitRPC(int argc, char* argv[])\n         fprintf(stdout, \"%s\", strUsage.c_str());\n         return false;\n     }\n+    // Allow the data directory to not exist or not be creatable,\n+    // in that case don't read the config file.\n+    if (boost::filesystem::is_directory(GetDataDir(false)))\n+    {\n+        try {\n+            ReadConfigFile(mapArgs, mapMultiArgs);\n+        } catch(std::exception &e) {\n+            fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n+            return false;\n+        }\n+    }\n+    // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+    if (!SelectParamsFromCommandLine()) {\n+        fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+        return false;\n+    }\n+\n     return true;\n }\n "
      },
      {
        "sha": "92bc9b5f9913a034f9e92925554f9fb2bb59f9ac",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 18,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=b523a1a9a2cfe7da964859d05cffedf2f030e74d",
        "patch": "@@ -65,24 +65,6 @@ bool AppInit(int argc, char* argv[])\n         //\n         // If Qt is used, parameters/bitcoin.conf are parsed in qt/bitcoin.cpp's main()\n         ParseParameters(argc, argv);\n-        if (!boost::filesystem::is_directory(GetDataDir(false)))\n-        {\n-            fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n-            return false;\n-        }\n-        try\n-        {\n-            ReadConfigFile(mapArgs, mapMultiArgs);\n-        } catch(std::exception &e) {\n-            fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n-            return false;\n-        }\n-        // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n-        if (!SelectParamsFromCommandLine()) {\n-            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n-            return false;\n-        }\n-\n         if (mapArgs.count(\"-?\") || mapArgs.count(\"--help\"))\n         {\n             // First part of help message is specific to bitcoind / RPC client\n@@ -101,6 +83,30 @@ bool AppInit(int argc, char* argv[])\n             return false;\n         }\n \n+        if (!boost::filesystem::is_directory(GetDataDir(false)))\n+        {\n+            if(mapArgs.count(\"-datadir\"))\n+            {\n+                fprintf(stderr, \"Error: Specified data directory \\\"%s\\\" does not exist.\\n\", mapArgs[\"-datadir\"].c_str());\n+            } else {\n+                fprintf(stderr, \"Error: Default data directory could not be created\\n\");\n+            }\n+            return false;\n+        }\n+\n+        try\n+        {\n+            ReadConfigFile(mapArgs, mapMultiArgs);\n+        } catch(std::exception &e) {\n+            fprintf(stderr,\"Error reading configuration file: %s\\n\", e.what());\n+            return false;\n+        }\n+        // Check for -testnet or -regtest parameter (TestNet() calls are only valid after this clause)\n+        if (!SelectParamsFromCommandLine()) {\n+            fprintf(stderr, \"Error: Invalid combination of -regtest and -testnet.\\n\");\n+            return false;\n+        }\n+\n         // Command-line RPC\n         bool fCommandLine = false;\n         for (int i = 1; i < argc; i++)"
      },
      {
        "sha": "e2a943270d63ef5d844ad95bcea6d1eed11e825c",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b523a1a9a2cfe7da964859d05cffedf2f030e74d",
        "patch": "@@ -290,10 +290,11 @@ BitcoinApplication::BitcoinApplication(int &argc, char **argv):\n \n BitcoinApplication::~BitcoinApplication()\n {\n-    LogPrintf(\"Stopping thread\\n\");\n+    /* Do not use logging here, as it will write to the data directory\n+     * which may not even have been initialized yet.\n+     */\n     emit stopThread();\n     coreThread->wait();\n-    LogPrintf(\"Stopped thread\\n\");\n \n     delete window;\n     window = 0;"
      },
      {
        "sha": "405649fd56a5c370ef1af88f099b9d4ec51f8d9d",
        "filename": "src/rpcclient.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/rpcclient.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/rpcclient.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcclient.cpp?ref=b523a1a9a2cfe7da964859d05cffedf2f030e74d",
        "patch": "@@ -32,7 +32,7 @@ Object CallRPC(const string& strMethod, const Array& params)\n {\n     if (mapArgs[\"-rpcuser\"] == \"\" && mapArgs[\"-rpcpassword\"] == \"\")\n         throw runtime_error(strprintf(\n-            _(\"You must set rpcpassword=<password> in the configuration file:\\n%s\\n\"\n+            _(\"You must set rpcpassword=<password> in the configuration file or pass it on the command line:\\n%s\\n\"\n               \"If the file does not exist, create it with owner-readable-only file permissions.\"),\n                 GetConfigFile().string().c_str()));\n "
      },
      {
        "sha": "7bc923c5fe3a48859410c46f16cfbb3d165f3e79",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b523a1a9a2cfe7da964859d05cffedf2f030e74d/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b523a1a9a2cfe7da964859d05cffedf2f030e74d",
        "patch": "@@ -939,7 +939,6 @@ boost::filesystem::path GetDefaultDataDir()\n #ifdef MAC_OSX\n     // Mac\n     pathRet /= \"Library/Application Support\";\n-    TryCreateDirectory(pathRet);\n     return pathRet / \"Bitcoin\";\n #else\n     // Unix\n@@ -979,7 +978,12 @@ const boost::filesystem::path &GetDataDir(bool fNetSpecific)\n     if (fNetSpecific)\n         path /= Params().DataDir();\n \n-    fs::create_directories(path);\n+    try {\n+        fs::create_directories(path);\n+    } catch(boost::filesystem::filesystem_error &e) {\n+        path = \"\";\n+        return path;\n+    }\n \n     return path;\n }"
      }
    ]
  }
]