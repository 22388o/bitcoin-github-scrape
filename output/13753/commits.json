[
  {
    "sha": "12dd1013454a3b4913e8e6bbac251887e7e82ff0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMmRkMTAxMzQ1NGEzYjQ5MTNlOGU2YmJhYzI1MTg4N2U3ZTgyZmYw",
    "commit": {
      "author": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-07-24T15:59:49Z"
      },
      "committer": {
        "name": "Jo\u00e3o Barbosa",
        "email": "joao.paulo.barbosa@gmail.com",
        "date": "2018-07-24T19:46:23Z"
      },
      "message": "scripted-diff: Remove trailing whitespaces\n\n-BEGIN VERIFY SCRIPT-\n\nsed --in-place'' --regexp-extended 's/[[:space:]]+$//g' $(git grep -I --files-with-matches --extended-regexp '[[:space:]]+$' -- src test  ':!*.svg' ':!src/crypto/sha256_sse4*' ':!src/leveldb' ':!src/qt/locale' ':!src/secp256k1' ':!src/univalue')\n\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "74edb97303620fd3ce9db676ab0c8f5664c81e58",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/74edb97303620fd3ce9db676ab0c8f5664c81e58"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/12dd1013454a3b4913e8e6bbac251887e7e82ff0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dd1013454a3b4913e8e6bbac251887e7e82ff0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/12dd1013454a3b4913e8e6bbac251887e7e82ff0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/12dd1013454a3b4913e8e6bbac251887e7e82ff0/comments",
    "author": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5f7575e2636413b7d220088e8b7aca6f0d0a5cc2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5f7575e2636413b7d220088e8b7aca6f0d0a5cc2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5f7575e2636413b7d220088e8b7aca6f0d0a5cc2"
      }
    ],
    "stats": {
      "total": 304,
      "additions": 152,
      "deletions": 152
    },
    "files": [
      {
        "sha": "c7a19631359b643754d6225fe58c3af5cabf25ae",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -357,7 +357,7 @@ if ENABLE_WALLET\n BITCOIN_QT_CPP += $(BITCOIN_QT_WALLET_CPP)\n endif\n \n-RES_IMAGES = \n+RES_IMAGES =\n \n RES_MOVIES = $(wildcard $(srcdir)/qt/res/movies/spinner-*.png)\n "
      },
      {
        "sha": "3337ec54db40fc9b1b8d27a22408d6c5ef813c70",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -356,7 +356,7 @@ CAddrInfo CAddrMan::Select_(bool newOnly)\n \n     // Use a 50% chance for choosing between tried and new table entries.\n     if (!newOnly &&\n-       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) { \n+       (nTried > 0 && (nNew == 0 || RandomInt(2) == 0))) {\n         // use a tried node\n         double fChanceFactor = 1.0;\n         while (1) {"
      },
      {
        "sha": "dc8ef8375b096a4c39d63163a6628470893b6ae7",
        "filename": "src/addrman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/addrman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/addrman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -182,8 +182,8 @@ class CAddrInfo : public CAddress\n //! the maximum number of tried addr collisions to store\n #define ADDRMAN_SET_TRIED_COLLISION_SIZE 10\n \n-/** \n- * Stochastical (IP) address manager \n+/**\n+ * Stochastical (IP) address manager\n  */\n class CAddrMan\n {"
      },
      {
        "sha": "799e0eef00aa45cdaf7bfc674b02dd621cdb6e5a",
        "filename": "src/bloom.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/bloom.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/bloom.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -148,7 +148,7 @@ bool CBloomFilter::IsRelevantAndUpdate(const CTransaction& tx)\n         const CTxOut& txout = tx.vout[i];\n         // Match if the filter contains any arbitrary script data element in any scriptPubKey in tx\n         // If this matches, also add the specific output that was matched.\n-        // This means clients don't have to update the filter themselves when a new relevant tx \n+        // This means clients don't have to update the filter themselves when a new relevant tx\n         // is discovered in order to find spending transactions, which avoids round-tripping and race conditions.\n         CScript::const_iterator pc = txout.scriptPubKey.begin();\n         std::vector<unsigned char> data;"
      },
      {
        "sha": "71386f52faa21bf707bc1f9cf5d7480135702b35",
        "filename": "src/bloom.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/bloom.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/bloom.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bloom.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -33,9 +33,9 @@ enum bloomflags\n /**\n  * BloomFilter is a probabilistic filter which SPV clients provide\n  * so that we can filter the transactions we send them.\n- * \n+ *\n  * This allows for significantly more efficient transaction and block downloads.\n- * \n+ *\n  * Because bloom filters are probabilistic, a SPV node can increase the false-\n  * positive rate, making us send it transactions which aren't actually its,\n  * allowing clients to trade more bandwidth for more privacy by obfuscating which"
      },
      {
        "sha": "84360d0716408412f82db043975383d3429dcf4c",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -16,7 +16,7 @@\n template <typename T>\n class CCheckQueueControl;\n \n-/** \n+/**\n  * Queue for verifications that have to be performed.\n   * The verifications are represented by a type T, which must provide an\n   * operator(), returning a bool.\n@@ -163,7 +163,7 @@ class CCheckQueue\n \n };\n \n-/** \n+/**\n  * RAII-style controller object for a CCheckQueue that guarantees the passed\n  * queue is finished before continuing.\n  */"
      },
      {
        "sha": "a3eb127ca8d73ca105bb25a2fca0f0aca5335f44",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -81,8 +81,8 @@ std::string FormatFullVersion()\n     return CLIENT_BUILD;\n }\n \n-/** \n- * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki) \n+/**\n+ * Format the subversion field according to BIP 14 spec (https://github.com/bitcoin/bips/blob/master/bip-0014.mediawiki)\n  */\n std::string FormatSubVersion(const std::string& name, int nClientVersion, const std::vector<std::string>& comments)\n {"
      },
      {
        "sha": "89685ce4b2bb7260a4139eb6bf59e0e49892cfcf",
        "filename": "src/coins.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/coins.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/coins.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/coins.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -203,7 +203,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n protected:\n     /**\n      * Make mutable so that we can \"fill the cache\" even from Get-methods\n-     * declared as \"const\".  \n+     * declared as \"const\".\n      */\n     mutable uint256 hashBlock;\n     mutable CCoinsMap cacheCoins;\n@@ -280,7 +280,7 @@ class CCoinsViewCache : public CCoinsViewBacked\n     //! Calculate the size of the cache (in bytes)\n     size_t DynamicMemoryUsage() const;\n \n-    /** \n+    /**\n      * Amount of bitcoins coming in to a transaction\n      * Note that lightweight clients may not know anything besides the hash of previous transactions,\n      * so may not be able to calculate this."
      },
      {
        "sha": "50db1775a3766cf6ebc737e44b193e22dd19696b",
        "filename": "src/consensus/tx_verify.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/consensus/tx_verify.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/consensus/tx_verify.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/tx_verify.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -41,7 +41,7 @@ unsigned int GetLegacySigOpCount(const CTransaction& tx);\n \n /**\n  * Count ECDSA signature operations in pay-to-script-hash inputs.\n- * \n+ *\n  * @param[in] mapInputs Map of previous transactions that have outputs we're spending\n  * @return maximum number of sigops required to validate this transaction's inputs\n  * @see CTransaction::FetchInputs"
      },
      {
        "sha": "64283f740fa51110d3214c7ead19b44d83310732",
        "filename": "src/core_read.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/core_read.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/core_read.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_read.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -105,7 +105,7 @@ static bool CheckTxScriptsSanity(const CMutableTransaction& tx)\n             return false;\n         }\n     }\n-    \n+\n     return true;\n }\n \n@@ -140,7 +140,7 @@ bool DecodeHexTx(CMutableTransaction& tx, const std::string& hex_tx, bool try_no\n             // Fall through.\n         }\n     }\n-    \n+\n     return false;\n }\n "
      },
      {
        "sha": "0e5b497960dbd055a6626c3c04cac13adb67ce74",
        "filename": "src/httprpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/httprpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/httprpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/httprpc.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -86,7 +86,7 @@ static void JSONErrorReply(HTTPRequest* req, const UniValue& objError, const Uni\n //This function checks username and password against -rpcauth\n //entries from config file.\n static bool multiUserAuthorized(std::string strUserPass)\n-{    \n+{\n     if (strUserPass.find(':') == std::string::npos) {\n         return false;\n     }"
      },
      {
        "sha": "22dde5ec36b03840e2750f5e4833182e765cc8b5",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -70,7 +70,7 @@ class limitedmap\n         // since it is a constant time operation in C++11. For more details, see\n         // https://stackoverflow.com/questions/765148/how-to-remove-constness-of-const-iterator\n         iterator itTarget = map.erase(itIn, itIn);\n-        \n+\n         if (itTarget == map.end())\n             return;\n         std::pair<rmap_iterator, rmap_iterator> itPair = rmap.equal_range(itTarget->second);"
      },
      {
        "sha": "c8f8b9c7d348a8da549e56b56af6b0a75d989d25",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -470,13 +470,13 @@ void BitcoinGUI::setClientModel(ClientModel *_clientModel)\n         }\n #endif // ENABLE_WALLET\n         unitDisplayControl->setOptionsModel(_clientModel->getOptionsModel());\n-        \n+\n         OptionsModel* optionsModel = _clientModel->getOptionsModel();\n         if(optionsModel)\n         {\n             // be aware of the tray icon disable state change reported by the OptionsModel object.\n             connect(optionsModel,SIGNAL(hideTrayIconChanged(bool)),this,SLOT(setTrayIconVisible(bool)));\n-        \n+\n             // initialize the disable state of the tray icon with the current value in the model.\n             setTrayIconVisible(optionsModel->getHideTrayIcon());\n         }\n@@ -1057,7 +1057,7 @@ void BitcoinGUI::setHDStatus(int hdEnabled)\n     labelWalletHDStatusIcon->setPixmap(platformStyle->SingleColorIcon(hdEnabled ? \":/icons/hd_enabled\" : \":/icons/hd_disabled\").pixmap(STATUSBAR_ICONSIZE,STATUSBAR_ICONSIZE));\n     labelWalletHDStatusIcon->setToolTip(hdEnabled ? tr(\"HD key generation is <b>enabled</b>\") : tr(\"HD key generation is <b>disabled</b>\"));\n \n-    // eventually disable the QLabel to set its opacity to 50% \n+    // eventually disable the QLabel to set its opacity to 50%\n     labelWalletHDStatusIcon->setEnabled(hdEnabled);\n }\n "
      },
      {
        "sha": "d7ca8081d13318c838748e67a2715ff5bf90d61a",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -262,7 +262,7 @@ private Q_SLOTS:\n \n     /** Show progress dialog e.g. for verifychain */\n     void showProgress(const QString &title, int nProgress);\n-    \n+\n     /** When hideTrayIcon setting is changed in OptionsModel hide or show the icon accordingly. */\n     void setTrayIconVisible(bool);\n "
      },
      {
        "sha": "fd9b5b622ff1963a1952ce7235a332e94f81515b",
        "filename": "src/qt/guiutil.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/guiutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/guiutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -381,12 +381,12 @@ bool openBitcoinConf()\n \n     /* Create the file */\n     boost::filesystem::ofstream configFile(pathConfig, std::ios_base::app);\n-    \n+\n     if (!configFile.good())\n         return false;\n-    \n+\n     configFile.close();\n-    \n+\n     /* Open bitcoin.conf with the associated application */\n     return QDesktopServices::openUrl(QUrl::fromLocalFile(boostPathToQString(pathConfig)));\n }\n@@ -741,7 +741,7 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n     if (listSnapshot == nullptr) {\n         return nullptr;\n     }\n-    \n+\n     // loop through the list of startup items and try to find the bitcoin app\n     for(int i = 0; i < CFArrayGetCount(listSnapshot); i++) {\n         LSSharedFileListItemRef item = (LSSharedFileListItemRef)CFArrayGetValueAtIndex(listSnapshot, i);\n@@ -769,7 +769,7 @@ LSSharedFileListItemRef findStartupItemInList(LSSharedFileListRef list, CFURLRef\n             CFRelease(currentItemURL);\n         }\n     }\n-    \n+\n     CFRelease(listSnapshot);\n     return nullptr;\n }\n@@ -780,7 +780,7 @@ bool GetStartOnSystemStartup()\n     if (bitcoinAppUrl == nullptr) {\n         return false;\n     }\n-    \n+\n     LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n     LSSharedFileListItemRef foundItem = findStartupItemInList(loginItems, bitcoinAppUrl);\n \n@@ -794,7 +794,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n     if (bitcoinAppUrl == nullptr) {\n         return false;\n     }\n-    \n+\n     LSSharedFileListRef loginItems = LSSharedFileListCreate(nullptr, kLSSharedFileListSessionLoginItems, nullptr);\n     LSSharedFileListItemRef foundItem = findStartupItemInList(loginItems, bitcoinAppUrl);\n \n@@ -806,7 +806,7 @@ bool SetStartOnSystemStartup(bool fAutoStart)\n         // remove item\n         LSSharedFileListItemRemove(loginItems, foundItem);\n     }\n-    \n+\n     CFRelease(bitcoinAppUrl);\n     return true;\n }\n@@ -967,7 +967,7 @@ void ClickableLabel::mouseReleaseEvent(QMouseEvent *event)\n {\n     Q_EMIT clicked(event->pos());\n }\n-    \n+\n void ClickableProgressBar::mouseReleaseEvent(QMouseEvent *event)\n {\n     Q_EMIT clicked(event->pos());"
      },
      {
        "sha": "5d09ccdae7ff2b3e889185e5e874b30b124e5410",
        "filename": "src/qt/guiutil.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/guiutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/guiutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/guiutil.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -219,11 +219,11 @@ namespace GUIUtil\n     protected:\n         void mouseReleaseEvent(QMouseEvent *event);\n     };\n-    \n+\n     class ClickableProgressBar : public QProgressBar\n     {\n         Q_OBJECT\n-        \n+\n     Q_SIGNALS:\n         /** Emitted when the progressbar is clicked. The relative mouse coordinates of the click are\n          * passed to the signal."
      },
      {
        "sha": "b9ad191da774f238635ccde852b35fa6a8cefc57",
        "filename": "src/qt/macdockiconhandler.mm",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/macdockiconhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/macdockiconhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macdockiconhandler.mm?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -19,17 +19,17 @@\n bool dockClickHandler(id self,SEL _cmd,...) {\n     Q_UNUSED(self)\n     Q_UNUSED(_cmd)\n-    \n+\n     s_instance->handleDockIconClickEvent();\n-    \n+\n     // Return NO (false) to suppress the default OS X actions\n     return false;\n }\n \n void setupDockClickHandler() {\n     Class cls = objc_getClass(\"NSApplication\");\n     id appInst = objc_msgSend((id)cls, sel_registerName(\"sharedApplication\"));\n-    \n+\n     if (appInst != nullptr) {\n         id delegate = objc_msgSend(appInst, sel_registerName(\"delegate\"));\n         Class delClass = (Class)objc_msgSend(delegate,  sel_registerName(\"class\"));"
      },
      {
        "sha": "0e04d50baa4645315c3fe02e436b2facb510289a",
        "filename": "src/qt/macnotificationhandler.mm",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/macnotificationhandler.mm",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/macnotificationhandler.mm",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/macnotificationhandler.mm?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -64,7 +64,7 @@ - (NSString *)__bundleIdentifier\n     static MacNotificationHandler *s_instance = nullptr;\n     if (!s_instance) {\n         s_instance = new MacNotificationHandler();\n-        \n+\n         Class aPossibleClass = objc_getClass(\"NSBundle\");\n         if (aPossibleClass) {\n             // change NSBundle -bundleIdentifier method to return a correct bundle identifier"
      },
      {
        "sha": "e9d03c5828c47db06d97b4280ebbd5ccbdc5a9d4",
        "filename": "src/qt/modaloverlay.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/modaloverlay.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/modaloverlay.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/modaloverlay.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -104,7 +104,7 @@ void ModalOverlay::tipUpdate(int count, const QDateTime& blockDate, double nVeri\n         ui->progressIncreasePerH->setText(QString::number(progressPerHour * 100, 'f', 2)+\"%\");\n \n         // show expected remaining time\n-        if(remainingMSecs >= 0) {\t\n+        if(remainingMSecs >= 0) {\n             ui->expectedTimeLeft->setText(GUIUtil::formatNiceTimeOffset(remainingMSecs / 1000.0));\n         } else {\n             ui->expectedTimeLeft->setText(QObject::tr(\"unknown\"));"
      },
      {
        "sha": "54e1a8a9b1d8a7cc91e96dacc5b1098f41269f96",
        "filename": "src/qt/optionsdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/optionsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/optionsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -50,7 +50,7 @@ private Q_SLOTS:\n     void on_openBitcoinConfButton_clicked();\n     void on_okButton_clicked();\n     void on_cancelButton_clicked();\n-    \n+\n     void on_hideTrayIcon_stateChanged(int fState);\n \n     void togglePruneWarning(bool enabled);"
      },
      {
        "sha": "834ff7633c0762ea309148f4fc28935c18087f10",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -57,7 +57,7 @@ void OptionsModel::Init(bool resetSettings)\n         settings.setValue(\"fHideTrayIcon\", false);\n     fHideTrayIcon = settings.value(\"fHideTrayIcon\").toBool();\n     Q_EMIT hideTrayIconChanged(fHideTrayIcon);\n-    \n+\n     if (!settings.contains(\"fMinimizeToTray\"))\n         settings.setValue(\"fMinimizeToTray\", false);\n     fMinimizeToTray = settings.value(\"fMinimizeToTray\").toBool() && !fHideTrayIcon;"
      },
      {
        "sha": "9ad9e66ae25ce0ff2dde270933d2b05fcd25e7b1",
        "filename": "src/qt/qvalidatedlineedit.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/qvalidatedlineedit.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/qvalidatedlineedit.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/qvalidatedlineedit.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -34,7 +34,7 @@ public Q_SLOTS:\n \n Q_SIGNALS:\n     void validationDidChange(QValidatedLineEdit *validatedLineEdit);\n-    \n+\n private Q_SLOTS:\n     void markValid();\n     void checkValidity();"
      },
      {
        "sha": "a5551ec014cb779158fcfee98d0fc968ec301353",
        "filename": "src/qt/trafficgraphwidget.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/trafficgraphwidget.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/trafficgraphwidget.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/trafficgraphwidget.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -80,7 +80,7 @@ void TrafficGraphWidget::paintEvent(QPaintEvent *)\n \n     const QString units     = tr(\"KB/s\");\n     const float yMarginText = 2.0;\n-    \n+\n     // draw lines\n     painter.setPen(axisCol);\n     painter.drawText(XMARGIN, YMARGIN + h - h * val / fMax-yMarginText, QString(\"%1 %2\").arg(val).arg(units));"
      },
      {
        "sha": "c53a2910e5b3dfb9b1acf93d560c004b21b3e826",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -107,7 +107,7 @@ void WalletView::setBitcoinGUI(BitcoinGUI *gui)\n         // Pass through transaction notifications\n         connect(this, SIGNAL(incomingTransaction(QString,int,CAmount,QString,QString,QString,QString)), gui, SLOT(incomingTransaction(QString,int,CAmount,QString,QString,QString,QString)));\n \n-        // Connect HD enabled state signal \n+        // Connect HD enabled state signal\n         connect(this, SIGNAL(hdEnabledStatusChanged()), gui, SLOT(updateWalletStatus()));\n     }\n }"
      },
      {
        "sha": "729d8c11ccfec5bc8e23cc433a26610651bbf5d8",
        "filename": "src/reverse_iterator.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/reverse_iterator.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/reverse_iterator.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/reverse_iterator.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -5,7 +5,7 @@\n \n /**\n  * Template used for reverse iteration in C++11 range-based for loops.\n- * \n+ *\n  *   std::vector<int> v = {1, 2, 3, 4, 5};\n  *   for (auto x : reverse_iterate(v))\n  *       std::cout << x << \" \";\n@@ -15,21 +15,21 @@ template <typename T>\n class reverse_range\n {\n     T &m_x;\n-    \n+\n public:\n     explicit reverse_range(T &x) : m_x(x) {}\n-    \n+\n     auto begin() const -> decltype(this->m_x.rbegin())\n     {\n         return m_x.rbegin();\n     }\n-    \n+\n     auto end() const -> decltype(this->m_x.rend())\n     {\n         return m_x.rend();\n     }\n };\n- \n+\n template <typename T>\n reverse_range<T> reverse_iterate(T &x)\n {"
      },
      {
        "sha": "1936d44cd56c87322af12b6407cc2ea25fcc6e75",
        "filename": "src/script/interpreter.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/script/interpreter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/script/interpreter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/interpreter.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -99,7 +99,7 @@ bool static IsCompressedPubKey(const valtype &vchPubKey) {\n  * Where R and S are not negative (their first byte has its highest bit not set), and not\n  * excessively padded (do not start with a 0 byte, unless an otherwise negative number follows,\n  * in which case a single 0 byte is necessary and even required).\n- * \n+ *\n  * See https://bitcointalk.org/index.php?topic=8392.msg127623#msg127623\n  *\n  * This function is consensus-critical since BIP66.\n@@ -139,7 +139,7 @@ bool static IsValidSignatureEncoding(const std::vector<unsigned char> &sig) {\n     // Verify that the length of the signature matches the sum of the length\n     // of the elements.\n     if ((size_t)(lenR + lenS + 7) != sig.size()) return false;\n- \n+\n     // Check whether the R element is an integer.\n     if (sig[2] != 0x02) return false;\n \n@@ -899,7 +899,7 @@ bool EvalScript(std::vector<std::vector<unsigned char> >& stack, const CScript&\n                     popstack(stack);\n                     stack.push_back(vchHash);\n                 }\n-                break;                                   \n+                break;\n \n                 case OP_CODESEPARATOR:\n                 {"
      },
      {
        "sha": "99d4c893f22088c2b43f548bc4aafe1dee1678ac",
        "filename": "src/serialize.h",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/serialize.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/serialize.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/serialize.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -173,11 +173,11 @@ template<typename X> const X& ReadWriteAsHelper(const X& x) { return x; }\n #define READWRITE(...) (::SerReadWriteMany(s, ser_action, __VA_ARGS__))\n #define READWRITEAS(type, obj) (::SerReadWriteMany(s, ser_action, ReadWriteAsHelper<type>(obj)))\n \n-/** \n+/**\n  * Implement three methods for serializable objects. These are actually wrappers over\n  * \"SerializationOp\" template, which implements the body of each class' serialization\n  * code. Adding \"ADD_SERIALIZE_METHODS\" in the body of the class causes these wrappers to be\n- * added as members. \n+ * added as members.\n  */\n #define ADD_SERIALIZE_METHODS                                         \\\n     template<typename Stream>                                         \\\n@@ -312,16 +312,16 @@ uint64_t ReadCompactSize(Stream& is)\n  * sure the encoding is one-to-one, one is subtracted from all but the last digit.\n  * Thus, the byte sequence a[] with length len, where all but the last byte\n  * has bit 128 set, encodes the number:\n- * \n+ *\n  *  (a[len-1] & 0x7F) + sum(i=1..len-1, 128^i*((a[len-i-1] & 0x7F)+1))\n- * \n+ *\n  * Properties:\n  * * Very small (0-127: 1 byte, 128-16511: 2 bytes, 16512-2113663: 3 bytes)\n  * * Every integer has exactly one encoding\n  * * Encoding does not depend on size of original integer type\n  * * No redundancy: every (infinite) byte sequence corresponds to a list\n  *   of encoded integers.\n- * \n+ *\n  * 0:         [0x00]  256:        [0x81 0x00]\n  * 1:         [0x01]  16383:      [0xFE 0x7F]\n  * 127:       [0x7F]  16384:      [0xFF 0x00]"
      },
      {
        "sha": "ed2e985d76ef7530f098a09056a98883c9d14636",
        "filename": "src/streams.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/streams.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/streams.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/streams.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -348,7 +348,7 @@ class CDataStream\n         if (nReadPosNext > vch.size()) {\n             throw std::ios_base::failure(\"CDataStream::read(): end of data\");\n         }\n-        memcpy(pch, &vch[nReadPos], nSize);        \n+        memcpy(pch, &vch[nReadPos], nSize);\n         if (nReadPosNext == vch.size())\n         {\n             nReadPos = 0;\n@@ -456,7 +456,7 @@ class CAutoFile\n     const int nType;\n     const int nVersion;\n \n-    FILE* file;\t\n+    FILE* file;\n \n public:\n     CAutoFile(FILE* filenew, int nTypeIn, int nVersionIn) : nType(nTypeIn), nVersion(nVersionIn)"
      },
      {
        "sha": "f2a4cb1818fcffeae1732c74fc3af1ee537b5911",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -42,12 +42,12 @@ unit tests as possible).\n \n The build system is setup to compile an executable called `test_bitcoin`\n that runs all of the unit tests.  The main source file is called\n-test_bitcoin.cpp. To add a new unit test file to our test suite you need \n-to add the file to `src/Makefile.test.include`. The pattern is to create \n-one test file for each class or source file for which you want to create \n-unit tests.  The file naming convention is `<source_filename>_tests.cpp` \n-and such files should wrap their tests in a test suite \n-called `<source_filename>_tests`. For an example of this pattern, \n+test_bitcoin.cpp. To add a new unit test file to our test suite you need\n+to add the file to `src/Makefile.test.include`. The pattern is to create\n+one test file for each class or source file for which you want to create\n+unit tests.  The file naming convention is `<source_filename>_tests.cpp`\n+and such files should wrap their tests in a test suite\n+called `<source_filename>_tests`. For an example of this pattern,\n examine `uint256_tests.cpp`.\n \n For further reading, I found the following website to be helpful in"
      },
      {
        "sha": "9b52943ac6cdaadf63543da9040c36d0bd0a4b62",
        "filename": "src/test/data/key_io_invalid.json",
        "status": "modified",
        "additions": 49,
        "deletions": 49,
        "changes": 98,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/data/key_io_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/data/key_io_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/key_io_invalid.json?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -1,151 +1,151 @@\n [\n     [\n         \"\"\n-    ], \n+    ],\n     [\n         \"x\"\n-    ], \n+    ],\n     [\n         \"37qgekLpCCHrQuSjvX3fs496FWTGsHFHizjJAs6NPcR47aefnnCWECAhHV6E3g4YN7u7Yuwod5Y\"\n-    ], \n+    ],\n     [\n         \"dzb7VV1Ui55BARxv7ATxAtCUeJsANKovDGWFVgpTbhq9gvPqP3yv\"\n-    ], \n+    ],\n     [\n         \"MuNu7ZAEDFiHthiunm7dPjwKqrVNCM3mAz6rP9zFveQu14YA8CxExSJTHcVP9DErn6u84E6Ej7S\"\n-    ], \n+    ],\n     [\n         \"rPpQpYknyNQ5AEHuY6H8ijJJrYc2nDKKk9jjmKEXsWzyAQcFGpDLU2Zvsmoi8JLR7hAwoy3RQWf\"\n-    ], \n+    ],\n     [\n         \"4Uc3FmN6NQ6zLBK5QQBXRBUREaaHwCZYsGCueHauuDmJpZKn6jkEskMB2Zi2CNgtb5r6epWEFfUJq\"\n-    ], \n+    ],\n     [\n         \"7aQgR5DFQ25vyXmqZAWmnVCjL3PkBcdVkBUpjrjMTcghHx3E8wb\"\n-    ], \n+    ],\n     [\n         \"17QpPprjeg69fW1DV8DcYYCKvWjYhXvWkov6MJ1iTTvMFj6weAqW7wybZeH57WTNxXVCRH4veVs\"\n-    ], \n+    ],\n     [\n         \"KxuACDviz8Xvpn1xAh9MfopySZNuyajYMZWz16Dv2mHHryznWUp3\"\n-    ], \n+    ],\n     [\n         \"7nK3GSmqdXJQtdohvGfJ7KsSmn3TmGqExug49583bDAL91pVSGq5xS9SHoAYL3Wv3ijKTit65th\"\n-    ], \n+    ],\n     [\n         \"cTivdBmq7bay3RFGEBBuNfMh2P1pDCgRYN2Wbxmgwr4ki3jNUL2va\"\n-    ], \n+    ],\n     [\n         \"gjMV4vjNjyMrna4fsAr8bWxAbwtmMUBXJS3zL4NJt5qjozpbQLmAfK1uA3CquSqsZQMpoD1g2nk\"\n-    ], \n+    ],\n     [\n         \"emXm1naBMoVzPjbk7xpeTVMFy4oDEe25UmoyGgKEB1gGWsK8kRGs\"\n-    ], \n+    ],\n     [\n         \"7VThQnNRj1o3Zyvc7XHPRrjDf8j2oivPTeDXnRPYWeYGE4pXeRJDZgf28ppti5hsHWXS2GSobdqyo\"\n-    ], \n+    ],\n     [\n         \"1G9u6oCVCPh2o8m3t55ACiYvG1y5BHewUkDSdiQarDcYXXhFHYdzMdYfUAhfxn5vNZBwpgUNpso\"\n-    ], \n+    ],\n     [\n         \"31QQ7ZMLkScDiB4VyZjuptr7AEc9j1SjstF7pRoLhHTGkW4Q2y9XELobQmhhWxeRvqcukGd1XCq\"\n-    ], \n+    ],\n     [\n         \"DHqKSnpxa8ZdQyH8keAhvLTrfkyBMQxqngcQA5N8LQ9KVt25kmGN\"\n-    ], \n+    ],\n     [\n         \"2LUHcJPbwLCy9GLH1qXmfmAwvadWw4bp4PCpDfduLqV17s6iDcy1imUwhQJhAoNoN1XNmweiJP4i\"\n-    ], \n+    ],\n     [\n         \"7USRzBXAnmck8fX9HmW7RAb4qt92VFX6soCnts9s74wxm4gguVhtG5of8fZGbNPJA83irHVY6bCos\"\n-    ], \n+    ],\n     [\n         \"1DGezo7BfVebZxAbNT3XGujdeHyNNBF3vnficYoTSp4PfK2QaML9bHzAMxke3wdKdHYWmsMTJVu\"\n-    ], \n+    ],\n     [\n         \"2D12DqDZKwCxxkzs1ZATJWvgJGhQ4cFi3WrizQ5zLAyhN5HxuAJ1yMYaJp8GuYsTLLxTAz6otCfb\"\n-    ], \n+    ],\n     [\n         \"8AFJzuTujXjw1Z6M3fWhQ1ujDW7zsV4ePeVjVo7D1egERqSW9nZ\"\n-    ], \n+    ],\n     [\n         \"163Q17qLbTCue8YY3AvjpUhotuaodLm2uqMhpYirsKjVqnxJRWTEoywMVY3NbBAHuhAJ2cF9GAZ\"\n-    ], \n+    ],\n     [\n         \"2MnmgiRH4eGLyLc9eAqStzk7dFgBjFtUCtu\"\n-    ], \n+    ],\n     [\n         \"461QQ2sYWxU7H2PV4oBwJGNch8XVTYYbZxU\"\n-    ], \n+    ],\n     [\n         \"2UCtv53VttmQYkVU4VMtXB31REvQg4ABzs41AEKZ8UcB7DAfVzdkV9JDErwGwyj5AUHLkmgZeobs\"\n-    ], \n+    ],\n     [\n         \"cSNjAsnhgtiFMi6MtfvgscMB2Cbhn2v1FUYfviJ1CdjfidvmeW6mn\"\n-    ], \n+    ],\n     [\n         \"gmsow2Y6EWAFDFE1CE4Hd3Tpu2BvfmBfG1SXsuRARbnt1WjkZnFh1qGTiptWWbjsq2Q6qvpgJVj\"\n-    ], \n+    ],\n     [\n         \"nksUKSkzS76v8EsSgozXGMoQFiCoCHzCVajFKAXqzK5on9ZJYVHMD5CKwgmX3S3c7M1U3xabUny\"\n-    ], \n+    ],\n     [\n         \"L3favK1UzFGgdzYBF2oBT5tbayCo4vtVBLJhg2iYuMeePxWG8SQc\"\n-    ], \n+    ],\n     [\n         \"7VxLxGGtYT6N99GdEfi6xz56xdQ8nP2dG1CavuXx7Rf2PrvNMTBNevjkfgs9JmkcGm6EXpj8ipyPZ\"\n-    ], \n+    ],\n     [\n         \"2mbZwFXF6cxShaCo2czTRB62WTx9LxhTtpP\"\n-    ], \n+    ],\n     [\n         \"dB7cwYdcPSgiyAwKWL3JwCVwSk6epU2txw\"\n-    ], \n+    ],\n     [\n         \"HPhFUhUAh8ZQQisH8QQWafAxtQYju3SFTX\"\n-    ], \n+    ],\n     [\n         \"4ctAH6AkHzq5ioiM1m9T3E2hiYEev5mTsB\"\n-    ], \n+    ],\n     [\n         \"Hn1uFi4dNexWrqARpjMqgT6cX1UsNPuV3cHdGg9ExyXw8HTKadbktRDtdeVmY3M1BxJStiL4vjJ\"\n-    ], \n+    ],\n     [\n         \"Sq3fDbvutABmnAHHExJDgPLQn44KnNC7UsXuT7KZecpaYDMU9Txs\"\n-    ], \n+    ],\n     [\n         \"6TqWyrqdgUEYDQU1aChMuFMMEimHX44qHFzCUgGfqxGgZNMUVWJ\"\n-    ], \n+    ],\n     [\n         \"giqJo7oWqFxNKWyrgcBxAVHXnjJ1t6cGoEffce5Y1y7u649Noj5wJ4mmiUAKEVVrYAGg2KPB3Y4\"\n-    ], \n+    ],\n     [\n         \"cNzHY5e8vcmM3QVJUcjCyiKMYfeYvyueq5qCMV3kqcySoLyGLYUK\"\n-    ], \n+    ],\n     [\n         \"37uTe568EYc9WLoHEd9jXEvUiWbq5LFLscNyqvAzLU5vBArUJA6eydkLmnMwJDjkL5kXc2VK7ig\"\n-    ], \n+    ],\n     [\n         \"EsYbG4tWWWY45G31nox838qNdzksbPySWc\"\n-    ], \n+    ],\n     [\n         \"nbuzhfwMoNzA3PaFnyLcRxE9bTJPDkjZ6Rf6Y6o2ckXZfzZzXBT\"\n-    ], \n+    ],\n     [\n         \"cQN9PoxZeCWK1x56xnz6QYAsvR11XAce3Ehp3gMUdfSQ53Y2mPzx\"\n-    ], \n+    ],\n     [\n         \"1Gm3N3rkef6iMbx4voBzaxtXcmmiMTqZPhcuAepRzYUJQW4qRpEnHvMojzof42hjFRf8PE2jPde\"\n-    ], \n+    ],\n     [\n         \"2TAq2tuN6x6m233bpT7yqdYQPELdTDJn1eU\"\n-    ], \n+    ],\n     [\n         \"ntEtnnGhqPii4joABvBtSEJG6BxjT2tUZqE8PcVYgk3RHpgxgHDCQxNbLJf7ardf1dDk2oCQ7Cf\"\n-    ], \n+    ],\n     [\n         \"Ky1YjoZNgQ196HJV3HpdkecfhRBmRZdMJk89Hi5KGfpfPwS2bUbfd\"\n-    ], \n+    ],\n     [\n         \"2A1q1YsMZowabbvta7kTy2Fd6qN4r5ZCeG3qLpvZBMzCixMUdkN2Y4dHB1wPsZAeVXUGD83MfRED\"\n     ],"
      },
      {
        "sha": "9b320b6943c5a6c5830953a2b0ee2b575403c14b",
        "filename": "src/test/data/script_tests.json",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -712,7 +712,7 @@\n [\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Zero-length R is correctly encoded\"],\n [\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Zero-length S is correctly encoded for DERSIG\"],\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Negative S is correctly encoded\"],\n- \n+\n [\"2147483648\", \"CHECKSEQUENCEVERIFY\", \"CHECKSEQUENCEVERIFY\", \"OK\", \"CSV passes if stack top bit 1 << 31 is set\"],\n \n [\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"EVAL_FALSE\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],"
      },
      {
        "sha": "5ba54ef9b093fa2f6a32b072b644742f534ba938",
        "filename": "src/test/dbwrapper_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/dbwrapper_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/dbwrapper_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/dbwrapper_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -20,9 +20,9 @@ static bool is_null_key(const std::vector<unsigned char>& key) {\n \n     return isnull;\n }\n- \n+\n BOOST_FIXTURE_TEST_SUITE(dbwrapper_tests, BasicTestingSetup)\n-                       \n+\n BOOST_AUTO_TEST_CASE(dbwrapper)\n {\n     // Perform tests both obfuscated and non-obfuscated.\n@@ -142,7 +142,7 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n     // Now, set up another wrapper that wants to obfuscate the same directory\n     CDBWrapper odbw(ph, (1 << 10), false, false, true);\n \n-    // Check that the key/val we wrote with unobfuscated wrapper exists and \n+    // Check that the key/val we wrote with unobfuscated wrapper exists and\n     // is readable.\n     uint256 res2;\n     BOOST_CHECK(odbw.Read(key, res2));\n@@ -153,13 +153,13 @@ BOOST_AUTO_TEST_CASE(existing_data_no_obfuscate)\n \n     uint256 in2 = InsecureRand256();\n     uint256 res3;\n- \n+\n     // Check that we can write successfully\n     BOOST_CHECK(odbw.Write(key, in2));\n     BOOST_CHECK(odbw.Read(key, res3));\n     BOOST_CHECK_EQUAL(res3.ToString(), in2.ToString());\n }\n-                        \n+\n // Ensure that we start obfuscating during a reindex.\n BOOST_AUTO_TEST_CASE(existing_data_reindex)\n {\n@@ -190,7 +190,7 @@ BOOST_AUTO_TEST_CASE(existing_data_reindex)\n \n     uint256 in2 = InsecureRand256();\n     uint256 res3;\n- \n+\n     // Check that we can write successfully\n     BOOST_CHECK(odbw.Write(key, in2));\n     BOOST_CHECK(odbw.Read(key, res3));"
      },
      {
        "sha": "7871ff6f74f63d92d9cbcc17338a2443e6bdb7ee",
        "filename": "src/test/limitedmap_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/limitedmap_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/limitedmap_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/limitedmap_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -50,10 +50,10 @@ BOOST_AUTO_TEST_CASE(limitedmap_test)\n         // use the iterator to check for the expected key and value\n         BOOST_CHECK(it->first == i);\n         BOOST_CHECK(it->second == i + 1);\n-        \n+\n         // use find to check for the value\n         BOOST_CHECK(map.find(i)->second == i + 1);\n-        \n+\n         // update and recheck\n         map.update(it, i + 2);\n         BOOST_CHECK(map.find(i)->second == i + 2);"
      },
      {
        "sha": "e2d76dc293cd968db3d85b9ba4643cb4dad1733f",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -66,7 +66,7 @@ BOOST_AUTO_TEST_CASE(MempoolRemoveTest)\n     poolSize = testPool.size();\n     testPool.removeRecursive(txParent);\n     BOOST_CHECK_EQUAL(testPool.size(), poolSize - 1);\n-    \n+\n     // Parent, children, grandchildren:\n     testPool.addUnchecked(txParent.GetHash(), entry.FromTx(txParent));\n     for (int i = 0; i < 3; i++)"
      },
      {
        "sha": "f7861d9b8a9e36abd48e403b84626b70a5f9158e",
        "filename": "src/test/net_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/net_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/net_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/net_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -173,7 +173,7 @@ BOOST_AUTO_TEST_CASE(cnode_simple_test)\n \n     in_addr ipv4Addr;\n     ipv4Addr.s_addr = 0xa0b0c001;\n-    \n+\n     CAddress addr = CAddress(CService(ipv4Addr, 7777), NODE_NETWORK);\n     std::string pszDest;\n     bool fInboundIn = false;"
      },
      {
        "sha": "5f000093547b347153a95e6a391d514e028d616e",
        "filename": "src/test/prevector_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/prevector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/prevector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/prevector_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -36,7 +36,7 @@ class prevector_tester {\n         {\n             local_check(a == b);\n         }\n-    void local_check(bool b) \n+    void local_check(bool b)\n     {\n         passed &= b;\n     }"
      },
      {
        "sha": "3dfa09e09eeda16fad21194079fc108dffb8dc89",
        "filename": "src/test/raii_event_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/raii_event_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/raii_event_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/raii_event_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -41,15 +41,15 @@ BOOST_FIXTURE_TEST_SUITE(raii_event_tests, BasicTestingSetup)\n BOOST_AUTO_TEST_CASE(raii_event_creation)\n {\n     event_set_mem_functions(tag_malloc, realloc, tag_free);\n-    \n+\n     void* base_ptr = nullptr;\n     {\n         auto base = obtain_event_base();\n         base_ptr = (void*)base.get();\n         BOOST_CHECK(tags[base_ptr] == 1);\n     }\n     BOOST_CHECK(tags[base_ptr] == 0);\n-    \n+\n     void* event_ptr = nullptr;\n     {\n         auto base = obtain_event_base();\n@@ -63,14 +63,14 @@ BOOST_AUTO_TEST_CASE(raii_event_creation)\n     }\n     BOOST_CHECK(tags[base_ptr] == 0);\n     BOOST_CHECK(tags[event_ptr] == 0);\n-    \n+\n     event_set_mem_functions(malloc, realloc, free);\n }\n \n BOOST_AUTO_TEST_CASE(raii_event_order)\n {\n     event_set_mem_functions(tag_malloc, realloc, tag_free);\n-    \n+\n     void* base_ptr = nullptr;\n     void* event_ptr = nullptr;\n     {"
      },
      {
        "sha": "510910e149caefe95241ecb9339896ec43e89728",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -515,7 +515,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                                 \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n                                ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    \n+\n     tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey0.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                 \"P2SH(P2PKH)\", SCRIPT_VERIFY_P2SH, true\n                                ).PushSig(keys.key0).Push(keys.pubkey0).PushRedeem());"
      },
      {
        "sha": "a0dafaaf5cdd843dccd7f3b466b77fd98670c22d",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -252,8 +252,8 @@ static bool isCanonicalException(const std::ios_base::failure& ex)\n \n     // The string returned by what() can be different for different platforms.\n     // Instead of directly comparing the ex.what() with an expected string,\n-    // create an instance of exception to see if ex.what() matches \n-    // the expected explanatory string returned by the exception instance. \n+    // create an instance of exception to see if ex.what() matches\n+    // the expected explanatory string returned by the exception instance.\n     return strcmp(expectedException.what(), ex.what()) == 0;\n }\n "
      },
      {
        "sha": "8ca668ba0161718ade6b23ab8b76bbb658378df2",
        "filename": "src/test/streams_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/streams_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/test/streams_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/streams_tests.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -76,19 +76,19 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     CDataStream ds(in, 0, 0);\n \n     // Degenerate case\n-    \n+\n     key.push_back('\\x00');\n     key.push_back('\\x00');\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n+            std::string(expected_xor.begin(), expected_xor.end()),\n             std::string(ds.begin(), ds.end()));\n \n     in.push_back('\\x0f');\n     in.push_back('\\xf0');\n     expected_xor.push_back('\\xf0');\n     expected_xor.push_back('\\x0f');\n-    \n+\n     // Single character key\n \n     ds.clear();\n@@ -98,9 +98,9 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     key.push_back('\\xff');\n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n-            std::string(ds.begin(), ds.end())); \n-    \n+            std::string(expected_xor.begin(), expected_xor.end()),\n+            std::string(ds.begin(), ds.end()));\n+\n     // Multi character key\n \n     in.clear();\n@@ -109,7 +109,7 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n     in.push_back('\\x0f');\n     expected_xor.push_back('\\x0f');\n     expected_xor.push_back('\\x00');\n-                        \n+\n     ds.clear();\n     ds.insert(ds.begin(), in.begin(), in.end());\n \n@@ -119,8 +119,8 @@ BOOST_AUTO_TEST_CASE(streams_serializedata_xor)\n \n     ds.Xor(key);\n     BOOST_CHECK_EQUAL(\n-            std::string(expected_xor.begin(), expected_xor.end()), \n-            std::string(ds.begin(), ds.end()));  \n-}         \n+            std::string(expected_xor.begin(), expected_xor.end()),\n+            std::string(ds.begin(), ds.end()));\n+}\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a4fefb59835443cf3683844cc071c5065ce1e853",
        "filename": "src/timedata.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/timedata.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/timedata.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/timedata.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -14,7 +14,7 @@ static const int64_t DEFAULT_MAX_TIME_ADJUSTMENT = 70 * 60;\n \n class CNetAddr;\n \n-/** \n+/**\n  * Median filter over a stream of values.\n  * Returns the median of the last N numbers\n  */"
      },
      {
        "sha": "1fc7919442f95cc8889a5d76d93189bf749cf9ba",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -53,7 +53,7 @@ struct CoinEntry {\n \n }\n \n-CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true) \n+CCoinsViewDB::CCoinsViewDB(size_t nCacheSize, bool fMemory, bool fWipe) : db(GetDataDir() / \"chainstate\", nCacheSize, fMemory, fWipe, true)\n {\n }\n "
      },
      {
        "sha": "2108e6ba2ddb1f57658e30c46dc4279edad71ecf",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -284,7 +284,7 @@ void CTxMemPool::UpdateForRemoveFromMempool(const setEntries &entriesToRemove, b\n         // should be a bit faster.\n         // However, if we happen to be in the middle of processing a reorg, then\n         // the mempool can be in an inconsistent state.  In this case, the set\n-        // of ancestors reachable via mapLinks will be the same as the set of \n+        // of ancestors reachable via mapLinks will be the same as the set of\n         // ancestors whose packages include this transaction, because when we\n         // add a new transaction to the mempool in addUnchecked(), we assume it\n         // has no children, and in the case of a reorg where that assumption is"
      },
      {
        "sha": "f3b8a68a9db00f39dc4407e6ae60190b20affb12",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -692,7 +692,7 @@ class CTxMemPool\n     void removeUnchecked(txiter entry, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n };\n \n-/** \n+/**\n  * CCoinsView that brings transactions from a mempool into view.\n  * It does not check for spendings by memory pool transactions.\n  * Instead, it provides access to all Coins which are either unspent in the"
      },
      {
        "sha": "1aff10f02505025b6de73c00bc355840c2e9ea0e",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -207,7 +207,7 @@ static const unsigned int DEFAULT_CHECKLEVEL = 3;\n // Setting the target to > than 550MB will make it likely we can respect the target.\n static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n \n-/** \n+/**\n  * Process an incoming block. This only returns after the best known valid\n  * block is made active. Note that it does not, however, guarantee that the\n  * specific block passed to it has been checked for validity!\n@@ -218,7 +218,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  *\n  * Note that we guarantee that either the proof-of-work is valid on pblock, or\n  * (and possibly also) BlockChecked will have been called.\n- * \n+ *\n  * May not be called in a\n  * validationinterface callback.\n  *\n@@ -351,7 +351,7 @@ bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = null\n \n /**\n  * Closure representing one script verification\n- * Note that this stores references to the spending transaction \n+ * Note that this stores references to the spending transaction\n  */\n class CScriptCheck\n {"
      },
      {
        "sha": "a5ba732bc022971c54f34956d869c84b8f6d80ba",
        "filename": "test/README.md",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/12dd1013454a3b4913e8e6bbac251887e7e82ff0/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/12dd1013454a3b4913e8e6bbac251887e7e82ff0/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/README.md?ref=12dd1013454a3b4913e8e6bbac251887e7e82ff0",
        "patch": "@@ -5,7 +5,7 @@ etc.\n \n There are currently two sets of tests in this directory:\n \n-- [functional](/test/functional) which test the functionality of \n+- [functional](/test/functional) which test the functionality of\n bitcoind and bitcoin-qt by interacting with them through the RPC and P2P\n interfaces.\n - [util](/test/util) which tests the bitcoin utilities, currently only\n@@ -177,11 +177,11 @@ Note: gdb attach step may require `sudo`\n \n ### Util tests\n \n-Util tests can be run locally by running `test/util/bitcoin-util-test.py`. \n+Util tests can be run locally by running `test/util/bitcoin-util-test.py`.\n Use the `-v` option for verbose output.\n \n # Writing functional tests\n \n You are encouraged to write functional tests for new or existing features.\n-Further information about the functional test framework and individual \n+Further information about the functional test framework and individual\n tests is found in [test/functional](/test/functional)."
      }
    ]
  }
]