[
  {
    "sha": "35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNWY3MjI3YTg2MGIyYjhjMjczZTRiYjI5OWU2YmQ2N2NmZWY5YTNm",
    "commit": {
      "author": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-12-04T20:37:26Z"
      },
      "committer": {
        "name": "Daniel Kraft",
        "email": "d@domob.eu",
        "date": "2014-12-04T20:37:26Z"
      },
      "message": "Clean up wallet encryption code.\n\nAdd a new method DecryptKey in crypter.cpp, that combines the logic for\ndecrypting, initialising and validating a CKey object.  This was\npreviously duplicated.",
      "tree": {
        "sha": "606ff65ecff04f12f0c4c72f274f7f5a5dc22621",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/606ff65ecff04f12f0c4c72f274f7f5a5dc22621"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f/comments",
    "author": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "domob1812",
      "id": 4943644,
      "node_id": "MDQ6VXNlcjQ5NDM2NDQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4943644?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/domob1812",
      "html_url": "https://github.com/domob1812",
      "followers_url": "https://api.github.com/users/domob1812/followers",
      "following_url": "https://api.github.com/users/domob1812/following{/other_user}",
      "gists_url": "https://api.github.com/users/domob1812/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/domob1812/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/domob1812/subscriptions",
      "organizations_url": "https://api.github.com/users/domob1812/orgs",
      "repos_url": "https://api.github.com/users/domob1812/repos",
      "events_url": "https://api.github.com/users/domob1812/events{/privacy}",
      "received_events_url": "https://api.github.com/users/domob1812/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ddc8c63ab72a6951f0c4f636b3252a43193a45b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ddc8c63ab72a6951f0c4f636b3252a43193a45b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ddc8c63ab72a6951f0c4f636b3252a43193a45b"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 17,
      "deletions": 25
    },
    "files": [
      {
        "sha": "88f39bc4768e5cedb5702101e403a31ef3292b12",
        "filename": "src/crypter.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 22,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f/src/crypter.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f/src/crypter.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.cpp?ref=35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "patch": "@@ -102,7 +102,7 @@ bool CCrypter::Decrypt(const std::vector<unsigned char>& vchCiphertext, CKeyingM\n }\n \n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n+static bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -112,7 +112,7 @@ bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vch\n     return cKeyCrypter.Encrypt(*((const CKeyingMaterial*)&vchPlaintext), vchCiphertext);\n }\n \n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n+static bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext)\n {\n     CCrypter cKeyCrypter;\n     std::vector<unsigned char> chIV(WALLET_CRYPTO_KEY_SIZE);\n@@ -122,6 +122,19 @@ bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned\n     return cKeyCrypter.Decrypt(vchCiphertext, *((CKeyingMaterial*)&vchPlaintext));\n }\n \n+static bool DecryptKey(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCryptedSecret, const CPubKey& vchPubKey, CKey& key)\n+{\n+    CKeyingMaterial vchSecret;\n+    if(!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n+        return false;\n+\n+    if (vchSecret.size() != 32)\n+        return false;\n+\n+    key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n+    return key.VerifyPubKey(vchPubKey);\n+}\n+\n bool CCryptoKeyStore::SetCrypted()\n {\n     LOCK(cs_KeyStore);\n@@ -161,20 +174,8 @@ bool CCryptoKeyStore::Unlock(const CKeyingMaterial& vMasterKeyIn)\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if(!DecryptSecret(vMasterKeyIn, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-            {\n-                keyFail = true;\n-                break;\n-            }\n-            if (vchSecret.size() != 32)\n-            {\n-                keyFail = true;\n-                break;\n-            }\n             CKey key;\n-            key.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            if (key.GetPubKey() != vchPubKey)\n+            if (!DecryptKey(vMasterKeyIn, vchCryptedSecret, vchPubKey, key))\n             {\n                 keyFail = true;\n                 break;\n@@ -243,13 +244,7 @@ bool CCryptoKeyStore::GetKey(const CKeyID &address, CKey& keyOut) const\n         {\n             const CPubKey &vchPubKey = (*mi).second.first;\n             const std::vector<unsigned char> &vchCryptedSecret = (*mi).second.second;\n-            CKeyingMaterial vchSecret;\n-            if (!DecryptSecret(vMasterKey, vchCryptedSecret, vchPubKey.GetHash(), vchSecret))\n-                return false;\n-            if (vchSecret.size() != 32)\n-                return false;\n-            keyOut.Set(vchSecret.begin(), vchSecret.end(), vchPubKey.IsCompressed());\n-            return true;\n+            return DecryptKey(vMasterKey, vchCryptedSecret, vchPubKey, keyOut);\n         }\n     }\n     return false;"
      },
      {
        "sha": "656658b0fee6b9479207ed71e6eb05d03af98f59",
        "filename": "src/crypter.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f/src/crypter.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/35f7227a860b2b8c273e4bb299e6bd67cfef9a3f/src/crypter.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypter.h?ref=35f7227a860b2b8c273e4bb299e6bd67cfef9a3f",
        "patch": "@@ -107,9 +107,6 @@ class CCrypter\n     }\n };\n \n-bool EncryptSecret(const CKeyingMaterial& vMasterKey, const CKeyingMaterial &vchPlaintext, const uint256& nIV, std::vector<unsigned char> &vchCiphertext);\n-bool DecryptSecret(const CKeyingMaterial& vMasterKey, const std::vector<unsigned char>& vchCiphertext, const uint256& nIV, CKeyingMaterial& vchPlaintext);\n-\n /** Keystore which keeps the private keys encrypted.\n  * It derives from the basic key store, which is used if no encryption is active.\n  */"
      }
    ]
  }
]