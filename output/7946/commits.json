[
  {
    "sha": "b3b3c2a5623d5c942d2b3565cc2d833c65105555",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2IzYzJhNTYyM2Q1Yzk0MmQyYjM1NjVjYzJkODMzYzY1MTA1NTU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-04-26T11:55:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-12T12:53:10Z"
      },
      "message": "Reduce cs_main locks during ConnectTip/SyncWithWallets",
      "tree": {
        "sha": "e354177eedaff7b846cf910e2a2d99cae3042cf1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e354177eedaff7b846cf910e2a2d99cae3042cf1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3b3c2a5623d5c942d2b3565cc2d833c65105555",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXrca3AAoJECnUvLZBb1Ps6J8P/3cPmWDRBuGhLzTDijkq6c9R\nOGhFbtpssUPyU3Ygmv7Z84ysrXqO0z4f6M8aR58437hPNKOfvass43eEP8MKbHDN\n9pOHaItPh8po7GLj/nWQxaweiTbmFPmYVtKelrIwQAfFnPw3p8X1TCT6xhOErisU\nu5x/3DChRKG2gdKB2C8xr2SB5zMavllCQfKIGlPqCCU5sJtl6DNedPa4RcMZKYgb\nKfR6Djhi/EQWSUFl45Or0FeqILeGh6MuyBl9hLtB6+2tojlouJqVAIlFukIBysUk\n29fx1rT9uie6tetO9bwOmCZOwAN4uk/Q7RQnZYVe8bdVqScYS/4w7ajhaGvsVlw+\nkD8IeZh/zUv0riLg0kZZhk51V9gn0UgaFflA8U+ukG3BHStKavUwMt/6I1riIgwS\nGlNb/4DvVGuhFZ2GzgCxdU6/J6qKUrhwohgBXxPhxU7vBuzdRE0uvL/+gi/CBQ5O\n5npOLRo/t1q0xwL7pfdwYS9qypEI0PGvSMELBcIyg2OX/l679rYQP3BeBLOq5itW\nGZVXiC1WqPOziO4w4zhKrM05lESbwnl7AIm7/EIjd9ZVvsu5rNcI7IoK/Oy4wnEm\n6gN/XnKQ7mM9zzrwifzskokJIWpxpflsiWrgGMOoC3CFSr47P4updeHAFTM37maS\n1e4Fs0po88Banp3DcXsG\n=vfhV\n-----END PGP SIGNATURE-----",
        "payload": "tree e354177eedaff7b846cf910e2a2d99cae3042cf1\nparent 0d0abcac1efeb94f441aa13714ba01ccfacc05c0\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1461671713 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1471006390 +0200\n\nReduce cs_main locks during ConnectTip/SyncWithWallets\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b3c2a5623d5c942d2b3565cc2d833c65105555",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3b3c2a5623d5c942d2b3565cc2d833c65105555",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3b3c2a5623d5c942d2b3565cc2d833c65105555/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d0abcac1efeb94f441aa13714ba01ccfacc05c0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d0abcac1efeb94f441aa13714ba01ccfacc05c0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d0abcac1efeb94f441aa13714ba01ccfacc05c0"
      }
    ],
    "stats": {
      "total": 103,
      "additions": 49,
      "deletions": 54
    },
    "files": [
      {
        "sha": "db457f6f53d571af6dc197fc4918c57637f4cb15",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 17,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -1541,7 +1541,7 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n         }\n     }\n \n-    SyncWithWallets(tx, NULL, NULL);\n+    SyncWithWallets(tx, NULL);\n \n     return true;\n }\n@@ -2770,7 +2770,7 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     BOOST_FOREACH(const CTransaction &tx, block.vtx) {\n-        SyncWithWallets(tx, pindexDelete->pprev, NULL);\n+        SyncWithWallets(tx, pindexDelete->pprev);\n     }\n     return true;\n }\n@@ -2785,7 +2785,7 @@ static int64_t nTimePostConnect = 0;\n  * Connect a new block to chainActive. pblock is either NULL or a pointer to a CBlock\n  * corresponding to pindexNew, to bypass loading it again from disk.\n  */\n-bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock)\n+bool static ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const CBlock* pblock, std::list<CTransaction> &txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int> > &txChanged)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2821,20 +2821,13 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n         return false;\n     int64_t nTime5 = GetTimeMicros(); nTimeChainState += nTime5 - nTime4;\n     LogPrint(\"bench\", \"  - Writing chainstate: %.2fms [%.2fs]\\n\", (nTime5 - nTime4) * 0.001, nTimeChainState * 0.000001);\n-    // Remove conflicting transactions from the mempool.\n-    list<CTransaction> txConflicted;\n+    // Remove conflicting transactions from the mempool.;\n     mempool.removeForBlock(pblock->vtx, pindexNew->nHeight, txConflicted, !IsInitialBlockDownload());\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n-    // Tell wallet about transactions that went from mempool\n-    // to conflicted:\n-    BOOST_FOREACH(const CTransaction &tx, txConflicted) {\n-        SyncWithWallets(tx, pindexNew, NULL);\n-    }\n-    // ... and about transactions that got confirmed:\n-    BOOST_FOREACH(const CTransaction &tx, pblock->vtx) {\n-        SyncWithWallets(tx, pindexNew, pblock);\n-    }\n+\n+    for(unsigned int i=0; i < pblock->vtx.size(); i++)\n+        txChanged.push_back(std::make_tuple(pblock->vtx[i], pindexNew, i));\n \n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(\"bench\", \"  - Connect postprocess: %.2fms [%.2fs]\\n\", (nTime6 - nTime5) * 0.001, nTimePostConnect * 0.000001);\n@@ -2916,7 +2909,7 @@ static void PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either NULL or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound)\n+static bool ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const CBlock* pblock, bool& fInvalidFound, std::list<CTransaction>& txConflicted, std::vector<std::tuple<CTransaction,CBlockIndex*,int> >& txChanged)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2949,7 +2942,7 @@ static bool ActivateBestChainStep(CValidationState& state, const CChainParams& c\n \n         // Connect new blocks.\n         BOOST_REVERSE_FOREACH(CBlockIndex *pindexConnect, vpindexToConnect) {\n-            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL)) {\n+            if (!ConnectTip(state, chainparams, pindexConnect, pindexConnect == pindexMostWork ? pblock : NULL, txConflicted, txChanged)) {\n                 if (state.IsInvalid()) {\n                     // The block violates a consensus rule.\n                     if (!state.CorruptionPossible())\n@@ -3024,6 +3017,8 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n             break;\n \n         const CBlockIndex *pindexFork;\n+        std::list<CTransaction> txConflicted;\n+        std::vector<std::tuple<CTransaction,CBlockIndex*,int> > txChanged;\n         bool fInitialDownload;\n         int nNewHeight;\n         {\n@@ -3038,7 +3033,7 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n                 return true;\n \n             bool fInvalidFound = false;\n-            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound))\n+            if (!ActivateBestChainStep(state, chainparams, pindexMostWork, pblock && pblock->GetHash() == pindexMostWork->GetBlockHash() ? pblock : NULL, fInvalidFound, txConflicted, txChanged))\n                 return false;\n \n             if (fInvalidFound) {\n@@ -3053,6 +3048,17 @@ bool ActivateBestChain(CValidationState &state, const CChainParams& chainparams,\n         // When we reach this point, we switched to a new tip (stored in pindexNewTip).\n \n         // Notifications/callbacks that can run without cs_main\n+\n+        // throw all transactions though the signal-interface\n+        // while _not_ holding the cs_main lock\n+        BOOST_FOREACH(const CTransaction &tx, txConflicted)\n+        {\n+            SyncWithWallets(tx, pindexNewTip);\n+        }\n+        // ... and about transactions that got confirmed:\n+        for(unsigned int i = 0; i < txChanged.size(); i++)\n+            SyncWithWallets(std::get<0>(txChanged[i]), std::get<1>(txChanged[i]), std::get<2>(txChanged[i]));\n+\n         // Always notify the UI if a new block tip was connected\n         if (pindexFork != pindexNewTip) {\n             uiInterface.NotifyBlockTip(fInitialDownload, pindexNewTip);"
      },
      {
        "sha": "cf1d6ca08699a39f250811e2feb8289a4a17f98e",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -48,6 +48,6 @@ void UnregisterAllValidationInterfaces() {\n     g_signals.UpdatedBlockTip.disconnect_all_slots();\n }\n \n-void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, const CBlock *pblock) {\n-    g_signals.SyncTransaction(tx, pindex, pblock);\n+void SyncWithWallets(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {\n+    g_signals.SyncTransaction(tx, pindex, posInBlock);\n }"
      },
      {
        "sha": "094b1cfe26672a41b0de27066e515a57fc9b4177",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -28,12 +28,12 @@ void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n /** Unregister all wallets from core */\n void UnregisterAllValidationInterfaces();\n /** Push an updated transaction to all registered wallets */\n-void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock = NULL);\n+void SyncWithWallets(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock = -1);\n \n class CValidationInterface {\n protected:\n     virtual void UpdatedBlockTip(const CBlockIndex *pindex) {}\n-    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, const CBlock *pblock) {}\n+    virtual void SyncTransaction(const CTransaction &tx, const CBlockIndex *pindex, int posInBlock) {}\n     virtual void SetBestChain(const CBlockLocator &locator) {}\n     virtual void UpdatedTransaction(const uint256 &hash) {}\n     virtual void Inventory(const uint256 &hash) {}\n@@ -50,7 +50,7 @@ struct CMainSignals {\n     /** Notifies listeners of updated block chain tip */\n     boost::signals2::signal<void (const CBlockIndex *)> UpdatedBlockTip;\n     /** Notifies listeners of updated transaction data (transaction, and optionally the block it is found in. */\n-    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, const CBlock *)> SyncTransaction;\n+    boost::signals2::signal<void (const CTransaction &, const CBlockIndex *pindex, int posInBlock)> SyncTransaction;\n     /** Notifies listeners of an updated transaction without new data (for now: a coinbase potentially becoming visible). */\n     boost::signals2::signal<void (const uint256 &)> UpdatedTransaction;\n     /** Notifies listeners of a new active block chain. */"
      },
      {
        "sha": "888aa029a3dcda8efd58e2a5973e435f5804de17",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 27,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -886,18 +886,18 @@ bool CWallet::LoadToWallet(const CWalletTx& wtxIn)\n  * pblock is optional, but should be provided if the transaction is known to be in a block.\n  * If fUpdate is true, existing transactions will be updated.\n  */\n-bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n+bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate)\n {\n     {\n         AssertLockHeld(cs_wallet);\n \n-        if (pblock) {\n+        if (posInBlock != -1) {\n             BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                 std::pair<TxSpends::const_iterator, TxSpends::const_iterator> range = mapTxSpends.equal_range(txin.prevout);\n                 while (range.first != range.second) {\n                     if (range.first->second != tx.GetHash()) {\n-                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pblock->GetHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n-                        MarkConflicted(pblock->GetHash(), range.first->second);\n+                        LogPrintf(\"Transaction %s (in block %s) conflicts with wallet transaction %s (both spend %s:%i)\\n\", tx.GetHash().ToString(), pIndex->GetBlockHash().ToString(), range.first->second.ToString(), range.first->first.hash.ToString(), range.first->first.n);\n+                        MarkConflicted(pIndex->GetBlockHash(), range.first->second);\n                     }\n                     range.first++;\n                 }\n@@ -911,8 +911,8 @@ bool CWallet::AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pbl\n             CWalletTx wtx(this,tx);\n \n             // Get merkle branch if transaction was found in a block\n-            if (pblock)\n-                wtx.SetMerkleBranch(*pblock);\n+            if (posInBlock != -1)\n+                wtx.SetMerkleBranch(pIndex, posInBlock);\n \n             return AddToWallet(wtx, false);\n         }\n@@ -1037,11 +1037,11 @@ void CWallet::MarkConflicted(const uint256& hashBlock, const uint256& hashTx)\n     }\n }\n \n-void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock)\n+void CWallet::SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock)\n {\n     LOCK2(cs_main, cs_wallet);\n \n-    if (!AddToWalletIfInvolvingMe(tx, pblock, true))\n+    if (!AddToWalletIfInvolvingMe(tx, pindex, posInBlock, true))\n         return; // Not one of ours\n \n     // If a transaction changes 'conflicted' state, that changes the balance\n@@ -1399,9 +1399,10 @@ int CWallet::ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate)\n \n             CBlock block;\n             ReadBlockFromDisk(block, pindex, Params().GetConsensus());\n-            BOOST_FOREACH(CTransaction& tx, block.vtx)\n+            int posInBlock;\n+            for (posInBlock = 0; posInBlock < (int)block.vtx.size(); posInBlock++)\n             {\n-                if (AddToWalletIfInvolvingMe(tx, &block, fUpdate))\n+                if (AddToWalletIfInvolvingMe(block.vtx[posInBlock], pindex, posInBlock, fUpdate))\n                     ret++;\n             }\n             pindex = chainActive.Next(pindex);\n@@ -3526,31 +3527,19 @@ CWalletKey::CWalletKey(int64_t nExpires)\n     nTimeExpires = nExpires;\n }\n \n-int CMerkleTx::SetMerkleBranch(const CBlock& block)\n+int CMerkleTx::SetMerkleBranch(const CBlockIndex* pindex, int posInBlock)\n {\n     AssertLockHeld(cs_main);\n     CBlock blockTmp;\n \n     // Update the tx's hashBlock\n-    hashBlock = block.GetHash();\n+    hashBlock = pindex->GetBlockHash();\n \n-    // Locate the transaction\n-    for (nIndex = 0; nIndex < (int)block.vtx.size(); nIndex++)\n-        if (block.vtx[nIndex] == *(CTransaction*)this)\n-            break;\n-    if (nIndex == (int)block.vtx.size())\n-    {\n-        nIndex = -1;\n-        LogPrintf(\"ERROR: SetMerkleBranch(): couldn't find tx in block\\n\");\n-        return 0;\n-    }\n+    // set the position of the transaction in the block\n+    nIndex = posInBlock;\n \n     // Is the tx in a block that's in the main chain\n-    BlockMap::iterator mi = mapBlockIndex.find(hashBlock);\n-    if (mi == mapBlockIndex.end())\n-        return 0;\n-    const CBlockIndex* pindex = (*mi).second;\n-    if (!pindex || !chainActive.Contains(pindex))\n+    if (!chainActive.Contains(pindex))\n         return 0;\n \n     return chainActive.Height() - pindex->nHeight + 1;"
      },
      {
        "sha": "952acd1535abf01b0a9658cd45f1e86ec6fe54b9",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -200,7 +200,7 @@ class CMerkleTx : public CTransaction\n         READWRITE(nIndex);\n     }\n \n-    int SetMerkleBranch(const CBlock& block);\n+    int SetMerkleBranch(const CBlockIndex* pIndex, int posInBlock);\n \n     /**\n      * Return depth of transaction in blockchain:\n@@ -731,8 +731,8 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     void MarkDirty();\n     bool AddToWallet(const CWalletTx& wtxIn, bool fFlushOnClose=true);\n     bool LoadToWallet(const CWalletTx& wtxIn);\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n-    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlock* pblock, bool fUpdate);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n+    bool AddToWalletIfInvolvingMe(const CTransaction& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n     int ScanForWalletTransactions(CBlockIndex* pindexStart, bool fUpdate = false);\n     void ReacceptWalletTransactions();\n     void ResendWalletTransactions(int64_t nBestBlockTime);"
      },
      {
        "sha": "376e7dec590b560de960f143852ffa6bafa182da",
        "filename": "src/zmq/zmqnotificationinterface.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/zmq/zmqnotificationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/zmq/zmqnotificationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.cpp?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -141,7 +141,7 @@ void CZMQNotificationInterface::UpdatedBlockTip(const CBlockIndex *pindex)\n     }\n }\n \n-void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, const CBlock* pblock)\n+void CZMQNotificationInterface::SyncTransaction(const CTransaction& tx, const CBlockIndex* pindex, int posInBlock)\n {\n     for (std::list<CZMQAbstractNotifier*>::iterator i = notifiers.begin(); i!=notifiers.end(); )\n     {"
      },
      {
        "sha": "a853447267f31126867c7144fd44eb71fa1b9e5c",
        "filename": "src/zmq/zmqnotificationinterface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/zmq/zmqnotificationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b3b3c2a5623d5c942d2b3565cc2d833c65105555/src/zmq/zmqnotificationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/zmq/zmqnotificationinterface.h?ref=b3b3c2a5623d5c942d2b3565cc2d833c65105555",
        "patch": "@@ -24,7 +24,7 @@ class CZMQNotificationInterface : public CValidationInterface\n     void Shutdown();\n \n     // CValidationInterface\n-    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, const CBlock* pblock);\n+    void SyncTransaction(const CTransaction& tx, const CBlockIndex *pindex, int posInBlock);\n     void UpdatedBlockTip(const CBlockIndex *pindex);\n \n private:"
      }
    ]
  }
]