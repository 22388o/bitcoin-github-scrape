[
  {
    "sha": "485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ODVlNWI3YjRkNWJlN2FjZmY2M2NjZjJlODFjNDNmODIxODBiYjUw",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-01T04:45:26Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-02T19:55:32Z"
      },
      "message": "avoid explicitly referring to type of mapNextTx",
      "tree": {
        "sha": "70f936e9b650795d249a1e265a01ee1044d6a951",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/70f936e9b650795d249a1e265a01ee1044d6a951"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/485e5b7b4d5be7acff63ccf2e81c43f82180bb50/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "03cf6e86750218f633498210923544f4a6c3c020",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/03cf6e86750218f633498210923544f4a6c3c020",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/03cf6e86750218f633498210923544f4a6c3c020"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "0b3cd0dccd720cc19f09d0f39a2c53b05662beb7",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/485e5b7b4d5be7acff63ccf2e81c43f82180bb50/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/485e5b7b4d5be7acff63ccf2e81c43f82180bb50/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
        "patch": "@@ -147,7 +147,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         if (it == mapTx.end()) {\n             continue;\n         }\n-        std::map<COutPoint, CInPoint>::iterator iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n+        auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n         for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n@@ -365,7 +365,7 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n {\n     LOCK(cs);\n \n-    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n+    auto it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n \n     // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n     while (it != mapNextTx.end() && it->first.hash == hashTx) {\n@@ -500,7 +500,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, std::list<CTransact\n             // happen during chain re-orgs if origTx isn't re-accepted into\n             // the mempool for any reason.\n             for (unsigned int i = 0; i < origTx.vout.size(); i++) {\n-                std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n+                auto it = mapNextTx.find(COutPoint(origTx.GetHash(), i));\n                 if (it == mapNextTx.end())\n                     continue;\n                 txiter nextit = mapTx.find(it->second.ptx->GetHash());\n@@ -561,7 +561,7 @@ void CTxMemPool::removeConflicts(const CTransaction &tx, std::list<CTransaction>\n     list<CTransaction> result;\n     LOCK(cs);\n     BOOST_FOREACH(const CTxIn &txin, tx.vin) {\n-        std::map<COutPoint, CInPoint>::iterator it = mapNextTx.find(txin.prevout);\n+        auto it = mapNextTx.find(txin.prevout);\n         if (it != mapNextTx.end()) {\n             const CTransaction &txConflict = *it->second.ptx;\n             if (txConflict != tx)\n@@ -671,7 +671,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n                 assert(coins && coins->IsAvailable(txin.prevout.n));\n             }\n             // Check whether its inputs are marked in mapNextTx.\n-            std::map<COutPoint, CInPoint>::const_iterator it3 = mapNextTx.find(txin.prevout);\n+            auto it3 = mapNextTx.find(txin.prevout);\n             assert(it3 != mapNextTx.end());\n             assert(it3->second.ptx == &tx);\n             assert(it3->second.n == i);\n@@ -701,7 +701,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n \n         // Check children against mapNextTx\n         CTxMemPool::setEntries setChildrenCheck;\n-        std::map<COutPoint, CInPoint>::const_iterator iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n+        auto iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n         int64_t childSizes = 0;\n         for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n             txiter childit = mapTx.find(iter->second.ptx->GetHash());\n@@ -738,7 +738,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n             stepsSinceLastRemove = 0;\n         }\n     }\n-    for (std::map<COutPoint, CInPoint>::const_iterator it = mapNextTx.begin(); it != mapNextTx.end(); it++) {\n+    for (auto it = mapNextTx.cbegin(); it != mapNextTx.cend(); it++) {\n         uint256 hash = it->second.ptx->GetHash();\n         indexed_transaction_set::const_iterator it2 = mapTx.find(hash);\n         const CTransaction& tx = it2->GetTx();\n@@ -1044,7 +1044,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n                 BOOST_FOREACH(const CTxIn& txin, tx.vin) {\n                     if (exists(txin.prevout.hash))\n                         continue;\n-                    std::map<COutPoint, CInPoint>::iterator it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n+                    auto it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n                     if (it == mapNextTx.end() || it->first.hash != txin.prevout.hash)\n                         pvNoSpendsRemaining->push_back(txin.prevout.hash);\n                 }"
      }
    ]
  },
  {
    "sha": "2b0f07cf9107df73c2d618aafe08534d5b34920d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyYjBmMDdjZjkxMDdkZjczYzJkNjE4YWFmZTA4NTM0ZDViMzQ5MjBk",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-01T05:37:00Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-02T19:55:39Z"
      },
      "message": "eliminate extra map lookup",
      "tree": {
        "sha": "b66992c5c878e3db2dd3de056c418ea284392542",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b66992c5c878e3db2dd3de056c418ea284392542"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2b0f07cf9107df73c2d618aafe08534d5b34920d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0f07cf9107df73c2d618aafe08534d5b34920d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0f07cf9107df73c2d618aafe08534d5b34920d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0f07cf9107df73c2d618aafe08534d5b34920d/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/485e5b7b4d5be7acff63ccf2e81c43f82180bb50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/485e5b7b4d5be7acff63ccf2e81c43f82180bb50"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 3,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f5f1bf43381770ac77118d79a3ab243783a6922e",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2b0f07cf9107df73c2d618aafe08534d5b34920d/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2b0f07cf9107df73c2d618aafe08534d5b34920d/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=2b0f07cf9107df73c2d618aafe08534d5b34920d",
        "patch": "@@ -1049,9 +1049,10 @@ bool AcceptToMemoryPoolWorker(CTxMemPool& pool, CValidationState& state, const C\n     LOCK(pool.cs); // protect pool.mapNextTx\n     BOOST_FOREACH(const CTxIn &txin, tx.vin)\n     {\n-        if (pool.mapNextTx.count(txin.prevout))\n+        auto itConflicting = pool.mapNextTx.find(txin.prevout);\n+        if (itConflicting != pool.mapNextTx.end())\n         {\n-            const CTransaction *ptxConflicting = pool.mapNextTx[txin.prevout].ptx;\n+            const CTransaction *ptxConflicting = itConflicting->second.ptx;\n             if (!setConflicts.count(ptxConflicting->GetHash()))\n             {\n                 // Allow opt-out of transaction replacement by setting"
      }
    ]
  },
  {
    "sha": "a0b866353cd042728e4162362a33e0b3850180b6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMGI4NjYzNTNjZDA0MjcyOGU0MTYyMzYyYTMzZTBiMzg1MDE4MGI2",
    "commit": {
      "author": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-01T04:58:26Z"
      },
      "committer": {
        "name": "Kaz Wesley",
        "email": "keziahw@gmail.com",
        "date": "2016-05-02T21:50:04Z"
      },
      "message": "use a pointer as key in mapNextTx\n\nSaves about 7% of total memory usage (halves the size of each entry in\nmapNextTx, which comprised about 15% of memory usage in overnight test run).\nSince the mempool is DynamicUsage-regulated, this will translate to a larger\nmempool in the same amount of space.",
      "tree": {
        "sha": "00c62b1cf87168339b33fd65663281a1d6789299",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/00c62b1cf87168339b33fd65663281a1d6789299"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a0b866353cd042728e4162362a33e0b3850180b6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b866353cd042728e4162362a33e0b3850180b6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a0b866353cd042728e4162362a33e0b3850180b6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0b866353cd042728e4162362a33e0b3850180b6/comments",
    "author": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kazcw",
      "id": 1047859,
      "node_id": "MDQ6VXNlcjEwNDc4NTk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1047859?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kazcw",
      "html_url": "https://github.com/kazcw",
      "followers_url": "https://api.github.com/users/kazcw/followers",
      "following_url": "https://api.github.com/users/kazcw/following{/other_user}",
      "gists_url": "https://api.github.com/users/kazcw/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kazcw/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kazcw/subscriptions",
      "organizations_url": "https://api.github.com/users/kazcw/orgs",
      "repos_url": "https://api.github.com/users/kazcw/repos",
      "events_url": "https://api.github.com/users/kazcw/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kazcw/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2b0f07cf9107df73c2d618aafe08534d5b34920d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2b0f07cf9107df73c2d618aafe08534d5b34920d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2b0f07cf9107df73c2d618aafe08534d5b34920d"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 77,
      "deletions": 8
    },
    "files": [
      {
        "sha": "950648b0c5319840dc871b9fa27f81b5fe1e8b61",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b866353cd042728e4162362a33e0b3850180b6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b866353cd042728e4162362a33e0b3850180b6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=a0b866353cd042728e4162362a33e0b3850180b6",
        "patch": "@@ -112,6 +112,7 @@ BITCOIN_CORE_H = \\\n   pow.h \\\n   protocol.h \\\n   random.h \\\n+  refmap.h \\\n   reverselock.h \\\n   rpc/client.h \\\n   rpc/protocol.h \\"
      },
      {
        "sha": "56cced274567a42c53e4a043dfae9c7ec1b90e35",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 16,
        "deletions": 0,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b866353cd042728e4162362a33e0b3850180b6/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b866353cd042728e4162362a33e0b3850180b6/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=a0b866353cd042728e4162362a33e0b3850180b6",
        "patch": "@@ -5,6 +5,8 @@\n #ifndef BITCOIN_MEMUSAGE_H\n #define BITCOIN_MEMUSAGE_H\n \n+#include \"refmap.h\"\n+\n #include <stdlib.h>\n \n #include <map>\n@@ -106,6 +108,20 @@ static inline size_t IncrementalDynamicUsage(const std::map<X, Y, Z>& m)\n     return MallocUsage(sizeof(stl_tree_node<std::pair<const X, Y> >));\n }\n \n+// refmap has underlying map with pointer as key\n+\n+template<typename X, typename Y>\n+static inline size_t DynamicUsage(const refmap<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >)) * m.size();\n+}\n+\n+template<typename X, typename Y>\n+static inline size_t IncrementalDynamicUsage(const refmap<X, Y>& m)\n+{\n+    return MallocUsage(sizeof(stl_tree_node<std::pair<const X*, Y> >));\n+}\n+\n // Boost data structures\n \n template<typename X>"
      },
      {
        "sha": "887bed37d59b3825e68e5a0ac4e04e3d914b7aa3",
        "filename": "src/refmap.h",
        "status": "added",
        "additions": 51,
        "deletions": 0,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b866353cd042728e4162362a33e0b3850180b6/src/refmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b866353cd042728e4162362a33e0b3850180b6/src/refmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/refmap.h?ref=a0b866353cd042728e4162362a33e0b3850180b6",
        "patch": "@@ -0,0 +1,51 @@\n+#ifndef BITCOIN_REFMAP_H\n+#define BITCOIN_REFMAP_H\n+\n+template <class T>\n+struct DereferencingComparator { bool operator()(const T a, const T b) const { return *a < *b; } };\n+\n+/* Map whose keys are pointers, but are compared by their dereferenced values.\n+ *\n+ * Differs from a plain std::map<const K*, T, DereferencingComparator<K*> > in\n+ * that methods that take a key for comparison take a K rather than taking a K*\n+ * (taking a K* would be confusing, since it's the value rather than the address\n+ * of the object for comparison that matters due to the dereferencing comparator).\n+ *\n+ * Objects pointed to by keys must not be modified in any way that changes the\n+ * result of DereferencingComparator.\n+ */\n+template <class K, class T>\n+class refmap {\n+private:\n+    typedef std::map<const K*, T, DereferencingComparator<const K*> > base;\n+    base m;\n+public:\n+    typedef typename base::iterator iterator;\n+    typedef typename base::const_iterator const_iterator;\n+    typedef typename base::size_type size_type;\n+\n+    // passthrough (pointer interface)\n+    T& operator[](const K* key) { return m[key]; }\n+\n+    // pass address (value interface)\n+    iterator find(const K& key)                     { return m.find(&key); }\n+    const_iterator find(const K& key) const         { return m.find(&key); }\n+    iterator lower_bound(const K& key)              { return m.lower_bound(&key); }\n+    const_iterator lower_bound(const K& key) const  { return m.lower_bound(&key); }\n+    size_type erase(const K& key)                   { return m.erase(&key); }\n+    size_type count(const K& key) const             { return m.count(&key); }\n+\n+    // passthrough\n+    bool empty() const              { return m.empty(); }\n+    size_type size() const          { return m.size(); }\n+    size_type max_size() const      { return m.max_size(); }\n+    void clear()                    { m.clear(); }\n+    iterator begin()                { return m.begin(); }\n+    const_iterator begin() const    { return m.begin(); }\n+    iterator end()                  { return m.end(); }\n+    const_iterator end() const      { return m.end(); }\n+    const_iterator cbegin() const   { return m.cbegin(); }\n+    const_iterator cend() const     { return m.cend(); }\n+};\n+\n+#endif // BITCOIN_REFMAP_H"
      },
      {
        "sha": "8d34dfa87606e24f3bf026ced933a22d79f4a607",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b866353cd042728e4162362a33e0b3850180b6/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b866353cd042728e4162362a33e0b3850180b6/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=a0b866353cd042728e4162362a33e0b3850180b6",
        "patch": "@@ -150,7 +150,7 @@ void CTxMemPool::UpdateTransactionsFromBlock(const std::vector<uint256> &vHashes\n         auto iter = mapNextTx.lower_bound(COutPoint(hash, 0));\n         // First calculate the children, and update setMemPoolChildren to\n         // include them, and update their setMemPoolParents to include this tx.\n-        for (; iter != mapNextTx.end() && iter->first.hash == hash; ++iter) {\n+        for (; iter != mapNextTx.end() && iter->first->hash == hash; ++iter) {\n             const uint256 &childHash = iter->second.ptx->GetHash();\n             txiter childIter = mapTx.find(childHash);\n             assert(childIter != mapTx.end());\n@@ -368,8 +368,8 @@ void CTxMemPool::pruneSpent(const uint256 &hashTx, CCoins &coins)\n     auto it = mapNextTx.lower_bound(COutPoint(hashTx, 0));\n \n     // iterate over all COutPoints in mapNextTx whose hash equals the provided hashTx\n-    while (it != mapNextTx.end() && it->first.hash == hashTx) {\n-        coins.Spend(it->first.n); // and remove those outputs from coins\n+    while (it != mapNextTx.end() && it->first->hash == hashTx) {\n+        coins.Spend(it->first->n); // and remove those outputs from coins\n         it++;\n     }\n }\n@@ -414,7 +414,7 @@ bool CTxMemPool::addUnchecked(const uint256& hash, const CTxMemPoolEntry &entry,\n     const CTransaction& tx = newit->GetTx();\n     std::set<uint256> setParentTransactions;\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n-        mapNextTx[tx.vin[i].prevout] = CInPoint(&tx, i);\n+        mapNextTx[&tx.vin[i].prevout] = CInPoint(&tx, i);\n         setParentTransactions.insert(tx.vin[i].prevout.hash);\n     }\n     // Don't bother worrying about child transactions of this one.\n@@ -703,7 +703,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         CTxMemPool::setEntries setChildrenCheck;\n         auto iter = mapNextTx.lower_bound(COutPoint(it->GetTx().GetHash(), 0));\n         int64_t childSizes = 0;\n-        for (; iter != mapNextTx.end() && iter->first.hash == it->GetTx().GetHash(); ++iter) {\n+        for (; iter != mapNextTx.end() && iter->first->hash == it->GetTx().GetHash(); ++iter) {\n             txiter childit = mapTx.find(iter->second.ptx->GetHash());\n             assert(childit != mapTx.end()); // mapNextTx points to in-mempool transactions\n             if (setChildrenCheck.insert(childit).second) {\n@@ -745,7 +745,7 @@ void CTxMemPool::check(const CCoinsViewCache *pcoins) const\n         assert(it2 != mapTx.end());\n         assert(&tx == it->second.ptx);\n         assert(tx.vin.size() > it->second.n);\n-        assert(it->first == it->second.ptx->vin[it->second.n].prevout);\n+        assert(*it->first == it->second.ptx->vin[it->second.n].prevout);\n     }\n \n     assert(totalTxSize == checkTotal);\n@@ -1045,7 +1045,7 @@ void CTxMemPool::TrimToSize(size_t sizelimit, std::vector<uint256>* pvNoSpendsRe\n                     if (exists(txin.prevout.hash))\n                         continue;\n                     auto it = mapNextTx.lower_bound(COutPoint(txin.prevout.hash, 0));\n-                    if (it == mapNextTx.end() || it->first.hash != txin.prevout.hash)\n+                    if (it == mapNextTx.end() || it->first->hash != txin.prevout.hash)\n                         pvNoSpendsRemaining->push_back(txin.prevout.hash);\n                 }\n             }"
      },
      {
        "sha": "1fa7bd585cb507d2964dc4b1fcf1846cf86b83e4",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a0b866353cd042728e4162362a33e0b3850180b6/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a0b866353cd042728e4162362a33e0b3850180b6/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=a0b866353cd042728e4162362a33e0b3850180b6",
        "patch": "@@ -12,6 +12,7 @@\n #include \"amount.h\"\n #include \"coins.h\"\n #include \"primitives/transaction.h\"\n+#include \"refmap.h\"\n #include \"sync.h\"\n \n #undef foreach\n@@ -477,7 +478,7 @@ class CTxMemPool\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n public:\n-    std::map<COutPoint, CInPoint> mapNextTx;\n+    refmap<COutPoint, CInPoint> mapNextTx;\n     std::map<uint256, std::pair<double, CAmount> > mapDeltas;\n \n     /** Create a new CTxMemPool."
      }
    ]
  }
]