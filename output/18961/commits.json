[
  {
    "sha": "970e2ffa647911b22cf8e6bc96a554264a4e23f9",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NzBlMmZmYTY0NzkxMWIyMmNmOGU2YmM5NmE1NTQyNjRhNGUyM2Y5",
    "commit": {
      "author": {
        "name": "tborn",
        "email": "t9@freenet.de",
        "date": "2020-05-12T16:30:17Z"
      },
      "committer": {
        "name": "tborn",
        "email": "t9@freenet.de",
        "date": "2020-05-12T16:30:17Z"
      },
      "message": "remove assert in walletcontroller & run setparent in gui-qt main thread",
      "tree": {
        "sha": "3a7e0c05ebb25b1f4c7ab0e4aa3ab9325e398e54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a7e0c05ebb25b1f4c7ab0e4aa3ab9325e398e54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/970e2ffa647911b22cf8e6bc96a554264a4e23f9",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/970e2ffa647911b22cf8e6bc96a554264a4e23f9",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/970e2ffa647911b22cf8e6bc96a554264a4e23f9",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/970e2ffa647911b22cf8e6bc96a554264a4e23f9/comments",
    "author": {
      "login": "tarboss",
      "id": 30550163,
      "node_id": "MDQ6VXNlcjMwNTUwMTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/30550163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarboss",
      "html_url": "https://github.com/tarboss",
      "followers_url": "https://api.github.com/users/tarboss/followers",
      "following_url": "https://api.github.com/users/tarboss/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarboss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarboss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarboss/subscriptions",
      "organizations_url": "https://api.github.com/users/tarboss/orgs",
      "repos_url": "https://api.github.com/users/tarboss/repos",
      "events_url": "https://api.github.com/users/tarboss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarboss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tarboss",
      "id": 30550163,
      "node_id": "MDQ6VXNlcjMwNTUwMTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/30550163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarboss",
      "html_url": "https://github.com/tarboss",
      "followers_url": "https://api.github.com/users/tarboss/followers",
      "following_url": "https://api.github.com/users/tarboss/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarboss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarboss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarboss/subscriptions",
      "organizations_url": "https://api.github.com/users/tarboss/orgs",
      "repos_url": "https://api.github.com/users/tarboss/repos",
      "events_url": "https://api.github.com/users/tarboss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarboss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8da1e43b63cb36759eeb1fcfd6768163265c44e2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8da1e43b63cb36759eeb1fcfd6768163265c44e2"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 19,
      "deletions": 5
    },
    "files": [
      {
        "sha": "23684643f4c56784738f064eb7cea684069d5a7b",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=970e2ffa647911b22cf8e6bc96a554264a4e23f9",
        "patch": "@@ -108,9 +108,7 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n \n     // Instantiate model and register it.\n     WalletModel* wallet_model = new WalletModel(std::move(wallet), m_client_model, m_platform_style, nullptr);\n-    // Handler callback runs in a different thread so fix wallet model thread affinity.\n-    wallet_model->moveToThread(thread());\n-    wallet_model->setParent(this);\n+\n     m_wallets.push_back(wallet_model);\n \n     // WalletModel::startPollBalance needs to be called in a thread managed by\n@@ -137,11 +135,24 @@ WalletModel* WalletController::getOrCreateWallet(std::unique_ptr<interfaces::Wal\n     connect(wallet_model, &WalletModel::coinsSent, this, &WalletController::coinsSent);\n \n     // Notify walletAdded signal on the GUI thread.\n-    Q_EMIT walletAdded(wallet_model);\n-\n+    if (QThread::currentThread() == thread()) {\n+        addWallet(wallet_model);\n+    } else {\n+        // Handler callback runs in a different thread so fix wallet model thread affinity.\n+        wallet_model->moveToThread(thread());\n+        bool invoked = QMetaObject::invokeMethod(this, \"addWallet\", Qt::QueuedConnection, Q_ARG(WalletModel*, wallet_model));\n+        assert(invoked);\n+    }\n     return wallet_model;\n }\n \n+void WalletController::addWallet(WalletModel* wallet_model)\n+{\n+    // Take ownership of the wallet model and register it.\n+    wallet_model->setParent(this);\n+    Q_EMIT walletAdded(wallet_model);\n+}\n+\n void WalletController::removeAndDeleteWallet(WalletModel* wallet_model)\n {\n     // Unregister wallet model."
      },
      {
        "sha": "c6292732dc288dbf86dd2bea8b57f82903288da3",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=970e2ffa647911b22cf8e6bc96a554264a4e23f9",
        "patch": "@@ -63,6 +63,9 @@ class WalletController : public QObject\n \n     void closeWallet(WalletModel* wallet_model, QWidget* parent = nullptr);\n \n+private Q_SLOTS:\n+    void addWallet(WalletModel* wallet_model);\n+\n Q_SIGNALS:\n     void walletAdded(WalletModel* wallet_model);\n     void walletRemoved(WalletModel* wallet_model);"
      }
    ]
  },
  {
    "sha": "6dc30947fceefbd58d16e5aaf274eac41c0158d6",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZGMzMDk0N2ZjZWVmYmQ1OGQxNmU1YWFmMjc0ZWFjNDFjMDE1OGQ2",
    "commit": {
      "author": {
        "name": "tborn",
        "email": "t9@freenet.de",
        "date": "2020-05-15T17:27:34Z"
      },
      "committer": {
        "name": "tborn",
        "email": "t9@freenet.de",
        "date": "2020-05-15T17:27:34Z"
      },
      "message": "Merge remote-tracking branch 'upstream/master'",
      "tree": {
        "sha": "4151fd957b74c7769896429f05158792455d4480",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4151fd957b74c7769896429f05158792455d4480"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6dc30947fceefbd58d16e5aaf274eac41c0158d6",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc30947fceefbd58d16e5aaf274eac41c0158d6",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6dc30947fceefbd58d16e5aaf274eac41c0158d6",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6dc30947fceefbd58d16e5aaf274eac41c0158d6/comments",
    "author": {
      "login": "tarboss",
      "id": 30550163,
      "node_id": "MDQ6VXNlcjMwNTUwMTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/30550163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarboss",
      "html_url": "https://github.com/tarboss",
      "followers_url": "https://api.github.com/users/tarboss/followers",
      "following_url": "https://api.github.com/users/tarboss/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarboss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarboss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarboss/subscriptions",
      "organizations_url": "https://api.github.com/users/tarboss/orgs",
      "repos_url": "https://api.github.com/users/tarboss/repos",
      "events_url": "https://api.github.com/users/tarboss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarboss/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "tarboss",
      "id": 30550163,
      "node_id": "MDQ6VXNlcjMwNTUwMTYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/30550163?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/tarboss",
      "html_url": "https://github.com/tarboss",
      "followers_url": "https://api.github.com/users/tarboss/followers",
      "following_url": "https://api.github.com/users/tarboss/following{/other_user}",
      "gists_url": "https://api.github.com/users/tarboss/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/tarboss/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/tarboss/subscriptions",
      "organizations_url": "https://api.github.com/users/tarboss/orgs",
      "repos_url": "https://api.github.com/users/tarboss/repos",
      "events_url": "https://api.github.com/users/tarboss/events{/privacy}",
      "received_events_url": "https://api.github.com/users/tarboss/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "970e2ffa647911b22cf8e6bc96a554264a4e23f9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/970e2ffa647911b22cf8e6bc96a554264a4e23f9",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/970e2ffa647911b22cf8e6bc96a554264a4e23f9"
      },
      {
        "sha": "951870807ea28e05cf074e364e1b55e985ab9f6d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/951870807ea28e05cf074e364e1b55e985ab9f6d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/951870807ea28e05cf074e364e1b55e985ab9f6d"
      }
    ],
    "stats": {
      "total": 852,
      "additions": 399,
      "deletions": 453
    },
    "files": [
      {
        "sha": "35ba8425b3255aebd140c535d1ae2e618baee4c9",
        "filename": "build_msvc/bitcoin_config.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/build_msvc/bitcoin_config.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/build_msvc/bitcoin_config.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin_config.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -41,9 +41,6 @@\n /* Define to 1 to enable ZMQ functions */\n #define ENABLE_ZMQ 1\n \n-/* parameter and return value type for __fdelt_chk */\n-/* #undef FDELT_TYPE */\n-\n /* define if the Boost library is available */\n #define HAVE_BOOST /**/\n "
      },
      {
        "sha": "dc7d34e55e96814052550f62bba440ca1d6e64aa",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 10,
        "deletions": 49,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -360,6 +360,7 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   if test \"x$CXXFLAG_WERROR\" = \"x\"; then\n     AC_MSG_ERROR(\"enable-werror set but -Werror is not usable\")\n   fi\n+  AX_CHECK_COMPILE_FLAG([-Werror=gnu],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=gnu\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=vla],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=vla\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=switch],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=switch\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=thread-safety-analysis],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=thread-safety-analysis\"],,[[$CXXFLAG_WERROR]])\n@@ -368,6 +369,10 @@ if test \"x$enable_werror\" = \"xyes\"; then\n   AX_CHECK_COMPILE_FLAG([-Werror=return-type],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=return-type\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=conditional-uninitialized],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=conditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Werror=sign-compare],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=sign-compare\"],,[[$CXXFLAG_WERROR]])\n+  dnl -Wsuggest-override is broken with GCC before 9.2\n+  dnl https://gcc.gnu.org/bugzilla/show_bug.cgi?id=78010\n+  AX_CHECK_COMPILE_FLAG([-Werror=suggest-override],[ERROR_CXXFLAGS=\"$ERROR_CXXFLAGS -Werror=suggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n fi\n \n if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n@@ -385,6 +390,8 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wdate-time],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wdate-time\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wconditional-uninitialized],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wconditional-uninitialized\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wsign-compare],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsign-compare\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wsuggest-override],[WARN_CXXFLAGS=\"$WARN_CXXFLAGS -Wsuggest-override\"],,[[$CXXFLAG_WERROR]],\n+                        [AC_LANG_SOURCE([[struct A { virtual void f(); }; struct B : A { void f() final; };]])])\n \n   dnl Some compilers (gcc) ignore unknown -Wno-* options, but warn about all\n   dnl unknown options if any other warning is produced. Test the -Wfoo case, and\n@@ -394,6 +401,7 @@ if test \"x$CXXFLAGS_overridden\" = \"xno\"; then\n   AX_CHECK_COMPILE_FLAG([-Wunused-local-typedef],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-unused-local-typedef\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wdeprecated-register],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-register\"],,[[$CXXFLAG_WERROR]])\n   AX_CHECK_COMPILE_FLAG([-Wimplicit-fallthrough],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-implicit-fallthrough\"],,[[$CXXFLAG_WERROR]])\n+  AX_CHECK_COMPILE_FLAG([-Wdeprecated-copy],[NOWARN_CXXFLAGS=\"$NOWARN_CXXFLAGS -Wno-deprecated-copy\"],,[[$CXXFLAG_WERROR]])\n fi\n \n enable_sse42=no\n@@ -716,22 +724,8 @@ AX_GCC_FUNC_ATTRIBUTE([dllexport])\n AX_GCC_FUNC_ATTRIBUTE([dllimport])\n \n if test x$use_glibc_compat != xno; then\n-\n-  dnl __fdelt_chk's params and return type have changed from long unsigned int to long int.\n-  dnl See which one is present here.\n-  AC_MSG_CHECKING(__fdelt_chk type)\n-  AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[#ifdef _FORTIFY_SOURCE\n-                    #undef _FORTIFY_SOURCE\n-                  #endif\n-                  #define _FORTIFY_SOURCE 2\n-                  #include <sys/select.h>\n-     extern \"C\" long unsigned int __fdelt_warn(long unsigned int);]],[[]])],\n-    [ fdelt_type=\"long unsigned int\"],\n-    [ fdelt_type=\"long int\"])\n-  AC_MSG_RESULT($fdelt_type)\n-  AC_DEFINE_UNQUOTED(FDELT_TYPE, $fdelt_type,[parameter and return value type for __fdelt_chk])\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"],, [[$LDFLAG_WERROR]])\n-  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"],, [[$LDFLAG_WERROR]])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=__divmoddi4]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=__divmoddi4\"])\n+  AX_CHECK_LINK_FLAG([[-Wl,--wrap=log2f]], [COMPAT_LDFLAGS=\"$COMPAT_LDFLAGS -Wl,--wrap=log2f\"])\n else\n   AC_SEARCH_LIBS([clock_gettime],[rt])\n fi\n@@ -810,39 +804,6 @@ fi\n \n AC_CHECK_HEADERS([endian.h sys/endian.h byteswap.h stdio.h stdlib.h unistd.h strings.h sys/types.h sys/stat.h sys/select.h sys/prctl.h sys/sysctl.h vm/vm_param.h sys/vmmeter.h sys/resources.h])\n \n-dnl FD_ZERO may be dependent on a declaration of memcpy, e.g. in SmartOS\n-dnl check that it fails to build without memcpy, then that it builds with\n-AC_MSG_CHECKING(FD_ZERO memcpy dependence)\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-    #include <cstddef>\n-    #if HAVE_SYS_SELECT_H\n-    #include <sys/select.h>\n-    #endif\n-  ]],[[\n-    #if HAVE_SYS_SELECT_H\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    #endif\n-  ]])],\n-  [ AC_MSG_RESULT(no) ],\n-  [\n-      AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[\n-          #include <cstring>\n-          #if HAVE_SYS_SELECT_H\n-          #include <sys/select.h>\n-          #endif\n-        ]], [[\n-          #if HAVE_SYS_SELECT_H\n-          fd_set fds;\n-          FD_ZERO(&fds);\n-          #endif\n-        ]])],\n-        [ AC_MSG_RESULT(yes); AC_DEFINE(HAVE_CSTRING_DEPENDENT_FD_ZERO, 1, [Define this symbol if FD_ZERO is dependent of a memcpy declaration being available]) ],\n-        [ AC_MSG_ERROR(failed with cstring include) ]\n-      )\n-  ]\n-)\n-\n AC_CHECK_DECLS([getifaddrs, freeifaddrs],,,\n     [#include <sys/types.h>\n     #include <ifaddrs.h>]"
      },
      {
        "sha": "ca587ca9e543a108b984299cf98f693d5fbf7f4d",
        "filename": "contrib/devtools/security-check.py",
        "status": "modified",
        "additions": 45,
        "deletions": 79,
        "changes": 124,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/contrib/devtools/security-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/contrib/devtools/security-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/security-check.py?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -12,33 +12,33 @@\n import sys\n import os\n \n+from typing import List, Optional\n+\n READELF_CMD = os.getenv('READELF', '/usr/bin/readelf')\n OBJDUMP_CMD = os.getenv('OBJDUMP', '/usr/bin/objdump')\n OTOOL_CMD = os.getenv('OTOOL', '/usr/bin/otool')\n-NONFATAL = {} # checks which are non-fatal for now but only generate a warning\n \n-def check_ELF_PIE(executable):\n+def run_command(command) -> str:\n+    p = subprocess.run(command, stdout=subprocess.PIPE, check=True, universal_newlines=True)\n+    return p.stdout\n+\n+def check_ELF_PIE(executable) -> bool:\n     '''\n     Check for position independent executable (PIE), allowing for address space randomization.\n     '''\n-    p = subprocess.Popen([READELF_CMD, '-h', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-h', '-W', executable])\n \n     ok = False\n     for line in stdout.splitlines():\n-        line = line.split()\n-        if len(line)>=2 and line[0] == 'Type:' and line[1] == 'DYN':\n+        tokens = line.split()\n+        if len(line)>=2 and tokens[0] == 'Type:' and tokens[1] == 'DYN':\n             ok = True\n     return ok\n \n def get_ELF_program_headers(executable):\n     '''Return type and flags for ELF program headers'''\n-    p = subprocess.Popen([READELF_CMD, '-l', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-l', '-W', executable])\n+\n     in_headers = False\n     count = 0\n     headers = []\n@@ -62,7 +62,7 @@ def get_ELF_program_headers(executable):\n             count += 1\n     return headers\n \n-def check_ELF_NX(executable):\n+def check_ELF_NX(executable) -> bool:\n     '''\n     Check that no sections are writable and executable (including the stack)\n     '''\n@@ -75,7 +75,7 @@ def check_ELF_NX(executable):\n             have_wx = True\n     return have_gnu_stack and not have_wx\n \n-def check_ELF_RELRO(executable):\n+def check_ELF_RELRO(executable) -> bool:\n     '''\n     Check for read-only relocations.\n     GNU_RELRO program header must exist\n@@ -84,101 +84,78 @@ def check_ELF_RELRO(executable):\n     have_gnu_relro = False\n     for (typ, flags) in get_ELF_program_headers(executable):\n         # Note: not checking flags == 'R': here as linkers set the permission differently\n-        # This does not affect security: the permission flags of the GNU_RELRO program header are ignored, the PT_LOAD header determines the effective permissions.\n+        # This does not affect security: the permission flags of the GNU_RELRO program\n+        # header are ignored, the PT_LOAD header determines the effective permissions.\n         # However, the dynamic linker need to write to this area so these are RW.\n         # Glibc itself takes care of mprotecting this area R after relocations are finished.\n         # See also https://marc.info/?l=binutils&m=1498883354122353\n         if typ == 'GNU_RELRO':\n             have_gnu_relro = True\n \n     have_bindnow = False\n-    p = subprocess.Popen([READELF_CMD, '-d', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '-d', '-W', executable])\n+\n     for line in stdout.splitlines():\n         tokens = line.split()\n         if len(tokens)>1 and tokens[1] == '(BIND_NOW)' or (len(tokens)>2 and tokens[1] == '(FLAGS)' and 'BIND_NOW' in tokens[2:]):\n             have_bindnow = True\n     return have_gnu_relro and have_bindnow\n \n-def check_ELF_Canary(executable):\n+def check_ELF_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([READELF_CMD, '--dyn-syms', '-W', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([READELF_CMD, '--dyn-syms', '-W', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '__stack_chk_fail' in line:\n             ok = True\n     return ok\n \n-def get_PE_dll_characteristics(executable):\n-    '''\n-    Get PE DllCharacteristics bits.\n-    Returns a tuple (arch,bits) where arch is 'i386:x86-64' or 'i386'\n-    and bits is the DllCharacteristics value.\n-    '''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-x',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n-    arch = ''\n+def get_PE_dll_characteristics(executable) -> int:\n+    '''Get PE DllCharacteristics bits'''\n+    stdout = run_command([OBJDUMP_CMD, '-x',  executable])\n+\n     bits = 0\n     for line in stdout.splitlines():\n         tokens = line.split()\n-        if len(tokens)>=2 and tokens[0] == 'architecture:':\n-            arch = tokens[1].rstrip(',')\n         if len(tokens)>=2 and tokens[0] == 'DllCharacteristics':\n             bits = int(tokens[1],16)\n-    return (arch,bits)\n+    return bits\n \n IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0x0020\n IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE    = 0x0040\n IMAGE_DLL_CHARACTERISTICS_NX_COMPAT       = 0x0100\n \n-def check_PE_DYNAMIC_BASE(executable):\n+def check_PE_DYNAMIC_BASE(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x40 signifies dynamicbase (ASLR)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    reqbits = IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE) == IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE\n \n-# On 64 bit, must support high-entropy 64-bit address space layout randomization in addition to DYNAMIC_BASE\n-# to have secure ASLR.\n-def check_PE_HIGH_ENTROPY_VA(executable):\n+# Must support high-entropy 64-bit address space layout randomization\n+# in addition to DYNAMIC_BASE to have secure ASLR.\n+def check_PE_HIGH_ENTROPY_VA(executable) -> bool:\n     '''PIE: DllCharacteristics bit 0x20 signifies high-entropy ASLR'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n-    if arch == 'i386:x86-64':\n-        reqbits = IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n-    else: # Unnecessary on 32-bit\n-        assert(arch == 'i386')\n-        reqbits = 0\n-    return (bits & reqbits) == reqbits\n+    bits = get_PE_dll_characteristics(executable)\n+    return (bits & IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA) == IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA\n \n def check_PE_RELOC_SECTION(executable) -> bool:\n     '''Check for a reloc section. This is required for functional ASLR.'''\n-    p = subprocess.Popen([OBJDUMP_CMD, '-h',  executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OBJDUMP_CMD, '-h',  executable])\n+\n     for line in stdout.splitlines():\n         if '.reloc' in line:\n             return True\n     return False\n \n-def check_PE_NX(executable):\n+def check_PE_NX(executable) -> bool:\n     '''NX: DllCharacteristics bit 0x100 signifies nxcompat (DEP)'''\n-    (arch,bits) = get_PE_dll_characteristics(executable)\n+    bits = get_PE_dll_characteristics(executable)\n     return (bits & IMAGE_DLL_CHARACTERISTICS_NX_COMPAT) == IMAGE_DLL_CHARACTERISTICS_NX_COMPAT\n \n-def get_MACHO_executable_flags(executable):\n-    p = subprocess.Popen([OTOOL_CMD, '-vh', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+def get_MACHO_executable_flags(executable) -> List[str]:\n+    stdout = run_command([OTOOL_CMD, '-vh', executable])\n \n     flags = []\n     for line in stdout.splitlines():\n@@ -222,10 +199,7 @@ def check_MACHO_LAZY_BINDINGS(executable) -> bool:\n     Check for no lazy bindings.\n     We don't use or check for MH_BINDATLOAD. See #18295.\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-l', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-l', executable])\n \n     for line in stdout.splitlines():\n         tokens = line.split()\n@@ -238,10 +212,8 @@ def check_MACHO_Canary(executable) -> bool:\n     '''\n     Check for use of stack canary\n     '''\n-    p = subprocess.Popen([OTOOL_CMD, '-Iv', executable], stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE, universal_newlines=True)\n-    (stdout, stderr) = p.communicate()\n-    if p.returncode:\n-        raise IOError('Error opening file')\n+    stdout = run_command([OTOOL_CMD, '-Iv', executable])\n+\n     ok = False\n     for line in stdout.splitlines():\n         if '___stack_chk_fail' in line:\n@@ -270,7 +242,7 @@ def check_MACHO_Canary(executable) -> bool:\n ]\n }\n \n-def identify_executable(executable):\n+def identify_executable(executable) -> Optional[str]:\n     with open(filename, 'rb') as f:\n         magic = f.read(4)\n     if magic.startswith(b'MZ'):\n@@ -292,18 +264,12 @@ def identify_executable(executable):\n                 continue\n \n             failed = []\n-            warning = []\n             for (name, func) in CHECKS[etype]:\n                 if not func(filename):\n-                    if name in NONFATAL:\n-                        warning.append(name)\n-                    else:\n-                        failed.append(name)\n+                    failed.append(name)\n             if failed:\n                 print('%s: failed %s' % (filename, ' '.join(failed)))\n                 retval = 1\n-            if warning:\n-                print('%s: warning %s' % (filename, ' '.join(warning)))\n         except IOError:\n             print('%s: cannot open' % filename)\n             retval = 1"
      },
      {
        "sha": "1153df933fabb52d1d408c7dbf6b52ba31ee05fd",
        "filename": "share/genbuild.sh",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/share/genbuild.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/share/genbuild.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/share/genbuild.sh?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -18,27 +18,27 @@ else\n     exit 1\n fi\n \n-DESC=\"\"\n-SUFFIX=\"\"\n+GIT_TAG=\"\"\n+GIT_COMMIT=\"\"\n if [ \"${BITCOIN_GENBUILD_NO_GIT}\" != \"1\" ] && [ -e \"$(command -v git)\" ] && [ \"$(git rev-parse --is-inside-work-tree 2>/dev/null)\" = \"true\" ]; then\n     # clean 'dirty' status of touched files that haven't been modified\n     git diff >/dev/null 2>/dev/null\n \n     # if latest commit is tagged and not dirty, then override using the tag name\n     RAWDESC=$(git describe --abbrev=0 2>/dev/null)\n     if [ \"$(git rev-parse HEAD)\" = \"$(git rev-list -1 $RAWDESC 2>/dev/null)\" ]; then\n-        git diff-index --quiet HEAD -- && DESC=$RAWDESC\n+        git diff-index --quiet HEAD -- && GIT_TAG=$RAWDESC\n     fi\n \n     # otherwise generate suffix from git, i.e. string like \"59887e8-dirty\"\n-    SUFFIX=$(git rev-parse --short HEAD)\n-    git diff-index --quiet HEAD -- || SUFFIX=\"$SUFFIX-dirty\"\n+    GIT_COMMIT=$(git rev-parse --short HEAD)\n+    git diff-index --quiet HEAD -- || GIT_COMMIT=\"$GIT_COMMIT-dirty\"\n fi\n \n-if [ -n \"$DESC\" ]; then\n-    NEWINFO=\"#define BUILD_DESC \\\"$DESC\\\"\"\n-elif [ -n \"$SUFFIX\" ]; then\n-    NEWINFO=\"#define BUILD_SUFFIX $SUFFIX\"\n+if [ -n \"$GIT_TAG\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_TAG \\\"$GIT_TAG\\\"\"\n+elif [ -n \"$GIT_COMMIT\" ]; then\n+    NEWINFO=\"#define BUILD_GIT_COMMIT \\\"$GIT_COMMIT\\\"\"\n else\n     NEWINFO=\"// No build information available\"\n fi"
      },
      {
        "sha": "13812de0e7db91f7d964d6887270af8b32e09edf",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -496,7 +496,6 @@ libbitcoin_util_a_SOURCES = \\\n   support/lockedpool.cpp \\\n   chainparamsbase.cpp \\\n   clientversion.cpp \\\n-  compat/glibc_sanity_fdelt.cpp \\\n   compat/glibc_sanity.cpp \\\n   compat/glibcxx_sanity.cpp \\\n   compat/strnlen.cpp \\"
      },
      {
        "sha": "8a28f4f24924eb5c74674886113744e1a7d260db",
        "filename": "src/Makefile.leveldb.include",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/Makefile.leveldb.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/Makefile.leveldb.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.leveldb.include?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -36,7 +36,7 @@ LEVELDB_CPPFLAGS_INT += -DLEVELDB_PLATFORM_POSIX\n endif\n \n leveldb_libleveldb_a_CPPFLAGS = $(AM_CPPFLAGS) $(LEVELDB_CPPFLAGS_INT) $(LEVELDB_CPPFLAGS)\n-leveldb_libleveldb_a_CXXFLAGS = $(filter-out -Wconditional-uninitialized -Werror=conditional-uninitialized, $(AM_CXXFLAGS)) $(PIE_FLAGS)\n+leveldb_libleveldb_a_CXXFLAGS = $(filter-out -Wconditional-uninitialized -Werror=conditional-uninitialized -Wsuggest-override -Werror=suggest-override, $(AM_CXXFLAGS)) $(PIE_FLAGS)\n \n leveldb_libleveldb_a_SOURCES=\n leveldb_libleveldb_a_SOURCES += leveldb/port/port_stdcxx.h"
      },
      {
        "sha": "993967a18077882e20863a1383355c57d1ab5918",
        "filename": "src/clientversion.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 44,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/clientversion.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/clientversion.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/clientversion.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -14,59 +14,34 @@\n  */\n const std::string CLIENT_NAME(\"Satoshi\");\n \n-/**\n- * Client version number\n- */\n-#define CLIENT_VERSION_SUFFIX \"\"\n-\n-\n-/**\n- * The following part of the code determines the CLIENT_BUILD variable.\n- * Several mechanisms are used for this:\n- * * first, if HAVE_BUILD_INFO is defined, include build.h, a file that is\n- *   generated by the build environment, possibly containing the output\n- *   of git-describe in a macro called BUILD_DESC\n- * * secondly, if this is an exported version of the code, GIT_ARCHIVE will\n- *   be defined (automatically using the export-subst git attribute), and\n- *   GIT_COMMIT will contain the commit id.\n- * * then, three options exist for determining CLIENT_BUILD:\n- *   * if BUILD_DESC is defined, use that literally (output of git-describe)\n- *   * if not, but GIT_COMMIT is defined, use v[maj].[min].[rev].[build]-g[commit]\n- *   * otherwise, use v[maj].[min].[rev].[build]-unk\n- * finally CLIENT_VERSION_SUFFIX is added\n- */\n \n-//! First, include build.h if requested\n #ifdef HAVE_BUILD_INFO\n #include <obj/build.h>\n+// The <obj/build.h>, which is generated by the build environment (share/genbuild.sh),\n+// could contain only one line of the following:\n+//   - \"#define BUILD_GIT_TAG ...\", if the top commit is tagged\n+//   - \"#define BUILD_GIT_COMMIT ...\", if the top commit is not tagged\n+//   - \"// No build information available\", if proper git information is not available\n #endif\n \n-//! git will put \"#define GIT_ARCHIVE 1\" on the next line inside archives. $Format:%n#define GIT_ARCHIVE 1$\n-#ifdef GIT_ARCHIVE\n-#define GIT_COMMIT_ID \"$Format:%H$\"\n-#define GIT_COMMIT_DATE \"$Format:%cD$\"\n-#endif\n-\n-#define BUILD_DESC_WITH_SUFFIX(maj, min, rev, build, suffix) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-\" DO_STRINGIZE(suffix)\n-\n-#define BUILD_DESC_FROM_COMMIT(maj, min, rev, build, commit) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-g\" commit\n+//! git will put \"#define GIT_COMMIT_ID ...\" on the next line inside archives. $Format:%n#define GIT_COMMIT_ID \"%H\"$\n \n-#define BUILD_DESC_FROM_UNKNOWN(maj, min, rev, build) \\\n-    \"v\" DO_STRINGIZE(maj) \".\" DO_STRINGIZE(min) \".\" DO_STRINGIZE(rev) \".\" DO_STRINGIZE(build) \"-unk\"\n-\n-#ifndef BUILD_DESC\n-#ifdef BUILD_SUFFIX\n-#define BUILD_DESC BUILD_DESC_WITH_SUFFIX(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, BUILD_SUFFIX)\n-#elif defined(GIT_COMMIT_ID)\n-#define BUILD_DESC BUILD_DESC_FROM_COMMIT(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD, GIT_COMMIT_ID)\n+#ifdef BUILD_GIT_TAG\n+    #define BUILD_DESC BUILD_GIT_TAG\n+    #define BUILD_SUFFIX \"\"\n #else\n-#define BUILD_DESC BUILD_DESC_FROM_UNKNOWN(CLIENT_VERSION_MAJOR, CLIENT_VERSION_MINOR, CLIENT_VERSION_REVISION, CLIENT_VERSION_BUILD)\n-#endif\n+    #define BUILD_DESC \"v\" STRINGIZE(CLIENT_VERSION_MAJOR) \".\" STRINGIZE(CLIENT_VERSION_MINOR) \\\n+                       \".\" STRINGIZE(CLIENT_VERSION_REVISION) \".\" STRINGIZE(CLIENT_VERSION_BUILD)\n+    #ifdef BUILD_GIT_COMMIT\n+        #define BUILD_SUFFIX \"-\" BUILD_GIT_COMMIT\n+    #elif defined(GIT_COMMIT_ID)\n+        #define BUILD_SUFFIX \"-g\" GIT_COMMIT_ID\n+    #else\n+        #define BUILD_SUFFIX \"-unk\"\n+    #endif\n #endif\n \n-const std::string CLIENT_BUILD(BUILD_DESC CLIENT_VERSION_SUFFIX);\n+const std::string CLIENT_BUILD(BUILD_DESC BUILD_SUFFIX);\n \n static std::string FormatVersion(int nVersion)\n {"
      },
      {
        "sha": "d17de33e86b48505db08ca3df6bbe0b39aaf36d0",
        "filename": "src/compat/glibc_compat.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 13,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/compat/glibc_compat.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/compat/glibc_compat.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_compat.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -9,26 +9,13 @@\n #include <cstddef>\n #include <cstdint>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-#include <sys/select.h>\n-#endif\n-\n // Prior to GLIBC_2.14, memcpy was aliased to memmove.\n extern \"C\" void* memmove(void* a, const void* b, size_t c);\n extern \"C\" void* memcpy(void* a, const void* b, size_t c)\n {\n     return memmove(a, b, c);\n }\n \n-extern \"C\" void __chk_fail(void) __attribute__((__noreturn__));\n-extern \"C\" FDELT_TYPE __fdelt_warn(FDELT_TYPE a)\n-{\n-    if (a >= FD_SETSIZE)\n-        __chk_fail();\n-    return a / __NFDBITS;\n-}\n-extern \"C\" FDELT_TYPE __fdelt_chk(FDELT_TYPE) __attribute__((weak, alias(\"__fdelt_warn\")));\n-\n #if defined(__i386__) || defined(__arm__)\n \n extern \"C\" int64_t __udivmoddi4(uint64_t u, uint64_t v, uint64_t* rp);"
      },
      {
        "sha": "0367b9a53f02ea272a7c0dbd27d0e2b59e01440e",
        "filename": "src/compat/glibc_sanity.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/compat/glibc_sanity.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/compat/glibc_sanity.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -8,10 +8,6 @@\n \n #include <cstddef>\n \n-#if defined(HAVE_SYS_SELECT_H)\n-bool sanity_test_fdelt();\n-#endif\n-\n extern \"C\" void* memcpy(void* a, const void* b, size_t c);\n void* memcpy_int(void* a, const void* b, size_t c)\n {\n@@ -45,9 +41,5 @@ bool sanity_test_memcpy()\n \n bool glibc_sanity_test()\n {\n-#if defined(HAVE_SYS_SELECT_H)\n-    if (!sanity_test_fdelt())\n-        return false;\n-#endif\n     return sanity_test_memcpy<1025>();\n }"
      },
      {
        "sha": "87140d0c714dc5c261d678a48ba329d2f68b8643",
        "filename": "src/compat/glibc_sanity_fdelt.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 26,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/compat/glibc_sanity_fdelt.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/970e2ffa647911b22cf8e6bc96a554264a4e23f9/src/compat/glibc_sanity_fdelt.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/compat/glibc_sanity_fdelt.cpp?ref=970e2ffa647911b22cf8e6bc96a554264a4e23f9",
        "patch": "@@ -1,26 +0,0 @@\n-// Copyright (c) 2009-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-#if defined(HAVE_CONFIG_H)\n-#include <config/bitcoin-config.h>\n-#endif\n-\n-#if defined(HAVE_SYS_SELECT_H)\n-#ifdef HAVE_CSTRING_DEPENDENT_FD_ZERO\n-#include <cstring>\n-#endif\n-#include <sys/select.h>\n-\n-// trigger: Call FD_SET to trigger __fdelt_chk. FORTIFY_SOURCE must be defined\n-//   as >0 and optimizations must be set to at least -O2.\n-// test: Add a file descriptor to an empty fd_set. Verify that it has been\n-//   correctly added.\n-bool sanity_test_fdelt()\n-{\n-    fd_set fds;\n-    FD_ZERO(&fds);\n-    FD_SET(0, &fds);\n-    return FD_ISSET(0, &fds);\n-}\n-#endif"
      },
      {
        "sha": "3b97ba08d9fb4ce340e58883b3981646e58875b0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -972,7 +972,7 @@ bool AppInitParameterInteraction()\n \n     // Warn if unrecognized section name are present in the config file.\n     for (const auto& section : gArgs.GetUnrecognizedSections()) {\n-        InitWarning(strprintf(\"%s:%i \" + _(\"Section [%s] is not recognized.\").translated, section.m_file, section.m_line, section.m_name));\n+        InitWarning(strprintf(Untranslated(\"%s:%i \") + _(\"Section [%s] is not recognized.\"), section.m_file, section.m_line, section.m_name));\n     }\n \n     if (!fs::is_directory(GetBlocksDir())) {\n@@ -1035,7 +1035,7 @@ bool AppInitParameterInteraction()\n     nMaxConnections = std::min(nFD - MIN_CORE_FILEDESCRIPTORS - MAX_ADDNODE_CONNECTIONS, nMaxConnections);\n \n     if (nMaxConnections < nUserMaxConnections)\n-        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\").translated, nUserMaxConnections, nMaxConnections));\n+        InitWarning(strprintf(_(\"Reducing -maxconnections from %d to %d, because of system limitations.\"), nUserMaxConnections, nMaxConnections));\n \n     // ********************************************************* Step 3: parameter-to-internal-flags\n     if (gArgs.IsArgSet(\"-debug\")) {\n@@ -1046,7 +1046,7 @@ bool AppInitParameterInteraction()\n             [](std::string cat){return cat == \"0\" || cat == \"none\";})) {\n             for (const auto& cat : categories) {\n                 if (!LogInstance().EnableCategory(cat)) {\n-                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debug\", cat));\n+                    InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debug\", cat));\n                 }\n             }\n         }\n@@ -1055,7 +1055,7 @@ bool AppInitParameterInteraction()\n     // Now remove the logging categories which were explicitly excluded\n     for (const std::string& cat : gArgs.GetArgs(\"-debugexclude\")) {\n         if (!LogInstance().DisableCategory(cat)) {\n-            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\").translated, \"-debugexclude\", cat));\n+            InitWarning(strprintf(_(\"Unsupported logging category %s=%s.\"), \"-debugexclude\", cat));\n         }\n     }\n \n@@ -1268,7 +1268,7 @@ bool AppInitMain(NodeContext& node)\n         LogPrintf(\"Config file: %s\\n\", config_file_path.string());\n     } else if (gArgs.IsArgSet(\"-conf\")) {\n         // Warn if no conf file exists at path provided by user\n-        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\").translated, config_file_path.string()));\n+        InitWarning(strprintf(_(\"The specified config file %s does not exist\\n\"), config_file_path.string()));\n     } else {\n         // Not categorizing as \"Warning\" because it's the default behavior\n         LogPrintf(\"Config file: %s (not found, skipping)\\n\", config_file_path.string());"
      },
      {
        "sha": "d8e459a8e8d480897f6ca66baf720e7b8f5b1764",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -344,7 +344,7 @@ class ChainImpl : public Chain\n     bool shutdownRequested() override { return ShutdownRequested(); }\n     int64_t getAdjustedTime() override { return GetAdjustedTime(); }\n     void initMessage(const std::string& message) override { ::uiInterface.InitMessage(message); }\n-    void initWarning(const std::string& message) override { InitWarning(message); }\n+    void initWarning(const bilingual_str& message) override { InitWarning(message); }\n     void initError(const bilingual_str& message) override { InitError(message); }\n     void showProgress(const std::string& title, int progress, bool resume_possible) override\n     {"
      },
      {
        "sha": "7dfc77db7b8caf5dde20103fdb7136296599753b",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -225,7 +225,7 @@ class Chain\n     virtual void initMessage(const std::string& message) = 0;\n \n     //! Send init warning.\n-    virtual void initWarning(const std::string& message) = 0;\n+    virtual void initWarning(const bilingual_str& message) = 0;\n \n     //! Send init error.\n     virtual void initError(const bilingual_str& message) = 0;"
      },
      {
        "sha": "7e9bb2f27cb92d2d2d35da29bb31d5b548b7e51c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 10,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -2420,6 +2420,7 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n \n         uint32_t nFetchFlags = GetFetchFlags(pfrom);\n         const auto current_time = GetTime<std::chrono::microseconds>();\n+        uint256* best_block{nullptr};\n \n         for (CInv &inv : vInv)\n         {\n@@ -2436,17 +2437,14 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n             if (inv.type == MSG_BLOCK) {\n                 UpdateBlockAvailability(pfrom->GetId(), inv.hash);\n                 if (!fAlreadyHave && !fImporting && !fReindex && !mapBlocksInFlight.count(inv.hash)) {\n-                    // We used to request the full block here, but since headers-announcements are now the\n-                    // primary method of announcement on the network, and since, in the case that a node\n-                    // fell back to inv we probably have a reorg which we should get the headers for first,\n-                    // we now only provide a getheaders response here. When we receive the headers, we will\n-                    // then ask for the blocks we need.\n-                    connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), inv.hash));\n-                    LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, inv.hash.ToString(), pfrom->GetId());\n+                    // Headers-first is the primary method of announcement on\n+                    // the network. If a node fell back to sending blocks by inv,\n+                    // it's probably for a re-org. The final block hash\n+                    // provided should be the highest, so send a getheaders and\n+                    // then fetch the blocks we need to catch up.\n+                    best_block = &inv.hash;\n                 }\n-            }\n-            else\n-            {\n+            } else {\n                 pfrom->AddInventoryKnown(inv);\n                 if (fBlocksOnly) {\n                     LogPrint(BCLog::NET, \"transaction (%s) inv sent in violation of protocol, disconnecting peer=%d\\n\", inv.hash.ToString(), pfrom->GetId());\n@@ -2457,6 +2455,12 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n                 }\n             }\n         }\n+\n+        if (best_block != nullptr) {\n+            connman->PushMessage(pfrom, msgMaker.Make(NetMsgType::GETHEADERS, ::ChainActive().GetLocator(pindexBestHeader), *best_block));\n+            LogPrint(BCLog::NET, \"getheaders (%d) %s to peer=%d\\n\", pindexBestHeader->nHeight, best_block->ToString(), pfrom->GetId());\n+        }\n+\n         return true;\n     }\n "
      },
      {
        "sha": "db77c17df0b3c2b69dd601146b884fc1d52b45d7",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 34,
        "changes": 57,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -41,10 +41,11 @@ bool CCoinControlWidgetItem::operator<(const QTreeWidgetItem &other) const {\n     return QTreeWidgetItem::operator<(other);\n }\n \n-CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidget *parent) :\n+CoinControlDialog::CoinControlDialog(CCoinControl& coin_control, WalletModel* _model, const PlatformStyle *_platformStyle, QWidget *parent) :\n     QDialog(parent),\n     ui(new Ui::CoinControlDialog),\n-    model(nullptr),\n+    m_coin_control(coin_control),\n+    model(_model),\n     platformStyle(_platformStyle)\n {\n     ui->setupUi(this);\n@@ -136,6 +137,13 @@ CoinControlDialog::CoinControlDialog(const PlatformStyle *_platformStyle, QWidge\n         sortView(settings.value(\"nCoinControlSortColumn\").toInt(), (static_cast<Qt::SortOrder>(settings.value(\"nCoinControlSortOrder\").toInt())));\n \n     GUIUtil::handleCloseWindowShortcut(this);\n+\n+    if(_model->getOptionsModel() && _model->getAddressTableModel())\n+    {\n+        updateView();\n+        updateLabelLocked();\n+        CoinControlDialog::updateLabels(m_coin_control, _model, this);\n+    }\n }\n \n CoinControlDialog::~CoinControlDialog()\n@@ -148,18 +156,6 @@ CoinControlDialog::~CoinControlDialog()\n     delete ui;\n }\n \n-void CoinControlDialog::setModel(WalletModel *_model)\n-{\n-    this->model = _model;\n-\n-    if(_model && _model->getOptionsModel() && _model->getAddressTableModel())\n-    {\n-        updateView();\n-        updateLabelLocked();\n-        CoinControlDialog::updateLabels(_model, this);\n-    }\n-}\n-\n // ok button\n void CoinControlDialog::buttonBoxClicked(QAbstractButton* button)\n {\n@@ -185,8 +181,8 @@ void CoinControlDialog::buttonSelectAllClicked()\n                 ui->treeWidget->topLevelItem(i)->setCheckState(COLUMN_CHECKBOX, state);\n     ui->treeWidget->setEnabled(true);\n     if (state == Qt::Unchecked)\n-        coinControl()->UnSelectAll(); // just to be sure\n-    CoinControlDialog::updateLabels(model, this);\n+        m_coin_control.UnSelectAll(); // just to be sure\n+    CoinControlDialog::updateLabels(m_coin_control, model, this);\n }\n \n // context menu\n@@ -371,15 +367,15 @@ void CoinControlDialog::viewItemChanged(QTreeWidgetItem* item, int column)\n         COutPoint outpt(uint256S(item->data(COLUMN_ADDRESS, TxHashRole).toString().toStdString()), item->data(COLUMN_ADDRESS, VOutRole).toUInt());\n \n         if (item->checkState(COLUMN_CHECKBOX) == Qt::Unchecked)\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n         else if (item->isDisabled()) // locked (this happens if \"check all\" through parent node)\n             item->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n         else\n-            coinControl()->Select(outpt);\n+            m_coin_control.Select(outpt);\n \n         // selection changed -> update labels\n         if (ui->treeWidget->isEnabled()) // do not update on every click for (un)select all\n-            CoinControlDialog::updateLabels(model, this);\n+            CoinControlDialog::updateLabels(m_coin_control, model, this);\n     }\n }\n \n@@ -396,7 +392,7 @@ void CoinControlDialog::updateLabelLocked()\n     else ui->labelLocked->setVisible(false);\n }\n \n-void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n+void CoinControlDialog::updateLabels(CCoinControl& m_coin_control, WalletModel *model, QDialog* dialog)\n {\n     if (!model)\n         return;\n@@ -428,7 +424,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n     bool fWitness               = false;\n \n     std::vector<COutPoint> vCoinControl;\n-    coinControl()->ListSelected(vCoinControl);\n+    m_coin_control.ListSelected(vCoinControl);\n \n     size_t i = 0;\n     for (const auto& out : model->wallet().getCoins(vCoinControl)) {\n@@ -439,7 +435,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         const COutPoint& outpt = vCoinControl[i++];\n         if (out.is_spent)\n         {\n-            coinControl()->UnSelect(outpt);\n+            m_coin_control.UnSelect(outpt);\n             continue;\n         }\n \n@@ -492,7 +488,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = model->wallet().getMinimumFee(nBytes, *coinControl(), nullptr /* returned_target */, nullptr /* reason */);\n+        nPayFee = model->wallet().getMinimumFee(nBytes, m_coin_control, nullptr /* returned_target */, nullptr /* reason */);\n \n         if (nPayAmount > 0)\n         {\n@@ -584,12 +580,6 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n         label->setVisible(nChange < 0);\n }\n \n-CCoinControl* CoinControlDialog::coinControl()\n-{\n-    static CCoinControl coin_control;\n-    return &coin_control;\n-}\n-\n void CoinControlDialog::updateView()\n {\n     if (!model || !model->getOptionsModel() || !model->getAddressTableModel())\n@@ -606,8 +596,7 @@ void CoinControlDialog::updateView()\n     int nDisplayUnit = model->getOptionsModel()->getDisplayUnit();\n \n     for (const auto& coins : model->wallet().listCoins()) {\n-        CCoinControlWidgetItem *itemWalletAddress = new CCoinControlWidgetItem();\n-        itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n+        CCoinControlWidgetItem* itemWalletAddress{nullptr};\n         QString sWalletAddress = QString::fromStdString(EncodeDestination(coins.first));\n         QString sWalletLabel = model->getAddressTableModel()->labelForAddress(sWalletAddress);\n         if (sWalletLabel.isEmpty())\n@@ -616,7 +605,7 @@ void CoinControlDialog::updateView()\n         if (treeMode)\n         {\n             // wallet address\n-            ui->treeWidget->addTopLevelItem(itemWalletAddress);\n+            itemWalletAddress = new CCoinControlWidgetItem(ui->treeWidget);\n \n             itemWalletAddress->setFlags(flgTristate);\n             itemWalletAddress->setCheckState(COLUMN_CHECKBOX, Qt::Unchecked);\n@@ -690,13 +679,13 @@ void CoinControlDialog::updateView()\n              // disable locked coins\n             if (model->wallet().isLockedCoin(output))\n             {\n-                coinControl()->UnSelect(output); // just to be sure\n+                m_coin_control.UnSelect(output); // just to be sure\n                 itemOutput->setDisabled(true);\n                 itemOutput->setIcon(COLUMN_CHECKBOX, platformStyle->SingleColorIcon(\":/icons/lock_closed\"));\n             }\n \n             // set checkbox\n-            if (coinControl()->IsSelected(output))\n+            if (m_coin_control.IsSelected(output))\n                 itemOutput->setCheckState(COLUMN_CHECKBOX, Qt::Checked);\n         }\n "
      },
      {
        "sha": "3de7fd6d549f6711db5d9ddc9f2a71e3d659cdbe",
        "filename": "src/qt/coincontroldialog.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/coincontroldialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/coincontroldialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -31,7 +31,6 @@ class CCoinControlWidgetItem : public QTreeWidgetItem\n {\n public:\n     explicit CCoinControlWidgetItem(QTreeWidget *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n-    explicit CCoinControlWidgetItem(int type = Type) : QTreeWidgetItem(type) {}\n     explicit CCoinControlWidgetItem(QTreeWidgetItem *parent, int type = Type) : QTreeWidgetItem(parent, type) {}\n \n     bool operator<(const QTreeWidgetItem &other) const override;\n@@ -43,20 +42,18 @@ class CoinControlDialog : public QDialog\n     Q_OBJECT\n \n public:\n-    explicit CoinControlDialog(const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n+    explicit CoinControlDialog(CCoinControl& coin_control, WalletModel* model, const PlatformStyle *platformStyle, QWidget *parent = nullptr);\n     ~CoinControlDialog();\n \n-    void setModel(WalletModel *model);\n-\n     // static because also called from sendcoinsdialog\n-    static void updateLabels(WalletModel*, QDialog*);\n+    static void updateLabels(CCoinControl& m_coin_control, WalletModel*, QDialog*);\n \n     static QList<CAmount> payAmounts;\n-    static CCoinControl *coinControl();\n     static bool fSubtractFeeFromAmount;\n \n private:\n     Ui::CoinControlDialog *ui;\n+    CCoinControl& m_coin_control;\n     WalletModel *model;\n     int sortColumn;\n     Qt::SortOrder sortOrder;"
      },
      {
        "sha": "2d4af3f9e6050292aa484bdc66666c1141005396",
        "filename": "src/qt/rpcconsole.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/rpcconsole.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/rpcconsole.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/rpcconsole.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -24,7 +24,7 @@\n #include <univalue.h>\n \n #ifdef ENABLE_WALLET\n-#include <db_cxx.h>\n+#include <wallet/db.h>\n #include <wallet/wallet.h>\n #endif\n \n@@ -34,9 +34,10 @@\n #include <QScrollBar>\n #include <QScreen>\n #include <QSettings>\n+#include <QString>\n+#include <QStringList>\n #include <QTime>\n #include <QTimer>\n-#include <QStringList>\n \n // TODO: add a scrollback limit, as there is currently none\n // TODO: make it possible to filter out categories (esp debug messages when implemented)\n@@ -480,7 +481,7 @@ RPCConsole::RPCConsole(interfaces::Node& node, const PlatformStyle *_platformSty\n \n     // set library version labels\n #ifdef ENABLE_WALLET\n-    ui->berkeleyDBVersion->setText(DbEnv::version(nullptr, nullptr, nullptr));\n+    ui->berkeleyDBVersion->setText(QString::fromStdString(BerkeleyDatabaseVersion()));\n #else\n     ui->label_berkeleyDBVersion->hide();\n     ui->berkeleyDBVersion->hide();"
      },
      {
        "sha": "9e23fe78d8b1584a6e93ba7f9c091f0f2103ec11",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 31,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -57,6 +57,7 @@ SendCoinsDialog::SendCoinsDialog(const PlatformStyle *_platformStyle, QWidget *p\n     ui(new Ui::SendCoinsDialog),\n     clientModel(nullptr),\n     model(nullptr),\n+    m_coin_control(new CCoinControl),\n     fNewRecipientAllowed(true),\n     fFeeMinimized(true),\n     platformStyle(_platformStyle)\n@@ -259,14 +260,9 @@ bool SendCoinsDialog::PrepareSendText(QString& question_string, QString& informa\n     m_current_transaction = MakeUnique<WalletModelTransaction>(recipients);\n     WalletModel::SendCoinsReturn prepareStatus;\n \n-    // Always use a CCoinControl instance, use the CoinControlDialog instance if CoinControl has been enabled\n-    CCoinControl ctrl;\n-    if (model->getOptionsModel()->getCoinControlFeatures())\n-        ctrl = *CoinControlDialog::coinControl();\n+    updateCoinControlState(*m_coin_control);\n \n-    updateCoinControlState(ctrl);\n-\n-    prepareStatus = model->prepareTransaction(*m_current_transaction, ctrl);\n+    prepareStatus = model->prepareTransaction(*m_current_transaction, *m_coin_control);\n \n     // process prepareStatus and on error generate message shown to user\n     processSendCoinsReturn(prepareStatus,\n@@ -454,7 +450,7 @@ void SendCoinsDialog::on_sendButton_clicked()\n     }\n     if (!send_failure) {\n         accept();\n-        CoinControlDialog::coinControl()->UnSelectAll();\n+        m_coin_control->UnSelectAll();\n         coinControlUpdateLabels();\n     }\n     fNewRecipientAllowed = true;\n@@ -466,7 +462,7 @@ void SendCoinsDialog::clear()\n     m_current_transaction.reset();\n \n     // Clear coin control settings\n-    CoinControlDialog::coinControl()->UnSelectAll();\n+    m_coin_control->UnSelectAll();\n     ui->checkBoxCoinControlChange->setChecked(false);\n     ui->lineEditCoinControlChange->clear();\n     coinControlUpdateLabels();\n@@ -689,17 +685,11 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n \n void SendCoinsDialog::useAvailableBalance(SendCoinsEntry* entry)\n {\n-    // Get CCoinControl instance if CoinControl is enabled or create a new one.\n-    CCoinControl coin_control;\n-    if (model->getOptionsModel()->getCoinControlFeatures()) {\n-        coin_control = *CoinControlDialog::coinControl();\n-    }\n-\n     // Include watch-only for wallets without private key\n-    coin_control.fAllowWatchOnly = model->wallet().privateKeysDisabled();\n+    m_coin_control->fAllowWatchOnly = model->wallet().privateKeysDisabled();\n \n     // Calculate available amount to send.\n-    CAmount amount = model->wallet().getAvailableBalance(coin_control);\n+    CAmount amount = model->wallet().getAvailableBalance(*m_coin_control);\n     for (int i = 0; i < ui->entries->count(); ++i) {\n         SendCoinsEntry* e = qobject_cast<SendCoinsEntry*>(ui->entries->itemAt(i)->widget());\n         if (e && !e->isHidden() && e != entry) {\n@@ -758,12 +748,11 @@ void SendCoinsDialog::updateSmartFeeLabel()\n {\n     if(!model || !model->getOptionsModel())\n         return;\n-    CCoinControl coin_control;\n-    updateCoinControlState(coin_control);\n-    coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n+    updateCoinControlState(*m_coin_control);\n+    m_coin_control->m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     int returned_target;\n     FeeReason reason;\n-    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, coin_control, &returned_target, &reason));\n+    CFeeRate feeRate = CFeeRate(model->wallet().getMinimumFee(1000, *m_coin_control, &returned_target, &reason));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n \n@@ -834,16 +823,15 @@ void SendCoinsDialog::coinControlFeatureChanged(bool checked)\n     ui->frameCoinControl->setVisible(checked);\n \n     if (!checked && model) // coin control features disabled\n-        CoinControlDialog::coinControl()->SetNull();\n+        m_coin_control->SetNull();\n \n     coinControlUpdateLabels();\n }\n \n // Coin Control: button inputs -> show actual coin control dialog\n void SendCoinsDialog::coinControlButtonClicked()\n {\n-    CoinControlDialog dlg(platformStyle);\n-    dlg.setModel(model);\n+    CoinControlDialog dlg(*m_coin_control, model, platformStyle);\n     dlg.exec();\n     coinControlUpdateLabels();\n }\n@@ -853,7 +841,7 @@ void SendCoinsDialog::coinControlChangeChecked(int state)\n {\n     if (state == Qt::Unchecked)\n     {\n-        CoinControlDialog::coinControl()->destChange = CNoDestination();\n+        m_coin_control->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->clear();\n     }\n     else\n@@ -869,7 +857,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n     if (model && model->getAddressTableModel())\n     {\n         // Default to no change address until verified\n-        CoinControlDialog::coinControl()->destChange = CNoDestination();\n+        m_coin_control->destChange = CNoDestination();\n         ui->labelCoinControlChangeLabel->setStyleSheet(\"QLabel{color:red;}\");\n \n         const CTxDestination dest = DecodeDestination(text.toStdString());\n@@ -892,7 +880,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                     QMessageBox::Yes | QMessageBox::Cancel, QMessageBox::Cancel);\n \n                 if(btnRetVal == QMessageBox::Yes)\n-                    CoinControlDialog::coinControl()->destChange = dest;\n+                    m_coin_control->destChange = dest;\n                 else\n                 {\n                     ui->lineEditCoinControlChange->setText(\"\");\n@@ -911,7 +899,7 @@ void SendCoinsDialog::coinControlChangeEdited(const QString& text)\n                 else\n                     ui->labelCoinControlChangeLabel->setText(tr(\"(no label)\"));\n \n-                CoinControlDialog::coinControl()->destChange = dest;\n+                m_coin_control->destChange = dest;\n             }\n         }\n     }\n@@ -923,7 +911,7 @@ void SendCoinsDialog::coinControlUpdateLabels()\n     if (!model || !model->getOptionsModel())\n         return;\n \n-    updateCoinControlState(*CoinControlDialog::coinControl());\n+    updateCoinControlState(*m_coin_control);\n \n     // set pay amounts\n     CoinControlDialog::payAmounts.clear();\n@@ -941,10 +929,10 @@ void SendCoinsDialog::coinControlUpdateLabels()\n         }\n     }\n \n-    if (CoinControlDialog::coinControl()->HasSelected())\n+    if (m_coin_control->HasSelected())\n     {\n         // actual coin control calculation\n-        CoinControlDialog::updateLabels(model, this);\n+        CoinControlDialog::updateLabels(*m_coin_control, model, this);\n \n         // show coin control stats\n         ui->labelCoinControlAutomaticallySelected->hide();"
      },
      {
        "sha": "6961aa782159502646daa41bf1ad48b3b8b63d50",
        "filename": "src/qt/sendcoinsdialog.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/sendcoinsdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/sendcoinsdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -12,6 +12,7 @@\n #include <QString>\n #include <QTimer>\n \n+class CCoinControl;\n class ClientModel;\n class PlatformStyle;\n class SendCoinsEntry;\n@@ -60,6 +61,7 @@ public Q_SLOTS:\n     Ui::SendCoinsDialog *ui;\n     ClientModel *clientModel;\n     WalletModel *model;\n+    std::unique_ptr<CCoinControl> m_coin_control;\n     std::unique_ptr<WalletModelTransaction> m_current_transaction;\n     bool fNewRecipientAllowed;\n     bool fFeeMinimized;"
      },
      {
        "sha": "e9d190ce9568858079b1ae8832c803dc4ab1902b",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -259,7 +259,7 @@ void CreateWalletActivity::finish()\n     if (!m_error_message.original.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\", OpTranslated)));\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, Untranslated(\"\\n\")).translated));\n     }\n \n     if (m_wallet_model) Q_EMIT created(m_wallet_model);\n@@ -300,7 +300,7 @@ void OpenWalletActivity::finish()\n     if (!m_error_message.original.empty()) {\n         QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\", OpTranslated)));\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, Untranslated(\"\\n\")).translated));\n     }\n \n     if (m_wallet_model) Q_EMIT opened(m_wallet_model);"
      },
      {
        "sha": "9c9a35709ab1b797273284727fcd9b830a8c951e",
        "filename": "src/random.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 14,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/random.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/random.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -14,16 +14,14 @@\n #include <wincrypt.h>\n #endif\n #include <logging.h>  // for LogPrintf()\n+#include <randomenv.h>\n+#include <support/allocators/secure.h>\n #include <sync.h>     // for Mutex\n #include <util/time.h> // for GetTimeMicros()\n \n #include <stdlib.h>\n #include <thread>\n \n-#include <randomenv.h>\n-\n-#include <support/allocators/secure.h>\n-\n #ifndef WIN32\n #include <fcntl.h>\n #include <sys/time.h>\n@@ -590,16 +588,6 @@ uint64_t GetRand(uint64_t nMax) noexcept\n     return FastRandomContext(g_mock_deterministic_tests).randrange(nMax);\n }\n \n-std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max) noexcept\n-{\n-    return std::chrono::microseconds{GetRand(duration_max.count())};\n-}\n-\n-std::chrono::milliseconds GetRandMillis(std::chrono::milliseconds duration_max) noexcept\n-{\n-    return std::chrono::milliseconds{GetRand(duration_max.count())};\n-}\n-\n int GetRandInt(int nMax) noexcept\n {\n     return GetRand(nMax);"
      },
      {
        "sha": "0c6dc24983590e57dc9fe772be3731b28f909448",
        "filename": "src/random.h",
        "status": "modified",
        "additions": 14,
        "deletions": 2,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/random.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/random.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/random.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -67,9 +67,21 @@\n  * Thread-safe.\n  */\n void GetRandBytes(unsigned char* buf, int num) noexcept;\n+/** Generate a uniform random integer in the range [0..range). Precondition: range > 0 */\n uint64_t GetRand(uint64_t nMax) noexcept;\n-std::chrono::microseconds GetRandMicros(std::chrono::microseconds duration_max) noexcept;\n-std::chrono::milliseconds GetRandMillis(std::chrono::milliseconds duration_max) noexcept;\n+/** Generate a uniform random duration in the range [0..max). Precondition: max.count() > 0 */\n+template <typename D>\n+D GetRandomDuration(typename std::common_type<D>::type max) noexcept\n+// Having the compiler infer the template argument from the function argument\n+// is dangerous, because the desired return value generally has a different\n+// type than the function argument. So std::common_type is used to force the\n+// call site to specify the type of the return value.\n+{\n+    assert(max.count() > 0);\n+    return D{GetRand(max.count())};\n+};\n+constexpr auto GetRandMicros = GetRandomDuration<std::chrono::microseconds>;\n+constexpr auto GetRandMillis = GetRandomDuration<std::chrono::milliseconds>;\n int GetRandInt(int nMax) noexcept;\n uint256 GetRandHash() noexcept;\n "
      },
      {
        "sha": "8e752e5e83e23ddacf4b3a005c10ebcb5e1b39b9",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -874,7 +874,7 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     return result;\n }\n \n-class submitblock_StateCatcher : public CValidationInterface\n+class submitblock_StateCatcher final : public CValidationInterface\n {\n public:\n     uint256 hash;\n@@ -942,17 +942,17 @@ static UniValue submitblock(const JSONRPCRequest& request)\n     }\n \n     bool new_block;\n-    submitblock_StateCatcher sc(block.GetHash());\n-    RegisterValidationInterface(&sc);\n+    auto sc = std::make_shared<submitblock_StateCatcher>(block.GetHash());\n+    RegisterSharedValidationInterface(sc);\n     bool accepted = ProcessNewBlock(Params(), blockptr, /* fForceProcessing */ true, /* fNewBlock */ &new_block);\n-    UnregisterValidationInterface(&sc);\n+    UnregisterSharedValidationInterface(sc);\n     if (!new_block && accepted) {\n         return \"duplicate\";\n     }\n-    if (!sc.found) {\n+    if (!sc->found) {\n         return \"inconclusive\";\n     }\n-    return BIP22ValidationResult(sc.state);\n+    return BIP22ValidationResult(sc->state);\n }\n \n static UniValue submitheader(const JSONRPCRequest& request)"
      },
      {
        "sha": "219979f09533378e286725b27bf978ec134b5bcf",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -25,7 +25,8 @@ static std::string rpcWarmupStatus GUARDED_BY(cs_rpcWarmup) = \"RPC server starte\n /* Timer-creating functions */\n static RPCTimerInterface* timerInterface = nullptr;\n /* Map of name to timer. */\n-static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers;\n+static Mutex g_deadline_timers_mutex;\n+static std::map<std::string, std::unique_ptr<RPCTimerBase> > deadlineTimers GUARDED_BY(g_deadline_timers_mutex);\n static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler);\n \n struct RPCCommandExecutionInfo\n@@ -298,7 +299,7 @@ void InterruptRPC()\n void StopRPC()\n {\n     LogPrint(BCLog::RPC, \"Stopping RPC\\n\");\n-    deadlineTimers.clear();\n+    WITH_LOCK(g_deadline_timers_mutex, deadlineTimers.clear());\n     DeleteAuthCookie();\n     g_rpcSignals.Stopped();\n }\n@@ -486,6 +487,7 @@ void RPCRunLater(const std::string& name, std::function<void()> func, int64_t nS\n {\n     if (!timerInterface)\n         throw JSONRPCError(RPC_INTERNAL_ERROR, \"No timer handler registered for RPC\");\n+    LOCK(g_deadline_timers_mutex);\n     deadlineTimers.erase(name);\n     LogPrint(BCLog::RPC, \"queue run of timer %s in %i seconds (using %s)\\n\", name, nSeconds, timerInterface->Name());\n     deadlineTimers.emplace(name, std::unique_ptr<RPCTimerBase>(timerInterface->NewTimer(func, nSeconds*1000)));"
      },
      {
        "sha": "978a7bee4dc3898875c4a7ae5925dd5fe9b6738f",
        "filename": "src/test/random_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/random_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/random_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/random_tests.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -28,6 +28,8 @@ BOOST_AUTO_TEST_CASE(fastrandom_tests)\n     for (int i = 10; i > 0; --i) {\n         BOOST_CHECK_EQUAL(GetRand(std::numeric_limits<uint64_t>::max()), uint64_t{10393729187455219830U});\n         BOOST_CHECK_EQUAL(GetRandInt(std::numeric_limits<int>::max()), int{769702006});\n+        BOOST_CHECK_EQUAL(GetRandMicros(std::chrono::hours{1}).count(), 2917185654);\n+        BOOST_CHECK_EQUAL(GetRandMillis(std::chrono::hours{1}).count(), 2144374);\n     }\n     BOOST_CHECK_EQUAL(ctx1.rand32(), ctx2.rand32());\n     BOOST_CHECK_EQUAL(ctx1.rand32(), ctx2.rand32());\n@@ -47,6 +49,8 @@ BOOST_AUTO_TEST_CASE(fastrandom_tests)\n     for (int i = 10; i > 0; --i) {\n         BOOST_CHECK(GetRand(std::numeric_limits<uint64_t>::max()) != uint64_t{10393729187455219830U});\n         BOOST_CHECK(GetRandInt(std::numeric_limits<int>::max()) != int{769702006});\n+        BOOST_CHECK(GetRandMicros(std::chrono::hours{1}) != std::chrono::microseconds{2917185654});\n+        BOOST_CHECK(GetRandMillis(std::chrono::hours{1}) != std::chrono::milliseconds{2144374});\n     }\n     {\n         FastRandomContext ctx3, ctx4;\n@@ -87,7 +91,7 @@ BOOST_AUTO_TEST_CASE(stdrandom_test)\n         BOOST_CHECK(x >= 3);\n         BOOST_CHECK(x <= 9);\n \n-        std::vector<int> test{1,2,3,4,5,6,7,8,9,10};\n+        std::vector<int> test{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\n         std::shuffle(test.begin(), test.end(), ctx);\n         for (int j = 1; j <= 10; ++j) {\n             BOOST_CHECK(std::find(test.begin(), test.end(), j) != test.end());\n@@ -97,7 +101,6 @@ BOOST_AUTO_TEST_CASE(stdrandom_test)\n             BOOST_CHECK(std::find(test.begin(), test.end(), j) != test.end());\n         }\n     }\n-\n }\n \n /** Test that Shuffle reaches every permutation with equal probability. */"
      },
      {
        "sha": "899f054b834aca414d908fad22b61baafbc8e5c2",
        "filename": "src/test/validation_block_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 8,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/validation_block_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/validation_block_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_block_tests.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -32,7 +32,7 @@ struct MinerTestingSetup : public RegTestingSetup {\n \n BOOST_FIXTURE_TEST_SUITE(validation_block_tests, MinerTestingSetup)\n \n-struct TestSubscriber : public CValidationInterface {\n+struct TestSubscriber final : public CValidationInterface {\n     uint256 m_expected_tip;\n \n     explicit TestSubscriber(uint256 tip) : m_expected_tip(tip) {}\n@@ -175,8 +175,8 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n         LOCK(cs_main);\n         initial_tip = ::ChainActive().Tip();\n     }\n-    TestSubscriber sub(initial_tip->GetBlockHash());\n-    RegisterValidationInterface(&sub);\n+    auto sub = std::make_shared<TestSubscriber>(initial_tip->GetBlockHash());\n+    RegisterSharedValidationInterface(sub);\n \n     // create a bunch of threads that repeatedly process a block generated above at random\n     // this will create parallelism and randomness inside validation - the ValidationInterface\n@@ -204,14 +204,12 @@ BOOST_AUTO_TEST_CASE(processnewblock_signals_ordering)\n     for (auto& t : threads) {\n         t.join();\n     }\n-    while (GetMainSignals().CallbacksPending() > 0) {\n-        UninterruptibleSleep(std::chrono::milliseconds{100});\n-    }\n+    SyncWithValidationInterfaceQueue();\n \n-    UnregisterValidationInterface(&sub);\n+    UnregisterSharedValidationInterface(sub);\n \n     LOCK(cs_main);\n-    BOOST_CHECK_EQUAL(sub.m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n+    BOOST_CHECK_EQUAL(sub->m_expected_tip, ::ChainActive().Tip()->GetBlockHash());\n }\n \n /**"
      },
      {
        "sha": "ceba689e52970ee5fff32682742d77bc2df48c63",
        "filename": "src/test/validationinterface_tests.cpp",
        "status": "modified",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/validationinterface_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/test/validationinterface_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validationinterface_tests.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -12,6 +12,40 @@\n \n BOOST_FIXTURE_TEST_SUITE(validationinterface_tests, TestingSetup)\n \n+struct TestSubscriberNoop final : public CValidationInterface {\n+    void BlockChecked(const CBlock&, const BlockValidationState&) override {}\n+};\n+\n+BOOST_AUTO_TEST_CASE(unregister_validation_interface_race)\n+{\n+    std::atomic<bool> generate{true};\n+\n+    // Start thread to generate notifications\n+    std::thread gen{[&] {\n+        const CBlock block_dummy;\n+        BlockValidationState state_dummy;\n+        while (generate) {\n+            GetMainSignals().BlockChecked(block_dummy, state_dummy);\n+        }\n+    }};\n+\n+    // Start thread to consume notifications\n+    std::thread sub{[&] {\n+        // keep going for about 1 sec, which is 250k iterations\n+        for (int i = 0; i < 250000; i++) {\n+            auto sub = std::make_shared<TestSubscriberNoop>();\n+            RegisterSharedValidationInterface(sub);\n+            UnregisterSharedValidationInterface(sub);\n+        }\n+        // tell the other thread we are done\n+        generate = false;\n+    }};\n+\n+    gen.join();\n+    sub.join();\n+    BOOST_CHECK(!generate);\n+}\n+\n class TestInterface : public CValidationInterface\n {\n public:"
      },
      {
        "sha": "bb41154afcddf5ca0829a96f131147b029b09f3b",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -59,7 +59,7 @@ bool InitError(const bilingual_str& str)\n     return false;\n }\n \n-void InitWarning(const std::string& str)\n+void InitWarning(const bilingual_str& str)\n {\n-    uiInterface.ThreadSafeMessageBox(Untranslated(str), \"\", CClientUIInterface::MSG_WARNING);\n+    uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_WARNING);\n }"
      },
      {
        "sha": "9c49451e84009ca7bc9be003036aeda011bc9549",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -120,8 +120,7 @@ class CClientUIInterface\n };\n \n /** Show warning message **/\n-// TODO: InitWarning() should take a bilingual_str parameter.\n-void InitWarning(const std::string& str);\n+void InitWarning(const bilingual_str& str);\n \n /** Show error message **/\n bool InitError(const bilingual_str& str);"
      },
      {
        "sha": "cdb41630c69c8099d893a4f83be1a3ce464792ee",
        "filename": "src/util/string.h",
        "status": "modified",
        "additions": 12,
        "deletions": 4,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/util/string.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/util/string.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/string.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -30,20 +30,28 @@ NODISCARD inline std::string TrimString(const std::string& str, const std::strin\n  * @param separator  The separator\n  * @param unary_op   Apply this operator to each item in the list\n  */\n-template <typename T, typename UnaryOp>\n-std::string Join(const std::vector<T>& list, const std::string& separator, UnaryOp unary_op)\n+template <typename T, typename BaseType, typename UnaryOp>\n+auto Join(const std::vector<T>& list, const BaseType& separator, UnaryOp unary_op)\n+    -> decltype(unary_op(list.at(0)))\n {\n-    std::string ret;\n+    decltype(unary_op(list.at(0))) ret;\n     for (size_t i = 0; i < list.size(); ++i) {\n         if (i > 0) ret += separator;\n         ret += unary_op(list.at(i));\n     }\n     return ret;\n }\n \n+template <typename T>\n+T Join(const std::vector<T>& list, const T& separator)\n+{\n+    return Join(list, separator, [](const T& i) { return i; });\n+}\n+\n+// Explicit overload needed for c_str arguments, which would otherwise cause a substitution failure in the template above.\n inline std::string Join(const std::vector<std::string>& list, const std::string& separator)\n {\n-    return Join(list, separator, [](const std::string& i) { return i; });\n+    return Join<std::string>(list, separator);\n }\n \n /**"
      },
      {
        "sha": "268bcf30a7226b73e306f257b769723dc59a4262",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 8,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -16,21 +16,23 @@\n struct bilingual_str {\n     std::string original;\n     std::string translated;\n+\n+    bilingual_str& operator+=(const bilingual_str& rhs)\n+    {\n+        original += rhs.original;\n+        translated += rhs.translated;\n+        return *this;\n+    }\n };\n \n-inline bilingual_str operator+(const bilingual_str& lhs, const bilingual_str& rhs)\n+inline bilingual_str operator+(bilingual_str lhs, const bilingual_str& rhs)\n {\n-    return bilingual_str{\n-        lhs.original + rhs.original,\n-        lhs.translated + rhs.translated};\n+    lhs += rhs;\n+    return lhs;\n }\n \n /** Mark a bilingual_str as untranslated */\n inline bilingual_str Untranslated(std::string original) { return {original, original}; }\n-/** Unary operator to return the original */\n-inline std::string OpOriginal(const bilingual_str& b) { return b.original; }\n-/** Unary operator to return the translation */\n-inline std::string OpTranslated(const bilingual_str& b) { return b.translated; }\n \n namespace tinyformat {\n template <typename... Args>"
      },
      {
        "sha": "9437f9c817ce7b6eb26b7de1e710e6cf24c0318c",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 13,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -89,22 +89,26 @@ struct MainSignalsInstance {\n \n static CMainSignals g_signals;\n \n-void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler) {\n+void CMainSignals::RegisterBackgroundSignalScheduler(CScheduler& scheduler)\n+{\n     assert(!m_internals);\n     m_internals.reset(new MainSignalsInstance(&scheduler));\n }\n \n-void CMainSignals::UnregisterBackgroundSignalScheduler() {\n+void CMainSignals::UnregisterBackgroundSignalScheduler()\n+{\n     m_internals.reset(nullptr);\n }\n \n-void CMainSignals::FlushBackgroundCallbacks() {\n+void CMainSignals::FlushBackgroundCallbacks()\n+{\n     if (m_internals) {\n         m_internals->m_schedulerClient.EmptyQueue();\n     }\n }\n \n-size_t CMainSignals::CallbacksPending() {\n+size_t CMainSignals::CallbacksPending()\n+{\n     if (!m_internals) return 0;\n     return m_internals->m_schedulerClient.CallbacksPending();\n }\n@@ -114,10 +118,11 @@ CMainSignals& GetMainSignals()\n     return g_signals;\n }\n \n-void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> pwalletIn) {\n-    // Each connection captures pwalletIn to ensure that each callback is\n-    // executed before pwalletIn is destroyed. For more details see #18338.\n-    g_signals.m_internals->Register(std::move(pwalletIn));\n+void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks)\n+{\n+    // Each connection captures the shared_ptr to ensure that each callback is\n+    // executed before the subscriber is destroyed. For more details see #18338.\n+    g_signals.m_internals->Register(std::move(callbacks));\n }\n \n void RegisterValidationInterface(CValidationInterface* callbacks)\n@@ -132,24 +137,28 @@ void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> c\n     UnregisterValidationInterface(callbacks.get());\n }\n \n-void UnregisterValidationInterface(CValidationInterface* pwalletIn) {\n+void UnregisterValidationInterface(CValidationInterface* callbacks)\n+{\n     if (g_signals.m_internals) {\n-        g_signals.m_internals->Unregister(pwalletIn);\n+        g_signals.m_internals->Unregister(callbacks);\n     }\n }\n \n-void UnregisterAllValidationInterfaces() {\n+void UnregisterAllValidationInterfaces()\n+{\n     if (!g_signals.m_internals) {\n         return;\n     }\n     g_signals.m_internals->Clear();\n }\n \n-void CallFunctionInValidationInterfaceQueue(std::function<void ()> func) {\n+void CallFunctionInValidationInterfaceQueue(std::function<void()> func)\n+{\n     g_signals.m_internals->m_schedulerClient.AddToProcessQueue(std::move(func));\n }\n \n-void SyncWithValidationInterfaceQueue() {\n+void SyncWithValidationInterfaceQueue()\n+{\n     AssertLockNotHeld(cs_main);\n     // Block until the validation queue drains\n     std::promise<void> promise;"
      },
      {
        "sha": "9c23965bc162e259cdfb57b1781bab3737f99115",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 7,
        "deletions": 7,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -22,20 +22,20 @@ class CValidationInterface;\n class uint256;\n class CScheduler;\n \n-// These functions dispatch to one or all registered wallets\n-\n-/** Register a wallet to receive updates from core */\n-void RegisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister a wallet from core */\n-void UnregisterValidationInterface(CValidationInterface* pwalletIn);\n-/** Unregister all wallets from core */\n+/** Register subscriber */\n+void RegisterValidationInterface(CValidationInterface* callbacks);\n+/** Unregister subscriber. DEPRECATED. This is not safe to use when the RPC server or main message handler thread is running. */\n+void UnregisterValidationInterface(CValidationInterface* callbacks);\n+/** Unregister all subscribers */\n void UnregisterAllValidationInterfaces();\n \n // Alternate registration functions that release a shared_ptr after the last\n // notification is sent. These are useful for race-free cleanup, since\n // unregistration is nonblocking and can return before the last notification is\n // processed.\n+/** Register subscriber */\n void RegisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n+/** Unregister subscriber */\n void UnregisterSharedValidationInterface(std::shared_ptr<CValidationInterface> callbacks);\n \n /**"
      },
      {
        "sha": "1b2bd83a4ce06083baf041d7bd19c3c1239dab01",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -399,7 +399,7 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str&\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n-    LogPrintf(\"Using BerkeleyDB version %s\\n\", DbEnv::version(nullptr, nullptr, nullptr));\n+    LogPrintf(\"Using BerkeleyDB version %s\\n\", BerkeleyDatabaseVersion());\n     LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n     if (!env->Open(true /* retry */)) {\n@@ -916,3 +916,8 @@ void BerkeleyDatabase::ReloadDbEnv()\n         env->ReloadDbEnv();\n     }\n }\n+\n+std::string BerkeleyDatabaseVersion()\n+{\n+    return DbEnv::version(nullptr, nullptr, nullptr);\n+}"
      },
      {
        "sha": "37f96a1a9627e0b72a8ef8681493d555caf54802",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -19,7 +19,14 @@\n #include <unordered_map>\n #include <vector>\n \n+#if defined(__GNUC__) && !defined(__clang__)\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wsuggest-override\"\n+#endif\n #include <db_cxx.h>\n+#if defined(__GNUC__) && !defined(__clang__)\n+#pragma GCC diagnostic pop\n+#endif\n \n struct bilingual_str;\n \n@@ -402,4 +409,6 @@ class BerkeleyBatch\n     bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n+std::string BerkeleyDatabaseVersion();\n+\n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "16f3699d37705e312d5b886783906f8ebe00d664",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -56,7 +56,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n         bilingual_str error_string;\n         std::vector<bilingual_str> warnings;\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n-        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n         if (!verify_success) {\n             chain.initError(error_string);\n             return false;\n@@ -73,7 +73,7 @@ bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& walle\n             bilingual_str error;\n             std::vector<bilingual_str> warnings;\n             std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n-            if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n+            if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n             if (!pwallet) {\n                 chain.initError(error);\n                 return false;"
      },
      {
        "sha": "2a572487052ea765b3bb9441a6f13591d3bdd082",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 20,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -1482,10 +1482,9 @@ UniValue listtransactions(const JSONRPCRequest& request)\n \n static UniValue listsinceblock(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n \n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -1542,11 +1541,12 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n+    const CWallet& wallet = *pwallet;\n     // Make sure the results are valid at least up to the most recent block\n     // the user could have gotten from another RPC command prior to now\n-    pwallet->BlockUntilSyncedToCurrentChain();\n+    wallet.BlockUntilSyncedToCurrentChain();\n \n-    LOCK(pwallet->cs_wallet);\n+    LOCK(wallet.cs_wallet);\n \n     // The way the 'height' is initialized is just a workaround for the gcc bug #47679 since version 4.6.0.\n     Optional<int> height = MakeOptional(false, int()); // Height of the specified block or the common ancestor, if the block provided was in a deactivated chain.\n@@ -1557,9 +1557,9 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     uint256 blockId;\n     if (!request.params[0].isNull() && !request.params[0].get_str().empty()) {\n         blockId = ParseHashV(request.params[0], \"blockhash\");\n-        height.emplace();\n-        altheight.emplace();\n-        if (!pwallet->chain().findCommonAncestor(blockId, pwallet->GetLastBlockHash(), /* ancestor out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n+        height = int{};\n+        altheight = int{};\n+        if (!wallet.chain().findCommonAncestor(blockId, wallet.GetLastBlockHash(), /* ancestor out */ FoundBlock().height(*height), /* blockId out */ FoundBlock().height(*altheight))) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Block not found\");\n         }\n     }\n@@ -1572,21 +1572,21 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n         }\n     }\n \n-    if (ParseIncludeWatchonly(request.params[2], *pwallet)) {\n+    if (ParseIncludeWatchonly(request.params[2], wallet)) {\n         filter |= ISMINE_WATCH_ONLY;\n     }\n \n     bool include_removed = (request.params[3].isNull() || request.params[3].get_bool());\n \n-    int depth = height ? pwallet->GetLastBlockHeight() + 1 - *height : -1;\n+    int depth = height ? wallet.GetLastBlockHeight() + 1 - *height : -1;\n \n     UniValue transactions(UniValue::VARR);\n \n-    for (const std::pair<const uint256, CWalletTx>& pairWtx : pwallet->mapWallet) {\n+    for (const std::pair<const uint256, CWalletTx>& pairWtx : wallet.mapWallet) {\n         const CWalletTx& tx = pairWtx.second;\n \n         if (depth == -1 || abs(tx.GetDepthInMainChain()) < depth) {\n-            ListTransactions(pwallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n+            ListTransactions(&wallet, tx, 0, true, transactions, filter, nullptr /* filter_label */);\n         }\n     }\n \n@@ -1595,23 +1595,23 @@ static UniValue listsinceblock(const JSONRPCRequest& request)\n     UniValue removed(UniValue::VARR);\n     while (include_removed && altheight && *altheight > *height) {\n         CBlock block;\n-        if (!pwallet->chain().findBlock(blockId, FoundBlock().data(block)) || block.IsNull()) {\n+        if (!wallet.chain().findBlock(blockId, FoundBlock().data(block)) || block.IsNull()) {\n             throw JSONRPCError(RPC_INTERNAL_ERROR, \"Can't read block from disk\");\n         }\n         for (const CTransactionRef& tx : block.vtx) {\n-            auto it = pwallet->mapWallet.find(tx->GetHash());\n-            if (it != pwallet->mapWallet.end()) {\n+            auto it = wallet.mapWallet.find(tx->GetHash());\n+            if (it != wallet.mapWallet.end()) {\n                 // We want all transactions regardless of confirmation count to appear here,\n                 // even negative confirmation ones, hence the big negative.\n-                ListTransactions(pwallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n+                ListTransactions(&wallet, it->second, -100000000, true, removed, filter, nullptr /* filter_label */);\n             }\n         }\n         blockId = block.hashPrevBlock;\n         --*altheight;\n     }\n \n     uint256 lastblock;\n-    CHECK_NONFATAL(pwallet->chain().findAncestorByHeight(pwallet->GetLastBlockHash(), pwallet->GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n+    CHECK_NONFATAL(wallet.chain().findAncestorByHeight(wallet.GetLastBlockHash(), wallet.GetLastBlockHeight() + 1 - target_confirms, FoundBlock().hash(lastblock)));\n \n     UniValue ret(UniValue::VOBJ);\n     ret.pushKV(\"transactions\", transactions);\n@@ -1892,6 +1892,9 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n             }.Check(request);\n \n     int64_t nSleepTime;\n+    int64_t relock_time;\n+    // Prevent concurrent calls to walletpassphrase with the same wallet.\n+    LOCK(pwallet->m_unlock_mutex);\n     {\n         LOCK(pwallet->cs_wallet);\n \n@@ -1929,6 +1932,7 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n         pwallet->TopUpKeyPool();\n \n         pwallet->nRelockTime = GetTime() + nSleepTime;\n+        relock_time = pwallet->nRelockTime;\n     }\n \n     // rpcRunLater must be called without cs_wallet held otherwise a deadlock\n@@ -1940,9 +1944,11 @@ static UniValue walletpassphrase(const JSONRPCRequest& request)\n     // wallet before the following callback is called. If a valid shared pointer\n     // is acquired in the callback then the wallet is still loaded.\n     std::weak_ptr<CWallet> weak_wallet = wallet;\n-    pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet] {\n+    pwallet->chain().rpcRunLater(strprintf(\"lockwallet(%s)\", pwallet->GetName()), [weak_wallet, relock_time] {\n         if (auto shared_wallet = weak_wallet.lock()) {\n             LOCK(shared_wallet->cs_wallet);\n+            // Skip if this is not the most recent rpcRunLater callback.\n+            if (shared_wallet->nRelockTime != relock_time) return;\n             shared_wallet->Lock();\n             shared_wallet->nRelockTime = 0;\n         }\n@@ -2597,7 +2603,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", Join(warnings, \"\\n\", OpOriginal));\n+    obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n \n     return obj;\n }\n@@ -2737,7 +2743,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", Join(warnings, \"\\n\", OpOriginal));\n+    obj.pushKV(\"warning\", Join(warnings, Untranslated(\"\\n\")).original);\n \n     return obj;\n }"
      },
      {
        "sha": "a29fa22207927a21dd59af1248772ffbe957543a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -871,8 +871,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     std::vector<std::string> GetDestValues(const std::string& prefix) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Holds a timestamp at which point the wallet is scheduled (externally) to be relocked. Caller must arrange for actual relocking to occur via Lock().\n-    int64_t nRelockTime = 0;\n+    int64_t nRelockTime GUARDED_BY(cs_wallet){0};\n \n+    // Used to prevent concurrent calls to walletpassphrase RPC.\n+    Mutex m_unlock_mutex;\n     bool Unlock(const SecureString& strWalletPassphrase, bool accept_no_keys = false);\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);"
      },
      {
        "sha": "47200b6cc6fa8e4f15dd42716882c45e32240c26",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 67,
        "deletions": 1,
        "changes": 68,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -5,12 +5,14 @@\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\"\n import os\n \n-from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE\n+from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE, keyhash_to_p2pkh\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n     wait_until,\n     connect_nodes,\n+    disconnect_nodes,\n+    hex_str_to_bytes,\n )\n \n # Linux allow all characters other than \\x00\n@@ -81,8 +83,72 @@ def run_test(self):\n             # directory content should equal the generated transaction hashes\n             txids_rpc = list(map(lambda t: notify_outputname(self.wallet, t['txid']), self.nodes[1].listtransactions(\"*\", block_count)))\n             assert_equal(sorted(txids_rpc), sorted(os.listdir(self.walletnotify_dir)))\n+            for tx_file in os.listdir(self.walletnotify_dir):\n+                os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+            # Conflicting transactions tests. Give node 0 same wallet seed as\n+            # node 1, generate spends from node 0, and check notifications\n+            # triggered by node 1\n+            self.log.info(\"test -walletnotify with conflicting transactions\")\n+            self.nodes[0].sethdseed(seed=self.nodes[1].dumpprivkey(keyhash_to_p2pkh(hex_str_to_bytes(self.nodes[1].getwalletinfo()['hdseedid'])[::-1])))\n+            self.nodes[0].rescanblockchain()\n+            self.nodes[0].generatetoaddress(100, ADDRESS_BCRT1_UNSPENDABLE)\n+\n+            # Generate transaction on node 0, sync mempools, and check for\n+            # notification on node 1.\n+            tx1 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx1])\n+\n+            # Generate bump transaction, sync mempools, and check for bump1\n+            # notification. In the future, per\n+            # https://github.com/bitcoin/bitcoin/pull/9371, it might be better\n+            # to have notifications for both tx1 and bump1.\n+            bump1 = self.nodes[0].bumpfee(tx1)[\"txid\"]\n+            assert_equal(bump1 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([bump1])\n+\n+            # Add bump1 transaction to new block, checking for a notification\n+            # and the correct number of confirmations.\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump1])\n+            assert_equal(self.nodes[1].gettransaction(bump1)[\"confirmations\"], 1)\n+\n+            # Generate a second transaction to be bumped.\n+            tx2 = self.nodes[0].sendtoaddress(address=ADDRESS_BCRT1_UNSPENDABLE, amount=1, replaceable=True)\n+            assert_equal(tx2 in self.nodes[0].getrawmempool(), True)\n+            self.sync_mempools()\n+            self.expect_wallet_notify([tx2])\n+\n+            # Bump tx2 as bump2 and generate a block on node 0 while\n+            # disconnected, then reconnect and check for notifications on node 1\n+            # about newly confirmed bump2 and newly conflicted tx2. Currently\n+            # only the bump2 notification is sent. Ideally, notifications would\n+            # be sent both for bump2 and tx2, which was the previous behavior\n+            # before being broken by an accidental change in PR\n+            # https://github.com/bitcoin/bitcoin/pull/16624. The bug is reported\n+            # in issue https://github.com/bitcoin/bitcoin/issues/18325.\n+            disconnect_nodes(self.nodes[0], 1)\n+            bump2 = self.nodes[0].bumpfee(tx2)[\"txid\"]\n+            self.nodes[0].generatetoaddress(1, ADDRESS_BCRT1_UNSPENDABLE)\n+            assert_equal(self.nodes[0].gettransaction(bump2)[\"confirmations\"], 1)\n+            assert_equal(tx2 in self.nodes[1].getrawmempool(), True)\n+            connect_nodes(self.nodes[0], 1)\n+            self.sync_blocks()\n+            self.expect_wallet_notify([bump2])\n+            assert_equal(self.nodes[1].gettransaction(bump2)[\"confirmations\"], 1)\n \n         # TODO: add test for `-alertnotify` large fork notifications\n \n+    def expect_wallet_notify(self, tx_ids):\n+        wait_until(lambda: len(os.listdir(self.walletnotify_dir)) >= len(tx_ids), timeout=10)\n+        assert_equal(sorted(notify_outputname(self.wallet, tx_id) for tx_id in tx_ids), sorted(os.listdir(self.walletnotify_dir)))\n+        for tx_file in os.listdir(self.walletnotify_dir):\n+            os.remove(os.path.join(self.walletnotify_dir, tx_file))\n+\n+\n if __name__ == '__main__':\n     NotificationsTest().main()"
      },
      {
        "sha": "826faece680ae4ecacfab39f76d89287ef73c58f",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 3,
        "deletions": 32,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6dc30947fceefbd58d16e5aaf274eac41c0158d6/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6dc30947fceefbd58d16e5aaf274eac41c0158d6/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=6dc30947fceefbd58d16e5aaf274eac41c0158d6",
        "patch": "@@ -562,6 +562,8 @@ def get_request(self, *args, **kwargs):\n def arg_to_cli(arg):\n     if isinstance(arg, bool):\n         return str(arg).lower()\n+    elif arg is None:\n+        return 'null'\n     elif isinstance(arg, dict) or isinstance(arg, list):\n         return json.dumps(arg, default=EncodeDecimal)\n     else:\n@@ -632,27 +634,13 @@ def __init__(self, rpc, cli=False, descriptors=False):\n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n-    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase=None, avoid_reuse=None, descriptors=None):\n-        if self.is_cli:\n-            if disable_private_keys is None:\n-                disable_private_keys = 'null'\n-            if blank is None:\n-                blank = 'null'\n-            if passphrase is None:\n-                passphrase = ''\n-            if avoid_reuse is None:\n-                avoid_reuse = 'null'\n+    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase='', avoid_reuse=None, descriptors=None):\n         if descriptors is None:\n             descriptors = self.descriptors\n         return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors)\n \n     def importprivkey(self, privkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importprivkey')(privkey, label, rescan)\n         desc = descsum_create('combo(' + privkey + ')')\n@@ -667,11 +655,6 @@ def importprivkey(self, privkey, label=None, rescan=None):\n \n     def addmultisigaddress(self, nrequired, keys, label=None, address_type=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if address_type is None:\n-                address_type = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('addmultisigaddress')(nrequired, keys, label, address_type)\n         cms = self.createmultisig(nrequired, keys, address_type)\n@@ -687,11 +670,6 @@ def addmultisigaddress(self, nrequired, keys, label=None, address_type=None):\n \n     def importpubkey(self, pubkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importpubkey')(pubkey, label, rescan)\n         desc = descsum_create('combo(' + pubkey + ')')\n@@ -706,13 +684,6 @@ def importpubkey(self, pubkey, label=None, rescan=None):\n \n     def importaddress(self, address, label=None, rescan=None, p2sh=None):\n         wallet_info = self.getwalletinfo()\n-        if self.is_cli:\n-            if label is None:\n-                label = 'null'\n-            if rescan is None:\n-                rescan = 'null'\n-            if p2sh is None:\n-                p2sh = 'null'\n         if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n             return self.__getattr__('importaddress')(address, label, rescan, p2sh)\n         is_hex = False"
      }
    ]
  }
]