[
  {
    "sha": "023e63df78b847812040bf6958c97476606dfbfd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowMjNlNjNkZjc4Yjg0NzgxMjA0MGJmNjk1OGM5NzQ3NjYwNmRmYmZk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-28T18:52:21Z"
      },
      "committer": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2014-10-28T20:20:55Z"
      },
      "message": "qt: Move transaction notification to transaction table model\n\nMove transaction new/update notification to TransactionTableModel.\nThis moves the concerns to where they're actually handled.\nNo need to bounce this through wallet model.\n\n- Do wallet transaction preprocessing on signal handler side;\n  avoids locking cs_main/cs_wallet on notification in GUI thread\n  (except for new transactions)",
      "tree": {
        "sha": "047396bfc6c1490db1a3bcfc95e8f4db03c26780",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/047396bfc6c1490db1a3bcfc95e8f4db03c26780"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/023e63df78b847812040bf6958c97476606dfbfd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023e63df78b847812040bf6958c97476606dfbfd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/023e63df78b847812040bf6958c97476606dfbfd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/023e63df78b847812040bf6958c97476606dfbfd/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cd9114e5136ecc1f60baa43fffeeb632782f2353",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cd9114e5136ecc1f60baa43fffeeb632782f2353",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cd9114e5136ecc1f60baa43fffeeb632782f2353"
      }
    ],
    "stats": {
      "total": 269,
      "additions": 159,
      "deletions": 110
    },
    "files": [
      {
        "sha": "79cb4a629661beb21e339c27d1c5c9ab54f684b5",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 141,
        "deletions": 65,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023e63df78b847812040bf6958c97476606dfbfd/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023e63df78b847812040bf6958c97476606dfbfd/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=023e63df78b847812040bf6958c97476606dfbfd",
        "patch": "@@ -91,87 +91,80 @@ class TransactionTablePriv\n \n        Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(const uint256 &hash, int status)\n+    void updateWallet(const uint256 &hash, int status, bool showTransaction)\n     {\n         qDebug() << \"TransactionTablePriv::updateWallet : \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n-        {\n-            LOCK2(cs_main, wallet->cs_wallet);\n \n-            // Find transaction in wallet\n-            std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n-            bool inWallet = mi != wallet->mapWallet.end();\n+        // Find bounds of this transaction in model\n+        QList<TransactionRecord>::iterator lower = qLowerBound(\n+            cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n+        QList<TransactionRecord>::iterator upper = qUpperBound(\n+            cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n+        int lowerIndex = (lower - cachedWallet.begin());\n+        int upperIndex = (upper - cachedWallet.begin());\n+        bool inModel = (lower != upper);\n \n-            // Find bounds of this transaction in model\n-            QList<TransactionRecord>::iterator lower = qLowerBound(\n-                cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n-            QList<TransactionRecord>::iterator upper = qUpperBound(\n-                cachedWallet.begin(), cachedWallet.end(), hash, TxLessThan());\n-            int lowerIndex = (lower - cachedWallet.begin());\n-            int upperIndex = (upper - cachedWallet.begin());\n-            bool inModel = (lower != upper);\n+        if(status == CT_UPDATED)\n+        {\n+            if(showTransaction && !inModel)\n+                status = CT_NEW; /* Not in model, but want to show, treat as new */\n+            if(!showTransaction && inModel)\n+                status = CT_DELETED; /* In model, but want to hide, treat as deleted */\n+        }\n \n-            // Determine whether to show transaction or not\n-            bool showTransaction = (inWallet && TransactionRecord::showTransaction(mi->second));\n+        qDebug() << \"    inModel=\" + QString::number(inModel) +\n+                    \" Index=\" + QString::number(lowerIndex) + \"-\" + QString::number(upperIndex) +\n+                    \" showTransaction=\" + QString::number(showTransaction) + \" derivedStatus=\" + QString::number(status);\n \n-            if(status == CT_UPDATED)\n+        switch(status)\n+        {\n+        case CT_NEW:\n+            if(inModel)\n             {\n-                if(showTransaction && !inModel)\n-                    status = CT_NEW; /* Not in model, but want to show, treat as new */\n-                if(!showTransaction && inModel)\n-                    status = CT_DELETED; /* In model, but want to hide, treat as deleted */\n+                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n+                break;\n             }\n-\n-            qDebug() << \"   inWallet=\" + QString::number(inWallet) + \" inModel=\" + QString::number(inModel) +\n-                        \" Index=\" + QString::number(lowerIndex) + \"-\" + QString::number(upperIndex) +\n-                        \" showTransaction=\" + QString::number(showTransaction) + \" derivedStatus=\" + QString::number(status);\n-\n-            switch(status)\n+            if(showTransaction)\n             {\n-            case CT_NEW:\n-                if(inModel)\n-                {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is already in model\";\n-                    break;\n-                }\n-                if(!inWallet)\n+                LOCK2(cs_main, wallet->cs_wallet);\n+                // Find transaction in wallet\n+                std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n+                if(mi == wallet->mapWallet.end())\n                 {\n                     qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_NEW, but transaction is not in wallet\";\n                     break;\n                 }\n-                if(showTransaction)\n+                // Added -- insert at the right position\n+                QList<TransactionRecord> toInsert =\n+                        TransactionRecord::decomposeTransaction(wallet, mi->second);\n+                if(!toInsert.isEmpty()) /* only if something to insert */\n                 {\n-                    // Added -- insert at the right position\n-                    QList<TransactionRecord> toInsert =\n-                            TransactionRecord::decomposeTransaction(wallet, mi->second);\n-                    if(!toInsert.isEmpty()) /* only if something to insert */\n+                    parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n+                    int insert_idx = lowerIndex;\n+                    foreach(const TransactionRecord &rec, toInsert)\n                     {\n-                        parent->beginInsertRows(QModelIndex(), lowerIndex, lowerIndex+toInsert.size()-1);\n-                        int insert_idx = lowerIndex;\n-                        foreach(const TransactionRecord &rec, toInsert)\n-                        {\n-                            cachedWallet.insert(insert_idx, rec);\n-                            insert_idx += 1;\n-                        }\n-                        parent->endInsertRows();\n+                        cachedWallet.insert(insert_idx, rec);\n+                        insert_idx += 1;\n                     }\n+                    parent->endInsertRows();\n                 }\n-                break;\n-            case CT_DELETED:\n-                if(!inModel)\n-                {\n-                    qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n-                    break;\n-                }\n-                // Removed -- remove entire transaction from table\n-                parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n-                cachedWallet.erase(lower, upper);\n-                parent->endRemoveRows();\n-                break;\n-            case CT_UPDATED:\n-                // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n-                // visible transactions.\n+            }\n+            break;\n+        case CT_DELETED:\n+            if(!inModel)\n+            {\n+                qWarning() << \"TransactionTablePriv::updateWallet : Warning: Got CT_DELETED, but transaction is not in model\";\n                 break;\n             }\n+            // Removed -- remove entire transaction from table\n+            parent->beginRemoveRows(QModelIndex(), lowerIndex, upperIndex-1);\n+            cachedWallet.erase(lower, upper);\n+            parent->endRemoveRows();\n+            break;\n+        case CT_UPDATED:\n+            // Miscellaneous updates -- nothing to do, status update will take care of this, and is only computed for\n+            // visible transactions.\n+            break;\n         }\n     }\n \n@@ -230,16 +223,20 @@ TransactionTableModel::TransactionTableModel(CWallet* wallet, WalletModel *paren\n         QAbstractTableModel(parent),\n         wallet(wallet),\n         walletModel(parent),\n-        priv(new TransactionTablePriv(wallet, this))\n+        priv(new TransactionTablePriv(wallet, this)),\n+        fProcessingQueuedTransactions(false)\n {\n     columns << QString() << QString() << tr(\"Date\") << tr(\"Type\") << tr(\"Address\") << BitcoinUnits::getAmountColumnTitle(walletModel->getOptionsModel()->getDisplayUnit());\n     priv->refreshWallet();\n \n     connect(walletModel->getOptionsModel(), SIGNAL(displayUnitChanged(int)), this, SLOT(updateDisplayUnit()));\n+\n+    subscribeToCoreSignals();\n }\n \n TransactionTableModel::~TransactionTableModel()\n {\n+    unsubscribeFromCoreSignals();\n     delete priv;\n }\n \n@@ -250,12 +247,12 @@ void TransactionTableModel::updateAmountColumnTitle()\n     emit headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n-void TransactionTableModel::updateTransaction(const QString &hash, int status)\n+void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n {\n     uint256 updated;\n     updated.SetHex(hash.toStdString());\n \n-    priv->updateWallet(updated, status);\n+    priv->updateWallet(updated, status, showTransaction);\n }\n \n void TransactionTableModel::updateConfirmations()\n@@ -649,3 +646,82 @@ void TransactionTableModel::updateDisplayUnit()\n     updateAmountColumnTitle();\n     emit dataChanged(index(0, Amount), index(priv->size()-1, Amount));\n }\n+\n+// queue notifications to show a non freezing progress dialog e.g. for rescan\n+struct TransactionNotification\n+{\n+public:\n+    TransactionNotification() {}\n+    TransactionNotification(uint256 hash, ChangeType status, bool showTransaction):\n+        hash(hash), status(status), showTransaction(showTransaction) {}\n+\n+    void invoke(QObject *ttm)\n+    {\n+        QString strHash = QString::fromStdString(hash.GetHex());\n+        qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n+        QMetaObject::invokeMethod(ttm, \"updateTransaction\", Qt::QueuedConnection,\n+                                  Q_ARG(QString, strHash),\n+                                  Q_ARG(int, status),\n+                                  Q_ARG(bool, showTransaction));\n+    }\n+private:\n+    uint256 hash;\n+    ChangeType status;\n+    bool showTransaction;\n+};\n+\n+static bool fQueueNotifications = false;\n+static std::vector< TransactionNotification > vQueueNotifications;\n+\n+static void NotifyTransactionChanged(TransactionTableModel *ttm, CWallet *wallet, const uint256 &hash, ChangeType status)\n+{\n+    // Find transaction in wallet\n+    std::map<uint256, CWalletTx>::iterator mi = wallet->mapWallet.find(hash);\n+    // Determine whether to show transaction or not (determine this here so that no relocking is needed in GUI thread)\n+    bool inWallet = mi != wallet->mapWallet.end();\n+    bool showTransaction = (inWallet && TransactionRecord::showTransaction(mi->second));\n+\n+    TransactionNotification notification(hash, status, showTransaction);\n+\n+    if (fQueueNotifications)\n+    {\n+        vQueueNotifications.push_back(notification);\n+        return;\n+    }\n+    notification.invoke(ttm);\n+}\n+\n+static void ShowProgress(TransactionTableModel *ttm, const std::string &title, int nProgress)\n+{\n+    if (nProgress == 0)\n+        fQueueNotifications = true;\n+\n+    if (nProgress == 100)\n+    {\n+        fQueueNotifications = false;\n+        if (vQueueNotifications.size() > 10) // prevent balloon spam, show maximum 10 balloons\n+            QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n+        for (unsigned int i = 0; i < vQueueNotifications.size(); ++i)\n+        {\n+            if (vQueueNotifications.size() - i <= 10)\n+                QMetaObject::invokeMethod(ttm, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n+\n+            vQueueNotifications[i].invoke(ttm);\n+        }\n+        std::vector<TransactionNotification >().swap(vQueueNotifications); // clear\n+    }\n+}\n+\n+void TransactionTableModel::subscribeToCoreSignals()\n+{\n+    // Connect signals to wallet\n+    wallet->NotifyTransactionChanged.connect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n+    wallet->ShowProgress.connect(boost::bind(ShowProgress, this, _1, _2));\n+}\n+\n+void TransactionTableModel::unsubscribeFromCoreSignals()\n+{\n+    // Disconnect signals from wallet\n+    wallet->NotifyTransactionChanged.disconnect(boost::bind(NotifyTransactionChanged, this, _1, _2, _3));\n+    wallet->ShowProgress.disconnect(boost::bind(ShowProgress, this, _1, _2));\n+}"
      },
      {
        "sha": "bb517a969c9e4cef4acfea21d8769388db6c9a0f",
        "filename": "src/qt/transactiontablemodel.h",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023e63df78b847812040bf6958c97476606dfbfd/src/qt/transactiontablemodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023e63df78b847812040bf6958c97476606dfbfd/src/qt/transactiontablemodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.h?ref=023e63df78b847812040bf6958c97476606dfbfd",
        "patch": "@@ -72,12 +72,17 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant data(const QModelIndex &index, int role) const;\n     QVariant headerData(int section, Qt::Orientation orientation, int role) const;\n     QModelIndex index(int row, int column, const QModelIndex & parent = QModelIndex()) const;\n+    bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }\n \n private:\n     CWallet* wallet;\n     WalletModel *walletModel;\n     QStringList columns;\n     TransactionTablePriv *priv;\n+    bool fProcessingQueuedTransactions;\n+\n+    void subscribeToCoreSignals();\n+    void unsubscribeFromCoreSignals();\n \n     QString lookupAddress(const std::string &address, bool tooltip) const;\n     QVariant addressColor(const TransactionRecord *wtx) const;\n@@ -92,11 +97,14 @@ class TransactionTableModel : public QAbstractTableModel\n     QVariant txAddressDecoration(const TransactionRecord *wtx) const;\n \n public slots:\n-    void updateTransaction(const QString &hash, int status);\n+    /* New transaction, or transaction changed status */\n+    void updateTransaction(const QString &hash, int status, bool showTransaction);\n     void updateConfirmations();\n     void updateDisplayUnit();\n     /** Updates the column title to \"Amount (DisplayUnit)\" and emits headerDataChanged() signal for table headers to react. */\n     void updateAmountColumnTitle();\n+    /* Needed to update fProcessingQueuedTransactions through a QueuedConnection */\n+    void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }\n \n     friend class TransactionTablePriv;\n };"
      },
      {
        "sha": "f7b1552f3ee178355e46ac7161b677836e833cf6",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 38,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=023e63df78b847812040bf6958c97476606dfbfd",
        "patch": "@@ -34,7 +34,6 @@ WalletModel::WalletModel(CWallet *wallet, OptionsModel *optionsModel, QObject *p\n     cachedEncryptionStatus(Unencrypted),\n     cachedNumBlocks(0)\n {\n-    fProcessingQueuedTransactions = false;\n     fHaveWatchOnly = wallet->HaveWatchOnly();\n     fForceCheckBalanceChanged = false;\n \n@@ -164,11 +163,8 @@ void WalletModel::checkBalanceChanged()\n     }\n }\n \n-void WalletModel::updateTransaction(const QString &hash, int status)\n+void WalletModel::updateTransaction()\n {\n-    if(transactionTableModel)\n-        transactionTableModel->updateTransaction(hash, status);\n-\n     // Balance and number of transactions might have changed\n     fForceCheckBalanceChanged = true;\n }\n@@ -455,45 +451,16 @@ static void NotifyAddressBookChanged(WalletModel *walletmodel, CWallet *wallet,\n                               Q_ARG(int, status));\n }\n \n-// queue notifications to show a non freezing progress dialog e.g. for rescan\n-static bool fQueueNotifications = false;\n-static std::vector<std::pair<uint256, ChangeType> > vQueueNotifications;\n static void NotifyTransactionChanged(WalletModel *walletmodel, CWallet *wallet, const uint256 &hash, ChangeType status)\n {\n-    if (fQueueNotifications)\n-    {\n-        vQueueNotifications.push_back(make_pair(hash, status));\n-        return;\n-    }\n-\n-    QString strHash = QString::fromStdString(hash.GetHex());\n-\n-    qDebug() << \"NotifyTransactionChanged : \" + strHash + \" status= \" + QString::number(status);\n-    QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection,\n-                              Q_ARG(QString, strHash),\n-                              Q_ARG(int, status));\n+    Q_UNUSED(wallet);\n+    Q_UNUSED(hash);\n+    Q_UNUSED(status);\n+    QMetaObject::invokeMethod(walletmodel, \"updateTransaction\", Qt::QueuedConnection);\n }\n \n static void ShowProgress(WalletModel *walletmodel, const std::string &title, int nProgress)\n {\n-    if (nProgress == 0)\n-        fQueueNotifications = true;\n-\n-    if (nProgress == 100)\n-    {\n-        fQueueNotifications = false;\n-        if (vQueueNotifications.size() > 10) // prevent balloon spam, show maximum 10 balloons\n-            QMetaObject::invokeMethod(walletmodel, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, true));\n-        for (unsigned int i = 0; i < vQueueNotifications.size(); ++i)\n-        {\n-            if (vQueueNotifications.size() - i <= 10)\n-                QMetaObject::invokeMethod(walletmodel, \"setProcessingQueuedTransactions\", Qt::QueuedConnection, Q_ARG(bool, false));\n-\n-            NotifyTransactionChanged(walletmodel, NULL, vQueueNotifications[i].first, vQueueNotifications[i].second);\n-        }\n-        std::vector<std::pair<uint256, ChangeType> >().swap(vQueueNotifications); // clear\n-    }\n-\n     // emits signal \"showProgress\"\n     QMetaObject::invokeMethod(walletmodel, \"showProgress\", Qt::QueuedConnection,\n                               Q_ARG(QString, QString::fromStdString(title)),"
      },
      {
        "sha": "fe91e9d9faee1c389789ca5db2d17725e81fd7f5",
        "filename": "src/qt/walletmodel.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.h?ref=023e63df78b847812040bf6958c97476606dfbfd",
        "patch": "@@ -133,7 +133,6 @@ class WalletModel : public QObject\n     CAmount getWatchUnconfirmedBalance() const;\n     CAmount getWatchImmatureBalance() const;\n     EncryptionStatus getEncryptionStatus() const;\n-    bool processingQueuedTransactions() { return fProcessingQueuedTransactions; }\n \n     // Check address for validity\n     bool validateAddress(const QString &address);\n@@ -197,7 +196,6 @@ class WalletModel : public QObject\n \n private:\n     CWallet *wallet;\n-    bool fProcessingQueuedTransactions;\n     bool fHaveWatchOnly;\n     bool fForceCheckBalanceChanged;\n \n@@ -254,15 +252,13 @@ public slots:\n     /* Wallet status might have changed */\n     void updateStatus();\n     /* New transaction, or transaction changed status */\n-    void updateTransaction(const QString &hash, int status);\n+    void updateTransaction();\n     /* New, updated or removed address book entry */\n     void updateAddressBook(const QString &address, const QString &label, bool isMine, const QString &purpose, int status);\n     /* Watch-only added */\n     void updateWatchOnlyFlag(bool fHaveWatchonly);\n     /* Current, immature or unconfirmed balance might have changed - emit 'balanceChanged' if so */\n     void pollBalanceChanged();\n-    /* Needed to update fProcessingQueuedTransactions through a QueuedConnection */\n-    void setProcessingQueuedTransactions(bool value) { fProcessingQueuedTransactions = value; }\n };\n \n #endif // WALLETMODEL_H"
      },
      {
        "sha": "3b8fdd7e5fdfa7fa9513e728bf60887ab6cbad19",
        "filename": "src/qt/walletview.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletview.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/023e63df78b847812040bf6958c97476606dfbfd/src/qt/walletview.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletview.cpp?ref=023e63df78b847812040bf6958c97476606dfbfd",
        "patch": "@@ -137,10 +137,12 @@ void WalletView::setWalletModel(WalletModel *walletModel)\n void WalletView::processNewTransaction(const QModelIndex& parent, int start, int /*end*/)\n {\n     // Prevent balloon-spam when initial block download is in progress\n-    if (!walletModel || walletModel->processingQueuedTransactions() || !clientModel || clientModel->inInitialBlockDownload())\n+    if (!walletModel || !clientModel || clientModel->inInitialBlockDownload())\n         return;\n \n     TransactionTableModel *ttm = walletModel->getTransactionTableModel();\n+    if (!ttm || ttm->processingQueuedTransactions())\n+        return;\n \n     QString date = ttm->index(start, TransactionTableModel::Date, parent).data().toString();\n     qint64 amount = ttm->index(start, TransactionTableModel::Amount, parent).data(Qt::EditRole).toULongLong();"
      }
    ]
  }
]