[
  {
    "sha": "b1b0cfecb639ce44be280c7a45a41a19e893c401",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWIwY2ZlY2I2MzljZTQ0YmUyODBjN2E0NWE0MWExOWU4OTNjNDAx",
    "commit": {
      "author": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-12T18:56:36Z"
      },
      "committer": {
        "name": "Hennadii Stepanov",
        "email": "32963518+hebasto@users.noreply.github.com",
        "date": "2020-04-12T18:56:36Z"
      },
      "message": "test: Remove REJECT message code",
      "tree": {
        "sha": "d5a0bef25630c9e2e04255ea73fce7d79dc4a75d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d5a0bef25630c9e2e04255ea73fce7d79dc4a75d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1b0cfecb639ce44be280c7a45a41a19e893c401",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE0dvyxLlvLev0wWZUQQEIES5+qB8FAl6TZGQACgkQQQEIES5+\nqB+2zBAAutP4Bvjx57d34nbFyQ2inqhi1Yi8jynq/clnLSnV/DQW8eLMUyYZ/jxO\nqwnxr2Ao3EFur/A4AlqUVMDipe6kl/t53koogwYmQOCXaxrGYNimZ60WpOYnPpRd\n49yG9pvueXDCnYSF8VHuaRI8/sbwWMVIihLCkWwCu2Z/AjkYX4H34PGooaAF1lwh\ncuKpl4gzcJd7/rwA0EZgf8RWL+toR5D6YqI4PVL1bGno8DcUySB/0+CLGsvrXSm6\nL1Y0vU386tDmvuTANkGnaBIMBuDcKOi4oKccVC2e3XXU6Ibo4tbD+In/v18lhwjm\n58boukD/VcIdhXKFVSeGiZT9X3/YNA6QFGeLFP2f/qu/1U7fcfp5k9Nmhkqgerg7\nXgjgNdB4HwGi83XQkiKnQ5pkqM/9RdXTUWYzRph0b5FM5Dco4Ghq3co9QYBjZY5o\nQuWZv0vVc1v/aJ0LxD1k3Mc0T4eLymMG1r878Mj0JoLT29J0F9rdzCQoHeUl0sio\nzZh4UFA05XTkZqmH8bEb6FWkmIk3kx+xVr7GgGaYG24BWWi9Fx44hpGNaV46my5K\nrpc1z+8WHjanTY+YSMx427uQB9nXb4qEP/XDDCCRGB7rzb+QUcLO9rMK++2ei5gE\nORTzmnoPwluFZKUN+uGLybcUfIV9LD+Crnh6BIppNo2ZwrK0ESY=\n=T5Fw\n-----END PGP SIGNATURE-----",
        "payload": "tree d5a0bef25630c9e2e04255ea73fce7d79dc4a75d\nparent 76143bf714abade4a6d4068981c882e5cf0a2386\nauthor Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586717796 +0300\ncommitter Hennadii Stepanov <32963518+hebasto@users.noreply.github.com> 1586717796 +0300\n\ntest: Remove REJECT message code\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b0cfecb639ce44be280c7a45a41a19e893c401",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1b0cfecb639ce44be280c7a45a41a19e893c401",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1b0cfecb639ce44be280c7a45a41a19e893c401/comments",
    "author": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "hebasto",
      "id": 32963518,
      "node_id": "MDQ6VXNlcjMyOTYzNTE4",
      "avatar_url": "https://avatars.githubusercontent.com/u/32963518?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hebasto",
      "html_url": "https://github.com/hebasto",
      "followers_url": "https://api.github.com/users/hebasto/followers",
      "following_url": "https://api.github.com/users/hebasto/following{/other_user}",
      "gists_url": "https://api.github.com/users/hebasto/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hebasto/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hebasto/subscriptions",
      "organizations_url": "https://api.github.com/users/hebasto/orgs",
      "repos_url": "https://api.github.com/users/hebasto/repos",
      "events_url": "https://api.github.com/users/hebasto/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hebasto/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "76143bf714abade4a6d4068981c882e5cf0a2386",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/76143bf714abade4a6d4068981c882e5cf0a2386",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/76143bf714abade4a6d4068981c882e5cf0a2386"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 1,
      "deletions": 6
    },
    "files": [
      {
        "sha": "2ecd87748f432ecaca7ecee52f6cb4523c92e81d",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b0cfecb639ce44be280c7a45a41a19e893c401/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b0cfecb639ce44be280c7a45a41a19e893c401/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=b1b0cfecb639ce44be280c7a45a41a19e893c401",
        "patch": "@@ -4,7 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test message sending before handshake completion.\n \n-A node should never send anything other than VERSION/VERACK/REJECT until it's\n+A node should never send anything other than VERSION/VERACK until it's\n received a VERACK.\n \n This test connects to a node and sends it a few messages, trying to entice it\n@@ -35,7 +35,6 @@ def on_open(self):\n \n     def on_version(self, message): self.bad_message(message)\n     def on_verack(self, message): self.bad_message(message)\n-    def on_reject(self, message): self.bad_message(message)\n     def on_inv(self, message): self.bad_message(message)\n     def on_addr(self, message): self.bad_message(message)\n     def on_getdata(self, message): self.bad_message(message)\n@@ -65,8 +64,6 @@ def on_open(self):\n         for i in range(banscore):\n             self.send_message(msg_verack())\n \n-    def on_reject(self, message): pass\n-\n # Node that never sends a version. This one just sits idle and hopes to receive\n # any message (it shouldn't!)\n class CNodeNoVersionIdle(CLazyNode):\n@@ -79,7 +76,6 @@ def __init__(self):\n         self.version_received = False\n         super().__init__()\n \n-    def on_reject(self, message): pass\n     def on_verack(self, message): pass\n     # When version is received, don't reply with a verack. Instead, see if the\n     # node will give us a message that it shouldn't. This is not an exhaustive"
      },
      {
        "sha": "dd0a149344f4bf487d5b1e459d143b2182375f9a",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1b0cfecb639ce44be280c7a45a41a19e893c401/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1b0cfecb639ce44be280c7a45a41a19e893c401/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=b1b0cfecb639ce44be280c7a45a41a19e893c401",
        "patch": "@@ -339,7 +339,6 @@ def on_mempool(self, message): pass\n     def on_merkleblock(self, message): pass\n     def on_notfound(self, message): pass\n     def on_pong(self, message): pass\n-    def on_reject(self, message): pass\n     def on_sendcmpct(self, message): pass\n     def on_sendheaders(self, message): pass\n     def on_tx(self, message): pass"
      }
    ]
  }
]