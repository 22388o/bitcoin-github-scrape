[
  {
    "sha": "faeb6665362e35f573ad715ade0ef2db62d71839",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWViNjY2NTM2MmUzNWY1NzNhZDcxNWFkZTBlZjJkYjYyZDcxODM5",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-09-23T18:45:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-10-18T21:19:36Z"
      },
      "message": "util: Add CHECK_NONFATAL and use it in src/rpc",
      "tree": {
        "sha": "45850a75344361ee5537510375d363e9367d00ab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/45850a75344361ee5537510375d363e9367d00ab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faeb6665362e35f573ad715ade0ef2db62d71839",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgKfQv/aw8ai0LP9cpmvYIEyQ1eDZBCyc5OzRLdSd6t1Z9u+29P7+UBP1ukRtN6\nzKiBK1JW4U5xdlooj0PkNlp9/LKERAFJuhM1//PQiPOohNRrJqwKxjPWRBf/utYy\ntAZeU3q1fNefVKFswNOPmwdn6QnSyN5ru0s5rTB+QysV2HzJwBYZPOLtwLU2NCP7\nt6xvTChZqye99HL7MBnEXBvNr4GFsJgSGSAXhGVqygDGBagv6xx/kDYr3PO5QN0L\nDzDtzsPZUC5T1gybrX1GOOLR+xe1/5SjkAaPmXaEw65kB/KNnU+TAFVGS6KKU9qv\n5IZQ3KY9HEIsKfNt++ous/uM487NjqqkEfXLO5ghGtlMEVn0n5LRacCXmLwg7Du7\nlT5GDwZJPZ8vAStHR8q0MMNFKmXOAH2q+9E6ul4OiumnzrT3DoUTOLhBk5o6h6hL\nxV8rCojal42KPuEyUpFlkan8Mjnt39cl+/JsOHTK8eYiOb4EZig99tBqXvPpNFNO\n3kAdvuhw\n=pf2q\n-----END PGP SIGNATURE-----",
        "payload": "tree 45850a75344361ee5537510375d363e9367d00ab\nparent 0ff7cd7d0c074448db636bcc73e7879b7e4b21ec\nauthor MarcoFalke <falke.marco@gmail.com> 1569264351 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1571433576 -0400\n\nutil: Add CHECK_NONFATAL and use it in src/rpc\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faeb6665362e35f573ad715ade0ef2db62d71839",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faeb6665362e35f573ad715ade0ef2db62d71839",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faeb6665362e35f573ad715ade0ef2db62d71839/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0ff7cd7d0c074448db636bcc73e7879b7e4b21ec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0ff7cd7d0c074448db636bcc73e7879b7e4b21ec",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0ff7cd7d0c074448db636bcc73e7879b7e4b21ec"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 63,
      "deletions": 10
    },
    "files": [
      {
        "sha": "69d380175d769f329ee206ed0f49886535e80647",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -206,6 +206,7 @@ BITCOIN_CORE_H = \\\n   undo.h \\\n   util/bip32.h \\\n   util/bytevectorhash.h \\\n+  util/check.h \\\n   util/error.h \\\n   util/fees.h \\\n   util/spanparsing.h \\"
      },
      {
        "sha": "fac6bcd60db93d5a0e69444dd308efe651dcd065",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -10,11 +10,11 @@\n #include <chain.h>\n #include <chainparams.h>\n #include <coins.h>\n-#include <node/coinstats.h>\n #include <consensus/validation.h>\n #include <core_io.h>\n #include <hash.h>\n #include <index/blockfilterindex.h>\n+#include <node/coinstats.h>\n #include <policy/feerate.h>\n #include <policy/policy.h>\n #include <policy/rbf.h>\n@@ -34,7 +34,6 @@\n #include <validationinterface.h>\n #include <warnings.h>\n \n-#include <assert.h>\n #include <stdint.h>\n \n #include <univalue.h>"
      },
      {
        "sha": "d73dd6e52d9fdc417c76fc489bd4214cd5c866a7",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -3,15 +3,16 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include <key_io.h>\n #include <httpserver.h>\n+#include <key_io.h>\n #include <outputtype.h>\n #include <rpc/blockchain.h>\n #include <rpc/server.h>\n #include <rpc/util.h>\n #include <script/descriptor.h>\n-#include <util/system.h>\n+#include <util/check.h>\n #include <util/strencodings.h>\n+#include <util/system.h>\n #include <util/validation.h>\n \n #include <stdint.h>\n@@ -540,6 +541,7 @@ static UniValue echo(const JSONRPCRequest& request)\n         throw std::runtime_error(\n             RPCHelpMan{\"echo|echojson ...\",\n                 \"\\nSimply echo back the input arguments. This command is for testing.\\n\"\n+                \"\\nIt will return an internal bug report when exactly 100 arguments are passed.\\n\"\n                 \"\\nThe difference between echo and echojson is that echojson has argument conversion enabled in the client-side table in \"\n                 \"bitcoin-cli and the GUI. There is no server-side difference.\",\n                 {},\n@@ -548,6 +550,8 @@ static UniValue echo(const JSONRPCRequest& request)\n             }.ToString()\n         );\n \n+    CHECK_NONFATAL(request.params.size() != 100);\n+\n     return request.params;\n }\n "
      },
      {
        "sha": "ec36956c958fa8c1771e53412ae92259f730dbb1",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -7,14 +7,15 @@\n \n #include <node/transaction.h>\n #include <outputtype.h>\n-#include <pubkey.h>\n #include <protocol.h>\n+#include <pubkey.h>\n #include <rpc/protocol.h>\n #include <rpc/request.h>\n #include <script/script.h>\n #include <script/sign.h>\n #include <script/standard.h>\n #include <univalue.h>\n+#include <util/check.h>\n \n #include <string>\n #include <vector>\n@@ -146,7 +147,7 @@ struct RPCArg {\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n     {\n-        assert(type != Type::ARR && type != Type::OBJ);\n+        CHECK_NONFATAL(type != Type::ARR && type != Type::OBJ);\n     }\n \n     RPCArg(\n@@ -165,7 +166,7 @@ struct RPCArg {\n           m_oneline_description{oneline_description},\n           m_type_str{type_str}\n     {\n-        assert(type == Type::ARR || type == Type::OBJ);\n+        CHECK_NONFATAL(type == Type::ARR || type == Type::OBJ);\n     }\n \n     bool IsOptional() const;\n@@ -194,14 +195,14 @@ struct RPCResult {\n     explicit RPCResult(std::string result)\n         : m_cond{}, m_result{std::move(result)}\n     {\n-        assert(!m_result.empty());\n+        CHECK_NONFATAL(!m_result.empty());\n     }\n \n     RPCResult(std::string cond, std::string result)\n         : m_cond{std::move(cond)}, m_result{std::move(result)}\n     {\n-        assert(!m_cond.empty());\n-        assert(!m_result.empty());\n+        CHECK_NONFATAL(!m_cond.empty());\n+        CHECK_NONFATAL(!m_result.empty());\n     }\n };\n "
      },
      {
        "sha": "d18887ae958412e28b5fcefa572027a84cb102d5",
        "filename": "src/util/check.h",
        "status": "added",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/src/util/check.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/src/util/check.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/check.h?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_UTIL_CHECK_H\n+#define BITCOIN_UTIL_CHECK_H\n+\n+#include <tinyformat.h>\n+\n+#include <stdexcept>\n+\n+class NonFatalCheckError : public std::runtime_error\n+{\n+    using std::runtime_error::runtime_error;\n+};\n+\n+/**\n+ * Throw a NonFatalCheckError when the condition evaluates to false\n+ *\n+ * This should only be used\n+ * - where the condition is assumed to be true, not for error handling or validating user input\n+ * - where a failure to fulfill the condition is recoverable and does not abort the program\n+ *\n+ * For example in RPC code, where it is undersirable to crash the whole program, this can be generally used to replace\n+ * asserts or recoverable logic errors. A NonFatalCheckError in RPC code is caught and passed as a string to the RPC\n+ * caller, which can then report the issue to the developers.\n+ */\n+#define CHECK_NONFATAL(condition)                                 \\\n+    do {                                                          \\\n+        if (!(condition)) {                                       \\\n+            throw NonFatalCheckError(                             \\\n+                strprintf(\"%s:%d (%s)\\n\"                          \\\n+                          \"Internal bug detected: '%s'\\n\"         \\\n+                          \"You may report this issue here: %s\\n\", \\\n+                    __FILE__, __LINE__, __func__,                 \\\n+                    (#condition),                                 \\\n+                    PACKAGE_BUGREPORT));                          \\\n+        }                                                         \\\n+    } while (false)\n+\n+#endif // BITCOIN_UTIL_CHECK_H"
      },
      {
        "sha": "3da9f05ca5395540274b27eaf4c1e595de624458",
        "filename": "test/functional/rpc_misc.py",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faeb6665362e35f573ad715ade0ef2db62d71839/test/functional/rpc_misc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faeb6665362e35f573ad715ade0ef2db62d71839/test/functional/rpc_misc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_misc.py?ref=faeb6665362e35f573ad715ade0ef2db62d71839",
        "patch": "@@ -23,6 +23,13 @@ def set_test_params(self):\n     def run_test(self):\n         node = self.nodes[0]\n \n+        self.log.info(\"test CHECK_NONFATAL\")\n+        assert_raises_rpc_error(\n+            -1,\n+            \"Internal bug detected: 'request.params.size() != 100'\",\n+            lambda: node.echo(*[0] * 100),\n+        )\n+\n         self.log.info(\"test getmemoryinfo\")\n         memory = node.getmemoryinfo()['locked']\n         assert_greater_than(memory['used'], 0)"
      }
    ]
  }
]