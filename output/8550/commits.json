[
  {
    "sha": "9e83a882ecfbc38d130da6effc8aa3593421af0d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTgzYTg4MmVjZmJjMzhkMTMwZGE2ZWZmYzhhYTM1OTM0MjFhZjBk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-12T11:04:44Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-22T21:31:33Z"
      },
      "message": "Add mempool statistics collector",
      "tree": {
        "sha": "49f79cc7cf14217da0e87bbade3ced836bab4b95",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/49f79cc7cf14217da0e87bbade3ced836bab4b95"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e83a882ecfbc38d130da6effc8aa3593421af0d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloV7LYACgkQHrd2uwPH\nki13qBAAsh0Je6MBg87Ct1V82NUsyobXW7CLYx+DJu6RPY83oDZJS26vgQqZRFXD\na7PdYShXUdcBabHY4A8fLOEPnVdcx+TFb8sA+byoYuWjYaMPXuvSeTd+5xCw+cG2\nZGcHnzS260m9BaE+LxKzp68Tk6d0LXYZE7YTWrLxBvxwkgmr7Y9KQhZydxx/wQjP\nM+ik3HAJB42O2jQinEwj0daqrGkJffVXCVO1a0G+wUw7ftypbt1j+TAmfery8w20\nR2S0wG8ddDmjoEyQMFgYLdHkFi1/+ZlhmrhxuG6F61oS75+JhIfu3dMjP53yuiU2\nmOzk/5NFbSKzUe7ERvW9sXx63kRe9ynR2BkAYQhk/GMNyJPONR2RpGgZHY+OhV8j\nza6M9sp+CQ34GlsntP+jvnposKC8jULEWnkhAX3jbxAhuUrrGTvj8blQQkl+w2UU\nzt29EMd0H1eC6cIBzXDeY8lGfko1C45BeV5NGcc0AqX3WfPZ/LGatiIP/fiwDbFA\nHQ8TsNZMwwT1nDTTsay88rnH4D+fm1qseHfTbYqiNxFm9bvgzf75Hob/HHLU4EDT\nfF8GD9x5vl/SQb+QVOR4GWjXEtBH81SoXPKgABaGoWQkxZ4xmua+CKwCC+agncAA\nkJHo6t3epi+ziMJk6A0H7GGzJEp6GAI+HmIrwZdjoGDEt2d0kXg=\n=0FAO\n-----END PGP SIGNATURE-----",
        "payload": "tree 49f79cc7cf14217da0e87bbade3ced836bab4b95\nparent 3d6ad407770e13958e157bf026cae0bfb9254899\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1470999884 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1511386293 -1000\n\nAdd mempool statistics collector\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e83a882ecfbc38d130da6effc8aa3593421af0d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e83a882ecfbc38d130da6effc8aa3593421af0d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e83a882ecfbc38d130da6effc8aa3593421af0d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3d6ad407770e13958e157bf026cae0bfb9254899",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3d6ad407770e13958e157bf026cae0bfb9254899",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3d6ad407770e13958e157bf026cae0bfb9254899"
      }
    ],
    "stats": {
      "total": 258,
      "additions": 256,
      "deletions": 2
    },
    "files": [
      {
        "sha": "f05f5e40316bc3741795aa22f9eb7a667546a322",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -138,6 +138,7 @@ BITCOIN_CORE_H = \\\n   script/sign.h \\\n   script/standard.h \\\n   script/ismine.h \\\n+  stats/stats.h \\\n   streams.h \\\n   support/allocators/secure.h \\\n   support/allocators/zeroafterfree.h \\\n@@ -216,6 +217,7 @@ libbitcoin_server_a_SOURCES = \\\n   rpc/server.cpp \\\n   script/sigcache.cpp \\\n   script/ismine.cpp \\\n+  stats/stats.cpp \\\n   timedata.cpp \\\n   torcontrol.cpp \\\n   txdb.cpp \\"
      },
      {
        "sha": "6fcd2efbf9af1fdb9aab97ec17c261d47a5a15e6",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -85,7 +85,8 @@ BITCOIN_TESTS =\\\n   test/versionbits_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n-  test/util_tests.cpp\n+  test/util_tests.cpp \\\n+  stats/test/stats_tests.cpp\n \n if ENABLE_WALLET\n BITCOIN_TESTS += \\"
      },
      {
        "sha": "b04edb8968270989516ba94ba7d10a734c727b4e",
        "filename": "src/memusage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/memusage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/memusage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/memusage.h?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_MEMUSAGE_H\n \n #include <indirectmap.h>\n+#include <prevector.h>\n \n #include <stdlib.h>\n "
      },
      {
        "sha": "d2dded9eeb8879583d0c376fbb610e7486de47c4",
        "filename": "src/stats/stats.cpp",
        "status": "added",
        "additions": 117,
        "deletions": 0,
        "changes": 117,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/stats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/stats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats.cpp?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -0,0 +1,117 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"memusage.h\"\n+#include \"utiltime.h\"\n+\n+#include \"util.h\"\n+\n+static const uint32_t SAMPLE_MIN_DELTA_IN_SEC = 2;\n+static const int CLEANUP_SAMPLES_THRESHOLD = 100;\n+static const size_t MAX_MEMORY_STATS = 10 * 1024 * 1024; //10 MB\n+std::atomic<bool> CStats::m_stats_enabled(false); //disable stats by default\n+\n+CStats* CStats::m_shared_instance = NULL;\n+\n+CStats* CStats::DefaultStats()\n+{\n+    if (!m_shared_instance)\n+        m_shared_instance = new CStats();\n+\n+    return m_shared_instance;\n+}\n+\n+void CStats::addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee)\n+{\n+    if (!m_stats_enabled)\n+        return;\n+\n+    uint64_t now = GetTime();\n+    {\n+        LOCK(cs_stats);\n+\n+        // set the mempool stats start time if this is the first sample\n+        if (m_mempool_stats.m_start_time == 0)\n+            m_mempool_stats.m_start_time = now;\n+\n+        // ensure the minimum time delta between samples\n+        if (m_mempool_stats.m_samples.size() && m_mempool_stats.m_samples.back().m_time_delta + SAMPLE_MIN_DELTA_IN_SEC >= now - m_mempool_stats.m_start_time)\n+            return;\n+\n+        // calculate the current time delta and add a sample\n+        uint32_t timeDelta = now - m_mempool_stats.m_start_time; //truncate to uint32_t should be sufficient\n+        m_mempool_stats.m_samples.push_back({timeDelta, txcount, dynUsage, currentMinRelayFee});\n+        m_mempool_stats.m_cleanup_counter++;\n+\n+        // check if we should cleanup the container\n+        if (m_mempool_stats.m_cleanup_counter >= CLEANUP_SAMPLES_THRESHOLD) {\n+            //check memory usage\n+            int32_t memDelta = memusage::DynamicUsage(m_mempool_stats.m_samples) - MAX_MEMORY_STATS;\n+            if (memDelta > 0 && m_mempool_stats.m_samples.size()) {\n+                // only shrink if the vector.capacity() is > the target for performance reasons\n+                m_mempool_stats.m_samples.shrink_to_fit();\n+                int32_t memUsage = memusage::DynamicUsage(m_mempool_stats.m_samples);\n+                // calculate the amount of samples we need to remove\n+                size_t itemsToRemove = ceil((memUsage - MAX_MEMORY_STATS) / sizeof(m_mempool_stats.m_samples[0]));\n+\n+                // make sure the vector contains more items then we'd like to remove\n+                if (m_mempool_stats.m_samples.size() > itemsToRemove)\n+                    m_mempool_stats.m_samples.erase(m_mempool_stats.m_samples.begin(), m_mempool_stats.m_samples.begin() + itemsToRemove);\n+            }\n+            // shrink vector\n+            m_mempool_stats.m_samples.shrink_to_fit();\n+            m_mempool_stats.m_cleanup_counter = 0;\n+        }\n+\n+        // fire signal\n+        MempoolStatsDidChange();\n+    }\n+}\n+\n+mempoolSamples_t CStats::mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime)\n+{\n+    if (!m_stats_enabled)\n+        return mempoolSamples_t();\n+\n+    LOCK(cs_stats);\n+\n+    // if empty, return directly\n+    if (!m_mempool_stats.m_samples.size())\n+        return m_mempool_stats.m_samples;\n+\n+\n+    if (!(fromTime == 0 && toTime == 0) && (fromTime > m_mempool_stats.m_start_time + m_mempool_stats.m_samples.front().m_time_delta || toTime < m_mempool_stats.m_start_time + m_mempool_stats.m_samples.back().m_time_delta)) {\n+        mempoolSamples_t::iterator fromSample = m_mempool_stats.m_samples.begin();\n+        mempoolSamples_t::iterator toSample = std::prev(m_mempool_stats.m_samples.end());\n+\n+        // create subset of samples\n+        bool fromSet = false;\n+        for (mempoolSamples_t::iterator it = m_mempool_stats.m_samples.begin(); it != m_mempool_stats.m_samples.end(); ++it) {\n+            if (m_mempool_stats.m_start_time + (*it).m_time_delta >= fromTime && !fromSet) {\n+                fromSample = it;\n+                fromSet = true;\n+            }\n+            else if (m_mempool_stats.m_start_time + (*it).m_time_delta > toTime) {\n+                toSample = std::prev(it);\n+                break;\n+            }\n+        }\n+\n+        mempoolSamples_t subset(fromSample, toSample + 1);\n+\n+        // set the fromTime and toTime pass-by-ref parameters\n+        fromTime = m_mempool_stats.m_start_time + (*fromSample).m_time_delta;\n+        toTime = m_mempool_stats.m_start_time + (*toSample).m_time_delta;\n+\n+        // return subset\n+        return subset;\n+    }\n+\n+    // return all available samples\n+    fromTime = m_mempool_stats.m_start_time + m_mempool_stats.m_samples.front().m_time_delta;\n+    toTime = m_mempool_stats.m_start_time + m_mempool_stats.m_samples.back().m_time_delta;\n+    return m_mempool_stats.m_samples;\n+}"
      },
      {
        "sha": "18ee4238a03825dd698f5cabd1de114b201daffd",
        "filename": "src/stats/stats.h",
        "status": "added",
        "additions": 63,
        "deletions": 0,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/stats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/stats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/stats.h?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -0,0 +1,63 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_STATS_H\n+#define BITCOIN_STATS_H\n+\n+#include <sync.h>\n+\n+#include <atomic>\n+#include <stdlib.h>\n+#include <vector>\n+\n+#include <boost/signals2/signal.hpp>\n+\n+struct CStatsMempoolSample {\n+    uint32_t m_time_delta;    //use 32bit time delta to save memory\n+    int64_t m_tx_count;       //transaction count\n+    int64_t m_dyn_mem_usage;  //dynamic mempool usage\n+    int64_t m_min_fee_per_k;  //min fee per Kb\n+};\n+\n+typedef std::vector<struct CStatsMempoolSample> mempoolSamples_t;\n+\n+// simple mempool stats container\n+class CStatsMempool\n+{\n+public:\n+    uint64_t m_start_time;      //start time of the container\n+    mempoolSamples_t m_samples;\n+    uint64_t m_cleanup_counter; //internal counter to trogger cleanups\n+\n+    CStatsMempool()\n+    {\n+        m_start_time = 0;\n+        m_cleanup_counter = 0;\n+    }\n+};\n+\n+// Class that manages various types of statistics and its memory consumption\n+class CStats\n+{\n+private:\n+    static CStats* m_shared_instance;\n+    mutable CCriticalSection cs_stats;\n+\n+    CStatsMempool m_mempool_stats; //mempool stats container\n+\n+public:\n+    static std::atomic<bool> m_stats_enabled; //if enabled, stats will be collected\n+    static CStats* DefaultStats(); //shared instance\n+\n+    /* signals */\n+    boost::signals2::signal<void(void)> MempoolStatsDidChange; //mempool stats update signal\n+\n+    /* add a mempool stats sample */\n+    void addMempoolSample(int64_t txcount, int64_t dynUsage, int64_t currentMinRelayFee);\n+\n+    /* get all mempool samples in range */\n+    mempoolSamples_t mempoolGetValuesInRange(uint64_t& fromTime, uint64_t& toTime);\n+};\n+\n+#endif // BITCOIN_STATS_H"
      },
      {
        "sha": "514d2f43d6eebc313918dc2fb5ee55c1929c12a7",
        "filename": "src/stats/test/stats_tests.cpp",
        "status": "added",
        "additions": 59,
        "deletions": 0,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/test/stats_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/stats/test/stats_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/stats/test/stats_tests.cpp?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -0,0 +1,59 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"stats/stats.h\"\n+\n+#include \"test/test_bitcoin.h\"\n+#include \"util.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_FIXTURE_TEST_SUITE(stats_tests, BasicTestingSetup)\n+\n+BOOST_AUTO_TEST_CASE(stats)\n+{\n+    CStats::m_stats_enabled = true;\n+\n+    uint64_t start = GetTime();\n+    SetMockTime(start);\n+\n+    CStats::DefaultStats()->addMempoolSample(0, 1, 1);\n+    SetMockTime(start + 1);\n+    CStats::DefaultStats()->addMempoolSample(0, 2, 2); //1second should be to short\n+    SetMockTime(start + 5);\n+    CStats::DefaultStats()->addMempoolSample(3, 4, 3);\n+\n+    uint64_t queryFromTime = start;\n+    uint64_t queryToTime = start + 3600;\n+    mempoolSamples_t samples = CStats::DefaultStats()->mempoolGetValuesInRange(queryFromTime, queryToTime);\n+\n+    BOOST_CHECK_EQUAL(samples[0].m_time_delta, 0);\n+    BOOST_CHECK_EQUAL(samples[1].m_time_delta, 5);\n+    BOOST_CHECK_EQUAL(samples[1].m_tx_count, 3);\n+    BOOST_CHECK_EQUAL(samples[1].m_dyn_mem_usage, 4);\n+\n+    // check retriving a subset of the available samples\n+    queryFromTime = start;\n+    queryToTime = start;\n+    samples = CStats::DefaultStats()->mempoolGetValuesInRange(queryFromTime, queryToTime);\n+    BOOST_CHECK_EQUAL(samples.size(), 1);\n+\n+    // add some samples\n+    for (int i = 0; i < 10000; i++) {\n+        SetMockTime(start + 10 + i * 5);\n+        CStats::DefaultStats()->addMempoolSample(i, i + 1, i + 2);\n+    }\n+\n+    queryFromTime = start + 3600;\n+    queryToTime = start + 3600;\n+    samples = CStats::DefaultStats()->mempoolGetValuesInRange(queryFromTime, queryToTime);\n+    BOOST_CHECK_EQUAL(samples.size(), 1); //get a single sample\n+\n+    queryFromTime = start;\n+    queryToTime = start + 3600;\n+    samples = CStats::DefaultStats()->mempoolGetValuesInRange(queryFromTime, queryToTime);\n+    BOOST_CHECK(samples.size() >= 3600 / 5);\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "33b4201ae4eee9c29e02f89195a1edc5d67258b2",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 1,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e83a882ecfbc38d130da6effc8aa3593421af0d/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "patch": "@@ -29,6 +29,7 @@\n #include <script/script.h>\n #include <script/sigcache.h>\n #include <script/standard.h>\n+#include <stats/stats.h>\n #include <timedata.h>\n #include <tinyformat.h>\n #include <txdb.h>\n@@ -550,6 +551,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n     }\n     }\n \n+    CFeeRate poolMinFeeRate;\n     {\n         CCoinsView dummy;\n         CCoinsViewCache view(&dummy);\n@@ -640,7 +642,8 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n             return state.DoS(0, false, REJECT_NONSTANDARD, \"bad-txns-too-many-sigops\", false,\n                 strprintf(\"%d\", nSigOpsCost));\n \n-        CAmount mempoolRejectFee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nSize);\n+        poolMinFeeRate = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000);\n+        CAmount mempoolRejectFee = poolMinFeeRate.GetFee(nSize);\n         if (!bypass_limits && mempoolRejectFee > 0 && nModifiedFees < mempoolRejectFee) {\n             return state.DoS(0, false, REJECT_INSUFFICIENTFEE, \"mempool min fee not met\", false, strprintf(\"%d < %d\", nFees, mempoolRejectFee));\n         }\n@@ -898,6 +901,9 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n \n     GetMainSignals().TransactionAddedToMempool(ptx);\n \n+    // update mempool stats cache\n+    CStats::DefaultStats()->addMempoolSample(pool.size(), pool.DynamicMemoryUsage(), poolMinFeeRate.GetFeePerK());\n+\n     return true;\n }\n \n@@ -2135,6 +2141,8 @@ bool static DisconnectTip(CValidationState& state, const CChainParams& chainpara\n     // Let wallets know transactions went from 1-confirmed to\n     // 0-confirmed or conflicted:\n     GetMainSignals().BlockDisconnected(pblock);\n+    // add mempool stats sample\n+    CStats::DefaultStats()->addMempoolSample(mempool.size(), mempool.DynamicMemoryUsage(), mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n     return true;\n }\n \n@@ -2261,6 +2269,9 @@ bool static ConnectTip(CValidationState& state, const CChainParams& chainparams,\n     // Update chainActive & related variables.\n     UpdateTip(pindexNew, chainparams);\n \n+    // add mempool stats sample\n+    CStats::DefaultStats()->addMempoolSample(mempool.size(), mempool.DynamicMemoryUsage(), mempool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFeePerK());\n+\n     int64_t nTime6 = GetTimeMicros(); nTimePostConnect += nTime6 - nTime5; nTimeTotal += nTime6 - nTime1;\n     LogPrint(BCLog::BENCH, \"  - Connect postprocess: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime5) * MILLI, nTimePostConnect * MICRO, nTimePostConnect * MILLI / nBlocksTotal);\n     LogPrint(BCLog::BENCH, \"- Connect block: %.2fms [%.2fs (%.2fms/blk)]\\n\", (nTime6 - nTime1) * MILLI, nTimeTotal * MICRO, nTimeTotal * MILLI / nBlocksTotal);"
      }
    ]
  },
  {
    "sha": "63fb11652fd41783589ba55d68d5f8473f299b15",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2M2ZiMTE2NTJmZDQxNzgzNTg5YmE1NWQ2OGQ1Zjg0NzNmMjk5YjE1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-08-12T12:26:51Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2017-11-22T22:30:56Z"
      },
      "message": "[Qt] Add interactive mempool graph",
      "tree": {
        "sha": "d1747e06d274c0278c768014061186a1473f11c9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d1747e06d274c0278c768014061186a1473f11c9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/63fb11652fd41783589ba55d68d5f8473f299b15",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAloV+qEACgkQHrd2uwPH\nki1G2g//QI/A8gsOnlpPqOuJI1eO9yBTJKfLuz8aIlfCL6049EPEuQerJMb3J8rI\nTSHLMNjlzhrjERozcuHBNTDx/YNoR8d9jK+NgO3vqMAhMELA0EaUZFXs0tnMVLY4\nBPJ5cfE/scwrG0z2NgCkXJmS2e6yJ2eQh8AW8SLEcOIekHoJ15wR2Tg6ZKq7DC9U\nS/D3N2jWI+itTi5NSlP8bqQiAB0xtEuAvvCgU/Img2uQDjLKjtg/65vM0fQ4Wl1N\ne3kYJhbaAvxrtCLHHUJ1f4C9uM6XLt5VBW7wB1T8NoiKXjGA2AUr34smU2zCrf+A\nb1MJuRFv9NRWng/8u5iqdLR5tDltjVfQvaJgIj+ShgjRLAEMjefqwf/Ru156TcMJ\noFDPEITIlkHoAh5+lprrWklfy49u24vq9sUVQVrOSeAKRvP0oFRRV0dGRj0KD/Lg\nIQK9/6+KMeVxji7o2uAW+ZymaW9YzbX3VDiyPwsgE+wEY5xTYvcVgeYHhuGrG87f\nZ6eMR0hTSFghQfnVeHSrsb4HvzioURxHakbqjO8H/BwBQNow1sFrrsijQG8igG9G\nZ234lLTcPglm/OPac7A0oBmKXM0T9maJP9L9eQOQM+iXoemXaoaxmnhducJC4UTn\n94VwHCPZzdrKo+Mfn0N/7ZdWYKV3Z3AQBnnibGzuWf0uPL8tag4=\n=Vtxl\n-----END PGP SIGNATURE-----",
        "payload": "tree d1747e06d274c0278c768014061186a1473f11c9\nparent 9e83a882ecfbc38d130da6effc8aa3593421af0d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1471004811 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1511389856 -1000\n\n[Qt] Add interactive mempool graph\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63fb11652fd41783589ba55d68d5f8473f299b15",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/63fb11652fd41783589ba55d68d5f8473f299b15",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/63fb11652fd41783589ba55d68d5f8473f299b15/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e83a882ecfbc38d130da6effc8aa3593421af0d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e83a882ecfbc38d130da6effc8aa3593421af0d"
      }
    ],
    "stats": {
      "total": 627,
      "additions": 627,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3e4637b9d951005dd68096ccb423658e440fbbed",
        "filename": "contrib/debian/copyright",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/contrib/debian/copyright",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/contrib/debian/copyright",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/debian/copyright?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -17,6 +17,7 @@ License: GPL-2+\n \n Files: src/qt/res/icons/add.png\n        src/qt/res/icons/address-book.png\n+       src/qt/res/icons/chart.png\n        src/qt/res/icons/chevron.png\n        src/qt/res/icons/configure.png\n        src/qt/res/icons/debugwindow.png"
      },
      {
        "sha": "ceb214996ec01f648357182b28bdc69e210a88f8",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -100,6 +100,7 @@ QT_FORMS_UI = \\\n   qt/forms/coincontroldialog.ui \\\n   qt/forms/editaddressdialog.ui \\\n   qt/forms/helpmessagedialog.ui \\\n+  qt/forms/mempoolstats.ui \\\n   qt/forms/intro.ui \\\n   qt/forms/modaloverlay.ui \\\n   qt/forms/openuridialog.ui \\\n@@ -133,6 +134,7 @@ QT_MOC_CPP = \\\n   qt/moc_macdockiconhandler.cpp \\\n   qt/moc_macnotificationhandler.cpp \\\n   qt/moc_modaloverlay.cpp \\\n+  qt/moc_mempoolstats.cpp \\\n   qt/moc_notificator.cpp \\\n   qt/moc_openuridialog.cpp \\\n   qt/moc_optionsdialog.cpp \\\n@@ -203,6 +205,7 @@ BITCOIN_QT_H = \\\n   qt/macdockiconhandler.h \\\n   qt/macnotificationhandler.h \\\n   qt/modaloverlay.h \\\n+  qt/mempoolstats.h \\\n   qt/networkstyle.h \\\n   qt/notificator.h \\\n   qt/openuridialog.h \\\n@@ -245,6 +248,7 @@ RES_ICONS = \\\n   qt/res/icons/bitcoin.ico \\\n   qt/res/icons/bitcoin_testnet.ico \\\n   qt/res/icons/bitcoin.png \\\n+  qt/res/icons/chart.png \\\n   qt/res/icons/chevron.png \\\n   qt/res/icons/clock1.png \\\n   qt/res/icons/clock2.png \\\n@@ -305,6 +309,7 @@ BITCOIN_QT_BASE_CPP = \\\n   qt/guiutil.cpp \\\n   qt/intro.cpp \\\n   qt/modaloverlay.cpp \\\n+  qt/mempoolstats.cpp \\\n   qt/networkstyle.cpp \\\n   qt/notificator.cpp \\\n   qt/optionsdialog.cpp \\"
      },
      {
        "sha": "5165f79dd1e846d3482c9cc42399b96ff11dc884",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -29,6 +29,7 @@\n #include <init.h>\n #include <rpc/server.h>\n #include <scheduler.h>\n+#include <stats/stats.h>\n #include <ui_interface.h>\n #include <util.h>\n #include <warnings.h>\n@@ -696,6 +697,9 @@ int main(int argc, char *argv[])\n     // Subscribe to global signals from core\n     uiInterface.InitMessage.connect(InitMessage);\n \n+    // enable mempool stats\n+    CStats::m_stats_enabled = true;\n+\n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n "
      },
      {
        "sha": "db6be05a301a6910512453b8eb8bc93448ead357",
        "filename": "src/qt/bitcoin.qrc",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoin.qrc",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoin.qrc",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.qrc?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -53,6 +53,7 @@\n         <file alias=\"hd_enabled\">res/icons/hd_enabled.png</file>\n         <file alias=\"hd_disabled\">res/icons/hd_disabled.png</file>\n         <file alias=\"network_disabled\">res/icons/network_disabled.png</file>\n+        <file alias=\"chart\">res/icons/chart.png</file>\n     </qresource>\n     <qresource prefix=\"/movies\">\n         <file alias=\"spinner-000\">res/movies/spinner-000.png</file>"
      },
      {
        "sha": "714cbca73b773943fd229b321f602ad3a19e1b75",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -12,6 +12,7 @@\n #include <qt/clientmodel.h>\n #include <qt/guiconstants.h>\n #include <qt/guiutil.h>\n+#include <qt/mempoolstats.h>\n #include <qt/modaloverlay.h>\n #include <qt/networkstyle.h>\n #include <qt/notificator.h>\n@@ -113,12 +114,14 @@ BitcoinGUI::BitcoinGUI(const PlatformStyle *_platformStyle, const NetworkStyle *\n     openRPCConsoleAction(0),\n     openAction(0),\n     showHelpMessageAction(0),\n+    showMempoolStatsAction(0),\n     trayIcon(0),\n     trayIconMenu(0),\n     notificator(0),\n     rpcConsole(0),\n     helpMessageDialog(0),\n     modalOverlay(0),\n+    mempoolStats(0),\n     prevBlocks(0),\n     spinnerFrame(0),\n     platformStyle(_platformStyle)\n@@ -369,6 +372,11 @@ void BitcoinGUI::createActions()\n     // initially disable the debug window menu item\n     openRPCConsoleAction->setEnabled(false);\n \n+    showMempoolStatsAction = new QAction(platformStyle->TextColorIcon(\":/icons/chart\"), tr(\"&Mempool Statistics\"), this);\n+    showMempoolStatsAction->setStatusTip(tr(\"Mempool Statistics\"));\n+    // initially disable the mempool stats menu item\n+    showMempoolStatsAction->setEnabled(false);\n+\n     usedSendingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Sending addresses...\"), this);\n     usedSendingAddressesAction->setStatusTip(tr(\"Show the list of used sending addresses and labels\"));\n     usedReceivingAddressesAction = new QAction(platformStyle->TextColorIcon(\":/icons/address-book\"), tr(\"&Receiving addresses...\"), this);\n@@ -388,6 +396,8 @@ void BitcoinGUI::createActions()\n     connect(toggleHideAction, SIGNAL(triggered()), this, SLOT(toggleHidden()));\n     connect(showHelpMessageAction, SIGNAL(triggered()), this, SLOT(showHelpMessageClicked()));\n     connect(openRPCConsoleAction, SIGNAL(triggered()), this, SLOT(showDebugWindow()));\n+    connect(showMempoolStatsAction, SIGNAL(triggered()), this, SLOT(showMempoolStatsWindow()));\n+\n     // prevents an open debug window from becoming stuck/unusable on client shutdown\n     connect(quitAction, SIGNAL(triggered()), rpcConsole, SLOT(hide()));\n \n@@ -448,6 +458,7 @@ void BitcoinGUI::createMenuBar()\n     {\n         help->addAction(openRPCConsoleAction);\n     }\n+    help->addAction(showMempoolStatsAction);\n     help->addAction(showHelpMessageAction);\n     help->addSeparator();\n     help->addAction(aboutAction);\n@@ -618,6 +629,7 @@ void BitcoinGUI::createTrayIconMenu()\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(optionsAction);\n     trayIconMenu->addAction(openRPCConsoleAction);\n+    trayIconMenu->addAction(showMempoolStatsAction);\n #ifndef Q_OS_MAC // This is built-in on Mac\n     trayIconMenu->addSeparator();\n     trayIconMenu->addAction(quitAction);\n@@ -673,6 +685,19 @@ void BitcoinGUI::showHelpMessageClicked()\n     helpMessageDialog->show();\n }\n \n+void BitcoinGUI::showMempoolStatsWindow()\n+{\n+    // only build the mempool stats window if its requested\n+    if (!mempoolStats)\n+        mempoolStats = new MempoolStats(this);\n+    if (clientModel)\n+        mempoolStats->setClientModel(clientModel);\n+    mempoolStats->showNormal();\n+    mempoolStats->show();\n+    mempoolStats->raise();\n+    mempoolStats->activateWindow();\n+}\n+\n #ifdef ENABLE_WALLET\n void BitcoinGUI::openClicked()\n {\n@@ -981,6 +1006,7 @@ void BitcoinGUI::showEvent(QShowEvent *event)\n {\n     // enable the debug window when the main window shows up\n     openRPCConsoleAction->setEnabled(true);\n+    showMempoolStatsAction->setEnabled(true);\n     aboutAction->setEnabled(true);\n     optionsAction->setEnabled(true);\n }"
      },
      {
        "sha": "f03c9f0c31219332a91070de99df98ce7c563665",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -30,6 +30,7 @@ class WalletFrame;\n class WalletModel;\n class HelpMessageDialog;\n class ModalOverlay;\n+class MempoolStats;\n \n QT_BEGIN_NAMESPACE\n class QAction;\n@@ -111,13 +112,15 @@ class BitcoinGUI : public QMainWindow\n     QAction *openRPCConsoleAction;\n     QAction *openAction;\n     QAction *showHelpMessageAction;\n+    QAction *showMempoolStatsAction;\n \n     QSystemTrayIcon *trayIcon;\n     QMenu *trayIconMenu;\n     Notificator *notificator;\n     RPCConsole *rpcConsole;\n     HelpMessageDialog *helpMessageDialog;\n     ModalOverlay *modalOverlay;\n+    MempoolStats *mempoolStats;\n \n     /** Keep track of previous number of blocks, to detect progress */\n     int prevBlocks;\n@@ -218,6 +221,8 @@ private Q_SLOTS:\n     void showDebugWindowActivateConsole();\n     /** Show help message dialog */\n     void showHelpMessageClicked();\n+    /** Show mempool stats window */\n+    void showMempoolStatsWindow();\n #ifndef Q_OS_MAC\n     /** Handle tray icon clicked */\n     void trayIconActivated(QSystemTrayIcon::ActivationReason reason);"
      },
      {
        "sha": "6cd03333fa27fce6b0e3e1bfe85ef918bcaa2c01",
        "filename": "src/qt/clientmodel.cpp",
        "status": "modified",
        "additions": 26,
        "deletions": 0,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/clientmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/clientmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.cpp?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -251,6 +251,23 @@ void ClientModel::updateBanlist()\n     banTableModel->refresh();\n }\n \n+void ClientModel::updateMempoolStats()\n+{\n+    Q_EMIT mempoolStatsDidUpdate();\n+}\n+\n+mempoolSamples_t ClientModel::getMempoolStatsInRange(QDateTime &from, QDateTime &to)\n+{\n+    // get stats from the core stats model\n+    uint64_t timeFrom = from.toTime_t();\n+    uint64_t timeTo = to.toTime_t();\n+\n+    mempoolSamples_t samples = CStats::DefaultStats()->mempoolGetValuesInRange(timeFrom,timeTo);\n+    from.setTime_t(timeFrom);\n+    to.setTime_t(timeTo);\n+    return samples;\n+}\n+\n // Handlers for core signals\n static void ShowProgress(ClientModel *clientmodel, const std::string &title, int nProgress)\n {\n@@ -313,6 +330,11 @@ static void BlockTipChanged(ClientModel *clientmodel, bool initialSync, const CB\n     }\n }\n \n+static void MempoolStatsDidChange(ClientModel *clientmodel)\n+{\n+    QMetaObject::invokeMethod(clientmodel, \"updateMempoolStats\", Qt::QueuedConnection);\n+}\n+\n void ClientModel::subscribeToCoreSignals()\n {\n     // Connect signals to client\n@@ -323,6 +345,8 @@ void ClientModel::subscribeToCoreSignals()\n     uiInterface.BannedListChanged.connect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.connect(boost::bind(BlockTipChanged, this, _1, _2, false));\n     uiInterface.NotifyHeaderTip.connect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+\n+    CStats::DefaultStats()->MempoolStatsDidChange.connect(boost::bind(MempoolStatsDidChange, this));\n }\n \n void ClientModel::unsubscribeFromCoreSignals()\n@@ -335,4 +359,6 @@ void ClientModel::unsubscribeFromCoreSignals()\n     uiInterface.BannedListChanged.disconnect(boost::bind(BannedListChanged, this));\n     uiInterface.NotifyBlockTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, false));\n     uiInterface.NotifyHeaderTip.disconnect(boost::bind(BlockTipChanged, this, _1, _2, true));\n+\n+    CStats::DefaultStats()->MempoolStatsDidChange.disconnect(boost::bind(MempoolStatsDidChange, this));\n }"
      },
      {
        "sha": "ad4431159c87e065e052d3a1aa9c2cf41f0f1beb",
        "filename": "src/qt/clientmodel.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/clientmodel.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/clientmodel.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/clientmodel.h?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -9,6 +9,7 @@\n #include <QDateTime>\n \n #include <atomic>\n+#include <stats/stats.h>\n \n class BanTableModel;\n class OptionsModel;\n@@ -84,6 +85,8 @@ class ClientModel : public QObject\n     mutable std::atomic<int> cachedBestHeaderHeight;\n     mutable std::atomic<int64_t> cachedBestHeaderTime;\n \n+    mempoolSamples_t getMempoolStatsInRange(QDateTime &from, QDateTime &to);\n+\n private:\n     OptionsModel *optionsModel;\n     PeerTableModel *peerTableModel;\n@@ -108,12 +111,17 @@ class ClientModel : public QObject\n     // Show progress dialog e.g. for verifychain\n     void showProgress(const QString &title, int nProgress);\n \n+    void mempoolStatsDidUpdate();\n+\n public Q_SLOTS:\n     void updateTimer();\n     void updateNumConnections(int numConnections);\n     void updateNetworkActive(bool networkActive);\n     void updateAlert();\n     void updateBanlist();\n+\n+    /* stats stack */\n+    void updateMempoolStats();\n };\n \n #endif // BITCOIN_QT_CLIENTMODEL_H"
      },
      {
        "sha": "42ea87caf3349b70314e32549510b5cd72b81581",
        "filename": "src/qt/forms/mempoolstats.ui",
        "status": "added",
        "additions": 44,
        "deletions": 0,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/forms/mempoolstats.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/forms/mempoolstats.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/mempoolstats.ui?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -0,0 +1,44 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<ui version=\"4.0\">\n+ <class>MempoolStats</class>\n+ <widget class=\"QWidget\" name=\"MempoolStats\">\n+  <property name=\"geometry\">\n+   <rect>\n+    <x>0</x>\n+    <y>0</y>\n+    <width>480</width>\n+    <height>380</height>\n+   </rect>\n+  </property>\n+  <property name=\"minimumSize\">\n+   <size>\n+    <width>480</width>\n+    <height>380</height>\n+   </size>\n+  </property>\n+  <property name=\"windowTitle\">\n+   <string>Mempool Stats</string>\n+  </property>\n+  <widget class=\"QGraphicsView\" name=\"graphicsView\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>0</x>\n+     <y>0</y>\n+     <width>256</width>\n+     <height>200</height>\n+    </rect>\n+   </property>\n+   <property name=\"styleSheet\">\n+    <string notr=\"true\"/>\n+   </property>\n+   <property name=\"verticalScrollBarPolicy\">\n+    <enum>Qt::ScrollBarAlwaysOff</enum>\n+   </property>\n+   <property name=\"horizontalScrollBarPolicy\">\n+    <enum>Qt::ScrollBarAlwaysOff</enum>\n+   </property>\n+  </widget>\n+ </widget>\n+ <resources/>\n+ <connections/>\n+</ui>"
      },
      {
        "sha": "139efa1a93bc679b92fcf2509da2af55948258cd",
        "filename": "src/qt/mempoolstats.cpp",
        "status": "added",
        "additions": 423,
        "deletions": 0,
        "changes": 423,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/mempoolstats.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/mempoolstats.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/mempoolstats.cpp?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -0,0 +1,423 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <qt/mempoolstats.h>\n+#include <qt/forms/ui_mempoolstats.h>\n+\n+#include <qt/clientmodel.h>\n+#include <qt/guiutil.h>\n+#include <stats/stats.h>\n+\n+static const char *LABEL_FONT = \"Arial\";\n+static int LABEL_TITLE_SIZE = 22;\n+static int LABEL_KV_SIZE = 12;\n+\n+static const int TEN_MINS = 600;\n+static const int ONE_HOUR = 3600;\n+static const int ONE_DAY = ONE_HOUR*24;\n+\n+static const int LABEL_LEFT_SIZE = 30;\n+static const int LABEL_RIGHT_SIZE = 30;\n+static const int GRAPH_PADDING_LEFT = 30+LABEL_LEFT_SIZE;\n+static const int GRAPH_PADDING_RIGHT = 30+LABEL_RIGHT_SIZE;\n+static const int GRAPH_PADDING_TOP = 10;\n+static const int GRAPH_PADDING_TOP_LABEL = 150;\n+static const int GRAPH_PADDING_BOTTOM = 50;\n+static const int LABEL_HEIGHT = 15;\n+\n+void ClickableTextItem::mousePressEvent(QGraphicsSceneMouseEvent *event)\n+{\n+    Q_EMIT objectClicked(this);\n+}\n+\n+void ClickableTextItem::setEnabled(bool state)\n+{\n+    if (state)\n+        setDefaultTextColor(QColor(15,68,113, 250));\n+    else\n+        setDefaultTextColor(QColor(100,100,100, 200));\n+}\n+\n+MempoolStats::MempoolStats(QWidget *parent) :\n+QWidget(parent, Qt::Window),\n+clientModel(0),\n+titleItem(0),\n+scene(0),\n+drawTxCount(true),\n+drawMinFee(false),\n+drawDynMemUsage(true),\n+timeFilter(TEN_MINS),\n+ui(new Ui::MempoolStats)\n+{\n+    ui->setupUi(this);\n+    if (parent) {\n+        parent->installEventFilter(this);\n+        raise();\n+    }\n+\n+    // autoadjust font size\n+    QGraphicsTextItem testText(\"jY\"); //screendesign expected 27.5 pixel in width for this string\n+    testText.setFont(QFont(LABEL_FONT, LABEL_TITLE_SIZE, QFont::Light));\n+    LABEL_TITLE_SIZE *= 27.5/testText.boundingRect().width();\n+    LABEL_KV_SIZE *= 27.5/testText.boundingRect().width();\n+\n+    scene = new QGraphicsScene();\n+    ui->graphicsView->setScene(scene);\n+    ui->graphicsView->setRenderHints(QPainter::Antialiasing | QPainter::SmoothPixmapTransform);\n+\n+    if (clientModel)\n+        drawChart();\n+}\n+\n+void MempoolStats::setClientModel(ClientModel *model)\n+{\n+    clientModel = model;\n+\n+    if (model)\n+        connect(model, SIGNAL(mempoolStatsDidUpdate()), this, SLOT(drawChart()));\n+}\n+\n+void MempoolStats::drawChart()\n+{\n+    if (!isVisible())\n+        return;\n+\n+    if (!titleItem)\n+    {\n+        // create labels (only once)\n+        titleItem = scene->addText(tr(\"Mempool Statistics\"));\n+        titleItem->setFont(QFont(LABEL_FONT, LABEL_TITLE_SIZE, QFont::Light));\n+        titleLine = scene->addLine(0,0,100,100);\n+        titleLine->setPen(QPen(QColor(100,100,100, 200), 2, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin));\n+        \n+        \n+        QCheckBox *cb0 = new QCheckBox(\"Dynamic Memory Usage\");\n+        cb0->setStyleSheet(\"background-color: rgb(255,255,255);\");\n+        dynMemUsageSwitch = scene->addWidget(cb0);\n+        connect(cb0, &QCheckBox::stateChanged, [cb0, this](){ drawDynMemUsage = cb0->isChecked(); drawChart(); });\n+        cb0->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        dynMemUsageValueItem = scene->addText(\"N/A\");\n+        dynMemUsageValueItem->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Bold));\n+\n+        QCheckBox *cb1 = new QCheckBox(\"Amount of Transactions\");\n+        cb1->setStyleSheet(\"background-color: rgb(255,255,255);\");\n+        txCountSwitch = scene->addWidget(cb1);\n+        scene->addItem(txCountSwitch);\n+        connect(cb1, &QCheckBox::stateChanged, [cb1, this](){ drawTxCount = cb1->isChecked(); drawChart(); });\n+        cb1->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        txCountValueItem = scene->addText(\"N/A\");\n+        txCountValueItem->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Bold));\n+\n+        QCheckBox *cb2 = new QCheckBox(\"MinRelayFee per KB\");\n+        cb2->setStyleSheet(\"background-color: rgb(255,255,255);\");\n+        minFeeSwitch = scene->addWidget(cb2);\n+        scene->addItem(minFeeSwitch);\n+        connect(cb2, &QCheckBox::stateChanged, [cb2, this](){ drawMinFee = cb2->isChecked(); drawChart(); });\n+        cb2->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        minFeeValueItem = scene->addText(tr(\"N/A\"));\n+        minFeeValueItem->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Bold));\n+\n+        noDataItem = scene->addText(tr(\"No Data available\"));\n+        noDataItem->setFont(QFont(LABEL_FONT, LABEL_TITLE_SIZE, QFont::Light));\n+        noDataItem->setDefaultTextColor(QColor(100,100,100, 200));\n+\n+        last10MinLabel = new ClickableTextItem(); last10MinLabel->setPlainText(tr(\"Last 10 min\"));\n+        scene->addItem(last10MinLabel);\n+        connect(last10MinLabel, SIGNAL(objectClicked(QGraphicsItem*)), this, SLOT(objectClicked(QGraphicsItem*)));\n+        last10MinLabel->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        lastHourLabel = new ClickableTextItem(); lastHourLabel->setPlainText(tr(\"Last Hour\"));\n+        scene->addItem(lastHourLabel);\n+        connect(lastHourLabel, SIGNAL(objectClicked(QGraphicsItem*)), this, SLOT(objectClicked(QGraphicsItem*)));\n+        lastHourLabel->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        lastDayLabel = new ClickableTextItem(); lastDayLabel->setPlainText(tr(\"Last Day\"));\n+        scene->addItem(lastDayLabel);\n+        connect(lastDayLabel, SIGNAL(objectClicked(QGraphicsItem*)), this, SLOT(objectClicked(QGraphicsItem*)));\n+        lastDayLabel->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+        allDataLabel = new ClickableTextItem(); allDataLabel->setPlainText(tr(\"All Data\"));\n+        scene->addItem(allDataLabel);\n+        connect(allDataLabel, SIGNAL(objectClicked(QGraphicsItem*)), this, SLOT(objectClicked(QGraphicsItem*)));\n+        allDataLabel->setFont(QFont(LABEL_FONT, LABEL_KV_SIZE, QFont::Light));\n+    }\n+\n+    // set button states\n+    ((QCheckBox *)dynMemUsageSwitch->widget())->setChecked(drawDynMemUsage);\n+    ((QCheckBox *)txCountSwitch->widget())->setChecked(drawTxCount);\n+    ((QCheckBox *)minFeeSwitch->widget())->setChecked(drawMinFee);\n+\n+    last10MinLabel->setEnabled((timeFilter == TEN_MINS));\n+    lastHourLabel->setEnabled((timeFilter == ONE_HOUR));\n+    lastDayLabel->setEnabled((timeFilter == ONE_DAY));\n+    allDataLabel->setEnabled((timeFilter == 0));\n+\n+    // remove the items which needs to be redrawn\n+    for (QGraphicsItem * item : redrawItems)\n+    {\n+        scene->removeItem(item);\n+        delete item;\n+    }\n+    redrawItems.clear();\n+\n+    // get the samples\n+    QDateTime toDateTime = QDateTime::currentDateTime();\n+    QDateTime fromDateTime = toDateTime.addSecs(-timeFilter); //-1h\n+    if (timeFilter == 0)\n+    {\n+        // disable filter if timeFilter == 0\n+        toDateTime.setTime_t(0);\n+        fromDateTime.setTime_t(0);\n+    }\n+\n+    mempoolSamples_t vSamples = clientModel->getMempoolStatsInRange(fromDateTime, toDateTime);\n+\n+    // set the values into the overview labels\n+    if (vSamples.size())\n+    {\n+        dynMemUsageValueItem->setPlainText(GUIUtil::formatBytes((uint64_t)vSamples.back().m_dyn_mem_usage));\n+        txCountValueItem->setPlainText(QString::number(vSamples.back().m_tx_count));\n+        minFeeValueItem->setPlainText(QString::number(vSamples.back().m_min_fee_per_k));\n+    }\n+\n+    // set dynamic label positions\n+    int maxValueSize = std::max(std::max(txCountValueItem->boundingRect().width(), dynMemUsageValueItem->boundingRect().width()), minFeeValueItem->boundingRect().width());\n+    maxValueSize = ceil(maxValueSize*0.11)*10; //use size steps of 10dip\n+\n+    int rightPaddingLabels = std::max(std::max(dynMemUsageSwitch->boundingRect().width(), txCountSwitch->boundingRect().width()), minFeeSwitch->boundingRect().width())+maxValueSize;\n+    int rightPadding = 10;\n+    dynMemUsageSwitch->setPos(width()-rightPaddingLabels-rightPadding, 5);\n+    \n+    txCountSwitch->setPos(width()-rightPaddingLabels-rightPadding, dynMemUsageSwitch->pos().y()+dynMemUsageSwitch->boundingRect().height());\n+    \n+    minFeeSwitch->setPos(width()-rightPaddingLabels-rightPadding, txCountSwitch->pos().y()+txCountSwitch->boundingRect().height());\n+\n+    dynMemUsageValueItem->setPos(width()-dynMemUsageValueItem->boundingRect().width()-rightPadding, dynMemUsageSwitch->pos().y());\n+    txCountValueItem->setPos(width()-txCountValueItem->boundingRect().width()-rightPadding, txCountSwitch->pos().y());\n+    minFeeValueItem->setPos(width()-minFeeValueItem->boundingRect().width()-rightPadding, minFeeSwitch->pos().y());\n+\n+    titleItem->setPos(5,minFeeSwitch->pos().y()+minFeeSwitch->boundingRect().height()-titleItem->boundingRect().height()+10);\n+    titleLine->setLine(10, titleItem->pos().y()+titleItem->boundingRect().height(), width()-10, titleItem->pos().y()+titleItem->boundingRect().height());\n+\n+    // center the optional \"no data\" label\n+    noDataItem->setPos(width()/2.0-noDataItem->boundingRect().width()/2.0, height()/2.0);\n+\n+    // set the position of the filter icons\n+    static const int filterBottomPadding = 30;\n+    int totalWidth = last10MinLabel->boundingRect().width()+lastHourLabel->boundingRect().width()+lastDayLabel->boundingRect().width()+allDataLabel->boundingRect().width()+30;\n+    last10MinLabel->setPos((width()-totalWidth)/2.0,height()-filterBottomPadding);\n+    lastHourLabel->setPos((width()-totalWidth)/2.0+last10MinLabel->boundingRect().width()+10,height()-filterBottomPadding);\n+    lastDayLabel->setPos((width()-totalWidth)/2.0+last10MinLabel->boundingRect().width()+lastHourLabel->boundingRect().width()+20,height()-filterBottomPadding);\n+    allDataLabel->setPos((width()-totalWidth)/2.0+last10MinLabel->boundingRect().width()+lastHourLabel->boundingRect().width()+lastDayLabel->boundingRect().width()+30,height()-filterBottomPadding);\n+\n+    // don't paint the grind/graph if there are no or only a signle sample\n+    if (vSamples.size() < 2)\n+    {\n+        noDataItem->setVisible(true);\n+        return;\n+    }\n+    noDataItem->setVisible(false);\n+\n+    int bottom = ui->graphicsView->size().height()-GRAPH_PADDING_BOTTOM;\n+    qreal maxwidth = ui->graphicsView->size().width()-GRAPH_PADDING_LEFT-GRAPH_PADDING_RIGHT;\n+    qreal maxheightG = ui->graphicsView->size().height()-GRAPH_PADDING_TOP-GRAPH_PADDING_TOP_LABEL-LABEL_HEIGHT;\n+    float paddingTopSizeFactor = 1.2;\n+    qreal step = maxwidth/(double)vSamples.size();\n+\n+    // make sure we skip samples that would be drawn narrower then 1px\n+    // larger window can result in drawing more samples\n+    int samplesStep = 1;\n+    if (step < 1)\n+        samplesStep = ceil(1/samplesStep);\n+\n+    // find maximum values\n+    int64_t maxDynMemUsage = 0;\n+    int64_t minDynMemUsage = std::numeric_limits<int64_t>::max();\n+    int64_t maxTxCount = 0;\n+    int64_t minTxCount = std::numeric_limits<int64_t>::max();\n+    int64_t maxMinFee = 0;\n+    uint32_t maxTimeDetla = vSamples.back().m_time_delta-vSamples.front().m_time_delta;\n+    for(const struct CStatsMempoolSample &sample : vSamples)\n+    {\n+        if (sample.m_dyn_mem_usage > maxDynMemUsage)\n+            maxDynMemUsage = sample.m_dyn_mem_usage;\n+\n+        if (sample.m_dyn_mem_usage < minDynMemUsage)\n+            minDynMemUsage = sample.m_dyn_mem_usage;\n+\n+        if (sample.m_tx_count > maxTxCount)\n+            maxTxCount = sample.m_tx_count;\n+\n+        if (sample.m_tx_count < minTxCount)\n+            minTxCount = sample.m_tx_count;\n+\n+        if (sample.m_min_fee_per_k > maxMinFee)\n+            maxMinFee = sample.m_min_fee_per_k;\n+    }\n+\n+    int64_t dynMemUsagelog10Val = pow(10.0f, floor(log10(maxDynMemUsage*paddingTopSizeFactor-minDynMemUsage)));\n+    int64_t topDynMemUsage = ceil((double)maxDynMemUsage*paddingTopSizeFactor/dynMemUsagelog10Val)*dynMemUsagelog10Val;\n+    int64_t bottomDynMemUsage = floor((double)minDynMemUsage/dynMemUsagelog10Val)*dynMemUsagelog10Val;\n+\n+    int64_t txCountLog10Val = pow(10.0f, floor(log10(maxTxCount*paddingTopSizeFactor-minTxCount)));\n+    int64_t topTxCount = ceil((double)maxTxCount*paddingTopSizeFactor/txCountLog10Val)*txCountLog10Val;\n+    int64_t bottomTxCount = floor((double)minTxCount/txCountLog10Val)*txCountLog10Val;\n+    \n+    qreal currentX = GRAPH_PADDING_LEFT;\n+    QPainterPath dynMemUsagePath(QPointF(currentX, bottom));\n+    QPainterPath txCountPath(QPointF(currentX, bottom));\n+    QPainterPath minFeePath(QPointF(currentX, bottom));\n+\n+    // draw the three possible paths\n+    for (mempoolSamples_t::iterator it = vSamples.begin(); it != vSamples.end(); it+=samplesStep)\n+    {\n+        const struct CStatsMempoolSample &sample = (*it);\n+        qreal xPos = maxTimeDetla > 0 ? maxwidth/maxTimeDetla*(sample.m_time_delta-vSamples.front().m_time_delta) : maxwidth/(double)vSamples.size();\n+        if (sample.m_time_delta == vSamples.front().m_time_delta)\n+        {\n+            dynMemUsagePath.moveTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/(topDynMemUsage-bottomDynMemUsage)*(sample.m_dyn_mem_usage-bottomDynMemUsage));\n+            txCountPath.moveTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/(topTxCount-bottomTxCount)*(sample.m_tx_count-bottomTxCount));\n+            minFeePath.moveTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/maxMinFee*sample.m_min_fee_per_k);\n+        }\n+        else\n+        {\n+            dynMemUsagePath.lineTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/(topDynMemUsage-bottomDynMemUsage)*(sample.m_dyn_mem_usage-bottomDynMemUsage));\n+            txCountPath.lineTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/(topTxCount-bottomTxCount)*(sample.m_tx_count-bottomTxCount));\n+            minFeePath.lineTo(GRAPH_PADDING_LEFT+xPos, bottom-maxheightG/maxMinFee*sample.m_min_fee_per_k);\n+        }\n+    }\n+\n+    // copy the path for the fill\n+    QPainterPath dynMemUsagePathFill(dynMemUsagePath);\n+\n+    // close the path for the fill\n+    dynMemUsagePathFill.lineTo(GRAPH_PADDING_LEFT+maxwidth, bottom);\n+    dynMemUsagePathFill.lineTo(GRAPH_PADDING_LEFT, bottom);\n+\n+    QPainterPath dynMemUsageGridPath(QPointF(currentX, bottom));\n+\n+    // draw horizontal grid\n+    int amountOfLinesH = 5;\n+    QFont gridFont;\n+    gridFont.setPointSize(8);\n+    for (int i=0; i < amountOfLinesH; i++)\n+    {\n+        qreal lY = bottom-i*(maxheightG/(amountOfLinesH-1));\n+        dynMemUsageGridPath.moveTo(GRAPH_PADDING_LEFT, lY);\n+        dynMemUsageGridPath.lineTo(GRAPH_PADDING_LEFT+maxwidth, lY);\n+\n+        size_t gridDynSize = (float)i*(topDynMemUsage-bottomDynMemUsage)/(amountOfLinesH-1) + bottomDynMemUsage;\n+        size_t gridTxCount = (float)i*(topTxCount-bottomTxCount)/(amountOfLinesH-1) + bottomTxCount;\n+\n+        QGraphicsTextItem *itemDynSize = scene->addText(GUIUtil::formatBytes(gridDynSize), gridFont);\n+        QGraphicsTextItem *itemTxCount = scene->addText(QString::number(gridTxCount), gridFont);\n+\n+        itemDynSize->setPos(GRAPH_PADDING_LEFT-itemDynSize->boundingRect().width(), lY-(itemDynSize->boundingRect().height()/2));\n+        itemTxCount->setPos(GRAPH_PADDING_LEFT+maxwidth, lY-(itemDynSize->boundingRect().height()/2));\n+        redrawItems.append(itemDynSize);\n+        redrawItems.append(itemTxCount);\n+    }\n+\n+    // draw vertical grid\n+    int amountOfLinesV = 4;\n+    QDateTime drawTime(fromDateTime);\n+    std::string fromS = fromDateTime.toString().toStdString();\n+    std::string toS = toDateTime.toString().toStdString();\n+    qint64 secsTotal = fromDateTime.secsTo(toDateTime);\n+    for (int i=0; i <= amountOfLinesV; i++)\n+    {\n+        qreal lX = i*(maxwidth/(amountOfLinesV));\n+        dynMemUsageGridPath.moveTo(GRAPH_PADDING_LEFT+lX, bottom);\n+        dynMemUsageGridPath.lineTo(GRAPH_PADDING_LEFT+lX, bottom-maxheightG);\n+\n+        QGraphicsTextItem *item = scene->addText(drawTime.toString(\"HH:mm\"), gridFont);\n+        item->setPos(GRAPH_PADDING_LEFT+lX-(item->boundingRect().width()/2), bottom);\n+        redrawItems.append(item);\n+        qint64 step = secsTotal/amountOfLinesV;\n+        drawTime = drawTime.addSecs(step);\n+    }\n+\n+    // materialize path\n+    QPen gridPen(QColor(100,100,100, 200), 1, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);\n+    redrawItems.append(scene->addPath(dynMemUsageGridPath, gridPen));\n+\n+    // draw semi-transparent gradient for the dynamic memory size fill\n+    QLinearGradient gradient(currentX, bottom, currentX, 0);\n+    gradient.setColorAt(1.0, QColor(15,68,113, 250));\n+    gradient.setColorAt(0, QColor(255,255,255,0));\n+    QBrush graBru(gradient);\n+\n+    QPen linePenBlue(QColor(15,68,113, 250), 2, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);\n+    QPen linePenRed(QColor(188,49,62, 250), 2, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);\n+    QPen linePenGreen(QColor(49,188,62, 250), 2, Qt::SolidLine, Qt::RoundCap, Qt::RoundJoin);\n+\n+    if (drawTxCount)\n+        redrawItems.append(scene->addPath(txCountPath, linePenRed));\n+    if (drawMinFee)\n+        redrawItems.append(scene->addPath(minFeePath, linePenGreen));\n+    if (drawDynMemUsage)\n+    {\n+        redrawItems.append(scene->addPath(dynMemUsagePath, linePenBlue));\n+        redrawItems.append(scene->addPath(dynMemUsagePathFill, QPen(Qt::NoPen), graBru));\n+    }\n+}\n+\n+// We override the virtual resizeEvent of the QWidget to adjust tables column\n+// sizes as the tables width is proportional to the dialogs width.\n+void MempoolStats::resizeEvent(QResizeEvent *event)\n+{\n+    QWidget::resizeEvent(event);\n+    ui->graphicsView->resize(size());\n+    ui->graphicsView->scene()->setSceneRect(rect());\n+    drawChart();\n+}\n+\n+void MempoolStats::showEvent(QShowEvent *event)\n+{\n+    QWidget::showEvent(event);\n+    if (clientModel)\n+        drawChart();\n+}\n+\n+void MempoolStats::objectClicked(QGraphicsItem *item)\n+{\n+    if (item == last10MinLabel)\n+        timeFilter = 600;\n+\n+    if (item == lastHourLabel)\n+        timeFilter = 3600;\n+\n+    if (item == lastDayLabel)\n+        timeFilter = 24*3600;\n+\n+    if (item == allDataLabel)\n+        timeFilter = 0;\n+    \n+    drawChart();\n+}\n+\n+MempoolStats::~MempoolStats()\n+{\n+    if (titleItem)\n+    {\n+        for (QGraphicsItem * item : redrawItems)\n+        {\n+            scene->removeItem(item);\n+            delete item;\n+        }\n+        redrawItems.clear();\n+\n+        delete titleItem;\n+        delete titleLine;\n+        delete noDataItem;\n+        delete dynMemUsageValueItem;\n+        delete txCountValueItem;\n+        delete minFeeValueItem;\n+        delete last10MinLabel;\n+        delete lastHourLabel;\n+        delete lastDayLabel;\n+        delete allDataLabel;\n+        delete txCountSwitch;\n+        delete minFeeSwitch;\n+        delete dynMemUsageSwitch;\n+        delete scene;\n+    }\n+}"
      },
      {
        "sha": "6ce4563ec88bee62a1c6d402c4c216a1507811f6",
        "filename": "src/qt/mempoolstats.h",
        "status": "added",
        "additions": 84,
        "deletions": 0,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/mempoolstats.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/mempoolstats.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/mempoolstats.h?ref=63fb11652fd41783589ba55d68d5f8473f299b15",
        "patch": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2016 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_QT_MEMPOOLSTATS_H\n+#define BITCOIN_QT_MEMPOOLSTATS_H\n+\n+#include <QWidget>\n+#include <QGraphicsLineItem>\n+#include <QGraphicsPixmapItem>\n+\n+#include <QCheckBox>\n+#include <QGraphicsProxyWidget>\n+\n+#include <QEvent>\n+\n+class ClientModel;\n+\n+class ClickableTextItem : public QGraphicsTextItem\n+{\n+    Q_OBJECT\n+public:\n+    void setEnabled(bool state);\n+protected:\n+    void mousePressEvent(QGraphicsSceneMouseEvent *event);\n+Q_SIGNALS:\n+    void objectClicked(QGraphicsItem*);\n+};\n+\n+\n+namespace Ui {\n+    class MempoolStats;\n+}\n+\n+class MempoolStats : public QWidget\n+{\n+    Q_OBJECT\n+\n+public:\n+    MempoolStats(QWidget *parent = 0);\n+    ~MempoolStats();\n+\n+    void setClientModel(ClientModel *model);\n+\n+public Q_SLOTS:\n+    void drawChart();\n+    void objectClicked(QGraphicsItem *);\n+\n+private:\n+    ClientModel *clientModel;\n+\n+    virtual void resizeEvent(QResizeEvent *event);\n+    virtual void showEvent(QShowEvent *event);\n+\n+    QGraphicsTextItem *titleItem;\n+    QGraphicsLineItem *titleLine;\n+    QGraphicsTextItem *noDataItem;\n+\n+    QGraphicsTextItem *dynMemUsageValueItem;\n+    QGraphicsTextItem *txCountValueItem;\n+    QGraphicsTextItem *minFeeValueItem;\n+\n+    ClickableTextItem *last10MinLabel;\n+    ClickableTextItem *lastHourLabel;\n+    ClickableTextItem *lastDayLabel;\n+    ClickableTextItem *allDataLabel;\n+\n+    QGraphicsProxyWidget *txCountSwitch;\n+    QGraphicsProxyWidget *minFeeSwitch;\n+    QGraphicsProxyWidget *dynMemUsageSwitch;\n+\n+    QGraphicsScene *scene;\n+    QVector<QGraphicsItem*> redrawItems;\n+\n+    bool drawTxCount;\n+    bool drawMinFee;\n+    bool drawDynMemUsage;\n+\n+    int64_t timeFilter;\n+\n+    Ui::MempoolStats *ui;\n+};\n+\n+#endif // BITCOIN_QT_MEMPOOLSTATS_H"
      },
      {
        "sha": "10eb71c27c3354d73a43575d187558e849541c97",
        "filename": "src/qt/res/icons/chart.png",
        "status": "added",
        "additions": 0,
        "deletions": 0,
        "changes": 0,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/res/icons/chart.png",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/63fb11652fd41783589ba55d68d5f8473f299b15/src/qt/res/icons/chart.png",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/res/icons/chart.png?ref=63fb11652fd41783589ba55d68d5f8473f299b15"
      }
    ]
  }
]