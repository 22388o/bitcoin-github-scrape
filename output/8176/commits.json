[
  {
    "sha": "ddd8c01d705df5526260c3804f89aa9ca9987fac",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGQ4YzAxZDcwNWRmNTUyNjI2MGMzODA0Zjg5YWE5Y2E5OTg3ZmFj",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-04-23T23:30:20Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-08T18:42:17Z"
      },
      "message": "Implement BIP 9 GBT changes\n\n- BIP9DeploymentInfo struct for static deployment info\n- VersionBitsDeploymentInfo: Avoid C++11ism by commenting parameter names\n- getblocktemplate: Make sure to set deployments in the version if it is LOCKED_IN\n- In this commit, all rules are considered required for clients to support",
      "tree": {
        "sha": "68a4cd6d6d50efed8d4a24879cf86c30d0f43a82",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68a4cd6d6d50efed8d4a24879cf86c30d0f43a82"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ddd8c01d705df5526260c3804f89aa9ca9987fac",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8c01d705df5526260c3804f89aa9ca9987fac",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd8c01d705df5526260c3804f89aa9ca9987fac",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8c01d705df5526260c3804f89aa9ca9987fac/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/26e9a05cc3192ce19b7c46043aeb12230d3207a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/26e9a05cc3192ce19b7c46043aeb12230d3207a5"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 70,
      "deletions": 3
    },
    "files": [
      {
        "sha": "6c4cc49479ba18eb4e6e8bf82b71021b341d24d0",
        "filename": "src/consensus/params.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/consensus/params.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/consensus/params.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/consensus/params.h?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -16,6 +16,7 @@ enum DeploymentPos\n {\n     DEPLOYMENT_TESTDUMMY,\n     DEPLOYMENT_CSV, // Deployment of BIP68, BIP112, and BIP113.\n+    // NOTE: Also add new deployments to VersionBitsDeploymentInfo in versionbits.cpp\n     MAX_VERSION_BITS_DEPLOYMENTS\n };\n "
      },
      {
        "sha": "5cf9b45532dc96da9eed191b5104aaffcd18cd58",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -2137,7 +2137,7 @@ void PartitionCheck(bool (*initialDownloadCheck)(), CCriticalSection& cs, const\n }\n \n // Protected by cs_main\n-static VersionBitsCache versionbitscache;\n+VersionBitsCache versionbitscache;\n \n int32_t ComputeBlockVersion(const CBlockIndex* pindexPrev, const Consensus::Params& params)\n {"
      },
      {
        "sha": "2705bd8eda7fc163c550df471a0961649a700423",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -532,6 +532,8 @@ extern CBlockTreeDB *pblocktree;\n  */\n int GetSpendHeight(const CCoinsViewCache& inputs);\n \n+extern VersionBitsCache versionbitscache;\n+\n /**\n  * Determine what nVersion a new block should use.\n  */"
      },
      {
        "sha": "6befd0a575323314f4d3d5638048e9e778752cdf",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 2,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -7,6 +7,7 @@\n #include \"chain.h\"\n #include \"chainparams.h\"\n #include \"consensus/consensus.h\"\n+#include \"consensus/params.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n #include \"init.h\"\n@@ -320,14 +321,23 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n     return \"valid?\";\n }\n \n+std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n+    const struct BIP9DeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n+    std::string s = vbinfo.name;\n+    s.insert(s.begin(), '!');\n+    return s;\n+}\n+\n UniValue getblocktemplate(const UniValue& params, bool fHelp)\n {\n     if (fHelp || params.size() > 1)\n         throw runtime_error(\n             \"getblocktemplate ( \\\"jsonrequestobject\\\" )\\n\"\n             \"\\nIf the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'.\\n\"\n             \"It returns data needed to construct a block to work on.\\n\"\n-            \"See https://en.bitcoin.it/wiki/BIP_0022 for full specification.\\n\"\n+            \"For full specification, see BIPs 22 and 9:\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0022.mediawiki\\n\"\n+            \"    https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki#getblocktemplate_changes\\n\"\n \n             \"\\nArguments:\\n\"\n             \"1. \\\"jsonrequestobject\\\"       (string, optional) A json object in the following spec\\n\"\n@@ -343,6 +353,12 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             \"\\nResult:\\n\"\n             \"{\\n\"\n             \"  \\\"version\\\" : n,                    (numeric) The block version\\n\"\n+            \"  \\\"rules\\\" : [ \\\"rulename\\\", ... ],    (array of strings) specific block rules that are to be enforced\\n\"\n+            \"  \\\"vbavailable\\\" : {                 (json object) set of pending, supported versionbit (BIP 9) softfork deployments\\n\"\n+            \"      \\\"rulename\\\" : bitnumber        (numeric) identifies the bit number as indicating acceptance and readiness for the named softfork rule\\n\"\n+            \"      ,...\\n\"\n+            \"  },\\n\"\n+            \"  \\\"vbrequired\\\" : n,                 (numeric) bit mask of versionbits the server requires set in submissions\\n\"\n             \"  \\\"previousblockhash\\\" : \\\"xxxx\\\",    (string) The hash of current highest block\\n\"\n             \"  \\\"transactions\\\" : [                (array) contents of non-coinbase transactions that should be included in the next block\\n\"\n             \"      {\\n\"\n@@ -518,9 +534,10 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n         pindexPrev = pindexPrevNew;\n     }\n     CBlock* pblock = &pblocktemplate->block; // pointer for convenience\n+    const Consensus::Params& consensusParams = Params().GetConsensus();\n \n     // Update nTime\n-    UpdateTime(pblock, Params().GetConsensus(), pindexPrev);\n+    UpdateTime(pblock, consensusParams, pindexPrev);\n     pblock->nNonce = 0;\n \n     UniValue aCaps(UniValue::VARR); aCaps.push_back(\"proposal\");\n@@ -571,7 +588,36 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"capabilities\", aCaps));\n+\n+    UniValue aRules(UniValue::VARR);\n+    UniValue vbavailable(UniValue::VOBJ);\n+    for (int i = 0; i < (int)Consensus::MAX_VERSION_BITS_DEPLOYMENTS; ++i) {\n+        Consensus::DeploymentPos pos = Consensus::DeploymentPos(i);\n+        ThresholdState state = VersionBitsState(pindexPrev, consensusParams, pos, versionbitscache);\n+        switch (state) {\n+            case THRESHOLD_DEFINED:\n+            case THRESHOLD_FAILED:\n+                // Not exposed to GBT at all\n+                break;\n+            case THRESHOLD_LOCKED_IN:\n+                // Ensure bit is set in block version\n+                pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n+                // FALL THROUGH to get vbavailable set...\n+            case THRESHOLD_STARTED:\n+                // Add to vbavailable (and it's presumably in version already)\n+                vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                break;\n+            case THRESHOLD_ACTIVE:\n+                // Add to rules only\n+                aRules.push_back(gbt_vb_name(pos));\n+                break;\n+        }\n+    }\n     result.push_back(Pair(\"version\", pblock->nVersion));\n+    result.push_back(Pair(\"rules\", aRules));\n+    result.push_back(Pair(\"vbavailable\", vbavailable));\n+    result.push_back(Pair(\"vbrequired\", int(0)));\n+\n     result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));"
      },
      {
        "sha": "041ca2adbcafc01117714bb185ad2d034c2810c2",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -4,6 +4,17 @@\n \n #include \"versionbits.h\"\n \n+#include \"consensus/params.h\"\n+\n+const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n+    {\n+        /*.name =*/ \"testdummy\",\n+    },\n+    {\n+        /*.name =*/ \"csv\",\n+    }\n+};\n+\n ThresholdState AbstractThresholdConditionChecker::GetStateFor(const CBlockIndex* pindexPrev, const Consensus::Params& params, ThresholdConditionCache& cache) const\n {\n     int nPeriod = Period(params);"
      },
      {
        "sha": "d80594202884b8d9ed4c188324e15203a160f57c",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ddd8c01d705df5526260c3804f89aa9ca9987fac/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "patch": "@@ -30,6 +30,13 @@ enum ThresholdState {\n // will either be NULL or a block with (height + 1) % Period() == 0.\n typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n \n+struct BIP9DeploymentInfo {\n+    /** Deployment name */\n+    const char *name;\n+};\n+\n+extern const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[];\n+\n /**\n  * Abstract class that implements BIP9-style threshold logic, and caches results.\n  */"
      }
    ]
  },
  {
    "sha": "40e81f5f57a9f317b534b12ecb851845a91b3276",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MGU4MWY1ZjU3YTlmMzE3YjUzNGIxMmVjYjg1MTg0NWE5MWIzMjc2",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-05-21T08:39:34Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-08T18:42:17Z"
      },
      "message": "qa/rpc-tests: bip9-softforks: Add tests for getblocktemplate versionbits updates",
      "tree": {
        "sha": "0b43f76b3c6bf8eb504d46946a29904e668b566f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0b43f76b3c6bf8eb504d46946a29904e668b566f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/40e81f5f57a9f317b534b12ecb851845a91b3276",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e81f5f57a9f317b534b12ecb851845a91b3276",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/40e81f5f57a9f317b534b12ecb851845a91b3276",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e81f5f57a9f317b534b12ecb851845a91b3276/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ddd8c01d705df5526260c3804f89aa9ca9987fac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ddd8c01d705df5526260c3804f89aa9ca9987fac"
      }
    ],
    "stats": {
      "total": 32,
      "additions": 28,
      "deletions": 4
    },
    "files": [
      {
        "sha": "1b1f5dd0dcce4f32a5068a992ade61f8678c9467",
        "filename": "qa/rpc-tests/bip9-softforks.py",
        "status": "modified",
        "additions": 28,
        "deletions": 4,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/40e81f5f57a9f317b534b12ecb851845a91b3276/qa/rpc-tests/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/40e81f5f57a9f317b534b12ecb851845a91b3276/qa/rpc-tests/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/bip9-softforks.py?ref=40e81f5f57a9f317b534b12ecb851845a91b3276",
        "patch": "@@ -85,7 +85,7 @@ def get_bip9_status(self, key):\n         raise IndexError ('key:\"%s\" not found' % key)\n \n \n-    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature):\n+    def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignature, bitno):\n         # generate some coins for later\n         self.coinbase_blocks = self.nodes[0].generate(2)\n         self.height = 3  # height of the next block to build\n@@ -94,13 +94,23 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         self.last_block_time = time.time()\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'defined')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert_equal(tmpl['version'], 0x20000000)\n \n         # Test 1\n         # Advance from DEFINED to STARTED\n         test_blocks = self.generate_blocks(141, 4)\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n \n         # Test 2\n         # Fail to achieve LOCKED_IN 100 out of 144 signal bit 1\n@@ -112,6 +122,11 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'started')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n+        assert_equal(tmpl['vbavailable'][bipName], bitno)\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(tmpl['version'] & activated_version)\n \n         # Test 3\n         # 108 out of 144 signal bit 1 to achieve LOCKED_IN\n@@ -123,13 +138,17 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n \n         # Test 4\n         # 143 more version 536870913 blocks (waiting period-1)\n         test_blocks = self.generate_blocks(143, 4)\n         yield TestInstance(test_blocks, sync_every_block=False)\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'locked_in')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName not in tmpl['rules'])\n \n         # Test 5\n         # Check that the new rule is enforced\n@@ -153,6 +172,11 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n         yield TestInstance([[block, True]])\n \n         assert_equal(self.get_bip9_status(bipName)['status'], 'active')\n+        tmpl = self.nodes[0].getblocktemplate({})\n+        assert(bipName in tmpl['rules'])\n+        assert(bipName not in tmpl['vbavailable'])\n+        assert_equal(tmpl['vbrequired'], 0)\n+        assert(not (tmpl['version'] & (1 << bitno)))\n \n         # Test 6\n         # Check that the new sequence lock rules are enforced\n@@ -187,9 +211,9 @@ def test_BIP(self, bipName, activated_version, invalidate, invalidatePostSignatu\n \n     def get_tests(self):\n         for test in itertools.chain(\n-                self.test_BIP('csv', 536870913, self.sequence_lock_invalidate, self.donothing),\n-                self.test_BIP('csv', 536870913, self.mtp_invalidate, self.donothing),\n-                self.test_BIP('csv', 536870913, self.donothing, self.csv_invalidate)\n+                self.test_BIP('csv', 0x20000001, self.sequence_lock_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.mtp_invalidate, self.donothing, 0),\n+                self.test_BIP('csv', 0x20000001, self.donothing, self.csv_invalidate, 0)\n         ):\n             yield test\n "
      }
    ]
  },
  {
    "sha": "65ee3324fbd6799241acada1320b684651bad892",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2NWVlMzMyNGZiZDY3OTkyNDFhY2FkYTEzMjBiNjg0NjUxYmFkODky",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-01T16:47:36Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-08T18:42:17Z"
      },
      "message": "getblocktemplate: Explicitly handle the distinction between GBT-affecting softforks vs not",
      "tree": {
        "sha": "4efdc5d0fed8be6ebd9e40d5b28e207ca14f7eac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4efdc5d0fed8be6ebd9e40d5b28e207ca14f7eac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/65ee3324fbd6799241acada1320b684651bad892",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ee3324fbd6799241acada1320b684651bad892",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/65ee3324fbd6799241acada1320b684651bad892",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ee3324fbd6799241acada1320b684651bad892/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40e81f5f57a9f317b534b12ecb851845a91b3276",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40e81f5f57a9f317b534b12ecb851845a91b3276",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40e81f5f57a9f317b534b12ecb851845a91b3276"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 34,
      "deletions": 2
    },
    "files": [
      {
        "sha": "527514887050dd8c005aa92c5878d5c1cc8dc614",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 30,
        "deletions": 2,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ee3324fbd6799241acada1320b684651bad892/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ee3324fbd6799241acada1320b684651bad892/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=65ee3324fbd6799241acada1320b684651bad892",
        "patch": "@@ -324,7 +324,9 @@ static UniValue BIP22ValidationResult(const CValidationState& state)\n std::string gbt_vb_name(const Consensus::DeploymentPos pos) {\n     const struct BIP9DeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n     std::string s = vbinfo.name;\n-    s.insert(s.begin(), '!');\n+    if (!vbinfo.gbt_force) {\n+        s.insert(s.begin(), '!');\n+    }\n     return s;\n }\n \n@@ -402,6 +404,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n+    std::set<std::string> setClientRules;\n     if (params.size() > 0)\n     {\n         const UniValue& oparam = params[0].get_obj();\n@@ -445,6 +448,14 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n             TestBlockValidity(state, Params(), block, pindexPrev, false, true);\n             return BIP22ValidationResult(state);\n         }\n+\n+        const UniValue& aClientRules = find_value(oparam, \"rules\");\n+        if (aClientRules.isArray()) {\n+            for (unsigned int i = 0; i < aClientRules.size(); ++i) {\n+                const UniValue& v = aClientRules[i];\n+                setClientRules.insert(v.get_str());\n+            }\n+        }\n     }\n \n     if (strMode != \"template\")\n@@ -604,13 +615,30 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n                 pblock->nVersion |= VersionBitsMask(consensusParams, pos);\n                 // FALL THROUGH to get vbavailable set...\n             case THRESHOLD_STARTED:\n-                // Add to vbavailable (and it's presumably in version already)\n+            {\n+                const struct BIP9DeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n                 vbavailable.push_back(Pair(gbt_vb_name(pos), consensusParams.vDeployments[pos].bit));\n+                if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n+                    if (!vbinfo.gbt_force) {\n+                        // If the client doesn't support this, don't indicate it in the [default] version\n+                        pblock->nVersion &= ~VersionBitsMask(consensusParams, pos);\n+                    }\n+                }\n                 break;\n+            }\n             case THRESHOLD_ACTIVE:\n+            {\n                 // Add to rules only\n+                const struct BIP9DeploymentInfo& vbinfo = VersionBitsDeploymentInfo[pos];\n                 aRules.push_back(gbt_vb_name(pos));\n+                if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n+                    // Not supported by the client; make sure it's safe to proceed\n+                    if (!vbinfo.gbt_force) {\n+                        throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Support for '%s' rule requires explicit client support\", vbinfo.name));\n+                    }\n+                }\n                 break;\n+            }\n         }\n     }\n     result.push_back(Pair(\"version\", pblock->nVersion));"
      },
      {
        "sha": "c06c9907be9443c46fb5d342cec188697512532d",
        "filename": "src/versionbits.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ee3324fbd6799241acada1320b684651bad892/src/versionbits.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ee3324fbd6799241acada1320b684651bad892/src/versionbits.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.cpp?ref=65ee3324fbd6799241acada1320b684651bad892",
        "patch": "@@ -9,9 +9,11 @@\n const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[Consensus::MAX_VERSION_BITS_DEPLOYMENTS] = {\n     {\n         /*.name =*/ \"testdummy\",\n+        /*.gbt_force =*/ true,\n     },\n     {\n         /*.name =*/ \"csv\",\n+        /*.gbt_force =*/ true,\n     }\n };\n "
      },
      {
        "sha": "ede2dcdda8a7a5013664b30d7c8f589c8a622151",
        "filename": "src/versionbits.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/65ee3324fbd6799241acada1320b684651bad892/src/versionbits.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/65ee3324fbd6799241acada1320b684651bad892/src/versionbits.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/versionbits.h?ref=65ee3324fbd6799241acada1320b684651bad892",
        "patch": "@@ -33,6 +33,8 @@ typedef std::map<const CBlockIndex*, ThresholdState> ThresholdConditionCache;\n struct BIP9DeploymentInfo {\n     /** Deployment name */\n     const char *name;\n+    /** Whether GBT clients can safely ignore this rule in simplified usage */\n+    bool gbt_force;\n };\n \n extern const struct BIP9DeploymentInfo VersionBitsDeploymentInfo[];"
      }
    ]
  },
  {
    "sha": "db4bacf59092ae4aa923a58f379c36757edad932",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjRiYWNmNTkwOTJhZTRhYTkyM2E1OGYzNzljMzY3NTdlZGFkOTMy",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-01T16:51:54Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2016-06-08T18:42:39Z"
      },
      "message": "getblocktemplate: Use version/force mutation to support pre-BIP9 clients",
      "tree": {
        "sha": "7294fc36e7ba30765230bdc288cd2357ca82a7d9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7294fc36e7ba30765230bdc288cd2357ca82a7d9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db4bacf59092ae4aa923a58f379c36757edad932",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4bacf59092ae4aa923a58f379c36757edad932",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db4bacf59092ae4aa923a58f379c36757edad932",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db4bacf59092ae4aa923a58f379c36757edad932/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "65ee3324fbd6799241acada1320b684651bad892",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/65ee3324fbd6799241acada1320b684651bad892",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/65ee3324fbd6799241acada1320b684651bad892"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 20,
      "deletions": 7
    },
    "files": [
      {
        "sha": "18c3b3a511730b77aa2e7919024cd018c6e82a68",
        "filename": "src/rpcmining.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 7,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db4bacf59092ae4aa923a58f379c36757edad932/src/rpcmining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db4bacf59092ae4aa923a58f379c36757edad932/src/rpcmining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcmining.cpp?ref=db4bacf59092ae4aa923a58f379c36757edad932",
        "patch": "@@ -405,6 +405,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     std::string strMode = \"template\";\n     UniValue lpval = NullUniValue;\n     std::set<std::string> setClientRules;\n+    int64_t nMaxVersionPreVB = -1;\n     if (params.size() > 0)\n     {\n         const UniValue& oparam = params[0].get_obj();\n@@ -455,6 +456,12 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n                 const UniValue& v = aClientRules[i];\n                 setClientRules.insert(v.get_str());\n             }\n+        } else {\n+            // NOTE: It is important that this NOT be read if versionbits is supported\n+            const UniValue& uvMaxVersion = find_value(oparam, \"maxversion\");\n+            if (uvMaxVersion.isNum()) {\n+                nMaxVersionPreVB = uvMaxVersion.get_int64();\n+            }\n         }\n     }\n \n@@ -589,13 +596,10 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n \n     arith_uint256 hashTarget = arith_uint256().SetCompact(pblock->nBits);\n \n-    static UniValue aMutable(UniValue::VARR);\n-    if (aMutable.empty())\n-    {\n-        aMutable.push_back(\"time\");\n-        aMutable.push_back(\"transactions\");\n-        aMutable.push_back(\"prevblock\");\n-    }\n+    UniValue aMutable(UniValue::VARR);\n+    aMutable.push_back(\"time\");\n+    aMutable.push_back(\"transactions\");\n+    aMutable.push_back(\"prevblock\");\n \n     UniValue result(UniValue::VOBJ);\n     result.push_back(Pair(\"capabilities\", aCaps));\n@@ -634,6 +638,7 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n                 if (setClientRules.find(vbinfo.name) == setClientRules.end()) {\n                     // Not supported by the client; make sure it's safe to proceed\n                     if (!vbinfo.gbt_force) {\n+                        // If we do anything other than throw an exception here, be sure version/force isn't sent to old clients\n                         throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Support for '%s' rule requires explicit client support\", vbinfo.name));\n                     }\n                 }\n@@ -646,6 +651,14 @@ UniValue getblocktemplate(const UniValue& params, bool fHelp)\n     result.push_back(Pair(\"vbavailable\", vbavailable));\n     result.push_back(Pair(\"vbrequired\", int(0)));\n \n+    if (nMaxVersionPreVB >= 2) {\n+        // If VB is supported by the client, nMaxVersionPreVB is -1, so we won't get here\n+        // Because BIP 34 changed how the generation transaction is serialised, we can only use version/force back to v2 blocks\n+        // This is safe to do [otherwise-]unconditionally only because we are throwing an exception above if a non-force deployment gets activated\n+        // Note that this can probably also be removed entirely after the first BIP9 non-force deployment (ie, probably segwit) gets activated\n+        aMutable.push_back(\"version/force\");\n+    }\n+\n     result.push_back(Pair(\"previousblockhash\", pblock->hashPrevBlock.GetHex()));\n     result.push_back(Pair(\"transactions\", transactions));\n     result.push_back(Pair(\"coinbaseaux\", aux));"
      }
    ]
  }
]