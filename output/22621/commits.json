[
  {
    "sha": "32fa49a18497a9b8c72e36a72ae96e7b23930223",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMmZhNDlhMTg0OTdhOWI4YzcyZTM2YTcyYWU5NmU3YjIzOTMwMjIz",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-04T05:38:36Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2021-08-04T11:20:32Z"
      },
      "message": "make ParseOutputType return a std::optional<OutputType>",
      "tree": {
        "sha": "5cb3394183c123b5e0db66a7694c6afa99a8565e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cb3394183c123b5e0db66a7694c6afa99a8565e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/32fa49a18497a9b8c72e36a72ae96e7b23930223",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAmEKeAIACgkQLuufXMCV\nJsGM8hAAhoTPuJtOlXEVWX4otiGL8R6fjWftS+/0ZAsBrH8CA5u3REeu3hwLzAmZ\nzDUz8TPHql7LKvqui1ZH+jYVqgxSZxZP7B3KD5DWe363cst5zNbl2EU6ak7sJNcp\nXCq5Nzp/IYFflpr8fZNdt5ET/lS6Q16amPnGqtbkEY9z3UkyvwBk1jDk4MgaNmae\ncosgn00d8FJOYd+a2e82RrOytQIQAS6fFNS60pGCCoz2rt/cUOHW1ebo3YnNWCRa\n9niwdyRV2aR7ovIMzdulIjp6o2hKYPq5uOjzQhXPnekaKG1Nudm1se64ZOFCAMcF\npNXhaubU+cQUlmS5Ar2VvXOG9SxXCGKGZCNaieuPAakOSeEsBVvrTN1pSaTUVwu6\npp/2tImW+QYGotzjLt0zTs0pzJp0NQQJVA8oq5A76QRiyDPNdYedE2ExXH4cOEhU\nF7W9tfGRDPyUnraljXZUV5/XjFBiP4yCUqK6X2FYmyk+6AppIgwSq5puwGr8WQHV\nLVSPxDYdYuEtwhhEV1G6iTnLeTarkmBsdp6tohULVWybwS1WhP8Xnfvin63mIpsH\njGjWzBCpTIeG8ZCrnggXudi66V9Kn0xqL7H3pvic0shJdJEyfk1LQQ72vXpSBNvf\nKsLMx4UjP06YEAkw/A6jzNsNxa1m/aMGIO8B+2pgY0EMIA/87I8=\n=58/s\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cb3394183c123b5e0db66a7694c6afa99a8565e\nparent 3308c61091b6b7cb22569f3abadea6d001295c90\nauthor fanquake <fanquake@gmail.com> 1628055516 +0800\ncommitter fanquake <fanquake@gmail.com> 1628076032 +0800\n\nmake ParseOutputType return a std::optional<OutputType>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32fa49a18497a9b8c72e36a72ae96e7b23930223",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/32fa49a18497a9b8c72e36a72ae96e7b23930223",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/32fa49a18497a9b8c72e36a72ae96e7b23930223/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3308c61091b6b7cb22569f3abadea6d001295c90",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3308c61091b6b7cb22569f3abadea6d001295c90",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3308c61091b6b7cb22569f3abadea6d001295c90"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 40,
      "deletions": 36
    },
    "files": [
      {
        "sha": "b5f1df97929c79a5d1027dfd67c874d3f04614f4",
        "filename": "src/outputtype.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 10,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/outputtype.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/outputtype.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -13,29 +13,26 @@\n #include <util/vector.h>\n \n #include <assert.h>\n+#include <optional>\n #include <string>\n \n static const std::string OUTPUT_TYPE_STRING_LEGACY = \"legacy\";\n static const std::string OUTPUT_TYPE_STRING_P2SH_SEGWIT = \"p2sh-segwit\";\n static const std::string OUTPUT_TYPE_STRING_BECH32 = \"bech32\";\n static const std::string OUTPUT_TYPE_STRING_BECH32M = \"bech32m\";\n \n-bool ParseOutputType(const std::string& type, OutputType& output_type)\n+std::optional<OutputType> ParseOutputType(const std::string& type)\n {\n     if (type == OUTPUT_TYPE_STRING_LEGACY) {\n-        output_type = OutputType::LEGACY;\n-        return true;\n+        return OutputType::LEGACY;\n     } else if (type == OUTPUT_TYPE_STRING_P2SH_SEGWIT) {\n-        output_type = OutputType::P2SH_SEGWIT;\n-        return true;\n+        return OutputType::P2SH_SEGWIT;\n     } else if (type == OUTPUT_TYPE_STRING_BECH32) {\n-        output_type = OutputType::BECH32;\n-        return true;\n+        return OutputType::BECH32;\n     } else if (type == OUTPUT_TYPE_STRING_BECH32M) {\n-        output_type = OutputType::BECH32M;\n-        return true;\n+        return OutputType::BECH32M;\n     }\n-    return false;\n+    return std::nullopt;\n }\n \n const std::string& FormatOutputType(OutputType type)"
      },
      {
        "sha": "0de7689125f525f6d484a870da0aa3b2b1526184",
        "filename": "src/outputtype.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/outputtype.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/outputtype.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/outputtype.h?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -11,6 +11,7 @@\n #include <script/standard.h>\n \n #include <array>\n+#include <optional>\n #include <string>\n #include <vector>\n \n@@ -28,7 +29,7 @@ static constexpr auto OUTPUT_TYPES = std::array{\n     OutputType::BECH32M,\n };\n \n-[[nodiscard]] bool ParseOutputType(const std::string& str, OutputType& output_type);\n+std::optional<OutputType> ParseOutputType(const std::string& str);\n const std::string& FormatOutputType(OutputType type);\n \n /**"
      },
      {
        "sha": "1a94abf6d3aabfb62ad1fdc908b5374a4e80e42a",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -24,6 +24,7 @@\n #include <util/strencodings.h>\n #include <util/system.h>\n \n+#include <optional>\n #include <stdint.h>\n #include <tuple>\n #ifdef HAVE_MALLOC_INFO\n@@ -128,12 +129,13 @@ static RPCHelpMan createmultisig()\n     // Get the output type\n     OutputType output_type = OutputType::LEGACY;\n     if (!request.params[2].isNull()) {\n-        if (!ParseOutputType(request.params[2].get_str(), output_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[2].get_str());\n+        if (!parsed) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[2].get_str()));\n-        }\n-        if (output_type == OutputType::BECH32M) {\n+        } else if (parsed.value() == OutputType::BECH32M) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"createmultisig cannot create bech32m multisig addresses\");\n         }\n+        output_type = parsed.value();\n     }\n \n     // Construct using pay-to-script-hash:"
      },
      {
        "sha": "82f3a306c586c02762deefaf15ef5a60deaccb84",
        "filename": "src/test/fuzz/kitchen_sink.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/test/fuzz/kitchen_sink.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/test/fuzz/kitchen_sink.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/kitchen_sink.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -13,6 +13,7 @@\n \n #include <array>\n #include <cstdint>\n+#include <optional>\n #include <vector>\n \n namespace {\n@@ -46,11 +47,10 @@ FUZZ_TARGET(kitchen_sink)\n \n     const OutputType output_type = fuzzed_data_provider.PickValueInArray(OUTPUT_TYPES);\n     const std::string& output_type_string = FormatOutputType(output_type);\n-    OutputType output_type_parsed;\n-    const bool parsed = ParseOutputType(output_type_string, output_type_parsed);\n+    const std::optional<OutputType> parsed = ParseOutputType(output_type_string);\n     assert(parsed);\n-    assert(output_type == output_type_parsed);\n-    (void)ParseOutputType(fuzzed_data_provider.ConsumeRandomLengthString(64), output_type_parsed);\n+    assert(output_type == parsed.value());\n+    (void)ParseOutputType(fuzzed_data_provider.ConsumeRandomLengthString(64));\n \n     const std::vector<uint8_t> bytes = ConsumeRandomLengthByteVector(fuzzed_data_provider);\n     const std::vector<bool> bits = BytesToBits(bytes);"
      },
      {
        "sha": "0c1b45b86cb83e40b0b19c9706df9170ef24c145",
        "filename": "src/test/fuzz/string.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/test/fuzz/string.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/test/fuzz/string.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/string.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -66,8 +66,7 @@ FUZZ_TARGET(string)\n         (void)ParseNonRFCJSONValue(random_string_1);\n     } catch (const std::runtime_error&) {\n     }\n-    OutputType output_type;\n-    (void)ParseOutputType(random_string_1, output_type);\n+    (void)ParseOutputType(random_string_1);\n     (void)RemovePrefix(random_string_1, random_string_2);\n     (void)ResolveErrMsg(random_string_1, random_string_2);\n     try {"
      },
      {
        "sha": "43b67076cd0652dc3621e7158f61a6044e71e1ff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 12,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -266,12 +266,13 @@ static RPCHelpMan getnewaddress()\n \n     OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[1].isNull()) {\n-        if (!ParseOutputType(request.params[1].get_str(), output_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[1].get_str());\n+        if (!parsed) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[1].get_str()));\n-        }\n-        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n         }\n+        output_type = parsed.value();\n     }\n \n     CTxDestination dest;\n@@ -313,12 +314,13 @@ static RPCHelpMan getrawchangeaddress()\n \n     OutputType output_type = pwallet->m_default_change_type.value_or(pwallet->m_default_address_type);\n     if (!request.params[0].isNull()) {\n-        if (!ParseOutputType(request.params[0].get_str(), output_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[0].get_str());\n+        if (!parsed) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[0].get_str()));\n-        }\n-        if (output_type == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n+        } else if (parsed.value() == OutputType::BECH32M && pwallet->GetLegacyScriptPubKeyMan()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Legacy wallets cannot provide bech32m addresses\");\n         }\n+        output_type = parsed.value();\n     }\n \n     CTxDestination dest;\n@@ -1007,12 +1009,13 @@ static RPCHelpMan addmultisigaddress()\n \n     OutputType output_type = pwallet->m_default_address_type;\n     if (!request.params[3].isNull()) {\n-        if (!ParseOutputType(request.params[3].get_str(), output_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(request.params[3].get_str());\n+        if (!parsed) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown address type '%s'\", request.params[3].get_str()));\n-        }\n-        if (output_type == OutputType::BECH32M) {\n+        } else if (parsed.value() == OutputType::BECH32M) {\n             throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, \"Bech32m multisig addresses cannot be created with legacy wallets\");\n         }\n+        output_type = parsed.value();\n     }\n \n     // Construct using pay-to-script-hash:\n@@ -3133,11 +3136,11 @@ void FundTransaction(CWallet& wallet, CMutableTransaction& tx, CAmount& fee_out,\n             if (options.exists(\"changeAddress\") || options.exists(\"change_address\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both change address and address type options\");\n             }\n-            OutputType out_type;\n-            if (!ParseOutputType(options[\"change_type\"].get_str(), out_type)) {\n+            if (std::optional<OutputType> parsed = ParseOutputType(options[\"change_type\"].get_str())) {\n+                coinControl.m_change_type.emplace(parsed.value());\n+            } else {\n                 throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, strprintf(\"Unknown change type '%s'\", options[\"change_type\"].get_str()));\n             }\n-            coinControl.m_change_type.emplace(out_type);\n         }\n \n         const UniValue include_watching_option = options.exists(\"include_watching\") ? options[\"include_watching\"] : options[\"includeWatching\"];"
      },
      {
        "sha": "741540f7248fe2ccb8517224cfbe015858058ce8",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 4,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/32fa49a18497a9b8c72e36a72ae96e7b23930223/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=32fa49a18497a9b8c72e36a72ae96e7b23930223",
        "patch": "@@ -2586,19 +2586,21 @@ std::shared_ptr<CWallet> CWallet::Create(interfaces::Chain* chain, const std::st\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty()) {\n-        if (!ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"));\n+        if (!parsed) {\n             error = strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\"));\n             return nullptr;\n         }\n+        walletInstance->m_default_address_type = parsed.value();\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty()) {\n-        OutputType out_type;\n-        if (!ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), out_type)) {\n+        std::optional<OutputType> parsed = ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"));\n+        if (!parsed) {\n             error = strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\"));\n             return nullptr;\n         }\n-        walletInstance->m_default_change_type = out_type;\n+        walletInstance->m_default_change_type = parsed.value();\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {"
      }
    ]
  }
]