[
  {
    "sha": "08dce519e5506257a47c5552fadf740d6d004fc0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowOGRjZTUxOWU1NTA2MjU3YTQ3YzU1NTJmYWRmNzQwZDZkMDA0ZmMw",
    "commit": {
      "author": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-04-21T13:58:18Z"
      },
      "committer": {
        "name": "Gregory Sanders",
        "email": "gsanders87@gmail.com",
        "date": "2020-08-10T18:53:35Z"
      },
      "message": "Expand on contracting carve-out rule test",
      "tree": {
        "sha": "6211a89024ee832b7fdb1ccaa8123ede5157a64a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6211a89024ee832b7fdb1ccaa8123ede5157a64a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/08dce519e5506257a47c5552fadf740d6d004fc0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dce519e5506257a47c5552fadf740d6d004fc0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/08dce519e5506257a47c5552fadf740d6d004fc0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08dce519e5506257a47c5552fadf740d6d004fc0/comments",
    "author": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "instagibbs",
      "id": 5767891,
      "node_id": "MDQ6VXNlcjU3Njc4OTE=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5767891?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/instagibbs",
      "html_url": "https://github.com/instagibbs",
      "followers_url": "https://api.github.com/users/instagibbs/followers",
      "following_url": "https://api.github.com/users/instagibbs/following{/other_user}",
      "gists_url": "https://api.github.com/users/instagibbs/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/instagibbs/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/instagibbs/subscriptions",
      "organizations_url": "https://api.github.com/users/instagibbs/orgs",
      "repos_url": "https://api.github.com/users/instagibbs/repos",
      "events_url": "https://api.github.com/users/instagibbs/events{/privacy}",
      "received_events_url": "https://api.github.com/users/instagibbs/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "977328338e468390feea691de744609db213281b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/977328338e468390feea691de744609db213281b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/977328338e468390feea691de744609db213281b"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 18,
      "deletions": 6
    },
    "files": [
      {
        "sha": "40038059d5e39952b1b32a7b0927569267d02c34",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 18,
        "deletions": 6,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08dce519e5506257a47c5552fadf740d6d004fc0/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08dce519e5506257a47c5552fadf740d6d004fc0/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=08dce519e5506257a47c5552fadf740d6d004fc0",
        "patch": "@@ -14,6 +14,7 @@\n \n MAX_ANCESTORS = 25\n MAX_DESCENDANTS = 25\n+TOO_LONG_DESC = \"too-long-mempool-chain, too many descendants\"\n \n class MempoolPackagesTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -48,12 +49,19 @@ def run_test(self):\n         vout = utxo[0]['vout']\n         value = utxo[0]['amount']\n \n+        # Make sure we're not chaining off anything yet.\n+        assert_equal(len(self.nodes[0].getrawmempool(True)), 0)\n+\n         fee = Decimal(\"0.0002\")\n         # MAX_ANCESTORS transactions off a confirmed tx should be fine\n         chain = []\n-        for _ in range(4):\n+        # First tx has 3 outputs\n+        (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 3)\n+        vout = 0\n+        value = sent_value\n+        chain.append([txid, value])\n+        for _ in range(3):\n             (txid, sent_value) = self.chain_transaction(self.nodes[0], [txid], [vout], value, fee, 2)\n-            vout = 0\n             value = sent_value\n             chain.append([txid, value])\n         for _ in range(MAX_ANCESTORS - 4):\n@@ -68,17 +76,21 @@ def run_test(self):\n         # Adding one more transaction on to the chain should fail.\n         assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many unconfirmed ancestors [limit: 25]\", self.chain_transaction, self.nodes[0], [txid], [0], value, fee, 1)\n         # ...even if it chains on from some point in the middle of the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n+        assert_raises_rpc_error(-26, TOO_LONG_DESC, self.chain_transaction, self.nodes[0], [chain[2][0]], [1], chain[2][1], fee, 1)\n+        assert_raises_rpc_error(-26, TOO_LONG_DESC, self.chain_transaction, self.nodes[0], [chain[1][0]], [1], chain[1][1], fee, 1)\n         # ...even if it chains on to two parent transactions with one in the chain.\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n+        assert_raises_rpc_error(-26, TOO_LONG_DESC, self.chain_transaction, self.nodes[0], [chain[0][0], second_chain], [1, 0], chain[0][1] + second_chain_value, fee, 1)\n         # ...especially if its > 40k weight\n-        assert_raises_rpc_error(-26, \"too-long-mempool-chain, too many descendants\", self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n+        assert_raises_rpc_error(-26, TOO_LONG_DESC, self.chain_transaction, self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 350)\n         # But not if it chains directly off the first transaction\n         (replacable_txid, replacable_orig_value) = self.chain_transaction(self.nodes[0], [chain[0][0]], [1], chain[0][1], fee, 1)\n         # and the second chain should work just fine\n         self.chain_transaction(self.nodes[0], [second_chain], [0], second_chain_value, fee, 1)\n \n+        # But now that we're at the additional carve-out limit, the third base output being spent will be rejected\n+        # For both ancestor's descendant limits\n+        assert_raises_rpc_error(-26, TOO_LONG_DESC, self.chain_transaction, self.nodes[0], [chain[0][0]], [2], chain[0][1], fee, 1)\n+\n         # Make sure we can RBF the chain which used our carve-out rule\n         second_tx_outputs = {self.nodes[0].getrawtransaction(replacable_txid, True)[\"vout\"][0]['scriptPubKey']['addresses'][0]: replacable_orig_value - (Decimal(1) / Decimal(100))}\n         second_tx = self.nodes[0].createrawtransaction([{'txid': chain[0][0], 'vout': 1}], second_tx_outputs)"
      }
    ]
  }
]