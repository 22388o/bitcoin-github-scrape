DrahtBot,2020-06-14 18:01:39,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #19145 (Add hash_type options for gettxoutsetinfo by fjahr)\n* #19107 (p2p: Refactor, move all header verification into th",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-643800731,643800731,
troygiorshev,2020-06-16 02:51:37,ACK 6b18bfefed402a904db45a19b9cd8c1cb5d4c337,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-644499712,644499712,
jonatack,2020-06-16 08:10:03,Thanks for reviewing @troygiorshev. Took your suggestion and also removed an unnecessary `disconnect_p2ps()` call in `test_oversized_msg()`.,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-644607169,644607169,
jonatack,2020-06-17 10:14:47,"Thank you for reviewing, @gzhao408. Took your suggestion and credited you as co-author in the commit.",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645285506,645285506,
jnewbery,2020-06-17 15:57:39,I don't think we should be removing the `disconnect_p2ps` calls at the end of each subtest. Ideally the subtest finishes by leaving the node and fixture in as close a state to they were in originally. See https://github.com/bitcoin/bitcoin/pull/19304#discussion_r441643412,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645462753,645462753,
glozow,2020-06-17 16:53:13,"@jnewbery good point... \n> Ideally the subtest finishes by leaving the node and fixture in as close a state to they were in originally\n\nIn terms of state, I'm thinking state = (1) the `test_node.p2ps` array and (2) the connections between the node and its peers. \n\n(1) I think it's ok if the array has an extra entry if we're not using the `.p2p` property? Would you agree? If not, then yea",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645494091,645494091,
jonatack,2020-06-18 04:53:24,"AFAICT the tests are order-independent with this PR, and I checked that this passes when rebased to current master:\n```diff\n+from test_framework.util import assert_equal\n  \n+    def assert_no_connected_peers(self):\n+        assert_equal(self.nodes[0].num_connected_mininodes(), 0)\n+\n     def run_test(self):\n         self.test_magic_bytes()\n+        self.assert_no_connected_peers()",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645771410,645771410,
jonatack,2020-06-18 05:14:39,"Anyway, removed the removal of `disconnect_p2ps`, and rebased to master to be sure all is well with the latest version of `disconnect_p2ps`. Edit: Improved the logging and the assertions with new ideas after reviewing #19107.",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645777808,645777808,
jonatack,2020-06-18 11:47:06,@MarcoFalke several PRs on this test have been merged but no approval from you on this one. I think they are good improvements but feel free to close it if you disagree; it will save me from spinning my wheels.,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645964504,645964504,
MarcoFalke,2020-06-18 11:56:48,"I generally use the conflicts list of DrahtBot to see which pr has the most reviews and is the most ready to merge and then get them in one by one if they have received their ACKs.\n\nWill take another look here. One sec",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645968808,645968808,
jonatack,2020-06-18 12:57:04,"Rebased for merged #19304, reverted the chain setting, and removed a line left over from the last change (thanks Marco).\n\n```diff\n-MSG_LIMIT = 4 * 1000 * 1000  # 4MB, per MAX_PROTOCOL_MESSAGE_LENGTH\nVALID_DATA_LIMIT = MAX_PROTOCOL_MESSAGE_LENGTH - 5  # Account for the 5-byte length prefix\n\n-        self.setup_clean_chain = False\n+        self.setup_clean_chain = True\n```\n",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-645999775,645999775,
troygiorshev,2020-06-18 17:44:26,"reACK ca658361c7e6a137d1ee8be8a005b35ad0426fa3\n\nReviewed and stepped through each test.  Verified that none of these changes caused linting errors.",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-646212014,646212014,
troygiorshev,2020-06-18 21:11:30,reACK 98af0f02055409af7f3d1a5df06d315f36b0b856,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-646307936,646307936,
jonatack,2020-06-22 14:10:07,"Rebased, no changes. Thank you for ACKing @troygiorshev! Should be trivial to re-ack with `git range-diff 8ef15e8 98af0f0 56010f9`",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-647543895,647543895,
troygiorshev,2020-06-24 01:41:43,reACK 56010f92564a94b0ca6c008c0e6f74a19fad4a2a,https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-648531842,648531842,
MarcoFalke,2020-06-24 19:54:01,"ACK 56010f9256 ðŸŽ›\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 56010f9256 ðŸŽ›\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUicWwv+KIsi9o22/6uZbUTRM0UsyIPesQTV0ZcUzpXX8Sz27WY/psDv60xlD3+W\neUGgldLLYL1EBH8wWRbyMWsQ4WFQJILWXl6+8Cr2b8Lv9N1NhJ/",https://github.com/bitcoin/bitcoin/pull/19272#issuecomment-649036276,649036276,
MarcoFalke,2020-06-14 11:59:37,"splitting up msg_type and size could match them on different lines, while we want to match both on the same line",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r439822415,439822415,test/functional/p2p_invalid_messages.py
jonatack,2020-06-14 19:47:42,"Good point! Fixed. This made it apparent that in `net_processing.cpp` the debug logging for misbehaving from `headers` message size was a bit different from the equivalent misbehavior logging for `inv`, `getdata`, and `addr` message sizes. Fixed. If we don't want to touch it, we can also have each test pass in their own debug log message to test for.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r439861808,439861808,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-16 01:18:11,"Maybe this should specify ""other peers""?  As it stands someone may miss the difference between `conn` and `conn2`.\n```suggestion\n        self.log.info(""(b) Check node still services other peers in a timely way"")\n```",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r440531901,440531901,test/functional/p2p_invalid_messages.py
jonatack,2020-06-16 08:08:06,Done.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r440664439,440664439,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-18 12:02:35,why is this changed?,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442174152,442174152,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-18 12:02:49,"```suggestion\nMSG_LIMIT = MAX_PROTOCOL_MESSAGE_LENGTH\n```",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442174257,442174257,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 12:08:15,i thought it was faster but can revert that change while rebasing,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442177051,442177051,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-18 12:09:19,why would it be faster to copy the blocksdir as opposed to copy nothing?,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442177573,442177573,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 12:09:47,"Good eye; that's an error introduced this morning in my last rebase, will fix",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442177828,442177828,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 12:52:11,Removed the line.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442202120,442202120,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 12:55:36,I (mis)understood(?) the discussions to say that using the cached chain was faster than spinning up a new one. Reverted.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442204131,442204131,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-18 12:58:20,"There is no new chain generated in this test:\n\n```\n$ git grep generate 'test/functional/p2p_invalid_messages.py'\n$",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442205896,442205896,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-18 15:21:23,"I don't understand this change. This is a ""headers"" message, so the original log seems correct - that it's a headers message of size x.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442308344,442308344,src/net_processing.cpp
jnewbery,2020-06-18 15:23:24,"This comment ""test for memory exhaustion"" is no longer relevant. When the test was written, it tested the node's memory usage before and after sending the messages and asserted that it hadn't gone up. That was an unreliable test and so the memory checking was removed.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442309750,442309750,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-18 15:25:20,"My preference is not to test the debug log for actions that we can test directly. Here, we can directly test that the peer has been disconnected, so I don't think we need to test for this message in the debug log.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442311096,442311096,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 15:31:57,"Thanks @jnewbery, what change would you suggest instead?",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442315686,442315686,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 15:35:19,"I added this after noticing both here and in the #19107 that some of the tests aren't testing for the disconnection, and it's a free additional check. If a change made one of these disconnections no longer happen or be logged without warning, and no test needing to be changed, ISTM that could be a regression. ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442318053,442318053,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 15:39:58,"I don't disagree but opted for the smallest change. Do you think the `inv`, `getdata`, and `addr` oversized messages misbehavior logging should be changed instead? Or are they all good as-is (in which case the `headers` one remains different, and each specific one can be passed into the `test_oversized_msg()` assertion function from the caller.)",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442321180,442321180,src/net_processing.cpp
jonatack,2020-06-18 15:42:15,"We could just remove ""to test for memory exhaustion"" but saying why could be good here.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442322742,442322742,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-18 15:42:42,"Right - I think the fix is to test for disconnection, not to test for the log message that accompanies disconnection.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442323055,442323055,test/functional/p2p_invalid_messages.py
jnewbery,2020-06-18 15:49:24,"ah ok, it's to be consistent with the other logs. That's fine.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442327769,442327769,src/net_processing.cpp
jnewbery,2020-06-18 15:49:56,"Yes, I suggest removing ""to test for memory exhaustion"" because the test isn't doing that.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442328131,442328131,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-18 15:50:13,"IMO they should all be changed to `<type> message size = %u`.  `<type> message` because that sounds better to my ear, and `size` as opposed to `size()` because we're talking about the value of the function, not the function itself.\n\nThat said, I'll ACK anything that's consistent among these 4 logs.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442328340,442328340,src/net_processing.cpp
jonatack,2020-06-18 16:11:51,"Ok, in 4 cases it was only logging the disconnection because `disconnect_p2ps()` was previously being called in the scope of the `assert_debug_log`. Updating along with my review feedback in #19107.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442342711,442342711,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 16:47:00,Thanks -- done.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442364941,442364941,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 16:51:11,"Done -- good call, thanks.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442367444,442367444,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 16:55:25,@troygiorshev I share your preference but opted for the minimum possible change. Given both of your reviews will try the changes you suggest.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442369845,442369845,src/net_processing.cpp
jonatack,2020-06-18 17:26:43,Done.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442387680,442387680,src/net_processing.cpp
MarcoFalke,2020-06-18 17:54:59,"in commit cb71adbf9338c8a3f8348c936d4c1caa1086a33f:\n\nno need to pass the message type, since the message already knows its own type:\n\n```diff\ndiff --git a/test/functional/p2p_invalid_messages.py b/test/functional/p2p_invalid_messages.py\nindex f1ef5c6414..ad918bf3bb 100755\n--- a/test/functional/p2p_invalid_messages.py\n+++ b/test/functional/p2p_invalid_messages.py\n@@ -124,7 +124,8 ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442403419,442403419,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-18 17:56:40,"in commit 058dbcec567eb5b6fa780f0adbbd70b421621c38\n\nThis must stay an array. Otherwise it will assert nothing.",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442404333,442404333,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 20:22:46,"Thanks, done. I should have verified the method. Am in the long-standing habit of accepting either a string or an array in framework APIs I make, e.g.\n```diff\n     def assert_debug_log(self, expected_msgs, unexpected_msgs=None, timeout=2):\n+        if type(expected_msgs) == str:\n+            expected_msgs = [expected_msgs]\n+        if type(unexpected_msgs) == str:\n+            unexpect",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442481523,442481523,test/functional/p2p_invalid_messages.py
jonatack,2020-06-18 20:23:28,Nice; done.,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442481841,442481841,test/functional/p2p_invalid_messages.py
troygiorshev,2020-06-18 21:11:24,plug: https://github.com/bitcoin/bitcoin/pull/18210,https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442504928,442504928,test/functional/p2p_invalid_messages.py
MarcoFalke,2020-06-19 10:52:48,"I did try to add `: List[str]`, but for some reason it didn't complain when I passed a string. Maybe mypy was broken on my machine? ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r442772204,442772204,test/functional/p2p_invalid_messages.py
rajarshimaitra,2020-06-24 14:24:33,"Probably I am missing something, but this 5 bytes message length seems to be coming from `ser_string()` in `messages.py`. But is it something that the node also recognizes? It doesn't seem to be part of the p2p protocol.   ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r444932532,444932532,test/functional/p2p_invalid_messages.py
rajarshimaitra,2020-06-24 14:32:23,"Nit: ""Sending 80 junk messages..."". makes the log a bit more clear. ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r444938726,444938726,test/functional/p2p_invalid_messages.py
jonatack,2020-06-25 07:18:00,"""junk messages"" is stated in the log immediately beforehand:\n```\n2020-06-25 ... TestFramework (INFO): Test node stays up despite many large junk messages\n2020-06-25 ... TestFramework (INFO): (a) Send 80 messages, each of maximum valid data size (4MB)\n2020-06-25 ... TestFramework (INFO): (b) Check node still services peers in a timely way\n2020-06-25 ... TestFramework (INFO): (c) Wait for ",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r445354212,445354212,test/functional/p2p_invalid_messages.py
jonatack,2020-06-25 11:33:58,"We set `VALID_DATA_LIMIT` so that the length of the serialised `msg_unrecognized` message built with it will equal `MAX_PROTOCOL_MESSAGE_LENGTH`. This is verified at line 153; you can also add the following assertion at line 111\n```diff\n             msg = msg_unrecognized(str_data=""d"" * (VALID_DATA_LIMIT + 1))\n+            assert_equal(len(msg.serialize()), MAX_PROTOCOL_MESSAGE_LENGTH + 1)\",https://github.com/bitcoin/bitcoin/pull/19272#discussion_r445492211,445492211,test/functional/p2p_invalid_messages.py
