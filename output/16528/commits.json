[
  {
    "sha": "06620302c713cae65ee8e4ff9302e4c88e2a1285",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjYyMDMwMmM3MTNjYWU2NWVlOGU0ZmY5MzAyZTRjODhlMmExMjg1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:34:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it",
      "tree": {
        "sha": "cff394a3dc60646f97fe353b27f451b7b9689bb1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cff394a3dc60646f97fe353b27f451b7b9689bb1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/06620302c713cae65ee8e4ff9302e4c88e2a1285",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "64139803f1225dab26197a20314109d37fa87d5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/64139803f1225dab26197a20314109d37fa87d5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/64139803f1225dab26197a20314109d37fa87d5f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 6,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f8f5740b38c3c2ca4797c64d845cd48cfc4d1043",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06620302c713cae65ee8e4ff9302e4c88e2a1285/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06620302c713cae65ee8e4ff9302e4c88e2a1285/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=06620302c713cae65ee8e4ff9302e4c88e2a1285",
        "patch": "@@ -1497,3 +1497,5 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n     }\n     return set_address;\n }\n+\n+void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}"
      },
      {
        "sha": "0564d0cbc2aacdd4eced2a1241c05d0183bd7fd7",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/06620302c713cae65ee8e4ff9302e4c88e2a1285/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/06620302c713cae65ee8e4ff9302e4c88e2a1285/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=06620302c713cae65ee8e4ff9302e4c88e2a1285",
        "patch": "@@ -222,6 +222,8 @@ class ScriptPubKeyMan\n \n     virtual uint256 GetID() const { return uint256(); }\n \n+    virtual void SetType(OutputType type, bool internal) {}\n+\n     /** Prepends the wallet name in logging output to ease debugging in multi-wallet use cases */\n     template<typename... Params>\n     void WalletLogPrintf(std::string fmt, Params... parameters) const {\n@@ -366,6 +368,8 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     uint256 GetID() const override;\n \n+    void SetType(OutputType type, bool internal) override;\n+\n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata GUARDED_BY(cs_KeyStore);\n "
      }
    ]
  },
  {
    "sha": "6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjgxMTlhZjUzZWUyZmRiNGM0YjViMjRiNGU2NTBjMGRjM2JkMjdj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:16:48Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Introduce DescriptorScriptPubKeyMan as a dummy class",
      "tree": {
        "sha": "77804988b25a32ed98c7fc4f07cd10a2a8b4cd31",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77804988b25a32ed98c7fc4f07cd10a2a8b4cd31"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "06620302c713cae65ee8e4ff9302e4c88e2a1285",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/06620302c713cae65ee8e4ff9302e4c88e2a1285",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/06620302c713cae65ee8e4ff9302e4c88e2a1285"
      }
    ],
    "stats": {
      "total": 156,
      "additions": 156,
      "deletions": 0
    },
    "files": [
      {
        "sha": "ea61ab793e89c3eab04a6f58f4cc46147965d583",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 110,
        "deletions": 0,
        "changes": 110,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
        "patch": "@@ -1499,3 +1499,113 @@ std::set<CKeyID> LegacyScriptPubKeyMan::GetKeys() const\n }\n \n void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+\n+bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n+{\n+    return false;\n+}\n+\n+isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n+{\n+    return ISMINE_NO;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n+{\n+    return false;\n+}\n+\n+void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n+{\n+}\n+\n+bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n+{\n+    return false;\n+}\n+\n+void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n+{\n+}\n+\n+bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n+{\n+    return false;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n+{\n+    return GetTime();\n+}\n+\n+size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n+{\n+    return 0;\n+}\n+\n+unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n+{\n+    return 0;\n+}\n+\n+int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n+{\n+    return 0;\n+}\n+\n+std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n+{\n+    return nullptr;\n+}\n+\n+bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n+{\n+    return false;\n+}\n+\n+bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n+{\n+    return false;\n+}\n+\n+SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n+{\n+    return SigningResult::SIGNING_FAILED;\n+}\n+\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs) const\n+{\n+    return TransactionError::INVALID_PSBT;\n+}\n+\n+const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+{\n+    return nullptr;\n+}\n+\n+uint256 DescriptorScriptPubKeyMan::GetID() const\n+{\n+    return uint256();\n+}\n+\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}"
      },
      {
        "sha": "24c8af8b4ed238df2108082985710d7f8e76de83",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 46,
        "deletions": 0,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_SCRIPTPUBKEYMAN_H\n \n #include <psbt.h>\n+#include <script/descriptor.h>\n #include <script/signingprovider.h>\n #include <script/standard.h>\n #include <util/error.h>\n@@ -481,4 +482,49 @@ class LegacySigningProvider : public SigningProvider\n     bool GetKeyOrigin(const CKeyID& keyid, KeyOriginInfo& info) const override { return m_spk_man.GetKeyOrigin(keyid, info); }\n };\n \n+class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n+{\n+public:\n+    using ScriptPubKeyMan::ScriptPubKeyMan;\n+\n+    bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n+    isminetype IsMine(const CScript& script) const override;\n+\n+    bool CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys = false) override;\n+    bool Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch) override;\n+\n+    bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n+    void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n+\n+    bool TopUp(unsigned int size = 0) override;\n+\n+    void MarkUnusedAddresses(const CScript& script) override;\n+\n+    bool IsHDEnabled() const override;\n+\n+    bool HavePrivateKeys() const override;\n+\n+    int64_t GetOldestKeyPoolTime() const override;\n+    size_t KeypoolCountExternalKeys() const override;\n+    unsigned int GetKeyPoolSize() const override;\n+\n+    int64_t GetTimeFirstKey() const override;\n+\n+    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+\n+    bool CanGetAddresses(bool internal = false) const override;\n+\n+    std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const override;\n+\n+    bool CanProvide(const CScript& script, SignatureData& sigdata) override;\n+\n+    bool SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const override;\n+    SigningResult SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const override;\n+    TransactionError FillPSBT(PartiallySignedTransaction& psbt, int sighash_type = 1 /* SIGHASH_ALL */, bool sign = true, bool bip32derivs = false) const override;\n+\n+    uint256 GetID() const override;\n+\n+    void SetType(OutputType type, bool internal) override;\n+};\n+\n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      }
    ]
  },
  {
    "sha": "96accc73f067c7c95946e9932645dd821ef67f63",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NmFjY2M3M2YwNjdjN2M5NTk0NmU5OTMyNjQ1ZGQ4MjFlZjY3ZjYz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-06T02:32:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Add WALLET_FLAG_DESCRIPTORS",
      "tree": {
        "sha": "0de1bb879946d071d96da5228c87c100c5da7813",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0de1bb879946d071d96da5228c87c100c5da7813"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/96accc73f067c7c95946e9932645dd821ef67f63",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96accc73f067c7c95946e9932645dd821ef67f63",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/96accc73f067c7c95946e9932645dd821ef67f63",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96accc73f067c7c95946e9932645dd821ef67f63/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b8119af53ee2fdb4c4b5b24b4e650c0dc3bd27c"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 8,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ece872ef171ac417704a624595f872054c2f0d8a",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=96accc73f067c7c95946e9932645dd821ef67f63",
        "patch": "@@ -2452,6 +2452,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                             {RPCResult::Type::NUM, \"duration\", \"elapsed seconds since scan start\"},\n                             {RPCResult::Type::NUM, \"progress\", \"scanning progress percentage [0.0, 1.0]\"},\n                         }},\n+                        {RPCResult::Type::BOOL, \"descriptors\", \"whether this wallet uses descriptors for scriptPubKey management\"},\n                     }},\n                 },\n                 RPCExamples{\n@@ -2505,6 +2506,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n     } else {\n         obj.pushKV(\"scanning\", false);\n     }\n+    obj.pushKV(\"descriptors\", pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n     return obj;\n }\n "
      },
      {
        "sha": "8d0a35786083b382cec761d22fdae5afea01b7e1",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=96accc73f067c7c95946e9932645dd821ef67f63",
        "patch": "@@ -111,7 +111,8 @@ static constexpr uint64_t KNOWN_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE\n     |   WALLET_FLAG_BLANK_WALLET\n     |   WALLET_FLAG_KEY_ORIGIN_METADATA\n-    |   WALLET_FLAG_DISABLE_PRIVATE_KEYS;\n+    |   WALLET_FLAG_DISABLE_PRIVATE_KEYS\n+    |   WALLET_FLAG_DESCRIPTORS;\n \n static constexpr uint64_t MUTABLE_WALLET_FLAGS =\n         WALLET_FLAG_AVOID_REUSE;\n@@ -121,6 +122,7 @@ static const std::map<std::string,WalletFlags> WALLET_FLAG_MAP{\n     {\"blank\", WALLET_FLAG_BLANK_WALLET},\n     {\"key_origin_metadata\", WALLET_FLAG_KEY_ORIGIN_METADATA},\n     {\"disable_private_keys\", WALLET_FLAG_DISABLE_PRIVATE_KEYS},\n+    {\"descriptor_wallet\", WALLET_FLAG_DESCRIPTORS},\n };\n \n extern const std::map<uint64_t,std::string> WALLET_FLAG_CAVEATS;"
      },
      {
        "sha": "4f1f4c79ddc9464314e700b241097a63613ec8e1",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/96accc73f067c7c95946e9932645dd821ef67f63/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=96accc73f067c7c95946e9932645dd821ef67f63",
        "patch": "@@ -55,6 +55,9 @@ enum WalletFlags : uint64_t {\n     //! bitcoin from opening the wallet, thinking it was newly created, and\n     //! then improperly reinitializing it.\n     WALLET_FLAG_BLANK_WALLET = (1ULL << 33),\n+\n+    //! Indicate that this wallet supports DescriptorScriptPubKeyMan\n+    WALLET_FLAG_DESCRIPTORS = (1ULL << 34),\n };\n \n //! Get the path of the wallet directory."
      }
    ]
  },
  {
    "sha": "aeac157c9dc141546b45e06ba9c2e641ad86083f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphZWFjMTU3YzlkYzE0MTU0NmI0NWUwNmJhOWMyZTY0MWFkODYwODNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T15:21:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Return nullptr from GetLegacyScriptPubKeyMan if descriptor wallet",
      "tree": {
        "sha": "89b5cdcd9485c718f488f264677b2ba5c38154d0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89b5cdcd9485c718f488f264677b2ba5c38154d0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac157c9dc141546b45e06ba9c2e641ad86083f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "96accc73f067c7c95946e9932645dd821ef67f63",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/96accc73f067c7c95946e9932645dd821ef67f63",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/96accc73f067c7c95946e9932645dd821ef67f63"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 4,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a5ae1d61740824f028db28e1a4d1edff390f123b",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/aeac157c9dc141546b45e06ba9c2e641ad86083f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/aeac157c9dc141546b45e06ba9c2e641ad86083f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=aeac157c9dc141546b45e06ba9c2e641ad86083f",
        "patch": "@@ -4353,6 +4353,9 @@ std::unique_ptr<SigningProvider> CWallet::GetSolvingProvider(const CScript& scri\n \n LegacyScriptPubKeyMan* CWallet::GetLegacyScriptPubKeyMan() const\n {\n+    if (IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        return nullptr;\n+    }\n     // Legacy wallets only have one ScriptPubKeyMan which is a LegacyScriptPubKeyMan.\n     // Everything in m_internal_spk_managers and m_external_spk_managers point to the same legacyScriptPubKeyMan.\n     auto it = m_internal_spk_managers.find(OutputType::LEGACY);\n@@ -4368,7 +4371,7 @@ LegacyScriptPubKeyMan* CWallet::GetOrCreateLegacyScriptPubKeyMan()\n \n void CWallet::SetupLegacyScriptPubKeyMan()\n {\n-    if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty()) {\n+    if (!m_internal_spk_managers.empty() || !m_external_spk_managers.empty() || !m_spk_managers.empty() || IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n         return;\n     }\n "
      }
    ]
  },
  {
    "sha": "6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2YjEzY2QzZmE4NTRkZmFlYjllMjY5YmZmM2Q2N2NhY2MwZTViNWRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-17T21:54:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Create LegacyScriptPubKeyMan when not a descriptor wallet",
      "tree": {
        "sha": "93c0fc541faeed6bb7adfe87049935b38aa12205",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93c0fc541faeed6bb7adfe87049935b38aa12205"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "aeac157c9dc141546b45e06ba9c2e641ad86083f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/aeac157c9dc141546b45e06ba9c2e641ad86083f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/aeac157c9dc141546b45e06ba9c2e641ad86083f"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 4,
      "deletions": 2
    },
    "files": [
      {
        "sha": "3ee8984b4fd303861915bb4c085694887e2ea5c6",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
        "patch": "@@ -3834,8 +3834,10 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         walletInstance->SetWalletFlags(wallet_creation_flags, false);\n \n-        // Always create LegacyScriptPubKeyMan for now\n-        walletInstance->SetupLegacyScriptPubKeyMan();\n+        // Only create LegacyScriptPubKeyMan when not descriptor wallet\n+        if (!walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+            walletInstance->SetupLegacyScriptPubKeyMan();\n+        }\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);"
      }
    ]
  },
  {
    "sha": "3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMTk0YTdmODhhYzFhMzI5OTdiMzkwYjRmMTg4YzRiNmE0YWYwNGE1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-29T00:14:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Introduce WalletDescriptor class\n\nWalletDescriptor is a Descriptor with other wallet metadata",
      "tree": {
        "sha": "b8c163a9609353485383ab25606910b6971e2152",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b8c163a9609353485383ab25606910b6971e2152"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6b13cd3fa854dfaeb9e269bff3d67cacc0e5b5dc"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 59,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2bdeb89f3c732311c5ef24c1a56dcdfa29dc32d3",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 21,
        "deletions": 0,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3194a7f88ac1a32997b390b4f188c4b6a4af04a5/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3194a7f88ac1a32997b390b4f188c4b6a4af04a5/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
        "patch": "@@ -637,4 +637,25 @@ BOOST_FIXTURE_TEST_CASE(dummy_input_size_test, TestChain100Setup)\n     BOOST_CHECK_EQUAL(CalculateNestedKeyhashInputSize(true), DUMMY_NESTED_P2WPKH_INPUT_SIZE);\n }\n \n+bool malformed_descriptor(std::ios_base::failure e)\n+{\n+    std::string s(e.what());\n+    return s.find(\"Missing checksum\") != std::string::npos;\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(wallet_descriptor_test, BasicTestingSetup)\n+{\n+    std::vector<unsigned char> malformed_record;\n+    CVectorWriter vw(0, 0, malformed_record, 0);\n+    vw << std::string(\"notadescriptor\");\n+    vw << (uint64_t)0;\n+    vw << (int32_t)0;\n+    vw << (int32_t)0;\n+    vw << (int32_t)1;\n+\n+    VectorReader vr(0, 0, malformed_record, 0);\n+    WalletDescriptor w_desc;\n+    BOOST_CHECK_EXCEPTION(vr >> w_desc, std::ios_base::failure, malformed_descriptor);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d7e07ed04c024b8f76785ac34ac77b99613c2a03",
        "filename": "src/wallet/walletutil.h",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3194a7f88ac1a32997b390b4f188c4b6a4af04a5/src/wallet/walletutil.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3194a7f88ac1a32997b390b4f188c4b6a4af04a5/src/wallet/walletutil.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.h?ref=3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_WALLETUTIL_H\n \n #include <fs.h>\n+#include <script/descriptor.h>\n \n #include <vector>\n \n@@ -86,4 +87,41 @@ class WalletLocation final\n     bool Exists() const;\n };\n \n+/** Descriptor with some wallet metadata */\n+class WalletDescriptor\n+{\n+public:\n+    std::shared_ptr<Descriptor> descriptor;\n+    uint64_t creation_time;\n+    int32_t range_start; // First item in range; start of range, inclusive, i.e. [range_start, range_end). This never changes.\n+    int32_t range_end; // Item after the last; end of range, exclusive, i.e. [range_start, range_end). This will increment with each TopUp()\n+    int32_t next_index; // Position of the next item to generate\n+    DescriptorCache cache;\n+\n+    ADD_SERIALIZE_METHODS;\n+\n+    template <typename Stream, typename Operation>\n+    inline void SerializationOp(Stream& s, Operation ser_action) {\n+        if (ser_action.ForRead()) {\n+            std::string desc;\n+            std::string error;\n+            READWRITE(desc);\n+            FlatSigningProvider keys;\n+            descriptor = Parse(desc, keys, error, true);\n+            if (!descriptor) {\n+                throw std::ios_base::failure(\"Invalid descriptor: \" + error);\n+            }\n+        } else {\n+            READWRITE(descriptor->ToString());\n+        }\n+        READWRITE(creation_time);\n+        READWRITE(next_index);\n+        READWRITE(range_start);\n+        READWRITE(range_end);\n+    }\n+\n+    WalletDescriptor() {}\n+    WalletDescriptor(std::shared_ptr<Descriptor> descriptor, uint64_t creation_time, int32_t range_start, int32_t range_end, int32_t next_index) : descriptor(descriptor), creation_time(creation_time), range_start(range_start), range_end(range_end), next_index(next_index) {}\n+};\n+\n #endif // BITCOIN_WALLET_WALLETUTIL_H"
      }
    ]
  },
  {
    "sha": "d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkODEzMjY2OWUxMGMxZGI5YWUwYzJlYTBkM2Y4MjJkN2QyZjAxMzQ1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Add a lock cs_desc_man for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "9ef8fd0c9c0b4f164fe997cf909aeb455d51d9a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9ef8fd0c9c0b4f164fe997cf909aeb455d51d9a4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3194a7f88ac1a32997b390b4f188c4b6a4af04a5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3194a7f88ac1a32997b390b4f188c4b6a4af04a5"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 2,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2cf1817927289759b189b5af4b569d5e2c1bdc17",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
        "patch": "@@ -487,6 +487,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n public:\n     using ScriptPubKeyMan::ScriptPubKeyMan;\n \n+    mutable RecursiveMutex cs_desc_man;\n+\n     bool GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error) override;\n     isminetype IsMine(const CScript& script) const override;\n "
      }
    ]
  },
  {
    "sha": "834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MzRkZTAzMDBjZGU1N2NhM2Y2NjJmYjdhYTViMWJkYWVkNjhiYzhm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:34:37Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Store WalletDescriptor in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "89d4eb03068961fd7191f70715ce7cd014217ce7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/89d4eb03068961fd7191f70715ce7cd014217ce7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d8132669e10c1db9ae0c2ea0d3f822d7d2f01345"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "3e9db905fd9430454fd5a92d61c6e6a24f50f411",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
        "patch": "@@ -484,8 +484,17 @@ class LegacySigningProvider : public SigningProvider\n \n class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n {\n+private:\n+    WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n+\n+    using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+\n+    ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n public:\n-    using ScriptPubKeyMan::ScriptPubKeyMan;\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n+        :   ScriptPubKeyMan(storage),\n+            m_wallet_descriptor(descriptor)\n+        {}\n \n     mutable RecursiveMutex cs_desc_man;\n "
      }
    ]
  },
  {
    "sha": "78f8a92910d34247fa5d04368338c598d9908267",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3OGY4YTkyOTEwZDM0MjQ3ZmE1ZDA0MzY4MzM4YzU5OGQ5OTA4MjY3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T17:50:32Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:25:50Z"
      },
      "message": "Implement SetType in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "d357f03efc4736b9ad2adc1f19f19875764b01f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d357f03efc4736b9ad2adc1f19f19875764b01f5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/78f8a92910d34247fa5d04368338c598d9908267",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f8a92910d34247fa5d04368338c598d9908267",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/78f8a92910d34247fa5d04368338c598d9908267",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f8a92910d34247fa5d04368338c598d9908267/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/834de0300cde57ca3f662fb7aa5b1bdaed68bc8f"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 12,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c825438f997285599297c6122311f46bf5a0f407",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f8a92910d34247fa5d04368338c598d9908267/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f8a92910d34247fa5d04368338c598d9908267/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=78f8a92910d34247fa5d04368338c598d9908267",
        "patch": "@@ -1608,4 +1608,8 @@ uint256 DescriptorScriptPubKeyMan::GetID() const\n     return uint256();\n }\n \n-void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n+void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n+{\n+    this->m_address_type = type;\n+    this->m_internal = internal;\n+}"
      },
      {
        "sha": "81c89de9851ba63976632a031afa4396a82e3f68",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/78f8a92910d34247fa5d04368338c598d9908267/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/78f8a92910d34247fa5d04368338c598d9908267/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=78f8a92910d34247fa5d04368338c598d9908267",
        "patch": "@@ -490,11 +490,18 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+\n+    OutputType m_address_type;\n+    bool m_internal;\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n             m_wallet_descriptor(descriptor)\n         {}\n+    DescriptorScriptPubKeyMan(WalletStorage& storage, OutputType address_type, bool internal)\n+        :   ScriptPubKeyMan(storage),\n+            m_address_type(address_type), m_internal(internal)\n+        {}\n \n     mutable RecursiveMutex cs_desc_man;\n "
      }
    ]
  },
  {
    "sha": "db7177af8c159abbcc209f2caafcd45d54c181c5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkYjcxNzdhZjhjMTU5YWJiY2MyMDlmMmNhYWZjZDQ1ZDU0YzE4MWM1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T19:41:31Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:42Z"
      },
      "message": "Add LoadDescriptorScriptPubKeyMan and SetActiveScriptPubKeyMan to CWallet",
      "tree": {
        "sha": "d9f7d1f8b2aafc4026e32c3786d757b646f38b37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9f7d1f8b2aafc4026e32c3786d757b646f38b37"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/db7177af8c159abbcc209f2caafcd45d54c181c5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db7177af8c159abbcc209f2caafcd45d54c181c5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/db7177af8c159abbcc209f2caafcd45d54c181c5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db7177af8c159abbcc209f2caafcd45d54c181c5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "78f8a92910d34247fa5d04368338c598d9908267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/78f8a92910d34247fa5d04368338c598d9908267",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/78f8a92910d34247fa5d04368338c598d9908267"
      }
    ],
    "stats": {
      "total": 75,
      "additions": 75,
      "deletions": 0
    },
    "files": [
      {
        "sha": "098b059a7bf848b2d4bdf933dca3e5fac2d177da",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 22,
        "deletions": 0,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=db7177af8c159abbcc209f2caafcd45d54c181c5",
        "patch": "@@ -4402,3 +4402,25 @@ void CWallet::ConnectScriptPubKeyManNotifiers()\n         spk_man->NotifyCanGetAddressesChanged.connect(NotifyCanGetAddressesChanged);\n     }\n }\n+\n+void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n+{\n+    auto spk_manager = std::unique_ptr<ScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+    m_spk_managers[id] = std::move(spk_manager);\n+}\n+\n+void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n+{\n+    auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n+    auto spk_man = m_spk_managers.at(id).get();\n+    spk_man->SetType(type, internal);\n+    spk_mans[type] = spk_man;\n+\n+    if (!memonly) {\n+        WalletBatch batch(*database);\n+        if (!batch.WriteActiveScriptPubKeyMan(static_cast<uint8_t>(type), id, internal)) {\n+            throw std::runtime_error(std::string(__func__) + \": writing active ScriptPubKeyMan id failed\");\n+        }\n+    }\n+    NotifyCanGetAddressesChanged();\n+}"
      },
      {
        "sha": "c7d5e66c0a00be2ab7b285ae6b80b68c26eebefc",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=db7177af8c159abbcc209f2caafcd45d54c181c5",
        "patch": "@@ -1234,6 +1234,16 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Connect the signals from ScriptPubKeyMans to the signals in CWallet\n     void ConnectScriptPubKeyManNotifiers();\n+\n+    //! Instantiate a descriptor ScriptPubKeyMan from the WalletDescriptor and load it\n+    void LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc);\n+\n+    //! Sets the active ScriptPubKeyMan for the specified type and internal\n+    //! @param[in] id The unique id for the ScriptPubKeyMan\n+    //! @param[in] type The OutputType this ScriptPubKeyMan provides addresses for\n+    //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n+    //! @param[in] memonly Whether to record this update to the database. Set to true for wallet loading, normally false when actually updating the wallet.\n+    void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n };\n \n /**"
      },
      {
        "sha": "c1e3694dcd371d3b4489fdb6ce880a0b6bddb50b",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 0,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=db7177af8c159abbcc209f2caafcd45d54c181c5",
        "patch": "@@ -21,6 +21,8 @@\n \n namespace DBKeys {\n const std::string ACENTRY{\"acentry\"};\n+const std::string ACTIVEEXTERNALSPK{\"activeexternalspk\"};\n+const std::string ACTIVEINTERNALSPK{\"activeinternalspk\"};\n const std::string BESTBLOCK_NOMERKLE{\"bestblock_nomerkle\"};\n const std::string BESTBLOCK{\"bestblock\"};\n const std::string CRYPTED_KEY{\"ckey\"};\n@@ -41,6 +43,7 @@ const std::string PURPOSE{\"purpose\"};\n const std::string SETTINGS{\"settings\"};\n const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n+const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -179,6 +182,12 @@ bool WalletBatch::WriteMinVersion(int nVersion)\n     return WriteIC(DBKeys::MINVERSION, nVersion);\n }\n \n+bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal)\n+{\n+    std::string key = internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK;\n+    return WriteIC(make_pair(key, type), id);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};\n@@ -189,6 +198,8 @@ class CWalletScanState {\n     bool fIsEncrypted{false};\n     bool fAnyUnordered{false};\n     std::vector<uint256> vWalletUpgrade;\n+    std::map<OutputType, uint256> m_active_external_spks;\n+    std::map<OutputType, uint256> m_active_internal_spks;\n \n     CWalletScanState() {\n     }\n@@ -404,6 +415,25 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         } else if (strType == DBKeys::OLD_KEY) {\n             strErr = \"Found unsupported 'wkey' record, try loading with version 0.18\";\n             return false;\n+        } else if (strType == DBKeys::ACTIVEEXTERNALSPK || strType == DBKeys::ACTIVEINTERNALSPK) {\n+            uint8_t type;\n+            ssKey >> type;\n+            uint256 id;\n+            ssValue >> id;\n+\n+            bool internal = strType == DBKeys::ACTIVEINTERNALSPK;\n+            auto& spk_mans = internal ? wss.m_active_internal_spks : wss.m_active_external_spks;\n+            if (spk_mans.count(static_cast<OutputType>(type)) > 0) {\n+                strErr = \"Multiple ScriptPubKeyMans specified for a single type\";\n+                return false;\n+            }\n+            spk_mans[static_cast<OutputType>(type)] = id;\n+        } else if (strType == DBKeys::WALLETDESCRIPTOR) {\n+            uint256 id;\n+            ssKey >> id;\n+            WalletDescriptor desc;\n+            ssValue >> desc;\n+            pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -497,6 +527,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         result = DBErrors::CORRUPT;\n     }\n \n+    // Set the active ScriptPubKeyMans\n+    for (auto spk_man_pair : wss.m_active_external_spks) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ false, /* memonly */ true);\n+    }\n+    for (auto spk_man_pair : wss.m_active_internal_spks) {\n+        pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      },
      {
        "sha": "4bd03da4a329069712d64f9736d04f9c05be473c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/db7177af8c159abbcc209f2caafcd45d54c181c5/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=db7177af8c159abbcc209f2caafcd45d54c181c5",
        "patch": "@@ -54,6 +54,8 @@ enum class DBErrors\n \n namespace DBKeys {\n extern const std::string ACENTRY;\n+extern const std::string ACTIVEEXTERNALSPK;\n+extern const std::string ACTIVEINTERNALSPK;\n extern const std::string BESTBLOCK;\n extern const std::string BESTBLOCK_NOMERKLE;\n extern const std::string CRYPTED_KEY;\n@@ -74,6 +76,7 @@ extern const std::string PURPOSE;\n extern const std::string SETTINGS;\n extern const std::string TX;\n extern const std::string VERSION;\n+extern const std::string WALLETDESCRIPTOR;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys\n@@ -245,6 +248,8 @@ class WalletBatch\n     /// Erase destination data tuple from wallet database\n     bool EraseDestData(const std::string &address, const std::string &key);\n \n+    bool WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bool internal);\n+\n     DBErrors LoadWallet(CWallet* pwallet);\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::vector<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);"
      }
    ]
  },
  {
    "sha": "2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZGI3Y2E3NjVjOGZiMmM3MWRkNmY3YzRmMjlhZDcwZTY4ZmYxNzIw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-05T22:33:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement IsMine for DescriptorScriptPubKeyMan\n\nAdds a set of scriptPubKeys that DescriptorScriptPubKeyMan tracks.\nIf the given script is in that set, it is considered ISMINE_SPENDABLE",
      "tree": {
        "sha": "389dafe912b25bf40a3db918936c725736d25d13",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/389dafe912b25bf40a3db918936c725736d25d13"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "db7177af8c159abbcc209f2caafcd45d54c181c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/db7177af8c159abbcc209f2caafcd45d54c181c5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/db7177af8c159abbcc209f2caafcd45d54c181c5"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "88563459bce8e75ec0d8f37442bd47738a0d568a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
        "patch": "@@ -1507,6 +1507,10 @@ bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDest\n \n isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n {\n+    LOCK(cs_desc_man);\n+    if (m_map_script_pub_keys.count(script) > 0) {\n+        return ISMINE_SPENDABLE;\n+    }\n     return ISMINE_NO;\n }\n \n@@ -1580,7 +1584,7 @@ std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(c\n \n bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n {\n-    return false;\n+    return IsMine(script);\n }\n \n bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const"
      }
    ]
  },
  {
    "sha": "741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3NDExMjJkNGMxYTYyY2VkM2U5NmQxNmQ2N2Y0ZWViM2E2NTIyZDk5",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T20:25:10Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement MarkUnusedAddresses in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "c8d59701d55bb1537255be73df37ac70e3a81707",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c8d59701d55bb1537255be73df37ac70e3a81707"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2db7ca765c8fb2c71dd6f7c4f29ad70e68ff1720"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 11,
      "deletions": 0
    },
    "files": [
      {
        "sha": "31a87a53fe88a6b81c4e6819b878cb3b707ce6b0",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/741122d4c1a62ced3e96d16d67f4eeb3a6522d99/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/741122d4c1a62ced3e96d16d67f4eeb3a6522d99/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
        "patch": "@@ -1540,6 +1540,17 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n {\n+    LOCK(cs_desc_man);\n+    if (IsMine(script)) {\n+        int32_t index = m_map_script_pub_keys[script];\n+        if (index >= m_wallet_descriptor.next_index) {\n+            WalletLogPrintf(\"%s: Detected a used keypool item at index %d, mark all keypool items up to this item as used\\n\", __func__, index);\n+            m_wallet_descriptor.next_index = index + 1;\n+        }\n+        if (!TopUp()) {\n+            WalletLogPrintf(\"%s: Topping up keypool failed (locked wallet)\\n\", __func__);\n+        }\n+    }\n }\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const"
      }
    ]
  },
  {
    "sha": "ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzJmOWUxMTc4YzhlMzhjMGE1Y2EwNjNmZTgxYWRhYzhmOTE2MzQ4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:05:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement IsHDEnabled in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "f4c22c6985f5133c8d0f48c939fc2789e69a9ddc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f4c22c6985f5133c8d0f48c939fc2789e69a9ddc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/741122d4c1a62ced3e96d16d67f4eeb3a6522d99",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/741122d4c1a62ced3e96d16d67f4eeb3a6522d99"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 5,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c28b7fcfa5f06065825b82364beb88c8b9a055cb",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2f9e1178c8e38c0a5ca063fe81adac8f916348/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2f9e1178c8e38c0a5ca063fe81adac8f916348/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
        "patch": "@@ -1555,7 +1555,8 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n \n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsRange();\n }\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const"
      },
      {
        "sha": "8f42d1d75f5dd05a0c57fbe56ed743c9bb0c42fd",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec2f9e1178c8e38c0a5ca063fe81adac8f916348/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec2f9e1178c8e38c0a5ca063fe81adac8f916348/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
        "patch": "@@ -1331,9 +1331,10 @@ CAmount CWallet::GetChange(const CTransaction& tx) const\n \n bool CWallet::IsHDEnabled() const\n {\n+    // All Active ScriptPubKeyMans must be HD for this to be true\n     bool result = true;\n-    for (const auto& spk_man_pair : m_spk_managers) {\n-        result &= spk_man_pair.second->IsHDEnabled();\n+    for (const auto& spk_man : GetActiveScriptPubKeyMans()) {\n+        result &= spk_man->IsHDEnabled();\n     }\n     return result;\n }"
      }
    ]
  },
  {
    "sha": "46c46aebb7943e1e2e96755e94dc6c197920bf75",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmM0NmFlYmI3OTQzZTFlMmU5Njc1NWU5NGRjNmMxOTc5MjBiZjc1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-08T21:28:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetID for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "ef3f8806f36cf99f22ae20b28ee0309e10bf6b72",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef3f8806f36cf99f22ae20b28ee0309e10bf6b72"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46c46aebb7943e1e2e96755e94dc6c197920bf75",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec2f9e1178c8e38c0a5ca063fe81adac8f916348",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ec2f9e1178c8e38c0a5ca063fe81adac8f916348"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a6978d4aad95170e6e7db5125081b1fe881fa1a9",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46c46aebb7943e1e2e96755e94dc6c197920bf75/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46c46aebb7943e1e2e96755e94dc6c197920bf75/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=46c46aebb7943e1e2e96755e94dc6c197920bf75",
        "patch": "@@ -1621,7 +1621,11 @@ const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination&\n \n uint256 DescriptorScriptPubKeyMan::GetID() const\n {\n-    return uint256();\n+    LOCK(cs_desc_man);\n+    std::string desc_str = m_wallet_descriptor.descriptor->ToString();\n+    uint256 id;\n+    CSHA256().Write((unsigned char*)desc_str.data(), desc_str.size()).Finalize(id.begin());\n+    return id;\n }\n \n void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)"
      }
    ]
  },
  {
    "sha": "2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMzYzZTlmY2FhNDFiNjhiZjExMTUzZjU5MWI5NWYyZDQxZmY5YTFh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T17:40:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Load the descriptor cache from the wallet file",
      "tree": {
        "sha": "a80a259a16f04f5fe0898b0a329917368863b0cd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a80a259a16f04f5fe0898b0a329917368863b0cd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46c46aebb7943e1e2e96755e94dc6c197920bf75",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46c46aebb7943e1e2e96755e94dc6c197920bf75",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46c46aebb7943e1e2e96755e94dc6c197920bf75"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 64,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7142867081de2d65afa3bf5338f494ba6a97a57a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "patch": "@@ -1633,3 +1633,23 @@ void DescriptorScriptPubKeyMan::SetType(OutputType type, bool internal)\n     this->m_address_type = type;\n     this->m_internal = internal;\n }\n+\n+void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n+{\n+    LOCK(cs_desc_man);\n+    m_wallet_descriptor.cache = cache;\n+    for (int32_t i = m_wallet_descriptor.range_start; i < m_wallet_descriptor.range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            throw std::runtime_error(\"Error: Unable to expand wallet descriptor from cache\");\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            if (m_map_script_pub_keys.count(script) != 0) {\n+                throw std::runtime_error(strprintf(\"Error: Already loaded script at index %d as being at index %d\", i, m_map_script_pub_keys[script]));\n+            }\n+            m_map_script_pub_keys[script] = i;\n+        }\n+    }\n+}"
      },
      {
        "sha": "34ba07967e3b303ae2665004b44b571bc2f81e5e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "patch": "@@ -543,6 +543,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     uint256 GetID() const override;\n \n     void SetType(OutputType type, bool internal) override;\n+\n+    void SetCache(const DescriptorCache& cache);\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "fc4783f932a2f3c8aa4469ae2fb3cef02b204e40",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "patch": "@@ -44,6 +44,7 @@ const std::string SETTINGS{\"settings\"};\n const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n+const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -200,6 +201,7 @@ class CWalletScanState {\n     std::vector<uint256> vWalletUpgrade;\n     std::map<OutputType, uint256> m_active_external_spks;\n     std::map<OutputType, uint256> m_active_internal_spks;\n+    std::map<uint256, DescriptorCache> m_descriptor_caches;\n \n     CWalletScanState() {\n     }\n@@ -433,7 +435,38 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             ssKey >> id;\n             WalletDescriptor desc;\n             ssValue >> desc;\n+            if (wss.m_descriptor_caches.count(id) == 0) {\n+                wss.m_descriptor_caches[id] = DescriptorCache();\n+            }\n             pwallet->LoadDescriptorScriptPubKeyMan(id, desc);\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCACHE) {\n+            bool parent = true;\n+            uint256 desc_id;\n+            uint32_t key_exp_index;\n+            uint32_t der_index;\n+            ssKey >> desc_id;\n+            ssKey >> key_exp_index;\n+\n+            // if the der_index exists, it's a derived xpub\n+            try\n+            {\n+                ssKey >> der_index;\n+                parent = false;\n+            }\n+            catch (...) {}\n+\n+            std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+            ssValue >> ser_xpub;\n+            CExtPubKey xpub;\n+            xpub.Decode(ser_xpub.data());\n+            if (wss.m_descriptor_caches.count(desc_id)) {\n+                wss.m_descriptor_caches[desc_id] = DescriptorCache();\n+            }\n+            if (parent) {\n+                wss.m_descriptor_caches[desc_id].CacheParentExtPubKey(key_exp_index, xpub);\n+            } else {\n+                wss.m_descriptor_caches[desc_id].CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n+            }\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -535,6 +568,13 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         pwallet->SetActiveScriptPubKeyMan(spk_man_pair.second, spk_man_pair.first, /* internal */ true, /* memonly */ true);\n     }\n \n+    // Set the descriptor caches\n+    for (auto desc_cache_pair : wss.m_descriptor_caches) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_cache_pair.first);\n+        assert(spk_man);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      },
      {
        "sha": "75fb12c9dfe302c8122315e9b765fcc2e4e9f906",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "patch": "@@ -77,6 +77,8 @@ extern const std::string SETTINGS;\n extern const std::string TX;\n extern const std::string VERSION;\n extern const std::string WALLETDESCRIPTOR;\n+extern const std::string WALLETDESCRIPTORCKEY;\n+extern const std::string WALLETDESCRIPTORKEY;\n extern const std::string WATCHMETA;\n extern const std::string WATCHS;\n } // namespace DBKeys"
      }
    ]
  },
  {
    "sha": "953feb3d2724f5398dd48990c4957a19313d2c8c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NTNmZWIzZDI3MjRmNTM5OGRkNDg5OTBjNDk1N2ExOTMxM2QyYzhj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T22:23:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement loading of keys for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "5111473bc3650d2fc51eb4a7118e090dac6c706d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5111473bc3650d2fc51eb4a7118e090dac6c706d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/953feb3d2724f5398dd48990c4957a19313d2c8c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953feb3d2724f5398dd48990c4957a19313d2c8c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/953feb3d2724f5398dd48990c4957a19313d2c8c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953feb3d2724f5398dd48990c4957a19313d2c8c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2363e9fcaa41b68bf11153f591b95f2d41ff9a1a"
      }
    ],
    "stats": {
      "total": 97,
      "additions": 97,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d651816e58cb330f25818259c524c3fb9a43e20a",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 0,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=953feb3d2724f5398dd48990c4957a19313d2c8c",
        "patch": "@@ -1653,3 +1653,21 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n         }\n     }\n }\n+\n+bool DescriptorScriptPubKeyMan::AddKey(const CKeyID& key_id, const CKey& key)\n+{\n+    LOCK(cs_desc_man);\n+    m_map_keys[key_id] = key;\n+    return true;\n+}\n+\n+bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key)\n+{\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n+    return true;\n+}"
      },
      {
        "sha": "8da6757de0ef55f5d7b94282edeadee3c466127c",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=953feb3d2724f5398dd48990c4957a19313d2c8c",
        "patch": "@@ -488,11 +488,21 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n+    using KeyMap = std::map<CKeyID, CKey>;\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n \n     OutputType m_address_type;\n     bool m_internal;\n+\n+    KeyMap m_map_keys GUARDED_BY(cs_desc_man);\n+    CryptedKeyMap m_map_crypted_keys GUARDED_BY(cs_desc_man);\n+\n+    bool SetCrypted();\n+\n+    //! keeps track of whether Unlock has run a thorough check before\n+    bool m_decryption_thoroughly_checked = false;\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n@@ -545,6 +555,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     void SetType(OutputType type, bool internal) override;\n \n     void SetCache(const DescriptorCache& cache);\n+\n+    bool AddKey(const CKeyID& key_id, const CKey& key);\n+    bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "61546656c43c911bfdfdf55e40d37394eeb05f51",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 66,
        "deletions": 0,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/953feb3d2724f5398dd48990c4957a19313d2c8c/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=953feb3d2724f5398dd48990c4957a19313d2c8c",
        "patch": "@@ -45,6 +45,8 @@ const std::string TX{\"tx\"};\n const std::string VERSION{\"version\"};\n const std::string WALLETDESCRIPTOR{\"walletdescriptor\"};\n const std::string WALLETDESCRIPTORCACHE{\"walletdescriptorcache\"};\n+const std::string WALLETDESCRIPTORCKEY{\"walletdescriptorckey\"};\n+const std::string WALLETDESCRIPTORKEY{\"walletdescriptorkey\"};\n const std::string WATCHMETA{\"watchmeta\"};\n const std::string WATCHS{\"watchs\"};\n } // namespace DBKeys\n@@ -202,6 +204,8 @@ class CWalletScanState {\n     std::map<OutputType, uint256> m_active_external_spks;\n     std::map<OutputType, uint256> m_active_internal_spks;\n     std::map<uint256, DescriptorCache> m_descriptor_caches;\n+    std::map<std::pair<uint256, CKeyID>, CKey> m_descriptor_keys;\n+    std::map<std::pair<uint256, CKeyID>, std::pair<CPubKey, std::vector<unsigned char>>> m_descriptor_crypt_keys;\n \n     CWalletScanState() {\n     }\n@@ -467,6 +471,58 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n             } else {\n                 wss.m_descriptor_caches[desc_id].CacheDerivedExtPubKey(key_exp_index, der_index, xpub);\n             }\n+        } else if (strType == DBKeys::WALLETDESCRIPTORKEY) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            ssKey >> desc_id;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            CKey key;\n+            CPrivKey pkey;\n+            uint256 hash;\n+\n+            wss.nKeys++;\n+            ssValue >> pkey;\n+            ssValue >> hash;\n+\n+            // hash pubkey/privkey to accelerate wallet load\n+            std::vector<unsigned char> to_hash;\n+            to_hash.reserve(pubkey.size() + pkey.size());\n+            to_hash.insert(to_hash.end(), pubkey.begin(), pubkey.end());\n+            to_hash.insert(to_hash.end(), pkey.begin(), pkey.end());\n+\n+            if (Hash(to_hash.begin(), to_hash.end()) != hash)\n+            {\n+                strErr = \"Error reading wallet database: CPubKey/CPrivKey corrupt\";\n+                return false;\n+            }\n+\n+            if (!key.Load(pkey, pubkey, true))\n+            {\n+                strErr = \"Error reading wallet database: CPrivKey corrupt\";\n+                return false;\n+            }\n+            wss.m_descriptor_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), key));\n+        } else if (strType == DBKeys::WALLETDESCRIPTORCKEY) {\n+            uint256 desc_id;\n+            CPubKey pubkey;\n+            ssKey >> desc_id;\n+            ssKey >> pubkey;\n+            if (!pubkey.IsValid())\n+            {\n+                strErr = \"Error reading wallet database: CPubKey corrupt\";\n+                return false;\n+            }\n+            std::vector<unsigned char> privkey;\n+            ssValue >> privkey;\n+            wss.nCKeys++;\n+\n+            wss.m_descriptor_crypt_keys.insert(std::make_pair(std::make_pair(desc_id, pubkey.GetID()), std::make_pair(pubkey, privkey)));\n+            wss.fIsEncrypted = true;\n         } else if (strType != DBKeys::BESTBLOCK && strType != DBKeys::BESTBLOCK_NOMERKLE &&\n                    strType != DBKeys::MINVERSION && strType != DBKeys::ACENTRY &&\n                    strType != DBKeys::VERSION && strType != DBKeys::SETTINGS) {\n@@ -575,6 +631,16 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         ((DescriptorScriptPubKeyMan*)spk_man)->SetCache(desc_cache_pair.second);\n     }\n \n+    // Set the descriptor keys\n+    for (auto desc_key_pair : wss.m_descriptor_keys) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->AddKey(desc_key_pair.first.second, desc_key_pair.second);\n+    }\n+    for (auto desc_key_pair : wss.m_descriptor_crypt_keys) {\n+        auto spk_man = pwallet->GetScriptPubKeyMan(desc_key_pair.first.first);\n+        ((DescriptorScriptPubKeyMan*)spk_man)->AddCryptedKey(desc_key_pair.first.second, desc_key_pair.second.first, desc_key_pair.second.second);\n+    }\n+\n     if (fNoncriticalErrors && result == DBErrors::LOAD_OK)\n         result = DBErrors::NONCRITICAL_ERROR;\n "
      }
    ]
  },
  {
    "sha": "d1ec3e4f19487b4b100f80ad02eac063c571777d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMWVjM2U0ZjE5NDg3YjRiMTAwZjgwYWQwMmVhYzA2M2M1NzE3Nzdk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T21:21:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Add IsSingleType to Descriptors\n\nIsSingleType will return whether the descriptor will give one or multiple scriptPubKeys",
      "tree": {
        "sha": "aa12af29a1c3534c8cdadaa95407373b7428461f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aa12af29a1c3534c8cdadaa95407373b7428461f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1ec3e4f19487b4b100f80ad02eac063c571777d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "953feb3d2724f5398dd48990c4957a19313d2c8c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/953feb3d2724f5398dd48990c4957a19313d2c8c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/953feb3d2724f5398dd48990c4957a19313d2c8c"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 12,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5279f405060fc45d5987203f9c4a33571b00d903",
        "filename": "src/script/descriptor.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1ec3e4f19487b4b100f80ad02eac063c571777d/src/script/descriptor.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1ec3e4f19487b4b100f80ad02eac063c571777d/src/script/descriptor.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.cpp?ref=d1ec3e4f19487b4b100f80ad02eac063c571777d",
        "patch": "@@ -575,6 +575,7 @@ class AddressDescriptor final : public DescriptorImpl\n             default: return nullopt;\n         }\n     }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed raw(H) descriptor. */\n@@ -602,6 +603,7 @@ class RawDescriptor final : public DescriptorImpl\n             default: return nullopt;\n         }\n     }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pk(P) descriptor. */\n@@ -611,6 +613,7 @@ class PKDescriptor final : public DescriptorImpl\n     std::vector<CScript> MakeScripts(const std::vector<CPubKey>& keys, const CScript*, FlatSigningProvider&) const override { return Vector(GetScriptForRawPubKey(keys[0])); }\n public:\n     PKDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pk\") {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed pkh(P) descriptor. */\n@@ -626,6 +629,7 @@ class PKHDescriptor final : public DescriptorImpl\n public:\n     PKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"pkh\") {}\n     Optional<OutputType> GetOutputType() const override { return OutputType::LEGACY; }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed wpkh(P) descriptor. */\n@@ -641,6 +645,7 @@ class WPKHDescriptor final : public DescriptorImpl\n public:\n     WPKHDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"wpkh\") {}\n     Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed combo(P) descriptor. */\n@@ -664,6 +669,7 @@ class ComboDescriptor final : public DescriptorImpl\n     }\n public:\n     ComboDescriptor(std::unique_ptr<PubkeyProvider> prov) : DescriptorImpl(Vector(std::move(prov)), {}, \"combo\") {}\n+    bool IsSingleType() const final { return false; }\n };\n \n /** A parsed multi(...) or sortedmulti(...) descriptor */\n@@ -683,6 +689,7 @@ class MultisigDescriptor final : public DescriptorImpl\n     }\n public:\n     MultisigDescriptor(int threshold, std::vector<std::unique_ptr<PubkeyProvider>> providers, bool sorted = false) : DescriptorImpl(std::move(providers), {}, sorted ? \"sortedmulti\" : \"multi\"), m_threshold(threshold), m_sorted(sorted) {}\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed sh(...) descriptor. */\n@@ -699,6 +706,7 @@ class SHDescriptor final : public DescriptorImpl\n         if (m_subdescriptor_arg->GetOutputType() == OutputType::BECH32) return OutputType::P2SH_SEGWIT;\n         return OutputType::LEGACY;\n     }\n+    bool IsSingleType() const final { return true; }\n };\n \n /** A parsed wsh(...) descriptor. */\n@@ -709,6 +717,7 @@ class WSHDescriptor final : public DescriptorImpl\n public:\n     WSHDescriptor(std::unique_ptr<DescriptorImpl> desc) : DescriptorImpl({}, std::move(desc), \"wsh\") {}\n     Optional<OutputType> GetOutputType() const override { return OutputType::BECH32; }\n+    bool IsSingleType() const final { return true; }\n };\n \n ////////////////////////////////////////////////////////////////////////////"
      },
      {
        "sha": "17b43e7c81785e49275cdf7a4581cd8106f5c67a",
        "filename": "src/script/descriptor.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1ec3e4f19487b4b100f80ad02eac063c571777d/src/script/descriptor.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1ec3e4f19487b4b100f80ad02eac063c571777d/src/script/descriptor.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/descriptor.h?ref=d1ec3e4f19487b4b100f80ad02eac063c571777d",
        "patch": "@@ -87,6 +87,9 @@ struct Descriptor {\n     /** Convert the descriptor back to a string, undoing parsing. */\n     virtual std::string ToString() const = 0;\n \n+    /** Whether this descriptor will return one scriptPubKey or multiple (aka is or is not combo) */\n+    virtual bool IsSingleType() const = 0;\n+\n     /** Convert the descriptor to a private string. This fails if the provided provider does not have the relevant private keys. */\n     virtual bool ToPrivateString(const SigningProvider& provider, std::string& out) const = 0;\n "
      }
    ]
  },
  {
    "sha": "4cb9b69be031e1dc65d8964794781b347fd948f5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0Y2I5YjY5YmUwMzFlMWRjNjVkODk2NDc5NDc4MWIzNDdmZDk0OGY1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-09T23:34:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement several simple functions in DescriptorScriptPubKeyMan\n\nImplements a bunch of one liners: UpgradeKeyMetadata, IsFirstRun, HavePrivateKeys,\nKeypoolCountExternalKeys, GetKeypoolSize, GetTimeFirstKey, CanGetAddresses,\nRewriteDB",
      "tree": {
        "sha": "d8d3eef84d7e236aa175892e8e357f2436432ed9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d8d3eef84d7e236aa175892e8e357f2436432ed9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4cb9b69be031e1dc65d8964794781b347fd948f5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cb9b69be031e1dc65d8964794781b347fd948f5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4cb9b69be031e1dc65d8964794781b347fd948f5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cb9b69be031e1dc65d8964794781b347fd948f5/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1ec3e4f19487b4b100f80ad02eac063c571777d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1ec3e4f19487b4b100f80ad02eac063c571777d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1ec3e4f19487b4b100f80ad02eac063c571777d"
      }
    ],
    "stats": {
      "total": 21,
      "additions": 16,
      "deletions": 5
    },
    "files": [
      {
        "sha": "fbba42f50d9903f87085592ff80f1068084c4719",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 5,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4cb9b69be031e1dc65d8964794781b347fd948f5/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4cb9b69be031e1dc65d8964794781b347fd948f5/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=4cb9b69be031e1dc65d8964794781b347fd948f5",
        "patch": "@@ -1561,12 +1561,18 @@ bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n \n bool DescriptorScriptPubKeyMan::CanGetAddresses(bool internal) const\n {\n-    return false;\n+    // We can only give out addresses from descriptors that are single type (not combo), ranged,\n+    // and either have cached keys or can generate more keys (ignoring encryption)\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor->IsSingleType() &&\n+           m_wallet_descriptor.descriptor->IsRange() &&\n+           (HavePrivateKeys() || m_wallet_descriptor.next_index < m_wallet_descriptor.range_end);\n }\n \n bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    return m_map_keys.size() > 0 || m_map_crypted_keys.size() > 0;\n }\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n@@ -1576,17 +1582,22 @@ int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n \n size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const\n {\n-    return 0;\n+    if (m_internal) {\n+        return 0;\n+    }\n+    return GetKeyPoolSize();\n }\n \n unsigned int DescriptorScriptPubKeyMan::GetKeyPoolSize() const\n {\n-    return 0;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.range_end - m_wallet_descriptor.next_index;\n }\n \n int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n {\n-    return 0;\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.creation_time;\n }\n \n std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const"
      }
    ]
  },
  {
    "sha": "46dfb99768e7d03a3cf552812d5b41ceaebc06be",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NmRmYjk5NzY4ZTdkMDNhM2NmNTUyODEyZDViNDFjZWFlYmMwNmJl",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:02:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement writing descriptorkeys, descriptorckeys, and descriptors to wallet file",
      "tree": {
        "sha": "8d0eabe1d57db6680ed436df27d43ebadfeda365",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8d0eabe1d57db6680ed436df27d43ebadfeda365"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4cb9b69be031e1dc65d8964794781b347fd948f5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4cb9b69be031e1dc65d8964794781b347fd948f5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4cb9b69be031e1dc65d8964794781b347fd948f5"
      }
    ],
    "stats": {
      "total": 56,
      "additions": 56,
      "deletions": 0
    },
    "files": [
      {
        "sha": "76beafa7e118a1aa602b8e38d8fef3dec45a2d67",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 24,
        "deletions": 0,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "patch": "@@ -1553,6 +1553,30 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n+{\n+    AssertLockHeld(cs_desc_man);\n+    assert(!m_storage.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS));\n+\n+    if (m_storage.HasEncryptionKeys()) {\n+        if (m_storage.IsLocked()) {\n+            return false;\n+        }\n+\n+        std::vector<unsigned char> crypted_secret;\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        if (!EncryptSecret(m_storage.GetEncryptionKey(), secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        return batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    } else {\n+        m_map_keys[pubkey.GetID()] = key;\n+        return batch.WriteDescriptorKey(GetID(), pubkey, key.GetPrivKey());\n+    }\n+}\n+\n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "adbd2072783aea379bf35c06a71fed2b75c5c3e8",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "patch": "@@ -503,6 +503,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     //! keeps track of whether Unlock has run a thorough check before\n     bool m_decryption_thoroughly_checked = false;\n+\n+    bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),"
      },
      {
        "sha": "83b77646d3d668ce953e3d18be3c6b5726810878",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "patch": "@@ -191,6 +191,31 @@ bool WalletBatch::WriteActiveScriptPubKeyMan(uint8_t type, const uint256& id, bo\n     return WriteIC(make_pair(key, type), id);\n }\n \n+bool WalletBatch::WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey)\n+{\n+    // hash pubkey/privkey to accelerate wallet load\n+    std::vector<unsigned char> key;\n+    key.reserve(pubkey.size() + privkey.size());\n+    key.insert(key.end(), pubkey.begin(), pubkey.end());\n+    key.insert(key.end(), privkey.begin(), privkey.end());\n+\n+    return WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)), std::make_pair(privkey, Hash(key.begin(), key.end())), false);\n+}\n+\n+bool WalletBatch::WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret)\n+{\n+    if (!WriteIC(std::make_pair(DBKeys::WALLETDESCRIPTORCKEY, std::make_pair(desc_id, pubkey)), secret, false)) {\n+        return false;\n+    }\n+    EraseIC(std::make_pair(DBKeys::WALLETDESCRIPTORKEY, std::make_pair(desc_id, pubkey)));\n+    return true;\n+}\n+\n+bool WalletBatch::WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor)\n+{\n+    return WriteIC(make_pair(DBKeys::WALLETDESCRIPTOR, desc_id), descriptor);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "df41897216e935c173e27d4341e607b70ccfa982",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/46dfb99768e7d03a3cf552812d5b41ceaebc06be/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "patch": "@@ -9,6 +9,7 @@\n #include <amount.h>\n #include <script/sign.h>\n #include <wallet/db.h>\n+#include <wallet/walletutil.h>\n #include <key.h>\n \n #include <stdint.h>\n@@ -245,6 +246,10 @@ class WalletBatch\n \n     bool WriteMinVersion(int nVersion);\n \n+    bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n+    bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n+    bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+\n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);\n     /// Erase destination data tuple from wallet database"
      }
    ]
  },
  {
    "sha": "e014886a342508f7c8d80323eee9a5f314eaf94c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMDE0ODg2YTM0MjUwOGY3YzhkODAzMjNlZWU5YTVmMzE0ZWFmOTRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:03:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement SetupGeneration for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "ebdd39e5cabd2f4ac0daee2b29d44b6393bb3402",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ebdd39e5cabd2f4ac0daee2b29d44b6393bb3402"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e014886a342508f7c8d80323eee9a5f314eaf94c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e014886a342508f7c8d80323eee9a5f314eaf94c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e014886a342508f7c8d80323eee9a5f314eaf94c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e014886a342508f7c8d80323eee9a5f314eaf94c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/46dfb99768e7d03a3cf552812d5b41ceaebc06be",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/46dfb99768e7d03a3cf552812d5b41ceaebc06be"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 70,
      "deletions": 0
    },
    "files": [
      {
        "sha": "91637803ef8f5f56260aa40873361255dac2339b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 67,
        "deletions": 0,
        "changes": 67,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e014886a342508f7c8d80323eee9a5f314eaf94c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e014886a342508f7c8d80323eee9a5f314eaf94c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=e014886a342508f7c8d80323eee9a5f314eaf94c",
        "patch": "@@ -1577,6 +1577,73 @@ bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const\n     }\n }\n \n+bool DescriptorScriptPubKeyMan::SetupDescriptorGeneration(const CExtKey& master_key)\n+{\n+    LOCK(cs_desc_man);\n+    assert(m_storage.IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS));\n+\n+    // Ignore when there is already a descriptor\n+    if (m_wallet_descriptor.descriptor) {\n+        return false;\n+    }\n+\n+    int64_t creation_time = GetTime();\n+\n+    std::string xpub = EncodeExtPubKey(master_key.Neuter());\n+\n+    // Build descriptor string\n+    std::string desc_prefix;\n+    std::string desc_suffix = \"/*)\";\n+    switch (m_address_type) {\n+    case OutputType::LEGACY: {\n+        desc_prefix = \"pkh(\" + xpub + \"/44'\";\n+        break;\n+    }\n+    case OutputType::P2SH_SEGWIT: {\n+        desc_prefix = \"sh(wpkh(\" + xpub + \"/49'\";\n+        desc_suffix += \")\";\n+        break;\n+    }\n+    case OutputType::BECH32: {\n+        desc_prefix = \"wpkh(\" + xpub + \"/84'\";\n+        break;\n+    }\n+    default: assert(false);\n+    }\n+\n+    // Mainnet derives at 0', testnet and regtest derive at 1'\n+    if (Params().IsTestChain()) {\n+        desc_prefix += \"/1'\";\n+    } else {\n+        desc_prefix += \"/0'\";\n+    }\n+\n+    std::string internal_path = m_internal ? \"/1\" : \"/0\";\n+    std::string desc_str = desc_prefix + \"/0'\" + internal_path + desc_suffix;\n+\n+    // Make the descriptor\n+    FlatSigningProvider keys;\n+    std::string error;\n+    std::unique_ptr<Descriptor> desc = Parse(desc_str, keys, error, false);\n+    WalletDescriptor w_desc(std::move(desc), creation_time, 0, 0, 0);\n+    m_wallet_descriptor = w_desc;\n+\n+    // Store the master private key, and descriptor\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, master_key.key, master_key.key.GetPubKey())) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor master private key failed\");\n+    }\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+\n+    // TopUp\n+    TopUp();\n+\n+    m_storage.UnsetBlankWalletFlag(batch);\n+    return true;\n+}\n+\n bool DescriptorScriptPubKeyMan::IsHDEnabled() const\n {\n     LOCK(cs_desc_man);"
      },
      {
        "sha": "b0f0e8713ed5037aaa8f38d36e08df3ab3d6a169",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e014886a342508f7c8d80323eee9a5f314eaf94c/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e014886a342508f7c8d80323eee9a5f314eaf94c/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=e014886a342508f7c8d80323eee9a5f314eaf94c",
        "patch": "@@ -532,6 +532,9 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool IsHDEnabled() const override;\n \n+    //! Setup descriptors based on the given CExtkey\n+    bool SetupDescriptorGeneration(const CExtKey& master_key);\n+\n     bool HavePrivateKeys() const override;\n \n     int64_t GetOldestKeyPoolTime() const override;"
      }
    ]
  },
  {
    "sha": "58c7651821b0eeff0a99dc61d78d2e9e07986580",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OGM3NjUxODIxYjBlZWZmMGE5OWRjNjFkNzhkMmU5ZTA3OTg2NTgw",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T20:38:12Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement TopUp in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "623281d3496a9da9009b2bc796f29b36c82966c5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/623281d3496a9da9009b2bc796f29b36c82966c5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/58c7651821b0eeff0a99dc61d78d2e9e07986580",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e014886a342508f7c8d80323eee9a5f314eaf94c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e014886a342508f7c8d80323eee9a5f314eaf94c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e014886a342508f7c8d80323eee9a5f314eaf94c"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 120,
      "deletions": 1
    },
    "files": [
      {
        "sha": "261842b7f7f10835aa169a5da3e1491797ffd7f3",
        "filename": "src/pubkey.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/pubkey.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/pubkey.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/pubkey.h?ref=58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "patch": "@@ -219,6 +219,11 @@ struct CExtPubKey {\n             a.pubkey == b.pubkey;\n     }\n \n+    friend bool operator!=(const CExtPubKey &a, const CExtPubKey &b)\n+    {\n+        return !(a == b);\n+    }\n+\n     void Encode(unsigned char code[BIP32_EXTKEY_SIZE]) const;\n     void Decode(const unsigned char code[BIP32_EXTKEY_SIZE]);\n     bool Derive(CExtPubKey& out, unsigned int nChild) const;"
      },
      {
        "sha": "dea4d072ff122c470178e95865b3437160d524c3",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 92,
        "deletions": 1,
        "changes": 93,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "patch": "@@ -1533,9 +1533,99 @@ void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal,\n {\n }\n \n+std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    if (m_storage.HasEncryptionKeys() && !m_storage.IsLocked()) {\n+        KeyMap keys;\n+        for (auto key_pair : m_map_crypted_keys) {\n+            const CPubKey& pubkey = key_pair.second.first;\n+            const std::vector<unsigned char>& crypted_secret = key_pair.second.second;\n+            CKey key;\n+            DecryptKey(m_storage.GetEncryptionKey(), crypted_secret, pubkey, key);\n+            keys[pubkey.GetID()] = key;\n+        }\n+        return keys;\n+    }\n+    return m_map_keys;\n+}\n+\n bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    unsigned int target_size;\n+    if (size > 0) {\n+        target_size = size;\n+    } else {\n+        target_size = std::max(gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE), (int64_t) 1);\n+    }\n+\n+    // Calculate the new range_end\n+    int32_t new_range_end = std::max(m_wallet_descriptor.next_index + (int32_t)target_size, m_wallet_descriptor.range_end);\n+\n+    // If the descriptor is not ranged, we actually just want to fill the first cache item\n+    if (!m_wallet_descriptor.descriptor->IsRange()) {\n+        new_range_end = 1;\n+        m_wallet_descriptor.range_end = 1;\n+        m_wallet_descriptor.range_start = 0;\n+    }\n+\n+    FlatSigningProvider provider;\n+    provider.keys = GetKeys();\n+\n+    WalletBatch batch(m_storage.GetDatabase());\n+    uint256 id = GetID();\n+    for (int32_t i = m_max_cached_index + 1; i < new_range_end; ++i) {\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        DescriptorCache temp_cache;\n+        // Maybe we have a cached xpub and we can expand from the cache first\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(i, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            if (!m_wallet_descriptor.descriptor->Expand(i, provider, scripts_temp, out_keys, &temp_cache)) return false;\n+        }\n+        // Add all of the scriptPubKeys to the scriptPubKey set\n+        for (const CScript& script : scripts_temp) {\n+            m_map_script_pub_keys[script] = i;\n+        }\n+        // Write the cache\n+        for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n+            CExtPubKey xpub;\n+            if (m_wallet_descriptor.cache.GetCachedParentExtPubKey(parent_xpub_pair.first, xpub)) {\n+                if (xpub != parent_xpub_pair.second) {\n+                    throw std::runtime_error(std::string(__func__) + \": New cached parent xpub does not match already cached parent xpub\");\n+                }\n+                continue;\n+            }\n+            if (!batch.WriteDescriptorParentCache(parent_xpub_pair.second, id, parent_xpub_pair.first)) {\n+                throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+            }\n+            m_wallet_descriptor.cache.CacheParentExtPubKey(parent_xpub_pair.first, parent_xpub_pair.second);\n+        }\n+        for (const auto& derived_xpub_map_pair : temp_cache.GetCachedDerivedExtPubKeys()) {\n+            for (const auto& derived_xpub_pair : derived_xpub_map_pair.second) {\n+                CExtPubKey xpub;\n+                if (m_wallet_descriptor.cache.GetCachedDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, xpub)) {\n+                    if (xpub != derived_xpub_pair.second) {\n+                        throw std::runtime_error(std::string(__func__) + \": New cached derived xpub does not match already cached derived xpub\");\n+                    }\n+                    continue;\n+                }\n+                if (!batch.WriteDescriptorDerivedCache(derived_xpub_pair.second, id, derived_xpub_map_pair.first, derived_xpub_pair.first)) {\n+                    throw std::runtime_error(std::string(__func__) + \": writing cache item failed\");\n+                }\n+                m_wallet_descriptor.cache.CacheDerivedExtPubKey(derived_xpub_map_pair.first, derived_xpub_pair.first, derived_xpub_pair.second);\n+            }\n+        }\n+        m_max_cached_index++;\n+    }\n+    m_wallet_descriptor.range_end = new_range_end;\n+    batch.WriteDescriptor(GetID(), m_wallet_descriptor);\n+\n+    // By this point, the cache size should be the size of the entire range\n+    assert(m_wallet_descriptor.range_end - 1 == m_max_cached_index);\n+\n+    NotifyCanGetAddressesChanged();\n+    return true;\n }\n \n void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n@@ -1753,6 +1843,7 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n             }\n             m_map_script_pub_keys[script] = i;\n         }\n+        m_max_cached_index++;\n     }\n }\n "
      },
      {
        "sha": "7522dce9c53711c2e98c4112062dbe89bbcff82e",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "patch": "@@ -492,6 +492,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     using KeyMap = std::map<CKeyID, CKey>;\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    int32_t m_max_cached_index = -1;\n \n     OutputType m_address_type;\n     bool m_internal;\n@@ -505,6 +506,8 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool m_decryption_thoroughly_checked = false;\n \n     bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n+\n+    KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),\n@@ -526,6 +529,10 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool) override;\n     void ReturnDestination(int64_t index, bool internal, const CTxDestination& addr) override;\n \n+    // Tops up the descriptor cache and m_map_script_pub_keys. The cache is stored in the wallet file\n+    // and is used to expand the descriptor in GetNewDestination. DescriptorScriptPubKeyMan relies\n+    // more on ephemeral data than LegacyScriptPubKeyMan. For wallets using unhardened derivation\n+    // (with or without private keys), the \"keypool\" is a single xpub.\n     bool TopUp(unsigned int size = 0) override;\n \n     void MarkUnusedAddresses(const CScript& script) override;"
      },
      {
        "sha": "548ae1a467b0d66ab523862911b1ad443903ba55",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "patch": "@@ -216,6 +216,20 @@ bool WalletBatch::WriteDescriptor(const uint256& desc_id, const WalletDescriptor\n     return WriteIC(make_pair(DBKeys::WALLETDESCRIPTOR, desc_id), descriptor);\n }\n \n+bool WalletBatch::WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index)\n+{\n+    std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+    xpub.Encode(ser_xpub.data());\n+    return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), std::make_pair(key_exp_index, der_index)), ser_xpub);\n+}\n+\n+bool WalletBatch::WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index)\n+{\n+    std::vector<unsigned char> ser_xpub(BIP32_EXTKEY_SIZE);\n+    xpub.Encode(ser_xpub.data());\n+    return WriteIC(std::make_pair(std::make_pair(DBKeys::WALLETDESCRIPTORCACHE, desc_id), key_exp_index), ser_xpub);\n+}\n+\n class CWalletScanState {\n public:\n     unsigned int nKeys{0};"
      },
      {
        "sha": "2701481c589b98c8864cb52f0593f8af2ad24488",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/58c7651821b0eeff0a99dc61d78d2e9e07986580/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "patch": "@@ -249,6 +249,8 @@ class WalletBatch\n     bool WriteDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const CPrivKey& privkey);\n     bool WriteCryptedDescriptorKey(const uint256& desc_id, const CPubKey& pubkey, const std::vector<unsigned char>& secret);\n     bool WriteDescriptor(const uint256& desc_id, const WalletDescriptor& descriptor);\n+    bool WriteDescriptorDerivedCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index, uint32_t der_index);\n+    bool WriteDescriptorParentCache(const CExtPubKey& xpub, const uint256& desc_id, uint32_t key_exp_index);\n \n     /// Write destination data key,value tuple to database\n     bool WriteDestData(const std::string &address, const std::string &key, const std::string &value);"
      }
    ]
  },
  {
    "sha": "bfdd0734869a22217c15858d7a76d0dacc2ebc86",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmRkMDczNDg2OWEyMjIxN2MxNTg1OGQ3YTc2ZDBkYWNjMmViYzg2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-10T22:01:40Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetNewDestination for DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "51ea29710df578bbb9078a595b4d3e83bd0b6f98",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/51ea29710df578bbb9078a595b4d3e83bd0b6f98"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/58c7651821b0eeff0a99dc61d78d2e9e07986580",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/58c7651821b0eeff0a99dc61d78d2e9e07986580"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 38,
      "deletions": 1
    },
    "files": [
      {
        "sha": "564fff2f6e32bd9d6971cf3358a20698ebbef28f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 38,
        "deletions": 1,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfdd0734869a22217c15858d7a76d0dacc2ebc86/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfdd0734869a22217c15858d7a76d0dacc2ebc86/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bfdd0734869a22217c15858d7a76d0dacc2ebc86",
        "patch": "@@ -1502,7 +1502,44 @@ void LegacyScriptPubKeyMan::SetType(OutputType type, bool internal) {}\n \n bool DescriptorScriptPubKeyMan::GetNewDestination(const OutputType type, CTxDestination& dest, std::string& error)\n {\n-    return false;\n+    // Returns true if this descriptor supports getting new addresses. Conditions where we may be unable to fetch them (e.g. locked) are caught later\n+    if (!CanGetAddresses(m_internal)) {\n+        error = \"No addresses available\";\n+        return false;\n+    }\n+    {\n+        LOCK(cs_desc_man);\n+        assert(m_wallet_descriptor.descriptor->IsSingleType()); // This is a combo descriptor which should not be an active descriptor\n+        if (type != m_address_type) {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent\");\n+        }\n+\n+        TopUp();\n+\n+        // Get the scriptPubKey from the descriptor\n+        FlatSigningProvider out_keys;\n+        std::vector<CScript> scripts_temp;\n+        if (m_wallet_descriptor.range_end <= m_max_cached_index && !TopUp(1)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+        if (!m_wallet_descriptor.descriptor->ExpandFromCache(m_wallet_descriptor.next_index, m_wallet_descriptor.cache, scripts_temp, out_keys)) {\n+            // We can't generate anymore keys\n+            error = \"Error: Keypool ran out, please call keypoolrefill first\";\n+            return false;\n+        }\n+\n+        Optional<OutputType> out_script_type = m_wallet_descriptor.descriptor->GetOutputType();\n+        if (out_script_type && out_script_type == type) {\n+            ExtractDestination(scripts_temp[0], dest);\n+        } else {\n+            throw std::runtime_error(std::string(__func__) + \": Types are inconsistent. Stored type does not match type of newly generated address\");\n+        }\n+        m_wallet_descriptor.next_index++;\n+        WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+        return true;\n+    }\n }\n \n isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const"
      }
    ]
  },
  {
    "sha": "a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphNzc1ZjdjN2ZkMGI5MDk0ZmNiZWVlNmJhOTIyMDZkNWJiYjE5MTY0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:32:05Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement Unlock and Encrypt in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "947a0a55eed888f71ad7c8ed21ea247e60609907",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/947a0a55eed888f71ad7c8ed21ea247e60609907"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bfdd0734869a22217c15858d7a76d0dacc2ebc86",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfdd0734869a22217c15858d7a76d0dacc2ebc86",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bfdd0734869a22217c15858d7a76d0dacc2ebc86"
      }
    ],
    "stats": {
      "total": 49,
      "additions": 47,
      "deletions": 2
    },
    "files": [
      {
        "sha": "8effb67abdfa31e1de8ee594fc0cec7a799c2156",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 2,
        "changes": 49,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
        "patch": "@@ -1553,12 +1553,57 @@ isminetype DescriptorScriptPubKeyMan::IsMine(const CScript& script) const\n \n bool DescriptorScriptPubKeyMan::CheckDecryptionKey(const CKeyingMaterial& master_key, bool accept_no_keys)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    if (!m_map_keys.empty()) {\n+        return false;\n+    }\n+\n+    bool keyPass = m_map_crypted_keys.empty(); // Always pass when there are no encrypted keys\n+    bool keyFail = false;\n+    for (const auto& mi : m_map_crypted_keys) {\n+        const CPubKey &pubkey = mi.second.first;\n+        const std::vector<unsigned char> &crypted_secret = mi.second.second;\n+        CKey key;\n+        if (!DecryptKey(master_key, crypted_secret, pubkey, key)) {\n+            keyFail = true;\n+            break;\n+        }\n+        keyPass = true;\n+        if (m_decryption_thoroughly_checked)\n+            break;\n+    }\n+    if (keyPass && keyFail) {\n+        LogPrintf(\"The wallet is probably corrupted: Some keys decrypt but not all.\\n\");\n+        throw std::runtime_error(\"Error unlocking wallet: some keys decrypt but not all. Your wallet file may be corrupt.\");\n+    }\n+    if (keyFail || (!keyPass && !accept_no_keys)) {\n+        return false;\n+    }\n+    m_decryption_thoroughly_checked = true;\n+    return true;\n }\n \n bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, WalletBatch* batch)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    if (!m_map_crypted_keys.empty()) {\n+        return false;\n+    }\n+\n+    for (const KeyMap::value_type& key_in : m_map_keys)\n+    {\n+        const CKey &key = key_in.second;\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyingMaterial secret(key.begin(), key.end());\n+        std::vector<unsigned char> crypted_secret;\n+        if (!EncryptSecret(master_key, secret, pubkey.GetHash(), crypted_secret)) {\n+            return false;\n+        }\n+        m_map_crypted_keys[pubkey.GetID()] = make_pair(pubkey, crypted_secret);\n+        batch->WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);\n+    }\n+    m_map_keys.clear();\n+    return true;\n }\n \n bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)"
      }
    ]
  },
  {
    "sha": "f866957979c23cefd41efa9dae9e53b9177818dc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmODY2OTU3OTc5YzIzY2VmZDQxZWZhOWRhZTllNTNiOTE3NzgxOGRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T19:54:07Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetReservedDestination in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "d217aa492eefc231c82549e13b1d3fff0c4599eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d217aa492eefc231c82549e13b1d3fff0c4599eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f866957979c23cefd41efa9dae9e53b9177818dc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f866957979c23cefd41efa9dae9e53b9177818dc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f866957979c23cefd41efa9dae9e53b9177818dc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f866957979c23cefd41efa9dae9e53b9177818dc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a775f7c7fd0b9094fcbeee6ba92206d5bbb19164"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 5,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c9f2e38ae161d14e9ac0f4d83e9d0b430bafbf1c",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f866957979c23cefd41efa9dae9e53b9177818dc/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f866957979c23cefd41efa9dae9e53b9177818dc/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=f866957979c23cefd41efa9dae9e53b9177818dc",
        "patch": "@@ -1608,7 +1608,11 @@ bool DescriptorScriptPubKeyMan::Encrypt(const CKeyingMaterial& master_key, Walle\n \n bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bool internal, CTxDestination& address, int64_t& index, CKeyPool& keypool)\n {\n-    return false;\n+    LOCK(cs_desc_man);\n+    std::string error;\n+    bool result = GetNewDestination(type, address, error);\n+    index = m_wallet_descriptor.next_index - 1;\n+    return result;\n }\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)"
      }
    ]
  },
  {
    "sha": "586b57a9a6b4b12a78f792785b63a5a1743bce0c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ODZiNTdhOWE2YjRiMTJhNzhmNzkyNzg1YjYzYTVhMTc0M2JjZTBj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T18:44:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement ReturnDestination in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "9f739a60610a81ffd2093c0f23f59119396103c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9f739a60610a81ffd2093c0f23f59119396103c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f866957979c23cefd41efa9dae9e53b9177818dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f866957979c23cefd41efa9dae9e53b9177818dc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f866957979c23cefd41efa9dae9e53b9177818dc"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 7,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c0d48c224264e477cc1116794bb2a1a2498ff63f",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/586b57a9a6b4b12a78f792785b63a5a1743bce0c/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/586b57a9a6b4b12a78f792785b63a5a1743bce0c/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=586b57a9a6b4b12a78f792785b63a5a1743bce0c",
        "patch": "@@ -1617,6 +1617,13 @@ bool DescriptorScriptPubKeyMan::GetReservedDestination(const OutputType type, bo\n \n void DescriptorScriptPubKeyMan::ReturnDestination(int64_t index, bool internal, const CTxDestination& addr)\n {\n+    LOCK(cs_desc_man);\n+    // Only return when the index was the most recent\n+    if (m_wallet_descriptor.next_index - 1 == index) {\n+        m_wallet_descriptor.next_index--;\n+    }\n+    WalletBatch(m_storage.GetDatabase()).WriteDescriptor(GetID(), m_wallet_descriptor);\n+    NotifyCanGetAddressesChanged();\n }\n \n std::map<CKeyID, CKey> DescriptorScriptPubKeyMan::GetKeys() const"
      }
    ]
  },
  {
    "sha": "f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMWNhNWZlYjRhZDY2OGEzZTFhZTU0M2QwYWRkZDVmNDgzZjFhODhm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:14:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetKeypoolOldestTime and only display it if greater than 0",
      "tree": {
        "sha": "4d2ec3da6f88bb8111a1ba1290955fa57eb69d27",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4d2ec3da6f88bb8111a1ba1290955fa57eb69d27"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "586b57a9a6b4b12a78f792785b63a5a1743bce0c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/586b57a9a6b4b12a78f792785b63a5a1743bce0c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/586b57a9a6b4b12a78f792785b63a5a1743bce0c"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 8,
      "deletions": 3
    },
    "files": [
      {
        "sha": "4c9c13084a60a1b75cdcc74b0da1578fdbcc0699",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
        "patch": "@@ -2439,7 +2439,7 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n                         {RPCResult::Type::STR_AMOUNT, \"unconfirmed_balance\", \"DEPRECATED. Identical to getbalances().mine.untrusted_pending\"},\n                         {RPCResult::Type::STR_AMOUNT, \"immature_balance\", \"DEPRECATED. Identical to getbalances().mine.immature\"},\n                         {RPCResult::Type::NUM, \"txcount\", \"the total number of transactions in the wallet\"},\n-                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool\"},\n+                        {RPCResult::Type::NUM_TIME, \"keypoololdest\", \"the \" + UNIX_EPOCH_TIME + \" of the oldest pre-generated key in the key pool. Legacy wallets only.\"},\n                         {RPCResult::Type::NUM, \"keypoolsize\", \"how many new keys are pre-generated (only counts external keys)\"},\n                         {RPCResult::Type::NUM, \"keypoolsize_hd_internal\", \"how many new keys are pre-generated for internal use (used for change outputs, only appears if the wallet is using this feature, otherwise external keys are used)\"},\n                         {RPCResult::Type::NUM_TIME, \"unlocked_until\", \"the \" + UNIX_EPOCH_TIME + \" until which the wallet is unlocked for transfers, or 0 if the wallet is locked\"},\n@@ -2472,13 +2472,16 @@ static UniValue getwalletinfo(const JSONRPCRequest& request)\n \n     size_t kpExternalSize = pwallet->KeypoolCountExternalKeys();\n     const auto bal = pwallet->GetBalance();\n+    int64_t kp_oldest = pwallet->GetOldestKeyPoolTime();\n     obj.pushKV(\"walletname\", pwallet->GetName());\n     obj.pushKV(\"walletversion\", pwallet->GetVersion());\n     obj.pushKV(\"balance\", ValueFromAmount(bal.m_mine_trusted));\n     obj.pushKV(\"unconfirmed_balance\", ValueFromAmount(bal.m_mine_untrusted_pending));\n     obj.pushKV(\"immature_balance\", ValueFromAmount(bal.m_mine_immature));\n     obj.pushKV(\"txcount\",       (int)pwallet->mapWallet.size());\n-    obj.pushKV(\"keypoololdest\", pwallet->GetOldestKeyPoolTime());\n+    if (kp_oldest > 0) {\n+        obj.pushKV(\"keypoololdest\", kp_oldest);\n+    }\n     obj.pushKV(\"keypoolsize\", (int64_t)kpExternalSize);\n \n     LegacyScriptPubKeyMan* spk_man = pwallet->GetLegacyScriptPubKeyMan();"
      },
      {
        "sha": "cf2882ed6144a17f14ec99c55e58d6e75c72d3e5",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
        "patch": "@@ -1851,7 +1851,9 @@ bool DescriptorScriptPubKeyMan::HavePrivateKeys() const\n \n int64_t DescriptorScriptPubKeyMan::GetOldestKeyPoolTime() const\n {\n-    return GetTime();\n+    // This is only used for getwalletinfo output and isn't relevant to descriptor wallets.\n+    // The magic number 0 indicates that it shouldn't be displayed so that's what we return.\n+    return 0;\n }\n \n size_t DescriptorScriptPubKeyMan::KeypoolCountExternalKeys() const"
      }
    ]
  },
  {
    "sha": "d50c8ddd4190f20bf0debd410348b73408ec3143",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNTBjOGRkZDQxOTBmMjBiZjBkZWJkNDEwMzQ4YjczNDA4ZWMzMTQz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T20:41:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetSolvingProvider for DescriptorScriptPubKeyMan\n\nInternally, a GetSigningProvider function is introduced which allows for\nsome private keys to be optionally included. This can be called with a\nscript as the argument (i.e. a scriptPubKey from our wallet when we are\nsigning) or with a pubkey. In order to know what index to expand the\nprivate keys for that pubkey, we need to also cache all of the pubkeys\ninvolved when we expand the descriptor. So SetCache and TopUp are\nupdated to do this too.",
      "tree": {
        "sha": "a97870c738a5022c493119208dc7c2c51c1dcfc8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a97870c738a5022c493119208dc7c2c51c1dcfc8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d50c8ddd4190f20bf0debd410348b73408ec3143",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50c8ddd4190f20bf0debd410348b73408ec3143",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d50c8ddd4190f20bf0debd410348b73408ec3143",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50c8ddd4190f20bf0debd410348b73408ec3143/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f1ca5feb4ad668a3e1ae543d0addd5f483f1a88f"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 75,
      "deletions": 1
    },
    "files": [
      {
        "sha": "67063ad23c3927ad5ff4af817e3839263a64c0a4",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 65,
        "deletions": 1,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d50c8ddd4190f20bf0debd410348b73408ec3143/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d50c8ddd4190f20bf0debd410348b73408ec3143/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=d50c8ddd4190f20bf0debd410348b73408ec3143",
        "patch": "@@ -1680,6 +1680,15 @@ bool DescriptorScriptPubKeyMan::TopUp(unsigned int size)\n         for (const CScript& script : scripts_temp) {\n             m_map_script_pub_keys[script] = i;\n         }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n         // Write the cache\n         for (const auto& parent_xpub_pair : temp_cache.GetCachedParentExtPubKeys()) {\n             CExtPubKey xpub;\n@@ -1876,9 +1885,55 @@ int64_t DescriptorScriptPubKeyMan::GetTimeFirstKey() const\n     return m_wallet_descriptor.creation_time;\n }\n \n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CScript& script, bool include_private) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find the index of the script\n+    auto it = m_map_script_pub_keys.find(script);\n+    if (it == m_map_script_pub_keys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    return GetSigningProvider(index, include_private);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(const CPubKey& pubkey) const\n+{\n+    LOCK(cs_desc_man);\n+\n+    // Find index of the pubkey\n+    auto it = m_map_pubkeys.find(pubkey);\n+    if (it == m_map_pubkeys.end()) {\n+        return nullptr;\n+    }\n+    int32_t index = it->second;\n+\n+    // Always try to get the signing provider with private keys. This function should only be called during signing anyways\n+    return GetSigningProvider(index, true);\n+}\n+\n+std::unique_ptr<FlatSigningProvider> DescriptorScriptPubKeyMan::GetSigningProvider(int32_t index, bool include_private) const\n+{\n+    AssertLockHeld(cs_desc_man);\n+    // Get the scripts, keys, and key origins for this script\n+    std::unique_ptr<FlatSigningProvider> out_keys = MakeUnique<FlatSigningProvider>();\n+    std::vector<CScript> scripts_temp;\n+    if (!m_wallet_descriptor.descriptor->ExpandFromCache(index, m_wallet_descriptor.cache, scripts_temp, *out_keys)) return nullptr;\n+\n+    if (HavePrivateKeys() && include_private) {\n+        FlatSigningProvider master_provider;\n+        master_provider.keys = GetKeys();\n+        m_wallet_descriptor.descriptor->ExpandPrivate(index, master_provider, *out_keys);\n+    }\n+\n+    return out_keys;\n+}\n+\n std::unique_ptr<SigningProvider> DescriptorScriptPubKeyMan::GetSolvingProvider(const CScript& script) const\n {\n-    return nullptr;\n+    return GetSigningProvider(script, false);\n }\n \n bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData& sigdata)\n@@ -1938,6 +1993,15 @@ void DescriptorScriptPubKeyMan::SetCache(const DescriptorCache& cache)\n             }\n             m_map_script_pub_keys[script] = i;\n         }\n+        for (const auto& pk_pair : out_keys.pubkeys) {\n+            const CPubKey& pubkey = pk_pair.second;\n+            if (m_map_pubkeys.count(pubkey) != 0) {\n+                // We don't need to give an error here.\n+                // It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key\n+                continue;\n+            }\n+            m_map_pubkeys[pubkey] = i;\n+        }\n         m_max_cached_index++;\n     }\n }"
      },
      {
        "sha": "0932957419cd81ee553f41d52c3b97cf0a5571bc",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d50c8ddd4190f20bf0debd410348b73408ec3143/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d50c8ddd4190f20bf0debd410348b73408ec3143/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=d50c8ddd4190f20bf0debd410348b73408ec3143",
        "patch": "@@ -488,10 +488,12 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     WalletDescriptor m_wallet_descriptor GUARDED_BY(cs_desc_man);\n \n     using ScriptPubKeyMap = std::map<CScript, int32_t>; // Map of scripts to descriptor range index\n+    using PubKeyMap = std::map<CPubKey, int32_t>; // Map of pubkeys involved in scripts to descriptor range index\n     using CryptedKeyMap = std::map<CKeyID, std::pair<CPubKey, std::vector<unsigned char>>>;\n     using KeyMap = std::map<CKeyID, CKey>;\n \n     ScriptPubKeyMap m_map_script_pub_keys GUARDED_BY(cs_desc_man);\n+    PubKeyMap m_map_pubkeys GUARDED_BY(cs_desc_man);\n     int32_t m_max_cached_index = -1;\n \n     OutputType m_address_type;\n@@ -508,6 +510,14 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n     bool AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey);\n \n     KeyMap GetKeys() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+\n+    // Fetch the SigningProvider for the given script and optionally include private keys\n+    std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CScript& script, bool include_private = false) const;\n+    // Fetch the SigningProvider for the given pubkey and always include private keys. This should only be called by signing code.\n+    std::unique_ptr<FlatSigningProvider> GetSigningProvider(const CPubKey& pubkey) const;\n+    // Fetch the SigningProvider for a given index and optionally include private keys. Called by the above functions.\n+    std::unique_ptr<FlatSigningProvider> GetSigningProvider(int32_t index, bool include_private = false) const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+\n public:\n     DescriptorScriptPubKeyMan(WalletStorage& storage, WalletDescriptor& descriptor)\n         :   ScriptPubKeyMan(storage),"
      }
    ]
  },
  {
    "sha": "bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGU3YzlmYTM4Nzc1YTgxZDUzYWMwNDg0ZmE5Yzk4MDc2YTBjN2Qx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:10:25Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement SignTransaction in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "b17856967ae018b7c09bdcf83165db02b1898da7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b17856967ae018b7c09bdcf83165db02b1898da7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d50c8ddd4190f20bf0debd410348b73408ec3143",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d50c8ddd4190f20bf0debd410348b73408ec3143",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d50c8ddd4190f20bf0debd410348b73408ec3143"
      }
    ],
    "stats": {
      "total": 52,
      "additions": 22,
      "deletions": 30
    },
    "files": [
      {
        "sha": "1eb9dc4d7a26e573e9fae778a5c0666508ec012e",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 1,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
        "patch": "@@ -1943,7 +1943,16 @@ bool DescriptorScriptPubKeyMan::CanProvide(const CScript& script, SignatureData&\n \n bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n {\n-    return false;\n+    std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+    for (const auto& coin_pair : coins) {\n+        std::unique_ptr<FlatSigningProvider> coin_keys = GetSigningProvider(coin_pair.second.out.scriptPubKey, true);\n+        if (!coin_keys) {\n+            continue;\n+        }\n+        *keys = Merge(*keys, *coin_keys);\n+    }\n+\n+    return ::SignTransaction(tx, keys.get(), coins, sighash, input_errors);\n }\n \n SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const"
      },
      {
        "sha": "062162bdf79ce94ac01c71353459405d6fd96bcb",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 29,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
        "patch": "@@ -2428,11 +2428,17 @@ bool CWallet::SignTransaction(CMutableTransaction& tx) const\n \n bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint, Coin>& coins, int sighash, std::map<int, std::string>& input_errors) const\n {\n-    // Sign the tx with ScriptPubKeyMans\n-    // Because each ScriptPubKeyMan can sign more than one input, we need to keep track of each ScriptPubKeyMan that has signed this transaction.\n-    // Each iteration, we may sign more txins than the txin that is specified in that iteration.\n-    // We assume that each input is signed by only one ScriptPubKeyMan.\n-    std::set<uint256> visited_spk_mans;\n+    // Try to sign with all ScriptPubKeyMans\n+    for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n+        // spk_man->SignTransaction will return true if the transaction is complete,\n+        // so we can exit early and return true if that happens\n+        if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n+            return true;\n+        }\n+    }\n+\n+    // At this point, one input was not fully signed otherwise we would have exited already\n+    // Find that input and figure out what went wrong.\n     for (unsigned int i = 0; i < tx.vin.size(); i++) {\n         // Get the prevout\n         CTxIn& txin = tx.vin[i];\n@@ -2444,33 +2450,10 @@ bool CWallet::SignTransaction(CMutableTransaction& tx, const std::map<COutPoint,\n \n         // Check if this input is complete\n         SignatureData sigdata = DataFromTransaction(tx, i, coin->second.out);\n-        if (sigdata.complete) {\n-            continue;\n-        }\n-\n-        // Input needs to be signed, find the right ScriptPubKeyMan\n-        std::set<ScriptPubKeyMan*> spk_mans = GetScriptPubKeyMans(coin->second.out.scriptPubKey, sigdata);\n-        if (spk_mans.size() == 0) {\n+        if (!sigdata.complete) {\n             input_errors[i] = \"Unable to sign input, missing keys\";\n             continue;\n         }\n-\n-        for (auto& spk_man : spk_mans) {\n-            // If we've already been signed by this spk_man, skip it\n-            if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n-                continue;\n-            }\n-\n-            // Sign the tx.\n-            // spk_man->SignTransaction will return true if the transaction is complete,\n-            // so we can exit early and return true if that happens.\n-            if (spk_man->SignTransaction(tx, coins, sighash, input_errors)) {\n-                return true;\n-            }\n-\n-            // Add this spk_man to visited_spk_mans so we can skip it later\n-            visited_spk_mans.insert(spk_man->GetID());\n-        }\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "84b4978c02102171775c77a45f6ec198930f0a88",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGI0OTc4YzAyMTAyMTcxNzc1Yzc3YTQ1ZjZlYzE5ODkzMGYwYTg4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:36:44Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement SignMessage for descriptor wallets",
      "tree": {
        "sha": "d66ab622b0731029ca0d4c5b0395421a4d438291",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d66ab622b0731029ca0d4c5b0395421a4d438291"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84b4978c02102171775c77a45f6ec198930f0a88",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b4978c02102171775c77a45f6ec198930f0a88",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84b4978c02102171775c77a45f6ec198930f0a88",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b4978c02102171775c77a45f6ec198930f0a88/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bde7c9fa38775a81d53ac0484fa9c98076a0c7d1"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 15,
      "deletions": 1
    },
    "files": [
      {
        "sha": "b5272be83b916e648be56d3c035f19a53cf013c2",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 1,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84b4978c02102171775c77a45f6ec198930f0a88/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84b4978c02102171775c77a45f6ec198930f0a88/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=84b4978c02102171775c77a45f6ec198930f0a88",
        "patch": "@@ -1957,7 +1957,21 @@ bool DescriptorScriptPubKeyMan::SignTransaction(CMutableTransaction& tx, const s\n \n SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message, const PKHash& pkhash, std::string& str_sig) const\n {\n-    return SigningResult::SIGNING_FAILED;\n+    std::unique_ptr<FlatSigningProvider> keys = GetSigningProvider(GetScriptForDestination(pkhash), true);\n+    if (!keys) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    CKeyID key_id(pkhash);\n+    CKey key;\n+    if (!keys->GetKey(key_id, key)) {\n+        return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n+    }\n+\n+    if (!MessageSign(key, message, str_sig)) {\n+        return SigningResult::SIGNING_FAILED;\n+    }\n+    return SigningResult::OK;\n }\n \n TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs) const"
      }
    ]
  },
  {
    "sha": "72a9540df96ffdb94f039b9c14eaacdc7d961196",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmE5NTQwZGY5NmZmZGI5NGYwMzliOWMxNGVhYWNkYzdkOTYxMTk2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-11T22:39:43Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement FillPSBT in DescriptorScriptPubKeyMan\n\nFillPSBT will add our own scripts to the PSBT if those inputs are ours.\nIf an input also lists pubkeys that we happen to know the private keys\nfor, we will sign those inputs too.",
      "tree": {
        "sha": "38f57b328f20663c5550b2912e95dc27110d7203",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/38f57b328f20663c5550b2912e95dc27110d7203"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72a9540df96ffdb94f039b9c14eaacdc7d961196",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "84b4978c02102171775c77a45f6ec198930f0a88",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84b4978c02102171775c77a45f6ec198930f0a88",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/84b4978c02102171775c77a45f6ec198930f0a88"
      }
    ],
    "stats": {
      "total": 116,
      "additions": 68,
      "deletions": 48
    },
    "files": [
      {
        "sha": "0c1da43b487ce964b4564795c6cbb16affd094af",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 64,
        "deletions": 2,
        "changes": 66,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72a9540df96ffdb94f039b9c14eaacdc7d961196/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72a9540df96ffdb94f039b9c14eaacdc7d961196/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=72a9540df96ffdb94f039b9c14eaacdc7d961196",
        "patch": "@@ -1974,9 +1974,71 @@ SigningResult DescriptorScriptPubKeyMan::SignMessage(const std::string& message,\n     return SigningResult::OK;\n }\n \n-TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbt, int sighash_type, bool sign, bool bip32derivs) const\n+TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psbtx, int sighash_type, bool sign, bool bip32derivs) const\n {\n-    return TransactionError::INVALID_PSBT;\n+    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n+        const CTxIn& txin = psbtx.tx->vin[i];\n+        PSBTInput& input = psbtx.inputs.at(i);\n+\n+        if (PSBTInputSigned(input)) {\n+            continue;\n+        }\n+\n+        // Verify input looks sane. This will check that we have at most one uxto, witness or non-witness.\n+        if (!input.IsSane()) {\n+            return TransactionError::INVALID_PSBT;\n+        }\n+\n+        // Get the Sighash type\n+        if (sign && input.sighash_type > 0 && input.sighash_type != sighash_type) {\n+            return TransactionError::SIGHASH_MISMATCH;\n+        }\n+\n+        // Get the scriptPubKey to know which SigningProvider to use\n+        CScript script;\n+        if (!input.witness_utxo.IsNull()) {\n+            script = input.witness_utxo.scriptPubKey;\n+        } else if (input.non_witness_utxo) {\n+            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n+                return TransactionError::MISSING_INPUTS;\n+            }\n+            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n+        } else {\n+            // There's no UTXO so we can just skip this now\n+            continue;\n+        }\n+        SignatureData sigdata;\n+        input.FillSignatureData(sigdata);\n+\n+        std::unique_ptr<FlatSigningProvider> keys = MakeUnique<FlatSigningProvider>();\n+        std::unique_ptr<FlatSigningProvider> script_keys = GetSigningProvider(script, sign);\n+        if (script_keys) {\n+            *keys = Merge(*keys, *script_keys);\n+        } else {\n+            // Maybe there are pubkeys listed that we can sign for\n+            script_keys = MakeUnique<FlatSigningProvider>();\n+            for (const auto& pk_pair : input.hd_keypaths) {\n+                const CPubKey& pubkey = pk_pair.first;\n+                std::unique_ptr<FlatSigningProvider> pk_keys = GetSigningProvider(pubkey);\n+                if (pk_keys) {\n+                    *keys = Merge(*keys, *pk_keys);\n+                }\n+            }\n+        }\n+\n+        SignPSBTInput(HidingSigningProvider(keys.get(), !sign, !bip32derivs), psbtx, i, sighash_type);\n+    }\n+\n+    // Fill in the bip32 keypaths and redeemscripts for the outputs so that hardware wallets can identify change\n+    for (unsigned int i = 0; i < psbtx.tx->vout.size(); ++i) {\n+        std::unique_ptr<SigningProvider> keys = GetSolvingProvider(psbtx.tx->vout.at(i).scriptPubKey);\n+        if (!keys) {\n+            continue;\n+        }\n+        UpdatePSBTOutput(HidingSigningProvider(keys.get(), true, !bip32derivs), psbtx, i);\n+    }\n+\n+    return TransactionError::OK;\n }\n \n const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const"
      },
      {
        "sha": "90507a9415629b4d9210ccf49e32d4805a7f913f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 46,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72a9540df96ffdb94f039b9c14eaacdc7d961196/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72a9540df96ffdb94f039b9c14eaacdc7d961196/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=72a9540df96ffdb94f039b9c14eaacdc7d961196",
        "patch": "@@ -2489,52 +2489,10 @@ TransactionError CWallet::FillPSBT(PartiallySignedTransaction& psbtx, bool& comp\n     }\n \n     // Fill in information from ScriptPubKeyMans\n-    // Because each ScriptPubKeyMan may be able to fill more than one input, we need to keep track of each ScriptPubKeyMan that has filled this psbt.\n-    // Each iteration, we may fill more inputs than the input that is specified in that iteration.\n-    // We assume that each input is filled by only one ScriptPubKeyMan\n-    std::set<uint256> visited_spk_mans;\n-    for (unsigned int i = 0; i < psbtx.tx->vin.size(); ++i) {\n-        const CTxIn& txin = psbtx.tx->vin[i];\n-        PSBTInput& input = psbtx.inputs.at(i);\n-\n-        if (PSBTInputSigned(input)) {\n-            continue;\n-        }\n-\n-        // Get the scriptPubKey to know which ScriptPubKeyMan to use\n-        CScript script;\n-        if (!input.witness_utxo.IsNull()) {\n-            script = input.witness_utxo.scriptPubKey;\n-        } else if (input.non_witness_utxo) {\n-            if (txin.prevout.n >= input.non_witness_utxo->vout.size()) {\n-                return TransactionError::MISSING_INPUTS;\n-            }\n-            script = input.non_witness_utxo->vout[txin.prevout.n].scriptPubKey;\n-        } else {\n-            // There's no UTXO so we can just skip this now\n-            continue;\n-        }\n-        SignatureData sigdata;\n-        input.FillSignatureData(sigdata);\n-        std::set<ScriptPubKeyMan*> spk_mans = GetScriptPubKeyMans(script, sigdata);\n-        if (spk_mans.size() == 0) {\n-            continue;\n-        }\n-\n-        for (auto& spk_man : spk_mans) {\n-            // If we've already been signed by this spk_man, skip it\n-            if (visited_spk_mans.count(spk_man->GetID()) > 0) {\n-                continue;\n-            }\n-\n-            // Fill in the information from the spk_man\n-            TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n-            if (res != TransactionError::OK) {\n-                return res;\n-            }\n-\n-            // Add this spk_man to visited_spk_mans so we can skip it later\n-            visited_spk_mans.insert(spk_man->GetID());\n+    for (ScriptPubKeyMan* spk_man : GetAllScriptPubKeyMans()) {\n+        TransactionError res = spk_man->FillPSBT(psbtx, sighash_type, sign, bip32derivs);\n+        if (res != TransactionError::OK) {\n+            return res;\n         }\n     }\n "
      }
    ]
  },
  {
    "sha": "8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4Yjk2MDNiZDBiNDQzZTJmNzk4NGViNzJiZjJlMjFjZjAyYWYwYmNi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T01:55:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Change GetMetadata to use unique_ptr<CKeyMetadata>",
      "tree": {
        "sha": "23d675917d739aa53e18578fab0aed6996d19472",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/23d675917d739aa53e18578fab0aed6996d19472"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72a9540df96ffdb94f039b9c14eaacdc7d961196",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72a9540df96ffdb94f039b9c14eaacdc7d961196",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72a9540df96ffdb94f039b9c14eaacdc7d961196"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "c5aca12f76e2ac15b64c9448f0354a5d2b073d38",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
        "patch": "@@ -3820,7 +3820,7 @@ UniValue getaddressinfo(const JSONRPCRequest& request)\n \n     ScriptPubKeyMan* spk_man = pwallet->GetScriptPubKeyMan(scriptPubKey);\n     if (spk_man) {\n-        if (const CKeyMetadata* meta = spk_man->GetMetadata(dest)) {\n+        if (const std::unique_ptr<CKeyMetadata> meta = spk_man->GetMetadata(dest)) {\n             ret.pushKV(\"timestamp\", meta->nCreateTime);\n             if (meta->has_key_origin) {\n                 ret.pushKV(\"hdkeypath\", WriteHDKeypath(meta->key_origin.path));"
      },
      {
        "sha": "e10c248c64951e1256a6ee11658eee18e1777e56",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
        "patch": "@@ -568,22 +568,22 @@ TransactionError LegacyScriptPubKeyMan::FillPSBT(PartiallySignedTransaction& psb\n     return TransactionError::OK;\n }\n \n-const CKeyMetadata* LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+std::unique_ptr<CKeyMetadata> LegacyScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     LOCK(cs_KeyStore);\n \n     CKeyID key_id = GetKeyForDestination(*this, dest);\n     if (!key_id.IsNull()) {\n         auto it = mapKeyMetadata.find(key_id);\n         if (it != mapKeyMetadata.end()) {\n-            return &it->second;\n+            return MakeUnique<CKeyMetadata>(it->second);\n         }\n     }\n \n     CScript scriptPubKey = GetScriptForDestination(dest);\n     auto it = m_script_metadata.find(CScriptID(scriptPubKey));\n     if (it != m_script_metadata.end()) {\n-        return &it->second;\n+        return MakeUnique<CKeyMetadata>(it->second);\n     }\n \n     return nullptr;\n@@ -2041,7 +2041,7 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n     return TransactionError::OK;\n }\n \n-const CKeyMetadata* DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n+std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n     return nullptr;\n }"
      },
      {
        "sha": "09edc322895d041b54303d4c72b29cccbe615d88",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
        "patch": "@@ -205,7 +205,7 @@ class ScriptPubKeyMan\n \n     virtual int64_t GetTimeFirstKey() const { return 0; }\n \n-    virtual const CKeyMetadata* GetMetadata(const CTxDestination& dest) const { return nullptr; }\n+    virtual std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const { return nullptr; }\n \n     virtual std::unique_ptr<SigningProvider> GetSolvingProvider(const CScript& script) const { return nullptr; }\n \n@@ -355,7 +355,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     int64_t GetTimeFirstKey() const override;\n \n-    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+    std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const override;\n \n     bool CanGetAddresses(bool internal = false) const override;\n \n@@ -560,7 +560,7 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     int64_t GetTimeFirstKey() const override;\n \n-    const CKeyMetadata* GetMetadata(const CTxDestination& dest) const override;\n+    std::unique_ptr<CKeyMetadata> GetMetadata(const CTxDestination& dest) const override;\n \n     bool CanGetAddresses(bool internal = false) const override;\n "
      }
    ]
  },
  {
    "sha": "b713baa75a62335ab9c0eed9ef76a95bfec30668",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNzEzYmFhNzVhNjIzMzVhYjljMGVlZDllZjc2YTk1YmZlYzMwNjY4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-11-07T02:20:39Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement GetMetadata in DescriptorScriptPubKeyMan",
      "tree": {
        "sha": "ad1bb8395bf73a020e29e9c0d74253d6952faeda",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ad1bb8395bf73a020e29e9c0d74253d6952faeda"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b713baa75a62335ab9c0eed9ef76a95bfec30668",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8b9603bd0b443e2f7984eb72bf2e21cf02af0bcb"
      }
    ],
    "stats": {
      "total": 13,
      "additions": 13,
      "deletions": 0
    },
    "files": [
      {
        "sha": "6aeea700bebf90c021357fde9ebcaadbf1065faf",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b713baa75a62335ab9c0eed9ef76a95bfec30668/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b713baa75a62335ab9c0eed9ef76a95bfec30668/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=b713baa75a62335ab9c0eed9ef76a95bfec30668",
        "patch": "@@ -2043,6 +2043,19 @@ TransactionError DescriptorScriptPubKeyMan::FillPSBT(PartiallySignedTransaction&\n \n std::unique_ptr<CKeyMetadata> DescriptorScriptPubKeyMan::GetMetadata(const CTxDestination& dest) const\n {\n+    std::unique_ptr<SigningProvider> provider = GetSigningProvider(GetScriptForDestination(dest));\n+    if (provider) {\n+        KeyOriginInfo orig;\n+        CKeyID key_id = GetKeyForDestination(*provider, dest);\n+        if (provider->GetKeyOrigin(key_id, orig)) {\n+            LOCK(cs_desc_man);\n+            std::unique_ptr<CKeyMetadata> meta = MakeUnique<CKeyMetadata>();\n+            meta->key_origin = orig;\n+            meta->has_key_origin = true;\n+            meta->nCreateTime = m_wallet_descriptor.creation_time;\n+            return meta;\n+        }\n+    }\n     return nullptr;\n }\n "
      }
    ]
  },
  {
    "sha": "82ae02b1656819f4bd5023b8955447e1d4ea8692",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4MmFlMDJiMTY1NjgxOWY0YmQ1MDIzYjg5NTU0NDdlMWQ0ZWE4Njky",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-11T22:21:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Be able to create new wallets with DescriptorScriptPubKeyMans as backing",
      "tree": {
        "sha": "3b408d54d4b68c86e4bc44748c965ea9a773704e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b408d54d4b68c86e4bc44748c965ea9a773704e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/82ae02b1656819f4bd5023b8955447e1d4ea8692",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b713baa75a62335ab9c0eed9ef76a95bfec30668",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b713baa75a62335ab9c0eed9ef76a95bfec30668",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b713baa75a62335ab9c0eed9ef76a95bfec30668"
      }
    ],
    "stats": {
      "total": 98,
      "additions": 87,
      "deletions": 11
    },
    "files": [
      {
        "sha": "5056e487fcce66baeb8832604a76e9b4e4fda7cf",
        "filename": "src/qt/createwalletdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/createwalletdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/createwalletdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.cpp?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -60,3 +60,8 @@ bool CreateWalletDialog::isMakeBlankWalletChecked() const\n {\n     return ui->blank_wallet_checkbox->isChecked();\n }\n+\n+bool CreateWalletDialog::isDescriptorWalletChecked() const\n+{\n+    return ui->descriptor_checkbox->isChecked();\n+}"
      },
      {
        "sha": "20cce937c834e01a5698208c604c58173c727bb3",
        "filename": "src/qt/createwalletdialog.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/createwalletdialog.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/createwalletdialog.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/createwalletdialog.h?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -27,6 +27,7 @@ class CreateWalletDialog : public QDialog\n     bool isEncryptWalletChecked() const;\n     bool isDisablePrivateKeysChecked() const;\n     bool isMakeBlankWalletChecked() const;\n+    bool isDescriptorWalletChecked() const;\n \n private:\n     Ui::CreateWalletDialog *ui;"
      },
      {
        "sha": "b592140dd7bf2cb5d2457bd033c2513d1e52c67e",
        "filename": "src/qt/forms/createwalletdialog.ui",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/forms/createwalletdialog.ui",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/forms/createwalletdialog.ui",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/forms/createwalletdialog.ui?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -7,7 +7,7 @@\n     <x>0</x>\n     <y>0</y>\n     <width>364</width>\n-    <height>185</height>\n+    <height>213</height>\n    </rect>\n   </property>\n   <property name=\"windowTitle\">\n@@ -17,7 +17,7 @@\n    <property name=\"geometry\">\n     <rect>\n      <x>10</x>\n-     <y>140</y>\n+     <y>170</y>\n      <width>341</width>\n      <height>32</height>\n     </rect>\n@@ -106,6 +106,22 @@\n     <string>Make Blank Wallet</string>\n    </property>\n   </widget>\n+  <widget class=\"QCheckBox\" name=\"descriptor_checkbox\">\n+   <property name=\"geometry\">\n+    <rect>\n+     <x>20</x>\n+     <y>140</y>\n+     <width>171</width>\n+     <height>22</height>\n+    </rect>\n+   </property>\n+   <property name=\"toolTip\">\n+    <string>Use descriptors for scriptPubKey management</string>\n+   </property>\n+   <property name=\"text\">\n+    <string>Descriptor Wallet</string>\n+   </property>\n+  </widget>\n  </widget>\n  <tabstops>\n   <tabstop>wallet_name_line_edit</tabstop>"
      },
      {
        "sha": "9c1488fb0e4f1e1acb4bdaddc617e6b46e0e98c3",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -226,6 +226,9 @@ void CreateWalletActivity::createWallet()\n     if (m_create_wallet_dialog->isMakeBlankWalletChecked()) {\n         flags |= WALLET_FLAG_BLANK_WALLET;\n     }\n+    if (m_create_wallet_dialog->isDescriptorWalletChecked()) {\n+        flags |= WALLET_FLAG_DESCRIPTORS;\n+    }\n \n     QTimer::singleShot(500, worker(), [this, name, flags] {\n         WalletCreationStatus status;"
      },
      {
        "sha": "4943a4ee88e9b338b5901ac2670c8c30d321cba6",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -170,6 +170,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"createwallet\", 1, \"disable_private_keys\"},\n     { \"createwallet\", 2, \"blank\"},\n     { \"createwallet\", 4, \"avoid_reuse\"},\n+    { \"createwallet\", 5, \"descriptors\"},\n     { \"getnodeaddresses\", 0, \"count\"},\n     { \"stop\", 0, \"wait\" },\n };"
      },
      {
        "sha": "50aee04d8ea2981bf338110323b15e50d2a37ff8",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -2706,6 +2706,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n             {\"blank\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a blank wallet. A blank wallet has no keys or HD seed. One can be set using sethdseed.\"},\n             {\"passphrase\", RPCArg::Type::STR, RPCArg::Optional::OMITTED, \"Encrypt the wallet with this passphrase.\"},\n             {\"avoid_reuse\", RPCArg::Type::BOOL, /* default */ \"false\", \"Keep track of coin reuse, and treat dirty and clean coins differently with privacy considerations in mind.\"},\n+            {\"descriptors\", RPCArg::Type::BOOL, /* default */ \"false\", \"Create a native descriptor wallet. The wallet will use descriptors internally to handle address creation\"},\n         },\n         RPCResult{\n             RPCResult::Type::OBJ, \"\", \"\",\n@@ -2742,6 +2743,9 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     if (!request.params[4].isNull() && request.params[4].get_bool()) {\n         flags |= WALLET_FLAG_AVOID_REUSE;\n     }\n+    if (!request.params[5].isNull() && request.params[5].get_bool()) {\n+        flags |= WALLET_FLAG_DESCRIPTORS;\n+    }\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n@@ -4298,7 +4302,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"addmultisigaddress\",               &addmultisigaddress,            {\"nrequired\",\"keys\",\"label\",\"address_type\"} },\n     { \"wallet\",             \"backupwallet\",                     &backupwallet,                  {\"destination\"} },\n     { \"wallet\",             \"bumpfee\",                          &bumpfee,                       {\"txid\", \"options\"} },\n-    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\"} },\n+    { \"wallet\",             \"createwallet\",                     &createwallet,                  {\"wallet_name\", \"disable_private_keys\", \"blank\", \"passphrase\", \"avoid_reuse\", \"descriptors\"} },\n     { \"wallet\",             \"dumpprivkey\",                      &dumpprivkey,                   {\"address\"}  },\n     { \"wallet\",             \"dumpwallet\",                       &dumpwallet,                    {\"filename\"} },\n     { \"wallet\",             \"encryptwallet\",                    &encryptwallet,                 {\"passphrase\"} },"
      },
      {
        "sha": "bef470bd8d7eaefe03fe6fb55662dc8cc8dca952",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 8,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -228,10 +228,14 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n             // Set a seed for the wallet\n             {\n                 LOCK(wallet->cs_wallet);\n-                for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n-                    if (!spk_man->SetupGeneration()) {\n-                        error = \"Unable to generate initial keys\";\n-                        return WalletCreationStatus::CREATION_FAILED;\n+                if (wallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                    wallet->SetupDescriptorScriptPubKeyMans();\n+                } else {\n+                    for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n+                        if (!spk_man->SetupGeneration()) {\n+                            error = \"Unable to generate initial keys\";\n+                            return WalletCreationStatus::CREATION_FAILED;\n+                        }\n                     }\n                 }\n             }\n@@ -3783,10 +3787,16 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n \n         if (!(wallet_creation_flags & (WALLET_FLAG_DISABLE_PRIVATE_KEYS | WALLET_FLAG_BLANK_WALLET))) {\n             LOCK(walletInstance->cs_wallet);\n-            for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n-                if (!spk_man->SetupGeneration()) {\n-                    error = _(\"Unable to generate initial keys\").translated;\n-                    return nullptr;\n+            if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+                walletInstance->SetupDescriptorScriptPubKeyMans();\n+                // SetupDescriptorScriptPubKeyMans already calls SetupGeneration for us so we don't need to call SetupGeneration separately\n+            } else {\n+                // Legacy wallets need SetupGeneration here.\n+                for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n+                    if (!spk_man->SetupGeneration()) {\n+                        error = _(\"Unable to generate initial keys\").translated;\n+                        return nullptr;\n+                    }\n                 }\n             }\n         }\n@@ -4351,6 +4361,39 @@ void CWallet::LoadDescriptorScriptPubKeyMan(uint256 id, WalletDescriptor& desc)\n     m_spk_managers[id] = std::move(spk_manager);\n }\n \n+void CWallet::SetupDescriptorScriptPubKeyMans()\n+{\n+    AssertLockHeld(cs_wallet);\n+\n+    // Make a seed\n+    CKey seed_key;\n+    seed_key.MakeNewKey(true);\n+    CPubKey seed = seed_key.GetPubKey();\n+    assert(seed_key.VerifyPubKey(seed));\n+\n+    // Get the extended key\n+    CExtKey master_key;\n+    master_key.SetSeed(seed_key.begin(), seed_key.size());\n+\n+    for (bool internal : {false, true}) {\n+        for (OutputType t : OUTPUT_TYPES) {\n+            auto spk_manager = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, t, internal));\n+            if (IsCrypted()) {\n+                if (IsLocked()) {\n+                    throw std::runtime_error(std::string(__func__) + \": Wallet is locked, cannot setup new descriptors\");\n+                }\n+                if (!spk_manager->CheckDecryptionKey(vMasterKey) && !spk_manager->Encrypt(vMasterKey, nullptr)) {\n+                    throw std::runtime_error(std::string(__func__) + \": Could not encrypt new descriptors\");\n+                }\n+            }\n+            spk_manager->SetupDescriptorGeneration(master_key);\n+            uint256 id = spk_manager->GetID();\n+            m_spk_managers[id] = std::move(spk_manager);\n+            SetActiveScriptPubKeyMan(id, t, internal);\n+        }\n+    }\n+}\n+\n void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n {\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;"
      },
      {
        "sha": "29c6bced957c6da0c12d87df015425578b3d3257",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/82ae02b1656819f4bd5023b8955447e1d4ea8692/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "patch": "@@ -1244,6 +1244,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     //! @param[in] internal Whether this ScriptPubKeyMan provides change addresses\n     //! @param[in] memonly Whether to record this update to the database. Set to true for wallet loading, normally false when actually updating the wallet.\n     void SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly = false);\n+\n+    //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n+    void SetupDescriptorScriptPubKeyMans();\n };\n \n /**"
      }
    ]
  },
  {
    "sha": "1cb42b22b11c27e64462afc25a94b2fc50bfa113",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxY2I0MmIyMmIxMWMyN2U2NDQ2MmFmYzI1YTk0YjJmYzUwYmZhMTEz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:22:08Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Generate new descriptors when encrypting",
      "tree": {
        "sha": "a67cbb5b85ec15aee7fe50ac7a086916e75c4745",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a67cbb5b85ec15aee7fe50ac7a086916e75c4745"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/82ae02b1656819f4bd5023b8955447e1d4ea8692",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/82ae02b1656819f4bd5023b8955447e1d4ea8692"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 5,
      "deletions": 2
    },
    "files": [
      {
        "sha": "fec2a3990611987b6ca6092d59b9c87364209956",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1cb42b22b11c27e64462afc25a94b2fc50bfa113/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1cb42b22b11c27e64462afc25a94b2fc50bfa113/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1cb42b22b11c27e64462afc25a94b2fc50bfa113",
        "patch": "@@ -592,8 +592,11 @@ bool CWallet::EncryptWallet(const SecureString& strWalletPassphrase)\n         Lock();\n         Unlock(strWalletPassphrase);\n \n-        // if we are using HD, replace the HD seed with a new one\n-        if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+        // If we are using descriptors, make new descriptors with a new seed\n+        if (IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS) && !IsWalletFlagSet(WALLET_FLAG_BLANK_WALLET)) {\n+            SetupDescriptorScriptPubKeyMans();\n+        } else if (auto spk_man = GetLegacyScriptPubKeyMan()) {\n+            // if we are using HD, replace the HD seed with a new one\n             if (spk_man->IsHDEnabled()) {\n                 if (!spk_man->SetupGeneration(true)) {\n                     return false;"
      }
    ]
  },
  {
    "sha": "ce24a944940019185efebcc5d85eac458ed26016",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZTI0YTk0NDk0MDAxOTE4NWVmZWJjYzVkODVlYWM0NThlZDI2MDE2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-08-14T18:25:53Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Add IsLegacy to CWallet so that the GUI knows whether to show watchonly",
      "tree": {
        "sha": "82772b6c25fcecd552f51703f4a68326ff7326d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/82772b6c25fcecd552f51703f4a68326ff7326d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ce24a944940019185efebcc5d85eac458ed26016",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce24a944940019185efebcc5d85eac458ed26016",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ce24a944940019185efebcc5d85eac458ed26016",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce24a944940019185efebcc5d85eac458ed26016/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1cb42b22b11c27e64462afc25a94b2fc50bfa113",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1cb42b22b11c27e64462afc25a94b2fc50bfa113",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1cb42b22b11c27e64462afc25a94b2fc50bfa113"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 34,
      "deletions": 11
    },
    "files": [
      {
        "sha": "152917ac605f68ed2dad54bb7ae15b5662085386",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -464,6 +464,7 @@ class WalletImpl : public Wallet\n     {\n         RemoveWallet(m_wallet);\n     }\n+    bool isLegacy() override { return m_wallet->IsLegacy(); }\n     std::unique_ptr<Handler> handleUnload(UnloadFn fn) override\n     {\n         return MakeHandler(m_wallet->NotifyUnload.connect(fn));"
      },
      {
        "sha": "5d870c5e3d84bf22b69cc229abc09bc9f62cb319",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -266,6 +266,9 @@ class Wallet\n     // Remove wallet.\n     virtual void remove() = 0;\n \n+    //! Return whether is a legacy wallet\n+    virtual bool isLegacy() = 0;\n+\n     //! Register handler for unload message.\n     using UnloadFn = std::function<void()>;\n     virtual std::unique_ptr<Handler> handleUnload(UnloadFn fn) = 0;"
      },
      {
        "sha": "e0ae1f9e92825d2618a2f197cd87d0161ddf525c",
        "filename": "src/qt/overviewpage.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 9,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/qt/overviewpage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/qt/overviewpage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/overviewpage.cpp?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -161,20 +161,27 @@ void OverviewPage::setBalance(const interfaces::WalletBalances& balances)\n {\n     int unit = walletModel->getOptionsModel()->getDisplayUnit();\n     m_balances = balances;\n-    if (walletModel->wallet().privateKeysDisabled()) {\n-        ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+    if (walletModel->wallet().isLegacy()) {\n+        if (walletModel->wallet().privateKeysDisabled()) {\n+            ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+        } else {\n+            ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.balance + balances.unconfirmed_balance + balances.immature_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+            ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n+        }\n     } else {\n         ui->labelBalance->setText(BitcoinUnits::formatWithUnit(unit, balances.balance, false, BitcoinUnits::separatorAlways));\n         ui->labelUnconfirmed->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_balance, false, BitcoinUnits::separatorAlways));\n         ui->labelTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.balance + balances.unconfirmed_balance + balances.immature_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchAvailable->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchPending->setText(BitcoinUnits::formatWithUnit(unit, balances.unconfirmed_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchImmature->setText(BitcoinUnits::formatWithUnit(unit, balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n-        ui->labelWatchTotal->setText(BitcoinUnits::formatWithUnit(unit, balances.watch_only_balance + balances.unconfirmed_watch_only_balance + balances.immature_watch_only_balance, false, BitcoinUnits::separatorAlways));\n     }\n     // only show immature (newly mined) balance if it's non-zero, so as not to complicate things\n     // for the non-mining users"
      },
      {
        "sha": "8776cc9bfe8e4f432e140fc6c652f49bf9594e3f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -1851,7 +1851,7 @@ static UniValue keypoolrefill(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+    if (pwallet->IsLegacy() && pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Error: Private keys are disabled for this wallet\");\n     }\n "
      },
      {
        "sha": "82901e09deb61e59e5863ec2b684991e2ca0668f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -4412,3 +4412,12 @@ void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool interna\n     }\n     NotifyCanGetAddressesChanged();\n }\n+\n+bool CWallet::IsLegacy() const\n+{\n+    if (m_internal_spk_managers.count(OutputType::LEGACY) == 0) {\n+        return false;\n+    }\n+    auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n+    return spk_man != nullptr;\n+}"
      },
      {
        "sha": "66d4a51a9c94f20e326c5f320b5fc7f0c52d332f",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -1165,6 +1165,9 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n        returns false if unknown, non-tolerable flags are present */\n     bool SetWalletFlags(uint64_t overwriteFlags, bool memOnly);\n \n+    /** Determine if we are a legacy wallet */\n+    bool IsLegacy() const;\n+\n     /** Returns a bracketed wallet name for displaying in logs, will return [default wallet] if the wallet has no name */\n     const std::string GetDisplayName() const override {\n         std::string wallet_name = GetName().length() == 0 ? \"default wallet\" : GetName();"
      },
      {
        "sha": "79316ca3e75be0ea578b82b5f01343752b4cdfea",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ce24a944940019185efebcc5d85eac458ed26016/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ce24a944940019185efebcc5d85eac458ed26016",
        "patch": "@@ -699,7 +699,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n            wss.nKeys, wss.nCKeys, wss.nKeyMeta, wss.nKeys + wss.nCKeys, wss.m_unknown_records);\n \n     // nTimeFirstKey is only reliable if all keys have metadata\n-    if ((wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n+    if (pwallet->IsLegacy() && (wss.nKeys + wss.nCKeys + wss.nWatchKeys) != wss.nKeyMeta) {\n         auto spk_man = pwallet->GetOrCreateLegacyScriptPubKeyMan();\n         if (spk_man) {\n             LOCK(spk_man->cs_KeyStore);"
      }
    ]
  },
  {
    "sha": "f193ea889ddb53d9a5c47647966681d525e38368",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMTkzZWE4ODlkZGI1M2Q5YTVjNDc2NDc5NjY2ODFkNTI1ZTM4MzY4",
    "commit": {
      "author": {
        "name": "Hugo Nguyen",
        "email": "hugh.hn@gmail.com",
        "date": "2019-08-01T22:08:47Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "add importdescriptors RPC and tests for native descriptor wallets\n\nCo-authored-by: Andrew Chow <achow101-github@achow101.com>",
      "tree": {
        "sha": "6f552b8ff48b64dfa33b06ab756a8531b1148c18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6f552b8ff48b64dfa33b06ab756a8531b1148c18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f193ea889ddb53d9a5c47647966681d525e38368",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f193ea889ddb53d9a5c47647966681d525e38368",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f193ea889ddb53d9a5c47647966681d525e38368",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f193ea889ddb53d9a5c47647966681d525e38368/comments",
    "author": {
      "login": "hugohn",
      "id": 4769925,
      "node_id": "MDQ6VXNlcjQ3Njk5MjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/4769925?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/hugohn",
      "html_url": "https://github.com/hugohn",
      "followers_url": "https://api.github.com/users/hugohn/followers",
      "following_url": "https://api.github.com/users/hugohn/following{/other_user}",
      "gists_url": "https://api.github.com/users/hugohn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/hugohn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/hugohn/subscriptions",
      "organizations_url": "https://api.github.com/users/hugohn/orgs",
      "repos_url": "https://api.github.com/users/hugohn/repos",
      "events_url": "https://api.github.com/users/hugohn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/hugohn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ce24a944940019185efebcc5d85eac458ed26016",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ce24a944940019185efebcc5d85eac458ed26016",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ce24a944940019185efebcc5d85eac458ed26016"
      }
    ],
    "stats": {
      "total": 905,
      "additions": 905,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3045a74d7a52d3d4e9fa9982795d5946fe744d05",
        "filename": "src/rpc/client.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/rpc/client.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/rpc/client.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/client.cpp?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -131,6 +131,7 @@ static const CRPCConvertParam vRPCConvertParams[] =\n     { \"importpubkey\", 2, \"rescan\" },\n     { \"importmulti\", 0, \"requests\" },\n     { \"importmulti\", 1, \"options\" },\n+    { \"importdescriptors\", 0, \"requests\" },\n     { \"verifychain\", 0, \"checklevel\" },\n     { \"verifychain\", 1, \"nblocks\" },\n     { \"getblockstats\", 0, \"hash_or_height\" },"
      },
      {
        "sha": "128de52b5821a017d4054f79b4a44e02976a01ad",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 294,
        "deletions": 0,
        "changes": 294,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -1458,3 +1458,297 @@ UniValue importmulti(const JSONRPCRequest& mainRequest)\n \n     return response;\n }\n+\n+static UniValue ProcessDescriptorImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n+{\n+    UniValue warnings(UniValue::VARR);\n+    UniValue result(UniValue::VOBJ);\n+\n+    try {\n+        if (!data.exists(\"desc\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Descriptor not found.\");\n+        }\n+\n+        const std::string& descriptor = data[\"desc\"].get_str();\n+        const bool active = data.exists(\"active\") ? data[\"active\"].get_bool() : false;\n+        const bool internal = data.exists(\"internal\") ? data[\"internal\"].get_bool() : false;\n+        const std::string& label = data.exists(\"label\") ? data[\"label\"].get_str() : \"\";\n+\n+        // Parse descriptor string\n+        FlatSigningProvider keys;\n+        std::string error;\n+        auto parsed_desc = Parse(descriptor, keys, error, /* require_checksum = */ true);\n+        if (!parsed_desc) {\n+            throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, error);\n+        }\n+\n+        // Range check\n+        int64_t range_start = 0, range_end = 1, next_index = 0;\n+        if (!parsed_desc->IsRange() && data.exists(\"range\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Range should not be specified for an un-ranged descriptor\");\n+        } else if (parsed_desc->IsRange()) {\n+            if (data.exists(\"range\")) {\n+                auto range = ParseDescriptorRange(data[\"range\"]);\n+                range_start = range.first;\n+                range_end = range.second + 1; // Specified range end is inclusive, but we need range end as exclusive\n+            } else {\n+                warnings.push_back(\"Range not given, using default keypool range\");\n+                range_start = 0;\n+                range_end = gArgs.GetArg(\"-keypool\", DEFAULT_KEYPOOL_SIZE);\n+            }\n+            next_index = range_start;\n+\n+            if (data.exists(\"next_index\")) {\n+                next_index = data[\"next_index\"].get_int64();\n+                // bound checks\n+                if (next_index < range_start || next_index >= range_end) {\n+                    throw JSONRPCError(RPC_INVALID_PARAMETER, \"next_index is out of range\");\n+                }\n+            }\n+        }\n+\n+        // Active descriptors must be ranged\n+        if (active && !parsed_desc->IsRange()) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Active descriptors must be ranged\");\n+        }\n+\n+        // Ranged descriptors should not have a label\n+        if (data.exists(\"range\") && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Ranged descriptors should not have a label\");\n+        }\n+\n+        // Internal addresses should not have a label either\n+        if (internal && data.exists(\"label\")) {\n+            throw JSONRPCError(RPC_INVALID_PARAMETER, \"Internal addresses should not have a label\");\n+        }\n+\n+        // Combo descriptor check\n+        if (active && !parsed_desc->IsSingleType()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Combo descriptors cannot be set to active\");\n+        }\n+\n+        // If the wallet disabled private keys, abort if private keys exist\n+        if (pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) && !keys.keys.empty()) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import private keys to a wallet with private keys disabled\");\n+        }\n+\n+        // Need to ExpandPrivate to check if private keys are available for all pubkeys\n+        FlatSigningProvider expand_keys;\n+        std::vector<CScript> scripts;\n+        parsed_desc->Expand(0, keys, scripts, expand_keys);\n+        parsed_desc->ExpandPrivate(0, keys, expand_keys);\n+\n+        // Check if all private keys are provided\n+        bool have_all_privkeys = !expand_keys.keys.empty();\n+        for (const auto& entry : expand_keys.origins) {\n+            const CKeyID& key_id = entry.first;\n+            CKey key;\n+            if (!expand_keys.GetKey(key_id, key)) {\n+                have_all_privkeys = false;\n+                break;\n+            }\n+        }\n+\n+        // If private keys are enabled, check some things.\n+        if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n+           if (keys.keys.empty()) {\n+                throw JSONRPCError(RPC_WALLET_ERROR, \"Cannot import descriptor without private keys to a wallet with private keys enabled\");\n+           }\n+           if (!have_all_privkeys) {\n+               warnings.push_back(\"Not all private keys provided. Some wallet functionality may return unexpected errors\");\n+           }\n+        }\n+\n+        WalletDescriptor w_desc(std::move(parsed_desc), timestamp, range_start, range_end, next_index);\n+\n+        // Check if the wallet already contains the descriptor\n+        auto existing_spk_manager = pwallet->GetDescriptorScriptPubKeyMan(w_desc);\n+        if (existing_spk_manager) {\n+            LOCK(existing_spk_manager->cs_desc_man);\n+            if (range_start > existing_spk_manager->GetWalletDescriptor().range_start) {\n+                throw JSONRPCError(RPC_INVALID_PARAMS, strprintf(\"range_start can only decrease; current range = [%d,%d]\", existing_spk_manager->GetWalletDescriptor().range_start, existing_spk_manager->GetWalletDescriptor().range_end));\n+            }\n+        }\n+\n+        // Add descriptor to the wallet\n+        auto spk_manager = pwallet->AddWalletDescriptor(w_desc, keys, label);\n+        if (spk_manager == nullptr) {\n+            throw JSONRPCError(RPC_WALLET_ERROR, strprintf(\"Could not add descriptor '%s'\", descriptor));\n+        }\n+\n+        // Set descriptor as active if necessary\n+        if (active) {\n+            if (!w_desc.descriptor->GetOutputType()) {\n+                warnings.push_back(\"Unknown output type, cannot set descriptor to active.\");\n+            } else {\n+                pwallet->SetActiveScriptPubKeyMan(spk_manager->GetID(), *w_desc.descriptor->GetOutputType(), internal);\n+            }\n+        }\n+\n+        result.pushKV(\"success\", UniValue(true));\n+    } catch (const UniValue& e) {\n+        result.pushKV(\"success\", UniValue(false));\n+        result.pushKV(\"error\", e);\n+    } catch (...) {\n+        result.pushKV(\"success\", UniValue(false));\n+\n+        result.pushKV(\"error\", JSONRPCError(RPC_MISC_ERROR, \"Missing required fields\"));\n+    }\n+    if (warnings.size()) result.pushKV(\"warnings\", warnings);\n+    return result;\n+}\n+\n+UniValue importdescriptors(const JSONRPCRequest& main_request) {\n+    // Acquire the wallet\n+    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(main_request);\n+    CWallet* const pwallet = wallet.get();\n+    if (!EnsureWalletIsAvailable(pwallet, main_request.fHelp)) {\n+        return NullUniValue;\n+    }\n+\n+            RPCHelpMan{\"importdescriptors\",\n+                \"\\nImport descriptors. This will trigger a rescan of the blockchain based on the earliest timestamp of all descriptors being imported. Requires a new wallet backup.\\n\"\n+            \"\\nNote: This call can take over an hour to complete if using an early timestamp; during that time, other rpc calls\\n\"\n+            \"may report that the imported keys, addresses or scripts exist but related transactions are still missing.\\n\",\n+                {\n+                    {\"requests\", RPCArg::Type::ARR, RPCArg::Optional::NO, \"Data to be imported\",\n+                        {\n+                            {\"\", RPCArg::Type::OBJ, RPCArg::Optional::OMITTED, \"\",\n+                                {\n+                                    {\"desc\", RPCArg::Type::STR, RPCArg::Optional::NO, \"Descriptor to import.\"},\n+                                    {\"active\", RPCArg::Type::BOOL, /* default */ \"false\", \"Set this descriptor to be the active descriptor for the corresponding output type/externality\"},\n+                                    {\"range\", RPCArg::Type::RANGE, RPCArg::Optional::OMITTED, \"If a ranged descriptor is used, this specifies the end or the range (in the form [begin,end]) to import\"},\n+                                    {\"next_index\", RPCArg::Type::NUM, RPCArg::Optional::OMITTED, \"If a ranged descriptor is set to active, this specifies the next index to generate addresses from\"},\n+                                    {\"timestamp\", RPCArg::Type::NUM, RPCArg::Optional::NO, \"Time from which to start rescanning the blockchain for this descriptor, in \" + UNIX_EPOCH_TIME + \"\\n\"\n+        \"                                                              Use the string \\\"now\\\" to substitute the current synced blockchain time.\\n\"\n+        \"                                                              \\\"now\\\" can be specified to bypass scanning, for outputs which are known to never have been used, and\\n\"\n+        \"                                                              0 can be specified to scan the entire blockchain. Blocks up to 2 hours before the earliest timestamp\\n\"\n+        \"                                                              of all descriptors being imported will be scanned.\",\n+                                        /* oneline_description */ \"\", {\"timestamp | \\\"now\\\"\", \"integer / string\"}\n+                                    },\n+                                    {\"internal\", RPCArg::Type::BOOL, /* default */ \"false\", \"Whether matching outputs should be treated as not incoming payments (e.g. change)\"},\n+                                    {\"label\", RPCArg::Type::STR, /* default */ \"''\", \"Label to assign to the address, only allowed with internal=false\"},\n+                                },\n+                            },\n+                        },\n+                        \"\\\"requests\\\"\"},\n+                },\n+                RPCResult{\n+                    RPCResult::Type::ARR, \"\", \"Response is an array with the same size as the input that has the execution result\",\n+                    {\n+                        {RPCResult::Type::OBJ, \"\", \"\",\n+                        {\n+                            {RPCResult::Type::BOOL, \"success\", \"\"},\n+                            {RPCResult::Type::ARR, \"warnings\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::STR, \"\", \"\"},\n+                            }},\n+                            {RPCResult::Type::OBJ, \"error\", /* optional */ true, \"\",\n+                            {\n+                                {RPCResult::Type::ELISION, \"\", \"JSONRPC error\"},\n+                            }},\n+                        }},\n+                    }\n+                },\n+                RPCExamples{\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"internal\\\": true }, \"\n+                                          \"{ \\\"desc\\\": \\\"<my desccriptor 2>\\\", \\\"label\\\": \\\"example 2\\\", \\\"timestamp\\\": 1455191480 }]'\") +\n+                    HelpExampleCli(\"importdescriptors\", \"'[{ \\\"desc\\\": \\\"<my descriptor>\\\", \\\"timestamp\\\":1455191478, \\\"active\\\": true, \\\"range\\\": [0,100], \\\"label\\\": \\\"<my bech32 wallet>\\\" }]'\")\n+                },\n+            }.Check(main_request);\n+\n+    //  Make sure wallet is a descriptor wallet\n+    if (!pwallet->IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"importdescriptors is not available for non-descriptor wallets\");\n+    }\n+\n+    RPCTypeCheck(main_request.params, {UniValue::VARR, UniValue::VOBJ});\n+\n+    WalletRescanReserver reserver(*pwallet);\n+    if (!reserver.reserve()) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Wallet is currently rescanning. Abort existing rescan or wait.\");\n+    }\n+\n+    const UniValue& requests = main_request.params[0];\n+    const int64_t minimum_timestamp = 1;\n+    int64_t now = 0;\n+    int64_t lowest_timestamp = 0;\n+    bool rescan = false;\n+    UniValue response(UniValue::VARR);\n+    {\n+        auto locked_chain = pwallet->chain().lock();\n+        LOCK(pwallet->cs_wallet);\n+        EnsureWalletIsUnlocked(pwallet);\n+\n+        CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(lowest_timestamp).mtpTime(now)));\n+\n+        // Get all timestamps and extract the lowest timestamp\n+        for (const UniValue& request : requests.getValues()) {\n+            // This throws an error if \"timestamp\" doesn't exist\n+            const int64_t timestamp = std::max(GetImportTimestamp(request, now), minimum_timestamp);\n+            const UniValue result = ProcessDescriptorImport(pwallet, request, timestamp);\n+            response.push_back(result);\n+\n+            if (lowest_timestamp > timestamp ) {\n+                lowest_timestamp = timestamp;\n+            }\n+\n+            // If we know the chain tip, and at least one request was successful then allow rescan\n+            if (!rescan && result[\"success\"].get_bool()) {\n+                rescan = true;\n+            }\n+        }\n+        pwallet->ConnectScriptPubKeyManNotifiers();\n+    }\n+\n+    // Rescan the blockchain using the lowest timestamp\n+    if (rescan) {\n+        int64_t scanned_time = pwallet->RescanFromTime(lowest_timestamp, reserver, true /* update */);\n+        {\n+            auto locked_chain = pwallet->chain().lock();\n+            LOCK(pwallet->cs_wallet);\n+            pwallet->ReacceptWalletTransactions();\n+        }\n+\n+        if (pwallet->IsAbortingRescan()) {\n+            throw JSONRPCError(RPC_MISC_ERROR, \"Rescan aborted by user.\");\n+        }\n+\n+        if (scanned_time > lowest_timestamp) {\n+            std::vector<UniValue> results = response.getValues();\n+            response.clear();\n+            response.setArray();\n+\n+            // Compose the response\n+            for (unsigned int i = 0; i < requests.size(); ++i) {\n+                const UniValue& request = requests.getValues().at(i);\n+\n+                // If the descriptor timestamp is within the successfully scanned\n+                // range, or if the import result already has an error set, let\n+                // the result stand unmodified. Otherwise replace the result\n+                // with an error message.\n+                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(\"error\")) {\n+                    response.push_back(results.at(i));\n+                } else {\n+                    UniValue result = UniValue(UniValue::VOBJ);\n+                    result.pushKV(\"success\", UniValue(false));\n+                    result.pushKV(\n+                        \"error\",\n+                        JSONRPCError(\n+                            RPC_MISC_ERROR,\n+                            strprintf(\"Rescan failed for descriptor with timestamp %d. There was an error reading a \"\n+                                      \"block from time %d, which is after or within %d seconds of key creation, and \"\n+                                      \"could contain transactions pertaining to the desc. As a result, transactions \"\n+                                      \"and coins using this desc may not appear in the wallet. This error could be \"\n+                                      \"caused by pruning or data corruption (see bitcoind log for details) and could \"\n+                                      \"be dealt with by downloading and rescanning the relevant blocks (see -reindex \"\n+                                      \"and -rescan options).\",\n+                                GetImportTimestamp(request, now), scanned_time - TIMESTAMP_WINDOW - 1, TIMESTAMP_WINDOW)));\n+                    response.push_back(std::move(result));\n+                }\n+            }\n+        }\n+    }\n+\n+    return response;\n+}"
      },
      {
        "sha": "49c583c4226de842171129d147c4068e69ab3d19",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -4289,6 +4289,7 @@ UniValue importwallet(const JSONRPCRequest& request);\n UniValue importprunedfunds(const JSONRPCRequest& request);\n UniValue removeprunedfunds(const JSONRPCRequest& request);\n UniValue importmulti(const JSONRPCRequest& request);\n+UniValue importdescriptors(const JSONRPCRequest& request);\n \n void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers)\n {\n@@ -4318,6 +4319,7 @@ static const CRPCCommand commands[] =\n     { \"wallet\",             \"getbalances\",                      &getbalances,                   {} },\n     { \"wallet\",             \"getwalletinfo\",                    &getwalletinfo,                 {} },\n     { \"wallet\",             \"importaddress\",                    &importaddress,                 {\"address\",\"label\",\"rescan\",\"p2sh\"} },\n+    { \"wallet\",             \"importdescriptors\",                &importdescriptors,             {\"requests\"} },\n     { \"wallet\",             \"importmulti\",                      &importmulti,                   {\"requests\",\"options\"} },\n     { \"wallet\",             \"importprivkey\",                    &importprivkey,                 {\"privkey\",\"label\",\"rescan\"} },\n     { \"wallet\",             \"importprunedfunds\",                &importprunedfunds,             {\"rawtransaction\",\"txoutproof\"} },"
      },
      {
        "sha": "ecb95d599d5048e197f590b9e91345f5c6c6739d",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 41,
        "deletions": 0,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -1745,6 +1745,15 @@ void DescriptorScriptPubKeyMan::MarkUnusedAddresses(const CScript& script)\n     }\n }\n \n+void DescriptorScriptPubKeyMan::AddDescriptorKey(const CKey& key, const CPubKey &pubkey)\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!AddDescriptorKeyWithDB(batch, key, pubkey)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor private key failed\");\n+    }\n+}\n+\n bool DescriptorScriptPubKeyMan::AddDescriptorKeyWithDB(WalletBatch& batch, const CKey& key, const CPubKey &pubkey)\n {\n     AssertLockHeld(cs_desc_man);\n@@ -2121,3 +2130,35 @@ bool DescriptorScriptPubKeyMan::AddCryptedKey(const CKeyID& key_id, const CPubKe\n     m_map_crypted_keys[key_id] = make_pair(pubkey, crypted_key);\n     return true;\n }\n+\n+bool DescriptorScriptPubKeyMan::HasWalletDescriptor(const WalletDescriptor& desc) const\n+{\n+    LOCK(cs_desc_man);\n+    return m_wallet_descriptor.descriptor != nullptr && desc.descriptor != nullptr && m_wallet_descriptor.descriptor->ToString() == desc.descriptor->ToString();\n+}\n+\n+void DescriptorScriptPubKeyMan::WriteDescriptor()\n+{\n+    LOCK(cs_desc_man);\n+    WalletBatch batch(m_storage.GetDatabase());\n+    if (!batch.WriteDescriptor(GetID(), m_wallet_descriptor)) {\n+        throw std::runtime_error(std::string(__func__) + \": writing descriptor failed\");\n+    }\n+}\n+\n+const WalletDescriptor DescriptorScriptPubKeyMan::GetWalletDescriptor() const\n+{\n+    return m_wallet_descriptor;\n+}\n+\n+const std::vector<CScript> DescriptorScriptPubKeyMan::GetScriptPubKeys() const\n+{\n+    LOCK(cs_desc_man);\n+    std::vector<CScript> script_pub_keys;\n+    script_pub_keys.reserve(m_map_script_pub_keys.size());\n+\n+    for (auto const& script_pub_key: m_map_script_pub_keys) {\n+        script_pub_keys.push_back(script_pub_key.first);\n+    }\n+    return script_pub_keys;\n+}"
      },
      {
        "sha": "3117b13d357af12632b060b1e6d858292cfba022",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -580,6 +580,13 @@ class DescriptorScriptPubKeyMan : public ScriptPubKeyMan\n \n     bool AddKey(const CKeyID& key_id, const CKey& key);\n     bool AddCryptedKey(const CKeyID& key_id, const CPubKey& pubkey, const std::vector<unsigned char>& crypted_key);\n+\n+    bool HasWalletDescriptor(const WalletDescriptor& desc) const;\n+    void AddDescriptorKey(const CKey& key, const CPubKey &pubkey);\n+    void WriteDescriptor();\n+\n+    const WalletDescriptor GetWalletDescriptor() const EXCLUSIVE_LOCKS_REQUIRED(cs_desc_man);\n+    const std::vector<CScript> GetScriptPubKeys() const;\n };\n \n #endif // BITCOIN_WALLET_SCRIPTPUBKEYMAN_H"
      },
      {
        "sha": "5ffeb9e44d7db22377257db4be3dfa6c390b6210",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 86,
        "deletions": 0,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -4399,6 +4399,7 @@ void CWallet::SetupDescriptorScriptPubKeyMans()\n \n void CWallet::SetActiveScriptPubKeyMan(uint256 id, OutputType type, bool internal, bool memonly)\n {\n+    WalletLogPrintf(\"Setting spkMan to active: id = %s, type = %d, internal = %d\\n\", id.ToString(), static_cast<int>(type), static_cast<int>(internal));\n     auto& spk_mans = internal ? m_internal_spk_managers : m_external_spk_managers;\n     auto spk_man = m_spk_managers.at(id).get();\n     spk_man->SetType(type, internal);\n@@ -4421,3 +4422,88 @@ bool CWallet::IsLegacy() const\n     auto spk_man = dynamic_cast<LegacyScriptPubKeyMan*>(m_internal_spk_managers.at(OutputType::LEGACY));\n     return spk_man != nullptr;\n }\n+\n+DescriptorScriptPubKeyMan* CWallet::GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const\n+{\n+    for (auto& spk_man_pair : m_spk_managers) {\n+        // Try to downcast to DescriptorScriptPubKeyMan then check if the descriptors match\n+        DescriptorScriptPubKeyMan* spk_manager = dynamic_cast<DescriptorScriptPubKeyMan*>(spk_man_pair.second.get());\n+        if (spk_manager != nullptr && spk_manager->HasWalletDescriptor(desc)) {\n+            return spk_manager;\n+        }\n+    }\n+\n+    return nullptr;\n+}\n+\n+ScriptPubKeyMan* CWallet::AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label)\n+{\n+    if (!IsWalletFlagSet(WALLET_FLAG_DESCRIPTORS)) {\n+        WalletLogPrintf(\"Cannot add WalletDescriptor to a non-descriptor wallet\\n\");\n+        return nullptr;\n+    }\n+\n+    LOCK(cs_wallet);\n+    auto new_spk_man = std::unique_ptr<DescriptorScriptPubKeyMan>(new DescriptorScriptPubKeyMan(*this, desc));\n+\n+    // If we already have this descriptor, remove it from the maps but add the existing cache to desc\n+    auto old_spk_man = GetDescriptorScriptPubKeyMan(desc);\n+    if (old_spk_man) {\n+        WalletLogPrintf(\"Update existing descriptor: %s\\n\", desc.descriptor->ToString());\n+\n+        {\n+            LOCK(old_spk_man->cs_desc_man);\n+            new_spk_man->SetCache(old_spk_man->GetWalletDescriptor().cache);\n+        }\n+\n+        // Remove from maps of active spkMans\n+        auto old_spk_man_id = old_spk_man->GetID();\n+        for (bool internal : {false, true}) {\n+            for (OutputType t : OUTPUT_TYPES) {\n+                auto active_spk_man = GetScriptPubKeyMan(t, internal);\n+                if (active_spk_man && active_spk_man->GetID() == old_spk_man_id) {\n+                    if (internal) {\n+                        m_internal_spk_managers.erase(t);\n+                    } else {\n+                        m_external_spk_managers.erase(t);\n+                    }\n+                    break;\n+                }\n+            }\n+        }\n+        m_spk_managers.erase(old_spk_man_id);\n+    }\n+\n+    // Add the private keys to the descriptor\n+    for (const auto& entry : signing_provider.keys) {\n+        const CKey& key = entry.second;\n+        new_spk_man->AddDescriptorKey(key, key.GetPubKey());\n+    }\n+\n+    // Top up key pool, the manager will generate new scriptPubKeys internally\n+    new_spk_man->TopUp();\n+\n+    // Apply the label if necessary\n+    // Note: we disable labels for ranged descriptors\n+    if (!desc.descriptor->IsRange()) {\n+        auto script_pub_keys = new_spk_man->GetScriptPubKeys();\n+        if (script_pub_keys.empty()) {\n+            WalletLogPrintf(\"Could not generate scriptPubKeys (cache is empty)\\n\");\n+            return nullptr;\n+        }\n+\n+        CTxDestination dest;\n+        if (ExtractDestination(script_pub_keys.at(0), dest)) {\n+            SetAddressBook(dest, label, \"receive\");\n+        }\n+    }\n+\n+    // Save the descriptor to memory\n+    auto ret = new_spk_man.get();\n+    m_spk_managers[new_spk_man->GetID()] = std::move(new_spk_man);\n+\n+    // Save the descriptor to DB\n+    ret->WriteDescriptor();\n+\n+    return ret;\n+}"
      },
      {
        "sha": "24c78fceb3d70406a26991746e1ce46e26c9200d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -1250,6 +1250,12 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n \n     //! Create new DescriptorScriptPubKeyMans and add them to the wallet\n     void SetupDescriptorScriptPubKeyMans();\n+\n+    //! Return the DescriptorScriptPubKeyMan for a WalletDescriptor if it is already in the wallet\n+    DescriptorScriptPubKeyMan* GetDescriptorScriptPubKeyMan(const WalletDescriptor& desc) const;\n+\n+    //! Add a descriptor to the wallet, return a ScriptPubKeyMan & associated output type\n+    ScriptPubKeyMan* AddWalletDescriptor(WalletDescriptor& desc, const FlatSigningProvider& signing_provider, const std::string& label);\n };\n \n /**"
      },
      {
        "sha": "1b6686ff45a8ea6111a86b4be20ae0ae574d94bd",
        "filename": "test/functional/test_framework/wallet_util.py",
        "status": "modified",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/test_framework/wallet_util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/test_framework/wallet_util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/wallet_util.py?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -13,6 +13,10 @@\n     script_to_p2sh_p2wsh,\n     script_to_p2wsh,\n )\n+from test_framework.key import (\n+    bytes_to_wif,\n+    ECKey,\n+)\n from test_framework.script import (\n     CScript,\n     OP_0,\n@@ -66,6 +70,25 @@ def get_key(node):\n                p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n                p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n \n+def get_generate_key():\n+    \"\"\"Generate a fresh key\n+\n+    Returns a named tuple of privkey, pubkey and all address and scripts.\"\"\"\n+    eckey = ECKey()\n+    eckey.generate()\n+    privkey = bytes_to_wif(eckey.get_bytes())\n+    pubkey = eckey.get_pubkey().get_bytes().hex()\n+    pkh = hash160(hex_str_to_bytes(pubkey))\n+    return Key(privkey=privkey,\n+               pubkey=pubkey,\n+               p2pkh_script=CScript([OP_DUP, OP_HASH160, pkh, OP_EQUALVERIFY, OP_CHECKSIG]).hex(),\n+               p2pkh_addr=key_to_p2pkh(pubkey),\n+               p2wpkh_script=CScript([OP_0, pkh]).hex(),\n+               p2wpkh_addr=key_to_p2wpkh(pubkey),\n+               p2sh_p2wpkh_script=CScript([OP_HASH160, hash160(CScript([OP_0, pkh])), OP_EQUAL]).hex(),\n+               p2sh_p2wpkh_redeem_script=CScript([OP_0, pkh]).hex(),\n+               p2sh_p2wpkh_addr=key_to_p2sh_p2wpkh(pubkey))\n+\n def get_multisig(node):\n     \"\"\"Generate a fresh 2-of-3 multisig on node\n "
      },
      {
        "sha": "b13502292fcebd09867ce1280f8735fe3ef64df7",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -180,6 +180,7 @@\n     'mempool_expiry.py',\n     'wallet_import_rescan.py',\n     'wallet_import_with_label.py',\n+    'wallet_importdescriptors.py',\n     'rpc_bind.py --ipv4',\n     'rpc_bind.py --ipv6',\n     'rpc_bind.py --nonloopback',"
      },
      {
        "sha": "55995152aa1de3284182cd27b0714cc6f885b8a7",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "added",
        "additions": 444,
        "deletions": 0,
        "changes": 444,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f193ea889ddb53d9a5c47647966681d525e38368/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=f193ea889ddb53d9a5c47647966681d525e38368",
        "patch": "@@ -0,0 +1,444 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test the importdescriptors RPC.\n+\n+Test importdescriptors by generating keys on node0, importing the corresponding\n+descriptors on node1 and then testing the address info for the different address\n+variants.\n+\n+- `get_generate_key()` is called to generate keys and return the privkeys,\n+  pubkeys and all variants of scriptPubKey and address.\n+- `test_importdesc()` is called to send an importdescriptors call to node1, test\n+  success, and (if unsuccessful) test the error code and error message returned.\n+- `test_address()` is called to call getaddressinfo for an address on node1\n+  and test the values returned.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.descriptors import descsum_create\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    find_vout_for_address,\n+)\n+from test_framework.wallet_util import (\n+    get_generate_key,\n+    test_address,\n+)\n+\n+class ImportDescriptorsTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.num_nodes = 2\n+        self.extra_args = [[\"-addresstype=legacy\"],\n+                           [\"-addresstype=bech32\", \"-keypool=5\"]\n+                          ]\n+        self.setup_clean_chain = True\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def test_importdesc(self, req, success, error_code=None, error_message=None, warnings=None, wallet=None):\n+        \"\"\"Run importdescriptors and assert success\"\"\"\n+        if warnings is None:\n+            warnings = []\n+        wrpc = self.nodes[1].get_wallet_rpc('w1')\n+        if wallet is not None:\n+            wrpc = wallet\n+\n+        result = wrpc.importdescriptors([req])\n+        observed_warnings = []\n+        if 'warnings' in result[0]:\n+           observed_warnings = result[0]['warnings']\n+        assert_equal(\"\\n\".join(sorted(warnings)), \"\\n\".join(sorted(observed_warnings)))\n+        assert_equal(result[0]['success'], success)\n+        if error_code is not None:\n+            assert_equal(result[0]['error']['code'], error_code)\n+            assert_equal(result[0]['error']['message'], error_message)\n+\n+    def run_test(self):\n+        self.log.info('Setting up wallets')\n+        self.nodes[0].createwallet(wallet_name='w0', disable_private_keys=False)\n+        w0 = self.nodes[0].get_wallet_rpc('w0')\n+\n+        self.nodes[1].createwallet(wallet_name='w1', disable_private_keys=True, blank=True, descriptors=True)\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.nodes[1].createwallet(wallet_name=\"wpriv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wpriv = self.nodes[1].get_wallet_rpc(\"wpriv\")\n+        assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info('Mining coins')\n+        w0.generatetoaddress(101, w0.getnewaddress())\n+\n+        # RPC importdescriptors -----------------------------------------------\n+\n+        # # Test import fails if no descriptor present\n+        key = get_generate_key()\n+        self.log.info(\"Import should fail if a descriptor is not provided\")\n+        self.test_importdesc({\"timestamp\": \"now\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message='Descriptor not found.')\n+\n+        # # Test importing of a P2PKH descriptor\n+        key = get_generate_key()\n+        self.log.info(\"Should import a p2pkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"label\": \"Descriptor import test\"},\n+                             success=True)\n+        test_address(w1,\n+                     key.p2pkh_addr,\n+                     solvable=True,\n+                     ismine=True,\n+                     labels=[\"Descriptor import test\"])\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.log.info(\"Internal addresses cannot have labels\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pkh(\" + key.pubkey + \")\"),\n+                              \"timestamp\": \"now\",\n+                              \"internal\": True,\n+                              \"label\": \"Descriptor import test\"},\n+                             success=False,\n+                             error_code=-8,\n+                             error_message=\"Internal addresses should not have a label\")\n+\n+        # # Test importing of a P2SH-P2WPKH descriptor\n+        key = get_generate_key()\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor without checksum\")\n+        self.test_importdesc({\"desc\": \"sh(wpkh(\" + key.pubkey + \"))\",\n+                              \"timestamp\": \"now\"\n+                              },\n+                             success=False,\n+                             error_code=-5,\n+                             error_message=\"Missing checksum\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor that has range specified\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"range\": 1,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Range should not be specified for an un-ranged descriptor\")\n+\n+        self.log.info(\"Should not import a p2sh-p2wpkh descriptor and have it set to active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": True,\n+                              },\n+                              success=False,\n+                              error_code=-8,\n+                              error_message=\"Active descriptors must be ranged\")\n+\n+        self.log.info(\"Should import a (non-active) p2sh-p2wpkh descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"sh(wpkh(\" + key.pubkey + \"))\"),\n+                               \"timestamp\": \"now\",\n+                               \"active\": False,\n+                              },\n+                              success=True)\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        test_address(w1,\n+                     key.p2sh_p2wpkh_addr,\n+                     ismine=True,\n+                     solvable=True)\n+\n+        # # Test importing of a multisig descriptor\n+        key1 = get_generate_key()\n+        key2 = get_generate_key()\n+        self.log.info(\"Should import a 1-of-2 bare multisig from descriptor\")\n+        self.test_importdesc({\"desc\": descsum_create(\"multi(1,\" + key1.pubkey + \",\" + key2.pubkey + \")\"),\n+                              \"timestamp\": \"now\"},\n+                             success=True)\n+        self.log.info(\"Should not treat individual keys from the imported bare multisig as watchonly\")\n+        test_address(w1,\n+                     key1.p2pkh_addr,\n+                     ismine=False)\n+\n+        # # Test ranged descriptors\n+        xpriv = \"tprv8ZgxMBicQKsPeuVhWwi6wuMQGfPKi9Li5GtX35jVNknACgqe3CY4g5xgkfDDJcmtF7o1QnxWDRYw4H5P26PXq7sbcUkEqeR4fg3Kxp2tigg\"\n+        xpub = \"tpubD6NzVbkrYhZ4YNXVQbNhMK1WqguFsUXceaVJKbmno2aZ3B6QfbMeraaYvnBSGpV3vxLyTTK9DYT1yoEck4XUScMzXoQ2U2oSmE2JyMedq3H\"\n+        addresses = [\"2N7yv4p8G8yEaPddJxY41kPihnWvs39qCMf\", \"2MsHxyb2JS3pAySeNUsJ7mNnurtpeenDzLA\"] # hdkeypath=m/0'/0'/0' and 1'\n+        addresses += [\"bcrt1qrd3n235cj2czsfmsuvqqpr3lu6lg0ju7scl8gn\", \"bcrt1qfqeppuvj0ww98r6qghmdkj70tv8qpchehegrg8\"] # wpkh subscripts corresponding to the above addresses\n+        desc = \"sh(wpkh(\" + xpub + \"/0/0/*\" + \"))\"\n+\n+        self.log.info(\"Ranged descriptors cannot have labels\")\n+        self.test_importdesc({\"desc\":descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": [0, 100],\n+                              \"label\": \"test\"},\n+                              success=False,\n+                              error_code=-8,\n+                              error_message='Ranged descriptors should not have a label')\n+\n+        self.log.info(\"Private keys required for private keys enabled wallet\")\n+        self.test_importdesc({\"desc\":descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": [0, 100]},\n+                              success=False,\n+                              error_code=-4,\n+                              error_message='Cannot import descriptor without private keys to a wallet with private keys enabled',\n+                              wallet=wpriv)\n+\n+        self.log.info(\"Ranged descriptor import should warn without a specified range\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=['Range not given, using default keypool range'])\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 0)\n+\n+        # # Test importing of a ranged descriptor with xpriv\n+        self.log.info(\"Should not import a ranged descriptor that includes xpriv into a watch-only wallet\")\n+        desc = \"sh(wpkh(\" + xpriv + \"/0'/0'/*'\" + \"))\"\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                              \"timestamp\": \"now\",\n+                              \"range\": 1},\n+                             success=False,\n+                             error_code=-4,\n+                             error_message='Cannot import private keys to a wallet with private keys disabled')\n+        for address in addresses:\n+            test_address(w1,\n+                         address,\n+                         ismine=False,\n+                         solvable=False)\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": -1},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [-1, 10]},\n+                              success=False, error_code=-8, error_message='Range should be greater or equal than 0')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [(2 << 31 + 1) - 1000000, (2 << 31 + 1)]},\n+                              success=False, error_code=-8, error_message='End of range is too high')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [2, 1]},\n+                              success=False, error_code=-8, error_message='Range specified as [begin,end] must not have begin after end')\n+\n+        self.test_importdesc({\"desc\": descsum_create(desc), \"timestamp\": \"now\", \"range\": [0, 1000001]},\n+                              success=False, error_code=-8, error_message='Range is too large')\n+\n+        # Make sure ranged imports import keys in order\n+        w1 = self.nodes[1].get_wallet_rpc('w1')\n+        self.log.info('Key ranges should be imported in order')\n+        xpub = \"tpubDAXcJ7s7ZwicqjprRaEWdPoHKrCS215qxGYxpusRLLmJuT69ZSicuGdSfyvyKpvUNYBW1s2U3NSrT6vrCYB9e6nZUEvrqnwXPF8ArTCRXMY\"\n+        addresses = [\n+            'bcrt1qtmp74ayg7p24uslctssvjm06q5phz4yrxucgnv', # m/0'/0'/0\n+            'bcrt1q8vprchan07gzagd5e6v9wd7azyucksq2xc76k8', # m/0'/0'/1\n+            'bcrt1qtuqdtha7zmqgcrr26n2rqxztv5y8rafjp9lulu', # m/0'/0'/2\n+            'bcrt1qau64272ymawq26t90md6an0ps99qkrse58m640', # m/0'/0'/3\n+            'bcrt1qsg97266hrh6cpmutqen8s4s962aryy77jp0fg0', # m/0'/0'/4\n+        ]\n+\n+        self.test_importdesc({'desc': descsum_create('wpkh([80002067/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+        self.test_importdesc({'desc': descsum_create('sh(wpkh([abcdef12/0h/0h]' + xpub + '/*))'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678/0h/0h]' + xpub + '/*)'),\n+                              'active': True,\n+                              'range' : [0, 2],\n+                              'timestamp': 'now'\n+                             },\n+                             success=True)\n+\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 5 * 3)\n+        for i, expected_addr in enumerate(addresses):\n+            received_addr = w1.getnewaddress('', 'bech32')\n+            assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'bech32')\n+            assert_equal(received_addr, expected_addr)\n+            bech32_addr_info = w1.getaddressinfo(received_addr)\n+            assert_equal(bech32_addr_info['desc'][:23], 'wpkh([80002067/0\\'/0\\'/{}]'.format(i))\n+\n+            shwpkh_addr = w1.getnewaddress('', 'p2sh-segwit')\n+            shwpkh_addr_info = w1.getaddressinfo(shwpkh_addr)\n+            assert_equal(shwpkh_addr_info['desc'][:26], 'sh(wpkh([abcdef12/0\\'/0\\'/{}]'.format(i))\n+\n+            pkh_addr = w1.getnewaddress('', 'legacy')\n+            pkh_addr_info = w1.getaddressinfo(pkh_addr)\n+            assert_equal(pkh_addr_info['desc'][:22], 'pkh([12345678/0\\'/0\\'/{}]'.format(i))\n+\n+            assert_equal(w1.getwalletinfo()['keypoolsize'], 4 * 3) # After retrieving a key, we don't refill the keypool again, so it's one less for each address type\n+        w1.keypoolrefill()\n+        assert_equal(w1.getwalletinfo()['keypoolsize'], 5 * 3)\n+\n+        # Check active=False default\n+        self.log.info('Check imported descriptors are not active by default')\n+        self.test_importdesc({'desc': descsum_create('pkh([12345678/0h/0h]' + xpub + '/*)'),\n+                              'range' : [0, 2],\n+                              'timestamp': 'now',\n+                              'internal': True\n+                             },\n+                             success=True)\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', w1.getrawchangeaddress, 'legacy')\n+\n+        # # Test importing a descriptor containing a WIF private key\n+        wif_priv = \"cTe1f5rdT8A8DFgVWTjyPwACsDPJM9ff4QngFxUixCSvvbg1x6sh\"\n+        address = \"2MuhcG52uHPknxDgmGPsV18jSHFBnnRgjPg\"\n+        desc = \"sh(wpkh(\" + wif_priv + \"))\"\n+        self.log.info(\"Should import a descriptor with a WIF private key as spendable\")\n+        self.test_importdesc({\"desc\": descsum_create(desc),\n+                               \"timestamp\": \"now\"},\n+                              success=True,\n+                              wallet=wpriv)\n+        test_address(wpriv,\n+                     address,\n+                     solvable=True,\n+                     ismine=True)\n+        txid = w0.sendtoaddress(address, 49.99995540)\n+        w0.generatetoaddress(6, w0.getnewaddress())\n+        self.sync_blocks()\n+        tx = wpriv.createrawtransaction([{\"txid\": txid, \"vout\": 0}], {w0.getnewaddress(): 49.999})\n+        signed_tx = wpriv.signrawtransactionwithwallet(tx)\n+        w1.sendrawtransaction(signed_tx['hex'])\n+\n+        # Make sure that we can use import and use multisig as addresses\n+        self.log.info('Test that multisigs can be imported, signed for, and getnewaddress\\'d')\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv\", disable_private_keys=False, blank=True, descriptors=True)\n+        wmulti_priv = self.nodes[1].get_wallet_rpc(\"wmulti_priv\")\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/0h/0h/*))#m2sr93jn\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,tprv8ZgxMBicQKsPeonDt8Ka2mrQmHa61hQ5FQCsvWBTpSNzBFgM58cV2EuXNAHF14VawVpznnme3SuTbA62sGriwWyKifJmXntfNeK7zeqMCj1/84h/1h/0h/*))#q3sztvx5\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_priv)\n+\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 1001) # Range end (1000) is inclusive, so 1001 addresses generated\n+        addr = wmulti_priv.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qdt0qy5p7dzhxzmegnn4ulzhard33s2809arjqgjndx87rv5vd0fq2czhy8') # Derived at m/84'/0'/0'/0\n+        change_addr = wmulti_priv.getrawchangeaddress('bech32')\n+        assert_equal(change_addr, 'bcrt1qt9uhe3a9hnq7vajl7a094z4s3crm9ttf8zw3f5v9gr2nyd7e3lnsy44n8e')\n+        assert_equal(wmulti_priv.getwalletinfo()['keypoolsize'], 1000)\n+        txid = w0.sendtoaddress(addr, 10)\n+        self.nodes[0].generate(6)\n+        send_txid = wmulti_priv.sendtoaddress(w0.getnewaddress(), 8)\n+        decoded = wmulti_priv.decoderawtransaction(wmulti_priv.gettransaction(send_txid)['hex'])\n+        assert_equal(len(decoded['vin'][0]['txinwitness']), 4)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_pub\", disable_private_keys=True, blank=True, descriptors=True)\n+        wmulti_pub = self.nodes[1].get_wallet_rpc(\"wmulti_pub\")\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 0)\n+\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))#tsry0s5e\",\n+                            \"active\": True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+        self.test_importdesc({\"desc\":\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))#c08a2rzv\",\n+                            \"active\": True,\n+                            \"internal\" : True,\n+                            \"range\": 1000,\n+                            \"next_index\": 0,\n+                            \"timestamp\": \"now\"},\n+                            success=True,\n+                            wallet=wmulti_pub)\n+\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 1000) # The first one was already consumed by previous import and is detected as used\n+        addr = wmulti_pub.getnewaddress('', 'bech32')\n+        assert_equal(addr, 'bcrt1qp8s25ckjl7gr6x2q3dx3tn2pytwp05upkjztk6ey857tt50r5aeqn6mvr9') # Derived at m/84'/0'/0'/1\n+        change_addr = wmulti_pub.getrawchangeaddress('bech32')\n+        assert_equal(change_addr, 'bcrt1qt9uhe3a9hnq7vajl7a094z4s3crm9ttf8zw3f5v9gr2nyd7e3lnsy44n8e')\n+        assert_equal(wmulti_pub.getwalletinfo()['keypoolsize'], 999)\n+        txid = w0.sendtoaddress(addr, 10)\n+        vout = find_vout_for_address(self.nodes[0], txid, addr)\n+        self.nodes[0].generate(6)\n+        self.sync_all()\n+        assert_equal(wmulti_pub.getbalance(), wmulti_priv.getbalance())\n+\n+        self.log.info(\"Multisig with distributed keys\")\n+        self.nodes[1].createwallet(wallet_name=\"wmulti_priv1\", descriptors=True)\n+        wmulti_priv1 = self.nodes[1].get_wallet_rpc(\"wmulti_priv1\")\n+        res = wmulti_priv1.importdescriptors([\n+        {\n+            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/0h/0h/*,[59b09cd6/84h/0h/0h]tpubDDBF2BTR6s8drwrfDei8WxtckGuSm1cyoKxYY1QaKSBFbHBYQArWhHPA6eJrzZej6nfHGLSURYSLHr7GuYch8aY5n61tGqgn8b4cXrMuoPH/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"active\": True,\n+            \"range\": 1000,\n+            \"next_index\": 0,\n+            \"timestamp\": \"now\"\n+        },\n+        {\n+            \"desc\": descsum_create(\"wsh(multi(2,tprv8ZgxMBicQKsPevADjDCWsa6DfhkVXicu8NQUzfibwX2MexVwW4tCec5mXdCW8kJwkzBRRmAay1KZya4WsehVvjTGVW6JLqiqd8DdZ4xSg52/84h/1h/0h/*,[59b09cd6/84h/1h/0h]tpubDCYfZY2ceyHzYzMMVPt9MNeiqtQ2T7Uyp9QSFwYXh8Vi9iJFYXcuphJaGXfF3jUQJi5Y3GMNXvM11gaL4txzZgNGK22BFAwMXynnzv4z2Jh/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"active\": True,\n+            \"internal\" : True,\n+            \"range\": 1000,\n+            \"next_index\": 0,\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(res[0]['success'], True)\n+        assert_equal(res[0]['warnings'][0], 'Not all private keys provided. Some wallet functionality may return unexpected errors')\n+        assert_equal(res[1]['success'], True)\n+        assert_equal(res[1]['warnings'][0], 'Not all private keys provided. Some wallet functionality may return unexpected errors')\n+\n+        self.nodes[1].createwallet(wallet_name='wmulti_priv2', blank=True, descriptors=True)\n+        wmulti_priv2 = self.nodes[1].get_wallet_rpc('wmulti_priv2')\n+        res = wmulti_priv2.importdescriptors([\n+        {\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/0h/0h]tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/0h/0h/*,[e81a0532/84h/0h/0h]tpubDCsWoW1kuQB9kG5MXewHqkbjPtqPueRnXju7uM2NK7y3JYb2ajAZ9EiuZXNNuE4661RAfriBWhL8UsnAPpk8zrKKnZw1Ug7X4oHgMdZiU4E/*))\"),\n+            \"active\": True,\n+            \"range\": 1000,\n+            \"next_index\": 0,\n+            \"timestamp\": \"now\"\n+        },\n+        {\n+            \"desc\": descsum_create(\"wsh(multi(2,[7b2d0242/84h/1h/0h]tpubDCXqdwWZcszwqYJSnZp8eARkxGJfHAk23KDxbztV4BbschfaTfYLTcSkSJ3TN64dRqwa1rnFUScsYormKkGqNbbPwkorQimVevXjxzUV9Gf/*,tprv8ZgxMBicQKsPdSNWUhDiwTScDr6JfkZuLshTRwzvZGnMSnGikV6jxpmdDkC3YRc4T3GD6Nvg9uv6hQg73RVv1EiTXDZwxVbsLugVHU8B1aq/84h/1h/0h/*,[e81a0532/84h/1h/0h]tpubDC6UGqnsQStngYuGD4MKsMy7eD1Yg9NTJfPdvjdG2JE5oZ7EsSL3WHg4Gsw2pR5K39ZwJ46M1wZayhedVdQtMGaUhq5S23PH6fnENK3V1sb/*))\"),\n+            \"active\": True,\n+            \"internal\" : True,\n+            \"range\": 1000,\n+            \"next_index\": 0,\n+            \"timestamp\": \"now\"\n+        }])\n+        assert_equal(res[0]['success'], True)\n+        assert_equal(res[0]['warnings'][0], 'Not all private keys provided. Some wallet functionality may return unexpected errors')\n+        assert_equal(res[1]['success'], True)\n+        assert_equal(res[1]['warnings'][0], 'Not all private keys provided. Some wallet functionality may return unexpected errors')\n+\n+        rawtx = self.nodes[1].createrawtransaction([{'txid': txid, 'vout': vout}], {w0.getnewaddress(): 9.999})\n+        tx_signed_1 = wmulti_priv1.signrawtransactionwithwallet(rawtx)\n+        assert_equal(tx_signed_1['complete'], False)\n+        tx_signed_2 = wmulti_priv2.signrawtransactionwithwallet(tx_signed_1['hex'])\n+        assert_equal(tx_signed_2['complete'], True)\n+        self.nodes[1].sendrawtransaction(tx_signed_2['hex'])\n+\n+        self.log.info(\"Combo descriptors cannot be active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"combo(tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*)\"),\n+                              \"active\": True,\n+                              \"range\": 1,\n+                              \"timestamp\": \"now\"},\n+                              success=False,\n+                              error_code=-4,\n+                              error_message=\"Combo descriptors cannot be set to active\")\n+\n+        self.log.info(\"Descriptors with no type cannot be active\")\n+        self.test_importdesc({\"desc\": descsum_create(\"pk(tpubDCJtdt5dgJpdhW4MtaVYDhG4T4tF6jcLR1PxL43q9pq1mxvXgMS9Mzw1HnXG15vxUGQJMMSqCQHMTy3F1eW5VkgVroWzchsPD5BUojrcWs8/*)\"),\n+                              \"active\": True,\n+                              \"range\": 1,\n+                              \"timestamp\": \"now\"},\n+                              success=True,\n+                              warnings=[\"Unknown output type, cannot set descriptor to active.\"])\n+\n+if __name__ == '__main__':\n+    ImportDescriptorsTest().main()"
      }
    ]
  },
  {
    "sha": "1346e14831489f9c8f53a08f9dfed61d55d53c6f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMzQ2ZTE0ODMxNDg5ZjljOGY1M2EwOGY5ZGZlZDYxZDU1ZDUzYzZm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-15T20:12:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Functional tests for descriptor wallets",
      "tree": {
        "sha": "9d206cabeff9973970421d3c5818c9677d92ac81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9d206cabeff9973970421d3c5818c9677d92ac81"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f193ea889ddb53d9a5c47647966681d525e38368",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f193ea889ddb53d9a5c47647966681d525e38368",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f193ea889ddb53d9a5c47647966681d525e38368"
      }
    ],
    "stats": {
      "total": 145,
      "additions": 145,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1c5afef3a8e3481d7347eb4296be92a020348143",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1346e14831489f9c8f53a08f9dfed61d55d53c6f/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1346e14831489f9c8f53a08f9dfed61d55d53c6f/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=1346e14831489f9c8f53a08f9dfed61d55d53c6f",
        "patch": "@@ -147,6 +147,7 @@\n     'p2p_addr_relay.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n+    'wallet_descriptor.py',\n     'p2p_mempool.py',\n     'p2p_filter.py',\n     'rpc_setban.py',"
      },
      {
        "sha": "9632c55b82d1d80b406dcf2adb40cfe9dd69b3c1",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1346e14831489f9c8f53a08f9dfed61d55d53c6f/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1346e14831489f9c8f53a08f9dfed61d55d53c6f/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=1346e14831489f9c8f53a08f9dfed61d55d53c6f",
        "patch": "@@ -0,0 +1,144 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2019 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Test descriptor wallet function.\"\"\"\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error\n+)\n+\n+\n+class WalletDescriptorTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 1\n+        self.extra_args = [['-keypool=100']]\n+\n+    def skip_test_if_missing_module(self):\n+        self.skip_if_no_wallet()\n+\n+    def run_test(self):\n+        # Make a descriptor wallet\n+        self.log.info(\"Making a descriptor wallet\")\n+        self.nodes[0].createwallet(wallet_name=\"desc1\", descriptors=True)\n+        self.nodes[0].unloadwallet(\"\")\n+\n+        # A descriptor wallet should have 100 addresses * 3 types = 300 keys\n+        self.log.info(\"Checking wallet info\")\n+        wallet_info = self.nodes[0].getwalletinfo()\n+        assert_equal(wallet_info['keypoolsize'], 300)\n+        assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+        assert 'keypoololdest' not in wallet_info\n+\n+        # Check that getnewaddress works\n+        self.log.info(\"Test that getnewaddress and getrawchangeaddress work\")\n+        addr = self.nodes[0].getnewaddress(\"\", \"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('pkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/1\\'/0\\'/0/0')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('sh(wpkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/1\\'/0\\'/0/0')\n+\n+        addr = self.nodes[0].getnewaddress(\"\", \"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('wpkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/1\\'/0\\'/0/0')\n+\n+        # Check that getrawchangeaddress works\n+        addr = self.nodes[0].getrawchangeaddress(\"legacy\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('pkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/44\\'/1\\'/0\\'/1/0')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"p2sh-segwit\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('sh(wpkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/49\\'/1\\'/0\\'/1/0')\n+\n+        addr = self.nodes[0].getrawchangeaddress(\"bech32\")\n+        addr_info = self.nodes[0].getaddressinfo(addr)\n+        assert addr_info['desc'].startswith('wpkh(')\n+        assert_equal(addr_info['hdkeypath'], 'm/84\\'/1\\'/0\\'/1/0')\n+\n+        # Make a wallet to receive coins at\n+        self.nodes[0].createwallet(wallet_name=\"desc2\", descriptors=True)\n+        recv_wrpc = self.nodes[0].get_wallet_rpc(\"desc2\")\n+        send_wrpc = self.nodes[0].get_wallet_rpc(\"desc1\")\n+\n+        # Generate some coins\n+        send_wrpc.generatetoaddress(101, send_wrpc.getnewaddress())\n+\n+        # Make transactions\n+        self.log.info(\"Test sending and receiving\")\n+        addr = recv_wrpc.getnewaddress()\n+        send_wrpc.sendtoaddress(addr, 10)\n+\n+        # Make sure things are disabled\n+        self.log.info(\"Test disabled RPCs\")\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importprivkey, \"cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW\")\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importpubkey, send_wrpc.getaddressinfo(send_wrpc.getnewaddress()))\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importaddress, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importmulti, [])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.addmultisigaddress, 1, [recv_wrpc.getnewaddress()])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpprivkey, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.sethdseed)\n+\n+        self.log.info(\"Test encryption\")\n+        # Get the master fingerprint before encrypt\n+        info1 = send_wrpc.getaddressinfo(send_wrpc.getnewaddress())\n+\n+        # Encrypt wallet 0\n+        send_wrpc.encryptwallet('pass')\n+        send_wrpc.walletpassphrase('pass', 10)\n+        addr = send_wrpc.getnewaddress()\n+        info2 = send_wrpc.getaddressinfo(addr)\n+        assert info1['hdmasterfingerprint'] != info2['hdmasterfingerprint']\n+        send_wrpc.walletlock()\n+        assert 'hdmasterfingerprint' in send_wrpc.getaddressinfo(send_wrpc.getnewaddress())\n+        info3 = send_wrpc.getaddressinfo(addr)\n+        assert_equal(info2['desc'], info3['desc'])\n+\n+        self.log.info(\"Test that getnewaddress still works after keypool is exhausted in an encrypted wallet\")\n+        for i in range(0, 500):\n+            send_wrpc.getnewaddress()\n+\n+        self.log.info(\"Test that unlock is needed when deriving only hardened keys in an encrypted wallet\")\n+        send_wrpc.walletpassphrase('pass', 10)\n+        send_wrpc.importdescriptors([{\n+            \"desc\": \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/*h)#y4dfsj7n\",\n+            \"timestamp\": \"now\",\n+            \"range\": [0,10],\n+            \"active\": True\n+        }])\n+        send_wrpc.walletlock()\n+        # Exhaust keypool of 100\n+        for i in range(0, 100):\n+            send_wrpc.getnewaddress(address_type='bech32')\n+        # This should now error\n+        assert_raises_rpc_error(-12, \"Keypool ran out, please call keypoolrefill first\", send_wrpc.getnewaddress, '', 'bech32')\n+\n+        self.log.info(\"Test born encrypted wallets\")\n+        self.nodes[0].createwallet('desc_enc', False, False, 'pass', False, True)\n+        enc_rpc = self.nodes[0].get_wallet_rpc('desc_enc')\n+        enc_rpc.getnewaddress() # Makes sure that we can get a new address from a born encrypted wallet\n+\n+        self.log.info(\"Test blank descriptor wallets\")\n+        self.nodes[0].createwallet(wallet_name='desc_blank', blank=True, descriptors=True)\n+        blank_rpc = self.nodes[0].get_wallet_rpc('desc_blank')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', blank_rpc.getnewaddress)\n+\n+        self.log.info(\"Test descriptor wallet with disabled private keys\")\n+        self.nodes[0].createwallet(wallet_name='desc_no_priv', disable_private_keys=True, descriptors=True)\n+        nopriv_rpc = self.nodes[0].get_wallet_rpc('desc_no_priv')\n+        assert_raises_rpc_error(-4, 'This wallet has no available keys', nopriv_rpc.getnewaddress)\n+\n+if __name__ == '__main__':\n+    WalletDescriptorTest().main ()"
      }
    ]
  },
  {
    "sha": "388ba94231f2f10a0be751c562cdd4650510a90a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozODhiYTk0MjMxZjJmMTBhMGJlNzUxYzU2MmNkZDQ2NTA1MTBhOTBh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-22T18:47:17Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Change wallet_encryption.py to use signmessage instead of dumpprivkey",
      "tree": {
        "sha": "7d0aae07dc8512eb756440a93da0dba2a5013985",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7d0aae07dc8512eb756440a93da0dba2a5013985"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/388ba94231f2f10a0be751c562cdd4650510a90a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388ba94231f2f10a0be751c562cdd4650510a90a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/388ba94231f2f10a0be751c562cdd4650510a90a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388ba94231f2f10a0be751c562cdd4650510a90a/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1346e14831489f9c8f53a08f9dfed61d55d53c6f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1346e14831489f9c8f53a08f9dfed61d55d53c6f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1346e14831489f9c8f53a08f9dfed61d55d53c6f"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 13,
      "deletions": 11
    },
    "files": [
      {
        "sha": "6cd82ad25074f921a4ec4000d0936d149b2d02ad",
        "filename": "test/functional/wallet_encryption.py",
        "status": "modified",
        "additions": 13,
        "deletions": 11,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/388ba94231f2f10a0be751c562cdd4650510a90a/test/functional/wallet_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/388ba94231f2f10a0be751c562cdd4650510a90a/test/functional/wallet_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_encryption.py?ref=388ba94231f2f10a0be751c562cdd4650510a90a",
        "patch": "@@ -8,7 +8,6 @@\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n-    assert_equal,\n     assert_raises_rpc_error,\n     assert_greater_than,\n     assert_greater_than_or_equal,\n@@ -27,10 +26,10 @@ def run_test(self):\n         passphrase2 = \"SecondWalletPassphrase\"\n \n         # Make sure the wallet isn't encrypted first\n-        address = self.nodes[0].getnewaddress()\n-        privkey = self.nodes[0].dumpprivkey(address)\n-        assert_equal(privkey[:1], \"c\")\n-        assert_equal(len(privkey), 52)\n+        msg = \"test message\"\n+        address = self.nodes[0].getnewaddress(address_type='legacy')\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         assert_raises_rpc_error(-15, \"Error: running with an unencrypted wallet, but walletpassphrase was called\", self.nodes[0].walletpassphrase, 'ff', 1)\n         assert_raises_rpc_error(-15, \"Error: running with an unencrypted wallet, but walletpassphrasechange was called.\", self.nodes[0].walletpassphrasechange, 'ff', 'ff')\n \n@@ -39,33 +38,36 @@ def run_test(self):\n         self.nodes[0].encryptwallet(passphrase)\n \n         # Test that the wallet is encrypted\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n         assert_raises_rpc_error(-15, \"Error: running with an encrypted wallet, but encryptwallet was called.\", self.nodes[0].encryptwallet, 'ff')\n         assert_raises_rpc_error(-8, \"passphrase can not be empty\", self.nodes[0].walletpassphrase, '', 1)\n         assert_raises_rpc_error(-8, \"passphrase can not be empty\", self.nodes[0].walletpassphrasechange, '', 'ff')\n \n         # Check that walletpassphrase works\n         self.nodes[0].walletpassphrase(passphrase, 2)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n \n         # Check that the timeout is right\n         time.sleep(3)\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n \n         # Test wrong passphrase\n         assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase + \"wrong\", 10)\n \n         # Test walletlock\n         self.nodes[0].walletpassphrase(passphrase, 84600)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         self.nodes[0].walletlock()\n-        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].dumpprivkey, address)\n+        assert_raises_rpc_error(-13, \"Please enter the wallet passphrase with walletpassphrase first\", self.nodes[0].signmessage, address, msg)\n \n         # Test passphrase changes\n         self.nodes[0].walletpassphrasechange(passphrase, passphrase2)\n         assert_raises_rpc_error(-14, \"wallet passphrase entered was incorrect\", self.nodes[0].walletpassphrase, passphrase, 10)\n         self.nodes[0].walletpassphrase(passphrase2, 10)\n-        assert_equal(privkey, self.nodes[0].dumpprivkey(address))\n+        sig = self.nodes[0].signmessage(address, msg)\n+        assert self.nodes[0].verifymessage(address, sig, msg)\n         self.nodes[0].walletlock()\n \n         # Test timeout bounds"
      }
    ]
  },
  {
    "sha": "3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYzE5ZmRkMmEyZmQ1Mzk0ZmNmYTc1YjJiYTg0YWIyMjc3Y2JkYWJm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-02-14T02:06:29Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Return error when no ScriptPubKeyMan is available for specified type\n\nWhen a CWallet doesn't have a ScriptPubKeyMan for the requested type\nin GetNewDestination, give a meaningful error. Also handle this in\nQt which did not do anything with errors.",
      "tree": {
        "sha": "d6aa7b17c0c110b6cfe9cc9fbc771a2078568a04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d6aa7b17c0c110b6cfe9cc9fbc771a2078568a04"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "388ba94231f2f10a0be751c562cdd4650510a90a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/388ba94231f2f10a0be751c562cdd4650510a90a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/388ba94231f2f10a0be751c562cdd4650510a90a"
      }
    ],
    "stats": {
      "total": 45,
      "additions": 35,
      "deletions": 10
    },
    "files": [
      {
        "sha": "5debded4eaae45ad7e06655022bf0af143b9c289",
        "filename": "src/qt/receivecoinsdialog.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 10,
        "changes": 43,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf/src/qt/receivecoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf/src/qt/receivecoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/receivecoinsdialog.cpp?ref=3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
        "patch": "@@ -157,17 +157,40 @@ void ReceiveCoinsDialog::on_receiveButton_clicked()\n         }\n     }\n     address = model->getAddressTableModel()->addRow(AddressTableModel::Receive, label, \"\", address_type);\n-    SendCoinsRecipient info(address, label,\n-        ui->reqAmount->value(), ui->reqMessage->text());\n-    ReceiveRequestDialog *dialog = new ReceiveRequestDialog(this);\n-    dialog->setAttribute(Qt::WA_DeleteOnClose);\n-    dialog->setModel(model);\n-    dialog->setInfo(info);\n-    dialog->show();\n-    clear();\n \n-    /* Store request for later reference */\n-    model->getRecentRequestsTableModel()->addNewRequest(info);\n+    switch(model->getAddressTableModel()->getEditStatus())\n+    {\n+    case AddressTableModel::EditStatus::OK: {\n+        // Success\n+        SendCoinsRecipient info(address, label,\n+            ui->reqAmount->value(), ui->reqMessage->text());\n+        ReceiveRequestDialog *dialog = new ReceiveRequestDialog(this);\n+        dialog->setAttribute(Qt::WA_DeleteOnClose);\n+        dialog->setModel(model);\n+        dialog->setInfo(info);\n+        dialog->show();\n+\n+        /* Store request for later reference */\n+        model->getRecentRequestsTableModel()->addNewRequest(info);\n+        break;\n+    }\n+    case AddressTableModel::EditStatus::WALLET_UNLOCK_FAILURE:\n+        QMessageBox::critical(this, windowTitle(),\n+            tr(\"Could not unlock wallet.\"),\n+            QMessageBox::Ok, QMessageBox::Ok);\n+        break;\n+    case AddressTableModel::EditStatus::KEY_GENERATION_FAILURE:\n+        QMessageBox::critical(this, windowTitle(),\n+            tr(\"Could not generate new %1 address\").arg(QString::fromStdString(FormatOutputType(address_type))),\n+            QMessageBox::Ok, QMessageBox::Ok);\n+        break;\n+    // These aren't valid return values for our action\n+    case AddressTableModel::EditStatus::INVALID_ADDRESS:\n+    case AddressTableModel::EditStatus::DUPLICATE_ADDRESS:\n+    case AddressTableModel::EditStatus::NO_CHANGES:\n+        assert(false);\n+    }\n+    clear();\n }\n \n void ReceiveCoinsDialog::on_recentRequestsView_doubleClicked(const QModelIndex &index)"
      },
      {
        "sha": "19ad61ac5edaeec5b4f3829cf37d85fc4f7a6919",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
        "patch": "@@ -3227,6 +3227,8 @@ bool CWallet::GetNewDestination(const OutputType type, const std::string label,\n     if (spk_man) {\n         spk_man->TopUp();\n         result = spk_man->GetNewDestination(type, dest, error);\n+    } else {\n+        error = strprintf(\"Error: No %s addresses available.\", FormatOutputType(type));\n     }\n     if (result) {\n         SetAddressBook(dest, label, \"receive\");"
      }
    ]
  },
  {
    "sha": "886e0d75f5fea2421190aa4812777d89f68962cc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ODZlMGQ3NWY1ZmVhMjQyMTE5MGFhNDgxMjc3N2Q4OWY2ODk2MmNj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-03-31T19:30:04Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Implement CWallet::IsSpentKey for non-LegacySPKMans",
      "tree": {
        "sha": "ab86269efef2243335ea56e57257ae3c838ae48e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ab86269efef2243335ea56e57257ae3c838ae48e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/886e0d75f5fea2421190aa4812777d89f68962cc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886e0d75f5fea2421190aa4812777d89f68962cc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/886e0d75f5fea2421190aa4812777d89f68962cc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886e0d75f5fea2421190aa4812777d89f68962cc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3c19fdd2a2fd5394fcfa75b2ba84ab2277cbdabf"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 23,
      "deletions": 16
    },
    "files": [
      {
        "sha": "b6f25de64e7e701ff1399a4639f0e414d0d11771",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 16,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/886e0d75f5fea2421190aa4812777d89f68962cc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/886e0d75f5fea2421190aa4812777d89f68962cc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=886e0d75f5fea2421190aa4812777d89f68962cc",
        "patch": "@@ -754,22 +754,29 @@ bool CWallet::IsSpentKey(const uint256& hash, unsigned int n) const\n     const CWalletTx* srctx = GetWalletTx(hash);\n     if (srctx) {\n         assert(srctx->tx->vout.size() > n);\n-        LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n-        // When descriptor wallets arrive, these additional checks are\n-        // likely superfluous and can be optimized out\n-        assert(spk_man != nullptr);\n-        for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n-            WitnessV0KeyHash wpkh_dest(keyid);\n-            if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n-            if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n-                return true;\n-            }\n-            PKHash pkh_dest(keyid);\n-            if (GetDestData(pkh_dest, \"used\", nullptr)) {\n-                return true;\n+        CTxDestination dest;\n+        if (!ExtractDestination(srctx->tx->vout[n].scriptPubKey, dest)) {\n+            return false;\n+        }\n+        if (GetDestData(dest, \"used\", nullptr)) {\n+            return true;\n+        }\n+        if (IsLegacy()) {\n+            LegacyScriptPubKeyMan* spk_man = GetLegacyScriptPubKeyMan();\n+            assert(spk_man != nullptr);\n+            for (const auto& keyid : GetAffectedKeys(srctx->tx->vout[n].scriptPubKey, *spk_man)) {\n+                WitnessV0KeyHash wpkh_dest(keyid);\n+                if (GetDestData(wpkh_dest, \"used\", nullptr)) {\n+                    return true;\n+                }\n+                ScriptHash sh_wpkh_dest(GetScriptForDestination(wpkh_dest));\n+                if (GetDestData(sh_wpkh_dest, \"used\", nullptr)) {\n+                    return true;\n+                }\n+                PKHash pkh_dest(keyid);\n+                if (GetDestData(pkh_dest, \"used\", nullptr)) {\n+                    return true;\n+                }\n             }\n         }\n     }"
      }
    ]
  },
  {
    "sha": "cf060628590fab87d73f278e744d70ef2d5d81db",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZjA2MDYyODU5MGZhYjg3ZDczZjI3OGU3NDRkNzBlZjJkNWQ4MWRi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-03T01:13:02Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Correctly check for default wallet",
      "tree": {
        "sha": "dc3bfdf261571580b79a467d1f22b5498dcf69db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dc3bfdf261571580b79a467d1f22b5498dcf69db"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cf060628590fab87d73f278e744d70ef2d5d81db",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf060628590fab87d73f278e744d70ef2d5d81db",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cf060628590fab87d73f278e744d70ef2d5d81db",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf060628590fab87d73f278e744d70ef2d5d81db/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "886e0d75f5fea2421190aa4812777d89f68962cc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/886e0d75f5fea2421190aa4812777d89f68962cc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/886e0d75f5fea2421190aa4812777d89f68962cc"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 6,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8bac0608a940c03015c0375eacd5060c77973e64",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cf060628590fab87d73f278e744d70ef2d5d81db/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cf060628590fab87d73f278e744d70ef2d5d81db/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=cf060628590fab87d73f278e744d70ef2d5d81db",
        "patch": "@@ -100,5 +100,10 @@ WalletLocation::WalletLocation(const std::string& name)\n \n bool WalletLocation::Exists() const\n {\n-    return fs::symlink_status(m_path).type() != fs::file_not_found;\n+    fs::path path = m_path;\n+    // For the default wallet, check specifically for the wallet.dat file\n+    if (m_name.empty()) {\n+        path = fs::absolute(\"wallet.dat\", m_path);\n+    }\n+    return fs::symlink_status(path).type() != fs::file_not_found;\n }"
      }
    ]
  },
  {
    "sha": "869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjlmN2FiMzBhZWI0ZDdmYmQ1NjNjNTM1YjU1NDY3YThhMDQzMGNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-02T22:09:15Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "tests: Add RPCOverloadWrapper which overloads some disabled RPCs\n\nRPCOverloadWrapper overloads some deprecated or disabled RPCs with\nan implementation using other RPCs to avoid having a ton of code churn\naround replacing those RPCs.",
      "tree": {
        "sha": "3c6122dd0783cfab49496496162029d92d81a33e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3c6122dd0783cfab49496496162029d92d81a33e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cf060628590fab87d73f278e744d70ef2d5d81db",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cf060628590fab87d73f278e744d70ef2d5d81db",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cf060628590fab87d73f278e744d70ef2d5d81db"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 125,
      "deletions": 24
    },
    "files": [
      {
        "sha": "166c28d376e90941519f46e253615e84b6030be2",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
        "patch": "@@ -94,7 +94,7 @@ def run_test(self):\n \n         # w1: regular wallet, created on master: update this test when default\n         #     wallets can no longer be opened by older versions.\n-        node_master.createwallet(wallet_name=\"w1\")\n+        node_master.rpc.createwallet(wallet_name=\"w1\")\n         wallet = node_master.get_wallet_rpc(\"w1\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n@@ -120,17 +120,17 @@ def run_test(self):\n         self.nodes[1].abandontransaction(tx3_id)\n \n         # w1_v19: regular wallet, created with v0.19\n-        node_v19.createwallet(wallet_name=\"w1_v19\")\n+        node_v19.rpc.createwallet(wallet_name=\"w1_v19\")\n         wallet = node_v19.get_wallet_rpc(\"w1_v19\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n         assert info['keypoolsize'] > 0\n         # Use addmultisigaddress (see #18075)\n-        address_18075 = wallet.addmultisigaddress(1, [\"0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52\", \"037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073\"], \"\", \"legacy\")[\"address\"]\n+        address_18075 = wallet.rpc.addmultisigaddress(1, [\"0296b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52\", \"037211a824f55b505228e4c3d5194c1fcfaa15a456abdf37f9b9d97a4040afc073\"], \"\", \"legacy\")[\"address\"]\n         assert wallet.getaddressinfo(address_18075)[\"solvable\"]\n \n         # w1_v18: regular wallet, created with v0.18\n-        node_v18.createwallet(wallet_name=\"w1_v18\")\n+        node_v18.rpc.createwallet(wallet_name=\"w1_v18\")\n         wallet = node_v18.get_wallet_rpc(\"w1_v18\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n@@ -139,43 +139,43 @@ def run_test(self):\n         # w2: wallet with private keys disabled, created on master: update this\n         #     test when default wallets private keys disabled can no longer be\n         #     opened by older versions.\n-        node_master.createwallet(wallet_name=\"w2\", disable_private_keys=True)\n+        node_master.rpc.createwallet(wallet_name=\"w2\", disable_private_keys=True)\n         wallet = node_master.get_wallet_rpc(\"w2\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled'] == False\n         assert info['keypoolsize'] == 0\n \n         # w2_v19: wallet with private keys disabled, created with v0.19\n-        node_v19.createwallet(wallet_name=\"w2_v19\", disable_private_keys=True)\n+        node_v19.rpc.createwallet(wallet_name=\"w2_v19\", disable_private_keys=True)\n         wallet = node_v19.get_wallet_rpc(\"w2_v19\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled'] == False\n         assert info['keypoolsize'] == 0\n \n         # w2_v18: wallet with private keys disabled, created with v0.18\n-        node_v18.createwallet(wallet_name=\"w2_v18\", disable_private_keys=True)\n+        node_v18.rpc.createwallet(wallet_name=\"w2_v18\", disable_private_keys=True)\n         wallet = node_v18.get_wallet_rpc(\"w2_v18\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled'] == False\n         assert info['keypoolsize'] == 0\n \n         # w3: blank wallet, created on master: update this\n         #     test when default blank wallets can no longer be opened by older versions.\n-        node_master.createwallet(wallet_name=\"w3\", blank=True)\n+        node_master.rpc.createwallet(wallet_name=\"w3\", blank=True)\n         wallet = node_master.get_wallet_rpc(\"w3\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n         assert info['keypoolsize'] == 0\n \n         # w3_v19: blank wallet, created with v0.19\n-        node_v19.createwallet(wallet_name=\"w3_v19\", blank=True)\n+        node_v19.rpc.createwallet(wallet_name=\"w3_v19\", blank=True)\n         wallet = node_v19.get_wallet_rpc(\"w3_v19\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n         assert info['keypoolsize'] == 0\n \n         # w3_v18: blank wallet, created with v0.18\n-        node_v18.createwallet(wallet_name=\"w3_v18\", blank=True)\n+        node_v18.rpc.createwallet(wallet_name=\"w3_v18\", blank=True)\n         wallet = node_v18.get_wallet_rpc(\"w3_v18\")\n         info = wallet.getwalletinfo()\n         assert info['private_keys_enabled']\n@@ -318,7 +318,7 @@ def run_test(self):\n \n         self.log.info(\"Test wallet upgrade path...\")\n         # u1: regular wallet, created with v0.17\n-        node_v17.createwallet(wallet_name=\"u1_v17\")\n+        node_v17.rpc.createwallet(wallet_name=\"u1_v17\")\n         wallet = node_v17.get_wallet_rpc(\"u1_v17\")\n         address = wallet.getnewaddress(\"bech32\")\n         info = wallet.getaddressinfo(address)"
      },
      {
        "sha": "61214e55536676640d7fb73a1d89699cf5b2b8ec",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 105,
        "deletions": 4,
        "changes": 109,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
        "patch": "@@ -22,6 +22,7 @@\n import sys\n \n from .authproxy import JSONRPCException\n+from .descriptors import descsum_create\n from .util import (\n     MAX_NODES,\n     append_config,\n@@ -170,10 +171,10 @@ def __del__(self):\n     def __getattr__(self, name):\n         \"\"\"Dispatches any unrecognised messages to the RPC connection or a CLI instance.\"\"\"\n         if self.use_cli:\n-            return getattr(self.cli, name)\n+            return getattr(RPCOverloadWrapper(self.cli, True), name)\n         else:\n             assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n-            return getattr(self.rpc, name)\n+            return getattr(RPCOverloadWrapper(self.rpc), name)\n \n     def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs):\n         \"\"\"Start the node.\"\"\"\n@@ -265,11 +266,11 @@ def generate(self, nblocks, maxtries=1000000):\n \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:\n-            return self.cli(\"-rpcwallet={}\".format(wallet_name))\n+            return RPCOverloadWrapper(self.cli(\"-rpcwallet={}\".format(wallet_name)), True)\n         else:\n             assert self.rpc_connected and self.rpc, self._node_msg(\"RPC not connected\")\n             wallet_path = \"wallet/{}\".format(urllib.parse.quote(wallet_name))\n-            return self.rpc / wallet_path\n+            return RPCOverloadWrapper(self.rpc / wallet_path)\n \n     def stop_node(self, expected_stderr='', wait=0):\n         \"\"\"Stop the node.\"\"\"\n@@ -595,3 +596,103 @@ def send_cli(self, command=None, *args, **kwargs):\n             return json.loads(cli_stdout, parse_float=decimal.Decimal)\n         except json.JSONDecodeError:\n             return cli_stdout.rstrip(\"\\n\")\n+\n+class RPCOverloadWrapper():\n+    def __init__(self, rpc, cli=False):\n+        self.rpc = rpc\n+        self.is_cli = cli\n+\n+    def __getattr__(self, name):\n+        return getattr(self.rpc, name)\n+\n+    def importprivkey(self, privkey, label=None, rescan=None):\n+        wallet_info = self.getwalletinfo()\n+        if self.is_cli:\n+            if label is None:\n+                label = 'null'\n+            if rescan is None:\n+                rescan = 'null'\n+        if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n+            return self.__getattr__('importprivkey')(privkey, label, rescan)\n+        desc = descsum_create('combo(' + privkey + ')')\n+        req = [{\n+            'desc': desc,\n+            'timestamp': 0 if rescan else 'now',\n+            'label': label if label else ''\n+        }]\n+        import_res = self.importdescriptors(req)\n+        if not import_res[0]['success']:\n+            raise JSONRPCException(import_res[0]['error'])\n+\n+    def addmultisigaddress(self, nrequired, keys, label=None, address_type=None):\n+        wallet_info = self.getwalletinfo()\n+        if self.is_cli:\n+            if label is None:\n+                label = 'null'\n+            if address_type is None:\n+                address_type = 'null'\n+        if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n+            return self.__getattr__('addmultisigaddress')(nrequired, keys, label, address_type)\n+        cms = self.createmultisig(nrequired, keys, address_type)\n+        req = [{\n+            'desc': cms['descriptor'],\n+            'timestamp': 0,\n+            'label': label if label else ''\n+        }]\n+        import_res = self.importdescriptors(req)\n+        if not import_res[0]['success']:\n+            raise JSONRPCException(import_res[0]['error'])\n+        return cms\n+\n+    def importpubkey(self, pubkey, label=None, rescan=None):\n+        wallet_info = self.getwalletinfo()\n+        if self.is_cli:\n+            if label is None:\n+                label = 'null'\n+            if rescan is None:\n+                rescan = 'null'\n+        if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n+            return self.__getattr__('importpubkey')(pubkey, label, rescan)\n+        desc = descsum_create('combo(' + pubkey + ')')\n+        req = [{\n+            'desc': desc,\n+            'timestamp': 0 if rescan else 'now',\n+            'label': label if label else ''\n+        }]\n+        import_res = self.importdescriptors(req)\n+        if not import_res[0]['success']:\n+            raise JSONRPCException(import_res[0]['error'])\n+\n+    def importaddress(self, address, label=None, rescan=None, p2sh=None):\n+        wallet_info = self.getwalletinfo()\n+        if self.is_cli:\n+            if label is None:\n+                label = 'null'\n+            if rescan is None:\n+                rescan = 'null'\n+            if p2sh is None:\n+                p2sh = 'null'\n+        if 'descriptors' not in wallet_info or ('descriptors' in wallet_info and not wallet_info['descriptors']):\n+            return self.__getattr__('importaddress')(address, label, rescan, p2sh)\n+        is_hex = False\n+        try:\n+            int(address ,16)\n+            is_hex = True\n+            desc = descsum_create('raw(' + address + ')')\n+        except:\n+            desc = descsum_create('addr(' + address + ')')\n+        reqs = [{\n+            'desc': desc,\n+            'timestamp': 0 if rescan else 'now',\n+            'label': label if label else ''\n+        }]\n+        if is_hex and p2sh:\n+            reqs.append({\n+                'desc': descsum_create('p2sh(raw(' + address + '))'),\n+                'timestamp': 0 if rescan else 'now',\n+                'label': label if label else ''\n+            })\n+        import_res = self.importdescriptors(reqs)\n+        for res in import_res:\n+            if not res['success']:\n+                raise JSONRPCException(res['error'])"
      },
      {
        "sha": "289ccf43ecb87288cd165cc4231929a33b9c547b",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/869f7ab30aeb4d7fbd563c535b55467a8a0430cf/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
        "patch": "@@ -81,15 +81,15 @@ def run_test(self):\n \n         # Make sure things are disabled\n         self.log.info(\"Test disabled RPCs\")\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importprivkey, \"cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW\")\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importpubkey, send_wrpc.getaddressinfo(send_wrpc.getnewaddress()))\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importaddress, recv_wrpc.getnewaddress())\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importmulti, [])\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.addmultisigaddress, 1, [recv_wrpc.getnewaddress()])\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpprivkey, recv_wrpc.getnewaddress())\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.dumpwallet, 'wallet.dump')\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.importwallet, 'wallet.dump')\n-        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.sethdseed)\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.importprivkey, \"cVpF924EspNh8KjYsfhgY96mmxvT6DgdWiTYMtMjuM74hJaU5psW\")\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.importpubkey, send_wrpc.getaddressinfo(send_wrpc.getnewaddress()))\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.importaddress, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.importmulti, [])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.addmultisigaddress, 1, [recv_wrpc.getnewaddress()])\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.dumpprivkey, recv_wrpc.getnewaddress())\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.dumpwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.importwallet, 'wallet.dump')\n+        assert_raises_rpc_error(-4, \"This type of wallet does not support this command\", recv_wrpc.rpc.sethdseed)\n \n         self.log.info(\"Test encryption\")\n         # Get the master fingerprint before encrypt"
      }
    ]
  },
  {
    "sha": "223588b1bbc63dc57098bbd0baa48635e0cc0b82",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMjM1ODhiMWJiYzYzZGM1NzA5OGJiZDBiYWE0ODYzNWUwY2MwYjgy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2019-07-16T19:33:35Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-04-23T17:59:48Z"
      },
      "message": "Add a --descriptors option to various tests\n\nAdds a --descriptors option globally to the test framework. This will\nmake the test create and use descriptor wallets. However some tests may\nnot work with this.\n\nSome tests are modified to work with --descriptors and run with that\noption in test_runer:\n* wallet_basic.py\n* wallet_encryption.py\n* wallet_keypool.py\n* wallet_keypool_topup.py\n* wallet_labels.py\n* wallet_avoidreuse.py",
      "tree": {
        "sha": "8e4d450e70699c56a5c9c1547a30f5022e62bba8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8e4d450e70699c56a5c9c1547a30f5022e62bba8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/223588b1bbc63dc57098bbd0baa48635e0cc0b82",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/223588b1bbc63dc57098bbd0baa48635e0cc0b82/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/869f7ab30aeb4d7fbd563c535b55467a8a0430cf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/869f7ab30aeb4d7fbd563c535b55467a8a0430cf"
      }
    ],
    "stats": {
      "total": 532,
      "additions": 358,
      "deletions": 174
    },
    "files": [
      {
        "sha": "56e9ecfcc2121981d2864b8b98501f1a8060bb7c",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 31,
        "deletions": 10,
        "changes": 41,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -4,13 +4,14 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multisig RPCs\"\"\"\n \n+from test_framework.authproxy import JSONRPCException\n from test_framework.descriptors import descsum_create, drop_origins\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_raises_rpc_error,\n     assert_equal,\n )\n-from test_framework.key import ECPubKey\n+from test_framework.key import ECPubKey, ECKey, bytes_to_wif\n \n import binascii\n import decimal\n@@ -28,10 +29,14 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def get_keys(self):\n+        self.pub = []\n+        self.priv = []\n         node0, node1, node2 = self.nodes\n-        add = [node1.getnewaddress() for _ in range(self.nkeys)]\n-        self.pub = [node1.getaddressinfo(a)[\"pubkey\"] for a in add]\n-        self.priv = [node1.dumpprivkey(a) for a in add]\n+        for _ in range(self.nkeys):\n+            k = ECKey()\n+            k.generate()\n+            self.pub.append(k.get_pubkey().get_bytes().hex())\n+            self.priv.append(bytes_to_wif(k.get_bytes(), k.is_compressed))\n         self.final = node2.getnewaddress()\n \n     def run_test(self):\n@@ -64,17 +69,20 @@ def run_test(self):\n         pk_obj.compressed = False\n         pk2 = binascii.hexlify(pk_obj.get_bytes()).decode()\n \n+        node0.createwallet(wallet_name='wmulti0', disable_private_keys=True)\n+        wmulti0 = node0.get_wallet_rpc('wmulti0')\n+\n         # Check all permutations of keys because order matters apparently\n         for keys in itertools.permutations([pk0, pk1, pk2]):\n             # Results should be the same as this legacy one\n             legacy_addr = node0.createmultisig(2, keys, 'legacy')['address']\n-            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'legacy')['address'])\n+            assert_equal(legacy_addr, wmulti0.addmultisigaddress(2, keys, '', 'legacy')['address'])\n \n             # Generate addresses with the segwit types. These should all make legacy addresses\n-            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'bech32')['address'])\n-            assert_equal(legacy_addr, node0.createmultisig(2, keys, 'p2sh-segwit')['address'])\n-            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'bech32')['address'])\n-            assert_equal(legacy_addr, node0.addmultisigaddress(2, keys, '', 'p2sh-segwit')['address'])\n+            assert_equal(legacy_addr, wmulti0.createmultisig(2, keys, 'bech32')['address'])\n+            assert_equal(legacy_addr, wmulti0.createmultisig(2, keys, 'p2sh-segwit')['address'])\n+            assert_equal(legacy_addr, wmulti0.addmultisigaddress(2, keys, '', 'bech32')['address'])\n+            assert_equal(legacy_addr, wmulti0.addmultisigaddress(2, keys, '', 'p2sh-segwit')['address'])\n \n         self.log.info('Testing sortedmulti descriptors with BIP 67 test vectors')\n         with open(os.path.join(os.path.dirname(os.path.realpath(__file__)), 'data/rpc_bip67.json'), encoding='utf-8') as f:\n@@ -89,6 +97,8 @@ def run_test(self):\n             assert_equal(self.nodes[0].deriveaddresses(sorted_key_desc)[0], t['address'])\n \n     def check_addmultisigaddress_errors(self):\n+        if self.options.descriptors:\n+            return\n         self.log.info('Check that addmultisigaddress fails when the private keys are missing')\n         addresses = [self.nodes[1].getnewaddress(address_type='legacy') for _ in range(2)]\n         assert_raises_rpc_error(-5, 'no full public key for address', lambda: self.nodes[0].addmultisigaddress(nrequired=1, keys=addresses))\n@@ -115,6 +125,15 @@ def checkbalances(self):\n \n     def do_multisig(self):\n         node0, node1, node2 = self.nodes\n+        if 'wmulti' not in node1.listwallets():\n+            try:\n+                node1.loadwallet('wmulti')\n+            except JSONRPCException as e:\n+                if e.error['code'] == -18 and 'Wallet wmulti not found' in e.error['message']:\n+                    node1.createwallet(wallet_name='wmulti', disable_private_keys=True)\n+                else:\n+                    raise\n+        wmulti = node1.get_wallet_rpc('wmulti')\n \n         # Construct the expected descriptor\n         desc = 'multi({},{})'.format(self.nsigs, ','.join(self.pub))\n@@ -134,7 +153,7 @@ def do_multisig(self):\n             assert madd[0:4] == \"bcrt\"  # actually a bech32 address\n \n         # compare against addmultisigaddress\n-        msigw = node1.addmultisigaddress(self.nsigs, self.pub, None, self.output_type)\n+        msigw = wmulti.addmultisigaddress(self.nsigs, self.pub, None, self.output_type)\n         maddw = msigw[\"address\"]\n         mredeemw = msigw[\"redeemScript\"]\n         assert_equal(desc, drop_origins(msigw['descriptor']))\n@@ -194,6 +213,8 @@ def do_multisig(self):\n         txinfo = node0.getrawtransaction(tx, True, blk)\n         self.log.info(\"n/m=%d/%d %s size=%d vsize=%d weight=%d\" % (self.nsigs, self.nkeys, self.output_type, txinfo[\"size\"], txinfo[\"vsize\"], txinfo[\"weight\"]))\n \n+        wmulti.unloadwallet()\n+\n \n if __name__ == '__main__':\n     RpcCreateMultiSigTest().main()"
      },
      {
        "sha": "51d136d26afaeee8d773074f2d032993417037f0",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 31,
        "deletions": 11,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -48,18 +48,23 @@ def test_utxo_conversion(self):\n         disconnect_nodes(offline_node, 2)\n         disconnect_nodes(mining_node, 0)\n \n+        # Create watchonly on online_node\n+        online_node.createwallet(wallet_name='wonline', disable_private_keys=True)\n+        wonline = online_node.get_wallet_rpc('wonline')\n+        w2 = online_node.get_wallet_rpc('')\n+\n         # Mine a transaction that credits the offline address\n         offline_addr = offline_node.getnewaddress(address_type=\"p2sh-segwit\")\n-        online_addr = online_node.getnewaddress(address_type=\"p2sh-segwit\")\n-        online_node.importaddress(offline_addr, \"\", False)\n+        online_addr = w2.getnewaddress(address_type=\"p2sh-segwit\")\n+        wonline.importaddress(offline_addr, \"\", False)\n         mining_node.sendtoaddress(address=offline_addr, amount=1.0)\n         mining_node.generate(nblocks=1)\n         self.sync_blocks([mining_node, online_node])\n \n         # Construct an unsigned PSBT on the online node (who doesn't know the output is Segwit, so will include a non-witness UTXO)\n-        utxos = online_node.listunspent(addresses=[offline_addr])\n-        raw = online_node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n-        psbt = online_node.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n+        utxos = wonline.listunspent(addresses=[offline_addr])\n+        raw = wonline.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n+        psbt = wonline.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n         assert \"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0]\n \n         # Have the offline node sign the PSBT (which will update the UTXO to segwit)\n@@ -72,6 +77,8 @@ def test_utxo_conversion(self):\n         self.sync_blocks([mining_node, online_node])\n         assert_equal(online_node.gettxout(txid,0)[\"confirmations\"], 1)\n \n+        wonline.unloadwallet()\n+\n         # Reconnect\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n@@ -89,13 +96,23 @@ def run_test(self):\n         final_tx = self.nodes[0].finalizepsbt(signed_tx)['hex']\n         self.nodes[0].sendrawtransaction(final_tx)\n \n-        # Create p2sh, p2wpkh, and p2wsh addresses\n+        # Get pubkeys\n         pubkey0 = self.nodes[0].getaddressinfo(self.nodes[0].getnewaddress())['pubkey']\n         pubkey1 = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['pubkey']\n         pubkey2 = self.nodes[2].getaddressinfo(self.nodes[2].getnewaddress())['pubkey']\n-        p2sh = self.nodes[1].addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"legacy\")['address']\n-        p2wsh = self.nodes[1].addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"bech32\")['address']\n-        p2sh_p2wsh = self.nodes[1].addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"p2sh-segwit\")['address']\n+\n+        # Setup watchonly wallets\n+        self.nodes[2].createwallet(wallet_name='wmulti', disable_private_keys=True)\n+        wmulti = self.nodes[2].get_wallet_rpc('wmulti')\n+\n+        # Create all the addresses\n+        p2sh = wmulti.addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"legacy\")['address']\n+        p2wsh = wmulti.addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"bech32\")['address']\n+        p2sh_p2wsh = wmulti.addmultisigaddress(2, [pubkey0, pubkey1, pubkey2], \"\", \"p2sh-segwit\")['address']\n+        if not self.options.descriptors:\n+            wmulti.importaddress(p2sh)\n+            wmulti.importaddress(p2wsh)\n+            wmulti.importaddress(p2sh_p2wsh)\n         p2wpkh = self.nodes[1].getnewaddress(\"\", \"bech32\")\n         p2pkh = self.nodes[1].getnewaddress(\"\", \"legacy\")\n         p2sh_p2wpkh = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n@@ -146,11 +163,14 @@ def run_test(self):\n         assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by -maxtxfee\", self.nodes[1].walletcreatefundedpsbt, [{\"txid\":txid,\"vout\":p2wpkh_pos},{\"txid\":txid,\"vout\":p2sh_p2wpkh_pos},{\"txid\":txid,\"vout\":p2pkh_pos}], {self.nodes[1].getnewaddress():29.99}, 0, {\"feeRate\": 10})\n \n         # partially sign multisig things with node 1\n-        psbtx = self.nodes[1].walletcreatefundedpsbt([{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], {self.nodes[1].getnewaddress():29.99})['psbt']\n+        psbtx = wmulti.walletcreatefundedpsbt(inputs=[{\"txid\":txid,\"vout\":p2wsh_pos},{\"txid\":txid,\"vout\":p2sh_pos},{\"txid\":txid,\"vout\":p2sh_p2wsh_pos}], outputs={self.nodes[1].getnewaddress():29.99}, options={'changeAddress': self.nodes[1].getrawchangeaddress()})['psbt']\n         walletprocesspsbt_out = self.nodes[1].walletprocesspsbt(psbtx)\n         psbtx = walletprocesspsbt_out['psbt']\n         assert_equal(walletprocesspsbt_out['complete'], False)\n \n+        # Unload wmulti, we don't need it anymore\n+        wmulti.unloadwallet()\n+\n         # partially sign with node 2. This should be complete and sendable\n         walletprocesspsbt_out = self.nodes[2].walletprocesspsbt(psbtx)\n         assert_equal(walletprocesspsbt_out['complete'], True)\n@@ -297,7 +317,7 @@ def run_test(self):\n \n         # Signer tests\n         for i, signer in enumerate(signers):\n-            self.nodes[2].createwallet(\"wallet{}\".format(i))\n+            self.nodes[2].createwallet(wallet_name=\"wallet{}\".format(i))\n             wrpc = self.nodes[2].get_wallet_rpc(\"wallet{}\".format(i))\n             for key in signer['privkeys']:\n                 wrpc.importprivkey(key)"
      },
      {
        "sha": "f2d6fba4a6f8b8f76cd2dd2f54d6279cfbe0d883",
        "filename": "test/functional/test_framework/key.py",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/key.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/key.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/key.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -8,6 +8,8 @@\n anything but tests.\"\"\"\n import random\n \n+from .address import byte_to_base58\n+\n def modinv(a, n):\n     \"\"\"Compute the modular inverse of a modulo n\n \n@@ -384,3 +386,14 @@ def sign_ecdsa(self, msg, low_s=True):\n         rb = r.to_bytes((r.bit_length() + 8) // 8, 'big')\n         sb = s.to_bytes((s.bit_length() + 8) // 8, 'big')\n         return b'\\x30' + bytes([4 + len(rb) + len(sb), 2, len(rb)]) + rb + bytes([2, len(sb)]) + sb\n+\n+def bytes_to_wif(b, compressed=True):\n+    if compressed:\n+        b += b'\\x01'\n+    return byte_to_base58(b, 239)\n+\n+def generate_wif_key():\n+    # Makes a WIF privkey for imports\n+    k = ECKey()\n+    k.generate()\n+    return bytes_to_wif(k.get_bytes(), k.is_compressed)"
      },
      {
        "sha": "8719bd0d392abba954a862a3149e3bcbee6217f2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -165,6 +165,8 @@ def parse_args(self):\n                             help=\"run nodes under the valgrind memory error detector: expect at least a ~10x slowdown, valgrind 3.14 or later required\")\n         parser.add_argument(\"--randomseed\", type=int,\n                             help=\"set a random seed for deterministically reproducing a previous test run\")\n+        parser.add_argument(\"--descriptors\", default=False, action=\"store_true\",\n+                            help=\"Run test using a descriptor wallet\")\n         self.add_options(parser)\n         self.options = parser.parse_args()\n \n@@ -333,11 +335,23 @@ def setup_network(self):\n \n     def setup_nodes(self):\n         \"\"\"Override this method to customize test node setup\"\"\"\n-        extra_args = None\n+        extra_args = [[]] * self.num_nodes\n+        wallets = [[]] * self.num_nodes\n         if hasattr(self, \"extra_args\"):\n             extra_args = self.extra_args\n+            wallets = [[x for x in eargs if x.startswith('-wallet=')] for eargs in extra_args]\n+        extra_args = [x + ['-nowallet'] for x in extra_args]\n         self.add_nodes(self.num_nodes, extra_args)\n         self.start_nodes()\n+        for i, n in enumerate(self.nodes):\n+            n.extra_args.pop()\n+            if '-wallet=0' in n.extra_args or '-nowallet' in n.extra_args or '-disablewallet' in n.extra_args or not self.is_wallet_compiled():\n+                continue\n+            if '-wallet=' not in wallets[i] and not any([x.startswith('-wallet=') for x in wallets[i]]):\n+                wallets[i].append('-wallet=')\n+            for w in wallets[i]:\n+                wallet_name = w.split('=', 1)[1]\n+                n.createwallet(wallet_name=wallet_name, descriptors=self.options.descriptors)\n         self.import_deterministic_coinbase_privkeys()\n         if not self.setup_clean_chain:\n             for n in self.nodes:\n@@ -408,6 +422,7 @@ def add_nodes(self, num_nodes, extra_args=None, *, rpchost=None, binary=None, bi\n                 use_cli=self.options.usecli,\n                 start_perf=self.options.perf,\n                 use_valgrind=self.options.valgrind,\n+                descriptors=self.options.descriptors,\n             ))\n \n     def start_node(self, i, *args, **kwargs):\n@@ -547,6 +562,7 @@ def _initialize_chain(self):\n                     bitcoin_cli=self.options.bitcoincli,\n                     coverage_dir=None,\n                     cwd=self.options.tmpdir,\n+                    descriptors=self.options.descriptors,\n                 ))\n             self.start_node(CACHE_NODE_ID)\n             cache_node = self.nodes[CACHE_NODE_ID]"
      },
      {
        "sha": "de724407a027c40c3c4e65462ddc16b70ef1a2b3",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 22,
        "deletions": 6,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -62,7 +62,7 @@ class TestNode():\n     To make things easier for the test writer, any unrecognised messages will\n     be dispatched to the RPC connection.\"\"\"\n \n-    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None):\n+    def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cli, coverage_dir, cwd, extra_conf=None, extra_args=None, use_cli=False, start_perf=False, use_valgrind=False, version=None, descriptors=False):\n         \"\"\"\n         Kwargs:\n             start_perf (bool): If True, begin profiling the node with `perf` as soon as\n@@ -80,6 +80,7 @@ def __init__(self, i, datadir, *, chain, rpchost, timewait, bitcoind, bitcoin_cl\n         self.binary = bitcoind\n         self.coverage_dir = coverage_dir\n         self.cwd = cwd\n+        self.descriptors = descriptors\n         if extra_conf is not None:\n             append_config(datadir, extra_conf)\n         # Most callers will just need to add extra args to the standard list below.\n@@ -171,10 +172,10 @@ def __del__(self):\n     def __getattr__(self, name):\n         \"\"\"Dispatches any unrecognised messages to the RPC connection or a CLI instance.\"\"\"\n         if self.use_cli:\n-            return getattr(RPCOverloadWrapper(self.cli, True), name)\n+            return getattr(RPCOverloadWrapper(self.cli, True, self.descriptors), name)\n         else:\n             assert self.rpc_connected and self.rpc is not None, self._node_msg(\"Error: no RPC connection\")\n-            return getattr(RPCOverloadWrapper(self.rpc), name)\n+            return getattr(RPCOverloadWrapper(self.rpc, descriptors=self.descriptors), name)\n \n     def start(self, extra_args=None, *, cwd=None, stdout=None, stderr=None, **kwargs):\n         \"\"\"Start the node.\"\"\"\n@@ -266,11 +267,11 @@ def generate(self, nblocks, maxtries=1000000):\n \n     def get_wallet_rpc(self, wallet_name):\n         if self.use_cli:\n-            return RPCOverloadWrapper(self.cli(\"-rpcwallet={}\".format(wallet_name)), True)\n+            return RPCOverloadWrapper(self.cli(\"-rpcwallet={}\".format(wallet_name)), True, self.descriptors)\n         else:\n             assert self.rpc_connected and self.rpc, self._node_msg(\"RPC not connected\")\n             wallet_path = \"wallet/{}\".format(urllib.parse.quote(wallet_name))\n-            return RPCOverloadWrapper(self.rpc / wallet_path)\n+            return RPCOverloadWrapper(self.rpc / wallet_path, descriptors=self.descriptors)\n \n     def stop_node(self, expected_stderr='', wait=0):\n         \"\"\"Stop the node.\"\"\"\n@@ -598,13 +599,28 @@ def send_cli(self, command=None, *args, **kwargs):\n             return cli_stdout.rstrip(\"\\n\")\n \n class RPCOverloadWrapper():\n-    def __init__(self, rpc, cli=False):\n+    def __init__(self, rpc, cli=False, descriptors=False):\n         self.rpc = rpc\n         self.is_cli = cli\n+        self.descriptors = descriptors\n \n     def __getattr__(self, name):\n         return getattr(self.rpc, name)\n \n+    def createwallet(self, wallet_name, disable_private_keys=None, blank=None, passphrase=None, avoid_reuse=None, descriptors=None):\n+        if self.is_cli:\n+            if disable_private_keys is None:\n+                disable_private_keys = 'null'\n+            if blank is None:\n+                blank = 'null'\n+            if passphrase is None:\n+                passphrase = ''\n+            if avoid_reuse is None:\n+                avoid_reuse = 'null'\n+        if descriptors is None:\n+            descriptors = self.descriptors\n+        return self.__getattr__('createwallet')(wallet_name, disable_private_keys, blank, passphrase, avoid_reuse, descriptors)\n+\n     def importprivkey(self, privkey, label=None, rescan=None):\n         wallet_info = self.getwalletinfo()\n         if self.is_cli:"
      },
      {
        "sha": "b8523e16b79a8b7c083d31f563e1f88bdaa4a051",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -76,6 +76,7 @@\n     # Scripts that are run by default.\n     # Longest test should go first, to favor running tests in parallel\n     'wallet_hd.py',\n+    'wallet_hd.py --descriptors',\n     'wallet_backup.py',\n     # vv Tests less than 5m vv\n     'mining_getblocktemplate_longpoll.py',\n@@ -86,7 +87,9 @@\n     'feature_segwit.py',\n     # vv Tests less than 2m vv\n     'wallet_basic.py',\n+    'wallet_basic.py --descriptors',\n     'wallet_labels.py',\n+    'wallet_labels.py --descriptors',\n     'p2p_segwit.py',\n     'p2p_timeouts.py',\n     'p2p_tx_download.py',\n@@ -109,6 +112,7 @@\n     'feature_abortnode.py',\n     # vv Tests less than 30s vv\n     'wallet_keypool_topup.py',\n+    'wallet_keypool_topup.py --descriptors',\n     'feature_fee_estimation.py',\n     'interface_zmq.py',\n     'interface_bitcoin_cli.py',\n@@ -122,6 +126,7 @@\n     'interface_rest.py',\n     'mempool_spend_coinbase.py',\n     'wallet_avoidreuse.py',\n+    'wallet_avoidreuse.py --descriptors',\n     'mempool_reorg.py',\n     'mempool_persist.py',\n     'wallet_multiwallet.py',\n@@ -134,6 +139,7 @@\n     'interface_http.py',\n     'interface_rpc.py',\n     'rpc_psbt.py',\n+    'rpc_psbt.py --descriptors',\n     'rpc_users.py',\n     'rpc_whitelist.py',\n     'feature_proxy.py',\n@@ -147,6 +153,7 @@\n     'p2p_addr_relay.py',\n     'rpc_net.py',\n     'wallet_keypool.py',\n+    'wallet_keypool.py --descriptors',\n     'wallet_descriptor.py',\n     'p2p_mempool.py',\n     'p2p_filter.py',\n@@ -169,6 +176,7 @@\n     'mempool_packages.py',\n     'mempool_package_onemore.py',\n     'rpc_createmultisig.py',\n+    'rpc_createmultisig.py --descriptors',\n     'feature_versionbits_warning.py',\n     'rpc_preciousblock.py',\n     'wallet_importprunedfunds.py',\n@@ -192,6 +200,7 @@\n     'wallet_listsinceblock.py',\n     'p2p_leak.py',\n     'wallet_encryption.py',\n+    'wallet_encryption.py --descriptors',\n     'feature_dersig.py',\n     'feature_cltv.py',\n     'rpc_uptime.py',"
      },
      {
        "sha": "780cce9d0282079c3226e5fc385ec104966c7419",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 39,
        "deletions": 38,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -133,7 +133,7 @@ def test_immutable(self):\n         tempwallet = \".wallet_avoidreuse.py_test_immutable_wallet.dat\"\n \n         # Create a wallet with disable_private_keys set; this should work\n-        self.nodes[1].createwallet(tempwallet, True)\n+        self.nodes[1].createwallet(wallet_name=tempwallet, disable_private_keys=True)\n         w = self.nodes[1].get_wallet_rpc(tempwallet)\n \n         # Attempt to unset the disable_private_keys flag; this should not work\n@@ -249,43 +249,44 @@ def test_sending_from_reused_address_fails(self, second_addr_type):\n         # getbalances should show no used, 5 btc trusted\n         assert_balances(self.nodes[1], mine={\"used\": 0, \"trusted\": 5})\n \n-        # For the second send, we transmute it to a related single-key address\n-        # to make sure it's also detected as re-use\n-        fund_spk = self.nodes[0].getaddressinfo(fundaddr)[\"scriptPubKey\"]\n-        fund_decoded = self.nodes[0].decodescript(fund_spk)\n-        if second_addr_type == \"p2sh-segwit\":\n-            new_fundaddr = fund_decoded[\"segwit\"][\"p2sh-segwit\"]\n-        elif second_addr_type == \"bech32\":\n-            new_fundaddr = fund_decoded[\"segwit\"][\"addresses\"][0]\n-        else:\n-            new_fundaddr = fundaddr\n-            assert_equal(second_addr_type, \"legacy\")\n-\n-        self.nodes[0].sendtoaddress(new_fundaddr, 10)\n-        self.nodes[0].generate(1)\n-        self.sync_all()\n-\n-        # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n-        assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n-        # getbalances should show 10 used, 5 btc trusted\n-        assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 5})\n-\n-        # node 1 should now have a balance of 5 (no dirty) or 15 (including dirty)\n-        assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n-        assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 15, 0.001)\n-\n-        assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[1].sendtoaddress, retaddr, 10)\n-\n-        self.nodes[1].sendtoaddress(retaddr, 4)\n-\n-        # listunspent should show 2 total outputs (1, 10 btc), one unused (1), one reused (10)\n-        assert_unspent(self.nodes[1], total_count=2, total_sum=11, reused_count=1, reused_sum=10)\n-        # getbalances should show 10 used, 1 btc trusted\n-        assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 1})\n-\n-        # node 1 should now have about 1 btc left (no dirty) and 11 (including dirty)\n-        assert_approx(self.nodes[1].getbalance(), 1, 0.001)\n-        assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 11, 0.001)\n+        if not self.options.descriptors:\n+            # For the second send, we transmute it to a related single-key address\n+            # to make sure it's also detected as re-use\n+            fund_spk = self.nodes[0].getaddressinfo(fundaddr)[\"scriptPubKey\"]\n+            fund_decoded = self.nodes[0].decodescript(fund_spk)\n+            if second_addr_type == \"p2sh-segwit\":\n+                new_fundaddr = fund_decoded[\"segwit\"][\"p2sh-segwit\"]\n+            elif second_addr_type == \"bech32\":\n+                new_fundaddr = fund_decoded[\"segwit\"][\"addresses\"][0]\n+            else:\n+                new_fundaddr = fundaddr\n+                assert_equal(second_addr_type, \"legacy\")\n+\n+            self.nodes[0].sendtoaddress(new_fundaddr, 10)\n+            self.nodes[0].generate(1)\n+            self.sync_all()\n+\n+            # listunspent should show 2 total outputs (5, 10 btc), one unused (5), one reused (10)\n+            assert_unspent(self.nodes[1], total_count=2, total_sum=15, reused_count=1, reused_sum=10)\n+            # getbalances should show 10 used, 5 btc trusted\n+            assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 5})\n+\n+            # node 1 should now have a balance of 5 (no dirty) or 15 (including dirty)\n+            assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n+            assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 15, 0.001)\n+\n+            assert_raises_rpc_error(-6, \"Insufficient funds\", self.nodes[1].sendtoaddress, retaddr, 10)\n+\n+            self.nodes[1].sendtoaddress(retaddr, 4)\n+\n+            # listunspent should show 2 total outputs (1, 10 btc), one unused (1), one reused (10)\n+            assert_unspent(self.nodes[1], total_count=2, total_sum=11, reused_count=1, reused_sum=10)\n+            # getbalances should show 10 used, 1 btc trusted\n+            assert_balances(self.nodes[1], mine={\"used\": 10, \"trusted\": 1})\n+\n+            # node 1 should now have about 1 btc left (no dirty) and 11 (including dirty)\n+            assert_approx(self.nodes[1].getbalance(), 1, 0.001)\n+            assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 11, 0.001)\n \n     def test_getbalances_used(self):\n         '''"
      },
      {
        "sha": "2dddbf2cf3007346433a02c0094428249b408245",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 44,
        "deletions": 40,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -49,6 +49,7 @@ def get_vsize(self, txn):\n         return self.nodes[0].decoderawtransaction(txn)['vsize']\n \n     def run_test(self):\n+\n         # Check that there's no UTXO on none of the nodes\n         assert_equal(len(self.nodes[0].listunspent()), 0)\n         assert_equal(len(self.nodes[1].listunspent()), 0)\n@@ -219,7 +220,7 @@ def run_test(self):\n         assert_equal(self.nodes[2].getbalance(), node_2_bal)\n         node_0_bal = self.check_fee_amount(self.nodes[0].getbalance(), node_0_bal + Decimal('10'), fee_per_byte, self.get_vsize(self.nodes[2].gettransaction(txid)['hex']))\n \n-        self.start_node(3)\n+        self.start_node(3, self.nodes[3].extra_args)\n         connect_nodes(self.nodes[0], 3)\n         self.sync_all()\n \n@@ -315,57 +316,59 @@ def run_test(self):\n         # This will raise an exception since generate does not accept a string\n         assert_raises_rpc_error(-1, \"not an integer\", self.nodes[0].generate, \"2\")\n \n-        # This will raise an exception for the invalid private key format\n-        assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n+        if not self.options.descriptors:\n \n-        # This will raise an exception for importing an address with the PS2H flag\n-        temp_address = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n-        assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n+            # This will raise an exception for the invalid private key format\n+            assert_raises_rpc_error(-5, \"Invalid private key encoding\", self.nodes[0].importprivkey, \"invalid\")\n \n-        # This will raise an exception for attempting to dump the private key of an address you do not own\n-        assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n+            # This will raise an exception for importing an address with the PS2H flag\n+            temp_address = self.nodes[1].getnewaddress(\"\", \"p2sh-segwit\")\n+            assert_raises_rpc_error(-5, \"Cannot use the p2sh flag with an address - use a script instead\", self.nodes[0].importaddress, temp_address, \"label\", False, True)\n \n-        # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n+            # This will raise an exception for attempting to dump the private key of an address you do not own\n+            assert_raises_rpc_error(-3, \"Address does not refer to a key\", self.nodes[0].dumpprivkey, temp_address)\n \n-        # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n+            # This will raise an exception for attempting to get the private key of an invalid Bitcoin address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].dumpprivkey, \"invalid\")\n \n-        # This will raise an exception for importing an invalid address\n-        assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n+            # This will raise an exception for attempting to set a label for an invalid Bitcoin address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address\", self.nodes[0].setlabel, \"invalid address\", \"label\")\n \n-        # This will raise an exception for attempting to import a pubkey that isn't in hex\n-        assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n+            # This will raise an exception for importing an invalid address\n+            assert_raises_rpc_error(-5, \"Invalid Bitcoin address or script\", self.nodes[0].importaddress, \"invalid\")\n \n-        # This will raise an exception for importing an invalid pubkey\n-        assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+            # This will raise an exception for attempting to import a pubkey that isn't in hex\n+            assert_raises_rpc_error(-5, \"Pubkey must be a hex string\", self.nodes[0].importpubkey, \"not hex\")\n \n-        # Import address and private key to check correct behavior of spendable unspents\n-        # 1. Send some coins to generate new UTXO\n-        address_to_import = self.nodes[2].getnewaddress()\n-        txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n-        self.nodes[0].generate(1)\n-        self.sync_all(self.nodes[0:3])\n+            # This will raise an exception for importing an invalid pubkey\n+            assert_raises_rpc_error(-5, \"Pubkey is not a valid public key\", self.nodes[0].importpubkey, \"5361746f736869204e616b616d6f746f\")\n+\n+            # Import address and private key to check correct behavior of spendable unspents\n+            # 1. Send some coins to generate new UTXO\n+            address_to_import = self.nodes[2].getnewaddress()\n+            txid = self.nodes[0].sendtoaddress(address_to_import, 1)\n+            self.nodes[0].generate(1)\n+            self.sync_all(self.nodes[0:3])\n \n-        # 2. Import address from node2 to node1\n-        self.nodes[1].importaddress(address_to_import)\n+            # 2. Import address from node2 to node1\n+            self.nodes[1].importaddress(address_to_import)\n \n-        # 3. Validate that the imported address is watch-only on node1\n-        assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n+            # 3. Validate that the imported address is watch-only on node1\n+            assert self.nodes[1].getaddressinfo(address_to_import)[\"iswatchonly\"]\n \n-        # 4. Check that the unspents after import are not spendable\n-        assert_array_result(self.nodes[1].listunspent(),\n-                            {\"address\": address_to_import},\n-                            {\"spendable\": False})\n+            # 4. Check that the unspents after import are not spendable\n+            assert_array_result(self.nodes[1].listunspent(),\n+                                {\"address\": address_to_import},\n+                                {\"spendable\": False})\n \n-        # 5. Import private key of the previously imported address on node1\n-        priv_key = self.nodes[2].dumpprivkey(address_to_import)\n-        self.nodes[1].importprivkey(priv_key)\n+            # 5. Import private key of the previously imported address on node1\n+            priv_key = self.nodes[2].dumpprivkey(address_to_import)\n+            self.nodes[1].importprivkey(priv_key)\n \n-        # 6. Check that the unspents are now spendable on node1\n-        assert_array_result(self.nodes[1].listunspent(),\n-                            {\"address\": address_to_import},\n-                            {\"spendable\": True})\n+            # 6. Check that the unspents are now spendable on node1\n+            assert_array_result(self.nodes[1].listunspent(),\n+                                {\"address\": address_to_import},\n+                                {\"spendable\": True})\n \n         # Mine a block from node0 to an address from node1\n         coinbase_addr = self.nodes[1].getnewaddress()\n@@ -460,7 +463,8 @@ def run_test(self):\n         # Try with walletrejectlongchains\n         # Double chain limit but require combining inputs, so we pass SelectCoinsMinConf\n         self.stop_node(0)\n-        self.start_node(0, extra_args=[\"-walletrejectlongchains\", \"-limitancestorcount=\" + str(2 * chainlimit)])\n+        extra_args = [\"-walletrejectlongchains\", \"-limitancestorcount=\" + str(2 * chainlimit)]\n+        self.start_node(0, extra_args=extra_args)\n \n         # wait for loadmempool\n         timeout = 10"
      },
      {
        "sha": "09f89eb59dcacb7e3181d38017178143d3f4aa94",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 65,
        "deletions": 48,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -27,17 +27,21 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         # Make sure we use hd, keep masterkeyid\n-        masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert_equal(len(masterkeyid), 40)\n+        hd_fingerprint = self.nodes[1].getaddressinfo(self.nodes[1].getnewaddress())['hdmasterfingerprint']\n+        assert_equal(len(hd_fingerprint), 8)\n \n         # create an internal key\n         change_addr = self.nodes[1].getrawchangeaddress()\n         change_addrV= self.nodes[1].getaddressinfo(change_addr)\n-        assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n+        if self.options.descriptors:\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/84'/1'/0'/1/0\")\n+        else:\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/0'\") #first internal child key\n \n         # Import a non-HD private key in the HD wallet\n-        non_hd_add = self.nodes[0].getnewaddress()\n-        self.nodes[1].importprivkey(self.nodes[0].dumpprivkey(non_hd_add))\n+        non_hd_add = 'bcrt1qmevj8zfx0wdvp05cqwkmr6mxkfx60yezwjksmt'\n+        non_hd_key = 'cS9umN9w6cDMuRVYdbkfE4c7YUFLJRoXMfhQ569uY4odiQbVN8Rt'\n+        self.nodes[1].importprivkey(non_hd_key)\n \n         # This should be enough to keep the master key and the non-HD key\n         self.nodes[1].backupwallet(os.path.join(self.nodes[1].datadir, \"hd.bak\"))\n@@ -48,11 +52,14 @@ def run_test(self):\n         self.nodes[0].generate(101)\n         hd_add = None\n         NUM_HD_ADDS = 10\n-        for i in range(NUM_HD_ADDS):\n+        for i in range(1, NUM_HD_ADDS + 1):\n             hd_add = self.nodes[1].getnewaddress()\n             hd_info = self.nodes[1].getaddressinfo(hd_add)\n-            assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n-            assert_equal(hd_info[\"hdseedid\"], masterkeyid)\n+            if self.options.descriptors:\n+                assert_equal(hd_info[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(i))\n+            else:\n+                assert_equal(hd_info[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n+            assert_equal(hd_info[\"hdmasterfingerprint\"], hd_fingerprint)\n             self.nodes[0].sendtoaddress(hd_add, 1)\n             self.nodes[0].generate(1)\n         self.nodes[0].sendtoaddress(non_hd_add, 1)\n@@ -61,7 +68,10 @@ def run_test(self):\n         # create an internal key (again)\n         change_addr = self.nodes[1].getrawchangeaddress()\n         change_addrV= self.nodes[1].getaddressinfo(change_addr)\n-        assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n+        if self.options.descriptors:\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/84'/1'/0'/1/1\")\n+        else:\n+            assert_equal(change_addrV[\"hdkeypath\"], \"m/0'/1'/1'\") #second internal child key\n \n         self.sync_all()\n         assert_equal(self.nodes[1].getbalance(), NUM_HD_ADDS + 1)\n@@ -72,16 +82,19 @@ def run_test(self):\n         # otherwise node1 would auto-recover all funds in flag the keypool keys as used\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"blocks\"))\n         shutil.rmtree(os.path.join(self.nodes[1].datadir, self.chain, \"chainstate\"))\n-        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", \"wallet.dat\"))\n+        shutil.copyfile(os.path.join(self.nodes[1].datadir, \"hd.bak\"), os.path.join(self.nodes[1].datadir, self.chain, 'wallets', \"wallet.dat\"))\n         self.start_node(1)\n \n         # Assert that derivation is deterministic\n         hd_add_2 = None\n-        for i in range(NUM_HD_ADDS):\n+        for i in range(1, NUM_HD_ADDS + 1):\n             hd_add_2 = self.nodes[1].getnewaddress()\n             hd_info_2 = self.nodes[1].getaddressinfo(hd_add_2)\n-            assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n-            assert_equal(hd_info_2[\"hdseedid\"], masterkeyid)\n+            if self.options.descriptors:\n+                assert_equal(hd_info_2[\"hdkeypath\"], \"m/84'/1'/0'/0/\" + str(i))\n+            else:\n+                assert_equal(hd_info_2[\"hdkeypath\"], \"m/0'/0'/\"+str(i)+\"'\")\n+            assert_equal(hd_info_2[\"hdmasterfingerprint\"], hd_fingerprint)\n         assert_equal(hd_add, hd_add_2)\n         connect_nodes(self.nodes[0], 1)\n         self.sync_all()\n@@ -117,41 +130,45 @@ def run_test(self):\n             if out['value'] != 1:\n                 keypath = self.nodes[1].getaddressinfo(out['scriptPubKey']['addresses'][0])['hdkeypath']\n \n-        assert_equal(keypath[0:7], \"m/0'/1'\")\n-\n-        # Generate a new HD seed on node 1 and make sure it is set\n-        orig_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        self.nodes[1].sethdseed()\n-        new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert orig_masterkeyid != new_masterkeyid\n-        addr = self.nodes[1].getnewaddress()\n-        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n-        self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n-\n-        # Set a new HD seed on node 1 without flushing the keypool\n-        new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n-        orig_masterkeyid = new_masterkeyid\n-        self.nodes[1].sethdseed(False, new_seed)\n-        new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n-        assert orig_masterkeyid != new_masterkeyid\n-        addr = self.nodes[1].getnewaddress()\n-        assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdseedid'])\n-        assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n-\n-        # Check that the next address is from the new seed\n-        self.nodes[1].keypoolrefill(1)\n-        next_addr = self.nodes[1].getnewaddress()\n-        assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdseedid'])\n-        assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is not from previous keypool\n-        assert next_addr != addr\n-\n-        # Sethdseed parameter validity\n-        assert_raises_rpc_error(-1, 'sethdseed', self.nodes[0].sethdseed, False, new_seed, 0)\n-        assert_raises_rpc_error(-5, \"Invalid private key\", self.nodes[1].sethdseed, False, \"not_wif\")\n-        assert_raises_rpc_error(-1, \"JSON value is not a boolean as expected\", self.nodes[1].sethdseed, \"Not_bool\")\n-        assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[1].sethdseed, False, True)\n-        assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n-        assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n+        if self.options.descriptors:\n+            assert_equal(keypath[0:14], \"m/84'/1'/0'/1/\")\n+        else:\n+            assert_equal(keypath[0:7], \"m/0'/1'\")\n+\n+        if not self.options.descriptors:\n+            # Generate a new HD seed on node 1 and make sure it is set\n+            orig_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n+            self.nodes[1].sethdseed()\n+            new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n+            assert orig_masterkeyid != new_masterkeyid\n+            addr = self.nodes[1].getnewaddress()\n+            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is the first from the keypool\n+            self.nodes[1].keypoolrefill(1) # Fill keypool with 1 key\n+\n+            # Set a new HD seed on node 1 without flushing the keypool\n+            new_seed = self.nodes[0].dumpprivkey(self.nodes[0].getnewaddress())\n+            orig_masterkeyid = new_masterkeyid\n+            self.nodes[1].sethdseed(False, new_seed)\n+            new_masterkeyid = self.nodes[1].getwalletinfo()['hdseedid']\n+            assert orig_masterkeyid != new_masterkeyid\n+            addr = self.nodes[1].getnewaddress()\n+            assert_equal(orig_masterkeyid, self.nodes[1].getaddressinfo(addr)['hdseedid'])\n+            assert_equal(self.nodes[1].getaddressinfo(addr)['hdkeypath'], 'm/0\\'/0\\'/1\\'') # Make sure the new address continues previous keypool\n+\n+            # Check that the next address is from the new seed\n+            self.nodes[1].keypoolrefill(1)\n+            next_addr = self.nodes[1].getnewaddress()\n+            assert_equal(new_masterkeyid, self.nodes[1].getaddressinfo(next_addr)['hdseedid'])\n+            assert_equal(self.nodes[1].getaddressinfo(next_addr)['hdkeypath'], 'm/0\\'/0\\'/0\\'') # Make sure the new address is not from previous keypool\n+            assert next_addr != addr\n+\n+            # Sethdseed parameter validity\n+            assert_raises_rpc_error(-1, 'sethdseed', self.nodes[0].sethdseed, False, new_seed, 0)\n+            assert_raises_rpc_error(-5, \"Invalid private key\", self.nodes[1].sethdseed, False, \"not_wif\")\n+            assert_raises_rpc_error(-1, \"JSON value is not a boolean as expected\", self.nodes[1].sethdseed, \"Not_bool\")\n+            assert_raises_rpc_error(-1, \"JSON value is not a string as expected\", self.nodes[1].sethdseed, False, True)\n+            assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, new_seed)\n+            assert_raises_rpc_error(-5, \"Already have this key\", self.nodes[1].sethdseed, False, self.nodes[1].dumpprivkey(self.nodes[1].getnewaddress()))\n \n if __name__ == '__main__':\n     WalletHDTest().main ()"
      },
      {
        "sha": "40a2b3ab6a1b2b72faa374c07f5a05e825895085",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 68,
        "deletions": 10,
        "changes": 78,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -22,25 +22,76 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n+        if not self.options.descriptors:\n+            assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n+        if self.options.descriptors:\n+            # Import hardened derivation only descriptors\n+            nodes[0].walletpassphrase('test', 10)\n+            nodes[0].importdescriptors([\n+                {\n+                    \"desc\": \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/0h/*h)#y4dfsj7n\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True\n+                },\n+                {\n+                    \"desc\": \"pkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/1h/*h)#a0nyvl0k\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True\n+                },\n+                {\n+                    \"desc\": \"sh(wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/2h/*h))#lmeu2axg\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True\n+                },\n+                {\n+                    \"desc\": \"wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/3h/*h)#jkl636gm\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True,\n+                    \"internal\": True\n+                },\n+                {\n+                    \"desc\": \"pkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/4h/*h)#l3crwaus\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True,\n+                    \"internal\": True\n+                },\n+                {\n+                    \"desc\": \"sh(wpkh(tprv8ZgxMBicQKsPd7Uf69XL1XwhmjHopUGep8GuEiJDZmbQz6o58LninorQAfcKZWARbtRtfnLcJ5MQ2AtHcQJCCRUcMRvmDUjyEmNUWwx8UbK/5h/*h))#qg8wa75f\",\n+                    \"timestamp\": \"now\",\n+                    \"range\": [0,0],\n+                    \"active\": True,\n+                    \"internal\": True\n+                }\n+            ])\n+            nodes[0].walletlock()\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid']\n-        assert addr_data['hdseedid'] == wallet_info['hdseedid']\n+        assert addr_before_encrypting_data['hdmasterfingerprint'] != addr_data['hdmasterfingerprint']\n+        if not self.options.descriptors:\n+            assert addr_data['hdseedid'] == wallet_info['hdseedid']\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n         nodes[0].walletpassphrase('test', 12000)\n         nodes[0].keypoolrefill(6)\n         nodes[0].walletlock()\n         wi = nodes[0].getwalletinfo()\n-        assert_equal(wi['keypoolsize_hd_internal'], 6)\n-        assert_equal(wi['keypoolsize'], 6)\n+        if self.options.descriptors:\n+            assert_equal(wi['keypoolsize_hd_internal'], 18)\n+            assert_equal(wi['keypoolsize'], 18)\n+        else:\n+            assert_equal(wi['keypoolsize_hd_internal'], 6)\n+            assert_equal(wi['keypoolsize'], 6)\n \n         # drain the internal keys\n         nodes[0].getrawchangeaddress()\n@@ -80,20 +131,27 @@ def run_test(self):\n         nodes[0].walletpassphrase('test', 100)\n         nodes[0].keypoolrefill(100)\n         wi = nodes[0].getwalletinfo()\n-        assert_equal(wi['keypoolsize_hd_internal'], 100)\n-        assert_equal(wi['keypoolsize'], 100)\n+        if self.options.descriptors:\n+            assert_equal(wi['keypoolsize_hd_internal'], 300)\n+            assert_equal(wi['keypoolsize'], 300)\n+        else:\n+            assert_equal(wi['keypoolsize_hd_internal'], 100)\n+            assert_equal(wi['keypoolsize'], 100)\n \n         # create a blank wallet\n-        nodes[0].createwallet(wallet_name='w2', blank=True)\n+        nodes[0].createwallet(wallet_name='w2', blank=True, disable_private_keys=True)\n         w2 = nodes[0].get_wallet_rpc('w2')\n \n         # refer to initial wallet as w1\n         w1 = nodes[0].get_wallet_rpc('')\n \n         # import private key and fund it\n         address = addr.pop()\n-        privkey = w1.dumpprivkey(address)\n-        res = w2.importmulti([{'scriptPubKey': {'address': address}, 'keys': [privkey], 'timestamp': 'now'}])\n+        desc = w1.getaddressinfo(address)['desc']\n+        if self.options.descriptors:\n+            res = w2.importdescriptors([{'desc': desc, 'timestamp': 'now'}])\n+        else:\n+            res = w2.importmulti([{'desc': desc, 'timestamp': 'now'}])\n         assert_equal(res[0]['success'], True)\n         w1.walletpassphrase('test', 100)\n "
      },
      {
        "sha": "102ed23fba5a782200ca50e88078ba9a163e2442",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -79,7 +79,15 @@ def run_test(self):\n             assert_equal(self.nodes[idx].getbalance(), 15)\n             assert_equal(self.nodes[idx].listtransactions()[0]['category'], \"receive\")\n             # Check that we have marked all keys up to the used keypool key as used\n-            assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress())['hdkeypath'], \"m/0'/0'/110'\")\n+            if self.options.descriptors:\n+                if output_type == 'legacy':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/44'/1'/0'/0/110\")\n+                elif output_type == 'p2sh-segwit':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/49'/1'/0'/0/110\")\n+                elif output_type == 'bech32':\n+                    assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/84'/1'/0'/0/110\")\n+            else:\n+                assert_equal(self.nodes[idx].getaddressinfo(self.nodes[idx].getnewaddress(address_type=output_type))['hdkeypath'], \"m/0'/0'/110'\")\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "f8d1720469e3949251ae23d46d668c6ef4009d47",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/223588b1bbc63dc57098bbd0baa48635e0cc0b82/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=223588b1bbc63dc57098bbd0baa48635e0cc0b82",
        "patch": "@@ -115,15 +115,16 @@ def run_test(self):\n             assert_raises_rpc_error(-11, \"No addresses with label\", node.getaddressesbylabel, \"\")\n \n         # Check that addmultisigaddress can assign labels.\n-        for label in labels:\n-            addresses = []\n-            for x in range(10):\n-                addresses.append(node.getnewaddress())\n-            multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n-            label.add_address(multisig_address)\n-            label.purpose[multisig_address] = \"send\"\n-            label.verify(node)\n-        node.generate(101)\n+        if not self.options.descriptors:\n+            for label in labels:\n+                addresses = []\n+                for x in range(10):\n+                    addresses.append(node.getnewaddress())\n+                multisig_address = node.addmultisigaddress(5, addresses, label.name)['address']\n+                label.add_address(multisig_address)\n+                label.purpose[multisig_address] = \"send\"\n+                label.verify(node)\n+            node.generate(101)\n \n         # Check that setlabel can change the label of an address from a\n         # different label."
      }
    ]
  }
]