DrahtBot,2019-08-02 03:23:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18774 (test: added test for upgradewallet RPC by brakmic)\n* #18727 (test: Add CreateWalletFromFile test by ryanofsky)\n*",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517532927,517532927,
meshcollider,2019-08-02 03:25:19,"Strong Concept ACK, this should be much nicer now it is preceded by the rework.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517533269,517533269,
Sjors,2019-08-03 08:23:16,"Approach ACK. It looks pretty straight forward and thanks to The Box feels cleaner than the previous attempt. \n\nI suggest that, after a bit more progress on #16341, we review this in parallel. That ensures that we don't mess up the division of labour between `ScriptPubKeyMan` and its subclasses.\n\nAlso concept ACK on using BIP44/49/84 for new descriptor wallets. That may need some discussio",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-517905778,517905778,
hugohn,2019-08-12 14:57:46,"Concept ACK.\n\n@achow101 I just noticed that both the existing `deriveaddressses` & `importmulti` commands treat descriptor `[range_start, range_end]` as inclusive, which is consistent with the common understanding of the notation `[]`. Should we update the new `importdescriptors` command to do the same (make range_end inclusive)?\n\nhttps://github.com/bitcoin/bitcoin/blob/master/src/rpc/misc",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-520460635,520460635,
achow101,2019-08-12 16:20:19,"> Should we update the new `importdescriptors` command to do the same (make range_end inclusive)?\n\nI guess so. Latest pushed should do that.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-520494128,520494128,
Sjors,2019-10-10 16:50:45,"Due to your latest change upstream, this now complains: `scriptpubkeyman.h:516:10: warning: 'CheckDecryptionKey' overrides a member function but is not marked 'override' `",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-540675668,540675668,
achow101,2019-10-10 19:13:24,Fixed the warning.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-540736034,540736034,
Sjors,2019-11-05 11:18:08,"Rescanning is broken for (some?) descriptor wallets, both when importing descriptors and when calling `rescanblockchain`. It does detect new transactions. Example:\n\n```\n# Drop coins on a random address in the default wallet\nbitcoin-cli -regtest -rpcwallet="""" generatetoaddress 101 `bitcoin-cli -regtest -rpcwallet="""" getnewaddress`\nsrc/bitcoin-cli -regtest createwallet T false true """" true",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-549780152,549780152,
Sjors,2020-01-20 18:53:16,"I wrote a test to check `sortedmulti()` origins: https://github.com/Sjors/bitcoin/commit/04610844704aee8fb7cd6f94167a767f5473d281\n\nUnfortunately this test passes, so I can't reproduce the bug I was chasing just yet. I was seeing an origin-pubkey mismatch for sortedmulti() descriptors.\n\n_Update: fairly certain I was chasing a ghost. Hopefully the tests are useful._",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-576394411,576394411,
achow101,2020-01-21 18:29:41,I could not replicate any bugs with `sortedmulti` descriptors.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-576816376,576816376,
achow101,2020-01-30 05:00:25,"Rebased onto master, now ready for review.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580083947,580083947,
Sjors,2020-01-30 12:38:42,"Concept and approach re-ACK\n\nI rebased my HWI support PRs on top of this:  #16546 (RPC) and #16549 (GUI).\n\nThe first commit could go to an independent PR:\n* `Output a descriptor in createmultisig`\n\nAnd a few that could be done before this PR, just to get the number of commits down a bit :-)\n* ~`Introduce SetType function to tell ScriptPubKeyMans the type and internal-ness of it`~ (",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580233543,580233543,
achow101,2020-01-30 22:34:14,"Moved `Output a descriptor in createmultisig` to it's own PR and dropped it from here since it isn't actually used in descriptor wallets.\n\nI will investigate breaking out the other commits.\n\n>     * I'm ambivalent about using BIP44/49/84 for new descriptor wallets. Downside is that individual addresses are no longer hardened. Upside is that this many other wallets use this standard and we ",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580494041,580494041,
Sjors,2020-01-31 10:35:08,"Descriptors can be expanded indefinitely, so why specify a (mandatory) range on import? It might make sense as an optional field to set a boundary, e.g. if you know the external signing device has a range limit.\n\n> AFAICT, the reasoning for using exclusively hardened derivation is because we could export private keys with dumpprivkey and that has issues. But since that is disabled for descript",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580679648,580679648,
jonatack,2020-01-31 19:59:45,"Related 31 January wallet meeting discussion:\nhttp://www.erisian.com.au/meetbot/bitcoin-core-dev/2020/bitcoin-core-dev.2020-01-31-19.00.log.html",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-580888293,580888293,
achow101,2020-02-12 00:37:35,"I've rebased this on top of #18115 and #18034. I'll start addressing other issues tomorrow.\n\nI believe I've fixed the random failure of `wallet_importdescriptors.py` as well.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-584946241,584946241,
achow101,2020-02-14 20:16:39,I've removed the requirement for `range` in `importdescriptors`. It will give a warning and use the default keypool range.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-586456127,586456127,
instagibbs,2020-02-24 14:57:32,"We should make `IsChange` check for derivation path for descriptor wallets and not the ad-hoc ""is this address in my address book"", which we have to support for legacy wallets forever.\n\nedit: nevermind, not derivation path, just whether or not it's in `m_internal_spk_mans` or not",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-590362243,590362243,
achow101,2020-02-27 01:46:57,I've added #18204 into this now,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-591735331,591735331,
hugohn,2020-02-27 10:46:37,"Not exactly related but I got a crash due to an assert() failing when I create a native descriptor wallet with `avoid_reuse=true` (5th parameter)\n\n`./bitcoin-cli -testnet createwallet test_wallet true true """" true true`\n\nhttps://github.com/bitcoin/bitcoin/blob/652ffb49f1fdd9be804990e9e350fd8f647ceb81/src/wallet/wallet.cpp#L754",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-591904329,591904329,
achow101,2020-02-27 19:40:25,"> Not exactly related but I got a crash due to an assert() failing when I create a native descriptor wallet with `avoid_reuse=true` (5th parameter)\n> \n> `./bitcoin-cli -testnet createwallet test_wallet true true """" true true`\n\nI can't replicate this.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-592141441,592141441,
hugohn,2020-02-28 04:14:33,"hmm I synced to tip and now couldn't reproduce either...\n\nFWIW, it crashed after restarting `bitcoind` with `-testnet -wallet=test_wallet`, not when I created the wallet. Will report if reproducible.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-592304787,592304787,
achow101,2020-03-16 19:37:01,"Rebased following #18204 merge, so this is ready for review.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-599723688,599723688,
instagibbs,2020-03-26 14:52:37,"all changes until `""Implement GetNewDestination for DescriptorScriptPubKeyMan""` 0b4b742dd57b6413617368b013350b5397711f9f look correct.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-604475820,604475820,
instagibbs,2020-03-26 19:00:42,changes through `Add IsLegacy to CWallet so that the GUI knows whether to show watchonly` https://github.com/bitcoin/bitcoin/pull/16528/commits/1687d1a1681fc1f6cfaa23a48ea99aa0b07acb4a look correct,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-604624259,604624259,
instagibbs,2020-03-28 17:29:04,"looks like unit test is failing sometimes:\n```\nwallet/test/wallet_tests.cpp(651): error: in ""wallet_tests/wallet_descriptor_test"": exception ""std::ios_base::failure"" raised as expected: validation on the raised exception through predicate ""malformed_descriptor""\n```",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605492768,605492768,
achow101,2020-03-28 21:12:12,"> looks like unit test is failing sometimes:\n> \n> ```\n> wallet/test/wallet_tests.cpp(651): error: in ""wallet_tests/wallet_descriptor_test"": exception ""std::ios_base::failure"" raised as expected: validation on the raised exception through predicate ""malformed_descriptor""\n> ```\n\nNot seeing this fail at anytime.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605520140,605520140,
instagibbs,2020-03-29 00:09:36,"It was from Travis run at the time of my review.\n\nOn Sat, Mar 28, 2020, 5:12 PM Andrew Chow <notifications@github.com> wrote:\n\n> looks like unit test is failing sometimes:\n>\n> wallet/test/wallet_tests.cpp(651): error: in ""wallet_tests/wallet_descriptor_test"": exception ""std::ios_base::failure"" raised as expected: validation on the raised exception through predicate ""malformed_descriptor""\n>\",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-605536631,605536631,
instagibbs,2020-03-30 13:31:40,"re-ACK https://github.com/bitcoin/bitcoin/pull/16528/commits/54be087eebdfefb70c018f67476f2160ae8ca29b\n\nonly assert cleanup and additional suggested tests",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606000696,606000696,
instagibbs,2020-03-30 13:33:47,"~~direct link to unit test failure: https://travis-ci.org/github/bitcoin/bitcoin/jobs/668186151#L4252~~\n\nhmm, that's an expected error, I'm not sure why Travis is complaining actually",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606001866,606001866,
Sjors,2020-03-30 14:15:02,"I restarted job 4 and 13 as well as AppVeyor; they all fail again.\n\nI get the same error on macOS:\n```\nwallet/test/wallet_tests.cpp:651: error: in ""wallet_tests/wallet_descriptor_test"": exception ""std::ios_base::failure"" raised as expected: validation on the raised exception through predicate ""malformed_descriptor""\n```",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606025615,606025615,
achow101,2020-03-30 16:53:02,Rebased this on master to see if that fixes the travis failures. Also added a change to that test to make it less restrictive so hopefully it passes now.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606116845,606116845,
instagibbs,2020-03-31 13:21:42,"> IsSpentKey()\n\nRight, there is even a TODO for descriptor wallets in the function. It's a good time to get rid of that TODO.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606623230,606623230,
achow101,2020-03-31 19:46:23,Fixed the `IsSpentKey()` issue.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606836269,606836269,
instagibbs,2020-03-31 21:12:49,reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/7ea9f0fb848e3ccc69e05b4c1bad465e73bc1963,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-606878414,606878414,
achow101,2020-04-01 20:49:35,Turns out `IsSpentKey` was not fully fixed. I've added an additional check for `HavePrivateKeys` before trying to do `ExpandPrivate`.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607482620,607482620,
achow101,2020-04-01 22:26:22,"So I've just realized that existing multisig workflows are completely non-functional under descriptor wallets. If you make a multisig that includes a key that a descriptor wallet has, it won't be able to sign that multisig. This is because the multisig script does not match any of the scripts produced by the descriptors so none of the `DescriptorScriptPubKeyMan`s return true for `CanProvide` and t",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607520569,607520569,
instagibbs,2020-04-02 00:38:49,"from IRC:\n\n```\n<instagibbs> It seems like a very reasonable use-case to support.\n<instagibbs> Core-generated key being in a multisig :)\n<achow101> my original thoughts about the multisig stuff would be you have 2 wallets, one generated normally, and another watch only one for the multisig. so you then use psbt and multiwallet\n<instagibbs> what's the hold-up on export? feature creep?\n",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607557463,607557463,
achow101,2020-04-02 01:11:43,I've changed it to try signing with all `ScriptPubKeyMan`s.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607565518,607565518,
Sjors,2020-04-02 08:40:04,"> One possible solution is to simply have every ScriptPubKeyMan sign always, regardless of CanProvide. But this runs into the whole key mutation thing we are trying to avoid. It would then be possible to have a key for one address type be able to sign for a different address type for the same key. At least the wallet would not be watching for such a mutation. But I suppose the whole multisig thing",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607706100,607706100,
instagibbs,2020-04-02 12:57:58,"@Sjors I think signing eagerly is fine provided it doesn't somehow expand ""is mine"" definition in any way or otherwise include ways to trick the user.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607830177,607830177,
instagibbs,2020-04-02 13:16:39,"reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/4fac5c2b382135a86e4c66c05a2abdd912174a50\n\nthe ""attempt signing with all"" changes actually make the code easier to read as well",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-607840538,607840538,
achow101,2020-04-03 03:19:15,I've made hopefully that last major change to this. I had to fix `FillPSBT` because the earlier change wasn't actually signing multisig PSBTs either. The change for that is that we are also going to hold in memory all of the pubkeys that were produced during descriptor expansion. This is done during `SetCache` and `TopUp` when the descriptor is expanded. `GetSigningProvider` is modified and overlo,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608207218,608207218,
Sjors,2020-04-03 12:40:55,"Another issue I have with ""blindly"" signing something for which you don't have an exact descriptor, is that change detection doesn't work.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608411217,608411217,
achow101,2020-04-03 16:29:08,"> I'm not a fan of this. I think a wallet should only sign for scripts that derive from its descriptors. Let's just support exporting account level xpubs for the multisig use case. We can later add a convenience RPC that, given external xpub(s), produces a multisig with itself and imports those descriptors.\n\nExporting xpubs doesn't help with signing. The crux of this issue is that we only use ",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608537544,608537544,
Sjors,2020-04-03 17:58:24,"I guess it doesn't matter too much.\n\n>  even if you imported a multisig descriptor into a wallet that has some private keys for it, we still wouldn't be able to sign because that particular descriptor doesn't have the private keys for signing\n\nThat's a good point. What about signing everything that's `IsMine`? Alternatively, a boolean that opts into this more broad signing behaviour.\n\n",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-608580172,608580172,
achow101,2020-04-06 16:30:15,"The travis failures should be fixed. I'm not sure what's wrong with appveyor, but it seems to be unrelated.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-609899991,609899991,
instagibbs,2020-04-06 16:32:48,reACK https://github.com/bitcoin/bitcoin/pull/16528/commits/7fee7cd034b9c38244a6e284bd3c719482b01a46 with comment changes requested. Still need to review tests top to bottom once things settle.,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-609901316,609901316,
achow101,2020-04-07 18:41:26,"Made a few more test framework changes, particularly to have `createwallet` make wallets based on the startup options unless overridden. This avoids having to put `descriptors=self.options.descriptors` in every `createwallet` call. Also changed `wallet_importdescriptors.py` to not rely on `dumpprivkey`.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-610555013,610555013,
achow101,2020-04-10 00:05:27,"I've changed `importdescriptors` to allow importing descriptors that have some but not all private keys. A test has also been added for this. Since this change requires `ExpandPrivate` to expand all the way, The commit that changed `ExpandPrivate` to return a bool has been dropped.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-611810309,611810309,
ryanofsky,2020-04-10 08:33:21,"Writeup at https://gist.github.com/achow101/94d889715afd49181f8efdca1f9faa25 is fantastic. Really helpful to me, and probably others who want to catch up with this. Better than anything else I've read because it focuses more on _why_ than _what_ of the design.\n\nWould be good to link to from project https://github.com/bitcoin/bitcoin/projects/12 and maybe move to the dev wiki",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-611938384,611938384,
instagibbs,2020-04-10 13:28:19,"> I've changed importdescriptors to allow importing descriptors that have some but not all private keys.\n\nSo this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs ""sign and send"" type behavior:\n\n1) bumpfee: Instead of returning a PSBT, it will attempt to sign and send the transaction, and fail",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612028267,612028267,
ryanofsky,2020-04-10 15:35:18,"> So this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs ""sign and send"" type behavior:\n\nThis is just an uninformed opinion, but it would seem less surprising to me for the ""Disable Private Keys"" option you see creating a wallet to just be a safeguard against unintentionally generating and import",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612083154,612083154,
achow101,2020-04-10 17:21:31,"> > I've changed importdescriptors to allow importing descriptors that have some but not all private keys.\n> \n> So this is going to make certain actions strange, due to the various places we use `IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)` to trigger PSBT vs ""sign and send"" type behavior:\n> \n>     1. bumpfee: Instead of returning a PSBT, it will attempt to sign and send the transact",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612130632,612130632,
achow101,2020-04-10 18:35:22,"Since descriptor wallets is still experimental and not the default, I'm find with some of the weird, less supported, use/edge cases not entirely working. These will need to be fixed in the future, but I would like to at least get the basic functionality in. Especially when those cases require more significant concentrated thought, e.g. at a CoreDev event where we can all sit around a whiteboard an",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612160983,612160983,
achow101,2020-04-10 19:39:08,"On IRC, @sipa points out that we can just use separate RPCs and buttons for bumpfee, PSBT GUI, and whatever else is switching on `WALLET_FLAG_DISABLE_PRIVATE_KEYS` instead of having functions that change their behavior based on that flag.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-612186478,612186478,
fjahr,2020-04-17 21:05:59,"tACK d42a6edd89a313ee25683226a9aa573087de1223\n\nI have manually created a normal descriptor wallet with a private key and a watch-only wallet for multisig descriptor and tested basic functionalities like sending, receiving and info calls. Also ran all automated tests locally.\n\nRegarding the latest discussion about the current limitations: I think this can be merged as is but I would suggest",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-615463409,615463409,
fjahr,2020-04-21 19:59:32,"Re-ACK 837aba9a3680922acbf383df37485d53790b19ae\n\nOnly changes were addressing my nit comments. Not sure why the build is failing, I don't see the error locally.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617382554,617382554,
achow101,2020-04-21 21:10:53,"> Only changes were addressing my nit comments. Not sure why the build is failing, I don't see the error locally.\n\nLooks like there's a hidden conflict with master. I've rebased this and fixed the issues.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617416081,617416081,
fjahr,2020-04-22 15:14:35,"re-ACK 4c841356c2296cc011bcd678ba71ccba28129a67\n\nOnly code-changes since last review were small fixups in `wallet/rpcdump.cpp` and `test/functional/wallet_keypool.py`.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-617841418,617841418,
Sjors,2020-04-23 07:37:14,"In ed01138 locally the following test fails on macOS:\n\n```\n test/functional/wallet_balance.py --descriptors\n2020-04-23T07:36:07.090000Z TestFramework (INFO): Initializing test directory /var/folders/h6/qrb4j9vn6530kp7j4ymj934h0000gn/T/bitcoin_func_test_5klxvr5f\n2020-04-23T07:36:09.863000Z TestFramework (ERROR): JSONRPC error\nTraceback (most recent call last):\n  File ""/Users/sjors/dev",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618234765,618234765,
jonatack,2020-04-23 16:22:45,"Code review ACK ed0113820b498f1e904ca9a0b1205708a6f68dca\n\nNo blockers from what I could see. Good work on the tests. Feel free to ignore the nit comments; I don't mind re-reviewing the diff if you retouch. Built/ran tests several times on Debian with no warnings or failures.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618497348,618497348,
achow101,2020-04-23 17:24:59,"> In ed01138 locally the following test fails on macOS:\n\nThat's intended. Not all tests have been reworked to work with descriptor wallets. `wallet_balance.py` is one of those tests that need some modifications.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618532813,618532813,
achow101,2020-04-23 18:01:56,Addressed @jonatack's comments and rebased as requested by @Sjors ,https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618555157,618555157,
Sjors,2020-04-23 18:48:25,"utACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82 (rebased, nits addressed)\n\n> That's intended. Not all tests have been reworked to work with descriptor wallets. `wallet_balance.py` is one of those tests that need some modifications.\n\nI might be seeing two different issues. When I run the full test suite that particular test sometimes fails with `[node 0] bitcoind exited with status 1 during ",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618586971,618586971,
jonatack,2020-04-23 21:38:39,"Code review re-ACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82.\n\nRebuilt, re-ran all tests, bitcoind and a few `importdescriptors` rpc commands as a sanity check. I did not test the GUI changes yet.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-618685814,618685814,
fjahr,2020-04-24 15:32:02,"re-ACK 223588b1bbc63dc57098bbd0baa48635e0cc0b82\n\nChanges were only rebase and addressing nits. FWIW, I did not see any failures from `wallet_balance.py`.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-619082907,619082907,
instagibbs,2020-04-24 19:32:47,"light re-ACK 223588b\n\nRead carefully through the descriptor-specific tests one more time, as well as the discussion since my last review. Admittedly a light re-review. Some more advanced use-cases may require additional tooling later and that's ok.",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-619202090,619202090,
practicalswift,2020-04-27 14:31:32,"People interested in this recently merged PR might be interested in reviewing the small follow-up PR #18782 (""wallet: Make sure no DescriptorScriptPubKeyMan or WalletDescriptor members are left uninitialized after construction"") :)",https://github.com/bitcoin/bitcoin/pull/16528#issuecomment-620024560,620024560,
Sjors,2020-01-30 13:53:17,"Whether it's P2SH depends on `address_type`, so maybe just say ""The descriptor for this multisig address\""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372959221,372959221,src/rpc/misc.cpp
Sjors,2020-01-30 14:34:32,In  e40a833c3bffb0cf723357238eb809398e3e5237 `Create LegacyScriptPubKeyMan when not a descriptor wallet`: accidentally dropping `Upgrade()`?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372983424,372983424,src/wallet/scriptpubkeyman.cpp
Sjors,2020-01-30 14:38:58,"The new dummy class in 3f6cbc5bb16f8a021bbe88d998b12698205aaeac introduces several compiler problems (rebase slippage?), e.g:\n```\n./wallet/scriptpubkeyman.h:483:41: error: non-virtual member function marked 'override' hides virtual member function\n    void KeepDestination(int64_t index) override;\n```",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r372985994,372985994,src/wallet/scriptpubkeyman.h
achow101,2020-01-30 22:32:23,"Dropped the commit, but fixed in the separate PR for descriptors in `createmultisig`",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373229817,373229817,src/rpc/misc.cpp
achow101,2020-01-30 22:32:38,"It should be dropped, but not in that commit. Moved it to the dummy class definition.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373229896,373229896,src/wallet/scriptpubkeyman.cpp
achow101,2020-01-30 22:33:04,"Since this gets dropped later, dropped this at the dummy class definition.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373230082,373230082,src/wallet/scriptpubkeyman.h
Sjors,2020-01-31 16:36:24,In ee6980be437c09df6044a5ced7caa91410453027 `Introduce DescriptorScriptPubKeyMan as a dummy class`: this line (`using ScriptPubKeyMan::ScriptPubKeyMan;`) is dropped in 7af1a569567a595dc26c33075632f406c4ff0904.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373572192,373572192,src/wallet/scriptpubkeyman.h
Sjors,2020-01-31 16:40:55,"nit: these are added, but not used, in 7af1a569567a595dc26c33075632f406c4ff0904 `Store WalletDescriptor in DescriptorScriptPubKeyMan` which seems out of the blue. b784a150b23e10ee794d1d2616a0df5c0f317fef seems a better place.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373574359,373574359,src/wallet/walletdb.h
Sjors,2020-01-31 16:50:47,In 7af1a569567a595dc26c33075632f406c4ff0904: `ScriptPubKeyMap`'s `uint32_t` changes to `int32_t` in e7e62209a176a00a03657e6fe8fd221bf2821bf5,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373579192,373579192,src/wallet/scriptpubkeyman.h
Sjors,2020-01-31 18:09:19,ee6980be437c09df6044a5ced7caa91410453027:  `void RewriteDB() override;` is dropped in fd995af379b73b63b78b276b5b8f31d39b2d2b67,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r373612485,373612485,src/wallet/scriptpubkeyman.h
achow101,2020-02-11 18:47:09,That's intentional. The `using ScriptPubKeyMan::ScriptPubKeyMan;` is needed to use the default `ScriptPubKeyMan` constructor until we add a custom one for `DescriptorScriptPubKeyMan`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377827327,377827327,src/wallet/scriptpubkeyman.h
achow101,2020-02-11 19:35:49,Moved,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377853944,377853944,src/wallet/walletdb.h
achow101,2020-02-11 19:35:55,Changed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377854006,377854006,src/wallet/scriptpubkeyman.h
achow101,2020-02-11 19:36:00,Dropped,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r377854045,377854045,src/wallet/scriptpubkeyman.h
Sjors,2020-02-19 14:30:00,"Should this be `GetSolvingProvider` for watch-only wallets? I'm having difficulty getting bip32 keys added to the PSBT while trying to rebase #16546 , see https://github.com/Sjors/bitcoin/commit/8660421cba60de3dd5ab76c8f285bce1f0b4327b\n(maybe I should try less of a hack and actually make that subclass...)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381325869,381325869,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-19 16:04:54,Once #18180 is implemented that reduce at least some of my confusion :-) ,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r381372422,381372422,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-21 17:16:39,"I figured out what confused me. I was trying to call the Descriptor SKPMan version of `FillPSBT()` but that doesn't include the UTXOs, which are normally added in `CWallet`. I overhauled my design to avoid that problem. ",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r382704392,382704392,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-28 12:22:39,"Is still necessary now that you're no longer caching individual keys? If not, then it looks like you can drop `ClearDescriptorCache()`.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385666508,385666508,src/wallet/wallet.cpp
Sjors,2020-02-28 12:28:25,"Now that you're no longer caching individual keys, can there still be a situation where you have a non-empty cache that's incomplete? If not, then you might be able to drop `GetNotCached`.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385668788,385668788,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-28 12:41:11,"Nvm, we still cache individual keys for `/*h` descriptors. ",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385674205,385674205,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-28 12:42:09,"We still cache individual keys for `/*h` descriptors, but they're indexed rather than sequential, so the question remains here.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385674605,385674605,src/wallet/wallet.cpp
achow101,2020-02-28 17:57:46,Every `Expand` will also return the parent xpub. We don't want to be constantly rewriting that.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385838987,385838987,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-02-28 18:20:59,I don't think these changes are related to the commit message?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385849291,385849291,src/wallet/walletutil.h
instagibbs,2020-02-28 18:23:19,Just a thought you can nack: You can check for the wallet flags since you just set them above. Easier pattern matching for reviewers who are expecting `IsWalletFlagSet`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385850369,385850369,src/wallet/wallet.cpp
instagibbs,2020-02-28 18:53:01,please annotate bool args,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385864196,385864196,src/wallet/walletdb.cpp
instagibbs,2020-02-28 18:53:06,please annotate bool args,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385864230,385864230,src/wallet/walletdb.cpp
instagibbs,2020-02-28 20:30:08,"`0',testnet` missing space",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385907997,385907997,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-02-28 20:31:38,Seems like `Build descriptor string` goes here?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385908598,385908598,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-02-28 20:34:40,I don't see `intermediate key` being written?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385909756,385909756,src/wallet/scriptpubkeyman.cpp
achow101,2020-02-28 20:35:02,"Yes, it is no longer needed. I've removed it.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385909909,385909909,src/wallet/wallet.cpp
achow101,2020-02-29 00:20:47,Hmm. I think the commit they were part of was accidentally squashed. Moved back into their own commit.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978728,385978728,src/wallet/walletutil.h
achow101,2020-02-29 00:20:54,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978750,385978750,src/wallet/wallet.cpp
achow101,2020-02-29 00:21:04,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978773,385978773,src/wallet/walletdb.cpp
achow101,2020-02-29 00:21:08,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978785,385978785,src/wallet/walletdb.cpp
achow101,2020-02-29 00:21:12,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978801,385978801,src/wallet/scriptpubkeyman.cpp
achow101,2020-02-29 00:21:36,Moved,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978865,385978865,src/wallet/scriptpubkeyman.cpp
achow101,2020-02-29 00:21:55,Removed. The change that did that was reverted given that we now use the descriptor xpub cache.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r385978925,385978925,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-29 09:22:31,Try `ExpandFromCache(` before `Expand(`? ,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386015063,386015063,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-29 09:27:42,"""No addresses available""\n\nIt may also be worth clarifying that although `CanGetAddresses()` considers `descriptor.next_index < descriptor.range_end`, each topup bumps `range_end`, except for wallets with hardened derivation, with encrypted or without private keys. Those wallets need to call `keypoolrefill`.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386015338,386015338,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-29 09:51:15,`m_max_cached_index`?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386016600,386016600,src/wallet/scriptpubkeyman.h
Sjors,2020-02-29 09:58:38,Do this before (or instead of) `CanGetAddresses()` for readability?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386016947,386016947,src/wallet/scriptpubkeyman.cpp
Sjors,2020-02-29 10:03:37,"Worth documenting that:\n```\nThis tops up the descriptor cache (and `m_map_script_pub_keys`).\nThe cache is stored in the wallet payload\nand used to expand the descriptor upon wallet load. A descriptor\nScriptPubKeyMan may rely more on ephemeral data than its legacy keypool\ncounterpart. For wallets without private keys and with unhardened derivation, the\nkeypool is aved as a single xpub",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386017234,386017234,src/wallet/scriptpubkeyman.h
achow101,2020-03-02 19:31:04,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603451,386603451,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-02 19:31:11,Done. Added a comment.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603522,386603522,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-02 19:31:21,done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603601,386603601,src/wallet/scriptpubkeyman.h
achow101,2020-03-02 19:31:59,I added a comment earlier so that should help. I would prefer to keep the current pattern of always doing `CanGetAddresses` first.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386603947,386603947,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-02 19:32:07,Added a similar comment.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r386604011,386604011,src/wallet/scriptpubkeyman.h
instagibbs,2020-03-04 16:41:32,"Even if it was ""unnecessary"" I think it makes the code less brittle to future changes anyways.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r387791934,387791934,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-20 19:42:50,suggestion: `s/descriptor/m_wallet_descriptor/`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395854864,395854864,src/wallet/scriptpubkeyman.h
instagibbs,2020-03-20 20:07:20,"Placeholder for this thought: As I mentioned elsewhere, I'd really like something smarter for detecting `IsChange`. We could instead store the internall-ness via record with the spkm themselves, then the `active` record needs one less thing as well, and know what is change even on wallet restore.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395865796,395865796,src/wallet/walletdb.cpp
instagibbs,2020-03-20 20:10:49,suggestion: `s/m_internal_spk_managers/m_active_internal_spkm/`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867154,395867154,src/wallet/walletdb.cpp
instagibbs,2020-03-20 20:11:18,suggestion: `s/m_external_spk_managers/m_active_external_spkm/`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867365,395867365,src/wallet/walletdb.cpp
instagibbs,2020-03-20 20:12:04,should this get upset or log if there's already one in the map?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395867702,395867702,src/wallet/walletdb.cpp
instagibbs,2020-03-20 20:16:41,suggestion: `ACTIVEEXTERNALSPK` or something,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395869627,395869627,src/wallet/walletdb.h
instagibbs,2020-03-20 20:17:02,suggestion: `ACTIVEINTERNALSPK` or something,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395869783,395869783,src/wallet/walletdb.h
instagibbs,2020-03-20 20:21:28,*sheds single tear for simplicity*,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395871641,395871641,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-20 20:24:44,"Just noting that this is strictly a ""softfork"" over LegacySPKM: previously any detected pubkey in involved in a script would boot an entry.\n\nThe new behavior is much simpler and easier to reason about. Just noting it's different in case somebody does some sort of idiotic key-sharing wallet between chains.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r395872979,395872979,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 13:11:51,under what circumstances would multiple scriptpubkeys be generated for a descriptor wallet? Isn't this just for `combo` which is inapplicable?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397840687,397840687,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 13:19:50,should be asserting or aborting the next line when spkm cannot be found(`nullptr`) for whatever reason,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397846119,397846119,src/wallet/walletdb.cpp
instagibbs,2020-03-25 13:21:46,this means the `DBKeys::WALLETDESCRIPTOR`  must be an earlier record in all cases? Probably deserves a note.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397847371,397847371,src/wallet/walletdb.cpp
instagibbs,2020-03-25 13:39:22,why is `HavePrivateKeys()` sufficient here for non-HD?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397859895,397859895,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 14:34:59,brackets for this conditional block please,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397903046,397903046,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 14:36:48,"just make the second argument `1`, then delete the line below?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397904496,397904496,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 14:39:13,is it important to not set `descriptor.range_end` here?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397906438,397906438,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-25 14:52:45,suggested rename to `temp_cache` or something to make it visually easier to track what's what,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r397917366,397917366,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 16:39:01,"Just `combo` which can be imported. `TopUp` is called for all imports to generate the scriptPubKeys, scripts, etc.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398001581,398001581,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 19:02:13,"It isn't. `CanGetAddresses` should return false for non-ranged descriptors because you cannot get new addresses from such a descriptor. `HavePrivateKeys` here is for when the cache runs on hardened derivation. If we have private keys, then we can continue to derive those hardened keys.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398099420,398099420,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 19:06:30,"In case we exit early, we don't want to update the descriptor.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398101876,398101876,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 20:31:25,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149580,398149580,src/wallet/scriptpubkeyman.h
achow101,2020-03-25 20:31:31,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149628,398149628,src/wallet/walletdb.cpp
achow101,2020-03-25 20:31:36,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149693,398149693,src/wallet/walletdb.cpp
achow101,2020-03-25 20:31:41,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149738,398149738,src/wallet/walletdb.h
achow101,2020-03-25 20:31:47,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149790,398149790,src/wallet/walletdb.h
achow101,2020-03-25 20:31:58,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149895,398149895,src/wallet/walletdb.cpp
achow101,2020-03-25 20:32:03,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149942,398149942,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 20:32:07,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398149976,398149976,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 20:32:20,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398150104,398150104,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-25 20:47:51,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398158910,398158910,src/wallet/walletdb.cpp
achow101,2020-03-25 20:48:04,Added a check that will give an error.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398159024,398159024,src/wallet/walletdb.cpp
instagibbs,2020-03-26 14:41:45,"> CanGetAddresses should return false for non-ranged descriptors because you cannot get new addresses from such a descriptor\n\nHm? If you import a non-ranged descriptor that includes a private key, `CanGetAddress` will return true here.\n\nWhatever the result of this discussion is, I think this code section requires a comment.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398626518,398626518,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 14:44:45,Ah right I got confused about `active` arg. In that case the `importdescriptors` help should be noting that `combo` cannot be active. The error is helpful enough but I think it warrants note.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398628815,398628815,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 15:52:41,"> But we may still be unable to get addresses, these conditions are caught later.\n\nfrom `GetNewDestination`. Might want to move that comment to where I'm asking and explain exactly what additional checks are required?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398683481,398683481,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 15:55:00,`m_address_type`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398685369,398685369,src/wallet/scriptpubkeyman.h
instagibbs,2020-03-26 15:55:09,`m_internal`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398685506,398685506,src/wallet/scriptpubkeyman.h
instagibbs,2020-03-26 15:57:38,just assert this at the top of the function?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398687507,398687507,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 15:58:56,"we should only be `SingleType`, right? Assert earlier and then just do simple type check?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398688635,398688635,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 16:10:01,Note if and when this value can change,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398697109,398697109,src/wallet/walletutil.h
instagibbs,2020-03-26 16:10:13,"Note if and when this value is set and can change e.g., `TopUp`?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398697256,398697256,src/wallet/walletutil.h
instagibbs,2020-03-26 16:25:34,Can you explain why we do a `TopUp(1)` here then a few lines later do the `ExpandFromCache`?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398709651,398709651,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 16:59:18,future work: looks like a lot of duplicated code with a couple differences from legacy.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398735707,398735707,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-26 17:04:53,Descriptor*,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398739746,398739746,src/wallet/wallet.h
achow101,2020-03-26 18:02:46,I've tightened up the checks that `CanGetAddresses` does. It will do a `IsSingleType` and `IsRange` check now to disallow non-ranged descriptor and combo descriptors.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781243,398781243,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-26 18:03:01,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781422,398781422,src/wallet/scriptpubkeyman.h
achow101,2020-03-26 18:03:07,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781493,398781493,src/wallet/scriptpubkeyman.h
achow101,2020-03-26 18:03:12,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398781557,398781557,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-26 18:05:02,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782728,398782728,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-26 18:05:08,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782796,398782796,src/wallet/walletutil.h
achow101,2020-03-26 18:05:13,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398782851,398782851,src/wallet/walletutil.h
achow101,2020-03-26 18:08:27,`TopUp(1)` generates the next cache item if we have run out of cached things. `ExpandFromCache` can then use that cached thing. Otherwise `TopUp(1)` is a no-op.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398785993,398785993,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-26 18:08:36,Fixed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r398786114,398786114,src/wallet/wallet.h
instagibbs,2020-03-27 13:48:49,suggested rename: `GetWalletDescriptor`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399276875,399276875,src/wallet/wallet.h
instagibbs,2020-03-27 13:54:16,"in `add importdescriptors RPC and tests for native descriptor wallets`:\n\nnit: This little code block isn't really necessary. It'll fail to get non-null `spk_manager` for the single legacy spkm.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399280484,399280484,src/wallet/wallet.cpp
instagibbs,2020-03-27 13:56:15,"in `add importdescriptors RPC and tests for native descriptor wallets`:\n\n\n`s/spk_manager/new_spk_man` to line up name with `old_spk_man`",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399281845,399281845,src/wallet/wallet.cpp
instagibbs,2020-03-27 14:06:39,"Not this PR's fault, but this should really be named `GetActiveScriptPubKeyMan` even though the args make it implicit.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399288954,399288954,src/wallet/wallet.cpp
instagibbs,2020-03-27 14:08:37,"another not-PR comment: `m_internal_spk_managers` and `m_external_spk_managers` should also be marked as active, at least in comments.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399290324,399290324,src/wallet/wallet.cpp
instagibbs,2020-03-27 14:12:08,`of active spkMans`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399292755,399292755,src/wallet/wallet.cpp
instagibbs,2020-03-27 14:28:04,"`add importdescriptors RPC and tests for native descriptor wallets`:\n\ns/Active descriptor/Active descriptors/",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399304091,399304091,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 14:51:55,"`add importdescriptors RPC and tests for native descriptor wallets`:\n\nneeds test",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399321705,399321705,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 14:52:31,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nneeds test",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322132,399322132,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 14:52:42,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nneeds test",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322281,399322281,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 14:53:28,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nneeds test",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399322814,399322814,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 14:56:03,"`add importdescriptors RPC and tests for native descriptor wallets`\n\ncan you calculate `4` in code instead of magic?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399324799,399324799,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 14:57:28,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nwe should also check import didn't somehow add an internal spkm with change addresses",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399325819,399325819,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 14:59:28,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nshould test the fact that correct change addresses can be drawn now",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399327270,399327270,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 14:59:45,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nshould test the fact that correct change addresses can be drawn now",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399327486,399327486,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 15:00:58,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nWe should be testing that `keypoolsize` ends up the expected size post-active-imports, and not before",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399328411,399328411,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 15:03:35,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nshould test both ranged and non-ranged descriptors (non-active) don't replace ""keypool""\n",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399330460,399330460,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 15:08:15,need to check they're actually returning the right type as well for all 3 cases (maybe this is caught in a `--descriptor` variant of tests),https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399333787,399333787,test/functional/wallet_descriptor.py
instagibbs,2020-03-27 15:11:55,"`add importdescriptors RPC and tests for native descriptor wallets`\n\nWe should also test `sh(wsh())` and make sure that the various imports aren't ""displacing"" the other types. (I didn't see it might have missed it)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399336346,399336346,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-27 15:32:18,"note: not sure how this can be hit. Has to be a ranged descriptor that is ""null""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399350834,399350834,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 15:47:38,default is actually false in the code,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399361504,399361504,src/wallet/rpcdump.cpp
instagibbs,2020-03-27 15:50:48,this test needs to check default arguments like `active`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399363853,399363853,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 16:53:19,`pk(xpub...)` should hit this. I'll try adding a test.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399405664,399405664,src/wallet/rpcdump.cpp
Sjors,2020-03-27 17:40:47,What happens if this fails? Would be good to have a test for a malformed descriptor.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399434828,399434828,src/wallet/walletutil.h
Sjors,2020-03-27 17:43:11,"I'm still not very excited about string serialisation, because it sets descriptors in stone. On the other hand, we can also write a straight-forward upgrade script, since descriptors are not encrypted.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399436260,399436260,src/wallet/walletutil.h
Sjors,2020-03-27 18:02:45,"It would be nice to avoid this `ACTIVE[INTERNAL/EXTERNAL]SPK` record altogether and just add two fields to  `WALLETDESCRIPTOR`. I vaguely recall there was a problem with loading order, as the reason we have separate records?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399447890,399447890,src/wallet/walletdb.cpp
Sjors,2020-03-27 18:06:10,"`memonly` could use some documentation (IIUC it depends on if you're loading an existing wallet, or inserting a new descriptor; it's not some test suite hack)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399449698,399449698,src/wallet/wallet.h
Sjors,2020-03-27 18:22:49,Nit: can you add `index` to the log message?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399459055,399459055,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:24:18,"nit: you do an early return here\n\n@instagibbs IIUC earlier behaviour can still be mimicked with a `combo()` descriptor.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399459919,399459919,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:28:58,You may have to change the wallet to use `|=` instead of `&=`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399462420,399462420,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:33:01,"You're already using this function in ed75ce9649ce7a26146b45bb85584f5522945a3d, so may want to move this commit up (though it does compile).",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399464603,399464603,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:37:10,Should check if this fails.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399466760,399466760,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:39:35,Do we want to panic if `m_map_script_pub_keys[script]` exists and `!= i`?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399468023,399468023,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 18:47:07,"I'm not a fan. Let's just have `WALLETDESCRIPTORCACHEPARENTXPUB` and `WALLETDESCRIPTORCACHEDERIVEDXPUB`, and maybe some underscores :-)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399472037,399472037,src/wallet/walletdb.cpp
Sjors,2020-03-27 18:49:36,Do we want to check the cache for gaps and emit a warning?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399473488,399473488,src/wallet/walletdb.cpp
Sjors,2020-03-27 19:02:38,Shouldn't we allow `CanGetAddresses` from an unranged descriptor once?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399480181,399480181,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 19:17:07,"`for (const auto& mi : m_map_crypted_keys) {` and then below `mi.second.first;` compiles too, though maybe I missed something.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399487630,399487630,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 19:20:26,"nit: maybe swap eb9c41e9240fe01f6404cf23abe1fc35ca146586 and ee03d46178a3e8d511c33f734892820b36ed7a1a.\n\nA test would be nice.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399489479,399489479,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 19:22:27,This commit message in 50c3b4eee31e095a5080fcb4109cb5d8f7bfbbe7 speaks of `GetSolvingProvider`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399490475,399490475,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 19:25:33,"`ExpandPrivate()` is a `void`, but it uses `GetPrivKey` internally and just ignores failure. Might be worth making  `ExpandPrivate()` a `bool` and adding an `assert` here.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399492040,399492040,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-27 19:29:08,f5204ed3fe1b2a059e35e54248d38eac88c629e0 could be split between GUI and RPC.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399493975,399493975,src/qt/createwalletdialog.cpp
Sjors,2020-03-27 19:31:13,f5204ed3fe1b2a059e35e54248d38eac88c629e0 moves `WriteActiveScriptPubKeyMan` a few lines up for some reason.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399494992,399494992,src/wallet/walletdb.h
Sjors,2020-03-27 19:33:46,"Descriptors don't contain private keys, so maybe make it more clear that we're generating a new seed, and thus need new descriptors for that.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399496245,399496245,src/wallet/wallet.cpp
Sjors,2020-03-27 19:40:28,"`test_address` or another function could also test `getnewaddress` (in particular for an unranged descriptor, which imo should work exactly once)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399499505,399499505,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:10:04,How so?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539375,399539375,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:11:37,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539940,399539940,src/wallet/wallet.h
achow101,2020-03-27 21:11:43,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399539974,399539974,src/wallet/wallet.cpp
achow101,2020-03-27 21:11:48,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540013,399540013,src/wallet/wallet.cpp
achow101,2020-03-27 21:11:54,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540059,399540059,src/wallet/wallet.cpp
achow101,2020-03-27 21:12:17,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540211,399540211,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:12:40,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540374,399540374,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:12:45,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540401,399540401,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:12:49,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540439,399540439,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:12:54,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540468,399540468,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:13:10,Iterated over `addresses` instead.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540593,399540593,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:18,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540638,399540638,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:24,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540670,399540670,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:28,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540684,399540684,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:32,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540725,399540725,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:42,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540804,399540804,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:13:49,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399540853,399540853,test/functional/wallet_descriptor.py
achow101,2020-03-27 21:14:10,"Not sure what you mean by ""displacing""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541007,399541007,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 21:14:17,Added a test.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541048,399541048,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:14:24,Fixed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399541096,399541096,src/wallet/rpcdump.cpp
achow101,2020-03-27 21:18:35,"No. `CanGetAddresses` implies that more addresses can be fetched. You can't do that for an unranged descriptor, we consider their address already fetched and used.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399542742,399542742,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 22:09:00,Descriptors are inherently strings. There is no alternative serialization that doesn't eventually result in a descriptor string as we know now.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399560621,399560621,src/wallet/walletutil.h
achow101,2020-03-27 22:11:13,"These records are generic spkman records, not descriptor wallet specific records. It does not make sense to make these part of `WALLETDESCRIPTOR` when not all spkmans are descriptors.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399561307,399561307,src/wallet/walletdb.cpp
achow101,2020-03-27 22:19:30,Why?,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399563823,399563823,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 22:29:49,I wanted to leave this open to different caching structures in the future and not have a ton of cache structure specific records like that.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399566855,399566855,src/wallet/walletdb.cpp
achow101,2020-03-27 22:32:03,That's inherently done by not being able to expand from cache during `SetCache`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399567485,399567485,src/wallet/walletdb.cpp
achow101,2020-03-27 22:36:06,And? We modify `GetSolvingProvider` below. This is an internal function.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399568614,399568614,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 22:44:44,"Meh, it's not really a big difference.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399570970,399570970,src/qt/createwalletdialog.cpp
achow101,2020-03-27 22:47:31,"Disagree, on both counts.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399571664,399571664,test/functional/wallet_importdescriptors.py
achow101,2020-03-27 23:11:43,Changed this to check the result and throw an exception. Added a unit test for that.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577798,399577798,src/wallet/walletutil.h
achow101,2020-03-27 23:12:00,Added more comments.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577860,399577860,src/wallet/wallet.h
achow101,2020-03-27 23:12:08,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577884,399577884,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:12:39,`|=` would be incorrect. I've instead changed `IsHDEnabled` to iterate over `GetActiveScriptPubKeyMans()`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399577989,399577989,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:12:48,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578030,399578030,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:13:53,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578305,399578305,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:14:10,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578383,399578383,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:14:18,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578411,399578411,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:15:27,"Swapped the commits.\n\nA general test for `GetReserveDestination` and `ReturnDestination` in the wallet feels out of scope for this PR. IMO should be a separate PR.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578641,399578641,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:15:36,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578688,399578688,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-27 23:15:46,Removed it.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578721,399578721,src/wallet/walletdb.h
achow101,2020-03-27 23:15:53,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399578748,399578748,src/wallet/wallet.cpp
Sjors,2020-03-28 10:19:54,"It doesn't have to be that way. We describe ""wrapped segwit script"" with ""sh(wsh(script))"", but it might just as well have been ""p2sh[wsh[script]]"". There's already talk of tweaking descriptors to make them more compatible with miniscript. We use base58 encoded xpubs, but we might as well switch to something bech32 encoded in the future. It makes sense to have a more computer-friendly representati",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645681,399645681,src/wallet/walletutil.h
Sjors,2020-03-28 10:21:25,"If unranged descriptors can't be active, then that's fine.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645781,399645781,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-28 10:22:46,"I was thinking the other way around: have different record for different things, so it's easy to add new things and wipe / ignore stuff we don't need anymore.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399645877,399645877,src/wallet/walletdb.cpp
Sjors,2020-03-28 10:24:35,Doesn't `walletcreatefundedpsbt` call those two methods? So the test just has to check the keypool doesn't shrink.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646044,399646044,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-28 10:27:49,"Yeah, just keep in in mind if something else needs to be changed there, or if - god forbid - we get bike shedding over the new check box.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646259,399646259,src/qt/createwalletdialog.cpp
Sjors,2020-03-28 10:29:50,See [above](https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399542742). It makes sense to disallow `getnewaddress` on unranged descriptors. And they can't be active (I assume that restriction is tested in the `importdescriptor` tests). So in that case there's nothing to test here.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399646470,399646470,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-28 17:13:54,Make a test to ensure that `active` is actually default true(or not),https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686037,399686037,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-28 17:14:48,"In other words, make sure that importing legacy doesn't accidentally replace p2sh somehow, and p2sh doesn't accidentally also replace bech32, and so on. Just thinking about what could have gone wrong under the hood.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686130,399686130,test/functional/wallet_importdescriptors.py
instagibbs,2020-03-28 17:17:33,We're not going to get this right on the first shot likely no matter what we decide. As long as it's not a supreme burden to upgrade I think current is fine.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686381,399686381,src/wallet/walletutil.h
instagibbs,2020-03-28 17:18:41,"unranged active descriptors would result in a single new address grab per import, kind of pointless",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399686525,399686525,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-28 17:25:38,"I don't think we're supposed to be asserting on a line with state changes, cache the result and then assert below",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399687251,399687251,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-28 20:54:43,"More specifically, I've been thinking about a way to unify the descriptor cache structure so that we don't have to have separate records like that. In particular, I've considered setting a bogus derivation index for the parent xpubs so that a single record can be used, as well as a single map within `DescriptorCache` too.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399708441,399708441,src/wallet/walletdb.cpp
achow101,2020-03-28 21:03:44,"Again, seems out of scope and a general wallet test rather than specific to descriptor wallets.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709303,399709303,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-28 21:04:49,Added a test for that case.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709427,399709427,test/functional/wallet_importdescriptors.py
achow101,2020-03-28 21:06:13,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709544,399709544,test/functional/wallet_importdescriptors.py
achow101,2020-03-28 21:07:40,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r399709671,399709671,src/wallet/scriptpubkeyman.cpp
Sjors,2020-03-31 11:20:17,"In 3f5e0bfc5dc2ea37223c1e5820c66a5ce11d6b81: clang on macOS complains about this `std::move`, and afaik there's no need for it, because the result of `GetSigningProvider()` is an `rvalue`. Ditto for SignMessage (70345ca67f42ce49b764024f5c62bf8a9a7bd188).\n\n```\nwallet/scriptpubkeyman.cpp:1927:58: warning: moving a temporary object prevents copy elision [-Wpessimizing-move]\n        std::uniqu",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r400833941,400833941,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-31 13:37:11,I think the boolean arg should be `sign` to avoid the assertion failure mentioned by @Sjors ,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r400919253,400919253,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-03-31 19:45:28,out of date comment,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170132,401170132,src/wallet/wallet.cpp
achow101,2020-03-31 19:46:03,"IIRC gcc used to complain about this. But it seems not anymore, so I've removed these too.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170437,401170437,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-31 19:46:09,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401170491,401170491,src/wallet/scriptpubkeyman.cpp
achow101,2020-03-31 20:16:40,removed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401187582,401187582,src/wallet/wallet.cpp
Sjors,2020-04-01 16:20:58,"Nit 1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e: missing p in ""master rivate key""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401742484,401742484,src/wallet/scriptpubkeyman.cpp
Sjors,2020-04-01 16:23:53,"In 1dd95d7e91fb31ee97cff2aa0f1ccfd820e78e1e IIUC the descriptor is stored as `wpkh(xpub/84'/0'/0'/0/*)` which means it can only be expanded with the aid of the master private key. Why not expand the account level xpub(s), so you can store it as `wpkh([84'/0'/0']xpub/0/*)`?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401744548,401744548,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-01 16:49:15,"We would then have to store the private key at the account level too. With the xpub cache, this isn't a problem as it can always be expanded using the cached xpub.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401761133,401761133,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-01 20:49:05,Fixed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r401900296,401900296,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-04-06 13:08:33,"The index matters, I think you mean:\n\n""It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404076184,404076184,src/wallet/scriptpubkeyman.cpp
instagibbs,2020-04-06 13:08:43,"The index matters, I think you mean:\n\n""It doesn't matter which of many valid indexes the pubkey has, we just need an index where we can derive it and it's private key""",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404076311,404076311,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-06 16:29:52,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404226781,404226781,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-06 16:29:57,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r404226835,404226835,src/wallet/scriptpubkeyman.cpp
fjahr,2020-04-10 22:21:54,I think this function should be renamed. It is confusing that there is a function by the same name in `DescriptorScriptPubKeyMan` that actually returns a `WalletDescriptor` while this one returns `DescriptorScriptPubKeyMan`. It becomes especially apparent in `ProcessDescriptorImport` where those functions are called within a few lines of code.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406967004,406967004,src/wallet/wallet.h
fjahr,2020-04-10 22:31:17,I think these brackets can be removed since they only exclude the return,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406969347,406969347,src/wallet/scriptpubkeyman.cpp
fjahr,2020-04-10 22:35:03,I think this would deserve a comment on why this is always 0. I also thought maybe the `ScriptPubKeyMan` class could do this instead of `GetTime()` so that it would not need to be overridden but I think that would not help clarity of the code.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406970255,406970255,src/wallet/scriptpubkeyman.cpp
fjahr,2020-04-10 22:48:26,I found this comment more confusing than helpful here because it explains something about the descriptor code in a non-descriptor code branch. I think it could just be removed.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406973362,406973362,src/wallet/wallet.cpp
fjahr,2020-04-10 22:50:24,Typo: `ExpandPrvate`,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r406973806,406973806,src/wallet/rpcdump.cpp
achow101,2020-04-20 00:09:25,Renamed it to `GetDescriptorScriptPubKeyMan`.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023740,411023740,src/wallet/wallet.h
achow101,2020-04-20 00:09:31,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023748,411023748,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-20 00:09:41,Added a comment.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023778,411023778,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-20 00:09:52,Moved it and added a better one here.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023823,411023823,src/wallet/wallet.cpp
achow101,2020-04-20 00:09:59,Fixed,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r411023852,411023852,src/wallet/rpcdump.cpp
Sjors,2020-04-22 18:58:17,"In b4c6a40ac46459a679dabbb84b168101e6cd6c5f I suggested `for (const auto& mi : m_map_crypted_keys) {`, which you did, but not it's gone again in `DescriptorScriptPubKeyMan` (it's there in `LegacyScriptPubKeyMan `). Probably not worth touching the code for, but you may to check if you didn't lose anything else.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413240431,413240431,src/wallet/scriptpubkeyman.cpp
Sjors,2020-04-22 18:58:58,"In  b4c6a40, in case you have to touch this, please use brackets or move `return false` directly after `if`.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413240854,413240854,src/wallet/scriptpubkeyman.cpp
jonatack,2020-04-22 20:31:14,"- Use the `UNIX_EPOCH_TIME` constant when describing UNIX epoch time or timestamps\n- s/Time to start/Time from which to start/\n\ne.g.\n```diff\n- ""Time to start rescanning the blockchain for this descriptor, in seconds since epoch (Jan 1 1970 GMT).\n""\n+ ""Time from which to start rescanning the blockchain for this descriptor, in "" + UNIX_EPOCH_TIME + ""\n""\n```",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413308224,413308224,src/wallet/rpcdump.cpp
jonatack,2020-04-22 20:42:22,"nit: s/timestamp,/timestamp;/",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413315022,413315022,src/wallet/rpcdump.cpp
jonatack,2020-04-22 20:42:47,s/exists/exist/,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413315262,413315262,src/wallet/rpcdump.cpp
achow101,2020-04-22 22:06:26,"No, it seems like I've accidentally applied that change to `LegacyScriptPubKeyMan`. Applied these changes to the right place.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365313,413365313,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-22 22:06:36,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365384,413365384,src/wallet/rpcdump.cpp
achow101,2020-04-22 22:06:40,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365432,413365432,src/wallet/rpcdump.cpp
achow101,2020-04-22 22:06:47,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365483,413365483,src/wallet/rpcdump.cpp
achow101,2020-04-22 22:06:54,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413365541,413365541,src/wallet/scriptpubkeyman.cpp
jonatack,2020-04-23 08:34:58,"nit: here and in `walletdb.h` I'm curious why `ACTIVEEXTERNALSPK` AND `ACTIVEINTERNALSPK` are placed here rather than sorted like the others... maybe sort, or comment why",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413622392,413622392,src/wallet/walletdb.cpp
jonatack,2020-04-23 08:45:16,"nit suggestion\n```diff\n-    std::string key = DBKeys::ACTIVEEXTERNALSPK;\n-    if (internal) {\n-        key = DBKeys::ACTIVEINTERNALSPK;\n-    }\n+    std::string key;\n+    key = internal ? DBKeys::ACTIVEINTERNALSPK : DBKeys::ACTIVEEXTERNALSPK;\n```\nlike what you do below line 473",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413629727,413629727,src/wallet/walletdb.cpp
jonatack,2020-04-23 09:30:32,Maybe comment here that all must be true for the result to be true.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413661739,413661739,src/wallet/wallet.cpp
jonatack,2020-04-23 11:03:54,nit: s/has/have/,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413722005,413722005,src/wallet/scriptpubkeyman.cpp
jonatack,2020-04-23 11:21:21,"Maybe just me, but I find the ""With"" part of the name `AddDescriptorKeyWithDB` confusing.\n\nSome of these additions could use Doxygen comments, e.g. here and SetCrypted, etc.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413732148,413732148,src/wallet/scriptpubkeyman.h
jonatack,2020-04-23 11:29:19,"Why do we not return the result of `batch.WriteCryptedDescriptorKey(GetID(), pubkey, crypted_secret);` here?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413736798,413736798,src/wallet/scriptpubkeyman.cpp
jonatack,2020-04-23 12:09:51,"What does ""exp"" stand for in `key_exp_index`, expiry/expired?",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413760834,413760834,src/wallet/walletdb.h
jonatack,2020-04-23 12:12:06,"Perhaps put `uint32_t der_index` last, so the first two parameters are the same as in `WriteDescriptorParentCache()` on the following line",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413762307,413762307,src/wallet/walletdb.h
jonatack,2020-04-23 12:52:56,Maybe update getwalletinfo RPCHelpMan that `keypoololdest` is now only displayed for non-descriptor/legacy wallets.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413789802,413789802,src/wallet/rpcwallet.cpp
jonatack,2020-04-23 13:42:34,"s/descriptor/descriptors/ (plural like the other error messages, if you change this be sure to update the functional test as well)",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413805809,413805809,src/wallet/rpcdump.cpp
jonatack,2020-04-23 13:51:00,"s/Stating whether/Whether/\ns/also known as/e.g./",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413811801,413811801,src/wallet/rpcdump.cpp
jonatack,2020-04-23 14:30:34,"Could avoid calling `GetImportTimestamp()` twice:\n```diff\n-                if (scanned_time <= GetImportTimestamp(request, now) || results.at(i).exists(""error"")) {\n+                int64_t import_time = GetImportTimestamp(request, now);\n+                if (scanned_time <= import_time || results.at(i).exists(""error"")) {\n                     response.push_back(results.at(i));\n          ",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413846027,413846027,src/wallet/rpcdump.cpp
jonatack,2020-04-23 14:35:09,"Actually nvm, the 40 lines of this section are essentially a duplicate of code in `importmulti`. It's outside the scope of this long PR, but they could be de-duped.",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413849949,413849949,src/wallet/rpcdump.cpp
jonatack,2020-04-23 14:36:53,nit: sort,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413851526,413851526,src/wallet/rpcwallet.cpp
jonatack,2020-04-23 14:57:50,"unsure but maybe worth pulling this out of the loop\n```diff\n+        auto old_spk_man_id {old_spk_man->GetID()};\n         for (bool internal : {false, true}) {\n             for (OutputType t : OUTPUT_TYPES) {\n                 auto active_spk_man = GetScriptPubKeyMan(t, internal);\n-                if (active_spk_man && active_spk_man->GetID() == old_spk_man->GetID()) {\n+              ",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413870149,413870149,src/wallet/wallet.cpp
Sjors,2020-04-23 15:25:25,"Key expression index, see `descriptor.h`",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413893900,413893900,src/wallet/walletdb.h
jonatack,2020-04-23 15:33:09,"suggest adding:\n```diff\n         assert_equal(wallet_info['keypoolsize_hd_internal'], 300)\n+        # Expect getwalletinfo to not return ""keypoololdest"" for descriptor wallets, only legacy ones\n+        assert 'keypoololdest' not in wallet_info.keys()\n```",https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413900271,413900271,test/functional/wallet_descriptor.py
jonatack,2020-04-23 16:18:15,Thanks @Sjors ,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413936172,413936172,src/wallet/walletdb.h
achow101,2020-04-23 17:33:34,It follows the naming convention used elsewhere.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r413990312,413990312,src/wallet/scriptpubkeyman.h
achow101,2020-04-23 17:58:57,Moved. They used to be named differently.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414007475,414007475,src/wallet/walletdb.cpp
achow101,2020-04-23 18:00:09,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008333,414008333,src/wallet/walletdb.cpp
achow101,2020-04-23 18:00:16,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008405,414008405,src/wallet/wallet.cpp
achow101,2020-04-23 18:00:20,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008469,414008469,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-23 18:00:27,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008547,414008547,src/wallet/scriptpubkeyman.cpp
achow101,2020-04-23 18:00:32,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008610,414008610,src/wallet/rpcwallet.cpp
achow101,2020-04-23 18:01:02,I moved `xpub` to the front so that the only difference is that `WriteDescriptorDerivedCache` has `der_index` at the end.,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414008955,414008955,src/wallet/walletdb.h
achow101,2020-04-23 18:01:07,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009029,414009029,src/wallet/rpcdump.cpp
achow101,2020-04-23 18:01:10,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009061,414009061,src/wallet/rpcdump.cpp
achow101,2020-04-23 18:01:17,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009143,414009143,src/wallet/rpcwallet.cpp
achow101,2020-04-23 18:01:22,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009214,414009214,src/wallet/wallet.cpp
achow101,2020-04-23 18:01:26,Done,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r414009257,414009257,test/functional/wallet_descriptor.py
meshcollider,2020-04-26 12:35:47,Helpful comment 😅,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r415300520,415300520,src/wallet/scriptpubkeyman.cpp
meshcollider,2020-04-26 12:37:41,I don't think this should be here should it,https://github.com/bitcoin/bitcoin/pull/16528#discussion_r415300916,415300916,src/wallet/scriptpubkeyman.h
