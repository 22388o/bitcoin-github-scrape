[
  {
    "sha": "ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYzUyN2M2Yzg4MTQ2ZDViMzZkZTM4YTFmY2ViZTRmNmVhNzJiZDFi",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-01-18T18:15:00Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2018-01-18T20:09:27Z"
      },
      "message": "Don't allow relative -walletdir paths\n\nAlso warn if bitcoind is configured to use a relative -datadir path.\n\nSpecifying paths relative to the current working directory in a daemon process\ncan be dangerous, because files can fail to be located even if the\nconfiguration doesn't change, but the daemon is started up differently.\n\nSpecifying a relative -datadir now adds a warning to the debug log. It would\nnot be backwards-compatible to forbid relative -datadir paths entirely, and it\ncould also be also inconvenient for command line testing.\n\nSpecifying a relative -walletdir now results in a startup error. But since the\n-walletdir option is new in 0.16.0, there should be no compatibility issues.\nAnother reason not to use working directory paths for -walletdir specifically\nis that the default -walletdir is a \"wallets\" subdirectory inside the datadir,\nso it could be surprising that setting -walletdir manually would choose a\ndirectory rooted in a completely different location.",
      "tree": {
        "sha": "6413ebc3e95bd2925a2963299dbfddf360b56329",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6413ebc3e95bd2925a2963299dbfddf360b56329"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e839d6570d9d0575a63ac45d35ad8bc248aeaacc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e839d6570d9d0575a63ac45d35ad8bc248aeaacc",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e839d6570d9d0575a63ac45d35ad8bc248aeaacc"
      }
    ],
    "stats": {
      "total": 48,
      "additions": 32,
      "deletions": 16
    },
    "files": [
      {
        "sha": "29377d4a1d4468b2a27147f6ae72652663856ab1",
        "filename": "doc/release-notes.md",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/doc/release-notes.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/doc/release-notes.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes.md?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -90,9 +90,8 @@ bitcoin data directory. The behavior is now:\n   already exists in the data directory root, then wallets will be stored in the\n   `wallets/` subdirectory by default.\n - The location of the wallets directory can be overridden by specifying a\n-  `-walletdir=<path>` option where `<path>` can be an absolute path or a\n-  relative path (relative to the current working directory). `<path>` can\n-  also be a path to symlink to a directory.\n+  `-walletdir=<path>` option where `<path>` can be an absolute path to a\n+  directory or directory symlink.\n \n Care should be taken when choosing the wallets directory location, as if it\n becomes unavailable during operation, funds may be lost."
      },
      {
        "sha": "d1d733af94e6a28651147b8976d8944264923a51",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -1210,6 +1210,15 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n     LogPrintf(\"Using config file %s\\n\", GetConfigFile(gArgs.GetArg(\"-conf\", BITCOIN_CONF_FILENAME)).string());\n     LogPrintf(\"Using at most %i automatic connections (%i file descriptors available)\\n\", nMaxConnections, nFD);\n \n+    // Warn about relative -datadir path.\n+    if (gArgs.IsArgSet(\"-datadir\") && !fs::path(gArgs.GetArg(\"-datadir\", \"\")).is_absolute()) {\n+        LogPrintf(\"Warning: relative datadir option '%s' specified, which will be interpreted relative to the \"\n+                  \"current working directory '%s'. This is fragile, because if bitcoin is started in the future \"\n+                  \"from a different location, it will be unable to locate the current data files. There could \"\n+                  \"also be data loss if bitcoin is started while in a temporary directory.\\n\",\n+            gArgs.GetArg(\"-datadir\", \"\"), fs::current_path().string());\n+    }\n+\n     InitSignatureCache();\n     InitScriptExecutionCache();\n "
      },
      {
        "sha": "2d26f7ae0f66aa6b31cb5243c5cef8c4a934b9d0",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -205,11 +205,15 @@ bool VerifyWallets()\n         return true;\n     }\n \n-    if (gArgs.IsArgSet(\"-walletdir\") && !fs::is_directory(GetWalletDir())) {\n-        if (fs::exists(fs::system_complete(gArgs.GetArg(\"-walletdir\", \"\")))) {\n-            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), gArgs.GetArg(\"-walletdir\", \"\").c_str()));\n+    if (gArgs.IsArgSet(\"-walletdir\")) {\n+        fs::path wallet_dir = gArgs.GetArg(\"-walletdir\", \"\");\n+        if (!fs::exists(wallet_dir)) {\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), wallet_dir.string()));\n+        } else if (!fs::is_directory(wallet_dir)) {\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is not a directory\"), wallet_dir.string()));\n+        } else if (!wallet_dir.is_absolute()) {\n+            return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" is a relative path\"), wallet_dir.string()));\n         }\n-        return InitError(strprintf(_(\"Specified -walletdir \\\"%s\\\" does not exist\"), gArgs.GetArg(\"-walletdir\", \"\").c_str()));\n     }\n \n     LogPrintf(\"Using wallet directory %s\\n\", GetWalletDir().string());"
      },
      {
        "sha": "7c97b668ae3c5b4056b43737a25868e3fcfb3950",
        "filename": "src/wallet/walletutil.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/wallet/walletutil.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/src/wallet/walletutil.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletutil.cpp?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -9,7 +9,7 @@ fs::path GetWalletDir()\n     fs::path path;\n \n     if (gArgs.IsArgSet(\"-walletdir\")) {\n-        path = fs::system_complete(gArgs.GetArg(\"-walletdir\", \"\"));\n+        path = gArgs.GetArg(\"-walletdir\", \"\");\n         if (!fs::is_directory(path)) {\n             // If the path specified doesn't exist, we return the deliberately\n             // invalid empty string."
      },
      {
        "sha": "b07e4516670bdd19a9d3707e562597f2c18261b0",
        "filename": "test/functional/multiwallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multiwallet.py?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -30,6 +30,10 @@ def run_test(self):\n \n         self.stop_nodes()\n \n+        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" does not exist')\n+        self.assert_start_raises_init_error(0, ['-walletdir=wallets'], 'Error: Specified -walletdir \"wallets\" is a relative path', cwd=data_dir())\n+        self.assert_start_raises_init_error(0, ['-walletdir=debug.log'], 'Error: Specified -walletdir \"debug.log\" is not a directory', cwd=data_dir())\n+\n         # should not initialize if there are duplicate wallets\n         self.assert_start_raises_init_error(0, ['-wallet=w1', '-wallet=w1'], 'Error loading wallet w1. Duplicate -wallet filename specified.')\n "
      },
      {
        "sha": "f8d66def64cc073411a06ffd585518ffd290390c",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -220,26 +220,26 @@ def add_nodes(self, num_nodes, extra_args=None, rpchost=None, timewait=None, bin\n         for i in range(num_nodes):\n             self.nodes.append(TestNode(i, self.options.tmpdir, extra_args[i], rpchost, timewait=timewait, binary=binary[i], stderr=None, mocktime=self.mocktime, coverage_dir=self.options.coveragedir, use_cli=self.options.usecli))\n \n-    def start_node(self, i, extra_args=None, stderr=None):\n+    def start_node(self, i, *args, **kwargs):\n         \"\"\"Start a bitcoind\"\"\"\n \n         node = self.nodes[i]\n \n-        node.start(extra_args, stderr)\n+        node.start(*args, **kwargs)\n         node.wait_for_rpc_connection()\n \n         if self.options.coveragedir is not None:\n             coverage.write_all_rpc_commands(self.options.coveragedir, node.rpc)\n \n-    def start_nodes(self, extra_args=None):\n+    def start_nodes(self, extra_args=None, *args, **kwargs):\n         \"\"\"Start multiple bitcoinds\"\"\"\n \n         if extra_args is None:\n             extra_args = [None] * self.num_nodes\n         assert_equal(len(extra_args), self.num_nodes)\n         try:\n             for i, node in enumerate(self.nodes):\n-                node.start(extra_args[i])\n+                node.start(extra_args[i], *args, **kwargs)\n             for node in self.nodes:\n                 node.wait_for_rpc_connection()\n         except:\n@@ -271,10 +271,10 @@ def restart_node(self, i, extra_args=None):\n         self.stop_node(i)\n         self.start_node(i, extra_args)\n \n-    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None):\n+    def assert_start_raises_init_error(self, i, extra_args=None, expected_msg=None, *args, **kwargs):\n         with tempfile.SpooledTemporaryFile(max_size=2**16) as log_stderr:\n             try:\n-                self.start_node(i, extra_args, stderr=log_stderr)\n+                self.start_node(i, extra_args, stderr=log_stderr, *args, **kwargs)\n                 self.stop_node(i)\n             except Exception as e:\n                 assert 'bitcoind exited' in str(e)  # node must have shutdown"
      },
      {
        "sha": "7c784d8840dc61dd128fa15af2502a2865c3da33",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=ec527c6c88146d5b36de38a1fcebe4f6ea72bd1b",
        "patch": "@@ -81,13 +81,13 @@ def __getattr__(self, name):\n             assert self.rpc_connected and self.rpc is not None, \"Error: no RPC connection\"\n             return getattr(self.rpc, name)\n \n-    def start(self, extra_args=None, stderr=None):\n+    def start(self, extra_args=None, stderr=None, *args, **kwargs):\n         \"\"\"Start the node.\"\"\"\n         if extra_args is None:\n             extra_args = self.extra_args\n         if stderr is None:\n             stderr = self.stderr\n-        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr)\n+        self.process = subprocess.Popen(self.args + extra_args, stderr=stderr, *args, **kwargs)\n         self.running = True\n         self.log.debug(\"bitcoind started, waiting for RPC to come up\")\n "
      }
    ]
  }
]