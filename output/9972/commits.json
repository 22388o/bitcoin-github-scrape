[
  {
    "sha": "d055bd69cf9f48ecaa8c5c820186c296421f0e16",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMDU1YmQ2OWNmOWY0OGVjYWE4YzVjODIwMTg2YzI5NjQyMWYwZTE2",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-10T20:02:47Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-03-10T20:50:38Z"
      },
      "message": "Fix extended rpc tests broken by 8910b4717e5bb946ee6988f7fe9fd461f53a5935",
      "tree": {
        "sha": "087012db4bb8b0ead2176e11cbd271717566ed18",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/087012db4bb8b0ead2176e11cbd271717566ed18"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d055bd69cf9f48ecaa8c5c820186c296421f0e16",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d055bd69cf9f48ecaa8c5c820186c296421f0e16",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d055bd69cf9f48ecaa8c5c820186c296421f0e16",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d055bd69cf9f48ecaa8c5c820186c296421f0e16/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8910b4717e5bb946ee6988f7fe9fd461f53a5935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8910b4717e5bb946ee6988f7fe9fd461f53a5935",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8910b4717e5bb946ee6988f7fe9fd461f53a5935"
      }
    ],
    "stats": {
      "total": 31,
      "additions": 19,
      "deletions": 12
    },
    "files": [
      {
        "sha": "2c3766125ac44241e5c58b0ab46dea6492044b6f",
        "filename": "qa/rpc-tests/maxblocksinflight.py",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/maxblocksinflight.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/maxblocksinflight.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/maxblocksinflight.py?ref=d055bd69cf9f48ecaa8c5c820186c296421f0e16",
        "patch": "@@ -87,6 +87,8 @@ def setup_network(self):\n \n     def run_test(self):\n         test = TestManager()\n+        # pass log handler through to the test manager object\n+        test.log = self.log\n         test.add_new_connection(NodeConn('127.0.0.1', p2p_port(0), self.nodes[0], test))\n         NetworkThread().start()  # Start up network handling in another thread\n         test.run()"
      },
      {
        "sha": "cc84c8c085728dab053435e3ac67119ef7d3c771",
        "filename": "qa/rpc-tests/pruning.py",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/pruning.py?ref=d055bd69cf9f48ecaa8c5c820186c296421f0e16",
        "patch": "@@ -80,7 +80,7 @@ def test_height_min(self):\n         if not os.path.isfile(self.prunedir+\"blk00000.dat\"):\n             raise AssertionError(\"blk00000.dat is missing, pruning too early\")\n         self.log.info(\"Success\")\n-        self.log.info(\"Though we're already using more than 550MiB, current usage:\", calc_usage(self.prunedir))\n+        self.log.info(\"Though we're already using more than 550MiB, current usage: %d\" % calc_usage(self.prunedir))\n         self.log.info(\"Mining 25 more blocks should cause the first block file to be pruned\")\n         # Pruning doesn't run until we're allocating another chunk, 20 full blocks past the height cutoff will ensure this\n         for i in range(25):\n@@ -94,7 +94,7 @@ def test_height_min(self):\n \n         self.log.info(\"Success\")\n         usage = calc_usage(self.prunedir)\n-        self.log.info(\"Usage should be below target:\", usage)\n+        self.log.info(\"Usage should be below target: %d\" % usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -124,7 +124,7 @@ def create_chain_with_staleblocks(self):\n             connect_nodes(self.nodes[2], 0)\n             sync_blocks(self.nodes[0:3])\n \n-        self.log.info(\"Usage can be over target because of high stale rate:\", calc_usage(self.prunedir))\n+        self.log.info(\"Usage can be over target because of high stale rate: %d\" % calc_usage(self.prunedir))\n \n     def reorg_test(self):\n         # Node 1 will mine a 300 block chain starting 287 blocks back from Node 0 and Node 2's tip\n@@ -135,11 +135,11 @@ def reorg_test(self):\n         self.nodes[1]=start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=5000\", \"-checkblocks=5\", \"-disablesafemode\"], timewait=900)\n \n         height = self.nodes[1].getblockcount()\n-        self.log.info(\"Current block height:\", height)\n+        self.log.info(\"Current block height: %d\" % height)\n \n         invalidheight = height-287\n         badhash = self.nodes[1].getblockhash(invalidheight)\n-        self.log.info(\"Invalidating block at height:\",invalidheight,badhash)\n+        self.log.info(\"Invalidating block %s at height %d\" % (badhash,invalidheight))\n         self.nodes[1].invalidateblock(badhash)\n \n         # We've now switched to our previously mined-24 block fork on node 1, but thats not what we want\n@@ -151,7 +151,7 @@ def reorg_test(self):\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n         assert(self.nodes[1].getblockcount() == invalidheight - 1)\n-        self.log.info(\"New best height\", self.nodes[1].getblockcount())\n+        self.log.info(\"New best height: %d\" % self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n         self.stop_node(1)\n@@ -165,8 +165,8 @@ def reorg_test(self):\n         connect_nodes(self.nodes[2], 1)\n         sync_blocks(self.nodes[0:3], timeout=120)\n \n-        self.log.info(\"Verify height on node 2:\",self.nodes[2].getblockcount())\n-        self.log.info(\"Usage possibly still high bc of stale blocks in block files:\", calc_usage(self.prunedir))\n+        self.log.info(\"Verify height on node 2: %d\" % self.nodes[2].getblockcount())\n+        self.log.info(\"Usage possibly still high bc of stale blocks in block files: %d\" % calc_usage(self.prunedir))\n \n         self.log.info(\"Mine 220 more blocks so we have requisite history (some blocks will be big and cause pruning of previous chain)\")\n         for i in range(22):\n@@ -176,7 +176,7 @@ def reorg_test(self):\n         sync_blocks(self.nodes[0:3], timeout=300)\n \n         usage = calc_usage(self.prunedir)\n-        self.log.info(\"Usage should be below target:\", usage)\n+        self.log.info(\"Usage should be below target: %d\" % usage)\n         if (usage > 550):\n             raise AssertionError(\"Pruning target not being met\")\n \n@@ -185,7 +185,7 @@ def reorg_test(self):\n     def reorg_back(self):\n         # Verify that a block on the old main chain fork has been pruned away\n         assert_raises_jsonrpc(-1, \"Block not available (pruned data)\", self.nodes[2].getblock, self.forkhash)\n-        self.log.info(\"Will need to redownload block\",self.forkheight)\n+        self.log.info(\"Will need to redownload block %d\" % self.forkheight)\n \n         # Verify that we have enough history to reorg back to the fork point\n         # Although this is more than 288 blocks, because this chain was written more recently\n@@ -209,7 +209,7 @@ def reorg_back(self):\n         # At this point node 2 is within 288 blocks of the fork point so it will preserve its ability to reorg\n         if self.nodes[2].getblockcount() < self.mainchainheight:\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n-            self.log.info(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed:\", blocks_to_mine)\n+            self.log.info(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed: %d\" % blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n             assert(self.nodes[0].getblockcount() == self.mainchainheight)\n             assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)"
      },
      {
        "sha": "6fcfd0caacdf8e6c9c961d9fc4a8aa31bde22ded",
        "filename": "qa/rpc-tests/smartfees.py",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d055bd69cf9f48ecaa8c5c820186c296421f0e16/qa/rpc-tests/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/smartfees.py?ref=d055bd69cf9f48ecaa8c5c820186c296421f0e16",
        "patch": "@@ -17,6 +17,8 @@\n # 4 bytes of OP_TRUE and push 2-byte redeem script of \"OP_1 OP_DROP\" or \"OP_2 OP_DROP\"\n SCRIPT_SIG = [\"0451025175\", \"0451025275\"]\n \n+global log\n+\n def small_txpuzzle_randfee(from_node, conflist, unconflist, amount, min_fee, fee_increment):\n     \"\"\"\n     Create and send a transaction with a random fee.\n@@ -99,7 +101,7 @@ def check_estimates(node, fees_seen, max_invalid, print_estimates = True):\n     \"\"\"\n     all_estimates = [ node.estimatefee(i) for i in range(1,26) ]\n     if print_estimates:\n-        self.log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n+        log.info([str(all_estimates[e-1]) for e in [1,2,3,6,15,25]])\n     delta = 1.0e-6 # account for rounding error\n     last_e = max(fees_seen)\n     for e in [x for x in all_estimates if x >= 0]:\n@@ -234,6 +236,9 @@ def transact_and_mine(self, numblocks, mining_node):\n             self.memutxo = newmem\n \n     def run_test(self):\n+        # Make log handler available to helper functions\n+        global log\n+        log = self.log\n         self.fees_per_kb = []\n         self.memutxo = []\n         self.confutxo = self.txouts # Start with the set of confirmed txouts after splitting"
      }
    ]
  }
]