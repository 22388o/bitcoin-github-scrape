[
  {
    "sha": "3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmRjN2MyZDM5NzdhNzg2NGFhY2VhODBiZmZjNGRmN2YzN2NhYzUx",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-21T18:36:42Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[doc] Add comment for m_headers_cache",
      "tree": {
        "sha": "92493e559b52c1fb7042ed619bfe4c78e9090360",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/92493e559b52c1fb7042ed619bfe4c78e9090360"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4479eb04d92806633aa3ad3e413f6a7166863638",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4479eb04d92806633aa3ad3e413f6a7166863638",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4479eb04d92806633aa3ad3e413f6a7166863638"
      }
    ],
    "stats": {
      "total": 1,
      "additions": 1,
      "deletions": 0
    },
    "files": [
      {
        "sha": "317f8c0e40fe71019b05d815d02e0b07cd768ef3",
        "filename": "src/index/blockfilterindex.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/src/index/blockfilterindex.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bdc7c2d3977a7864aacea80bffc4df7f37cac51/src/index/blockfilterindex.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/blockfilterindex.h?ref=3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "patch": "@@ -39,6 +39,7 @@ class BlockFilterIndex final : public BaseIndex\n     size_t WriteFilterToDisk(FlatFilePos& pos, const BlockFilter& filter);\n \n     Mutex m_cs_headers_cache;\n+    /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n     std::unordered_map<uint256, uint256, FilterHeaderHasher> m_headers_cache GUARDED_BY(m_cs_headers_cache);\n \n protected:"
      }
    ]
  },
  {
    "sha": "f6b58c150686e90bc4952976e488b1605f3ae02a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmNmI1OGMxNTA2ODZlOTBiYzQ5NTI5NzZlNDg4YjE2MDVmM2FlMDJh",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T23:47:26Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[net processing] Message handling for getcfheaders.\n\nif -peerblockfilters is configured, handle requests for cfheaders.",
      "tree": {
        "sha": "0780cb0a07b09dd5d937cd41c974feb3a3efc1e2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0780cb0a07b09dd5d937cd41c974feb3a3efc1e2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b58c150686e90bc4952976e488b1605f3ae02a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bdc7c2d3977a7864aacea80bffc4df7f37cac51",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bdc7c2d3977a7864aacea80bffc4df7f37cac51"
      }
    ],
    "stats": {
      "total": 105,
      "additions": 100,
      "deletions": 5
    },
    "files": [
      {
        "sha": "9f7bde89cfd509529538a15de6141f08491029df",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 3,
        "changes": 86,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -129,6 +129,8 @@ static constexpr unsigned int INVENTORY_BROADCAST_MAX = 7 * INVENTORY_BROADCAST_\n static constexpr unsigned int AVG_FEEFILTER_BROADCAST_INTERVAL = 10 * 60;\n /** Maximum feefilter broadcast delay after significant change. */\n static constexpr unsigned int MAX_FEEFILTER_CHANGE_DELAY = 5 * 60;\n+/** Maximum number of cf hashes that may be requested with one getcfheaders. See BIP 157. */\n+static constexpr uint32_t MAX_GETCFHEADERS_SIZE = 2000;\n \n struct COrphanTx {\n     // When modifying, adapt the copy of this definition in tests/DoS_tests.\n@@ -1983,14 +1985,16 @@ void static ProcessOrphanTx(CConnman* connman, CTxMemPool& mempool, std::set<uin\n  * @param[in]   pfrom           The peer that we received the request from\n  * @param[in]   chain_params    Chain parameters\n  * @param[in]   filter_type     The filter type the request is for. Must be basic filters.\n+ * @param[in]   start_height    The start height for the request\n  * @param[in]   stop_hash       The stop_hash for the request\n+ * @param[in]   max_height_diff The maximum number of items permitted to request, as specified in BIP 157\n  * @param[out]  stop_index      The CBlockIndex for the stop_hash block, if the request can be serviced.\n  * @param[out]  filter_index    The filter index, if the request can be serviced.\n  * @return                      True if the request can be serviced.\n  */\n static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_params,\n-                                      BlockFilterType filter_type,\n-                                      const uint256& stop_hash,\n+                                      BlockFilterType filter_type, uint32_t start_height,\n+                                      const uint256& stop_hash, uint32_t max_height_diff,\n                                       const CBlockIndex*& stop_index,\n                                       BlockFilterIndex*& filter_index)\n {\n@@ -2017,6 +2021,21 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n         }\n     }\n \n+    uint32_t stop_height = stop_index->nHeight;\n+    if (start_height > stop_height) {\n+        LogPrint(BCLog::NET, \"peer %d sent invalid getcfilters/getcfheaders with \" /* Continued */\n+                 \"start height %d and stop height %d\\n\",\n+                 pfrom->GetId(), start_height, stop_height);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+    if (stop_height - start_height >= max_height_diff) {\n+        LogPrint(BCLog::NET, \"peer %d requested too many cfilters/cfheaders: %d / %d\\n\",\n+                 pfrom->GetId(), stop_height - start_height + 1, max_height_diff);\n+        pfrom->fDisconnect = true;\n+        return false;\n+    }\n+\n     filter_index = GetBlockFilterIndex(filter_type);\n     if (!filter_index) {\n         LogPrint(BCLog::NET, \"Filter index for supported type %s not found\\n\", BlockFilterTypeName(filter_type));\n@@ -2026,6 +2045,61 @@ static bool PrepareBlockFilterRequest(CNode* pfrom, const CChainParams& chain_pa\n     return true;\n }\n \n+/**\n+ * Handle a cfheaders request.\n+ *\n+ * May disconnect from the peer in the case of a bad request.\n+ *\n+ * @param[in]   pfrom           The peer that we received the request from\n+ * @param[in]   vRecv           The raw message received\n+ * @param[in]   chain_params    Chain parameters\n+ * @param[in]   connman         Pointer to the connection manager\n+ */\n+static void ProcessGetCFHeaders(CNode* pfrom, CDataStream& vRecv, const CChainParams& chain_params,\n+                                CConnman* connman)\n+{\n+    uint8_t filter_type_ser;\n+    uint32_t start_height;\n+    uint256 stop_hash;\n+\n+    vRecv >> filter_type_ser >> start_height >> stop_hash;\n+\n+    const BlockFilterType filter_type = static_cast<BlockFilterType>(filter_type_ser);\n+\n+    const CBlockIndex* stop_index;\n+    BlockFilterIndex* filter_index;\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, start_height, stop_hash,\n+                                   MAX_GETCFHEADERS_SIZE, stop_index, filter_index)) {\n+        return;\n+    }\n+\n+    uint256 prev_header;\n+    if (start_height > 0) {\n+        const CBlockIndex* const prev_block =\n+            stop_index->GetAncestor(static_cast<int>(start_height - 1));\n+        if (!filter_index->LookupFilterHeader(prev_block, prev_header)) {\n+            LogPrint(BCLog::NET, \"Failed to find block filter header in index: filter_type=%s, block_hash=%s\\n\",\n+                         BlockFilterTypeName(filter_type), prev_block->GetBlockHash().ToString());\n+            return;\n+        }\n+    }\n+\n+    std::vector<uint256> filter_hashes;\n+    if (!filter_index->LookupFilterHashRange(start_height, stop_index, filter_hashes)) {\n+        LogPrint(BCLog::NET, \"Failed to find block filter hashes in index: filter_type=%s, start_height=%d, stop_hash=%s\\n\",\n+                     BlockFilterTypeName(filter_type), start_height, stop_hash.ToString());\n+        return;\n+    }\n+\n+    CSerializedNetMsg msg = CNetMsgMaker(pfrom->GetSendVersion())\n+        .Make(NetMsgType::CFHEADERS,\n+              filter_type_ser,\n+              stop_index->GetBlockHash(),\n+              prev_header,\n+              filter_hashes);\n+    connman->PushMessage(pfrom, std::move(msg));\n+}\n+\n /**\n  * Handle a getcfcheckpt request.\n  *\n@@ -2048,7 +2122,8 @@ static void ProcessGetCFCheckPt(CNode* pfrom, CDataStream& vRecv, const CChainPa\n \n     const CBlockIndex* stop_index;\n     BlockFilterIndex* filter_index;\n-    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, stop_hash,\n+    if (!PrepareBlockFilterRequest(pfrom, chain_params, filter_type, /*start_height=*/0, stop_hash,\n+                                   /*max_height_diff=*/std::numeric_limits<uint32_t>::max(),\n                                    stop_index, filter_index)) {\n         return;\n     }\n@@ -3385,6 +3460,11 @@ bool ProcessMessage(CNode* pfrom, const std::string& msg_type, CDataStream& vRec\n         return true;\n     }\n \n+    if (msg_type == NetMsgType::GETCFHEADERS) {\n+        ProcessGetCFHeaders(pfrom, vRecv, chainparams, connman);\n+        return true;\n+    }\n+\n     if (msg_type == NetMsgType::GETCFCHECKPT) {\n         ProcessGetCFCheckPt(pfrom, vRecv, chainparams, connman);\n         return true;"
      },
      {
        "sha": "243111c449191acc30f4620a29b8cd1ca9711fd9",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -40,6 +40,8 @@ const char *SENDCMPCT=\"sendcmpct\";\n const char *CMPCTBLOCK=\"cmpctblock\";\n const char *GETBLOCKTXN=\"getblocktxn\";\n const char *BLOCKTXN=\"blocktxn\";\n+const char *GETCFHEADERS=\"getcfheaders\";\n+const char *CFHEADERS=\"cfheaders\";\n const char *GETCFCHECKPT=\"getcfcheckpt\";\n const char *CFCHECKPT=\"cfcheckpt\";\n } // namespace NetMsgType\n@@ -73,6 +75,8 @@ const static std::string allNetMessageTypes[] = {\n     NetMsgType::CMPCTBLOCK,\n     NetMsgType::GETBLOCKTXN,\n     NetMsgType::BLOCKTXN,\n+    NetMsgType::GETCFHEADERS,\n+    NetMsgType::CFHEADERS,\n     NetMsgType::GETCFCHECKPT,\n     NetMsgType::CFCHECKPT,\n };"
      },
      {
        "sha": "9527dce960516b261513901d6c6e71195087569e",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 13,
        "deletions": 2,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f6b58c150686e90bc4952976e488b1605f3ae02a/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=f6b58c150686e90bc4952976e488b1605f3ae02a",
        "patch": "@@ -225,6 +225,19 @@ extern const char* GETBLOCKTXN;\n  * @since protocol version 70014 as described by BIP 152\n  */\n extern const char* BLOCKTXN;\n+/**\n+ * getcfheaders requests a compact filter header and the filter hashes for a\n+ * range of blocks, which can then be used to reconstruct the filter headers\n+ * for those blocks.\n+ * Only available with service bit NODE_COMPACT_FILTERS as described by\n+ * BIP 157 & 158.\n+ */\n+extern const char* GETCFHEADERS;\n+/**\n+ * cfheaders is a response to a getcfheaders request containing a filter header\n+ * and a vector of filter hashes for each subsequent block in the requested range.\n+ */\n+extern const char* CFHEADERS;\n /**\n  * getcfcheckpt requests evenly spaced compact filter headers, enabling\n  * parallelized download and validation of the headers between them.\n@@ -235,8 +248,6 @@ extern const char* GETCFCHECKPT;\n /**\n  * cfcheckpt is a response to a getcfcheckpt request containing a vector of\n  * evenly spaced filter headers for blocks on the requested chain.\n- * Only available with service bit NODE_COMPACT_FILTERS as described by\n- * BIP 157 & 158.\n  */\n extern const char* CFCHECKPT;\n }; // namespace NetMsgType"
      }
    ]
  },
  {
    "sha": "5308c97ccaf0955e5840956bc1636108a43e6f46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MzA4Yzk3Y2NhZjA5NTVlNTg0MDk1NmJjMTYzNjEwOGE0M2U2ZjQ2",
    "commit": {
      "author": {
        "name": "Jim Posen",
        "email": "jim.posen@gmail.com",
        "date": "2020-05-04T18:25:18Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2020-05-22T15:59:58Z"
      },
      "message": "[test] Add test for cfheaders",
      "tree": {
        "sha": "bf26dca90c46970c81acb164c5005f91f6864683",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bf26dca90c46970c81acb164c5005f91f6864683"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5308c97ccaf0955e5840956bc1636108a43e6f46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5308c97ccaf0955e5840956bc1636108a43e6f46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5308c97ccaf0955e5840956bc1636108a43e6f46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5308c97ccaf0955e5840956bc1636108a43e6f46/comments",
    "author": {
      "login": "jimpo",
      "id": 881253,
      "node_id": "MDQ6VXNlcjg4MTI1Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/881253?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jimpo",
      "html_url": "https://github.com/jimpo",
      "followers_url": "https://api.github.com/users/jimpo/followers",
      "following_url": "https://api.github.com/users/jimpo/following{/other_user}",
      "gists_url": "https://api.github.com/users/jimpo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jimpo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jimpo/subscriptions",
      "organizations_url": "https://api.github.com/users/jimpo/orgs",
      "repos_url": "https://api.github.com/users/jimpo/repos",
      "events_url": "https://api.github.com/users/jimpo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jimpo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f6b58c150686e90bc4952976e488b1605f3ae02a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f6b58c150686e90bc4952976e488b1605f3ae02a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f6b58c150686e90bc4952976e488b1605f3ae02a"
      }
    ],
    "stats": {
      "total": 108,
      "additions": 107,
      "deletions": 1
    },
    "files": [
      {
        "sha": "9ff76b4b3d71162bc6b2205691467f5822b207f3",
        "filename": "test/functional/p2p_blockfilters.py",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/p2p_blockfilters.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/p2p_blockfilters.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blockfilters.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -5,12 +5,16 @@\n \"\"\"Tests NODE_COMPACT_FILTERS (BIP 157/158).\n \n Tests that a node configured with -blockfilterindex and -peerblockfilters can serve\n-cfcheckpts.\n+cfheaders and cfcheckpts.\n \"\"\"\n \n from test_framework.messages import (\n     FILTER_TYPE_BASIC,\n+    hash256,\n     msg_getcfcheckpt,\n+    msg_getcfheaders,\n+    ser_uint256,\n+    uint256_from_str,\n )\n from test_framework.mininode import P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -100,12 +104,45 @@ def run_test(self):\n             [int(header, 16) for header in (stale_cfcheckpt,)]\n         )\n \n+        self.log.info(\"Check that peers can fetch cfheaders on active chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(main_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(main_cfcheckpt, 16)\n+        )\n+\n+        self.log.info(\"Check that peers can fetch cfheaders on stale chain.\")\n+        request = msg_getcfheaders(\n+            filter_type=FILTER_TYPE_BASIC,\n+            start_height=1,\n+            stop_hash=int(stale_block_hash, 16)\n+        )\n+        node0.send_and_ping(request)\n+        response = node0.last_message['cfheaders']\n+        assert_equal(len(response.hashes), 1000)\n+        assert_equal(\n+            compute_last_header(response.prev_header, response.hashes),\n+            int(stale_cfcheckpt, 16)\n+        )\n+\n         self.log.info(\"Requests to node 1 without NODE_COMPACT_FILTERS results in disconnection.\")\n         requests = [\n             msg_getcfcheckpt(\n                 filter_type=FILTER_TYPE_BASIC,\n                 stop_hash=int(main_block_hash, 16)\n             ),\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=1000,\n+                stop_hash=int(main_block_hash, 16)\n+            ),\n         ]\n         for request in requests:\n             node1 = self.nodes[1].add_p2p_connection(P2PInterface())\n@@ -114,6 +151,12 @@ def run_test(self):\n \n         self.log.info(\"Check that invalid requests result in disconnection.\")\n         requests = [\n+            # Requesting too many filter headers results in disconnection.\n+            msg_getcfheaders(\n+                filter_type=FILTER_TYPE_BASIC,\n+                start_height=0,\n+                stop_hash=int(tip_hash, 16)\n+            ),\n             # Requesting unknown filter type results in disconnection.\n             msg_getcfcheckpt(\n                 filter_type=255,\n@@ -130,5 +173,12 @@ def run_test(self):\n             node0.send_message(request)\n             node0.wait_for_disconnect()\n \n+def compute_last_header(prev_header, hashes):\n+    \"\"\"Compute the last filter header from a starting header and a sequence of filter hashes.\"\"\"\n+    header = ser_uint256(prev_header)\n+    for filter_hash in hashes:\n+        header = hash256(ser_uint256(filter_hash) + header)\n+    return uint256_from_str(header)\n+\n if __name__ == '__main__':\n     CompactFiltersTest().main()"
      },
      {
        "sha": "d178e79541636eeca3dcd57bc9ae3684ee5c0434",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 53,
        "deletions": 0,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -1516,6 +1516,59 @@ class msg_no_witness_blocktxn(msg_blocktxn):\n     def serialize(self):\n         return self.block_transactions.serialize(with_witness=False)\n \n+class msg_getcfheaders:\n+    __slots__ = (\"filter_type\", \"start_height\", \"stop_hash\")\n+    msgtype =  b\"getcfheaders\"\n+\n+    def __init__(self, filter_type, start_height, stop_hash):\n+        self.filter_type = filter_type\n+        self.start_height = start_height\n+        self.stop_hash = stop_hash\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.start_height = struct.unpack(\"<I\", f.read(4))[0]\n+        self.stop_hash = deser_uint256(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += struct.pack(\"<I\", self.start_height)\n+        r += ser_uint256(self.stop_hash)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_getcfheaders(filter_type={:#x}, start_height={}, stop_hash={:x})\".format(\n+            self.filter_type, self.start_height, self.stop_hash)\n+\n+class msg_cfheaders:\n+    __slots__ = (\"filter_type\", \"stop_hash\", \"prev_header\", \"hashes\")\n+    msgtype =  b\"cfheaders\"\n+\n+    def __init__(self, filter_type=None, stop_hash=None, prev_header=None, hashes=None):\n+        self.filter_type = filter_type\n+        self.stop_hash = stop_hash\n+        self.prev_header = prev_header\n+        self.hashes = hashes\n+\n+    def deserialize(self, f):\n+        self.filter_type = struct.unpack(\"<B\", f.read(1))[0]\n+        self.stop_hash = deser_uint256(f)\n+        self.prev_header = deser_uint256(f)\n+        self.hashes = deser_uint256_vector(f)\n+\n+    def serialize(self):\n+        r = b\"\"\n+        r += struct.pack(\"<B\", self.filter_type)\n+        r += ser_uint256(self.stop_hash)\n+        r += ser_uint256(self.prev_header)\n+        r += ser_uint256_vector(self.hashes)\n+        return r\n+\n+    def __repr__(self):\n+        return \"msg_cfheaders(filter_type={:#x}, stop_hash={:x})\".format(\n+            self.filter_type, self.stop_hash)\n+\n class msg_getcfcheckpt:\n     __slots__ = (\"filter_type\", \"stop_hash\")\n     msgtype =  b\"getcfcheckpt\""
      },
      {
        "sha": "0591690643b15820d91e28498df91c91cf539270",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5308c97ccaf0955e5840956bc1636108a43e6f46/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=5308c97ccaf0955e5840956bc1636108a43e6f46",
        "patch": "@@ -31,6 +31,7 @@\n     msg_block,\n     MSG_BLOCK,\n     msg_blocktxn,\n+    msg_cfheaders,\n     msg_cfcheckpt,\n     msg_cmpctblock,\n     msg_feefilter,\n@@ -68,6 +69,7 @@\n     b\"addr\": msg_addr,\n     b\"block\": msg_block,\n     b\"blocktxn\": msg_blocktxn,\n+    b\"cfheaders\": msg_cfheaders,\n     b\"cfcheckpt\": msg_cfcheckpt,\n     b\"cmpctblock\": msg_cmpctblock,\n     b\"feefilter\": msg_feefilter,\n@@ -330,6 +332,7 @@ def on_close(self):\n     def on_addr(self, message): pass\n     def on_block(self, message): pass\n     def on_blocktxn(self, message): pass\n+    def on_cfheaders(self, message): pass\n     def on_cfcheckpt(self, message): pass\n     def on_cmpctblock(self, message): pass\n     def on_feefilter(self, message): pass"
      }
    ]
  }
]