jnewbery,2020-05-18 18:59:40,This is the 3rd PR taken from #18876. Please see that PR for details of the full changes to support BIP 157.,https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-630376790,630376790,
DrahtBot,2020-05-18 23:57:00,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18354 (Protect wallet by using shared pointers by bvbfan)\n\nIf you consider this pull request important, please also hel",https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-630495208,630495208,
theStack,2020-05-21 16:51:23,Concept ACK,https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-632220053,632220053,
jnewbery,2020-05-21 19:25:45,"Force pushed the branch to:\n\n- rebase on master now that #18960 is merged\n- Added a comment to `m_headers_cache` that didn't make it into #18960 (https://github.com/bitcoin/bitcoin/pull/18960#discussion_r428395728)\n- Addressed @jkczyz's comment on the functional test (https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428759826)",https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-632297929,632297929,
jnewbery,2020-05-21 23:16:26,"> what's the general approach been for testing bad requests? BIP 157 says to not respond, but we are disconnecting the peer in these cases.\n\nI don't have a strong opinion about whether to disconnect or drop bad requests. Generally I prefer simply dropping bad requests to prevent bugs becoming network partition possibilities, but in this case:\n\n- the message type is entirely new.\n- the pe",https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-632392766,632392766,
MarcoFalke,2020-05-22 10:37:26,"> the peers sending us these requests are light clients, so the downside of disconnecting them is small.\n\nI agree here. Generally the nicest thing you can do to misbehaving light clients is to disconnect them as early as possible. This way the misbehaviour bug will be hopefully caught early in the design and testing process of the light client. If not, at least in production it will be another",https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-632623825,632623825,
jnewbery,2020-05-22 16:30:09,"Thanks for review @MarcoFalke and @theStack. I've addressed all of your review comments, and also removed some redundant wording from the comment for `CFCHECKPOINT` in protocol.h",https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-632785252,632785252,
jkczyz,2020-05-25 06:15:13,ACK 5308c97ccaf0955e5840956bc1636108a43e6f46,https://github.com/bitcoin/bitcoin/pull/19010#issuecomment-633397233,633397233,
MarcoFalke,2020-05-18 23:58:18,"```suggestion\n                                CConnman& connman)\n```\n\nAny reason why this is a pointer, but missing the nullptr check?\n\n* Either this should be a proper pointer with nullptr check, or\n* it should be a reference\n\nMixing the two combines the worst of each option.\n\n(Same for pfrom)",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r426954791,426954791,src/net_processing.cpp
jkczyz,2020-05-21 15:43:05,"Given these checks aren't necessary for ProcessGetCFCheckPt, would they be more suitable in separate function? Then the caller wouldn't have to know which values to pass to make the checks succeed.\n\nDownside is you might fetch the `BlockFilterIndex` even though these checks may later fail.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428737628,428737628,src/net_processing.cpp
jkczyz,2020-05-21 16:15:10,Is it worth checking how many hashes are returned? Or would you consider it checked indirectly by `compute_last_header`?,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428759826,428759826,test/functional/p2p_blockfilters.py
jnewbery,2020-05-21 18:29:55,"This usage is the same as all the other `Process*()` functions in net_processing. Rather than introduce a new style for just this function, I think it makes sense to change it everywhere in net_processing in a refactor PR.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428835615,428835615,src/net_processing.cpp
jnewbery,2020-05-21 18:47:05,"I think this makes more sense if you also look at the full changes in https://github.com/bitcoin/bitcoin/pull/18876, where this function is common logic for getcfheaders and getcfilters, and the max number of headers that can be requested is 2000, and the max number of filters that can be requested in 1000.\n\nI agree that the getcfcheckpt logic passing in `0` and `std::numeric_limits<uint32_t>:",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428844525,428844525,src/net_processing.cpp
theStack,2020-05-21 18:55:46,"Another option would be to simply use default parameters, i.e. if start_height and max_height diff are not passed, the whole range is allowed. That would need to change the order of the parameters though.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428849166,428849166,src/net_processing.cpp
jnewbery,2020-05-21 19:26:31,"Technically, it's covered indirectly, but I think it's a good idea to explicitly test this so failures are easier to identify. I've added the check.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428864709,428864709,test/functional/p2p_blockfilters.py
fjahr,2020-05-21 22:12:22,"nit: This threw me off initially (similar to what @jkczyz noted below). The BIP gives a specific number, why do we not just use the constant? I think this could help make it a little less confusing.\n```suggestion\n * @param[in]   max_height_diff The maximum number of headers or filters permitted to request, as specified in BIP 157\n```",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r428944198,428944198,src/net_processing.cpp
MarcoFalke,2020-05-22 10:44:11,"Generally new code should be style-conformant. See for example `RelayTransaction`, which properly passes connman. Obviously a non-blocking nit, so feel free to close this conversation.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429175250,429175250,src/net_processing.cpp
MarcoFalke,2020-05-22 11:15:39,"in commit db20d456f0 [net processing] Message handling for getcfheaders.\n\nWhy add an empty newline in the params?",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429187872,429187872,src/net_processing.cpp
MarcoFalke,2020-05-22 11:17:31,"style-nit in commit db20d456f0 (according to clang-format):\n\n```suggestion\nextern const char* GETCFHEADERS;\n```",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429188567,429188567,src/protocol.h
theStack,2020-05-22 11:52:34,"To match the other comments in the class, this one should also use the Doxygen starting delimiter (= C-Style comment with two '*'s, see http://www.doxygen.nl/manual/docblocks.html#cppblock):\n```suggestion\n    /** cache of block hash to filter header, to avoid disk access when responding to getcfcheckpt. */\n```",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429202424,429202424,src/index/blockfilterindex.h
theStack,2020-05-22 12:00:02,"nit: technically, it's only one filter header plus a vector of filter hashes",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429205414,429205414,src/protocol.h
jnewbery,2020-05-22 16:22:05,Because I have fat fingers. Now fixed.,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429338950,429338950,src/net_processing.cpp
jnewbery,2020-05-22 16:22:31,Whoops. Missed this out in the rebase. Fixed.,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429339147,429339147,src/protocol.h
jnewbery,2020-05-22 16:22:49,"Yes, this is a typo. Fixed!",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429339303,429339303,src/index/blockfilterindex.h
jnewbery,2020-05-22 16:23:07,Thanks. I've corrected the comment.,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429339454,429339454,src/protocol.h
MarcoFalke,2020-05-23 16:33:03,Why are you removing this?,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429560040,429560040,src/protocol.h
jnewbery,2020-05-23 17:18:30,"It doesn't appear in the comments for `cfheaders` and `cfilter`, so I'm removing it from here for consistency. It seems obvious that `NODE_COMPACT_FILTERS` is required since it's a response to `getcfcheckpt`, which requires `NODE_COMPACT_FILTERS`.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429563076,429563076,src/protocol.h
MarcoFalke,2020-05-23 17:49:33,Fair enough,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r429565099,429565099,src/protocol.h
jonatack,2020-06-02 08:10:40,style nit: replace the multiple values of 1000 and of 16 in this file with well-named constants,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433696903,433696903,test/functional/p2p_blockfilters.py
jonatack,2020-06-02 08:11:58,nit: sort here and lines 34 and 72,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433697654,433697654,test/functional/test_framework/mininode.py
jonatack,2020-06-02 08:13:11,I agree with @fjahr's comment and suggested change.,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433698370,433698370,src/net_processing.cpp
jnewbery,2020-06-02 14:35:55,"The 16 is used to interpret a hex string into an int (RPC return values are strings), so we shouldn't have a constant for that. I tried replacing the 1000 with a constant, but I don't think it made things any clearer.",https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433926144,433926144,test/functional/p2p_blockfilters.py
jnewbery,2020-06-02 14:38:28,This was fixed in the following PR.,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433927925,433927925,test/functional/test_framework/mininode.py
jnewbery,2020-06-02 15:23:38,I'll add this in #19070 if I need to retouch that branch,https://github.com/bitcoin/bitcoin/pull/19010#discussion_r433961139,433961139,src/net_processing.cpp
