[
  {
    "sha": "1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYTZhMGIwZGZiOTBmOWViZDRiODZkNzkzNGM2YWE1NTk0OTc0ZjVm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-04T23:21:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T16:30:01Z"
      },
      "message": "wallet: Use existing feerate instead of getting a new one\n\nDuring each loop of CreateTransaction, instead of constantly getting a\nnew feerate, use the feerate that we have already fetched for all\nfee calculations. Thix fixes a race condition where the feerate required\nchanges during each iteration of the loop.\n\nThis commit changes behavior as the \"Fee estimation failed\" error will\nnow take priority over \"Signing transaction failed\".",
      "tree": {
        "sha": "7dd01ff65916b0dd4f20f79b0abaf613fd46d43e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7dd01ff65916b0dd4f20f79b0abaf613fd46d43e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea5a50f92a6ff81b1d2dd67cdc3663e0e66733ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea5a50f92a6ff81b1d2dd67cdc3663e0e66733ac",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea5a50f92a6ff81b1d2dd67cdc3663e0e66733ac"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 7,
      "deletions": 8
    },
    "files": [
      {
        "sha": "31982a0901c875b3a269f899519c7ade55474844",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 8,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
        "patch": "@@ -2814,6 +2814,11 @@ bool CWallet::CreateTransactionInternal(\n                 error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n+            if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n+                // eventually allow a fallback fee\n+                error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n+                return false;\n+            }\n \n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n@@ -2951,13 +2956,7 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n-                if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n-                    // eventually allow a fallback fee\n-                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n-                    return false;\n-                }\n-\n+                nFeeNeeded = coin_selection_params.effective_fee.GetFee(nBytes);\n                 if (nFeeRet >= nFeeNeeded) {\n                     // Reduce fee to only the needed amount if possible. This\n                     // prevents potential overpayment in fees if the coins\n@@ -2971,7 +2970,7 @@ bool CWallet::CreateTransactionInternal(\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = GetMinimumFee(*this, tx_size_with_change, coin_control, nullptr);\n+                        CAmount fee_needed_with_change = coin_selection_params.effective_fee.GetFee(tx_size_with_change);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;"
      }
    ]
  },
  {
    "sha": "e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMmY0MjllNmJiZjcwOThmMjc4YzAyNDdiOTU0ZWNkM2JhNTNjZjM3",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-04T23:23:51Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T16:32:56Z"
      },
      "message": "wallet: Replace nFeeRateNeeded with effective_fee\n\nMake sure that all fee calculations use the same feerate.\ncoin_selection_params.effective_fee is the variable we use for all fee\ncalculations, so get rid of remaining nFeeRateNeeded usages and just\ndirectly set coin_selection_params.effective_fee.\n\nDoes not change behavior.",
      "tree": {
        "sha": "016b3cbdc815b861807c6dcab9a58f4a27d73910",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/016b3cbdc815b861807c6dcab9a58f4a27d73910"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f429e6bbf7098f278c0247b954ecd3ba53cf37/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1a6a0b0dfb90f9ebd4b86d7934c6aa5594974f5f"
      }
    ],
    "stats": {
      "total": 7,
      "additions": 3,
      "deletions": 4
    },
    "files": [
      {
        "sha": "93789f03c5c41ed9063d973bdfa263e65f7dd4c4",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e2f429e6bbf7098f278c0247b954ecd3ba53cf37/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e2f429e6bbf7098f278c0247b954ecd3ba53cf37/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
        "patch": "@@ -2807,11 +2807,11 @@ bool CWallet::CreateTransactionInternal(\n             CFeeRate discard_rate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            CFeeRate nFeeRateNeeded = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && nFeeRateNeeded > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), nFeeRateNeeded.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n             if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n@@ -2893,7 +2893,6 @@ bool CWallet::CreateTransactionInternal(\n                     } else {\n                         coin_selection_params.change_spend_size = (size_t)change_spend_size;\n                     }\n-                    coin_selection_params.effective_fee = nFeeRateNeeded;\n                     if (!SelectCoins(vAvailableCoins, nValueToSelect, setCoins, nValueIn, coin_control, coin_selection_params, bnb_used))\n                     {\n                         // If BnB was used, it was the first pass. No longer the first pass and continue loop with knapsack."
      }
    ]
  },
  {
    "sha": "448d04b931f86941903e855f831249ff5ec77485",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0NDhkMDRiOTMxZjg2OTQxOTAzZTg1NWY4MzEyNDlmZjVlYzc3NDg1",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-04T23:28:45Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:32:38Z"
      },
      "message": "wallet: Move long term feerate setting to CreateTransaction\n\nInstead of setting the long term feerate for each SelectCoinsMinConf\niteration, set it once during CreateTransaction and let it be shared\nwith each SelectCoinsMinConf through\ncoin_selection_params.m_long_term_feerate.\n\nDoes not change behavior.",
      "tree": {
        "sha": "9c058dd072df67f64b464846835a5d32c86c93f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c058dd072df67f64b464846835a5d32c86c93f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/448d04b931f86941903e855f831249ff5ec77485",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448d04b931f86941903e855f831249ff5ec77485",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/448d04b931f86941903e855f831249ff5ec77485",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448d04b931f86941903e855f831249ff5ec77485/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e2f429e6bbf7098f278c0247b954ecd3ba53cf37",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e2f429e6bbf7098f278c0247b954ecd3ba53cf37"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 30,
      "deletions": 13
    },
    "files": [
      {
        "sha": "0cbd4bfad4f3eaf7cd5a647e50df2411b433b7ac",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448d04b931f86941903e855f831249ff5ec77485/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448d04b931f86941903e855f831249ff5ec77485/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=448d04b931f86941903e855f831249ff5ec77485",
        "patch": "@@ -49,7 +49,10 @@ static void CoinSelection(benchmark::Bench& bench)\n     }\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n-    const CoinSelectionParams coin_selection_params(true, 34, 148, CFeeRate(0), 0, false);\n+    const CoinSelectionParams coin_selection_params(/* use_bnb= */ true, /* change_output_size= */ 34,\n+                                                    /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                    /* long_term_feerate= */ CFeeRate(0),\n+                                                    /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n         std::set<CInputCoin> setCoinsRet;\n         CAmount nValueRet;"
      },
      {
        "sha": "901b2e8ccfdc0199cb3e734ea17e4945584ee4d0",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448d04b931f86941903e855f831249ff5ec77485/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448d04b931f86941903e855f831249ff5ec77485/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=448d04b931f86941903e855f831249ff5ec77485",
        "patch": "@@ -35,7 +35,10 @@ static CAmount balance = 0;\n CoinEligibilityFilter filter_standard(1, 6, 0);\n CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n-CoinSelectionParams coin_selection_params(false, 0, 0, CFeeRate(0), 0, false);\n+CoinSelectionParams coin_selection_params(/* use_bnb= */ false, /* change_output_size= */ 0,\n+                                          /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(0),\n+                                          /* long_term_feerate= */ CFeeRate(0),\n+                                          /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n {\n@@ -269,7 +272,10 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     }\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n-    CoinSelectionParams coin_selection_params_bnb(true, 0, 0, CFeeRate(3000), 0, false);\n+    CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 0,\n+                                                  /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(3000),\n+                                                  /* long_term_feerate= */ CFeeRate(1000),\n+                                                  /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n     bool bnb_used;\n@@ -639,8 +645,14 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         CAmount target = rand.randrange(balance - 1000) + 1000;\n \n         // Perform selection\n-        CoinSelectionParams coin_selection_params_knapsack(false, 34, 148, CFeeRate(0), 0, false);\n-        CoinSelectionParams coin_selection_params_bnb(true, 34, 148, CFeeRate(0), 0, false);\n+        CoinSelectionParams coin_selection_params_knapsack(/* use_bnb= */ false, /* change_output_size= */ 34,\n+                                                           /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                           /* long_term_feerate= */ CFeeRate(0),\n+                                                           /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n+        CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 34,\n+                                                      /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                      /* long_term_feerate= */ CFeeRate(0),\n+                                                      /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSet out_set;\n         CAmount out_value = 0;\n         bool bnb_used = false;"
      },
      {
        "sha": "ce0c458c6413aadb5b32e9b2f6afa0984cc17973",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448d04b931f86941903e855f831249ff5ec77485/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448d04b931f86941903e855f831249ff5ec77485/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=448d04b931f86941903e855f831249ff5ec77485",
        "patch": "@@ -2364,20 +2364,14 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n     nValueRet = 0;\n \n     if (coin_selection_params.use_bnb) {\n-        // Get long term estimate\n-        FeeCalculation feeCalc;\n-        CCoinControl temp;\n-        temp.m_confirm_target = 1008;\n-        CFeeRate long_term_feerate = GetMinimumFeeRate(*this, temp, &feeCalc);\n-\n         // Get the feerate for effective value.\n         // When subtracting the fee from the outputs, we want the effective feerate to be 0\n         CFeeRate effective_feerate{0};\n         if (!coin_selection_params.m_subtract_fee_outputs) {\n             effective_feerate = coin_selection_params.effective_fee;\n         }\n \n-        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, long_term_feerate, eligibility_filter, true /* positive_only */);\n+        std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n \n         // Calculate cost of change\n         CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n@@ -2820,6 +2814,11 @@ bool CWallet::CreateTransactionInternal(\n                 return false;\n             }\n \n+            // Get long term estimate\n+            CCoinControl cc_temp;\n+            cc_temp.m_confirm_target = chain().estimateMaxBlocks();\n+            coin_selection_params.m_long_term_feerate = GetMinimumFeeRate(*this, cc_temp, nullptr);\n+\n             nFeeRet = 0;\n             bool pick_new_inputs = true;\n             CAmount nValueIn = 0;"
      },
      {
        "sha": "67d51de30f120feea7dfc3720ab29b3b77be4501",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/448d04b931f86941903e855f831249ff5ec77485/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/448d04b931f86941903e855f831249ff5ec77485/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=448d04b931f86941903e855f831249ff5ec77485",
        "patch": "@@ -607,16 +607,19 @@ struct CoinSelectionParams\n     size_t change_output_size = 0;\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n+    CFeeRate m_long_term_feerate;\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n     bool m_avoid_partial_spends = false;\n \n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee, size_t tx_noinputs_size, bool avoid_partial) :\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee,\n+                        CFeeRate long_term_feerate, size_t tx_noinputs_size, bool avoid_partial) :\n         use_bnb(use_bnb),\n         change_output_size(change_output_size),\n         change_spend_size(change_spend_size),\n         effective_fee(effective_fee),\n+        m_long_term_feerate(long_term_feerate),\n         tx_noinputs_size(tx_noinputs_size),\n         m_avoid_partial_spends(avoid_partial)\n     {}"
      }
    ]
  },
  {
    "sha": "bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZGQwYzI5MzRiN2YzODlmZmNmYWUzYjYwMmVlM2VjZWU4NTgxYWNk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-02-05T00:11:24Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:33:27Z"
      },
      "message": "wallet: Move discard feerate fetching to CreateTransaction\n\nInstead of fetching the discard feerate for each SelectCoinsMinConf\niteration, fetch and cache it once during CreateTransaction so that it\nis shared for each SelectCoinsMinConf through\ncoin_selection_params.m_discard_feerate.\n\nDoes not change behavior.",
      "tree": {
        "sha": "a48ef0b6fe83b44d6ac3a366e85754f803645256",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a48ef0b6fe83b44d6ac3a366e85754f803645256"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "448d04b931f86941903e855f831249ff5ec77485",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448d04b931f86941903e855f831249ff5ec77485",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/448d04b931f86941903e855f831249ff5ec77485"
      }
    ],
    "stats": {
      "total": 23,
      "additions": 13,
      "deletions": 10
    },
    "files": [
      {
        "sha": "56fd16e0fdf8059d8d2e76c9f6983847b0491209",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "patch": "@@ -51,7 +51,7 @@ static void CoinSelection(benchmark::Bench& bench)\n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n     const CoinSelectionParams coin_selection_params(/* use_bnb= */ true, /* change_output_size= */ 34,\n                                                     /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n-                                                    /* long_term_feerate= */ CFeeRate(0),\n+                                                    /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                     /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {\n         std::set<CInputCoin> setCoinsRet;"
      },
      {
        "sha": "09b3b3e1166f1e0b82518ae8fdbe659872ea2bbd",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "patch": "@@ -37,7 +37,7 @@ CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n CoinSelectionParams coin_selection_params(/* use_bnb= */ false, /* change_output_size= */ 0,\n                                           /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(0),\n-                                          /* long_term_feerate= */ CFeeRate(0),\n+                                          /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                           /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n \n static void add_coin(const CAmount& nValue, int nInput, std::vector<CInputCoin>& set)\n@@ -274,7 +274,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n     CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 0,\n                                                   /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(3000),\n-                                                  /* long_term_feerate= */ CFeeRate(1000),\n+                                                  /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n                                                   /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     CoinSet setCoinsRet;\n     CAmount nValueRet;\n@@ -647,11 +647,11 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n         // Perform selection\n         CoinSelectionParams coin_selection_params_knapsack(/* use_bnb= */ false, /* change_output_size= */ 34,\n                                                            /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n-                                                           /* long_term_feerate= */ CFeeRate(0),\n+                                                           /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                            /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 34,\n                                                       /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n-                                                      /* long_term_feerate= */ CFeeRate(0),\n+                                                      /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                       /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSet out_set;\n         CAmount out_value = 0;"
      },
      {
        "sha": "a835aaa2fbc1121c0ab90f58aaefac3c41330138",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "patch": "@@ -2374,7 +2374,7 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = GetDiscardRate(*this).GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n \n         // Calculate the fees for things that aren't inputs\n         CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n@@ -2798,7 +2798,8 @@ bool CWallet::CreateTransactionInternal(\n             CTxOut change_prototype_txout(0, scriptChange);\n             coin_selection_params.change_output_size = GetSerializeSize(change_prototype_txout);\n \n-            CFeeRate discard_rate = GetDiscardRate(*this);\n+            // Set discard feerate\n+            coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n             coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n@@ -2917,7 +2918,7 @@ bool CWallet::CreateTransactionInternal(\n                     // Never create dust outputs; if we would, just\n                     // add the dust to the fee.\n                     // The nChange when BnB is used is always going to go to fees.\n-                    if (IsDust(newTxOut, discard_rate) || bnb_used)\n+                    if (IsDust(newTxOut, coin_selection_params.m_discard_feerate) || bnb_used)\n                     {\n                         nChangePosInOut = -1;\n                         nFeeRet += nChange;\n@@ -2969,7 +2970,7 @@ bool CWallet::CreateTransactionInternal(\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n                         CAmount fee_needed_with_change = coin_selection_params.effective_fee.GetFee(tx_size_with_change);\n-                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, discard_rate);\n+                        CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;\n                             nFeeRet = fee_needed_with_change;"
      },
      {
        "sha": "e1a567989f6b09c1bf1001ccd7bfeb91478685b7",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "patch": "@@ -608,18 +608,20 @@ struct CoinSelectionParams\n     size_t change_spend_size = 0;\n     CFeeRate effective_fee = CFeeRate(0);\n     CFeeRate m_long_term_feerate;\n+    CFeeRate m_discard_feerate;\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n     bool m_avoid_partial_spends = false;\n \n     CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee,\n-                        CFeeRate long_term_feerate, size_t tx_noinputs_size, bool avoid_partial) :\n+                        CFeeRate long_term_feerate, CFeeRate discard_feerate, size_t tx_noinputs_size, bool avoid_partial) :\n         use_bnb(use_bnb),\n         change_output_size(change_output_size),\n         change_spend_size(change_spend_size),\n         effective_fee(effective_fee),\n         m_long_term_feerate(long_term_feerate),\n+        m_discard_feerate(discard_feerate),\n         tx_noinputs_size(tx_noinputs_size),\n         m_avoid_partial_spends(avoid_partial)\n     {}"
      }
    ]
  },
  {
    "sha": "f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmOWNkMmJmYmNjYjdhMmI4ZmYwN2NlYzVmNmQyYWRiZWNhNWYwN2Mz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T20:19:03Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2021-03-16T21:16:57Z"
      },
      "message": "Rename CoinSelectionParams::effective_fee to m_effective_feerate\n\nIt's a feerate, not a fee. Also follow the style guide for member names.",
      "tree": {
        "sha": "85459ff7982c0c4afd4023ba37cbb1a72f5accec",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/85459ff7982c0c4afd4023ba37cbb1a72f5accec"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bdd0c2934b7f389ffcfae3b602ee3ecee8581acd"
      }
    ],
    "stats": {
      "total": 36,
      "additions": 18,
      "deletions": 18
    },
    "files": [
      {
        "sha": "0aca690e1543857684edbdcb0c70cfa022901676",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
        "patch": "@@ -50,7 +50,7 @@ static void CoinSelection(benchmark::Bench& bench)\n \n     const CoinEligibilityFilter filter_standard(1, 6, 0);\n     const CoinSelectionParams coin_selection_params(/* use_bnb= */ true, /* change_output_size= */ 34,\n-                                                    /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                    /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                                     /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                     /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     bench.run([&] {"
      },
      {
        "sha": "f19d839f59d577aa5a2d9d18c70f9b7990ea98f9",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
        "patch": "@@ -36,7 +36,7 @@ CoinEligibilityFilter filter_standard(1, 6, 0);\n CoinEligibilityFilter filter_confirmed(1, 1, 0);\n CoinEligibilityFilter filter_standard_extra(6, 6, 0);\n CoinSelectionParams coin_selection_params(/* use_bnb= */ false, /* change_output_size= */ 0,\n-                                          /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(0),\n+                                          /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(0),\n                                           /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                           /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n \n@@ -273,7 +273,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n \n     // Make sure that effective value is working in SelectCoinsMinConf when BnB is used\n     CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 0,\n-                                                  /* change_spend_size= */ 0, /* effective_fee= */ CFeeRate(3000),\n+                                                  /* change_spend_size= */ 0, /* effective_feerate= */ CFeeRate(3000),\n                                                   /* long_term_feerate= */ CFeeRate(1000), /* discard_feerate= */ CFeeRate(1000),\n                                                   /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n     CoinSet setCoinsRet;\n@@ -307,7 +307,7 @@ BOOST_AUTO_TEST_CASE(bnb_search_test)\n         CCoinControl coin_control;\n         coin_control.fAllowOtherInputs = true;\n         coin_control.Select(COutPoint(vCoins.at(0).tx->GetHash(), vCoins.at(0).i));\n-        coin_selection_params_bnb.effective_fee = CFeeRate(0);\n+        coin_selection_params_bnb.m_effective_feerate = CFeeRate(0);\n         BOOST_CHECK(wallet->SelectCoins(vCoins, 10 * CENT, setCoinsRet, nValueRet, coin_control, coin_selection_params_bnb, bnb_used));\n         BOOST_CHECK(bnb_used);\n         BOOST_CHECK(coin_selection_params_bnb.use_bnb);\n@@ -646,11 +646,11 @@ BOOST_AUTO_TEST_CASE(SelectCoins_test)\n \n         // Perform selection\n         CoinSelectionParams coin_selection_params_knapsack(/* use_bnb= */ false, /* change_output_size= */ 34,\n-                                                           /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                           /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                                            /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                            /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSelectionParams coin_selection_params_bnb(/* use_bnb= */ true, /* change_output_size= */ 34,\n-                                                      /* change_spend_size= */ 148, /* effective_fee= */ CFeeRate(0),\n+                                                      /* change_spend_size= */ 148, /* effective_feerate= */ CFeeRate(0),\n                                                       /* long_term_feerate= */ CFeeRate(0), /* discard_feerate= */ CFeeRate(0),\n                                                       /* tx_no_inputs_size= */ 0, /* avoid_partial= */ false);\n         CoinSet out_set;"
      },
      {
        "sha": "554f62c6b4a24ec71f69b712574f916f18ac6b0a",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
        "patch": "@@ -2368,16 +2368,16 @@ bool CWallet::SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibil\n         // When subtracting the fee from the outputs, we want the effective feerate to be 0\n         CFeeRate effective_feerate{0};\n         if (!coin_selection_params.m_subtract_fee_outputs) {\n-            effective_feerate = coin_selection_params.effective_fee;\n+            effective_feerate = coin_selection_params.m_effective_feerate;\n         }\n \n         std::vector<OutputGroup> groups = GroupOutputs(coins, !coin_selection_params.m_avoid_partial_spends, effective_feerate, coin_selection_params.m_long_term_feerate, eligibility_filter, true /* positive_only */);\n \n         // Calculate cost of change\n-        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.effective_fee.GetFee(coin_selection_params.change_output_size);\n+        CAmount cost_of_change = coin_selection_params.m_discard_feerate.GetFee(coin_selection_params.change_spend_size) + coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.change_output_size);\n \n         // Calculate the fees for things that aren't inputs\n-        CAmount not_input_fees = coin_selection_params.effective_fee.GetFee(coin_selection_params.tx_noinputs_size);\n+        CAmount not_input_fees = coin_selection_params.m_effective_feerate.GetFee(coin_selection_params.tx_noinputs_size);\n         bnb_used = true;\n         return SelectCoinsBnB(groups, nTargetValue, cost_of_change, setCoinsRet, nValueRet, not_input_fees);\n     } else {\n@@ -2431,7 +2431,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             if (coin.m_input_bytes <= 0) {\n                 return false; // Not solvable, can't estimate size for fee\n             }\n-            coin.effective_value = coin.txout.nValue - coin_selection_params.effective_fee.GetFee(coin.m_input_bytes);\n+            coin.effective_value = coin.txout.nValue - coin_selection_params.m_effective_feerate.GetFee(coin.m_input_bytes);\n             if (coin_selection_params.use_bnb) {\n                 value_to_select -= coin.effective_value;\n             } else {\n@@ -2802,11 +2802,11 @@ bool CWallet::CreateTransactionInternal(\n             coin_selection_params.m_discard_feerate = GetDiscardRate(*this);\n \n             // Get the fee rate to use effective values in coin selection\n-            coin_selection_params.effective_fee = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n+            coin_selection_params.m_effective_feerate = GetMinimumFeeRate(*this, coin_control, &feeCalc);\n             // Do not, ever, assume that it's fine to change the fee rate if the user has explicitly\n             // provided one\n-            if (coin_control.m_feerate && coin_selection_params.effective_fee > *coin_control.m_feerate) {\n-                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.effective_fee.ToString(FeeEstimateMode::SAT_VB));\n+            if (coin_control.m_feerate && coin_selection_params.m_effective_feerate > *coin_control.m_feerate) {\n+                error = strprintf(_(\"Fee rate (%s) is lower than the minimum fee rate setting (%s)\"), coin_control.m_feerate->ToString(FeeEstimateMode::SAT_VB), coin_selection_params.m_effective_feerate.ToString(FeeEstimateMode::SAT_VB));\n                 return false;\n             }\n             if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n@@ -2955,7 +2955,7 @@ bool CWallet::CreateTransactionInternal(\n                     return false;\n                 }\n \n-                nFeeNeeded = coin_selection_params.effective_fee.GetFee(nBytes);\n+                nFeeNeeded = coin_selection_params.m_effective_feerate.GetFee(nBytes);\n                 if (nFeeRet >= nFeeNeeded) {\n                     // Reduce fee to only the needed amount if possible. This\n                     // prevents potential overpayment in fees if the coins\n@@ -2969,7 +2969,7 @@ bool CWallet::CreateTransactionInternal(\n                     // change output. Only try this once.\n                     if (nChangePosInOut == -1 && nSubtractFeeFromAmount == 0 && pick_new_inputs) {\n                         unsigned int tx_size_with_change = nBytes + coin_selection_params.change_output_size + 2; // Add 2 as a buffer in case increasing # of outputs changes compact size\n-                        CAmount fee_needed_with_change = coin_selection_params.effective_fee.GetFee(tx_size_with_change);\n+                        CAmount fee_needed_with_change = coin_selection_params.m_effective_feerate.GetFee(tx_size_with_change);\n                         CAmount minimum_value_for_change = GetDustThreshold(change_prototype_txout, coin_selection_params.m_discard_feerate);\n                         if (nFeeRet >= fee_needed_with_change + minimum_value_for_change) {\n                             pick_new_inputs = false;"
      },
      {
        "sha": "37b94b8cd9a07ce0dbe30cf1adc2d6a062b74f3d",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=f9cd2bfbccb7a2b8ff07cec5f6d2adbeca5f07c3",
        "patch": "@@ -606,20 +606,20 @@ struct CoinSelectionParams\n     bool use_bnb = true;\n     size_t change_output_size = 0;\n     size_t change_spend_size = 0;\n-    CFeeRate effective_fee = CFeeRate(0);\n+    CFeeRate m_effective_feerate;\n     CFeeRate m_long_term_feerate;\n     CFeeRate m_discard_feerate;\n     size_t tx_noinputs_size = 0;\n     //! Indicate that we are subtracting the fee from outputs\n     bool m_subtract_fee_outputs = false;\n     bool m_avoid_partial_spends = false;\n \n-    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_fee,\n+    CoinSelectionParams(bool use_bnb, size_t change_output_size, size_t change_spend_size, CFeeRate effective_feerate,\n                         CFeeRate long_term_feerate, CFeeRate discard_feerate, size_t tx_noinputs_size, bool avoid_partial) :\n         use_bnb(use_bnb),\n         change_output_size(change_output_size),\n         change_spend_size(change_spend_size),\n-        effective_fee(effective_fee),\n+        m_effective_feerate(effective_feerate),\n         m_long_term_feerate(long_term_feerate),\n         m_discard_feerate(discard_feerate),\n         tx_noinputs_size(tx_noinputs_size),"
      }
    ]
  }
]