[
  {
    "sha": "0d3b75d59efefa2a640e29334b9205fde74cf080",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZDNiNzVkNTllZmVmYTJhNjQwZTI5MzM0YjkyMDVmZGU3NGNmMDgw",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-03-10T15:32:44Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-24T22:05:11Z"
      },
      "message": "Add compile time checking for all run time locking assertions\n\nThe intention is that literally all EXCLUSIVE_LOCKS_REQUIRED/LOCKS_EXCLUDED:s\nadded in this PR should follow either directly or indirectly from\nAssertLockHeld(\u2026)/AssertLockNotHeld(\u2026):s already existing in the repo.\n\nConsider the case where function A(\u2026) contains AssertLockHeld(cs_foo)\n(without first locking cs_foo in A), and that B(\u2026) calls A(\u2026) (without\nfirst locking cs_main):\n\nIt directly follows that:\n* A(\u2026) should have an EXCLUSIVE_LOCKS_REQUIRED(cs_foo) annotation.\n\nIt indirectly follows that:\n* B(\u2026) should have an EXCLUSIVE_LOCKS_REQUIRED(cs_foo) annotation.",
      "tree": {
        "sha": "bbcd1b672ac6aa8685f3f6d09d3aed54fa82d267",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bbcd1b672ac6aa8685f3f6d09d3aed54fa82d267"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0d3b75d59efefa2a640e29334b9205fde74cf080",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b75d59efefa2a640e29334b9205fde74cf080",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3b75d59efefa2a640e29334b9205fde74cf080",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b75d59efefa2a640e29334b9205fde74cf080/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0079d4b6dc67be3889af9a16eda89b3c4b33bc5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0079d4b6dc67be3889af9a16eda89b3c4b33bc5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0079d4b6dc67be3889af9a16eda89b3c4b33bc5"
      }
    ],
    "stats": {
      "total": 251,
      "additions": 132,
      "deletions": 119
    },
    "files": [
      {
        "sha": "6fa36833dd9f18a31cecab195c64281a3248d6fd",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -57,7 +57,7 @@ class PendingWalletTxImpl : public PendingWalletTx\n };\n \n //! Construct wallet tx struct.\n-WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n+static WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTx result;\n     result.tx = wtx.tx;\n@@ -85,7 +85,7 @@ WalletTx MakeWalletTx(CWallet& wallet, const CWalletTx& wtx)\n }\n \n //! Construct wallet tx status struct.\n-WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n+static WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxStatus result;\n     auto mi = ::mapBlockIndex.find(wtx.hashBlock);\n@@ -105,7 +105,7 @@ WalletTxStatus MakeWalletTxStatus(const CWalletTx& wtx)\n }\n \n //! Construct wallet TxOut struct.\n-WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth)\n+static WalletTxOut MakeWalletTxOut(CWallet& wallet, const CWalletTx& wtx, int n, int depth) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     WalletTxOut result;\n     result.txout = wtx.tx->vout[n];"
      },
      {
        "sha": "c56e4751de8a0514c3ef7131d4c6b5cf2e88ede5",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -54,7 +54,7 @@ class CBasicKeyStore : public CKeyStore\n     ScriptMap mapScripts;\n     WatchOnlySet setWatchOnly;\n \n-    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey);\n+    void ImplicitlyLearnRelatedKeyScripts(const CPubKey& pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_KeyStore);\n \n public:\n     bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;"
      },
      {
        "sha": "42dca95b91e511c08cc6b0d9d0deac8b33d8a63e",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -411,7 +411,7 @@ void UpdateBlockAvailability(NodeId nodeid, const uint256 &hash) {\n  * lNodesAnnouncingHeaderAndIDs, and keeping that list under a certain size by\n  * removing the first element if necessary.\n  */\n-void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n+static void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n     CNodeState* nodestate = State(nodeid);\n     if (!nodestate || !nodestate->fSupportsDesiredCmpctVersion) {\n@@ -444,7 +444,7 @@ void MaybeSetPeerAsAnnouncingHeaderAndIDs(NodeId nodeid, CConnman* connman) {\n     }\n }\n \n-bool TipMayBeStale(const Consensus::Params &consensusParams)\n+static bool TipMayBeStale(const Consensus::Params &consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (g_last_tip_update == 0) {\n@@ -800,7 +800,7 @@ void Misbehaving(NodeId pnode, int howmuch, const std::string& message)\n // active chain if they are no more than a month older (both in time, and in\n // best equivalent proof of work) than the best header chain we know about and\n // we fully-validated them at some point.\n-static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams)\n+static bool BlockRequestAllowed(const CBlockIndex* pindex, const Consensus::Params& consensusParams) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (chainActive.Contains(pindex)) return true;\n@@ -1213,7 +1213,7 @@ void static ProcessGetBlockData(CNode* pfrom, const Consensus::Params& consensus\n     }\n }\n \n-void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+void static ProcessGetData(CNode* pfrom, const Consensus::Params& consensusParams, CConnman* connman, const std::atomic<bool>& interruptMsgProc) LOCKS_EXCLUDED(cs_main)\n {\n     AssertLockNotHeld(cs_main);\n \n@@ -2897,7 +2897,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n     return true;\n }\n \n-static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman)\n+static bool SendRejectsAndCheckIfBanned(CNode* pnode, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     CNodeState &state = *State(pnode->GetId());"
      },
      {
        "sha": "1f77ab53aa95a383c7e60287e4e9e54c61195179",
        "filename": "src/net_processing.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/net_processing.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/net_processing.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -35,6 +35,8 @@ static constexpr int64_t EXTRA_PEER_CHECK_INTERVAL = 45;\n /** Minimum time an outbound-peer-eviction candidate must be connected for, in order to evict, in seconds */\n static constexpr int64_t MINIMUM_CONNECT_TIME = 30;\n \n+extern CCriticalSection cs_main;\n+\n class PeerLogicValidation final : public CValidationInterface, public NetEventsInterface {\n private:\n     CConnman* const connman;\n@@ -75,7 +77,7 @@ class PeerLogicValidation final : public CValidationInterface, public NetEventsI\n     bool SendMessages(CNode* pto, std::atomic<bool>& interrupt) override;\n \n     /** Consider evicting an outbound peer based on the amount of time they've been behind our tip */\n-    void ConsiderEviction(CNode *pto, int64_t time_in_seconds);\n+    void ConsiderEviction(CNode *pto, int64_t time_in_seconds) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     /** Evict extra outbound peers. If we think our tip may be stale, connect to an extra outbound */\n     void CheckForStaleTipAndEvictPeers(const Consensus::Params &consensusParams);\n     /** If we have extra outbound peers, try to disconnect the one with the oldest block announcement */"
      },
      {
        "sha": "c0a25f75b58faa80c0f98aeacc2cf1d7bc5459c9",
        "filename": "src/policy/rbf.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/policy/rbf.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/policy/rbf.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/policy/rbf.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -23,6 +23,6 @@ bool SignalsOptInRBF(const CTransaction &tx);\n // according to BIP 125\n // This involves checking sequence numbers of the transaction, as well\n // as the sequence numbers of all in-mempool ancestors.\n-RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool);\n+RBFTransactionState IsRBFOptIn(const CTransaction &tx, CTxMemPool &pool) EXCLUSIVE_LOCKS_REQUIRED(pool.cs);\n \n #endif // BITCOIN_POLICY_RBF_H"
      },
      {
        "sha": "da56c109e727bcd334ce469d18e924fa85844395",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -48,7 +48,7 @@ QString TransactionDesc::FormatTxStatus(const interfaces::WalletTx& wtx, const i\n     }\n }\n \n-QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit)\n+QString TransactionDesc::toHTML(interfaces::Node& node, interfaces::Wallet& wallet, TransactionRecord *rec, int unit) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int numBlocks;\n     int64_t adjustedTime;"
      },
      {
        "sha": "bcc7102060fcd668f54de995d98dd9b75dd07c16",
        "filename": "src/qt/transactiondesc.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiondesc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiondesc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -5,9 +5,13 @@\n #ifndef BITCOIN_QT_TRANSACTIONDESC_H\n #define BITCOIN_QT_TRANSACTIONDESC_H\n \n+#include <sync.h>\n+\n #include <QObject>\n #include <QString>\n \n+extern CCriticalSection cs_main;\n+\n class TransactionRecord;\n \n namespace interfaces {\n@@ -29,7 +33,7 @@ class TransactionDesc: public QObject\n private:\n     TransactionDesc() {}\n \n-    static QString FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime);\n+    static QString FormatTxStatus(const interfaces::WalletTx& wtx, const interfaces::WalletTxStatus& status, bool inMempool, int numBlocks, int64_t adjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n };\n \n #endif // BITCOIN_QT_TRANSACTIONDESC_H"
      },
      {
        "sha": "be15935450a91a726b003d48bef9f541f9ac59c6",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_QT_TRANSACTIONRECORD_H\n \n #include <amount.h>\n+#include <sync.h>\n #include <uint256.h>\n \n #include <QList>\n@@ -17,6 +18,7 @@ class Wallet;\n struct WalletTx;\n struct WalletTxStatus;\n }\n+extern CCriticalSection cs_main;\n \n /** UI model for transaction status. The transaction status is the part of a transaction that will change over time.\n  */\n@@ -111,7 +113,7 @@ class TransactionRecord\n     /** Decompose CWallet transaction to model transaction records.\n      */\n     static bool showTransaction();\n-    static QList<TransactionRecord> decomposeTransaction(const interfaces::WalletTx& wtx);\n+    static QList<TransactionRecord> decomposeTransaction(const interfaces::WalletTx& wtx) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** @name Immutable transaction attributes\n       @{*/\n@@ -140,7 +142,7 @@ class TransactionRecord\n \n     /** Update status from core wallet tx.\n      */\n-    void updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime);\n+    void updateStatus(const interfaces::WalletTxStatus& wtx, int numBlocks, int64_t adjustedTime) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Return whether a status update is needed.\n      */"
      },
      {
        "sha": "a30c481585a5b318606d2e2435966b14c9e00605",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -73,7 +73,7 @@ class TransactionTablePriv\n \n     /* Query entire wallet anew from core.\n      */\n-    void refreshWallet(interfaces::Wallet& wallet)\n+    void refreshWallet(interfaces::Wallet& wallet) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         qDebug() << \"TransactionTablePriv::refreshWallet\";\n         cachedWallet.clear();\n@@ -91,7 +91,7 @@ class TransactionTablePriv\n \n        Call with transaction that was added, removed or changed.\n      */\n-    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction)\n+    void updateWallet(interfaces::Wallet& wallet, const uint256 &hash, int status, bool showTransaction) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         qDebug() << \"TransactionTablePriv::updateWallet: \" + QString::fromStdString(hash.ToString()) + \" \" + QString::number(status);\n \n@@ -176,7 +176,7 @@ class TransactionTablePriv\n         return cachedWallet.size();\n     }\n \n-    TransactionRecord *index(interfaces::Wallet& wallet, int idx)\n+    TransactionRecord *index(interfaces::Wallet& wallet, int idx) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n     {\n         if(idx >= 0 && idx < cachedWallet.size())\n         {\n@@ -244,7 +244,7 @@ void TransactionTableModel::updateAmountColumnTitle()\n     Q_EMIT headerDataChanged(Qt::Horizontal,Amount,Amount);\n }\n \n-void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction)\n+void TransactionTableModel::updateTransaction(const QString &hash, int status, bool showTransaction) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     uint256 updated;\n     updated.SetHex(hash.toStdString());\n@@ -669,7 +669,7 @@ QVariant TransactionTableModel::headerData(int section, Qt::Orientation orientat\n     return QVariant();\n }\n \n-QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const\n+QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex &parent) const EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     Q_UNUSED(parent);\n     TransactionRecord *data = priv->index(walletModel->wallet(), row);\n@@ -680,7 +680,7 @@ QModelIndex TransactionTableModel::index(int row, int column, const QModelIndex\n     return QModelIndex();\n }\n \n-void TransactionTableModel::updateDisplayUnit()\n+void TransactionTableModel::updateDisplayUnit() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // emit dataChanged to update Amount column with the current unit\n     updateAmountColumnTitle();"
      },
      {
        "sha": "2ca3ad4d9d479b83f57122b7861bae5f9c943903",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -18,7 +18,6 @@\n #include <primitives/transaction.h>\n #include <rpc/server.h>\n #include <streams.h>\n-#include <sync.h>\n #include <txdb.h>\n #include <txmempool.h>\n #include <util.h>\n@@ -379,7 +378,7 @@ std::string EntryDescriptionString()\n            \"       ... ]\\n\";\n }\n \n-void entryToJSON(UniValue &info, const CTxMemPoolEntry &e)\n+static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n {\n     AssertLockHeld(mempool.cs);\n \n@@ -1452,7 +1451,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-UniValue invalidateblock(const JSONRPCRequest& request)\n+static UniValue invalidateblock(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error("
      },
      {
        "sha": "ad5df10ed103e6b932b49ecb014ae754c385cb8f",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -5,6 +5,10 @@\n #ifndef BITCOIN_RPC_BLOCKCHAIN_H\n #define BITCOIN_RPC_BLOCKCHAIN_H\n \n+#include <sync.h>\n+\n+extern CCriticalSection cs_main;\n+\n class CBlock;\n class CBlockIndex;\n class UniValue;\n@@ -22,7 +26,7 @@ double GetDifficulty(const CBlockIndex* blockindex = nullptr);\n void RPCNotifyBlockChange(bool ibd, const CBlockIndex *);\n \n /** Block description to JSON */\n-UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false);\n+UniValue blockToJSON(const CBlock& block, const CBlockIndex* blockindex, bool txDetails = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Mempool information to JSON */\n UniValue mempoolInfoToJSON();\n@@ -31,7 +35,7 @@ UniValue mempoolInfoToJSON();\n UniValue mempoolToJSON(bool fVerbose = false);\n \n /** Block header to JSON */\n-UniValue blockheaderToJSON(const CBlockIndex* blockindex);\n+UniValue blockheaderToJSON(const CBlockIndex* blockindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n #endif\n "
      },
      {
        "sha": "5f0b81f9bc5f5ec649818fc0c8271a5073c855a8",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -90,7 +90,7 @@ CBlockIndex CreateBlockIndex(int nHeight)\n     return index;\n }\n \n-bool TestSequenceLocks(const CTransaction &tx, int flags)\n+static bool TestSequenceLocks(const CTransaction &tx, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     LOCK(mempool.cs);\n     return CheckSequenceLocks(tx, flags);"
      },
      {
        "sha": "1b623cf4e2d7629e23c8558c5437924b1fa4c89c",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -502,7 +502,7 @@ void CTxMemPool::removeRecursive(const CTransaction &origTx, MemPoolRemovalReaso\n     }\n }\n \n-void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags)\n+void CTxMemPool::removeForReorg(const CCoinsViewCache *pcoins, unsigned int nMemPoolHeight, int flags) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Remove transactions spending a coinbase which are now immature and no-longer-final transactions\n     LOCK(cs);"
      },
      {
        "sha": "3f9fb4850c45f24e67973054b04375b9a088590d",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -451,7 +451,7 @@ class CTxMemPool\n     mutable bool blockSinceLastRollingFeeBump;\n     mutable double rollingMinimumFeeRate; //!< minimum fee to get into the pool, decreases exponentially\n \n-    void trackPackageRemoved(const CFeeRate& rate);\n+    void trackPackageRemoved(const CFeeRate& rate) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n \n@@ -512,7 +512,7 @@ class CTxMemPool\n     void UpdateParent(txiter entry, txiter parent, bool add);\n     void UpdateChild(txiter entry, txiter child, bool add);\n \n-    std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const;\n+    std::vector<indexed_transaction_set::const_iterator> GetSortedDepthAndScore() const EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n public:\n     indirectmap<COutPoint, const CTransaction*> mapNextTx;\n@@ -572,7 +572,7 @@ class CTxMemPool\n      *  Set updateDescendants to true when removing a tx that was in a block, so\n      *  that any in-mempool descendants have their ancestor state updated.\n      */\n-    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN);\n+    void RemoveStaged(setEntries &stage, bool updateDescendants, MemPoolRemovalReason reason = MemPoolRemovalReason::UNKNOWN) EXCLUSIVE_LOCKS_REQUIRED(cs);\n \n     /** When adding transactions from a disconnected block back to the mempool,\n      *  new mempool entries may have children in the mempool (which is generally"
      },
      {
        "sha": "89afcc953e0b63df1bcac26f3c75bede4af0b15e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -31,7 +31,6 @@\n #include <timedata.h>\n #include <tinyformat.h>\n #include <txdb.h>\n-#include <txmempool.h>\n #include <ui_interface.h>\n #include <undo.h>\n #include <util.h>\n@@ -171,7 +170,7 @@ class CChainState {\n \n     // Manual block validity manipulation:\n     bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n-    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+    bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool ResetBlockFailureFlags(CBlockIndex *pindex);\n \n     bool ReplayBlocks(const CChainParams& params, CCoinsView* view);\n@@ -452,7 +451,7 @@ std::string FormatStateMessage(const CValidationState &state)\n         state.GetRejectCode());\n }\n \n-static bool IsCurrentForFeeEstimation()\n+static bool IsCurrentForFeeEstimation() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     if (IsInitialBlockDownload())\n@@ -477,7 +476,7 @@ static bool IsCurrentForFeeEstimation()\n  * and instead just erase from the mempool as needed.\n  */\n \n-void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool)\n+static void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool fAddToMempool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     std::vector<uint256> vHashUpdate;\n@@ -519,7 +518,7 @@ void UpdateMempoolForReorg(DisconnectedBlockTransactions &disconnectpool, bool f\n // Used to avoid mempool polluting consensus critical paths if CCoinsViewMempool\n // were somehow broken and returning the wrong scriptPubKeys\n static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationState& state, const CCoinsViewCache& view, const CTxMemPool& pool,\n-                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) {\n+                 unsigned int flags, bool cacheSigStore, PrecomputedTransactionData& txdata) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     // pool.cs should be locked already, but go ahead and re-take the lock here\n@@ -554,7 +553,7 @@ static bool CheckInputsFromMempoolAndCache(const CTransaction& tx, CValidationSt\n \n static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool& pool, CValidationState& state, const CTransactionRef& ptx,\n                               bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept)\n+                              bool bypass_limits, const CAmount& nAbsurdFee, std::vector<COutPoint>& coins_to_uncache, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CTransaction& tx = *ptx;\n     const uint256 hash = tx.GetHash();\n@@ -989,7 +988,7 @@ static bool AcceptToMemoryPoolWorker(const CChainParams& chainparams, CTxMemPool\n /** (try to) add transaction to memory pool with a specified acceptance time **/\n static bool AcceptToMemoryPoolWithTime(const CChainParams& chainparams, CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, int64_t nAcceptTime, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept)\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     std::vector<COutPoint> coins_to_uncache;\n     bool res = AcceptToMemoryPoolWorker(chainparams, pool, state, tx, pfMissingInputs, nAcceptTime, plTxnReplaced, bypass_limits, nAbsurdFee, coins_to_uncache, test_accept);\n@@ -1202,7 +1201,7 @@ static void AlertNotify(const std::string& strMessage)\n     t.detach(); // thread runs free\n }\n \n-static void CheckForkWarningConditions()\n+static void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Before we get past initial download, we cannot reliably alert about forks\n@@ -1243,7 +1242,7 @@ static void CheckForkWarningConditions()\n     }\n }\n \n-static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n+static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // If we are on a fork that is sufficiently large, set a warning flag\n@@ -1276,7 +1275,7 @@ static void CheckForkWarningConditionsOnNewFork(CBlockIndex* pindexNewForkTip)\n     CheckForkWarningConditions();\n }\n \n-void static InvalidChainFound(CBlockIndex* pindexNew)\n+void static InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!pindexBestInvalid || pindexNew->nChainWork > pindexBestInvalid->nChainWork)\n         pindexBestInvalid = pindexNew;\n@@ -1292,7 +1291,7 @@ void static InvalidChainFound(CBlockIndex* pindexNew)\n     CheckForkWarningConditions();\n }\n \n-void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) {\n+void CChainState::InvalidBlockFound(CBlockIndex *pindex, const CValidationState &state) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     if (!state.CorruptionPossible()) {\n         pindex->nStatus |= BLOCK_FAILED_VALID;\n         m_failed_blocks.insert(pindex);\n@@ -1363,7 +1362,7 @@ void InitScriptExecutionCache() {\n  *\n  * Non-static (and re-declared) in src/test/txvalidationcache_tests.cpp\n  */\n-bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks)\n+bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsViewCache &inputs, bool fScriptChecks, unsigned int flags, bool cacheSigStore, bool cacheFullScriptStore, PrecomputedTransactionData& txdata, std::vector<CScriptCheck> *pvChecks) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     if (!tx.IsCoinBase())\n     {\n@@ -1749,7 +1748,7 @@ static bool IsScriptWitnessEnabled(const Consensus::Params& params)\n     return params.vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0;\n }\n \n-static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) {\n+static unsigned int GetBlockScriptFlags(const CBlockIndex* pindex, const Consensus::Params& consensusparams) EXCLUSIVE_LOCKS_REQUIRED(cs_main) {\n     AssertLockHeld(cs_main);\n \n     unsigned int flags = SCRIPT_VERIFY_NONE;\n@@ -1809,7 +1808,7 @@ static int64_t nBlocksTotal = 0;\n  *  Validity checks that depend on the UTXO set are also done; ConnectBlock()\n  *  can fail if those validity checks fail (among other reasons). */\n bool CChainState::ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pindex,\n-                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck)\n+                  CCoinsViewCache& view, const CChainParams& chainparams, bool fJustCheck) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     assert(pindex);\n@@ -2428,7 +2427,7 @@ class ConnectTrace {\n  *\n  * The block is added to connectTrace if connection succeeds.\n  */\n-bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool)\n+bool CChainState::ConnectTip(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexNew, const std::shared_ptr<const CBlock>& pblock, ConnectTrace& connectTrace, DisconnectedBlockTransactions &disconnectpool) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     assert(pindexNew->pprev == chainActive.Tip());\n     // Read block from disk.\n@@ -2557,7 +2556,7 @@ void CChainState::PruneBlockIndexCandidates() {\n  * Try to make some progress towards making pindexMostWork the active block.\n  * pblock is either nullptr or a pointer to a CBlock corresponding to pindexMostWork.\n  */\n-bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace)\n+bool CChainState::ActivateBestChainStep(CValidationState& state, const CChainParams& chainparams, CBlockIndex* pindexMostWork, const std::shared_ptr<const CBlock>& pblock, bool& fInvalidFound, ConnectTrace& connectTrace) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     const CBlockIndex *pindexOldTip = chainActive.Tip();\n@@ -2849,6 +2848,7 @@ bool CChainState::InvalidateBlock(CValidationState& state, const CChainParams& c\n     }\n     return true;\n }\n+\n bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) {\n     return g_chainstate.InvalidateBlock(state, chainparams, pindex);\n }\n@@ -3338,7 +3338,7 @@ static bool ContextualCheckBlock(const CBlock& block, CValidationState& state, c\n     return true;\n }\n \n-bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex)\n+bool CChainState::AcceptBlockHeader(const CBlockHeader& block, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     AssertLockHeld(cs_main);\n     // Check for duplicate\n@@ -3440,7 +3440,7 @@ static CDiskBlockPos SaveBlockToDisk(const CBlock& block, int nHeight, const CCh\n }\n \n /** Store block on disk. If dbp is non-nullptr, the file is known to already reside on disk */\n-bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock)\n+bool CChainState::AcceptBlock(const std::shared_ptr<const CBlock>& pblock, CValidationState& state, const CChainParams& chainparams, CBlockIndex** ppindex, bool fRequested, const CDiskBlockPos* dbp, bool* fNewBlock) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     const CBlock& block = *pblock;\n "
      },
      {
        "sha": "1b5a1ab39f6093aec5e11d069613655d81620256",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -17,6 +17,7 @@\n #include <policy/feerate.h>\n #include <script/script_error.h>\n #include <sync.h>\n+#include <txmempool.h>\n #include <versionbits.h>\n \n #include <algorithm>\n@@ -241,7 +242,7 @@ static const uint64_t MIN_DISK_SPACE_FOR_BLOCK_FILES = 550 * 1024 * 1024;\n  * @param[out]  fNewBlock A boolean which is set to indicate if the block was first received via this call\n  * @return True if state.IsValid()\n  */\n-bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock);\n+bool ProcessNewBlock(const CChainParams& chainparams, const std::shared_ptr<const CBlock> pblock, bool fForceProcessing, bool* fNewBlock) LOCKS_EXCLUDED(cs_main);\n \n /**\n  * Process incoming block headers.\n@@ -280,7 +281,7 @@ bool IsInitialBlockDownload();\n /** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256& hash, CTransactionRef& tx, const Consensus::Params& params, uint256& hashBlock, bool fAllowSlow = false, CBlockIndex* blockIndex = nullptr);\n /** Find the best known block, and make it the tip of the block chain */\n-bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>());\n+bool ActivateBestChain(CValidationState& state, const CChainParams& chainparams, std::shared_ptr<const CBlock> pblock = std::shared_ptr<const CBlock>()) LOCKS_EXCLUDED(cs_main);\n CAmount GetBlockSubsidy(int nHeight, const Consensus::Params& consensusParams);\n \n /** Guess verification progress (as a fraction between 0.0=genesis and 1.0=current tip). */\n@@ -310,7 +311,7 @@ void PruneBlockFilesManual(int nManualPruneHeight);\n  * plTxnReplaced will be appended to with all transactions replaced from mempool **/\n bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransactionRef &tx,\n                         bool* pfMissingInputs, std::list<CTransactionRef>* plTxnReplaced,\n-                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false);\n+                        bool bypass_limits, const CAmount nAbsurdFee, bool test_accept=false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Convert CValidationState to a human-readable message for logging */\n std::string FormatStateMessage(const CValidationState &state);\n@@ -337,12 +338,12 @@ void UpdateCoins(const CTransaction& tx, CCoinsViewCache& inputs, int nHeight);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckFinalTx(const CTransaction &tx, int flags = -1);\n+bool CheckFinalTx(const CTransaction &tx, int flags = -1) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Test whether the LockPoints height and time are still valid on the current chain\n  */\n-bool TestLockPointValidity(const LockPoints* lp);\n+bool TestLockPointValidity(const LockPoints* lp) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Check if transaction will be BIP 68 final in the next block to be created.\n@@ -355,7 +356,7 @@ bool TestLockPointValidity(const LockPoints* lp);\n  *\n  * See consensus/consensus.h for flag definitions.\n  */\n-bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false);\n+bool CheckSequenceLocks(const CTransaction &tx, int flags, LockPoints* lp = nullptr, bool useExistingLockPoints = false) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /**\n  * Closure representing one script verification\n@@ -406,7 +407,7 @@ bool ReadBlockFromDisk(CBlock& block, const CBlockIndex* pindex, const Consensus\n bool CheckBlock(const CBlock& block, CValidationState& state, const Consensus::Params& consensusParams, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n \n /** Check a block is completely valid from start to finish (only works on top of our current best block, with cs_main held) */\n-bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true);\n+bool TestBlockValidity(CValidationState& state, const CChainParams& chainparams, const CBlock& block, CBlockIndex* pindexPrev, bool fCheckPOW = true, bool fCheckMerkleRoot = true) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** Check whether witness commitments are required for block. */\n bool IsWitnessEnabled(const CBlockIndex* pindexPrev, const Consensus::Params& params);\n@@ -448,10 +449,10 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs);\n \n /** Remove invalidity status from a block and its descendants. */\n-bool ResetBlockFailureFlags(CBlockIndex *pindex);\n+bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n /** The currently-connected chain of blocks (protected by cs_main). */\n extern CChain& chainActive;"
      },
      {
        "sha": "cadb1a13b2f46b9c4beb3c375af7d274d4fa8736",
        "filename": "src/validationinterface.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validationinterface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validationinterface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -8,7 +8,6 @@\n #include <init.h>\n #include <primitives/block.h>\n #include <scheduler.h>\n-#include <sync.h>\n #include <txmempool.h>\n #include <util.h>\n #include <validation.h>"
      },
      {
        "sha": "ba111db3df6f660da165d66d91c61e260ccd81ef",
        "filename": "src/validationinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validationinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/validationinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validationinterface.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -7,10 +7,12 @@\n #define BITCOIN_VALIDATIONINTERFACE_H\n \n #include <primitives/transaction.h> // CTransaction(Ref)\n+#include <sync.h>\n \n #include <functional>\n #include <memory>\n \n+extern CCriticalSection cs_main;\n class CBlock;\n class CBlockIndex;\n struct CBlockLocator;\n@@ -51,7 +53,7 @@ void CallFunctionInValidationInterfaceQueue(std::function<void ()> func);\n  *     });\n  *     promise.get_future().wait();\n  */\n-void SyncWithValidationInterfaceQueue();\n+void SyncWithValidationInterfaceQueue() LOCKS_EXCLUDED(cs_main);\n \n class CValidationInterface {\n protected:"
      },
      {
        "sha": "6f8e488f66d4d1390db5d741dd19a599c30b5be7",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -18,7 +18,7 @@\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors)\n+static feebumper::Result PreconditionChecks(const CWallet* wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(cs_main, wallet->cs_wallet)\n {\n     if (wallet->HasWalletSpend(wtx.GetHash())) {\n         errors.push_back(\"Transaction has descendants in the wallet\");"
      },
      {
        "sha": "fcf21631f64461d751508b410f73b21e5dc4ed67",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -210,8 +210,8 @@ UniValue abortrescan(const JSONRPCRequest& request)\n     return true;\n }\n \n-void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n-void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript)\n+static void ImportAddress(CWallet*, const CTxDestination& dest, const std::string& strLabel);\n+static void ImportScript(CWallet* const pwallet, const CScript& script, const std::string& strLabel, bool isRedeemScript) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     if (!isRedeemScript && ::IsMine(*pwallet, script) == ISMINE_SPENDABLE) {\n         throw JSONRPCError(RPC_WALLET_ERROR, \"The wallet already contains the private key for this address or script\");\n@@ -236,7 +236,7 @@ void ImportScript(CWallet* const pwallet, const CScript& script, const std::stri\n     }\n }\n \n-void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel)\n+static void ImportAddress(CWallet* const pwallet, const CTxDestination& dest, const std::string& strLabel) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     CScript script = GetScriptForDestination(dest);\n     ImportScript(pwallet, script, strLabel, false);\n@@ -811,7 +811,7 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n }\n \n \n-UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp)\n+static UniValue ProcessImport(CWallet * const pwallet, const UniValue& data, const int64_t timestamp) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         bool success = false;"
      },
      {
        "sha": "9beba00f21c56eac666679a0a644b2b572190656",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -86,7 +86,7 @@ void EnsureWalletIsUnlocked(CWallet * const pwallet)\n     }\n }\n \n-void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry)\n+static void WalletTxToJSON(const CWalletTx& wtx, UniValue& entry) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     int confirms = wtx.GetDepthInMainChain();\n     entry.pushKV(\"confirmations\", confirms);\n@@ -1497,7 +1497,7 @@ struct tallyitem\n     }\n };\n \n-UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label)\n+static UniValue ListReceived(CWallet * const pwallet, const UniValue& params, bool by_label) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // Minimum confirmations\n     int nMinDepth = 1;\n@@ -1764,7 +1764,7 @@ static void MaybePushAddress(UniValue & entry, const CTxDestination &dest)\n  * @param  ret        The UniValue into which the result is stored.\n  * @param  filter     The \"is mine\" filter bool.\n  */\n-void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter)\n+static void ListTransactions(CWallet* const pwallet, const CWalletTx& wtx, const std::string& strAccount, int nMinDepth, bool fLong, UniValue& ret, const isminefilter& filter) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     CAmount nFee;\n     std::string strSentAccount;"
      },
      {
        "sha": "5a004633578636f79f73cdd5ed8d97b28f35765f",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -4285,7 +4285,7 @@ int CMerkleTx::GetBlocksToMaturity() const\n }\n \n \n-bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state)\n+bool CWalletTx::AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main)\n {\n     // We must set fInMempool here - while it will be re-set to true by the\n     // entered-mempool callback, if we did not there would be a race where a"
      },
      {
        "sha": "b57add2a82904a52b2fbf8b88138f5cb82119793",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 48,
        "deletions": 48,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -247,10 +247,10 @@ class CMerkleTx\n      *  0  : in memory pool, waiting to be included in a block\n      * >=1 : this many blocks deep in the main chain\n      */\n-    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const;\n-    int GetDepthInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n-    bool IsInMainChain() const { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n-    int GetBlocksToMaturity() const;\n+    int GetDepthInMainChain(const CBlockIndex* &pindexRet) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    int GetDepthInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet); }\n+    bool IsInMainChain() const EXCLUSIVE_LOCKS_REQUIRED(cs_main) { const CBlockIndex *pindexRet; return GetDepthInMainChain(pindexRet) > 0; }\n+    int GetBlocksToMaturity() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     bool hashUnset() const { return (hashBlock.IsNull() || hashBlock == ABANDON_HASH); }\n     bool isAbandoned() const { return (hashBlock == ABANDON_HASH); }\n     void setAbandoned() { hashBlock = ABANDON_HASH; }\n@@ -437,11 +437,11 @@ class CWalletTx : public CMerkleTx\n \n     //! filter decides which addresses will count towards the debit\n     CAmount GetDebit(const isminefilter& filter) const;\n-    CAmount GetCredit(const isminefilter& filter) const;\n-    CAmount GetImmatureCredit(bool fUseCache=true) const;\n-    CAmount GetAvailableCredit(bool fUseCache=true) const;\n-    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const;\n-    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const;\n+    CAmount GetCredit(const isminefilter& filter) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetImmatureCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableCredit(bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetImmatureWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+    CAmount GetAvailableWatchOnlyCredit(const bool fUseCache=true) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetChange() const;\n \n     // Get the marginal bytes if spending the specified output from this transaction\n@@ -462,16 +462,16 @@ class CWalletTx : public CMerkleTx\n     bool IsEquivalentTo(const CWalletTx& tx) const;\n \n     bool InMempool() const;\n-    bool IsTrusted() const;\n+    bool IsTrusted() const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     int64_t GetTxTime() const;\n     int GetRequestCount() const;\n \n     // RelayWalletTransaction may only be called if fBroadcastTransactions!\n-    bool RelayWalletTransaction(CConnman* connman);\n+    bool RelayWalletTransaction(CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Pass this transaction to the mempool. Fails if absolute fee exceeds absurd fee. */\n-    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state);\n+    bool AcceptToMemoryPool(const CAmount& nAbsurdFee, CValidationState& state) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::set<uint256> GetConflicts() const;\n };\n@@ -689,13 +689,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     /* Used by TransactionAddedToMemorypool/BlockConnected/Disconnected.\n      * Should be called with pindexBlock and posInBlock if this is for a transaction that is included in a block. */\n-    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0);\n+    void SyncTransaction(const CTransactionRef& tx, const CBlockIndex *pindex = nullptr, int posInBlock = 0) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /* the HD chain data model (external chain counters) */\n     CHDChain hdChain;\n \n     /* HD derive new child key (on internal or external chain) */\n-    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false);\n+    void DeriveNewChildKey(WalletBatch &batch, CKeyMetadata& metadata, CKey& secret, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     std::set<int64_t> setInternalKeyPool;\n     std::set<int64_t> setExternalKeyPool;\n@@ -713,7 +713,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * of the other AddWatchOnly which accepts a timestamp and sets\n      * nTimeFirstKey more intelligently for more efficient rescans.\n      */\n-    bool AddWatchOnly(const CScript& dest) override;\n+    bool AddWatchOnly(const CScript& dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Wallet filename from wallet=<path> command line or config option.\n@@ -764,7 +764,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      */\n     const std::string& GetName() const { return m_name; }\n \n-    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool);\n+    void LoadKeyPool(int64_t nIndex, const CKeyPool &keypool) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     // Map from Key ID to key metadata.\n     std::map<CKeyID, CKeyMetadata> mapKeyMetadata;\n@@ -805,12 +805,12 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     const CWalletTx* GetWalletTx(const uint256& hash) const;\n \n     //! check whether we are allowed to upgrade (or already support) to the named feature\n-    bool CanSupportFeature(enum WalletFeature wf) const { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n+    bool CanSupportFeature(enum WalletFeature wf) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); return nWalletMaxVersion >= wf; }\n \n     /**\n      * populate vCoins with vector of available COutputs.\n      */\n-    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const;\n+    void AvailableCoins(std::vector<COutput>& vCoins, bool fOnlySafe=true, const CCoinControl *coinControl = nullptr, const CAmount& nMinimumAmount = 1, const CAmount& nMaximumAmount = MAX_MONEY, const CAmount& nMinimumSumAmount = MAX_MONEY, const uint64_t nMaximumCount = 0, const int nMinDepth = 0, const int nMaxDepth = 9999999) const EXCLUSIVE_LOCKS_REQUIRED(cs_main, cs_wallet);\n \n     /**\n      * Return list of available coins and locked coins grouped by non-change output address.\n@@ -831,13 +831,13 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool SelectCoinsMinConf(const CAmount& nTargetValue, const CoinEligibilityFilter& eligibility_filter, std::vector<COutput> vCoins,\n         std::set<CInputCoin>& setCoinsRet, CAmount& nValueRet, const CoinSelectionParams& coin_selection_params, bool& bnb_used) const;\n \n-    bool IsSpent(const uint256& hash, unsigned int n) const;\n+    bool IsSpent(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool IsLockedCoin(uint256 hash, unsigned int n) const;\n-    void LockCoin(const COutPoint& output);\n-    void UnlockCoin(const COutPoint& output);\n-    void UnlockAllCoins();\n-    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const;\n+    bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void UnlockAllCoins() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    void ListLockedCoins(std::vector<COutPoint>& vOutpts) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /*\n      * Rescan abort properties\n@@ -850,18 +850,18 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * keystore implementation\n      * Generate a new key\n      */\n-    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false);\n+    CPubKey GenerateNewKey(WalletBatch& batch, bool internal = false) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, and saves it to disk.\n-    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override;\n-    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey);\n+    bool AddKeyPubKey(const CKey& key, const CPubKey &pubkey) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool AddKeyPubKeyWithDB(WalletBatch &batch,const CKey& key, const CPubKey &pubkey) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a key to the store, without saving it to disk (used by LoadWallet)\n     bool LoadKey(const CKey& key, const CPubKey &pubkey) { return CCryptoKeyStore::AddKeyPubKey(key, pubkey); }\n     //! Load metadata (used by LoadWallet)\n-    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata);\n-    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata);\n+    bool LoadKeyMetadata(const CKeyID& keyID, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool LoadScriptMetadata(const CScriptID& script_id, const CKeyMetadata &metadata) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    bool LoadMinVersion(int nVersion) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n-    void UpdateTimeFirstKey(int64_t nCreateTime);\n+    bool LoadMinVersion(int nVersion) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet) { AssertLockHeld(cs_wallet); nWalletVersion = nVersion; nWalletMaxVersion = std::max(nWalletMaxVersion, nVersion); return true; }\n+    void UpdateTimeFirstKey(int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Adds an encrypted key to the store, and saves it to disk.\n     bool AddCryptedKey(const CPubKey &vchPubKey, const std::vector<unsigned char> &vchCryptedSecret) override;\n@@ -882,8 +882,8 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::vector<std::string> GetDestValues(const std::string& prefix) const;\n \n     //! Adds a watch-only address to the store, and saves it to disk.\n-    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime);\n-    bool RemoveWatchOnly(const CScript &dest) override;\n+    bool AddWatchOnly(const CScript& dest, int64_t nCreateTime) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    bool RemoveWatchOnly(const CScript &dest) override EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     //! Adds a watch-only address to the store, without saving it to disk (used by LoadWallet)\n     bool LoadWatchOnly(const CScript &dest);\n \n@@ -894,16 +894,16 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n-    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const;\n+    void GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     unsigned int ComputeTimeSmart(const CWalletTx& wtx) const;\n \n     /**\n      * Increment the next transaction order id\n      * @return next transaction order id\n      */\n-    int64_t IncOrderPosNext(WalletBatch *batch = nullptr);\n+    int64_t IncOrderPosNext(WalletBatch *batch = nullptr) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     DBErrors ReorderTransactions();\n-    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\");\n+    bool AccountMove(std::string strFrom, std::string strTo, CAmount nAmount, std::string strComment = \"\") EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool GetLabelDestination(CTxDestination &dest, const std::string& label, bool bForceNew = false);\n \n     void MarkDirty();\n@@ -912,14 +912,14 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     void TransactionAddedToMempool(const CTransactionRef& tx) override;\n     void BlockConnected(const std::shared_ptr<const CBlock>& pblock, const CBlockIndex *pindex, const std::vector<CTransactionRef>& vtxConflicted) override;\n     void BlockDisconnected(const std::shared_ptr<const CBlock>& pblock) override;\n-    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate);\n+    bool AddToWalletIfInvolvingMe(const CTransactionRef& tx, const CBlockIndex* pIndex, int posInBlock, bool fUpdate) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     int64_t RescanFromTime(int64_t startTime, const WalletRescanReserver& reserver, bool update);\n     CBlockIndex* ScanForWalletTransactions(CBlockIndex* pindexStart, CBlockIndex* pindexStop, const WalletRescanReserver& reserver, bool fUpdate = false);\n     void TransactionRemovedFromMempool(const CTransactionRef &ptx) override;\n     void ReacceptWalletTransactions();\n-    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override;\n+    void ResendWalletTransactions(int64_t nBestBlockTime, CConnman* connman) override EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     // ResendWalletTransactionsBefore may only be called if fBroadcastTransactions!\n-    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman);\n+    std::vector<uint256> ResendWalletTransactionsBefore(int64_t nTime, CConnman* connman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     CAmount GetBalance() const;\n     CAmount GetUnconfirmedBalance() const;\n     CAmount GetImmatureBalance() const;\n@@ -936,7 +936,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * calling CreateTransaction();\n      */\n     bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n-    bool SignTransaction(CMutableTransaction& tx);\n+    bool SignTransaction(CMutableTransaction& tx) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     /**\n      * Create a new transaction paying the recipients with a set of coins\n@@ -976,7 +976,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     OutputType m_default_change_type{OutputType::NONE}; // Default to OutputType::NONE if not set by -changetype\n \n     bool NewKeyPool();\n-    size_t KeypoolCountExternalKeys();\n+    size_t KeypoolCountExternalKeys() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     bool TopUpKeyPool(unsigned int kpSize = 0);\n     void ReserveKeyFromKeyPool(int64_t& nIndex, CKeyPool& keypool, bool fRequestedInternal);\n     void KeepKey(int64_t nIndex);\n@@ -986,11 +986,11 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     /**\n      * Marks all keys in the keypool up to and including reserve_key as used.\n      */\n-    void MarkReserveKeysAsUsed(int64_t keypool_id);\n+    void MarkReserveKeysAsUsed(int64_t keypool_id) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     const std::map<CKeyID, int64_t>& GetAllReserveKeys() const { return m_pool_key_to_index; }\n \n-    std::set< std::set<CTxDestination> > GetAddressGroupings();\n-    std::map<CTxDestination, CAmount> GetAddressBalances();\n+    std::set<std::set<CTxDestination>> GetAddressGroupings() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n+    std::map<CTxDestination, CAmount> GetAddressBalances() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     std::set<CTxDestination> GetLabelAddresses(const std::string& label) const;\n     void DeleteLabel(const std::string& label);\n@@ -1017,7 +1017,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     DBErrors LoadWallet(bool& fFirstRunRet);\n     DBErrors ZapWalletTx(std::vector<CWalletTx>& vWtx);\n-    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n+    DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     bool SetAddressBook(const CTxDestination& address, const std::string& strName, const std::string& purpose);\n \n@@ -1037,7 +1037,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n \n     void GetScriptForMining(std::shared_ptr<CReserveScript> &script);\n \n-    unsigned int GetKeyPoolSize()\n+    unsigned int GetKeyPoolSize() EXCLUSIVE_LOCKS_REQUIRED(cs_wallet)\n     {\n         AssertLockHeld(cs_wallet); // set{Ex,In}ternalKeyPool\n         return setInternalKeyPool.size() + setExternalKeyPool.size();\n@@ -1056,7 +1056,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n     std::set<uint256> GetConflicts(const uint256& txid) const;\n \n     //! Check if a given transaction has any of its outputs spent by another transaction in the wallet\n-    bool HasWalletSpend(const uint256& txid) const;\n+    bool HasWalletSpend(const uint256& txid) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n@@ -1130,7 +1130,7 @@ class CWallet final : public CCryptoKeyStore, public CValidationInterface\n      * Obviously holding cs_main/cs_wallet when going into this call may cause\n      * deadlock\n      */\n-    void BlockUntilSyncedToCurrentChain();\n+    void BlockUntilSyncedToCurrentChain() LOCKS_EXCLUDED(cs_main, cs_wallet);\n \n     /**\n      * Explicitly make the wallet learn the related scripts for outputs to the"
      },
      {
        "sha": "66a50db15d8a07dd986c5b9eb11ceae96d878a92",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0d3b75d59efefa2a640e29334b9205fde74cf080/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=0d3b75d59efefa2a640e29334b9205fde74cf080",
        "patch": "@@ -246,9 +246,9 @@ class CWalletScanState {\n     }\n };\n \n-bool\n+static bool\n ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n-             CWalletScanState &wss, std::string& strType, std::string& strErr)\n+             CWalletScanState &wss, std::string& strType, std::string& strErr) EXCLUSIVE_LOCKS_REQUIRED(pwallet->cs_wallet)\n {\n     try {\n         // Unserialize"
      }
    ]
  },
  {
    "sha": "2e24b5326671cf1168e9847c26c4e01bd048a898",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZTI0YjUzMjY2NzFjZjExNjhlOTg0N2MyNmM0ZTAxYmQwNDhhODk4",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-25T20:20:12Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2018-04-25T20:20:12Z"
      },
      "message": "Use ::mempool.cs instead of mempool.cs to clarify that we are using the global",
      "tree": {
        "sha": "f5556023bbf87bda252d1c426ccc9c9227999212",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f5556023bbf87bda252d1c426ccc9c9227999212"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2e24b5326671cf1168e9847c26c4e01bd048a898",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e24b5326671cf1168e9847c26c4e01bd048a898",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2e24b5326671cf1168e9847c26c4e01bd048a898",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2e24b5326671cf1168e9847c26c4e01bd048a898/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0d3b75d59efefa2a640e29334b9205fde74cf080",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0d3b75d59efefa2a640e29334b9205fde74cf080",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0d3b75d59efefa2a640e29334b9205fde74cf080"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "d9494780b0985ac433767cfe663177fd3dc9f971",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e24b5326671cf1168e9847c26c4e01bd048a898/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e24b5326671cf1168e9847c26c4e01bd048a898/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=2e24b5326671cf1168e9847c26c4e01bd048a898",
        "patch": "@@ -378,7 +378,7 @@ std::string EntryDescriptionString()\n            \"       ... ]\\n\";\n }\n \n-static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+static void entryToJSON(UniValue &info, const CTxMemPoolEntry &e) EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n {\n     AssertLockHeld(mempool.cs);\n \n@@ -1451,7 +1451,7 @@ UniValue preciousblock(const JSONRPCRequest& request)\n     return NullUniValue;\n }\n \n-static UniValue invalidateblock(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)\n+static UniValue invalidateblock(const JSONRPCRequest& request) EXCLUSIVE_LOCKS_REQUIRED(::mempool.cs)\n {\n     if (request.fHelp || request.params.size() != 1)\n         throw std::runtime_error("
      },
      {
        "sha": "de5b32aa957cc6af9b6749444647221ea2961752",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2e24b5326671cf1168e9847c26c4e01bd048a898/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2e24b5326671cf1168e9847c26c4e01bd048a898/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=2e24b5326671cf1168e9847c26c4e01bd048a898",
        "patch": "@@ -449,7 +449,7 @@ CBlockIndex* FindForkInGlobalIndex(const CChain& chain, const CBlockLocator& loc\n bool PreciousBlock(CValidationState& state, const CChainParams& params, CBlockIndex *pindex);\n \n /** Mark a block as invalid. */\n-bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main, mempool.cs);\n+bool InvalidateBlock(CValidationState& state, const CChainParams& chainparams, CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main, ::mempool.cs);\n \n /** Remove invalidity status from a block and its descendants. */\n bool ResetBlockFailureFlags(CBlockIndex *pindex) EXCLUSIVE_LOCKS_REQUIRED(cs_main);"
      }
    ]
  }
]