MarcoFalke,2018-03-11T21:27:01Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372150790,372150790,
practicalswift,2018-03-12T06:59:26Z,@MarcoFalke Updated! Please review :-),https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372210389,372210389,
laanwj,2018-03-13T11:49:13Z,"Concept ACK - Unlike the title implies, not all the added run time checking requirements have an associated AssertLockHeld/AssertLockNotHeld (e.g. CoinSelection) is this on purpose?",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372638788,372638788,
practicalswift,2018-03-13T13:52:03Z,"@laanwj Thanks for reporting. The annotations for `CoinSelection` and two other functions were incorrect. That is now fixed.\n\nThe intention is that literally all `EXCLUSIVE_LOCKS_REQUIRED`/`LOCKS_EXCLUDED`:s added in this PR should follow either directly or indirectly from `AssertLockHeld(…)`/`AssertLockNotHeld(…)`:s already existing in the repo.\n\nConsider the case where function `A(…)` co",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372671990,372671990,
Sjors,2018-03-13T20:57:49Z,"Sadly that still didn't catch my [mistake here](https://github.com/bitcoin/bitcoin/pull/12565/files#r171235800), but I assume this is a step in that direction.\n\nLightly tested on macOS (no change, as expected).\n\n@practicalswift maybe you can put that overview and additional explanation (""directly follows that..."") in the commit message or PR description?\n\nI didn't see a `EXCLUSIVE_LOCK",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372815880,372815880,
meshcollider,2018-03-13T21:11:53Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372819980,372819980,
practicalswift,2018-03-14T09:19:32Z,"@Sjors No intention to repeat annotations :-)  Which specific annotations did you see repeated in `validation.cpp`? Did you check them in the files or just in the summary?\n\nViolations are checked by Travis and cause a Travis build failure if found – see [`configure.ac`](https://github.com/bitcoin/bitcoin/blob/f13d756cdd9445d1478a70c5387df2a444045f6e/configure.ac#L251-L257).",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372954279,372954279,
practicalswift,2018-03-14T09:22:51Z,"@Sjors Did you mean that you didn't see any `AssertLockHeld(…)` in `LoadChainTip`? :-)\n",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-372955186,372955186,
Sjors,2018-03-14T14:10:36Z,"> Which specific annotations did you see repeated in validation.cpp\n\nNone, so that's all good. I just found it slightly confusing that some annotations are in .h files and others in .cpp files.\n\n> Did you mean that you didn't see any `AssertLockHeld(…)` in `LoadChainTip`?\n\nYes, sorry. To more specific, no `AssertLockHeld(mempool.cs)`. But if you're happy and the compiler is happy, I'm ",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373034128,373034128,
practicalswift,2018-03-14T19:59:54Z,"@Sjors The annotations should be in the header files, but not all functions are exported so that's why some annotations end up in the `.h` files.\n\n`LoadChainTip` is annotated with `EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)` since it (indirectly) calls `CheckSequenceLocks` (which contains `AssertLockHeld(mempool.cs)`) without first locking `mempool.cs`.\n\nThe call stack looks like this:\n\n```",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373155264,373155264,
sipa,2018-03-15T01:07:10Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-373226320,373226320,
practicalswift,2018-04-03T11:35:34Z,Rebased!,https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-378219292,378219292,
practicalswift,2018-04-09T08:33:46Z,Rebased again!,https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379676332,379676332,
practicalswift,2018-04-09T08:47:29Z,"@laanwj This PR is a subset of #11226 (closed in favour of smaller locking PR:s). PR #11226 had a 0.17.0 milestone (originally a 0.16.0 milestone actually). Would it be possible to get a 0.17.0 milestone for this PR?\n\nOf the locking PR:s this should be the best candidate for early merge. It contains only locking annotations for which we are already asserting using `AssertLockHeld(…)`. Since th",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379680038,379680038,
practicalswift,2018-04-09T22:43:12Z,Rebase number 3 performed :-),https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-379916459,379916459,
Sjors,2018-04-11T11:18:56Z,"Can confirm 9d3e5374e30cd2b1c04c0bb45da24236eb3b2b37 still compiles on macOS.\n\n@TheBlueMatt and @promag recently worked on concurrency related bugs in `init.cpp`, so they might be able to review.",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-380416864,380416864,
practicalswift,2018-04-22T09:44:48Z,Rebase number 4 performed :-)  Please review :-),https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-383368594,383368594,
practicalswift,2018-04-22T09:53:16Z,@laanwj This PR is getting a bit heavy to keep up-to-date. Do you think this PR has a chance of getting a 0.17.0 milestone (like #11226 had before getting closed in favour of this and other smaller PR:s)? :-),https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-383368975,383368975,
practicalswift,2018-04-24T22:06:37Z,"@MarcoFalke Updated. I've now tried to address your feedback. Turns out that I was a bit too strict with the locking requirements for `mempool.cs`, so the updated diff is significantly smaller and hopefully easier to review. Please re-review :-)",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-384095381,384095381,
MarcoFalke,2018-04-25T18:56:19Z,"utACK (could use `::mempool.cs` instead of `mempool.cs`, since it is referring to the global, I guess)\n\nAlso, you could split up the `cs_wallet` and `::mempool.cs` into two separate prs. I have the feeling it is easier to get stuff in that only touches a single ""module"".",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-384396842,384396842,
practicalswift,2018-04-25T21:41:28Z,"@MarcoFalke Thanks for the utACK!\n\n\nAdded a commit which changed from `mempool.cs` to `::mempool.cs`.\n\nI've now split up this PR into four separate PRs – one per lock:\n* `cs_KeyStore`: #13077\n* `::mempool.cs`: #13080\n* `cs_wallet`: #13081\n* `cs_main`: #13083\n\nPlease review these four :-)",https://github.com/bitcoin/bitcoin/pull/12665#issuecomment-384443430,384443430,
MarcoFalke,2018-03-11T21:26:00Z,This 1 line diff should be a separate pull request,https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173670354,173670354,src/txmempool.cpp
practicalswift,2018-03-11T22:31:23Z,"That assertion does not seem to hold, so I think it should be removed. I'll investigate.",https://github.com/bitcoin/bitcoin/pull/12665#discussion_r173672583,173672583,src/txmempool.cpp
MarcoFalke,2018-04-22T12:57:35Z,"I fail to see how this could compile, since we never `LOCK(mempool.cs)` before calling into this, no?",https://github.com/bitcoin/bitcoin/pull/12665#discussion_r183235850,183235850,src/rpc/rawtransaction.cpp
MarcoFalke,2018-04-22T12:58:01Z,Same here,https://github.com/bitcoin/bitcoin/pull/12665#discussion_r183235863,183235863,src/test/miner_tests.cpp
MarcoFalke,2018-04-22T12:59:21Z,"It seem the lock is taken here, but you require `EXCLUSIVE_LOCKS_REQUIRED(mempool.cs)`",https://github.com/bitcoin/bitcoin/pull/12665#discussion_r183235900,183235900,src/txmempool.cpp
MarcoFalke,2018-04-22T13:00:22Z,What about adding `static` to functions that have their lock annotations added in the cpp file and not in the header?,https://github.com/bitcoin/bitcoin/pull/12665#discussion_r183235928,183235928,src/validation.cpp
