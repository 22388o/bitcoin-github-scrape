[
  {
    "sha": "87b9931bed5ec6633348ac506f0e9b5a96446df8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4N2I5OTMxYmVkNWVjNjYzMzM0OGFjNTA2ZjBlOWI1YTk2NDQ2ZGY4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-07T17:38:25Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T18:04:21Z"
      },
      "message": "Fix signed/unsigned comparison warnings",
      "tree": {
        "sha": "9c18dd857082fecc140261a40961d94611f3c2ac",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9c18dd857082fecc140261a40961d94611f3c2ac"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/87b9931bed5ec6633348ac506f0e9b5a96446df8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b9931bed5ec6633348ac506f0e9b5a96446df8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/87b9931bed5ec6633348ac506f0e9b5a96446df8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b9931bed5ec6633348ac506f0e9b5a96446df8/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36fdfb989e383324b00e250040aadaeb8286256b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36fdfb989e383324b00e250040aadaeb8286256b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36fdfb989e383324b00e250040aadaeb8286256b"
      }
    ],
    "stats": {
      "total": 88,
      "additions": 44,
      "deletions": 44
    },
    "files": [
      {
        "sha": "196b7274f42eebb1f75a1ebbaedbf3810d123a17",
        "filename": "src/test/bignum_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/bignum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/bignum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/bignum_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -128,51 +128,51 @@ BOOST_AUTO_TEST_CASE(bignum_SetCompact)\n     CBigNum num;\n     num.SetCompact(0);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n \n     num.SetCompact(0x00123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"0\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0U);\n \n     num.SetCompact(0x01123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"12\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01120000);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01120000U);\n \n     // Make sure that we don't generate compacts with the 0x00800000 bit set\n     num = 0x80;\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02008000);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02008000U);\n \n     num.SetCompact(0x01fedcba);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"-7e\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01fe0000);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x01fe0000U);\n \n     num.SetCompact(0x02123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"1234\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02123400);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x02123400U);\n \n     num.SetCompact(0x03123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"123456\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x03123456);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x03123456U);\n \n     num.SetCompact(0x04123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"12345600\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04123456);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04123456U);\n \n     num.SetCompact(0x04923456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"-12345600\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04923456);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x04923456U);\n \n     num.SetCompact(0x05009234);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"92340000\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x05009234);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x05009234U);\n \n     num.SetCompact(0x20123456);\n     BOOST_CHECK_EQUAL(num.GetHex(), \"1234560000000000000000000000000000000000000000000000000000000000\");\n-    BOOST_CHECK_EQUAL(num.GetCompact(), 0x20123456);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0x20123456U);\n \n     num.SetCompact(0xff123456);\n     BOOST_CHECK_EQUAL(num.GetHexn-    BOOST_CHECK_EQUAL(num.GetCompact(), 0xff123456);\n+    BOOST_CHECK_EQUAL(num.GetCompact(), 0xff123456U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "d6f836d3674b1789917c0d4af11ecdcaea4b4624",
        "filename": "src/test/multisig_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/multisig_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/multisig_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/multisig_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -216,7 +216,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CScript s;\n         s << OP_2 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4);\n+        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         CTxDestination addr;\n         BOOST_CHECK(!ExtractDestination(s, addr));\n         BOOST_CHECK(IsMine(keystore, s));\n@@ -229,7 +229,7 @@ BOOST_AUTO_TEST_CASE(multisig_Solver1)\n         CScript s;\n         s << OP_1 << key[0].GetPubKey() << key[1].GetPubKey() << OP_2 << OP_CHECKMULTISIG;\n         BOOST_CHECK(Solver(s, whichType, solutions));\n-        BOOST_CHECK_EQUAL(solutions.size(), 4);\n+        BOOST_CHECK_EQUAL(solutions.size(), 4U);\n         vector<CTxDestination> addrs;\n         int nRequired;\n         BOOST_CHECK(ExtractDestinations(s, whichType, addrs, nRequired));"
      },
      {
        "sha": "3444726ca07dfd117fd3c31ee7b40966499a5616",
        "filename": "src/test/script_P2SH_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/script_P2SH_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/script_P2SH_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_P2SH_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -303,7 +303,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     BOOST_CHECK(SignSignature(keystore, txFrom, txTo, 2));\n \n     BOOST_CHECK(txTo.AreInputsStandard(coins));\n-    BOOST_CHECK_EQUAL(txTo.GetP2SHSigOpCount(coins), 1);\n+    BOOST_CHECK_EQUAL(txTo.GetP2SHSigOpCount(coins), 1U);\n \n     // Make sure adding crap to the scriptSigs makes them non-standard:\n     for (int i = 0; i < 3; i++)\n@@ -327,7 +327,7 @@ BOOST_AUTO_TEST_CASE(AreInputsStandard)\n     txToNonStd.vin[1].scriptSig << OP_0 << Serialize(oneOfEleven);\n \n     BOOST_CHECK(!txToNonStd.AreInputsStandard(coins));\n-    BOOST_CHECK_EQUAL(txToNonStd.GetP2SHSigOpCount(coins), 11);\n+    BOOST_CHECK_EQUAL(txToNonStd.GetP2SHSigOpCount(coins), 11U);\n \n     txToNonStd.vin[0].scriptSig.clear();\n     BOOST_CHECK(!txToNonStd.AreInputsStandard(coins));"
      },
      {
        "sha": "19ffdcab664fcff73f2bee65ee453a6ee2eefc87",
        "filename": "src/test/serialize_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/serialize_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/serialize_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/serialize_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -29,13 +29,13 @@ BOOST_AUTO_TEST_CASE(varints)\n \n     // decode\n     for (int i = 0; i < 100000; i++) {\n-        int j;\n+        int j = -1;\n         ss >> VARINT(j);\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }\n \n     for (uint64 i = 0;  i < 100000000000ULL; i += 999999937) {\n-        uint64 j;\n+        uint64 j = -1;\n         ss >> VARINT(j);\n         BOOST_CHECK_MESSAGE(i == j, \"decoded:\" << j << \" expected:\" << i);\n     }"
      },
      {
        "sha": "1762680adf0de27b45a5f461a8795325b85cac22",
        "filename": "src/test/sigopcount_tests.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/sigopcount_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/sigopcount_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/sigopcount_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -21,21 +21,21 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n {\n     // Test CScript::GetSigOpCount()\n     CScript s1;\n-    BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0);\n-    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0);\n+    BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 0U);\n+    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 0U);\n \n     uint160 dummy;\n     s1 << OP_1 << dummy << dummy << OP_2 << OP_CHECKMULTISIG;\n-    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2);\n+    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 2U);\n     s1 << OP_IF << OP_CHECKSIG << OP_ENDIF;\n-    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3);\n-    BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21);\n+    BOOST_CHECK_EQUAL(s1.GetSigOpCount(true), 3U);\n+    BOOST_CHECK_EQUAL(s1.GetSigOpCount(false), 21U);\n \n     CScript p2sh;\n     p2sh.SetDestination(s1.GetID());\n     CScript scriptSig;\n     scriptSig << OP_0 << Serialize(s1);\n-    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3);\n+    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig), 3U);\n \n     std::vector<CKey> keys;\n     for (int i = 0; i < 3; i++)\n@@ -46,15 +46,15 @@ BOOST_AUTO_TEST_CASE(GetSigOpCount)\n     }\n     CScript s2;\n     s2.SetMultisig(1, keys);\n-    BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3);\n-    BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20);\n+    BOOST_CHECK_EQUAL(s2.GetSigOpCount(true), 3U);\n+    BOOST_CHECK_EQUAL(s2.GetSigOpCount(false), 20U);\n \n     p2sh.SetDestination(s2.GetID());\n-    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0);\n-    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0);\n+    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(true), 0U);\n+    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(false), 0U);\n     CScript scriptSig2;\n     scriptSig2 << OP_1 << dummy << dummy << Serialize(s2);\n-    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig2), 3);\n+    BOOST_CHECK_EQUAL(p2sh.GetSigOpCount(scriptSig2), 3U);\n }\n \n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "a4cbfaee41b20b4eac29edad7e06b034bda4beef",
        "filename": "src/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/87b9931bed5ec6633348ac506f0e9b5a96446df8/src/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/wallet_tests.cpp?ref=87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "patch": "@@ -104,22 +104,22 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // try making 34 cents from 1,2,5,10,20 - we can't do it exactly\n         BOOST_CHECK( wallet.SelectCoinsMinConf(34 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_GT(nValueRet, 34 * CENT);         // but should get more than 34 cents\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);     // the best should be 20+10+5.  it's incredibly unlikely the 1 or 2 got included (but possible)\n \n         // when we try making 7 cents, the smaller coins (1,2,5) are enough.  We should see just 2+5\n         BOOST_CHECK( wallet.SelectCoinsMinConf( 7 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 7 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // when we try making 8 cents, the smaller coins (1,2,5) are exactly enough.\n         BOOST_CHECK( wallet.SelectCoinsMinConf( 8 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK(nValueRet == 8 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // when we try making 9 cents, no subset of smaller coins is enough, and we get the next bigger coin (10)\n         BOOST_CHECK( wallet.SelectCoinsMinConf( 9 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 10 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // now clear out the wallet and start again to test choosing between subsets of smaller coins and the next biggest coin\n         empty_wallet();\n@@ -137,26 +137,26 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // now try making 16 cents.  the best smaller coins can do is 6+7+8 = 21; not as good at the next biggest coin, 20\n         BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 20 * CENT); // we should get 20 in one coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         add_coin( 5*CENT); // now we have 5+6+7+8+20+30 = 75 cents total\n \n         // now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, better than the next biggest coin, 20\n         BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT); // we should get 18 in 3 coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         add_coin( 18*CENT); // now we have 5+6+7+8+18+20+30\n \n         // and now if we try making 16 cents again, the smaller coins can make 5+6+7 = 18 cents, the same as the next biggest coin, 18\n         BOOST_CHECK( wallet.SelectCoinsMinConf(16 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 18 * CENT);  // we should get 18 in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1); // because in the event of a tie, the biggest coin wins\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U); // because in the event of a tie, the biggest coin wins\n \n         // now try making 11 cents.  we should get 5+6\n         BOOST_CHECK( wallet.SelectCoinsMinConf(11 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 11 * CENT);\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // check that the smallest bigger coin is used\n         add_coin( 1*COIN);\n@@ -165,11 +165,11 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin( 4*COIN); // now we have 5+6+7+8+18+20+30+100+200+300+400 = 1094 cents\n         BOOST_CHECK( wallet.SelectCoinsMinConf(95 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * COIN);  // we should get 1 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         BOOST_CHECK( wallet.SelectCoinsMinConf(195 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 2 * COIN);  // we should get 2 BTC in 1 coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // empty the wallet and start again, now with fractions of a cent, to test sub-cent change avoidance\n         empty_wallet();\n@@ -207,7 +207,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n \n         BOOST_CHECK( wallet.SelectCoinsMinConf(500000 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 500000 * COIN); // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 10); // in ten coins\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 10U); // in ten coins\n \n         // if there's not enough in the smaller coins to make at least 1 cent change (0.5+0.6+0.7 < 1.0+1.0),\n         // we need to try finding an exact subset anyway\n@@ -220,7 +220,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(1111 * CENT);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1111 * CENT); // we get the bigger coin\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 1U);\n \n         // but sometimes it's possible, and we use an exact subset (0.4 + 0.6 = 1.0)\n         empty_wallet();\n@@ -230,7 +230,7 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         add_coin(1111 * CENT);\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1 * CENT, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1 * CENT);   // we should get the exact amount\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2); // in two coins 0.4+0.6\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U); // in two coins 0.4+0.6\n \n         // test avoiding sub-cent change\n         empty_wallet();\n@@ -241,12 +241,12 @@ BOOST_AUTO_TEST_CASE(coin_selection_tests)\n         // trying to make 1.0001 from these three coins\n         BOOST_CHECK( wallet.SelectCoinsMinConf(1.0001 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1.0105 * COIN);   // we should get all coins\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 3U);\n \n         // but if we try to make 0.999, we should take the bigger of the two small coins to avoid sub-cent change\n         BOOST_CHECK( wallet.SelectCoinsMinConf(0.999 * COIN, 1, 1, vCoins, setCoinsRet, nValueRet));\n         BOOST_CHECK_EQUAL(nValueRet, 1.01 * COIN);   // we should get 1 + 0.01\n-        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2);\n+        BOOST_CHECK_EQUAL(setCoinsRet.size(), 2U);\n \n         // test randomness\n         {"
      }
    ]
  },
  {
    "sha": "c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOGMyZmJlMDdmMWE1NDc1YWVhM2EyNjgwYWY5MTMwNTU4YzdlNWM4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-07T03:16:05Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T18:04:21Z"
      },
      "message": "Shutdown cleanup prep-work\n\nCreate a boost::thread_group object at the qt/bitcoind main-loop level\nthat will hold pointers to all the main-loop threads.\n\nThis will replace the vnThreadsRunning[] array.\n\nFor testing, ported the BitcoinMiner threads to use its\nown boost::thread_group.",
      "tree": {
        "sha": "78e8007fa6898d8f7f6826ab59c0bab8a4aae417",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/78e8007fa6898d8f7f6826ab59c0bab8a4aae417"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/87b9931bed5ec6633348ac506f0e9b5a96446df8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/87b9931bed5ec6633348ac506f0e9b5a96446df8"
      }
    ],
    "stats": {
      "total": 147,
      "additions": 64,
      "deletions": 83
    },
    "files": [
      {
        "sha": "a5015adc48c25d42528e1fda0a45a350773070e2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 2,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -122,6 +122,16 @@ void Shutdown(void* parg)\n     }\n }\n \n+//\n+// Signal handlers are very limited in what they are allowed to do, so:\n+//\n+void DetectShutdownThread(boost::thread_group* threadGroup)\n+{\n+    while (fRequestShutdown == false)\n+        Sleep(200);\n+    threadGroup->interrupt_all();\n+}\n+\n void HandleSIGTERM(int)\n {\n     fRequestShutdown = true;\n@@ -143,6 +153,7 @@ void HandleSIGHUP(int)\n #if !defined(QT_GUI)\n bool AppInit(int argc, char* argv[])\n {\n+    boost::thread_group threadGroup;\n     bool fRet = false;\n     try\n     {\n@@ -185,15 +196,19 @@ bool AppInit(int argc, char* argv[])\n             exit(ret);\n         }\n \n-        fRet = AppInit2();\n+        fRet = AppInit2(threadGroup);\n     }\n     catch (std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"AppInit()\");\n     }\n     if (!fRet)\n+    {\n         Shutdown(NULL);\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n+    }\n     return fRet;\n }\n \n@@ -405,7 +420,7 @@ void ThreadImport(void *data) {\n /** Initialize bitcoin.\n  *  @pre Parameters should be parsed and config file should be read.\n  */\n-bool AppInit2()\n+bool AppInit2(boost::thread_group& threadGroup)\n {\n     // ********************************************************* Step 1: setup\n #ifdef _MSC_VER\n@@ -449,6 +464,8 @@ bool AppInit2()\n     sigaction(SIGHUP, &sa_hup, NULL);\n #endif\n \n+    threadGroup.create_thread(boost::bind(&DetectShutdownThread, &threadGroup));\n+\n     // ********************************************************* Step 2: parameter interactions\n \n     fTestNet = GetBoolArg(\"-testnet\");"
      },
      {
        "sha": "8986ff6208ed6c3ca54109bdf36a410afccd7f5d",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -7,11 +7,12 @@\n \n #include \"wallet.h\"\n \n+class boost::thread_group;\n extern CWallet* pwalletMain;\n \n void StartShutdown();\n void Shutdown(void* parg);\n-bool AppInit2();\n+bool AppInit2(boost::thread_group& threadGroup);\n std::string HelpMessage();\n \n #endif"
      },
      {
        "sha": "df9ea4443566164ca9ea806c326739b7f7c02644",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 29,
        "deletions": 73,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -61,8 +61,8 @@ CScript COINBASE_FLAGS;\n \n const string strMessageMagic = \"Bitcoin Signed Message:\\n\";\n \n-double dHashesPerSec;\n-int64 nHPSTimerStart;\n+double dHashesPerSec = 0.0;\n+int64 nHPSTimerStart = 0;\n \n // Settings\n int64 nTransactionFee = 0;\n@@ -4089,6 +4089,8 @@ unsigned int static ScanHash_CryptoPP(char* pmidstate, char* pdata, char* phash1\n             nHashesDone = 0xffff+1;\n             return (unsigned int) -1;\n         }\n+        if ((nNonce & 0xfff) == 0)\n+            boost::this_thread::interruption_point();\n     }\n }\n \n@@ -4506,37 +4508,19 @@ bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey)\n     return true;\n }\n \n-void static ThreadBitcoinMiner(void* parg);\n-\n-static bool fGenerateBitcoins = false;\n-static bool fLimitProcessors = false;\n-static int nLimitProcessors = -1;\n-\n void static BitcoinMiner(CWallet *pwallet)\n {\n     printf(\"BitcoinMiner started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_LOWEST);\n-\n-    // Make this thread recognisable as the mining thread\n     RenameThread(\"bitcoin-miner\");\n \n     // Each thread has its own key and counter\n     CReserveKey reservekey(pwallet);\n     unsigned int nExtraNonce = 0;\n \n-    while (fGenerateBitcoins)\n-    {\n-        if (fShutdown)\n-            return;\n-        while (vNodes.empty() || IsInitialBlockDownload())\n-        {\n+    try { loop {\n+        while (vNodes.empty())\n             Sleep(1000);\n-            if (fShutdown)\n-                return;\n-            if (!fGenerateBitcoins)\n-                return;\n-        }\n-\n \n         //\n         // Create new block\n@@ -4553,7 +4537,6 @@ void static BitcoinMiner(CWallet *pwallet)\n         printf(\"Running BitcoinMiner with %\"PRIszu\" transactions in block (%u bytes)\\n\", pblock->vtx.size(),\n                ::GetSerializeSize(*pblock, SER_NETWORK, PROTOCOL_VERSION));\n \n-\n         //\n         // Pre-build hash buffers\n         //\n@@ -4626,19 +4609,14 @@ void static BitcoinMiner(CWallet *pwallet)\n                         if (GetTime() - nLogTime > 30 * 60)\n                         {\n                             nLogTime = GetTime();\n-                            printf(\"hashmeter %3d CPUs %6.0f khash/s\\n\", vnThreadsRunning[THREAD_MINER], dHashesPerSec/1000.0);\n+                            printf(\"hashmeter %6.0f khash/s\\n\", dHashesPerSec/1000.0);\n                         }\n                     }\n                 }\n             }\n \n             // Check for stop or if block needs to be rebuilt\n-            if (fShutdown)\n-                return;\n-            if (!fGenerateBitcoins)\n-                return;\n-            if (fLimitProcessors && vnThreadsRunning[THREAD_MINER] > nLimitProcessors)\n-                return;\n+            boost::this_thread::interruption_point();\n             if (vNodes.empty())\n                 break;\n             if (nBlockNonce >= 0xffff0000)\n@@ -4658,57 +4636,35 @@ void static BitcoinMiner(CWallet *pwallet)\n                 hashTarget = CBigNum().SetCompact(pblock->nBits).getuint256();\n             }\n         }\n-    }\n-}\n-\n-void static ThreadBitcoinMiner(void* parg)\n-{\n-    CWallet* pwallet = (CWallet*)parg;\n-    try\n+    } }\n+    catch (boost::thread_interrupted)\n     {\n-        vnThreadsRunning[THREAD_MINER]++;\n-        BitcoinMiner(pwallet);\n-        vnThreadsRunning[THREAD_MINER]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_MINER]--;\n-        PrintException(&e, \"ThreadBitcoinMiner()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_MINER]--;\n-        PrintException(NULL, \"ThreadBitcoinMiner()\");\n-    }\n-    nHPSTimerStart = 0;\n-    if (vnThreadsRunning[THREAD_MINER] == 0)\n-        dHashesPerSec = 0;\n-    printf(\"ThreadBitcoinMiner exiting, %d threads remaining\\n\", vnThreadsRunning[THREAD_MINER]);\n+        printf(\"BitcoinMiner terminated\\n\");\n+        throw;\n+    }\n }\n \n-\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet)\n {\n-    fGenerateBitcoins = fGenerate;\n-    nLimitProcessors = GetArg(\"-genproclimit\", -1);\n-    if (nLimitProcessors == 0)\n-        fGenerateBitcoins = false;\n-    fLimitProcessors = (nLimitProcessors != -1);\n+    static boost::thread_group* minerThreads = NULL;\n+\n+    int nThreads = GetArg(\"-genproclimit\", -1);\n+    if (nThreads < 0)\n+        nThreads = boost::thread::hardware_concurrency();\n \n-    if (fGenerate)\n+    if (minerThreads != NULL)\n     {\n-        int nProcessors = boost::thread::hardware_concurrency();\n-        printf(\"%d processors\\n\", nProcessors);\n-        if (nProcessors < 1)\n-            nProcessors = 1;\n-        if (fLimitProcessors && nProcessors > nLimitProcessors)\n-            nProcessors = nLimitProcessors;\n-        int nAddThreads = nProcessors - vnThreadsRunning[THREAD_MINER];\n-        printf(\"Starting %d BitcoinMiner threads\\n\", nAddThreads);\n-        for (int i = 0; i < nAddThreads; i++)\n-        {\n-            if (!NewThread(ThreadBitcoinMiner, pwallet))\n-                printf(\"Error: NewThread(ThreadBitcoinMiner) failed\\n\");\n-            Sleep(10);\n-        }\n+        minerThreads->interrupt_all();\n+        delete minerThreads;\n+        minerThreads = NULL;\n     }\n+\n+    if (nThreads == 0 || !fGenerate)\n+        return;\n+\n+    minerThreads = new boost::thread_group();\n+    for (int i = 0; i < nThreads; i++)\n+        minerThreads->create_thread(boost::bind(&BitcoinMiner, pwallet));\n }\n \n // Amount compression:"
      },
      {
        "sha": "097f480b850035931bb94b3ca96764e297632397",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -2052,6 +2052,7 @@ void StartNode(void* parg)\n bool StopNode()\n {\n     printf(\"StopNode()\\n\");\n+    GenerateBitcoins(false, NULL);\n     fShutdown = true;\n     nTransactionsUpdated++;\n     int64 nStart = GetTime();\n@@ -2072,7 +2073,6 @@ bool StopNode()\n     if (vnThreadsRunning[THREAD_SOCKETHANDLER] > 0) printf(\"ThreadSocketHandler still running\\n\");\n     if (vnThreadsRunning[THREAD_OPENCONNECTIONS] > 0) printf(\"ThreadOpenConnections still running\\n\");\n     if (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0) printf(\"ThreadMessageHandler still running\\n\");\n-    if (vnThreadsRunning[THREAD_MINER] > 0) printf(\"ThreadBitcoinMiner still running\\n\");\n     if (vnThreadsRunning[THREAD_RPCLISTENER] > 0) printf(\"ThreadRPCListener still running\\n\");\n     if (vnThreadsRunning[THREAD_RPCHANDLER] > 0) printf(\"ThreadsRPCServer still running\\n\");\n #ifdef USE_UPNP"
      },
      {
        "sha": "66e528acbb6e88d62b4df067bae92aafa05cc0d0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -75,7 +75,6 @@ enum threadId\n     THREAD_SOCKETHANDLER,\n     THREAD_OPENCONNECTIONS,\n     THREAD_MESSAGEHANDLER,\n-    THREAD_MINER,\n     THREAD_RPCLISTENER,\n     THREAD_UPNP,\n     THREAD_DNSSEED,"
      },
      {
        "sha": "a805e350e6dee88b6351e0441576627f208945c3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -11,6 +11,7 @@\n #include \"guiutil.h\"\n #include \"guiconstants.h\"\n #include \"init.h\"\n+#include \"util.h\"\n #include \"ui_interface.h\"\n #include \"paymentserver.h\"\n \n@@ -215,9 +216,10 @@ int main(int argc, char *argv[])\n         if (GUIUtil::GetStartOnSystemStartup())\n             GUIUtil::SetStartOnSystemStartup(true);\n \n+        boost::thread_group threadGroup;\n         BitcoinGUI window;\n         guiref = &window;\n-        if(AppInit2())\n+        if(AppInit2(threadGroup))\n         {\n             {\n                 // Put this in a block, so that the Model objects are cleaned up before\n@@ -259,6 +261,8 @@ int main(int argc, char *argv[])\n             }\n             // Shutdown the core and its threads, but don't exit Bitcoin-Qt here\n             Shutdown(NULL);\n+            threadGroup.interrupt_all();\n+            threadGroup.join_all();\n         }\n         else\n         {"
      },
      {
        "sha": "ba012d3216e3b627b86d4486562e369745eaffd0",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 3,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -1431,9 +1431,12 @@ void RenameThread(const char* name)\n     //       removed.\n     pthread_set_name_np(pthread_self(), name);\n \n-// This is XCode 10.6-and-later; bring back if we drop 10.5 support:\n-// #elif defined(MAC_OSX)\n-//    pthread_setname_np(name);\n+#elif defined(MAC_OSX) && defined(__MAC_OS_X_VERSION_MAX_ALLOWED)\n+\n+// pthread_setname_np is XCode 10.6-and-later\n+#if __MAC_OS_X_VERSION_MAX_ALLOWED >= 1060\n+    pthread_setname_np(name);\n+#endif\n \n #else\n     // Prevent warnings for unused parameters..."
      },
      {
        "sha": "2c261203392a56994bcce5f25e736d6c0a2c008c",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "patch": "@@ -15,6 +15,8 @@\n typedef int pid_t; /* define for Windows compatibility */\n #endif\n #include <map>\n+#include <list>\n+#include <utility>\n #include <vector>\n #include <string>\n \n@@ -523,4 +525,3 @@ inline uint32_t ByteReverse(uint32_t value)\n }\n \n #endif\n-"
      }
    ]
  },
  {
    "sha": "1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjQzYmYwZDNhZTdiMWZjZGUwYzBlMjBjMjNjMzQxNTQwZjRjOGQy",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-07T19:25:21Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T18:04:21Z"
      },
      "message": "Rename util.h Sleep --> MilliSleep\n\nTwo reasons for this change:\n1. Need to always use boost::thread's sleep, even on Windows, so the\nsleeps can be interrupted (prior code used Windows' built-in Sleep).\n\n2. I always forgot what units the old Sleep took.",
      "tree": {
        "sha": "ca5ce1b1cfaa0ac8bf6d6eb069a985fe685135e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ca5ce1b1cfaa0ac8bf6d6eb069a985fe685135e6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c8c2fbe07f1a5475aea3a2680af9130558c7e5c8"
      }
    ],
    "stats": {
      "total": 69,
      "additions": 36,
      "deletions": 33
    },
    "files": [
      {
        "sha": "c7219920ca9713908975db72b3fd8efb562dc599",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -1003,7 +1003,7 @@ void ThreadRPCServer3(void* parg)\n                If this results in a DOS the user really\n                shouldn't have their RPC port exposed.*/\n             if (mapArgs[\"-rpcpassword\"].size() < 20)\n-                Sleep(250);\n+                MilliSleep(250);\n \n             conn->stream() << HTTPReply(HTTP_UNAUTHORIZED, \"\", false) << std::flush;\n             break;"
      },
      {
        "sha": "87c4b5c7e4bb97b54b06acc9a27271d26f01e679",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -413,7 +413,7 @@ bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n                 return fSuccess;\n             }\n         }\n-        Sleep(100);\n+        MilliSleep(100);\n     }\n     return false;\n }"
      },
      {
        "sha": "d61bfa8921bc583628b1d08cea918f1e4a0182ae",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -43,7 +43,7 @@ enum BindFlags {\n void ExitTimeout(void* parg)\n {\n #ifdef WIN32\n-    Sleep(5000);\n+    MilliSleep(5000);\n     ExitProcess(0);\n #endif\n }\n@@ -105,7 +105,7 @@ void Shutdown(void* parg)\n         UnregisterWallet(pwalletMain);\n         delete pwalletMain;\n         NewThread(ExitTimeout, NULL);\n-        Sleep(50);\n+        MilliSleep(50);\n         printf(\"Bitcoin exited\\n\\n\");\n         fExit = true;\n #ifndef QT_GUI\n@@ -116,8 +116,8 @@ void Shutdown(void* parg)\n     else\n     {\n         while (!fExit)\n-            Sleep(500);\n-        Sleep(100);\n+            MilliSleep(500);\n+        MilliSleep(100);\n         ExitThread(0);\n     }\n }\n@@ -1061,7 +1061,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     // Loop until process is exit()ed from shutdown() function,\n     // called from ThreadRPCServer thread when a \"stop\" command is received.\n     while (1)\n-        Sleep(5000);\n+        MilliSleep(5000);\n #endif\n \n     return true;"
      },
      {
        "sha": "53ec5546114905d485dfce22fdc603e5d5371a09",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -4520,7 +4520,7 @@ void static BitcoinMiner(CWallet *pwallet)\n \n     try { loop {\n         while (vNodes.empty())\n-            Sleep(1000);\n+            MilliSleep(1000);\n \n         //\n         // Create new block"
      },
      {
        "sha": "fe0dcd41b35b17665db23f8b8050bc369779286c",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 17,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -165,7 +165,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n                     continue;\n                 if (nErr == WSAEWOULDBLOCK || nErr == WSAEINTR || nErr == WSAEINPROGRESS)\n                 {\n-                    Sleep(10);\n+                    MilliSleep(10);\n                     continue;\n                 }\n             }\n@@ -909,7 +909,7 @@ void ThreadSocketHandler2(void* parg)\n             }\n             FD_ZERO(&fdsetSend);\n             FD_ZERO(&fdsetError);\n-            Sleep(timeout.tv_usec/1000);\n+            MilliSleep(timeout.tv_usec/1000);\n         }\n \n \n@@ -1076,7 +1076,7 @@ void ThreadSocketHandler2(void* parg)\n                 pnode->Release();\n         }\n \n-        Sleep(10);\n+        MilliSleep(10);\n     }\n }\n \n@@ -1197,7 +1197,7 @@ void ThreadMapPort2(void* parg)\n                 else\n                     printf(\"UPnP Port Mapping successful.\\n\");;\n             }\n-            Sleep(2000);\n+            MilliSleep(2000);\n             i++;\n         }\n     } else {\n@@ -1208,7 +1208,7 @@ void ThreadMapPort2(void* parg)\n         loop {\n             if (fShutdown || !fUseUPnP)\n                 return;\n-            Sleep(2000);\n+            MilliSleep(2000);\n         }\n     }\n }\n@@ -1418,7 +1418,7 @@ void ThreadDumpAddress2(void* parg)\n     {\n         DumpAddresses();\n         vnThreadsRunning[THREAD_DUMPADDRESS]--;\n-        Sleep(100000);\n+        MilliSleep(100000);\n         vnThreadsRunning[THREAD_DUMPADDRESS]++;\n     }\n     vnThreadsRunning[THREAD_DUMPADDRESS]--;\n@@ -1494,12 +1494,12 @@ void ThreadOpenConnections2(void* parg)\n                 OpenNetworkConnection(addr, NULL, strAddr.c_str());\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n-                    Sleep(500);\n+                    MilliSleep(500);\n                     if (fShutdown)\n                         return;\n                 }\n             }\n-            Sleep(500);\n+            MilliSleep(500);\n         }\n     }\n \n@@ -1510,7 +1510,7 @@ void ThreadOpenConnections2(void* parg)\n         ProcessOneShot();\n \n         vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-        Sleep(500);\n+        MilliSleep(500);\n         vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n         if (fShutdown)\n             return;\n@@ -1642,12 +1642,12 @@ void ThreadOpenAddedConnections2(void* parg)\n                 CAddress addr;\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n-                Sleep(500);\n+                MilliSleep(500);\n                 if (fShutdown)\n                     return;\n             }\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-            Sleep(120000); // Retry every 2 minutes\n+            MilliSleep(120000); // Retry every 2 minutes\n             vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         }\n         return;\n@@ -1694,14 +1694,14 @@ void ThreadOpenAddedConnections2(void* parg)\n         {\n             CSemaphoreGrant grant(*semOutbound);\n             OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n-            Sleep(500);\n+            MilliSleep(500);\n             if (fShutdown)\n                 return;\n         }\n         if (fShutdown)\n             return;\n         vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-        Sleep(120000); // Retry every 2 minutes\n+        MilliSleep(120000); // Retry every 2 minutes\n         vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         if (fShutdown)\n             return;\n@@ -1821,7 +1821,7 @@ void ThreadMessageHandler2(void* parg)\n         // Reduce vnThreadsRunning so StopNode has permission to exit while\n         // we're sleeping, but we must always check fShutdown after doing this.\n         vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n-        Sleep(100);\n+        MilliSleep(100);\n         if (fRequestShutdown)\n             StartShutdown();\n         vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n@@ -2068,7 +2068,7 @@ bool StopNode()\n             break;\n         if (GetTime() - nStart > 20)\n             break;\n-        Sleep(20);\n+        MilliSleep(20);\n     } while(true);\n     if (vnThreadsRunning[THREAD_SOCKETHANDLER] > 0) printf(\"ThreadSocketHandler still running\\n\");\n     if (vnThreadsRunning[THREAD_OPENCONNECTIONS] > 0) printf(\"ThreadOpenConnections still running\\n\");\n@@ -2082,8 +2082,8 @@ bool StopNode()\n     if (vnThreadsRunning[THREAD_ADDEDCONNECTIONS] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");\n     if (vnThreadsRunning[THREAD_DUMPADDRESS] > 0) printf(\"ThreadDumpAddresses still running\\n\");\n     while (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0 || vnThreadsRunning[THREAD_RPCHANDLER] > 0)\n-        Sleep(20);\n-    Sleep(50);\n+        MilliSleep(20);\n+    MilliSleep(50);\n     DumpAddresses();\n \n     return true;"
      },
      {
        "sha": "526a7b5b32f2abe41ee15c8b36a1fc6eed1d7376",
        "filename": "src/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcwallet.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -1289,7 +1289,7 @@ void ThreadCleanWalletPassphrase(void* parg)\n                 break;\n \n             LEAVE_CRITICAL_SECTION(cs_nWalletUnlockTime);\n-            Sleep(nToSleep);\n+            MilliSleep(nToSleep);\n             ENTER_CRITICAL_SECTION(cs_nWalletUnlockTime);\n \n         } while(1);"
      },
      {
        "sha": "5173686eda4bbbf022824093d8b5cad9306495f0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 8,
        "deletions": 5,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -100,13 +100,16 @@ T* alignup(T* p)\n #endif\n #else\n #define MAX_PATH            1024\n-inline void Sleep(int64 n)\n+#endif\n+\n+inline void MilliSleep(int64 n)\n {\n-    /*Boost has a year 2038 problem\u2014 if the request sleep time is past epoch+2^31 seconds the sleep returns instantly.\n-      So we clamp our sleeps here to 10 years and hope that boost is fixed by 2028.*/\n-    boost::thread::sleep(boost::get_system_time() + boost::posix_time::milliseconds(n>315576000000LL?315576000000LL:n));\n-}\n+#if BOOST_VERSION >= 105000\n+    boost::this_thread::sleep_for(boost::chrono::milliseconds(n));\n+#else\n+    boost::this_thread::sleep(boost::posix_time::milliseconds(n));\n #endif\n+}\n \n /* This GNU C extension enables the compiler to check the format string against the parameters provided.\n  * X is the number of the \"format string\" parameter, and Y is the number of the first variadic parameter."
      },
      {
        "sha": "96bc05b118dd73694dc9b3aee3f48b8aae4d4574",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "patch": "@@ -500,7 +500,7 @@ void ThreadFlushWalletDB(void* parg)\n     int64 nLastWalletUpdate = GetTime();\n     while (!fShutdown)\n     {\n-        Sleep(500);\n+        MilliSleep(500);\n \n         if (nLastSeen != nWalletDBUpdated)\n         {\n@@ -579,7 +579,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n                 }\n             }\n         }\n-        Sleep(100);\n+        MilliSleep(100);\n     }\n     return false;\n }"
      }
    ]
  },
  {
    "sha": "72f14d26ecc67a210a29d7914e580b8e67e45d8e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MmYxNGQyNmVjYzY3YTIxMGEyOWQ3OTE0ZTU4MGI4ZTY3ZTQ1ZDhl",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-09T01:19:17Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T23:57:13Z"
      },
      "message": "LoopForever and ThreadTrace helpers",
      "tree": {
        "sha": "a5c32b1a0b4690be8de680e1629a7d5d543dbaf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a5c32b1a0b4690be8de680e1629a7d5d543dbaf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/72f14d26ecc67a210a29d7914e580b8e67e45d8e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f14d26ecc67a210a29d7914e580b8e67e45d8e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/72f14d26ecc67a210a29d7914e580b8e67e45d8e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f14d26ecc67a210a29d7914e580b8e67e45d8e/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b43bf0d3ae7b1fcde0c0e20c23c341540f4c8d2"
      }
    ],
    "stats": {
      "total": 114,
      "additions": 114,
      "deletions": 0
    },
    "files": [
      {
        "sha": "2d05794cc77d8d484e8df675748e4bd5913974e8",
        "filename": "src/test/util_tests.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 0,
        "changes": 58,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72f14d26ecc67a210a29d7914e580b8e67e45d8e/src/test/util_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72f14d26ecc67a210a29d7914e580b8e67e45d8e/src/test/util_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util_tests.cpp?ref=72f14d26ecc67a210a29d7914e580b8e67e45d8e",
        "patch": "@@ -323,4 +323,62 @@ BOOST_AUTO_TEST_CASE(util_seed_insecure_rand)\n     }\n }\n \n+static int nCounter = 0;\n+\n+static void Count()\n+{\n+    ++nCounter;\n+    MilliSleep(10);\n+}\n+\n+static void CountWithArg(int arg)\n+{\n+    nCounter += arg;\n+    MilliSleep(10);\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_loop_forever1)\n+{\n+    boost::thread_group threadGroup;\n+\n+    threadGroup.create_thread(boost::bind(&LoopForever<void (*)()>, \"count\", &Count, 1));\n+    MilliSleep(1);\n+    threadGroup.interrupt_all();\n+    BOOST_CHECK_EQUAL(nCounter, 1);\n+    nCounter = 0;\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_loop_forever2)\n+{\n+    boost::thread_group threadGroup;\n+\n+    boost::function<void()> f = boost::bind(&CountWithArg, 11);\n+    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"count11\", f, 11));\n+    MilliSleep(1);\n+    threadGroup.interrupt_all();\n+    BOOST_CHECK_EQUAL(nCounter, 11);\n+    nCounter = 0;\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_threadtrace1)\n+{\n+    boost::thread_group threadGroup;\n+\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"count11\", &Count));\n+    threadGroup.join_all();\n+    BOOST_CHECK_EQUAL(nCounter, 1);\n+    nCounter = 0;\n+}\n+\n+BOOST_AUTO_TEST_CASE(util_threadtrace2)\n+{\n+    boost::thread_group threadGroup;\n+\n+    boost::function<void()> f = boost::bind(&CountWithArg, 11);\n+    threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"count11\", f));\n+    threadGroup.join_all();\n+    BOOST_CHECK_EQUAL(nCounter, 11);\n+    nCounter = 0;\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0c5ed9163457bd2e99c62b8b5c46283bac2a7ae0",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/72f14d26ecc67a210a29d7914e580b8e67e45d8e/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/72f14d26ecc67a210a29d7914e580b8e67e45d8e/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=72f14d26ecc67a210a29d7914e580b8e67e45d8e",
        "patch": "@@ -527,4 +527,60 @@ inline uint32_t ByteReverse(uint32_t value)\n     return (value<<16) | (value>>16);\n }\n \n+// Standard wrapper for do-something-forever thread functions.\n+// \"Forever\" really means until the thread is interrupted.\n+// Use it like:\n+//   new boost::thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n+// or maybe:\n+//    boost::function<void()> f = boost::bind(&FunctionWithArg, argument);\n+//    threadGroup.create_thread(boost::bind(&LoopForever<boost::function<void()> >, \"nothing\", f, milliseconds));\n+template <typename Callable> void LoopForever(const char* name,  Callable func, int64 msecs)\n+{\n+    std::string s = strprintf(\"bitcoin-%s\", name);\n+    RenameThread(s.c_str());\n+    printf(\"%s thread start\\n\", name);\n+    try\n+    {\n+        while (1)\n+        {\n+            func();\n+            MilliSleep(msecs);\n+        }\n+    }\n+    catch (boost::thread_interrupted)\n+    {\n+        printf(\"%s thread stop\\n\", name);\n+        throw;\n+    }\n+    catch (std::exception& e) {\n+        PrintException(&e, name);\n+    }\n+    catch (...) {\n+        PrintException(NULL, name);\n+    }\n+}\n+// .. and a wrapper that just calls func once\n+template <typename Callable> void TraceThread(const char* name,  Callable func)\n+{\n+    std::string s = strprintf(\"bitcoin-%s\", name);\n+    RenameThread(s.c_str());\n+    try\n+    {\n+        printf(\"%s thread start\\n\", name);\n+        func();\n+        printf(\"%s thread exit\\n\", name);\n+    }\n+    catch (boost::thread_interrupted)\n+    {\n+        printf(\"%s thread interrupt\\n\", name);\n+        throw;\n+    }\n+    catch (std::exception& e) {\n+        PrintException(&e, name);\n+    }\n+    catch (...) {\n+        PrintException(NULL, name);\n+    }\n+}\n+\n #endif"
      }
    ]
  },
  {
    "sha": "21eb5adadbe3110a8708f2570185566e1f137a49",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyMWViNWFkYWRiZTMxMTBhODcwOGYyNTcwMTg1NTY2ZTFmMTM3YTQ5",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-07T03:31:26Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T23:57:13Z"
      },
      "message": "Port Thread* methods to boost::thread_group",
      "tree": {
        "sha": "706908964d4a02c6d2fc2fe8968a65c449a3c38a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/706908964d4a02c6d2fc2fe8968a65c449a3c38a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/21eb5adadbe3110a8708f2570185566e1f137a49",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21eb5adadbe3110a8708f2570185566e1f137a49",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/21eb5adadbe3110a8708f2570185566e1f137a49",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21eb5adadbe3110a8708f2570185566e1f137a49/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72f14d26ecc67a210a29d7914e580b8e67e45d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72f14d26ecc67a210a29d7914e580b8e67e45d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72f14d26ecc67a210a29d7914e580b8e67e45d8e"
      }
    ],
    "stats": {
      "total": 628,
      "additions": 134,
      "deletions": 494
    },
    "files": [
      {
        "sha": "53b3635753b130563afe178550d43046baac2544",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 96,
        "changes": 136,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -30,13 +30,12 @@ using namespace boost;\n using namespace boost::asio;\n using namespace json_spirit;\n \n-void ThreadRPCServer2(void* parg);\n-\n static std::string strRPCUserColonPass;\n \n-const Object emptyobj;\n-\n-void ThreadRPCServer3(void* parg);\n+// These are created by StartRPCThreads, destroyed in StopRPCThreads\n+static asio::io_service* rpc_io_service = NULL;\n+static ssl::context* rpc_ssl_context = NULL;\n+static boost::thread_group* rpc_worker_group = NULL;\n \n static inline unsigned short GetDefaultRPCPort()\n {\n@@ -650,26 +649,7 @@ class AcceptedConnectionImpl : public AcceptedConnection\n     iostreams::stream< SSLIOStreamDevice<Protocol> > _stream;\n };\n \n-void ThreadRPCServer(void* parg)\n-{\n-    // Make this thread recognisable as the RPC listener\n-    RenameThread(\"bitcoin-rpclist\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_RPCLISTENER]++;\n-        ThreadRPCServer2(parg);\n-        vnThreadsRunning[THREAD_RPCLISTENER]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_RPCLISTENER]--;\n-        PrintException(&e, \"ThreadRPCServer()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_RPCLISTENER]--;\n-        PrintException(NULL, \"ThreadRPCServer()\");\n-    }\n-    printf(\"ThreadRPCServer exited\\n\");\n-}\n+void ServiceConnection(AcceptedConnection *conn);\n \n // Forward declaration required for RPCListen\n template <typename Protocol, typename SocketAcceptorService>\n@@ -711,11 +691,8 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n                              AcceptedConnection* conn,\n                              const boost::system::error_code& error)\n {\n-    vnThreadsRunning[THREAD_RPCLISTENER]++;\n-\n     // Immediately start accepting new connections, except when we're cancelled or our socket is closed.\n-    if (error != asio::error::operation_aborted\n-     && acceptor->is_open())\n+    if (error != asio::error::operation_aborted && acceptor->is_open())\n         RPCListen(acceptor, context, fUseSSL);\n \n     AcceptedConnectionImpl<ip::tcp>* tcp_conn = dynamic_cast< AcceptedConnectionImpl<ip::tcp>* >(conn);\n@@ -729,28 +706,22 @@ static void RPCAcceptHandler(boost::shared_ptr< basic_socket_acceptor<Protocol,\n     // Restrict callers by IP.  It is important to\n     // do this before starting client thread, to filter out\n     // certain DoS and misbehaving clients.\n-    else if (tcp_conn\n-          && !ClientAllowed(tcp_conn->peer.address()))\n+    else if (tcp_conn && !ClientAllowed(tcp_conn->peer.address()))\n     {\n         // Only send a 403 if we're not using SSL to prevent a DoS during the SSL handshake.\n         if (!fUseSSL)\n             conn->stream() << HTTPReply(HTTP_FORBIDDEN, \"\", false) << std::flush;\n         delete conn;\n     }\n-\n-    // start HTTP client thread\n-    else if (!NewThread(ThreadRPCServer3, conn)) {\n-        printf(\"Failed to create RPC server client thread\\n\");\n+    else {\n+        ServiceConnection(conn);\n+        conn->close();\n         delete conn;\n     }\n-\n-    vnThreadsRunning[THREAD_RPCLISTENER]--;\n }\n \n-void ThreadRPCServer2(void* parg)\n+void StartRPCThreads()\n {\n-    printf(\"ThreadRPCServer started\\n\");\n-\n     strRPCUserColonPass = mapArgs[\"-rpcuser\"] + \":\" + mapArgs[\"-rpcpassword\"];\n     if ((mapArgs[\"-rpcpassword\"] == \"\") ||\n         (mapArgs[\"-rpcuser\"] == mapArgs[\"-rpcpassword\"]))\n@@ -781,37 +752,36 @@ void ThreadRPCServer2(void* parg)\n         return;\n     }\n \n-    const bool fUseSSL = GetBoolArg(\"-rpcssl\");\n+    assert(rpc_io_service == NULL);\n+    rpc_io_service = new asio::io_service();\n+    rpc_ssl_context = new ssl::context(*rpc_io_service, ssl::context::sslv23);\n \n-    asio::io_service io_service;\n+    const bool fUseSSL = GetBoolArg(\"-rpcssl\");\n \n-    ssl::context context(io_service, ssl::context::sslv23);\n     if (fUseSSL)\n     {\n-        context.set_options(ssl::context::no_sslv2);\n+        rpc_ssl_context->set_options(ssl::context::no_sslv2);\n \n         filesystem::path pathCertFile(GetArg(\"-rpcsslcertificatechainfile\", \"server.cert\"));\n         if (!pathCertFile.is_complete()) pathCertFile = filesystem::path(GetDataDir()) / pathCertFile;\n-        if (filesystem::exists(pathCertFile)) context.use_certificate_chain_file(pathCertFile.string());\n+        if (filesystem::exists(pathCertFile)) rpc_ssl_context->use_certificate_chain_file(pathCertFile.string());\n         else printf(\"ThreadRPCServer ERROR: missing server certificate file %s\\n\", pathCertFile.string().c_str());\n \n         filesystem::path pathPKFile(GetArg(\"-rpcsslprivatekeyfile\", \"server.pem\"));\n         if (!pathPKFile.is_complete()) pathPKFile = filesystem::path(GetDataDir()) / pathPKFile;\n-        if (filesystem::exists(pathPKFile)) context.use_private_key_file(pathPKFile.string(), ssl::context::pem);\n+        if (filesystem::exists(pathPKFile)) rpc_ssl_context->use_private_key_file(pathPKFile.string(), ssl::context::pem);\n         else printf(\"ThreadRPCServer ERROR: missing server private key file %s\\n\", pathPKFile.string().c_str());\n \n         string strCiphers = GetArg(\"-rpcsslciphers\", \"TLSv1+HIGH:!SSLv2:!aNULL:!eNULL:!AH:!3DES:@STRENGTH\");\n-        SSL_CTX_set_cipher_list(context.impl(), strCiphers.c_str());\n+        SSL_CTX_set_cipher_list(rpc_ssl_context->impl(), strCiphers.c_str());\n     }\n \n     // Try a dual IPv6/IPv4 socket, falling back to separate IPv4 and IPv6 sockets\n     const bool loopback = !mapArgs.count(\"-rpcallowip\");\n     asio::ip::address bindAddress = loopback ? asio::ip::address_v6::loopback() : asio::ip::address_v6::any();\n     ip::tcp::endpoint endpoint(bindAddress, GetArg(\"-rpcport\", GetDefaultRPCPort()));\n     boost::system::error_code v6_only_error;\n-    boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(io_service));\n-\n-    boost::signals2::signal<void ()> StopRequests;\n+    boost::shared_ptr<ip::tcp::acceptor> acceptor(new ip::tcp::acceptor(*rpc_io_service));\n \n     bool fListening = false;\n     std::string strerr;\n@@ -826,11 +796,7 @@ void ThreadRPCServer2(void* parg)\n         acceptor->bind(endpoint);\n         acceptor->listen(socket_base::max_connections);\n \n-        RPCListen(acceptor, context, fUseSSL);\n-        // Cancel outstanding listen-requests for this acceptor when shutting down\n-        StopRequests.connect(signals2::slot<void ()>(\n-                    static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n-                .track(acceptor));\n+        RPCListen(acceptor, *rpc_ssl_context, fUseSSL);\n \n         fListening = true;\n     }\n@@ -846,17 +812,13 @@ void ThreadRPCServer2(void* parg)\n             bindAddress = loopback ? asio::ip::address_v4::loopback() : asio::ip::address_v4::any();\n             endpoint.address(bindAddress);\n \n-            acceptor.reset(new ip::tcp::acceptor(io_service));\n+            acceptor.reset(new ip::tcp::acceptor(*rpc_io_service));\n             acceptor->open(endpoint.protocol());\n             acceptor->set_option(boost::asio::ip::tcp::acceptor::reuse_address(true));\n             acceptor->bind(endpoint);\n             acceptor->listen(socket_base::max_connections);\n \n-            RPCListen(acceptor, context, fUseSSL);\n-            // Cancel outstanding listen-requests for this acceptor when shutting down\n-            StopRequests.connect(signals2::slot<void ()>(\n-                        static_cast<void (ip::tcp::acceptor::*)()>(&ip::tcp::acceptor::close), acceptor.get())\n-                    .track(acceptor));\n+            RPCListen(acceptor, *rpc_ssl_context, fUseSSL);\n \n             fListening = true;\n         }\n@@ -872,11 +834,20 @@ void ThreadRPCServer2(void* parg)\n         return;\n     }\n \n-    vnThreadsRunning[THREAD_RPCLISTENER]--;\n-    while (!fShutdown)\n-        io_service.run_one();\n-    vnThreadsRunning[THREAD_RPCLISTENER]++;\n-    StopRequests();\n+    rpc_worker_group = new boost::thread_group();\n+    for (int i = 0; i < GetArg(\"-rpcthreads\", 4); i++)\n+        rpc_worker_group->create_thread(boost::bind(&asio::io_service::run, rpc_io_service));\n+}\n+\n+void StopRPCThreads()\n+{\n+    if (rpc_io_service == NULL) return;\n+\n+    rpc_io_service->stop();\n+    rpc_worker_group->join_all();\n+    delete rpc_worker_group; rpc_worker_group = NULL;\n+    delete rpc_ssl_context; rpc_ssl_context = NULL;\n+    delete rpc_io_service; rpc_io_service = NULL;\n }\n \n class JSONRequest\n@@ -953,32 +924,11 @@ static string JSONRPCExecBatch(const Array& vReq)\n     return write_string(Value(ret), false) + \"\\n\";\n }\n \n-static CCriticalSection cs_THREAD_RPCHANDLER;\n-\n-void ThreadRPCServer3(void* parg)\n+void ServiceConnection(AcceptedConnection *conn)\n {\n-    // Make this thread recognisable as the RPC handler\n-    RenameThread(\"bitcoin-rpchand\");\n-\n-    {\n-        LOCK(cs_THREAD_RPCHANDLER);\n-        vnThreadsRunning[THREAD_RPCHANDLER]++;\n-    }\n-    AcceptedConnection *conn = (AcceptedConnection *) parg;\n-\n     bool fRun = true;\n-    loop {\n-        if (fShutdown || !fRun)\n-        {\n-            conn->close();\n-            delete conn;\n-            {\n-                LOCK(cs_THREAD_RPCHANDLER);\n-                --vnThreadsRunning[THREAD_RPCHANDLER];\n-            }\n-            return;\n-        }\n-\n+    while (fRun)\n+    {\n         int nProto = 0;\n         map<string, string> mapHeaders;\n         string strRequest, strMethod, strURI;\n@@ -1049,12 +999,6 @@ void ThreadRPCServer3(void* parg)\n             break;\n         }\n     }\n-\n-    delete conn;\n-    {\n-        LOCK(cs_THREAD_RPCHANDLER);\n-        vnThreadsRunning[THREAD_RPCHANDLER]--;\n-    }\n }\n \n json_spirit::Value CRPCTable::execute(const std::string &strMethod, const json_spirit::Array &params) const"
      },
      {
        "sha": "315fd92383d593d4c8ddd47a1da85efd967cdc60",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -67,7 +67,8 @@ enum RPCErrorCode\n \n json_spirit::Object JSONRPCError(int code, const std::string& message);\n \n-void ThreadRPCServer(void* parg);\n+void StartRPCThreads();\n+void StopRPCThreads();\n int CommandLineRPC(int argc, char *argv[]);\n \n /** Convert parameter values for RPC call from strings to command-specific JSON objects. */"
      },
      {
        "sha": "eba424fbaa50edcb6137b4764afcdc83416f5870",
        "filename": "src/checkqueue.h",
        "status": "modified",
        "additions": 0,
        "deletions": 18,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/checkqueue.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/checkqueue.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/checkqueue.h?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -33,9 +33,6 @@ template<typename T> class CCheckQueue {\n     // Master thread blocks on this when out of work\n     boost::condition_variable condMaster;\n \n-    // Quit method blocks on this until all workers are gone\n-    boost::condition_variable condQuit;\n-\n     // The queue of elements to be processed.\n     // As the order of booleans doesn't matter, it is used as a LIFO (stack)\n     std::vector<T> queue;\n@@ -85,8 +82,6 @@ template<typename T> class CCheckQueue {\n                 while (queue.empty()) {\n                     if ((fMaster || fQuit) && nTodo == 0) {\n                         nTotal--;\n-                        if (nTotal==0)\n-                            condQuit.notify_one();\n                         bool fRet = fAllOk;\n                         // reset the status for new work later\n                         if (fMaster)\n@@ -151,20 +146,7 @@ template<typename T> class CCheckQueue {\n             condWorker.notify_all();\n     }\n \n-    // Shut the queue down\n-    void Quit() {\n-        boost::unique_lock<boost::mutex> lock(mutex);\n-        fQuit = true;\n-        // No need to wake the master, as he will quit automatically when all jobs are\n-        // done.\n-        condWorker.notify_all(); \n-\n-        while (nTotal > 0)\n-            condQuit.wait(lock);\n-    }\n-\n     ~CCheckQueue() {\n-        Quit();\n     }\n \n     friend class CCheckQueueControl<T>;"
      },
      {
        "sha": "a2e85f2ef2930d310a7132e1dfcf7f561344e62a",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 23,
        "deletions": 50,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -68,27 +68,16 @@ void Shutdown(void* parg)\n \n     // Make this thread recognisable as the shutdown thread\n     RenameThread(\"bitcoin-shutoff\");\n-\n-    bool fFirstThread = false;\n-    {\n-        TRY_LOCK(cs_Shutdown, lockShutdown);\n-        if (lockShutdown)\n-        {\n-            fFirstThread = !fTaken;\n-            fTaken = true;\n-        }\n-    }\n-    static bool fExit;\n-    if (fFirstThread)\n+    nTransactionsUpdated++;\n+    StopRPCThreads();\n+    bitdb.Flush(false);\n+    StopNode();\n     {\n         fShutdown = true;\n         fRequestShutdown = true;\n         nTransactionsUpdated++;\n+        StopRPCThreads();\n         bitdb.Flush(false);\n-        {\n-            LOCK(cs_main);\n-            ThreadScriptCheckQuit();\n-        }\n         StopNode();\n         {\n             LOCK(cs_main);\n@@ -128,7 +117,7 @@ void Shutdown(void* parg)\n void DetectShutdownThread(boost::thread_group* threadGroup)\n {\n     while (fRequestShutdown == false)\n-        Sleep(200);\n+        MilliSleep(200);\n     threadGroup->interrupt_all();\n }\n \n@@ -313,6 +302,7 @@ std::string HelpMessage()\n         \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\" +\n         \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n         \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n+        \"  -rpcthreads=<n>        \" + _(\"Use this mean threads to service RPC calls (default: 4)\") + \"\\n\" +\n         \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n         \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\" +\n         \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\" +\n@@ -354,22 +344,16 @@ struct CImportingNow\n     }\n };\n \n-struct CImportData {\n-    std::vector<boost::filesystem::path> vFiles;\n-};\n-\n-void ThreadImport(void *data) {\n-    CImportData *import = reinterpret_cast<CImportData*>(data);\n \n+void ThreadImport(std::vector<boost::filesystem::path> vImportFiles)\n+{\n     RenameThread(\"bitcoin-loadblk\");\n \n-    vnThreadsRunning[THREAD_IMPORT]++;\n-\n     // -reindex\n     if (fReindex) {\n         CImportingNow imp;\n         int nFile = 0;\n-        while (!fRequestShutdown) {\n+        while (true) {\n             CDiskBlockPos pos(nFile, 0);\n             FILE *file = OpenBlockFile(pos, true);\n             if (!file)\n@@ -378,18 +362,16 @@ void ThreadImport(void *data) {\n             LoadExternalBlockFile(file, &pos);\n             nFile++;\n         }\n-        if (!fRequestShutdown) {\n-            pblocktree->WriteReindexing(false);\n-            fReindex = false;\n-            printf(\"Reindexing finished\\n\");\n-            // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n-            InitBlockIndex();\n-        }\n+        pblocktree->WriteReindexing(false);\n+        fReindex = false;\n+        printf(\"Reindexing finished\\n\");\n+        // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):\n+        InitBlockIndex();\n     }\n \n     // hardcoded $DATADIR/bootstrap.dat\n     filesystem::path pathBootstrap = GetDataDir() / \"bootstrap.dat\";\n-    if (filesystem::exists(pathBootstrap) && !fRequestShutdown) {\n+    if (filesystem::exists(pathBootstrap)) {\n         FILE *file = fopen(pathBootstrap.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n@@ -401,20 +383,14 @@ void ThreadImport(void *data) {\n     }\n \n     // -loadblock=\n-    BOOST_FOREACH(boost::filesystem::path &path, import->vFiles) {\n-        if (fRequestShutdown)\n-            break;\n+    BOOST_FOREACH(boost::filesystem::path &path, vImportFiles) {\n         FILE *file = fopen(path.string().c_str(), \"rb\");\n         if (file) {\n             CImportingNow imp;\n             printf(\"Importing %s...\\n\", path.string().c_str());\n             LoadExternalBlockFile(file);\n         }\n     }\n-\n-    delete import;\n-\n-    vnThreadsRunning[THREAD_IMPORT]--;\n }\n \n /** Initialize bitcoin.\n@@ -615,7 +591,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (nScriptCheckThreads) {\n         printf(\"Using %u threads for script verification\\n\", nScriptCheckThreads);\n         for (int i=0; i<nScriptCheckThreads-1; i++)\n-            NewThread(ThreadScriptCheck, NULL);\n+            threadGroup.create_thread(&ThreadScriptCheck);\n     }\n \n     int64 nStart;\n@@ -716,9 +692,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     fNoListen = !GetBoolArg(\"-listen\", true);\n     fDiscover = GetBoolArg(\"-discover\", true);\n     fNameLookup = GetBoolArg(\"-dns\", true);\n-#ifdef USE_UPNP\n-    fUseUPnP = GetBoolArg(\"-upnp\", USE_UPNP);\n-#endif\n \n     bool fBound = false;\n     if (!fNoListen) {\n@@ -1001,13 +974,13 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (!ConnectBestBlock(state))\n         strErrors << \"Failed to connect best block\";\n \n-    CImportData *pimport = new CImportData();\n+    std::vector<boost::filesystem::path> vImportFiles;\n     if (mapArgs.count(\"-loadblock\"))\n     {\n         BOOST_FOREACH(string strFile, mapMultiArgs[\"-loadblock\"])\n-            pimport->vFiles.push_back(strFile);\n+            vImportFiles.push_back(strFile);\n     }\n-    NewThread(ThreadImport, pimport);\n+    threadGroup.create_thread(boost::bind(&ThreadImport, vImportFiles));\n \n     // ********************************************************* Step 10: load peers\n \n@@ -1038,11 +1011,11 @@ bool AppInit2(boost::thread_group& threadGroup)\n     printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n     printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());\n \n-    if (!NewThread(StartNode, NULL))\n+    if (!NewThread(StartNode, (void*)&threadGroup))\n         InitError(_(\"Error: could not start node\"));\n \n     if (fServer)\n-        NewThread(ThreadRPCServer, NULL);\n+        StartRPCThreads();\n \n     // Generate coins in the background\n     GenerateBitcoins(GetBoolArg(\"-gen\", false), pwalletMain);"
      },
      {
        "sha": "39a291d078e1fdf5089c13a3e22fc77a4dd3272d",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 8,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -1560,15 +1560,9 @@ bool FindUndoPos(CValidationState &state, int nFile, CDiskBlockPos &pos, unsigne\n \n static CCheckQueue<CScriptCheck> scriptcheckqueue(128);\n \n-void ThreadScriptCheck(void*) {\n-    vnThreadsRunning[THREAD_SCRIPTCHECK]++;\n+void ThreadScriptCheck() {\n     RenameThread(\"bitcoin-scriptch\");\n     scriptcheckqueue.Thread();\n-    vnThreadsRunning[THREAD_SCRIPTCHECK]--;\n-}\n-\n-void ThreadScriptCheckQuit() {\n-    scriptcheckqueue.Quit();\n }\n \n bool CBlock::ConnectBlock(CValidationState &state, CBlockIndex* pindex, CCoinsViewCache &view, bool fJustCheck)\n@@ -2867,7 +2861,9 @@ bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp)\n             }\n         }\n         uint64 nRewind = blkdat.GetPos();\n-        while (blkdat.good() && !blkdat.eof() && !fRequestShutdown) {\n+        while (blkdat.good() && !blkdat.eof()) {\n+            boost::this_thread::interruption_point();\n+\n             blkdat.SetPos(nRewind);\n             nRewind++; // start one byte further next time, in case of failure\n             blkdat.SetLimit(); // remove former limit"
      },
      {
        "sha": "c6bd77d3dc558a8fba79cf15bea8cb0bf3c151a3",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -150,12 +150,8 @@ CBlockIndex* FindBlockByHeight(int nHeight);\n bool ProcessMessages(CNode* pfrom);\n /** Send queued protocol messages to be sent to a give node */\n bool SendMessages(CNode* pto, bool fSendTrickle);\n-/** Run the importer thread, which deals with reindexing, loading bootstrap.dat, and whatever is passed to -loadblock */\n-void ThreadImport(void *parg);\n /** Run an instance of the script checking thread */\n-void ThreadScriptCheck(void* parg);\n-/** Stop the script checking threads */\n-void ThreadScriptCheckQuit();\n+void ThreadScriptCheck();\n /** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n /** Generate a new block, without valid proof-of-work */"
      },
      {
        "sha": "557bd6f878f60b4a3b887a1fd8c8fa6dfc84f349",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 297,
        "changes": 354,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -26,14 +26,6 @@ using namespace boost;\n \n static const int MAX_OUTBOUND_CONNECTIONS = 8;\n \n-void ThreadMessageHandler2(void* parg);\n-void ThreadSocketHandler2(void* parg);\n-void ThreadOpenConnections2(void* parg);\n-void ThreadOpenAddedConnections2(void* parg);\n-#ifdef USE_UPNP\n-void ThreadMapPort2(void* parg);\n-#endif\n-void ThreadDNSAddressSeed2(void* parg);\n bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOutbound = NULL, const char *strDest = NULL, bool fOneShot = false);\n \n \n@@ -46,7 +38,6 @@ struct LocalServiceInfo {\n // Global state variables\n //\n bool fDiscover = true;\n-bool fUseUPnP = false;\n uint64 nLocalServices = NODE_NETWORK;\n static CCriticalSection cs_mapLocalHost;\n static map<CNetAddr, LocalServiceInfo> mapLocalHost;\n@@ -754,32 +745,10 @@ void SocketSendData(CNode *pnode)\n     pnode->vSendMsg.erase(pnode->vSendMsg.begin(), it);\n }\n \n-void ThreadSocketHandler(void* parg)\n-{\n-    // Make this thread recognisable as the networking thread\n-    RenameThread(\"bitcoin-net\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_SOCKETHANDLER]++;\n-        ThreadSocketHandler2(parg);\n-        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n-        PrintException(&e, \"ThreadSocketHandler()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n-        throw; // support pthread_cancel()\n-    }\n-    printf(\"ThreadSocketHandler exited\\n\");\n-}\n-\n static list<CNode*> vNodesDisconnected;\n \n-void ThreadSocketHandler2(void* parg)\n+void ThreadSocketHandler()\n {\n-    printf(\"ThreadSocketHandler started\\n\");\n     unsigned int nPrevNodeCount = 0;\n     loop\n     {\n@@ -892,12 +861,10 @@ void ThreadSocketHandler2(void* parg)\n             }\n         }\n \n-        vnThreadsRunning[THREAD_SOCKETHANDLER]--;\n         int nSelect = select(have_fds ? hSocketMax + 1 : 0,\n                              &fdsetRecv, &fdsetSend, &fdsetError, &timeout);\n-        vnThreadsRunning[THREAD_SOCKETHANDLER]++;\n-        if (fShutdown)\n-            return;\n+        boost::this_thread::interruption_point();\n+\n         if (nSelect == SOCKET_ERROR)\n         {\n             if (have_fds)\n@@ -984,8 +951,7 @@ void ThreadSocketHandler2(void* parg)\n         }\n         BOOST_FOREACH(CNode* pnode, vNodesCopy)\n         {\n-            if (fShutdown)\n-                return;\n+            boost::this_thread::interruption_point();\n \n             //\n             // Receive\n@@ -1089,31 +1055,8 @@ void ThreadSocketHandler2(void* parg)\n \n \n #ifdef USE_UPNP\n-void ThreadMapPort(void* parg)\n+void ThreadMapPort()\n {\n-    // Make this thread recognisable as the UPnP thread\n-    RenameThread(\"bitcoin-UPnP\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_UPNP]++;\n-        ThreadMapPort2(parg);\n-        vnThreadsRunning[THREAD_UPNP]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_UPNP]--;\n-        PrintException(&e, \"ThreadMapPort()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_UPNP]--;\n-        PrintException(NULL, \"ThreadMapPort()\");\n-    }\n-    printf(\"ThreadMapPort exited\\n\");\n-}\n-\n-void ThreadMapPort2(void* parg)\n-{\n-    printf(\"ThreadMapPort started\\n\");\n-\n     std::string port = strprintf(\"%u\", GetListenPort());\n     const char * multicastif = 0;\n     const char * minissdpdpath = 0;\n@@ -1154,33 +1097,9 @@ void ThreadMapPort2(void* parg)\n         }\n \n         string strDesc = \"Bitcoin \" + FormatFullVersion();\n-#ifndef UPNPDISCOVER_SUCCESS\n-        /* miniupnpc 1.5 */\n-        r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                            port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0);\n-#else\n-        /* miniupnpc 1.6 */\n-        r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n-                            port.c_str(), port.c_str(), lanaddr, strDesc.c_str(), \"TCP\", 0, \"0\");\n-#endif\n \n-        if(r!=UPNPCOMMAND_SUCCESS)\n-            printf(\"AddPortMapping(%s, %s, %s) failed with code %d (%s)\\n\",\n-                port.c_str(), port.c_str(), lanaddr, r, strupnperror(r));\n-        else\n-            printf(\"UPnP Port Mapping successful.\\n\");\n-        int i = 1;\n-        loop {\n-            if (fShutdown || !fUseUPnP)\n-            {\n-                r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n-                printf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n-                freeUPNPDevlist(devlist); devlist = 0;\n-                FreeUPNPUrls(&urls);\n-                return;\n-            }\n-            if (i % 600 == 0) // Refresh every 20 minutes\n-            {\n+        try {\n+            loop {\n #ifndef UPNPDISCOVER_SUCCESS\n                 /* miniupnpc 1.5 */\n                 r = UPNP_AddPortMapping(urls.controlURL, data.first.servicetype,\n@@ -1196,33 +1115,49 @@ void ThreadMapPort2(void* parg)\n                         port.c_str(), port.c_str(), lanaddr, r, strupnperror(r));\n                 else\n                     printf(\"UPnP Port Mapping successful.\\n\");;\n+\n+                MilliSleep(20*60*1000); // Refresh every 20 minutes\n             }\n-            MilliSleep(2000);\n-            i++;\n+        }\n+        catch (boost::thread_interrupted)\n+        {\n+            r = UPNP_DeletePortMapping(urls.controlURL, data.first.servicetype, port.c_str(), \"TCP\", 0);\n+            printf(\"UPNP_DeletePortMapping() returned : %d\\n\", r);\n+            freeUPNPDevlist(devlist); devlist = 0;\n+            FreeUPNPUrls(&urls);\n+            throw;\n         }\n     } else {\n         printf(\"No valid UPnP IGDs found\\n\");\n         freeUPNPDevlist(devlist); devlist = 0;\n         if (r != 0)\n             FreeUPNPUrls(&urls);\n-        loop {\n-            if (fShutdown || !fUseUPnP)\n-                return;\n-            MilliSleep(2000);\n-        }\n     }\n }\n \n-void MapPort()\n+void MapPort(bool fUseUPnP)\n {\n-    if (fUseUPnP && vnThreadsRunning[THREAD_UPNP] < 1)\n+    static boost::thread* upnp_thread = NULL;\n+\n+    if (fUseUPnP)\n     {\n-        if (!NewThread(ThreadMapPort, NULL))\n-            printf(\"Error: ThreadMapPort(ThreadMapPort) failed\\n\");\n+        if (upnp_thread) {\n+            upnp_thread->interrupt();\n+            upnp_thread->join();\n+            delete upnp_thread;\n+        }\n+        upnp_thread = new boost::thread(boost::bind(&TraceThread<boost::function<void()> >, \"upnp\", &ThreadMapPort));\n+    }\n+    else if (upnp_thread) {\n+        upnp_thread->interrupt();\n+        upnp_thread->join();\n+        delete upnp_thread;\n+        upnp_thread = NULL;\n     }\n }\n+\n #else\n-void MapPort()\n+void MapPort(bool)\n {\n     // Intentionally left blank.\n }\n@@ -1254,32 +1189,10 @@ static const char *strTestNetDNSSeed[][2] = {\n     {NULL, NULL}\n };\n \n-void ThreadDNSAddressSeed(void* parg)\n-{\n-    // Make this thread recognisable as the DNS seeding thread\n-    RenameThread(\"bitcoin-dnsseed\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_DNSSEED]++;\n-        ThreadDNSAddressSeed2(parg);\n-        vnThreadsRunning[THREAD_DNSSEED]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_DNSSEED]--;\n-        PrintException(&e, \"ThreadDNSAddressSeed()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_DNSSEED]--;\n-        throw; // support pthread_cancel()\n-    }\n-    printf(\"ThreadDNSAddressSeed exited\\n\");\n-}\n-\n-void ThreadDNSAddressSeed2(void* parg)\n+void ThreadDNSAddressSeed()\n {\n     static const char *(*strDNSSeed)[2] = fTestNet ? strTestNetDNSSeed : strMainNetDNSSeed;\n \n-    printf(\"ThreadDNSAddressSeed started\\n\");\n     int found = 0;\n \n     printf(\"Loading addresses from DNS seeds (could take a while)\\n\");\n@@ -1409,57 +1322,6 @@ void DumpAddresses()\n            addrman.size(), GetTimeMillis() - nStart);\n }\n \n-void ThreadDumpAddress2(void* parg)\n-{\n-    printf(\"ThreadDumpAddress started\\n\");\n-\n-    vnThreadsRunning[THREAD_DUMPADDRESS]++;\n-    while (!fShutdown)\n-    {\n-        DumpAddresses();\n-        vnThreadsRunning[THREAD_DUMPADDRESS]--;\n-        MilliSleep(100000);\n-        vnThreadsRunning[THREAD_DUMPADDRESS]++;\n-    }\n-    vnThreadsRunning[THREAD_DUMPADDRESS]--;\n-}\n-\n-void ThreadDumpAddress(void* parg)\n-{\n-    // Make this thread recognisable as the address dumping thread\n-    RenameThread(\"bitcoin-adrdump\");\n-\n-    try\n-    {\n-        ThreadDumpAddress2(parg);\n-    }\n-    catch (std::exception& e) {\n-        PrintException(&e, \"ThreadDumpAddress()\");\n-    }\n-    printf(\"ThreadDumpAddress exited\\n\");\n-}\n-\n-void ThreadOpenConnections(void* parg)\n-{\n-    // Make this thread recognisable as the connection opening thread\n-    RenameThread(\"bitcoin-opencon\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n-        ThreadOpenConnections2(parg);\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-        PrintException(&e, \"ThreadOpenConnections()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n-        PrintException(NULL, \"ThreadOpenConnections()\");\n-    }\n-    printf(\"ThreadOpenConnections exited\\n\");\n-}\n-\n void static ProcessOneShot()\n {\n     string strDest;\n@@ -1478,10 +1340,8 @@ void static ProcessOneShot()\n     }\n }\n \n-void ThreadOpenConnections2(void* parg)\n+void ThreadOpenConnections()\n {\n-    printf(\"ThreadOpenConnections started\\n\");\n-\n     // Connect to specific addresses\n     if (mapArgs.count(\"-connect\") && mapMultiArgs[\"-connect\"].size() > 0)\n     {\n@@ -1495,8 +1355,6 @@ void ThreadOpenConnections2(void* parg)\n                 for (int i = 0; i < 10 && i < nLoop; i++)\n                 {\n                     MilliSleep(500);\n-                    if (fShutdown)\n-                        return;\n                 }\n             }\n             MilliSleep(500);\n@@ -1509,18 +1367,10 @@ void ThreadOpenConnections2(void* parg)\n     {\n         ProcessOneShot();\n \n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         MilliSleep(500);\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n-        if (fShutdown)\n-            return;\n \n-\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n         CSemaphoreGrant grant(*semOutbound);\n-        vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n-        if (fShutdown)\n-            return;\n+        boost::this_thread::interruption_point();\n \n         // Add seed nodes if IRC isn't working\n         if (addrman.size()==0 && (GetTime() - nStart > 60) && !fTestNet)\n@@ -1600,38 +1450,15 @@ void ThreadOpenConnections2(void* parg)\n     }\n }\n \n-void ThreadOpenAddedConnections(void* parg)\n+void ThreadOpenAddedConnections()\n {\n-    // Make this thread recognisable as the connection opening thread\n-    RenameThread(\"bitcoin-opencon\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n-        ThreadOpenAddedConnections2(parg);\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-        PrintException(&e, \"ThreadOpenAddedConnections()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n-        PrintException(NULL, \"ThreadOpenAddedConnections()\");\n-    }\n-    printf(\"ThreadOpenAddedConnections exited\\n\");\n-}\n-\n-void ThreadOpenAddedConnections2(void* parg)\n-{\n-    printf(\"ThreadOpenAddedConnections started\\n\");\n-\n     {\n         LOCK(cs_vAddedNodes);\n         vAddedNodes = mapMultiArgs[\"-addnode\"];\n     }\n \n     if (HaveNameProxy()) {\n-        while(!fShutdown) {\n+        while(true) {\n             list<string> lAddresses(0);\n             {\n                 LOCK(cs_vAddedNodes);\n@@ -1643,14 +1470,9 @@ void ThreadOpenAddedConnections2(void* parg)\n                 CSemaphoreGrant grant(*semOutbound);\n                 OpenNetworkConnection(addr, &grant, strAddNode.c_str());\n                 MilliSleep(500);\n-                if (fShutdown)\n-                    return;\n             }\n-            vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n             MilliSleep(120000); // Retry every 2 minutes\n-            vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n         }\n-        return;\n     }\n \n     for (unsigned int i = 0; true; i++)\n@@ -1695,16 +1517,8 @@ void ThreadOpenAddedConnections2(void* parg)\n             CSemaphoreGrant grant(*semOutbound);\n             OpenNetworkConnection(CAddress(vserv[i % vserv.size()]), &grant);\n             MilliSleep(500);\n-            if (fShutdown)\n-                return;\n         }\n-        if (fShutdown)\n-            return;\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]--;\n         MilliSleep(120000); // Retry every 2 minutes\n-        vnThreadsRunning[THREAD_ADDEDCONNECTIONS]++;\n-        if (fShutdown)\n-            return;\n     }\n }\n \n@@ -1714,8 +1528,7 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n     //\n     // Initiate outbound network connection\n     //\n-    if (fShutdown)\n-        return false;\n+    boost::this_thread::interruption_point();\n     if (!strDest)\n         if (IsLocal(addrConnect) ||\n             FindNode((CNetAddr)addrConnect) || CNode::IsBanned(addrConnect) ||\n@@ -1724,11 +1537,9 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n     if (strDest && FindNode(strDest))\n         return false;\n \n-    vnThreadsRunning[THREAD_OPENCONNECTIONS]--;\n     CNode* pnode = ConnectNode(addrConnect, strDest);\n-    vnThreadsRunning[THREAD_OPENCONNECTIONS]++;\n-    if (fShutdown)\n-        return false;\n+    boost::this_thread::interruption_point();\n+\n     if (!pnode)\n         return false;\n     if (grantOutbound)\n@@ -1746,33 +1557,10 @@ bool OpenNetworkConnection(const CAddress& addrConnect, CSemaphoreGrant *grantOu\n \n \n \n-\n-void ThreadMessageHandler(void* parg)\n-{\n-    // Make this thread recognisable as the message handling thread\n-    RenameThread(\"bitcoin-msghand\");\n-\n-    try\n-    {\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n-        ThreadMessageHandler2(parg);\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n-    }\n-    catch (std::exception& e) {\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n-        PrintException(&e, \"ThreadMessageHandler()\");\n-    } catch (...) {\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n-        PrintException(NULL, \"ThreadMessageHandler()\");\n-    }\n-    printf(\"ThreadMessageHandler exited\\n\");\n-}\n-\n-void ThreadMessageHandler2(void* parg)\n+void ThreadMessageHandler()\n {\n-    printf(\"ThreadMessageHandler started\\n\");\n     SetThreadPriority(THREAD_PRIORITY_BELOW_NORMAL);\n-    while (!fShutdown)\n+    while (true)\n     {\n         vector<CNode*> vNodesCopy;\n         {\n@@ -1798,17 +1586,15 @@ void ThreadMessageHandler2(void* parg)\n                     if (!ProcessMessages(pnode))\n                         pnode->CloseSocketDisconnect();\n             }\n-            if (fShutdown)\n-                return;\n+            boost::this_thread::interruption_point();\n \n             // Send messages\n             {\n                 TRY_LOCK(pnode->cs_vSend, lockSend);\n                 if (lockSend)\n                     SendMessages(pnode, pnode == pnodeTrickle);\n             }\n-            if (fShutdown)\n-                return;\n+            boost::this_thread::interruption_point();\n         }\n \n         {\n@@ -1817,16 +1603,7 @@ void ThreadMessageHandler2(void* parg)\n                 pnode->Release();\n         }\n \n-        // Wait and allow messages to bunch up.\n-        // Reduce vnThreadsRunning so StopNode has permission to exit while\n-        // we're sleeping, but we must always check fShutdown after doing this.\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]--;\n         MilliSleep(100);\n-        if (fRequestShutdown)\n-            StartShutdown();\n-        vnThreadsRunning[THREAD_MESSAGEHANDLER]++;\n-        if (fShutdown)\n-            return;\n     }\n }\n \n@@ -2000,6 +1777,8 @@ void static Discover()\n \n void StartNode(void* parg)\n {\n+    boost::thread_group* threadGroup = (boost::thread_group*)parg;\n+\n     // Make this thread recognisable as the startup thread\n     RenameThread(\"bitcoin-start\");\n \n@@ -2021,38 +1800,32 @@ void StartNode(void* parg)\n     if (!GetBoolArg(\"-dnsseed\", true))\n         printf(\"DNS seeding disabled\\n\");\n     else\n-        if (!NewThread(ThreadDNSAddressSeed, NULL))\n-            printf(\"Error: NewThread(ThreadDNSAddressSeed) failed\\n\");\n+        threadGroup->create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", &ThreadDNSAddressSeed));\n \n     // Map ports with UPnP\n-    if (fUseUPnP)\n-        MapPort();\n+    MapPort(GetBoolArg(\"-upnp\", USE_UPNP));\n \n     // Send and receive from sockets, accept connections\n-    if (!NewThread(ThreadSocketHandler, NULL))\n-        printf(\"Error: NewThread(ThreadSocketHandler) failed\\n\");\n+    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n \n     // Initiate outbound connections from -addnode\n-    if (!NewThread(ThreadOpenAddedConnections, NULL))\n-        printf(\"Error: NewThread(ThreadOpenAddedConnections) failed\\n\");\n+    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n \n     // Initiate outbound connections\n-    if (!NewThread(ThreadOpenConnections, NULL))\n-        printf(\"Error: NewThread(ThreadOpenConnections) failed\\n\");\n+    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n \n     // Process messages\n-    if (!NewThread(ThreadMessageHandler, NULL))\n-        printf(\"Error: NewThread(ThreadMessageHandler) failed\\n\");\n+    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    if (!NewThread(ThreadDumpAddress, NULL))\n-        printf(\"Error; NewThread(ThreadDumpAddress) failed\\n\");\n+    threadGroup->create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n }\n \n bool StopNode()\n {\n     printf(\"StopNode()\\n\");\n     GenerateBitcoins(false, NULL);\n+    MapPort(false);\n     fShutdown = true;\n     nTransactionsUpdated++;\n     int64 nStart = GetTime();\n@@ -2070,19 +1843,6 @@ bool StopNode()\n             break;\n         MilliSleep(20);\n     } while(true);\n-    if (vnThreadsRunning[THREAD_SOCKETHANDLER] > 0) printf(\"ThreadSocketHandler still running\\n\");\n-    if (vnThreadsRunning[THREAD_OPENCONNECTIONS] > 0) printf(\"ThreadOpenConnections still running\\n\");\n-    if (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0) printf(\"ThreadMessageHandler still running\\n\");\n-    if (vnThreadsRunning[THREAD_RPCLISTENER] > 0) printf(\"ThreadRPCListener still running\\n\");\n-    if (vnThreadsRunning[THREAD_RPCHANDLER] > 0) printf(\"ThreadsRPCServer still running\\n\");\n-#ifdef USE_UPNP\n-    if (vnThreadsRunning[THREAD_UPNP] > 0) printf(\"ThreadMapPort still running\\n\");\n-#endif\n-    if (vnThreadsRunning[THREAD_DNSSEED] > 0) printf(\"ThreadDNSAddressSeed still running\\n\");\n-    if (vnThreadsRunning[THREAD_ADDEDCONNECTIONS] > 0) printf(\"ThreadOpenAddedConnections still running\\n\");\n-    if (vnThreadsRunning[THREAD_DUMPADDRESS] > 0) printf(\"ThreadDumpAddresses still running\\n\");\n-    while (vnThreadsRunning[THREAD_MESSAGEHANDLER] > 0 || vnThreadsRunning[THREAD_RPCHANDLER] > 0)\n-        MilliSleep(20);\n     MilliSleep(50);\n     DumpAddresses();\n "
      },
      {
        "sha": "1a6f7d4de372b1e23c2439d7bdcc23ae92650d35",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 14,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -37,7 +37,7 @@ void AddressCurrentlyConnected(const CService& addr);\n CNode* FindNode(const CNetAddr& ip);\n CNode* FindNode(const CService& ip);\n CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTimeout=0);\n-void MapPort();\n+void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError=REF(std::string()));\n void StartNode(void* parg);\n@@ -72,23 +72,10 @@ CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n /** Thread types */\n enum threadId\n {\n-    THREAD_SOCKETHANDLER,\n-    THREAD_OPENCONNECTIONS,\n-    THREAD_MESSAGEHANDLER,\n-    THREAD_RPCLISTENER,\n-    THREAD_UPNP,\n-    THREAD_DNSSEED,\n-    THREAD_ADDEDCONNECTIONS,\n-    THREAD_DUMPADDRESS,\n-    THREAD_RPCHANDLER,\n-    THREAD_IMPORT,\n-    THREAD_SCRIPTCHECK,\n-\n     THREAD_MAX\n };\n \n extern bool fDiscover;\n-extern bool fUseUPnP;\n extern uint64 nLocalServices;\n extern uint64 nLocalHostNonce;\n extern boost::array<int, THREAD_MAX> vnThreadsRunning;"
      },
      {
        "sha": "6b1b4e3d8e76033c176df28712e917defe76c83d",
        "filename": "src/qt/optionsmodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/qt/optionsmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/qt/optionsmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsmodel.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -219,9 +219,8 @@ bool OptionsModel::setData(const QModelIndex & index, const QVariant & value, in\n             settings.setValue(\"fMinimizeToTray\", fMinimizeToTray);\n             break;\n         case MapPortUPnP:\n-            fUseUPnP = value.toBool();\n-            settings.setValue(\"fUseUPnP\", fUseUPnP);\n-            MapPort();\n+            settings.setValue(\"fUseUPnP\", value.toBool());\n+            MapPort(value.toBool());\n             break;\n         case MinimizeOnClose:\n             fMinimizeOnClose = value.toBool();"
      },
      {
        "sha": "1bf9a28acc11d0941afb1e1860baeb0f1b711706",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/21eb5adadbe3110a8708f2570185566e1f137a49/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/21eb5adadbe3110a8708f2570185566e1f137a49/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=21eb5adadbe3110a8708f2570185566e1f137a49",
        "patch": "@@ -17,6 +17,7 @@ extern void noui_connect();\n struct TestingSetup {\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n+    boost::thread_group threadGroup;\n \n     TestingSetup() {\n         fPrintToDebugger = true; // don't want to write to debug.log file\n@@ -35,11 +36,12 @@ struct TestingSetup {\n         RegisterWallet(pwalletMain);\n         nScriptCheckThreads = 3;\n         for (int i=0; i < nScriptCheckThreads-1; i++)\n-            NewThread(ThreadScriptCheck, NULL);\n+            threadGroup.create_thread(&ThreadScriptCheck);\n     }\n     ~TestingSetup()\n     {\n-        ThreadScriptCheckQuit();\n+        threadGroup.interrupt_all();\n+        threadGroup.join_all();\n         delete pwalletMain;\n         pwalletMain = NULL;\n         delete pcoinsTip;"
      }
    ]
  },
  {
    "sha": "b31499ec72edd1554d4612d1b54808fce0360e14",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMzE0OTllYzcyZWRkMTU1NGQ0NjEyZDFiNTQ4MDhmY2UwMzYwZTE0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-09T17:02:57Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T23:57:53Z"
      },
      "message": "Clean up shutdown process",
      "tree": {
        "sha": "a2d03852b9fd6e9595470210479f212ccf4313f1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a2d03852b9fd6e9595470210479f212ccf4313f1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b31499ec72edd1554d4612d1b54808fce0360e14",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b31499ec72edd1554d4612d1b54808fce0360e14",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b31499ec72edd1554d4612d1b54808fce0360e14",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b31499ec72edd1554d4612d1b54808fce0360e14/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "21eb5adadbe3110a8708f2570185566e1f137a49",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/21eb5adadbe3110a8708f2570185566e1f137a49",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/21eb5adadbe3110a8708f2570185566e1f137a49"
      }
    ],
    "stats": {
      "total": 323,
      "additions": 146,
      "deletions": 177
    },
    "files": [
      {
        "sha": "9c126fc3da0bf7c0d6ea9064abe41004b33ef7cd",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 4,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -1221,13 +1221,14 @@ int CommandLineRPC(int argc, char *argv[])\n                 strPrint = write_string(result, true);\n         }\n     }\n-    catch (std::exception& e)\n-    {\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n+    catch (std::exception& e) {\n         strPrint = string(\"error: \") + e.what();\n         nRet = 87;\n     }\n-    catch (...)\n-    {\n+    catch (...) {\n         PrintException(NULL, \"CommandLineRPC()\");\n     }\n \n@@ -1265,6 +1266,9 @@ int main(int argc, char *argv[])\n             return CommandLineRPC(argc, argv);\n         }\n     }\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n     catch (std::exception& e) {\n         PrintException(&e, \"main()\");\n     } catch (...) {"
      },
      {
        "sha": "35d6cca890a092f7fa861eaec295a31871b947f5",
        "filename": "src/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -62,8 +62,7 @@ bool CDBEnv::Open(const boost::filesystem::path& path)\n     if (fDbEnvInit)\n         return true;\n \n-    if (fShutdown)\n-        return false;\n+    boost::this_thread::interruption_point();\n \n     strPath = path.string();\n     filesystem::path pathLogDir = path / \"database\";\n@@ -108,8 +107,7 @@ void CDBEnv::MakeMock()\n     if (fDbEnvInit)\n         throw runtime_error(\"CDBEnv::MakeMock(): already initialized\");\n \n-    if (fShutdown)\n-        throw runtime_error(\"CDBEnv::MakeMock(): during shutdown\");\n+    boost::this_thread::interruption_point();\n \n     printf(\"CDBEnv::MakeMock()\\n\");\n \n@@ -327,7 +325,7 @@ bool CDBEnv::RemoveDb(const string& strFile)\n \n bool CDB::Rewrite(const string& strFile, const char* pszSkip)\n {\n-    while (!fShutdown)\n+    while (true)\n     {\n         {\n             LOCK(bitdb.cs_db);"
      },
      {
        "sha": "206da91e9ee836effe020e0ea5ac3d74ee35d344",
        "filename": "src/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/db.h?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -24,7 +24,7 @@ class CWalletTx;\n \n extern unsigned int nWalletDBUpdated;\n \n-void ThreadFlushWalletDB(void* parg);\n+void ThreadFlushWalletDB(const std::string& strWalletFile);\n bool BackupWallet(const CWallet& wallet, const std::string& strDest);\n \n "
      },
      {
        "sha": "3ccd01e3bca25039b52bfb8db214527828f77c9f",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 93,
        "deletions": 100,
        "changes": 193,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -40,85 +40,79 @@ enum BindFlags {\n // Shutdown\n //\n \n-void ExitTimeout(void* parg)\n-{\n-#ifdef WIN32\n-    MilliSleep(5000);\n-    ExitProcess(0);\n-#endif\n-}\n+//\n+// Thread management and startup/shutdown:\n+//\n+// The network-processing threads are all part of a thread group\n+// created by AppInit() or the Qt main() function.\n+//\n+// A clean exit happens when StartShutdown() or the SIGTERM\n+// signal handler sets fRequestShutdown, which triggers\n+// the DetectShutdownThread(), which interrupts the main thread group.\n+// DetectShutdownThread() then exits, which causes AppInit() to\n+// continue (it .joins the shutdown thread).\n+// Shutdown() is then\n+// called to clean up database connections, and stop other\n+// threads that should only be stopped after the main network-processing\n+// threads have exited.\n+//\n+// Note that if running -daemon the parent process returns from AppInit2\n+// before adding any threads to the threadGroup, so .join_all() returns\n+// immediately and the parent exits from main().\n+//\n+// Shutdown for Qt is very similar, only it uses a QTimer to detect\n+// fRequestShutdown getting set (either by RPC stop or SIGTERM)\n+// and then does the normal Qt shutdown thing.\n+//\n+\n+volatile bool fRequestShutdown = false;\n \n void StartShutdown()\n {\n-#ifdef QT_GUI\n-    // ensure we leave the Qt main loop for a clean GUI exit (Shutdown() is called in bitcoin.cpp afterwards)\n-    uiInterface.QueueShutdown();\n-#else\n-    // Without UI, Shutdown() can simply be started in a new thread\n-    NewThread(Shutdown, NULL);\n-#endif\n+    fRequestShutdown = true;\n }\n \n static CCoinsViewDB *pcoinsdbview;\n \n-void Shutdown(void* parg)\n+void Shutdown()\n {\n     static CCriticalSection cs_Shutdown;\n-    static bool fTaken;\n+    TRY_LOCK(cs_Shutdown, lockShutdown);\n+    if (!lockShutdown) return;\n \n-    // Make this thread recognisable as the shutdown thread\n     RenameThread(\"bitcoin-shutoff\");\n     nTransactionsUpdated++;\n     StopRPCThreads();\n     bitdb.Flush(false);\n     StopNode();\n     {\n-        fShutdown = true;\n-        fRequestShutdown = true;\n-        nTransactionsUpdated++;\n-        StopRPCThreads();\n-        bitdb.Flush(false);\n-        StopNode();\n-        {\n-            LOCK(cs_main);\n-            if (pblocktree)\n-                pblocktree->Flush();\n-            if (pcoinsTip)\n-                pcoinsTip->Flush();\n-            delete pcoinsTip;\n-            delete pcoinsdbview;\n-            delete pblocktree;\n-        }\n-        bitdb.Flush(true);\n-        boost::filesystem::remove(GetPidFile());\n-        UnregisterWallet(pwalletMain);\n-        delete pwalletMain;\n-        NewThread(ExitTimeout, NULL);\n-        MilliSleep(50);\n-        printf(\"Bitcoin exited\\n\\n\");\n-        fExit = true;\n-#ifndef QT_GUI\n-        // ensure non-UI client gets exited here, but let Bitcoin-Qt reach 'return 0;' in bitcoin.cpp\n-        exit(0);\n-#endif\n-    }\n-    else\n-    {\n-        while (!fExit)\n-            MilliSleep(500);\n-        MilliSleep(100);\n-        ExitThread(0);\n+        LOCK(cs_main);\n+        if (pblocktree)\n+            pblocktree->Flush();\n+        if (pcoinsTip)\n+            pcoinsTip->Flush();\n+        delete pcoinsTip; pcoinsTip = NULL;\n+        delete pcoinsdbview; pcoinsdbview = NULL;\n+        delete pblocktree; pblocktree = NULL;\n     }\n+    bitdb.Flush(true);\n+    boost::filesystem::remove(GetPidFile());\n+    UnregisterWallet(pwalletMain);\n+    delete pwalletMain;\n }\n \n //\n // Signal handlers are very limited in what they are allowed to do, so:\n //\n void DetectShutdownThread(boost::thread_group* threadGroup)\n {\n-    while (fRequestShutdown == false)\n+    // Tell the main threads to shutdown.\n+    while (!fRequestShutdown)\n+    {\n         MilliSleep(200);\n-    threadGroup->interrupt_all();\n+        if (fRequestShutdown)\n+            threadGroup->interrupt_all();\n+    }\n }\n \n void HandleSIGTERM(int)\n@@ -143,6 +137,8 @@ void HandleSIGHUP(int)\n bool AppInit(int argc, char* argv[])\n {\n     boost::thread_group threadGroup;\n+    boost::thread* detectShutdownThread = NULL;\n+\n     bool fRet = false;\n     try\n     {\n@@ -154,7 +150,7 @@ bool AppInit(int argc, char* argv[])\n         if (!boost::filesystem::is_directory(GetDataDir(false)))\n         {\n             fprintf(stderr, \"Error: Specified directory does not exist\\n\");\n-            Shutdown(NULL);\n+            Shutdown();\n         }\n         ReadConfigFile(mapArgs, mapMultiArgs);\n \n@@ -184,20 +180,52 @@ bool AppInit(int argc, char* argv[])\n             int ret = CommandLineRPC(argc, argv);\n             exit(ret);\n         }\n+#if !defined(WIN32)\n+        fDaemon = GetBoolArg(\"-daemon\");\n+        if (fDaemon)\n+        {\n+            // Daemonize\n+            pid_t pid = fork();\n+            if (pid < 0)\n+            {\n+                fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);\n+                return false;\n+            }\n+            if (pid > 0) // Parent process, pid is child process id\n+            {\n+                CreatePidFile(GetPidFile(), pid);\n+                return true;\n+            }\n+            // Child process falls through to rest of initialization\n+\n+            pid_t sid = setsid();\n+            if (sid < 0)\n+                fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);\n+        }\n+#endif\n \n+        detectShutdownThread = new boost::thread(boost::bind(&DetectShutdownThread, &threadGroup));\n         fRet = AppInit2(threadGroup);\n     }\n     catch (std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n     } catch (...) {\n         PrintExceptionContinue(NULL, \"AppInit()\");\n     }\n-    if (!fRet)\n+    if (!fRet) {\n+      if (detectShutdownThread)\n+        detectShutdownThread->interrupt();\n+      threadGroup.interrupt_all();\n+    }\n+\n+    if (detectShutdownThread)\n     {\n-        Shutdown(NULL);\n-        threadGroup.interrupt_all();\n-        threadGroup.join_all();\n+        detectShutdownThread->join();\n+        delete detectShutdownThread;\n+\tdetectShutdownThread = NULL;\n     }\n+    Shutdown();\n+\n     return fRet;\n }\n \n@@ -214,7 +242,7 @@ int main(int argc, char* argv[])\n     if (fRet && fDaemon)\n         return 0;\n \n-    return 1;\n+    return (fRet ? 0 : 1);\n }\n #endif\n \n@@ -302,7 +330,7 @@ std::string HelpMessage()\n         \"  -rpcport=<port>        \" + _(\"Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)\") + \"\\n\" +\n         \"  -rpcallowip=<ip>       \" + _(\"Allow JSON-RPC connections from specified IP address\") + \"\\n\" +\n         \"  -rpcconnect=<ip>       \" + _(\"Send commands to node running on <ip> (default: 127.0.0.1)\") + \"\\n\" +\n-        \"  -rpcthreads=<n>        \" + _(\"Use this mean threads to service RPC calls (default: 4)\") + \"\\n\" +\n+        \"  -rpcthreads=<n>        \" + _(\"Use this many threads to service RPC calls (default: 4)\") + \"\\n\" +\n         \"  -blocknotify=<cmd>     \" + _(\"Execute command when the best block changes (%s in cmd is replaced by block hash)\") + \"\\n\" +\n         \"  -walletnotify=<cmd>    \" + _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\") + \"\\n\" +\n         \"  -alertnotify=<cmd>     \" + _(\"Execute command when a relevant alert is received (%s in cmd is replaced by message)\") + \"\\n\" +\n@@ -440,8 +468,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     sigaction(SIGHUP, &sa_hup, NULL);\n #endif\n \n-    threadGroup.create_thread(boost::bind(&DetectShutdownThread, &threadGroup));\n-\n     // ********************************************************* Step 2: parameter interactions\n \n     fTestNet = GetBoolArg(\"-testnet\");\n@@ -499,12 +525,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     else\n         fDebugNet = GetBoolArg(\"-debugnet\");\n \n-#if !defined(WIN32) && !defined(QT_GUI)\n-    fDaemon = GetBoolArg(\"-daemon\");\n-#else\n-    fDaemon = false;\n-#endif\n-\n     if (fDaemon)\n         fServer = true;\n     else\n@@ -552,28 +572,6 @@ bool AppInit2(boost::thread_group& threadGroup)\n     if (!lock.try_lock())\n         return InitError(strprintf(_(\"Cannot obtain a lock on data directory %s. Bitcoin is probably already running.\"), strDataDir.c_str()));\n \n-#if !defined(WIN32) && !defined(QT_GUI)\n-    if (fDaemon)\n-    {\n-        // Daemonize\n-        pid_t pid = fork();\n-        if (pid < 0)\n-        {\n-            fprintf(stderr, \"Error: fork() returned %d errno %d\\n\", pid, errno);\n-            return false;\n-        }\n-        if (pid > 0)\n-        {\n-            CreatePidFile(GetPidFile(), pid);\n-            return true;\n-        }\n-\n-        pid_t sid = setsid();\n-        if (sid < 0)\n-            fprintf(stderr, \"Error: setsid() returned %d errno %d\\n\", sid, errno);\n-    }\n-#endif\n-\n     if (GetBoolArg(\"-shrinkdebugfile\", !fDebug))\n         ShrinkDebugFile();\n     printf(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\");\n@@ -1011,8 +1009,7 @@ bool AppInit2(boost::thread_group& threadGroup)\n     printf(\"mapWallet.size() = %\"PRIszu\"\\n\",       pwalletMain->mapWallet.size());\n     printf(\"mapAddressBook.size() = %\"PRIszu\"\\n\",  pwalletMain->mapAddressBook.size());\n \n-    if (!NewThread(StartNode, (void*)&threadGroup))\n-        InitError(_(\"Error: could not start node\"));\n+    StartNode(threadGroup);\n \n     if (fServer)\n         StartRPCThreads();\n@@ -1030,12 +1027,8 @@ bool AppInit2(boost::thread_group& threadGroup)\n      // Add wallet transactions that aren't already in a block to mapTransactions\n     pwalletMain->ReacceptWalletTransactions();\n \n-#if !defined(QT_GUI)\n-    // Loop until process is exit()ed from shutdown() function,\n-    // called from ThreadRPCServer thread when a \"stop\" command is received.\n-    while (1)\n-        MilliSleep(5000);\n-#endif\n+    // Run a thread to flush wallet periodically\n+    threadGroup.create_thread(boost::bind(&ThreadFlushWalletDB, boost::ref(pwalletMain->strWalletFile)));\n \n-    return true;\n+    return !fRequestShutdown;\n }"
      },
      {
        "sha": "2968ca5610f54eeba112be10982169bc4eae2e19",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -7,11 +7,10 @@\n \n #include \"wallet.h\"\n \n-class boost::thread_group;\n extern CWallet* pwalletMain;\n \n void StartShutdown();\n-void Shutdown(void* parg);\n+void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup);\n std::string HelpMessage();\n "
      },
      {
        "sha": "57a4df0853233a301634b2c2bd1e20d15c6eceae",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 15,
        "changes": 29,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -1256,8 +1256,7 @@ bool ConnectBestBlock(CValidationState &state) {\n             if (pindexTest->pprev == NULL || pindexTest->pnext != NULL) {\n                 reverse(vAttach.begin(), vAttach.end());\n                 BOOST_FOREACH(CBlockIndex *pindexSwitch, vAttach) {\n-                    if (fRequestShutdown)\n-                        break;\n+                    boost::this_thread::interruption_point();\n                     try {\n                         if (!SetBestChain(state, pindexSwitch))\n                             return false;\n@@ -2457,7 +2456,6 @@ uint256 CPartialMerkleTree::ExtractMatches(std::vector<uint256> &vMatch) {\n \n \n bool AbortNode(const std::string &strMessage) {\n-    fRequestShutdown = true;\n     strMiscWarning = strMessage;\n     printf(\"*** %s\\n\", strMessage.c_str());\n     uiInterface.ThreadSafeMessageBox(strMessage, \"\", CClientUIInterface::MSG_ERROR);\n@@ -2536,8 +2534,7 @@ bool static LoadBlockIndexDB()\n     if (!pblocktree->LoadBlockIndexGuts())\n         return false;\n \n-    if (fRequestShutdown)\n-        return true;\n+    boost::this_thread::interruption_point();\n \n     // Calculate bnChainWork\n     vector<pair<int, CBlockIndex*> > vSortedByHeight;\n@@ -2617,7 +2614,8 @@ bool VerifyDB() {\n     CValidationState state;\n     for (CBlockIndex* pindex = pindexBest; pindex && pindex->pprev; pindex = pindex->pprev)\n     {\n-        if (fRequestShutdown || pindex->nHeight < nBestHeight-nCheckDepth)\n+        boost::this_thread::interruption_point();\n+        if (pindex->nHeight < nBestHeight-nCheckDepth)\n             break;\n         CBlock block;\n         // check level 0: read from disk\n@@ -2654,7 +2652,8 @@ bool VerifyDB() {\n     // check level 4: try reconnecting blocks\n     if (nCheckLevel >= 4) {\n         CBlockIndex *pindex = pindexState;\n-        while (pindex != pindexBest && !fRequestShutdown) {\n+        while (pindex != pindexBest) {\n+            boost::this_thread::interruption_point();\n              pindex = pindex->pnext;\n              CBlock block;\n              if (!block.ReadFromDisk(pindex))\n@@ -3038,8 +3037,7 @@ void static ProcessGetData(CNode* pfrom)\n \n         const CInv &inv = *it;\n         {\n-            if (fShutdown)\n-                break;\n+            boost::this_thread::interruption_point();\n             it++;\n \n             if (inv.type == MSG_BLOCK || inv.type == MSG_FILTERED_BLOCK)\n@@ -3297,8 +3295,8 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         int64 nSince = nNow - 10 * 60;\n         BOOST_FOREACH(CAddress& addr, vAddr)\n         {\n-            if (fShutdown)\n-                return true;\n+            boost::this_thread::interruption_point();\n+\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);\n@@ -3366,8 +3364,7 @@ bool static ProcessMessage(CNode* pfrom, string strCommand, CDataStream& vRecv)\n         {\n             const CInv &inv = vInv[nInv];\n \n-            if (fShutdown)\n-                return true;\n+            boost::this_thread::interruption_point();\n             pfrom->AddInventoryKnown(inv);\n \n             bool fAlreadyHave = AlreadyHave(inv);\n@@ -3799,8 +3796,7 @@ bool ProcessMessages(CNode* pfrom)\n                 LOCK(cs_main);\n                 fRet = ProcessMessage(pfrom, strCommand, vRecv);\n             }\n-            if (fShutdown)\n-                break;\n+            boost::this_thread::interruption_point();\n         }\n         catch (std::ios_base::failure& e)\n         {\n@@ -3819,6 +3815,9 @@ bool ProcessMessages(CNode* pfrom)\n                 PrintExceptionContinue(&e, \"ProcessMessages()\");\n             }\n         }\n+        catch (boost::thread_interrupted) {\n+            throw;\n+        }\n         catch (std::exception& e) {\n             PrintExceptionContinue(&e, \"ProcessMessages()\");\n         } catch (...) {"
      },
      {
        "sha": "f1ece2c2e94e78c29da8acc4cfdd4404937b9cad",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 25,
        "changes": 35,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -45,7 +45,6 @@ static bool vfReachable[NET_MAX] = {};\n static bool vfLimited[NET_MAX] = {};\n static CNode* pnodeLocalHost = NULL;\n uint64 nLocalHostNonce = 0;\n-array<int, THREAD_MAX> vnThreadsRunning;\n static std::vector<SOCKET> vhListenSocket;\n CAddrMan addrman;\n \n@@ -147,8 +146,7 @@ bool RecvLine(SOCKET hSocket, string& strLine)\n         }\n         else if (nBytes <= 0)\n         {\n-            if (fShutdown)\n-                return false;\n+            boost::this_thread::interruption_point();\n             if (nBytes < 0)\n             {\n                 int nErr = WSAGetLastError();\n@@ -1775,10 +1773,8 @@ void static Discover()\n         NewThread(ThreadGetMyExternalIP, NULL);\n }\n \n-void StartNode(void* parg)\n+void StartNode(boost::thread_group& threadGroup)\n {\n-    boost::thread_group* threadGroup = (boost::thread_group*)parg;\n-\n     // Make this thread recognisable as the startup thread\n     RenameThread(\"bitcoin-start\");\n \n@@ -1800,49 +1796,38 @@ void StartNode(void* parg)\n     if (!GetBoolArg(\"-dnsseed\", true))\n         printf(\"DNS seeding disabled\\n\");\n     else\n-        threadGroup->create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", &ThreadDNSAddressSeed));\n+        threadGroup.create_thread(boost::bind(&TraceThread<boost::function<void()> >, \"dnsseed\", &ThreadDNSAddressSeed));\n \n+#ifdef USE_UPNP\n     // Map ports with UPnP\n     MapPort(GetBoolArg(\"-upnp\", USE_UPNP));\n+#endif\n \n     // Send and receive from sockets, accept connections\n-    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"net\", &ThreadSocketHandler));\n \n     // Initiate outbound connections from -addnode\n-    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"addcon\", &ThreadOpenAddedConnections));\n \n     // Initiate outbound connections\n-    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"opencon\", &ThreadOpenConnections));\n \n     // Process messages\n-    threadGroup->create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n+    threadGroup.create_thread(boost::bind(&TraceThread<void (*)()>, \"msghand\", &ThreadMessageHandler));\n \n     // Dump network addresses\n-    threadGroup->create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n+    threadGroup.create_thread(boost::bind(&LoopForever<void (*)()>, \"dumpaddr\", &DumpAddresses, 10000));\n }\n \n bool StopNode()\n {\n     printf(\"StopNode()\\n\");\n     GenerateBitcoins(false, NULL);\n     MapPort(false);\n-    fShutdown = true;\n     nTransactionsUpdated++;\n-    int64 nStart = GetTime();\n     if (semOutbound)\n         for (int i=0; i<MAX_OUTBOUND_CONNECTIONS; i++)\n             semOutbound->post();\n-    do\n-    {\n-        int nThreadsRunning = 0;\n-        for (int n = 0; n < THREAD_MAX; n++)\n-            nThreadsRunning += vnThreadsRunning[n];\n-        if (nThreadsRunning == 0)\n-            break;\n-        if (GetTime() - nStart > 20)\n-            break;\n-        MilliSleep(20);\n-    } while(true);\n     MilliSleep(50);\n     DumpAddresses();\n "
      },
      {
        "sha": "65e83f909cab4c4594afcd2d99ab7f54a824a5ea",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -40,7 +40,7 @@ CNode* ConnectNode(CAddress addrConnect, const char *strDest = NULL, int64 nTime\n void MapPort(bool fUseUPnP);\n unsigned short GetListenPort();\n bool BindListenPort(const CService &bindAddr, std::string& strError=REF(std::string()));\n-void StartNode(void* parg);\n+void StartNode(boost::thread_group& threadGroup);\n bool StopNode();\n void SocketSendData(CNode *pnode);\n \n@@ -69,16 +69,9 @@ void SetReachable(enum Network net, bool fFlag = true);\n CAddress GetLocalAddress(const CNetAddr *paddrPeer = NULL);\n \n \n-/** Thread types */\n-enum threadId\n-{\n-    THREAD_MAX\n-};\n-\n extern bool fDiscover;\n extern uint64 nLocalServices;\n extern uint64 nLocalHostNonce;\n-extern boost::array<int, THREAD_MAX> vnThreadsRunning;\n extern CAddrMan addrman;\n \n extern std::vector<CNode*> vNodes;"
      },
      {
        "sha": "b61921fca0183169982a367d53847192142526bd",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -260,9 +260,9 @@ int main(int argc, char *argv[])\n                 guiref = 0;\n             }\n             // Shutdown the core and its threads, but don't exit Bitcoin-Qt here\n-            Shutdown(NULL);\n             threadGroup.interrupt_all();\n             threadGroup.join_all();\n+            Shutdown();\n         }\n         else\n         {"
      },
      {
        "sha": "5b0527c76c1edee7f13815c0b319cdf08d27c0d4",
        "filename": "src/txdb.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/txdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/txdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txdb.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -115,12 +115,13 @@ bool CCoinsViewDB::GetStats(CCoinsStats &stats) {\n     pcursor->SeekToFirst();\n \n     while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n         try {\n             leveldb::Slice slKey = pcursor->key();\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'c' && !fRequestShutdown) {\n+            if (chType == 'c') {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CCoins coins;\n@@ -178,12 +179,13 @@ bool CBlockTreeDB::LoadBlockIndexGuts()\n \n     // Load mapBlockIndex\n     while (pcursor->Valid()) {\n+        boost::this_thread::interruption_point();\n         try {\n             leveldb::Slice slKey = pcursor->key();\n             CDataStream ssKey(slKey.data(), slKey.data()+slKey.size(), SER_DISK, CLIENT_VERSION);\n             char chType;\n             ssKey >> chType;\n-            if (chType == 'b' && !fRequestShutdown) {\n+            if (chType == 'b') {\n                 leveldb::Slice slValue = pcursor->value();\n                 CDataStream ssValue(slValue.data(), slValue.data()+slValue.size(), SER_DISK, CLIENT_VERSION);\n                 CDiskBlockIndex diskindex;"
      },
      {
        "sha": "9f5e08a1482f732d85327eee719f88504940b06d",
        "filename": "src/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -73,8 +73,6 @@ bool fDebug = false;\n bool fDebugNet = false;\n bool fPrintToConsole = false;\n bool fPrintToDebugger = false;\n-volatile bool fRequestShutdown = false;\n-bool fShutdown = false;\n bool fDaemon = false;\n bool fServer = false;\n bool fCommandLine = false;"
      },
      {
        "sha": "4d7c81be0b06036b2030e7ef85e97d12609ba4cf",
        "filename": "src/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util.h?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -134,8 +134,6 @@ extern bool fDebug;\n extern bool fDebugNet;\n extern bool fPrintToConsole;\n extern bool fPrintToDebugger;\n-extern volatile bool fRequestShutdown;\n-extern bool fShutdown;\n extern bool fDaemon;\n extern bool fServer;\n extern bool fCommandLine;"
      },
      {
        "sha": "5761b008f3cf1298e1683beb78cbb113bdb7b251",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -1383,7 +1383,6 @@ DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n         return nLoadWalletRet;\n     fFirstRunRet = !vchDefaultKey.IsValid();\n \n-    NewThread(ThreadFlushWalletDB, &strWalletFile);\n     return DB_LOAD_OK;\n }\n "
      },
      {
        "sha": "e750bfd89e7df5f1caed90829a66f5d83ee67c21",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -327,8 +327,7 @@ class CReserveKey\n \n     ~CReserveKey()\n     {\n-        if (!fShutdown)\n-            ReturnKey();\n+        ReturnKey();\n     }\n \n     void ReturnKey();"
      },
      {
        "sha": "abaf5a0fd1fac32eaad477c0f0884fab25ca19a4",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b31499ec72edd1554d4612d1b54808fce0360e14/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b31499ec72edd1554d4612d1b54808fce0360e14/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=b31499ec72edd1554d4612d1b54808fce0360e14",
        "patch": "@@ -451,8 +451,10 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n         }\n         pcursor->close();\n     }\n-    catch (...)\n-    {\n+    catch (boost::thread_interrupted) {\n+        throw;\n+    }\n+    catch (...) {\n         result = DB_CORRUPT;\n     }\n \n@@ -482,12 +484,11 @@ DBErrors CWalletDB::LoadWallet(CWallet* pwallet)\n     return result;\n }\n \n-void ThreadFlushWalletDB(void* parg)\n+void ThreadFlushWalletDB(const string& strFile)\n {\n     // Make this thread recognisable as the wallet flushing thread\n     RenameThread(\"bitcoin-wallet\");\n \n-    const string& strFile = ((const string*)parg)[0];\n     static bool fOneThread;\n     if (fOneThread)\n         return;\n@@ -498,7 +499,7 @@ void ThreadFlushWalletDB(void* parg)\n     unsigned int nLastSeen = nWalletDBUpdated;\n     unsigned int nLastFlushed = nWalletDBUpdated;\n     int64 nLastWalletUpdate = GetTime();\n-    while (!fShutdown)\n+    while (true)\n     {\n         MilliSleep(500);\n \n@@ -522,8 +523,9 @@ void ThreadFlushWalletDB(void* parg)\n                     mi++;\n                 }\n \n-                if (nRefCount == 0 && !fShutdown)\n+                if (nRefCount == 0)\n                 {\n+                    boost::this_thread::interruption_point();\n                     map<string, int>::iterator mi = bitdb.mapFileUseCount.find(strFile);\n                     if (mi != bitdb.mapFileUseCount.end())\n                     {\n@@ -548,7 +550,7 @@ bool BackupWallet(const CWallet& wallet, const string& strDest)\n {\n     if (!wallet.fFileBacked)\n         return false;\n-    while (!fShutdown)\n+    while (true)\n     {\n         {\n             LOCK(bitdb.cs_db);"
      }
    ]
  },
  {
    "sha": "723035bb6839c5d65bfee96d501a8c54814778e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjMwMzViYjY4MzljNWQ2NWJmZWU5NmQ1MDFhOGM1NDgxNDc3OGUz",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-03-23T22:14:12Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2013-04-03T23:58:47Z"
      },
      "message": "Have Qt poll for shutdown requested, the QT way.",
      "tree": {
        "sha": "d0d80686edc2c25446fcb0a67d68c8c12722f935",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d0d80686edc2c25446fcb0a67d68c8c12722f935"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/723035bb6839c5d65bfee96d501a8c54814778e3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723035bb6839c5d65bfee96d501a8c54814778e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/723035bb6839c5d65bfee96d501a8c54814778e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/723035bb6839c5d65bfee96d501a8c54814778e3/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b31499ec72edd1554d4612d1b54808fce0360e14",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b31499ec72edd1554d4612d1b54808fce0360e14",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b31499ec72edd1554d4612d1b54808fce0360e14"
      }
    ],
    "stats": {
      "total": 34,
      "additions": 23,
      "deletions": 11
    },
    "files": [
      {
        "sha": "ee69d2207fecaf3894daed185250d82755b16b23",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -61,8 +61,8 @@ enum BindFlags {\n // immediately and the parent exits from main().\n //\n // Shutdown for Qt is very similar, only it uses a QTimer to detect\n-// fRequestShutdown getting set (either by RPC stop or SIGTERM)\n-// and then does the normal Qt shutdown thing.\n+// fRequestShutdown getting set, and then does the normal Qt\n+// shutdown thing.\n //\n \n volatile bool fRequestShutdown = false;\n@@ -71,6 +71,10 @@ void StartShutdown()\n {\n     fRequestShutdown = true;\n }\n+bool ShutdownRequested()\n+{\n+    return fRequestShutdown;\n+}\n \n static CCoinsViewDB *pcoinsdbview;\n "
      },
      {
        "sha": "5927670c83493da378f9c4004764cdca7ff169e8",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -10,6 +10,7 @@\n extern CWallet* pwalletMain;\n \n void StartShutdown();\n+bool ShutdownRequested();\n void Shutdown();\n bool AppInit2(boost::thread_group& threadGroup);\n std::string HelpMessage();"
      },
      {
        "sha": "f079f3b0e94e6d6efc8c51792bd7b919a1b0d8f3",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -88,11 +88,6 @@ static void InitMessage(const std::string &message)\n     printf(\"init message: %s\\n\", message.c_str());\n }\n \n-static void QueueShutdown()\n-{\n-    QMetaObject::invokeMethod(qApp, \"quit\", Qt::QueuedConnection);\n-}\n-\n /*\n    Translate string to current locale using Qt.\n  */\n@@ -186,7 +181,6 @@ int main(int argc, char *argv[])\n     uiInterface.ThreadSafeMessageBox.connect(ThreadSafeMessageBox);\n     uiInterface.ThreadSafeAskFee.connect(ThreadSafeAskFee);\n     uiInterface.InitMessage.connect(InitMessage);\n-    uiInterface.QueueShutdown.connect(QueueShutdown);\n     uiInterface.Translate.connect(Translate);\n \n     // Show help message immediately after parsing command-line options (for \"-lang\") and setting locale,\n@@ -217,8 +211,14 @@ int main(int argc, char *argv[])\n             GUIUtil::SetStartOnSystemStartup(true);\n \n         boost::thread_group threadGroup;\n+\n         BitcoinGUI window;\n         guiref = &window;\n+\n+        QTimer* pollShutdownTimer = new QTimer(guiref);\n+        QObject::connect(pollShutdownTimer, SIGNAL(timeout()), guiref, SLOT(detectShutdown()));\n+        pollShutdownTimer->start(200);\n+\n         if(AppInit2(threadGroup))\n         {\n             {"
      },
      {
        "sha": "9da5b8500675c5563df3d80104be6278fc5c1b19",
        "filename": "src/qt/bitcoingui.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoingui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoingui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.cpp?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -24,6 +24,7 @@\n #include \"rpcconsole.h\"\n #include \"ui_interface.h\"\n #include \"wallet.h\"\n+#include \"init.h\"\n \n #ifdef Q_OS_MAC\n #include \"macdockiconhandler.h\"\n@@ -839,3 +840,9 @@ void BitcoinGUI::toggleHidden()\n {\n     showNormalIfMinimized(true);\n }\n+\n+void BitcoinGUI::detectShutdown()\n+{\n+    if (ShutdownRequested())\n+        QMetaObject::invokeMethod(QCoreApplication::instance(), \"quit\", Qt::QueuedConnection);\n+}"
      },
      {
        "sha": "aba81cb3bce9087bb2b20223fe2682e25b85d5af",
        "filename": "src/qt/bitcoingui.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoingui.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/qt/bitcoingui.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoingui.h?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -199,6 +199,9 @@ private slots:\n     void showNormalIfMinimized(bool fToggleHidden = false);\n     /** Simply calls showNormalIfMinimized(true) for use in SLOT() macro */\n     void toggleHidden();\n+\n+    /** called by a timer to check if fRequestShutdown has been set **/\n+    void detectShutdown();\n };\n \n #endif // BITCOINGUI_H"
      },
      {
        "sha": "5b0555c10db235ed035d8fc15fe4f5ddcc90f27b",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/723035bb6839c5d65bfee96d501a8c54814778e3/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/723035bb6839c5d65bfee96d501a8c54814778e3/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=723035bb6839c5d65bfee96d501a8c54814778e3",
        "patch": "@@ -79,9 +79,6 @@ class CClientUIInterface\n     /** Progress message during initialization. */\n     boost::signals2::signal<void (const std::string &message)> InitMessage;\n \n-    /** Initiate client shutdown. */\n-    boost::signals2::signal<void ()> QueueShutdown;\n-\n     /** Translate a message to the native language of the user. */\n     boost::signals2::signal<std::string (const char* psz)> Translate;\n "
      }
    ]
  }
]