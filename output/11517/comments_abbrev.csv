TheBlueMatt,2017-10-17T17:20:21Z,"Cool! The benchmark suite is really not at all very good, sadly. If you feel up to it, I think we'd do better by just hardcoding the number of runs in each benchmark - it is often very easy to see very significant differences in the average runtime based on number of runs (even for things which take 1+ms per run!). Unless you have some better intuition than I about why this is the case, that is.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337303617,337303617,
martinus,2017-10-17T19:10:43Z,"A while ago I wrote a microbenchmarking library similar to google benchmark. There I've used the geometric mean I think is a much better statistic than average here, and its better when you have outliers. I also think having the mean and confidence interval is much more reasonable than just min, max,avg values. Would you be interested in updates like this?",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337338021,337338021,
TheBlueMatt,2017-10-17T22:25:51Z,"I'd be happy with anything that gives more reliable values, really. Right now, to compre benchmark runs, I often have to pin to a CPU, then run multiple times, and only consider differences if both runs had the same iteration count, which is a huge pain.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337393092,337393092,
laanwj,2017-10-18T13:59:48Z,"> Cool! The benchmark suite is really not at all very good, sadly. If you feel up to it, I think we'd do better by just hardcoding the number of runs in each benchmark \n\nThe idea of doing it this way is that the benchmarks can be run in roughly the same time on slower hardware, whereas on faster hardware they are more precise. The secp256k1 benchmarks have the problem that they take basically ",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337600615,337600615,
TheBlueMatt,2017-10-18T15:28:03Z,"Yea, a scaling factor seems fine, even an auto-calculated one would probably also be fine, as long as it is very stable/deterministic on the same hardware between runs, which the current version is not.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337629929,337629929,
martinus,2017-10-19T06:43:14Z,"I don't think using the exact same number of iterations is a huge benefit for stability. The problem is there will always be some random events in the system that cause some delays (unwanted fluctuations). The other problem are fluctuations that are inherent to what's benchmarked: e.g. if the code does any allocations, the runtime will always fluctuate. This fluctuation won't go away with fixed nu",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337814350,337814350,
TheBlueMatt,2017-10-19T15:04:39Z,"For my largest use of bench (FIBRE stuff, which has pretty wide-ranging bench's which run through FEC encode/decode + mempool scan + block decode) number of runs makes a huge difference. I'd be happy to be wrong, but my guess has always been cache-related/branch-prediction effects (the issues still appear when you give bench_bitcoin a dedicated core, minimizing any system disruption). Fluctuation ",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-337937114,337937114,
martinus,2017-10-20T07:11:45Z,That's strange. Using a fixed number of iterations should be a simple change. How about adding a command line option to specify a fixed number of iterations? Also a filter would be useful so only a specified test runs.,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338124929,338124929,
thebostik,2017-10-21T22:14:25Z,"The premise is a bit flawed, (though this version might still be better, I like the idea of visualizing the data),\n> used to make a function call for each call\n\nisn't true because the value of countMask changes in two different ways inside of this logic, increasing to prevent time and cycles from being collected on every other iteration (how it starts at first). That countMask jumps up prett",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338436056,338436056,
martinus,2017-10-22T07:13:09Z,"> isn't true because the value of countMask changes in two different ways inside of this logic, increasing to prevent time and cycles from being collected on every other iteration (how it starts at first). \n\nThat's right, but KeepRunning() itself used to introduce a function call overhead. With my change the fast path is inlined, and the slow measuring path is in the non-inlined method.\n\nI",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-338457167,338457167,
theuni,2017-11-07T22:26:54Z,"Concept ACK. The plotly.js issue could be worked around by requiring that a url be supplied when plotting.\n\nIt'd be nice if this could be rebased on #11562, as I think that's a simple logical subset of the changes here.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-342644612,342644612,
laanwj,2017-11-08T03:50:36Z,"Concept ACK. Adding HTML as an optional format is neat, please keep CSV support though I need it (but you do so that's great).\n\nNACK on checking plotly (or any JS code) into the repository.\n\nI think it's ok to use this URI by default for the HTML output, but agree that it should be possible to provide your own (e.g. if you've installed it somewhere on your local network, and want to avoid ",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-342703092,342703092,
martinus,2017-11-09T05:48:48Z,"I've rebased and squashed my changes on top of the current master, and added configurable plotly.js URL. That was the first time I've done a rebase, I hope I've done it correctly! The travis build is green but for some reason it shows as ""build is in progress""?",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-343053970,343053970,
MarcoFalke,2017-11-09T15:55:31Z,Don't worry about the travis-yellow. This happens from time to time.,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-343198843,343198843,
MarcoFalke,2017-11-10T15:34:54Z,Needs rebase,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-343505057,343505057,
martinus,2017-11-18T09:42:34Z,"I have removed the cycles statistics because I personally don't think it is necessary, and it simplifies the code. I could add it back though if others think its a helpful statistic",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-345430912,345430912,
MarcoFalke,2017-12-13T22:47:22Z,utACK 846ae3e5143a3959a03fe9bdff78e0253ef38a37,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-351550052,351550052,
TheBlueMatt,2017-12-14T21:44:41Z,"Code-level utACK 846ae3e5143a3959a03fe9bdff78e0253ef38a37, but there are a few iteration counts that seem much too high (or low). My output is below (take note of CCheckQueueSpeed which took much, much too long, as well as CCheckQueueSpeedPrevectorJob, as well as a few which were much too short.\n\n # Benchmark, evals, iterations, total, min, max, median\nBase58CheckEncode, 5, 320000, 4.95443, ",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-351845252,351845252,
jtimon,2017-12-14T23:38:31Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-351869310,351869310,
MarcoFalke,2017-12-15T23:51:00Z,"@martinus Can you share your results?\n\n@TheBlueMatt That is interesting. Running on my laptop gives similar results to yours with the exception of CCheckQueueSpeed and CCheckQueueSpeedPrevectorJob\n\ndiffer:\n![ccheckqueuespeed](https://user-images.githubusercontent.com/6399679/34064648-b0a9e0f4-e1c8-11e7-87d8-bb1c7a9c43ca.png)\n\nsimilar:\n![coinselection](https://user-images.githubuser",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352140092,352140092,
martinus,2017-12-16T07:18:58Z,"That's interesting, here are my results:\n\n```\n# Benchmark, evals, iterations, total, min, max, median\nBase58CheckEncode, 5, 320000, 5.79601, 3.47514e-06, 3.90062e-06, 3.56941e-06\nBase58Decode, 5, 800000, 5.68374, 1.35576e-06, 1.47075e-06, 1.43981e-06\nBase58Encode, 5, 470000, 5.97008, 2.29896e-06, 2.8671e-06, 2.47352e-06\nBenchLockedPool, 5, 530, 5.74901, 0.00202647, 0.00244975, 0.0020",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352166612,352166612,
TheBlueMatt,2017-12-18T01:06:46Z,"Heh, I went and checked and the CCheckQueue bench tests are just (rather uselessly) testing inter-core latency...when I turn the core count way down using taskset things get much faster (2 non-HT cores seems to be the fastest, didnt test across physical CPUs, but assume it would be very slow). I'd suggest we either turn the bench off wholesale or we put some semi-realistic work in the check there.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352301942,352301942,
TheBlueMatt,2017-12-18T01:08:53Z,"Oh, also this is on a many-core system, so the checkqueue bench spawns a ton of threads (it uses a dynamic count based on hardware), making the bench even more inconsistent between systems.",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352302166,352302166,
MarcoFalke,2017-12-19T22:34:48Z,"@martinus I don't want to hold up your pull request any longer. I really like how flexible the new design is to jump in and hack own stuff into it.\nHowever, since there seems to be issues arising from hardcoding the number of iterations, I'd propose the following solution:\n\n<strike>Add a commit that also hardcodes the number of cores in checkqueue.cpp to 2. E.g.\n\n```diff\ndiff --git a/s",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352907424,352907424,
MarcoFalke,2017-12-19T22:36:01Z,"@TheBlueMatt suggested to get rid of the test, since it is not really a useful benchmark. I am fine with that, too.\n\n(Make sure to add it as separate commit, so it is easier to review)",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-352907682,352907682,
martinus,2017-12-21T20:42:43Z,I think I made my branch kaputt while trying to rebase :-(,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353453059,353453059,
MarcoFalke,2017-12-21T22:10:44Z,"Git commits are unkaputtbar. Should be trivial to recover. Give me a sec...\n\nOn Dec 21, 2017 15:43, ""Martin Ankerl"" <notifications@github.com> wrote:\n\nI think I made my branch kaputt while trying to rebase :-(\n\n—\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\n<https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353453059>, or mute\nthe",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353470404,353470404,
MarcoFalke,2017-12-21T22:27:24Z,"git checkout improved-benchmarking\ngit reset --hard 48ea572e79e1f63a5de4025d02ba72a666bcdc95\ngit rebase 604e08c83cf58ca7e7cda2ab284c1ace7bb12977\n# Solve the merge conflict (Should be straightforward): vim src/bench/checkqueue.cpp\ngit add src/bench/checkqueue.cpp && git rebase --continue\ngit rebase --interactive HEAD~4\n# Adjust the prefixes, and the order of the commits, such that it sa",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353473610,353473610,
martinus,2017-12-23T10:22:19Z,Thanks a lot @MarcoFalke!,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353718584,353718584,
laanwj,2017-12-23T13:52:48Z,utACK 760af84,https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353727271,353727271,
MarcoFalke,2017-12-23T17:25:46Z,"Post-merge checked that the rebase was done correct:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nACK 760af84072408ba53d009e868fccc25fb186d40c\n-----BEGIN PGP SIGNATURE-----\n\niQIcBAEBCgAGBQJaPpFpAAoJENLqSFDnUosl6n4QAKHR/UGqeuxq0CJHWsaP2gX/\nJIG2y99LkAdepKBIUAaHxwSiLjUVPFX+8m+v5sdgcUuTMzhnF/oto59WDG7UJ5RN\nUTw+rGcZuFN8aBBcgtrLCKASjLVsAtImIESnx8uOgT+NQ2ShNtmwlbazNBmupx6e",https://github.com/bitcoin/bitcoin/pull/11517#issuecomment-353738141,353738141,
ryanofsky,2017-10-30T18:14:46Z,This comment is now out of date.,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147789408,147789408,src/bench/bench.h
ryanofsky,2017-10-30T18:15:02Z,Usage example at the top of bench.h is now out of date. Should also add comment there explaining the new macro argument.,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147789484,147789484,src/bench/bench.h
ryanofsky,2017-10-30T18:22:53Z,"Suggest expected_time or estimated_duration instead of avgTime. Developer guide recommends using snake case for variables, and avg doesn't tell you what it's supposed to be the average of.",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147791717,147791717,src/bench/bench.h
ryanofsky,2017-10-30T18:25:30Z,"Should add `-help` output describing what the options do.\n\nShould use snake_case for variable names (and ideally match them with option names).",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147792454,147792454,src/bench/bench_bitcoin.cpp
ryanofsky,2017-10-30T18:49:11Z,"New code is missing indentation, so now it is inconsistent, and BenchRunner looks like it is nested inside State. Also, the State class is key for someone trying to understand the benchmark framework, so would recommend leaving on top of the printer classes (you can forward declare Printer).",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147799546,147799546,src/bench/bench.h
ryanofsky,2017-10-30T18:54:45Z,Default argument values never actually seem to be used. Would drop so they aren't repeated and don't become inconsistent in the future.,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147801124,147801124,src/bench/bench.h
martinus,2017-10-31T05:49:17Z,Thanks a lot for the review! I'll see if I can fix all that over the weekend.,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r147900381,147900381,src/bench/bench_bitcoin.cpp
TheBlueMatt,2017-11-02T20:33:15Z,This is somewhat confusing. Maybe call it the scaling factor for *runtime* to make it clear what it actually means?,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r148651456,148651456,src/bench/bench_bitcoin.cpp
TheBlueMatt,2017-11-02T20:37:33Z,"Grr, I kinda feel yucky having code that generates a tracking request for people who want to see the output. Is it possible to check plotly in (does it have a compatible license?) or can we just put the graphs in simple cli form and skip the html output?",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r148652476,148652476,src/bench/bench.cpp
TheBlueMatt,2017-11-06T20:55:40Z,This is wrong for is_list_only - maybe is_list_only mode should also call result() with some other parameter for the mode?,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149200562,149200562,src/bench/bench.cpp
TheBlueMatt,2017-11-06T20:57:52Z,"This function is neither defined, nor used.",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149201117,149201117,src/bench/bench.h
martinus,2017-11-07T18:50:22Z,"Plotly.js is released under the MIT license: https://github.com/plotly/plotly.js/blob/master/LICENSE, so that should be pretty compatible :)\nThe HTML output is optional, and default output is commandline, so I did not see a problem with that.\nI've chosen it because the box plots are really nice, especially when using more evaluations this the output make it very visible how the runtime actuall",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149467270,149467270,src/bench/bench.cpp
martinus,2017-11-07T18:51:16Z,fixed in the following commit,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149467525,149467525,src/bench/bench.cpp
martinus,2017-11-07T18:51:50Z,"thanks, I've removed it",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149467695,149467695,src/bench/bench.h
martinus,2017-11-07T18:55:25Z,I've updated the description now too,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r149468707,149468707,src/bench/bench_bitcoin.cpp
MarcoFalke,2017-11-13T21:09:04Z,Don't forget to `#include <numeric>` for `std::accumulate`.,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r150665361,150665361,src/bench/bench.cpp
martinus,2017-11-18T09:24:53Z,"thanks, updated!",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r151833786,151833786,src/bench/bench.cpp
MarcoFalke,2017-11-27T15:31:25Z,"nit (unrelated to your changes): Condition should be negated. \n\nMind to add a commit for this?",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r153229334,153229334,src/bench/bench.cpp
martinus,2017-12-02T10:02:57Z,"Ah, thanks for noting. I have fixed that message and rebased & squashed everything",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r154492780,154492780,src/bench/bench.cpp
laanwj,2017-12-20T20:59:45Z,Why does this add a dependency on init.h?,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r158134229,158134229,src/bench/bench_bitcoin.cpp
MarcoFalke,2017-12-20T21:01:20Z,"Why the reason for this change. It hides a valid warning for me at least:\n\n```\nArgs undocumented: 1\nset(['-plot-height'])",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r158134567,158134567,contrib/devtools/check-doc.py
MarcoFalke,2017-12-20T21:02:06Z,"Arg should say ""-plot-height=<x>"" to make the python check happy.",https://github.com/bitcoin/bitcoin/pull/11517#discussion_r158134708,158134708,src/bench/bench_bitcoin.cpp
MarcoFalke,2017-12-21T22:35:22Z,Don't forget to remove this as well,https://github.com/bitcoin/bitcoin/pull/11517#discussion_r158393977,158393977,contrib/devtools/check-doc.py
