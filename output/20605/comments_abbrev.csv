sipa,2020-12-08 21:19:59,"That's an amazing hack. I didn't know it was allowed to call system library functions from a signal handler, but apparently POSIX mandates that some functions are callable - including read() and write().",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741050023,741050023,
DrahtBot,2020-12-09 06:49:14,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #20487 (draft: Add syscall sandboxing using seccomp-bpf (Linux secure computing mode) by practicalswift)\n* #19461 (multip",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741571875,741571875,
jonasschnelli,2020-12-09 08:09:14,"Nice!\nTested ACK f8585d59f1b0040765361eebd8a4544670de2f04 - (on macOS only)\n\nIs there a documentation what system function one can call in signal handler (to confirm with POSIX)?",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741607189,741607189,
laanwj,2020-12-09 09:26:24,"> Is there a documentation what system function one can call in signal handler (to confirm with POSIX)?\n\nThis is a good question, I wasn't able to find any *definitive* reference. The ""self-pipe trick"" is an incredibly common pattern in UNIX daemons though. It certainly works across Linux, Macos, modern BSDs… Fairly sure everything that can run Bitcoin Core. If it would be broken in principle ",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741647538,741647538,
jonatack,2020-12-09 11:53:13,Tested ACK eae384f8fa0215 on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux,https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741723442,741723442,
promag,2020-12-09 12:20:02,"Tested ACK eae384f8fa0215cfd63235b8cb22077a0c356ee0 on macos 10.15.6, needs squash I guess.",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741735937,741735937,
laanwj,2020-12-09 12:25:26,Squashed f8585d59f1b0040765361eebd8a4544670de2f04..eae384f8fa0215cfd63235b8cb22077a0c356ee0 → f628398631bc2a5b7839aeab5b3d89cbbff1f3fa,https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-741738579,741738579,
decryp2kanon,2020-12-10 06:39:31,Concept ACK ❤️,https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-742277014,742277014,
practicalswift,2020-12-10 09:29:54,Concept ACK: swift shutdown is more practical than non-swift shutdown,https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-742398536,742398536,
luke-jr,2020-12-14 16:22:53,">On Windows, there are no signals so using a condition variable is safe.\n\nBut Windows *does* have signals...?",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744551383,744551383,
laanwj,2020-12-14 16:59:20,"> But Windows does have signals...?\n\nBut not asynchronous ones like in POSIX. Windows always uses event loops.\n\nEdit: okay this is apparently not true, some notifications launch in a separate thread. It seems they are  not reentrant in the same sense as POSIX signals though.",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744574287,744574287,
laanwj,2020-12-14 17:38:36,"~~Closing this, might pick it up some day or someone else could.~~\n\nEdit: we only set a `SetConsoleCtrlHandler` on Windows and this [launches in a separate thread](https://docs.microsoft.com/en-us/windows/console/console-control-handlers) so this is exactly the right appreach.",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744597909,744597909,
sipa,2020-12-14 17:48:17,"I suggest reopening, the approach here looks correct for Windows: https://docs.microsoft.com/en-us/windows/console/console-control-handlers (the control handlers are run in a separate thread).",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-744603261,744603261,
laanwj,2020-12-15 16:00:55,"> The GUI is already asynchronous so shouldn't need any polling/piping/condition variable stuff. Just some signals boilerplate like 73be44d (branch)\n\nWouldn't raising a Qt signal also, likely, be unsafe in a signal handler?\n\n>  could handle more runtime errors and avoid asserts\n\nHow do you suggest handling them? I used asserts because the program is in an unknown state if any of the co",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745387262,745387262,
laanwj,2020-12-15 16:22:44,"Added initializer for `g_shutdown_pipe`.\nf628398631bc2a5b7839aeab5b3d89cbbff1f3fa → cd03513dc2fcccaa142e9632a28b38efd0056436",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745401534,745401534,
jonatack,2020-12-15 22:52:43,"ACK cd03513dc2fcccaa142e9632a28b38efd0056436 tested on Debian 5.9.11-1 (2020-11-27) x86_64 GNU/Linux\n\nWhen I read `while (true)` for some reason I think of `20 GOTO 10` or `JMP ($000A)`",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-745617494,745617494,
laanwj,2020-12-16 09:54:24,"> When I read while (true) for some reason I think of 20 GOTO 10 or JMP ($000A)\n\nHeh, it could definitely be done without that, but I tend to write retry loops (especially those with complicated exit conditions, though that's not the case here) as infinite loops usually. Here it avoids having to define `result` outside the loop and think about what to initialize it with for the first iteration",https://github.com/bitcoin/bitcoin/pull/20605#issuecomment-746010098,746010098,
promag,2020-12-09 11:36:21,"I've tried locally to just `close()` and it also works (tested on macos only). Note that `WaitForShutdown` is called twice so just one `read` succeeds, see https://github.com/promag/bitcoin/commit/c44a33c5532247d74cdaaf06d43a104ae2e36aa1.",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539232902,539232902,src/shutdown.cpp
laanwj,2020-12-09 12:06:06,"What do you mean with ""WaitForShutdown is called twice""? It isn't. It's called at the end of `AppInit` which itself is called once.",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539251402,539251402,src/shutdown.cpp
laanwj,2020-12-09 12:07:36,"Or if you mean the call in `AbortShutdown`, sure, yes but that's on purpose to reset the shutdown condition so it can be used again.\nI'd really prefer to use `read`/`write` and not close a socket under someone waiting on it !",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539252303,539252303,src/shutdown.cpp
promag,2020-12-09 12:13:28,"Ah right, the second call is In `AbortShutdown`. But that doesn't invalidate the point of just `close()` instead of `write()`, which looks enough to make `read()` return.",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539255824,539255824,src/shutdown.cpp
laanwj,2020-12-09 12:17:41,"""looks enough""\nYes, but we're dealing with a lot of possibilities in different OSes here, just because it works for you doesn't mean it's safe. This whole thing (try googling about signals and pipe tricks) is a controversial subject, so I prefer to mimic existing code instead of inventing our own.\nAlso, `close()` makes it more work to re-arm the condition in `AbortShutdown`.\n\nEdit: To be f",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r539258627,539258627,src/shutdown.cpp
ryanofsky,2020-12-14 21:53:02,"In commit ""init: Signal-safe instant shutdown"" (f628398631bc2a5b7839aeab5b3d89cbbff1f3fa)\n\nCould set some initial values:\n\n```\nstatic int g_shutdown_pipe[2] = {-1, -1};\n```\n\nTo avoid possibility of code reading and writing to random pipes if someone forgets to call InitShutdownState.",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542836471,542836471,src/shutdown.cpp
ryanofsky,2020-12-14 22:34:29,"In commit ""init: Signal-safe instant shutdown"" (f628398631bc2a5b7839aeab5b3d89cbbff1f3fa)\n\nI don't understand what AbortShutdown is supposed to do. Why would a caller request and abort a shutdown instead of just not requesting a shutdown until it wanted the shutdown? What prevents AppInit from exiting between the StartShutdown and AbortShutdown calls and causing AbortShutdown to hang forever? ",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r542879895,542879895,src/shutdown.cpp
laanwj,2020-12-15 15:56:58,"I'm happy to see it go but it's a) used in the tests b) before WaitForShutdown() is called in init. Both uses are safe, and I mention this in the comment (in the header file).",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543468421,543468421,src/shutdown.cpp
laanwj,2020-12-15 15:57:50,"Good idea.\n(`0` is STDIN_FILENO so it should be more or less safe, but still, it'd be surprising behavior, it's better to raise an error)",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543469203,543469203,src/shutdown.cpp
ryanofsky,2020-12-17 13:06:22,"re: https://github.com/bitcoin/bitcoin/pull/20605#discussion_r543468421\n\n> I'm happy to see it go but it's a) used in the tests b) before WaitForShutdown() is called in init. Both uses are safe, and I mention this in the comment (in the header file).\n\nThanks for pointing out the comment. I missed that this was meant to be called *before* WaitForShutdown, so this makes much more sense now!",https://github.com/bitcoin/bitcoin/pull/20605#discussion_r545075334,545075334,src/shutdown.cpp
