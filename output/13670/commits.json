[
  {
    "sha": "0cf546f71ebbee960fdca044e7abd100eec7b688",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowY2Y1NDZmNzFlYmJlZTk2MGZkY2EwNDRlN2FiZDEwMGVlYzdiNjg4",
    "commit": {
      "author": {
        "name": "Patrick Strateman",
        "email": "patrick.strateman@gmail.com",
        "date": "2018-05-16T22:49:20Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2018-08-13T02:26:20Z"
      },
      "message": "net: Simplify ProcessGetBlockData execution by removing send flag.\n\nSetting the send flag to false can be replaced by simply returning.",
      "tree": {
        "sha": "8dc3f9ba94f51d2fcee6c2f1873ddbdcdf45ef68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8dc3f9ba94f51d2fcee6c2f1873ddbdcdf45ef68"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0cf546f71ebbee960fdca044e7abd100eec7b688",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJHBAABCAAxFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAltw7E0THGZhbnF1YWtl\nQGdtYWlsLmNvbQAKCRAu659cwJUmwX76D/9opxKK6ekT/kweCrQ9KYNPjtqifgr4\nPsjzxaOva7EiwdSxzsn9AAXrupGr0M9Pn8s/BzZN0HEjILsaX0i88VtDWhCLk1Z3\n2ZQvmCabFRAPMePat/+f08jx41uIwzp29wE46KzACDIaqjBiqEFSMCi7+kgPnvZR\njYuOPYo3Ia3Wcyv3mDbl0m4F2fzmNb6b2yDJ1t64jIH7oHsbjfUfctMratIbMsVH\nz6lwNHDpIybr+2CHzq3ry3L+aEUpfnx/eJq1yqx8xtPN4ENF1M7AVq5PbwOH/Ud1\nqyghjz2645aSl7JwIcmvY3uRO+d8TpB3JjJ/zLI72tb+fkSHkHei7aRsOD6WvxeO\nJuvPP2s/H+cpSTi1XEZopJxYCM368YbaCc6bTD1VMhxr05vIYooLaZqheNPrjzZk\nqEPEEsO22d2QYD3IKmN4ftANCWBTFwCEFaSAV7n5qXAmL+5mpFMWk/QjBUpWgNBr\nUjJze5K0c/JtvG1V1B99koG/0fjdl/PHzX7hRqspKR2YKdJFVL+38oLCGHncPns3\nbNz+ScAzp3d0Q3Juys/x+axIDCtwOUB9WwQgbrmjuAhspV3QCG9hB1xpQpdZ3Pyr\nfGeCBNdxONsqkp5NgJHiT64TvZqnktrwRWgUkMkxveiIJ/DDv7zyovVysGc0IHbw\n9Ss9DvgjP/KAVA==\n=PP15\n-----END PGP SIGNATURE-----",
        "payload": "tree 8dc3f9ba94f51d2fcee6c2f1873ddbdcdf45ef68\nparent 0df7a6c13ec484f9f31cfe3ed3039098a9bef124\nauthor Patrick Strateman <patrick.strateman@gmail.com> 1526510960 -0700\ncommitter fanquake <fanquake@gmail.com> 1534127180 +0800\n\nnet: Simplify ProcessGetBlockData execution by removing send flag.\n\nSetting the send flag to false can be replaced by simply returning.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cf546f71ebbee960fdca044e7abd100eec7b688",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0cf546f71ebbee960fdca044e7abd100eec7b688",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0cf546f71ebbee960fdca044e7abd100eec7b688/comments",
    "author": {
      "login": "pstratem",
      "id": 620611,
      "node_id": "MDQ6VXNlcjYyMDYxMQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/620611?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/pstratem",
      "html_url": "https://github.com/pstratem",
      "followers_url": "https://api.github.com/users/pstratem/followers",
      "following_url": "https://api.github.com/users/pstratem/following{/other_user}",
      "gists_url": "https://api.github.com/users/pstratem/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/pstratem/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/pstratem/subscriptions",
      "organizations_url": "https://api.github.com/users/pstratem/orgs",
      "repos_url": "https://api.github.com/users/pstratem/repos",
      "events_url": "https://api.github.com/users/pstratem/events{/privacy}",
      "received_events_url": "https://api.github.com/users/pstratem/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0df7a6c13ec484f9f31cfe3ed3039098a9bef124",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0df7a6c13ec484f9f31cfe3ed3039098a9bef124",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0df7a6c13ec484f9f31cfe3ed3039098a9bef124"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 11,
      "deletions": 11
    },
    "files": [
      {
        "sha": "1259f85a416825fa068df1dbb29d89841886e8db",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0cf546f71ebbee960fdca044e7abd100eec7b688/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0cf546f71ebbee960fdca044e7abd100eec7b688/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=0cf546f71ebbee960fdca044e7abd100eec7b688",
        "patch": "@@ -1107,7 +1107,6 @@ static void RelayAddress(const CAddress& addr, bool fReachable, CConnman* connma\n \n void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, const CInv& inv, CConnman* connman)\n {\n-    bool send = false;\n     std::shared_ptr<const CBlock> a_recent_block;\n     std::shared_ptr<const CBlockHeaderAndShortTxIDs> a_recent_compact_block;\n     bool fWitnessesPresentInARecentCompactBlock;\n@@ -1144,36 +1143,37 @@ void static ProcessGetBlockData(CNode* pfrom, const CChainParams& chainparams, c\n \n     LOCK(cs_main);\n     const CBlockIndex* pindex = LookupBlockIndex(inv.hash);\n-    if (pindex) {\n-        send = BlockRequestAllowed(pindex, consensusParams);\n-        if (!send) {\n-            LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n-        }\n+    if (!pindex) {\n+        return;\n+    }\n+    if (!BlockRequestAllowed(pindex, consensusParams)) {\n+        LogPrint(BCLog::NET, \"%s: ignoring request from peer=%i for old block that isn't in the main chain\\n\", __func__, pfrom->GetId());\n+        return;\n     }\n     const CNetMsgMaker msgMaker(pfrom->GetSendVersion());\n     // disconnect node in case we have reached the outbound limit for serving historical blocks\n     // never disconnect whitelisted nodes\n-    if (send && connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n+    if (connman->OutboundTargetReached(true) && ( ((pindexBestHeader != nullptr) && (pindexBestHeader->GetBlockTime() - pindex->GetBlockTime() > HISTORICAL_BLOCK_AGE)) || inv.type == MSG_FILTERED_BLOCK) && !pfrom->fWhitelisted)\n     {\n         LogPrint(BCLog::NET, \"historical block serving limit reached, disconnect peer=%d\\n\", pfrom->GetId());\n \n         //disconnect node\n         pfrom->fDisconnect = true;\n-        send = false;\n+        return;\n     }\n     // Avoid leaking prune-height by never sending blocks below the NODE_NETWORK_LIMITED threshold\n-    if (send && !pfrom->fWhitelisted && (\n+    if (!pfrom->fWhitelisted && (\n             (((pfrom->GetLocalServices() & NODE_NETWORK_LIMITED) == NODE_NETWORK_LIMITED) && ((pfrom->GetLocalServices() & NODE_NETWORK) != NODE_NETWORK) && (chainActive.Tip()->nHeight - pindex->nHeight > (int)NODE_NETWORK_LIMITED_MIN_BLOCKS + 2 /* add two blocks buffer extension for possible races */) )\n        )) {\n         LogPrint(BCLog::NET, \"Ignore block request below NODE_NETWORK_LIMITED threshold from peer=%d\\n\", pfrom->GetId());\n \n         //disconnect node and prevent it from stalling (would otherwise wait for the missing block)\n         pfrom->fDisconnect = true;\n-        send = false;\n+        return;\n     }\n     // Pruned nodes may have deleted the block, so check whether\n     // it's available before trying to send.\n-    if (send && (pindex->nStatus & BLOCK_HAVE_DATA))\n+    if (pindex->nStatus & BLOCK_HAVE_DATA)\n     {\n         std::shared_ptr<const CBlock> pblock;\n         if (a_recent_block && a_recent_block->GetHash() == pindex->GetBlockHash()) {"
      }
    ]
  }
]