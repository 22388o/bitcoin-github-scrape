ryanofsky,2018-11-01T21:23:04Z,"Since #10917, developer notes have suggested using `UpperCamelCase()` for all function names, but a lot of existing code is using `lowerCamelCase()` naming for member functions.\n\nThis is prevalent in `src/qt/` and `src/interfaces/`, but also common in some other places like `policy/fees.h`, `txmempool.h`, and `scheduler.h`: https://gist.github.com/ryanofsky/8718089b2927912f77db0d7cb1728350\n",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435192072,435192072,
promag,2018-11-01T23:12:50Z,utACK 6e3f8c2.,https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435217672,435217672,
sipa,2018-11-01T23:22:28Z,"I don't personally object to a different style for instance methods and functions, but this makes the gap between the existing code and the suggested style much larger, as most of the codebase is using UpperCamelCase for instance methods (except for the qt and interfaces directories).\n\nSo I'm not sure this is desirable - the end goal should be getting the codebase to converge on a single style",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435219557,435219557,
DrahtBot,2018-11-01T23:40:00Z,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435222955,435222955,
promag,2018-11-01T23:42:24Z,"@sipa I don't think the gap size matters, either way it will be a long way to converge. Also, this style is not in qt and interfaces directories only as you can see in the above gist.\n\nI think @ryanofsky gives a good reason for this change.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435223388,435223388,
sipa,2018-11-01T23:54:57Z,"@promag In my view, writing a particular guideline in the document implies that we're as a project committing to (eventually) adopting it. Choosing a guideline that mismatches the existing code is giving ourself extra work in fixing it (and while that is ongoing, live with the inconsistencies in the codebase).\n\nThe question is whether the suggested style is enough of an improvement over the ex",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435225900,435225900,
promag,2018-11-02T00:05:37Z,"@sipa I agree with you except in\n\n> Choosing a guideline that mismatches the existing code is giving ourself extra work in fixing it.\n\nthere is already a lot of code to update to follow current guideline and it doesn't matter, hence the no style changing patches.\n\nIf we were to start from scratch, this change LGTM.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435227763,435227763,
ryanofsky,2018-11-02T00:20:16Z,"Didn't we already cross this bridge? Maybe I have a different perception, but it seems to me the switch from `strLabel` to `m_label` is bigger than a switch from `UpdateLabel` to `updateLabel`. @sipa I'd be interested to know if you agree with that, or think allowing inconsistencies in the first place was a mistake, or if you just think benefits are greater in one case than the other.\n\nOn comm",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435230321,435230321,
sipa,2018-11-02T00:30:51Z,"@ryanofsky I consider the distance between the suggested style and the actual code as a metric for code consistency. I think code consistency is more important than any particular style choice itself, unless that style has objectively been shown to improve code quality (for example, actual high-impact vulnerabilities have existed that were attributable to if-with-indented-then-but-no-braces). In t",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435232113,435232113,
laanwj,2018-11-05T12:12:31Z,"`/src/qt` has always had a different style and mimicked Qt's own style, I would not suggest using that as a guideline for changing the rest or even as a guideline for new code.\nmentioning this as a subdirectory-specific thing makes a lot of sense",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-435853246,435853246,
laanwj,2018-11-12T12:58:12Z,"Still vaguely NACK on this, I think the current naming style for methods is fine.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-437870550,437870550,
MarcoFalke,2018-11-12T15:54:54Z,"I am fine with this, but I won't argue either way.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-437932022,437932022,
laanwj,2018-12-15T06:37:09Z,"Going to close this, this is controversial and not making progress.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-447542328,447542328,
Sjors,2018-12-15T10:00:50Z,There's some baby in this bath water in case anyone picks this up later. You could drop the sentence about lowerCamelCase and explain that src/qt (sometimes) follows QT convention.,https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-447555996,447555996,
MarcoFalke,2019-05-15T19:36:15Z,Looks like people are starting to use `this->` (https://github.com/bitcoin/bitcoin/pull/15976/files#diff-24efdb00bfbe56b140fb006b562cc70bR2049),https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-492794336,492794336,
jamesob,2019-05-15T19:42:49Z,"I'm happy with either lowerCamel or `this->`, but I do think that we should distinguish method calls from global calls somehow.",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-492796314,492796314,
Sjors,2019-05-16T13:36:26Z,"@jamesob wrote:\n> I'm happy with either lowerCamel or this->, but I do think that we should distinguish method calls from global calls somehow.\n\nDitto. One argument for `lowerCamel` is that unlike `this->` you can't forget to use it.\n\n@laanwj wrote:\n> `/src/qt` has always had a different style and mimicked Qt's own style, I would not suggest using that as a guideline for changing the r",https://github.com/bitcoin/bitcoin/pull/14635#issuecomment-493070383,493070383,
kostyantyn,2018-11-01T22:52:13Z,WDYS to drop `m_` prefix if it's the public member variable of a class/struct?,https://github.com/bitcoin/bitcoin/pull/14635#discussion_r230225466,230225466,doc/developer-notes.md
ryanofsky,2018-11-01T23:03:01Z,"Maybe something to bring up in IRC or a separate issue. Personally I wouldn't mind it, as long as I could tell by sight when a member variable was being accessed (with `inst.var` or `this->var`, or `m_var` or whatever), and not confuse it for a local or global variable.",https://github.com/bitcoin/bitcoin/pull/14635#discussion_r230227607,230227607,doc/developer-notes.md
