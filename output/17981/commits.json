[
  {
    "sha": "b90172c668fa43be570b58bb12eb81ab462d04b4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiOTAxNzJjNjY4ZmE0M2JlNTcwYjU4YmIxMmViODFhYjQ2MmQwNGI0",
    "commit": {
      "author": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2020-01-22T09:31:51Z"
      },
      "committer": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2020-01-22T09:31:51Z"
      },
      "message": "Improve release-process.md formatting",
      "tree": {
        "sha": "cc7de4bb5e20b84c8952f7154b01c391e4f262c4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cc7de4bb5e20b84c8952f7154b01c391e4f262c4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b90172c668fa43be570b58bb12eb81ab462d04b4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7+97C5BqgmhVGzQ3/ph1GE19efcFAl4oFocACgkQ/ph1GE19\neff0Pw//W+6vUZD3Qz/u9cMHqkM4IDEzDd9dwZHVNhcZVI9/J1DABflrkbScNeLZ\nGO/381bcoX1s3OpYDRIbVudNQuO3TrEtQVBwn+o5ffG7/QJ/Q+DX7yyOC+suKLFl\nfyHjlaEaSLI4RcJn4rSVfb4au1er2lIEWzH3O4V6Hg4a2IvjWl8UiQ5D1WmJhbNn\nh7UOjAsKnw+SY1c1DEcpNgk5qqIzQNoQiJUk1AUz5Ja13UfymmdB+0zvmqKAcTfl\nMECWeffI6ZBIvxjfU7JkijsZxmWqs2g7GWiI8cFObya+LcteOUw2WZnyGDfKstmh\niEMdMTM47EIbJUht9UxBzj9BaB5sJQWK3HQ4tcjSTpfoRvVqbwqqr5olF0YT4UuE\nPumCr0Cg+jVSkQcaE8BzYOdOpW13U1P1riWiLLhnrzTEqfAbvJL+7pfGwsaCZnxL\nQ31BBr2ENFUQv4uFmxoZ9cfET/giVQObgn5pA3ECwrZas87qIWaUoeFqijBlIqHm\nhBA5tKmhcexGFC9ugYTYmQjgExsp2U5LSIysVSCjt19Kd6UVO8vxjWWDVPa0VB55\nMOG9/QgxtIIZ82YHDyP2rMTPLRJF1JHxjVONzAnScmhPstF+sT/9EuOkMgGk0nF1\nof8x/Uh2lxsgKb/k/eokkVOTvW2r4EoyQKsxJzuIIw6JRnK4LWo=\n=pTaf\n-----END PGP SIGNATURE-----",
        "payload": "tree cc7de4bb5e20b84c8952f7154b01c391e4f262c4\nparent 631df3ee87ec93e1fc748715671cdb5cff7308e6\nauthor Giulio Lombardo <giulio.lombardo@gmail.com> 1579685511 +0100\ncommitter Giulio Lombardo <giulio.lombardo@gmail.com> 1579685511 +0100\n\nImprove release-process.md formatting\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90172c668fa43be570b58bb12eb81ab462d04b4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b90172c668fa43be570b58bb12eb81ab462d04b4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90172c668fa43be570b58bb12eb81ab462d04b4/comments",
    "author": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "631df3ee87ec93e1fc748715671cdb5cff7308e6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/631df3ee87ec93e1fc748715671cdb5cff7308e6",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/631df3ee87ec93e1fc748715671cdb5cff7308e6"
      }
    ],
    "stats": {
      "total": 496,
      "additions": 277,
      "deletions": 219
    },
    "files": [
      {
        "sha": "b43018f3855f835e808b5784daba1836aab48bf0",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 277,
        "deletions": 219,
        "changes": 496,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b90172c668fa43be570b58bb12eb81ab462d04b4/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b90172c668fa43be570b58bb12eb81ab462d04b4/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=b90172c668fa43be570b58bb12eb81ab462d04b4",
        "patch": "@@ -1,168 +1,210 @@\n-Release Process\n-====================\n+# Release Process\n \n ## Branch updates\n \n ### Before every release candidate\n-\n-* Update translations (ping wumpus on IRC) see [translation_process.md](https://github.com/bitcoin/bitcoin/blob/master/doc/translation_process.md#synchronising-translations).\n-* Update manpages, see [gen-manpages.sh](https://github.com/bitcoin/bitcoin/blob/master/contrib/devtools/README.md#gen-manpagessh).\n-* Update release candidate version in `configure.ac` (`CLIENT_VERSION_RC`).\n+* Update translations (ping [@wumpus](https://github.com/laanwj) on IRC) see [translation_process.md](./translation_process.md#synchronising-translations).\n+* Update manpages, see [gen-manpages.sh](/contrib/devtools/README.md#gen-manpagessh).\n+* Update release candidate version in [`configure.ac`](/configure.ac) (`CLIENT_VERSION_RC`).\n \n ### Before every major and minor release\n-\n-* Update [bips.md](bips.md) to account for changes since the last release (don't forget to bump the version number on the first line).\n-* Update version in `configure.ac` (don't forget to set `CLIENT_VERSION_RC` to `0`).\n+* Update [`bips.md`](bips.md) to account for changes since the last release  \n+  **Note:** Don't forget to bump the version number on the first line.\n+* Update version in [`configure.ac`](/configure.ac)  \n+  **Note:** Don't forget to set `CLIENT_VERSION_RC` to `0`.\n * Write release notes (see \"Write the release notes\" below).\n \n ### Before every major release\n-\n-* On both the master branch and the new release branch:\n-  - update `CLIENT_VERSION_MINOR` in [`configure.ac`](../configure.ac)\n-  - update `CLIENT_VERSION_MINOR`, `PACKAGE_VERSION`, and `PACKAGE_STRING` in [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h)\n-* On the new release branch in [`configure.ac`](../configure.ac) and [`build_msvc/bitcoin_config.h`](/build_msvc/bitcoin_config.h) (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd)):\n+* On both `master` branch and the new release branch:\n+  - update `CLIENT_VERSION_MINOR` in [`configure.ac`](/configure.ac)\n+  - update `CLIENT_VERSION_MINOR`, `PACKAGE_VERSION`, and `PACKAGE_STRING` in [`bitcoin_config.h`](/build_msvc/bitcoin_config.h)\n+* On the new release branch in [`configure.ac`](/configure.ac) and [`bitcoin_config.h`](/build_msvc/bitcoin_config.h) (see [this commit](https://github.com/bitcoin/bitcoin/commit/742f7dd)):\n   - set `CLIENT_VERSION_REVISION` to `0`\n   - set `CLIENT_VERSION_IS_RELEASE` to `true`\n \n #### Before branch-off\n-\n * Update hardcoded [seeds](/contrib/seeds/README.md), see [this pull request](https://github.com/bitcoin/bitcoin/pull/7415) for an example.\n-* Update [`src/chainparams.cpp`](/src/chainparams.cpp) m_assumed_blockchain_size and m_assumed_chain_state_size with the current size plus some overhead (see [this](#how-to-calculate-m_assumed_blockchain_size-and-m_assumed_chain_state_size) for information on how to calculate them).\n-* Update `src/chainparams.cpp` chainTxData with statistics about the transaction count and rate. Use the output of the RPC `getchaintxstats`, see\n-  [this pull request](https://github.com/bitcoin/bitcoin/pull/17002) for an example. Reviewers can verify the results by running `getchaintxstats <window_block_count> <window_last_block_hash>` with the `window_block_count` and `window_last_block_hash` from your output.\n-* Update `src/chainparams.cpp` nMinimumChainWork with information from the getblockchaininfo rpc.\n-* Update `src/chainparams.cpp` defaultAssumeValid with information from the getblockhash rpc.\n-  - The selected value must not be orphaned so it may be useful to set the value two blocks back from the tip.\n-  - Testnet should be set some tens of thousands back from the tip due to reorgs there.\n-  - This update should be reviewed with a reindex-chainstate with assumevalid=0 to catch any defect\n-     that causes rejection of blocks in the past history.\n-- Clear the release notes and move them to the wiki (see \"Write the release notes\" below).\n-\n-#### After branch-off (on master)\n-\n+* Update [`chainparams.cpp`](/src/chainparams.cpp) `m_assumed_blockchain_size`\n+and `m_assumed_chain_state_size` with the current size plus some overhead  \n+  **Note:** See [this](#how-to-calculate-m_assumed_blockchain_size-and-m_assumed_chain_state_size)\n+  for information on how to calculate them).\n+* Update [`chainparams.cpp`](/src/chainparams.cpp) `chainTxData` with statistics\n+about the transaction count and rate. Use the output of the RPC\n+`getchaintxstats`, see [this pull request](https://github.com/bitcoin/bitcoin/pull/17002)\n+for an example. Reviewers can verify the results by running\n+`getchaintxstats <window_block_count> <window_last_block_hash>` with the\n+`window_block_count` and `window_last_block_hash` from your output.\n+* Update [`chainparams.cpp`](/src/chainparams.cpp) `nMinimumChainWork` with\n+information from the getblockchaininfo rpc.\n+* Update [`chainparams.cpp`](/src/chainparams.cpp) `defaultAssumeValid` with\n+information from the getblockhash rpc.\n+  - The selected value must not be orphaned so it may be useful to set the value\n+  two blocks back from the tip.\n+  - Testnet should be set some tens of thousands back from the tip due to reorgs\n+  there.\n+  - This update should be reviewed with a reindex-chainstate with\n+  `assumevalid=0` to catch any defect that causes rejection of blocks in the\n+  past history.\n+- Clear the release notes and move them to the wiki (see \"Write the release\n+notes\" below).\n+\n+#### After branch-off (on `master`)\n - Update the version of `contrib/gitian-descriptors/*.yml`.\n \n #### After branch-off (on the major release branch)\n-\n - Update the versions.\n-- Create a pinned meta-issue for testing the release candidate (see [this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example) and provide a link to it in the release announcements where useful.\n+- Create a pinned meta-issue for testing the release candidate (see\n+[this issue](https://github.com/bitcoin/bitcoin/issues/17079) for an example)\n+and provide a link to it in the release announcements where useful.\n \n #### Before final release\n-\n - Merge the release notes from the wiki into the branch.\n-- Ensure the \"Needs release note\" label is removed from all relevant pull requests and issues.\n+- Ensure the \"Needs release note\" label is removed from all relevant pull\n+requests and issues.\n \n \n ## Building\n \n ### First time / New builders\n-\n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--setup\" command. Otherwise ignore this.\n+If you're using the automated script (found in [gitian-build.py](/contrib/gitian-build.py)),\n+then at this point you should run it with the `--setup` command. Otherwise\n+ignore this.\n \n Check out the source code in the following directory hierarchy.\n \n-    cd /path/to/your/toplevel/build\n-    git clone https://github.com/bitcoin-core/gitian.sigs.git\n-    git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n-    git clone https://github.com/devrandom/gitian-builder.git\n-    git clone https://github.com/bitcoin/bitcoin.git\n+```shell\n+cd /path/to/your/toplevel/build\n+git clone https://github.com/bitcoin-core/gitian.sigs.git\n+git clone https://github.com/bitcoin-core/bitcoin-detached-sigs.git\n+git clone https://github.com/devrandom/gitian-builder.git\n+git clone https://github.com/bitcoin/bitcoin.git\n+```\n \n ### Write the release notes\n-\n Open a draft of the release notes for collaborative editing at https://github.com/bitcoin-core/bitcoin-devwiki/wiki.\n \n-For the period during which the notes are being edited on the wiki, the version on the branch should be wiped and replaced with a link to the wiki which should be used for all announcements until `-final`.\n+For the period during which the notes are being edited on the wiki, the version\n+on the branch should be wiped and replaced with a link to the wiki which should\n+be used for all announcements until `-final`.\n \n Write the release notes. `git shortlog` helps a lot, for example:\n \n-    git shortlog --no-merges v(current version, e.g. 0.19.2)..v(new version, e.g. 0.20.0)\n+```shell\n+git shortlog --no-merges v(current version, e.g. 0.19.2)..v(new version, e.g. 0.20.0)\n+```\n \n-(or ping @wumpus on IRC, he has specific tooling to generate the list of merged pulls\n-and sort them into categories based on labels).\n+(or ping [@wumpus](https://github.com/laanwj) on IRC, he has specific tooling to\n+generate the list of merged pulls and sort them into categories based on labels)\n \n Generate list of authors:\n \n-    git log --format='- %aN' v(current version, e.g. 0.20.0)..v(new version, e.g. 0.20.1) | sort -fiu\n+```shell\n+git log --format='- %aN' v(current version, e.g. 0.20.0)..v(new version, e.g. 0.20.1) | sort -fiu\n+```\n \n Tag the version (or release candidate) in git:\n \n-    git tag -s v(new version, e.g. 0.20.0)\n+```shell\n+git tag -s v(new version, e.g. 0.20.0)\n+```\n \n ### Setup and perform Gitian builds\n-\n-If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)), then at this point you should run it with the \"--build\" command. Otherwise ignore this.\n+If you're using the automated script (found in [contrib/gitian-build.py](/contrib/gitian-build.py)),\n+then at this point you should run it with the `--build` command. Otherwise\n+ignore this.\n \n Setup Gitian descriptors:\n+```shell\n+pushd ./bitcoin\n+export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n+export VERSION=(new version, e.g. 0.20.0)\n+git fetch\n+git checkout v${VERSION}\n+popd\n+```\n \n-    pushd ./bitcoin\n-    export SIGNER=\"(your Gitian key, ie bluematt, sipa, etc)\"\n-    export VERSION=(new version, e.g. 0.20.0)\n-    git fetch\n-    git checkout v${VERSION}\n-    popd\n-\n-Ensure your gitian.sigs are up-to-date if you wish to gverify your builds against other Gitian signatures.\n-\n-    pushd ./gitian.sigs\n-    git pull\n-    popd\n-\n-Ensure gitian-builder is up-to-date:\n+Ensure your `gitian.sigs` are up-to-date if you wish to verify your builds\n+against other Gitian signatures.\n+```shell\n+pushd ./gitian.sigs\n+git pull\n+popd\n+```\n \n-    pushd ./gitian-builder\n-    git pull\n-    popd\n+Ensure `gitian-builder` is up-to-date:\n+```shell\n+pushd ./gitian-builder\n+git pull\n+popd\n+```\n \n ### Fetch and create inputs: (first time, or when dependency versions change)\n+```shell\n+pushd ./gitian-builder\n+mkdir -p inputs\n+wget -O inputs/osslsigncode-2.0.tar.gz https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n+echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\n+popd\n+```\n \n-    pushd ./gitian-builder\n-    mkdir -p inputs\n-    wget -O inputs/osslsigncode-2.0.tar.gz https://github.com/mtrojnar/osslsigncode/archive/2.0.tar.gz\n-    echo '5a60e0a4b3e0b4d655317b2f12a810211c50242138322b16e7e01c6fbb89d92f inputs/osslsigncode-2.0.tar.gz' | sha256sum -c\n-    popd\n-\n-Create the macOS SDK tarball, see the [macOS build instructions](build-osx.md#deterministic-macos-dmg-notes) for details, and copy it into the inputs directory.\n+Create the macOS SDK tarball, see the [macOS build instructions](build-osx.md#deterministic-macos-dmg-notes)\n+for details, and copy it into the inputs directory.\n \n ### Optional: Seed the Gitian sources cache and offline git repositories\n \n-NOTE: Gitian is sometimes unable to download files. If you have errors, try the step below.\n+**Note:** Gitian is sometimes unable to download files. If you have errors, try\n+the step below.\n \n-By default, Gitian will fetch source files as needed. To cache them ahead of time, make sure you have checked out the tag you want to build in bitcoin, then:\n+By default, Gitian will fetch source files as needed. To cache them ahead of\n+time, make sure you have checked out the tag you want to build in bitcoin, then:\n \n-    pushd ./gitian-builder\n-    make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n-    popd\n+```shell\n+pushd ./gitian-builder\n+make -C ../bitcoin/depends download SOURCES_PATH=`pwd`/cache/common\n+popd\n+```\n \n Only missing files will be fetched, so this is safe to re-run for each build.\n \n-NOTE: Offline builds must use the --url flag to ensure Gitian fetches only from local URLs. For example:\n+**Note:** Offline builds must use the `--url` flag to ensure Gitian fetches only\n+from local URLs. For example:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n-    popd\n+```shell\n+pushd ./gitian-builder\n+./bin/gbuild --url bitcoin=/path/to/bitcoin,signature=/path/to/sigs {rest of arguments}\n+popd\n+```\n \n-The gbuild invocations below <b>DO NOT DO THIS</b> by default.\n+The `gbuild` invocations below <b>DO NOT DO THIS</b> by default.\n \n-### Build and sign Bitcoin Core for Linux, Windows, and macOS:\n+### Build and sign Bitcoin Core:\n \n-    pushd ./gitian-builder\n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n+**Linux**\n+```shell\n+pushd ./gitian-builder\n+./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-linux --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+mv build/out/bitcoin-*.tar.gz build/out/src/bitcoin-*.tar.gz ../\n+```\n \n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n-    mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n+**Windows**\n+```shell\n+./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+mv build/out/bitcoin-*-win-unsigned.tar.gz inputs/bitcoin-win-unsigned.tar.gz\n+mv build/out/bitcoin-*.zip build/out/bitcoin-*.exe ../\n+```\n \n-    ./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n-    mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n-    popd\n+**macOS**\n+```shell\n+./bin/gbuild --num-make 2 --memory 3000 --commit bitcoin=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-unsigned --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+mv build/out/bitcoin-*-osx-unsigned.tar.gz inputs/bitcoin-osx-unsigned.tar.gz\n+mv build/out/bitcoin-*.tar.gz build/out/bitcoin-*.dmg ../\n+popd\n+```\n \n Build output expected:\n-\n   1. source tarball (`bitcoin-${VERSION}.tar.gz`)\n   2. linux 32-bit and 64-bit dist tarballs (`bitcoin-${VERSION}-linux[32|64].tar.gz`)\n   3. windows 32-bit and 64-bit unsigned installers and dist zips (`bitcoin-${VERSION}-win[32|64]-setup-unsigned.exe`, `bitcoin-${VERSION}-win[32|64].zip`)\n@@ -171,96 +213,106 @@ Build output expected:\n \n ### Verify other gitian builders signatures to your own. (Optional)\n \n-Add other gitian builders keys to your gpg keyring, and/or refresh keys: See `../bitcoin/contrib/gitian-keys/README.md`.\n+Add other gitian builders keys to your GPG keyring, and/or refresh keys: See `../bitcoin/contrib/gitian-keys/README.md`.\n \n Verify the signatures\n-\n-    pushd ./gitian-builder\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n-    popd\n+```shell\n+pushd ./gitian-builder\n+./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-linux ../bitcoin/contrib/gitian-descriptors/gitian-linux.yml\n+./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-win.yml\n+./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-unsigned ../bitcoin/contrib/gitian-descriptors/gitian-osx.yml\n+popd\n+```\n \n ### Next steps:\n+Commit your signature to `gitian.sigs`:\n+```shell\n+pushd gitian.sigs\n+git add ${VERSION}-linux/\"${SIGNER}\"\n+git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n+git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n+git commit -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n+git push  # Assuming you can push to the gitian.sigs tree\n+popd\n+```\n \n-Commit your signature to gitian.sigs:\n-\n-    pushd gitian.sigs\n-    git add ${VERSION}-linux/\"${SIGNER}\"\n-    git add ${VERSION}-win-unsigned/\"${SIGNER}\"\n-    git add ${VERSION}-osx-unsigned/\"${SIGNER}\"\n-    git commit -m \"Add ${VERSION} unsigned sigs for ${SIGNER}\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n-\n-Codesigner only: Create Windows/macOS detached signatures:\n-- Only one person handles codesigning. Everyone else should skip to the next step.\n-- Only once the Windows/macOS builds each have 3 matching signatures may they be signed with their respective release keys.\n-\n-Codesigner only: Sign the macOS binary:\n-\n-    transfer bitcoin-osx-unsigned.tar.gz to macOS for signing\n-    tar xf bitcoin-osx-unsigned.tar.gz\n-    ./detached-sig-create.sh -s \"Key ID\"\n-    Enter the keychain password and authorize the signature\n-    Move signature-osx.tar.gz back to the gitian host\n-\n-Codesigner only: Sign the windows binaries:\n-\n-    tar xf bitcoin-win-unsigned.tar.gz\n-    ./detached-sig-create.sh -key /path/to/codesign.key\n-    Enter the passphrase for the key when prompted\n-    signature-win.tar.gz will be created\n+**Codesigner only:** Create Windows/macOS detached signatures:\n+- Only one person handles codesigning. Everyone else should skip to the next\n+step.\n+- Only once the Windows/macOS builds each have 3 matching signatures may they be\n+signed with their respective release keys.\n+\n+**Codesigner only:** Sign the macOS binary:\n+```shell\n+transfer bitcoin-osx-unsigned.tar.gz to macOS for signing\n+tar xf bitcoin-osx-unsigned.tar.gz\n+./detached-sig-create.sh -s \"Key ID\"\n+Enter the keychain password and authorize the signature\n+Move signature-osx.tar.gz back to the gitian host\n+```\n \n-Codesigner only: Commit the detached codesign payloads:\n+**Codesigner only:** Sign the windows binaries:\n+```shell\n+tar xf bitcoin-win-unsigned.tar.gz\n+./detached-sig-create.sh -key /path/to/codesign.key\n+Enter the passphrase for the key when prompted\n+signature-win.tar.gz will be created\n+```\n \n-    cd ~/bitcoin-detached-sigs\n-    checkout the appropriate branch for this release series\n-    rm -rf *\n-    tar xf signature-osx.tar.gz\n-    tar xf signature-win.tar.gz\n-    git add -a\n-    git commit -m \"point to ${VERSION}\"\n-    git tag -s v${VERSION} HEAD\n-    git push the current branch and new tag\n+**Codesigner only:**  Commit the detached codesign payloads:\n+```shell\n+cd ~/bitcoin-detached-sigs\n+checkout the appropriate branch for this release series\n+rm -rf *\n+tar xf signature-osx.tar.gz\n+tar xf signature-win.tar.gz\n+git add -a\n+git commit -m \"point to ${VERSION}\"\n+git tag -s v${VERSION} HEAD\n+git push the current branch and new tag\n+```\n \n-Non-codesigners: wait for Windows/macOS detached signatures:\n+**Non-codesigners:** wait for Windows/macOS detached signatures:\n \n-- Once the Windows/macOS builds each have 3 matching signatures, they will be signed with their respective release keys.\n-- Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs) repository, which can be combined with the unsigned apps to create signed binaries.\n+- Once the Windows/macOS builds each have 3 matching signatures, they will be\n+signed with their respective release keys.\n+- Detached signatures will then be committed to the [bitcoin-detached-sigs](https://github.com/bitcoin-core/bitcoin-detached-sigs)\n+repository, which can be combined with the unsigned apps to create signed\n+binaries.\n \n Create (and optionally verify) the signed macOS binary:\n-\n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n-    mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n-    popd\n+```shell\n+pushd ./gitian-builder\n+./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-osx-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-osx-signed ../bitcoin/contrib/gitian-descriptors/gitian-osx-signer.yml\n+mv build/out/bitcoin-osx-signed.dmg ../bitcoin-${VERSION}-osx.dmg\n+popd\n+```\n \n Create (and optionally verify) the signed Windows binaries:\n-\n-    pushd ./gitian-builder\n-    ./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    ./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n-    mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n-    popd\n+```shell\n+pushd ./gitian-builder\n+./bin/gbuild -i --commit signature=v${VERSION} ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+./bin/gsign --signer \"$SIGNER\" --release ${VERSION}-win-signed --destination ../gitian.sigs/ ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+./bin/gverify -v -d ../gitian.sigs/ -r ${VERSION}-win-signed ../bitcoin/contrib/gitian-descriptors/gitian-win-signer.yml\n+mv build/out/bitcoin-*win64-setup.exe ../bitcoin-${VERSION}-win64-setup.exe\n+popd\n+```\n \n Commit your signature for the signed macOS/Windows binaries:\n-\n-    pushd gitian.sigs\n-    git add ${VERSION}-osx-signed/\"${SIGNER}\"\n-    git add ${VERSION}-win-signed/\"${SIGNER}\"\n-    git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n-    git push  # Assuming you can push to the gitian.sigs tree\n-    popd\n+```shell\n+pushd gitian.sigs\n+git add ${VERSION}-osx-signed/\"${SIGNER}\"\n+git add ${VERSION}-win-signed/\"${SIGNER}\"\n+git commit -m \"Add ${SIGNER} ${VERSION} signed binaries signatures\"\n+git push  # Assuming you can push to the gitian.sigs tree\n+popd\n+```\n \n ### After 3 or more people have gitian-built and their results match:\n-\n - Create `SHA256SUMS.asc` for the builds, and GPG-sign it:\n-\n-```bash\n+```shell\n sha256sum * > SHA256SUMS\n ```\n \n@@ -277,72 +329,67 @@ bitcoin-${VERSION}.tar.gz\n bitcoin-${VERSION}-win64-setup.exe\n bitcoin-${VERSION}-win64.zip\n ```\n-The `*-debug*` files generated by the gitian build contain debug symbols\n-for troubleshooting by developers. It is assumed that anyone that is interested\n-in debugging can run gitian to generate the files for themselves. To avoid\n-end-user confusion about which file to pick, as well as save storage\n-space *do not upload these to the bitcoin.org server, nor put them in the torrent*.\n+The `*-debug*` files generated by the gitian build contain debug symbols for\n+troubleshooting by developers. It is assumed that anyone that is interested in\n+debugging can run gitian to generate the files for themselves. To avoid end-user\n+confusion about which file to pick, as well as save storage space *do not upload\n+these to the bitcoin.org server, nor put them in the torrent*.\n \n - GPG-sign it, delete the unsigned file:\n-```\n+```shell\n gpg --digest-algo sha256 --clearsign SHA256SUMS # outputs SHA256SUMS.asc\n rm SHA256SUMS\n ```\n-(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:` header that GPG adds with the SHA256 used for the files)\n-Note: check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a spurious/nonsensical entry.\n \n-- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the bitcoin.org server\n-  into `/var/www/bin/bitcoin-core-${VERSION}`\n+(the digest algorithm is forced to sha256 to avoid confusion of the `Hash:`\n+header that GPG adds with the SHA256 used for the files)\n+**Note:** check that SHA256SUMS itself doesn't end up in SHA256SUMS, which is a\n+spurious/nonsensical entry.\n+\n+- Upload zips and installers, as well as `SHA256SUMS.asc` from last step, to the\n+bitcoin.org server into `/var/www/bin/bitcoin-core-${VERSION}`\n \n-- A `.torrent` will appear in the directory after a few minutes. Optionally help seed this torrent. To get the `magnet:` URI use:\n-```bash\n+- A `.torrent` will appear in the directory after a few minutes. Optionally help\n+seed this torrent. To get the `magnet:` URI use:\n+\n+```shell\n transmission-show -m <torrent file>\n ```\n+\n Insert the magnet URI into the announcement sent to mailing lists. This permits\n people without access to `bitcoin.org` to download the binary distribution.\n Also put it into the `optional_magnetlink:` slot in the YAML file for\n bitcoin.org (see below for bitcoin.org update instructions).\n \n - Update bitcoin.org version\n-\n-  - First, check to see if the Bitcoin.org maintainers have prepared a\n-    release: https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n-\n-      - If they have, it will have previously failed their Travis CI\n-        checks because the final release files weren't uploaded.\n-        Trigger a Travis CI rebuild---if it passes, merge.\n+  - First, check to see if the Bitcoin.org maintainers have prepared a release:\n+  https://github.com/bitcoin-dot-org/bitcoin.org/labels/Core\n+      - If they have, it will have previously failed their Travis CI checks\n+      because the final release files weren't uploaded. Trigger a Travis CI\n+      rebuild. If it passes, merge.\n \n   - If they have not prepared a release, follow the Bitcoin.org release\n     instructions: https://github.com/bitcoin-dot-org/bitcoin.org/blob/master/docs/adding-events-release-notes-and-alerts.md#release-notes\n-\n-  - After the pull request is merged, the website will automatically show the newest version within 15 minutes, as well\n-    as update the OS download links.\n+  - After the pull request is merged, the website will automatically show the\n+  newest version within 15 minutes, as well as update the OS download links.\n \n - Update other repositories and websites for new version\n-\n   - bitcoincore.org blog post\n-\n   - bitcoincore.org maintained versions update:\n     [table](https://github.com/bitcoin-core/bitcoincore.org/commits/master/_includes/posts/maintenance-table.md)\n-\n   - bitcoincore.org RPC documentation update\n-\n   - Update packaging repo\n-\n-      - Notify BlueMatt so that he can start building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n-\n-      - Push the flatpak to flathub, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n-\n-      - Push the latest version to master (if applicable), e.g. https://github.com/bitcoin-core/packaging/pull/32\n-\n-      - Create a new branch for the major release \"0.xx\" from master (used to build the snap package) and request the\n-        track (if applicable), e.g. https://forum.snapcraft.io/t/track-request-for-bitcoin-core-snap/10112/7\n-\n-      - Notify MarcoFalke so that he can start building the snap package\n-\n+      - Notify [BlueMatt](https://github.com/TheBlueMatt) so that he can start\n+      building [the PPAs](https://launchpad.net/~bitcoin/+archive/ubuntu/bitcoin)\n+      - Push the `flatpak` to `flathub`, e.g. https://github.com/flathub/org.bitcoincore.bitcoin-qt/pull/2\n+      - Push the latest version to `master` (if applicable), e.g. https://github.com/bitcoin-core/packaging/pull/32\n+      - Create a new branch for the major release \"0.xx\" from `master` (used to\n+        build the snap package) and request the track (if applicable), e.g. https://forum.snapcraft.io/t/track-request-for-bitcoin-core-snap/10112/7\n+      - Notify [MarcoFalke](https://github.com/MarcoFalke) so that he can start\n+      building the snap package\n         - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging (Click \"Import Now\" to fetch the branch)\n         - https://code.launchpad.net/~bitcoin-core/bitcoin-core-snap/+git/packaging/+ref/0.xx (Click \"Create snap package\")\n-        - Name it \"bitcoin-core-snap-0.xx\"\n+        - Name it `bitcoin-core-snap-0.xx`\n         - Leave owner and series as-is\n         - Select architectures that are compiled via gitian\n         - Leave \"automatically build when branch changes\" unticked\n@@ -351,14 +398,18 @@ bitcoin.org (see below for bitcoin.org update instructions).\n         - Tick the \"edge\" box\n         - Put \"0.xx\" in the track field\n         - Click \"create snap package\"\n-        - Click \"Request builds\" for every new release on this branch (after updating the snapcraft.yml in the branch to reflect the latest gitian results)\n-        - Promote release on https://snapcraft.io/bitcoin-core/releases if it passes sanity checks\n+        - Click \"Request builds\" for every new release on this branch  \n+        **Note:** After updating the `snapcraft.yml` in the branch to reflect\n+        the latest Gitian results)\n+        - Promote release on https://snapcraft.io/bitcoin-core/releases if it\n+        passes sanity checks\n \n   - This repo\n+      - Archive the release notes for the new version to `doc/release-notes/`\n+      (branch `master` and branch of the release)\n \n-      - Archive the release notes for the new version to `doc/release-notes/` (branch `master` and branch of the release)\n-\n-      - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new) with a link to the archived release notes\n+      - Create a [new GitHub release](https://github.com/bitcoin/bitcoin/releases/new)\n+      with a link to the archived release notes\n \n - Announce the release:\n \n@@ -368,19 +419,23 @@ bitcoin.org (see below for bitcoin.org update instructions).\n \n   - Update title of #bitcoin on Freenode IRC\n \n-  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out itself\n+  - Optionally twitter, reddit /r/Bitcoin, ... but this will usually sort out\n+  itself\n \n   - Celebrate\n \n ### Additional information\n \n #### How to calculate `m_assumed_blockchain_size` and `m_assumed_chain_state_size`\n \n-Both variables are used as a guideline for how much space the user needs on their drive in total, not just strictly for the blockchain.\n-Note that all values should be taken from a **fully synced** node and have an overhead of 5-10% added on top of its base value.\n+Both variables are used as a guideline for how much space the user needs on\n+their drive in total, not just strictly for the blockchain. Note that all values\n+should be taken from a **fully synced** node and have an overhead of 5-10% added\n+on top of its base value.\n \n To calculate `m_assumed_blockchain_size`:\n-- For `mainnet` -> Take the size of the data directory, excluding `/regtest` and `/testnet3` directories.\n+- For `mainnet` -> Take the size of the data directory, excluding `/regtest` and\n+`/testnet3` directories.\n - For `testnet` -> Take the size of the `/testnet3` directory.\n \n \n@@ -389,5 +444,8 @@ To calculate `m_assumed_chain_state_size`:\n - For `testnet` -> Take the size of the `/testnet3/chainstate` directory.\n \n Notes:\n-- When taking the size for `m_assumed_blockchain_size`, there's no need to exclude the `/chainstate` directory since it's a guideline value and an overhead will be added anyway.\n-- The expected overhead for growth may change over time, so it may not be the same value as last release; pay attention to that when changing the variables.\n+- When taking the size for `m_assumed_blockchain_size`, there's no need to\n+exclude the `/chainstate` directory since it's a guideline value and an overhead\n+will be added anyway.\n+- The expected overhead for growth may change over time, so it may not be the\n+same value as last release; pay attention to that when changing the variables."
      }
    ]
  },
  {
    "sha": "5a797b40fb3102c98df2403744112c25d8572e98",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1YTc5N2I0MGZiMzEwMmM5OGRmMjQwMzc0NDExMmMyNWQ4NTcyZTk4",
    "commit": {
      "author": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2020-01-22T10:07:42Z"
      },
      "committer": {
        "name": "Giulio Lombardo",
        "email": "giulio.lombardo@gmail.com",
        "date": "2020-01-22T10:07:42Z"
      },
      "message": "Code review",
      "tree": {
        "sha": "6e873a30c2f1c07db5a2cf63a8e6be2913e3f7cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e873a30c2f1c07db5a2cf63a8e6be2913e3f7cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5a797b40fb3102c98df2403744112c25d8572e98",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7+97C5BqgmhVGzQ3/ph1GE19efcFAl4oHu4ACgkQ/ph1GE19\nefdCgg//Z3vqk8ieHPMxdl+LWo45tN6bf5HOAr8k5Ahnqv1TCZVMJOf3r3RxSA6x\nhU9D7niAdLeO6UuC/2o81pyjC36/Bc7kqoa69DRx48kkCi92kQOVtEDSX7DIQ8XB\nPEpPhr71nmbNTEDgTGhAJxA+QKrgvwN/0HqpRmBprvHbHROEFdIq/Paz3ASyEDct\n+Z1UiLAEfQGITCL4F/OLP5jgHLLKTs5iqJtQ+cYz7Pdd8q9J0uwFRmUjENuST/hE\nxrB+udD5r6ZjTqUnGsESgwTCEnmw23nUynvCl+Hx/1S0d0MnyTb0CH3JhM6TwaCy\nx77tMk4tp5YOm6/+koDFOhYSln8pNPIr+Gnm0+kjzyrHNYZHVe1JX0DfU+bcQGDm\nSS+5QmNufcMigoWjH+bsVTo+3qLqnjJvKMlTTl6/r2ebz+2kaeFj8SL3HpFYoaUq\nicutcgVqipLf4nJk/Vdlz+TcAOJao/x8ZR99NPqFVaQBOBKGcXRTgflaejpOxbk8\nUGIYZNI8t3dtr3bOe/fTJP2A5ABsSiqmG9y5LBmycvyY1Sjt9j7aaHj//vqukgmQ\nF4qUJPQNw1jh0IzrbySQPgbPeiiyYtSsDloMKi+JPuslADTHU1UVBJWfveqiprf5\nY1ywF6OeY4twWDImBU/xZufdkRbsRLAK7BiJ17GcUn8ch6EbZsY=\n=LFHe\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e873a30c2f1c07db5a2cf63a8e6be2913e3f7cf\nparent b90172c668fa43be570b58bb12eb81ab462d04b4\nauthor Giulio Lombardo <giulio.lombardo@gmail.com> 1579687662 +0100\ncommitter Giulio Lombardo <giulio.lombardo@gmail.com> 1579687662 +0100\n\nCode review\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a797b40fb3102c98df2403744112c25d8572e98",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5a797b40fb3102c98df2403744112c25d8572e98",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5a797b40fb3102c98df2403744112c25d8572e98/comments",
    "author": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "giulio92",
      "id": 15996263,
      "node_id": "MDQ6VXNlcjE1OTk2MjYz",
      "avatar_url": "https://avatars.githubusercontent.com/u/15996263?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/giulio92",
      "html_url": "https://github.com/giulio92",
      "followers_url": "https://api.github.com/users/giulio92/followers",
      "following_url": "https://api.github.com/users/giulio92/following{/other_user}",
      "gists_url": "https://api.github.com/users/giulio92/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/giulio92/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/giulio92/subscriptions",
      "organizations_url": "https://api.github.com/users/giulio92/orgs",
      "repos_url": "https://api.github.com/users/giulio92/repos",
      "events_url": "https://api.github.com/users/giulio92/events{/privacy}",
      "received_events_url": "https://api.github.com/users/giulio92/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b90172c668fa43be570b58bb12eb81ab462d04b4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b90172c668fa43be570b58bb12eb81ab462d04b4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b90172c668fa43be570b58bb12eb81ab462d04b4"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "c15a779bafc4800592b7b432c40b5c866b193c06",
        "filename": "doc/release-process.md",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5a797b40fb3102c98df2403744112c25d8572e98/doc/release-process.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5a797b40fb3102c98df2403744112c25d8572e98/doc/release-process.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-process.md?ref=5a797b40fb3102c98df2403744112c25d8572e98",
        "patch": "@@ -3,8 +3,8 @@\n ## Branch updates\n \n ### Before every release candidate\n-* Update translations (ping [@wumpus](https://github.com/laanwj) on IRC) see [translation_process.md](./translation_process.md#synchronising-translations).\n-* Update manpages, see [gen-manpages.sh](/contrib/devtools/README.md#gen-manpagessh).\n+* Update translations (ping [@wumpus](https://github.com/laanwj) on IRC) see [`translation_process.md]`(./translation_process.md#synchronising-translations).\n+* Update manpages, see [`gen-manpages.sh`](/contrib/devtools/README.md#gen-manpagessh).\n * Update release candidate version in [`configure.ac`](/configure.ac) (`CLIENT_VERSION_RC`).\n \n ### Before every major and minor release"
      }
    ]
  }
]