[
  {
    "sha": "1b3d7009280595108eb22ac1188bc4367804fc5d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYjNkNzAwOTI4MDU5NTEwOGViMjJhYzExODhiYzQzNjc4MDRmYzVk",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-19T17:38:00Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-20T08:40:44Z"
      },
      "message": "Allow zero-fee fundrawtxn and walletcreatefundedpsbt calls\n\nA check to raise an error on zero-fee txns was mistakenly extended in commit\na0d4957 from the bumpfee and send{toaddress, many} RPCs to also include\nfundrawtransaction and walletcreatefundedpsbt.\n\nThis commit overrides zero fee rate checking for these two RPCs, not only for\nthe feeRate (BTC/kvB) arg to return to previous behavior, but also for the new\nfee_rate (sat/vB) arg.",
      "tree": {
        "sha": "ae59a2d605fb801934bc4d0db0fcea224cf76c59",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae59a2d605fb801934bc4d0db0fcea224cf76c59"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1b3d7009280595108eb22ac1188bc4367804fc5d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+3gQwACgkQT1chs9Dj\nkh3D4g/+Mva68xvc+aWxqyBqFR8WtZVU9+18Q4mPtbDWZ0U2W4FgZf1Wm2L6Igxd\n+OwHTYL4/8W2t3anXSLHpukloEFwtXhMeRhPdHkXrTbkBAPjgk6oGz3rRal51a2w\nnihMqRuAGvtY1tvtjL8mAPyJwpulZaVTUGFCn91YZmUKOQdn8VFIxfpb8GUWMpBz\nkxwUv/Kw7c6L3glIxuYYoPzLbnC06eKDv1GFPSf9AFgXPYXK009o+ivAQmBdAzj4\nLqO2+v58RsmrLptCmQ7OOU4WqNB/W1K7X7OItZI8rIJZ/GRQaXLdRAk9SBZIK/Wk\nef9MIGwTOmASHFIgXmLdj6G6AzC1VuQ2GuZt3R/IZRhUAHkYqgkK8PruBAxTwYer\nAq1OKU7bTwmYPP8K+Q5hslRR6cCNBTye7jgZ8acbrSSfbkoifMUK8CaRJeYf8dez\nZzXhUdwNoD9Eus+YJqevfYU1ppjJDtMgjm7FJHTEW8w4ccZX6xAoiBYLuxoWcLRN\nyjKWAWmrTNe8uWsBchHoC4dFM036kEuvo8tZcIH3nT5j89gw/FjCB578pBzc0Oqr\noU9nfwXN66IXGMi1MQywkkf9I+W812UHrhYAIG/COE1xRmFaG2Xzcu8pk/msHuiy\nmmqiU2L9Oey+2WBFZdoMs3hZ8T7qcHYU8y4wwb408jIRuv9IIkw=\n=a+qQ\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIKJEZSoCDPib1vVIHZsPmscBFhfEgyMvxbNdVg7reR8JCP/wEBSgbZl6jVnn\nX91dzlZdppEI8QRft4EO8Ah5xFfme9hmZACD3+MNLvkMji4taHR0cHM6Ly9hbGlj\nZS5idGMuY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQdFg4x0Oc68uiI1sV\nhFF+7QjwIO3wCHMnYxYTZXO3c/eYiH1KiC6Uzx7cjg0dnSFBlFmkCPEEX7eBDvAI\nOrVjJOP9Q9UAg9/jDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVu\ndGltZXN0YW1wcy5vcmf/8BCYaiMop6ex3c7tMrlVTOvMCPEEX7eBDvAI9MdHED7m\nXmoAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5jb23w\nEKpMPHsYfHk1V5YmesxaviQI8CCel8Dve2PNlmWiUwWGeeZ13CxioI0DaU7P6NCZ\nWHqz1wjxBF+3gRHwCHWEjA/Z5s4JAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5j\nYWxlbmRhci5ldGVybml0eXdhbGwuY29t\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree ae59a2d605fb801934bc4d0db0fcea224cf76c59\nparent 04670ef81ea2300fcba4e1a492c4c6b0e0752848\nauthor Jon Atack <jon@atack.com> 1605807480 +0100\ncommitter Jon Atack <jon@atack.com> 1605861644 +0100\n\nAllow zero-fee fundrawtxn and walletcreatefundedpsbt calls\n\nA check to raise an error on zero-fee txns was mistakenly extended in commit\na0d4957 from the bumpfee and send{toaddress, many} RPCs to also include\nfundrawtransaction and walletcreatefundedpsbt.\n\nThis commit overrides zero fee rate checking for these two RPCs, not only for\nthe feeRate (BTC/kvB) arg to return to previous behavior, but also for the new\nfee_rate (sat/vB) arg.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b3d7009280595108eb22ac1188bc4367804fc5d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1b3d7009280595108eb22ac1188bc4367804fc5d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b3d7009280595108eb22ac1188bc4367804fc5d/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04670ef81ea2300fcba4e1a492c4c6b0e0752848",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04670ef81ea2300fcba4e1a492c4c6b0e0752848",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04670ef81ea2300fcba4e1a492c4c6b0e0752848"
      }
    ],
    "stats": {
      "total": 55,
      "additions": 27,
      "deletions": 28
    },
    "files": [
      {
        "sha": "b39d83495376686ea102be2559ac9fcb1deb8a3b",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 13,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b3d7009280595108eb22ac1188bc4367804fc5d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b3d7009280595108eb22ac1188bc4367804fc5d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=1b3d7009280595108eb22ac1188bc4367804fc5d",
        "patch": "@@ -219,14 +219,8 @@ static void SetFeeEstimateMode(const CWallet* pwallet, CCoinControl& cc, const U\n         if (!estimate_mode.isNull() && !estimate_mode.get_str().empty()) {\n             throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and fee_rate\");\n         }\n-        CFeeRate fee_rate_in_sat_vb{CFeeRate(AmountFromValue(fee_rate), COIN)};\n-        if (override_min_fee) {\n-            if (fee_rate_in_sat_vb <= CFeeRate(0)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid fee_rate %s (must be greater than 0)\", fee_rate_in_sat_vb.ToString(FeeEstimateMode::SAT_VB)));\n-            }\n-            cc.fOverrideFeeRate = true;\n-        }\n-        cc.m_feerate = fee_rate_in_sat_vb;\n+        cc.m_feerate = CFeeRate(AmountFromValue(fee_rate), COIN);\n+        if (override_min_fee) cc.fOverrideFeeRate = true;\n         // Default RBF to true for explicit fee_rate, if unset.\n         if (cc.m_signal_bip125_rbf == nullopt) cc.m_signal_bip125_rbf = true;\n         return;\n@@ -3150,11 +3144,7 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n             if (options.exists(\"estimate_mode\")) {\n                 throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot specify both estimate_mode and feeRate\");\n             }\n-            CFeeRate fee_rate(AmountFromValue(options[\"feeRate\"]));\n-            if (fee_rate <= CFeeRate(0)) {\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, strprintf(\"Invalid feeRate %s (must be greater than 0)\", fee_rate.ToString(FeeEstimateMode::BTC_KVB)));\n-            }\n-            coinControl.m_feerate = fee_rate;\n+            coinControl.m_feerate = CFeeRate(AmountFromValue(options[\"feeRate\"]));\n             coinControl.fOverrideFeeRate = true;\n         }\n "
      },
      {
        "sha": "8ee0ecab0acad273b4537cf1690f0edc0bd3516e",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=1b3d7009280595108eb22ac1188bc4367804fc5d",
        "patch": "@@ -721,11 +721,17 @@ def test_option_feerate(self):\n         result2 = node.fundrawtransaction(rawtx, {\"feeRate\": 2 * self.min_relay_tx_fee})\n         result3 = node.fundrawtransaction(rawtx, {\"fee_rate\": 10 * btc_kvb_to_sat_vb * self.min_relay_tx_fee})\n         result4 = node.fundrawtransaction(rawtx, {\"feeRate\": 10 * self.min_relay_tx_fee})\n+        # Test that funding non-standard \"zero-fee\" transactions is valid.\n+        result5 = self.nodes[3].fundrawtransaction(rawtx, {\"fee_rate\": 0})\n+        result6 = self.nodes[3].fundrawtransaction(rawtx, {\"feeRate\": 0})\n+\n         result_fee_rate = result['fee'] * 1000 / count_bytes(result['hex'])\n         assert_fee_amount(result1['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result2['fee'], count_bytes(result2['hex']), 2 * result_fee_rate)\n         assert_fee_amount(result3['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n         assert_fee_amount(result4['fee'], count_bytes(result3['hex']), 10 * result_fee_rate)\n+        assert_fee_amount(result5['fee'], count_bytes(result5['hex']), 0)\n+        assert_fee_amount(result6['fee'], count_bytes(result6['hex']), 0)\n \n         # With no arguments passed, expect fee of 141 satoshis.\n         assert_approx(node.fundrawtransaction(rawtx)[\"fee\"], vexp=0.00000141, vspan=0.00000001)\n@@ -752,19 +758,15 @@ def test_option_feerate(self):\n                     node.fundrawtransaction, rawtx, {\"estimate_mode\": mode, \"conf_target\": n, \"add_inputs\": True})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.000 sat/vB (must be greater than 0)\",\n-            node.fundrawtransaction, rawtx, {\"fee_rate\": 0, \"add_inputs\": True})\n-        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n-            node.fundrawtransaction, rawtx, {\"feeRate\": 0, \"add_inputs\": True})\n         for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1.000)}:\n             assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n                 node.fundrawtransaction, rawtx, {param: value, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount out of range\",\n-                node.fundrawtransaction, rawtx, {\"fee_rate\": -1, \"add_inputs\": True})\n+                node.fundrawtransaction, rawtx, {param: -1, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n-                node.fundrawtransaction, rawtx, {\"fee_rate\": {\"foo\": \"bar\"}, \"add_inputs\": True})\n+                node.fundrawtransaction, rawtx, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Invalid amount\",\n-                node.fundrawtransaction, rawtx, {\"fee_rate\": \"\", \"add_inputs\": True})\n+                node.fundrawtransaction, rawtx, {param: \"\", \"add_inputs\": True})\n \n         self.log.info(\"Test min fee rate checks are bypassed with fundrawtxn, e.g. a fee_rate under 1 sat/vB is allowed\")\n         node.fundrawtransaction(rawtx, {\"fee_rate\": 0.99999999, \"add_inputs\": True})"
      },
      {
        "sha": "5840801b009262daf918a7a28eff9a31359cc3b6",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 8,
        "deletions": 7,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=1b3d7009280595108eb22ac1188bc4367804fc5d",
        "patch": "@@ -192,26 +192,27 @@ def run_test(self):\n         assert_approx(res1[\"fee\"], 0.055, 0.005)\n         res2 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.1, \"add_inputs\": True})\n         assert_approx(res2[\"fee\"], 0.055, 0.005)\n+\n         self.log.info(\"Test min fee rate checks with walletcreatefundedpsbt are bypassed, e.g. a fee_rate under 1 sat/vB is allowed\")\n         res3 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"fee_rate\": 0.99999999, \"add_inputs\": True})\n         assert_approx(res3[\"fee\"], 0.00000381, 0.0000001)\n         res4 = self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {\"feeRate\": 0.00000999, \"add_inputs\": True})\n         assert_approx(res4[\"fee\"], 0.00000381, 0.0000001)\n \n+        self.log.info(\"Test min fee rate checks with walletcreatefundedpsbt are bypassed and that funding non-standard 'zero-fee' transactions is valid\")\n+        for param in [\"fee_rate\", \"feeRate\"]:\n+            assert_equal(self.nodes[1].walletcreatefundedpsbt(inputs, outputs, 0, {param: 0, \"add_inputs\": True})[\"fee\"], 0)\n+\n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-8, \"Invalid fee_rate 0.000 sat/vB (must be greater than 0)\",\n-            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": 0, \"add_inputs\": True})\n-        assert_raises_rpc_error(-8, \"Invalid feeRate 0.00000000 BTC/kvB (must be greater than 0)\",\n-            self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"feeRate\": 0, \"add_inputs\": True})\n         for param, value in {(\"fee_rate\", 100000), (\"feeRate\", 1)}:\n             assert_raises_rpc_error(-4, \"Fee exceeds maximum configured by user (e.g. -maxtxfee, maxfeerate)\",\n                 self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: value, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount out of range\",\n-                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": -1, \"add_inputs\": True})\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: -1, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Amount is not a number or string\",\n-                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": {\"foo\": \"bar\"}, \"add_inputs\": True})\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: {\"foo\": \"bar\"}, \"add_inputs\": True})\n             assert_raises_rpc_error(-3, \"Invalid amount\",\n-                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {\"fee_rate\": \"\", \"add_inputs\": True})\n+                self.nodes[1].walletcreatefundedpsbt, inputs, outputs, 0, {param: \"\", \"add_inputs\": True})\n \n         self.log.info(\"- raises RPC error if both feeRate and fee_rate are passed\")\n         assert_raises_rpc_error(-8, \"Cannot specify both fee_rate (sat/vB) and feeRate (BTC/kvB)\","
      },
      {
        "sha": "685e805877f2753e303487b1d7fa97a62149e0ca",
        "filename": "test/functional/wallet_send.py",
        "status": "modified",
        "additions": 7,
        "deletions": 1,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/wallet_send.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1b3d7009280595108eb22ac1188bc4367804fc5d/test/functional/wallet_send.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_send.py?ref=1b3d7009280595108eb22ac1188bc4367804fc5d",
        "patch": "@@ -303,10 +303,16 @@ def run_test(self):\n                 self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=v, estimate_mode=mode,\n                     expect_error=(-3, \"Expected type number for conf_target, got {}\".format(k)))\n \n-        # Test setting explicit fee rate just below the minimum.\n+        # Test setting explicit fee rate just below the minimum and at zero.\n         self.log.info(\"Explicit fee rate raises RPC error 'fee rate too low' if fee_rate of 0.99999999 is passed\")\n         self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0.99999999,\n             expect_error=(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0.99999999,\n+            expect_error=(-4, \"Fee rate (0.999 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, fee_rate=0,\n+            expect_error=(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n+        self.test_send(from_wallet=w0, to_wallet=w1, amount=1, arg_fee_rate=0,\n+            expect_error=(-4, \"Fee rate (0.000 sat/vB) is lower than the minimum fee rate setting (1.000 sat/vB)\"))\n \n         # TODO: Return hex if fee rate is below -maxmempool\n         # res = self.test_send(from_wallet=w0, to_wallet=w1, amount=1, conf_target=0.1, estimate_mode=\"sat/b\", add_to_wallet=False)"
      }
    ]
  },
  {
    "sha": "3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZjFlMTBiMmIxY2QxMWY3MTEyZmJhZDYzNTU0NjRiZDRhZGJiYzVj",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-19T17:47:24Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-20T08:40:47Z"
      },
      "message": "Update feeRate (BTC/kvB) to fee_rate (sat/vB) in wallet_bumpfee\n\nas the feeRate argument should soon be deprecated.\n\nAlso loosen one test (and a similar one) that caused a one-off CI failure with:\nexpected message\n'Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)'\nactual message\n'Insufficient total fee 0.00000141, must be at least 0.00001712 (oldFee 0.00001007 + incrementalFee 0.00000705)'",
      "tree": {
        "sha": "91a2ea96270d94720368a294ba45d4a9b79c2f01",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/91a2ea96270d94720368a294ba45d4a9b79c2f01"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+3gQ8ACgkQT1chs9Dj\nkh2twA//SAefppr+f5nuq+uyp5M6R9eMP21g2P7S4/91eCzRDrsOeaH7dLpZNpNH\nnsT0+3dFhx7G5YN08jg4W/hFUY3Rggxjei0dEPK+LO0IhPVVZ8Shwv7oe92ScIYp\nYP8vHnVCUm5RVsZt97aC+c47SteN0G692L4bNgJ+NryJ1NIffRpAAmXWl/NN/Qr3\n4W58Zxxi2IE2fSzQpk+YBb0JMUneVbvYRUwe3Ii5kTabI+86EZwjEirokipzCNFF\n/0FML9fhjd1RK8DyalIGz4QSB0EBFgoDfvecvvIeLpTYFUhdv/eRAdaGi4ruORGt\nt5+nOdcFlrWxtIz+NtmJK055g+pEQUehKnXdnok6q6j3T6qNtl0MV2f0nphb6+Rq\nik9dxId4cWdXn0/Kohl9Ax/zrqcBi5UfUWTNfFbpdlkKem73X3445z9U+iDNZa6e\nXoiNH9+d1TV/SNxDAcDbXbc7ov7t99QB4hHzJ2TR6cnf3VTDt/gPg+hlqqNetFeX\neF3HNxh2Idgm5UgjICR3PWZFBOJw1agBT7NkIbP8NeXol+qDWE6uGoiKtVjd7TfG\nnNoJdR36Vswe9X+zYjGvLZpmQdR43tZbvBsV+k3T8xEsbizeihHA4U/QI/xUjcZH\n4qaZFGnd0sN/eAiysJcCCkC9PyV+FnCKdA3+5R6wL7jNZImVy4s=\n=lm8k\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwID16bNGlIGKt8hf96sMimlwukcUhlq09m7ivJuXf/MrQCP/wEBJmtngvJoEG\nxyG3OogP9U8I8QRft4EQ8AiFCsNk7Sj7uQCD3+MNLvkMjiMiaHR0cHM6Ly9idGMu\nY2FsZW5kYXIuY2F0YWxsYXh5LmNvbf/wELkRGUcHJ0aReGXA4t82LikI8QRft4ER\n8AiSZylE9F/cEgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMuY2FsZW5kYXIu\nb3BlbnRpbWVzdGFtcHMub3Jn//AQ7aDQ7JzKc5CjDx0PkQlFQAjxBF+3gRPwCCtj\nhZh8bKQVAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRhci5ldGVybml0\neXdhbGwuY29t8BDujKwLGo0zNPfwTV03xJOZCPEEX7eBEPAIEDMobIIg7I8Ag9/j\nDS75DI4sK2h0dHBzOi8vYm9iLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 91a2ea96270d94720368a294ba45d4a9b79c2f01\nparent 1b3d7009280595108eb22ac1188bc4367804fc5d\nauthor Jon Atack <jon@atack.com> 1605808044 +0100\ncommitter Jon Atack <jon@atack.com> 1605861647 +0100\n\nUpdate feeRate (BTC/kvB) to fee_rate (sat/vB) in wallet_bumpfee\n\nas the feeRate argument should soon be deprecated.\n\nAlso loosen one test (and a similar one) that caused a one-off CI failure with:\nexpected message\n'Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)'\nactual message\n'Insufficient total fee 0.00000141, must be at least 0.00001712 (oldFee 0.00001007 + incrementalFee 0.00000705)'\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1b3d7009280595108eb22ac1188bc4367804fc5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1b3d7009280595108eb22ac1188bc4367804fc5d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1b3d7009280595108eb22ac1188bc4367804fc5d"
      }
    ],
    "stats": {
      "total": 8,
      "additions": 3,
      "deletions": 5
    },
    "files": [
      {
        "sha": "99c97372583bff9d5a5025d91d37ac1582a573fe",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
        "patch": "@@ -107,12 +107,10 @@ def test_invalid_parameters(self, rbf_node, peer_node, dest_address):\n             assert_raises_rpc_error(-3, \"Unexpected key {}\".format(key), rbf_node.bumpfee, rbfid, {key: NORMAL})\n \n         # Bumping to just above minrelay should fail to increase the total fee enough.\n-        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n-            rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00000141\", rbf_node.bumpfee, rbfid, {\"fee_rate\": INSUFFICIENT})\n \n         self.log.info(\"Test invalid fee rate settings\")\n-        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00, must be at least 0.00001704 (oldFee 0.00000999 + incrementalFee 0.00000705)\",\n-            rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n+        assert_raises_rpc_error(-8, \"Insufficient total fee 0.00\", rbf_node.bumpfee, rbfid, {\"fee_rate\": 0})\n         assert_raises_rpc_error(-4, \"Specified or calculated fee 0.141 is too high (cannot be higher than -maxtxfee 0.10\",\n             rbf_node.bumpfee, rbfid, {\"fee_rate\": TOO_HIGH})\n         assert_raises_rpc_error(-3, \"Amount out of range\", rbf_node.bumpfee, rbfid, {\"fee_rate\": -1})\n@@ -421,7 +419,7 @@ def test_watchonly_psbt(self, peer_node, rbf_node, dest_address):\n     self.sync_all()\n \n     # Create single-input PSBT for transaction to be bumped\n-    psbt = watcher.walletcreatefundedpsbt([], {dest_address: 0.0005}, 0, {\"feeRate\": 0.00001}, True)['psbt']\n+    psbt = watcher.walletcreatefundedpsbt([], {dest_address: 0.0005}, 0, {\"fee_rate\": 1}, True)['psbt']\n     psbt_signed = signer.walletprocesspsbt(psbt=psbt, sign=True, sighashtype=\"ALL\", bip32derivs=True)\n     psbt_final = watcher.finalizepsbt(psbt_signed[\"psbt\"])\n     original_txid = watcher.sendrawtransaction(psbt_final[\"hex\"])"
      }
    ]
  },
  {
    "sha": "9f08780dd7946b63476e9736745131db8e7f4e93",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZjA4NzgwZGQ3OTQ2YjYzNDc2ZTk3MzY3NDUxMzFkYjhlN2Y0ZTkz",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-19T16:31:07Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2020-11-20T08:43:52Z"
      },
      "message": "Use the correct incremental fee constant in bumpfee help\n\nand remove redundant units (\"Must be at least 1.000 sat/vB sat/vB\" -> \"1.00 sat vB\")",
      "tree": {
        "sha": "a7d8fcc995c44311ba1c63c4b7344578929e193a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a7d8fcc995c44311ba1c63c4b7344578929e193a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9f08780dd7946b63476e9736745131db8e7f4e93",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl+3gigACgkQT1chs9Dj\nkh0lERAAkAPDGSDSuBr/FOYXTmVk7EeIhqmQRmuxoag7Ejl8LAJwTW6iQxz640Tw\nvmw6XQDEr2jBPLv2PkBFDaSBcCuvisXThhZ/Jyum826yMKmy639dM7ymUX1aVQd2\nLMhn0TY5NCHQSCvy31eZzQ6E00HjyQgEcp1O30UrDiy28vaqS4Fp158JO2VgTl+R\npQxXkxeEGTzZB4xYylA//ki0LmfsB3Ipc7Bg611qjf7mhL3Y191CRIXeC+w/2URb\nzzNAPawM/HBm5F4Y7VJComyIMyXyhcATNcDzWFzWSBnpEdbMpaWb5zIx8z/1TCWM\nOUNB97LXn9vK1wOcv/YzoQwjX2f1W98Dtlgo5FIilfs046Ktp2kfs7sg4QTJxBb2\ny9FMvbHaG1LOmbJ4u7cnBEBVfDmc13tRa7/raiZQgNKBBOQGBovqFTyBWs5pYYXH\nywXJXy1fGEvSr8NVCRytyoUKGv6Ms8dMxHkKco0+oFDLXKk53gp7RsZFOD/GXsYn\nGrcu3cY6AQsMhrk8pcgOV8PM8rkOp/Ij+5kfXeJsmwLsnuPLIATJ4K6pQbVNYw3J\ndBPLKp0RSnCTbFk0wevoFUnsTGFlhwYMBSJgspGYH68N1cFOVfYOc5X3IyZ3iCuc\nq3gH/nYFjeuWkq7jP2qC4IoIWuoIpetyNV7JYg0uUrp1kXWK5I4=\n=y5f+\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIJIpVZgEZFlRv+6B3oQSF8raXEjQJh5Kmoeapa0cMRrmCP/wECUdmiLkDgHG\n9kdU17PsOAkI8SAgYQNHyAx60kUYHavepLImFSViNha8XlmE0zMY29g/BwjxBF+3\nginwCEUgiQACMZlhAIPf4w0u+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRh\nci5vcGVudGltZXN0YW1wcy5vcmf/8BAms9JklGhbO3KYMxSFGd6uCPEEX7eCKfAI\nMem2CR+RaGoAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4\neS5jb23/8BB0hQs09drolSmtN0lKbRdQCPEEX7eCLPAIfFy/rmPP3UQAg9/jDS75\nDI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5jb23wEObC\nTtSPPV3q4i87srfTeZoI8CDjKXEb4ryfMyBckDoF9KEMhNqAlZ/j9Fexh1BdIjF7\n/AjxBF+3girwCF941wqMakLBAIPf4w0u+QyOLCtodHRwczovL2JvYi5idGMuY2Fs\nZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree a7d8fcc995c44311ba1c63c4b7344578929e193a\nparent 3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c\nauthor Jon Atack <jon@atack.com> 1605803467 +0100\ncommitter Jon Atack <jon@atack.com> 1605861832 +0100\n\nUse the correct incremental fee constant in bumpfee help\n\nand remove redundant units (\"Must be at least 1.000 sat/vB sat/vB\" -> \"1.00 sat vB\")\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f08780dd7946b63476e9736745131db8e7f4e93",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9f08780dd7946b63476e9736745131db8e7f4e93",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9f08780dd7946b63476e9736745131db8e7f4e93/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3f1e10b2b1cd11f7112fbad6355464bd4adbbc5c"
      }
    ],
    "stats": {
      "total": 5,
      "additions": 2,
      "deletions": 3
    },
    "files": [
      {
        "sha": "dd75e876bc72b769cd9d7ec07524e0314fd6e68c",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9f08780dd7946b63476e9736745131db8e7f4e93/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9f08780dd7946b63476e9736745131db8e7f4e93/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=9f08780dd7946b63476e9736745131db8e7f4e93",
        "patch": "@@ -29,7 +29,6 @@\n #include <util/translation.h>\n #include <util/url.h>\n #include <util/vector.h>\n-#include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/context.h>\n #include <wallet/feebumper.h>\n@@ -3383,7 +3382,7 @@ RPCHelpMan signrawtransactionwithwallet()\n static RPCHelpMan bumpfee_helper(std::string method_name)\n {\n     bool want_psbt = method_name == \"psbtbumpfee\";\n-    const std::string incremental_fee{CFeeRate(DEFAULT_MIN_RELAY_TX_FEE).ToString(FeeEstimateMode::SAT_VB)};\n+    const std::string incremental_fee{CFeeRate(DEFAULT_INCREMENTAL_RELAY_FEE).ToString(FeeEstimateMode::SAT_VB)};\n \n     return RPCHelpMan{method_name,\n         \"\\nBumps the fee of an opt-in-RBF transaction T, replacing it with a new transaction B.\\n\"\n@@ -3406,7 +3405,7 @@ static RPCHelpMan bumpfee_helper(std::string method_name)\n                     {\"conf_target\", RPCArg::Type::NUM, /* default */ \"wallet -txconfirmtarget\", \"Confirmation target in blocks\\n\"},\n                     {\"fee_rate\", RPCArg::Type::AMOUNT, /* default */ \"not set, fall back to wallet fee estimation\",\n                              \"\\nSpecify a fee rate in \" + CURRENCY_ATOM + \"/vB instead of relying on the built-in fee estimator.\\n\"\n-                             \"Must be at least \" + incremental_fee + \" \" + CURRENCY_ATOM + \"/vB higher than the current transaction fee rate.\\n\"\n+                             \"Must be at least \" + incremental_fee + \" higher than the current transaction fee rate.\\n\"\n                              \"WARNING: before version 0.21, fee_rate was in \" + CURRENCY_UNIT + \"/kvB. As of 0.21, fee_rate is in \" + CURRENCY_ATOM + \"/vB.\\n\"},\n                     {\"replaceable\", RPCArg::Type::BOOL, /* default */ \"true\", \"Whether the new transaction should still be\\n\"\n                              \"marked bip-125 replaceable. If true, the sequence numbers in the transaction will\\n\""
      }
    ]
  }
]