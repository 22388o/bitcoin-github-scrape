[
  {
    "sha": "fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI3ZjAzYjQ5NDM1NDBhYTJlYWIyODNkNGNmNTBhZDRhMWEwMWY4",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T07:58:06Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T11:52:41Z"
      },
      "message": "Move LoadBlockIndexDB to BlockManager",
      "tree": {
        "sha": "fa20dcc35b6801c7364eb9a0c81e1112de35a692",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fa20dcc35b6801c7364eb9a0c81e1112de35a692"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhnbwwAwREHZpJQfmPoqMK/hEcLUiDxgopLf6FJt9NuA7W8p+upUo+jshJVuxeH\nJc18L9IWEkx+digKqVcez6mFXC+c6teAtokHnJLHlgGnO09flk/KFLmNQaQz4hqU\nXHuEhTuS8hf9c1Z1fJkioFG428jueoj5XUf5Q0aC+0DtGhnoLWo3OxvyRgaFYgFN\nkrkpB0UeJ02rD/SlVIZIFb4FtSxTq6UvmQrXGk8VW+U3HQ6sOZtm+EWexUWzg0SN\nOx9fkfMEcIUDeOpJLay8oqh6gQTB22jvjvs2IKTgCaEBAc0w2R8M+H/nPOciZH17\n7BmLEC9SdySRR06PlMp5Ajkkvwrtc+2Z4SiqyzkDui2mBSaIBhpx/KLYfJnNLIoE\nIlBEQDe4MWhwTPCqKWlTToC9uC2Lz08N6rbC32Dm9meIc9SSX7HX80S9ntWtD+zh\nCuM/7wQXYF51OlFoi1RYqshCqyK1q+wA2QYzOhzf5hkibmxdAogX43nrg3oTidMu\nRa+g4nEH\n=DdtE\n-----END PGP SIGNATURE-----",
        "payload": "tree fa20dcc35b6801c7364eb9a0c81e1112de35a692\nparent c0224bc96287b04c9ac4d2ae93621c72be5c2baf\nauthor MarcoFalke <falke.marco@gmail.com> 1625126286 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626349961 +0200\n\nMove LoadBlockIndexDB to BlockManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c0224bc96287b04c9ac4d2ae93621c72be5c2baf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c0224bc96287b04c9ac4d2ae93621c72be5c2baf"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 7,
      "deletions": 7
    },
    "files": [
      {
        "sha": "6c70fc686b9c84b40951a241f579c81821c944a1",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
        "patch": "@@ -3764,10 +3764,10 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool CChainState::LoadBlockIndexDB()\n+bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates)\n {\n-    if (!m_blockman.LoadBlockIndex(\n-            m_params.GetConsensus(), *pblocktree,\n+    if (!LoadBlockIndex(\n+            ::Params().GetConsensus(), *pblocktree,\n             setBlockIndexCandidates)) {\n         return false;\n     }\n@@ -3792,7 +3792,7 @@ bool CChainState::LoadBlockIndexDB()\n     // Check presence of blk files\n     LogPrintf(\"Checking all blk files are present...\\n\");\n     std::set<int> setBlkDataFiles;\n-    for (const std::pair<const uint256, CBlockIndex*>& item : m_blockman.m_block_index) {\n+    for (const std::pair<const uint256, CBlockIndex*>& item : m_block_index) {\n         CBlockIndex* pindex = item.second;\n         if (pindex->nStatus & BLOCK_HAVE_DATA) {\n             setBlkDataFiles.insert(pindex->nFile);\n@@ -4114,7 +4114,7 @@ bool ChainstateManager::LoadBlockIndex()\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = ActiveChainstate().LoadBlockIndexDB();\n+        bool ret = m_blockman.LoadBlockIndexDB(ActiveChainstate().setBlockIndexCandidates);\n         if (!ret) return false;\n         needs_init = m_blockman.m_block_index.empty();\n     }"
      },
      {
        "sha": "3d2d51f262ace13ba47b06d78b8ca8f083a9f7e2",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
        "patch": "@@ -446,6 +446,8 @@ class BlockManager\n      */\n     std::multimap<CBlockIndex*, CBlockIndex*> m_blocks_unlinked;\n \n+    bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+\n     /**\n      * Load the blocktree off disk and into memory. Populate certain metadata\n      * per index entry (nStatus, nChainWork, nTimeMax, etc.) as well as peripheral\n@@ -798,8 +800,6 @@ class CChainState\n     void CheckForkWarningConditions() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n     void InvalidChainFound(CBlockIndex* pindexNew) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n-    bool LoadBlockIndexDB() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n-\n     //! Indirection necessary to make lock annotations work with an optional mempool.\n     RecursiveMutex* MempoolMutex() const LOCK_RETURNED(m_mempool->cs)\n     {"
      }
    ]
  },
  {
    "sha": "faa54e375782b21cbc2761c763128131c569e903",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE1NGUzNzU3ODJiMjFjYmMyNzYxYzc2MzEyODEzMWM1NjllOTAz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-01T08:24:58Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2021-07-15T11:54:09Z"
      },
      "message": "Move pblocktree global to BlockManager",
      "tree": {
        "sha": "e85e2453bcf35354ad3e672d8411f3a2c6ea9c3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e85e2453bcf35354ad3e672d8411f3a2c6ea9c3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa54e375782b21cbc2761c763128131c569e903",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjiWgv/crbR31lEp+UTKkTDo1iU3auG8lK4AfB0KpDgPK5eGJhreFV/KYsUxItQ\nAfSHte+OX/Rg8zfpr+5hLhQ/NKMGwy1qeFtB7av/ABQd/aE7cuUFJye/EYnDrE4S\nd4UAMcH1Ry7YmjPVPzHw/5YmzwJqkCex6hIXnx5S/MdgoOxfN55essfw7iuuiQOP\nloHbIMphnYmf7rpRmB4ptATocZECY30yepA/0xEqmq+G9q2UCrNdgqOG0ZknNIKn\n4jnCFB4IvCoOrk57Hf1n1JNhgWmAzxjDFjJ0TOUA9iSWVM/5cYT6ENjub6htdIPP\nRXlvH4J5C+/O9ttm8WBoiLgkKugcfwkTZEJq2j1bmVeSkZV5lmabR/jVijmaanHO\nwBKynXcBq/+LFm7IrZLDolxmgPvTmusXRYTcJguZdsO3O4b1cKRA2oWHEqo/6ciL\nPNq7yAPMbZ6orBZdrOxBZNL7QTUiFz0VFUMdJhACrK5MM4Wf6Kv/J2FkJd6T/ROq\nH1RbyiMY\n=yoE2\n-----END PGP SIGNATURE-----",
        "payload": "tree e85e2453bcf35354ad3e672d8411f3a2c6ea9c3e\nparent fa27f03b4943540aa2eab283d4cf50ad4a1a01f8\nauthor MarcoFalke <falke.marco@gmail.com> 1625127898 +0200\ncommitter MarcoFalke <falke.marco@gmail.com> 1626350049 +0200\n\nMove pblocktree global to BlockManager\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa54e375782b21cbc2761c763128131c569e903",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa54e375782b21cbc2761c763128131c569e903",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa54e375782b21cbc2761c763128131c569e903/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa27f03b4943540aa2eab283d4cf50ad4a1a01f8"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 17,
      "deletions": 22
    },
    "files": [
      {
        "sha": "cde9821f3de9ccc772312fe1d11dcc94a1d7de1c",
        "filename": "src/index/txindex.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/index/txindex.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/index/txindex.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/index/txindex.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -204,7 +204,7 @@ bool TxIndex::Init()\n     // Attempt to migrate txindex from the old database to the new one. Even if\n     // chain_tip is null, the node could be reindexing and we still want to\n     // delete txindex records in the old database.\n-    if (!m_db->MigrateData(*pblocktree, m_chainstate->m_chain.GetLocator())) {\n+    if (!m_db->MigrateData(*m_chainstate->m_blockman.m_block_tree_db, m_chainstate->m_chain.GetLocator())) {\n         return false;\n     }\n "
      },
      {
        "sha": "3915fa8fcbc0078b8715608dfbaa4744480a42a8",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -264,7 +264,6 @@ void Shutdown(NodeContext& node)\n                 chainstate->ResetCoinsViews();\n             }\n         }\n-        pblocktree.reset();\n     }\n     for (const auto& client : node.chain_clients) {\n         client->stop();\n@@ -1355,6 +1354,7 @@ bool AppInitMain(NodeContext& node, interfaces::BlockAndHeaderTipInfo* tip_info)\n \n                 UnloadBlockIndex(node.mempool.get(), chainman);\n \n+                auto& pblocktree{chainman.m_blockman.m_block_tree_db};\n                 // new CBlockTreeDB tries to delete the existing file, which\n                 // fails if it's still open from the previous loop. Close it first:\n                 pblocktree.reset();"
      },
      {
        "sha": "90f7ba191db1197a6b8ba5730a62a02dd5f36968",
        "filename": "src/node/blockstorage.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/node/blockstorage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/node/blockstorage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/blockstorage.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -518,7 +518,7 @@ void ThreadImport(ChainstateManager& chainman, std::vector<fs::path> vImportFile\n                 }\n                 nFile++;\n             }\n-            pblocktree->WriteReindexing(false);\n+            WITH_LOCK(::cs_main, chainman.m_blockman.m_block_tree_db->WriteReindexing(false));\n             fReindex = false;\n             LogPrintf(\"Reindexing finished\\n\");\n             // To avoid ending up in a situation without genesis block, re-try initializing (no-op if reindexing worked):"
      },
      {
        "sha": "5334c4623e89196c585dcf05b660833d34e17105",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -141,12 +141,11 @@ ChainTestingSetup::ChainTestingSetup(const std::string& chainName, const std::ve\n     m_node.scheduler->m_service_thread = std::thread(util::TraceThread, \"scheduler\", [&] { m_node.scheduler->serviceQueue(); });\n     GetMainSignals().RegisterBackgroundSignalScheduler(*m_node.scheduler);\n \n-    pblocktree.reset(new CBlockTreeDB(1 << 20, true));\n-\n     m_node.fee_estimator = std::make_unique<CBlockPolicyEstimator>();\n     m_node.mempool = std::make_unique<CTxMemPool>(m_node.fee_estimator.get(), 1);\n \n     m_node.chainman = std::make_unique<ChainstateManager>();\n+    m_node.chainman->m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(1 << 20, true);\n \n     // Start script-checking threads. Set g_parallel_script_checks to true so they are used.\n     constexpr int script_check_threads = 2;\n@@ -169,7 +168,6 @@ ChainTestingSetup::~ChainTestingSetup()\n     m_node.scheduler.reset();\n     m_node.chainman->Reset();\n     m_node.chainman.reset();\n-    pblocktree.reset();\n }\n \n TestingSetup::TestingSetup(const std::string& chainName, const std::vector<const char*>& extra_args)"
      },
      {
        "sha": "315ef225992980a08b335a39c18f981523ac47a4",
        "filename": "src/test/validation_chainstate_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/test/validation_chainstate_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/test/validation_chainstate_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstate_tests.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -20,6 +20,7 @@ BOOST_FIXTURE_TEST_SUITE(validation_chainstate_tests, TestingSetup)\n BOOST_AUTO_TEST_CASE(validation_chainstate_resize_caches)\n {\n     ChainstateManager manager;\n+    WITH_LOCK(::cs_main, manager.m_blockman.m_block_tree_db = std::make_unique<CBlockTreeDB>(1 << 20, true));\n     CTxMemPool mempool;\n \n     //! Create and add a Coin with DynamicMemoryUsage of 80 bytes to the given view."
      },
      {
        "sha": "f81c27e8e3f0c889bbee181a6dc35f09395729bd",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 12,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -170,8 +170,6 @@ CBlockIndex* BlockManager::FindForkInGlobalIndex(const CChain& chain, const CBlo\n     return chain.Genesis();\n }\n \n-std::unique_ptr<CBlockTreeDB> pblocktree;\n-\n bool CheckInputScripts(const CTransaction& tx, TxValidationState& state,\n                        const CCoinsViewCache& inputs, unsigned int flags, bool cacheSigStore,\n                        bool cacheFullScriptStore, PrecomputedTransactionData& txdata,\n@@ -2075,7 +2073,7 @@ bool CChainState::FlushStateToDisk(\n             if (!setFilesToPrune.empty()) {\n                 fFlushForPrune = true;\n                 if (!fHavePruned) {\n-                    pblocktree->WriteFlag(\"prunedblockfiles\", true);\n+                    m_blockman.m_block_tree_db->WriteFlag(\"prunedblockfiles\", true);\n                     fHavePruned = true;\n                 }\n             }\n@@ -2127,7 +2125,7 @@ bool CChainState::FlushStateToDisk(\n                     vBlocks.push_back(*it);\n                     setDirtyBlockIndex.erase(it++);\n                 }\n-                if (!pblocktree->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n+                if (!m_blockman.m_block_tree_db->WriteBatchSync(vFiles, nLastBlockFile, vBlocks)) {\n                     return AbortNode(state, \"Failed to write to block index database\");\n                 }\n             }\n@@ -3700,11 +3698,11 @@ CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)\n \n bool BlockManager::LoadBlockIndex(\n     const Consensus::Params& consensus_params,\n-    CBlockTreeDB& blocktree,\n     std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n {\n-    if (!blocktree.LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); }))\n+    if (!m_block_tree_db->LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); })) {\n         return false;\n+    }\n \n     // Calculate nChainWork\n     std::vector<std::pair<int, CBlockIndex*> > vSortedByHeight;\n@@ -3767,22 +3765,22 @@ void BlockManager::Unload() {\n bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates)\n {\n     if (!LoadBlockIndex(\n-            ::Params().GetConsensus(), *pblocktree,\n+            ::Params().GetConsensus(),\n             setBlockIndexCandidates)) {\n         return false;\n     }\n \n     // Load block file info\n-    pblocktree->ReadLastBlockFile(nLastBlockFile);\n+    m_block_tree_db->ReadLastBlockFile(nLastBlockFile);\n     vinfoBlockFile.resize(nLastBlockFile + 1);\n     LogPrintf(\"%s: last block file = %i\\n\", __func__, nLastBlockFile);\n     for (int nFile = 0; nFile <= nLastBlockFile; nFile++) {\n-        pblocktree->ReadBlockFileInfo(nFile, vinfoBlockFile[nFile]);\n+        m_block_tree_db->ReadBlockFileInfo(nFile, vinfoBlockFile[nFile]);\n     }\n     LogPrintf(\"%s: last block file info: %s\\n\", __func__, vinfoBlockFile[nLastBlockFile].ToString());\n     for (int nFile = nLastBlockFile + 1; true; nFile++) {\n         CBlockFileInfo info;\n-        if (pblocktree->ReadBlockFileInfo(nFile, info)) {\n+        if (m_block_tree_db->ReadBlockFileInfo(nFile, info)) {\n             vinfoBlockFile.push_back(info);\n         } else {\n             break;\n@@ -3807,13 +3805,13 @@ bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkCompar\n     }\n \n     // Check whether we have ever pruned block & undo files\n-    pblocktree->ReadFlag(\"prunedblockfiles\", fHavePruned);\n+    m_block_tree_db->ReadFlag(\"prunedblockfiles\", fHavePruned);\n     if (fHavePruned)\n         LogPrintf(\"LoadBlockIndexDB(): Block files have previously been pruned\\n\");\n \n     // Check whether we need to continue reindexing\n     bool fReindexing = false;\n-    pblocktree->ReadReindexing(fReindexing);\n+    m_block_tree_db->ReadReindexing(fReindexing);\n     if(fReindexing) fReindex = true;\n \n     return true;"
      },
      {
        "sha": "18a09d4aa3b4c3dd4a43cdd9798f30673a326da2",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa54e375782b21cbc2761c763128131c569e903/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa54e375782b21cbc2761c763128131c569e903/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=faa54e375782b21cbc2761c763128131c569e903",
        "patch": "@@ -446,6 +446,8 @@ class BlockManager\n      */\n     std::multimap<CBlockIndex*, CBlockIndex*> m_blocks_unlinked;\n \n+    std::unique_ptr<CBlockTreeDB> m_block_tree_db GUARDED_BY(::cs_main);\n+\n     bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /**\n@@ -458,7 +460,6 @@ class BlockManager\n      */\n     bool LoadBlockIndex(\n         const Consensus::Params& consensus_params,\n-        CBlockTreeDB& blocktree,\n         std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n         EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n@@ -1047,9 +1048,6 @@ class ChainstateManager\n     }\n };\n \n-/** Global variable that points to the active block tree (protected by cs_main) */\n-extern std::unique_ptr<CBlockTreeDB> pblocktree;\n-\n using FopenFn = std::function<FILE*(const fs::path&, const char*)>;\n \n /** Dump the mempool to disk. */"
      }
    ]
  }
]