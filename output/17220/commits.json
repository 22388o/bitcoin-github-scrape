[
  {
    "sha": "b05ec410f2d9f209796a5df31860e23efd729dfe",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMDVlYzQxMGYyZDlmMjA5Nzk2YTVkZjMxODYwZTIzZWZkNzI5ZGZl",
    "commit": {
      "author": {
        "name": "marcaiaf",
        "email": "mmachicao@m19r.de",
        "date": "2019-01-04T16:00:13Z"
      },
      "committer": {
        "name": "Adam Jonas",
        "email": "jonas@chaincode.com",
        "date": "2019-10-23T17:50:18Z"
      },
      "message": "Add unit testing for the CompressScript functions",
      "tree": {
        "sha": "f29b1422176915175ba49746f4781e2eca789563",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f29b1422176915175ba49746f4781e2eca789563"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b05ec410f2d9f209796a5df31860e23efd729dfe",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b05ec410f2d9f209796a5df31860e23efd729dfe",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b05ec410f2d9f209796a5df31860e23efd729dfe",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b05ec410f2d9f209796a5df31860e23efd729dfe/comments",
    "author": {
      "login": "mmachicao",
      "id": 1525975,
      "node_id": "MDQ6VXNlcjE1MjU5NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1525975?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/mmachicao",
      "html_url": "https://github.com/mmachicao",
      "followers_url": "https://api.github.com/users/mmachicao/followers",
      "following_url": "https://api.github.com/users/mmachicao/following{/other_user}",
      "gists_url": "https://api.github.com/users/mmachicao/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/mmachicao/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/mmachicao/subscriptions",
      "organizations_url": "https://api.github.com/users/mmachicao/orgs",
      "repos_url": "https://api.github.com/users/mmachicao/repos",
      "events_url": "https://api.github.com/users/mmachicao/events{/privacy}",
      "received_events_url": "https://api.github.com/users/mmachicao/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "adamjonas",
      "id": 755825,
      "node_id": "MDQ6VXNlcjc1NTgyNQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/755825?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/adamjonas",
      "html_url": "https://github.com/adamjonas",
      "followers_url": "https://api.github.com/users/adamjonas/followers",
      "following_url": "https://api.github.com/users/adamjonas/following{/other_user}",
      "gists_url": "https://api.github.com/users/adamjonas/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/adamjonas/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/adamjonas/subscriptions",
      "organizations_url": "https://api.github.com/users/adamjonas/orgs",
      "repos_url": "https://api.github.com/users/adamjonas/repos",
      "events_url": "https://api.github.com/users/adamjonas/events{/privacy}",
      "received_events_url": "https://api.github.com/users/adamjonas/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a22b62481aae95747830bd3c0db3227860b12d8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a22b62481aae95747830bd3c0db3227860b12d8e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a22b62481aae95747830bd3c0db3227860b12d8e"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 73,
      "deletions": 0
    },
    "files": [
      {
        "sha": "c6a08b293f29b626b76c86042b7509ddab9b135b",
        "filename": "src/test/compress_tests.cpp",
        "status": "modified",
        "additions": 73,
        "deletions": 0,
        "changes": 73,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b05ec410f2d9f209796a5df31860e23efd729dfe/src/test/compress_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b05ec410f2d9f209796a5df31860e23efd729dfe/src/test/compress_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/compress_tests.cpp?ref=b05ec410f2d9f209796a5df31860e23efd729dfe",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <compressor.h>\n #include <test/setup_common.h>\n+#include <script/standard.h>\n \n #include <stdint.h>\n \n@@ -61,4 +62,76 @@ BOOST_AUTO_TEST_CASE(compress_amounts)\n         BOOST_CHECK(TestDecode(i));\n }\n \n+BOOST_AUTO_TEST_CASE(compress_script_to_ckey_id)\n+{\n+    // case CKeyID\n+    CKey key;\n+    key.MakeNewKey(true);\n+    CPubKey pubkey = key.GetPubKey();\n+\n+    CScript script = CScript() << OP_DUP << OP_HASH160 << ToByteVector(pubkey.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG;\n+    BOOST_CHECK_EQUAL(script.size(), 25);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out[0], 0x00);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[3], 20), 0); // compare the 20 relevant chars of the CKeyId in the script\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_script_to_cscript_id)\n+{\n+    // case CScriptID\n+    CScript script, redeemScript;\n+    script << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL;\n+    BOOST_CHECK_EQUAL(script.size(), 23);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 21);\n+    BOOST_CHECK_EQUAL(out[0], 0x01);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 20), 0); // compare the 20 relevant chars of the CScriptId in the script\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_script_to_compressed_pubkey_id)\n+{\n+    CKey key;\n+    key.MakeNewKey(true); // case compressed PubKeyID\n+\n+    CScript script = CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // COMPRESSED_PUBLIC_KEY_SIZE (33)\n+    BOOST_CHECK_EQUAL(script.size(), 35);\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(memcmp(&out[0], &script[1], 1), 0);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // compare the 32 chars of the compressed CPubKey\n+}\n+\n+BOOST_AUTO_TEST_CASE(compress_script_to_uncompressed_pubkey_id)\n+{\n+    CKey key;\n+    key.MakeNewKey(false); // case uncompressed PubKeyID\n+    CScript script =  CScript() << ToByteVector(key.GetPubKey()) << OP_CHECKSIG; // PUBLIC_KEY_SIZE (65)\n+    BOOST_CHECK_EQUAL(script.size(), 67);                   // 1 char code + 65 char pubkey + OP_CHECKSIG\n+\n+    std::vector<unsigned char> out;\n+    bool done = CompressScript(script, out);\n+    BOOST_CHECK_EQUAL(done, true);\n+\n+    // Check compressed script\n+    BOOST_CHECK_EQUAL(out.size(), 33);\n+    BOOST_CHECK_EQUAL(memcmp(&out[1], &script[2], 32), 0); // first 32 chars of CPubKey are copied into out[1:]\n+    BOOST_CHECK_EQUAL(out[0], 0x04 | (script[65] & 0x01)); // least significant bit (lsb) of last char of pubkey is mapped into out[0]\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]