[
  {
    "sha": "c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNWRlMGQ5ZGQ0OGQzODdiNWJlOGNlMmJhMzZmMWVhZTgxODQ1ZGUx",
    "commit": {
      "author": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-03-21T20:22:25Z"
      },
      "committer": {
        "name": "Prakash Choudhary",
        "email": "prakash15122000@gmail.com",
        "date": "2021-08-21T16:49:37Z"
      },
      "message": "fuzz: execute each file in dir without fuzz engine",
      "tree": {
        "sha": "4a97ecf730a67058e8b95a334969317fe8a91cd9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4a97ecf730a67058e8b95a334969317fe8a91cd9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1/comments",
    "author": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prakash1512",
      "id": 44579179,
      "node_id": "MDQ6VXNlcjQ0NTc5MTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44579179?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prakash1512",
      "html_url": "https://github.com/prakash1512",
      "followers_url": "https://api.github.com/users/prakash1512/followers",
      "following_url": "https://api.github.com/users/prakash1512/following{/other_user}",
      "gists_url": "https://api.github.com/users/prakash1512/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prakash1512/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prakash1512/subscriptions",
      "organizations_url": "https://api.github.com/users/prakash1512/orgs",
      "repos_url": "https://api.github.com/users/prakash1512/repos",
      "events_url": "https://api.github.com/users/prakash1512/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prakash1512/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "f5a406f003a060325128db47552089b3254044e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f5a406f003a060325128db47552089b3254044e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/f5a406f003a060325128db47552089b3254044e3"
      }
    ],
    "stats": {
      "total": 46,
      "additions": 43,
      "deletions": 3
    },
    "files": [
      {
        "sha": "64ebfa56e90c1ea32ec2add953eb131f187f2a25",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 43,
        "deletions": 3,
        "changes": 46,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
        "patch": "@@ -14,6 +14,7 @@\n #include <exception>\n #include <memory>\n #include <string>\n+#include <filesystem>\n #include <unistd.h>\n #include <vector>\n \n@@ -84,6 +85,23 @@ static bool read_stdin(std::vector<uint8_t>& data)\n }\n #endif\n \n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION)\n+static bool read_file(std::filesystem::path p, std::vector<uint8_t>& data)\n+{\n+    uint8_t buffer[1024];\n+    FILE *f = fsbridge::fopen(p.string(), \"rb\");\n+    if (f == nullptr)\n+        return false;\n+    do {\n+        const size_t length = fread(buffer, sizeof(uint8_t), sizeof(buffer), f);\n+        Assert(!ferror(f));\n+        data.insert(data.end(), buffer, buffer + length);\n+    } while (!feof(f));\n+    fclose(f);\n+    return true;\n+}\n+#endif\n+\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n {\n@@ -121,11 +139,33 @@ int main(int argc, char** argv)\n         test_one_input(buffer);\n     }\n #else\n+    char* seed_path{nullptr};\n+    if (argc > 1) {\n+        seed_path = *(argv+1);\n+    }\n+\n     std::vector<uint8_t> buffer;\n-    if (!read_stdin(buffer)) {\n-        return 0;\n+    if (seed_path == nullptr) {\n+        if (!read_stdin(buffer)) {\n+            return 0;\n+        }\n+        test_one_input(buffer);\n+    } else {\n+        if(std::filesystem::is_directory(seed_path)) {\n+            for (auto& file : std::filesystem::directory_iterator{seed_path}) {\n+                if (!read_file(file, buffer)) {\n+                    return 0;\n+                }\n+                test_one_input(buffer);\n+                buffer.clear();\n+            }\n+        } else {\n+            if (!read_file(seed_path, buffer)) {\n+                return 0;\n+            }\n+            test_one_input(buffer);\n+        }\n     }\n-    test_one_input(buffer);\n #endif\n     return 0;\n }"
      }
    ]
  },
  {
    "sha": "b5fa5dd282298ffc19e79e322ebeff81c3149e22",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNWZhNWRkMjgyMjk4ZmZjMTllNzllMzIyZWJlZmY4MWMzMTQ5ZTIy",
    "commit": {
      "author": {
        "name": "Anthony Ronning",
        "email": "anthonyronning@gmail.com",
        "date": "2021-04-05T15:45:04Z"
      },
      "committer": {
        "name": "Prakash Choudhary",
        "email": "prakash15122000@gmail.com",
        "date": "2021-08-21T16:49:37Z"
      },
      "message": "fuzz: execute each file in dir without fuzz engine",
      "tree": {
        "sha": "9dd69cefa8f3226fd53fb4e51681f4231ced5396",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9dd69cefa8f3226fd53fb4e51681f4231ced5396"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b5fa5dd282298ffc19e79e322ebeff81c3149e22",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5fa5dd282298ffc19e79e322ebeff81c3149e22",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b5fa5dd282298ffc19e79e322ebeff81c3149e22",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5fa5dd282298ffc19e79e322ebeff81c3149e22/comments",
    "author": {
      "login": "AnthonyRonning",
      "id": 10763569,
      "node_id": "MDQ6VXNlcjEwNzYzNTY5",
      "avatar_url": "https://avatars.githubusercontent.com/u/10763569?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/AnthonyRonning",
      "html_url": "https://github.com/AnthonyRonning",
      "followers_url": "https://api.github.com/users/AnthonyRonning/followers",
      "following_url": "https://api.github.com/users/AnthonyRonning/following{/other_user}",
      "gists_url": "https://api.github.com/users/AnthonyRonning/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/AnthonyRonning/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/AnthonyRonning/subscriptions",
      "organizations_url": "https://api.github.com/users/AnthonyRonning/orgs",
      "repos_url": "https://api.github.com/users/AnthonyRonning/repos",
      "events_url": "https://api.github.com/users/AnthonyRonning/events{/privacy}",
      "received_events_url": "https://api.github.com/users/AnthonyRonning/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "prakash1512",
      "id": 44579179,
      "node_id": "MDQ6VXNlcjQ0NTc5MTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/44579179?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/prakash1512",
      "html_url": "https://github.com/prakash1512",
      "followers_url": "https://api.github.com/users/prakash1512/followers",
      "following_url": "https://api.github.com/users/prakash1512/following{/other_user}",
      "gists_url": "https://api.github.com/users/prakash1512/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/prakash1512/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/prakash1512/subscriptions",
      "organizations_url": "https://api.github.com/users/prakash1512/orgs",
      "repos_url": "https://api.github.com/users/prakash1512/repos",
      "events_url": "https://api.github.com/users/prakash1512/events{/privacy}",
      "received_events_url": "https://api.github.com/users/prakash1512/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c5de0d9dd48d387b5be8ce2ba36f1eae81845de1"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 37,
      "deletions": 22
    },
    "files": [
      {
        "sha": "445ff4f966619127f3096f1d795ba43c5fe38082",
        "filename": "src/test/fuzz/fuzz.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 22,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5fa5dd282298ffc19e79e322ebeff81c3149e22/src/test/fuzz/fuzz.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5fa5dd282298ffc19e79e322ebeff81c3149e22/src/test/fuzz/fuzz.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/fuzz/fuzz.cpp?ref=b5fa5dd282298ffc19e79e322ebeff81c3149e22",
        "patch": "@@ -14,7 +14,7 @@\n #include <exception>\n #include <memory>\n #include <string>\n-#include <filesystem>\n+#include <signal.h>\n #include <unistd.h>\n #include <vector>\n \n@@ -85,23 +85,35 @@ static bool read_stdin(std::vector<uint8_t>& data)\n }\n #endif\n \n-#if defined(PROVIDE_FUZZ_MAIN_FUNCTION)\n-static bool read_file(std::filesystem::path p, std::vector<uint8_t>& data)\n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION) && !defined(__AFL_LOOP)\n+static bool read_file(fs::path p, std::vector<uint8_t>& data)\n {\n     uint8_t buffer[1024];\n-    FILE *f = fsbridge::fopen(p.string(), \"rb\");\n-    if (f == nullptr)\n-        return false;\n+    FILE* f = fsbridge::fopen(p.string(), \"rb\");\n+    if (f == nullptr) return false;\n     do {\n         const size_t length = fread(buffer, sizeof(uint8_t), sizeof(buffer), f);\n-        Assert(!ferror(f));\n+        if (ferror(f)) return false;\n         data.insert(data.end(), buffer, buffer + length);\n     } while (!feof(f));\n     fclose(f);\n     return true;\n }\n #endif\n \n+#if defined(PROVIDE_FUZZ_MAIN_FUNCTION) && !defined(__AFL_LOOP)\n+fs::path g_seed_path;\n+void signal_handler(int signal)\n+{\n+    if (signal == SIGABRT) {\n+        std::cerr << \"Error processing seed \" << g_seed_path << std::endl;\n+    } else {\n+        std::cerr << \"Unexpected signal \" << signal << \" received\\n\";\n+    }\n+    std::_Exit(EXIT_FAILURE);\n+}\n+#endif\n+\n // This function is used by libFuzzer\n extern \"C\" int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size)\n {\n@@ -139,33 +151,36 @@ int main(int argc, char** argv)\n         test_one_input(buffer);\n     }\n #else\n-    char* seed_path{nullptr};\n-    if (argc > 1) {\n-        seed_path = *(argv+1);\n-    }\n-\n     std::vector<uint8_t> buffer;\n-    if (seed_path == nullptr) {\n+    if (argc <= 1) {\n         if (!read_stdin(buffer)) {\n             return 0;\n         }\n         test_one_input(buffer);\n-    } else {\n-        if(std::filesystem::is_directory(seed_path)) {\n-            for (auto& file : std::filesystem::directory_iterator{seed_path}) {\n-                if (!read_file(file, buffer)) {\n-                    return 0;\n-                }\n+        return 0;\n+    }\n+    signal(SIGABRT, signal_handler);\n+    int tested = 0;\n+    for (int i = 1; i < argc; ++i) {\n+        fs::path seed_path(*(argv + i));\n+        if (fs::is_directory(seed_path)) {\n+            for (fs::directory_iterator it(seed_path); it != fs::directory_iterator(); ++it) {\n+                if (!fs::is_regular_file(it->path())) continue;\n+                g_seed_path = it->path();\n+                Assert(read_file(it->path(), buffer));\n                 test_one_input(buffer);\n+                ++tested;\n                 buffer.clear();\n             }\n         } else {\n-            if (!read_file(seed_path, buffer)) {\n-                return 0;\n-            }\n+            g_seed_path = seed_path;\n+            Assert(read_file(seed_path, buffer));\n             test_one_input(buffer);\n+            ++tested;\n+            buffer.clear();\n         }\n     }\n+    std::cout << \"tested \" << tested << \" files\\n\";\n #endif\n     return 0;\n }"
      }
    ]
  }
]