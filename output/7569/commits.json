[
  {
    "sha": "89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OWZhZmJkNzJmNGZkMGIwOTY5YjE4N2E2OTU4Y2VkNTM3OGEwYmQz",
    "commit": {
      "author": {
        "name": "raedah",
        "email": "raedah@users.noreply.github.com",
        "date": "2016-02-21T00:21:02Z"
      },
      "committer": {
        "name": "raedah",
        "email": "raedah@users.noreply.github.com",
        "date": "2016-02-21T00:21:02Z"
      },
      "message": "show coinjoins clearly in qt transaction list",
      "tree": {
        "sha": "7df401601ec252da46b2877999df3cabe2886e7c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7df401601ec252da46b2877999df3cabe2886e7c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/comments",
    "author": {
      "login": "raedah",
      "id": 15878246,
      "node_id": "MDQ6VXNlcjE1ODc4MjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/15878246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raedah",
      "html_url": "https://github.com/raedah",
      "followers_url": "https://api.github.com/users/raedah/followers",
      "following_url": "https://api.github.com/users/raedah/following{/other_user}",
      "gists_url": "https://api.github.com/users/raedah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raedah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raedah/subscriptions",
      "organizations_url": "https://api.github.com/users/raedah/orgs",
      "repos_url": "https://api.github.com/users/raedah/repos",
      "events_url": "https://api.github.com/users/raedah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raedah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "raedah",
      "id": 15878246,
      "node_id": "MDQ6VXNlcjE1ODc4MjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/15878246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raedah",
      "html_url": "https://github.com/raedah",
      "followers_url": "https://api.github.com/users/raedah/followers",
      "following_url": "https://api.github.com/users/raedah/following{/other_user}",
      "gists_url": "https://api.github.com/users/raedah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raedah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raedah/subscriptions",
      "organizations_url": "https://api.github.com/users/raedah/orgs",
      "repos_url": "https://api.github.com/users/raedah/repos",
      "events_url": "https://api.github.com/users/raedah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raedah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "0e3ccbfb26b11ea3d9ed7dfd39886d69097286e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0e3ccbfb26b11ea3d9ed7dfd39886d69097286e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/0e3ccbfb26b11ea3d9ed7dfd39886d69097286e1"
      }
    ],
    "stats": {
      "total": 313,
      "additions": 171,
      "deletions": 142
    },
    "files": [
      {
        "sha": "aa665ac9e234ecb31fe8513bc155cf89e7241a32",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 84,
        "deletions": 67,
        "changes": 151,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "patch": "@@ -60,6 +60,24 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     CAmount nDebit = wtx.GetDebit(ISMINE_ALL);\n     CAmount nNet = nCredit - nDebit;\n \n+    isminetype fAllFromMe = ISMINE_SPENDABLE;\n+    bool anyFromMe = false;\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        isminetype mine = wallet->IsMine(txin);\n+        if(mine) anyFromMe = true;\n+        if(fAllFromMe > mine) fAllFromMe = mine;\n+    }\n+\n+    isminetype fAllToMe = ISMINE_SPENDABLE;\n+    bool anyToMe = false;\n+    BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+    {\n+        isminetype mine = wallet->IsMine(txout);\n+        if(mine) anyToMe = true;\n+        if(fAllToMe > mine) fAllToMe = mine;\n+    }\n+\n     strHTML += \"<b>\" + tr(\"Status\") + \":</b> \" + FormatTxStatus(wtx);\n     int nRequests = wtx.GetRequestCount();\n     if (nRequests != -1)\n@@ -127,7 +145,23 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // Amount\n     //\n-    if (wtx.IsCoinBase() && nCredit == 0)\n+    if (anyFromMe && anyToMe && !fAllFromMe && !fAllToMe)\n+    {\n+        //\n+        // CoinJoin\n+        //\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+        {\n+            if (wallet->IsMine(txin))\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n+        }\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+        {\n+            if (wallet->IsMine(txout))\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n+        }\n+    }\n+    else if (wtx.IsCoinBase() && nCredit == 0)\n     {\n         //\n         // Coinbase\n@@ -149,85 +183,68 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n         //\n         strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nNet) + \"<br>\";\n     }\n-    else\n+    else if (fAllFromMe)\n     {\n-        isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-        {\n-            isminetype mine = wallet->IsMine(txin);\n-            if(fAllFromMe > mine) fAllFromMe = mine;\n-        }\n+        if(fAllFromMe & ISMINE_WATCH_ONLY)\n+            strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n \n-        isminetype fAllToMe = ISMINE_SPENDABLE;\n+        //\n+        // Debit\n+        //\n         BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n         {\n-            isminetype mine = wallet->IsMine(txout);\n-            if(fAllToMe > mine) fAllToMe = mine;\n-        }\n+            // Ignore change\n+            isminetype toSelf = wallet->IsMine(txout);\n+            if ((toSelf == ISMINE_SPENDABLE) && (fAllFromMe == ISMINE_SPENDABLE))\n+                continue;\n \n-        if (fAllFromMe)\n-        {\n-            if(fAllFromMe & ISMINE_WATCH_ONLY)\n-                strHTML += \"<b>\" + tr(\"From\") + \":</b> \" + tr(\"watch-only\") + \"<br>\";\n-\n-            //\n-            // Debit\n-            //\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            if (!wtx.mapValue.count(\"to\") || wtx.mapValue[\"to\"].empty())\n             {\n-                // Ignore change\n-                isminetype toSelf = wallet->IsMine(txout);\n-                if ((toSelf == ISMINE_SPENDABLE) && (fAllFromMe == ISMINE_SPENDABLE))\n-                    continue;\n-\n-                if (!wtx.mapValue.count(\"to\") || wtx.mapValue[\"to\"].empty())\n+                // Offline transaction\n+                CTxDestination address;\n+                if (ExtractDestination(txout.scriptPubKey, address))\n                 {\n-                    // Offline transaction\n-                    CTxDestination address;\n-                    if (ExtractDestination(txout.scriptPubKey, address))\n-                    {\n-                        strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n-                        if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n-                            strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n-                        strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n-                        if(toSelf == ISMINE_SPENDABLE)\n-                            strHTML += \" (own address)\";\n-                        else if(toSelf & ISMINE_WATCH_ONLY)\n-                            strHTML += \" (watch-only)\";\n-                        strHTML += \"<br>\";\n-                    }\n+                    strHTML += \"<b>\" + tr(\"To\") + \":</b> \";\n+                    if (wallet->mapAddressBook.count(address) && !wallet->mapAddressBook[address].name.empty())\n+                        strHTML += GUIUtil::HtmlEscape(wallet->mapAddressBook[address].name) + \" \";\n+                    strHTML += GUIUtil::HtmlEscape(CBitcoinAddress(address).ToString());\n+                    if(toSelf == ISMINE_SPENDABLE)\n+                        strHTML += \" (own address)\";\n+                    else if(toSelf & ISMINE_WATCH_ONLY)\n+                        strHTML += \" (watch-only)\";\n+                    strHTML += \"<br>\";\n                 }\n-\n-                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -txout.nValue) + \"<br>\";\n-                if(toSelf)\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, txout.nValue) + \"<br>\";\n-            }\n-\n-            if (fAllToMe)\n-            {\n-                // Payment to self\n-                CAmount nChange = wtx.GetChange();\n-                CAmount nValue = nCredit - nChange;\n-                strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n-                strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n             }\n \n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n-            if (nTxFee > 0)\n-                strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n+            strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -txout.nValue) + \"<br>\";\n+            if(toSelf)\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, txout.nValue) + \"<br>\";\n         }\n-        else\n+\n+        if (fAllToMe)\n         {\n-            //\n-            // Mixed debit transaction\n-            //\n-            BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-                if (wallet->IsMine(txin))\n-                    strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n-            BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-                if (wallet->IsMine(txout))\n-                    strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n+            // Payment to self\n+            CAmount nChange = wtx.GetChange();\n+            CAmount nValue = nCredit - nChange;\n+            strHTML += \"<b>\" + tr(\"Total debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nValue) + \"<br>\";\n+            strHTML += \"<b>\" + tr(\"Total credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nValue) + \"<br>\";\n         }\n+\n+        CAmount nTxFee = nDebit - wtx.GetValueOut();\n+        if (nTxFee > 0)\n+            strHTML += \"<b>\" + tr(\"Transaction fee\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -nTxFee) + \"<br>\";\n+    }\n+    else\n+    {\n+        //\n+        // Mixed debit transaction\n+        //\n+        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+            if (wallet->IsMine(txin))\n+                strHTML += \"<b>\" + tr(\"Debit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, -wallet->GetDebit(txin, ISMINE_ALL)) + \"<br>\";\n+        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+            if (wallet->IsMine(txout))\n+                strHTML += \"<b>\" + tr(\"Credit\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, wallet->GetCredit(txout, ISMINE_ALL)) + \"<br>\";\n     }\n \n     strHTML += \"<b>\" + tr(\"Net amount\") + \":</b> \" + BitcoinUnits::formatHtmlWithUnit(unit, nNet, true) + \"<br>\";"
      },
      {
        "sha": "f6a84b9855f242464b05aee11e9fe281b106c0ba",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 83,
        "deletions": 74,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "patch": "@@ -42,7 +42,36 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     uint256 hash = wtx.GetHash();\n     std::map<std::string, std::string> mapValue = wtx.mapValue;\n \n-    if (nNet > 0 || wtx.IsCoinBase())\n+    bool involvesWatchAddress = false;\n+    isminetype fAllFromMe = ISMINE_SPENDABLE;\n+    bool anyFromMe = false;\n+    BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n+    {\n+        isminetype mine = wallet->IsMine(txin);\n+        if(mine) anyFromMe = true;\n+        if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+        if(fAllFromMe > mine) fAllFromMe = mine;\n+    }\n+\n+    isminetype fAllToMe = ISMINE_SPENDABLE;\n+    bool anyToMe = false;\n+    BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n+    {\n+        isminetype mine = wallet->IsMine(txout);\n+        if(mine) anyToMe = true;\n+        if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n+        if(fAllToMe > mine) fAllToMe = mine;\n+    }\n+\n+    if (anyFromMe && anyToMe && !fAllFromMe && !fAllToMe)\n+    {\n+        //\n+        // CoinJoin\n+        //\n+        parts.append(TransactionRecord(hash, nTime, TransactionRecord::CoinJoin, \"\", nNet, 0));\n+        parts.last().involvesWatchAddress = involvesWatchAddress;\n+    }\n+    else if (nNet > 0 || wtx.IsCoinBase())\n     {\n         //\n         // Credit\n@@ -79,89 +108,69 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n             }\n         }\n     }\n-    else\n+    else if (fAllFromMe && fAllToMe)\n     {\n-        bool involvesWatchAddress = false;\n-        isminetype fAllFromMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n-        {\n-            isminetype mine = wallet->IsMine(txin);\n-            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n-            if(fAllFromMe > mine) fAllFromMe = mine;\n-        }\n-\n-        isminetype fAllToMe = ISMINE_SPENDABLE;\n-        BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n-        {\n-            isminetype mine = wallet->IsMine(txout);\n-            if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n-            if(fAllToMe > mine) fAllToMe = mine;\n-        }\n+        // Payment to self\n+        CAmount nChange = wtx.GetChange();\n \n-        if (fAllFromMe && fAllToMe)\n-        {\n-            // Payment to self\n-            CAmount nChange = wtx.GetChange();\n+        parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n+                        -(nDebit - nChange), nCredit - nChange));\n+        parts.last().involvesWatchAddress = involvesWatchAddress;   // maybe pass to TransactionRecord as constructor argument\n+    }\n+    else if (fAllFromMe)\n+    {\n+        //\n+        // Debit\n+        //\n+        CAmount nTxFee = nDebit - wtx.GetValueOut();\n \n-            parts.append(TransactionRecord(hash, nTime, TransactionRecord::SendToSelf, \"\",\n-                            -(nDebit - nChange), nCredit - nChange));\n-            parts.last().involvesWatchAddress = involvesWatchAddress;   // maybe pass to TransactionRecord as constructor argument\n-        }\n-        else if (fAllFromMe)\n+        for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n         {\n-            //\n-            // Debit\n-            //\n-            CAmount nTxFee = nDebit - wtx.GetValueOut();\n+            const CTxOut& txout = wtx.vout[nOut];\n+            TransactionRecord sub(hash, nTime);\n+            sub.idx = parts.size();\n+            sub.involvesWatchAddress = involvesWatchAddress;\n \n-            for (unsigned int nOut = 0; nOut < wtx.vout.size(); nOut++)\n+            if(wallet->IsMine(txout))\n             {\n-                const CTxOut& txout = wtx.vout[nOut];\n-                TransactionRecord sub(hash, nTime);\n-                sub.idx = parts.size();\n-                sub.involvesWatchAddress = involvesWatchAddress;\n-\n-                if(wallet->IsMine(txout))\n-                {\n-                    // Ignore parts sent to self, as this is usually the change\n-                    // from a transaction sent back to our own address.\n-                    continue;\n-                }\n-\n-                CTxDestination address;\n-                if (ExtractDestination(txout.scriptPubKey, address))\n-                {\n-                    // Sent to Bitcoin Address\n-                    sub.type = TransactionRecord::SendToAddress;\n-                    sub.address = CBitcoinAddress(address).ToString();\n-                }\n-                else\n-                {\n-                    // Sent to IP, or other non-address transaction like OP_EVAL\n-                    sub.type = TransactionRecord::SendToOther;\n-                    sub.address = mapValue[\"to\"];\n-                }\n+                // Ignore parts sent to self, as this is usually the change\n+                // from a transaction sent back to our own address.\n+                continue;\n+            }\n \n-                CAmount nValue = txout.nValue;\n-                /* Add fee to first output */\n-                if (nTxFee > 0)\n-                {\n-                    nValue += nTxFee;\n-                    nTxFee = 0;\n-                }\n-                sub.debit = -nValue;\n+            CTxDestination address;\n+            if (ExtractDestination(txout.scriptPubKey, address))\n+            {\n+                // Sent to Bitcoin Address\n+                sub.type = TransactionRecord::SendToAddress;\n+                sub.address = CBitcoinAddress(address).ToString();\n+            }\n+            else\n+            {\n+                // Sent to IP, or other non-address transaction like OP_EVAL\n+                sub.type = TransactionRecord::SendToOther;\n+                sub.address = mapValue[\"to\"];\n+            }\n \n-                parts.append(sub);\n+            CAmount nValue = txout.nValue;\n+            /* Add fee to first output */\n+            if (nTxFee > 0)\n+            {\n+                nValue += nTxFee;\n+                nTxFee = 0;\n             }\n+            sub.debit = -nValue;\n+\n+            parts.append(sub);\n         }\n-        else\n-        {\n-            //\n-            // Mixed debit transaction, can't break down payees\n-            //\n-            parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n-            parts.last().involvesWatchAddress = involvesWatchAddress;\n-        }\n+    }\n+    else\n+    {\n+        //\n+        // Mixed debit transaction, can't break down payees\n+        //\n+        parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n+        parts.last().involvesWatchAddress = involvesWatchAddress;\n     }\n \n     return parts;"
      },
      {
        "sha": "f2904378f42aaf87af0aacdc7c6da68775a1ce01",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "patch": "@@ -76,7 +76,8 @@ class TransactionRecord\n         SendToOther,\n         RecvWithAddress,\n         RecvFromOther,\n-        SendToSelf\n+        SendToSelf,\n+        CoinJoin\n     };\n \n     /** Number of confirmation recommended for accepting a transaction */"
      },
      {
        "sha": "7768b2971b610309fd009c4a6ca5731e3ef113cb",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/89fafbd72f4fd0b0969b187a6958ced5378a0bd3/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "patch": "@@ -377,6 +377,8 @@ QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n         return tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n         return tr(\"Mined\");\n+    case TransactionRecord::CoinJoin:\n+        return tr(\"CoinJoin\");\n     default:\n         return QString();\n     }"
      }
    ]
  },
  {
    "sha": "341f3212d76d92657a2bdbd0505a99524a710e90",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDFmMzIxMmQ3NmQ5MjY1N2EyYmRiZDA1MDVhOTk1MjRhNzEwZTkw",
    "commit": {
      "author": {
        "name": "raedah",
        "email": "raedah@users.noreply.github.com",
        "date": "2016-02-24T22:46:17Z"
      },
      "committer": {
        "name": "raedah",
        "email": "raedah@users.noreply.github.com",
        "date": "2016-02-24T22:46:17Z"
      },
      "message": "rename to Multiparty, check only debits and not credits",
      "tree": {
        "sha": "7915ebfc9b7c5c26eb413be8d9ff0fb82a7ba773",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7915ebfc9b7c5c26eb413be8d9ff0fb82a7ba773"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/341f3212d76d92657a2bdbd0505a99524a710e90",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/341f3212d76d92657a2bdbd0505a99524a710e90",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/341f3212d76d92657a2bdbd0505a99524a710e90",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/341f3212d76d92657a2bdbd0505a99524a710e90/comments",
    "author": {
      "login": "raedah",
      "id": 15878246,
      "node_id": "MDQ6VXNlcjE1ODc4MjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/15878246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raedah",
      "html_url": "https://github.com/raedah",
      "followers_url": "https://api.github.com/users/raedah/followers",
      "following_url": "https://api.github.com/users/raedah/following{/other_user}",
      "gists_url": "https://api.github.com/users/raedah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raedah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raedah/subscriptions",
      "organizations_url": "https://api.github.com/users/raedah/orgs",
      "repos_url": "https://api.github.com/users/raedah/repos",
      "events_url": "https://api.github.com/users/raedah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raedah/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "raedah",
      "id": 15878246,
      "node_id": "MDQ6VXNlcjE1ODc4MjQ2",
      "avatar_url": "https://avatars.githubusercontent.com/u/15878246?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/raedah",
      "html_url": "https://github.com/raedah",
      "followers_url": "https://api.github.com/users/raedah/followers",
      "following_url": "https://api.github.com/users/raedah/following{/other_user}",
      "gists_url": "https://api.github.com/users/raedah/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/raedah/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/raedah/subscriptions",
      "organizations_url": "https://api.github.com/users/raedah/orgs",
      "repos_url": "https://api.github.com/users/raedah/repos",
      "events_url": "https://api.github.com/users/raedah/events{/privacy}",
      "received_events_url": "https://api.github.com/users/raedah/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/89fafbd72f4fd0b0969b187a6958ced5378a0bd3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/89fafbd72f4fd0b0969b187a6958ced5378a0bd3"
      }
    ],
    "stats": {
      "total": 24,
      "additions": 10,
      "deletions": 14
    },
    "files": [
      {
        "sha": "4ec8d48a835c356c2794b5bac1ef0ef679323175",
        "filename": "src/qt/transactiondesc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 5,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactiondesc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactiondesc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiondesc.cpp?ref=341f3212d76d92657a2bdbd0505a99524a710e90",
        "patch": "@@ -70,11 +70,9 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     }\n \n     isminetype fAllToMe = ISMINE_SPENDABLE;\n-    bool anyToMe = false;\n     BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n     {\n         isminetype mine = wallet->IsMine(txout);\n-        if(mine) anyToMe = true;\n         if(fAllToMe > mine) fAllToMe = mine;\n     }\n \n@@ -145,10 +143,10 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     //\n     // Amount\n     //\n-    if (anyFromMe && anyToMe && !fAllFromMe && !fAllToMe)\n+    if (anyFromMe && !fAllFromMe)\n     {\n         //\n-        // CoinJoin\n+        // Multiparty\n         //\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n         {\n@@ -237,7 +235,7 @@ QString TransactionDesc::toHTML(CWallet *wallet, CWalletTx &wtx, TransactionReco\n     else\n     {\n         //\n-        // Mixed debit transaction\n+        // can't break down payees\n         //\n         BOOST_FOREACH(const CTxIn& txin, wtx.vin)\n             if (wallet->IsMine(txin))"
      },
      {
        "sha": "1e36fffaa2f7f8f3ba540af405939538c610e4c2",
        "filename": "src/qt/transactionrecord.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 6,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactionrecord.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactionrecord.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.cpp?ref=341f3212d76d92657a2bdbd0505a99524a710e90",
        "patch": "@@ -54,21 +54,19 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     }\n \n     isminetype fAllToMe = ISMINE_SPENDABLE;\n-    bool anyToMe = false;\n     BOOST_FOREACH(const CTxOut& txout, wtx.vout)\n     {\n         isminetype mine = wallet->IsMine(txout);\n-        if(mine) anyToMe = true;\n         if(mine & ISMINE_WATCH_ONLY) involvesWatchAddress = true;\n         if(fAllToMe > mine) fAllToMe = mine;\n     }\n \n-    if (anyFromMe && anyToMe && !fAllFromMe && !fAllToMe)\n+    if (anyFromMe && !fAllFromMe)\n     {\n         //\n-        // CoinJoin\n+        // Multiparty\n         //\n-        parts.append(TransactionRecord(hash, nTime, TransactionRecord::CoinJoin, \"\", nNet, 0));\n+        parts.append(TransactionRecord(hash, nTime, TransactionRecord::Multiparty, \"\", nNet, 0));\n         parts.last().involvesWatchAddress = involvesWatchAddress;\n     }\n     else if (nNet > 0 || wtx.IsCoinBase())\n@@ -167,7 +165,7 @@ QList<TransactionRecord> TransactionRecord::decomposeTransaction(const CWallet *\n     else\n     {\n         //\n-        // Mixed debit transaction, can't break down payees\n+        // can't break down payees\n         //\n         parts.append(TransactionRecord(hash, nTime, TransactionRecord::Other, \"\", nNet, 0));\n         parts.last().involvesWatchAddress = involvesWatchAddress;"
      },
      {
        "sha": "05158b4dfb96b3bcbc1a0147be228cde79fc130f",
        "filename": "src/qt/transactionrecord.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactionrecord.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactionrecord.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactionrecord.h?ref=341f3212d76d92657a2bdbd0505a99524a710e90",
        "patch": "@@ -77,7 +77,7 @@ class TransactionRecord\n         RecvWithAddress,\n         RecvFromOther,\n         SendToSelf,\n-        CoinJoin\n+        Multiparty, \n     };\n \n     /** Number of confirmation recommended for accepting a transaction */"
      },
      {
        "sha": "a418fa3b82d98787b27f6893129f4bad0376559c",
        "filename": "src/qt/transactiontablemodel.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactiontablemodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/341f3212d76d92657a2bdbd0505a99524a710e90/src/qt/transactiontablemodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/transactiontablemodel.cpp?ref=341f3212d76d92657a2bdbd0505a99524a710e90",
        "patch": "@@ -377,8 +377,8 @@ QString TransactionTableModel::formatTxType(const TransactionRecord *wtx) const\n         return tr(\"Payment to yourself\");\n     case TransactionRecord::Generated:\n         return tr(\"Mined\");\n-    case TransactionRecord::CoinJoin:\n-        return tr(\"CoinJoin\");\n+    case TransactionRecord::Multiparty:\n+        return tr(\"Multiparty\");\n     default:\n         return QString();\n     }"
      }
    ]
  }
]