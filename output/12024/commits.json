[
  {
    "sha": "56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NmQ5ZmZhYjdkM2EzMGU3NTZkNzU3Y2JhZGQ4ZTUzZWVhMGM5ZGRj",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2017-12-26T01:11:34Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2018-01-08T17:29:49Z"
      },
      "message": "Remove most recent transaction timestamp stuff from nTimeSmart\n\nThis will show accurate and correct timestamps while maintaining\nproper transaction order in listtransactions.",
      "tree": {
        "sha": "dde9d46baf5ad1e66b743cb478bc8f8eb8387bca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dde9d46baf5ad1e66b743cb478bc8f8eb8387bca"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5180a86c96bc05d2a731f70f36aae28ab5a3fad4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5180a86c96bc05d2a731f70f36aae28ab5a3fad4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5180a86c96bc05d2a731f70f36aae28ab5a3fad4"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 9,
      "deletions": 44
    },
    "files": [
      {
        "sha": "e2586d16c5aaa6f3aef9548e60f98e6987cf248c",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
        "patch": "@@ -569,13 +569,8 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n     // New transaction should use block time if lower than clock time.\n     BOOST_CHECK_EQUAL(AddTx(wallet, 3, 420, 400), 400);\n \n-    // New transaction should use latest entry time if higher than\n-    // min(block time, clock time).\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 4, 500, 390), 400);\n-\n-    // If there are future entries, new transaction should use time of the\n-    // newest entry that is no more than 300 seconds ahead of the clock time.\n-    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 300);\n+    // If there are future entries, new transaction should clock time\n+    BOOST_CHECK_EQUAL(AddTx(wallet, 5, 50, 600), 50);\n \n     // Reset mock time for other tests.\n     SetMockTime(0);"
      },
      {
        "sha": "0ec10df7370409091225924f89b95a88a5c6d074",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 37,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=56d9ffab7d3a30e756d757cbadd8e53eea0c9ddc",
        "patch": "@@ -3744,14 +3744,12 @@ void CWallet::GetKeyBirthTimes(std::map<CTxDestination, int64_t> &mapKeyBirth) c\n  *   current time.\n  * - If receiving a block with a future timestamp, assign all its (not already\n  *   known) transactions' timestamps to the current time.\n- * - If receiving a block with a past timestamp, before the most recent known\n- *   transaction (that we care about), assign all its (not already known)\n- *   transactions' timestamps to the same timestamp as that most-recent-known\n- *   transaction.\n- * - If receiving a block with a past timestamp, but after the most recent known\n- *   transaction, assign all its (not already known) transactions' timestamps to\n+ * - If receiving a block with a past timestamp, assign all its (not already known) transactions' timestamps to\n  *   the block time.\n  *\n+ * Note that this behavior is different from the original nTimeSmart implementation.\n+ * The timestamp of the most recent transaction is disregarded.\n+ *\n  * For more information see CWalletTx::nTimeSmart,\n  * https://bitcointalk.org/?topic=54527, or\n  * https://github.com/bitcoin/bitcoin/pull/1393.\n@@ -3761,38 +3759,10 @@ unsigned int CWallet::ComputeTimeSmart(const CWalletTx& wtx) const\n     unsigned int nTimeSmart = wtx.nTimeReceived;\n     if (!wtx.hashUnset()) {\n         if (mapBlockIndex.count(wtx.hashBlock)) {\n-            int64_t latestNow = wtx.nTimeReceived;\n-            int64_t latestEntry = 0;\n-\n-            // Tolerate times up to the last timestamp in the wallet not more than 5 minutes into the future\n-            int64_t latestTolerated = latestNow + 300;\n-            const TxItems& txOrdered = wtxOrdered;\n-            for (auto it = txOrdered.rbegin(); it != txOrdered.rend(); ++it) {\n-                CWalletTx* const pwtx = it->second.first;\n-                if (pwtx == &wtx) {\n-                    continue;\n-                }\n-                CAccountingEntry* const pacentry = it->second.second;\n-                int64_t nSmartTime;\n-                if (pwtx) {\n-                    nSmartTime = pwtx->nTimeSmart;\n-                    if (!nSmartTime) {\n-                        nSmartTime = pwtx->nTimeReceived;\n-                    }\n-                } else {\n-                    nSmartTime = pacentry->nTime;\n-                }\n-                if (nSmartTime <= latestTolerated) {\n-                    latestEntry = nSmartTime;\n-                    if (nSmartTime > latestNow) {\n-                        latestNow = nSmartTime;\n-                    }\n-                    break;\n-                }\n+            unsigned int block_time = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n+            if (block_time < nTimeSmart) {\n+                nTimeSmart = block_time;\n             }\n-\n-            int64_t blocktime = mapBlockIndex[wtx.hashBlock]->GetBlockTime();\n-            nTimeSmart = std::max(latestEntry, std::min(blocktime, latestNow));\n         } else {\n             LogPrintf(\"%s: found %s in block %s not in index\\n\", __func__, wtx.GetHash().ToString(), wtx.hashBlock.ToString());\n         }"
      }
    ]
  }
]