[
  {
    "sha": "e15cb2b9d90ee421d14881f232711016d5d3867a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplMTVjYjJiOWQ5MGVlNDIxZDE0ODgxZjIzMjcxMTAxNmQ1ZDM4Njdh",
    "commit": {
      "author": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-23T20:32:20Z"
      },
      "committer": {
        "name": "Eric Lombrozo",
        "email": "elombrozo@gmail.com",
        "date": "2013-01-23T20:32:20Z"
      },
      "message": "Added locks on the setpwalletRegistered functions in main.cpp and added an UnregisterAllWallets function.",
      "tree": {
        "sha": "368a9091b7924b21ec21b51efb15776f6801c751",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/368a9091b7924b21ec21b51efb15776f6801c751"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e15cb2b9d90ee421d14881f232711016d5d3867a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e15cb2b9d90ee421d14881f232711016d5d3867a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e15cb2b9d90ee421d14881f232711016d5d3867a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e15cb2b9d90ee421d14881f232711016d5d3867a/comments",
    "author": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "CodeShark",
      "id": 894059,
      "node_id": "MDQ6VXNlcjg5NDA1OQ==",
      "avatar_url": "https://avatars.githubusercontent.com/u/894059?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/CodeShark",
      "html_url": "https://github.com/CodeShark",
      "followers_url": "https://api.github.com/users/CodeShark/followers",
      "following_url": "https://api.github.com/users/CodeShark/following{/other_user}",
      "gists_url": "https://api.github.com/users/CodeShark/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/CodeShark/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/CodeShark/subscriptions",
      "organizations_url": "https://api.github.com/users/CodeShark/orgs",
      "repos_url": "https://api.github.com/users/CodeShark/repos",
      "events_url": "https://api.github.com/users/CodeShark/events{/privacy}",
      "received_events_url": "https://api.github.com/users/CodeShark/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "09c69c03f701b1f4ab2bd734eca375f939e4d728",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/09c69c03f701b1f4ab2bd734eca375f939e4d728",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/09c69c03f701b1f4ab2bd734eca375f939e4d728"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 15,
      "deletions": 0
    },
    "files": [
      {
        "sha": "1756f8616d9c5e59395576972b26b897f8ef7c67",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e15cb2b9d90ee421d14881f232711016d5d3867a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e15cb2b9d90ee421d14881f232711016d5d3867a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=e15cb2b9d90ee421d14881f232711016d5d3867a",
        "patch": "@@ -92,9 +92,16 @@ void UnregisterWallet(CWallet* pwalletIn)\n     }\n }\n \n+void UnregisterAllWallets()\n+{\n+    LOCK(cs_setpwalletRegistered);\n+    setpwalletRegistered.clear();\n+}\n+\n // check whether the passed transaction is from us\n bool static IsFromMe(CTransaction& tx)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         if (pwallet->IsFromMe(tx))\n             return true;\n@@ -104,6 +111,7 @@ bool static IsFromMe(CTransaction& tx)\n // get the wallet transaction with the given hash (if it exists)\n bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         if (pwallet->GetTransaction(hashTx,wtx))\n             return true;\n@@ -113,48 +121,55 @@ bool static GetTransaction(const uint256& hashTx, CWalletTx& wtx)\n // erases transaction with the given hash from all wallets\n void static EraseFromWallets(uint256 hash)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->EraseFromWallet(hash);\n }\n \n // make sure all wallets know about the given transaction, in the given block\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock, bool fUpdate)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->AddToWalletIfInvolvingMe(hash, tx, pblock, fUpdate);\n }\n \n // notify wallets about a new best chain\n void static SetBestChain(const CBlockLocator& loc)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->SetBestChain(loc);\n }\n \n // notify wallets about an updated transaction\n void static UpdatedTransaction(const uint256& hashTx)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->UpdatedTransaction(hashTx);\n }\n \n // dump all wallets\n void static PrintWallets(const CBlock& block)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->PrintWallet(block);\n }\n \n // notify wallets about an incoming inventory (for request counts)\n void static Inventory(const uint256& hash)\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->Inventory(hash);\n }\n \n // ask wallets to resend their transactions\n void static ResendWalletTransactions()\n {\n+    LOCK(cs_setpwalletRegistered);\n     BOOST_FOREACH(CWallet* pwallet, setpwalletRegistered)\n         pwallet->ResendWalletTransactions();\n }"
      }
    ]
  }
]