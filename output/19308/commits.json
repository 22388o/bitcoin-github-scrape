[
  {
    "sha": "ca24edfbc1941ed0a3c9586416dae4e84794eb66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYTI0ZWRmYmMxOTQxZWQwYTNjOTU4NjQxNmRhZTRlODQ3OTRlYjY2",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T01:17:01Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-06-22T19:36:23Z"
      },
      "message": "walletdb: Handle cursor internally\n\nInstead of returning a Dbc (BDB cursor object) and having the caller\ndeal with the cursor, make BerkeleyBatch handle the cursor internally.\n\nThis prepares BerkeleyBatch to work with other database systems as Dbc\nobjects are BDB specific.",
      "tree": {
        "sha": "1cd6eb3d10bb421f399d98df1c7a4340afb1a59c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1cd6eb3d10bb421f399d98df1c7a4340afb1a59c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ca24edfbc1941ed0a3c9586416dae4e84794eb66",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca24edfbc1941ed0a3c9586416dae4e84794eb66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ca24edfbc1941ed0a3c9586416dae4e84794eb66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ca24edfbc1941ed0a3c9586416dae4e84794eb66/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39bd9ddb8783807b9cde6288233e86ad7c85d61f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/39bd9ddb8783807b9cde6288233e86ad7c85d61f"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 50,
      "deletions": 35
    },
    "files": [
      {
        "sha": "eb62d6664ee897a2a230d8e0c1749a17349e3e38",
        "filename": "src/wallet/bdb.cpp",
        "status": "modified",
        "additions": 31,
        "deletions": 20,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/bdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/bdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.cpp?ref=ca24edfbc1941ed0a3c9586416dae4e84794eb66",
        "patch": "@@ -335,7 +335,7 @@ void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n }\n \n \n-BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr)\n+BerkeleyBatch::BerkeleyBatch(BerkeleyDatabase& database, const char* pszMode, bool fFlushOnCloseIn) : pdb(nullptr), activeTxn(nullptr), m_cursor(nullptr)\n {\n     fReadOnly = (!strchr(pszMode, '+') && !strchr(pszMode, 'w'));\n     fFlushOnClose = fFlushOnCloseIn;\n@@ -442,6 +442,7 @@ void BerkeleyBatch::Close()\n         activeTxn->abort();\n     activeTxn = nullptr;\n     pdb = nullptr;\n+    CloseCursor();\n \n     if (fFlushOnClose)\n         Flush();\n@@ -528,17 +529,15 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                         fSuccess = false;\n                     }\n \n-                    Dbc* pcursor = db.GetCursor();\n-                    if (pcursor)\n+                    if (db.StartCursor()) {\n                         while (fSuccess) {\n                             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n                             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-                            int ret1 = db.ReadAtCursor(pcursor, ssKey, ssValue);\n-                            if (ret1 == DB_NOTFOUND) {\n-                                pcursor->close();\n+                            bool complete;\n+                            bool ret1 = db.ReadAtCursor(ssKey, ssValue, complete);\n+                            if (complete) {\n                                 break;\n-                            } else if (ret1 != 0) {\n-                                pcursor->close();\n+                            } else if (!ret1) {\n                                 fSuccess = false;\n                                 break;\n                             }\n@@ -556,6 +555,8 @@ bool BerkeleyBatch::Rewrite(BerkeleyDatabase& database, const char* pszSkip)\n                             if (ret2 > 0)\n                                 fSuccess = false;\n                         }\n+                        db.CloseCursor();\n+                    }\n                     if (fSuccess) {\n                         db.Close();\n                         env->CloseDb(strFile);\n@@ -738,27 +739,30 @@ void BerkeleyDatabase::ReloadDbEnv()\n     }\n }\n \n-Dbc* BerkeleyBatch::GetCursor()\n+bool BerkeleyBatch::StartCursor()\n {\n+    assert(!m_cursor);\n     if (!pdb)\n-        return nullptr;\n-    Dbc* pcursor = nullptr;\n-    int ret = pdb->cursor(nullptr, &pcursor, 0);\n-    if (ret != 0)\n-        return nullptr;\n-    return pcursor;\n+        return false;\n+    int ret = pdb->cursor(nullptr, &m_cursor, 0);\n+    return ret == 0;\n }\n \n-int BerkeleyBatch::ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue)\n+bool BerkeleyBatch::ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete)\n {\n+    complete = false;\n+    if (m_cursor == nullptr) return false;\n     // Read at cursor\n     SafeDbt datKey;\n     SafeDbt datValue;\n-    int ret = pcursor->get(datKey, datValue, DB_NEXT);\n+    int ret = m_cursor->get(datKey, datValue, DB_NEXT);\n+    if (ret == DB_NOTFOUND) {\n+        complete = true;\n+    }\n     if (ret != 0)\n-        return ret;\n+        return false;\n     else if (datKey.get_data() == nullptr || datValue.get_data() == nullptr)\n-        return 99999;\n+        return false;\n \n     // Convert to streams\n     ssKey.SetType(SER_DISK);\n@@ -767,7 +771,14 @@ int BerkeleyBatch::ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& s\n     ssValue.SetType(SER_DISK);\n     ssValue.clear();\n     ssValue.write((char*)datValue.get_data(), datValue.get_size());\n-    return 0;\n+    return true;\n+}\n+\n+void BerkeleyBatch::CloseCursor()\n+{\n+    if (!m_cursor) return;\n+    m_cursor->close();\n+    m_cursor = nullptr;\n }\n \n bool BerkeleyBatch::TxnBegin()"
      },
      {
        "sha": "aac5bc016e522ee6ecf9993b74f1d67e5dabf24c",
        "filename": "src/wallet/bdb.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/bdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/bdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/bdb.h?ref=ca24edfbc1941ed0a3c9586416dae4e84794eb66",
        "patch": "@@ -211,6 +211,7 @@ class BerkeleyBatch\n     Db* pdb;\n     std::string strFile;\n     DbTxn* activeTxn;\n+    Dbc* m_cursor;\n     bool fReadOnly;\n     bool fFlushOnClose;\n     BerkeleyEnvironment *env;\n@@ -323,8 +324,9 @@ class BerkeleyBatch\n         return (ret == 0);\n     }\n \n-    Dbc* GetCursor();\n-    int ReadAtCursor(Dbc* pcursor, CDataStream& ssKey, CDataStream& ssValue);\n+    bool StartCursor();\n+    bool ReadAtCursor(CDataStream& ssKey, CDataStream& ssValue, bool& complete);\n+    void CloseCursor();\n     bool TxnBegin();\n     bool TxnCommit();\n     bool TxnAbort();"
      },
      {
        "sha": "027fc7397b3512226fab385ae8dbf274e125c517",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 13,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ca24edfbc1941ed0a3c9586416dae4e84794eb66/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=ca24edfbc1941ed0a3c9586416dae4e84794eb66",
        "patch": "@@ -699,8 +699,7 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n         }\n \n         // Get cursor\n-        Dbc* pcursor = m_batch.GetCursor();\n-        if (!pcursor)\n+        if (!m_batch.StartCursor())\n         {\n             pwallet->WalletLogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -711,11 +710,14 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = m_batch.ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n+            bool complete;\n+            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            if (complete) {\n                 break;\n-            else if (ret != 0)\n+            }\n+            else if (!ret)\n             {\n+                m_batch.CloseCursor();\n                 pwallet->WalletLogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -742,10 +744,10 @@ DBErrors WalletBatch::LoadWallet(CWallet* pwallet)\n             if (!strErr.empty())\n                 pwallet->WalletLogPrintf(\"%s\\n\", strErr);\n         }\n-        pcursor->close();\n     } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n+    m_batch.CloseCursor();\n \n     // Set the active ScriptPubKeyMans\n     for (auto spk_man_pair : wss.m_active_external_spks) {\n@@ -849,8 +851,7 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n         }\n \n         // Get cursor\n-        Dbc* pcursor = m_batch.GetCursor();\n-        if (!pcursor)\n+        if (!m_batch.StartCursor())\n         {\n             LogPrintf(\"Error getting wallet database cursor\\n\");\n             return DBErrors::CORRUPT;\n@@ -861,11 +862,12 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n             // Read next record\n             CDataStream ssKey(SER_DISK, CLIENT_VERSION);\n             CDataStream ssValue(SER_DISK, CLIENT_VERSION);\n-            int ret = m_batch.ReadAtCursor(pcursor, ssKey, ssValue);\n-            if (ret == DB_NOTFOUND)\n+            bool complete;\n+            bool ret = m_batch.ReadAtCursor(ssKey, ssValue, complete);\n+            if (complete) {\n                 break;\n-            else if (ret != 0)\n-            {\n+            } else if (!ret) {\n+                m_batch.CloseCursor();\n                 LogPrintf(\"Error reading next record from wallet database\\n\");\n                 return DBErrors::CORRUPT;\n             }\n@@ -880,10 +882,10 @@ DBErrors WalletBatch::FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWal\n                 ssValue >> vWtx.back();\n             }\n         }\n-        pcursor->close();\n     } catch (...) {\n         result = DBErrors::CORRUPT;\n     }\n+    m_batch.CloseCursor();\n \n     return result;\n }"
      }
    ]
  }
]