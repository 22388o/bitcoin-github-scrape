[
  {
    "sha": "0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowZjVhMmE4MmQ5M2Y1NWUxZjVhZDFjNTQwMWI4YjVjZWViMzhiMGRm",
    "commit": {
      "author": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-18T20:35:10Z"
      },
      "committer": {
        "name": "Luke Dashjr",
        "email": "luke-jr+git@utopios.org",
        "date": "2012-06-18T20:37:57Z"
      },
      "message": "CBigNum: Convert negative int64 values in a more well-defined way\n\nSince the minimum signed integer cannot be represented as positive so long as its type is signed, and it's not well-defined what happens if you make it unsigned before negating it, we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate",
      "tree": {
        "sha": "5c976160f2611e2d5dfdb33c3e5c76d5865643e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c976160f2611e2d5dfdb33c3e5c76d5865643e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df/comments",
    "author": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "luke-jr",
      "id": 1095675,
      "node_id": "MDQ6VXNlcjEwOTU2NzU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1095675?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/luke-jr",
      "html_url": "https://github.com/luke-jr",
      "followers_url": "https://api.github.com/users/luke-jr/followers",
      "following_url": "https://api.github.com/users/luke-jr/following{/other_user}",
      "gists_url": "https://api.github.com/users/luke-jr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/luke-jr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/luke-jr/subscriptions",
      "organizations_url": "https://api.github.com/users/luke-jr/orgs",
      "repos_url": "https://api.github.com/users/luke-jr/repos",
      "events_url": "https://api.github.com/users/luke-jr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/luke-jr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5849bd472a3a7296f91b887884946218897ca11f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5849bd472a3a7296f91b887884946218897ca11f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5849bd472a3a7296f91b887884946218897ca11f"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 3,
      "deletions": 9
    },
    "files": [
      {
        "sha": "74f657b56784f4e2dc22447b9e2aafc11eeb72b6",
        "filename": "src/bignum.h",
        "status": "modified",
        "additions": 3,
        "deletions": 9,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df/src/bignum.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df/src/bignum.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bignum.h?ref=0f5a2a82d93f55e1f5ad1c5401b8b5ceeb38b0df",
        "patch": "@@ -131,15 +131,9 @@ class CBigNum : public BIGNUM\n \n         if (sn < (int64)0)\n         {\n-            // We negate in 2 steps to avoid signed subtraction overflow,\n-            // i.e. -(-2^63), which is an undefined operation and causes SIGILL\n-            // when compiled with -ftrapv.\n-            //\n-            // Note that uint64_t n = sn, when sn is an int64_t, is a\n-            // well-defined operation and n will be equal to sn + 2^64 when sn\n-            // is negative.\n-            n = sn;\n-            n = -n;\n+            // Since the minimum signed integer cannot be represented as positive so long as its type is signed, and it's not well-defined what happens if you make it unsigned before negating it, we instead increment the negative integer by 1, convert it, then increment the (now positive) unsigned integer by 1 to compensate\n+            n = -(sn + 1);\n+            ++n;\n             fNegative = true;\n         } else {\n             n = sn;"
      }
    ]
  }
]