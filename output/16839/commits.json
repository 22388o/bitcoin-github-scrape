[
  {
    "sha": "301bd41a2e6765b185bd55f4c541f9e27aeea29d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMDFiZDQxYTJlNjc2NWIxODViZDU1ZjRjNTQxZjllMjdhZWVhMjlk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-09-17T21:04:39Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-28T14:30:51Z"
      },
      "message": "scripted-diff: Rename InitInterfaces to NodeContext\n\n-BEGIN VERIFY SCRIPT-\ns() { git grep -l \"$1\" src | xargs sed -i \"s/$1/$2/g\"; }\n\ns 'struct InitInterfaces'              'struct NodeContext'\ns 'InitInterfaces interfaces'          'NodeContext node'\ns 'InitInterfaces& interfaces'         'NodeContext\\& node'\ns 'InitInterfaces m_interfaces'        'NodeContext m_context'\ns 'InitInterfaces\\* g_rpc_interfaces'  'NodeContext* g_rpc_node'\ns 'g_rpc_interfaces = &interfaces'     'g_rpc_node = \\&node'\ns 'g_rpc_interfaces'                   'g_rpc_node'\ns 'm_interfaces'                       'm_context'\ns 'interfaces\\.chain'                  'node.chain'\ns '\\(AppInitMain\\|Shutdown\\|Construct\\)(interfaces)' '\\1(node)'\ns 'init interfaces' 'chain clients'\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "5e45ad7559e78c580ae785a3c814c2676290f091",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5e45ad7559e78c580ae785a3c814c2676290f091"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/301bd41a2e6765b185bd55f4c541f9e27aeea29d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301bd41a2e6765b185bd55f4c541f9e27aeea29d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301bd41a2e6765b185bd55f4c541f9e27aeea29d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cfec3e01b4d6153efecc1d767511c616029cb974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cfec3e01b4d6153efecc1d767511c616029cb974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cfec3e01b4d6153efecc1d767511c616029cb974"
      }
    ],
    "stats": {
      "total": 82,
      "additions": 41,
      "deletions": 41
    },
    "files": [
      {
        "sha": "1d51ee8f78c9c1b12d3164af689bbfb29097c095",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -39,8 +39,8 @@ static void WaitForShutdown()\n //\n static bool AppInit(int argc, char* argv[])\n {\n-    InitInterfaces interfaces;\n-    interfaces.chain = interfaces::MakeChain();\n+    NodeContext node;\n+    node.chain = interfaces::MakeChain();\n \n     bool fRet = false;\n \n@@ -142,7 +142,7 @@ static bool AppInit(int argc, char* argv[])\n             // If locking the data directory failed, exit immediately\n             return false;\n         }\n-        fRet = AppInitMain(interfaces);\n+        fRet = AppInitMain(node);\n     }\n     catch (const std::exception& e) {\n         PrintExceptionContinue(&e, \"AppInit()\");\n@@ -156,7 +156,7 @@ static bool AppInit(int argc, char* argv[])\n     } else {\n         WaitForShutdown();\n     }\n-    Shutdown(interfaces);\n+    Shutdown(node);\n \n     return fRet;\n }"
      },
      {
        "sha": "38b5b0efc4ca197a849b18fdbb1aa735d53f9d0e",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -19,7 +19,7 @@ class DummyWalletInit : public WalletInitInterface {\n     bool HasWalletSupport() const override {return false;}\n     void AddWalletOptions() const override;\n     bool ParameterInteraction() const override {return true;}\n-    void Construct(InitInterfaces& interfaces) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n+    void Construct(NodeContext& node) const override {LogPrintf(\"No wallet support compiled in!\\n\");}\n };\n \n void DummyWalletInit::AddWalletOptions() const"
      },
      {
        "sha": "664c2b347314222417db22cfce7ce031ad0f4c42",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -170,7 +170,7 @@ void Interrupt()\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Interrupt(); });\n }\n \n-void Shutdown(InitInterfaces& interfaces)\n+void Shutdown(NodeContext& node)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n     static CCriticalSection cs_Shutdown;\n@@ -189,7 +189,7 @@ void Shutdown(InitInterfaces& interfaces)\n     StopREST();\n     StopRPC();\n     StopHTTPServer();\n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         client->flush();\n     }\n     StopMapPort();\n@@ -261,7 +261,7 @@ void Shutdown(InitInterfaces& interfaces)\n         }\n         pblocktree.reset();\n     }\n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         client->stop();\n     }\n \n@@ -280,7 +280,7 @@ void Shutdown(InitInterfaces& interfaces)\n     } catch (const fs::filesystem_error& e) {\n         LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n     }\n-    interfaces.chain_clients.clear();\n+    node.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n     GetMainSignals().UnregisterWithMempoolSignals(mempool);\n@@ -1207,7 +1207,7 @@ bool AppInitLockDataDirectory()\n     return true;\n }\n \n-bool AppInitMain(InitInterfaces& interfaces)\n+bool AppInitMain(NodeContext& node)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n@@ -1275,16 +1275,16 @@ bool AppInitMain(InitInterfaces& interfaces)\n     // according to -wallet and -disablewallet options. This only constructs\n     // the interfaces, it doesn't load wallet data. Wallets actually get loaded\n     // when load() and start() interface methods are called below.\n-    g_wallet_init_interface.Construct(interfaces);\n+    g_wallet_init_interface.Construct(node);\n \n     /* Register RPC commands regardless of -server setting so they will be\n      * available in the GUI RPC console even if external calls are disabled.\n      */\n     RegisterAllCoreRPCCommands(tableRPC);\n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         client->registerRpcs();\n     }\n-    g_rpc_interfaces = &interfaces;\n+    g_rpc_node = &node;\n #if ENABLE_ZMQ\n     RegisterZMQRPCCommands(tableRPC);\n #endif\n@@ -1302,7 +1302,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // ********************************************************* Step 5: verify wallet database integrity\n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         if (!client->verify()) {\n             return false;\n         }\n@@ -1661,7 +1661,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     }\n \n     // ********************************************************* Step 9: load wallet\n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         if (!client->load()) {\n             return false;\n         }\n@@ -1815,7 +1815,7 @@ bool AppInitMain(InitInterfaces& interfaces)\n     SetRPCWarmupFinished();\n     uiInterface.InitMessage(_(\"Done loading\").translated);\n \n-    for (const auto& client : interfaces.chain_clients) {\n+    for (const auto& client : node.chain_clients) {\n         client->start(scheduler);\n     }\n "
      },
      {
        "sha": "099e96a161fda1eb5ced56b97636e2bb3dfcb0b4",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -16,7 +16,7 @@ class ChainClient;\n } // namespace interfaces\n \n //! Pointers to interfaces used during init and destroyed on shutdown.\n-struct InitInterfaces\n+struct NodeContext\n {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n@@ -29,7 +29,7 @@ class thread_group;\n \n /** Interrupt threads */\n void Interrupt();\n-void Shutdown(InitInterfaces& interfaces);\n+void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n void InitLogging();\n //!Parameter interaction: change current parameters depending on various rules\n@@ -63,7 +63,7 @@ bool AppInitLockDataDirectory();\n  * @note This should only be done after daemonization. Call Shutdown() if this function fails.\n  * @pre Parameters should be parsed and config file should be read, AppInitLockDataDirectory should have been called.\n  */\n-bool AppInitMain(InitInterfaces& interfaces);\n+bool AppInitMain(NodeContext& node);\n \n /**\n  * Setup the arguments for gArgs"
      },
      {
        "sha": "300a1c687891440299387644fe4da450850f754a",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -52,7 +52,7 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    NodeImpl() { m_interfaces.chain = MakeChain(); }\n+    NodeImpl() { m_context.chain = MakeChain(); }\n     void initError(const std::string& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n@@ -75,11 +75,11 @@ class NodeImpl : public Node\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n                AppInitLockDataDirectory();\n     }\n-    bool appInitMain() override { return AppInitMain(m_interfaces); }\n+    bool appInitMain() override { return AppInitMain(m_context); }\n     void appShutdown() override\n     {\n         Interrupt();\n-        Shutdown(m_interfaces);\n+        Shutdown(m_context);\n     }\n     void startShutdown() override { StartShutdown(); }\n     bool shutdownRequested() override { return ShutdownRequested(); }\n@@ -255,12 +255,12 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warnings));\n+        return MakeWallet(LoadWallet(*m_context.chain, name, error, warnings));\n     }\n     WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);\n         result = MakeWallet(wallet);\n         return status;\n     }\n@@ -315,7 +315,7 @@ class NodeImpl : public Node\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }\n-    InitInterfaces m_interfaces;\n+    NodeContext m_context;\n };\n \n } // namespace"
      },
      {
        "sha": "26252e2b8a43b8f140bf3d42ed9550001409357b",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -13,7 +13,7 @@\n \n #include <tuple>\n \n-InitInterfaces* g_rpc_interfaces = nullptr;\n+NodeContext* g_rpc_node = nullptr;\n \n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,"
      },
      {
        "sha": "872ef5ecaa1ba932b64040e9c7e363be5ca6c887",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -25,12 +25,12 @@\n class FillableSigningProvider;\n class CPubKey;\n class CScript;\n-struct InitInterfaces;\n+struct NodeContext;\n \n //! Pointers to interfaces that need to be accessible from RPC methods. Due to\n //! limitations of the RPC framework, there's currently no direct way to pass in\n //! state to RPC method implementations.\n-extern InitInterfaces* g_rpc_interfaces;\n+extern NodeContext* g_rpc_node;\n \n /** Wrapper for UniValue::VType, which includes typeAny:\n  * Used to denote don't care type. */"
      },
      {
        "sha": "04d909ea36ee894c700f4b078ad27575a34fadd8",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -112,14 +112,14 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string notsigned = r.get_str();\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n-    InitInterfaces interfaces;\n-    interfaces.chain = interfaces::MakeChain();\n-    g_rpc_interfaces = &interfaces;\n+    NodeContext node;\n+    node.chain = interfaces::MakeChain();\n+    g_rpc_node = &node;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [\"+privkey1+\",\"+privkey2+\"] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == true);\n-    g_rpc_interfaces = nullptr;\n+    g_rpc_node = nullptr;\n }\n \n BOOST_AUTO_TEST_CASE(rpc_createraw_op_return)"
      },
      {
        "sha": "5d7eaaffe2bfba13f569041e7e6e32a2b9567909",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -25,8 +25,8 @@ class WalletInit : public WalletInitInterface {\n     //! Wallets parameter interaction\n     bool ParameterInteraction() const override;\n \n-    //! Add wallets that should be opened to list of init interfaces.\n-    void Construct(InitInterfaces& interfaces) const override;\n+    //! Add wallets that should be opened to list of chain clients.\n+    void Construct(NodeContext& node) const override;\n };\n \n const WalletInitInterface& g_wallet_init_interface = WalletInit();\n@@ -125,12 +125,12 @@ bool WalletInit::ParameterInteraction() const\n     return true;\n }\n \n-void WalletInit::Construct(InitInterfaces& interfaces) const\n+void WalletInit::Construct(NodeContext& node) const\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n         return;\n     }\n     gArgs.SoftSetArg(\"-wallet\", \"\");\n-    interfaces.chain_clients.emplace_back(interfaces::MakeWalletClient(*interfaces.chain, gArgs.GetArgs(\"-wallet\")));\n+    node.chain_clients.emplace_back(interfaces::MakeWalletClient(*node.chain, gArgs.GetArgs(\"-wallet\")));\n }"
      },
      {
        "sha": "2201fe50798163e7940ee3a74e443cf4ad9aaa3f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -2574,7 +2574,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::vector<std::string> warning;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_interfaces->chain, location, error, warning);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_node->chain, location, error, warning);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2700,7 +2700,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_interfaces->chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n+    WalletCreationStatus status = CreateWallet(*g_rpc_node->chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);"
      },
      {
        "sha": "7ccda1c566a9ad6d88e161649508de32d302b28e",
        "filename": "src/walletinitinterface.h",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/walletinitinterface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/301bd41a2e6765b185bd55f4c541f9e27aeea29d/src/walletinitinterface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletinitinterface.h?ref=301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "patch": "@@ -5,7 +5,7 @@\n #ifndef BITCOIN_WALLETINITINTERFACE_H\n #define BITCOIN_WALLETINITINTERFACE_H\n \n-struct InitInterfaces;\n+struct NodeContext;\n \n class WalletInitInterface {\n public:\n@@ -15,8 +15,8 @@ class WalletInitInterface {\n     virtual void AddWalletOptions() const = 0;\n     /** Check wallet parameter interaction */\n     virtual bool ParameterInteraction() const = 0;\n-    /** Add wallets that should be opened to list of init interfaces. */\n-    virtual void Construct(InitInterfaces& interfaces) const = 0;\n+    /** Add wallets that should be opened to list of chain clients. */\n+    virtual void Construct(NodeContext& node) const = 0;\n \n     virtual ~WalletInitInterface() {}\n };"
      }
    ]
  },
  {
    "sha": "4d5448c76b71c9d91399c31b043237091be2e5e7",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZDU0NDhjNzZiNzFjOWQ5MTM5OWMzMWIwNDMyMzcwOTFiZTJlNWU3",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-09-17T21:11:31Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-28T14:30:51Z"
      },
      "message": "MOVEONLY: Move NodeContext struct to node/context.h",
      "tree": {
        "sha": "e3062b6fbf5d853ba5084889e993ba01091b8e2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e3062b6fbf5d853ba5084889e993ba01091b8e2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4d5448c76b71c9d91399c31b043237091be2e5e7",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d5448c76b71c9d91399c31b043237091be2e5e7",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4d5448c76b71c9d91399c31b043237091be2e5e7",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d5448c76b71c9d91399c31b043237091be2e5e7/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/301bd41a2e6765b185bd55f4c541f9e27aeea29d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/301bd41a2e6765b185bd55f4c541f9e27aeea29d"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 25,
      "deletions": 12
    },
    "files": [
      {
        "sha": "f4c7feed72c6aea94e187782fa0950c7ac4bc177",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d5448c76b71c9d91399c31b043237091be2e5e7/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d5448c76b71c9d91399c31b043237091be2e5e7/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=4d5448c76b71c9d91399c31b043237091be2e5e7",
        "patch": "@@ -157,6 +157,7 @@ BITCOIN_CORE_H = \\\n   netmessagemaker.h \\\n   node/coin.h \\\n   node/coinstats.h \\\n+  node/context.h \\\n   node/psbt.h \\\n   node/transaction.h \\\n   noui.h \\"
      },
      {
        "sha": "f490a2cc5082e1c6acf168178e4bcf53bf621e79",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 1,
        "deletions": 12,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d5448c76b71c9d91399c31b043237091be2e5e7/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d5448c76b71c9d91399c31b043237091be2e5e7/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=4d5448c76b71c9d91399c31b043237091be2e5e7",
        "patch": "@@ -7,21 +7,10 @@\n #define BITCOIN_INIT_H\n \n #include <memory>\n+#include <node/context.h>\n #include <string>\n #include <util/system.h>\n \n-namespace interfaces {\n-class Chain;\n-class ChainClient;\n-} // namespace interfaces\n-\n-//! Pointers to interfaces used during init and destroyed on shutdown.\n-struct NodeContext\n-{\n-    std::unique_ptr<interfaces::Chain> chain;\n-    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n-};\n-\n namespace boost\n {\n class thread_group;"
      },
      {
        "sha": "3dd90ba9615d54fa38ebe0a8d1390a2843a27c73",
        "filename": "src/node/context.h",
        "status": "added",
        "additions": 23,
        "deletions": 0,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4d5448c76b71c9d91399c31b043237091be2e5e7/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4d5448c76b71c9d91399c31b043237091be2e5e7/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=4d5448c76b71c9d91399c31b043237091be2e5e7",
        "patch": "@@ -0,0 +1,23 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_CONTEXT_H\n+#define BITCOIN_NODE_CONTEXT_H\n+\n+#include <memory>\n+#include <vector>\n+\n+namespace interfaces {\n+class Chain;\n+class ChainClient;\n+} // namespace interfaces\n+\n+//! Pointers to interfaces used during init and destroyed on shutdown.\n+struct NodeContext\n+{\n+    std::unique_ptr<interfaces::Chain> chain;\n+    std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+};\n+\n+#endif // BITCOIN_NODE_CONTEXT_H"
      }
    ]
  },
  {
    "sha": "e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNmY0Zjg5NWQ1ZTQyZmVhZjdiZmE1ZjQxZTgwMjkyYWFhNzNjZDdk",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-09-17T22:28:03Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-28T14:30:51Z"
      },
      "message": "Pass NodeContext, ConnMan, BanMan references more places\n\nSo g_connman and g_banman globals can be removed next commit.",
      "tree": {
        "sha": "1c12f814ae2ac88316066d334274354c669d7aa5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1c12f814ae2ac88316066d334274354c669d7aa5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4d5448c76b71c9d91399c31b043237091be2e5e7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4d5448c76b71c9d91399c31b043237091be2e5e7",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4d5448c76b71c9d91399c31b043237091be2e5e7"
      }
    ],
    "stats": {
      "total": 216,
      "additions": 154,
      "deletions": 62
    },
    "files": [
      {
        "sha": "8d4d4156e31c91f33b137164026dcc1cdd9d6985",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -285,6 +285,7 @@ libbitcoin_server_a_SOURCES = \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n   node/coinstats.cpp \\\n+  node/context.cpp \\\n   node/psbt.cpp \\\n   node/transaction.cpp \\\n   noui.cpp \\"
      },
      {
        "sha": "29a145bfe67ba9e4b63b8e9973eeebca76b4c240",
        "filename": "src/bench/coin_selection.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bench/coin_selection.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bench/coin_selection.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/coin_selection.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <bench/bench.h>\n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <wallet/coinselection.h>\n #include <wallet/wallet.h>\n \n@@ -28,7 +29,8 @@ static void addCoin(const CAmount& nValue, const CWallet& wallet, std::vector<st\n // (https://github.com/bitcoin/bitcoin/issues/7883#issuecomment-224807484)\n static void CoinSelection(benchmark::State& state)\n {\n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n     const CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     std::vector<std::unique_ptr<CWalletTx>> wtxs;\n     LOCK(wallet.cs_wallet);\n@@ -60,7 +62,8 @@ static void CoinSelection(benchmark::State& state)\n }\n \n typedef std::set<CInputCoin> CoinSet;\n-static auto testChain = interfaces::MakeChain();\n+static NodeContext testNode;\n+static auto testChain = interfaces::MakeChain(testNode);\n static const CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n std::vector<std::unique_ptr<CWalletTx>> wtxn;\n "
      },
      {
        "sha": "0e660d6bcd651c71bfb7d64080e0921dd0fc2d90",
        "filename": "src/bench/wallet_balance.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bench/wallet_balance.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bench/wallet_balance.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/wallet_balance.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <bench/bench.h>\n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <optional.h>\n #include <test/util.h>\n #include <validationinterface.h>\n@@ -13,7 +14,8 @@ static void WalletBalance(benchmark::State& state, const bool set_dirty, const b\n {\n     const auto& ADDRESS_WATCHONLY = ADDRESS_BCRT1_UNSPENDABLE;\n \n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain();\n+    NodeContext node;\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n     CWallet wallet{chain.get(), WalletLocation(), WalletDatabase::CreateMock()};\n     {\n         bool first_run;"
      },
      {
        "sha": "be1d60ee527174cf06d28f7d95a11ff66a8440b9",
        "filename": "src/bitcoind.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoind.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -12,6 +12,7 @@\n #include <compat.h>\n #include <init.h>\n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <noui.h>\n #include <shutdown.h>\n #include <ui_interface.h>\n@@ -24,13 +25,13 @@\n \n const std::function<std::string(const char*)> G_TRANSLATION_FUN = nullptr;\n \n-static void WaitForShutdown()\n+static void WaitForShutdown(NodeContext& node)\n {\n     while (!ShutdownRequested())\n     {\n         MilliSleep(200);\n     }\n-    Interrupt();\n+    Interrupt(node);\n }\n \n //////////////////////////////////////////////////////////////////////////////\n@@ -40,7 +41,7 @@ static void WaitForShutdown()\n static bool AppInit(int argc, char* argv[])\n {\n     NodeContext node;\n-    node.chain = interfaces::MakeChain();\n+    node.chain = interfaces::MakeChain(node);\n \n     bool fRet = false;\n \n@@ -152,9 +153,9 @@ static bool AppInit(int argc, char* argv[])\n \n     if (!fRet)\n     {\n-        Interrupt();\n+        Interrupt(node);\n     } else {\n-        WaitForShutdown();\n+        WaitForShutdown(node);\n     }\n     Shutdown(node);\n "
      },
      {
        "sha": "6409f0a41a7eb9068d0ee83bf1fbd722fdba71d1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 3,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -29,6 +29,7 @@\n #include <net_permissions.h>\n #include <net_processing.h>\n #include <netbase.h>\n+#include <node/context.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -154,7 +155,7 @@ static std::unique_ptr<ECCVerifyHandle> globalVerifyHandle;\n static boost::thread_group threadGroup;\n static CScheduler scheduler;\n \n-void Interrupt()\n+void Interrupt(NodeContext& node)\n {\n     InterruptHTTPServer();\n     InterruptHTTPRPC();\n@@ -1819,8 +1820,9 @@ bool AppInitMain(NodeContext& node)\n         client->start(scheduler);\n     }\n \n-    scheduler.scheduleEvery([]{\n-        g_banman->DumpBanlist();\n+    BanMan* banman = g_banman.get();\n+    scheduler.scheduleEvery([banman]{\n+        banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL * 1000);\n \n     return true;"
      },
      {
        "sha": "ca52dadf08a83e6a8df714b98a698728e4664ce0",
        "filename": "src/init.h",
        "status": "modified",
        "additions": 3,
        "deletions": 4,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -7,17 +7,16 @@\n #define BITCOIN_INIT_H\n \n #include <memory>\n-#include <node/context.h>\n #include <string>\n #include <util/system.h>\n \n-namespace boost\n-{\n+struct NodeContext;\n+namespace boost {\n class thread_group;\n } // namespace boost\n \n /** Interrupt threads */\n-void Interrupt();\n+void Interrupt(NodeContext& node);\n void Shutdown(NodeContext& node);\n //!Initialize the logging infrastructure\n void InitLogging();"
      },
      {
        "sha": "23099a7799aca65fb7f8ed7457b89bb57af7269c",
        "filename": "src/interfaces/chain.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/chain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/chain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -11,6 +11,7 @@\n #include <net.h>\n #include <net_processing.h>\n #include <node/coin.h>\n+#include <node/context.h>\n #include <node/transaction.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -238,6 +239,7 @@ class RpcHandlerImpl : public Handler\n class ChainImpl : public Chain\n {\n public:\n+    explicit ChainImpl(NodeContext& node) : m_node(node) {}\n     std::unique_ptr<Chain::Lock> lock(bool try_lock) override\n     {\n         auto result = MakeUnique<LockImpl>(::cs_main, \"cs_main\", __FILE__, __LINE__, try_lock);\n@@ -286,7 +288,7 @@ class ChainImpl : public Chain\n     }\n     bool broadcastTransaction(const CTransactionRef& tx, std::string& err_string, const CAmount& max_tx_fee, bool relay) override\n     {\n-        const TransactionError err = BroadcastTransaction(tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n+        const TransactionError err = BroadcastTransaction(m_node, tx, err_string, max_tx_fee, relay, /*wait_callback*/ false);\n         // Chain clients only care about failures to accept the tx to the mempool. Disregard non-mempool related failures.\n         // Note: this will need to be updated if BroadcastTransactions() is updated to return other non-mempool failures\n         // that Chain clients do not need to know about.\n@@ -378,9 +380,10 @@ class ChainImpl : public Chain\n             notifications.TransactionAddedToMempool(entry.GetSharedTx());\n         }\n     }\n+    NodeContext& m_node;\n };\n } // namespace\n \n-std::unique_ptr<Chain> MakeChain() { return MakeUnique<ChainImpl>(); }\n+std::unique_ptr<Chain> MakeChain(NodeContext& node) { return MakeUnique<ChainImpl>(node); }\n \n } // namespace interfaces"
      },
      {
        "sha": "3fe12088c5ab0fda51926638f11494ad15b67a01",
        "filename": "src/interfaces/chain.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/chain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/chain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/chain.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -24,6 +24,7 @@ class uint256;\n enum class RBFTransactionState;\n struct CBlockLocator;\n struct FeeCalculation;\n+struct NodeContext;\n \n namespace interfaces {\n \n@@ -291,7 +292,7 @@ class ChainClient\n };\n \n //! Return implementation of Chain interface.\n-std::unique_ptr<Chain> MakeChain();\n+std::unique_ptr<Chain> MakeChain(NodeContext& node);\n \n //! Return implementation of ChainClient interface for a wallet client. This\n //! function will be undefined in builds where ENABLE_WALLET is false."
      },
      {
        "sha": "7e1961566e6f9e35e5d7e998a7453f4616cc31be",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -16,6 +16,7 @@\n #include <net_processing.h>\n #include <netaddress.h>\n #include <netbase.h>\n+#include <node/context.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>\n #include <policy/settings.h>\n@@ -52,7 +53,6 @@ namespace {\n class NodeImpl : public Node\n {\n public:\n-    NodeImpl() { m_context.chain = MakeChain(); }\n     void initError(const std::string& message) override { InitError(message); }\n     bool parseParameters(int argc, const char* const argv[], std::string& error) override\n     {\n@@ -75,10 +75,14 @@ class NodeImpl : public Node\n         return AppInitBasicSetup() && AppInitParameterInteraction() && AppInitSanityChecks() &&\n                AppInitLockDataDirectory();\n     }\n-    bool appInitMain() override { return AppInitMain(m_context); }\n+    bool appInitMain() override\n+    {\n+        m_context.chain = MakeChain(m_context);\n+        return AppInitMain(m_context);\n+    }\n     void appShutdown() override\n     {\n-        Interrupt();\n+        Interrupt(m_context);\n         Shutdown(m_context);\n     }\n     void startShutdown() override { StartShutdown(); }\n@@ -315,6 +319,7 @@ class NodeImpl : public Node\n                     /* verification progress is unused when a header was received */ 0);\n             }));\n     }\n+    NodeContext* context() override { return &m_context; }\n     NodeContext m_context;\n };\n "
      },
      {
        "sha": "c29037f2e305138ac73814046bc1459bea8c3644",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -28,6 +28,7 @@ class RPCTimerInterface;\n class UniValue;\n class proxyType;\n struct CNodeStateStats;\n+struct NodeContext;\n enum class WalletCreationStatus;\n \n namespace interfaces {\n@@ -254,6 +255,9 @@ class Node\n     using NotifyHeaderTipFn =\n         std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n+\n+    //! Return pointer to internal chain interface, useful for testing.\n+    virtual NodeContext* context() { return nullptr; }\n };\n \n //! Return implementation of Node interface."
      },
      {
        "sha": "836da0be7039f8fddb4d408dca19d51108a642b6",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -1860,7 +1860,7 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, BanMan* banman, const std::atomic<bool>& interruptMsgProc)\n {\n     LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n@@ -2136,7 +2136,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n             if (addr.nTime <= 100000000 || addr.nTime > nNow + 10 * 60)\n                 addr.nTime = nNow - 5 * 24 * 60 * 60;\n             pfrom->AddAddressKnown(addr);\n-            if (g_banman->IsBanned(addr)) continue; // Do not process banned addresses beyond remembering we received them\n+            if (banman->IsBanned(addr)) continue; // Do not process banned addresses beyond remembering we received them\n             bool fReachable = IsReachable(addr);\n             if (addr.nTime > nSince && !pfrom->fGetAddr && vAddr.size() <= 10 && addr.IsRoutable())\n             {\n@@ -2772,7 +2772,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, banman, interruptMsgProc);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -2990,7 +2990,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         std::vector<CAddress> vAddr = connman->GetAddresses();\n         FastRandomContext insecure_rand;\n         for (const CAddress &addr : vAddr) {\n-            if (!g_banman->IsBanned(addr)) {\n+            if (!banman->IsBanned(addr)) {\n                 pfrom->PushAddress(addr, insecure_rand);\n             }\n         }\n@@ -3310,7 +3310,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.m_time, chainparams, connman, interruptMsgProc);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.m_time, chainparams, connman, m_banman, interruptMsgProc);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      },
      {
        "sha": "98cb061f194cdbaea3333ca6b2271c847f2d7a3e",
        "filename": "src/node/context.cpp",
        "status": "added",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -0,0 +1,10 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <node/context.h>\n+\n+#include <interfaces/chain.h>\n+\n+NodeContext::NodeContext() {}\n+NodeContext::~NodeContext() {}"
      },
      {
        "sha": "f98550105d44bce6f030f92c81cde107571e3618",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 16,
        "deletions": 1,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -13,11 +13,26 @@ class Chain;\n class ChainClient;\n } // namespace interfaces\n \n-//! Pointers to interfaces used during init and destroyed on shutdown.\n+//! NodeContext struct containing references to chain state and connection\n+//! state.\n+//!\n+//! This is used by init, rpc, and test code to pass object references around\n+//! without needing to declare the same variables and parameters repeatedly, or\n+//! to use globals. More variables could be added to this struct (particularly\n+//! references to validation and mempool objects) to eliminate use of globals\n+//! and make code more modular and testable. The struct isn't intended to have\n+//! any member functions. It should just be a collection of references that can\n+//! be used without pulling in unwanted dependencies or functionality.\n struct NodeContext\n {\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n+\n+    //! Declare default constructor and destructor that are not inline, so code\n+    //! instantiating the NodeContext struct doesn't need to #include class\n+    //! definitions for all the unique_ptr members.\n+    NodeContext();\n+    ~NodeContext();\n };\n \n #endif // BITCOIN_NODE_CONTEXT_H"
      },
      {
        "sha": "2577c2559820c4dd02bc4df0422b096da5dd3eb9",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -6,14 +6,15 @@\n #include <consensus/validation.h>\n #include <net.h>\n #include <net_processing.h>\n+#include <node/context.h>\n #include <util/validation.h>\n #include <validation.h>\n #include <validationinterface.h>\n #include <node/transaction.h>\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n     // g_connman is assigned both before chain clients and before RPC server is accepting calls,"
      },
      {
        "sha": "35873d83765a6e52aef357482793f21ffb26e2ce",
        "filename": "src/node/transaction.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/node/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -9,6 +9,8 @@\n #include <primitives/transaction.h>\n #include <util/error.h>\n \n+struct NodeContext;\n+\n /**\n  * Submit a transaction to the mempool and (optionally) relay it to all P2P peers.\n  *\n@@ -18,13 +20,14 @@\n  * NOT be set while cs_main, cs_mempool or cs_wallet are held to avoid\n  * deadlock.\n  *\n+ * @param[in]  node reference to node context\n  * @param[in]  tx the transaction to broadcast\n  * @param[out] &err_string reference to std::string to fill with error string if available\n  * @param[in]  max_tx_fee reject txs with fees higher than this (if 0, accept any fee)\n  * @param[in]  relay flag if both mempool insertion and p2p relay are requested\n  * @param[in]  wait_callback, wait until callbacks have been processed to avoid stale result due to a sequentially RPC.\n  * return error\n  */\n-NODISCARD TransactionError BroadcastTransaction(CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n+NODISCARD TransactionError BroadcastTransaction(NodeContext& node, CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback);\n \n #endif // BITCOIN_NODE_TRANSACTION_H"
      },
      {
        "sha": "8b32b70d1ef71c9a4b7e26768f501de18063171e",
        "filename": "src/qt/test/addressbooktests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/addressbooktests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/addressbooktests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -51,11 +51,10 @@ void EditAddressAndSubmit(\n  * In each case, verify the resulting state of the address book and optionally\n  * the warning message presented to the user.\n  */\n-void TestAddAddressesToSendBook()\n+void TestAddAddressesToSendBook(interfaces::Node& node)\n {\n     TestChain100Setup test;\n-    auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n \n@@ -101,10 +100,9 @@ void TestAddAddressesToSendBook()\n \n     // Initialize relevant QT models.\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n-    auto node = interfaces::MakeNode();\n-    OptionsModel optionsModel(*node);\n+    OptionsModel optionsModel(node);\n     AddWallet(wallet);\n-    WalletModel walletModel(std::move(node->getWallets()[0]), *node, platformStyle.get(), &optionsModel);\n+    WalletModel walletModel(interfaces::MakeWallet(wallet), node, platformStyle.get(), &optionsModel);\n     RemoveWallet(wallet);\n     EditAddressDialog editAddressDialog(EditAddressDialog::NewSendingAddress);\n     editAddressDialog.setModel(walletModel.getAddressTableModel());\n@@ -150,5 +148,5 @@ void AddressBookTests::addressBookTests()\n         return;\n     }\n #endif\n-    TestAddAddressesToSendBook();\n+    TestAddAddressesToSendBook(m_node);\n }"
      },
      {
        "sha": "9944750ec8eb4c09e60c96f62f912d57ef370a91",
        "filename": "src/qt/test/addressbooktests.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/addressbooktests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/addressbooktests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/addressbooktests.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -4,8 +4,16 @@\n #include <QObject>\n #include <QTest>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+\n class AddressBookTests : public QObject\n {\n+public:\n+    AddressBookTests(interfaces::Node& node) : m_node(node) {}\n+    interfaces::Node& m_node;\n+\n     Q_OBJECT\n \n private Q_SLOTS:"
      },
      {
        "sha": "1772de4c1ba7332aeaab7eb9c9be4f816f2bde0d",
        "filename": "src/qt/test/rpcnestedtests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/rpcnestedtests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/rpcnestedtests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -41,7 +41,7 @@ void RPCNestedTests::rpcNestedTests()\n     std::string result;\n     std::string result2;\n     std::string filtered;\n-    auto node = interfaces::MakeNode();\n+    interfaces::Node* node = &m_node;\n     RPCConsole::RPCExecuteCommandLine(*node, result, \"getblockchaininfo()[chain]\", &filtered); //simple result filtering with path\n     QVERIFY(result==\"main\");\n     QVERIFY(filtered == \"getblockchaininfo()[chain]\");"
      },
      {
        "sha": "8789fe8373edc3d4abc5e9fc2a15e919f65aa033",
        "filename": "src/qt/test/rpcnestedtests.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/rpcnestedtests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/rpcnestedtests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/rpcnestedtests.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -8,8 +8,16 @@\n #include <QObject>\n #include <QTest>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+\n class RPCNestedTests : public QObject\n {\n+public:\n+    RPCNestedTests(interfaces::Node& node) : m_node(node) {}\n+    interfaces::Node& m_node;\n+\n     Q_OBJECT\n \n     private Q_SLOTS:"
      },
      {
        "sha": "e6870cf1be21b9b4b9e901132bffcdd5a18f2fe4",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -50,7 +50,7 @@ int main(int argc, char *argv[])\n         BasicTestingSetup dummy{CBaseChainParams::REGTEST};\n     }\n \n-    auto node = interfaces::MakeNode();\n+    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode();\n \n     bool fInvalid = false;\n \n@@ -76,7 +76,7 @@ int main(int argc, char *argv[])\n     if (QTest::qExec(&test1) != 0) {\n         fInvalid = true;\n     }\n-    RPCNestedTests test3;\n+    RPCNestedTests test3(*node);\n     if (QTest::qExec(&test3) != 0) {\n         fInvalid = true;\n     }\n@@ -85,11 +85,11 @@ int main(int argc, char *argv[])\n         fInvalid = true;\n     }\n #ifdef ENABLE_WALLET\n-    WalletTests test5;\n+    WalletTests test5(*node);\n     if (QTest::qExec(&test5) != 0) {\n         fInvalid = true;\n     }\n-    AddressBookTests test6;\n+    AddressBookTests test6(*node);\n     if (QTest::qExec(&test6) != 0) {\n         fInvalid = true;\n     }"
      },
      {
        "sha": "fa54f0cdd079fc458664b8ba23c03c70a1ec2afc",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 7,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -126,15 +126,14 @@ void BumpFee(TransactionView& view, const uint256& txid, bool expectDisabled, st\n //     QT_QPA_PLATFORM=xcb     src/qt/test/test_bitcoin-qt  # Linux\n //     QT_QPA_PLATFORM=windows src/qt/test/test_bitcoin-qt  # Windows\n //     QT_QPA_PLATFORM=cocoa   src/qt/test/test_bitcoin-qt  # macOS\n-void TestGUI()\n+void TestGUI(interfaces::Node& node)\n {\n     // Set up wallet and chain with 105 blocks (5 mature blocks for spending).\n     TestChain100Setup test;\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n-    auto chain = interfaces::MakeChain();\n-    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n+    std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);\n     {\n@@ -159,10 +158,9 @@ void TestGUI()\n     std::unique_ptr<const PlatformStyle> platformStyle(PlatformStyle::instantiate(\"other\"));\n     SendCoinsDialog sendCoinsDialog(platformStyle.get());\n     TransactionView transactionView(platformStyle.get());\n-    auto node = interfaces::MakeNode();\n-    OptionsModel optionsModel(*node);\n+    OptionsModel optionsModel(node);\n     AddWallet(wallet);\n-    WalletModel walletModel(std::move(node->getWallets().back()), *node, platformStyle.get(), &optionsModel);\n+    WalletModel walletModel(interfaces::MakeWallet(wallet), node, platformStyle.get(), &optionsModel);\n     RemoveWallet(wallet);\n     sendCoinsDialog.setModel(&walletModel);\n     transactionView.setModel(&walletModel);\n@@ -260,5 +258,5 @@ void WalletTests::walletTests()\n         return;\n     }\n #endif\n-    TestGUI();\n+    TestGUI(m_node);\n }"
      },
      {
        "sha": "0a7b57a678c7943e718fa276a0b07fb840b8269f",
        "filename": "src/qt/test/wallettests.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/wallettests.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/qt/test/wallettests.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -4,8 +4,16 @@\n #include <QObject>\n #include <QTest>\n \n+namespace interfaces {\n+class Node;\n+} // namespace interfaces\n+\n class WalletTests : public QObject\n {\n+ public:\n+    WalletTests(interfaces::Node& node) : m_node(node) {}\n+    interfaces::Node& m_node;\n+\n     Q_OBJECT\n \n private Q_SLOTS:"
      },
      {
        "sha": "f616b83030286b3ca32135bedba2baf7e3805517",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -13,6 +13,7 @@\n #include <key_io.h>\n #include <miner.h>\n #include <net.h>\n+#include <node/context.h>\n #include <policy/fees.h>\n #include <pow.h>\n #include <rpc/blockchain.h>"
      },
      {
        "sha": "604846eeef52f2203289c964e85fcb7b229e4065",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -11,6 +11,7 @@\n #include <net_processing.h>\n #include <net_permissions.h>\n #include <netbase.h>\n+#include <node/context.h>\n #include <policy/settings.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>"
      },
      {
        "sha": "9b71b70b225ceccd586869371b9fdee73426feb3",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -10,7 +10,9 @@\n #include <index/txindex.h>\n #include <key_io.h>\n #include <merkleblock.h>\n+#include <net.h>\n #include <node/coin.h>\n+#include <node/context.h>\n #include <node/psbt.h>\n #include <node/transaction.h>\n #include <policy/policy.h>\n@@ -817,7 +819,7 @@ static UniValue sendrawtransaction(const JSONRPCRequest& request)\n \n     std::string err_string;\n     AssertLockNotHeld(cs_main);\n-    const TransactionError err = BroadcastTransaction(tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n+    const TransactionError err = BroadcastTransaction(*g_rpc_node, tx, err_string, max_raw_tx_fee, /*relay*/ true, /*wait_callback*/ true);\n     if (TransactionError::OK != err) {\n         throw JSONRPCTransactionError(err, err_string);\n     }"
      },
      {
        "sha": "faff1931cd69bfad4a54d36dc98172a56deaa7d7",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -7,8 +7,8 @@\n #include <rpc/util.h>\n \n #include <core_io.h>\n-#include <init.h>\n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <test/setup_common.h>\n #include <util/time.h>\n \n@@ -113,7 +113,7 @@ BOOST_AUTO_TEST_CASE(rpc_rawsign)\n     std::string privkey1 = \"\\\"KzsXybp9jX64P5ekX1KUxRQ79Jht9uzW7LorgwE65i5rWACL6LQe\\\"\";\n     std::string privkey2 = \"\\\"Kyhdf5LuKTRx4ge69ybABsiUAWjVRK4XGxAKk2FQLp2HjGMy87Z4\\\"\";\n     NodeContext node;\n-    node.chain = interfaces::MakeChain();\n+    node.chain = interfaces::MakeChain(node);\n     g_rpc_node = &node;\n     r = CallRPC(std::string(\"signrawtransactionwithkey \")+notsigned+\" [] \"+prevout);\n     BOOST_CHECK(find_value(r.get_obj(), \"complete\").get_bool() == false);"
      },
      {
        "sha": "5731b50e3198457a589b7d37c849bf3b38be021e",
        "filename": "src/test/setup_common.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/test/setup_common.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/test/setup_common.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -8,6 +8,7 @@\n #include <chainparamsbase.h>\n #include <fs.h>\n #include <key.h>\n+#include <node/context.h>\n #include <pubkey.h>\n #include <random.h>\n #include <scheduler.h>\n@@ -67,6 +68,7 @@ struct BasicTestingSetup {\n  * Included are coins database, script check threads setup.\n  */\n struct TestingSetup : public BasicTestingSetup {\n+    NodeContext m_node;\n     boost::thread_group threadGroup;\n     CScheduler scheduler;\n "
      },
      {
        "sha": "a8b3df1f2eff0106dc7d011f3f179b79de5fd4d5",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -6,6 +6,7 @@\n #include <init.h>\n #include <interfaces/chain.h>\n #include <net.h>\n+#include <node/context.h>\n #include <outputtype.h>\n #include <util/moneystr.h>\n #include <util/system.h>"
      },
      {
        "sha": "45c6e340c04dc3f0eef11a84a9a692a6333866ff",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -5,9 +5,9 @@\n \n #include <amount.h>\n #include <core_io.h>\n-#include <init.h>\n #include <interfaces/chain.h>\n #include <key_io.h>\n+#include <node/context.h>\n #include <outputtype.h>\n #include <policy/feerate.h>\n #include <policy/fees.h>"
      },
      {
        "sha": "397e6ea9d339c347d9541d765442e6c2388abbfa",
        "filename": "src/wallet/test/coinselector_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/coinselector_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/coinselector_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/coinselector_tests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -2,6 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <node/context.h>\n #include <wallet/wallet.h>\n #include <wallet/coinselection.h>\n #include <wallet/coincontrol.h>\n@@ -28,7 +29,8 @@ std::vector<std::unique_ptr<CWalletTx>> wtxn;\n typedef std::set<CInputCoin> CoinSet;\n \n static std::vector<COutput> vCoins;\n-static auto testChain = interfaces::MakeChain();\n+static NodeContext testNode;\n+static auto testChain = interfaces::MakeChain(testNode);\n static CWallet testWallet(testChain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n static CAmount balance = 0;\n "
      },
      {
        "sha": "eb4e72c88b271d8f2883147d473cfb2fa562c862",
        "filename": "src/wallet/test/init_test_fixture.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/init_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/init_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/init_test_fixture.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -6,6 +6,7 @@\n #define BITCOIN_WALLET_TEST_INIT_TEST_FIXTURE_H\n \n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <test/setup_common.h>\n \n \n@@ -17,7 +18,8 @@ struct InitWalletDirTestingSetup: public BasicTestingSetup {\n     fs::path m_datadir;\n     fs::path m_cwd;\n     std::map<std::string, fs::path> m_walletdir_path_cases;\n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    NodeContext m_node;\n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<interfaces::ChainClient> m_chain_client;\n };\n "
      },
      {
        "sha": "371074ea5bf80097b72e079ae306aa832cd43552",
        "filename": "src/wallet/test/ismine_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/ismine_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/ismine_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/ismine_tests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -3,6 +3,7 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <key.h>\n+#include <node/context.h>\n #include <script/script.h>\n #include <script/standard.h>\n #include <test/setup_common.h>\n@@ -26,7 +27,8 @@ BOOST_AUTO_TEST_CASE(ismine_standard)\n     CKey uncompressedKey;\n     uncompressedKey.MakeNewKey(false);\n     CPubKey uncompressedPubkey = uncompressedKey.GetPubKey();\n-    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain();\n+    NodeContext node;\n+    std::unique_ptr<interfaces::Chain> chain = interfaces::MakeChain(node);\n \n     CScript scriptPubKey;\n     isminetype result;"
      },
      {
        "sha": "def6f1934ea7722edf1d191408f44360c9e05745",
        "filename": "src/wallet/test/wallet_test_fixture.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/wallet_test_fixture.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/wallet_test_fixture.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_test_fixture.h?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -9,6 +9,7 @@\n \n #include <interfaces/chain.h>\n #include <interfaces/wallet.h>\n+#include <node/context.h>\n #include <wallet/wallet.h>\n \n #include <memory>\n@@ -18,7 +19,8 @@\n struct WalletTestingSetup: public TestingSetup {\n     explicit WalletTestingSetup(const std::string& chainName = CBaseChainParams::MAIN);\n \n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    NodeContext m_node;\n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<interfaces::ChainClient> m_chain_client = interfaces::MakeWalletClient(*m_chain, {});\n     CWallet m_wallet;\n };"
      },
      {
        "sha": "ef8bc622686f5c8c100c029f9a90c693ff036e25",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "patch": "@@ -9,6 +9,7 @@\n #include <vector>\n \n #include <interfaces/chain.h>\n+#include <node/context.h>\n #include <policy/policy.h>\n #include <rpc/server.h>\n #include <test/setup_common.h>\n@@ -39,7 +40,8 @@ BOOST_FIXTURE_TEST_CASE(scan_for_wallet_transactions, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n \n@@ -118,7 +120,8 @@ BOOST_FIXTURE_TEST_CASE(importmulti_rescan, TestChain100Setup)\n     CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));\n     CBlockIndex* newTip = ::ChainActive().Tip();\n \n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n \n@@ -185,7 +188,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     SetMockTime(KEY_TIME);\n     m_coinbase_txns.emplace_back(CreateAndProcessBlock({}, GetScriptForRawPubKey(coinbaseKey.GetPubKey())).vtx[0]);\n \n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n     auto locked_chain = chain->lock();\n     LockAssertion lock(::cs_main);\n \n@@ -239,7 +243,8 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n // debit functions.\n BOOST_FIXTURE_TEST_CASE(coin_mark_dirty_immature_credit, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n \n     CWallet wallet(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     CWalletTx wtx(&wallet, m_coinbase_txns.back());\n@@ -466,7 +471,8 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         return it->second;\n     }\n \n-    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain();\n+    NodeContext m_node;\n+    std::unique_ptr<interfaces::Chain> m_chain = interfaces::MakeChain(m_node);\n     std::unique_ptr<CWallet> wallet;\n };\n \n@@ -538,7 +544,8 @@ BOOST_FIXTURE_TEST_CASE(ListCoins, ListCoinsTestingSetup)\n \n BOOST_FIXTURE_TEST_CASE(wallet_disableprivkeys, TestChain100Setup)\n {\n-    auto chain = interfaces::MakeChain();\n+    NodeContext node;\n+    auto chain = interfaces::MakeChain(node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n     wallet->SetMinVersion(FEATURE_LATEST);\n     wallet->SetWalletFlag(WALLET_FLAG_DISABLE_PRIVATE_KEYS);"
      }
    ]
  },
  {
    "sha": "8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4OTIyZDdmNmI3NTFhM2U2YjNiOWY2ZmI3OTYxYzQ0Mjg3N2ZiNjVh",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-09-17T22:59:36Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-28T14:30:51Z"
      },
      "message": "scripted-diff: Remove g_connman, g_banman globals\n\n-BEGIN VERIFY SCRIPT-\nsed -i 's:#include <interfaces/chain.h>:#include <banman.h>\\n#include <interfaces/chain.h>\\n#include <net.h>\\n#include <net_processing.h>:' src/node/context.cpp\nsed -i 's/namespace interfaces {/class BanMan;\\nclass CConnman;\\nclass PeerLogicValidation;\\n&/' src/node/context.h\nsed -i 's/std::unique_ptr<interfaces::Chain> chain/std::unique_ptr<CConnman> connman;\\n    std::unique_ptr<PeerLogicValidation> peer_logic;\\n    std::unique_ptr<BanMan> banman;\\n    &/' src/node/context.h\nsed -i '/std::unique_ptr<[^>]\\+> \\(g_connman\\|g_banman\\|peerLogic\\);/d' src/banman.h src/net.h src/init.cpp\nsed -i 's/g_connman/m_context.connman/g' src/interfaces/node.cpp\nsed -i 's/g_banman/m_context.banman/g' src/interfaces/node.cpp\nsed -i 's/g_connman/m_node.connman/g' src/interfaces/chain.cpp src/test/setup_common.cpp\nsed -i 's/g_banman/m_node.banman/g' src/test/setup_common.cpp\nsed -i 's/g_connman/node.connman/g' src/init.cpp src/node/transaction.cpp\nsed -i 's/g_banman/node.banman/g' src/init.cpp\nsed -i 's/peerLogic/node.peer_logic/g' src/init.cpp\nsed -i 's/g_connman/g_rpc_node->connman/g' src/rpc/mining.cpp src/rpc/net.cpp src/rpc/rawtransaction.cpp\nsed -i 's/g_banman/g_rpc_node->banman/g' src/rpc/net.cpp\nsed -i 's/std::shared_ptr<CWallet> wallet =/node.context()->connman = std::move(test.m_node.connman);\\n    &/' src/qt/test/wallettests.cpp\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "287fa005931505e5cc231e231b10a9cb4b85a9b9",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/287fa005931505e5cc231e231b10a9cb4b85a9b9"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e6f4f895d5e42feaf7bfa5f41e80292aaa73cd7d"
      }
    ],
    "stats": {
      "total": 200,
      "additions": 102,
      "deletions": 98
    },
    "files": [
      {
        "sha": "9d45bf0559005079d06e2bff9c06bd5bb6a9e2e3",
        "filename": "src/banman.h",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/banman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/banman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/banman.h?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -66,5 +66,4 @@ class BanMan\n     const int64_t m_default_ban_time;\n };\n \n-extern std::unique_ptr<BanMan> g_banman;\n #endif"
      },
      {
        "sha": "a2810c50e9ef2cd18445ab029c4cff8827e397b2",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 20,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -85,9 +85,6 @@ static const bool DEFAULT_STOPAFTERBLOCKIMPORT = false;\n // Dump addresses to banlist.dat every 15 minutes (900s)\n static constexpr int DUMP_BANS_INTERVAL = 60 * 15;\n \n-std::unique_ptr<CConnman> g_connman;\n-std::unique_ptr<PeerLogicValidation> peerLogic;\n-std::unique_ptr<BanMan> g_banman;\n \n #ifdef WIN32\n // Win32 LevelDB doesn't use filedescriptors, and the ones used for\n@@ -163,8 +160,8 @@ void Interrupt(NodeContext& node)\n     InterruptREST();\n     InterruptTorControl();\n     InterruptMapPort();\n-    if (g_connman)\n-        g_connman->Interrupt();\n+    if (node.connman)\n+        node.connman->Interrupt();\n     if (g_txindex) {\n         g_txindex->Interrupt();\n     }\n@@ -197,8 +194,8 @@ void Shutdown(NodeContext& node)\n \n     // Because these depend on each-other, we make sure that neither can be\n     // using the other before destroying them.\n-    if (peerLogic) UnregisterValidationInterface(peerLogic.get());\n-    if (g_connman) g_connman->Stop();\n+    if (node.peer_logic) UnregisterValidationInterface(node.peer_logic.get());\n+    if (node.connman) node.connman->Stop();\n     if (g_txindex) g_txindex->Stop();\n     ForEachBlockFilterIndex([](BlockFilterIndex& index) { index.Stop(); });\n \n@@ -211,9 +208,9 @@ void Shutdown(NodeContext& node)\n \n     // After the threads that potentially access these pointers have been stopped,\n     // destruct and reset all to nullptr.\n-    peerLogic.reset();\n-    g_connman.reset();\n-    g_banman.reset();\n+    node.peer_logic.reset();\n+    node.connman.reset();\n+    node.banman.reset();\n     g_txindex.reset();\n     DestroyAllBlockFilterIndexes();\n \n@@ -1315,13 +1312,13 @@ bool AppInitMain(NodeContext& node)\n     // is not yet setup and may end up being set up twice if we\n     // need to reindex later.\n \n-    assert(!g_banman);\n-    g_banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n-    assert(!g_connman);\n-    g_connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n+    assert(!node.banman);\n+    node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", &uiInterface, gArgs.GetArg(\"-bantime\", DEFAULT_MISBEHAVING_BANTIME));\n+    assert(!node.connman);\n+    node.connman = std::unique_ptr<CConnman>(new CConnman(GetRand(std::numeric_limits<uint64_t>::max()), GetRand(std::numeric_limits<uint64_t>::max())));\n \n-    peerLogic.reset(new PeerLogicValidation(g_connman.get(), g_banman.get(), scheduler));\n-    RegisterValidationInterface(peerLogic.get());\n+    node.peer_logic.reset(new PeerLogicValidation(node.connman.get(), node.banman.get(), scheduler));\n+    RegisterValidationInterface(node.peer_logic.get());\n \n     // sanitize comments per BIP-0014, format user agent and check total size\n     std::vector<std::string> uacomments;\n@@ -1766,8 +1763,8 @@ bool AppInitMain(NodeContext& node)\n     connOptions.nMaxFeeler = 1;\n     connOptions.nBestHeight = chain_active_height;\n     connOptions.uiInterface = &uiInterface;\n-    connOptions.m_banman = g_banman.get();\n-    connOptions.m_msgproc = peerLogic.get();\n+    connOptions.m_banman = node.banman.get();\n+    connOptions.m_msgproc = node.peer_logic.get();\n     connOptions.nSendBufferMaxSize = 1000*gArgs.GetArg(\"-maxsendbuffer\", DEFAULT_MAXSENDBUFFER);\n     connOptions.nReceiveFloodSize = 1000*gArgs.GetArg(\"-maxreceivebuffer\", DEFAULT_MAXRECEIVEBUFFER);\n     connOptions.m_added_nodes = gArgs.GetArgs(\"-addnode\");\n@@ -1807,7 +1804,7 @@ bool AppInitMain(NodeContext& node)\n             connOptions.m_specified_outgoing = connect;\n         }\n     }\n-    if (!g_connman->Start(scheduler, connOptions)) {\n+    if (!node.connman->Start(scheduler, connOptions)) {\n         return false;\n     }\n \n@@ -1820,7 +1817,7 @@ bool AppInitMain(NodeContext& node)\n         client->start(scheduler);\n     }\n \n-    BanMan* banman = g_banman.get();\n+    BanMan* banman = node.banman.get();\n     scheduler.scheduleEvery([banman]{\n         banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL * 1000);"
      },
      {
        "sha": "1877c92178e770a5610eda8bc2f64b9b3bd815c2",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -100,15 +100,15 @@ class NodeImpl : public Node\n     bool getProxy(Network net, proxyType& proxy_info) override { return GetProxy(net, proxy_info); }\n     size_t getNodeCount(CConnman::NumConnections flags) override\n     {\n-        return g_connman ? g_connman->GetNodeCount(flags) : 0;\n+        return m_context.connman ? m_context.connman->GetNodeCount(flags) : 0;\n     }\n     bool getNodesStats(NodesStats& stats) override\n     {\n         stats.clear();\n \n-        if (g_connman) {\n+        if (m_context.connman) {\n             std::vector<CNodeStats> stats_temp;\n-            g_connman->GetNodeStats(stats_temp);\n+            m_context.connman->GetNodeStats(stats_temp);\n \n             stats.reserve(stats_temp.size());\n             for (auto& node_stats_temp : stats_temp) {\n@@ -129,44 +129,44 @@ class NodeImpl : public Node\n     }\n     bool getBanned(banmap_t& banmap) override\n     {\n-        if (g_banman) {\n-            g_banman->GetBanned(banmap);\n+        if (m_context.banman) {\n+            m_context.banman->GetBanned(banmap);\n             return true;\n         }\n         return false;\n     }\n     bool ban(const CNetAddr& net_addr, BanReason reason, int64_t ban_time_offset) override\n     {\n-        if (g_banman) {\n-            g_banman->Ban(net_addr, reason, ban_time_offset);\n+        if (m_context.banman) {\n+            m_context.banman->Ban(net_addr, reason, ban_time_offset);\n             return true;\n         }\n         return false;\n     }\n     bool unban(const CSubNet& ip) override\n     {\n-        if (g_banman) {\n-            g_banman->Unban(ip);\n+        if (m_context.banman) {\n+            m_context.banman->Unban(ip);\n             return true;\n         }\n         return false;\n     }\n     bool disconnect(const CNetAddr& net_addr) override\n     {\n-        if (g_connman) {\n-            return g_connman->DisconnectNode(net_addr);\n+        if (m_context.connman) {\n+            return m_context.connman->DisconnectNode(net_addr);\n         }\n         return false;\n     }\n     bool disconnect(NodeId id) override\n     {\n-        if (g_connman) {\n-            return g_connman->DisconnectNode(id);\n+        if (m_context.connman) {\n+            return m_context.connman->DisconnectNode(id);\n         }\n         return false;\n     }\n-    int64_t getTotalBytesRecv() override { return g_connman ? g_connman->GetTotalBytesRecv() : 0; }\n-    int64_t getTotalBytesSent() override { return g_connman ? g_connman->GetTotalBytesSent() : 0; }\n+    int64_t getTotalBytesRecv() override { return m_context.connman ? m_context.connman->GetTotalBytesRecv() : 0; }\n+    int64_t getTotalBytesSent() override { return m_context.connman ? m_context.connman->GetTotalBytesSent() : 0; }\n     size_t getMempoolSize() override { return ::mempool.size(); }\n     size_t getMempoolDynamicUsage() override { return ::mempool.DynamicMemoryUsage(); }\n     bool getHeaderTip(int& height, int64_t& block_time) override\n@@ -206,11 +206,11 @@ class NodeImpl : public Node\n     bool getImporting() override { return ::fImporting; }\n     void setNetworkActive(bool active) override\n     {\n-        if (g_connman) {\n-            g_connman->SetNetworkActive(active);\n+        if (m_context.connman) {\n+            m_context.connman->SetNetworkActive(active);\n         }\n     }\n-    bool getNetworkActive() override { return g_connman && g_connman->GetNetworkActive(); }\n+    bool getNetworkActive() override { return m_context.connman && m_context.connman->GetNetworkActive(); }\n     CFeeRate estimateSmartFee(int num_blocks, bool conservative, int* returned_target = nullptr) override\n     {\n         FeeCalculation fee_calc;"
      },
      {
        "sha": "1bbcc894789168a4d4e6a0cfcd7e5185159cc42f",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -480,8 +480,6 @@ class CConnman\n \n     friend struct CConnmanTest;\n };\n-extern std::unique_ptr<CConnman> g_connman;\n-extern std::unique_ptr<BanMan> g_banman;\n void Discover();\n void StartMapPort();\n void InterruptMapPort();"
      },
      {
        "sha": "26a01420c86adbccea2dfaa67aa50d8711aefda1",
        "filename": "src/node/context.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/context.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/context.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -4,7 +4,10 @@\n \n #include <node/context.h>\n \n+#include <banman.h>\n #include <interfaces/chain.h>\n+#include <net.h>\n+#include <net_processing.h>\n \n NodeContext::NodeContext() {}\n NodeContext::~NodeContext() {}"
      },
      {
        "sha": "2b124af4db6d24b912c95a97e50b7653afc55aa6",
        "filename": "src/node/context.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/context.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/context.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/context.h?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -8,6 +8,9 @@\n #include <memory>\n #include <vector>\n \n+class BanMan;\n+class CConnman;\n+class PeerLogicValidation;\n namespace interfaces {\n class Chain;\n class ChainClient;\n@@ -25,6 +28,9 @@ class ChainClient;\n //! be used without pulling in unwanted dependencies or functionality.\n struct NodeContext\n {\n+    std::unique_ptr<CConnman> connman;\n+    std::unique_ptr<PeerLogicValidation> peer_logic;\n+    std::unique_ptr<BanMan> banman;\n     std::unique_ptr<interfaces::Chain> chain;\n     std::vector<std::unique_ptr<interfaces::ChainClient>> chain_clients;\n "
      },
      {
        "sha": "ba4f3c53706e9e08e9e9ecb9df8a1184603d7c98",
        "filename": "src/node/transaction.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/transaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/node/transaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/transaction.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -17,9 +17,9 @@\n TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n {\n     // BroadcastTransaction can be called by either sendrawtransaction RPC or wallet RPCs.\n-    // g_connman is assigned both before chain clients and before RPC server is accepting calls,\n-    // and reset after chain clients and RPC sever are stopped. g_connman should never be null here.\n-    assert(g_connman);\n+    // node.connman is assigned both before chain clients and before RPC server is accepting calls,\n+    // and reset after chain clients and RPC sever are stopped. node.connman should never be null here.\n+    assert(node.connman);\n     std::promise<void> promise;\n     uint256 hashTx = tx->GetHash();\n     bool callback_set = false;\n@@ -80,7 +80,7 @@ TransactionError BroadcastTransaction(NodeContext& node, const CTransactionRef t\n     }\n \n     if (relay) {\n-        RelayTransaction(hashTx, *g_connman);\n+        RelayTransaction(hashTx, *node.connman);\n     }\n \n     return TransactionError::OK;"
      },
      {
        "sha": "3ccbd3d81b00b636411aafdc0e11fe2eef816291",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -133,6 +133,7 @@ void TestGUI(interfaces::Node& node)\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n+    node.context()->connman = std::move(test.m_node.connman);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), WalletLocation(), WalletDatabase::CreateMock());\n     bool firstRun;\n     wallet->LoadWallet(firstRun);"
      },
      {
        "sha": "bfa3e35d96b3baa06e97093bfdfce3b2ce5737ce",
        "filename": "src/rpc/mining.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/rpc/mining.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/rpc/mining.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/mining.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -425,10 +425,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    if (g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n+    if (g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL) == 0)\n         throw JSONRPCError(RPC_CLIENT_NOT_CONNECTED, PACKAGE_NAME \" is not connected!\");\n \n     if (::ChainstateActive().IsInitialBlockDownload())"
      },
      {
        "sha": "ebc3947856c2d4fd070fa35033f9a166eea01766",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 47,
        "deletions": 47,
        "changes": 94,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -39,10 +39,10 @@ static UniValue getconnectioncount(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    return (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n+    return (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL);\n }\n \n static UniValue ping(const JSONRPCRequest& request)\n@@ -59,11 +59,11 @@ static UniValue ping(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     // Request that each node send a ping during next message processing pass\n-    g_connman->ForEachNode([](CNode* pnode) {\n+    g_rpc_node->connman->ForEachNode([](CNode* pnode) {\n         pnode->fPingQueued = true;\n     });\n     return NullUniValue;\n@@ -132,11 +132,11 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::vector<CNodeStats> vstats;\n-    g_connman->GetNodeStats(vstats);\n+    g_rpc_node->connman->GetNodeStats(vstats);\n \n     UniValue ret(UniValue::VARR);\n \n@@ -235,26 +235,26 @@ static UniValue addnode(const JSONRPCRequest& request)\n                 },\n             }.ToString());\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     std::string strNode = request.params[0].get_str();\n \n     if (strCommand == \"onetry\")\n     {\n         CAddress addr;\n-        g_connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n+        g_rpc_node->connman->OpenNetworkConnection(addr, false, nullptr, strNode.c_str(), false, false, true);\n         return NullUniValue;\n     }\n \n     if (strCommand == \"add\")\n     {\n-        if(!g_connman->AddNode(strNode))\n+        if(!g_rpc_node->connman->AddNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: Node already added\");\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if(!g_connman->RemoveAddedNode(strNode))\n+        if(!g_rpc_node->connman->RemoveAddedNode(strNode))\n             throw JSONRPCError(RPC_CLIENT_NODE_NOT_ADDED, \"Error: Node has not been added.\");\n     }\n \n@@ -280,7 +280,7 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     bool success;\n@@ -289,11 +289,11 @@ static UniValue disconnectnode(const JSONRPCRequest& request)\n \n     if (!address_arg.isNull() && id_arg.isNull()) {\n         /* handle disconnect-by-address */\n-        success = g_connman->DisconnectNode(address_arg.get_str());\n+        success = g_rpc_node->connman->DisconnectNode(address_arg.get_str());\n     } else if (!id_arg.isNull() && (address_arg.isNull() || (address_arg.isStr() && address_arg.get_str().empty()))) {\n         /* handle disconnect-by-id */\n         NodeId nodeid = (NodeId) id_arg.get_int64();\n-        success = g_connman->DisconnectNode(nodeid);\n+        success = g_rpc_node->connman->DisconnectNode(nodeid);\n     } else {\n         throw JSONRPCError(RPC_INVALID_PARAMS, \"Only one of address and nodeid should be provided.\");\n     }\n@@ -334,10 +334,10 @@ static UniValue getaddednodeinfo(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n-    std::vector<AddedNodeInfo> vInfo = g_connman->GetAddedNodeInfo();\n+    std::vector<AddedNodeInfo> vInfo = g_rpc_node->connman->GetAddedNodeInfo();\n \n     if (!request.params[0].isNull()) {\n         bool found = false;\n@@ -400,21 +400,21 @@ static UniValue getnettotals(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnettotals\", \"\")\n                 },\n             }.Check(request);\n-    if(!g_connman)\n+    if(!g_rpc_node->connman)\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n \n     UniValue obj(UniValue::VOBJ);\n-    obj.pushKV(\"totalbytesrecv\", g_connman->GetTotalBytesRecv());\n-    obj.pushKV(\"totalbytessent\", g_connman->GetTotalBytesSent());\n+    obj.pushKV(\"totalbytesrecv\", g_rpc_node->connman->GetTotalBytesRecv());\n+    obj.pushKV(\"totalbytessent\", g_rpc_node->connman->GetTotalBytesSent());\n     obj.pushKV(\"timemillis\", GetTimeMillis());\n \n     UniValue outboundLimit(UniValue::VOBJ);\n-    outboundLimit.pushKV(\"timeframe\", g_connman->GetMaxOutboundTimeframe());\n-    outboundLimit.pushKV(\"target\", g_connman->GetMaxOutboundTarget());\n-    outboundLimit.pushKV(\"target_reached\", g_connman->OutboundTargetReached(false));\n-    outboundLimit.pushKV(\"serve_historical_blocks\", !g_connman->OutboundTargetReached(true));\n-    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_connman->GetOutboundTargetBytesLeft());\n-    outboundLimit.pushKV(\"time_left_in_cycle\", g_connman->GetMaxOutboundTimeLeftInCycle());\n+    outboundLimit.pushKV(\"timeframe\", g_rpc_node->connman->GetMaxOutboundTimeframe());\n+    outboundLimit.pushKV(\"target\", g_rpc_node->connman->GetMaxOutboundTarget());\n+    outboundLimit.pushKV(\"target_reached\", g_rpc_node->connman->OutboundTargetReached(false));\n+    outboundLimit.pushKV(\"serve_historical_blocks\", !g_rpc_node->connman->OutboundTargetReached(true));\n+    outboundLimit.pushKV(\"bytes_left_in_cycle\", g_rpc_node->connman->GetOutboundTargetBytesLeft());\n+    outboundLimit.pushKV(\"time_left_in_cycle\", g_rpc_node->connman->GetMaxOutboundTimeLeftInCycle());\n     obj.pushKV(\"uploadtarget\", outboundLimit);\n     return obj;\n }\n@@ -493,16 +493,16 @@ static UniValue getnetworkinfo(const JSONRPCRequest& request)\n     obj.pushKV(\"version\",       CLIENT_VERSION);\n     obj.pushKV(\"subversion\",    strSubVersion);\n     obj.pushKV(\"protocolversion\",PROTOCOL_VERSION);\n-    if (g_connman) {\n-        ServiceFlags services = g_connman->GetLocalServices();\n+    if (g_rpc_node->connman) {\n+        ServiceFlags services = g_rpc_node->connman->GetLocalServices();\n         obj.pushKV(\"localservices\", strprintf(\"%016x\", services));\n         obj.pushKV(\"localservicesnames\", GetServicesNames(services));\n     }\n     obj.pushKV(\"localrelay\", g_relay_txes);\n     obj.pushKV(\"timeoffset\",    GetTimeOffset());\n-    if (g_connman) {\n-        obj.pushKV(\"networkactive\", g_connman->GetNetworkActive());\n-        obj.pushKV(\"connections\",   (int)g_connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n+    if (g_rpc_node->connman) {\n+        obj.pushKV(\"networkactive\", g_rpc_node->connman->GetNetworkActive());\n+        obj.pushKV(\"connections\",   (int)g_rpc_node->connman->GetNodeCount(CConnman::CONNECTIONS_ALL));\n     }\n     obj.pushKV(\"networks\",      GetNetworksInfo());\n     obj.pushKV(\"relayfee\",      ValueFromAmount(::minRelayTxFee.GetFeePerK()));\n@@ -547,7 +547,7 @@ static UniValue setban(const JSONRPCRequest& request)\n     if (request.fHelp || !help.IsValidNumArgs(request.params.size()) || (strCommand != \"add\" && strCommand != \"remove\")) {\n         throw std::runtime_error(help.ToString());\n     }\n-    if (!g_banman) {\n+    if (!g_rpc_node->banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n@@ -571,7 +571,7 @@ static UniValue setban(const JSONRPCRequest& request)\n \n     if (strCommand == \"add\")\n     {\n-        if (isSubnet ? g_banman->IsBanned(subNet) : g_banman->IsBanned(netAddr)) {\n+        if (isSubnet ? g_rpc_node->banman->IsBanned(subNet) : g_rpc_node->banman->IsBanned(netAddr)) {\n             throw JSONRPCError(RPC_CLIENT_NODE_ALREADY_ADDED, \"Error: IP/Subnet already banned\");\n         }\n \n@@ -584,20 +584,20 @@ static UniValue setban(const JSONRPCRequest& request)\n             absolute = true;\n \n         if (isSubnet) {\n-            g_banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_connman) {\n-                g_connman->DisconnectNode(subNet);\n+            g_rpc_node->banman->Ban(subNet, BanReasonManuallyAdded, banTime, absolute);\n+            if (g_rpc_node->connman) {\n+                g_rpc_node->connman->DisconnectNode(subNet);\n             }\n         } else {\n-            g_banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n-            if (g_connman) {\n-                g_connman->DisconnectNode(netAddr);\n+            g_rpc_node->banman->Ban(netAddr, BanReasonManuallyAdded, banTime, absolute);\n+            if (g_rpc_node->connman) {\n+                g_rpc_node->connman->DisconnectNode(netAddr);\n             }\n         }\n     }\n     else if(strCommand == \"remove\")\n     {\n-        if (!( isSubnet ? g_banman->Unban(subNet) : g_banman->Unban(netAddr) )) {\n+        if (!( isSubnet ? g_rpc_node->banman->Unban(subNet) : g_rpc_node->banman->Unban(netAddr) )) {\n             throw JSONRPCError(RPC_CLIENT_INVALID_IP_OR_SUBNET, \"Error: Unban failed. Requested address/subnet was not previously banned.\");\n         }\n     }\n@@ -616,12 +616,12 @@ static UniValue listbanned(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    if(!g_banman) {\n+    if(!g_rpc_node->banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n     banmap_t banMap;\n-    g_banman->GetBanned(banMap);\n+    g_rpc_node->banman->GetBanned(banMap);\n \n     UniValue bannedAddresses(UniValue::VARR);\n     for (const auto& entry : banMap)\n@@ -650,11 +650,11 @@ static UniValue clearbanned(const JSONRPCRequest& request)\n                             + HelpExampleRpc(\"clearbanned\", \"\")\n                 },\n             }.Check(request);\n-    if (!g_banman) {\n+    if (!g_rpc_node->banman) {\n         throw JSONRPCError(RPC_DATABASE_ERROR, \"Error: Ban database not loaded\");\n     }\n \n-    g_banman->ClearBanned();\n+    g_rpc_node->banman->ClearBanned();\n \n     return NullUniValue;\n }\n@@ -670,13 +670,13 @@ static UniValue setnetworkactive(const JSONRPCRequest& request)\n                 RPCExamples{\"\"},\n             }.Check(request);\n \n-    if (!g_connman) {\n+    if (!g_rpc_node->connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n-    g_connman->SetNetworkActive(request.params[0].get_bool());\n+    g_rpc_node->connman->SetNetworkActive(request.params[0].get_bool());\n \n-    return g_connman->GetNetworkActive();\n+    return g_rpc_node->connman->GetNetworkActive();\n }\n \n static UniValue getnodeaddresses(const JSONRPCRequest& request)\n@@ -702,7 +702,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n             + HelpExampleRpc(\"getnodeaddresses\", \"8\")\n                 },\n             }.Check(request);\n-    if (!g_connman) {\n+    if (!g_rpc_node->connman) {\n         throw JSONRPCError(RPC_CLIENT_P2P_DISABLED, \"Error: Peer-to-peer functionality missing or disabled\");\n     }\n \n@@ -714,7 +714,7 @@ static UniValue getnodeaddresses(const JSONRPCRequest& request)\n         }\n     }\n     // returns a shuffled list of CAddress\n-    std::vector<CAddress> vAddr = g_connman->GetAddresses();\n+    std::vector<CAddress> vAddr = g_rpc_node->connman->GetAddresses();\n     UniValue ret(UniValue::VARR);\n \n     int address_return_count = std::min<int>(count, vAddr.size());"
      },
      {
        "sha": "4efd3d42c42e3b3358be61971216d9b7a9e67406",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "patch": "@@ -104,8 +104,8 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     for (int i = 0; i < nScriptCheckThreads - 1; i++)\n         threadGroup.create_thread([i]() { return ThreadScriptCheck(i); });\n \n-    g_banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n-    g_connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n+    m_node.banman = MakeUnique<BanMan>(GetDataDir() / \"banlist.dat\", nullptr, DEFAULT_MISBEHAVING_BANTIME);\n+    m_node.connman = MakeUnique<CConnman>(0x1337, 0x1337); // Deterministic randomness for tests.\n }\n \n TestingSetup::~TestingSetup()\n@@ -114,8 +114,8 @@ TestingSetup::~TestingSetup()\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n-    g_connman.reset();\n-    g_banman.reset();\n+    m_node.connman.reset();\n+    m_node.banman.reset();\n     UnloadBlockIndex();\n     g_chainstate.reset();\n     pblocktree.reset();"
      }
    ]
  },
  {
    "sha": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNjJkZWQ0MTBiOGNiMTEwNGI3ZWYzMWZmODQ4OGZlYzQ4MjRhN2Q1",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-09-17T23:05:26Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2019-10-28T14:30:51Z"
      },
      "message": "Avoid using g_rpc_node global in wallet code\n\nWallet code should use interfaces::Chain and not directly access to node state.\n\nAdd a g_rpc_chain replacement global for wallet code to use, and move\ng_rpc_node definition to a libbitcoin_server source file so there are link\nerrors if wallet code tries to access it.",
      "tree": {
        "sha": "0ffc9c199a3b7adcb9957b19824bff8c0fe33bb0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0ffc9c199a3b7adcb9957b19824bff8c0fe33bb0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/362ded410b8cb1104b7ef31ff8488fec4824a7d5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/362ded410b8cb1104b7ef31ff8488fec4824a7d5/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8922d7f6b751a3e6b3b9f6fb7961c442877fb65a"
      }
    ],
    "stats": {
      "total": 40,
      "additions": 28,
      "deletions": 12
    },
    "files": [
      {
        "sha": "bdfb17801d3aaf3b1b74bb31370ed6c06d269bd4",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -489,7 +489,11 @@ class WalletClientImpl : public ChainClient\n         : m_chain(chain), m_wallet_filenames(std::move(wallet_filenames))\n     {\n     }\n-    void registerRpcs() override { return RegisterWalletRPCCommands(m_chain, m_rpc_handlers); }\n+    void registerRpcs() override\n+    {\n+        g_rpc_chain = &m_chain;\n+        return RegisterWalletRPCCommands(m_chain, m_rpc_handlers);\n+    }\n     bool verify() override { return VerifyWallets(m_chain, m_wallet_filenames); }\n     bool load() override { return LoadWallets(m_chain, m_wallet_filenames); }\n     void start(CScheduler& scheduler) override { return StartWallets(scheduler); }"
      },
      {
        "sha": "747113fbb418bab1c59e65e504f57c614a44a3dc",
        "filename": "src/rpc/blockchain.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/blockchain.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/blockchain.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -2289,3 +2289,5 @@ void RegisterBlockchainRPCCommands(CRPCTable &t)\n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n         t.appendCommand(commands[vcidx].name, &commands[vcidx]);\n }\n+\n+NodeContext* g_rpc_node = nullptr;"
      },
      {
        "sha": "8a1264f824dd76a85c0ec21deeb8c95f37c8fd11",
        "filename": "src/rpc/blockchain.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/blockchain.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/blockchain.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/blockchain.h?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -17,6 +17,7 @@ class CBlock;\n class CBlockIndex;\n class CTxMemPool;\n class UniValue;\n+struct NodeContext;\n \n static constexpr int NUM_GETBLOCKSTATS_PERCENTILES = 5;\n \n@@ -46,4 +47,9 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n+//! Pointer to node state that needs to be declared as a global to be accessible\n+//! RPC methods. Due to limitations of the RPC framework, there's currently no\n+//! direct way to pass in state to RPC methods without globals.\n+extern NodeContext* g_rpc_node;\n+\n #endif"
      },
      {
        "sha": "f443f37c6d1c4c1c571548d52a8a8de9d759566a",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -13,6 +13,7 @@\n #include <netbase.h>\n #include <node/context.h>\n #include <policy/settings.h>\n+#include <rpc/blockchain.h>\n #include <rpc/protocol.h>\n #include <rpc/util.h>\n #include <sync.h>"
      },
      {
        "sha": "5ce23226b74679db33957a28633c5665ffdaa53e",
        "filename": "src/rpc/rawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/rawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/rawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/rawtransaction.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -10,7 +10,6 @@\n #include <index/txindex.h>\n #include <key_io.h>\n #include <merkleblock.h>\n-#include <net.h>\n #include <node/coin.h>\n #include <node/context.h>\n #include <node/psbt.h>\n@@ -20,6 +19,7 @@\n #include <primitives/transaction.h>\n #include <psbt.h>\n #include <random.h>\n+#include <rpc/blockchain.h>\n #include <rpc/rawtransaction_util.h>\n #include <rpc/server.h>\n #include <rpc/util.h>"
      },
      {
        "sha": "653b287e97db11d6771e06403c3c8fcd453c813c",
        "filename": "src/rpc/util.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/util.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/util.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -13,8 +13,6 @@\n \n #include <tuple>\n \n-NodeContext* g_rpc_node = nullptr;\n-\n void RPCTypeCheck(const UniValue& params,\n                   const std::list<UniValueType>& typesExpected,\n                   bool fAllowNull)"
      },
      {
        "sha": "221638aa9e43739811b93cc1a86f4bd482ad8774",
        "filename": "src/rpc/util.h",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/util.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/rpc/util.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/util.h?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -25,12 +25,6 @@\n class FillableSigningProvider;\n class CPubKey;\n class CScript;\n-struct NodeContext;\n-\n-//! Pointers to interfaces that need to be accessible from RPC methods. Due to\n-//! limitations of the RPC framework, there's currently no direct way to pass in\n-//! state to RPC method implementations.\n-extern NodeContext* g_rpc_node;\n \n /** Wrapper for UniValue::VType, which includes typeAny:\n  * Used to denote don't care type. */"
      },
      {
        "sha": "89a19e172dcde94afcb0ef07197b1e5a5290b111",
        "filename": "src/test/setup_common.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/test/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/test/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/setup_common.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -15,6 +15,7 @@\n #include <net.h>\n #include <noui.h>\n #include <pow.h>\n+#include <rpc/blockchain.h>\n #include <rpc/register.h>\n #include <rpc/server.h>\n #include <script/sigcache.h>\n@@ -76,6 +77,7 @@ TestingSetup::TestingSetup(const std::string& chainName) : BasicTestingSetup(cha\n     const CChainParams& chainparams = Params();\n     // Ideally we'd move all the RPC tests to the functional testing framework\n     // instead of unit tests, but for now we need these here.\n+    g_rpc_node = &m_node;\n     RegisterAllCoreRPCCommands(tableRPC);\n \n     // We have to run a scheduler thread to prevent ActivateBestChain\n@@ -114,6 +116,7 @@ TestingSetup::~TestingSetup()\n     threadGroup.join_all();\n     GetMainSignals().FlushBackgroundCallbacks();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n+    g_rpc_node = nullptr;\n     m_node.connman.reset();\n     m_node.banman.reset();\n     UnloadBlockIndex();"
      },
      {
        "sha": "9050553a0e8dd801b3bc7fbebfdefdc16b43ef0f",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -2574,7 +2574,7 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::vector<std::string> warning;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_node->chain, location, error, warning);\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_chain, location, error, warning);\n     if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n \n     UniValue obj(UniValue::VOBJ);\n@@ -2700,7 +2700,7 @@ static UniValue createwallet(const JSONRPCRequest& request)\n \n     std::string error;\n     std::shared_ptr<CWallet> wallet;\n-    WalletCreationStatus status = CreateWallet(*g_rpc_node->chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n+    WalletCreationStatus status = CreateWallet(*g_rpc_chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n             throw JSONRPCError(RPC_WALLET_ERROR, error);\n@@ -4231,3 +4231,5 @@ void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique\n     for (unsigned int vcidx = 0; vcidx < ARRAYLEN(commands); vcidx++)\n         handlers.emplace_back(chain.handleRpc(commands[vcidx]));\n }\n+\n+interfaces::Chain* g_rpc_chain = nullptr;"
      },
      {
        "sha": "31d3f7a5f95c6c5cc0f89c9ce3e2afc9d5a534ab",
        "filename": "src/wallet/rpcwallet.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/wallet/rpcwallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/362ded410b8cb1104b7ef31ff8488fec4824a7d5/src/wallet/rpcwallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.h?ref=362ded410b8cb1104b7ef31ff8488fec4824a7d5",
        "patch": "@@ -21,6 +21,12 @@ class Chain;\n class Handler;\n }\n \n+//! Pointer to chain interface that needs to be declared as a global to be\n+//! accessible loadwallet and createwallet methods. Due to limitations of the\n+//! RPC framework, there's currently no direct way to pass in state to RPC\n+//! methods without globals.\n+extern interfaces::Chain* g_rpc_chain;\n+\n void RegisterWalletRPCCommands(interfaces::Chain& chain, std::vector<std::unique_ptr<interfaces::Handler>>& handlers);\n \n /**"
      }
    ]
  }
]