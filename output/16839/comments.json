[
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529676872",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529676872",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 529676872,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTY3Njg3Mg==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-09T21:36:18Z",
    "updated_at": "2019-09-09T21:36:29Z",
    "author_association": "CONTRIBUTOR",
    "body": "I'm looking for concept ACKS before detailed review at the moment. Since this a naming and refactoring change, it'd be great if people could take few minutes and skim the diff, and say whether the new code looks ugly or ok, and offer any suggestions. I'm happy to take suggestions and also split this up more.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529676872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529742058",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529742058",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 529742058,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTc0MjA1OA==",
    "user": {
      "login": "DrahtBot",
      "id": 39886733,
      "node_id": "MDQ6VXNlcjM5ODg2NzMz",
      "avatar_url": "https://avatars.githubusercontent.com/u/39886733?u=3c1e73d828cf5a5850dfc25c8397c1cf751db5ac&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/DrahtBot",
      "html_url": "https://github.com/DrahtBot",
      "followers_url": "https://api.github.com/users/DrahtBot/followers",
      "following_url": "https://api.github.com/users/DrahtBot/following{/other_user}",
      "gists_url": "https://api.github.com/users/DrahtBot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/DrahtBot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/DrahtBot/subscriptions",
      "organizations_url": "https://api.github.com/users/DrahtBot/orgs",
      "repos_url": "https://api.github.com/users/DrahtBot/repos",
      "events_url": "https://api.github.com/users/DrahtBot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/DrahtBot/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-10T02:30:31Z",
    "updated_at": "2019-10-30T09:00:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface and the wallet to have multiple by achow101)\n* [#17167](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17167.html) (Allow whitelisting outgoing connections by luke-jr)\n* [#16895](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16895.html) (External signer multisig support by Sjors)\n* [#16549](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16549.html) ([WIP] UI external signer support (e.g. hardware wallet) by Sjors)\n* [#16546](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16546.html) ([WIP] External signer support - Wallet Box edition by Sjors)\n* [#16528](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16528.html) ([WIP] Native Descriptor Wallets (take 2) by achow101)\n* [#16442](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16442.html) (Serve BIP 157 compact filters by jimpo)\n* [#16224](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16224.html) (gui: Bilingual GUI error messages by hebasto)\n* [#15454](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/15454.html) (Remove the automatic creation and loading of the default wallet by achow101)\n* [#12674](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/12674.html) (RPC: Support addnode onetry without making the connection priviliged by luke-jr)\n\nIf you consider this pull request important, please also help to review the conflicting pull requests. Ideally, start with the one that should be merged first.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529742058/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529884054",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529884054",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 529884054,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTg4NDA1NA==",
    "user": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?u=5ff13e375b40ea55ecd3c108337dd6a23f68eddf&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-10T11:00:45Z",
    "updated_at": "2019-09-10T11:00:45Z",
    "author_association": "CONTRIBUTOR",
    "body": "Concept ACK",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529884054/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529941376",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529941376",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 529941376,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUyOTk0MTM3Ng==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-10T13:43:23Z",
    "updated_at": "2019-09-10T13:43:23Z",
    "author_association": "MEMBER",
    "body": "> Getting rid of these globals has been talked about in past as a way\r\nto implement testing and simulations.\r\n\r\nFine with me, but this seems only like a first step, since other globals such as `::mempool` are still global. and not members of the Node class.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/529941376/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530475920",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530475920",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 530475920,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDQ3NTkyMA==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-11T17:12:41Z",
    "updated_at": "2019-09-11T17:12:41Z",
    "author_association": "MEMBER",
    "body": "Concept ACK. This looks like a step in the right direction in terms of cutting down on globals and moving towards being able to test multi-node behavior without having to rely on the functional tests.\r\n\r\nIs your intent to split this into separate commits at some point for detailed review?",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530475920/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530484930",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530484930",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 530484930,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDQ4NDkzMA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-11T17:34:50Z",
    "updated_at": "2019-09-11T17:34:50Z",
    "author_association": "CONTRIBUTOR",
    "body": "> Is your intent to split this into separate commits at some point for detailed review?\r\n\r\nCould go either way. These are basically boring text replacements that should be about as much effort to review split up or joined, but I'm happy to split it up. I think I could split it up into 4 or 5 commits roughly matching the bullet points in the description. Overall diff would be a little bigger because some lines (`chain_clients` lines) would change more than once.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530484930/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530486636",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530486636",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 530486636,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMDQ4NjYzNg==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-11T17:38:51Z",
    "updated_at": "2019-09-11T17:38:51Z",
    "author_association": "MEMBER",
    "body": "> Could go either way.\r\n\r\nI'm fine reviewing either, though I guess if it were easy to do some scripted-diffs that would be nice.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/530486636/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532732758",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-532732758",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 532732758,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMjczMjc1OA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-18T15:17:26Z",
    "updated_at": "2019-09-18T15:17:26Z",
    "author_association": "CONTRIBUTOR",
    "body": "Could remove the \"Needs conceptual review\" tag, I think, since this has had a few concept ACKS.\r\n\r\nI updated this to drop the last commit 7b65a5356ea107af345b980a53e7e2d669711461, which turned out not to be very related to the other changes, and just complicated the PR\r\n\r\nUpdated 7b65a5356ea107af345b980a53e7e2d669711461 -> 437a5e439fff50567503c0d76baaba50ebbfbd8f ([pr/noglob.6](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.6) -> [pr/noglob.7](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.7), [compare](https://github.com/ryanofsky/bitcoin/compare/pr/noglob.6..pr/noglob.7)) dropping the last commit\r\nRebased 437a5e439fff50567503c0d76baaba50ebbfbd8f -> 396544eb9e7bfbcf41ef7f541b10ffd004603b5b ([pr/noglob.7](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.7) -> [pr/noglob.8](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.8)) due to minor #include line conflict with #16512",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/532732758/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533612747",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-533612747",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 533612747,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzMzYxMjc0Nw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-20T15:57:36Z",
    "updated_at": "2019-09-20T15:57:36Z",
    "author_association": "CONTRIBUTOR",
    "body": "FYI maintainers, \"Needs conceptual review\" label was removed but this is still showing up in the \"Chasing Concept ACK\" column from https://github.com/bitcoin/bitcoin/projects/8.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/533612747/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534695108",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-534695108",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 534695108,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDY5NTEwOA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T18:44:08Z",
    "updated_at": "2019-09-24T18:44:08Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased dab8d3e2c9cd9bfc92a4520edf6bf3374a9fe4f5 -> ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d ([pr/noglob.9](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.9) -> [pr/noglob.10](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.10)) due to conflict with #16912\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534695108/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534744086",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-534744086",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 534744086,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNDc0NDA4Ng==",
    "user": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-09-24T20:55:09Z",
    "updated_at": "2019-09-24T20:55:09Z",
    "author_association": "MEMBER",
    "body": "ACK https://github.com/bitcoin/bitcoin/pull/16839/commits/ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d\r\n\r\nRead through the code partially locally (to verify move-onlys) and on Github. Seems pretty uncontroversial and nicely split into scripted-diffs. I can do some manual testing tomorrow if need be. This `Node` object has a lot of promise for testing instead of having to push around globals.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/534744086/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537513014",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-537513014",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 537513014,
    "node_id": "MDEyOklzc3VlQ29tbWVudDUzNzUxMzAxNA==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-02T14:15:51Z",
    "updated_at": "2019-10-02T14:15:51Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d -> 50e0bb2df33cc47be10cf8e26ea7d9ce1d2e9704 ([pr/noglob.10](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.10) -> [pr/noglob.11](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.11)) due to minor conflict (in qt test comment) with #17015",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/537513014/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547002922",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547002922",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 547002922,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzAwMjkyMg==",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?u=0691974eedcc2ab5366cc1080fb1c030e87244c2&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T15:32:03Z",
    "updated_at": "2019-10-28T15:32:03Z",
    "author_association": "MEMBER",
    "body": "Looks ready for merge after rebase",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547002922/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547196883",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547196883",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 547196883,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0NzE5Njg4Mw==",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-28T23:58:10Z",
    "updated_at": "2019-10-28T23:58:10Z",
    "author_association": "CONTRIBUTOR",
    "body": "Rebased 34a7a50dbeec1ee36b18fa0d1a0ffbf7a1907f98 -> 362ded410b8cb1104b7ef31ff8488fec4824a7d5 ([pr/noglob.15](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.15) -> [pr/noglob.16](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.16)) due to conflict with #16202\r\n\r\nAlso renamed `struct Node` to `struct NodeContext`, since it should also be useful to have a `WalletContext` later to put things like `cs_wallets`, `vpwallets`, and the `interfaces::Chain` pointer shared between multiple wallets.",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547196883/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547857221",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547857221",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 547857221,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0Nzg1NzIyMQ==",
    "user": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?u=13b19d1ff2f5f914e180c41418f451a4ba6f8bd1&v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-10-30T11:29:47Z",
    "updated_at": "2019-10-30T11:29:47Z",
    "author_association": "MEMBER",
    "body": "ACK 362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/547857221/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549006323",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-549006323",
    "issue_url": "https://api.github.com/repos/bitcoin/bitcoin/issues/16839",
    "id": 549006323,
    "node_id": "MDEyOklzc3VlQ29tbWVudDU0OTAwNjMyMw==",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "created_at": "2019-11-02T03:30:58Z",
    "updated_at": "2019-11-02T03:30:58Z",
    "author_association": "MEMBER",
    "body": "Post-humous ACK, diff from 50e0bb2 is renaming `struct Node`, integration of bip61 removal and some comments changed.\r\n\r\n> I wonder if renaming interfaces::Chain to ChainInterface would make it clearer that this class is an external interface used outside the node (by the wallet) to access chain state and not something that has to do with implementing node functionality or storing node data.\r\n\r\nAgree may have avoid us confusion [there](https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941).\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/issues/comments/549006323/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "performed_via_github_app": null
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322503490",
    "pull_request_review_id": 285845672,
    "id": 322503490,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjUwMzQ5MA==",
    "diff_hunk": "@@ -375,9 +377,16 @@ class ChainImpl : public Chain\n             notifications.TransactionAddedToMempool(entry.GetSharedTx());\n         }\n     }\n+    std::unique_ptr<Handler> addClient(ChainClient& client) override\n+    {\n+        ChainClients& clients = m_node.chain_clients;\n+        ChainClients::iterator it = clients.emplace(clients.end(), client);\n+        return MakeHandler([&clients, it] { clients.erase(it); });",
    "path": "src/interfaces/chain.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "124bbcabe314c2e4a48ad61a69c03ee55e633e37",
    "user": {
      "login": "promag",
      "id": 3534524,
      "node_id": "MDQ6VXNlcjM1MzQ1MjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3534524?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/promag",
      "html_url": "https://github.com/promag",
      "followers_url": "https://api.github.com/users/promag/followers",
      "following_url": "https://api.github.com/users/promag/following{/other_user}",
      "gists_url": "https://api.github.com/users/promag/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/promag/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/promag/subscriptions",
      "organizations_url": "https://api.github.com/users/promag/orgs",
      "repos_url": "https://api.github.com/users/promag/repos",
      "events_url": "https://api.github.com/users/promag/events{/privacy}",
      "received_events_url": "https://api.github.com/users/promag/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Is it better to capture member `chain_clients` than `this`?\r\n\r\nAlso, it would be nice to explain that a `std::list` is used otherwise this `.erase` would fail.",
    "created_at": "2019-09-10T00:03:16Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322503490",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322503490"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322503490"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322503490/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 387,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322812671",
    "pull_request_review_id": 286233538,
    "id": 322812671,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyMjgxMjY3MQ==",
    "diff_hunk": "@@ -375,9 +377,16 @@ class ChainImpl : public Chain\n             notifications.TransactionAddedToMempool(entry.GetSharedTx());\n         }\n     }\n+    std::unique_ptr<Handler> addClient(ChainClient& client) override\n+    {\n+        ChainClients& clients = m_node.chain_clients;\n+        ChainClients::iterator it = clients.emplace(clients.end(), client);\n+        return MakeHandler([&clients, it] { clients.erase(it); });",
    "path": "src/interfaces/chain.cpp",
    "position": null,
    "original_position": 33,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "124bbcabe314c2e4a48ad61a69c03ee55e633e37",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Is it better to capture member `chain_clients` than `this`?\r\n\r\nI think a good starting point is to just capture what's needed without unused data or object references. But in this case, capturing `this` instead of `&clients` is worse because in addition to capturing unneeded data, it requires the `Handler` object to be destroyed before the `Chain` object, and there's no reason to create that kind of error-prone dependency.\r\n\r\n> Also, it would be nice to explain that a `std::list` is used otherwise this `.erase` would fail.\r\n\r\nSure, added comment.",
    "created_at": "2019-09-10T15:28:41Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322812671",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322812671"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322812671"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/322812671/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 387,
    "side": "RIGHT",
    "in_reply_to_id": 322503490
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425666",
    "pull_request_review_id": 288322544,
    "id": 324425666,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQyNTY2Ng==",
    "diff_hunk": "@@ -254,6 +255,10 @@ class Node\n     using NotifyHeaderTipFn =\n         std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n+\n+    //! Return pointer to internal chain interface, useful for testing.\n+    //! Only works if node interface is being called in same process as implementation.",
    "path": "src/interfaces/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I find comment fuzzy, do you mean only works if node interface is set by the process of the implementation ?",
    "created_at": "2019-09-14T14:10:34Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425666",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425666"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425666"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425666/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 260,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425872",
    "pull_request_review_id": 288322544,
    "id": 324425872,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQyNTg3Mg==",
    "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_NODE_H\n+#define BITCOIN_NODE_NODE_H\n+\n+#include <list>\n+#include <memory>\n+\n+class BanMan;\n+class CConnman;\n+class PeerLogicValidation;\n+namespace interfaces {\n+class Chain;\n+class ChainClient;\n+} // namespace interfaces\n+using ChainClients = std::list<std::reference_wrapper<interfaces::ChainClient>>;\n+\n+//! Node struct containing chain state and connection state.\n+//!\n+//! More state could be moved into this struct to eliminate global variables,\n+//! and allow creating multiple instances of validation and networking objects",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 23,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "So you would create multiple Node in one test process, connect them and let them talk maybe with random introduction of interferences in-between ?",
    "created_at": "2019-09-14T14:18:40Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425872",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425872"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425872"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425872/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425941",
    "pull_request_review_id": 288322544,
    "id": 324425941,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQyNTk0MQ==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Couldn't BroadcastTransaction be directly a method of Node instead of passing CConnman ? Maybe sendrawtransaction should be given g_rpc_chain instead of g_rpc_node, overall it's seems to use the chain as a server too",
    "created_at": "2019-09-14T14:21:35Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425941"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324425941/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426030",
    "pull_request_review_id": 288322544,
    "id": 324426030,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQyNjAzMA==",
    "diff_hunk": "@@ -46,4 +47,9 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n+//! Pointer to node state that needs to be declared as a global to be accessible\n+//! RPC methods. Due to limitations of the RPC framework, there's currently no",
    "path": "src/rpc/blockchain.h",
    "position": 13,
    "original_position": 13,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "How to override RPC framework limitations ? Encapsulating RPC functions in its own structure like it has been done for the P2P stack with CConnman ?",
    "created_at": "2019-09-14T14:25:06Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426030",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426030"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426030"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426030/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426272",
    "pull_request_review_id": 288322544,
    "id": 324426272,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNDQyNjI3Mg==",
    "diff_hunk": "@@ -424,10 +425,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)",
    "path": "src/rpc/mining.cpp",
    "position": 13,
    "original_position": 13,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "IMO not sure why getblocktemplate need to access state of P2P stack ? I would guess the functionality would be useless without a mempool to populate the template and being connected increase the likeliness of a fresh mempool but I could also provide mempool.dat to my node...\r\nIf you remove it, you can also move g_rpc_node declaration in src/rpc/net.h.",
    "created_at": "2019-09-14T14:32:27Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426272",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426272"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426272"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/324426272/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 428,
    "original_line": 428,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429034",
    "pull_request_review_id": 289603288,
    "id": 325429034,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQyOTAzNA==",
    "diff_hunk": "@@ -254,6 +255,10 @@ class Node\n     using NotifyHeaderTipFn =\n         std::function<void(bool initial_download, int height, int64_t block_time, double verification_progress)>;\n     virtual std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) = 0;\n+\n+    //! Return pointer to internal chain interface, useful for testing.\n+    //! Only works if node interface is being called in same process as implementation.",
    "path": "src/interfaces/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425666\r\n\r\n> I find comment fuzzy, do you mean only works if node interface is set by the process of the implementation ?\r\n\r\nSorry, this was pretty confusing. Better not to refer to processes in comments before #10102, so I removed this. But to answer the question: this always returns non-null currently and after #10102 will return null if the node is a remote process.",
    "created_at": "2019-09-17T23:36:46Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429034",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429034"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429034"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429034/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 260,
    "side": "RIGHT",
    "in_reply_to_id": 324425666
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429061",
    "pull_request_review_id": 289603288,
    "id": 325429061,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQyOTA2MQ==",
    "diff_hunk": "@@ -0,0 +1,41 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NODE_NODE_H\n+#define BITCOIN_NODE_NODE_H\n+\n+#include <list>\n+#include <memory>\n+\n+class BanMan;\n+class CConnman;\n+class PeerLogicValidation;\n+namespace interfaces {\n+class Chain;\n+class ChainClient;\n+} // namespace interfaces\n+using ChainClients = std::list<std::reference_wrapper<interfaces::ChainClient>>;\n+\n+//! Node struct containing chain state and connection state.\n+//!\n+//! More state could be moved into this struct to eliminate global variables,\n+//! and allow creating multiple instances of validation and networking objects",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 23,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425872\r\n\r\n> So you would create multiple Node in one test process, connect them and let them talk maybe with random introduction of interferences in-between ?\r\n\r\nWith caveats, yes, since code that isn't referring to global variables can be instantiated multiple times for testing in a single process.\r\n",
    "created_at": "2019-09-17T23:36:53Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429061",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429061"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429061"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429061/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 22,
    "side": "RIGHT",
    "in_reply_to_id": 324425872
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429093",
    "pull_request_review_id": 289603288,
    "id": 325429093,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQyOTA5Mw==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941\r\n\r\n> Couldn't BroadcastTransaction be directly a method of Node instead of passing CConnman ?\r\n\r\nYes, but I don't think that would be a good idea. I think interface classes should be a thin layer on top of wallet and node code and not a place where real functionality is implemented. The model is:\r\n\r\n[![interfaces](https://user-images.githubusercontent.com/7133040/65087741-da20bd80-d984-11e9-82dd-f32be1a8b5db.png)](https://docs.google.com/drawings/d/1L1RWM7_QJS0X0f1YtORf_WiBORQz5B9znX2n5sk7ywM/edit)\r\n\r\n> Maybe sendrawtransaction should be given g_rpc_chain instead of g_rpc_node, overall it's seems to use the chain as a server too\r\n\r\nThe `Chain` interface is meant to be used by non-node code to get limited access to chain state. It's not really meant to be used by code inside the node to access its own state. Using direct access to node state some places and indirect access other places I think would just make the code more confusing and inconsistent.\r\n\r\nAlso using `g_rpc_chain` inside the node would lead to a link error with `--disable-wallet` since `g_rpc_chain` is a wallet variable defined and used in `rpcwallet.cpp`.",
    "created_at": "2019-09-17T23:37:02Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429093",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429093"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429093"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429093/reactions",
      "total_count": 1,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 1
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 324425941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429114",
    "pull_request_review_id": 289603288,
    "id": 325429114,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQyOTExNA==",
    "diff_hunk": "@@ -46,4 +47,9 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n+//! Pointer to node state that needs to be declared as a global to be accessible\n+//! RPC methods. Due to limitations of the RPC framework, there's currently no",
    "path": "src/rpc/blockchain.h",
    "position": 13,
    "original_position": 13,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426030\r\n\r\n> How to override RPC framework limitations ? Encapsulating RPC functions in its own structure like it has been done for the P2P stack with CConnman ?\r\n\r\nYes, that's one way. Another option would be to add a `std::any` member to the `JSONRPCRequest` struct, so arbitrary context could be passed into RPC methods in a type-safe way.",
    "created_at": "2019-09-17T23:37:10Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429114",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429114"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429114"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429114/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 51,
    "original_line": 51,
    "side": "RIGHT",
    "in_reply_to_id": 324426030
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429133",
    "pull_request_review_id": 289603288,
    "id": 325429133,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTQyOTEzMw==",
    "diff_hunk": "@@ -424,10 +425,10 @@ static UniValue getblocktemplate(const JSONRPCRequest& request)\n     if (strMode != \"template\")\n         throw JSONRPCError(RPC_INVALID_PARAMETER, \"Invalid mode\");\n \n-    if(!g_connman)\n+    if(!g_rpc_node->connman)",
    "path": "src/rpc/mining.cpp",
    "position": 13,
    "original_position": 13,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426272\r\n\r\n> IMO not sure why getblocktemplate need to access state of P2P stack ? I would guess the functionality would be useless without a mempool to populate the template and being connected increase the likeliness of a fresh mempool but I could also provide mempool.dat to my node...\r\n> If you remove it, you can also move g_rpc_node declaration in src/rpc/net.h.\r\n\r\nI think you're right, and these checks probably don't accomplish much, though maybe they are useful as precautions. But I think if we were going to change this behavior, it'd make more sense in a standalone PR.",
    "created_at": "2019-09-17T23:37:18Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429133",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429133"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429133"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325429133/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": 428,
    "original_line": 428,
    "side": "RIGHT",
    "in_reply_to_id": 324426272
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325824032",
    "pull_request_review_id": 290111966,
    "id": 325824032,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgyNDAzMg==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "> Yes, but I don't think that would be a good idea. I think interface classes should be a thin layer on top of wallet and node code and not a place where real functionality is implemented. The model is:\r\n\r\nI don't understand this answer. `src/node/transaction.cpp` is \"node code\" as I understand it and not merely some interface. All the other global state accessed in this function (chainstate, mempool) should eventually be a node member. So the suggestion by @ariard to make this a node member function makes sense to me.",
    "created_at": "2019-09-18T18:19:18Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325824032",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325824032"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325824032"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325824032/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 324425941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325825265",
    "pull_request_review_id": 290113540,
    "id": 325825265,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgyNTI2NQ==",
    "diff_hunk": "@@ -20,6 +23,9 @@ class ChainClient;\n //! and linking outside of bitcoind for simulation or testing.\n struct Node\n {\n+    std::unique_ptr<CConnman> connman;",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "2181a55c622d202737652a467578fcc80963e788",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I think we should be using `struct` only for the dumbest data structures and not complex classes (such as the node). So this should be changed to `m_connman`",
    "created_at": "2019-09-18T18:22:02Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325825265",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325825265"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325825265"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325825265/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829127",
    "pull_request_review_id": 290118545,
    "id": 325829127,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgyOTEyNw==",
    "diff_hunk": "@@ -20,6 +23,9 @@ class ChainClient;\n //! and linking outside of bitcoind for simulation or testing.\n struct Node\n {\n+    std::unique_ptr<CConnman> connman;",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "2181a55c622d202737652a467578fcc80963e788",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325825265\r\n\r\n> I think we should be using `struct` only for the dumbest data structures and not complex classes (such as the node). So this should be changed to `m_connman`\r\n\r\nThis is definitely supposed to be a dumb structure that doesn't have any methods or contain any functionality. The only code that should need to access multiple members of this struct are init code, rpc code, and test code, and this struct is supposed to be a way of passing references around without needing to use globals or declare the same variables and parameters over and over. It's not intended to be a wrapper class, or a new layer of code, or a grab-bag of random functionality.",
    "created_at": "2019-09-18T18:30:37Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829127",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829127"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829127"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829127/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 325825265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829261",
    "pull_request_review_id": 290118545,
    "id": 325829261,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTgyOTI2MQ==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325824032\r\n\r\n> I don't understand this answer. `src/node/transaction.cpp` is \"node code\" as I understand it and not merely some interface. All the other global state accessed in this function (chainstate, mempool) should eventually be a node member. So the suggestion by @ariard to make this a node member function makes sense to me.\r\n\r\nI don't think any code that isn't broadcasting transactions should need to see or #include the BroadcastTransaction function declaration. But I'm not sure in general what benefits you and Antoine see in the suggestion, so maybe you could clarify. To me it just looks like making code more monolithic, less separable, and harder to use and test, like asking for main.cpp again.",
    "created_at": "2019-09-18T18:30:56Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829261",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829261"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829261"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325829261/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 324425941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325845401",
    "pull_request_review_id": 290139594,
    "id": 325845401,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTg0NTQwMQ==",
    "diff_hunk": "@@ -20,6 +23,9 @@ class ChainClient;\n //! and linking outside of bitcoind for simulation or testing.\n struct Node\n {\n+    std::unique_ptr<CConnman> connman;",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "2181a55c622d202737652a467578fcc80963e788",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for clarifying. Could add that sentence to the doxygen comment of `Node` for people like me?",
    "created_at": "2019-09-18T19:08:10Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325845401",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325845401"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325845401"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325845401/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 325825265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325846705",
    "pull_request_review_id": 290141360,
    "id": 325846705,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTg0NjcwNQ==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "396544eb9e7bfbcf41ef7f541b10ffd004603b5b",
    "user": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "I guess I'd prefer to pass in the node here, so that in the future when mempool and chainstate are members of the node struct, this doesn't need to change again.\r\n\r\n```suggestion\r\nTransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, Node& node)\r\n```",
    "created_at": "2019-09-18T19:11:26Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325846705",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325846705"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325846705"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325846705/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866198",
    "pull_request_review_id": 290166971,
    "id": 325866198,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTg2NjE5OA==",
    "diff_hunk": "@@ -20,6 +23,9 @@ class ChainClient;\n //! and linking outside of bitcoind for simulation or testing.\n struct Node\n {\n+    std::unique_ptr<CConnman> connman;",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "2181a55c622d202737652a467578fcc80963e788",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325845401\r\n\r\n> Thanks for clarifying. Could add that sentence to the doxygen comment of `Node` for people like me?\r\n\r\nSorry, existing comment was kind of a placeholder that didn't explain things well. I rewrote it to hopefully be more helpful.\r\n\r\n",
    "created_at": "2019-09-18T20:01:43Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866198",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866198"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866198"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866198/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 30,
    "side": "RIGHT",
    "in_reply_to_id": 325825265
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866327",
    "pull_request_review_id": 290166971,
    "id": 325866327,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTg2NjMyNw==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325846705\r\n\r\n> I guess I'd prefer to pass in the node here, so that in the future when mempool and chainstate are members of the node struct, this doesn't need to change again.\r\n\r\nSure, I made the suggested change. I do think in the future it would be better if a function like `BroadcastTransaction` took separate `CChainState&` and `CConnman*` arguments, (especially since the `CConnman*` argument could be optional and replace the `bool relay` argument). Passing separate arguments would make the function easier to call without needing to fill a struct, and without giving it access to unneed state. But using `Node&` does have a temporary advantage of avoiding the need to update every caller when the implementation changes, so it's a reasonable suggestion.",
    "created_at": "2019-09-18T20:02:03Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866327",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866327"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866327"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325866327/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 324425941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325949405",
    "pull_request_review_id": 290272763,
    "id": 325949405,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMyNTk0OTQwNQ==",
    "diff_hunk": "@@ -14,12 +14,12 @@\n \n #include <future>\n \n-TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback)\n+TransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, CConnman* connman)",
    "path": "src/node/transaction.cpp",
    "position": null,
    "original_position": 5,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "a3dc53304a4ccd0996e51322bee40572b5af7d25",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks got your point. Was doing far out-of-scope thinking, `sendrawtransaction` to your local node isn't great for privacy, it could be a binary to connect to any node to broadcast instead of a RPC call. But yes, in that case it wouldn't even use any interface..",
    "created_at": "2019-09-19T00:42:44Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325949405",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325949405"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325949405"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/325949405/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 17,
    "side": "RIGHT",
    "in_reply_to_id": 324425941
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332683253",
    "pull_request_review_id": 298984878,
    "id": 332683253,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjY4MzI1Mw==",
    "diff_hunk": "@@ -259,12 +259,12 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_node.chain, name, error, warning));\n     }\n     WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_node.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);",
    "path": "src/interfaces/node.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "21185e296acdf716a2f8a3beeac8efddee639f3e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Do `Node` really need a reference to `Chain`, `ChainImpl` has already a reference to `Node` that's a bit confusing ? I mean `createWallet` and `loadWallet` couldn't be method of `Wallet` interface instead ? Would it work for the GUI ?\r\n\r\nMore generally, if we refactor RPC code to encapsulate in a `RPCServer` class, I see a `WalletRPC` subclass with a `Chain` member and a `NodeRPC` subclass with a `Node` member. And `Node` maybe initialize differently to avoid access to uneeded state which would address some concerns of https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866327",
    "created_at": "2019-10-08T19:07:10Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332683253",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332683253"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332683253"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332683253/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332686179",
    "pull_request_review_id": 298984878,
    "id": 332686179,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjY4NjE3OQ==",
    "diff_hunk": "@@ -46,4 +47,9 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n+//! Pointer to node state that needs to be declared as a global to be accessible\n+//! RPC methods. Due to limitations of the RPC framework, there's currently no\n+//! direct way to pass in state to RPC methods without globals.\n+extern Node* g_rpc_node;",
    "path": "src/rpc/blockchain.h",
    "position": null,
    "original_position": 15,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "50e0bb2df33cc47be10cf8e26ea7d9ce1d2e9704",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: Wouldn't shock me to move it to a new src/rpc/node.h libbitcoin_server source file but maybe too early",
    "created_at": "2019-10-08T19:13:55Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332686179",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332686179"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332686179"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332686179/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 53,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332689002",
    "pull_request_review_id": 298984878,
    "id": 332689002,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjY4OTAwMg==",
    "diff_hunk": "@@ -13,11 +13,25 @@ class Chain;\n class ChainClient;\n } // namespace interfaces\n \n-//! Pointers to interfaces used during init and destroyed on shutdown.\n+//! Node struct containing references to chain state and connection state.\n+//!\n+//! This is used by init, rpc, and test code to pass object references around\n+//! without needing to declare the same variables and parameters repeatedly, or\n+//! to use globals. More variables could be added to this struct (particularly\n+//! references to validation and mempool objects) to eliminate use of globals\n+//! and make code more modular and testable. The struct isn't intended to have\n+//! any member functions. It should just be a collection of references that can\n+//! be used without pulling in unwanted dependencies or functionality.\n struct Node",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "18d8ee1bdcad0a0c75a1d6914d97ea0fa150e1b5",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "nit: maybe it should be name NodeState to avoid confusion with `Node` the already-there interface class?",
    "created_at": "2019-10-08T19:20:46Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332689002",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332689002"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332689002"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332689002/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT"
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754809",
    "pull_request_review_id": 299077402,
    "id": 332754809,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjc1NDgwOQ==",
    "diff_hunk": "@@ -259,12 +259,12 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_node.chain, name, error, warning));\n     }\n     WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_node.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);",
    "path": "src/interfaces/node.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "21185e296acdf716a2f8a3beeac8efddee639f3e",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332683253\r\n\r\n> Do `Node` really need a reference to `Chain`, `ChainImpl` has already a reference to `Node` that's a bit confusing ?\r\n\r\nI'm not sure what the problem might be here. One object owns the other and the owned object contains a back reference. The ChainImpl back reference to the Node struct can go away with some cleanups to initialization order (creating objects _after_ the objects they depend on rather than before), but I didn't want to try to change initialization order in this PR (it's especially messy in the GUI and tests, see #16294).\r\n\r\n> I mean `createWallet` and `loadWallet` couldn't be method of `Wallet` interface instead ? Would it work for the GUI ?\r\n\r\nSort of. `interfaces::Wallet` is the interface used to control an individual wallet, so it isn't where I would put methods to load and create unrelated wallets. But #10102 adds a  factory interface `interfaces::Init` which could be a logical place to move these methods.\r\n\r\n> More generally, if we refactor RPC code to encapsulate in a `RPCServer` class, I see a `WalletRPC` subclass with a `Chain` member and a `NodeRPC` subclass with a `Node` member.\r\n\r\nSure, I wouldn't push to change the RPC framework in this way without knowing what the goals were, but I think this would be a reasonable design.",
    "created_at": "2019-10-08T22:07:19Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754809",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754809"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754809"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754809/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 332683253
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754875",
    "pull_request_review_id": 299077402,
    "id": 332754875,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjc1NDg3NQ==",
    "diff_hunk": "@@ -13,11 +13,25 @@ class Chain;\n class ChainClient;\n } // namespace interfaces\n \n-//! Pointers to interfaces used during init and destroyed on shutdown.\n+//! Node struct containing references to chain state and connection state.\n+//!\n+//! This is used by init, rpc, and test code to pass object references around\n+//! without needing to declare the same variables and parameters repeatedly, or\n+//! to use globals. More variables could be added to this struct (particularly\n+//! references to validation and mempool objects) to eliminate use of globals\n+//! and make code more modular and testable. The struct isn't intended to have\n+//! any member functions. It should just be a collection of references that can\n+//! be used without pulling in unwanted dependencies or functionality.\n struct Node",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "18d8ee1bdcad0a0c75a1d6914d97ea0fa150e1b5",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332689002\r\n\r\n> nit: maybe it should be name NodeState to avoid confusion with `Node` the already-there interface class?\r\n\r\nI think it'd be better to rename `interfaces::Node` to `NodeInterface` if the point is to distinguish between the internal struct and the external interface. I guess I have some aversion to adding suffixes like `Info` `Data` `State` to type names because you could add those suffixes to pretty much any type name just making it more verbose without changing the meaning.\r\n\r\nAlso, in practice, I think there shouldn't be ambiguity in the code because `interfaces::Node` is only used by GUI code to control the node from the outside, not something used inside the node.",
    "created_at": "2019-10-08T22:07:30Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754875",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754875"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754875"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754875/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 332689002
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754964",
    "pull_request_review_id": 299077402,
    "id": 332754964,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDMzMjc1NDk2NA==",
    "diff_hunk": "@@ -46,4 +47,9 @@ UniValue blockheaderToJSON(const CBlockIndex* tip, const CBlockIndex* blockindex\n /** Used by getblockstats to get feerates at different percentiles by weight  */\n void CalculatePercentilesByWeight(CAmount result[NUM_GETBLOCKSTATS_PERCENTILES], std::vector<std::pair<CAmount, int64_t>>& scores, int64_t total_weight);\n \n+//! Pointer to node state that needs to be declared as a global to be accessible\n+//! RPC methods. Due to limitations of the RPC framework, there's currently no\n+//! direct way to pass in state to RPC methods without globals.\n+extern Node* g_rpc_node;",
    "path": "src/rpc/blockchain.h",
    "position": null,
    "original_position": 15,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "50e0bb2df33cc47be10cf8e26ea7d9ce1d2e9704",
    "user": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332686179\r\n\r\n> nit: Wouldn't shock me to move it to a new src/rpc/node.h libbitcoin_server source file but maybe too early\r\n\r\nYes, though more ideally instead of more node files in the rpc directory, I'd like rpc files in the node directory, so generic rpc code would be distinct and easier to reuse from the wallet. Along the lines of #15732, I could see:\r\n\r\nsrc/rpc/server.h, etc - rpc server implementation in libbitcoin_common.a\r\nsrc/node/rpc.h, rpc.cpp - node rpc methods in libbitcoin_node.a\r\nsrc/wallet/rpc.h, rpc.cpp - wallet rpc methods in libbitcoin_wallet.a",
    "created_at": "2019-10-08T22:07:47Z",
    "updated_at": "2019-10-28T18:47:52Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754964",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "CONTRIBUTOR",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754964"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754964"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/332754964/reactions",
      "total_count": 1,
      "+1": 1,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 53,
    "side": "RIGHT",
    "in_reply_to_id": 332686179
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797308",
    "pull_request_review_id": 310753725,
    "id": 341797308,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTc5NzMwOA==",
    "diff_hunk": "@@ -259,12 +259,12 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::string& warning) override\n     {\n-        return MakeWallet(LoadWallet(*m_interfaces.chain, name, error, warning));\n+        return MakeWallet(LoadWallet(*m_node.chain, name, error, warning));\n     }\n     WalletCreationStatus createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::string& warning, std::unique_ptr<Wallet>& result) override\n     {\n         std::shared_ptr<CWallet> wallet;\n-        WalletCreationStatus status = CreateWallet(*m_interfaces.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);\n+        WalletCreationStatus status = CreateWallet(*m_node.chain, passphrase, wallet_creation_flags, name, error, warning, wallet);",
    "path": "src/interfaces/node.cpp",
    "position": null,
    "original_position": 34,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "21185e296acdf716a2f8a3beeac8efddee639f3e",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": "Thanks for answers (sorry for delay), wasn't implying to do changes in this PR. Apart of RPC framework which need design goals, I think other one would make code nicer in future PRs, bookmarked.",
    "created_at": "2019-11-02T03:21:35Z",
    "updated_at": "2019-11-02T03:21:35Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797308",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797308"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797308"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797308/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 267,
    "side": "RIGHT",
    "in_reply_to_id": 332683253
  },
  {
    "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797420",
    "pull_request_review_id": 310753870,
    "id": 341797420,
    "node_id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM0MTc5NzQyMA==",
    "diff_hunk": "@@ -13,11 +13,25 @@ class Chain;\n class ChainClient;\n } // namespace interfaces\n \n-//! Pointers to interfaces used during init and destroyed on shutdown.\n+//! Node struct containing references to chain state and connection state.\n+//!\n+//! This is used by init, rpc, and test code to pass object references around\n+//! without needing to declare the same variables and parameters repeatedly, or\n+//! to use globals. More variables could be added to this struct (particularly\n+//! references to validation and mempool objects) to eliminate use of globals\n+//! and make code more modular and testable. The struct isn't intended to have\n+//! any member functions. It should just be a collection of references that can\n+//! be used without pulling in unwanted dependencies or functionality.\n struct Node",
    "path": "src/node/node.h",
    "position": null,
    "original_position": 14,
    "commit_id": "362ded410b8cb1104b7ef31ff8488fec4824a7d5",
    "original_commit_id": "18d8ee1bdcad0a0c75a1d6914d97ea0fa150e1b5",
    "user": {
      "login": "ariard",
      "id": 23310655,
      "node_id": "MDQ6VXNlcjIzMzEwNjU1",
      "avatar_url": "https://avatars.githubusercontent.com/u/23310655?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ariard",
      "html_url": "https://github.com/ariard",
      "followers_url": "https://api.github.com/users/ariard/followers",
      "following_url": "https://api.github.com/users/ariard/following{/other_user}",
      "gists_url": "https://api.github.com/users/ariard/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ariard/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ariard/subscriptions",
      "organizations_url": "https://api.github.com/users/ariard/orgs",
      "repos_url": "https://api.github.com/users/ariard/repos",
      "events_url": "https://api.github.com/users/ariard/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ariard/received_events",
      "type": "User",
      "site_admin": false
    },
    "body": ">  I guess I have some aversion to adding suffixes like Info Data State to type names because you could add those suffixes to pretty much any type name just making it more verbose without changing the meaning.\r\n\r\nAh, you're right but most of the times it's the cheapest way to avoid name collisions!\r\n\r\n+1 for `NodeInterface` if we have opportunity later",
    "created_at": "2019-11-02T03:26:15Z",
    "updated_at": "2019-11-02T03:26:15Z",
    "html_url": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797420",
    "pull_request_url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839",
    "author_association": "MEMBER",
    "_links": {
      "self": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797420"
      },
      "html": {
        "href": "https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797420"
      },
      "pull_request": {
        "href": "https://api.github.com/repos/bitcoin/bitcoin/pulls/16839"
      }
    },
    "reactions": {
      "url": "https://api.github.com/repos/bitcoin/bitcoin/pulls/comments/341797420/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "start_line": null,
    "original_start_line": null,
    "start_side": null,
    "line": null,
    "original_line": 28,
    "side": "RIGHT",
    "in_reply_to_id": 332689002
  }
]