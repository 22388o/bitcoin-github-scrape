ryanofsky,2019-09-09 21:36:18,"I'm looking for concept ACKS before detailed review at the moment. Since this a naming and refactoring change, it'd be great if people could take few minutes and skim the diff, and say whether the new code looks ugly or ok, and offer any suggestions. I'm happy to take suggestions and also split this up more.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529676872,529676872,
DrahtBot,2019-09-10 02:30:31,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#17261](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/17261.html) (Make ScriptPubKeyMan an actual interface an",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529742058,529742058,
practicalswift,2019-09-10 11:00:45,Concept ACK,https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529884054,529884054,
MarcoFalke,2019-09-10 13:43:23,"> Getting rid of these globals has been talked about in past as a way\nto implement testing and simulations.\n\nFine with me, but this seems only like a first step, since other globals such as `::mempool` are still global. and not members of the Node class.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-529941376,529941376,
jamesob,2019-09-11 17:12:41,"Concept ACK. This looks like a step in the right direction in terms of cutting down on globals and moving towards being able to test multi-node behavior without having to rely on the functional tests.\n\nIs your intent to split this into separate commits at some point for detailed review?",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530475920,530475920,
ryanofsky,2019-09-11 17:34:50,"> Is your intent to split this into separate commits at some point for detailed review?\n\nCould go either way. These are basically boring text replacements that should be about as much effort to review split up or joined, but I'm happy to split it up. I think I could split it up into 4 or 5 commits roughly matching the bullet points in the description. Overall diff would be a little bigger beca",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530484930,530484930,
jamesob,2019-09-11 17:38:51,"> Could go either way.\n\nI'm fine reviewing either, though I guess if it were easy to do some scripted-diffs that would be nice.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-530486636,530486636,
ryanofsky,2019-09-18 15:17:26,"Could remove the ""Needs conceptual review"" tag, I think, since this has had a few concept ACKS.\n\nI updated this to drop the last commit 7b65a5356ea107af345b980a53e7e2d669711461, which turned out not to be very related to the other changes, and just complicated the PR\n\nUpdated 7b65a5356ea107af345b980a53e7e2d669711461 -> 437a5e439fff50567503c0d76baaba50ebbfbd8f ([pr/noglob.6](https://github.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-532732758,532732758,
ryanofsky,2019-09-20 15:57:36,"FYI maintainers, ""Needs conceptual review"" label was removed but this is still showing up in the ""Chasing Concept ACK"" column from https://github.com/bitcoin/bitcoin/projects/8.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-533612747,533612747,
ryanofsky,2019-09-24 18:44:08,"Rebased dab8d3e2c9cd9bfc92a4520edf6bf3374a9fe4f5 -> ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d ([pr/noglob.9](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.9) -> [pr/noglob.10](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.10)) due to conflict with #16912\n",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-534695108,534695108,
jamesob,2019-09-24 20:55:09,"ACK https://github.com/bitcoin/bitcoin/pull/16839/commits/ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d\n\nRead through the code partially locally (to verify move-onlys) and on Github. Seems pretty uncontroversial and nicely split into scripted-diffs. I can do some manual testing tomorrow if need be. This `Node` object has a lot of promise for testing instead of having to push around globals.",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-534744086,534744086,
ryanofsky,2019-10-02 14:15:51,Rebased ae5d88f8e08def49c7afdda040d6bb9fe73a0e3d -> 50e0bb2df33cc47be10cf8e26ea7d9ce1d2e9704 ([pr/noglob.10](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.10) -> [pr/noglob.11](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.11)) due to minor conflict (in qt test comment) with #17015,https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-537513014,537513014,
MarcoFalke,2019-10-28 15:32:03,Looks ready for merge after rebase,https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547002922,547002922,
ryanofsky,2019-10-28 23:58:10,"Rebased 34a7a50dbeec1ee36b18fa0d1a0ffbf7a1907f98 -> 362ded410b8cb1104b7ef31ff8488fec4824a7d5 ([pr/noglob.15](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.15) -> [pr/noglob.16](https://github.com/ryanofsky/bitcoin/commits/pr/noglob.16)) due to conflict with #16202\n\nAlso renamed `struct Node` to `struct NodeContext`, since it should also be useful to have a `WalletContext` later to put",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547196883,547196883,
laanwj,2019-10-30 11:29:47,ACK 362ded410b8cb1104b7ef31ff8488fec4824a7d5,https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-547857221,547857221,
ariard,2019-11-02 03:30:58,"Post-humous ACK, diff from 50e0bb2 is renaming `struct Node`, integration of bip61 removal and some comments changed.\n\n> I wonder if renaming interfaces::Chain to ChainInterface would make it clearer that this class is an external interface used outside the node (by the wallet) to access chain state and not something that has to do with implementing node functionality or storing node data.\n",https://github.com/bitcoin/bitcoin/pull/16839#issuecomment-549006323,549006323,
promag,2019-09-10 00:03:16,"Is it better to capture member `chain_clients` than `this`?\n\nAlso, it would be nice to explain that a `std::list` is used otherwise this `.erase` would fail.",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322503490,322503490,src/interfaces/chain.cpp
ryanofsky,2019-09-10 15:28:41,"> Is it better to capture member `chain_clients` than `this`?\n\nI think a good starting point is to just capture what's needed without unused data or object references. But in this case, capturing `this` instead of `&clients` is worse because in addition to capturing unneeded data, it requires the `Handler` object to be destroyed before the `Chain` object, and there's no reason to create that k",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r322812671,322812671,src/interfaces/chain.cpp
ariard,2019-09-14 14:10:34,"I find comment fuzzy, do you mean only works if node interface is set by the process of the implementation ?",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425666,324425666,src/interfaces/node.h
ariard,2019-09-14 14:18:40,"So you would create multiple Node in one test process, connect them and let them talk maybe with random introduction of interferences in-between ?",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425872,324425872,src/node/node.h
ariard,2019-09-14 14:21:35,"Couldn't BroadcastTransaction be directly a method of Node instead of passing CConnman ? Maybe sendrawtransaction should be given g_rpc_chain instead of g_rpc_node, overall it's seems to use the chain as a server too",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941,324425941,src/node/transaction.cpp
ariard,2019-09-14 14:25:06,How to override RPC framework limitations ? Encapsulating RPC functions in its own structure like it has been done for the P2P stack with CConnman ?,https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426030,324426030,src/rpc/blockchain.h
ariard,2019-09-14 14:32:27,"IMO not sure why getblocktemplate need to access state of P2P stack ? I would guess the functionality would be useless without a mempool to populate the template and being connected increase the likeliness of a fresh mempool but I could also provide mempool.dat to my node...\nIf you remove it, you can also move g_rpc_node declaration in src/rpc/net.h.",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426272,324426272,src/rpc/mining.cpp
ryanofsky,2019-09-17 23:36:46,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425666\n\n> I find comment fuzzy, do you mean only works if node interface is set by the process of the implementation ?\n\nSorry, this was pretty confusing. Better not to refer to processes in comments before #10102, so I removed this. But to answer the question: this always returns non-null currently and after #10102 will retur",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429034,325429034,src/interfaces/node.h
ryanofsky,2019-09-17 23:36:53,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425872\n\n> So you would create multiple Node in one test process, connect them and let them talk maybe with random introduction of interferences in-between ?\n\nWith caveats, yes, since code that isn't referring to global variables can be instantiated multiple times for testing in a single process.\n",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429061,325429061,src/node/node.h
ryanofsky,2019-09-17 23:37:02,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324425941\n\n> Couldn't BroadcastTransaction be directly a method of Node instead of passing CConnman ?\n\nYes, but I don't think that would be a good idea. I think interface classes should be a thin layer on top of wallet and node code and not a place where real functionality is implemented. The model is:\n\n[![interfaces](https:",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429093,325429093,src/node/transaction.cpp
ryanofsky,2019-09-17 23:37:10,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426030\n\n> How to override RPC framework limitations ? Encapsulating RPC functions in its own structure like it has been done for the P2P stack with CConnman ?\n\nYes, that's one way. Another option would be to add a `std::any` member to the `JSONRPCRequest` struct, so arbitrary context could be passed into RPC methods in a type",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429114,325429114,src/rpc/blockchain.h
ryanofsky,2019-09-17 23:37:18,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r324426272\n\n> IMO not sure why getblocktemplate need to access state of P2P stack ? I would guess the functionality would be useless without a mempool to populate the template and being connected increase the likeliness of a fresh mempool but I could also provide mempool.dat to my node...\n> If you remove it, you can also move g_rpc",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325429133,325429133,src/rpc/mining.cpp
MarcoFalke,2019-09-18 18:19:18,"> Yes, but I don't think that would be a good idea. I think interface classes should be a thin layer on top of wallet and node code and not a place where real functionality is implemented. The model is:\n\nI don't understand this answer. `src/node/transaction.cpp` is ""node code"" as I understand it and not merely some interface. All the other global state accessed in this function (chainstate, me",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325824032,325824032,src/node/transaction.cpp
MarcoFalke,2019-09-18 18:22:02,I think we should be using `struct` only for the dumbest data structures and not complex classes (such as the node). So this should be changed to `m_connman`,https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325825265,325825265,src/node/node.h
ryanofsky,2019-09-18 18:30:37,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325825265\n\n> I think we should be using `struct` only for the dumbest data structures and not complex classes (such as the node). So this should be changed to `m_connman`\n\nThis is definitely supposed to be a dumb structure that doesn't have any methods or contain any functionality. The only code that should need to access multip",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829127,325829127,src/node/node.h
ryanofsky,2019-09-18 18:30:56,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325824032\n\n> I don't understand this answer. `src/node/transaction.cpp` is ""node code"" as I understand it and not merely some interface. All the other global state accessed in this function (chainstate, mempool) should eventually be a node member. So the suggestion by @ariard to make this a node member function makes sense to me.\n",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325829261,325829261,src/node/transaction.cpp
MarcoFalke,2019-09-18 19:08:10,Thanks for clarifying. Could add that sentence to the doxygen comment of `Node` for people like me?,https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325845401,325845401,src/node/node.h
MarcoFalke,2019-09-18 19:11:26,"I guess I'd prefer to pass in the node here, so that in the future when mempool and chainstate are members of the node struct, this doesn't need to change again.\n\n```suggestion\nTransactionError BroadcastTransaction(const CTransactionRef tx, std::string& err_string, const CAmount& max_tx_fee, bool relay, bool wait_callback, Node& node)\n```",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325846705,325846705,src/node/transaction.cpp
ryanofsky,2019-09-18 20:01:43,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325845401\n\n> Thanks for clarifying. Could add that sentence to the doxygen comment of `Node` for people like me?\n\nSorry, existing comment was kind of a placeholder that didn't explain things well. I rewrote it to hopefully be more helpful.\n\n",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866198,325866198,src/node/node.h
ryanofsky,2019-09-18 20:02:03,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325846705\n\n> I guess I'd prefer to pass in the node here, so that in the future when mempool and chainstate are members of the node struct, this doesn't need to change again.\n\nSure, I made the suggested change. I do think in the future it would be better if a function like `BroadcastTransaction` took separate `CChainState&` and ",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325866327,325866327,src/node/transaction.cpp
ariard,2019-09-19 00:42:44,"Thanks got your point. Was doing far out-of-scope thinking, `sendrawtransaction` to your local node isn't great for privacy, it could be a binary to connect to any node to broadcast instead of a RPC call. But yes, in that case it wouldn't even use any interface..",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r325949405,325949405,src/node/transaction.cpp
ariard,2019-10-08 19:07:10,"Do `Node` really need a reference to `Chain`, `ChainImpl` has already a reference to `Node` that's a bit confusing ? I mean `createWallet` and `loadWallet` couldn't be method of `Wallet` interface instead ? Would it work for the GUI ?\n\nMore generally, if we refactor RPC code to encapsulate in a `RPCServer` class, I see a `WalletRPC` subclass with a `Chain` member and a `NodeRPC` subclass with ",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332683253,332683253,src/interfaces/node.cpp
ariard,2019-10-08 19:13:55,nit: Wouldn't shock me to move it to a new src/rpc/node.h libbitcoin_server source file but maybe too early,https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332686179,332686179,src/rpc/blockchain.h
ariard,2019-10-08 19:20:46,nit: maybe it should be name NodeState to avoid confusion with `Node` the already-there interface class?,https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332689002,332689002,src/node/node.h
ryanofsky,2019-10-08 22:07:19,"https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332683253\n\n> Do `Node` really need a reference to `Chain`, `ChainImpl` has already a reference to `Node` that's a bit confusing ?\n\nI'm not sure what the problem might be here. One object owns the other and the owned object contains a back reference. The ChainImpl back reference to the Node struct can go away with some cleanups to in",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754809,332754809,src/interfaces/node.cpp
ryanofsky,2019-10-08 22:07:30,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332689002\n\n> nit: maybe it should be name NodeState to avoid confusion with `Node` the already-there interface class?\n\nI think it'd be better to rename `interfaces::Node` to `NodeInterface` if the point is to distinguish between the internal struct and the external interface. I guess I have some aversion to adding suffixes like ",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754875,332754875,src/node/node.h
ryanofsky,2019-10-08 22:07:47,"re: https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332686179\n\n> nit: Wouldn't shock me to move it to a new src/rpc/node.h libbitcoin_server source file but maybe too early\n\nYes, though more ideally instead of more node files in the rpc directory, I'd like rpc files in the node directory, so generic rpc code would be distinct and easier to reuse from the wallet. Along the lines o",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r332754964,332754964,src/rpc/blockchain.h
ariard,2019-11-02 03:21:35,"Thanks for answers (sorry for delay), wasn't implying to do changes in this PR. Apart of RPC framework which need design goals, I think other one would make code nicer in future PRs, bookmarked.",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797308,341797308,src/interfaces/node.cpp
ariard,2019-11-02 03:26:15,">  I guess I have some aversion to adding suffixes like Info Data State to type names because you could add those suffixes to pretty much any type name just making it more verbose without changing the meaning.\n\nAh, you're right but most of the times it's the cheapest way to avoid name collisions!\n\n+1 for `NodeInterface` if we have opportunity later",https://github.com/bitcoin/bitcoin/pull/16839#discussion_r341797420,341797420,src/node/node.h
