[
  {
    "sha": "b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiM2NjMTNlMWZkYjFmYTU5ZDgzNjU1NTBlYzMzYTJmZGE3OGY0MjEw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T15:54:29Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:01:40Z"
      },
      "message": "==== CRYPTO ====",
      "tree": {
        "sha": "964bb82bd7a44a652b0fce9041192aefd3f7d7e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/964bb82bd7a44a652b0fce9041192aefd3f7d7e3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziewQACgkQHrd2uwPH\nki0+EQ//anNEMPTW/Eu46423WWLtyEWWVnamEZ3tyjI3sY8AnSpCTDoOKLWbSUXg\npLWJw5sw2cQmyXT5NqQdL+m5ZMhfTxWclnoZSjtxYF/WumZyO1ulLQ33JlG6Ml/S\nF/bcAYd4yW+hNU/mhoJnnREf+RUEVagJqUV8dge/UvGBX/vwLhlffQmklKthOT6Z\njjWSB1owyNiuYW//kmu2PjGkA3Y2Br0YxUpcQ8+a6HxUo+yJ4MgMCPqmZCk3UDeu\nokF3WPPPN3pV/OV+RmnS5bkvJ9YaU8yk0O+zCcNgSCKXtggaGpjUa0JamIN9Prsw\nF76IbMFONZn7eCAzzeNiCb5OS90IFdjLU2iP7PK6aTBGSTSZIk7c6Uml1mlrIPKH\nEr7/hk4mdfGSsBCIdtyYs+Wx/NrOtcV8QNwAT7CL3WAnzbtk/FyP2+J+5JqS9Q59\nIDbUTiBR8+1KMOmjN6fq0YG/vg0aGjYcr8KH9bZvldCZe+G31AnqcSrnQs9SgSga\nbySikgUlnnpenk2xpRekTj2LumR8dCJWLIb5xVVNjfrP7krYpYtWKO/0DV30nqAn\nujdMu0y1ghCk5xhZDnzggpV+xgWDvimLKxLP9YdW16Nkd67qZvi51SW5Fabe4pu8\nK3KCRp78APh9z1UKEQj6dBFsb96jY5tnLlVpf1DZXjUimt1U1lw=\n=2Av2\n-----END PGP SIGNATURE-----",
        "payload": "tree 964bb82bd7a44a652b0fce9041192aefd3f7d7e3\nparent 72634244580dc2e3c630ee27e47587080d064b68\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552319669 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346500 +0200\n\n==== CRYPTO ====\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "72634244580dc2e3c630ee27e47587080d064b68",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/72634244580dc2e3c630ee27e47587080d064b68",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/72634244580dc2e3c630ee27e47587080d064b68"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozMWQ0ZjI0YmIwZWY5YWQ4Nzg1ZjM2Yzc4ZDY5YzBhOWQ2Y2VhZmQy",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T14:47:41Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:01:49Z"
      },
      "message": "Enable libsecp256k1 ecdh module, add ecdh function to CKey",
      "tree": {
        "sha": "4088e27f8f3fe887a9821446b9f01024964ce961",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4088e27f8f3fe887a9821446b9f01024964ce961"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziew0ACgkQHrd2uwPH\nki0SjQ/8CQ9mIqMPMJolPVb9ok4dCIKiJiE7tCY0zXKOi2pSiIqgRvdl+sGVyAjn\nyQRjC2rV+97SCi3LuiO2O03Vs9LN/gHN9tQ+uQnUOdk0wkbbRPEMPD2F2hPzvAA5\nnToyubXBXID3BTN+zNJxRDLiAzlhHaCWl86ZVlgYu8xaQ/gI76MrHLcFDEKqm3tI\nzxHDLSw3Soo6AahzJHf9HPP84NOSuiWa60R+Q2NvejjpwFaAe7PEy2f9No3Pctkp\na1UnmiHD3c1msNCqHiKyzqV3aR8RR4U003iByZUCJqbC6TMQnqoPQeizwft8ueH3\nQDX+KUiq8VrGKcbaKaK90mTY1tYncGgpjoiwkb/tfKBgKaLOKwDckTvL4IPw1J1h\n+AHnHcObjfUu/J7E25jf9JyJ3Tonu7DsTG/gr8TlVG4fZ/BFGzVvkykIDUhK3/rW\nYKSO3XB05YV3yTcFR2BNQ4pBtVlww1sn3txgfQ6PmQRf+oF3IDChoagfBWSU7KCr\niZg8iIWniZ/TSRrkhWRQxWHNh/1mBtoie323kRrlYcNAKa0otm7FZdTtY757kDcD\nU94i71PKq18WQiaQxbRn8Ey5tEZfhlsLtAlGvzptyuOhgNmoaHK44wrxOsjGYr9Q\n8XNj2fd/E7f/Rhc1g8NnHGDSmCCuVfwHz8Nl0rF2CXCON6xknQo=\n=Wyru\n-----END PGP SIGNATURE-----",
        "payload": "tree 4088e27f8f3fe887a9821446b9f01024964ce961\nparent b3cc13e1fdb1fa59d8365550ec33a2fda78f4210\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535122061 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346509 +0200\n\nEnable libsecp256k1 ecdh module, add ecdh function to CKey\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b3cc13e1fdb1fa59d8365550ec33a2fda78f4210"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 16,
      "deletions": 1
    },
    "files": [
      {
        "sha": "17497e89837e4088b887e2148c7b2ff5ee5bd8a4",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
        "patch": "@@ -1547,7 +1547,7 @@ if test x$need_bundled_univalue = xyes; then\n   AC_CONFIG_SUBDIRS([src/univalue])\n fi\n \n-ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery --disable-jni\"\n+ac_configure_args=\"${ac_configure_args} --disable-shared --with-pic --with-bignum=no --enable-module-recovery --enable-experimental --enable-module-ecdh --disable-jni\"\n AC_CONFIG_SUBDIRS([src/secp256k1])\n \n AC_OUTPUT"
      },
      {
        "sha": "cac4d801be4065d9a4c4d484c9d932169ee1a278",
        "filename": "src/key.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/src/key.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/src/key.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.cpp?ref=31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
        "patch": "@@ -11,6 +11,7 @@\n #include <random.h>\n \n #include <secp256k1.h>\n+#include <secp256k1_ecdh.h>\n #include <secp256k1_recovery.h>\n \n static secp256k1_context* secp256k1_context_sign = nullptr;\n@@ -291,6 +292,17 @@ bool CKey::Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const\n     return ret;\n }\n \n+bool CKey::ComputeECDHSecret(const CPubKey& pubkey, CPrivKey& secret_out) const\n+{\n+    secp256k1_pubkey pubkey_internal;\n+    if (!secp256k1_ec_pubkey_parse(secp256k1_context_sign, &pubkey_internal, pubkey.data(), pubkey.size())) {\n+        return false;\n+    }\n+\n+    secret_out.resize(32);\n+    return secp256k1_ecdh(secp256k1_context_sign, &secret_out[0], &pubkey_internal, keydata.data()) == 1;\n+}\n+\n bool CExtKey::Derive(CExtKey &out, unsigned int _nChild) const {\n     out.nDepth = nDepth + 1;\n     CKeyID id = key.GetPubKey().GetID();"
      },
      {
        "sha": "e0883f0f1b6314ee4610aeff4ee9b822f70ce5dd",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
        "patch": "@@ -131,6 +131,9 @@ class CKey\n     //! Derive BIP32 child key.\n     bool Derive(CKey& keyChild, ChainCode &ccChild, unsigned int nChild, const ChainCode& cc) const;\n \n+    // computes an EC Diffie-Hellman 256bit secret\n+    bool ComputeECDHSecret(const CPubKey& pubkey, CPrivKey& secret_out) const;\n+\n     /**\n      * Verify thoroughly whether a private key and a public key match.\n      * This is done using a different mechanism than just regenerating it."
      }
    ]
  },
  {
    "sha": "50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MDgyMWY4ZDlkNGJkOGMwYWJiYzUzMzFjNDdkMzgyZDQxMzJlYTA0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T14:47:54Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:01:52Z"
      },
      "message": "QA: Add EC Diffie-Hellman test",
      "tree": {
        "sha": "05eccae1bece1e4d84de411d81c5a5cfacb33be7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/05eccae1bece1e4d84de411d81c5a5cfacb33be7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziexAACgkQHrd2uwPH\nki1erg//QnQmjNg4ggxd7OylF0EmdvfAD9pTUiMu1oMK7WPRPAGgi6Apimx9jrG+\nygEgWlJOIl4qtROIxCqiIsJD88It95DjJBsPf3eU+YdlvhYkNNWD9CgYNvJwrBeq\nJuMXTV3W3ERdNNJH68PiUmipC1Cygno/ln9CtbruUGyeS0Rsxbdhj1aavZjioXNT\nPJDfp09ypnoyxcCJRRPeWeCQ5rEHOas8G+kagDWUYqb5SpfPQZTz+mGhn8dXwgrD\nlIuHNOdQe1+Jmb4otbi7kY3Gv2yh9vs+qNOUYi4UYD7tXD6VAVzmk0xQh1hXkyYD\nlrGJys4z8sM08hH7idSU0iQlmP9+JqU0HvSqfC9loLCBo9qCp+13h6wnL72WSTXQ\n31gJmQEgeCDhWWlnkFhRuQH/Wb4qr78fNe8yp3AQnOl8KlyMsqDKd6dFzYqYdNHR\nz0nhE2U8SbT1fprlgS11e6NJYjTzoIrzIFo4jn9UUuJtib7CB1u28vg4fPhKVqte\nn8xquyNAK4W1IrQRMhKdQVaQBfaW2bTLXqmTki9H6JQCsgrvYnO80oi0hWBKJ0b0\nPLVSRMcmukzxc59z/jOZWFAersM9ri0SAomF7LaMmzTZyrcZenFnnsQDp96GBoOS\nmBjKlXGDC1wmWtWN1/mOkvUg8aXEnqpNOyVvh+SdLajggaQ44uY=\n=9hVt\n-----END PGP SIGNATURE-----",
        "payload": "tree 05eccae1bece1e4d84de411d81c5a5cfacb33be7\nparent 31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535122074 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346512 +0200\n\nQA: Add EC Diffie-Hellman test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50821f8d9d4bd8c0abbc5331c47d382d4132ea04/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/31d4f24bb0ef9ad8785f36c78d69c0a9d6ceafd2"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 20,
      "deletions": 0
    },
    "files": [
      {
        "sha": "d19d6ab7fed05fdaad1eb50a2b42054edebf0218",
        "filename": "src/test/key_tests.cpp",
        "status": "modified",
        "additions": 20,
        "deletions": 0,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/50821f8d9d4bd8c0abbc5331c47d382d4132ea04/src/test/key_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/50821f8d9d4bd8c0abbc5331c47d382d4132ea04/src/test/key_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_tests.cpp?ref=50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
        "patch": "@@ -150,6 +150,26 @@ BOOST_AUTO_TEST_CASE(key_test1)\n     BOOST_CHECK(key2C.SignCompact(hashMsg, detsigc));\n     BOOST_CHECK(detsig == ParseHex(\"1c52d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n     BOOST_CHECK(detsigc == ParseHex(\"2052d8a32079c11e79db95af63bb9600c5b04f21a9ca33dc129c2bfa8ac9dc1cd561d8ae5e0f6c1a16bde3719c64c2fd70e404b6428ab9a69566962e8771b5944d\"));\n+\n+    // test EC Diffie-Hellman secret computation\n+    CPrivKey secret1;\n+    CPrivKey secret2;\n+    BOOST_CHECK(key1C.ComputeECDHSecret(pubkey2, secret1));\n+    BOOST_CHECK(key2C.ComputeECDHSecret(pubkey1, secret2));\n+    BOOST_CHECK(secret1.size() == 32);\n+    BOOST_CHECK(secret1 == secret2);\n+    // invalid pubkey test\n+    std::vector<unsigned char> pubkeydata;\n+    pubkeydata.insert(pubkeydata.end(), pubkey1C.begin(), pubkey1C.end());\n+    pubkeydata[0] = 0xFF;\n+    CPubKey pubkey1_invalid(pubkeydata);\n+    BOOST_CHECK(key2.ComputeECDHSecret(pubkey1_invalid, secret2) == false);\n+    pubkeydata[0] = 0x03;\n+    CPubKey pubkey2_invalid(pubkeydata);\n+    BOOST_CHECK(key2.ComputeECDHSecret(pubkey2_invalid, secret2) == true);\n+    pubkeydata[9] = 0xFF;\n+    CPubKey pubkey3_invalid(pubkeydata);\n+    BOOST_CHECK(key2.ComputeECDHSecret(pubkey3_invalid, secret2) == false);\n }\n \n BOOST_AUTO_TEST_CASE(key_signature_tests)"
      }
    ]
  },
  {
    "sha": "cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjYjhhMTVjZmZkMDhiYWRhY2E4Y2JhMmI2NmVlYzk0NDZlYTZmMWVl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T15:15:45Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:17Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin AEAD implementation",
      "tree": {
        "sha": "32387fcf7fe011c48aacca26db2168555fac9444",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/32387fcf7fe011c48aacca26db2168555fac9444"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzieykACgkQHrd2uwPH\nki1V+Q/9FRmwSu2y3Ehn4eo0w1QsgBvOEMLobeRI/8I6zdLBWIhkU2xlrEA4XhN3\nlDqmhpNj7lZ6RmTkGKKeQG0JBtAcSDW5ak5x9Vfn57zmqJWZN6kMK0jWxjiH6ntQ\nyDvPEFjRyU9UQz+Uy9/nAWr3KeSHNWbSBr6VxqTD/FoNiOgHITZ+Ol6VBcltxn82\nQ1BclSDRLzsdBDDOmTS1diKah5TqaSCHuqOssaZe7tOOtyD48vlgqoMaeuAlEdCv\nTRlCiyBBxSja7p9t1KAyXUEsKJuNe5xmDDxjpDlf2qULUesCQlONlwUi7ZaFORcj\nLAkDm+kzTOMztlVfq1u020FbX/Lv27CPoqZcZToJkLk0OGdeHuvvp28ksSQtObo6\n5eqhEqoHoz//DMnECTLbfjcPbr7ZbL4jWnw43GieL/8a+aw9GWFCZPqyGIVKG+EX\niP3bFXIY/jtM8Gixt2u3L335ZHsmnmhXTCgNFj03zT+Sr5j4g6x8eUrBeDqhtrpM\n+Rx5GxTxTx2KGUvTkVQCEH28HR6MK2LsZVaEUW6im7mGtmzzVlwcpCbakPwDy267\nr8QanvcpUm9tPefyvQKx9ZGCFkkcwoLEPQi0IYIDi+iWHfrz0LGZaGFCULlPPEBB\nxSzC0nG2PWtAwjfDOXL7uDOFVh/a+ng8l1S45dHnPowjVxVn0NI=\n=xyKn\n-----END PGP SIGNATURE-----",
        "payload": "tree 32387fcf7fe011c48aacca26db2168555fac9444\nparent 50821f8d9d4bd8c0abbc5331c47d382d4132ea04\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552317345 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346537 +0200\n\nAdd ChaCha20Poly1305@Bitcoin AEAD implementation\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/50821f8d9d4bd8c0abbc5331c47d382d4132ea04",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/50821f8d9d4bd8c0abbc5331c47d382d4132ea04"
      }
    ],
    "stats": {
      "total": 278,
      "additions": 277,
      "deletions": 1
    },
    "files": [
      {
        "sha": "8c31eea8e7ba7e8112a136607c8667e620980a6e",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
        "patch": "@@ -350,6 +350,8 @@ crypto_libbitcoin_crypto_base_a_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n crypto_libbitcoin_crypto_base_a_SOURCES = \\\n   crypto/aes.cpp \\\n   crypto/aes.h \\\n+  crypto/chacha_poly_aead.h \\\n+  crypto/chacha_poly_aead.cpp \\\n   crypto/chacha20.h \\\n   crypto/chacha20.cpp \\\n   crypto/common.h \\\n@@ -613,7 +615,7 @@ bitcoin_wallet_LDADD += $(BOOST_LIBS) $(BDB_LIBS) $(CRYPTO_LIBS) $(EVENT_PTHREAD\n # bitcoinconsensus library #\n if BUILD_BITCOIN_LIBS\n include_HEADERS = script/bitcoinconsensus.h\n-libbitcoinconsensus_la_SOURCES = $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n+libbitcoinconsensus_la_SOURCES = support/cleanse.cpp $(crypto_libbitcoin_crypto_base_a_SOURCES) $(libbitcoin_consensus_a_SOURCES)\n \n if GLIBC_BACK_COMPAT\n   libbitcoinconsensus_la_SOURCES += compat/glibc_compat.cpp"
      },
      {
        "sha": "01ea253bbed58a9412f7af0e9b10a634a8e301fb",
        "filename": "src/crypto/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/crypto/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/crypto/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.cpp?ref=cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
        "patch": "@@ -0,0 +1,130 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <crypto/chacha_poly_aead.h>\n+\n+#include <crypto/common.h>\n+#include <crypto/poly1305.h>\n+#include <support/cleanse.h>\n+\n+#include <assert.h>\n+#include <string.h>\n+\n+#include <cstdio>\n+#include <limits>\n+\n+#define XOR(v, w) ((v) ^ (w))\n+\n+#ifndef HAVE_TIMINGSAFE_BCMP\n+\n+int timingsafe_bcmp(const unsigned char* b1, const unsigned char* b2, size_t n)\n+{\n+    const unsigned char *p1 = b1, *p2 = b2;\n+    int ret = 0;\n+\n+    for (; n > 0; n--)\n+        ret |= *p1++ ^ *p2++;\n+    return (ret != 0);\n+}\n+\n+#endif // TIMINGSAFE_BCMP\n+\n+ChaCha20Poly1305AEAD::ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len)\n+{\n+    assert(K_1_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    assert(K_2_len == CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_main.SetKey(K_1, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+    m_chacha_header.SetKey(K_2, CHACHA20_POLY1305_AEAD_KEY_LEN);\n+\n+    // set the cached sequence number to uint64 max which hints for an unset cache.\n+    // we can't hit uint64 max since the rekey rule (which resets the sequence number) is 1GB\n+    m_cached_aad_seqnr = std::numeric_limits<uint64_t>::max();\n+}\n+\n+bool ChaCha20Poly1305AEAD::Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len /* length of the output buffer for sanity checks */, const unsigned char* src, size_t src_len, bool is_encrypt)\n+{\n+    // check buffer boundaries\n+    if (\n+        // if we encrypt, make sure the source contains at least the expected AAD and the destination has at least space for the source + MAC\n+        (is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN || dest_len < src_len + POLY1305_TAGLEN)) ||\n+        // if we decrypt, make sure the source contains at least the expected AAD+MAC and the destination has at least space for the source - MAC\n+        (!is_encrypt && (src_len < CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN || dest_len < src_len - POLY1305_TAGLEN))) {\n+        return false;\n+    }\n+\n+    unsigned char expected_tag[POLY1305_TAGLEN], poly_key[POLY1305_KEYLEN];\n+    memset(poly_key, 0, sizeof(poly_key));\n+    m_chacha_main.SetIV(htole64(seqnr_payload));\n+\n+    // block counter 0 for the poly1305 key\n+    // use lower 32bytes for the poly1305 key\n+    // (throws away 32 unused bytes (upper 32) from this ChaCha20 round)\n+    m_chacha_main.Seek(0);\n+    m_chacha_main.Crypt(poly_key, poly_key, sizeof(poly_key));\n+\n+    // if decrypting, verify the tag prior to decryption\n+    if (!is_encrypt) {\n+        const unsigned char* tag = src + src_len - POLY1305_TAGLEN;\n+        poly1305_auth(expected_tag, src, src_len - POLY1305_TAGLEN, poly_key);\n+\n+        // constant time compare the calculated MAC with the provided MAC\n+        if (timingsafe_bcmp(expected_tag, tag, POLY1305_TAGLEN) != 0) {\n+            memory_cleanse(expected_tag, sizeof(expected_tag));\n+            memory_cleanse(poly_key, sizeof(poly_key));\n+            return false;\n+        }\n+        memory_cleanse(expected_tag, sizeof(expected_tag));\n+        // MAC has been successfully verified, make sure we don't covert it in decryption\n+        src_len -= POLY1305_TAGLEN;\n+    }\n+\n+    // calculate and cache the next 64byte keystream block if requested sequence number is not yet the cache\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));\n+        m_chacha_header.Seek(0);\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT);\n+    }\n+    // crypt the AAD (3 bytes message length) with given position in AAD cipher instance keystream\n+    dest[0] = XOR(src[0], m_aad_keystream_buffer[aad_pos]);\n+    dest[1] = XOR(src[1], m_aad_keystream_buffer[aad_pos + 1]);\n+    dest[2] = XOR(src[2], m_aad_keystream_buffer[aad_pos + 2]);\n+\n+    // Set the playload ChaCha instance block counter to 1 and crypt the payload\n+    m_chacha_main.Seek(htole64(1));\n+    m_chacha_main.Crypt(src + CHACHA20_POLY1305_AEAD_AAD_LEN, dest + CHACHA20_POLY1305_AEAD_AAD_LEN, src_len - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+\n+    // If encrypting, calculate and append tag\n+    if (is_encrypt) {\n+        // the poly1305 tag expands over the AAD (3 bytes length) & encrypted payload\n+        poly1305_auth(dest + src_len, dest, src_len, poly_key);\n+    }\n+\n+    // cleanse no longer required MAC and polykey\n+    memory_cleanse(poly_key, sizeof(poly_key));\n+    return true;\n+}\n+\n+bool ChaCha20Poly1305AEAD::GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext)\n+{\n+    // enforce valid aad position to avoid accessing outside of the 64byte keystream cache\n+    // (there is space for 21 times 3 bytes)\n+    assert(aad_pos >= 0 && aad_pos < CHACHA20_ROUND_OUTPUT - CHACHA20_POLY1305_AEAD_AAD_LEN);\n+    if (m_cached_aad_seqnr != seqnr_aad) {\n+        // we need to calculate the 64 keystream bytes since we reached a new aad sequence number\n+        m_cached_aad_seqnr = seqnr_aad;\n+        m_chacha_header.SetIV(htole64(seqnr_aad));                                      // use LE for the nonce\n+        m_chacha_header.Seek(0);                                                        // block counter 0\n+        m_chacha_header.Keystream(m_aad_keystream_buffer, CHACHA20_ROUND_OUTPUT); // write keystream to the cache\n+    }\n+\n+    // decrypt the ciphertext length by XORing the right position of the 64byte keystream cache with the ciphertext\n+    *len24_out = XOR(ciphertext[0], m_aad_keystream_buffer[aad_pos + 0]) |\n+                 XOR(ciphertext[1], m_aad_keystream_buffer[aad_pos + 1]) << 8 |\n+                 XOR(ciphertext[2], m_aad_keystream_buffer[aad_pos + 2]) << 16;\n+\n+    // encode to host endianness 32bit integer\n+    *len24_out = le32toh(*len24_out);\n+    return true;\n+}"
      },
      {
        "sha": "fdc36a1cd3b05e6c8df8c149a44f9d0e1e19eda8",
        "filename": "src/crypto/chacha_poly_aead.h",
        "status": "added",
        "additions": 144,
        "deletions": 0,
        "changes": 144,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/crypto/chacha_poly_aead.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee/src/crypto/chacha_poly_aead.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/crypto/chacha_poly_aead.h?ref=cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
        "patch": "@@ -0,0 +1,144 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+#define BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H\n+\n+#include <crypto/chacha20.h>\n+\n+#include <cmath>\n+\n+static constexpr int CHACHA20_POLY1305_AEAD_KEY_LEN = 32;\n+static constexpr int CHACHA20_POLY1305_AEAD_AAD_LEN = 3; /* 3 bytes length */\n+static constexpr int CHACHA20_ROUND_OUTPUT = 64;         /* 64 bytes per round */\n+static constexpr int AAD_PACKAGES_PER_ROUND = 21;        /* 64 / 3 round down*/\n+\n+/* A AEAD class for ChaCha20-Poly1305@bitcoin.\n+ *\n+ * ChaCha20 is a stream cipher designed by Daniel Bernstein and described in\n+ * <ref>[http://cr.yp.to/chacha/chacha-20080128.pdf ChaCha20]</ref>. It operates\n+ * by permuting 128 fixed bits, 128 or 256 bits of key, a 64 bit nonce and a 64\n+ * bit counter into 64 bytes of output. This output is used as a keystream, with\n+ * any unused bytes simply discarded.\n+ *\n+ * Poly1305 <ref>[http://cr.yp.to/mac/poly1305-20050329.pdf Poly1305]</ref>, also\n+ * by Daniel Bernstein, is a one-time Carter-Wegman MAC that computes a 128 bit\n+ * integrity tag given a message and a single-use 256 bit secret key.\n+ *\n+ * The chacha20-poly1305@bitcoin combines these two primitives into an\n+ * authenticated encryption mode. The construction used is based on that proposed\n+ * for TLS by Adam Langley in\n+ * <ref>[http://tools.ietf.org/html/draft-agl-tls-chacha20poly1305-03 \"ChaCha20\n+ * and Poly1305 based Cipher Suites for TLS\", Adam Langley]</ref>, but differs in\n+ * the layout of data passed to the MAC and in the addition of encryption of the\n+ * packet lengths.\n+ *\n+ * ==== Detailed Construction ====\n+ *\n+ * The chacha20-poly1305@bitcoin cipher requires two 256 bits of key material as\n+ * output from the key exchange. Each key (K_1 and K_2) are used by two separate\n+ * instances of chacha20.\n+ *\n+ * The instance keyed by K_1 is a stream cipher that is used only to encrypt the 3\n+ * byte packet length field and has its own sequence number. The second instance,\n+ * keyed by K_2, is used in conjunction with poly1305 to build an AEAD\n+ * (Authenticated Encryption with Associated Data) that is used to encrypt and\n+ * authenticate the entire packet.\n+ *\n+ * Two separate cipher instances are used here so as to keep the packet lengths\n+ * confidential but not create an oracle for the packet payload cipher by\n+ * decrypting and using the packet length prior to checking the MAC. By using an\n+ * independently-keyed cipher instance to encrypt the length, an active attacker\n+ * seeking to exploit the packet input handling as a decryption oracle can learn\n+ * nothing about the payload contents or its MAC (assuming key derivation,\n+ * ChaCha20 and Poly1305 are secure).\n+ *\n+ * The AEAD is constructed as follows: for each packet, generate a Poly1305 key by\n+ * taking the first 256 bits of ChaCha20 stream output generated using K_2, an IV\n+ * consisting of the packet sequence number encoded as an LE uint64 and a ChaCha20\n+ * block counter of zero. The K_2 ChaCha20 block counter is then set to the\n+ * little-endian encoding of 1 (i.e. {1, 0, 0, 0, 0, 0, 0, 0}) and this instance\n+ * is used for encryption of the packet payload.\n+ *\n+ * ==== Packet Handling ====\n+ *\n+ * When receiving a packet, the length must be decrypted first. When 3 bytes of\n+ * ciphertext length have been received, they may be decrypted.\n+ *\n+ * A ChaCha20 round always calculates 64bytes which is sufficient to crypt 21\n+ * times a 3 bytes length field (21*3 = 63). The length field sequence number can\n+ * thus be used 21 times (keystream caching).\n+ *\n+ * The length field must be enc-/decrypted with the ChaCha20 keystream keyed with\n+ * K_1 defined by block counter 0, the length field sequence number in little\n+ * endian and a keystream position from 0 to 60.\n+ *\n+ * Once the entire packet has been received, the MAC MUST be checked before\n+ * decryption. A per-packet Poly1305 key is generated as described above and the\n+ * MAC tag calculated using Poly1305 with this key over the ciphertext of the\n+ * packet length and the payload together. The calculated MAC is then compared in\n+ * constant time with the one appended to the packet and the packet decrypted\n+ * using ChaCha20 as described above (with K_2, the packet sequence number as\n+ * nonce and a starting block counter of 1).\n+ *\n+ * Detection of an invalid MAC MUST lead to immediate connection termination.\n+ *\n+ * To send a packet, first encode the 3 byte length and encrypt it using K_1 as\n+ * described above. Encrypt the packet payload (using K_2) and append it to the\n+ * encrypted length. Finally, calculate a MAC tag and append it.\n+ *\n+ * The initiating peer MUST use <code>K_1_A, K_2_A</code> to encrypt messages on\n+ * the send channel, <code>K_1_B, K_2_B</code> MUST be used to decrypt messages on\n+ * the receive channel.\n+ *\n+ * The responding peer MUST use <code>K_1_A, K_2_A</code> to decrypt messages on\n+ * the receive channel, <code>K_1_B, K_2_B</code> MUST be used to encrypt messages\n+ * on the send channel.\n+ *\n+ * Optimized implementations of ChaCha20-Poly1305@bitcoin are relatively fast in\n+ * general, therefore it is very likely that encrypted messages require not more\n+ * CPU cycles per bytes then the current unencrypted p2p message format\n+ * (ChaCha20/Poly1305 versus double SHA256).\n+ *\n+ * The initial packet sequence numbers are 0.\n+ *\n+ * K_2 ChaCha20 cipher instance (payload) must never reuse a {key, nonce} for\n+ * encryption nor may it be used to encrypt more than 2^70 bytes under the same\n+ * {key, nonce}.\n+ *\n+ * K_1 ChaCha20 cipher instance (length field/AAD) must never reuse a {key, nonce,\n+ * position-in-keystream} for encryption nor may it be used to encrypt more than\n+ * 2^70 bytes under the same {key, nonce}.\n+ *\n+ * We use message sequence numbers for both communication directions.\n+ */\n+\n+class ChaCha20Poly1305AEAD\n+{\n+private:\n+    ChaCha20 m_chacha_main;                                      // payload and poly1305 key-derivation cipher instance\n+    ChaCha20 m_chacha_header;                                    // AAD cipher instance (encrypted length)\n+    unsigned char m_aad_keystream_buffer[CHACHA20_ROUND_OUTPUT]; // aad keystream cache\n+    uint64_t m_cached_aad_seqnr;                                 // aad keystream cache hint\n+\n+public:\n+    ChaCha20Poly1305AEAD(const unsigned char* K_1, size_t K_1_len, const unsigned char* K_2, size_t K_2_len);\n+\n+    /** Encrypts/decrypts a packet\n+        seqnr_payload, the message sequence number\n+        seqnr_aad, the messages AAD sequence number which allows reuse of the AAD keystream\n+        aad_pos, position to use in the AAD keystream to encrypt the AAD\n+        dest, output buffer, must be of a size equal or larger then CHACHA20_POLY1305_AEAD_AAD_LEN + payload (+ POLY1305_TAG_LEN in encryption) bytes\n+        destlen, length of the destination buffer\n+        src, the AAD+payload to encrypt or the AAD+payload+MAC to decrypt\n+        src_len, the length of the source buffer\n+        is_encrypt, set to true if we encrypt (creates and appends the MAC instead of verifying it)\n+        */\n+    bool Crypt(uint64_t seqnr_payload, uint64_t seqnr_aad, int aad_pos, unsigned char* dest, size_t dest_len, const unsigned char* src, size_t src_len, bool is_encrypt);\n+\n+    /** decrypts the 3 bytes AAD data and decodes it into a uint32_t field */\n+    bool GetLength(uint32_t* len24_out, uint64_t seqnr_aad, int aad_pos, const uint8_t* ciphertext);\n+};\n+\n+#endif // BITCOIN_CRYPTO_CHACHA_POLY_AEAD_H"
      }
    ]
  },
  {
    "sha": "7c93eb7f04273cef56e8bb63c504a23564ff4220",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3YzkzZWI3ZjA0MjczY2VmNTZlOGJiNjNjNTA0YTIzNTY0ZmY0MjIw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T15:16:15Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:22Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin tests",
      "tree": {
        "sha": "364dcf74b768d39b404bac9927fadae3e6786573",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/364dcf74b768d39b404bac9927fadae3e6786573"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7c93eb7f04273cef56e8bb63c504a23564ff4220",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziey4ACgkQHrd2uwPH\nki2c5xAAlCV1WdAhWcde87BsxDHPq4xN4P9LZzxsE2fAfWaLdpWEImSpR69ynHVa\n991F4+QxAFUZhZXxqNPzNw/atyBUvr/sg6C0cI6+VH6ccEq1q+ymXYL5s9n9YJ17\nBl3I5ipRLLdxX2y5JXrd+VsvDWF5OOdPDlA4a+wKeqfaEVsb9XHxpEktLDiJp2gU\nOjpy/6UTuJN6FZg/VslNuGf50DhxCDgySwmtSTkuyxdvUiyHcmUdu644Q+UqNeim\nmWygteyDbYkubbTwdVsF8uB0f3m13lJwVLA5CFns2IVc1+gQZyNLiIVA6dLHnl7p\nDr/xh4QnK75TYjV1G4vnw3db2jxAF1TirB46vM8seHeZege7CujsTSOKnl3kcER8\n0bJMx3bkpw06dx7AxPyvBb1xE7C/8rc+VGnxBI0TKrDKLmZWe1uDoqMXUyPWy5c2\nsnnMJDV4dOUoCqGsJrDVRY1mQdtHPZ3un5Mfdhpg2T2U/U6py3uBmKc8tgTMHmMN\nf1AYsj84UcFlArE+2aaoI1IlFcvFSfzU3CY/a74GbDCSx2g02D6phhCsOW5vGgqv\nDs3l27m0Hp9rMBsEevEvsHrAE4Jwe5t6WAS1P8lMA7ODucxC6BKQyTgRxUSdvDnr\njXl22L7NkbmfYgbvOJeyTGBExQRKcsSwWivETGRSXfeZrNYZcDk=\n=vtbc\n-----END PGP SIGNATURE-----",
        "payload": "tree 364dcf74b768d39b404bac9927fadae3e6786573\nparent cb8a15cffd08badaca8cba2b66eec9446ea6f1ee\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552317375 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346542 +0200\n\nAdd ChaCha20Poly1305@Bitcoin tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93eb7f04273cef56e8bb63c504a23564ff4220",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93eb7f04273cef56e8bb63c504a23564ff4220",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93eb7f04273cef56e8bb63c504a23564ff4220/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb8a15cffd08badaca8cba2b66eec9446ea6f1ee"
      }
    ],
    "stats": {
      "total": 130,
      "additions": 130,
      "deletions": 0
    },
    "files": [
      {
        "sha": "3c5852e92622a0ef043345bddbcece85a6eb1dc5",
        "filename": "src/test/crypto_tests.cpp",
        "status": "modified",
        "additions": 130,
        "deletions": 0,
        "changes": 130,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7c93eb7f04273cef56e8bb63c504a23564ff4220/src/test/crypto_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7c93eb7f04273cef56e8bb63c504a23564ff4220/src/test/crypto_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/crypto_tests.cpp?ref=7c93eb7f04273cef56e8bb63c504a23564ff4220",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <crypto/aes.h>\n #include <crypto/chacha20.h>\n+#include <crypto/chacha_poly_aead.h>\n #include <crypto/poly1305.h>\n #include <crypto/hkdf_sha256_32.h>\n #include <crypto/hmac_sha256.h>\n@@ -585,6 +586,135 @@ BOOST_AUTO_TEST_CASE(hkdf_hmac_sha256_l32_tests)\n                 \"8da4e775a563c18f715f802a063c5a31b8a11f5c5ee1879ec3454e5f3c738d2d\");\n }\n \n+#define XOR(v, w) ((v) ^ (w))\n+\n+static void TestChaCha20Poly1305AEAD(bool must_succeed, unsigned int expected_aad_length, const std::string& hex_m, const std::string& hex_k1, const std::string& hex_k2, const std::string& hex_aad_keystream, const std::string& hex_encrypted_message, const std::string& hex_encrypted_message_seq_999)\n+{\n+    // we need two sequence numbers, one for the payload cipher instance...\n+    uint32_t seqnr_payload = 0;\n+    // ... and one for the AAD (length) cipher instance\n+    uint32_t seqnr_aad = 0;\n+    // we need to keep track of the position in the AAD cipher instance\n+    // keystream since we use the same 64byte output 21 times\n+    // (21 times 3 bytes length < 64)\n+    int aad_pos = 0;\n+\n+    std::vector<unsigned char> aead_K_1 = ParseHex(hex_k1);\n+    std::vector<unsigned char> aead_K_2 = ParseHex(hex_k2);\n+    std::vector<unsigned char> plaintext_buf = ParseHex(hex_m);\n+    std::vector<unsigned char> expected_aad_keystream = ParseHex(hex_aad_keystream);\n+    std::vector<unsigned char> expected_ciphertext_and_mac = ParseHex(hex_encrypted_message);\n+    std::vector<unsigned char> expected_ciphertext_and_mac_sequence999 = ParseHex(hex_encrypted_message_seq_999);\n+\n+    std::vector<unsigned char> ciphertext_buf(plaintext_buf.size() + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> plaintext_buf_new(plaintext_buf.size(), 0);\n+    std::vector<unsigned char> cmp_ctx_buffer(64);\n+    uint32_t out_len = 0;\n+\n+    // create the AEAD instance\n+    ChaCha20Poly1305AEAD aead(aead_K_1.data(), aead_K_1.size(), aead_K_2.data(), aead_K_2.size());\n+\n+    // create a chacha20 instance to compare against\n+    ChaCha20 cmp_ctx(aead_K_2.data(), 32);\n+\n+    // encipher\n+    bool res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+    // make sure the operation succeeded if expected to succeed\n+    BOOST_CHECK_EQUAL(res, must_succeed);\n+    if (!res) return;\n+\n+    // verify ciphertext & mac against the test vector\n+    BOOST_CHECK_EQUAL(expected_ciphertext_and_mac.size(), ciphertext_buf.size());\n+    BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac.data(), ciphertext_buf.size()) == 0);\n+\n+    // manually construct the AAD keystream\n+    cmp_ctx.SetIV(htole64(seqnr_aad));\n+    cmp_ctx.Seek(0);\n+    cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+    BOOST_CHECK(memcmp(expected_aad_keystream.data(), cmp_ctx_buffer.data(), expected_aad_keystream.size()) == 0);\n+    // crypt the 3 length bytes and compare the length\n+    uint64_t len_cmp = 0;\n+    len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+              XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+              XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+    len_cmp = le32toh(len_cmp);\n+    BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+    // encrypt / decrypt 1000 packets\n+    for (size_t i = 0; i < 1000; ++i) {\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, ciphertext_buf.data(), ciphertext_buf.size(), plaintext_buf.data(), plaintext_buf.size(), true);\n+        BOOST_CHECK_EQUAL(res, true);\n+        BOOST_CHECK(aead.GetLength(&out_len, seqnr_aad, aad_pos, ciphertext_buf.data()));\n+        BOOST_CHECK_EQUAL(out_len, expected_aad_length);\n+        res = aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, plaintext_buf_new.data(), plaintext_buf_new.size(), ciphertext_buf.data(), ciphertext_buf.size(), false);\n+        BOOST_CHECK_EQUAL(res, true);\n+\n+        // make sure we repetitive get the same plaintext\n+        BOOST_CHECK(memcmp(plaintext_buf.data(), plaintext_buf_new.data(), plaintext_buf.size()) == 0);\n+\n+        // compare sequence number 999 against the test vector\n+        if (seqnr_payload == 999) {\n+            BOOST_CHECK(memcmp(ciphertext_buf.data(), expected_ciphertext_and_mac_sequence999.data(), expected_ciphertext_and_mac_sequence999.size()) == 0);\n+        }\n+        // set nonce and block counter, output the keystream\n+        cmp_ctx.SetIV(htole64(seqnr_aad));\n+        cmp_ctx.Seek(0);\n+        cmp_ctx.Keystream(cmp_ctx_buffer.data(), 64);\n+\n+        // crypt the 3 length bytes and compare the length\n+        len_cmp = 0;\n+        len_cmp = XOR(ciphertext_buf[0], cmp_ctx_buffer[aad_pos + 0]) |\n+                  XOR(ciphertext_buf[1], cmp_ctx_buffer[aad_pos + 1]) << 8 |\n+                  XOR(ciphertext_buf[2], cmp_ctx_buffer[aad_pos + 2]) << 16;\n+        len_cmp = le32toh(len_cmp);\n+        BOOST_CHECK_EQUAL(len_cmp, expected_aad_length);\n+\n+        // increment the sequence number(s)\n+        // always increment the payload sequence number\n+        // increment the AAD keystream position by its size (3)\n+        // increment the AAD sequence number if we would hit the 64 byte limit\n+        seqnr_payload++;\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(chacha20_poly1305_aead_testvector)\n+{\n+    /* test chacha20poly1305@bitcoin AEAD */\n+\n+    // must fail with no message\n+    TestChaCha20Poly1305AEAD(false, 0,\n+        \"\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\", \"\", \"\", \"\");\n+\n+    TestChaCha20Poly1305AEAD(true, 0,\n+        /* m  */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k1 (payload) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* k2 (AAD) */ \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        /* AAD keystream */ \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        /* encrypted message & MAC */ \"76b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32d2fc11829c1b6c1df1f551cd6131ff08\",\n+        /* encrypted message & MAC at sequence 999 */ \"b0a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3aaa7aa16ec62c5e24f040c08bb20c3598\");\n+    TestChaCha20Poly1305AEAD(true, 1,\n+        \"0100000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"0000000000000000000000000000000000000000000000000000000000000000\",\n+        \"76b8e0ada0f13d90405d6ae55386bd28bdd219b8a08ded1aa836efcc8b770dc7da41597c5157488d7724e03fb8d84a376a43b8f41518a11cc387b669b2ee6586\",\n+        \"77b8e09f07e7be5551387a98ba977c732d080dcb0f29a048e3656912c6533e32baf0c85b6dff8602b06cf52a6aefc62e\",\n+        \"b1a03d5bd2855d60699e7d3a3133fa47be740fe4e4c1f967555e2d9271f31c3a8bd94d54b5ecabbc41ffbb0c90924080\");\n+    TestChaCha20Poly1305AEAD(true, 255,\n+        \"ff0000f195e66982105ffb640bb7757f579da31602fc93ec01ac56f85ac3c134a4547b733b46413042c9440049176905d3be59ea1c53f15916155c2be8241a38008b9a26bc35941e2444177c8ade6689de95264986d95889fb60e84629c9bd9a5acb1cc118be563eb9b3a4a472f82e09a7e778492b562ef7130e88dfe031c79db9d4f7c7a899151b9a475032b63fc385245fe054e3dd5a97a5f576fe064025d3ce042c566ab2c507b138db853e3d6959660996546cc9c4a6eafdc777c040d70eaf46f76dad3979e5c5360c3317166a1c894c94a371876a94df7628fe4eaaf2ccb27d5aaae0ad7ad0f9d4b6ad3b54098746d4524d38407a6deb3ab78fab78c9\",\n+        \"000102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"ff0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f\",\n+        \"c640c1711e3ee904ac35c57ab9791c8a1c408603a90b77a83b54f6c844cb4b06d94e7fc6c800e165acd66147e80ec45a567f6ce66d05ec0cae679dceeb890017\",\n+        \"3940c1e92da4582ff6f92a776aeb14d014d384eeb30f660dacf70a14a23fd31e91212701334e2ce1acf5199dc84f4d61ddbe6571bca5af874b4c9226c26e650995d157644e1848b96ed6c2102d5489a050e71d29a5a66ece11de5fb5c9558d54da28fe45b0bc4db4e5b88030bfc4a352b4b7068eccf656bae7ad6a35615315fc7c49d4200388d5eca67c2e822e069336c69b40db67e0f3c81209c50f3216a4b89fb3ae1b984b7851a2ec6f68ab12b101ab120e1ea7313bb93b5a0f71185c7fea017ddb92769861c29dba4fbc432280d5dff21b36d1c4c790128b22699950bb18bf74c448cdfe547d8ed4f657d8005fdc0cd7a050c2d46050a44c4376355858981fbe8b184288276e7a93eabc899c4a\",\n+        \"f039c6689eaeef0456685200feaab9d54bbd9acde4410a3b6f4321296f4a8ca2604b49727d8892c57e005d799b2a38e85e809f20146e08eec75169691c8d4f54a0d51a1e1c7b381e0474eb02f994be9415ef3ffcbd2343f0601e1f3b172a1d494f838824e4df570f8e3b0c04e27966e36c82abd352d07054ef7bd36b84c63f9369afe7ed79b94f953873006b920c3fa251a771de1b63da927058ade119aa898b8c97e42a606b2f6df1e2d957c22f7593c1e2002f4252f4c9ae4bf773499e5cfcfe14dfc1ede26508953f88553bf4a76a802f6a0068d59295b01503fd9a600067624203e880fdf53933b96e1f4d9eb3f4e363dd8165a278ff667a41ee42b9892b077cefff92b93441f7be74cf10e6cd\");\n+}\n+\n BOOST_AUTO_TEST_CASE(countbits_tests)\n {\n     FastRandomContext ctx;"
      }
    ]
  },
  {
    "sha": "6f68673beec64317dbdfbf6fb6bd34195d506f50",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZjY4NjczYmVlYzY0MzE3ZGJkZmJmNmZiNmJkMzQxOTVkNTA2ZjUw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-18T14:27:55Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:25Z"
      },
      "message": "Add ChaCha20Poly1305@Bitcoin AEAD benchmark",
      "tree": {
        "sha": "ef53ff67ea66998f386b086272c72abb14baf969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef53ff67ea66998f386b086272c72abb14baf969"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6f68673beec64317dbdfbf6fb6bd34195d506f50",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIyBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziezEACgkQHrd2uwPH\nki3V3Q/46UaqgGlP9UdPHM/iBe+VH7qBggDhQDzeKeahHLQTRn0FqCqT9Z5f6MCC\nou7cVGDHfOz0kHKu4rwCuf2aeRGMCU4k9tI0Y9AygUL++M8pNzZUCswrk2H3FrDy\nW80a2zwo/qtz1bxo2PywoqCY1Yw0WHH+Q3xxuxi+ji4pwPrpDfLrbKk8jrHXE9OV\nsLalWW8yMcSrflxJakLlyk8m5cHP2hRhWBTQrmbiCjpb4hr/DYyNndavb8Q8j2Mq\nOlP2WIj9vAdVwEJzxQJG1eThAr1N87woG0zVnxJJYNYll68GwHf10IZht3kSW9Rp\nPGEgYIPf/ZExazXvK0hG2Z4qACCwQJpoAwgAXGOOUVHh3RRIfAEvNi6VCgi7z3rk\n7Z7y4OFyxu9Cch/3ZIn6HodCRaFfVwW4FeBLTLAt78MxyI37QiU5H3isCe1tbogZ\nz9H5gN+3XGGoCoNc43J+gJvD3O5K7tY7CXmKTWO9CkHW/taGwCm0At/J9jjZ8fmd\nhbNG/nA2v8wmMgoDlM2VYDQBoTQxMcbZH0nZB0yy7yq+19bvI75rlL/BhLK5wsVe\n1A/BDyuy9q8SOD6zrIPhsizhuHUeCxJXCiaWlItNO8gUL/Br1Amvk7ywpnbTeyvb\n77sShr70MQAs8BQSXWrc4tWr2VNNvuCzNAyJln7DIqWjLoBb6g==\n=qqAf\n-----END PGP SIGNATURE-----",
        "payload": "tree ef53ff67ea66998f386b086272c72abb14baf969\nparent 7c93eb7f04273cef56e8bb63c504a23564ff4220\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552919275 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346545 +0200\n\nAdd ChaCha20Poly1305@Bitcoin AEAD benchmark\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f68673beec64317dbdfbf6fb6bd34195d506f50",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6f68673beec64317dbdfbf6fb6bd34195d506f50",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f68673beec64317dbdfbf6fb6bd34195d506f50/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "7c93eb7f04273cef56e8bb63c504a23564ff4220",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7c93eb7f04273cef56e8bb63c504a23564ff4220",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/7c93eb7f04273cef56e8bb63c504a23564ff4220"
      }
    ],
    "stats": {
      "total": 124,
      "additions": 124,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14bf619fb286980d91ef322ca9c827f2cdab81d5",
        "filename": "src/Makefile.bench.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f68673beec64317dbdfbf6fb6bd34195d506f50/src/Makefile.bench.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f68673beec64317dbdfbf6fb6bd34195d506f50/src/Makefile.bench.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.bench.include?ref=6f68673beec64317dbdfbf6fb6bd34195d506f50",
        "patch": "@@ -22,6 +22,7 @@ bench_bench_bitcoin_SOURCES = \\\n   bench/examples.cpp \\\n   bench/rollingbloom.cpp \\\n   bench/chacha20.cpp \\\n+  bench/chacha_poly_aead.cpp \\\n   bench/crypto_hash.cpp \\\n   bench/ccoins_caching.cpp \\\n   bench/gcs_filter.cpp \\"
      },
      {
        "sha": "f5f729749042aa9f72234238935ec0b93ac21798",
        "filename": "src/bench/chacha_poly_aead.cpp",
        "status": "added",
        "additions": 123,
        "deletions": 0,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6f68673beec64317dbdfbf6fb6bd34195d506f50/src/bench/chacha_poly_aead.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6f68673beec64317dbdfbf6fb6bd34195d506f50/src/bench/chacha_poly_aead.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bench/chacha_poly_aead.cpp?ref=6f68673beec64317dbdfbf6fb6bd34195d506f50",
        "patch": "@@ -0,0 +1,123 @@\n+// Copyright (c) 2019 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <iostream>\n+\n+#include <bench/bench.h>\n+#include <crypto/chacha_poly_aead.h>\n+#include <crypto/poly1305.h> // for the POLY1305_TAGLEN constant\n+#include <hash.h>\n+\n+#include <limits>\n+#include <assert.h>\n+\n+/* Number of bytes to process per iteration */\n+static constexpr uint64_t BUFFER_SIZE_TINY = 64;\n+static constexpr uint64_t BUFFER_SIZE_SMALL = 256;\n+static constexpr uint64_t BUFFER_SIZE_LARGE = 1024 * 1024;\n+\n+static const unsigned char k1[32] = {0};\n+static const unsigned char k2[32] = {0};\n+\n+static ChaCha20Poly1305AEAD aead(k1, 32, k2, 32);\n+\n+static void CHACHA20_POLY1305_AEAD(benchmark::State& state, size_t buffersize, bool include_decryption)\n+{\n+    std::vector<unsigned char> in(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    std::vector<unsigned char> out(buffersize + CHACHA20_POLY1305_AEAD_AAD_LEN + POLY1305_TAGLEN, 0);\n+    uint64_t seqnr_payload = 0;\n+    uint64_t seqnr_aad = 0;\n+    int aad_pos = 0;\n+    uint32_t len = 0;\n+    while (state.KeepRunning()) {\n+        // encrypt or decrypt the buffer with a static key\n+        assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+\n+        if (include_decryption) {\n+            // if we decrypt, include the GetLength\n+            assert(aead.GetLength(&len, seqnr_aad, aad_pos, in.data()));\n+            assert(aead.Crypt(seqnr_payload, seqnr_aad, aad_pos, out.data(), out.size(), in.data(), buffersize, true));\n+        }\n+\n+        // increase main sequence number\n+        seqnr_payload++;\n+        // increase aad position (position in AAD keystream)\n+        aad_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+        if (aad_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+            aad_pos = 0;\n+            seqnr_aad++;\n+        }\n+        if (seqnr_payload + 1 == std::numeric_limits<uint64_t>::max()) {\n+            // reuse of nonce+key is okay while benchmarking.\n+            seqnr_payload = 0;\n+            seqnr_aad = 0;\n+            aad_pos = 0;\n+        }\n+    }\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, false);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_TINY, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_SMALL, true);\n+}\n+\n+static void CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT(benchmark::State& state)\n+{\n+    CHACHA20_POLY1305_AEAD(state, BUFFER_SIZE_LARGE, true);\n+}\n+\n+// Add Hash() (dbl-sha256) bench for comparison\n+\n+static void HASH(benchmark::State& state, size_t buffersize)\n+{\n+    uint8_t hash[CHash256::OUTPUT_SIZE];\n+    std::vector<uint8_t> in(buffersize,0);\n+    while (state.KeepRunning())\n+        CHash256().Write(in.data(), in.size()).Finalize(hash);\n+}\n+\n+static void HASH_64BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_TINY);\n+}\n+\n+static void HASH_256BYTES(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_SMALL);\n+}\n+\n+static void HASH_1MB(benchmark::State& state)\n+{\n+    HASH(state, BUFFER_SIZE_LARGE);\n+}\n+\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ONLY_ENCRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ONLY_ENCRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ONLY_ENCRYPT, 340);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_64BYTES_ENCRYPT_DECRYPT, 500000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_256BYTES_ENCRYPT_DECRYPT, 250000);\n+BENCHMARK(CHACHA20_POLY1305_AEAD_1MB_ENCRYPT_DECRYPT, 340);\n+BENCHMARK(HASH_64BYTES, 500000);\n+BENCHMARK(HASH_256BYTES, 250000);\n+BENCHMARK(HASH_1MB, 340);"
      }
    ]
  },
  {
    "sha": "97f065509e55e39687e602ace2ff3bd19adb6f57",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5N2YwNjU1MDllNTVlMzk2ODdlNjAyYWNlMmZmM2JkMTlhZGI2ZjU3",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T16:26:39Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:35Z"
      },
      "message": "==== REFACTORING ====",
      "tree": {
        "sha": "ef53ff67ea66998f386b086272c72abb14baf969",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ef53ff67ea66998f386b086272c72abb14baf969"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/97f065509e55e39687e602ace2ff3bd19adb6f57",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlziezsACgkQHrd2uwPH\nki0QDw/8DANW6x8I6OddAUD0Bo41jiqWBbQkgWksT3qldllg87yj6Z0hNzgeSaHj\nYQPYETHd1B5EXgESZb5iZe75WghGRqRSIF+4N1un3Fn3b5iggQSvTGYWEh3B7OjB\n9CgbSyeNlsLL9LUaB9FTbr2fDPhmj1oQAx5cBOO9oOx0zVtZvVu80nveqfunay+L\nR68Q8O6BqED9+/8ddMkqRaT6rxxxAgdWEr/AstCqGFzBNOBo2L30p+IkmwgoOP0B\njfesLJfcUxDPqcI9OMASijxSMApg/snYHx1CSPcbTr+VBEQ7DR8Yfzy+lxwRFLSm\nPeAG7S6YPp6T8iWzRfZDL2bpxpI4g5YgiDRl1NI39k5p0ZMzuFzK6e9UHHYq1Vfu\nUEtMReNTH6q3QzXwejgcxx4LCbkWyeL98xOPaNnPjTtr7Ax7+vpzBFNDfoSCiQp8\n+z6PUldUkCxMEtAi1Dle+XT4vAKqyyPxxqcjkvBcPUBu4cTpCTS/T6BvRVDWGN6V\n01wcTIxXPKXQkSNKSMGSX/4pVQQigHB6uV+be3m5bXkhvIBQn1uVWXE8ycP1UKZj\nEDgBDw4usCEcMyqcIDwtW0Mqg6W4kS8FvyMttKIs9i2cadQh6M6OQfln0p0Hiczk\nx/MytK+bNXFlRdZ5iMgE+CMUzwOZmCPyrGBFk/NJmelR6y3W4Zo=\n=Lcka\n-----END PGP SIGNATURE-----",
        "payload": "tree ef53ff67ea66998f386b086272c72abb14baf969\nparent 6f68673beec64317dbdfbf6fb6bd34195d506f50\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552321599 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346555 +0200\n\n==== REFACTORING ====\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f065509e55e39687e602ace2ff3bd19adb6f57",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/97f065509e55e39687e602ace2ff3bd19adb6f57",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f065509e55e39687e602ace2ff3bd19adb6f57/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6f68673beec64317dbdfbf6fb6bd34195d506f50",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6f68673beec64317dbdfbf6fb6bd34195d506f50",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6f68673beec64317dbdfbf6fb6bd34195d506f50"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "a3a9a79f91a455e61bae1532226ae3df90eb9721",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphM2E5YTc5ZjkxYTQ1NWU2MWJhZTE1MzIyMjZhZTNkZjkwZWI5NzIx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-06T14:22:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:43Z"
      },
      "message": "Use unique pointers for CNetMessage handling",
      "tree": {
        "sha": "4c59212116e4cc531619a0fb9957e4ba8b8ce11d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/4c59212116e4cc531619a0fb9957e4ba8b8ce11d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a3a9a79f91a455e61bae1532226ae3df90eb9721",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie0MACgkQHrd2uwPH\nki20RQ/+MfNNNW2po/sLvJq9UNIfwbDMfBLeDWmfIB+7vOWl9zlI+hW5RJt9OCFx\nFmbx7fvwtfJDwWStamu0bKi61Yv18IY1PsEvc709fRL3qzUrBfucLy5ji6zJqs/L\nvkumNvMJHv7xVg2j3fTDdEeC7SBzEfyyvv/i5LQP48Nbly+qf1KYjbMvDz8OUEPT\n868Nv2fF3vX0E4nea5LuEPGq3mDqwOk3jT+D6LWmxZaTD5VVw7zz0YyumXSrLBoR\nyRuiXWuEjGNH46/8V8CsB2ybWBbkmXJ6l5rR+jzlHkYmHQc3OHjzKY5F6VQ8miw8\nKQBYDvg0Y9ffrEe/ZEi39XCJ9WAgupWGuz9Z34IGUqy5JtySKiY9c5oNZmlDx+YT\nMkzXOTISxww0q0lobHHwgNkzmCH6u4ZVgvzAVPLLyjdE7q7lcgtx/+egA90y3M+R\nB8sffrhi2MflMGA/u3ajkIxm3GErd03Z9Mtp/Be6rHN/wpQi+Ok9NDMnzq9J4TA/\nijS3Rveyi/TQDMBScO0ltG/FNgYe/xMydUN87pnuZgEL080eZEdfQWMJSNTjXuKv\ns7hYKvvUllXPW/gFej4XYBKsnJjNorG36xA3k504rd9ZDI9S+73/A7CVpMw4ZeGN\nxfYJw/m/tdvSRFGaEoWBHdFbdPz2fHUblWr+Ag7sdY1Zbi2ejTo=\n=ffAE\n-----END PGP SIGNATURE-----",
        "payload": "tree 4c59212116e4cc531619a0fb9957e4ba8b8ce11d\nparent 97f065509e55e39687e602ace2ff3bd19adb6f57\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533565340 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346563 +0200\n\nUse unique pointers for CNetMessage handling\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a9a79f91a455e61bae1532226ae3df90eb9721",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a3a9a79f91a455e61bae1532226ae3df90eb9721",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a9a79f91a455e61bae1532226ae3df90eb9721/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "97f065509e55e39687e602ace2ff3bd19adb6f57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/97f065509e55e39687e602ace2ff3bd19adb6f57",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/97f065509e55e39687e602ace2ff3bd19adb6f57"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 27,
      "deletions": 26
    },
    "files": [
      {
        "sha": "bb1ccca87c3dd1456e58991b99eac03ff05042d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 14,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=a3a9a79f91a455e61bae1532226ae3df90eb9721",
        "patch": "@@ -562,40 +562,40 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n-        if (vRecvMsg.empty() ||\n-            vRecvMsg.back().complete())\n-            vRecvMsg.push_back(CNetMessage(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        if (vRecvMsg.empty() || vRecvMsg.back()->complete()) {\n+            vRecvMsg.emplace_back(MakeUnique<CNetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        }\n \n-        CNetMessage& msg = vRecvMsg.back();\n+        CNetMessageRef& msg = vRecvMsg.back();\n \n         // absorb network data\n         int handled;\n-        if (!msg.in_data)\n-            handled = msg.readHeader(pch, nBytes);\n+        if (!msg->in_data)\n+            handled = msg->readHeader(pch, nBytes);\n         else\n-            handled = msg.readData(pch, nBytes);\n+            handled = msg->readData(pch, nBytes);\n \n         if (handled < 0)\n             return false;\n \n-        if (msg.in_data && msg.hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+        if (msg->in_data && msg->hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n \n         pch += handled;\n         nBytes -= handled;\n \n-        if (msg.complete()) {\n+        if (msg->complete()) {\n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg.hdr.pchCommand);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->hdr.pchCommand);\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg.hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+            i->second += msg->hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n \n-            msg.nTime = nTimeMicros;\n+            msg->nTime = nTimeMicros;\n             complete = true;\n         }\n     }\n@@ -1313,9 +1313,9 @@ void CConnman::SocketHandler()\n                     size_t nSizeAdded = 0;\n                     auto it(pnode->vRecvMsg.begin());\n                     for (; it != pnode->vRecvMsg.end(); ++it) {\n-                        if (!it->complete())\n+                        if (!it->get()->complete())\n                             break;\n-                        nSizeAdded += it->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                        nSizeAdded += it->get()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n                     }\n                     {\n                         LOCK(pnode->cs_vProcessMsg);"
      },
      {
        "sha": "8ed3d9d92d7e51f31a649ebae5894d9c6681d77d",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=a3a9a79f91a455e61bae1532226ae3df90eb9721",
        "patch": "@@ -614,6 +614,7 @@ class CNetMessage {\n     int readData(const char *pch, unsigned int nBytes);\n };\n \n+typedef std::unique_ptr<CNetMessage> CNetMessageRef;\n \n /** Information about a peer */\n class CNode\n@@ -632,7 +633,7 @@ class CNode\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessage> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n+    std::list<CNetMessageRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n     CCriticalSection cs_sendProcessing;\n@@ -753,7 +754,7 @@ class CNode\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n-    std::list<CNetMessage> vRecvMsg;  // Used only by SocketHandler thread\n+    std::list<CNetMessageRef> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);"
      },
      {
        "sha": "0483c745cad6fbd79561071106d12d35157dea04",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a3a9a79f91a455e61bae1532226ae3df90eb9721/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=a3a9a79f91a455e61bae1532226ae3df90eb9721",
        "patch": "@@ -3228,29 +3228,29 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (pfrom->fPauseSend)\n         return false;\n \n-    std::list<CNetMessage> msgs;\n+    std::list<CNetMessageRef> msgs;\n     {\n         LOCK(pfrom->cs_vProcessMsg);\n         if (pfrom->vProcessMsg.empty())\n             return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n-        pfrom->nProcessQueueSize -= msgs.front().vRecv.size() + CMessageHeader::HEADER_SIZE;\n+        pfrom->nProcessQueueSize -= msgs.front()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n         pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n-    CNetMessage& msg(msgs.front());\n+    CNetMessageRef& msg(msgs.front());\n \n-    msg.SetVersion(pfrom->GetRecvVersion());\n+    msg->SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n-    if (memcmp(msg.hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg.hdr.GetCommand()), pfrom->GetId());\n+    if (memcmp(msg->hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->hdr.GetCommand()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n \n     // Read header\n-    CMessageHeader& hdr = msg.hdr;\n+    CMessageHeader& hdr = msg->hdr;\n     if (!hdr.IsValid(chainparams.MessageStart()))\n     {\n         LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n@@ -3262,8 +3262,8 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     unsigned int nMessageSize = hdr.nMessageSize;\n \n     // Checksum\n-    CDataStream& vRecv = msg.vRecv;\n-    const uint256& hash = msg.GetMessageHash();\n+    CDataStream& vRecv = msg->vRecv;\n+    const uint256& hash = msg->GetMessageHash();\n     if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n     {\n         LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n@@ -3277,7 +3277,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg.nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg->nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      }
    ]
  },
  {
    "sha": "99c378dcf08925cda0a6f12c1c79c2e4cac30549",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5OWMzNzhkY2YwODkyNWNkYTBhNmYxMmMxYzc5YzJlNGNhYzMwNTQ5",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-06T19:37:35Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:46Z"
      },
      "message": "Split off format specific details from CNetMessage",
      "tree": {
        "sha": "3b6a5cb57eb6e578c919c4c1819bba41f85bf70f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b6a5cb57eb6e578c919c4c1819bba41f85bf70f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/99c378dcf08925cda0a6f12c1c79c2e4cac30549",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie0YACgkQHrd2uwPH\nki0n3RAAsnx28wSpu5ziLpUT8grYnoAI5CapcTu44p9XnSO9ntHsNnPsAYISPW5s\nnzKPaMqDXERQ1OFhQWYRIrt3zMG1o2R4Qqkchz7gx1+JE+5i447uzbC6k+P3rpZa\ngNbK4be3VThrFOUoxVjaSzC41flV0NeSsw7al9+gV2SDSHWe2yF0LrJ0BoZS5Jcg\n9+uFj82mVntI80GiBaAJYnVPLpysSezOfkK77iduMLpYgPJqRYsiRNGsho3CRARl\njbb7KWLyPznJFP2zeUTFfeCJrfhTsz0XStzk19Z9wBBns1U3iOeVovw+/nec9C+G\nhUYV3e0bUyPo1zew4820uoeU/i4CrWaaRLsBY0Seoy/gpyZtHupIjfIsLaE+mvnz\naF+NqZ9G0qnkU77ePjlenASYqGOiYY6+Lm/e2ybfO0DpMPUBOvnBJ27FHHClJbtB\nY2NsiKQ4BSd6UqRwGZgaiJsk89sNyXspkwma5aWAGJb1bTnRm4Of9BIxs0HbC5B8\n0JXzAqsE8lKKcY1+19/M3nWIKa6C7IkUFPZJzW/i1ZFCnuboXkbsmscJre84+5lp\nZCV4VPalsHZPxKurk5IdgQ+qL1+Zv5LGYFUWgSGPxdJbprVfonO4UJRU/odN2g+g\nJHL8TV5BBPcMlgu332kCkdXNroTGj7h9m+tBTqsRIvdC7wbZIqM=\n=B/3C\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b6a5cb57eb6e578c919c4c1819bba41f85bf70f\nparent a3a9a79f91a455e61bae1532226ae3df90eb9721\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533584255 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346566 +0200\n\nSplit off format specific details from CNetMessage\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c378dcf08925cda0a6f12c1c79c2e4cac30549",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/99c378dcf08925cda0a6f12c1c79c2e4cac30549",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c378dcf08925cda0a6f12c1c79c2e4cac30549/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a3a9a79f91a455e61bae1532226ae3df90eb9721",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a3a9a79f91a455e61bae1532226ae3df90eb9721",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a3a9a79f91a455e61bae1532226ae3df90eb9721"
      }
    ],
    "stats": {
      "total": 171,
      "additions": 121,
      "deletions": 50
    },
    "files": [
      {
        "sha": "4b4df3535e4d041352a407342c5f7037a03ca880",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 42,
        "deletions": 18,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=99c378dcf08925cda0a6f12c1c79c2e4cac30549",
        "patch": "@@ -562,38 +562,34 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     while (nBytes > 0) {\n \n         // get current incomplete message, or create a new one\n-        if (vRecvMsg.empty() || vRecvMsg.back()->complete()) {\n-            vRecvMsg.emplace_back(MakeUnique<CNetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+        if (vRecvMsg.empty() || vRecvMsg.back()->Complete()) {\n+            vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n         }\n \n-        CNetMessageRef& msg = vRecvMsg.back();\n+        NetMessageBaseRef& msg = vRecvMsg.back();\n \n         // absorb network data\n-        int handled;\n-        if (!msg->in_data)\n-            handled = msg->readHeader(pch, nBytes);\n-        else\n-            handled = msg->readData(pch, nBytes);\n+        int handled = msg->Read(pch, nBytes);\n \n         if (handled < 0)\n             return false;\n \n-        if (msg->in_data && msg->hdr.nMessageSize > MAX_PROTOCOL_MESSAGE_LENGTH) {\n+        if (msg->GetMessageSize() > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n             return false;\n         }\n \n         pch += handled;\n         nBytes -= handled;\n \n-        if (msg->complete()) {\n+        if (msg->Complete()) {\n             //store received bytes per message command\n             //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->hdr.pchCommand);\n+            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->GetCommandName());\n             if (i == mapRecvBytesPerMsgCmd.end())\n                 i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n             assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg->hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+            i->second += msg->GetMessageSizeWithHeader();\n \n             msg->nTime = nTimeMicros;\n             complete = true;\n@@ -630,7 +626,12 @@ int CNode::GetSendVersion() const\n }\n \n \n-int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n+int NetMessage::Read(const char* pch, unsigned int nBytes)\n+{\n+    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n+}\n+\n+int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n {\n     // copy data to temporary parsing buffer\n     unsigned int nRemaining = 24 - nHdrPos;\n@@ -661,7 +662,7 @@ int CNetMessage::readHeader(const char *pch, unsigned int nBytes)\n     return nCopy;\n }\n \n-int CNetMessage::readData(const char *pch, unsigned int nBytes)\n+int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n {\n     unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n     unsigned int nCopy = std::min(nRemaining, nBytes);\n@@ -678,14 +679,37 @@ int CNetMessage::readData(const char *pch, unsigned int nBytes)\n     return nCopy;\n }\n \n-const uint256& CNetMessage::GetMessageHash() const\n+const uint256& NetMessage::GetMessageHash() const\n {\n-    assert(complete());\n+    assert(Complete());\n     if (data_hash.IsNull())\n         hasher.Finalize(data_hash.begin());\n     return data_hash;\n }\n \n+bool NetMessage::VerifyMessageStart() const\n+{\n+    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n+}\n+\n+bool NetMessage::VerifyHeader() const\n+{\n+    return hdr.IsValid(Params().MessageStart());\n+}\n+\n+bool NetMessage::VerifyChecksum(std::string& error) const\n+{\n+    const uint256& hash = GetMessageHash();\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n+        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n+            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n+            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n+        return false;\n+    }\n+    return true;\n+}\n+\n+\n size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();\n@@ -1313,9 +1337,9 @@ void CConnman::SocketHandler()\n                     size_t nSizeAdded = 0;\n                     auto it(pnode->vRecvMsg.begin());\n                     for (; it != pnode->vRecvMsg.end(); ++it) {\n-                        if (!it->get()->complete())\n+                        if (!it->get()->Complete())\n                             break;\n-                        nSizeAdded += it->get()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+                        nSizeAdded += it->get()->GetMessageSizeWithHeader();\n                     }\n                     {\n                         LOCK(pnode->cs_vProcessMsg);"
      },
      {
        "sha": "bd87d74dd4cac0ffe7e7cc15e321d0d22a2c84c8",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 65,
        "deletions": 14,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=99c378dcf08925cda0a6f12c1c79c2e4cac30549",
        "patch": "@@ -569,9 +569,40 @@ class CNodeStats\n };\n \n \n+// base class for format agnostic network messages\n+class NetMessageBase\n+{\n+public:\n+    CDataStream vRecv; // received message data\n+    int64_t nTime;     // time (in microseconds) of message receipt.\n+\n+    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n+    {\n+        nTime = 0;\n+    }\n+    virtual ~NetMessageBase() {}\n \n+    virtual bool Complete() const = 0;\n+    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n+    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n \n-class CNetMessage {\n+    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n+\n+    virtual void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+\n+    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n+\n+    virtual bool VerifyMessageStart() const = 0;\n+    virtual bool VerifyHeader() const = 0;\n+    virtual bool VerifyChecksum(std::string& error) const = 0;\n+};\n+\n+//basic network message for the currently used unencrypted p2p communication\n+class NetMessage : public NetMessageBase\n+{\n private:\n     mutable CHash256 hasher;\n     mutable uint256 data_hash;\n@@ -582,39 +613,59 @@ class CNetMessage {\n     CMessageHeader hdr;             // complete header\n     unsigned int nHdrPos;\n \n-    CDataStream vRecv;              // received message data\n     unsigned int nDataPos;\n \n-    int64_t nTime;                  // time (in microseconds) of message receipt.\n-\n-    CNetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn), vRecv(nTypeIn, nVersionIn) {\n+    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n+    {\n         hdrbuf.resize(24);\n         in_data = false;\n         nHdrPos = 0;\n         nDataPos = 0;\n-        nTime = 0;\n     }\n \n-    bool complete() const\n+    bool Complete() const override\n     {\n         if (!in_data)\n             return false;\n         return (hdr.nMessageSize == nDataPos);\n     }\n \n+    uint32_t GetMessageSize() const override\n+    {\n+        if (!in_data) {\n+            return 0;\n+        }\n+        return hdr.nMessageSize;\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return hdr.pchCommand;\n+    }\n+\n     const uint256& GetMessageHash() const;\n \n-    void SetVersion(int nVersionIn)\n+    void SetVersion(int nVersionIn) override\n     {\n         hdrbuf.SetVersion(nVersionIn);\n-        vRecv.SetVersion(nVersionIn);\n+        NetMessageBase::SetVersion(nVersionIn);\n     }\n \n-    int readHeader(const char *pch, unsigned int nBytes);\n-    int readData(const char *pch, unsigned int nBytes);\n+    int Read(const char* pch, unsigned int nBytes) override;\n+    int ReadHeader(const char *pch, unsigned int nBytes);\n+    int ReadData(const char *pch, unsigned int nBytes);\n+\n+    bool VerifyMessageStart() const override;\n+    bool VerifyHeader() const override;\n+    bool VerifyChecksum(std::string& error) const override;\n };\n \n-typedef std::unique_ptr<CNetMessage> CNetMessageRef;\n+using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n \n /** Information about a peer */\n class CNode\n@@ -633,7 +684,7 @@ class CNode\n     CCriticalSection cs_vRecv;\n \n     CCriticalSection cs_vProcessMsg;\n-    std::list<CNetMessageRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n+    std::list<NetMessageBaseRef> vProcessMsg GUARDED_BY(cs_vProcessMsg);\n     size_t nProcessQueueSize{0};\n \n     CCriticalSection cs_sendProcessing;\n@@ -754,7 +805,7 @@ class CNode\n     const ServiceFlags nLocalServices;\n     const int nMyStartingHeight;\n     int nSendVersion{0};\n-    std::list<CNetMessageRef> vRecvMsg;  // Used only by SocketHandler thread\n+    std::list<NetMessageBaseRef> vRecvMsg;  // Used only by SocketHandler thread\n \n     mutable CCriticalSection cs_addrName;\n     std::string addrName GUARDED_BY(cs_addrName);"
      },
      {
        "sha": "c0b604a78e2b4af77f1bc55e49617cfb593f470c",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 14,
        "deletions": 18,
        "changes": 32,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/99c378dcf08925cda0a6f12c1c79c2e4cac30549/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=99c378dcf08925cda0a6f12c1c79c2e4cac30549",
        "patch": "@@ -3228,48 +3228,44 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     if (pfrom->fPauseSend)\n         return false;\n \n-    std::list<CNetMessageRef> msgs;\n+    std::list<NetMessageBaseRef> msgs;\n     {\n         LOCK(pfrom->cs_vProcessMsg);\n         if (pfrom->vProcessMsg.empty())\n             return false;\n         // Just take one message\n         msgs.splice(msgs.begin(), pfrom->vProcessMsg, pfrom->vProcessMsg.begin());\n-        pfrom->nProcessQueueSize -= msgs.front()->vRecv.size() + CMessageHeader::HEADER_SIZE;\n+        pfrom->nProcessQueueSize -= msgs.front()->GetMessageSizeWithHeader();\n         pfrom->fPauseRecv = pfrom->nProcessQueueSize > connman->GetReceiveFloodSize();\n         fMoreWork = !pfrom->vProcessMsg.empty();\n     }\n-    CNetMessageRef& msg(msgs.front());\n+    NetMessageBaseRef& msg = msgs.front();\n+    assert(msg != nullptr);\n \n     msg->SetVersion(pfrom->GetRecvVersion());\n     // Scan for message start\n-    if (memcmp(msg->hdr.pchMessageStart, chainparams.MessageStart(), CMessageHeader::MESSAGE_START_SIZE) != 0) {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->hdr.GetCommand()), pfrom->GetId());\n+    if (!msg->VerifyMessageStart()) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: INVALID MESSAGESTART %s peer=%d\\n\", SanitizeString(msg->GetCommandName()), pfrom->GetId());\n         pfrom->fDisconnect = true;\n         return false;\n     }\n \n     // Read header\n-    CMessageHeader& hdr = msg->hdr;\n-    if (!hdr.IsValid(chainparams.MessageStart()))\n-    {\n-        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(hdr.GetCommand()), pfrom->GetId());\n+    if (!msg->VerifyHeader()) {\n+        LogPrint(BCLog::NET, \"PROCESSMESSAGE: ERRORS IN HEADER %s peer=%d\\n\", SanitizeString(msg->GetCommandName()), pfrom->GetId());\n         return fMoreWork;\n     }\n-    std::string strCommand = hdr.GetCommand();\n+    std::string strCommand = msg->GetCommandName();\n \n     // Message size\n-    unsigned int nMessageSize = hdr.nMessageSize;\n+    unsigned int nMessageSize = msg->GetMessageSize();\n \n     // Checksum\n     CDataStream& vRecv = msg->vRecv;\n-    const uint256& hash = msg->GetMessageHash();\n-    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0)\n-    {\n-        LogPrint(BCLog::NET, \"%s(%s, %u bytes): CHECKSUM ERROR expected %s was %s\\n\", __func__,\n-           SanitizeString(strCommand), nMessageSize,\n-           HexStr(hash.begin(), hash.begin()+CMessageHeader::CHECKSUM_SIZE),\n-           HexStr(hdr.pchChecksum, hdr.pchChecksum+CMessageHeader::CHECKSUM_SIZE));\n+    std::string possibleError;\n+    if (!msg->VerifyChecksum(possibleError)) {\n+        LogPrint(BCLog::NET, \"%s(%s, %u bytes): %s\\n\", __func__,\n+            SanitizeString(strCommand), nMessageSize, possibleError);\n         return fMoreWork;\n     }\n "
      }
    ]
  },
  {
    "sha": "29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyOWEzYWMxMjIwNGY4MTQ5ZjJjYjhkNTAxYWM0N2M4ZDU2Zjc2OWUz",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-09T21:04:02Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:51Z"
      },
      "message": "Move NetMessage (NetMessageBase) to net_message.h/cpp",
      "tree": {
        "sha": "c53700ba47e1b2c0532b96c98fb2a9e2c5fe44d5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c53700ba47e1b2c0532b96c98fb2a9e2c5fe44d5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie0sACgkQHrd2uwPH\nki1gwxAAnvC7ei8pvte3hRy2NqODafKnGr9ivQOOP9117HnP9pBwhvn35klFX2ze\n43DfUFmhLunVX8Svt7dO51Z3QVDdJ0wSnm0ZbuNGCZQ3wkZeqf6B8h2KPdDKlzpY\nS5NQwxh6R893qL+YhHLwAZrzOzJLQX8CCwkqDPsvv+Kh/E+zMP7Q9cZ2RpKZs8Za\n8kpWtsKQsTL514iau9j6O8t870xcW1bVcUfW5Hw/tkX3MqEX1iGREFtYdQSYtRyO\nQUAfQVYASXSbeFAW11rYrGSH2F4/WzoIUQM6j4o2o86RlBPURXkmFeymkYvvbVKt\nkwea7EGz0EpgDWxNdKFzenab5KKzzCF0DnMpCbuwsAScc0HCAzSw0T4f0p9/u2KZ\njhA+dJoX1BQMfKjje14HpyRfZU7RrMTnKXTX0FcUDsybLMSXUrG14E2ddujnQ4MZ\ngjL2IQPv4jY78Ck5t6aQpUVQJtTePfQgpbycCF6QoeGEjkpnsNflCqs3d3GwR5wx\nBuUhJD07QRNILrrCPwICS3Dql4PhnpYtpTToY/49ilI6ByUHo7VzSHwYngoF7mZo\nlm0E07wCIlSwp6kdZxl61Wv6uH3w1cbGVv4L8n8u4Nc8gAxGvTiAXsINU0610H4i\nvZ7Y09Q2LGBsqmmAsZZDUBH8BMmAlRHC2V7vKmcqg+pyCPm+Ug4=\n=Qsw/\n-----END PGP SIGNATURE-----",
        "payload": "tree c53700ba47e1b2c0532b96c98fb2a9e2c5fe44d5\nparent 99c378dcf08925cda0a6f12c1c79c2e4cac30549\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533848642 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346571 +0200\n\nMove NetMessage (NetMessageBase) to net_message.h/cpp\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "99c378dcf08925cda0a6f12c1c79c2e4cac30549",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/99c378dcf08925cda0a6f12c1c79c2e4cac30549",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/99c378dcf08925cda0a6f12c1c79c2e4cac30549"
      }
    ],
    "stats": {
      "total": 399,
      "additions": 213,
      "deletions": 186
    },
    "files": [
      {
        "sha": "269fb727b042eef601900c83cf5284f0d378c64d",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "patch": "@@ -151,6 +151,7 @@ BITCOIN_CORE_H = \\\n   merkleblock.h \\\n   miner.h \\\n   net.h \\\n+  net_message.h \\\n   net_processing.h \\\n   netaddress.h \\\n   netbase.h \\\n@@ -271,6 +272,7 @@ libbitcoin_server_a_SOURCES = \\\n   dbwrapper.cpp \\\n   miner.cpp \\\n   net.cpp \\\n+  net_message.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\\n   node/psbt.cpp \\"
      },
      {
        "sha": "dee90ce210f3049c655c6b470110de0ae2c074e4",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 85,
        "changes": 85,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "patch": "@@ -625,91 +625,6 @@ int CNode::GetSendVersion() const\n     return nSendVersion;\n }\n \n-\n-int NetMessage::Read(const char* pch, unsigned int nBytes)\n-{\n-    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n-}\n-\n-int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n-{\n-    // copy data to temporary parsing buffer\n-    unsigned int nRemaining = 24 - nHdrPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n-\n-    memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n-    nHdrPos += nCopy;\n-\n-    // if header incomplete, exit\n-    if (nHdrPos < 24)\n-        return nCopy;\n-\n-    // deserialize to CMessageHeader\n-    try {\n-        hdrbuf >> hdr;\n-    }\n-    catch (const std::exception&) {\n-        return -1;\n-    }\n-\n-    // reject messages larger than MAX_SIZE\n-    if (hdr.nMessageSize > MAX_SIZE)\n-        return -1;\n-\n-    // switch state to reading message data\n-    in_data = true;\n-\n-    return nCopy;\n-}\n-\n-int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n-{\n-    unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n-    unsigned int nCopy = std::min(nRemaining, nBytes);\n-\n-    if (vRecv.size() < nDataPos + nCopy) {\n-        // Allocate up to 256 KiB ahead, but never more than the total message size.\n-        vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n-    }\n-\n-    hasher.Write((const unsigned char*)pch, nCopy);\n-    memcpy(&vRecv[nDataPos], pch, nCopy);\n-    nDataPos += nCopy;\n-\n-    return nCopy;\n-}\n-\n-const uint256& NetMessage::GetMessageHash() const\n-{\n-    assert(Complete());\n-    if (data_hash.IsNull())\n-        hasher.Finalize(data_hash.begin());\n-    return data_hash;\n-}\n-\n-bool NetMessage::VerifyMessageStart() const\n-{\n-    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n-}\n-\n-bool NetMessage::VerifyHeader() const\n-{\n-    return hdr.IsValid(Params().MessageStart());\n-}\n-\n-bool NetMessage::VerifyChecksum(std::string& error) const\n-{\n-    const uint256& hash = GetMessageHash();\n-    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n-        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n-            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n-            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n-        return false;\n-    }\n-    return true;\n-}\n-\n-\n size_t CConnman::SocketSendData(CNode *pnode) const EXCLUSIVE_LOCKS_REQUIRED(pnode->cs_vSend)\n {\n     auto it = pnode->vSendMsg.begin();"
      },
      {
        "sha": "d0b0be34d764345e5d7ec9f13f9ed0e43a2af217",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 101,
        "changes": 102,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "patch": "@@ -14,6 +14,7 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n+#include <net_message.h>\n #include <netaddress.h>\n #include <policy/feerate.h>\n #include <protocol.h>\n@@ -51,8 +52,6 @@ static const unsigned int MAX_INV_SZ = 50000;\n static const unsigned int MAX_LOCATOR_SZ = 101;\n /** The maximum number of new addresses to accumulate before announcing. */\n static const unsigned int MAX_ADDR_TO_SEND = 1000;\n-/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n-static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n /** Maximum length of the user agent string in `version` message */\n static const unsigned int MAX_SUBVERSION_LENGTH = 256;\n /** Maximum number of automatic outgoing nodes */\n@@ -568,105 +567,6 @@ class CNodeStats\n     CAddress addrBind;\n };\n \n-\n-// base class for format agnostic network messages\n-class NetMessageBase\n-{\n-public:\n-    CDataStream vRecv; // received message data\n-    int64_t nTime;     // time (in microseconds) of message receipt.\n-\n-    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n-    {\n-        nTime = 0;\n-    }\n-    virtual ~NetMessageBase() {}\n-\n-    virtual bool Complete() const = 0;\n-    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n-    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n-\n-    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n-\n-    virtual void SetVersion(int nVersionIn)\n-    {\n-        vRecv.SetVersion(nVersionIn);\n-    }\n-\n-    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n-\n-    virtual bool VerifyMessageStart() const = 0;\n-    virtual bool VerifyHeader() const = 0;\n-    virtual bool VerifyChecksum(std::string& error) const = 0;\n-};\n-\n-//basic network message for the currently used unencrypted p2p communication\n-class NetMessage : public NetMessageBase\n-{\n-private:\n-    mutable CHash256 hasher;\n-    mutable uint256 data_hash;\n-public:\n-    bool in_data;                   // parsing header (false) or data (true)\n-\n-    CDataStream hdrbuf;             // partially received header\n-    CMessageHeader hdr;             // complete header\n-    unsigned int nHdrPos;\n-\n-    unsigned int nDataPos;\n-\n-    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n-    {\n-        hdrbuf.resize(24);\n-        in_data = false;\n-        nHdrPos = 0;\n-        nDataPos = 0;\n-    }\n-\n-    bool Complete() const override\n-    {\n-        if (!in_data)\n-            return false;\n-        return (hdr.nMessageSize == nDataPos);\n-    }\n-\n-    uint32_t GetMessageSize() const override\n-    {\n-        if (!in_data) {\n-            return 0;\n-        }\n-        return hdr.nMessageSize;\n-    }\n-\n-    uint32_t GetMessageSizeWithHeader() const override\n-    {\n-        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n-    }\n-\n-    std::string GetCommandName() const override\n-    {\n-        return hdr.pchCommand;\n-    }\n-\n-    const uint256& GetMessageHash() const;\n-\n-    void SetVersion(int nVersionIn) override\n-    {\n-        hdrbuf.SetVersion(nVersionIn);\n-        NetMessageBase::SetVersion(nVersionIn);\n-    }\n-\n-    int Read(const char* pch, unsigned int nBytes) override;\n-    int ReadHeader(const char *pch, unsigned int nBytes);\n-    int ReadData(const char *pch, unsigned int nBytes);\n-\n-    bool VerifyMessageStart() const override;\n-    bool VerifyHeader() const override;\n-    bool VerifyChecksum(std::string& error) const override;\n-};\n-\n-using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n-\n /** Information about a peer */\n class CNode\n {"
      },
      {
        "sha": "eb7304eca578c308a6c0e9500e23a631460488de",
        "filename": "src/net_message.cpp",
        "status": "added",
        "additions": 96,
        "deletions": 0,
        "changes": 96,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net_message.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net_message.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_message.cpp?ref=29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "patch": "@@ -0,0 +1,96 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <net_message.h>\n+\n+#include <chainparams.h>\n+#include <tinyformat.h>\n+#include <util/strencodings.h>\n+\n+int NetMessage::Read(const char* pch, unsigned int nBytes)\n+{\n+    return in_data ? ReadData(pch, nBytes) : ReadHeader(pch, nBytes);\n+}\n+\n+int NetMessage::ReadHeader(const char* pch, unsigned int nBytes)\n+{\n+    // copy data to temporary parsing buffer\n+    unsigned int nRemaining = 24 - nHdrPos;\n+    unsigned int nCopy = std::min(nRemaining, nBytes);\n+\n+    memcpy(&hdrbuf[nHdrPos], pch, nCopy);\n+    nHdrPos += nCopy;\n+\n+    // if header incomplete, exit\n+    if (nHdrPos < 24)\n+        return nCopy;\n+\n+    // deserialize to CMessageHeader\n+    try {\n+        hdrbuf >> hdr;\n+    }\n+    catch (const std::exception&) {\n+        return -1;\n+    }\n+\n+    // reject messages larger than MAX_SIZE\n+    if (hdr.nMessageSize > MAX_SIZE)\n+        return -1;\n+\n+    // switch state to reading message data\n+    in_data = true;\n+\n+    return nCopy;\n+}\n+\n+int NetMessage::ReadData(const char* pch, unsigned int nBytes)\n+{\n+    unsigned int nRemaining = hdr.nMessageSize - nDataPos;\n+    unsigned int nCopy = std::min(nRemaining, nBytes);\n+\n+    if (vRecv.size() < nDataPos + nCopy) {\n+        // Allocate up to 256 KiB ahead, but never more than the total message size.\n+        vRecv.resize(std::min(hdr.nMessageSize, nDataPos + nCopy + 256 * 1024));\n+    }\n+\n+    hasher.Write((const unsigned char*)pch, nCopy);\n+    memcpy(&vRecv[nDataPos], pch, nCopy);\n+    nDataPos += nCopy;\n+\n+    return nCopy;\n+}\n+\n+const uint256& NetMessage::GetMessageHash() const\n+{\n+    assert(Complete());\n+    if (data_hash.IsNull())\n+        hasher.Finalize(data_hash.begin());\n+    return data_hash;\n+}\n+\n+bool NetMessage::VerifyMessageStart() const\n+{\n+    return (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0);\n+}\n+\n+bool NetMessage::VerifyHeader() const\n+{\n+    return hdr.IsValid(Params().MessageStart());\n+}\n+\n+bool NetMessage::VerifyChecksum(std::string& error) const\n+{\n+    const uint256& hash = GetMessageHash();\n+    if (memcmp(hash.begin(), hdr.pchChecksum, CMessageHeader::CHECKSUM_SIZE) != 0) {\n+        error = tfm::format(\"CHECKSUM ERROR expected %s was %s\\n\",\n+            HexStr(hash.begin(), hash.begin() + CMessageHeader::CHECKSUM_SIZE),\n+            HexStr(hdr.pchChecksum, hdr.pchChecksum + CMessageHeader::CHECKSUM_SIZE));\n+        return false;\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "a4bd92a32960fbab837a27c9e79c5ed9b2a664f8",
        "filename": "src/net_message.h",
        "status": "added",
        "additions": 114,
        "deletions": 0,
        "changes": 114,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net_message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/29a3ac12204f8149f2cb8d501ac47c8d56f769e3/src/net_message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_message.h?ref=29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "patch": "@@ -0,0 +1,114 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NET_MESSAGE_H\n+#define BITCOIN_NET_MESSAGE_H\n+\n+#include <hash.h>\n+#include <protocol.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+/** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n+static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n+\n+// base class for format agnostic network messages\n+class NetMessageBase\n+{\n+public:\n+    CDataStream vRecv; // received message data\n+    int64_t nTime;     // time (in microseconds) of message receipt.\n+\n+    NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n+    {\n+        nTime = 0;\n+    }\n+    virtual ~NetMessageBase() {}\n+\n+    virtual bool Complete() const = 0;\n+    virtual uint32_t GetMessageSize() const = 0;           //returns 0 when message has not yet been parsed\n+    virtual uint32_t GetMessageSizeWithHeader() const = 0; //return complete message size including header\n+\n+    virtual std::string GetCommandName() const = 0; //returns the command name. Returns an empty string when no command name is supported\n+\n+    virtual void SetVersion(int nVersionIn)\n+    {\n+        vRecv.SetVersion(nVersionIn);\n+    }\n+\n+    virtual int Read(const char* pch, unsigned int nBytes) = 0; //parse bytes\n+\n+    virtual bool VerifyMessageStart() const = 0;\n+    virtual bool VerifyHeader() const = 0;\n+    virtual bool VerifyChecksum(std::string& error) const = 0;\n+};\n+\n+//basic network message for the currently used unencrypted p2p communication\n+class NetMessage : public NetMessageBase\n+{\n+private:\n+    mutable CHash256 hasher;\n+    mutable uint256 data_hash;\n+public:\n+    bool in_data;                   // parsing header (false) or data (true)\n+\n+    CDataStream hdrbuf;             // partially received header\n+    CMessageHeader hdr;             // complete header\n+    unsigned int nHdrPos;\n+\n+    unsigned int nDataPos;\n+\n+    NetMessage(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn), hdrbuf(nTypeIn, nVersionIn), hdr(pchMessageStartIn)\n+    {\n+        hdrbuf.resize(24);\n+        in_data = false;\n+        nHdrPos = 0;\n+        nDataPos = 0;\n+    }\n+\n+    bool Complete() const override\n+    {\n+        if (!in_data)\n+            return false;\n+        return (hdr.nMessageSize == nDataPos);\n+    }\n+\n+    uint32_t GetMessageSize() const override\n+    {\n+        if (!in_data) {\n+            return 0;\n+        }\n+        return hdr.nMessageSize;\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return hdr.nMessageSize + CMessageHeader::HEADER_SIZE;\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return hdr.pchCommand;\n+    }\n+\n+    const uint256& GetMessageHash() const;\n+\n+    void SetVersion(int nVersionIn) override\n+    {\n+        hdrbuf.SetVersion(nVersionIn);\n+        NetMessageBase::SetVersion(nVersionIn);\n+    }\n+\n+    int Read(const char* pch, unsigned int nBytes) override;\n+    int ReadHeader(const char *pch, unsigned int nBytes);\n+    int ReadData(const char *pch, unsigned int nBytes);\n+\n+    bool VerifyMessageStart() const override;\n+    bool VerifyHeader() const override;\n+    bool VerifyChecksum(std::string& error) const override;\n+};\n+\n+using NetMessageBaseRef = std::unique_ptr<NetMessageBase>;\n+\n+#endif // BITCOIN_NET_MESSAGE_H"
      }
    ]
  },
  {
    "sha": "bd42fbde5c109602e4441df154580c8522c9a040",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZDQyZmJkZTVjMTA5NjAyZTQ0NDFkZjE1NDU4MGM4NTIyYzlhMDQw",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-24T08:42:20Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:02:51Z"
      },
      "message": "Factor out RecordRecvBytesPerMsgCmd()",
      "tree": {
        "sha": "e9d92360d30efa8af639df4a67ea9a1b4053aa0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9d92360d30efa8af639df4a67ea9a1b4053aa0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bd42fbde5c109602e4441df154580c8522c9a040",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie0sACgkQHrd2uwPH\nki0PNxAAw13cJyh+tkWVoj5npTsqunXXnx+3f9z1G7WSBg+tg7bsZ6Ri2GKAeBIx\n1kZ8BZakLazYn07Eu+2CWN/BpBbh7zHtcxTME9502rcxwIETJrzhVYcq0n/xs+1k\ndclIvIeQBsLRmS1LLLiDfxZz5jVWxCGaxlSuhSoVLBnL/FL+w03PJhF1yVnNgmDW\nAVuzAgWI7SKXnNB6TS5pr8XNmZ1eUnL6GpUBOXRwZj8C9wv4rchmzSl+dUTMAqX5\nZS1/L69uRlB3AToyyPb0yoeIKP2fSO1OnN7kFiW2DByLQMU9EI4tHNtGy9ZGxTfV\nj2a/sO6GcrG7n5+WaqVLp6+CqFgT5Gc7h1f7CmRnzxAUiQffWk1Vhzu+AXIbOuOn\n5axE+PRKw9sBimxhMVjo9Mpk2G3x4e+VnNHa/Cc2kf//i4q7lpfkc3uj28mh5SWk\nd5cT4WI8l1wEtDLLD4Zva3ZBqI6UeGsLaHpfNjlN95UtK6qCmuzFWE7E9ASLtoED\nQOGZ0rgd/HI2HTJf/Huq7t+7/6CVG5Hr5T+xARlqGiklrVnWSXaV6XiPrn2CPabG\no/o9oaPYBBwnSUqfbzQ0S77G+J0x3L5SAn9pzazxPtl9eQanTAPfbd4J2BL2V2SL\nL3R767iEj65WnK/RZeSIvnZOvaMY0x5LCB2nY9ZZFv0n1HeKJHM=\n=YEux\n-----END PGP SIGNATURE-----",
        "payload": "tree e9d92360d30efa8af639df4a67ea9a1b4053aa0d\nparent 29a3ac12204f8149f2cb8d501ac47c8d56f769e3\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535100140 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346571 +0200\n\nFactor out RecordRecvBytesPerMsgCmd()\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42fbde5c109602e4441df154580c8522c9a040",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bd42fbde5c109602e4441df154580c8522c9a040",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42fbde5c109602e4441df154580c8522c9a040/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/29a3ac12204f8149f2cb8d501ac47c8d56f769e3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/29a3ac12204f8149f2cb8d501ac47c8d56f769e3"
      }
    ],
    "stats": {
      "total": 22,
      "additions": 14,
      "deletions": 8
    },
    "files": [
      {
        "sha": "29d5c6b4af778bc53e5430f8dca2313efa539ff8",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 8,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd42fbde5c109602e4441df154580c8522c9a040/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd42fbde5c109602e4441df154580c8522c9a040/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bd42fbde5c109602e4441df154580c8522c9a040",
        "patch": "@@ -552,6 +552,17 @@ void CNode::copyStats(CNodeStats &stats)\n }\n #undef X\n \n+void CNode::RecordRecvBytesPerMsgCmd(const std::string& cmd, uint32_t bytes)\n+{\n+    //store received bytes per message command\n+    //to prevent a memory DOS, only allow valid commands\n+    mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(cmd);\n+    if (i == mapRecvBytesPerMsgCmd.end())\n+        i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n+    assert(i != mapRecvBytesPerMsgCmd.end());\n+    i->second += bytes;\n+}\n+\n bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete)\n {\n     complete = false;\n@@ -583,14 +594,7 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         nBytes -= handled;\n \n         if (msg->Complete()) {\n-            //store received bytes per message command\n-            //to prevent a memory DOS, only allow valid commands\n-            mapMsgCmdSize::iterator i = mapRecvBytesPerMsgCmd.find(msg->GetCommandName());\n-            if (i == mapRecvBytesPerMsgCmd.end())\n-                i = mapRecvBytesPerMsgCmd.find(NET_MESSAGE_COMMAND_OTHER);\n-            assert(i != mapRecvBytesPerMsgCmd.end());\n-            i->second += msg->GetMessageSizeWithHeader();\n-\n+            RecordRecvBytesPerMsgCmd(msg->GetCommandName(), msg->GetMessageSizeWithHeader());\n             msg->nTime = nTimeMicros;\n             complete = true;\n         }"
      },
      {
        "sha": "48abbe0569dd783100d42874a759a408e902ab47",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bd42fbde5c109602e4441df154580c8522c9a040/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bd42fbde5c109602e4441df154580c8522c9a040/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bd42fbde5c109602e4441df154580c8522c9a040",
        "patch": "@@ -713,6 +713,8 @@ class CNode\n     // Our address, as reported by the peer\n     CService addrLocal GUARDED_BY(cs_addrLocal);\n     mutable CCriticalSection cs_addrLocal;\n+\n+    void RecordRecvBytesPerMsgCmd(const std::string& cmd, uint32_t bytes) EXCLUSIVE_LOCKS_REQUIRED(cs_vRecv);\n public:\n \n     NodeId GetId() const {"
      }
    ]
  },
  {
    "sha": "1c3668004d584adbdbc172c285f56ea09104f255",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYzM2NjgwMDRkNTg0YWRiZGJjMTcyYzI4NWY1NmVhMDkxMDRmMjU1",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-03-11T19:34:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:03:03Z"
      },
      "message": "==== V2 P2P implementation ====",
      "tree": {
        "sha": "e9d92360d30efa8af639df4a67ea9a1b4053aa0d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9d92360d30efa8af639df4a67ea9a1b4053aa0d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1c3668004d584adbdbc172c285f56ea09104f255",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie1cACgkQHrd2uwPH\nki22Fw/+LPpJad4Rvf9VRpHOQNzIQo6gQYuKnn5hUdRKzgHZiDeDjObjAEWBrW22\nCSe05BBDx4qnEnXAu/eXqWpu4LMEWMxCt9sefv1UlV9AmXQFKZ0QXPvAwCnkYoh4\nErAwW5W00uJHyF+0LMcAoqLU6X7Jt484mRgB8Htr/KKFuTuMHZmmT1VqTmzCbBWZ\ncRa3lRnlnyT5JvRDjeiq7RM7/1q6x5cxzzMxfrUOBhRALEAfS1mjCqxKebE/LIzA\nbW8rSRetRIZXlv05miOOo3BdY81F2gDaDRoKAJXzpnq3Nvz3zCMq5nsyLUl/f/60\nXbPa9rFFschuHqrjr40SchotNoXfXk1epLaJYZPgc0lhBrNxhPJoqcLIzKrbdjFl\ntAmnL8a/ASlDwnFCoYhXSp0UhORmlTieKZThiPea2QWgjRXVznVPfomyzk5vBwYG\n44WNYsUuj/7y5Uv+k2drS91opqKx4MUZUwEAAATnFVHRf5iqiGxV4rt5sbEo8mW7\ndIxrFQi20krpkIzUakF90NOqscqw9/UQ9I/cYn0KAWWi7lp25vBid2YwWSlrBjqj\n99ToqqwutEPvOHBZ4d7ccsWnIO2RYiH3Ri0lbM+i0IwELvT/WhKrP1AwEQ9QH/Dm\nz1NwMWd/aaxvXlJhlAc9jP18HjCysS0i++9e97MobiQJOqCjc7A=\n=tWU2\n-----END PGP SIGNATURE-----",
        "payload": "tree e9d92360d30efa8af639df4a67ea9a1b4053aa0d\nparent bd42fbde5c109602e4441df154580c8522c9a040\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1552332898 +0100\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346583 +0200\n\n==== V2 P2P implementation ====\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3668004d584adbdbc172c285f56ea09104f255",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1c3668004d584adbdbc172c285f56ea09104f255",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3668004d584adbdbc172c285f56ea09104f255/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bd42fbde5c109602e4441df154580c8522c9a040",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bd42fbde5c109602e4441df154580c8522c9a040",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bd42fbde5c109602e4441df154580c8522c9a040"
      }
    ],
    "stats": {
      "total": 0,
      "additions": 0,
      "deletions": 0
    },
    "files": []
  },
  {
    "sha": "bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYWUxZWMyODczZGQyODBjMTRjZmJjY2JlYWY3N2I3NTM4OWNlNjBi",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-08T21:00:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:03:06Z"
      },
      "message": "Add new p2p message format for encrypted communication",
      "tree": {
        "sha": "77cdc1a096b74f70b00f2d0684b38861ac057db1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/77cdc1a096b74f70b00f2d0684b38861ac057db1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzie1oACgkQHrd2uwPH\nki2IVw//UjgdJ4JR/yUHqN/+Wy6jMh3xtVw3oZWmF1UFdLDmcO4KBsSfkO/uG4Ge\n+OWHkHcilPQeXWraJXU0YUViRFvweJUbP++m0NrccPkbJ+KmTzKabaiSx4xStvhj\nL4mT/JJZqU80fSA3bGhjvktyc0YW+nCJvjuY7Dr5Md+Xn80lUJuHFLKx2rr6uPME\nYlBOWGGhMfCvVx0KJGrhT6CC1mGh3/UyL6IGLEcFCjStL7gXbI2gopGqNhkU/3j6\nGst7Qf+uDPs72uNKjfjWATC3L/StJQbGoKuSaj2GobNwfDHcsfo00LOUtQItOA53\nntkX3OJToZh7BSnDJuURYyYeuy6ec5isE+X+v4tYeh55TNO2GxCMXAAg5xqZ0S/s\nmfj7FkPlDwubK4iW8e8WrOoL78n3ylO5407338cVm3UntSmCkveVur2pZFQSsgtK\nl9dNrA5j6NGJtCZ+j3qM1g6zjVqWsaRRM7XSKiC02AGJv9rzTULTu+bg5gYjBIqB\n3UAkN8apfdYTAkImHRYB5B7vayDyqCG0YVwyjv5GpD+fPq2MllpRGWbcpYaPGZFY\nbzZyuFkNY9f6FK4EnGk1POd02H5w8jWRw8OifKG9ilvCEQ2+B/SYreZorr4+8TEo\nrZ3AmYoPmEJM+yfb12sEUIy0DmB243WsJsHvrTZNxmyW+mRCdqs=\n=WPKI\n-----END PGP SIGNATURE-----",
        "payload": "tree 77cdc1a096b74f70b00f2d0684b38861ac057db1\nparent 1c3668004d584adbdbc172c285f56ea09104f255\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533762056 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558346586 +0200\n\nAdd new p2p message format for encrypted communication\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1c3668004d584adbdbc172c285f56ea09104f255",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1c3668004d584adbdbc172c285f56ea09104f255",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1c3668004d584adbdbc172c285f56ea09104f255"
      }
    ],
    "stats": {
      "total": 330,
      "additions": 301,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ff36cba8a0fa1ff6566c7d2c957b0e8fb7aa9ccc",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -151,6 +151,7 @@ BITCOIN_CORE_H = \\\n   merkleblock.h \\\n   miner.h \\\n   net.h \\\n+  net_encryption.h \\\n   net_message.h \\\n   net_processing.h \\\n   netaddress.h \\\n@@ -272,6 +273,7 @@ libbitcoin_server_a_SOURCES = \\\n   dbwrapper.cpp \\\n   miner.cpp \\\n   net.cpp \\\n+  net_encryption.cpp \\\n   net_message.cpp \\\n   net_processing.cpp \\\n   node/coin.cpp \\"
      },
      {
        "sha": "6359d711c314849348a261cef18ea89d8da392c0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 79,
        "deletions": 29,
        "changes": 108,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -16,6 +16,7 @@\n #include <crypto/common.h>\n #include <crypto/sha256.h>\n #include <primitives/transaction.h>\n+#include <net_encryption.h>\n #include <netbase.h>\n #include <scheduler.h>\n #include <ui_interface.h>\n@@ -571,12 +572,14 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n     nLastRecv = nTimeMicros / 1000000;\n     nRecvBytes += nBytes;\n     while (nBytes > 0) {\n-\n         // get current incomplete message, or create a new one\n         if (vRecvMsg.empty() || vRecvMsg.back()->Complete()) {\n-            vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            if (m_encryption_handler && m_encryption_handler->ShouldCryptMsg()) {\n+                vRecvMsg.emplace_back(MakeUnique<NetV2Message>(m_encryption_handler, Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            } else {\n+                vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            }\n         }\n-\n         NetMessageBaseRef& msg = vRecvMsg.back();\n \n         // absorb network data\n@@ -2561,6 +2564,7 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n     addrBind(addrBindIn),\n     fInbound(fInboundIn),\n     nKeyedNetGroup(nKeyedNetGroupIn),\n+    m_encryption_handler(nullptr),\n     addrKnown(5000, 0.001),\n     filterInventoryKnown(50000, 0.000001),\n     id(idIn),\n@@ -2598,35 +2602,81 @@ bool CConnman::NodeFullyConnected(const CNode* pnode)\n void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n {\n     size_t nMessageSize = msg.data.size();\n-    size_t nTotalSize = nMessageSize + CMessageHeader::HEADER_SIZE;\n-    LogPrint(BCLog::NET, \"sending %s (%d bytes) peer=%d\\n\",  SanitizeString(msg.command.c_str()), nMessageSize, pnode->GetId());\n+    size_t nTotalSize = nMessageSize;\n+    size_t serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    bool should_crypt = pnode->m_encryption_handler && pnode->m_encryption_handler->ShouldCryptMsg();\n+    if (should_crypt) {\n+        // add encrypted header size (AAD + MAC TAG + Varlen-Command + inner-message-size)\n+        nTotalSize += pnode->m_encryption_handler->GetAADLen() + pnode->m_encryption_handler->GetTagLen() + serialized_command_size;\n+    } else {\n+        nTotalSize += CMessageHeader::HEADER_SIZE;\n+    }\n+    LogPrint(BCLog::NET, \"sending%s %s (%d bytes) peer=%d\\n\", should_crypt ? \" encrypted\" : \"\", SanitizeString(msg.command.c_str()), nMessageSize, pnode->GetId());\n+\n+    size_t nBytesSent = 0;\n \n-    std::vector<unsigned char> serializedHeader;\n-    serializedHeader.reserve(CMessageHeader::HEADER_SIZE);\n-    uint256 hash = Hash(msg.data.data(), msg.data.data() + nMessageSize);\n-    CMessageHeader hdr(Params().MessageStart(), msg.command.c_str(), nMessageSize);\n-    memcpy(hdr.pchChecksum, hash.begin(), CMessageHeader::CHECKSUM_SIZE);\n+    if (should_crypt) {\n+        std::vector<unsigned char> serialized_envelope;\n+        uint32_t envelope_payload_length = serialized_command_size + nMessageSize;\n+        serialized_envelope.reserve(3 /* <- packet length */ + serialized_command_size + nMessageSize + pnode->m_encryption_handler->GetTagLen());\n \n-    CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serializedHeader, 0, hdr};\n+        // convert the host 32 bit size into a LE 24bit\n+        envelope_payload_length = htole32(envelope_payload_length);\n+        uint8_t int24[3];\n+        memcpy(int24, &envelope_payload_length, 3);\n \n-    size_t nBytesSent = 0;\n-    {\n-        LOCK(pnode->cs_vSend);\n-        bool optimisticSend(pnode->vSendMsg.empty());\n-\n-        //log total amount of bytes per command\n-        pnode->mapSendBytesPerMsgCmd[msg.command] += nTotalSize;\n-        pnode->nSendSize += nTotalSize;\n-\n-        if (pnode->nSendSize > nSendBufferMaxSize)\n-            pnode->fPauseSend = true;\n-        pnode->vSendMsg.push_back(std::move(serializedHeader));\n-        if (nMessageSize)\n-            pnode->vSendMsg.push_back(std::move(msg.data));\n-\n-        // If write queue empty, attempt \"optimistic write\"\n-        if (optimisticSend == true)\n-            nBytesSent = SocketSendData(pnode);\n+        CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serialized_envelope, 0, int24[0], int24[1], int24[2], msg.command};\n+        //append the message itself (if there is a message)\n+        if (nMessageSize) serialized_envelope.insert(serialized_envelope.end(), msg.data.begin(), msg.data.end());\n+\n+        //form the AAED (encipher and append tag)\n+        if (!pnode->m_encryption_handler->EncryptAppendMAC(serialized_envelope)) {\n+            LogPrintf(\"Encryption failed, peer=%d\\n\", pnode->GetId());\n+            pnode->fDisconnect = true;\n+            return;\n+        }\n+        {\n+            LOCK(pnode->cs_vSend);\n+            bool optimisticSend(pnode->vSendMsg.empty());\n+\n+            //log total amount of bytes per command\n+            pnode->mapSendBytesPerMsgCmd[msg.command] += nTotalSize;\n+            pnode->nSendSize += nTotalSize;\n+\n+            if (pnode->nSendSize > nSendBufferMaxSize)\n+                pnode->fPauseSend = true;\n+            pnode->vSendMsg.push_back(std::move(serialized_envelope));\n+\n+            // If write queue empty, attempt \"optimistic write\"\n+            if (optimisticSend == true)\n+                nBytesSent = SocketSendData(pnode);\n+        }\n+    } else {\n+        std::vector<unsigned char> serializedHeader;\n+        serializedHeader.reserve(CMessageHeader::HEADER_SIZE);\n+        uint256 hash = Hash(msg.data.data(), msg.data.data() + nMessageSize);\n+        CMessageHeader hdr(Params().MessageStart(), msg.command.c_str(), nMessageSize);\n+        memcpy(hdr.pchChecksum, hash.begin(), CMessageHeader::CHECKSUM_SIZE);\n+\n+        CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serializedHeader, 0, hdr};\n+        {\n+            LOCK(pnode->cs_vSend);\n+            bool optimisticSend(pnode->vSendMsg.empty());\n+\n+            //log total amount of bytes per command\n+            pnode->mapSendBytesPerMsgCmd[msg.command] += nTotalSize;\n+            pnode->nSendSize += nTotalSize;\n+\n+            if (pnode->nSendSize > nSendBufferMaxSize)\n+                pnode->fPauseSend = true;\n+            pnode->vSendMsg.push_back(std::move(serializedHeader));\n+            if (nMessageSize)\n+                pnode->vSendMsg.push_back(std::move(msg.data));\n+\n+            // If write queue empty, attempt \"optimistic write\"\n+            if (optimisticSend == true)\n+                nBytesSent = SocketSendData(pnode);\n+        }\n     }\n     if (nBytesSent)\n         RecordBytesSent(nBytesSent);"
      },
      {
        "sha": "bb15353859673e6000edc85515b2612797fa02b0",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -39,6 +39,7 @@\n class CScheduler;\n class CNode;\n class BanMan;\n+class EncryptionHandlerInterface;\n \n /** Time between pings automatically sent out for latency probing and keepalive (in seconds). */\n static const int PING_INTERVAL = 2 * 60;\n@@ -634,6 +635,7 @@ class CNode\n     const uint64_t nKeyedNetGroup;\n     std::atomic_bool fPauseRecv{false};\n     std::atomic_bool fPauseSend{false};\n+    std::shared_ptr<EncryptionHandlerInterface> m_encryption_handler;\n \n protected:\n     mapMsgCmdSize mapSendBytesPerMsgCmd;"
      },
      {
        "sha": "ac23c56bca388a94a808291dad22e1ccc7dc82eb",
        "filename": "src/net_encryption.cpp",
        "status": "added",
        "additions": 99,
        "deletions": 0,
        "changes": 99,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -0,0 +1,99 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#if defined(HAVE_CONFIG_H)\n+#include <config/bitcoin-config.h>\n+#endif\n+\n+#include <net_encryption.h>\n+#include <net_message.h>\n+\n+int NetV2Message::Read(const char* pch, unsigned bytes)\n+{\n+    if (!m_in_data) {\n+        // copy data to temporary parsing buffer\n+        unsigned int remaining = m_encryption_handler->GetAADLen() - m_hdr_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        memcpy(&vRecv[m_hdr_pos], pch, copy_bytes);\n+        m_hdr_pos += copy_bytes;\n+\n+        // if AAD incomplete, exit\n+        if (m_hdr_pos < m_encryption_handler->GetAADLen()) {\n+            return copy_bytes;\n+        }\n+\n+        if (!m_encryption_handler->GetLength(vRecv, m_message_size)) {\n+            return -1;\n+        }\n+\n+        // reject messages larger than MAX_SIZE\n+        if (m_message_size > MAX_SIZE) {\n+            return -1;\n+        }\n+\n+        // switch state to reading message data\n+        m_in_data = true;\n+\n+        return copy_bytes;\n+    } else {\n+        const unsigned int AAD_LEN = m_encryption_handler->GetAADLen();\n+        const unsigned int TAG_LEN = m_encryption_handler->GetTagLen();\n+        unsigned int remaining = m_message_size + TAG_LEN - m_data_pos;\n+        unsigned int copy_bytes = std::min(remaining, bytes);\n+\n+        // extend buffer, respect previous copied AAD part\n+        if (vRecv.size() < AAD_LEN + m_data_pos + copy_bytes) {\n+            // Allocate up to 256 KiB ahead, but never more than the total message size (incl. AAD & TAG).\n+            vRecv.resize(std::min(AAD_LEN + m_message_size + TAG_LEN, AAD_LEN + m_data_pos + copy_bytes + 256 * 1024 + TAG_LEN));\n+        }\n+\n+        memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n+        m_data_pos += copy_bytes;\n+\n+        return copy_bytes;\n+    }\n+}\n+\n+bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n+{\n+    // remove length\n+    data_in_out.ignore(4);\n+\n+    // remove tag\n+    data_in_out.erase(data_in_out.end() - TAG_LEN, data_in_out.end());\n+    return true;\n+}\n+\n+bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data)\n+{\n+    std::vector<unsigned char> mac_tag;\n+    for (unsigned int i = 0; i < TAG_LEN; i++) {\n+        data.push_back(0);\n+    }\n+    return true;\n+}\n+\n+bool P2PEncryption::GetLength(CDataStream& data_in, uint32_t& len_out)\n+{\n+    if (data_in.size() < AAD_LEN) {\n+        return false;\n+    }\n+\n+    //decrypt\n+    //TODO\n+\n+    try {\n+        data_in >> len_out;\n+    } catch (const std::exception&) {\n+        return false;\n+    }\n+\n+    return true;\n+}\n+\n+bool P2PEncryption::ShouldCryptMsg()\n+{\n+    return true;\n+}"
      },
      {
        "sha": "71fe0f4254909c4f239c4aad8795e0208d47559c",
        "filename": "src/net_encryption.h",
        "status": "added",
        "additions": 111,
        "deletions": 0,
        "changes": 111,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_encryption.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_encryption.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.h?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -0,0 +1,111 @@\n+// Copyright (c) 2018 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_NET_ENCRYPTION_H\n+#define BITCOIN_NET_ENCRYPTION_H\n+\n+#include <memory>\n+\n+#include <key.h>\n+#include <net_message.h>\n+#include <streams.h>\n+#include <uint256.h>\n+\n+\n+class EncryptionHandlerInterface\n+{\n+public:\n+    virtual ~EncryptionHandlerInterface() {}\n+\n+    virtual bool GetLength(CDataStream& data_in, uint32_t& len_out) = 0;\n+    virtual bool EncryptAppendMAC(std::vector<unsigned char>& data_in_out) = 0;\n+    virtual bool AuthenticatedAndDecrypt(CDataStream& data_in_out) = 0;\n+    virtual bool ShouldCryptMsg() = 0;\n+\n+    virtual unsigned int GetTagLen() const = 0;\n+    virtual unsigned int GetAADLen() const = 0;\n+};\n+\n+class P2PEncryption : public EncryptionHandlerInterface\n+{\n+private:\n+    static constexpr unsigned int TAG_LEN = 16; /* poly1305 128bit MAC tag */\n+    static constexpr unsigned int AAD_LEN = 3;  /* 24 bit payload length */\n+\n+public:\n+    bool GetLength(CDataStream& data_in, uint32_t& len_out) override;\n+    bool EncryptAppendMAC(std::vector<unsigned char>& data_in_out) override;\n+    bool AuthenticatedAndDecrypt(CDataStream& data_in_out) override;\n+\n+    bool ShouldCryptMsg() override;\n+\n+    unsigned inline int GetTagLen() const override\n+    {\n+        return TAG_LEN;\n+    }\n+\n+    unsigned inline int GetAADLen() const override\n+    {\n+        return AAD_LEN;\n+    }\n+};\n+typedef std::shared_ptr<EncryptionHandlerInterface> EncryptionHandlerRef;\n+\n+//encrypted network message after v2 p2p message transport protocol\n+class NetV2Message : public NetMessageBase\n+{\n+public:\n+    bool m_in_data;\n+    uint32_t m_message_size;\n+    unsigned int m_hdr_pos;\n+    uint32_t m_data_pos;\n+    std::string m_command_name;\n+\n+    EncryptionHandlerRef m_encryption_handler;\n+\n+    NetV2Message(EncryptionHandlerRef encryption_handler, const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn)\n+        : NetMessageBase(nTypeIn, nVersionIn),\n+          m_encryption_handler(encryption_handler)\n+    {\n+        // resize the message buffer to the AADlen (3 byte packet size v2 protocol)\n+        vRecv.resize(m_encryption_handler->GetAADLen());\n+        m_message_size = 0;\n+        m_hdr_pos = 0;\n+        m_data_pos = 0;\n+        m_in_data = 0;\n+        m_type = NetMessageType::ENCRYPTED_MSG;\n+        m_command_name.clear();\n+    }\n+\n+    bool Complete() const override\n+    {\n+        if (!m_in_data) {\n+            return false;\n+        }\n+        return (m_message_size + m_encryption_handler->GetTagLen() == m_data_pos);\n+    }\n+\n+    uint32_t GetMessageSize() const override\n+    {\n+        return m_message_size; //is size(strCommand & playload), where v1 is only size(playload)\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return m_message_size + sizeof(m_message_size) + m_encryption_handler->GetAADLen() + m_encryption_handler->GetTagLen();\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return m_command_name;\n+    }\n+\n+    int Read(const char* pch, unsigned int nBytes) override;\n+\n+    bool VerifyMessageStart() const override { return true; }\n+    bool VerifyHeader() const override { return true; }\n+    bool VerifyChecksum(std::string& error) const override { return true; }\n+};\n+\n+#endif // BITCOIN_NET_ENCRYPTION_H"
      },
      {
        "sha": "d9cfe8e17e3a02109898c445a4dcf0b808eba448",
        "filename": "src/net_message.h",
        "status": "modified",
        "additions": 8,
        "deletions": 0,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_message.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bae1ec2873dd280c14cfbccbeaf77b75389ce60b/src/net_message.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_message.h?ref=bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "patch": "@@ -13,12 +13,19 @@\n /** Maximum length of incoming protocol messages (no message over 4 MB is currently acceptable). */\n static const unsigned int MAX_PROTOCOL_MESSAGE_LENGTH = 4 * 1000 * 1000;\n \n+enum class NetMessageType {\n+    PLAINTEXT,\n+    PLAINTEXT_ENCRYPTION_HANDSHAKE,\n+    ENCRYPTED_MSG\n+};\n+\n // base class for format agnostic network messages\n class NetMessageBase\n {\n public:\n     CDataStream vRecv; // received message data\n     int64_t nTime;     // time (in microseconds) of message receipt.\n+    NetMessageType m_type;\n \n     NetMessageBase(int nTypeIn, int nVersionIn) : vRecv(nTypeIn, nVersionIn)\n     {\n@@ -65,6 +72,7 @@ class NetMessage : public NetMessageBase\n         in_data = false;\n         nHdrPos = 0;\n         nDataPos = 0;\n+        m_type = NetMessageType::PLAINTEXT;\n     }\n \n     bool Complete() const override"
      }
    ]
  },
  {
    "sha": "d1138bada0afe7ff4c7d06a9915818bddb5b4701",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMTEzOGJhZGEwYWZlN2ZmNGM3ZDA2YTk5MTU4MThiZGRiNWI0NzAx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-09T20:12:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:10:29Z"
      },
      "message": "Add v2 message transport protocol encryption with static key",
      "tree": {
        "sha": "6e701d949db853bf6d33d2f3e8fe9a2fc7dc2994",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6e701d949db853bf6d33d2f3e8fe9a2fc7dc2994"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d1138bada0afe7ff4c7d06a9915818bddb5b4701",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzifRUACgkQHrd2uwPH\nki0VxBAAjUPWbftjEjvFJRVMpdSS7FB0OfH8VD6fhjx2wC3g8k3Pp1mQB/V0Fkf8\nZ+xABBFQbApHKFCi+baxDdkL+SGn/GggEQi4ys6AmEUXnqa7xOQtkqHtldHJWXxZ\nTppc+7H6FB/AvqEELhPYNVv5elpVY65G0431kUV9YxSRc+o2WWjMEQjqvS/QJl5f\nqUYjY9mrDvlDFn4sKuZRkL8EAMU/C85YPpeiC5Y5X1AxOFzl0WKN4zxZnaCEU91z\nFS1adMcSR6iKuiBd6QFxQxAyy0pBhvAvzXaHaKlvw2NVQkAUvHZ2M28JPXcKzSuv\nc7WaPD/5vLChgazskA8gFqandmyTc7HUWMo2w0hkD/EtN6cjEdVP/0+Oa8bcZXjj\n/vqmnk8AijK/GSTm0Ojf6W8TJS3JZz/V9cwZBefuTWLS6cyW38YMnWauWAfVO63K\n8AgZukbz0vp9MSxcFl1zImdkyKDkojGsQfX/a7F3qFjoCKGMd9CvK1fF/u0MVNBI\nfh0lqnR05YwsAgmN7vjgy/bIX2R5LzmXa2XdzSzeSexnFNa9XINT/lORnGCLQbv5\n0A6rMHe12Zzc1WvNf1E/0X+6tMdwIGUIzMxj5poHRrA/UHhy81KRZcKVrPSPn5Eg\nvcOmAerD2x5KU0WN3AVFEqXVzokBxmGRHv45HsMQFUbTY7IsTOY=\n=5RBp\n-----END PGP SIGNATURE-----",
        "payload": "tree 6e701d949db853bf6d33d2f3e8fe9a2fc7dc2994\nparent bae1ec2873dd280c14cfbccbeaf77b75389ce60b\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1533845533 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347029 +0200\n\nAdd v2 message transport protocol encryption with static key\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1138bada0afe7ff4c7d06a9915818bddb5b4701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d1138bada0afe7ff4c7d06a9915818bddb5b4701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1138bada0afe7ff4c7d06a9915818bddb5b4701/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bae1ec2873dd280c14cfbccbeaf77b75389ce60b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bae1ec2873dd280c14cfbccbeaf77b75389ce60b"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 114,
      "deletions": 15
    },
    "files": [
      {
        "sha": "2e6368d833f25dd604c38dda71844c74305a8142",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "patch": "@@ -435,6 +435,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-maxtimeadjustment\", strprintf(\"Maximum allowed median peer time offset adjustment. Local perspective of time may be influenced by peers forward or backward by this amount. (default: %u seconds)\", DEFAULT_MAX_TIME_ADJUSTMENT), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-maxuploadtarget=<n>\", strprintf(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\", DEFAULT_MAX_UPLOAD_TARGET), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onion=<ip:port>\", \"Use separate SOCKS5 proxy to reach peers via Tor hidden services, set -noonion to disable (default: -proxy)\", false, OptionsCategory::CONNECTION);\n+    gArgs.AddArg(\"-netencryption\", strprintf(\"Use network message encryption if provided by other peers (default: %u)\", DEFAULT_ALLOW_NET_ENCRYPTION), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-onlynet=<net>\", \"Make outgoing connections only through network <net> (ipv4, ipv6 or onion). Incoming connections are not affected by this option. This option can be specified multiple times to allow multiple networks.\", false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-peerbloomfilters\", strprintf(\"Support filtering of blocks and transaction with bloom filters (default: %u)\", DEFAULT_PEERBLOOMFILTERS), false, OptionsCategory::CONNECTION);\n     gArgs.AddArg(\"-permitbaremultisig\", strprintf(\"Relay non-P2SH multisig (default: %u)\", DEFAULT_PERMIT_BAREMULTISIG), false, OptionsCategory::CONNECTION);"
      },
      {
        "sha": "7ccad61a5c221fedeeaca1479a1126e8c1475a9f",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "patch": "@@ -2582,6 +2582,11 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n \n+    m_encryption_handler = nullptr;\n+    if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n+        m_encryption_handler = std::make_shared<P2PEncryption>();\n+    }\n+\n     if (fLogIPs) {\n         LogPrint(BCLog::NET, \"Added connection to %s peer=%d\\n\", addrName, id);\n     } else {"
      },
      {
        "sha": "6e16a1fe36cfe31065ecb82d1725607e8bea4ff6",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "patch": "@@ -14,6 +14,7 @@\n #include <crypto/siphash.h>\n #include <hash.h>\n #include <limitedmap.h>\n+#include <net_encryption.h>\n #include <net_message.h>\n #include <netaddress.h>\n #include <policy/feerate.h>\n@@ -82,6 +83,8 @@ static const bool DEFAULT_FORCEDNSSEED = false;\n static const size_t DEFAULT_MAXRECEIVEBUFFER = 5 * 1000;\n static const size_t DEFAULT_MAXSENDBUFFER    = 1 * 1000;\n \n+static const bool DEFAULT_ALLOW_NET_ENCRYPTION = false;\n+\n typedef int64_t NodeId;\n \n struct AddedNodeInfo"
      },
      {
        "sha": "2f35b9913500890f51ec7bb4d1c28cd4363ca2a9",
        "filename": "src/net_encryption.cpp",
        "status": "modified",
        "additions": 87,
        "deletions": 14,
        "changes": 101,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "patch": "@@ -7,7 +7,10 @@\n #endif\n \n #include <net_encryption.h>\n+\n+#include <logging.h>\n #include <net_message.h>\n+#include <util.h>\n \n int NetV2Message::Read(const char* pch, unsigned bytes)\n {\n@@ -24,6 +27,7 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n             return copy_bytes;\n         }\n \n+        // decrypt the length from the AAD\n         if (!m_encryption_handler->GetLength(vRecv, m_message_size)) {\n             return -1;\n         }\n@@ -38,6 +42,7 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n \n         return copy_bytes;\n     } else {\n+        // copy the message payload plus the MAC tag\n         const unsigned int AAD_LEN = m_encryption_handler->GetAADLen();\n         const unsigned int TAG_LEN = m_encryption_handler->GetTagLen();\n         unsigned int remaining = m_message_size + TAG_LEN - m_data_pos;\n@@ -52,26 +57,85 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n         memcpy(&vRecv[AAD_LEN + m_data_pos], pch, copy_bytes);\n         m_data_pos += copy_bytes;\n \n+        if (Complete()) {\n+            // authenticate and decrypt if the message is complete\n+            if (!m_encryption_handler->AuthenticatedAndDecrypt(vRecv)) {\n+                LogPrint(BCLog::NET, \"Authentication or decryption failed\\n\");\n+                return false;\n+            }\n+\n+            // vRecv holds now the plaintext message excluding the AAD and MAC\n+            // m_message_size holds the packet size excluding the MAC\n+\n+            // initially check the message\n+            try {\n+                vRecv >> m_command_name;\n+            } catch (const std::exception&) {\n+                return false;\n+            }\n+            // vRecv points now to the plaintext message payload (MAC is removed)\n+        }\n+\n         return copy_bytes;\n     }\n }\n \n bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n {\n-    // remove length\n-    data_in_out.ignore(4);\n+    // create a buffer for the decrypted payload\n+    std::vector<unsigned char> buf_dec;\n+    buf_dec.resize(data_in_out.size());\n+\n+    // keep the original payload size\n+    size_t vsize = data_in_out.size();\n+\n+    // authenticate and decrypt the message\n+    LOCK(cs);\n+    if (!m_aead_ctx->Crypt(m_recv_seq_nr, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, buf_dec.data(), buf_dec.size(), (const unsigned char *)&data_in_out.data()[0],\n+            data_in_out.size(), false)) {\n+        memory_cleanse(data_in_out.data(), data_in_out.size());\n+        return false;\n+    }\n+\n+    // increase main sequence number and eventually increase the AAD sequence number\n+    // always increase (or reset) the keystream position\n+    m_recv_seq_nr++;\n+    m_recv_aad_keystream_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_recv_aad_keystream_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_recv_aad_keystream_pos = 0;\n+        m_recv_seq_nr_aad++;\n+    }\n \n-    // remove tag\n-    data_in_out.erase(data_in_out.end() - TAG_LEN, data_in_out.end());\n+    data_in_out.clear();\n+    // write payload (avoid the 3byte AAD length and the MAC)\n+    data_in_out.write((const char*)&buf_dec.begin()[AAD_LEN], vsize - TAG_LEN - AAD_LEN);\n     return true;\n }\n \n-bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data)\n+bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data_in_out)\n {\n-    std::vector<unsigned char> mac_tag;\n-    for (unsigned int i = 0; i < TAG_LEN; i++) {\n-        data.push_back(0);\n+    // create a buffer for the encrypted payload\n+    std::vector<unsigned char> buf_enc;\n+    buf_enc.resize(data_in_out.size() + TAG_LEN);\n+\n+    // encrypt and add MAC tag\n+    LOCK(cs);\n+    m_aead_ctx->Crypt(m_send_seq_nr, m_send_seq_nr_aad, m_send_aad_keystream_pos, &buf_enc[0], buf_enc.size(), &data_in_out[0],\n+        data_in_out.size(), true);\n+\n+    // increase main sequence number and eventually increase the AAD sequence number\n+    // always increase (or reset) the keystream position\n+    m_send_seq_nr++;\n+    m_send_aad_keystream_pos += CHACHA20_POLY1305_AEAD_AAD_LEN;\n+    if (m_send_aad_keystream_pos + CHACHA20_POLY1305_AEAD_AAD_LEN > CHACHA20_ROUND_OUTPUT) {\n+        m_send_aad_keystream_pos = 0;\n+        m_send_seq_nr_aad++;\n     }\n+\n+    // clear data_in and append the decrypted data\n+    data_in_out.clear();\n+    // append encrypted message (AAD & payload & MAC)\n+    data_in_out.insert(data_in_out.begin(), buf_enc.begin(), buf_enc.end());\n     return true;\n }\n \n@@ -81,12 +145,8 @@ bool P2PEncryption::GetLength(CDataStream& data_in, uint32_t& len_out)\n         return false;\n     }\n \n-    //decrypt\n-    //TODO\n-\n-    try {\n-        data_in >> len_out;\n-    } catch (const std::exception&) {\n+    LOCK(cs);\n+    if (!m_aead_ctx->GetLength(&len_out, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, (const uint8_t*)&data_in.data()[0])) {\n         return false;\n     }\n \n@@ -97,3 +157,16 @@ bool P2PEncryption::ShouldCryptMsg()\n {\n     return true;\n }\n+\n+P2PEncryption::P2PEncryption()\n+{\n+    const unsigned char aead_keys[64] = {\n+        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n+        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,\n+        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n+        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n+\n+    m_aead_ctx.reset(new ChaCha20Poly1305AEAD(aead_keys, 32, aead_keys+32, 32));\n+}"
      },
      {
        "sha": "51e827e6dcd493588f12c3a14e1bc1f97ecad04a",
        "filename": "src/net_encryption.h",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net_encryption.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d1138bada0afe7ff4c7d06a9915818bddb5b4701/src/net_encryption.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.h?ref=d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "patch": "@@ -1,4 +1,4 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n+// Copyright (c) 2019 The Bitcoin Core developers\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n@@ -7,9 +7,11 @@\n \n #include <memory>\n \n+#include <crypto/chacha_poly_aead.h>\n #include <key.h>\n #include <net_message.h>\n #include <streams.h>\n+#include <sync.h>\n #include <uint256.h>\n \n \n@@ -33,7 +35,22 @@ class P2PEncryption : public EncryptionHandlerInterface\n     static constexpr unsigned int TAG_LEN = 16; /* poly1305 128bit MAC tag */\n     static constexpr unsigned int AAD_LEN = 3;  /* 24 bit payload length */\n \n+    CCriticalSection cs;\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead_ctx;\n+    uint32_t m_recv_seq_nr = 0;\n+    uint32_t m_recv_seq_nr_aad = 0;\n+    int m_recv_aad_keystream_pos = 0;\n+    uint32_t m_send_seq_nr = 0;\n+    uint32_t m_send_seq_nr_aad = 0;\n+    int m_send_aad_keystream_pos = 0;\n+\n public:\n+    P2PEncryption();\n+    ~P2PEncryption()\n+    {\n+        memory_cleanse(&m_aead_ctx, sizeof(m_aead_ctx));\n+    }\n+\n     bool GetLength(CDataStream& data_in, uint32_t& len_out) override;\n     bool EncryptAppendMAC(std::vector<unsigned char>& data_in_out) override;\n     bool AuthenticatedAndDecrypt(CDataStream& data_in_out) override;"
      }
    ]
  },
  {
    "sha": "3459cc94a0fa354ac6bd38543de0b84e537f497d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozNDU5Y2M5NGEwZmEzNTRhYzZiZDM4NTQzZGUwYjg0ZTUzN2Y0OTdk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-13T18:36:56Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:12:03Z"
      },
      "message": "Add v2 message transport protocol encryption handshake",
      "tree": {
        "sha": "ae8c289f18b8db1b3ab14a6f75ebe728f6a292c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ae8c289f18b8db1b3ab14a6f75ebe728f6a292c1"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3459cc94a0fa354ac6bd38543de0b84e537f497d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzifXQACgkQHrd2uwPH\nki05BQ/+IKkhNBgNtTEg8TMqp3FLq9sqGGSti3rEjcFvMWv6hI24YfTQrmGyK/59\n1SjOnxrbVQfxWZfkNjUY570uL45Ui3eDSOzd7jvN/zmXouNMB9ZvWA5xNTgKzvPQ\n/94aQrFV4avasLMNpqujgfsFQTRg/xQYwx1LpjT746KUAyaKN9wkDpa/ykwUHHnR\nRlVtfrGHod+kv234S+5Jzs9IW6tZPlZNvQAvewEXnFWTLD09cM6kf35qySm0m11q\ns9FGe40mvst4lA0iEZaAKEFyTeY/d8XUI8cyV5Slc3niar4jV1JcMKP+u7WAFrsZ\n25h8S8dI7hibcb/dWN1u+WcnEpsR3091jspwAHmqJRejJBPgiSLTY9MYTTX8UFNJ\n/NAUBBvdGjHPwLmN///8D/WT32cjHn45nYMgS2QKldruX1yb5plWzSOcCYDsWl8M\nWCpmR2BTJzAsnpeqNbmKr8piu6ONZV83b1MbEfdy6A2wCsR5YuZzHUGAB8BQfn4y\nVfoeqHm/fpJJtKykhk4Gc1CVHKtB8bfIF3DkJjDURn1T7Sa6M+tvlcC6xHvBia+U\np0O+ifuncRiwDBjav1NJ9FLb0JtnmdCc2zXykuKv/C8t4C6L7YnVmHOZFLzzn/rJ\nWw/DCCJFITky+8w9dqR7ZOZLBjo4F8bXjPNUiYokf5YmR6bOoKo=\n=ar6O\n-----END PGP SIGNATURE-----",
        "payload": "tree ae8c289f18b8db1b3ab14a6f75ebe728f6a292c1\nparent d1138bada0afe7ff4c7d06a9915818bddb5b4701\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534185416 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347123 +0200\n\nAdd v2 message transport protocol encryption handshake\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3459cc94a0fa354ac6bd38543de0b84e537f497d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3459cc94a0fa354ac6bd38543de0b84e537f497d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3459cc94a0fa354ac6bd38543de0b84e537f497d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d1138bada0afe7ff4c7d06a9915818bddb5b4701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d1138bada0afe7ff4c7d06a9915818bddb5b4701"
      }
    ],
    "stats": {
      "total": 305,
      "additions": 278,
      "deletions": 27
    },
    "files": [
      {
        "sha": "bc3231a1a5e80158279385be55e74c1d2d531063",
        "filename": "src/key.h",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/key.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/key.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/key.h?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -142,6 +142,11 @@ class CKey\n \n     //! Load private key and check that public key matches.\n     bool Load(const CPrivKey& privkey, const CPubKey& vchPubKey, bool fSkipCheck);\n+\n+    void SetNull()\n+    {\n+        memory_cleanse(keydata.data(), keydata.size());\n+    }\n };\n \n struct CExtKey {"
      },
      {
        "sha": "0dc6d12433c8080e035292be50cbd78ac8544f99",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 6,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -576,6 +576,10 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         if (vRecvMsg.empty() || vRecvMsg.back()->Complete()) {\n             if (m_encryption_handler && m_encryption_handler->ShouldCryptMsg()) {\n                 vRecvMsg.emplace_back(MakeUnique<NetV2Message>(m_encryption_handler, Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+            } else if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION) && nRecvBytes == nBytes /* first message */) {\n+                // first bytes can be a network encryption handshake\n+                // use a NetMessageEncryptionHandshake with option to fallback to a standard NetMessage (if valid version message is detected)\n+                vRecvMsg.emplace_back(MakeUnique<NetMessageEncryptionHandshake>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n             } else {\n                 vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n             }\n@@ -585,8 +589,10 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         // absorb network data\n         int handled = msg->Read(pch, nBytes);\n \n-        if (handled < 0)\n+        if (handled < 0) {\n+            LogPrint(BCLog::NET, \"Handled no bytes peer=%i, disconnecting\\n\", GetId());\n             return false;\n+        }\n \n         if (msg->GetMessageSize() > MAX_PROTOCOL_MESSAGE_LENGTH) {\n             LogPrint(BCLog::NET, \"Oversized message from peer=%i, disconnecting\\n\", GetId());\n@@ -599,6 +605,25 @@ bool CNode::ReceiveMsgBytes(const char *pch, unsigned int nBytes, bool& complete\n         if (msg->Complete()) {\n             RecordRecvBytesPerMsgCmd(msg->GetCommandName(), msg->GetMessageSizeWithHeader());\n             msg->nTime = nTimeMicros;\n+            if (msg->m_type == NetMessageType::PLAINTEXT_ENCRYPTION_HANDSHAKE && !msg->VerifyHeader()) {\n+                // message contains expected network magic and \"version\" message command\n+                // treat as version message\n+\n+                // keep old message (unique_ptr) in this scope until the decompose loop is done\n+                NetMessageBaseRef oldmsg = std::move(vRecvMsg.back());\n+                vRecvMsg.pop_back();\n+                vRecvMsg.emplace_back(MakeUnique<NetMessage>(Params().MessageStart(), SER_NETWORK, INIT_PROTO_VERSION));\n+\n+                // read header and make sure it was valid\n+                int read_header_bytes = vRecvMsg.back()->Read(oldmsg->vRecv.data(), oldmsg->vRecv.size());\n+                if (read_header_bytes != CMessageHeader::HEADER_SIZE) {\n+                    return false;\n+                }\n+                // read data part\n+                if (vRecvMsg.back()->Read(oldmsg->vRecv.data() + read_header_bytes, oldmsg->vRecv.size() - read_header_bytes) != 32 - read_header_bytes) {\n+                    return false;\n+                }\n+            }\n             complete = true;\n         }\n     }\n@@ -2582,11 +2607,6 @@ CNode::CNode(NodeId idIn, ServiceFlags nLocalServicesIn, int nMyStartingHeightIn\n         mapRecvBytesPerMsgCmd[msg] = 0;\n     mapRecvBytesPerMsgCmd[NET_MESSAGE_COMMAND_OTHER] = 0;\n \n-    m_encryption_handler = nullptr;\n-    if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n-        m_encryption_handler = std::make_shared<P2PEncryption>();\n-    }\n-\n     if (fLogIPs) {\n         LogPrint(BCLog::NET, \"Added connection to %s peer=%d\\n\", addrName, id);\n     } else {\n@@ -2687,6 +2707,28 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         RecordBytesSent(nBytesSent);\n }\n \n+void CConnman::SendEncryptionHandshakeData(CNode* pnode)\n+{\n+    // initialize encryption, generate ephemeral key\n+    assert(pnode->m_encryption_handler == nullptr);\n+    pnode->m_encryption_handler = std::make_shared<P2PEncryption>();\n+\n+    // get encryption handshake data\n+    std::vector<unsigned char> handshake_data;\n+    pnode->m_encryption_handler->GetHandshakeRequestData(handshake_data);\n+\n+    // push handshake data\n+    LogPrint(BCLog::NET, \"Send encryption handshake payload of %d bytes, peer=%d\\n\", handshake_data.size(), pnode->GetId());\n+    {\n+        LOCK(pnode->cs_vSend);\n+\n+        //log total amount of bytes per command\n+        pnode->nSendSize += handshake_data.size();\n+        pnode->vSendMsg.push_back(std::move(handshake_data));\n+        RecordBytesSent(SocketSendData(pnode));\n+    }\n+}\n+\n bool CConnman::ForNode(NodeId id, std::function<bool(CNode* pnode)> func)\n {\n     CNode* found = nullptr;"
      },
      {
        "sha": "63b273d7288a3e974f1b406b0381af3cf9ef0e20",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -199,6 +199,7 @@ class CConnman\n     bool ForNode(NodeId id, std::function<bool(CNode* pnode)> func);\n \n     void PushMessage(CNode* pnode, CSerializedNetMsg&& msg);\n+    void SendEncryptionHandshakeData(CNode* pnode);\n \n     template<typename Callable>\n     void ForEachNode(Callable&& func)"
      },
      {
        "sha": "23f0c4e4e000c081f20d12dbc0b057a3ef50e91b",
        "filename": "src/net_encryption.cpp",
        "status": "modified",
        "additions": 118,
        "deletions": 13,
        "changes": 131,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -6,6 +6,8 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <chainparams.h>\n+#include <crypto/hkdf_sha256_32.h>\n #include <net_encryption.h>\n \n #include <logging.h>\n@@ -29,11 +31,13 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n \n         // decrypt the length from the AAD\n         if (!m_encryption_handler->GetLength(vRecv, m_message_size)) {\n+            LogPrint(BCLog::NET, \"Failed to read length\\n\");\n             return -1;\n         }\n \n         // reject messages larger than MAX_SIZE\n         if (m_message_size > MAX_SIZE) {\n+            LogPrint(BCLog::NET, \"Max size exceeded\\n\");\n             return -1;\n         }\n \n@@ -71,6 +75,7 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n             try {\n                 vRecv >> m_command_name;\n             } catch (const std::exception&) {\n+                LogPrint(BCLog::NET, \"Invalid command name\\n\");\n                 return false;\n             }\n             // vRecv points now to the plaintext message payload (MAC is removed)\n@@ -80,6 +85,37 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n     }\n }\n \n+int NetMessageEncryptionHandshake::Read(const char* pch, unsigned int bytes)\n+{\n+    // copy data to temporary parsing buffer\n+    unsigned int remaining = 32 - m_data_pos;\n+    unsigned int copy_bytes = std::min(remaining, bytes);\n+    if (vRecv.size() < 32) {\n+        vRecv.resize(32);\n+    }\n+    memcpy(&vRecv[m_data_pos], pch, copy_bytes);\n+    m_data_pos += copy_bytes;\n+\n+    return copy_bytes;\n+}\n+\n+bool NetMessageEncryptionHandshake::VerifyHeader() const\n+{\n+    CMessageHeader hdr(Params().MessageStart());\n+    CDataStream str = vRecv; //copy stream to keep function const\n+    try {\n+        str >> hdr;\n+    } catch (const std::exception&) {\n+        LogPrint(BCLog::NET, \"Invalid header\\n\");\n+        return false;\n+    }\n+    if (memcmp(hdr.pchMessageStart, Params().MessageStart(), CMessageHeader::MESSAGE_START_SIZE) == 0 || hdr.GetCommand() == NetMsgType::VERSION) {\n+        LogPrint(BCLog::NET, \"Invalid msg start\\n\");\n+        return false;\n+    }\n+    return true;\n+}\n+\n bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n {\n     // create a buffer for the decrypted payload\n@@ -91,9 +127,10 @@ bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n \n     // authenticate and decrypt the message\n     LOCK(cs);\n-    if (!m_aead_ctx->Crypt(m_recv_seq_nr, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, buf_dec.data(), buf_dec.size(), (const unsigned char *)&data_in_out.data()[0],\n+    if (!m_recv_aead_ctx->Crypt(m_recv_seq_nr, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, buf_dec.data(), buf_dec.size(), (const unsigned char *)&data_in_out.data()[0],\n             data_in_out.size(), false)) {\n         memory_cleanse(data_in_out.data(), data_in_out.size());\n+        LogPrint(BCLog::NET, \"Crypt failed\\n\");\n         return false;\n     }\n \n@@ -120,7 +157,7 @@ bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data_in_out)\n \n     // encrypt and add MAC tag\n     LOCK(cs);\n-    m_aead_ctx->Crypt(m_send_seq_nr, m_send_seq_nr_aad, m_send_aad_keystream_pos, &buf_enc[0], buf_enc.size(), &data_in_out[0],\n+    m_send_aead_ctx->Crypt(m_send_seq_nr, m_send_seq_nr_aad, m_send_aad_keystream_pos, &buf_enc[0], buf_enc.size(), &data_in_out[0],\n         data_in_out.size(), true);\n \n     // increase main sequence number and eventually increase the AAD sequence number\n@@ -142,11 +179,13 @@ bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data_in_out)\n bool P2PEncryption::GetLength(CDataStream& data_in, uint32_t& len_out)\n {\n     if (data_in.size() < AAD_LEN) {\n+        LogPrint(BCLog::NET, \"AAD len to short\\n\");\n         return false;\n     }\n \n     LOCK(cs);\n-    if (!m_aead_ctx->GetLength(&len_out, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, (const uint8_t*)&data_in.data()[0])) {\n+    if (!m_recv_aead_ctx->GetLength(&len_out, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, (const uint8_t*)&data_in.data()[0])) {\n+        LogPrint(BCLog::NET, \"GetLength failed\\n\");\n         return false;\n     }\n \n@@ -155,18 +194,84 @@ bool P2PEncryption::GetLength(CDataStream& data_in, uint32_t& len_out)\n \n bool P2PEncryption::ShouldCryptMsg()\n {\n+    return handshake_done;\n+}\n+\n+uint256 P2PEncryption::GetSessionID()\n+{\n+    LOCK(cs);\n+    return m_session_id;\n+}\n+\n+void P2PEncryption::EnableEncryption(bool inbound)\n+{\n+    unsigned char aead_k_1_a[32];\n+    unsigned char aead_k_2_a[32];\n+    unsigned char aead_k_1_b[32];\n+    unsigned char aead_k_2_b[32];\n+\n+    LOCK(cs);\n+    if (m_raw_ecdh_secret.size() != 32) {\n+        return;\n+    }\n+    // extract 2 keys for each direction with HKDF HMAC_SHA256 with length 32\n+    CHKDF_HMAC_SHA256_L32 hkdf_32(&m_raw_ecdh_secret[0], 32, \"BitcoinSharedSecret\");\n+    hkdf_32.Expand32(\"BitcoinK1A\", aead_k_1_a);\n+    hkdf_32.Expand32(\"BitcoinK2A\", aead_k_2_a);\n+    hkdf_32.Expand32(\"BitcoinK1B\", aead_k_1_b);\n+    hkdf_32.Expand32(\"BitcoinK2B\", aead_k_2_b);\n+    hkdf_32.Expand32(\"BitcoinSessionID\", m_session_id.begin());\n+\n+    // enabling k1 for send channel on requesting peer and for recv channel on responding peer\n+    // enabling k2 for recv channel on requesting peer and for send channel on responding peer\n+    m_send_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? aead_k_1_b : aead_k_1_a, sizeof(aead_k_1_a), inbound ? aead_k_2_b : aead_k_2_a, sizeof(aead_k_1_a)));\n+    m_recv_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? aead_k_1_a : aead_k_1_b, sizeof(aead_k_1_a), inbound ? aead_k_2_a : aead_k_2_b, sizeof(aead_k_1_a)));\n+    handshake_done = true;\n+}\n+\n+bool P2PEncryption::GetHandshakeRequestData(std::vector<unsigned char>& handshake_data)\n+{\n+    LOCK(cs);\n+    CPubKey pubkey = m_ecdh_key.GetPubKey();\n+    m_ecdh_key.VerifyPubKey(pubkey); //verify the pubkey\n+    assert(pubkey[0] == 2);\n+\n+    handshake_data.insert(handshake_data.begin(), pubkey.begin() + 1, pubkey.end());\n     return true;\n }\n \n-P2PEncryption::P2PEncryption()\n+bool P2PEncryption::ProcessHandshakeRequestData(const std::vector<unsigned char>& handshake_data)\n+{\n+    CPubKey pubkey;\n+    if (handshake_data.size() != 32) {\n+        LogPrint(BCLog::NET, \"invalid handshake size\\n\");\n+        return false;\n+    }\n+    std::vector<unsigned char> handshake_data_even_pubkey;\n+    handshake_data_even_pubkey.push_back(2);\n+    handshake_data_even_pubkey.insert(handshake_data_even_pubkey.begin() + 1, handshake_data.begin(), handshake_data.end());\n+    pubkey.Set(handshake_data_even_pubkey.begin(), handshake_data_even_pubkey.end());\n+    if (!pubkey.IsFullyValid()) {\n+        LogPrint(BCLog::NET, \"invalid pubkey\\n\");\n+        return false;\n+    }\n+\n+    // calculate ECDH secret\n+    LOCK(cs);\n+    bool ret = m_ecdh_key.ComputeECDHSecret(pubkey, m_raw_ecdh_secret);\n+\n+    // After calculating the ECDH secret, the ephemeral key can be cleansed from memory\n+    m_ecdh_key.SetNull();\n+    return ret;\n+}\n+\n+P2PEncryption::P2PEncryption() : handshake_done(false)\n {\n-    const unsigned char aead_keys[64] = {\n-        0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a,\n-        0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,\n-        0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n-        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\n-\n-    m_aead_ctx.reset(new ChaCha20Poly1305AEAD(aead_keys, 32, aead_keys+32, 32));\n+    m_ecdh_key.MakeNewKey(true);\n+    if (m_ecdh_key.GetPubKey()[0] == 3) {\n+        // the encryption handshake will only use 32byte pubkeys\n+        // force EVEN (0x02) pubkey be negating the private key in case of ODD (0x03) pubkeys\n+        m_ecdh_key.Negate();\n+    }\n+    assert(m_ecdh_key.IsValid());\n }"
      },
      {
        "sha": "4a356be99a3570daf8a218c62a4588e87d197b16",
        "filename": "src/net_encryption.h",
        "status": "modified",
        "additions": 58,
        "deletions": 2,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_encryption.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_encryption.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.h?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -5,6 +5,7 @@\n #ifndef BITCOIN_NET_ENCRYPTION_H\n #define BITCOIN_NET_ENCRYPTION_H\n \n+#include <atomic>\n #include <memory>\n \n #include <crypto/chacha_poly_aead.h>\n@@ -20,23 +21,34 @@ class EncryptionHandlerInterface\n public:\n     virtual ~EncryptionHandlerInterface() {}\n \n+    virtual bool GetHandshakeRequestData(std::vector<unsigned char>& handshake_data) = 0;\n+    virtual bool ProcessHandshakeRequestData(const std::vector<unsigned char>& handshake_data) = 0;\n+\n     virtual bool GetLength(CDataStream& data_in, uint32_t& len_out) = 0;\n     virtual bool EncryptAppendMAC(std::vector<unsigned char>& data_in_out) = 0;\n     virtual bool AuthenticatedAndDecrypt(CDataStream& data_in_out) = 0;\n     virtual bool ShouldCryptMsg() = 0;\n \n     virtual unsigned int GetTagLen() const = 0;\n     virtual unsigned int GetAADLen() const = 0;\n+    virtual void EnableEncryption(bool inbound) = 0;\n+    virtual uint256 GetSessionID() = 0;\n };\n \n class P2PEncryption : public EncryptionHandlerInterface\n {\n private:\n     static constexpr unsigned int TAG_LEN = 16; /* poly1305 128bit MAC tag */\n     static constexpr unsigned int AAD_LEN = 3;  /* 24 bit payload length */\n+    CKey m_ecdh_key;\n+    CPrivKey m_raw_ecdh_secret;\n+    uint256 m_session_id;\n+\n+    std::atomic_bool handshake_done;\n \n     CCriticalSection cs;\n-    std::unique_ptr<ChaCha20Poly1305AEAD> m_aead_ctx;\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_send_aead_ctx;\n+    std::unique_ptr<ChaCha20Poly1305AEAD> m_recv_aead_ctx;\n     uint32_t m_recv_seq_nr = 0;\n     uint32_t m_recv_seq_nr_aad = 0;\n     int m_recv_aad_keystream_pos = 0;\n@@ -48,14 +60,19 @@ class P2PEncryption : public EncryptionHandlerInterface\n     P2PEncryption();\n     ~P2PEncryption()\n     {\n-        memory_cleanse(&m_aead_ctx, sizeof(m_aead_ctx));\n+        memory_cleanse(&m_send_aead_ctx, sizeof(m_send_aead_ctx));\n+        memory_cleanse(&m_recv_aead_ctx, sizeof(m_recv_aead_ctx));\n     }\n+    bool GetHandshakeRequestData(std::vector<unsigned char>& handshake_data) override;\n+    bool ProcessHandshakeRequestData(const std::vector<unsigned char>& handshake_data) override;\n \n     bool GetLength(CDataStream& data_in, uint32_t& len_out) override;\n     bool EncryptAppendMAC(std::vector<unsigned char>& data_in_out) override;\n     bool AuthenticatedAndDecrypt(CDataStream& data_in_out) override;\n \n     bool ShouldCryptMsg() override;\n+    void EnableEncryption(bool inbound) override;\n+    uint256 GetSessionID() override;\n \n     unsigned inline int GetTagLen() const override\n     {\n@@ -69,6 +86,45 @@ class P2PEncryption : public EncryptionHandlerInterface\n };\n typedef std::shared_ptr<EncryptionHandlerInterface> EncryptionHandlerRef;\n \n+//network message for 32byte encryption handshake with fallback option\n+class NetMessageEncryptionHandshake : public NetMessageBase\n+{\n+public:\n+    unsigned int m_data_pos;\n+\n+    NetMessageEncryptionHandshake(const CMessageHeader::MessageStartChars& pchMessageStartIn, int nTypeIn, int nVersionIn) : NetMessageBase(nTypeIn, nVersionIn)\n+    {\n+        m_data_pos = 0;\n+        m_type = NetMessageType::PLAINTEXT_ENCRYPTION_HANDSHAKE;\n+    }\n+\n+    bool Complete() const override\n+    {\n+        return (m_data_pos == 32);\n+    }\n+\n+    uint32_t GetMessageSize() const override\n+    {\n+        return vRecv.size();\n+    }\n+\n+    uint32_t GetMessageSizeWithHeader() const override\n+    {\n+        return vRecv.size();\n+    }\n+\n+    std::string GetCommandName() const override\n+    {\n+        return \"\";\n+    }\n+\n+    int Read(const char* pch, unsigned int nBytes) override;\n+\n+    bool VerifyMessageStart() const override { return true; }\n+    bool VerifyHeader() const override;\n+    bool VerifyChecksum(std::string& error) const override { return true; }\n+};\n+\n //encrypted network message after v2 p2p message transport protocol\n class NetV2Message : public NetMessageBase\n {"
      },
      {
        "sha": "3fec08e5fdff953e6396c871bcf92baab4fbfeea",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 48,
        "deletions": 6,
        "changes": 54,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3459cc94a0fa354ac6bd38543de0b84e537f497d/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "patch": "@@ -15,6 +15,7 @@\n #include <validation.h>\n #include <merkleblock.h>\n #include <netmessagemaker.h>\n+#include <net_encryption.h>\n #include <netbase.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n@@ -758,8 +759,14 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         LOCK(cs_main);\n         mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n     }\n-    if(!pnode->fInbound)\n-        PushNodeVersion(pnode, connman, GetTime());\n+    if (!pnode->fInbound) {\n+        if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n+            // send an encryption request\n+            connman->SendEncryptionHandshakeData(pnode);\n+        } else {\n+            PushNodeVersion(pnode, connman, GetTime());\n+        }\n+    }\n }\n \n void PeerLogicValidation::FinalizeNode(NodeId nodeid, bool& fUpdateConnectionTime) {\n@@ -1823,9 +1830,44 @@ void static ProcessOrphanTx(CConnman* connman, std::set<uint256>& orphan_work_se\n     }\n }\n \n-bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61)\n+bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStream& vRecv, int64_t nTimeReceived, const CChainParams& chainparams, CConnman* connman, const std::atomic<bool>& interruptMsgProc, bool enable_bip61, const NetMessageType msg_type)\n {\n-    LogPrint(BCLog::NET, \"received: %s (%u bytes) peer=%d\\n\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n+    /* handling encryption handshake */\n+    if (pfrom->nVersion == 0 && msg_type == NetMessageType::PLAINTEXT_ENCRYPTION_HANDSHAKE) {\n+        LogPrint(BCLog::NET, \"Encryption handshake payload received, peer=%i\\n\", pfrom->GetId());\n+\n+        std::vector<unsigned char> handshake_msg;\n+        handshake_msg.resize(vRecv.size());\n+        memcpy(&handshake_msg[0], &vRecv[0], handshake_msg.size());\n+\n+        if (!pfrom->fInbound && pfrom->m_encryption_handler) {\n+            // we have initiated the encryption\n+            // the message does now contain the remote pubkey\n+            if (!pfrom->m_encryption_handler->ProcessHandshakeRequestData(handshake_msg)) {\n+                LogPrint(BCLog::NET, \"Invalid handshake received, peer=%d\\n\", pfrom->GetId());\n+                return false;\n+            }\n+            pfrom->m_encryption_handler->EnableEncryption(false);\n+            LogPrint(BCLog::NET, \"Enabling encryption as handshake-initiator, sessionID=%s, peer=%d\\n\", pfrom->m_encryption_handler->GetSessionID().ToString(), pfrom->GetId());\n+\n+            // set the trigger to send the vesrion\n+            PushNodeVersion(pfrom, connman, GetTime());\n+        } else {\n+            // encryption handshake response\n+            connman->SendEncryptionHandshakeData(pfrom);\n+            if (!pfrom->m_encryption_handler->ProcessHandshakeRequestData(handshake_msg)) {\n+                LogPrint(BCLog::NET, \"Invalid handshake received, peer=%d\\n\", pfrom->GetId());\n+                return false;\n+            }\n+\n+            // enable encryption at this point\n+            pfrom->m_encryption_handler->EnableEncryption(true);\n+            LogPrint(BCLog::NET, \"Enabling encryption as handshake-responder, sessionID=%s, peer=%d\\n\", pfrom->m_encryption_handler->GetSessionID().ToString(), pfrom->GetId());\n+        }\n+        return true;\n+    }\n+\n+    LogPrint(BCLog::NET, \"received%s: %s (%u bytes) peer=%d\\n\", msg_type == NetMessageType::ENCRYPTED_MSG ? \" encrypted\" : \"\", SanitizeString(strCommand), vRecv.size(), pfrom->GetId());\n     if (gArgs.IsArgSet(\"-dropmessagestest\") && GetRand(gArgs.GetArg(\"-dropmessagestest\", 0)) == 0)\n     {\n         LogPrintf(\"dropmessagestest DROPPING RECV MESSAGE\\n\");\n@@ -2765,7 +2807,7 @@ bool static ProcessMessage(CNode* pfrom, const std::string& strCommand, CDataStr\n         } // cs_main\n \n         if (fProcessBLOCKTXN)\n-            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc, enable_bip61);\n+            return ProcessMessage(pfrom, NetMsgType::BLOCKTXN, blockTxnMsg, nTimeReceived, chainparams, connman, interruptMsgProc, enable_bip61, msg_type);\n \n         if (fRevertToHeaderProcessing) {\n             // Headers received from HB compact block peers are permitted to be\n@@ -3273,7 +3315,7 @@ bool PeerLogicValidation::ProcessMessages(CNode* pfrom, std::atomic<bool>& inter\n     bool fRet = false;\n     try\n     {\n-        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg->nTime, chainparams, connman, interruptMsgProc, m_enable_bip61);\n+        fRet = ProcessMessage(pfrom, strCommand, vRecv, msg->nTime, chainparams, connman, interruptMsgProc, m_enable_bip61, msg->m_type);\n         if (interruptMsgProc)\n             return false;\n         if (!pfrom->vRecvGetData.empty())"
      }
    ]
  },
  {
    "sha": "59609e6db9e14d2c61806fc910cd6e25c3734851",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1OTYwOWU2ZGI5ZTE0ZDJjNjE4MDZmYzkxMGNkNmUyNWMzNzM0ODUx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-15T07:13:27Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:16:47Z"
      },
      "message": "Add and respect service flag NODE_P2P_V2",
      "tree": {
        "sha": "a0ec1f86c25dbf164ac98b08f2bc05226f25ad53",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a0ec1f86c25dbf164ac98b08f2bc05226f25ad53"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/59609e6db9e14d2c61806fc910cd6e25c3734851",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzifo8ACgkQHrd2uwPH\nki1uShAAgX0QJ+ZhATP890rzQftOySSbXoZHTHbai8sTYSUoOvUgX3ct0OWSpxsd\nHMpJ6Wbk2+mqo594EWSUXdcp8r9a24zQHmKgjUHme7k9v52GI8rdFNaYYtKEKxJo\n/qdiyStRfsgnzitEzSJa5btN9K+P13kEFsaAi63teTOUV4B/FmmHqGu0UZFCpzXF\nTYZ+JIDskXp42xSl6w2kVq7g8vqmVBsICFLXxMT727PidMbOQMtNQnB9uau2OtHq\nPfZnzU7ICS93yDaZa1Dz4Kz8epJjmaXbTUEIPfvYOqVunnLzWvYfbvrH+C3TlpaS\nz94BWgMdsHm9EtsPWrAG1b/2hfh4muiYufhQbfZY6jApLotnWsT5M6oXNMCcIrIV\n9hfEjUtVqR7ykCq8A2ra8kpDNPY2RNnIu0+XwjA39p/ZNyy8F7KjmNGzasvJt2fc\nbH4QJ+h8kGSPPtbSQjPOz40NmDu7YIZty2+Q/eJphzWN+1AEkroZaCyaIh8fBee7\n3SM8phRGH84p3GjtBrRnqpYneV0DjPmJfrCD1QS3aahAhBQiiIFjJzFC+GOde2iM\n9M/bFgXQ9dxQ3LkwLI4UhkKEEqpuahTCPm5rGhhDVhgDOiEQjcKbN2PNCoVyO+QI\nWvsLOVxL4wLWuRPfXoExPu7S1wnti0wIGC7+nX4LNfWzBz/HgvI=\n=YZbV\n-----END PGP SIGNATURE-----",
        "payload": "tree a0ec1f86c25dbf164ac98b08f2bc05226f25ad53\nparent 3459cc94a0fa354ac6bd38543de0b84e537f497d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534317207 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347407 +0200\n\nAdd and respect service flag NODE_P2P_V2\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59609e6db9e14d2c61806fc910cd6e25c3734851",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/59609e6db9e14d2c61806fc910cd6e25c3734851",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59609e6db9e14d2c61806fc910cd6e25c3734851/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3459cc94a0fa354ac6bd38543de0b84e537f497d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3459cc94a0fa354ac6bd38543de0b84e537f497d"
      }
    ],
    "stats": {
      "total": 11,
      "additions": 10,
      "deletions": 1
    },
    "files": [
      {
        "sha": "a3f773fdb92a6314c1fe3f3d1fe750e69675a1bf",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59609e6db9e14d2c61806fc910cd6e25c3734851/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59609e6db9e14d2c61806fc910cd6e25c3734851/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=59609e6db9e14d2c61806fc910cd6e25c3734851",
        "patch": "@@ -1698,6 +1698,11 @@ bool AppInitMain(InitInterfaces& interfaces)\n         }\n     }\n \n+    if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n+        LogPrintf(\"Setting NODE_P2P_V2\\n\");\n+        nLocalServices = ServiceFlags(nLocalServices | NODE_P2P_V2);\n+    }\n+\n     if (chainparams.GetConsensus().vDeployments[Consensus::DEPLOYMENT_SEGWIT].nTimeout != 0) {\n         // Only advertise witness capabilities if they have a reasonable start time.\n         // This allows us to have the code merged without a defined softfork, by setting its"
      },
      {
        "sha": "0ed55f8475c45cddfc71dbd6731c7f068e767e50",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59609e6db9e14d2c61806fc910cd6e25c3734851/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59609e6db9e14d2c61806fc910cd6e25c3734851/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=59609e6db9e14d2c61806fc910cd6e25c3734851",
        "patch": "@@ -760,7 +760,9 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n         mapNodeState.emplace_hint(mapNodeState.end(), std::piecewise_construct, std::forward_as_tuple(nodeid), std::forward_as_tuple(addr, std::move(addrName), pnode->fInbound, pnode->m_manual_connection));\n     }\n     if (!pnode->fInbound) {\n-        if (gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n+        // try to encrypt channels if node has the NODE_P2P_V2 service flag or if it was added manually\n+        // TODO: don't try for encryption if it has previously failed\n+        if (((pnode->nServices & NODE_P2P_V2) || pnode->m_manual_connection) && gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n             // send an encryption request\n             connman->SendEncryptionHandshakeData(pnode);\n         } else {"
      },
      {
        "sha": "20aff14b10c1f9be094a9dc6635877100c1c6870",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/59609e6db9e14d2c61806fc910cd6e25c3734851/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/59609e6db9e14d2c61806fc910cd6e25c3734851/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=59609e6db9e14d2c61806fc910cd6e25c3734851",
        "patch": "@@ -268,6 +268,8 @@ enum ServiceFlags : uint64_t {\n     // serving the last 288 (2 day) blocks\n     // See BIP159 for details on how this is implemented.\n     NODE_NETWORK_LIMITED = (1 << 10),\n+    // NODE_P2P_V2: node accepts version 2 message transport protocol\n+    NODE_P2P_V2 = (1 << 11),\n \n     // Bits 24-31 are reserved for temporary experiments. Just pick a bit that\n     // isn't getting used, or one not being used much, and notify the"
      }
    ]
  },
  {
    "sha": "2568074332d9a95e50295d482512d26910d77bae",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNTY4MDc0MzMyZDlhOTVlNTAyOTVkNDgyNTEyZDI2OTEwZDc3YmFl",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-16T06:41:52Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:21:39Z"
      },
      "message": "Implement encryption rekeying",
      "tree": {
        "sha": "0a2e64ca3affb9f794f0165008b1cb0354540724",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a2e64ca3affb9f794f0165008b1cb0354540724"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2568074332d9a95e50295d482512d26910d77bae",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzif7UACgkQHrd2uwPH\nki2wsA/+Kd+iLyp7tyvt8duvEnPcH+Qo3JqgXftybPOFslNymhYFt+XW1HxtrvaP\nzxVyMWS2V1e7rSPS+Ft1XyVIAt6+KCLVkOUErexg3w/lwPOFUHxrpeZXwLecezfg\nTzLjIzoZ7hZgtCyfh6bcoVvIhTb7UoAgfOKxFGzDnryIg2FvJtoMrdoALjFpENAX\nV7ftB+J70Tea4IuKPcxHPOM2LdMzjgaD/e2HCebbzJ1JZyTLT7KRyWMxg6qbpmaz\n74kP1m/1E6A+RiZ/4WBLcLQ7VfdcanZZktiVpl6XMMh/0sQkeBQPzpRjkm6AoadT\nncAeEQgoXyz3OP3U8Go8Qst5Yi+7GMGcB4xQZVVI77z6vDfs7G/QdqEGseqz9mbF\nWQUyqem7XoG8MJz1atDlkxDQHtp3tnz99WhxRq2JJSsKmv0KmHMQZImaSgfZhGzG\nQyL0pLXMXCcZR+1zmALNj7c5WjWF0XTuzHYzLa08mkhMpGk3jkln7S/xyJcb/ukn\njpfp6lWktmH4jPYtAqbNTmjUYnzXeO6+UghbOKZoX+M+T/9uSyE2O/96/tsslS4B\nhhjgz9V0cmMB/UDdyEZ6DSOMSkbdzCNdkkFRl07w8f1idMNIQvLlneTh3DM0S+lX\nj3kCTKW1RdfxnVWYiJo/V/xN/CLi/kBVAiHS9tuceyxqR8D/oaQ=\n=TdG5\n-----END PGP SIGNATURE-----",
        "payload": "tree 0a2e64ca3affb9f794f0165008b1cb0354540724\nparent 59609e6db9e14d2c61806fc910cd6e25c3734851\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534401712 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347699 +0200\n\nImplement encryption rekeying\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2568074332d9a95e50295d482512d26910d77bae",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2568074332d9a95e50295d482512d26910d77bae",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2568074332d9a95e50295d482512d26910d77bae/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "59609e6db9e14d2c61806fc910cd6e25c3734851",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/59609e6db9e14d2c61806fc910cd6e25c3734851",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/59609e6db9e14d2c61806fc910cd6e25c3734851"
      }
    ],
    "stats": {
      "total": 176,
      "additions": 156,
      "deletions": 20
    },
    "files": [
      {
        "sha": "f122fd7152240d57cd33a63e91844ef0a16f3801",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2568074332d9a95e50295d482512d26910d77bae/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2568074332d9a95e50295d482512d26910d77bae/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=2568074332d9a95e50295d482512d26910d77bae",
        "patch": "@@ -513,6 +513,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-mocktime=<n>\", \"Replace actual time with <n> seconds since epoch (default: 0)\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxsigcachesize=<n>\", strprintf(\"Limit sum of signature cache and script execution cache sizes to <n> MiB (default: %u)\", DEFAULT_MAX_SIG_CACHE_SIZE), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-maxtipage=<n>\", strprintf(\"Maximum tip age in seconds to consider node in initial block download (default: %u)\", DEFAULT_MAX_TIP_AGE), true, OptionsCategory::DEBUG_TEST);\n+    gArgs.AddArg(\"-netencryptionfastrekey\", \"Rekeys every 10 seconds or after 10kb of data\", true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printpriority\", strprintf(\"Log transaction fee per kB when mining blocks (default: %u)\", DEFAULT_PRINTPRIORITY), true, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-printtoconsole\", \"Send trace/debug info to console (default: 1 when no -daemon. To disable logging to file, set -nodebuglogfile)\", false, OptionsCategory::DEBUG_TEST);\n     gArgs.AddArg(\"-shrinkdebugfile\", \"Shrink debug.log file on client startup (default: 1 when no -debug)\", false, OptionsCategory::DEBUG_TEST);"
      },
      {
        "sha": "8503ac3d632820350897f3eb41b82e7b7a07adc7",
        "filename": "src/net_encryption.cpp",
        "status": "modified",
        "additions": 121,
        "deletions": 17,
        "changes": 138,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2568074332d9a95e50295d482512d26910d77bae/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2568074332d9a95e50295d482512d26910d77bae/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=2568074332d9a95e50295d482512d26910d77bae",
        "patch": "@@ -6,13 +6,14 @@\n #include <config/bitcoin-config.h>\n #endif\n \n-#include <chainparams.h>\n-#include <crypto/hkdf_sha256_32.h>\n #include <net_encryption.h>\n \n+#include <chainparams.h>\n+#include <crypto/hkdf_sha256_32.h>\n #include <logging.h>\n #include <net_message.h>\n-#include <util.h>\n+#include <util/system.h>\n+#include <util/time.h>\n \n int NetV2Message::Read(const char* pch, unsigned bytes)\n {\n@@ -35,9 +36,18 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n             return -1;\n         }\n \n+        // check and unset rekey bit\n+        // the counterparty can signal a post-this-message rekey by setting the\n+        // most significant bit in the (unencrypted) length\n+        m_rekey_flag = (m_message_size & (1U << 23));\n+        if (m_rekey_flag) {\n+            LogPrint(BCLog::NET, \"Rekey flag detected %ld\\n\", m_message_size);\n+            m_message_size &= ~(1U << 23);\n+        }\n+\n         // reject messages larger than MAX_SIZE\n         if (m_message_size > MAX_SIZE) {\n-            LogPrint(BCLog::NET, \"Max size exceeded\\n\");\n+            LogPrint(BCLog::NET, \"Max message size exceeded %ld\\n\", m_message_size);\n             return -1;\n         }\n \n@@ -79,8 +89,12 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n                 return false;\n             }\n             // vRecv points now to the plaintext message payload (MAC is removed)\n-        }\n \n+            if (m_rekey_flag) {\n+                // post decrypt rekey if rekey was requested\n+                m_encryption_handler->Rekey(false);\n+            }\n+        }\n         return copy_bytes;\n     }\n }\n@@ -125,8 +139,13 @@ bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n     // keep the original payload size\n     size_t vsize = data_in_out.size();\n \n-    // authenticate and decrypt the message\n     LOCK(cs);\n+    if (m_bytes_decrypted + vsize > ABORT_LIMIT_BYTES || GetTime() - m_time_last_rekey_send > ABORT_LIMIT_TIME ||\n+        (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) && m_bytes_decrypted + vsize > 12 * 1024)) {\n+        // don't further decrypt and therefore abort connection when counterparty failed to respect rekey limits\n+        return false;\n+    }\n+    // authenticate and decrypt the message\n     if (!m_recv_aead_ctx->Crypt(m_recv_seq_nr, m_recv_seq_nr_aad, m_recv_aad_keystream_pos, buf_dec.data(), buf_dec.size(), (const unsigned char *)&data_in_out.data()[0],\n             data_in_out.size(), false)) {\n         memory_cleanse(data_in_out.data(), data_in_out.size());\n@@ -142,6 +161,8 @@ bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n         m_recv_aad_keystream_pos = 0;\n         m_recv_seq_nr_aad++;\n     }\n+    // append chacha20 main payload size\n+    m_bytes_decrypted += data_in_out.size() - TAG_LEN - AAD_LEN;\n \n     data_in_out.clear();\n     // write payload (avoid the 3byte AAD length and the MAC)\n@@ -151,6 +172,21 @@ bool P2PEncryption::AuthenticatedAndDecrypt(CDataStream& data_in_out)\n \n bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data_in_out)\n {\n+    // first 3 bytes are the LE uint32 message length the most significant bit\n+    // indicates to the counterparty that the next message will be using the next\n+    // key (rekey) with reset nonce\n+    if (data_in_out[2] & (1u << 7)) {\n+        // length is only allowed up to 2^23\n+        return false;\n+    }\n+    bool should_rekey = ShouldRekeySend();\n+    if (should_rekey) {\n+        // set the rekey flag and signal that the next message will be encrypted\n+        // with the next key (and reset sequence)\n+        // rekey flag is the most significant bit encoded in LE (Bitcoin serialization rule)\n+        data_in_out[2] |= (1u << 7);\n+    }\n+\n     // create a buffer for the encrypted payload\n     std::vector<unsigned char> buf_enc;\n     buf_enc.resize(data_in_out.size() + TAG_LEN);\n@@ -169,10 +205,18 @@ bool P2PEncryption::EncryptAppendMAC(std::vector<unsigned char>& data_in_out)\n         m_send_seq_nr_aad++;\n     }\n \n+    // Count total bytes encrypted\n+    m_bytes_encrypted += data_in_out.size() - AAD_LEN;\n+\n     // clear data_in and append the decrypted data\n     data_in_out.clear();\n     // append encrypted message (AAD & payload & MAC)\n     data_in_out.insert(data_in_out.begin(), buf_enc.begin(), buf_enc.end());\n+\n+    // if it is time to rekey, rekey post encryption\n+    if (should_rekey) {\n+        Rekey(true);\n+    }\n     return true;\n }\n \n@@ -205,27 +249,27 @@ uint256 P2PEncryption::GetSessionID()\n \n void P2PEncryption::EnableEncryption(bool inbound)\n {\n-    unsigned char aead_k_1_a[32];\n-    unsigned char aead_k_2_a[32];\n-    unsigned char aead_k_1_b[32];\n-    unsigned char aead_k_2_b[32];\n-\n     LOCK(cs);\n     if (m_raw_ecdh_secret.size() != 32) {\n         return;\n     }\n+    m_inbound = inbound;\n     // extract 2 keys for each direction with HKDF HMAC_SHA256 with length 32\n     CHKDF_HMAC_SHA256_L32 hkdf_32(&m_raw_ecdh_secret[0], 32, \"BitcoinSharedSecret\");\n-    hkdf_32.Expand32(\"BitcoinK1A\", aead_k_1_a);\n-    hkdf_32.Expand32(\"BitcoinK2A\", aead_k_2_a);\n-    hkdf_32.Expand32(\"BitcoinK1B\", aead_k_1_b);\n-    hkdf_32.Expand32(\"BitcoinK2B\", aead_k_2_b);\n+    hkdf_32.Expand32(\"BitcoinK1A\", m_aead_k_1_a.data());\n+    hkdf_32.Expand32(\"BitcoinK2A\", m_aead_k_2_a.data());\n+    hkdf_32.Expand32(\"BitcoinK1B\", m_aead_k_1_b.data());\n+    hkdf_32.Expand32(\"BitcoinK2B\", m_aead_k_2_b.data());\n     hkdf_32.Expand32(\"BitcoinSessionID\", m_session_id.begin());\n \n+    m_bytes_encrypted = 0;\n+    m_time_last_rekey_send = GetTime();\n+    m_time_last_rekey_recv = m_time_last_rekey_send;\n+\n     // enabling k1 for send channel on requesting peer and for recv channel on responding peer\n     // enabling k2 for recv channel on requesting peer and for send channel on responding peer\n-    m_send_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? aead_k_1_b : aead_k_1_a, sizeof(aead_k_1_a), inbound ? aead_k_2_b : aead_k_2_a, sizeof(aead_k_1_a)));\n-    m_recv_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? aead_k_1_a : aead_k_1_b, sizeof(aead_k_1_a), inbound ? aead_k_2_a : aead_k_2_b, sizeof(aead_k_1_a)));\n+    m_send_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? m_aead_k_1_b.data() : m_aead_k_1_a.data(), m_aead_k_1_a.size(), inbound ? m_aead_k_2_b.data() : m_aead_k_2_a.data(), m_aead_k_1_a.size()));\n+    m_recv_aead_ctx.reset(new ChaCha20Poly1305AEAD(inbound ? m_aead_k_1_a.data() : m_aead_k_1_b.data(), m_aead_k_1_a.size(), inbound ? m_aead_k_2_a.data() : m_aead_k_2_b.data(), m_aead_k_1_a.size()));\n     handshake_done = true;\n }\n \n@@ -267,6 +311,10 @@ bool P2PEncryption::ProcessHandshakeRequestData(const std::vector<unsigned char>\n \n P2PEncryption::P2PEncryption() : handshake_done(false)\n {\n+    m_aead_k_1_a.resize(32);\n+    m_aead_k_2_a.resize(32);\n+    m_aead_k_1_b.resize(32);\n+    m_aead_k_2_b.resize(32);\n     m_ecdh_key.MakeNewKey(true);\n     if (m_ecdh_key.GetPubKey()[0] == 3) {\n         // the encryption handshake will only use 32byte pubkeys\n@@ -275,3 +323,59 @@ P2PEncryption::P2PEncryption() : handshake_done(false)\n     }\n     assert(m_ecdh_key.IsValid());\n }\n+\n+bool P2PEncryption::ShouldRekeySend()\n+{\n+    LOCK(cs);\n+    if (!handshake_done) return false;\n+    int64_t now = GetTime();\n+    if (gArgs.GetBoolArg(\"-netencryptionfastrekey\", false) &&\n+        (m_bytes_encrypted >= 12 * 1024 || (now - m_time_last_rekey_send > 10))) {\n+        // use insane small rekey trigger during re-key tests\n+        LogPrint(BCLog::NET, \"Should rekey (insane -netencryptionfastrekey trigger)\\n\");\n+        return true;\n+    }\n+    if (m_bytes_encrypted >= REKEY_LIMIT_BYTES || now - m_time_last_rekey_send >= REKEY_LIMIT_TIME) {\n+        LogPrint(BCLog::NET, \"Rekey limits reached\\n\");\n+        return true;\n+    }\n+    return false;\n+}\n+\n+bool P2PEncryption::Rekey(bool send_channel)\n+{\n+    LOCK(cs);\n+    int64_t now = GetTime();\n+    if (!send_channel && now - m_time_last_rekey_recv < MIN_REKEY_TIME) {\n+        // requested rekey was below the minimal rekey time: reject\n+        LogPrint(BCLog::NET, \"Reject rekey (DOS limits)\\n\");\n+        return false;\n+    }\n+    LogPrint(BCLog::NET, \"Rekey %s channel\\n\", send_channel ? \"send\" : \"recv\");\n+    CPrivKey* k_1;\n+    CPrivKey* k_2;\n+    if (send_channel) {\n+        k_1 = m_inbound ? &m_aead_k_1_b : &m_aead_k_1_a;\n+        k_2 = m_inbound ? &m_aead_k_2_b : &m_aead_k_2_a;\n+    }\n+    else {\n+        k_1 = m_inbound ? &m_aead_k_1_a : &m_aead_k_1_b;\n+        k_2 = m_inbound ? &m_aead_k_2_a : &m_aead_k_2_b;\n+    }\n+    // rekey after BIP151 rules SHA256(SHA256(session_id || old_symmetric_cipher_key))\n+    // rekey for both keys (AAD and payload key)\n+    uint256 new_k_1 = Hash(m_session_id.begin(), m_session_id.end(), k_1->begin(), k_1->end());\n+    uint256 new_k_2 = Hash(m_session_id.begin(), m_session_id.end(), k_2->begin(), k_2->end());\n+\n+    // reset byte and time counter\n+    if (send_channel) {\n+        m_bytes_encrypted = 0;\n+        m_time_last_rekey_send = GetTime();\n+        m_send_aead_ctx.reset(new ChaCha20Poly1305AEAD(new_k_1.begin(), new_k_1.size(), new_k_2.begin(), new_k_2.size()));\n+    } else {\n+        m_bytes_decrypted = 0;\n+        m_time_last_rekey_recv = GetTime();\n+        m_recv_aead_ctx.reset(new ChaCha20Poly1305AEAD(new_k_1.begin(), new_k_1.size(), new_k_2.begin(), new_k_2.size()));\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "0770dfaa9d732ca8602b851a428a76689c0f6713",
        "filename": "src/net_encryption.h",
        "status": "modified",
        "additions": 31,
        "deletions": 3,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2568074332d9a95e50295d482512d26910d77bae/src/net_encryption.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2568074332d9a95e50295d482512d26910d77bae/src/net_encryption.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.h?ref=2568074332d9a95e50295d482512d26910d77bae",
        "patch": "@@ -33,18 +33,37 @@ class EncryptionHandlerInterface\n     virtual unsigned int GetAADLen() const = 0;\n     virtual void EnableEncryption(bool inbound) = 0;\n     virtual uint256 GetSessionID() = 0;\n+    virtual bool Rekey(bool send_channel) = 0;\n };\n \n class P2PEncryption : public EncryptionHandlerInterface\n {\n private:\n     static constexpr unsigned int TAG_LEN = 16; /* poly1305 128bit MAC tag */\n     static constexpr unsigned int AAD_LEN = 3;  /* 24 bit payload length */\n+\n+    // ChaCha20 must never reuse a {key, nonce} for encryption nor may it be\n+    // used to encrypt more than 2^70 bytes under the same {key, nonce}\n+    // Re-key after 1GB (RFC4253 / SSH recommendation) or after 1h\n+    static constexpr unsigned int REKEY_LIMIT_BYTES = (1024 * 1024 * 1024);\n+    static constexpr unsigned int REKEY_LIMIT_TIME = 3600;                     /* rekey after 1h */\n+    static constexpr unsigned int ABORT_LIMIT_BYTES = REKEY_LIMIT_BYTES * 1.1; // abort after ~10% tolerance buffer\n+    static constexpr unsigned int ABORT_LIMIT_TIME = REKEY_LIMIT_BYTES * 1.1;  // abort after ~10% tolerance buffer\n+    static constexpr unsigned int MIN_REKEY_TIME = 10;                         // minimal rekey time to avoid DOS\n+\n     CKey m_ecdh_key;\n     CPrivKey m_raw_ecdh_secret;\n+    CPrivKey m_aead_k_1_a;\n+    CPrivKey m_aead_k_2_a;\n+    CPrivKey m_aead_k_1_b;\n+    CPrivKey m_aead_k_2_b;\n     uint256 m_session_id;\n-\n+    bool m_inbound;\n     std::atomic_bool handshake_done;\n+    int64_t m_time_last_rekey_send = 0;\n+    int64_t m_time_last_rekey_recv = 0;\n+    uint64_t m_bytes_encrypted = 0; //counter of bytes encrypted with same key\n+    uint64_t m_bytes_decrypted = 0; //counter of bytes decrypted with same key\n \n     CCriticalSection cs;\n     std::unique_ptr<ChaCha20Poly1305AEAD> m_send_aead_ctx;\n@@ -56,6 +75,9 @@ class P2PEncryption : public EncryptionHandlerInterface\n     uint32_t m_send_seq_nr_aad = 0;\n     int m_send_aad_keystream_pos = 0;\n \n+    // check if send channel should rekey\n+    bool ShouldRekeySend();\n+\n public:\n     P2PEncryption();\n     ~P2PEncryption()\n@@ -74,15 +96,19 @@ class P2PEncryption : public EncryptionHandlerInterface\n     void EnableEncryption(bool inbound) override;\n     uint256 GetSessionID() override;\n \n-    unsigned inline int GetTagLen() const override\n+    inline unsigned int GetTagLen() const override\n     {\n         return TAG_LEN;\n     }\n \n-    unsigned inline int GetAADLen() const override\n+    inline unsigned int GetAADLen() const override\n     {\n         return AAD_LEN;\n     }\n+\n+    // rekey for either the send or recv channel\n+    // may return false if recv channel rekey did not respect limits\n+    bool Rekey(bool send_channel) override;\n };\n typedef std::shared_ptr<EncryptionHandlerInterface> EncryptionHandlerRef;\n \n@@ -131,6 +157,7 @@ class NetV2Message : public NetMessageBase\n public:\n     bool m_in_data;\n     uint32_t m_message_size;\n+    bool m_rekey_flag;\n     unsigned int m_hdr_pos;\n     uint32_t m_data_pos;\n     std::string m_command_name;\n@@ -149,6 +176,7 @@ class NetV2Message : public NetMessageBase\n         m_in_data = 0;\n         m_type = NetMessageType::ENCRYPTED_MSG;\n         m_command_name.clear();\n+        m_rekey_flag = false;\n     }\n \n     bool Complete() const override"
      },
      {
        "sha": "9fe247a2f447d0e0a3b58980dfad9d68bbf31ab9",
        "filename": "src/net_processing.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2568074332d9a95e50295d482512d26910d77bae/src/net_processing.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2568074332d9a95e50295d482512d26910d77bae/src/net_processing.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_processing.cpp?ref=2568074332d9a95e50295d482512d26910d77bae",
        "patch": "@@ -762,6 +762,9 @@ void PeerLogicValidation::InitializeNode(CNode *pnode) {\n     if (!pnode->fInbound) {\n         // try to encrypt channels if node has the NODE_P2P_V2 service flag or if it was added manually\n         // TODO: don't try for encryption if it has previously failed\n+        LogPrint(BCLog::NET, \"Service Flags=%lld peer:%d\\n\", pnode->nServices, nodeid);\n+        LogPrint(BCLog::NET, \"Manual Connection=%d peer:%d\\n\", pnode->m_manual_connection, nodeid);\n+        LogPrint(BCLog::NET, \"Net encryption=%d peer:%d\\n\", gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION), nodeid);\n         if (((pnode->nServices & NODE_P2P_V2) || pnode->m_manual_connection) && gArgs.GetBoolArg(\"-netencryption\", DEFAULT_ALLOW_NET_ENCRYPTION)) {\n             // send an encryption request\n             connman->SendEncryptionHandshakeData(pnode);"
      }
    ]
  },
  {
    "sha": "3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozZGU1ZDI0MTVhOWM0ZTMzNmVhOGU5Y2NhYmU1ZmE3ZDA5NDgwMjlk",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-18T20:11:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:21:43Z"
      },
      "message": "Avoid ephemeral key->pubkeys that start with net magic",
      "tree": {
        "sha": "6a649333b4ff2c1038203b736ccc22c80b5a7762",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6a649333b4ff2c1038203b736ccc22c80b5a7762"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzif7cACgkQHrd2uwPH\nki22MxAAkiJjuoWXoJvMari8UOy1Q/rac3fsXeiqFxf6FgYUSugvfPq5XLwdE5RK\nRRHJ0RFuVt3KiSw4FCIRjl5Qv5dw/2kIiOa8myRVUMrSOPr0zhbfaOebzfLeoBmb\nbKvLko36SyYg9GcKvQr1qI1J0ajUcS+oSkFfSqHqdpEqmTRDuAwTf3+Eoms+1Njd\nb/Z7+zK9i3moeTWllLYDbi18QjJDFAlbrGYwbFIv+Ie2FMaK+AsijrQdC+Q2dAJK\np8O5ENlIYS4+RcUlfD/VDg40l3j7NZdr/PIAh9HVoqMHhAnc1jUPXTyk7CAQkfuD\nP1Nc5B5jL15OResl5bIH1BFruWHxwREcTrIPZcrg8JQfoguet/OafQH/cmQxNm/r\np1lXNopJbj8lqNSJI0k0wgbhk/xOw7cKNh5gZgLhDcEIMoZuLf2fJ6jMuibg9TdB\nV+DK2a6usqHpFfHvyZ+JRL64UB0Y+daknR4WW3KvzPVOhI7IiOkk39Lm83uTJeYh\ndnoABPo19OrgnrUSjVX8+CM+GkcS/CFa33eSb5++Q+LivfvSVoS345j6ckCX3Kul\nGuKXF64iXCx8la3Jgy7m+F0zYdXlLIN/Jp0Jm1nAGhc3OMOolhRrLTDW4jSJddim\n0m6od92DBjomiAGg/lXud9ZfP1L8EAQPWVrOqxpTv1wEax1OvbU=\n=PdsS\n-----END PGP SIGNATURE-----",
        "payload": "tree 6a649333b4ff2c1038203b736ccc22c80b5a7762\nparent 2568074332d9a95e50295d482512d26910d77bae\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534623093 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347703 +0200\n\nAvoid ephemeral key->pubkeys that start with net magic\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2568074332d9a95e50295d482512d26910d77bae",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2568074332d9a95e50295d482512d26910d77bae",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2568074332d9a95e50295d482512d26910d77bae"
      }
    ],
    "stats": {
      "total": 15,
      "additions": 9,
      "deletions": 6
    },
    "files": [
      {
        "sha": "17b3ae90313aebf9451f8efb554119894e778c50",
        "filename": "src/net_encryption.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
        "patch": "@@ -315,12 +315,15 @@ P2PEncryption::P2PEncryption() : handshake_done(false)\n     m_aead_k_2_a.resize(32);\n     m_aead_k_1_b.resize(32);\n     m_aead_k_2_b.resize(32);\n-    m_ecdh_key.MakeNewKey(true);\n-    if (m_ecdh_key.GetPubKey()[0] == 3) {\n-        // the encryption handshake will only use 32byte pubkeys\n-        // force EVEN (0x02) pubkey be negating the private key in case of ODD (0x03) pubkeys\n-        m_ecdh_key.Negate();\n-    }\n+    // loop until we have generate a key where its pubkey does not match the network magic\n+    do {\n+        m_ecdh_key.MakeNewKey(true);\n+        if (m_ecdh_key.GetPubKey()[0] == 3) {\n+            // the encryption handshake will only use 32byte pubkeys\n+            // force EVEN (0x02) pubkey be negating the private key in case of ODD (0x03) pubkeys\n+            m_ecdh_key.Negate();\n+        }\n+    } while (memcmp(&m_ecdh_key.GetPubKey()[1], Params().MessageStart(), 4) == 0);\n     assert(m_ecdh_key.IsValid());\n }\n "
      }
    ]
  },
  {
    "sha": "c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjNDVlMmEyOGJhZTEyNWVjMTdlOGIxMzdiZDg3ZTZhZTExZmNhYjgx",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-20T13:28:33Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:21:52Z"
      },
      "message": "Add encryption state and session id to getpeerinfo",
      "tree": {
        "sha": "7ac3ff3dfcde84e5d4bb130ebac6237a07c9c814",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7ac3ff3dfcde84e5d4bb130ebac6237a07c9c814"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzif8AACgkQHrd2uwPH\nki2H0g//bdndTdfXmG/5HXhOrtrBWBnJ7S3ZbOK12l/pY8p33CFu9fsavO7pOJS6\nPLRbl7w/CCR1ZbxPpRxioT5hTAOHIG3oEV3ZXGMb+oWgz6hPy2733NshUlaldluY\nHsLKLiz2H3bg8G4QR3IT+lU8+gTvqycw9nsLXUFTR4KXulNZ6I4iH+hut8CXDPrN\nkTqgRwFqzDjxcbAi2IYdVka8OTwxE2D4IS10YeQrfaKQ/N2aePMWKrbpN3Jbo42c\nGeOFCJk0t+Cmrt0+OmYj8Dxrh8EqbhU3g/0+dzGKSu5hiGh2S7pIwfn6dwARoAJI\n9h7dkjO1GXqQ97IlzkmnDE2sbccZ1DKGM5gNGBQGWk3oJWU9NZRUWsHTK3DX4O97\nqEqZWoyV5eGLyynq6lU4w/4I1VgRcriXC3BADu74n5E8CPC5YACUtmwnDEXdlv3Y\nGrUgvdjW4liButL71Tv88kQ4lD9cOsmVxS3Gx15ZfsaIy4IdNnMo3aCumk1Wj4X5\nkh8rp4GAO7oGaDlBadHJ4+niRJQ38K9ycgsGtUVnVVX/EjJa2frvn6rXrPAAv59m\ny71+B5EKFdvSrZsGWONWFn4ZhQwQKzZ4zkoHEHrHzouDWZGcOleaLk0ixYc5K6zD\nZyqnJz1VHNqUg0QYd0IpgG9hSoAqnGdnxrtrknaEqkXXx9CiRgM=\n=iZSe\n-----END PGP SIGNATURE-----",
        "payload": "tree 7ac3ff3dfcde84e5d4bb130ebac6237a07c9c814\nparent 3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534771713 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347712 +0200\n\nAdd encryption state and session id to getpeerinfo\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3de5d2415a9c4e336ea8e9ccabe5fa7d0948029d"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 14,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9027451081a3411ffa3778568ac75538e720e191",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
        "patch": "@@ -550,6 +550,12 @@ void CNode::copyStats(CNodeStats &stats)\n     // Leave string empty if addrLocal invalid (not filled in yet)\n     CService addrLocalUnlocked = GetAddrLocal();\n     stats.addrLocal = addrLocalUnlocked.IsValid() ? addrLocalUnlocked.ToString() : \"\";\n+\n+    // copy encryption details\n+    stats.m_is_encrypted = m_encryption_handler && m_encryption_handler->ShouldCryptMsg();\n+    if (stats.m_is_encrypted) {\n+        stats.m_encryption_session_id = m_encryption_handler->GetSessionID();\n+    }\n }\n #undef X\n "
      },
      {
        "sha": "d0129b574a83c8a1dc5b39971227fb2c1ab1f5ab",
        "filename": "src/net.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/net.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/net.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.h?ref=c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
        "patch": "@@ -570,6 +570,9 @@ class CNodeStats\n     CAddress addr;\n     // Bind address of our side of the connection\n     CAddress addrBind;\n+    // encryption details\n+    bool m_is_encrypted = 0;\n+    uint256 m_encryption_session_id;\n };\n \n /** Information about a peer */"
      },
      {
        "sha": "6befbd8ad29de5a7943ca8d3e9ed63ae3cd8313c",
        "filename": "src/rpc/net.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/rpc/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c45e2a28bae125ec17e8b137bd87e6ae11fcab81/src/rpc/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/net.cpp?ref=c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
        "patch": "@@ -201,6 +201,11 @@ static UniValue getpeerinfo(const JSONRPCRequest& request)\n                 recvPerMsgCmd.pushKV(i.first, i.second);\n         }\n         obj.pushKV(\"bytesrecv_per_msg\", recvPerMsgCmd);\n+        obj.pushKV(\"encrypted\", stats.m_is_encrypted);\n+        if (stats.m_is_encrypted) {\n+            obj.pushKV(\"encryption_session_id\", stats.m_encryption_session_id.ToString());\n+        }\n+\n \n         ret.push_back(obj);\n     }"
      }
    ]
  },
  {
    "sha": "11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMWY0Yjc3ZjZhZThmYWFmOGIyMDEzMzU2YjM1MTI1YzdiODdlOThh",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-08-20T13:28:58Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:22:00Z"
      },
      "message": "[QA] add encryption functional test",
      "tree": {
        "sha": "5c40a89ecf0608deddb57c57ee1684dc810647e0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5c40a89ecf0608deddb57c57ee1684dc810647e0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzif8gACgkQHrd2uwPH\nki1I7A/7B7aJ3Hh6/HRF4ZjkcM5oU9WRZ5/VvJZE5JYmQyiimcw9p+OUSRc9D6bb\nse0dTuMZoM/qqYuZ5/lv9IrZWcPxQwqMirIMFISm3lsCAqJCC6RDgpGpvMgK5fWh\npK1kTXaGydNvLI7bC66xwWTZNT0c7e0F9nOrTfct/rhov8uslHP6+UxsrocnAND+\n8dQPJCrFZtFqfiYNlMAqoqw3FDx4azR2KWtAmD0jRzof0OA3Sl0xoB3VQSyE1KWR\n2Z0O9CI8vlpDTqlPfvKUiAY+O19EBlO0R1mB03YlUEPCZZLHpPrlAe9vYSsWF4Xe\nMt82T+OvFu+FADqhLwWtPn40HQobWEPUrZGyiiEohvXq9c2v9VRybe+Zon07Zpu0\nlhrzgl2Kz3zw8ngxsIvJkPGIo4hS1DDA4a5yJ5Lh0zrEl8e1f9I5RIzHSeZBUlbv\nmvKTqOSAJ9ujU9vtHnXBP5njt4ezEwdbW4BCfI8KtGcfuAwaq5/eAe5S2sYWgG/D\nwFMx6IBHLEfAiq7QlzTwTidotSFw0JhKpL4Lhe2dalulLEznC65XIF3CUpsKe4Pm\n+mpT0BpQvzKIiYic97GOljiYODmeRtR/1EjQdlfUL6KCBzM1rqdzoRibpn4Um10B\nHfmOV7Xwbhn8FqRZdlzYy559qBg3c5fcfyxnBjeg/zNr+wXnOrI=\n=67Jf\n-----END PGP SIGNATURE-----",
        "payload": "tree 5c40a89ecf0608deddb57c57ee1684dc810647e0\nparent c45e2a28bae125ec17e8b137bd87e6ae11fcab81\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1534771738 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347720 +0200\n\n[QA] add encryption functional test\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f4b77f6ae8faaf8b2013356b35125c7b87e98a/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c45e2a28bae125ec17e8b137bd87e6ae11fcab81",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c45e2a28bae125ec17e8b137bd87e6ae11fcab81"
      }
    ],
    "stats": {
      "total": 51,
      "additions": 51,
      "deletions": 0
    },
    "files": [
      {
        "sha": "0214939143d7ba0d3b577ab3824cdc3f782dbe39",
        "filename": "test/functional/p2p_encryption.py",
        "status": "added",
        "additions": 50,
        "deletions": 0,
        "changes": 50,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f4b77f6ae8faaf8b2013356b35125c7b87e98a/test/functional/p2p_encryption.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f4b77f6ae8faaf8b2013356b35125c7b87e98a/test/functional/p2p_encryption.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_encryption.py?ref=11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
        "patch": "@@ -0,0 +1,50 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2018 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\"\"\"Tests NODE_ENCRYPTED (v2 protocol, encryption after BIP151).\"\"\"\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import assert_equal, connect_nodes\n+\n+class EncryptionTest(BitcoinTestFramework):\n+    def set_test_params(self):\n+        self.setup_clean_chain = True\n+        self.num_nodes = 4\n+        self.extra_args = [['-netencryption'], ['-netencryption'], ['-netencryption=0'], ['-netencryption']]\n+\n+    def setup_network(self):\n+        self.setup_nodes()\n+        connect_nodes(self.nodes[0], 1)\n+        connect_nodes(self.nodes[2], 1)\n+        connect_nodes(self.nodes[2], 3)\n+        connect_nodes(self.nodes[3], 1)\n+        self.sync_all()\n+\n+    def getEncryptionSessions(self, node):\n+        session_ids = []\n+        for peer in node.getpeerinfo():\n+            if peer['encrypted']:\n+                session_ids.append(peer['encryption_session_id'])\n+        return session_ids\n+\n+    def run_test(self):\n+        self.nodes[0].generate(101)\n+        self.sync_all()\n+        nodes_session_id = []\n+        for i in range(0,4):\n+            nodes_session_id.append(self.getEncryptionSessions(self.nodes[i]))\n+        print(nodes_session_id)\n+        self.log.info(\"Check that node0 has one encrypted connections.\")\n+        assert_equal(len(nodes_session_id[0]), 1)\n+        self.log.info(\"Check that node1 has two encrypted connections.\")\n+        assert_equal(len(nodes_session_id[1]), 2)\n+        self.log.info(\"Check that node2 has zero encrypted connections.\")\n+        assert_equal(len(nodes_session_id[2]), 0)\n+        self.log.info(\"Check that node3 has one encrypted connections.\")\n+        assert_equal(len(nodes_session_id[3]), 1)\n+        self.log.info(\"Make sure session id matches\")\n+        assert(nodes_session_id[0][0] in nodes_session_id[1])\n+        assert(nodes_session_id[3][0] in nodes_session_id[1])\n+\n+if __name__ == '__main__':\n+    EncryptionTest().main()"
      },
      {
        "sha": "1e6722a6f5d308cc05e675d1da4f1ba77b4e75d3",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/11f4b77f6ae8faaf8b2013356b35125c7b87e98a/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/11f4b77f6ae8faaf8b2013356b35125c7b87e98a/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
        "patch": "@@ -179,6 +179,7 @@\n     'feature_dersig.py',\n     'feature_cltv.py',\n     'rpc_uptime.py',\n+    'p2p_encryption.py',\n     'wallet_resendwallettransactions.py',\n     'wallet_fallbackfee.py',\n     'feature_minchainwork.py',"
      }
    ]
  },
  {
    "sha": "39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozOWJmMTBmYmUzYmIzYzJkODliODAyMzI4YzkzM2U3Y2QwODE0ZGE0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2018-09-02T10:10:43Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2019-05-20T10:22:18Z"
      },
      "message": "Implement v2 p2p protocol command short IDs",
      "tree": {
        "sha": "320358053f3f58a0cd551d2843afd1e27d837336",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/320358053f3f58a0cd551d2843afd1e27d837336"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEyhopCNzi8TB0xizeHrd2uwPHki0FAlzif9oACgkQHrd2uwPH\nki2MBA/+Op7pKSt+imJGEGpgTQLWocVf8Tm64kGtgD04ikt96jkFkIGN8F/C2i5Q\ntoYIOysCdOQ/YZabM/IusRPin19AbtxHZpnKvIfm0eE4zYP0NDiEXVWxyR2Y0UFM\nHOFq6JIuJ8s+fprV9A/1OBrrgRn4z7/e1DTawRiZkGD4t5+6TOeBefLXJVURUgRb\n2edziLX9UMypKTwnBOApiMUgPG4TJRBW9RuhawsQteIlRQJpst/ApFtPoRB/qc/r\n8Vx/seCCclzIPjdK8zsqxlhAjZEeUR2G1wDsxZxOy8Bg74Nv5EgrEdJll3IbEAyq\n/AnP9mKQ8lexVkCiWroojoy8fsfMK6OtWqs9ldCWLhkwz2JJjIHhW2BbuX/zlvlD\nQbS6l9Zmgd2azzHBiy7/bOU2bcZY1z1UtJG17EzBRvyOksuSbvBnzLFHK3+KHJsQ\nzyyi67LfHlDYJxnmcVLYH3YhRGOncGnTcpxjXWFvM79YVhV8GgHKM21qrabzekcW\nWhN2KUQBsHjVpSml9IvxaxT8aByg8Ey88MI9gKrjy/UEiAV7ZKiJV8kw1/Pqe/fc\nxLEFgwzW6xab8Px5dvqzIoHTkXjc1L+UrHnaUG6H18cwjZANljrcmrY/YeDFGy+H\nQKSxvQsIRjHoMQQRDpOXthjWeDv8hw7exAWmjZqO16u/pE/JkaU=\n=4mxJ\n-----END PGP SIGNATURE-----",
        "payload": "tree 320358053f3f58a0cd551d2843afd1e27d837336\nparent 11f4b77f6ae8faaf8b2013356b35125c7b87e98a\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1535883043 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1558347738 +0200\n\nImplement v2 p2p protocol command short IDs\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/11f4b77f6ae8faaf8b2013356b35125c7b87e98a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/11f4b77f6ae8faaf8b2013356b35125c7b87e98a"
      }
    ],
    "stats": {
      "total": 79,
      "additions": 77,
      "deletions": 2
    },
    "files": [
      {
        "sha": "42e9b3b3b5593178af6291831c1eaba6e2e713d0",
        "filename": "src/net.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 1,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/net.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/net.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net.cpp?ref=39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
        "patch": "@@ -2635,8 +2635,17 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n     size_t nMessageSize = msg.data.size();\n     size_t nTotalSize = nMessageSize;\n     size_t serialized_command_size = ::GetSerializeSize(msg.command, PROTOCOL_VERSION);\n+    uint8_t cmd_short_id = 0;\n     bool should_crypt = pnode->m_encryption_handler && pnode->m_encryption_handler->ShouldCryptMsg();\n     if (should_crypt) {\n+        // the crypted protocol supports short command IDs\n+        cmd_short_id = GetShortCommandIDFromCommand(msg.command);\n+        if (cmd_short_id != 0) {\n+            // if no short ID is available, use a size between 1-12 (always one byte)\n+            assert(msg.command.size() <= 12);\n+            serialized_command_size = 1;\n+        }\n+\n         // add encrypted header size (AAD + MAC TAG + Varlen-Command + inner-message-size)\n         nTotalSize += pnode->m_encryption_handler->GetAADLen() + pnode->m_encryption_handler->GetTagLen() + serialized_command_size;\n     } else {\n@@ -2656,7 +2665,14 @@ void CConnman::PushMessage(CNode* pnode, CSerializedNetMsg&& msg)\n         uint8_t int24[3];\n         memcpy(int24, &envelope_payload_length, 3);\n \n-        CVectorWriter{SER_NETWORK, INIT_PROTO_VERSION, serialized_envelope, 0, int24[0], int24[1], int24[2], msg.command};\n+        CVectorWriter vector_writer(SER_NETWORK, INIT_PROTO_VERSION, serialized_envelope, 0, int24[0], int24[1], int24[2]);\n+        if (cmd_short_id) {\n+            // append the single byte short ID...\n+            vector_writer << cmd_short_id;\n+        } else {\n+            // or the ASCII command string\n+            vector_writer << msg.command;\n+        }\n         //append the message itself (if there is a message)\n         if (nMessageSize) serialized_envelope.insert(serialized_envelope.end(), msg.data.begin(), msg.data.end());\n "
      },
      {
        "sha": "d37525040f4569b7a02a1a25ab97dd414691fe97",
        "filename": "src/net_encryption.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 1,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/net_encryption.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/net_encryption.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/net_encryption.cpp?ref=39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
        "patch": "@@ -82,12 +82,29 @@ int NetV2Message::Read(const char* pch, unsigned bytes)\n             // m_message_size holds the packet size excluding the MAC\n \n             // initially check the message\n+            // the first byte of the message is a ASCII command string size from 1-12\n+            // or a short ID (>12)\n+            uint8_t size_or_shortid;\n             try {\n-                vRecv >> m_command_name;\n+                vRecv >> size_or_shortid;\n             } catch (const std::exception&) {\n                 LogPrint(BCLog::NET, \"Invalid command name\\n\");\n                 return false;\n             }\n+            if (size_or_shortid == 0) return false; //0 is invalid\n+            if (size_or_shortid <= 12) {\n+                // string command\n+                if (vRecv.size() < size_or_shortid) return false;\n+\n+                m_command_name.resize(size_or_shortid);\n+                vRecv.read(&m_command_name[0], size_or_shortid);\n+            }\n+            else {\n+                // must be a short ID\n+                if (!GetCommandFromShortCommandID(size_or_shortid, m_command_name)) {\n+                    return false; // short ID not found\n+                }\n+            }\n             // vRecv points now to the plaintext message payload (MAC is removed)\n \n             if (m_rekey_flag) {"
      },
      {
        "sha": "2f7b649058eda0545e1956b4a1b372a875c1eed8",
        "filename": "src/protocol.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 0,
        "changes": 27,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/protocol.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/protocol.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.cpp?ref=39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
        "patch": "@@ -201,3 +201,30 @@ const std::vector<std::string> &getAllNetMessageTypes()\n {\n     return allNetMessageTypesVec;\n }\n+\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd) {\n+    if (cmd == NetMsgType::HEADERS) {\n+        return NetMsgType::HEADERS_SHORT_ID;\n+    } else if (cmd == NetMsgType::INV) {\n+        return NetMsgType::INV_SHORT_ID;\n+    } else if (cmd == NetMsgType::PING) {\n+        return NetMsgType::PING_SHORT_ID;\n+    } else if (cmd == NetMsgType::PONG) {\n+       return NetMsgType::PONG_SHORT_ID;;\n+    }\n+    return 0; //no short command\n+}\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd) {\n+    if (shortID == NetMsgType::HEADERS_SHORT_ID) {\n+        cmd = NetMsgType::HEADERS;\n+    } else if (shortID == NetMsgType::INV_SHORT_ID) {\n+        cmd = NetMsgType::INV;\n+    } else if (shortID == NetMsgType::PING_SHORT_ID) {\n+        cmd = NetMsgType::PING;\n+    } else if (shortID == NetMsgType::PONG_SHORT_ID) {\n+       cmd = NetMsgType::PONG;\n+    } else {\n+        return false; //ID not found\n+    }\n+    return true;\n+}"
      },
      {
        "sha": "fef05e8c1468ddc04b4cf64a60e32a004a498989",
        "filename": "src/protocol.h",
        "status": "modified",
        "additions": 15,
        "deletions": 0,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/protocol.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/39bf10fbe3bb3c2d89b802328c933e7cd0814da4/src/protocol.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/protocol.h?ref=39bf10fbe3bb3c2d89b802328c933e7cd0814da4",
        "patch": "@@ -90,6 +90,7 @@ extern const char *ADDR;\n  * @see https://bitcoin.org/en/developer-reference#inv\n  */\n extern const char *INV;\n+const uint8_t INV_SHORT_ID=13; //short ID defined in BIPXXX\n /**\n  * The getdata message requests one or more data objects from another node.\n  * @see https://bitcoin.org/en/developer-reference#getdata\n@@ -127,6 +128,7 @@ extern const char *TX;\n  * @see https://bitcoin.org/en/developer-reference#headers\n  */\n extern const char *HEADERS;\n+const uint8_t HEADERS_SHORT_ID=14; //default short ID defined in BIPXXX\n /**\n  * The block message transmits a single serialized block.\n  * @see https://bitcoin.org/en/developer-reference#block\n@@ -151,13 +153,15 @@ extern const char *MEMPOOL;\n  * @see https://bitcoin.org/en/developer-reference#ping\n  */\n extern const char *PING;\n+const uint8_t PING_SHORT_ID=15; //default short ID defined in BIPXXX\n /**\n  * The pong message replies to a ping message, proving to the pinging node that\n  * the ponging node is still alive.\n  * @since protocol version 60001 as described by BIP31.\n  * @see https://bitcoin.org/en/developer-reference#pong\n  */\n extern const char *PONG;\n+const uint8_t PONG_SHORT_ID=16; //default short ID defined in BIPXXX\n /**\n  * The notfound message is a reply to a getdata message which requested an\n  * object the receiving node does not have available for relay.\n@@ -243,6 +247,17 @@ extern const char *BLOCKTXN;\n /* Get a vector of all valid message types (see above) */\n const std::vector<std::string> &getAllNetMessageTypes();\n \n+// Short Command IDs are a low bandwidth representations of a message type\n+// The mapping is a peer to peer agreement\n+\n+// returns the short command ID for a command\n+// returns 0 of no short command ID has been found\n+uint8_t GetShortCommandIDFromCommand(const std::string cmd);\n+\n+// returns the command (string) from a short command ID\n+// returns an empty string if short command ID has not been found\n+bool GetCommandFromShortCommandID(uint8_t shortID, std::string& cmd);\n+\n /** nServices flags */\n enum ServiceFlags : uint64_t {\n     // Nothing"
      }
    ]
  }
]