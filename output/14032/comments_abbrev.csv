DrahtBot,2018-08-23T18:28:26Z,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#16362](https://drahtbot.github.io/bitcoin_core_issue_redirect/r/16362.html) (gui: Bilingual translation by hebasto)\n* [",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-415521431,415521431,
jonasschnelli,2018-08-23T19:50:32Z,Fixed @practicalswift points.,https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-415549299,415549299,
gmaxwell,2018-08-23T20:26:51Z,"Great work!\n\nAlthough optimized crypto is certainly out of scope, we do want to be mindful of making any protocol decisions that would preclude using them. :)",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-415559982,415559982,
jonasschnelli,2018-08-24T09:22:11Z,"Note to reviewers: please review...\n* #14046 Refactor message parsing (CNetMessage), adds flexibility \n* #14047 Add HKDF_HMAC256_L32 and method to negate a private key\n* #14049 Enable libsecp256k1 ecdh module, add ECDH function to CKey\n* #14050 Add chacha20/poly1305 and chacha20poly1305_AEAD from openssh\n... first (extracted commits from this PR)",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-415704147,415704147,
luke-jr,2018-08-29T18:20:38Z,What is the point of `NODE_ENCRYPTED`? Service bits shouldn't be used for mere protocol negotiation...,https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-417054311,417054311,
jonasschnelli,2018-08-29T19:11:06Z,"> What is the point of NODE_ENCRYPTED? Service bits shouldn't be used for mere protocol negotiation...\n\nThis has now been discussed on IRC:\nhttps://botbot.me/freenode/bitcoin-core-dev/2018-08-29/?msg=103889728&page=3",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-417070832,417070832,
Sjors,2018-09-02T08:40:51Z,"Lightly tested on macOS. I was able to establish an encrypted connection and sync headers to afresh node. It didn't (immediately) sync blocks though, but maybe that's normal behavior when you only have 1 peer?\n\nQT Peers Window doesn't show the new service flag next to Services, and it also doesn't show the encryption info, but that can be done in another PR. \n\nI would move the TODO `add op",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-417914339,417914339,
jonasschnelli,2018-09-03T11:23:34Z,"I removed the term ""stealth encryption"" from the source code (plus code comments). Also fixed the protocol.h `NODE_ENCRYPTED` comment.",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-418086026,418086026,
jonasschnelli,2018-09-18T07:54:59Z,Rebased.,https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-422293012,422293012,
practicalswift,2018-09-21T08:19:48Z,This PR does not seem to compile after rebasing on `master` :-),https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-423453904,423453904,
DrahtBot,2019-07-12T18:54:03Z,<!--cf906140f33d8803c4a75a2196329ecb-->Needs rebase,https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-510995529,510995529,
fanquake,2021-08-18T12:25:27Z,"My understanding is that someone else is helping with / taking over these changes, and that the BIP is still being overhauled. \nI think we'll be better off with new PRs, and clean discussion when work on the implementation resumes in this repo.\nChanges from here are be cherry-picked if / when needed. So I'm going to close this PR for now. ",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-901069838,901069838,
michaelfolkson,2021-08-23T12:16:18Z,"For additional context on above from @fanquake [BIP 151](https://github.com/bitcoin/bips/blob/master/bip-0151.mediawiki) has been withdrawn, the replacement is [BIP 324](https://gist.github.com/dhruv/5b1275751bc98f3b64bcafce7876b489) and the point of contact for BIP 324 appears to be @dhruv from this point on. ",https://github.com/bitcoin/bitcoin/pull/14032#issuecomment-903711804,903711804,
practicalswift,2018-08-23T18:03:45Z,"Nit: Should this be ”envelope” instead of ”envelop”? If so, change applies throughout this PR and also the BIP.",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r212404219,212404219,src/net.cpp
practicalswift,2018-08-23T18:07:22Z,If I’m reading the logic correct then this should be ”every 10 seconds _or_ after 10kb of data”?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r212405404,212405404,src/init.cpp
practicalswift,2018-08-23T18:08:57Z,Nit: “treat”,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r212405909,212405909,src/net.cpp
practicalswift,2018-08-23T18:11:13Z,Nit: “therefore”?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r212406669,212406669,src/net_encryption.cpp
practicalswift,2018-08-23T18:13:18Z,Nit: “has”?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r212407341,212407341,src/net_message.h
practicalswift,2018-09-01T21:07:03Z,Should be “reset”?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214523047,214523047,src/net_encryption.cpp
practicalswift,2018-09-01T21:07:17Z,Same here: “reset”?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214523056,214523056,src/net_encryption.cpp
practicalswift,2018-09-02T08:00:35Z,Typo found by `codespell`: exluding,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214532174,214532174,src/net_encryption.cpp
jonasschnelli,2018-09-02T08:48:09Z,Fixed those spelling issues.,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214533260,214533260,src/net_encryption.cpp
Sjors,2018-09-02T11:03:40Z,"You're using the term ""stealth encryption"" in various places, but this term isn't used in the BIP.",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214536556,214536556,src/net.cpp
Sjors,2018-09-02T11:06:35Z,"""does accept""? Maybe change to ""NODE_ENCRYPTED: node accepts encrypted communication, see BIP151""?",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r214536621,214536621,src/protocol.h
practicalswift,2018-09-05T07:14:46Z,`m_inbound` is not initialized in the constructor?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r215158004,215158004,src/net_encryption.h
practicalswift,2018-09-21T08:27:38Z,"```\n2018-09-20 04:06:03 clang-tidy(pr=14032): src/net_encryption.cpp:300:1: warning: constructor does not initialize these fields: m_inbound, m_send_aead_ctx, m_recv_aead_ctx [cppcoreguidelines-pro-type-member-init]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r219419536,219419536,src/net_encryption.cpp
practicalswift,2018-09-21T08:29:16Z,"```\n2018-09-20 04:10:08 pvs-studio-analyzer(pr=14032): src/net_encryption.cpp:300 [err] V730 Not all members of a class are initialized inside the constructor. Consider inspecting: m_inbound, m_send_aead_ctx, m_recv_aead_ctx.\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r219419987,219419987,src/net_encryption.cpp
practicalswift,2018-09-23T08:06:47Z,"```\n2018-09-22 21:25:19 cpplint(pr=14032): src/bench/chacha20poly1305.cpp:29:  Missing space after ,  [whitespace/comma] [3]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r219691387,219691387,src/bench/chacha20poly1305.cpp
practicalswift,2018-09-23T08:07:00Z,"```\n2018-09-22 21:25:19 cpplint(pr=14032): src/bench/chacha20poly1305.cpp:30:  Missing space after ,  [whitespace/comma] [3]\n```\n",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r219691396,219691396,src/bench/chacha20poly1305.cpp
practicalswift,2018-09-23T08:07:25Z,"```\n2018-09-22 21:25:19 cpplint(pr=14032): src/bench/chacha20poly1305.cpp:51:  Missing space after ,  [whitespace/comma] [3]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r219691411,219691411,src/bench/chacha20poly1305.cpp
practicalswift,2018-09-25T20:17:40Z,"```\n2018-09-25 21:57:17 clang(pr=14032): net_encryption.h:77:5: warning: '~BIP151Encryption' overrides a destructor but is not marked 'override' [-Winconsistent-missing-destructor-override]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220339631,220339631,src/net_encryption.h
practicalswift,2018-09-25T20:19:03Z,"```\n2018-09-25 21:57:17 clang(pr=14032): net_encryption.h:161:105: warning: unused parameter 'pchMessageStartIn' [-Wunused-parameter]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220340103,220340103,src/net_encryption.h
practicalswift,2018-09-25T20:22:53Z,"```\n2018-09-25 21:57:17 clang(pr=14032): net.cpp:2815:68: warning: implicit conversion loses integer precision: 'unsigned long' to 'uint32_t' (aka 'unsigned int') [-Wshorten-64-to-32]\n```",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220341324,220341324,src/net.cpp
sipa,2018-09-25T20:37:21Z,"@practicalswift Could you slow down the rate of these nits?\n\nThey're useful, but my mailbox is full of basically just these style of comments. Perhaps these are things to point out when a PR is active, and basically ready for merging, not when it's laid dormant for weeks. This way it litters the PR page with loads of information that's distracting for someone who hasn't even gone to give a con",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220346225,220346225,src/net.cpp
practicalswift,2018-09-25T21:06:18Z,"@sipa Absolutely! I'm still calibrating this reporting to increase the signal to noise, so feedback is appreciated!\n\nI'll try to find the right threshold for things that are worth commenting about, and also some heuristic for determining which PR:s to analyze. Currently I'm analyzing all open PR:s but that is perhaps overkill.\n\nThere should probably be a max comment count per PR too. This ",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220355440,220355440,src/net.cpp
Sjors,2018-09-26T13:02:29Z,I think waiting for either two concept ACK or one utACK / ACK / tACK would make sense.,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r220551168,220551168,src/net.cpp
practicalswift,2018-09-30T16:06:20Z,Should be `get_encryption_sessions`? Could also be a function instead of method since `self` is not used?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r221464261,221464261,test/functional/p2p_encryption.py
practicalswift,2018-09-30T16:08:19Z,Could drop this `else` statement (and keep the block as-is but one indentation level to the left) to make the code easier to follow?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r221464337,221464337,src/net_encryption.cpp
practicalswift,2018-09-30T16:12:33Z,Invert logic here to handle the `!Complete()` case first? That would simplify the code and reduce indentation.,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r221464481,221464481,src/net_encryption.cpp
practicalswift,2018-10-16T20:24:06Z,"Should be ""version"" :-)",https://github.com/bitcoin/bitcoin/pull/14032#discussion_r225694991,225694991,src/net_processing.cpp
practicalswift,2019-03-13T21:49:59Z,Scope could be reduced?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r265345892,265345892,src/crypto/chacha_poly_aead.cpp
practicalswift,2019-03-13T21:52:15Z,Initialize to zero here (or in constructor) to be on the safe side?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r265346596,265346596,src/crypto/chacha_poly_aead.h
practicalswift,2019-03-13T21:58:54Z,Is the non-ref const string here intentional? Assuming SSO will take place?,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r265348618,265348618,src/protocol.cpp
fanquake,2021-03-12T00:29:06Z,Please [use `std::make_unique` in new code](https://github.com/bitcoin/bitcoin/blob/master/src/util/memory.h#L13).,https://github.com/bitcoin/bitcoin/pull/14032#discussion_r592826271,592826271,src/net.cpp
