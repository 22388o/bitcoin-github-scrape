[
  {
    "sha": "9e071b00898aedd9632f105a22d976dc6dbc84b1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZTA3MWIwMDg5OGFlZGQ5NjMyZjEwNWEyMmQ5NzZkYzZkYmM4NGIx",
    "commit": {
      "author": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-03T06:58:51Z"
      },
      "committer": {
        "name": "fanquake",
        "email": "fanquake@gmail.com",
        "date": "2020-04-03T14:47:59Z"
      },
      "message": "test: remove rapidcheck integration and tests",
      "tree": {
        "sha": "dcd9fe18d5f554c5e794776da085f52fd91d1b57",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/dcd9fe18d5f554c5e794776da085f52fd91d1b57"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9e071b00898aedd9632f105a22d976dc6dbc84b1",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEz7FuIclQ9n+pXlWPLuufXMCVJsEFAl6HTJ8ACgkQLuufXMCV\nJsHhahAAukACt8m8yvVti0eL2LNsZhlJZySL3ECh91ztlh932fTZTLIjaKYRS6IO\nd2Qe3wUxPAB0xA4d7J0IQHl8zmo/ovlSzxsXJak2ShgHiPTDVbiZ+x9uwB/TlLxg\nYIn7gkisNvAYgj25IM7MC+zT4Dn9MMlejOQ8AEazA6Uv8sxbBa0a8vwTHhVEZhhl\nDV0Q4dDmwbT1pL9ASWNp5pwk6Nrp9W3stmTJ0Iq+vzD46PKPc7qIdchMnl2vkZAm\nuxrDxFCrSrCJCS0/ISzTSwmNpk06VfRZDF5AzyYsLbZjRNMz//GsXXvbO+Gx6xPb\nl+wKH4F2GkaDM6UdOhQqlmdV0CRngu9ugwi1dAmCh+M20uty3N7uH9eDduRHQPk5\nE7n3NE3+6FDycrGqFRiy7F8zy1tT9PhfBigcmDz+xxs+L98ftn+qvfUKgFD9jrD9\njNnZsQuukHvRsr9IZ13WmOrLRalEA4puD5HgsuN+7h+MFXWU2m6V/mK1M1btqJVm\na3Idq9R4GBUzpBMD5jaxIxOUo27fseowopboiYqeNh2H21JFN6W2Wv3Vk7Dcp52X\nEeJlgFGxj7z21A7JmhA+0MjXQKcLL53ocZvYpDz5BtcVIjePdgAYkdCHzo6TLXVD\nHxP6ZtlyMpDTcXNvLbZICbClU9srdJnQDEHCMRZ/fnbC/zDYa3c=\n=C1zQ\n-----END PGP SIGNATURE-----",
        "payload": "tree dcd9fe18d5f554c5e794776da085f52fd91d1b57\nparent 08c4994969be20ab268faed2793fb4b9f17722ee\nauthor fanquake <fanquake@gmail.com> 1585897131 +0800\ncommitter fanquake <fanquake@gmail.com> 1585925279 +0800\n\ntest: remove rapidcheck integration and tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e071b00898aedd9632f105a22d976dc6dbc84b1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9e071b00898aedd9632f105a22d976dc6dbc84b1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e071b00898aedd9632f105a22d976dc6dbc84b1/comments",
    "author": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fanquake",
      "id": 863730,
      "node_id": "MDQ6VXNlcjg2MzczMA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/863730?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fanquake",
      "html_url": "https://github.com/fanquake",
      "followers_url": "https://api.github.com/users/fanquake/followers",
      "following_url": "https://api.github.com/users/fanquake/following{/other_user}",
      "gists_url": "https://api.github.com/users/fanquake/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fanquake/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fanquake/subscriptions",
      "organizations_url": "https://api.github.com/users/fanquake/orgs",
      "repos_url": "https://api.github.com/users/fanquake/repos",
      "events_url": "https://api.github.com/users/fanquake/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fanquake/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "08c4994969be20ab268faed2793fb4b9f17722ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/08c4994969be20ab268faed2793fb4b9f17722ee",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/08c4994969be20ab268faed2793fb4b9f17722ee"
      }
    ],
    "stats": {
      "total": 284,
      "additions": 3,
      "deletions": 281
    },
    "files": [
      {
        "sha": "a489fb36b29459a86909f2c407fcc524427af404",
        "filename": "build_msvc/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/build_msvc/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/build_msvc/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/README.md?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -12,7 +12,7 @@ Quick Start\n The minimal steps required to build Bitcoin Core with the msbuild toolchain are below. More detailed instructions are contained in the following sections.\n \n ```\n-vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n+vcpkg install --triplet x64-windows-static berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n vcpkg integrate install\n py -3 build_msvc\\msvc-autogen.py\n msbuild /m build_msvc\\bitcoin.sln /p:Platform=x64 /p:Configuration=Release /t:build\n@@ -35,7 +35,6 @@ The [external dependencies](https://github.com/bitcoin/bitcoin/blob/master/doc/d\n - DoubleConversion\n - libevent\n - Qt5\n-- RapidCheck\n - ZeroMQ\n \n Qt"
      },
      {
        "sha": "307f295f089cd225a70cc2c98ae60c0b4ce1de2f",
        "filename": "build_msvc/vcpkg-packages.txt",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/build_msvc/vcpkg-packages.txt",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/build_msvc/vcpkg-packages.txt",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/vcpkg-packages.txt?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -1 +1 @@\n-berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] rapidcheck zeromq double-conversion\n\\ No newline at end of file\n+berkeleydb boost-filesystem boost-multi-index boost-signals2 boost-test boost-thread libevent[thread] zeromq double-conversion\n\\ No newline at end of file"
      },
      {
        "sha": "a2d33ff5b6674876340ec14dd8db7645f9aa1135",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 0,
        "deletions": 23,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -134,12 +134,6 @@ AC_ARG_ENABLE(gui-tests,\n     [use_gui_tests=$enableval],\n     [use_gui_tests=$use_tests])\n \n-AC_ARG_WITH([rapidcheck],\n-  [AS_HELP_STRING([--with-rapidcheck],\n-  [enable RapidCheck property-based tests (default is yes if librapidcheck is found)])],\n-  [use_rapidcheck=$withval],\n-  [use_rapidcheck=auto])\n-\n AC_ARG_ENABLE(bench,\n     AS_HELP_STRING([--disable-bench],[do not compile benchmarks (default is to compile)]),\n     [use_bench=$enableval],\n@@ -1327,22 +1321,6 @@ else\n   fi\n fi\n \n-dnl RapidCheck property-based testing\n-\n-enable_property_tests=no\n-if test \"x$use_rapidcheck\" = xauto; then\n-    AC_CHECK_HEADERS([rapidcheck.h], [enable_property_tests=yes])\n-elif test \"x$use_rapidcheck\" != xno; then\n-    enable_property_tests=yes\n-fi\n-\n-RAPIDCHECK_LIBS=\n-if test \"x$enable_property_tests\" = xyes; then\n-   RAPIDCHECK_LIBS=-lrapidcheck\n-fi\n-AC_SUBST(RAPIDCHECK_LIBS)\n-AM_CONDITIONAL([ENABLE_PROPERTY_TESTS], [test x$enable_property_tests = xyes])\n-\n dnl univalue check\n \n need_bundled_univalue=yes\n@@ -1679,7 +1657,6 @@ fi\n echo \"  with zmq      = $use_zmq\"\n echo \"  with test     = $use_tests\"\n if test x$use_tests != xno; then\n-    echo \"    with prop   = $enable_property_tests\"\n     echo \"    with fuzz   = $enable_fuzz\"\n fi\n echo \"  with bench    = $use_bench\""
      },
      {
        "sha": "5f5247f8818f0e534dcf39ba00afced76622b7b7",
        "filename": "depends/Makefile",
        "status": "modified",
        "additions": 0,
        "deletions": 7,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/Makefile",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/Makefile",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/Makefile?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -10,7 +10,6 @@ BASE_CACHE ?= $(BASEDIR)/built\n SDK_PATH ?= $(BASEDIR)/SDKs\n NO_QT ?=\n NO_QR ?=\n-RAPIDCHECK ?=\n NO_WALLET ?=\n NO_ZMQ ?=\n NO_UPNP ?=\n@@ -109,19 +108,13 @@ wallet_packages_$(NO_WALLET) = $(wallet_packages)\n upnp_packages_$(NO_UPNP) = $(upnp_packages)\n zmq_packages_$(NO_ZMQ) = $(zmq_packages)\n \n-rapidcheck_packages_$(RAPIDCHECK) = $(rapidcheck_packages)\n-\n packages += $($(host_arch)_$(host_os)_packages) $($(host_os)_packages) $(qt_packages_) $(wallet_packages_) $(upnp_packages_)\n native_packages += $($(host_arch)_$(host_os)_native_packages) $($(host_os)_native_packages)\n \n ifneq ($(zmq_packages_),)\n packages += $(zmq_packages)\n endif\n \n-ifeq ($(rapidcheck_packages_),)\n-packages += $(rapidcheck_packages)\n-endif\n-\n all_packages = $(packages) $(native_packages)\n \n meta_depends = Makefile funcs.mk builders/default.mk hosts/default.mk hosts/$(host_os).mk builders/$(build_os).mk"
      },
      {
        "sha": "79865ff011575b130392ce910c579bc7ca2a52a9",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -92,7 +92,6 @@ The following can be set when running make: make FOO=bar\n     NO_WALLET: Don't download/build/cache libs needed to enable the wallet\n     NO_UPNP: Don't download/build/cache packages needed for enabling upnp\n     DEBUG: disable some optimizations and enable more runtime checking\n-    RAPIDCHECK: build rapidcheck (experimental, requires cmake)\n     HOST_ID_SALT: Optional salt to use when generating host package ids\n     BUILD_ID_SALT: Optional salt to use when generating build package ids\n "
      },
      {
        "sha": "42dbaa77a60d7ef329dd992965e4a46ad860f443",
        "filename": "depends/packages/packages.mk",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/packages/packages.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/depends/packages/packages.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/packages.mk?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -7,8 +7,6 @@ qrencode_packages = qrencode\n qt_linux_packages:=qt expat libxcb xcb_proto libXau xproto freetype fontconfig\n qt_android_packages=qt\n \n-rapidcheck_packages = rapidcheck\n-\n qt_darwin_packages=qt\n qt_mingw32_packages=qt\n "
      },
      {
        "sha": "a16fee270e87a56326a3091dbdea25cdbe334648",
        "filename": "depends/packages/rapidcheck.mk",
        "status": "removed",
        "additions": 0,
        "deletions": 21,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c4994969be20ab268faed2793fb4b9f17722ee/depends/packages/rapidcheck.mk",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c4994969be20ab268faed2793fb4b9f17722ee/depends/packages/rapidcheck.mk",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/packages/rapidcheck.mk?ref=08c4994969be20ab268faed2793fb4b9f17722ee",
        "patch": "@@ -1,21 +0,0 @@\n-package=rapidcheck\n-$(package)_version=d9482c683429fe79122e3dcab14c9655874aeb8e\n-$(package)_download_path=https://github.com/emil-e/rapidcheck/archive\n-$(package)_file_name=$($(package)_version).tar.gz\n-$(package)_sha256_hash=b9ee8955b175fd3c0757ebd887bb075541761af08b0c28391b7c6c0685351f6b\n-\n-define $(package)_config_cmds\n-  cmake -DCMAKE_INSTALL_PREFIX=$($(package)_staging_dir)$(host_prefix) -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON -B .\n-endef\n-\n-define $(package)_preprocess_cmds\n-  sed -i.old 's/ -Wall//' CMakeLists.txt\n-endef\n-\n-define $(package)_build_cmds\n-  $(MAKE) rapidcheck\n-endef\n-\n-define $(package)_stage_cmds\n-  $(MAKE) rapidcheck install\n-endef"
      },
      {
        "sha": "397a907f17c00f64c9404f9a2d4d1810077b05e6",
        "filename": "doc/rapidcheck.md",
        "status": "removed",
        "additions": 0,
        "deletions": 84,
        "changes": 84,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c4994969be20ab268faed2793fb4b9f17722ee/doc/rapidcheck.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c4994969be20ab268faed2793fb4b9f17722ee/doc/rapidcheck.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/rapidcheck.md?ref=08c4994969be20ab268faed2793fb4b9f17722ee",
        "patch": "@@ -1,84 +0,0 @@\n-# RapidCheck property-based testing for Bitcoin Core\n-\n-## Concept\n-\n-Property-based testing is experimentally being added to Bitcoin Core with\n-[RapidCheck](https://github.com/emil-e/rapidcheck), a C++ framework for\n-property-based testing inspired by the Haskell library\n-[QuickCheck](https://hackage.haskell.org/package/QuickCheck).\n-\n-RapidCheck performs random testing of program properties. A specification of the\n-program is given in the form of properties which functions should satisfy, and\n-RapidCheck tests that the properties hold in a large number of randomly\n-generated cases.\n-\n-If an exception is found, RapidCheck tries to find the smallest case, for some\n-definition of smallest, for which the property is still false and displays it as\n-a counter-example. For example, if the input is an integer, RapidCheck tries to\n-find the smallest integer for which the property is false.\n-\n-## Running\n-\n-If RapidCheck is installed, Bitcoin Core will automatically run the\n-property-based tests with the unit tests during `make check`, unless the\n-`--without-rapidcheck` flag is passed when configuring.\n-\n-For more information, run `./configure --help` and see `--with-rapidcheck` under\n-Optional Packages.\n-\n-## Setup\n-\n-The following instructions have been tested with Linux Debian and macOS.\n-\n-1. Clone the RapidCheck source code and cd into the repository.\n-\n-    ```shell\n-    git clone https://github.com/emil-e/rapidcheck.git\n-    cd rapidcheck\n-    ```\n-\n-2. Build RapidCheck (requires CMake to be installed).\n-\n-    ```shell\n-    cmake -DCMAKE_POSITION_INDEPENDENT_CODE:BOOL=true -DRC_ENABLE_BOOST_TEST=ON $(pwd)\n-    make && make install\n-    ```\n-\n-3. Configure Bitcoin Core with RapidCheck.\n-\n-    `cd` to the directory of your local bitcoin repository and run\n-    `./configure`. In the output you should see:\n-\n-    ```shell\n-    checking rapidcheck.h usability... yes\n-    checking rapidcheck.h presence... yes\n-    checking for rapidcheck.h... yes\n-    [...]\n-    Options used to compile and link:\n-    [...]\n-      with test     = yes\n-        with prop   = yes\n-    ```\n-\n-4. Build Bitcoin Core with RapidCheck.\n-\n-    Now you can run `make` and should see the property-based tests compiled with\n-    the unit tests:\n-\n-    ```shell\n-    Making all in src\n-    [...]\n-    CXX      test/gen/test_bitcoin-crypto_gen.o\n-    CXX      test/test_bitcoin-key_properties.o\n-    ```\n-\n-5. Run the unit tests with `make check`. The property-based tests will be run\n-   with the unit tests.\n-\n-    ```shell\n-    Running tests: crypto_tests from test/crypto_tests.cpp\n-    [...]\n-    Running tests: key_properties from test/key_properties.cpp\n-    ```\n-\n-That's it! You are now running property-based tests in Bitcoin Core."
      },
      {
        "sha": "f49c5e838c0758eae5465f3f0e1360d99b1a99a9",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 10,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9e071b00898aedd9632f105a22d976dc6dbc84b1/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9e071b00898aedd9632f105a22d976dc6dbc84b1/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=9e071b00898aedd9632f105a22d976dc6dbc84b1",
        "patch": "@@ -245,15 +245,6 @@ BITCOIN_TESTS =\\\n   test/validation_flush_tests.cpp \\\n   test/versionbits_tests.cpp\n \n-if ENABLE_PROPERTY_TESTS\n-BITCOIN_TESTS += \\\n-  test/key_properties.cpp\n-\n-BITCOIN_TEST_SUITE += \\\n-  test/gen/crypto_gen.cpp \\\n-  test/gen/crypto_gen.h\n-endif\n-\n if ENABLE_WALLET\n BITCOIN_TESTS += \\\n   wallet/test/db_tests.cpp \\\n@@ -283,7 +274,7 @@ test_test_bitcoin_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_C\n   $(LIBLEVELDB) $(LIBLEVELDB_SSE42) $(LIBMEMENV) $(BOOST_LIBS) $(BOOST_UNIT_TEST_FRAMEWORK_LIB) $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)\n test_test_bitcoin_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)\n \n-test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS) $(RAPIDCHECK_LIBS)\n+test_test_bitcoin_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS)\n test_test_bitcoin_LDFLAGS = $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) -static\n \n if ENABLE_ZMQ"
      },
      {
        "sha": "ca8c65806ff884722f5473f263a953c457862a7f",
        "filename": "src/test/gen/crypto_gen.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 19,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/gen/crypto_gen.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/gen/crypto_gen.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.cpp?ref=08c4994969be20ab268faed2793fb4b9f17722ee",
        "patch": "@@ -1,19 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include <test/gen/crypto_gen.h>\n-\n-#include <key.h>\n-\n-#include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n-#include <rapidcheck/gen/Predicate.h>\n-#include <rapidcheck/gen/Container.h>\n-\n-/** Generates 1 to 20 keys for OP_CHECKMULTISIG */\n-rc::Gen<std::vector<CKey>> MultisigKeys()\n-{\n-    return rc::gen::suchThat(rc::gen::arbitrary<std::vector<CKey>>(), [](const std::vector<CKey>& keys) {\n-        return keys.size() >= 1 && keys.size() <= 15;\n-    });\n-};"
      },
      {
        "sha": "7c2fb0350fa50acf00f08409d083a014a99e64c3",
        "filename": "src/test/gen/crypto_gen.h",
        "status": "removed",
        "additions": 0,
        "deletions": 63,
        "changes": 63,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/gen/crypto_gen.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/gen/crypto_gen.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/gen/crypto_gen.h?ref=08c4994969be20ab268faed2793fb4b9f17722ee",
        "patch": "@@ -1,63 +0,0 @@\n-// Copyright (c) 2018 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#ifndef BITCOIN_TEST_GEN_CRYPTO_GEN_H\n-#define BITCOIN_TEST_GEN_CRYPTO_GEN_H\n-\n-#include <key.h>\n-#include <random.h>\n-#include <uint256.h>\n-#include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n-#include <rapidcheck/gen/Create.h>\n-#include <rapidcheck/gen/Numeric.h>\n-\n-/** Generates 1 to 15 keys for OP_CHECKMULTISIG */\n-rc::Gen<std::vector<CKey>> MultisigKeys();\n-\n-namespace rc\n-{\n-/** Generator for a new CKey */\n-template <>\n-struct Arbitrary<CKey> {\n-    static Gen<CKey> arbitrary()\n-    {\n-        return rc::gen::map<int>([](int x) {\n-            CKey key;\n-            key.MakeNewKey(true);\n-            return key;\n-        });\n-    };\n-};\n-\n-/** Generator for a CPrivKey */\n-template <>\n-struct Arbitrary<CPrivKey> {\n-    static Gen<CPrivKey> arbitrary()\n-    {\n-        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n-            return key.GetPrivKey();\n-        });\n-    };\n-};\n-\n-/** Generator for a new CPubKey */\n-template <>\n-struct Arbitrary<CPubKey> {\n-    static Gen<CPubKey> arbitrary()\n-    {\n-        return gen::map(gen::arbitrary<CKey>(), [](const CKey& key) {\n-            return key.GetPubKey();\n-        });\n-    };\n-};\n-/** Generates a arbitrary uint256 */\n-template <>\n-struct Arbitrary<uint256> {\n-    static Gen<uint256> arbitrary()\n-    {\n-        return rc::gen::just(GetRandHash());\n-    };\n-};\n-} //namespace rc\n-#endif"
      },
      {
        "sha": "0e45a2549dd5381bc39320e402649f4a31a70412",
        "filename": "src/test/key_properties.cpp",
        "status": "removed",
        "additions": 0,
        "deletions": 48,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/key_properties.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/08c4994969be20ab268faed2793fb4b9f17722ee/src/test/key_properties.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/key_properties.cpp?ref=08c4994969be20ab268faed2793fb4b9f17722ee",
        "patch": "@@ -1,48 +0,0 @@\n-// Copyright (c) 2018-2019 The Bitcoin Core developers\n-// Distributed under the MIT software license, see the accompanying\n-// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-#include <key.h>\n-\n-#include <uint256.h>\n-#include <test/util/setup_common.h>\n-#include <vector>\n-\n-#include <boost/test/unit_test.hpp>\n-#include <rapidcheck/boost_test.h>\n-#include <rapidcheck/gen/Arbitrary.h>\n-#include <rapidcheck/Gen.h>\n-\n-#include <test/gen/crypto_gen.h>\n-\n-BOOST_FIXTURE_TEST_SUITE(key_properties, BasicTestingSetup)\n-\n-/** Check CKey uniqueness */\n-RC_BOOST_PROP(key_uniqueness, (const CKey& key1, const CKey& key2))\n-{\n-    RC_ASSERT(!(key1 == key2));\n-}\n-\n-/** Verify that a private key generates the correct public key */\n-RC_BOOST_PROP(key_generates_correct_pubkey, (const CKey& key))\n-{\n-    CPubKey pubKey = key.GetPubKey();\n-    RC_ASSERT(key.VerifyPubKey(pubKey));\n-}\n-\n-/** Create a CKey using the 'Set' function must give us the same key */\n-RC_BOOST_PROP(key_set_symmetry, (const CKey& key))\n-{\n-    CKey key1;\n-    key1.Set(key.begin(), key.end(), key.IsCompressed());\n-    RC_ASSERT(key1 == key);\n-}\n-\n-/** Create a CKey, sign a piece of data, then verify it with the public key */\n-RC_BOOST_PROP(key_sign_symmetry, (const CKey& key, const uint256& hash))\n-{\n-    std::vector<unsigned char> vchSig;\n-    key.Sign(hash, vchSig, 0);\n-    const CPubKey& pubKey = key.GetPubKey();\n-    RC_ASSERT(pubKey.Verify(hash, vchSig));\n-}\n-BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]