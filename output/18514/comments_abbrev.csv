Christewart,2020-04-03 11:30:57,"ACK, from talking with @MarcoFalke it seems that his/bluematt's fuzzing work has superseded this",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608383299,608383299,
jonatack,2020-04-03 11:32:35,"I may be a minority, but I run them on every build multiple times a day. Still meaning to review #14430.",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608383905,608383905,
MarcoFalke,2020-04-03 11:40:23,"ACK. unit and fuzz tests are sufficient.\n\nThe tests here are better written as unit tests, in which case they also run on all platforms and all dev machines. ",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608386841,608386841,
MarcoFalke,2020-04-03 11:54:30,"> I may be a minority, but I run them on every build multiple times a day. Still meaning to review #14430.\n\nI looked over them and they are better suited either as unit or fuzz tests. If you plan to go over this pull, you could move and transpile them to the appropriate unit test of fuzz test file.\n\nIt looks like even travis isn't running the property based test. Unit and fuzz tests are ru",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608392183,608392183,
jonatack,2020-04-03 12:01:37,"My impression was that PBT could find different edge cases and stress the code differently from unit tests (which only cover the cases the programmer thought of) and fuzzing, which looks for crashes from inputs. I understand not wasting time and don't want to obstruct consensus, but it might be worthwhile to leave them for any additional coverage they may provide in the future.",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608395098,608395098,
MarcoFalke,2020-04-03 12:23:43,"I just can't imagine that property based tests could ever come up with more coverage than our unit or fuzz tests can povide.\n\nLet's look at this example:\n\n```\nRC_ASSERT(!(key1 == key2));`\n```\n\nwhere the key is generated by this:\n\n```\n            CKey key;\n            key.MakeNewKey(true);\n```\n\nThe unit test would look like:\n\n```\nCKey key1, key2;\nkey1.MakeNewKe",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608404062,608404062,
MarcoFalke,2020-04-03 12:34:15,"I mean if someone comes along and has a great test case that can only be achieved with property based tests, sure I am happy to keep them along. But this hasn't happened in the last three years, nor will it happen in the next three years. And if it did, we can always reconsider and call `git revert bafc471a994948e1f4c64bbea101da200347b0eb`.",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608408414,608408414,
practicalswift,2020-04-03 15:42:16,"Concept ACK: keeping an inactive rapidcheck integration around does not feel meaningful\n\nIf someone in the future comes up with an example where a rapidcheck test outperforms standard coverage-based fuzzing we can always revert this change.\n\n> ACK, from talking with @MarcoFalke it seems that his/bluematt's fuzzing work has superseded this\n\nIs @TheBlueMatt fuzzing Bitcoin Core without s",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608513534,608513534,
DrahtBot,2020-04-03 19:45:38,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18077 (net: Add NAT-PMP port forwarding support by hebasto)\n* #16549 ([WIP] UI external signer support (e.g. hardware wa",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-608625770,608625770,
practicalswift,2020-04-04 13:51:13,ACK 9e071b00898aedd9632f105a22d976dc6dbc84b1,https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-609031728,609031728,
jb55,2020-04-06 02:16:04,"Property based testing only gets interesting over fuzzing when you get in the realm of state-machine testing. ie. generating a random sequence of actions/api calls and checking them against a model of what you expect the state to be (see https://www.youtube.com/watch?v=zi0rHwfiX1Q).\n\nrapidcheck didn't seem like the greatest library either.\n\nACK",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-609531692,609531692,
MarcoFalke,2020-04-06 13:57:45,"> Property based testing only gets interesting over fuzzing when you get in the realm of state-machine testing. ie. generating a random sequence of actions/api calls and checking them against a model of what you expect the state to be\n\nThis is one of the strengths of fuzzing. See for example the fuzzer to find the money printing consensus failure #17860 .\n\nThe utxo set is the state and the",https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-609811639,609811639,
MarcoFalke,2020-04-06 13:58:20,TLDR property based testing is fuzz testing,https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-609811980,609811980,
jb55,2020-04-06 16:32:13,Yes from the code you linked it looks like we're already doing a form of property based testing using FuzzedDataProvider. Good stuff!,https://github.com/bitcoin/bitcoin/pull/18514#issuecomment-609901008,609901008,
