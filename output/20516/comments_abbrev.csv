DrahtBot,2020-11-27 02:24:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #21483 (p2p: add time when deserialize file db for ReadAnchors by brunoerg)\n* #20966 (banman: save the banlist in a JSON ",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734548674,734548674,
sipa,2020-11-27 19:17:45,"I merged the anchors.dat addrv2 support from #20514 into this PR, as doing it correctly requires changes the `Cservice` serialization from stream version based to stored version based.",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734958654,734958654,
hebasto,2020-11-27 19:49:42,"Concept ACK.\n\nFrom the PR description and quick code reading it follows that there is no hurry to backport these changes into 0.21, right?",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734965909,734965909,
sipa,2020-11-27 19:50:40,"Indeed, there is probably no hurry, unless we want to support torv3 anchors in 0.21.",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-734966179,734966179,
sipa,2020-11-30 21:41:03,Addressed comments.,https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-736073151,736073151,
sipa,2021-05-25 01:08:39,"Rebased, and addressed comments.",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-847456308,847456308,
sipa,2021-06-12 21:38:53,@hebasto I think you need to leave a new review.,https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-860114133,860114133,
achow101,2021-06-14 19:20:55,ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1,https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-860931973,860931973,
laanwj,2021-06-17 15:41:48,Code review ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1,https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-863350324,863350324,
MarcoFalke,2021-06-21 11:37:17,"review ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1 ðŸ•‘\n\n<details><summary>Show signature and timestamp</summary>\n\nSignature:\n\n```\n-----BEGIN PGP SIGNED MESSAGE-----\nHash: SHA512\n\nreview ACK f8866e8c324be3322fa507c2ceb1de35d148d0f1 ðŸ•‘\n-----BEGIN PGP SIGNATURE-----\n\niQGzBAEBCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUipdwwAnD4R+92A+ogj6ZHCw+VUa2T+wnnhhGhfQ54c",https://github.com/bitcoin/bitcoin/pull/20516#issuecomment-864963537,864963537,
hebasto,2020-11-28 11:03:35,"501de309e682f2edddb7e51e55665e034e1a86be, while this line is touched, it seems natural to inherit the stream type as well:\n\n```suggestion\n        CHashWriter hasher(stream.GetType(), stream.GetVersion());\n```\n\nAnd `CHashVerifier` uses type of stream.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532026970,532026970,src/addrdb.cpp
hebasto,2020-11-28 15:43:53,"6d16903c4c384bc15f3f29e5635bb9dccd789cb6\n```suggestion\n    static_assert(DISK_VERSION_ADDRV2 == ADDRV2_FORMAT, ""DISK_VERSION_ADDRV2 must be equal to ADDRV2_FORMAT for backward compatibility"");\n```",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532053363,532053363,src/protocol.h
hebasto,2020-11-28 16:21:41,"Maybe present `DISK_VERSION_ADDRV2` as a bit flag explicitly, i.e.\n```suggestion\n    static constexpr uint32_t DISK_VERSION_ADDRV2 = 1 << 29;\n```\n?",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057230,532057230,src/protocol.h
hebasto,2020-11-28 16:27:28,"When a new bit flag for disk serialization will be introduced in the future, a downgraded (after upgrading) node will throw an exception during deserialization. Maybe:\n```suggestion\n            } else if (stored_format_version & DISK_VERSION_ADDRV2 && (s.GetVersion() & ADDRV2_FORMAT)) {\n```\n?",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057860,532057860,src/protocol.h
sipa,2020-11-28 18:23:55,"No, that would break the ability to add other formats in a compatible way.\n\nIt's supposed to throw an exception if it can't be read.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532091123,532091123,src/protocol.h
vasild,2020-12-18 15:17:33,"```suggestion\n     *  For disk deserialization, ADDRV2_FORMAT in the stream version signals that ADDRV2 deserialization is permitted,\n```",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902150,545902150,src/protocol.h
vasild,2020-12-18 15:17:58,"```suggestion\n     *  For network serialization ADDRV2_FORMAT in the stream version determines the actual format used (as it has no\n```",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545902418,545902418,src/protocol.h
vasild,2020-12-18 15:42:11,"Nowadays\n\n```cpp\n(1 << 19) - 1\n```\n\ncan be written as\n\n```cpp\n0b00000000'00000111'11111111'11111111\n```\n\n(feel free to ignore)",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545917692,545917692,src/protocol.h
vasild,2020-12-18 15:49:09,I think it is ok to assign `ADDRV2_FORMAT` here and remove the last `static_assert` below.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545922062,545922062,src/protocol.h
vasild,2020-12-18 15:53:15,"Shouldn't this be 18 bytes, instead of 19? `CLIENT_VERSION` of `219900` is 18 bytes (`0b11'01011010'11111100`).",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545924591,545924591,src/protocol.h
vasild,2020-12-18 16:16:59,"The repeated code can be moved after the `if`:\n\n```suggestion\n        } else {\n            READWRITE(Using<CustomUintFormatter<8>>(obj.nServices));\n        }\n        OverrideStream<Stream> os(&s, s.GetType(), use_v2 ? ADDRV2_FORMAT : 0);\n        SerReadWriteMany(os, ser_action, ReadWriteAsHelper<CService>(obj));\n```",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545938774,545938774,src/protocol.h
vasild,2020-12-18 16:22:41,"Here and below in deserialize, why add `CLIENT_VERSION` when it is going to be ignored during ser/deser (they only check `s.GetVersion() & ADDRV2_FORMAT`)?",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545942030,545942030,src/addrdb.cpp
vasild,2020-12-18 16:27:27,"Maybe this comment warrants an update, since we do not allow anything other than disk and network now.\n\nAlso, it is ""network only if s.GetVersion() != INIT_PROTO_VERSION"".",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545944869,545944869,src/protocol.h
vasild,2020-12-18 16:49:44,"Maybe also mention what happens during disk serialization and network deserialization:\n\nFor disk serialization, ADDRV2_FORMAT in the stream version indicates a write in that format\nFor network deserialization ADDRV2_FORMAT in the stream version indicates that the data is expected to be in that format",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r545958131,545958131,src/protocol.h
sipa,2021-05-25 00:31:12,Done (ages ago).,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638374077,638374077,src/addrdb.cpp
sipa,2021-05-25 00:51:38,"I'd rather not do that. The idea is that ADDRV2_FORMAT is irrelevant in the new code - it's purely an internal flag that has no impact on the disk format. It could be changed to whatever, or dropped entirely - but if that happens, DISK_VERSION_ADDRV2 must still remain `1 << 29`, because that's what *old* versions used as disk serialization marker.\n\nI've just removed the assert, and replaced it",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380149,638380149,src/protocol.h
sipa,2021-05-25 00:52:15,"I guess I added one slack bit, because the version number is pretty close to needing that many already.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638380334,638380334,src/protocol.h
sipa,2021-05-25 01:06:58,Done.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384486,638384486,src/protocol.h
sipa,2021-05-25 01:07:09,Done.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384529,638384529,src/protocol.h
sipa,2021-05-25 01:07:15,Done.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384569,638384569,src/protocol.h
sipa,2021-05-25 01:07:21,Done.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384617,638384617,src/protocol.h
sipa,2021-05-25 01:07:31,Done.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384672,638384672,src/protocol.h
sipa,2021-05-25 01:07:44,I've updated the comments here.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384739,638384739,src/protocol.h
sipa,2021-05-25 01:08:27,"I feel that's pretty much already mentioned (just above, and in other places). I've tried to improve the comments further.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638384950,638384950,src/protocol.h
sipa,2021-05-25 01:12:13,"That's just common in the codebase; use CLIENT_VERSION for disk serializations, PROTOCOL_VERSION for network serializations.\n\nI think this whole idea of streams having a version numbers with magic meanings, and implicit (=bad) compatibility properties for anything relying on it are silly, but getting rid of it isn't for this PR.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r638386087,638386087,src/addrdb.cpp
vasild,2021-05-27 13:51:41,"_`s/bytes/bits/` in my comment above_\n\nI see, 18 bits would work until version 26 and 19 bits until version 52 (~15 years from now). Maybe add a few more bits (up to 29 is ok). And/or add some comment on what is that `19` (or another number if you choose to increment it).",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r640644694,640644694,src/protocol.h
jonatack,2021-05-28 10:25:22,"8cd8f37 perhaps `constexpr`?\n",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r641443508,641443508,src/protocol.h
sipa,2021-06-12 21:05:07,"Seems fine, but also pointless. I don't think anyone is going to use these comparisons in compile-time initialized objects.\n\nI'll do this if I need to retouch.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436338,650436338,src/protocol.h
sipa,2021-06-12 21:11:51,"Is it possible to drop the ""changes requested"" marker here?",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650436877,650436877,src/protocol.h
jonatack,2021-06-12 21:33:30,"I think that marker may be related to ""hebasto requested changes on Nov 28, 2020"" above (I don't use the ""requested changes"" review type here, at least not intentionally).",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438538,650438538,src/protocol.h
hebasto,2021-06-12 21:37:05,I don't know how to drop it. My recent comment has no such an attribute.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438792,650438792,src/protocol.h
sipa,2021-06-12 21:38:25,@jonatack My apologies for assuming it was due to your comment!,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650438901,650438901,src/protocol.h
jonatack,2021-06-12 21:43:06,"It might be because https://github.com/bitcoin/bitcoin/pull/20516#discussion_r532057860 wasn't ""resolved"". This has been my superstition leading me to not use it (that, and the bright red flag).",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439240,650439240,src/protocol.h
hebasto,2021-06-12 21:49:52,"> I don't know how to drop it.\n\nThe magic GH button is ""Dismiss review"" :)",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650439728,650439728,src/protocol.h
hebasto,2021-06-14 03:54:11,"nit:\n\nThis is the only place (besides two assertions above) where `DISK_VERSION_IGNORE_MASK` is used, and it is inverted. Isn't it more clear:\n\n```suggestion\n            stored_format_version &= DISK_VERSION_MASK; // ignore low bits\n```\n\n?",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r650635548,650635548,src/protocol.h
sipa,2021-06-14 23:30:15,Will do if I retouch.,https://github.com/bitcoin/bitcoin/pull/20516#discussion_r651343218,651343218,src/protocol.h
MarcoFalke,2021-06-21 11:38:47,"Copied the fuzz inputs in commit https://github.com/bitcoin-core/qa-assets/commit/836513af1edae5987d8d4051b60d96ac4a5b484a, so that the targets have something nice to start with.",https://github.com/bitcoin/bitcoin/pull/20516#discussion_r655301458,655301458,src/test/fuzz/deserialize.cpp
