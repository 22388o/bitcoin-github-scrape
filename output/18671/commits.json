[
  {
    "sha": "fa60afc4fb957875bab1c8982d9d9e4999a3814c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTYwYWZjNGZiOTU3ODc1YmFiMWM4OTgyZDlkOWU0OTk5YTM4MTRj",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-16T16:04:56Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-16T23:15:32Z"
      },
      "message": "wallet: Add BlockUntilSyncedToCurrentChain to dumpwallet",
      "tree": {
        "sha": "8693cc9a68ac32f02bf495b951b0f2f38171c44c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/8693cc9a68ac32f02bf495b951b0f2f38171c44c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa60afc4fb957875bab1c8982d9d9e4999a3814c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUgb1Qv/b1rtwF2lM/M+dcw7kqKkiGa1cqZ8iWzW3st7Um21nXkx1KUAoKcMnV2j\nS0iKAKJ4QWdAv0E87CqLvqheR0sfbcYWLchfBC8ZFgTHkCkKr4ogtFGgC198+nOr\nJtyJEMeY5r7yQXNL5Jh27rzGP9vWx1kU6E0Jet+6UFGhuDIY3N6vDuqw0SCqsz8U\nTZ3Qjms41vHd6X/vKL9hPPIQhGutk7DVrxebs1XXGopHj7hnctIQcaLbyOl1FUBt\n0lemI+BfAruutx9OBOBeGrukD30PEmn7Q5vArsOoHbCDs2Qu6wk0fCKQAK0fq3AZ\ntsqycWHIIHc2by7m+hy2L47QNYpEsidBeWvY3lLfhlxV9LwGDSwhBndRbp/xNaq8\nl8SHt7BRSRKVhv0LXMiV+LMl6/WKZxl+uS/P+cplSuiMGbYYRxYUht/rSLL76Crm\nCNaqO7X5ERd4onBtVVoRE3A8pB5xqmg/KtC34uysv7y8xTEqT01aQnzLe7LRiIb8\nHfMjqFYR\n=5yk/\n-----END PGP SIGNATURE-----",
        "payload": "tree 8693cc9a68ac32f02bf495b951b0f2f38171c44c\nparent 79b0459648e33307edcefc358d9bfdd0ed5ff844\nauthor MarcoFalke <falke.marco@gmail.com> 1587053096 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1587078932 -0400\n\nwallet: Add BlockUntilSyncedToCurrentChain to dumpwallet\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa60afc4fb957875bab1c8982d9d9e4999a3814c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa60afc4fb957875bab1c8982d9d9e4999a3814c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa60afc4fb957875bab1c8982d9d9e4999a3814c/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "79b0459648e33307edcefc358d9bfdd0ed5ff844",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/79b0459648e33307edcefc358d9bfdd0ed5ff844",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/79b0459648e33307edcefc358d9bfdd0ed5ff844"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 22,
      "deletions": 15
    },
    "files": [
      {
        "sha": "ca9079167d4766b062fb38418f4de68aa189f997",
        "filename": "src/wallet/rpcdump.cpp",
        "status": "modified",
        "additions": 13,
        "deletions": 9,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa60afc4fb957875bab1c8982d9d9e4999a3814c/src/wallet/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa60afc4fb957875bab1c8982d9d9e4999a3814c/src/wallet/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcdump.cpp?ref=fa60afc4fb957875bab1c8982d9d9e4999a3814c",
        "patch": "@@ -724,9 +724,8 @@ UniValue dumpprivkey(const JSONRPCRequest& request)\n \n UniValue dumpwallet(const JSONRPCRequest& request)\n {\n-    std::shared_ptr<CWallet> const wallet = GetWalletForJSONRPCRequest(request);\n-    const CWallet* const pwallet = wallet.get();\n-    if (!EnsureWalletIsAvailable(pwallet, request.fHelp)) {\n+    std::shared_ptr<CWallet> const pwallet = GetWalletForJSONRPCRequest(request);\n+    if (!EnsureWalletIsAvailable(pwallet.get(), request.fHelp)) {\n         return NullUniValue;\n     }\n \n@@ -750,12 +749,17 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n                 },\n             }.Check(request);\n \n-    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(*wallet);\n+    CWallet& wallet = *pwallet;\n+    LegacyScriptPubKeyMan& spk_man = EnsureLegacyScriptPubKeyMan(wallet);\n+\n+    // Make sure the results are valid at least up to the most recent block\n+    // the user could have gotten from another RPC command prior to now\n+    wallet.BlockUntilSyncedToCurrentChain();\n \n     auto locked_chain = pwallet->chain().lock();\n     LOCK2(pwallet->cs_wallet, spk_man.cs_KeyStore);\n \n-    EnsureWalletIsUnlocked(pwallet);\n+    EnsureWalletIsUnlocked(&wallet);\n \n     fs::path filepath = request.params[0].get_str();\n     filepath = fs::absolute(filepath);\n@@ -791,9 +795,9 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n     // produce output\n     file << strprintf(\"# Wallet dump created by Bitcoin %s\\n\", CLIENT_BUILD);\n     file << strprintf(\"# * Created on %s\\n\", FormatISO8601DateTime(GetTime()));\n-    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", pwallet->GetLastBlockHeight(), pwallet->GetLastBlockHash().ToString());\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", wallet.GetLastBlockHeight(), wallet.GetLastBlockHash().ToString());\n     int64_t block_time = 0;\n-    CHECK_NONFATAL(pwallet->chain().findBlock(pwallet->GetLastBlockHash(), FoundBlock().time(block_time)));\n+    CHECK_NONFATAL(wallet.chain().findBlock(wallet.GetLastBlockHash(), FoundBlock().time(block_time)));\n     file << strprintf(\"#   mined on %s\\n\", FormatISO8601DateTime(block_time));\n     file << \"\\n\";\n \n@@ -817,8 +821,8 @@ UniValue dumpwallet(const JSONRPCRequest& request)\n         CKey key;\n         if (spk_man.GetKey(keyid, key)) {\n             file << strprintf(\"%s %s \", EncodeSecret(key), strTime);\n-            if (GetWalletAddressesForKey(&spk_man, pwallet, keyid, strAddr, strLabel)) {\n-               file << strprintf(\"label=%s\", strLabel);\n+            if (GetWalletAddressesForKey(&spk_man, &wallet, keyid, strAddr, strLabel)) {\n+                file << strprintf(\"label=%s\", strLabel);\n             } else if (keyid == seed_id) {\n                 file << \"hdseed=1\";\n             } else if (mapKeyPool.count(keyid)) {"
      },
      {
        "sha": "608bc69dd466eb540b648fab8c1c924b8d21b7f5",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 6,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa60afc4fb957875bab1c8982d9d9e4999a3814c/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa60afc4fb957875bab1c8982d9d9e4999a3814c/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fa60afc4fb957875bab1c8982d9d9e4999a3814c",
        "patch": "@@ -217,16 +217,19 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n     // Import key into wallet and call dumpwallet to create backup file.\n     {\n         std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(chain.get(), WalletLocation(), WalletDatabase::CreateDummy());\n-        auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n-        LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n-        spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n-        spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n+        {\n+            auto spk_man = wallet->GetOrCreateLegacyScriptPubKeyMan();\n+            LOCK2(wallet->cs_wallet, spk_man->cs_KeyStore);\n+            spk_man->mapKeyMetadata[coinbaseKey.GetPubKey().GetID()].nCreateTime = KEY_TIME;\n+            spk_man->AddKeyPubKey(coinbaseKey, coinbaseKey.GetPubKey());\n \n+            AddWallet(wallet);\n+            wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+        }\n         JSONRPCRequest request;\n         request.params.setArray();\n         request.params.push_back(backup_file);\n-        AddWallet(wallet);\n-        wallet->SetLastBlockProcessed(::ChainActive().Height(), ::ChainActive().Tip()->GetBlockHash());\n+\n         ::dumpwallet(request);\n         RemoveWallet(wallet);\n     }"
      }
    ]
  }
]