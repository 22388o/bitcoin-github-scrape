[
  {
    "sha": "04325178f0ad88033856d76c212f31cb95024b24",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNDMyNTE3OGYwYWQ4ODAzMzg1NmQ3NmMyMTJmMzFjYjk1MDI0YjI0",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:34Z"
      },
      "message": "test: Re-introduce JSON pretty printing in test builder",
      "tree": {
        "sha": "39b3817c0642e4f6cbe48cc23e714c73eadb8108",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39b3817c0642e4f6cbe48cc23e714c73eadb8108"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/04325178f0ad88033856d76c212f31cb95024b24",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04325178f0ad88033856d76c212f31cb95024b24",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/04325178f0ad88033856d76c212f31cb95024b24",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04325178f0ad88033856d76c212f31cb95024b24/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "465d30915cd3c1634b32f942c1faae32967e9805",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/465d30915cd3c1634b32f942c1faae32967e9805",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/465d30915cd3c1634b32f942c1faae32967e9805"
      }
    ],
    "stats": {
      "total": 6,
      "additions": 3,
      "deletions": 3
    },
    "files": [
      {
        "sha": "f7fb4ec29f152714df4919006afb67ebde0c3344",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/04325178f0ad88033856d76c212f31cb95024b24/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/04325178f0ad88033856d76c212f31cb95024b24/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=04325178f0ad88033856d76c212f31cb95024b24",
        "patch": "@@ -585,11 +585,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const UniValue& tv = json_good[idx];\n-            tests_good.insert(tv.get_array().write());\n+            tests_good.insert(tv.get_array().write(1,4));\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n             const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(tv.get_array().write());\n+            tests_bad.insert(tv.get_array().write(1,4));\n         }\n     }\n \n@@ -608,7 +608,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      }
    ]
  },
  {
    "sha": "19398b9467a083ab1da23c58e6c898ecfb6e19ad",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxOTM5OGI5NDY3YTA4M2FiMWRhMjNjNThlNmM4OThlY2ZiNmUxOWFk",
    "commit": {
      "author": {
        "name": "Wladimir J. van der Laan",
        "email": "laanwj@gmail.com",
        "date": "2016-02-11T15:38:16Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "test: Script_error checking in script_invalid tests\n\nCheck the returned script_error. Add expected script_error\nfor generated as well as custom tests.\n\nThe specific error is not part of consensus, however\nit could avoid unclear reporting issues such as #6862 in the future.\n\nFixes #7513.",
      "tree": {
        "sha": "b2cb00f09e55032ca58271a58eebddfa593c7c5d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b2cb00f09e55032ca58271a58eebddfa593c7c5d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/19398b9467a083ab1da23c58e6c898ecfb6e19ad",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19398b9467a083ab1da23c58e6c898ecfb6e19ad",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/19398b9467a083ab1da23c58e6c898ecfb6e19ad",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19398b9467a083ab1da23c58e6c898ecfb6e19ad/comments",
    "author": {
      "login": "laanwj",
      "id": 126646,
      "node_id": "MDQ6VXNlcjEyNjY0Ng==",
      "avatar_url": "https://avatars.githubusercontent.com/u/126646?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/laanwj",
      "html_url": "https://github.com/laanwj",
      "followers_url": "https://api.github.com/users/laanwj/followers",
      "following_url": "https://api.github.com/users/laanwj/following{/other_user}",
      "gists_url": "https://api.github.com/users/laanwj/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/laanwj/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/laanwj/subscriptions",
      "organizations_url": "https://api.github.com/users/laanwj/orgs",
      "repos_url": "https://api.github.com/users/laanwj/repos",
      "events_url": "https://api.github.com/users/laanwj/events{/privacy}",
      "received_events_url": "https://api.github.com/users/laanwj/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04325178f0ad88033856d76c212f31cb95024b24",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04325178f0ad88033856d76c212f31cb95024b24",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04325178f0ad88033856d76c212f31cb95024b24"
      }
    ],
    "stats": {
      "total": 1232,
      "additions": 682,
      "deletions": 550
    },
    "files": [
      {
        "sha": "9e91132984ead759c7f72f4e804d222f543f2421",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 559,
        "deletions": 496,
        "changes": 1055,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19398b9467a083ab1da23c58e6c898ecfb6e19ad/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19398b9467a083ab1da23c58e6c898ecfb6e19ad/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=19398b9467a083ab1da23c58e6c898ecfb6e19ad"
      },
      {
        "sha": "30e3f37e14c289e8859f3e087a326c50b285c570",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 123,
        "deletions": 54,
        "changes": 177,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/19398b9467a083ab1da23c58e6c898ecfb6e19ad/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/19398b9467a083ab1da23c58e6c898ecfb6e19ad/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=19398b9467a083ab1da23c58e6c898ecfb6e19ad",
        "patch": "@@ -52,6 +52,64 @@ read_json(const std::string& jsondata)\n     return v.get_array();\n }\n \n+struct ScriptErrorDesc\n+{\n+    ScriptError_t err;\n+    const char *name;\n+};\n+\n+static ScriptErrorDesc script_errors[]={\n+    {SCRIPT_ERR_OK, \"OK\"},\n+    {SCRIPT_ERR_UNKNOWN_ERROR, \"UNKNOWN_ERROR\"},\n+    {SCRIPT_ERR_EVAL_FALSE, \"EVAL_FALSE\"},\n+    {SCRIPT_ERR_OP_RETURN, \"OP_RETURN\"},\n+    {SCRIPT_ERR_SCRIPT_SIZE, \"SCRIPT_SIZE\"},\n+    {SCRIPT_ERR_PUSH_SIZE, \"PUSH_SIZE\"},\n+    {SCRIPT_ERR_OP_COUNT, \"OP_COUNT\"},\n+    {SCRIPT_ERR_STACK_SIZE, \"STACK_SIZE\"},\n+    {SCRIPT_ERR_SIG_COUNT, \"SIG_COUNT\"},\n+    {SCRIPT_ERR_PUBKEY_COUNT, \"PUBKEY_COUNT\"},\n+    {SCRIPT_ERR_VERIFY, \"VERIFY\"},\n+    {SCRIPT_ERR_EQUALVERIFY, \"EQUALVERIFY\"},\n+    {SCRIPT_ERR_CHECKMULTISIGVERIFY, \"CHECKMULTISIGVERIFY\"},\n+    {SCRIPT_ERR_CHECKSIGVERIFY, \"CHECKSIGVERIFY\"},\n+    {SCRIPT_ERR_NUMEQUALVERIFY, \"NUMEQUALVERIFY\"},\n+    {SCRIPT_ERR_BAD_OPCODE, \"BAD_OPCODE\"},\n+    {SCRIPT_ERR_DISABLED_OPCODE, \"DISABLED_OPCODE\"},\n+    {SCRIPT_ERR_INVALID_STACK_OPERATION, \"INVALID_STACK_OPERATION\"},\n+    {SCRIPT_ERR_INVALID_ALTSTACK_OPERATION, \"INVALID_ALTSTACK_OPERATION\"},\n+    {SCRIPT_ERR_UNBALANCED_CONDITIONAL, \"UNBALANCED_CONDITIONAL\"},\n+    {SCRIPT_ERR_NEGATIVE_LOCKTIME, \"NEGATIVE_LOCKTIME\"},\n+    {SCRIPT_ERR_UNSATISFIED_LOCKTIME, \"UNSATISFIED_LOCKTIME\"},\n+    {SCRIPT_ERR_SIG_HASHTYPE, \"SIG_HASHTYPE\"},\n+    {SCRIPT_ERR_SIG_DER, \"SIG_DER\"},\n+    {SCRIPT_ERR_MINIMALDATA, \"MINIMALDATA\"},\n+    {SCRIPT_ERR_SIG_PUSHONLY, \"SIG_PUSHONLY\"},\n+    {SCRIPT_ERR_SIG_HIGH_S, \"SIG_HIGH_S\"},\n+    {SCRIPT_ERR_SIG_NULLDUMMY, \"SIG_NULLDUMMY\"},\n+    {SCRIPT_ERR_PUBKEYTYPE, \"PUBKEYTYPE\"},\n+    {SCRIPT_ERR_CLEANSTACK, \"CLEANSTACK\"},\n+    {SCRIPT_ERR_DISCOURAGE_UPGRADABLE_NOPS, \"DISCOURAGE_UPGRADABLE_NOPS\"}\n+};\n+\n+const char *FormatScriptError(ScriptError_t err)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].err == err)\n+            return script_errors[i].name;\n+    BOOST_ERROR(\"Unknown scripterror enumeration value, update script_errors in script_tests.cpp.\");\n+    return \"\";\n+}\n+\n+ScriptError_t ParseScriptError(const std::string &name)\n+{\n+    for (unsigned int i=0; i<ARRAYLEN(script_errors); ++i)\n+        if (script_errors[i].name == name)\n+            return script_errors[i].err;\n+    BOOST_ERROR(\"Unknown scripterror \\\"\" << name << \"\\\" in test description\");\n+    return SCRIPT_ERR_UNKNOWN_ERROR;\n+}\n+\n BOOST_FIXTURE_TEST_SUITE(script_tests, BasicTestingSetup)\n \n CMutableTransaction BuildCreditingTransaction(const CScript& scriptPubKey)\n@@ -87,13 +145,13 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message, int scriptError)\n {\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(expect == (err == SCRIPT_ERR_OK), std::string(ScriptErrorString(err)) + \": \" + message);\n+    BOOST_CHECK_MESSAGE(scriptError == -1 || err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n@@ -187,6 +245,7 @@ class TestBuilder\n     std::vector<unsigned char> push;\n     std::string comment;\n     int flags;\n+    int scriptError;\n \n     void DoPush()\n     {\n@@ -204,7 +263,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_)\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(-1)\n     {\n         if (P2SH) {\n             creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n@@ -214,6 +273,12 @@ class TestBuilder\n         spendTx = BuildSpendingTransaction(CScript(), creditTx);\n     }\n \n+    TestBuilder& ScriptError(ScriptError_t err)\n+    {\n+        scriptError = err;\n+        return *this;\n+    }\n+\n     TestBuilder& Add(const CScript& script)\n     {\n         DoPush();\n@@ -288,7 +353,7 @@ class TestBuilder\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment, expect ? SCRIPT_ERR_OK : scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -301,6 +366,8 @@ class TestBuilder\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n         array.push_back(comment);\n+        if (scriptError != -1)\n+            array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         return array;\n     }\n \n@@ -328,99 +395,99 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK, bad sig\", 0\n-                             ).PushSig(keys.key0).DamagePush(10));\n+                             ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2PKH\", 0\n                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2PKH, bad pubkey\", 0\n-                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5));\n+                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK anyonecanpay\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK anyonecanpay marked with normal hashtype\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n                               \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).PushRedeem().DamagePush(10));\n+                             ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n                               \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+                             ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3\", 0\n                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3, 2 sigs\", 0\n-                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0));\n+                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem());\n+                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too much S padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"P2PK with too little R padding but no DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding but no DERSIG\", 0\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                                \"BIP66 example 1, without DERSIG\", 0\n                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, without DERSIG\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, without DERSIG\", 0\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0));\n+                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 4, without DERSIG\", 0\n                               ).Num(0));\n@@ -429,46 +496,46 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, without DERSIG\", 0\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n                               \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                                \"BIP66 example 6, without DERSIG\", 0\n                               ).Num(1));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n                               \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1));\n+                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                                \"BIP66 example 7, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, without DERSIG\", 0\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 10, without DERSIG\", 0\n                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                               \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n                               \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n                                \"BIP66 example 12, without DERSIG\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n@@ -480,33 +547,33 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                                \"P2PK with high S but no LOW_S\", 0\n                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n                               \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n     good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n@@ -515,62 +582,61 @@ BOOST_AUTO_TEST_CASE(script_build)\n                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n     bad.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n                               \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n \n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n                               \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5));\n+                             ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n                               ).PushSig(keys.key1, 5).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n                               \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).DamagePush(10));\n+                             ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n \n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n                               \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n     good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n     bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n                               \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n \n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", 0\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n                               \"P2SH(P2PK) with non-push scriptSig\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).PushSig(keys.key2).PushRedeem());\n+                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n-\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n                               ).Num(11).PushSig(keys.key0));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n-                             ).Num(11).PushSig(keys.key0));\n+                             ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n                               ).Num(11).PushSig(keys.key0).PushRedeem());\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                               \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                             ).Num(11).PushSig(keys.key0).PushRedeem());\n+                             ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n     good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n                                \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n                               ).PushSig(keys.key0).PushRedeem());\n@@ -598,7 +664,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = test.GetJSON().write();\n+        std::string str = test.GetJSON().write(1,4);\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -652,15 +718,14 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n     }\n }\n \n BOOST_AUTO_TEST_CASE(script_invalid)\n {\n     // Scripts that should evaluate as invalid\n     UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n-\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n@@ -676,8 +741,12 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n+        int scriptError = -1; // Expected script error is optional, and follows comment\n+        if (test.size() >= 5 && test[4].get_str() != \"\") {\n+            scriptError = ParseScriptError(test[4].get_str());\n+        }\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "c9a31324caf90a63d95a79c3f64d969847db22c1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWEzMTMyNGNhZjkwYTYzZDk1YTc5YzNmNjRkOTY5ODQ3ZGIyMmMx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:54:18Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Fix JSON pretty printing in script_tests",
      "tree": {
        "sha": "bad9f1f2eb82dac8de037a3c4ea2d7aac1e0117e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bad9f1f2eb82dac8de037a3c4ea2d7aac1e0117e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9a31324caf90a63d95a79c3f64d969847db22c1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a31324caf90a63d95a79c3f64d969847db22c1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a31324caf90a63d95a79c3f64d969847db22c1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a31324caf90a63d95a79c3f64d969847db22c1/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "19398b9467a083ab1da23c58e6c898ecfb6e19ad",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/19398b9467a083ab1da23c58e6c898ecfb6e19ad",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/19398b9467a083ab1da23c58e6c898ecfb6e19ad"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 16,
      "deletions": 4
    },
    "files": [
      {
        "sha": "8f927f8f913033830176236f427db15ca333bfc3",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 4,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9a31324caf90a63d95a79c3f64d969847db22c1/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9a31324caf90a63d95a79c3f64d969847db22c1/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=c9a31324caf90a63d95a79c3f64d969847db22c1",
        "patch": "@@ -381,6 +381,18 @@ class TestBuilder\n         return creditTx.vout[0].scriptPubKey;\n     }\n };\n+\n+std::string JSONPrettyPrint(const UniValue& univalue)\n+{\n+    std::string ret = univalue.write(4);\n+    // Workaround for libunivalue pretty printer, which puts a space between comma's and newlines\n+    size_t pos = 0;\n+    while ((pos = ret.find(\" \\n\", pos)) != std::string::npos) {\n+        ret.replace(pos, 2, \"\\n\");\n+        pos++;\n+    }\n+    return ret;\n+}\n }\n \n BOOST_AUTO_TEST_CASE(script_build)\n@@ -651,11 +663,11 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n         for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n             const UniValue& tv = json_good[idx];\n-            tests_good.insert(tv.get_array().write(1,4));\n+            tests_good.insert(JSONPrettyPrint(tv.get_array()));\n         }\n         for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n             const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(tv.get_array().write(1,4));\n+            tests_bad.insert(JSONPrettyPrint(tv.get_array()));\n         }\n     }\n \n@@ -664,7 +676,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n         test.Test(true);\n-        std::string str = test.GetJSON().write(1,4);\n+        std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n@@ -674,7 +686,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n         test.Test(false);\n-        std::string str = test.GetJSON().write(1,4);\n+        std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());"
      }
    ]
  },
  {
    "sha": "6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo2ZDhlOGZlNjIxMzlmMWUzNmMyZjViY2ZhN2EwM2YzNzMyZTFhMjIx",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:08:13Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Fix some misconstructed tests\n\nThey claimed to be testing P2SH scripts with non-push scriptSigs, but\n1) they were not enabling P2SH\n2) they have push-only scriptSigs\n\nFix this, and add a few more related cases.",
      "tree": {
        "sha": "3a04cf0d058e2d02f9b857e817346b3c26b767ee",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3a04cf0d058e2d02f9b857e817346b3c26b767ee"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c9a31324caf90a63d95a79c3f64d969847db22c1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9a31324caf90a63d95a79c3f64d969847db22c1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c9a31324caf90a63d95a79c3f64d969847db22c1"
      }
    ],
    "stats": {
      "total": 42,
      "additions": 30,
      "deletions": 12
    },
    "files": [
      {
        "sha": "b9f150eacb2368e34e2c68b951760c93ef550775",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
        "patch": "@@ -845,18 +845,18 @@\n     \"SIG_PUSHONLY\"\n ],\n [\n-    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"\",\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"P2SH\",\n     \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\",\n-    \"EVAL_FALSE\"\n+    \"SIG_PUSHONLY\"\n ],\n [\n-    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n     \"SIGPUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig\",\n-    \"EVAL_FALSE\"\n+    \"P2SH(P2PK) with non-push scriptSig but not P2SH\",\n+    \"SIG_PUSHONLY\"\n ],\n [\n     \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\","
      },
      {
        "sha": "29ccbd92ff930a270a0bb60d50dd27720c65a15f",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
        "patch": "@@ -882,6 +882,18 @@\n     \"\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\"\n ],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"\",\n+    \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\"\n+],\n+[\n+    \"0x47 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb125101 NOP8\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"\",\n+    \"P2PK with non-push scriptSig but with P2SH validation\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\","
      },
      {
        "sha": "4ecb56de84981d7866172994fec60c02075ee62f",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
        "patch": "@@ -628,12 +628,18 @@ BOOST_AUTO_TEST_CASE(script_build)\n     bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n                              ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n+                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n+    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                               \"P2PK with non-push scriptSig but with P2SH validation\", 0\n+                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", 0\n-                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n+                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).PushSig(keys.key2).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+                              \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n+                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n     good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));"
      }
    ]
  },
  {
    "sha": "1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZDk2ZjViNGUxZGY3NzU4MzI4NTIwYTk4MTcyZmEzZjNlN2U2NWU1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T12:26:01Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Fix formatting of NOPs for generated script tests",
      "tree": {
        "sha": "15ad2629611fbdfe398d410f87c234440f8cf5bf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/15ad2629611fbdfe398d410f87c234440f8cf5bf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d96f5b4e1df7758328520a98172fa3f3e7e65e5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/6d8e8fe62139f1e36c2f5bcfa7a03f3732e1a221"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "6f9e2266a3966edebde2f519f543239469eece09",
        "filename": "src/core_write.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1d96f5b4e1df7758328520a98172fa3f3e7e65e5/src/core_write.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1d96f5b4e1df7758328520a98172fa3f3e7e65e5/src/core_write.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/core_write.cpp?ref=1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
        "patch": "@@ -35,7 +35,7 @@ string FormatScript(const CScript& script)\n             } else if ((op >= OP_1 && op <= OP_16) || op == OP_1NEGATE) {\n                 ret += strprintf(\"%i \", op - OP_1NEGATE - 1);\n                 continue;\n-            } else if (op >= OP_NOP && op <= OP_CHECKMULTISIGVERIFY) {\n+            } else if (op >= OP_NOP && op <= OP_NOP10) {\n                 string str(GetOpName(op));\n                 if (str.substr(0, 3) == string(\"OP_\")) {\n                     ret += str.substr(3, string::npos) + \" \";\n@@ -45,7 +45,7 @@ string FormatScript(const CScript& script)\n             if (vch.size() > 0) {\n                 ret += strprintf(\"0x%x 0x%x \", HexStr(it2, it - vch.size()), HexStr(it - vch.size(), it));\n             } else {\n-                ret += strprintf(\"0x%x\", HexStr(it2, it));\n+                ret += strprintf(\"0x%x \", HexStr(it2, it));\n             }\n             continue;\n         }"
      }
    ]
  },
  {
    "sha": "1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYmMzNzE3YzdlNWIyMTU2MDJmZThlYWVmNDJhNjM1NmE4YWUwNjU2",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T13:45:10Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Make script_error a mandatory 4th field for script_tests",
      "tree": {
        "sha": "c5bf99a2a10e6b3d01027b2d973a743f3c2fddc3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c5bf99a2a10e6b3d01027b2d973a743f3c2fddc3"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1d96f5b4e1df7758328520a98172fa3f3e7e65e5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1d96f5b4e1df7758328520a98172fa3f3e7e65e5"
      }
    ],
    "stats": {
      "total": 2367,
      "additions": 1200,
      "deletions": 1167
    },
    "files": [
      {
        "sha": "1427cb630a6f2af32e8009f63dfc7e03d866af7f",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 553,
        "deletions": 553,
        "changes": 1106,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=1bc3717c7e5b215602fe8eaef42a6356a8ae0656"
      },
      {
        "sha": "4e86ee78ba604e0463be3e1cc279fd4c0049165f",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 641,
        "deletions": 605,
        "changes": 1246,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=1bc3717c7e5b215602fe8eaef42a6356a8ae0656"
      },
      {
        "sha": "006d8aa644beb27c89a8952dbc026dc531bd6394",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 9,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1bc3717c7e5b215602fe8eaef42a6356a8ae0656/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
        "patch": "@@ -263,7 +263,7 @@ class TestBuilder\n     }\n \n public:\n-    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(-1)\n+    TestBuilder(const CScript& redeemScript, const std::string& comment_, int flags_, bool P2SH = false) : scriptPubKey(redeemScript), havePush(false), comment(comment_), flags(flags_), scriptError(SCRIPT_ERR_OK)\n     {\n         if (P2SH) {\n             creditTx = BuildCreditingTransaction(CScript() << OP_HASH160 << ToByteVector(CScriptID(redeemScript)) << OP_EQUAL);\n@@ -365,9 +365,8 @@ class TestBuilder\n         array.push_back(FormatScript(spendTx.vin[0].scriptSig));\n         array.push_back(FormatScript(creditTx.vout[0].scriptPubKey));\n         array.push_back(FormatScriptFlags(flags));\n+        array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         array.push_back(comment);\n-        if (scriptError != -1)\n-            array.push_back(FormatScriptError((ScriptError_t)scriptError));\n         return array;\n     }\n \n@@ -715,7 +714,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n {\n     // Read tests from test/data/script_valid.json\n     // Format is an array of arrays\n-    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\" ]\n+    // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n     UniValue tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n@@ -735,6 +734,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n+        BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n \n         DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n     }\n@@ -747,7 +747,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 3) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 4) // Allow size > 2; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);\n@@ -759,10 +759,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         string scriptPubKeyString = test[1].get_str();\n         CScript scriptPubKey = ParseScript(scriptPubKeyString);\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        int scriptError = -1; // Expected script error is optional, and follows comment\n-        if (test.size() >= 5 && test[4].get_str() != \"\") {\n-            scriptError = ParseScriptError(test[4].get_str());\n-        }\n+        int scriptError = ParseScriptError(test[3].get_str());\n \n         DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n     }"
      }
    ]
  },
  {
    "sha": "bc178383487ebd5a829c7ed42e304fb21afb7ce5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiYzE3ODM4MzQ4N2ViZDVhODI5YzdlZDQyZTMwNGZiMjFhZmI3Y2U1",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T13:50:17Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Get rid of expect in script_tests as it's implied by scripterror",
      "tree": {
        "sha": "7a62057a44162f6295bf9e4b2ee1257072c2da54",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7a62057a44162f6295bf9e4b2ee1257072c2da54"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bc178383487ebd5a829c7ed42e304fb21afb7ce5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc178383487ebd5a829c7ed42e304fb21afb7ce5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bc178383487ebd5a829c7ed42e304fb21afb7ce5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc178383487ebd5a829c7ed42e304fb21afb7ce5/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1bc3717c7e5b215602fe8eaef42a6356a8ae0656",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1bc3717c7e5b215602fe8eaef42a6356a8ae0656"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 9,
      "deletions": 8
    },
    "files": [
      {
        "sha": "6340af2081f955b1b19b45431a8d3495d0786794",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 8,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc178383487ebd5a829c7ed42e304fb21afb7ce5/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc178383487ebd5a829c7ed42e304fb21afb7ce5/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=bc178383487ebd5a829c7ed42e304fb21afb7ce5",
        "patch": "@@ -145,13 +145,14 @@ CMutableTransaction BuildSpendingTransaction(const CScript& scriptSig, const CMu\n     return txSpend;\n }\n \n-void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, bool expect, const std::string& message, int scriptError)\n+void DoTest(const CScript& scriptPubKey, const CScript& scriptSig, int flags, const std::string& message, int scriptError)\n {\n+    bool expect = (scriptError == SCRIPT_ERR_OK);\n     ScriptError err;\n     CMutableTransaction tx = BuildSpendingTransaction(scriptSig, BuildCreditingTransaction(scriptPubKey));\n     CMutableTransaction tx2 = tx;\n     BOOST_CHECK_MESSAGE(VerifyScript(scriptSig, scriptPubKey, flags, MutableTransactionSignatureChecker(&tx, 0), &err) == expect, message);\n-    BOOST_CHECK_MESSAGE(scriptError == -1 || err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n+    BOOST_CHECK_MESSAGE(err == scriptError, std::string(FormatScriptError(err)) + \" where \" + std::string(FormatScriptError((ScriptError_t)scriptError)) + \" expected: \" + message);\n #if defined(HAVE_CONSENSUS_LIB)\n     CDataStream stream(SER_NETWORK, PROTOCOL_VERSION);\n     stream << tx2;\n@@ -349,11 +350,11 @@ class TestBuilder\n         return *this;\n     }\n \n-    TestBuilder& Test(bool expect)\n+    TestBuilder& Test()\n     {\n         TestBuilder copy = *this; // Make a copy so we can rollback the push.\n         DoPush();\n-        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, expect, comment, expect ? SCRIPT_ERR_OK : scriptError);\n+        DoTest(creditTx.vout[0].scriptPubKey, spendTx.vin[0].scriptSig, flags, comment, scriptError);\n         *this = copy;\n         return *this;\n     }\n@@ -680,7 +681,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n     std::string strBad;\n \n     BOOST_FOREACH(TestBuilder& test, good) {\n-        test.Test(true);\n+        test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_good.count(str) == 0) {\n@@ -690,7 +691,7 @@ BOOST_AUTO_TEST_CASE(script_build)\n         strGood += str + \",\\n\";\n     }\n     BOOST_FOREACH(TestBuilder& test, bad) {\n-        test.Test(false);\n+        test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n         if (tests_bad.count(str) == 0) {\n@@ -736,7 +737,7 @@ BOOST_AUTO_TEST_CASE(script_valid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n         BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, true, strTest, SCRIPT_ERR_OK);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, SCRIPT_ERR_OK);\n     }\n }\n \n@@ -761,7 +762,7 @@ BOOST_AUTO_TEST_CASE(script_invalid)\n         unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n         int scriptError = ParseScriptError(test[3].get_str());\n \n-        DoTest(scriptPubKey, scriptSig, scriptflags, false, strTest, scriptError);\n+        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, scriptError);\n     }\n }\n "
      }
    ]
  },
  {
    "sha": "0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNjk1ZWExZThjZGU1YjI3YWQ3NjllYjEzZmRlYzdjM2ViYWM4NDlh",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-05T14:11:47Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2016-04-10T15:07:35Z"
      },
      "message": "Merge script_valid and script_invalid tests",
      "tree": {
        "sha": "e8fec75a923d1f5c665379d7c71d86a1d8320c45",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e8fec75a923d1f5c665379d7c71d86a1d8320c45"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "bc178383487ebd5a829c7ed42e304fb21afb7ce5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bc178383487ebd5a829c7ed42e304fb21afb7ce5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/bc178383487ebd5a829c7ed42e304fb21afb7ce5"
      }
    ],
    "stats": {
      "total": 2346,
      "additions": 1143,
      "deletions": 1203
    },
    "files": [
      {
        "sha": "226b1ec9c93b9918172f19cb1b72b682a36dddd8",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
        "patch": "@@ -20,11 +20,10 @@ EXTRA_DIST += \\\n \ttest/data/txcreatesign.hex\n \n JSON_TEST_FILES = \\\n-  test/data/script_valid.json \\\n+  test/data/script_tests.json \\\n   test/data/base58_keys_valid.json \\\n   test/data/base58_encode_decode.json \\\n   test/data/base58_keys_invalid.json \\\n-  test/data/script_invalid.json \\\n   test/data/tx_invalid.json \\\n   test/data/tx_valid.json \\\n   test/data/sighash.json"
      },
      {
        "sha": "1427cb630a6f2af32e8009f63dfc7e03d866af7f",
        "filename": "src/test/data/script_invalid.json",
        "status": "removed",
        "additions": 0,
        "deletions": 877,
        "changes": 877,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bc178383487ebd5a829c7ed42e304fb21afb7ce5/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bc178383487ebd5a829c7ed42e304fb21afb7ce5/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=bc178383487ebd5a829c7ed42e304fb21afb7ce5",
        "patch": "@@ -1,877 +0,0 @@\n-[\n-[\"Format is: [scriptSig, scriptPubKey, flags, expected_scripterror, ... comments]\"],\n-[\"It is evaluated as if there was a crediting coinbase transaction with two 0\"],\n-[\"pushes as scriptSig, and one output of 0 satoshi and given scriptPubKey,\"],\n-[\"followed by a spending transaction which spends this output as only input (and\"],\n-[\"correct prevout hash), using the given scriptSig. All nLockTimes are 0, all\"],\n-[\"nSequences are max.\"],\n-\n-[\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"EVAL_FALSE\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n-[\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"and multiple spaces should not change that.\"],\n-[\"   \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"    \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"\", \"\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n-[\"\", \"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n-[\"\", \"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\",\"NOP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\",\"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"DEPTH\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0x4c01\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA1 with not enough bytes\"],\n-[\"0x4d0200ff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA2 with not enough bytes\"],\n-[\"0x4e03000000ffff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA4 with not enough bytes\"],\n-\n-[\"1\", \"IF 0x50 ENDIF 1\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"0x50 is reserved\"],\n-[\"0x52\", \"0x5f ADD 0x60 EQUAL\", \"P2SH,STRICTENC\",\"EVAL_FALSE\", \"0x51 through 0x60 push 1 through 16 onto stack\"],\n-[\"0\",\"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\",\"\"],\n-[\"1\", \"IF VER ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VER non-functional\"],\n-[\"0\", \"IF VERIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n-[\"0\", \"IF ELSE 1 ELSE VERIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n-[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n-[\"0\", \"IF ELSE 1 ELSE VERNOTIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n-\n-[\"1 IF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF/ENDIF can't span scriptSig/scriptPubKey\"],\n-[\"1 IF 0 ENDIF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1 ELSE 0 ENDIF\", \"1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"0 NOTIF\", \"123\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-\n-[\"0\", \"DUP IF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"DUP IF ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"IF 1 ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0\", \"NOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 0\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 0\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 1\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1\", \"IF RETURN ELSE ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"Multiple ELSEs\"],\n-[\"1\", \"IF 1 ELSE ELSE RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-\n-[\"1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"Malformed IF/ELSE/ENDIF sequence\"],\n-[\"1\", \"ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"ENDIF ELSE IF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ENDIF ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-[\"1\", \"IF ELSE ELSE ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n-\n-[\"1\", \"RETURN\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-[\"1\", \"DUP IF RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n-\n-[\"1\", \"RETURN 'data'\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"canonical prunable txout format\"],\n-[\"0 IF\", \"RETURN ENDIF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"still prunable because IF/ENDIF can't span scriptSig/scriptPubKey\"],\n-\n-[\"0\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"VERIFY\"],\n-[\"1\", \"VERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1\", \"VERIFY 0\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1 TOALTSTACK\", \"FROMALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\", \"alt stack not shared between sig/pubkey\"],\n-\n-[\"IFDUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"DROP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"DUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"DUP 1 ADD 2 EQUALVERIFY 0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 0 NIP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0 1\", \"OVER DEPTH 3 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"19 20 21\", \"PICK 19 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"-1 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"19 20 21\", \"0 PICK 20 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"1 PICK 21 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"2 PICK 22 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"0 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"-1 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"19 20 21\", \"0 ROLL 20 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"1 ROLL 21 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"19 20 21\", \"2 ROLL 22 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1 2 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0 1 2 ROT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0 1\", \"SWAP 1 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n-[\"NOP\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 0\", \"TUCK DEPTH 3 EQUALVERIFY SWAP 2DROP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"NOP\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 2\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2 3 2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n-[\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n-[\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n-[\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n-[\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n-[\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n-[\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n-[\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],\n-[\"1 2 0 IF XOR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"XOR disabled\"],\n-[\"2 0 IF 2MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2MUL disabled\"],\n-[\"2 0 IF 2DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2DIV disabled\"],\n-[\"2 2 0 IF MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MUL disabled\"],\n-[\"2 2 0 IF DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"DIV disabled\"],\n-[\"2 2 0 IF MOD ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MOD disabled\"],\n-[\"2 2 0 IF LSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LSHIFT disabled\"],\n-[\"2 2 0 IF RSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RSHIFT disabled\"],\n-\n-[\"\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are no stack items\"],\n-[\"0\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are not 2 stack items\"],\n-[\"0 1\",\"EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"1 1 ADD\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"11 1 ADD 12 SUB\", \"11 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n-[\"-2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n-[\"2147483647 DUP ADD\", \"4294967294 NUMEQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NUMEQUAL must be in numeric range\"],\n-[\"'abcdef' NOT\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NOT is an arithmetic operand\"],\n-\n-[\"2 DUP MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 DUP DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"7 3 MOD\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-[\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n-\n-[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"Ensure 100% coverage of discouraged NOPS\"],\n-[\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP3\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP8\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP9\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-[\"1\", \"NOP10\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n-\n-[\"NOP10\", \"1\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in scriptSig\"],\n-\n-[\"1 0x01 0xb9\", \"HASH160 0x14 0x15727299b05b45fdaf9ac9ecf7565cfe27c3e567 EQUAL\",\n- \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n-\n-[\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n-[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n-[\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xbf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xc9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xca ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xce ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xcf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xd9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xda ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xde ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xdf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xe9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xea ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xeb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xec ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xed ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xee ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xef ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xf9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfa ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xfe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-[\"1\", \"IF 0xff ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n-\n-[\"1 IF 1 ELSE\", \"0xff ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"invalid because scriptSig and scriptPubKey are processed separately\"],\n-\n-[\"NOP\", \"RIPEMD160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\",\n-\"'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\",\n-\"P2SH,STRICTENC\",\n-\"PUSH_SIZE\",\n-\">520 byte push\"],\n-[\"0\",\n-\"IF 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' ENDIF 1\",\n-\"P2SH,STRICTENC\",\n-\"PUSH_SIZE\",\n-\">520 byte push in non-executed IF branch\"],\n-[\"1\",\n-\"0x61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\">201 opcodes executed. 0x61 is NOP\"],\n-[\"0\",\n-\"IF 0x6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161 ENDIF 1\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\">201 opcodes including non-executed IF branch. 0x61 is NOP\"],\n-[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"1 2 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"P2SH,STRICTENC\",\n-\"STACK_SIZE\",\n-\">1,000 stack size (0x6f is 3DUP)\"],\n-[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"1 TOALTSTACK 2 TOALTSTACK 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n-\"P2SH,STRICTENC\",\n-\"STACK_SIZE\",\n-\">1,000 stack+altstack size\"],\n-[\"NOP\",\n-\"0 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f 2DUP 0x616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n-\"P2SH,STRICTENC\",\n-\"SCRIPT_SIZE\",\n-\"10,001-byte scriptPubKey\"],\n-\n-[\"NOP1\",\"NOP10\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n-\n-[\"1\",\"VER\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER is reserved\"],\n-[\"1\",\"VERIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERIF is reserved\"],\n-[\"1\",\"VERNOTIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERNOTIF is reserved\"],\n-[\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n-[\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n-[\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n-[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n-\n-[\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n-[\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n-[\"-2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"Because we use a sign bit, -2147483648 is also 5 bytes\"],\n-[\"2147483647\", \"1ADD 1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n-[\"2147483648\", \"1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n-\n-[\"2147483648 1\", \"BOOLOR 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLOR on 5-byte integers (but we can still do IF etc)\"],\n-[\"2147483648 1\", \"BOOLAND 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLAND on 5-byte integers\"],\n-\n-[\"1\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"ENDIF without IF\"],\n-[\"1\", \"IF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF without ENDIF\"],\n-[\"1 IF 1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IFs don't carry over\"],\n-\n-[\"NOP\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"The following tests check the if(stack.size() < N) tests in each opcode\"],\n-[\"NOP\", \"NOTIF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"They are here to catch copy-and-paste errors\"],\n-[\"NOP\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"Most of them are duplicated elsewhere,\"],\n-\n-[\"NOP\", \"TOALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"but, hey, more is always better, right?\"],\n-[\"1\", \"FROMALTSTACK\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\"],\n-[\"1\", \"2DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"2DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"3DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1\", \"2OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 1 1\", \"2ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1\", \"2SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"IFDUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 3\", \"PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0\", \"PICK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1 1 3\", \"ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"0\", \"ROLL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"TUCK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"1\", \"EQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"EQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"1ADD 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"1SUB 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"ABS 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"NOT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"0NOTEQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"1\", \"ADD\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"SUB\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"BOOLAND\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"BOOLOR\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"NUMNOTEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"LESSTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"GREATERTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"LESSTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"GREATERTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"MIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1\", \"MAX\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"1 1\", \"WITHIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"NOP\", \"RIPEMD160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA1 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"SHA256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-[\"NOP\", \"HASH256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n-\n-[\"Increase CHECKSIG and CHECKMULTISIG negative test coverage\"],\n-[\"\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are no stack items\"],\n-[\"0\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are not 2 stack items\"],\n-[\"\", \"CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are no stack items\"],\n-[\"\", \"-1 CHECKMULTISIG NOT\", \"STRICTENC\", \"PUBKEY_COUNT\", \"CHECKMULTISIG must error when the specified number of pubkeys is negative\"],\n-[\"\", \"1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough pubkeys on the stack\"],\n-[\"\", \"-1 0 CHECKMULTISIG NOT\", \"STRICTENC\", \"SIG_COUNT\", \"CHECKMULTISIG must error when the specified number of signatures is negative\"],\n-[\"\", \"1 'pk1' 1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough signatures on the stack\"],\n-[\"\", \"'dummy' 'sig1' 1 'pk1' 1 CHECKMULTISIG IF 1 ENDIF\", \"\", \"EVAL_FALSE\", \"CHECKMULTISIG must push false to stack when signature is invalid when NOT in strict enc mode\"],\n-\n-[\"\",\nn-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"202 CHECKMULTISIGS, fails due to 201 op limit\"],\n-\n-[\"1\",\nn-\"P2SH,STRICTENC\",\n-\"INVALID_STACK_OPERATION\",\n-\"\"],\n-\n-[\"\",\n-\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"Fails due to 201 sig op limit\"],\n-\n-[\"1\",\n-\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY\",\n-\"P2SH,STRICTENC\",\n-\"OP_COUNT\",\n-\"\"],\n-\n-\n-[\"0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"21 CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"PUBKEY_COUNT\", \"nPubKeys > 20\"],\n-[\"0 'sig' 1 0\", \"CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"SIG_COUNT\", \"nSigs > nPubKeys\"],\n-\n-\n-[\"NOP 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\", \"Tests for Script.IsPushOnly()\"],\n-[\"NOP1 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\"],\n-\n-[\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED in P2SH should fail\"],\n-[\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER in P2SH should fail\"],\n-\n-[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"Basic OP_0 execution\"],\n-\n-[\"MINIMALDATA enforcement for PUSHDATAs\"],\n-\n-[\"0x4c 0x00\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"Empty vector minimally represented by OP_0\"],\n-[\"0x01 0x81\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"-1 minimally represented by OP_1NEGATE\"],\n-[\"0x01 0x01\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"1 to 16 minimally represented by OP_1 to OP_16\"],\n-[\"0x01 0x02\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x03\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x04\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x05\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x06\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x07\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x08\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x09\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0a\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0b\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0c\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0d\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0e\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x0f\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-[\"0x01 0x10\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n-\n-[\"0x4c 0x48 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\", \"DROP 1\", \"MINIMALDATA\",\n- \"MINIMALDATA\",\n- \"PUSHDATA1 of 72 bytes minimally represented by direct push\"],\n-\n-[\"0x4d 0xFF00 0xn- \"MINIMALDATA\",\n- \"PUSHDATA2 of 255 bytes minimally represented by PUSHDATA1\"],\n-\n-[\"0x4e 0x00010000 0xn- \"MINIMALDATA\",\n- \"PUSHDATA4 of 256 bytes minimally represented by PUSHDATA2\"],\n-\n-[\"MINIMALDATA enforcement for numeric arguments\"],\n-\n-[\"0x01 0x00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x01 0x80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"0x80 (negative zero) numequals 0\"],\n-[\"0x02 0x0080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n-[\"0x02 0x0500\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n-[\"0x03 0x050000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n-[\"0x02 0x0580\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n-[\"0x03 0x050080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n-[\"0x03 0xff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff\"],\n-[\"0x03 0xff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xff7f\"],\n-[\"0x04 0xffff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffffff\"],\n-[\"0x04 0xffff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff7f\"],\n-\n-[\"Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule\"],\n-\n-[\"1 0x02 0x0000\", \"PICK DROP\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"1 0x02 0x0000\", \"ROLL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"1ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"1SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"NEGATE DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"ABS DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000\", \"0NOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0 0x02 0x0000\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 1\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0x02 0x0000 0\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0x02 0x0000 0 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0 0x02 0x0000\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-[\"0 0 0x02 0x0000\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0 1\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-[\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n-\n-\n-[\"Order of CHECKMULTISIG evaluation tests, inverted by swapping the order of\"],\n-[\"pubkeys/signatures so they fail due to the STRICTENC rules on validly encoded\"],\n-[\"signatures and pubkeys.\"],\n-[\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501\",\n-    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0 2 CHECKMULTISIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n-],\n-[\n-    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n-    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n-    \"STRICTENC\",\n-    \"SIG_DER\",\n-    \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n-],\n-[\n-    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n-    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n-    \"P2SH,STRICTENC\",\n-    \"SIG_DER\",\n-    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n-],\n-\n-[\"Increase DERSIG test coverage\"],\n-[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n-[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Missing S is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n-[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n-[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n-[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n-\n-[\"Automatically generated test cases\"],\n-[\n-    \"0x47 0x304402200a5c6163f07b8c3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n-    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK, bad sig\"\n-],\n-[\n-    \"0x47 0x3044022034bb0494b50b8ef130e2185bb220265b9284ef5b4b8a8da4d8415df489c83b5102206259a26d9cc0a125ac26af6153b17c02956855ebe1467412f066e402f5f05d1201 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n-    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n-    \"\",\n-    \"EQUALVERIFY\",\n-    \"P2PKH, bad pubkey\"\n-],\n-[\n-    \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790201\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK anyonecanpay marked with normal hashtype\"\n-],\n-[\n-    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n-    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n-    \"P2SH\",\n-    \"EVAL_FALSE\",\n-    \"P2SH(P2PK), bad redeemscript\"\n-],\n-[\n-    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n-    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n-    \"P2SH\",\n-    \"EQUALVERIFY\",\n-    \"P2SH(P2PKH), bad sig\"\n-],\n-[\n-    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"3-of-3, 2 sigs\"\n-],\n-[\n-    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n-    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n-    \"P2SH\",\n-    \"EVAL_FALSE\",\n-    \"P2SH(2-of-3), 1 sig\"\n-],\n-[\n-    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too much R padding\"\n-],\n-[\n-    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too much S padding\"\n-],\n-[\n-    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with too little R padding\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK NOT with bad sig with too much R padding\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK NOT with too much R padding but no DERSIG\"\n-],\n-[\n-    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK NOT with too much R padding\"\n-],\n-[\n-    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 1, with DERSIG\"\n-],\n-[\n-    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 2, without DERSIG\"\n-],\n-[\n-    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 2, with DERSIG\"\n-],\n-[\n-    \"0\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 3, without DERSIG\"\n-],\n-[\n-    \"0\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 3, with DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 5, without DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 5, with DERSIG\"\n-],\n-[\n-    \"1\",\n-    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 6, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 7, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 8, without DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 8, with DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 9, without DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 9, with DERSIG\"\n-],\n-[\n-    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"BIP66 example 10, with DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 11, without DERSIG\"\n-],\n-[\n-    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n-    \"DERSIG\",\n-    \"EVAL_FALSE\",\n-    \"BIP66 example 11, with DERSIG\"\n-],\n-[\n-    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"DERSIG\",\n-    \"SIG_DER\",\n-    \"P2PK with multi-byte hashtype, with DERSIG\"\n-],\n-[\n-    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n-    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n-    \"LOW_S\",\n-    \"SIG_HIGH_S\",\n-    \"P2PK with high S\"\n-],\n-[\n-    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK with hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"\",\n-    \"EVAL_FALSE\",\n-    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK NOT with hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n-    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"P2PK NOT with invalid hybrid pubkey\"\n-],\n-[\n-    \"0 0x47 0x3044022079c7824d6c868e0e1a273484e28c2654a27d043c8a27f49f52cb72efed0759090220452bbbf7089574fa082095a4fc1b3a16bafcf97a3a34d745fafc922cce66b27201\",\n-    \"1 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 2 CHECKMULTISIG\",\n-    \"STRICTENC\",\n-    \"PUBKEYTYPE\",\n-    \"1-of-2 with the first 1 hybrid pubkey\"\n-],\n-[\n-    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n-    \"STRICTENC\",\n-    \"SIG_HASHTYPE\",\n-    \"P2PK with undefined hashtype\"\n-],\n-[\n-    \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n-    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n-    \"STRICTENC\",\n-    \"SIG_HASHTYPE\",\n-    \"P2PK NOT with invalid sig and undefined hashtype\"\n-],\n-[\n-    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n-    \"NULLDUMMY\",\n-    \"SIG_NULLDUMMY\",\n-    \"3-of-3 with nonzero dummy\"\n-],\n-[\n-    \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n-    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n-    \"NULLDUMMY\",\n-    \"SIG_NULLDUMMY\",\n-    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n-],\n-[\n-    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n-    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n-    \"SIGPUSHONLY\",\n-    \"SIG_PUSHONLY\",\n-    \"2-of-2 with two identical keys and sigs pushed using OP_DUP\"\n-],\n-[\n-    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n-    \"P2SH\",\n-    \"SIG_PUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\"\n-],\n-[\n-    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n-    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n-    \"SIGPUSHONLY\",\n-    \"SIG_PUSHONLY\",\n-    \"P2SH(P2PK) with non-push scriptSig but not P2SH\"\n-],\n-[\n-    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n-    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n-    \"CLEANSTACK,P2SH\",\n-    \"CLEANSTACK\",\n-    \"P2PK with unnecessary input\"\n-],\n-[\n-    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n-    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n-    \"CLEANSTACK,P2SH\",\n-    \"CLEANSTACK\",\n-    \"P2SH with unnecessary input\"\n-],\n-\n-[\"The End\"]\n-]"
      },
      {
        "sha": "e69cc9e41371e3fa9e781e0dfd83bc9f8ac411d9",
        "filename": "src/test/data/script_tests.json",
        "status": "renamed",
        "additions": 865,
        "deletions": 0,
        "changes": 865,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/test/data/script_tests.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/test/data/script_tests.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_tests.json?ref=0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
        "patch": "@@ -701,6 +701,556 @@\n [\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Zero-length S is correctly encoded for DERSIG\"],\n [\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"\", \"OK\", \"Negative S is correctly encoded\"],\n \n+[\"\", \"DEPTH\", \"P2SH,STRICTENC\",   \"EVAL_FALSE\", \"Test the test: we should have an empty stack after scriptSig evaluation\"],\n+[\"  \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"and multiple spaces should not change that.\"],\n+[\"   \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"    \", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"\", \"\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n+[\"\", \"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\"],\n+[\"\", \"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\",\"NOP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\",\"NOP DEPTH\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"DEPTH\", \"\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0x4c01\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA1 with not enough bytes\"],\n+[\"0x4d0200ff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA2 with not enough bytes\"],\n+[\"0x4e03000000ffff\",\"0x01 NOP\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"PUSHDATA4 with not enough bytes\"],\n+\n+[\"1\", \"IF 0x50 ENDIF 1\", \"P2SH,STRICTENC\",\"BAD_OPCODE\", \"0x50 is reserved\"],\n+[\"0x52\", \"0x5f ADD 0x60 EQUAL\", \"P2SH,STRICTENC\",\"EVAL_FALSE\", \"0x51 through 0x60 push 1 through 16 onto stack\"],\n+[\"0\",\"NOP\", \"P2SH,STRICTENC\",\"EVAL_FALSE\",\"\"],\n+[\"1\", \"IF VER ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VER non-functional\"],\n+[\"0\", \"IF VERIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERIF illegal everywhere\"],\n+[\"0\", \"IF VERNOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n+[\"0\", \"IF ELSE 1 ELSE VERNOTIF ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"VERNOTIF illegal everywhere\"],\n+\n+[\"1 IF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF/ENDIF can't span scriptSig/scriptPubKey\"],\n+[\"1 IF 0 ENDIF\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1 ELSE 0 ENDIF\", \"1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"0 NOTIF\", \"123\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+\n+[\"0\", \"DUP IF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"DUP IF ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"IF 1 ELSE ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0\", \"NOTIF ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 0\", \"IF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 0\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 1\", \"IF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 1\", \"NOTIF IF 1 ELSE 0 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 1\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"0 0\", \"NOTIF IF 1 ELSE 0 ENDIF ELSE IF 0 ELSE 1 ENDIF ENDIF\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1\", \"IF RETURN ELSE ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"Multiple ELSEs\"],\n+[\"1\", \"IF 1 ELSE ELSE RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+\n+[\"1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"Malformed IF/ELSE/ENDIF sequence\"],\n+[\"1\", \"ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"ENDIF ELSE IF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ENDIF ELSE\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ENDIF ELSE ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+[\"1\", \"IF ELSE ELSE ENDIF ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\"],\n+\n+[\"1\", \"RETURN\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+[\"1\", \"DUP IF RETURN ENDIF\", \"P2SH,STRICTENC\", \"OP_RETURN\"],\n+\n+[\"1\", \"RETURN 'data'\", \"P2SH,STRICTENC\", \"OP_RETURN\", \"canonical prunable txout format\"],\n+[\"0 IF\", \"RETURN ENDIF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"still prunable because IF/ENDIF can't span scriptSig/scriptPubKey\"],\n+\n+[\"0\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"VERIFY\"],\n+[\"1\", \"VERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1\", \"VERIFY 0\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1 TOALTSTACK\", \"FROMALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\", \"alt stack not shared between sig/pubkey\"],\n+\n+[\"IFDUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"DROP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"DUP\", \"DEPTH 0 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"DUP 1 ADD 2 EQUALVERIFY 0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 0 NIP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0 1\", \"OVER DEPTH 3 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"19 20 21\", \"PICK 19 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"-1 PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"19 20 21\", \"0 PICK 20 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"1 PICK 21 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"2 PICK 22 EQUALVERIFY DEPTH 3 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"0 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"-1 ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"19 20 21\", \"0 ROLL 20 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"1 ROLL 21 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"19 20 21\", \"2 ROLL 22 EQUALVERIFY DEPTH 2 EQUAL\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1 2 ROT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0 1 2 ROT\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0 1\", \"SWAP 1 EQUALVERIFY\", \"P2SH,STRICTENC\", \"EQUALVERIFY\"],\n+[\"NOP\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"TUCK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 0\", \"TUCK DEPTH 3 EQUALVERIFY SWAP 2DROP\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"NOP\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 2\", \"3DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2 3 2OVER 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2 3 2SWAP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"'a' 'b'\", \"CAT\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n+[\"'a' 'b' 0\", \"IF CAT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"CAT disabled\"],\n+[\"'abc' 1 1\", \"SUBSTR\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n+[\"'abc' 1 1 0\", \"IF SUBSTR ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"SUBSTR disabled\"],\n+[\"'abc' 2 0\", \"IF LEFT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LEFT disabled\"],\n+[\"'abc' 2 0\", \"IF RIGHT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RIGHT disabled\"],\n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"'abc'\", \"IF INVERT ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"INVERT disabled\"],\n+[\"1 2 0 IF AND ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"AND disabled\"],\n+[\"1 2 0 IF OR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"OR disabled\"],\n+[\"1 2 0 IF XOR ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"XOR disabled\"],\n+[\"2 0 IF 2MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2MUL disabled\"],\n+[\"2 0 IF 2DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"2DIV disabled\"],\n+[\"2 2 0 IF MUL ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MUL disabled\"],\n+[\"2 2 0 IF DIV ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"DIV disabled\"],\n+[\"2 2 0 IF MOD ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"MOD disabled\"],\n+[\"2 2 0 IF LSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"LSHIFT disabled\"],\n+[\"2 2 0 IF RSHIFT ELSE 1 ENDIF\", \"NOP\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"RSHIFT disabled\"],\n+\n+[\"\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are no stack items\"],\n+[\"0\", \"EQUAL NOT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"EQUAL must error when there are not 2 stack items\"],\n+[\"0 1\",\"EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"1 1 ADD\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"11 1 ADD 12 SUB\", \"11 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"-2147483648 0 ADD\", \"NOP\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"arithmetic operands must be in range [-2^31...2^31] \"],\n+[\"2147483647 DUP ADD\", \"4294967294 NUMEQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NUMEQUAL must be in numeric range\"],\n+[\"'abcdef' NOT\", \"0 EQUAL\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"NOT is an arithmetic operand\"],\n+\n+[\"2 DUP MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 DUP DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2MUL\", \"4 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2DIV\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"7 3 MOD\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 2 LSHIFT\", \"8 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+[\"2 1 RSHIFT\", \"1 EQUAL\", \"P2SH,STRICTENC\", \"DISABLED_OPCODE\", \"disabled\"],\n+\n+[\"1\",\"NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10 2 EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+[\"'NOP_1_to_10' NOP1 CHECKLOCKTIMEVERIFY NOP3 NOP4 NOP5 NOP6 NOP7 NOP8 NOP9 NOP10\",\"'NOP_1_to_11' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"Ensure 100% coverage of discouraged NOPS\"],\n+[\"1\", \"NOP1\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"CHECKLOCKTIMEVERIFY\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP3\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP4\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP5\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP6\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP7\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP8\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP9\",  \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+[\"1\", \"NOP10\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\"],\n+\n+[\"NOP10\", \"1\", \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in scriptSig\"],\n+\n+[\"1 0x01 0xb9\", \"HASH160 0x14 0x15727299b05b45fdaf9ac9ecf7565cfe27c3e567 EQUAL\",\n+ \"P2SH,DISCOURAGE_UPGRADABLE_NOPS\", \"DISCOURAGE_UPGRADABLE_NOPS\", \"Discouraged NOP10 in redeemScript\"],\n+\n+[\"0x50\",\"1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcode 0x50 is reserved\"],\n+[\"1\", \"IF 0xba ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"opcodes above NOP10 invalid if executed\"],\n+[\"1\", \"IF 0xbb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xbf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xc9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xca ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xce ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xcf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xd9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xda ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xde ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xdf ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xe9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xea ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xeb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xec ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xed ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xee ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xef ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf0 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf1 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf2 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf3 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf4 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf5 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf6 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf7 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf8 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xf9 ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfa ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfb ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfc ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfd ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xfe ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+[\"1\", \"IF 0xff ELSE 1 ENDIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\"],\n+\n+[\"1 IF 1 ELSE\", \"0xff ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"invalid because scriptSig and scriptPubKey are processed separately\"],\n+\n+[\"NOP\", \"RIPEMD160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH160\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH256\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\",\n+\"'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb'\",\n+\"P2SH,STRICTENC\",\n+\"PUSH_SIZE\",\n+\">520 byte push\"],\n+[\"0\",\n+\"IF 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' ENDIF 1\",\n+\"P2SH,STRICTENC\",\n+\"PUSH_SIZE\",\n+\">520 byte push in non-executed IF branch\"],\n+[\"1\",\n+\"0x61616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\">201 opcodes executed. 0x61 is NOP\"],\n+[\"0\",\n+\"IF 0x6161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161 ENDIF 1\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\">201 opcodes including non-executed IF branch. 0x61 is NOP\"],\n+[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"1 2 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"P2SH,STRICTENC\",\n+\"STACK_SIZE\",\n+\">1,000 stack size (0x6f is 3DUP)\"],\n+[\"1 2 3 4 5 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"1 TOALTSTACK 2 TOALTSTACK 3 4 5 6 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f\",\n+\"P2SH,STRICTENC\",\n+\"STACK_SIZE\",\n+\">1,000 stack+altstack size\"],\n+[\"NOP\",\n+\"0 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 'bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb' 0x6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f6f 2DUP 0x616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161\",\n+\"P2SH,STRICTENC\",\n+\"SCRIPT_SIZE\",\n+\"10,001-byte scriptPubKey\"],\n+\n+[\"NOP1\",\"NOP10\", \"P2SH,STRICTENC\", \"EVAL_FALSE\"],\n+\n+[\"1\",\"VER\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER is reserved\"],\n+[\"1\",\"VERIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERIF is reserved\"],\n+[\"1\",\"VERNOTIF\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VERNOTIF is reserved\"],\n+[\"1\",\"RESERVED\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED is reserved\"],\n+[\"1\",\"RESERVED1\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED1 is reserved\"],\n+[\"1\",\"RESERVED2\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED2 is reserved\"],\n+[\"1\",\"0xba\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"0xba == OP_NOP10 + 1\"],\n+\n+[\"2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n+[\"2147483648\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers\"],\n+[\"-2147483648\", \"1ADD 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"Because we use a sign bit, -2147483648 is also 5 bytes\"],\n+[\"2147483647\", \"1ADD 1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n+[\"2147483648\", \"1SUB 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n+\n+[\"2147483648 1\", \"BOOLOR 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLOR on 5-byte integers (but we can still do IF etc)\"],\n+[\"2147483648 1\", \"BOOLAND 1\", \"P2SH,STRICTENC\", \"UNKNOWN_ERROR\", \"We cannot do BOOLAND on 5-byte integers\"],\n+\n+[\"1\", \"1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"ENDIF without IF\"],\n+[\"1\", \"IF 1\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IF without ENDIF\"],\n+[\"1 IF 1\", \"ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"IFs don't carry over\"],\n+\n+[\"NOP\", \"IF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"The following tests check the if(stack.size() < N) tests in each opcode\"],\n+[\"NOP\", \"NOTIF 1 ENDIF\", \"P2SH,STRICTENC\", \"UNBALANCED_CONDITIONAL\", \"They are here to catch copy-and-paste errors\"],\n+[\"NOP\", \"VERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"Most of them are duplicated elsewhere,\"],\n+\n+[\"NOP\", \"TOALTSTACK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\", \"but, hey, more is always better, right?\"],\n+[\"1\", \"FROMALTSTACK\", \"P2SH,STRICTENC\", \"INVALID_ALTSTACK_OPERATION\"],\n+[\"1\", \"2DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"2DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"3DUP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1\", \"2OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 1 1\", \"2ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1\", \"2SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"IFDUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"DROP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"DUP 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NIP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"OVER\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 3\", \"PICK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0\", \"PICK 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1 1 3\", \"ROLL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"0\", \"ROLL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"ROT\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SWAP\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"TUCK\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"SIZE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"1\", \"EQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"EQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"1ADD 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"1SUB 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"NEGATE 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"ABS 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"NOT 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"0NOTEQUAL 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"1\", \"ADD\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"SUB\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"BOOLAND\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"BOOLOR\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMEQUALVERIFY 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"NUMNOTEQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"LESSTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"GREATERTHAN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"LESSTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"GREATERTHANOREQUAL\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"MIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1\", \"MAX\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"1 1\", \"WITHIN\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"NOP\", \"RIPEMD160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA1 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"SHA256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH160 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+[\"NOP\", \"HASH256 1\", \"P2SH,STRICTENC\", \"INVALID_STACK_OPERATION\"],\n+\n+[\"Increase CHECKSIG and CHECKMULTISIG negative test coverage\"],\n+[\"\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are no stack items\"],\n+[\"0\", \"CHECKSIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKSIG must error when there are not 2 stack items\"],\n+[\"\", \"CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are no stack items\"],\n+[\"\", \"-1 CHECKMULTISIG NOT\", \"STRICTENC\", \"PUBKEY_COUNT\", \"CHECKMULTISIG must error when the specified number of pubkeys is negative\"],\n+[\"\", \"1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough pubkeys on the stack\"],\n+[\"\", \"-1 0 CHECKMULTISIG NOT\", \"STRICTENC\", \"SIG_COUNT\", \"CHECKMULTISIG must error when the specified number of signatures is negative\"],\n+[\"\", \"1 'pk1' 1 CHECKMULTISIG NOT\", \"STRICTENC\", \"INVALID_STACK_OPERATION\", \"CHECKMULTISIG must error when there are not enough signatures on the stack\"],\n+[\"\", \"'dummy' 'sig1' 1 'pk1' 1 CHECKMULTISIG IF 1 ENDIF\", \"\", \"EVAL_FALSE\", \"CHECKMULTISIG must push false to stack when signature is invalid when NOT in strict enc mode\"],\n+\n+[\"\",\nn+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"202 CHECKMULTISIGS, fails due to 201 op limit\"],\n+\n+[\"1\",\nn+\"P2SH,STRICTENC\",\n+\"INVALID_STACK_OPERATION\",\n+\"\"],\n+\n+[\"\",\n+\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIG\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"Fails due to 201 sig op limit\"],\n+\n+[\"1\",\n+\"NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP NOP 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY 0 0 'a' 'b' 'c' 'd' 'e' 'f' 'g' 'h' 'i' 'j' 'k' 'l' 'm' 'n' 'o' 'p' 'q' 'r' 's' 't' 20 CHECKMULTISIGVERIFY\",\n+\"P2SH,STRICTENC\",\n+\"OP_COUNT\",\n+\"\"],\n+\n+\n+[\"0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\", \"21 CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"PUBKEY_COUNT\", \"nPubKeys > 20\"],\n+[\"0 'sig' 1 0\", \"CHECKMULTISIG 1\", \"P2SH,STRICTENC\", \"SIG_COUNT\", \"nSigs > nPubKeys\"],\n+\n+\n+[\"NOP 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\", \"Tests for Script.IsPushOnly()\"],\n+[\"NOP1 0x01 1\", \"HASH160 0x14 0xda1745e9b549bd0bfa1a569971c77eba30cd5a4b EQUAL\", \"P2SH,STRICTENC\", \"SIG_PUSHONLY\"],\n+\n+[\"0 0x01 0x50\", \"HASH160 0x14 0xece424a6bb6ddf4db592c0faed60685047a361b1 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_RESERVED in P2SH should fail\"],\n+[\"0 0x01 VER\", \"HASH160 0x14 0x0f4d7845db968f2a81b530b6f3c1d6246d4c7e01 EQUAL\", \"P2SH,STRICTENC\", \"BAD_OPCODE\", \"OP_VER in P2SH should fail\"],\n+\n+[\"0x00\", \"'00' EQUAL\", \"P2SH,STRICTENC\", \"EVAL_FALSE\", \"Basic OP_0 execution\"],\n+\n+[\"MINIMALDATA enforcement for PUSHDATAs\"],\n+\n+[\"0x4c 0x00\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"Empty vector minimally represented by OP_0\"],\n+[\"0x01 0x81\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"-1 minimally represented by OP_1NEGATE\"],\n+[\"0x01 0x01\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\", \"1 to 16 minimally represented by OP_1 to OP_16\"],\n+[\"0x01 0x02\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x03\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x04\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x05\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x06\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x07\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x08\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x09\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0a\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0b\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0c\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0d\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0e\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x0f\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+[\"0x01 0x10\", \"DROP 1\", \"MINIMALDATA\", \"MINIMALDATA\"],\n+\n+[\"0x4c 0x48 0x111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111\", \"DROP 1\", \"MINIMALDATA\",\n+ \"MINIMALDATA\",\n+ \"PUSHDATA1 of 72 bytes minimally represented by direct push\"],\n+\n+[\"0x4d 0xFF00 0xn+ \"MINIMALDATA\",\n+ \"PUSHDATA2 of 255 bytes minimally represented by PUSHDATA1\"],\n+\n+[\"0x4e 0x00010000 0xn+ \"MINIMALDATA\",\n+ \"PUSHDATA4 of 256 bytes minimally represented by PUSHDATA2\"],\n+\n+[\"MINIMALDATA enforcement for numeric arguments\"],\n+\n+[\"0x01 0x00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x01 0x80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"0x80 (negative zero) numequals 0\"],\n+[\"0x02 0x0080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 0\"],\n+[\"0x02 0x0500\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n+[\"0x03 0x050000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals 5\"],\n+[\"0x02 0x0580\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n+[\"0x03 0x050080\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"numequals -5\"],\n+[\"0x03 0xff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff\"],\n+[\"0x03 0xff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xff7f\"],\n+[\"0x04 0xffff7f80\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffffff\"],\n+[\"0x04 0xffff7f00\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\", \"Minimal encoding is 0xffff7f\"],\n+\n+[\"Test every numeric-accepting opcode for correct handling of the numeric minimal encoding rule\"],\n+\n+[\"1 0x02 0x0000\", \"PICK DROP\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"1 0x02 0x0000\", \"ROLL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"1ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"1SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"NEGATE DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"ABS DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"NOT DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000\", \"0NOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0 0x02 0x0000\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"ADD DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"SUB DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"BOOLAND DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"BOOLOR DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 1\", \"NUMEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"NUMEQUALVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"NUMNOTEQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"LESSTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"GREATERTHAN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"LESSTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"GREATERTHANOREQUAL DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"MIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0x02 0x0000 0\", \"MAX DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0x02 0x0000 0 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0 0x02 0x0000\", \"WITHIN DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+[\"0 0 0x02 0x0000\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0 1\", \"CHECKMULTISIG DROP 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0 0x02 0x0000\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+[\"0 0x02 0x0000 0\", \"CHECKMULTISIGVERIFY 1\", \"MINIMALDATA\", \"UNKNOWN_ERROR\"],\n+\n+\n+[\"Order of CHECKMULTISIG evaluation tests, inverted by swapping the order of\"],\n+[\"pubkeys/signatures so they fail due to the STRICTENC rules on validly encoded\"],\n+[\"signatures and pubkeys.\"],\n+[\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501\",\n+    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0 2 CHECKMULTISIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"2-of-2 CHECKMULTISIG NOT with the first pubkey invalid, and both signatures validly encoded.\"\n+],\n+[\n+    \"0 0x47 0x3044022044dc17b0887c161bb67ba9635bf758735bdde503e4b0a0987f587f14a4e1143d022009a215772d49a85dae40d8ca03955af26ad3978a0ff965faa12915e9586249a501 1\",\n+    \"2 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 0x21 0x02865c40293a680cb9c020e7b1e106d8c1916d3cef99aa431a56d253e69256dac0 2 CHECKMULTISIG NOT\",\n+    \"STRICTENC\",\n+    \"SIG_DER\",\n+    \"2-of-2 CHECKMULTISIG NOT with both pubkeys valid, but first signature invalid.\"\n+],\n+[\n+    \"0 0x47 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f01 0x46 0x304402205451ce65ad844dbb978b8bdedf5082e33b43cae8279c30f2c74d9e9ee49a94f802203fe95a7ccf74da7a232ee523ef4a53cb4d14bdd16289680cdb97a63819b8f42f\",\n+    \"2 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 0x21 0x02a673638cb9587cb68ea08dbef685c6f2d2a751a8b3c6f2a7e9a4999e6e4bfaf5 3 CHECKMULTISIG\",\n+    \"P2SH,STRICTENC\",\n+    \"SIG_DER\",\n+    \"2-of-3 with one valid and one invalid signature due to parse error, nSigs > validSigs\"\n+],\n+\n+[\"Increase DERSIG test coverage\"],\n+[\"0x4a 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Overly long signature is incorrectly encoded for DERSIG\"],\n+[\"0x25 0x30220220000000000000000000000000000000000000000000000000000000000000000000\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Missing S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x3024021077777777777777777777777777777777020a7777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"S with invalid S length is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302403107777777777777777777777777777777702107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer R is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777703107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Non-integer S is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014020002107777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length R is incorrectly encoded for DERSIG\"],\n+[\"0x17 0x3014021077777777777777777777777777777777020001\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Zero-length S is incorrectly encoded for DERSIG\"],\n+[\"0x27 0x302402107777777777777777777777777777777702108777777777777777777777777777777701\", \"0 CHECKSIG NOT\", \"DERSIG\", \"SIG_DER\", \"Negative S is incorrectly encoded for DERSIG\"],\n+\n [\"Automatically generated test cases\"],\n [\n     \"0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n@@ -709,83 +1259,209 @@\n     \"OK\",\n     \"P2PK\"\n ],\n+[\n+    \"0x47 0x304402200a5c6163f07b8c3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK, bad sig\"\n+],\n [\n     \"0x47 0x304402206e05a6fe23c59196ffe176c9ddc31e73a9885638f9d1328d47c0c703863b8876022076feb53811aa5b04e0e79f938eb19906cc5e67548bc555a8e8b8b0fc603d840c01 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508\",\n     \"DUP HASH160 0x14 0x1018853670f9f3b0582c5b9ee8ce93764ac32b93 EQUALVERIFY CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PKH\"\n ],\n+[\n+    \"0x47 0x3044022034bb0494b50b8ef130e2185bb220265b9284ef5b4b8a8da4d8415df489c83b5102206259a26d9cc0a125ac26af6153b17c02956855ebe1467412f066e402f5f05d1201 0x21 0x03363d90d446b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640\",\n+    \"DUP HASH160 0x14 0xc0834c0c158f53be706d234c38fd52de7eece656 EQUALVERIFY CHECKSIG\",\n+    \"\",\n+    \"EQUALVERIFY\",\n+    \"P2PKH, bad pubkey\"\n+],\n [\n     \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790281\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK anyonecanpay\"\n ],\n+[\n+    \"0x47 0x304402204710a85181663b32d25c70ec2bbd14adff5ddfff6cb50d09e155ef5f541fc86c0220056b0cc949be9386ecc5f6c2ac0493269031dbb185781db90171b54ac127790201\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK anyonecanpay marked with normal hashtype\"\n+],\n [\n     \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n     \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH(P2PK)\"\n ],\n+[\n+    \"0x47 0x3044022003fef42ed6c7be8917441218f525a60e2431be978e28b7aca4d7a532cc413ae8022067a1f82c74e8d69291b90d148778405c6257bbcfc2353cc38a3e1f22bf44254601 0x23 0x210279be667ef9dcbbac54a06295ce870b07029bfcdb2dce28d959f2815b16f81798ac\",\n+    \"HASH160 0x14 0x23b0ad3477f2178bc0b3eed26e4e6316f4e83aa1 EQUAL\",\n+    \"P2SH\",\n+    \"EVAL_FALSE\",\n+    \"P2SH(P2PK), bad redeemscript\"\n+],\n [\n     \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n     \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n     \"\",\n     \"OK\",\n     \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\"\n ],\n+[\n+    \"0x47 0x304402204e2eb034be7b089534ac9e798cf6a2c79f38bcb34d1b179efd6f2de0841735db022071461beb056b5a7be1819da6a3e3ce3662831ecc298419ca101eb6887b5dd6a401 0x19 0x76a9147cf9c846cd4882efec4bf07e44ebdad495c94f4b88ac\",\n+    \"HASH160 0x14 0x2df519943d5acc0ef5222091f9dfe3543f489a82 EQUAL\",\n+    \"P2SH\",\n+    \"EQUALVERIFY\",\n+    \"P2SH(P2PKH), bad sig\"\n+],\n [\n     \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"3-of-3\"\n ],\n+[\n+    \"0 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"3-of-3, 2 sigs\"\n+],\n [\n     \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0x47 0x30440220563e5b3b1fc11662a84bc5ea2a32cc3819703254060ba30d639a1aaf2d5068ad0220601c1f47ddc76d93284dd9ed68f7c9974c4a0ea7cbe8a247d6bc3878567a5fca01 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n     \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH(2-of-3)\"\n ],\n+[\n+    \"0 0x47 0x304402205b7d2c2f177ae76cfbbf14d589c113b0b35db753d305d5562dd0b61cbf366cfb02202e56f93c4f08a27f986cd424ffc48a462c3202c4902104d4d0ff98ed28f4bf8001 0 0x4c69 0x52210279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f8179821038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f515082103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff464053ae\",\n+    \"HASH160 0x14 0xc9e4a896d149702d0d1695434feddd52e24ad78d EQUAL\",\n+    \"P2SH\",\n+    \"EVAL_FALSE\",\n+    \"P2SH(2-of-3), 1 sig\"\n+],\n [\n     \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x304402200060558477337b9022e70534f1fea71a318caf836812465a2509931c5e7c4987022078ec32bd50ac9e03a349ba953dfd9fe1c8d2dd8bdb1d38ddca844d3d5c78c11801\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too much R padding\"\n+],\n [\n     \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too much S padding but no DERSIG\"\n ],\n+[\n+    \"0x48 0x304502202de8c03fc525285c9c535631019a5f2af7c6454fa9eb392a3756a4917c420edd02210046130bf2baf7cfc065067c8b9e33a066d9c15edcea9feb0ca2d233e3597925b401\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too much S padding\"\n+],\n [\n     \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with too little R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with too little R padding\"\n+],\n [\n     \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with bad sig with too much R padding but no DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220005ece1335e7f757a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK NOT with bad sig with too much R padding\"\n+],\n+[\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK NOT with too much R padding but no DERSIG\"\n+],\n+[\n+    \"0x47 0x30440220005ece1335e7f657a1a1f476a7fb5bd90964e8a022489f890614a04acfb734c002206c12b8294a6513c7710e8c82d3c23d75cdbfe83200eb7efb495701958501a5d601\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK NOT with too much R padding\"\n+],\n [\n     \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 1, without DERSIG\"\n ],\n+[\n+    \"0x47 0x30440220d7a0417c3f6d1a15094d1cf2a3378ca0503eb8a57630953a9e2987e21ddd0a6502207a6266d686c99090920249991d3d42065b6d43eb70187b219c0db82e4f94d1a201\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 1, with DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 2, without DERSIG\"\n+],\n+[\n+    \"0x47 0x304402208e43c0b91f7c1e5bc58e41c8185f8a6086e111b0090187968a86f2822462d3c902200a58f4076b1133b18ff1dc83ee51676e44c60cc608d9534e0df5ace0424fc0be01\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 2, with DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 3, without DERSIG\"\n+],\n+[\n+    \"0\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 3, with DERSIG\"\n+],\n [\n     \"0\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n@@ -800,27 +1476,104 @@\n     \"OK\",\n     \"BIP66 example 4, with DERSIG\"\n ],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 5, without DERSIG\"\n+],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 5, with DERSIG\"\n+],\n [\n     \"1\",\n     \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 6, without DERSIG\"\n ],\n+[\n+    \"1\",\n+    \"0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 CHECKSIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 6, with DERSIG\"\n+],\n [\n     \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 7, without DERSIG\"\n ],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0x47 0x3044022027c2714269ca5aeecc4d70edc88ba5ee0e3da4986e9216028f489ab4f1b8efce022022bd545b4951215267e4c5ceabd4c5350331b2e4a0b6494c56f361fa5a57a1a201\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 7, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 8, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0x47 0x3044022079ea80afd538d9ada421b5101febeb6bc874e01dde5bca108c1d0479aec339a4022004576db8f66130d1df686ccf00935703689d69cf539438da1edab208b0d63c4801\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 8, with DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 9, without DERSIG\"\n+],\n+[\n+    \"0 0 0x47 0x3044022081aa9d436f2154e8b6d600516db03d78de71df685b585a9807ead4210bd883490220534bb6bdf318a419ac0749660b60e78d17d515558ef369bf872eff405b676b2e01\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 9, with DERSIG\"\n+],\n [\n     \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n     \"\",\n     \"OK\",\n     \"BIP66 example 10, without DERSIG\"\n ],\n+[\n+    \"0 0 0x47 0x30440220da6f441dc3b4b2c84cfa8db0cd5b34ed92c9e01686de5a800d40498b70c0dcac02207c2cf91b0c32b860c4cd4994be36cfb84caf8bb7c3a8e4d96a31b2022c5299c501\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"BIP66 example 10, with DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 11, without DERSIG\"\n+],\n+[\n+    \"0 0x47 0x30440220cae00b1444babfbf6071b0ba8707f6bd373da3df494d6e74119b0430c5db810502205d5231b8c5939c8ff0c82242656d6e06edb073d42af336c99fe8837c36ea39d501 0\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG\",\n+    \"DERSIG\",\n+    \"EVAL_FALSE\",\n+    \"BIP66 example 11, with DERSIG\"\n+],\n [\n     \"0 0x47 0x30440220b119d67d389315308d1745f734a51ff3ec72e06081e84e236fdf9dc2f5d2a64802204b04e3bc38674c4422ea317231d642b56dc09d214a1ecbbf16ecca01ed996e2201 0\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 2 CHECKMULTISIG NOT\",\n@@ -842,27 +1595,69 @@\n     \"OK\",\n     \"P2PK with multi-byte hashtype, without DERSIG\"\n ],\n+[\n+    \"0x48 0x304402203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022054e1c258c2981cdfba5df1f46661fb6541c44f77ca0092f3600331abfffb12510101\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"DERSIG\",\n+    \"SIG_DER\",\n+    \"P2PK with multi-byte hashtype, with DERSIG\"\n+],\n [\n     \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n     \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with high S but no LOW_S\"\n ],\n+[\n+    \"0x48 0x304502203e4516da7253cf068effec6b95c41221c0cf3a8e6ccb8cbf1725b562e9afde2c022100ab1e3da73d67e32045a20e0b999e049978ea8d6ee5480d485fcf2ce0d03b2ef001\",\n+    \"0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 CHECKSIG\",\n+    \"LOW_S\",\n+    \"SIG_HIGH_S\",\n+    \"P2PK with high S\"\n+],\n [\n     \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with hybrid pubkey but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x3044022057292e2d4dfe775becdd0a9e6547997c728cdf35390f6a017da56d654d374e4902206b643be2fc53763b4e284845bfea2c597d2dc7759941dce937636c9d341b71ed01\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK with hybrid pubkey\"\n+],\n+[\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"\",\n+    \"EVAL_FALSE\",\n+    \"P2PK NOT with hybrid pubkey but no STRICTENC\"\n+],\n+[\n+    \"0x47 0x30440220035d554e3153c14950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK NOT with hybrid pubkey\"\n+],\n [\n     \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n     \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x30440220035d554e3153c04950c9993f41c496607a8e24093db0595be7bf875cf64fcf1f02204731c8c4e5daf15e706cec19cdd8f2c5b1d05490e11dab8465ed426569b6e92101\",\n+    \"0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"P2PK NOT with invalid hybrid pubkey\"\n+],\n [\n     \"0 0x47 0x304402202e79441ad1baf5a07fb86bae3753184f6717d9692680947ea8b6e8b777c69af1022079a262e13d868bb5a0964fefe3ba26942e1b0669af1afb55ef3344bc9d4fc4c401\",\n     \"1 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n@@ -877,41 +1672,83 @@\n     \"OK\",\n     \"1-of-2 with the second 1 hybrid pubkey\"\n ],\n+[\n+    \"0 0x47 0x3044022079c7824d6c868e0e1a273484e28c2654a27d043c8a27f49f52cb72efed0759090220452bbbf7089574fa082095a4fc1b3a16bafcf97a3a34d745fafc922cce66b27201\",\n+    \"1 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x41 0x0679be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 2 CHECKMULTISIG\",\n+    \"STRICTENC\",\n+    \"PUBKEYTYPE\",\n+    \"1-of-2 with the first 1 hybrid pubkey\"\n+],\n [\n     \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n     \"\",\n     \"OK\",\n     \"P2PK with undefined hashtype but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x304402206177d513ec2cda444c021a1f4f656fc4c72ba108ae063e157eb86dc3575784940220666fc66702815d0e5413bb9b1df22aed44f5f1efb8b99d41dd5dc9a5be6d205205\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG\",\n+    \"STRICTENC\",\n+    \"SIG_HASHTYPE\",\n+    \"P2PK with undefined hashtype\"\n+],\n [\n     \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n     \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n     \"\",\n     \"OK\",\n     \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\"\n ],\n+[\n+    \"0x47 0x304402207409b5b320296e5e2136a7b281a7f803028ca4ca44e2b83eebd46932677725de02202d4eea1c8d3c98e6f42614f54764e6e5e6542e213eb4d079737e9a8b6e9812ec05\",\n+    \"0x41 0x048282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f5150811f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf CHECKSIG NOT\",\n+    \"STRICTENC\",\n+    \"SIG_HASHTYPE\",\n+    \"P2PK NOT with invalid sig and undefined hashtype\"\n+],\n [\n     \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"3-of-3 with nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"1 0x47 0x3044022051254b9fb476a52d85530792b578f86fea70ec1ffb4393e661bcccb23d8d63d3022076505f94a403c86097841944e044c70c2045ce90e36de51f7e9d3828db98a07501 0x47 0x304402200a358f750934b3feb822f1966bfcd8bbec9eeaa3a8ca941e11ee5960e181fa01022050bf6b5a8e7750f70354ae041cb68a7bade67ec6c3ab19eb359638974410626e01 0x47 0x304402200955d031fff71d8653221e85e36c3c85533d2312fc3045314b19650b7ae2f81002202a6bb8505e36201909d0921f01abff390ae6b7ff97bbf959f98aedeb0a56730901\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG\",\n+    \"NULLDUMMY\",\n+    \"SIG_NULLDUMMY\",\n+    \"3-of-3 with nonzero dummy\"\n+],\n [\n     \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n     \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n     \"\",\n     \"OK\",\n     \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\"\n ],\n+[\n+    \"1 0x47 0x304402201bb2edab700a5d020236df174fefed78087697143731f659bea59642c759c16d022061f42cdbae5bcd3e8790f20bf76687443436e94a634321c16a72aa54cbc7c2ea01 0x47 0x304402204bb4a64f2a6e5c7fb2f07fef85ee56fde5e6da234c6a984262307a20e99842d702206f8303aaba5e625d223897e2ffd3f88ef1bcffef55f38dc3768e5f2e94c923f901 0x47 0x3044022040c2809b71fffb155ec8b82fe7a27f666bd97f941207be4e14ade85a1249dd4d02204d56c85ec525dd18e29a0533d5ddf61b6b1bb32980c2f63edf951aebf7a27bfe01\",\n+    \"3 0x21 0x0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x03363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640 3 CHECKMULTISIG NOT\",\n+    \"NULLDUMMY\",\n+    \"SIG_NULLDUMMY\",\n+    \"3-of-3 NOT with invalid sig with nonzero dummy\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n     \"\",\n     \"OK\",\n     \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\"\n ],\n+[\n+    \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 DUP\",\n+    \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n+    \"SIGPUSHONLY\",\n+    \"SIG_PUSHONLY\",\n+    \"2-of-2 with two identical keys and sigs pushed using OP_DUP\"\n+],\n [\n     \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n     \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n@@ -926,6 +1763,20 @@\n     \"OK\",\n     \"P2PK with non-push scriptSig but with P2SH validation\"\n ],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"P2SH\",\n+    \"SIG_PUSHONLY\",\n+    \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\"\n+],\n+[\n+    \"0x47 0x3044022018a2a81a93add5cb5f5da76305718e4ea66045ec4888b28d84cb22fae7f4645b02201e6daa5ed5d2e4b2b2027cf7ffd43d8d9844dd49f74ef86899ec8e669dfd39aa01 NOP8 0x23 0x2103363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640ac\",\n+    \"HASH160 0x14 0x215640c2f72f0d16b4eced26762035a42ffed39a EQUAL\",\n+    \"SIGPUSHONLY\",\n+    \"SIG_PUSHONLY\",\n+    \"P2SH(P2PK) with non-push scriptSig but not P2SH\"\n+],\n [\n     \"0 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901 0x47 0x304402200abeb4bd07f84222f474aed558cfbdfc0b4e96cde3c2935ba7098b1ff0bd74c302204a04c1ca67b2a20abee210cf9a21023edccbbf8024b988812634233115c6b73901\",\n     \"2 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 0x21 0x038282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508 2 CHECKMULTISIG\",\n@@ -940,13 +1791,27 @@\n     \"OK\",\n     \"P2PK with unnecessary input but no CLEANSTACK\"\n ],\n+[\n+    \"11 0x47 0x304402200a5c6163f07b8d3b013c4d1d6dba25e780b39658d79ba37af7057a3b7f15ffa102201fd9b4eaa9943f734928b99a83592c2e7bf342ea2680f6a2bb705167966b742001\",\n+    \"0x41 0x0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8 CHECKSIG\",\n+    \"CLEANSTACK,P2SH\",\n+    \"CLEANSTACK\",\n+    \"P2PK with unnecessary input\"\n+],\n [\n     \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n     \"P2SH\",\n     \"OK\",\n     \"P2SH with unnecessary input but no CLEANSTACK\"\n ],\n+[\n+    \"11 0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n+    \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",\n+    \"CLEANSTACK,P2SH\",\n+    \"CLEANSTACK\",\n+    \"P2SH with unnecessary input\"\n+],\n [\n     \"0x47 0x304402202f7505132be14872581f35d74b759212d9da40482653f1ffa3116c3294a4a51702206adbf347a2240ca41c66522b1a22a41693610b76a8e7770645dc721d1635854f01 0x43 0x410479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8ac\",\n     \"HASH160 0x14 0x31edc23bdafda4639e669f89ad6b2318dd79d032 EQUAL\",",
        "previous_filename": "src/test/data/script_valid.json"
      },
      {
        "sha": "d42187f9127c29a4330f78c44ec70378f8283eec",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 277,
        "deletions": 324,
        "changes": 601,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/0695ea1e8cde5b27ad769eb13fdec7c3ebac849a/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=0695ea1e8cde5b27ad769eb13fdec7c3ebac849a",
        "patch": "@@ -2,8 +2,7 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n-#include \"data/script_invalid.json.h\"\n-#include \"data/script_valid.json.h\"\n+#include \"data/script_tests.json.h\"\n \n #include \"core_io.h\"\n #include \"key.h\"\n@@ -399,356 +398,310 @@ BOOST_AUTO_TEST_CASE(script_build)\n {\n     const KeyData keys;\n \n-    std::vector<TestBuilder> good;\n-    std::vector<TestBuilder> bad;\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2PK\", 0\n-                              ).PushSig(keys.key0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2PK, bad sig\", 0\n-                             ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                               \"P2PKH\", 0\n-                              ).PushSig(keys.key1).Push(keys.pubkey1C));\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                              \"P2PKH, bad pubkey\", 0\n-                             ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                               \"P2PK anyonecanpay\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                              \"P2PK anyonecanpay marked with normal hashtype\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n-                               \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n-                              ).PushSig(keys.key0).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                               \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n-                              ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n-                              \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n-\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"3-of-3\", 0\n-                              ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"3-of-3, 2 sigs\", 0\n-                             ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n-                              ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n-                             ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too much R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too much S padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"P2PK with too little R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with too much R padding but no DERSIG\", 0\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                               \"BIP66 example 1, without DERSIG\", 0\n-                              ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 2, without DERSIG\", 0\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 3, without DERSIG\", 0\n-                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 4, without DERSIG\", 0\n-                              ).Num(0));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).Num(0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 5, without DERSIG\", 0\n-                             ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n-                              \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                               \"BIP66 example 6, without DERSIG\", 0\n-                              ).Num(1));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n-                              \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"BIP66 example 7, without DERSIG\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 8, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 9, without DERSIG\", 0\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 10, without DERSIG\", 0\n-                              ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 11, without DERSIG\", 0\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 12, without DERSIG\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with multi-byte hashtype, without DERSIG\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n-                              ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with high S but no LOW_S\", 0\n-                              ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n-                             ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n-                               \"P2PK with hybrid pubkey but no STRICTENC\", 0\n-                              ).PushSig(keys.key0, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n-                              \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n-                              ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-    good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n-    good.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"1-of-2 with the second 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                              ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n-    bad.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n-                              \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n-                             ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n-\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                               \"P2PK with undefined hashtype but no STRICTENC\", 0\n-                              ).PushSig(keys.key1, 5));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n-                              \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n-                               \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n-                              ).PushSig(keys.key1, 5).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n-                              \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n-                             ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n-\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                               \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n-                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n-                              \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n-    good.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n-                               \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n-                              ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n-    bad.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n-                              \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n-                             ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n-\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n-                              ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n-    bad.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                              \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n-                             ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n-                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                               \"P2PK with non-push scriptSig but with P2SH validation\", 0\n-                              ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n-                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n-                              \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n-                             ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n-    good.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n-                               \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n-                              ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n-                              ).Num(11).PushSig(keys.key0));\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n-                             ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n-                              ).Num(11).PushSig(keys.key0).PushRedeem());\n-    bad.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                              \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                             ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n-    good.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n-                               \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n-                              ).PushSig(keys.key0).PushRedeem());\n-\n-\n-    std::set<std::string> tests_good;\n-    std::set<std::string> tests_bad;\n+    std::vector<TestBuilder> tests;\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK\", 0\n+                               ).PushSig(keys.key0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK, bad sig\", 0\n+                               ).PushSig(keys.key0).DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2PKH\", 0\n+                               ).PushSig(keys.key1).Push(keys.pubkey1C));\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey2C.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2PKH, bad pubkey\", 0\n+                               ).PushSig(keys.key2).Push(keys.pubkey2C).DamagePush(5).ScriptError(SCRIPT_ERR_EQUALVERIFY));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK anyonecanpay\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK anyonecanpay marked with normal hashtype\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL | SIGHASH_ANYONECANPAY).EditPush(70, \"81\", \"01\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK)\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK), bad redeemscript\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem().DamagePush(10).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2SH(P2PKH), bad sig but no VERIFY_P2SH\", 0, true\n+                               ).PushSig(keys.key0).DamagePush(10).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_DUP << OP_HASH160 << ToByteVector(keys.pubkey1.GetID()) << OP_EQUALVERIFY << OP_CHECKSIG,\n+                                \"P2SH(P2PKH), bad sig\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).DamagePush(10).PushRedeem().ScriptError(SCRIPT_ERR_EQUALVERIFY));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3\", 0\n+                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3, 2 sigs\", 0\n+                               ).Num(0).PushSig(keys.key0).PushSig(keys.key1).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"P2SH(2-of-3)\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(0).PushSig(keys.key1).PushSig(keys.key2).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"P2SH(2-of-3), 1 sig\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(0).PushSig(keys.key1).Num(0).PushRedeem().ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much S padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too much S padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL).EditPush(1, \"44\", \"45\").EditPush(37, \"20\", \"2100\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too little R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"P2PK with too little R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with bad sig with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with bad sig with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").DamagePush(10).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with too much R padding but no DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with too much R padding\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 31, 32).EditPush(1, \"43021F\", \"44022000\").ScriptError(SCRIPT_ERR_SIG_DER));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 1, without DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 1, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 2, without DERSIG\", 0\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 2, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 3, without DERSIG\", 0\n+                               ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 3, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 4, without DERSIG\", 0\n+                               ).Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 4, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 5, without DERSIG\", 0\n+                               ).Num(1).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG,\n+                                \"BIP66 example 5, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 6, without DERSIG\", 0\n+                               ).Num(1));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1C) << OP_CHECKSIG << OP_NOT,\n+                                \"BIP66 example 6, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(1).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 7, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 7, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 8, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 8, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 9, without DERSIG\", 0\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 9, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 10, without DERSIG\", 0\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\"));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 10, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).Num(0).PushSig(keys.key2, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").ScriptError(SCRIPT_ERR_SIG_DER));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 11, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"BIP66 example 11, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 12, without DERSIG\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_2 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"BIP66 example 12, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL, 33, 32).EditPush(1, \"45022100\", \"440220\").Num(0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with multi-byte hashtype, without DERSIG\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\"));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with multi-byte hashtype, with DERSIG\", SCRIPT_VERIFY_DERSIG\n+                               ).PushSig(keys.key2, SIGHASH_ALL).EditPush(70, \"01\", \"0101\").ScriptError(SCRIPT_ERR_SIG_DER));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with high S but no LOW_S\", 0\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with high S\", SCRIPT_VERIFY_LOW_S\n+                               ).PushSig(keys.key2, SIGHASH_ALL, 32, 33).ScriptError(SCRIPT_ERR_SIG_HIGH_S));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n+                                \"P2PK with hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG,\n+                                \"P2PK with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_EVAL_FALSE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid hybrid pubkey but no STRICTENC\", 0\n+                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0H) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key0, SIGHASH_ALL).DamagePush(10).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the second 1 hybrid pubkey and no STRICTENC\", 0\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey0H) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the second 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL));\n+    tests.push_back(TestBuilder(CScript() << OP_1 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey0H) << OP_2 << OP_CHECKMULTISIG,\n+                                \"1-of-2 with the first 1 hybrid pubkey\", SCRIPT_VERIFY_STRICTENC\n+                               ).Num(0).PushSig(keys.key1, SIGHASH_ALL).ScriptError(SCRIPT_ERR_PUBKEYTYPE));\n+\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK with undefined hashtype but no STRICTENC\", 0\n+                               ).PushSig(keys.key1, 5));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG,\n+                                \"P2PK with undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key1, 5).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid sig and undefined hashtype but no STRICTENC\", 0\n+                               ).PushSig(keys.key1, 5).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey1) << OP_CHECKSIG << OP_NOT,\n+                                \"P2PK NOT with invalid sig and undefined hashtype\", SCRIPT_VERIFY_STRICTENC\n+                               ).PushSig(keys.key1, 5).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_HASHTYPE));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3 with nonzero dummy but no NULLDUMMY\", 0\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG,\n+                                \"3-of-3 with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"3-of-3 NOT with invalid sig and nonzero dummy but no NULLDUMMY\", 0\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10));\n+    tests.push_back(TestBuilder(CScript() << OP_3 << ToByteVector(keys.pubkey0C) << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey2C) << OP_3 << OP_CHECKMULTISIG << OP_NOT,\n+                                \"3-of-3 NOT with invalid sig with nonzero dummy\", SCRIPT_VERIFY_NULLDUMMY\n+                               ).Num(1).PushSig(keys.key0).PushSig(keys.key1).PushSig(keys.key2).DamagePush(10).ScriptError(SCRIPT_ERR_SIG_NULLDUMMY));\n+\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP but no SIGPUSHONLY\", 0\n+                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed using OP_DUP\", SCRIPT_VERIFY_SIGPUSHONLY\n+                               ).Num(0).PushSig(keys.key1).Add(CScript() << OP_DUP).ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but no P2SH or SIGPUSHONLY\", 0, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2PK with non-push scriptSig but with P2SH validation\", 0\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but no SIGPUSHONLY\", SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey2C) << OP_CHECKSIG,\n+                                \"P2SH(P2PK) with non-push scriptSig but not P2SH\", SCRIPT_VERIFY_SIGPUSHONLY, true\n+                               ).PushSig(keys.key2).Add(CScript() << OP_NOP8).PushRedeem().ScriptError(SCRIPT_ERR_SIG_PUSHONLY));\n+    tests.push_back(TestBuilder(CScript() << OP_2 << ToByteVector(keys.pubkey1C) << ToByteVector(keys.pubkey1C) << OP_2 << OP_CHECKMULTISIG,\n+                                \"2-of-2 with two identical keys and sigs pushed\", SCRIPT_VERIFY_SIGPUSHONLY\n+                               ).Num(0).PushSig(keys.key1).PushSig(keys.key1));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH\n+                               ).Num(11).PushSig(keys.key0));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2PK with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH\n+                               ).Num(11).PushSig(keys.key0).ScriptError(SCRIPT_ERR_CLEANSTACK));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with unnecessary input but no CLEANSTACK\", SCRIPT_VERIFY_P2SH, true\n+                               ).Num(11).PushSig(keys.key0).PushRedeem());\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with unnecessary input\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                               ).Num(11).PushSig(keys.key0).PushRedeem().ScriptError(SCRIPT_ERR_CLEANSTACK));\n+    tests.push_back(TestBuilder(CScript() << ToByteVector(keys.pubkey0) << OP_CHECKSIG,\n+                                \"P2SH with CLEANSTACK\", SCRIPT_VERIFY_CLEANSTACK | SCRIPT_VERIFY_P2SH, true\n+                               ).PushSig(keys.key0).PushRedeem());\n+\n+\n+    std::set<std::string> tests_set;\n \n     {\n-        UniValue json_good = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n-        UniValue json_bad = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n+        UniValue json_tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n-        for (unsigned int idx = 0; idx < json_good.size(); idx++) {\n-            const UniValue& tv = json_good[idx];\n-            tests_good.insert(JSONPrettyPrint(tv.get_array()));\n-        }\n-        for (unsigned int idx = 0; idx < json_bad.size(); idx++) {\n-            const UniValue& tv = json_bad[idx];\n-            tests_bad.insert(JSONPrettyPrint(tv.get_array()));\n+        for (unsigned int idx = 0; idx < json_tests.size(); idx++) {\n+            const UniValue& tv = json_tests[idx];\n+            tests_set.insert(JSONPrettyPrint(tv.get_array()));\n         }\n     }\n \n-    std::string strGood;\n-    std::string strBad;\n+    std::string strGen;\n \n-    BOOST_FOREACH(TestBuilder& test, good) {\n+    BOOST_FOREACH(TestBuilder& test, tests) {\n         test.Test();\n         std::string str = JSONPrettyPrint(test.GetJSON());\n #ifndef UPDATE_JSON_TESTS\n-        if (tests_good.count(str) == 0) {\n+        if (tests_set.count(str) == 0) {\n             BOOST_CHECK_MESSAGE(false, \"Missing auto script_valid test: \" + test.GetComment());\n         }\n #endif\n-        strGood += str + \",\\n\";\n-    }\n-    BOOST_FOREACH(TestBuilder& test, bad) {\n-        test.Test();\n-        std::string str = JSONPrettyPrint(test.GetJSON());\n-#ifndef UPDATE_JSON_TESTS\n-        if (tests_bad.count(str) == 0) {\n-            BOOST_CHECK_MESSAGE(false, \"Missing auto script_invalid test: \" + test.GetComment());\n-        }\n-#endif\n-        strBad += str + \",\\n\";\n+        strGen += str + \",\\n\";\n     }\n \n #ifdef UPDATE_JSON_TESTS\n-    FILE* valid = fopen(\"script_valid.json.gen\", \"w\");\n-    fputs(strGood.c_str(), valid);\n-    fclose(valid);\n-    FILE* invalid = fopen(\"script_invalid.json.gen\", \"w\");\n-    fputs(strBad.c_str(), invalid);\n-    fclose(invalid);\n+    FILE* file = fopen(\"script_tests.json.gen\", \"w\");\n+    fputs(strGen.c_str(), file);\n+    fclose(file);\n #endif\n }\n \n-BOOST_AUTO_TEST_CASE(script_valid)\n+BOOST_AUTO_TEST_CASE(script_json_test)\n {\n-    // Read tests from test/data/script_valid.json\n+    // Read tests from test/data/script_tests.json\n     // Format is an array of arrays\n     // Inner arrays are [ \"scriptSig\", \"scriptPubKey\", \"flags\", \"expected_scripterror\" ]\n     // ... where scriptSig and scriptPubKey are stringified\n     // scripts.\n-    UniValue tests = read_json(std::string(json_tests::script_valid, json_tests::script_valid + sizeof(json_tests::script_valid)));\n-\n-    for (unsigned int idx = 0; idx < tests.size(); idx++) {\n-        UniValue test = tests[idx];\n-        string strTest = test.write();\n-        if (test.size() < 3) // Allow size > 3; extra stuff ignored (useful for comments)\n-        {\n-            if (test.size() != 1) {\n-                BOOST_ERROR(\"Bad test: \" << strTest);\n-            }\n-            continue;\n-        }\n-        string scriptSigString = test[0].get_str();\n-        CScript scriptSig = ParseScript(scriptSigString);\n-        string scriptPubKeyString = test[1].get_str();\n-        CScript scriptPubKey = ParseScript(scriptPubKeyString);\n-        unsigned int scriptflags = ParseScriptFlags(test[2].get_str());\n-        BOOST_CHECK_EQUAL(test[3].get_str(), \"OK\");\n-\n-        DoTest(scriptPubKey, scriptSig, scriptflags, strTest, SCRIPT_ERR_OK);\n-    }\n-}\n+    UniValue tests = read_json(std::string(json_tests::script_tests, json_tests::script_tests + sizeof(json_tests::script_tests)));\n \n-BOOST_AUTO_TEST_CASE(script_invalid)\n-{\n-    // Scripts that should evaluate as invalid\n-    UniValue tests = read_json(std::string(json_tests::script_invalid, json_tests::script_invalid + sizeof(json_tests::script_invalid)));\n     for (unsigned int idx = 0; idx < tests.size(); idx++) {\n         UniValue test = tests[idx];\n         string strTest = test.write();\n-        if (test.size() < 4) // Allow size > 2; extra stuff ignored (useful for comments)\n+        if (test.size() < 4) // Allow size > 3; extra stuff ignored (useful for comments)\n         {\n             if (test.size() != 1) {\n                 BOOST_ERROR(\"Bad test: \" << strTest);"
      }
    ]
  }
]