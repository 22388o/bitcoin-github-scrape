MarcoFalke,2017-03-13T11:21:45Z,"> This makes invocations easier to read especially if booleans or lots of arguments are involved.\n\nConcept ACK. Though I think we don't need named args for calls that\nonly have a single and obvious param, such as generate( $num ) or any\nsingle param call that starts with set*.\n\nTo aid reviewers even more, maybe in future pulls, a project wide\nsearch and replace of eligible calls makes sense",https://github.com/bitcoin/bitcoin/pull/9983#issuecomment-286080535,286080535,
laanwj,2017-03-13T13:31:02Z,"> Concept ACK. Though I think we don't need named args for calls that\nonly have a single and obvious param, such as generate( $num ) or any\nsingle param call that starts with set*.\n\nI've thought about that. But some of the functions called with one argument are actually multi-arg functions of which only the first is used. And it may happen that more arguments get added to a function in the",https://github.com/bitcoin/bitcoin/pull/9983#issuecomment-286107204,286107204,
MarcoFalke,2017-03-13T14:10:05Z,"> And it may happen that more arguments get added to a function in the future. So I thought it better to be consistent and do all of them to move to a fully name-based API.\n\nHmm. As long as downstream projects use the interface with positional\nargs, we can't do that. Though, maybe we should require named args for\nnew calls and whenever we extend an existing API call to encourage the\nname-base",https://github.com/bitcoin/bitcoin/pull/9983#issuecomment-286117697,286117697,
laanwj,2017-03-16T09:58:39Z,"> Hmm. As long as downstream projects use the interface with positional args, we can't do that.\n\nI don't say we should deprecate the positional arguments any time soon, just try to use it as our own best practice to use named arguments. Mixing them is kind of messy, IMO.",https://github.com/bitcoin/bitcoin/pull/9983#issuecomment-287009369,287009369,
laanwj,2017-03-24T12:44:39Z,"Closing, too much work to rebase all the time.",https://github.com/bitcoin/bitcoin/pull/9983#issuecomment-289013079,289013079,
