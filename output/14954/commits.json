[
  {
    "sha": "fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTZiZjIxZjVlZjhiMjdlODUyNWNhYmJhOTczOGY4ZTFmMjQ2YmY1",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-18T15:35:48Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T15:40:12Z"
      },
      "message": "scripted-diff: test: Use py3.5 bytes::hex() method\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e \"s/def bytes_to_hex_str/def b_2_x/g\" $(git grep -l bytes_to_hex_str)\n\nexport RE_B_0=\"[^()]*\"                          # match no bracket\nexport RE_B_1=\"${RE_B_0}\\(${RE_B_0}\\)${RE_B_0}\" # match exactly one ()\nexport RE_B_2=\"${RE_B_0}\\(${RE_B_1}\\)${RE_B_0}\" # match wrapped (())\n\nexport RE_M=\"(b2x|bytes_to_hex_str)\\(((${RE_B_0}|${RE_B_1}|${RE_B_2})*)\\)\"\n\nsed -i --regexp-extended -e \"s/${RE_M}/\\2.hex()/g\"      $(git grep -l -E '(b2x|bytes_to_hex_str)')\n\nsed -i --regexp-extended -e \"/  +bytes_to_hex_str( as b2x)?,/d\"    $(git grep -l bytes_to_hex_str)\nsed -i --regexp-extended -e \"s/ +bytes_to_hex_str( as b2x)?,//g\"   $(git grep -l bytes_to_hex_str)\nsed -i --regexp-extended -e \"s/, bytes_to_hex_str( as b2x)?//g\"    $(git grep -l bytes_to_hex_str)\n\nexport RE_M=\"(binascii\\.)?hexlify\\(((${RE_B_0}|${RE_B_1}|${RE_B_2})*)\\).decode\\(${RE_B_0}\\)\"\n\nsed -i --regexp-extended -e \"s/${RE_M}/\\2.hex()/g\" $(git grep -l hexlify -- ':(exclude)share')\n\nsed -i --regexp-extended -e  \"/from binascii import hexlify$/d\" $(git grep -l hexlify -- ':(exclude)share')\nsed -i --regexp-extended -e \"s/(from binascii import) .*hexlify/\\1 unhexlify/g\" $(git grep -l hexlify -- ':(exclude)share')\n\nsed -i -e 's/ignore-names \"/ignore-names \"b_2_x,/g' ./test/lint/lint-python-dead-code.sh\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "3b1966e78c4723d52a085b2cb3c990d76cd1897d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3b1966e78c4723d52a085b2cb3c990d76cd1897d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJceqPcAAoJEM4rdWl+aaVIkJ4MAMs5u++JalpI/SRQ24h76H7l\nddb0YM8H8dUsyohlZqdwpS8hxFzc3gKRyHPAAq+H8RCDS8HDljNGWp9h6hLpGEW5\nX98sCMJC46wI5MnsGVfgMzWOX5xGcBBW05dfBPgmGsuE8UZ90hzqUxyceEhtd5qI\n/MobYNBvjfwe6jq7YdhDs+NEhoajTvjlQlU6g5gcOUdcNBYbNtXkUdVL73k+pmzV\nFjZb/pF78jjSb6ABMTKwShVyrCxQ68ZviIvmx5QRueklhN8JE9h/ViPPqbqlE3Hv\nt2iY0T2vMzR1PM4BHqbi6aUSKJs2BKjDINKvI72wGn0bZp3HruTllw+/a+C2UEfs\nzRntM0wAHGGCUuB7B/u3IZMwJnFQCU/MJDHM6bYuzeXPWJ/8B0xDxwJRkWd7K2w6\nqANUXLDUzpjxNNzUyLWUzUcneIC4o2VSKdS5VsNJYXV7CrcjqGUXBgvguXN5tmXY\nSRl8piYth9QxG06MxqtMVzk2P7YNJ3/l3Qxss5dO2Q==\n=ut4N\n-----END PGP SIGNATURE-----",
        "payload": "tree 3b1966e78c4723d52a085b2cb3c990d76cd1897d\nparent 9e3122de054a377089a9ea226acf20274b8f7974\nauthor MarcoFalke <falke.marco@gmail.com> 1550504148 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551541212 -0500\n\nscripted-diff: test: Use py3.5 bytes::hex() method\n\n-BEGIN VERIFY SCRIPT-\nsed -i -e \"s/def bytes_to_hex_str/def b_2_x/g\" $(git grep -l bytes_to_hex_str)\n\nexport RE_B_0=\"[^()]*\"                          # match no bracket\nexport RE_B_1=\"${RE_B_0}\\(${RE_B_0}\\)${RE_B_0}\" # match exactly one ()\nexport RE_B_2=\"${RE_B_0}\\(${RE_B_1}\\)${RE_B_0}\" # match wrapped (())\n\nexport RE_M=\"(b2x|bytes_to_hex_str)\\(((${RE_B_0}|${RE_B_1}|${RE_B_2})*)\\)\"\n\nsed -i --regexp-extended -e \"s/${RE_M}/\\2.hex()/g\"      $(git grep -l -E '(b2x|bytes_to_hex_str)')\n\nsed -i --regexp-extended -e \"/  +bytes_to_hex_str( as b2x)?,/d\"    $(git grep -l bytes_to_hex_str)\nsed -i --regexp-extended -e \"s/ +bytes_to_hex_str( as b2x)?,//g\"   $(git grep -l bytes_to_hex_str)\nsed -i --regexp-extended -e \"s/, bytes_to_hex_str( as b2x)?//g\"    $(git grep -l bytes_to_hex_str)\n\nexport RE_M=\"(binascii\\.)?hexlify\\(((${RE_B_0}|${RE_B_1}|${RE_B_2})*)\\).decode\\(${RE_B_0}\\)\"\n\nsed -i --regexp-extended -e \"s/${RE_M}/\\2.hex()/g\" $(git grep -l hexlify -- ':(exclude)share')\n\nsed -i --regexp-extended -e  \"/from binascii import hexlify$/d\" $(git grep -l hexlify -- ':(exclude)share')\nsed -i --regexp-extended -e \"s/(from binascii import) .*hexlify/\\1 unhexlify/g\" $(git grep -l hexlify -- ':(exclude)share')\n\nsed -i -e 's/ignore-names \"/ignore-names \"b_2_x,/g' ./test/lint/lint-python-dead-code.sh\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9e3122de054a377089a9ea226acf20274b8f7974",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9e3122de054a377089a9ea226acf20274b8f7974",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9e3122de054a377089a9ea226acf20274b8f7974"
      }
    ],
    "stats": {
      "total": 280,
      "additions": 134,
      "deletions": 146
    },
    "files": [
      {
        "sha": "468aec04b535088ddc4138dd6f8d1d8749a4739e",
        "filename": "contrib/linearize/linearize-data.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/contrib/linearize/linearize-data.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/contrib/linearize/linearize-data.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/linearize-data.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -16,7 +16,7 @@\n import datetime\n import time\n from collections import namedtuple\n-from binascii import hexlify, unhexlify\n+from binascii import unhexlify\n \n settings = {}\n \n@@ -61,7 +61,7 @@ def calc_hash_str(blk_hdr):\n     hash = calc_hdr_hash(blk_hdr)\n     hash = bufreverse(hash)\n     hash = wordreverse(hash)\n-    hash_str = hexlify(hash).decode('utf-8')\n+    hash_str = hash.hex()\n     return hash_str\n \n def get_blk_dt(blk_hdr):\n@@ -213,7 +213,7 @@ def run(self):\n \n             inMagic = inhdr[:4]\n             if (inMagic != self.settings['netmagic']):\n-                print(\"Invalid magic: \" + hexlify(inMagic).decode('utf-8'))\n+                print(\"Invalid magic: \" + inMagic.hex())\n                 return\n             inLenLE = inhdr[4:]\n             su = struct.unpack(\"<I\", inLenLE)"
      },
      {
        "sha": "a1e2259bedf4bc1b2784bdd31621b7a59f8e91d6",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -10,7 +10,7 @@\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, ToHex\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, bytes_to_hex_str, get_bip9_status, satoshi_round, sync_blocks\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, get_bip9_status, satoshi_round, sync_blocks\n \n SEQUENCE_LOCKTIME_DISABLE_FLAG = (1<<31)\n SEQUENCE_LOCKTIME_TYPE_FLAG = (1<<22) # this means use time (0 means height)\n@@ -372,7 +372,7 @@ def test_bip68_not_consensus(self):\n         add_witness_commitment(block)\n         block.solve()\n \n-        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        self.nodes[0].submitblock(block.serialize(True).hex())\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n     def activateCSV(self):"
      },
      {
        "sha": "b422bf2873e96b764f0be5b2a850e83d0e31b384",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -15,7 +15,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str,\n     hex_str_to_bytes,\n )\n \n@@ -114,7 +113,7 @@ def run_test(self):\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n             [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Negative locktime)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[bytes_to_hex_str(spendtx.serialize())], allowhighfees=True)\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], allowhighfees=True)\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "18416c3ab124b5adaecd04f7412f49a401cafbb5",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -14,7 +14,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str,\n     wait_until,\n )\n \n@@ -103,7 +102,7 @@ def run_test(self):\n         # rejected from the mempool for exactly that reason.\n         assert_equal(\n             [{'txid': spendtx.hash, 'allowed': False, 'reject-reason': '64: non-mandatory-script-verify-flag (Non-canonical DER signature)'}],\n-            self.nodes[0].testmempoolaccept(rawtxs=[bytes_to_hex_str(spendtx.serialize())], allowhighfees=True)\n+            self.nodes[0].testmempoolaccept(rawtxs=[spendtx.serialize().hex()], allowhighfees=True)\n         )\n \n         # Now we verify that a block with this transaction is also invalid."
      },
      {
        "sha": "08a0911470edb4420702616eaf339c5c54936ea5",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 9,
        "deletions": 9,
        "changes": 18,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -18,7 +18,7 @@\n from test_framework.messages import CTransaction\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str\n+from test_framework.util import assert_equal, assert_raises_rpc_error\n \n NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero) (code 64)\"\n \n@@ -64,17 +64,17 @@ def run_test(self):\n \n         self.log.info(\"Test 1: NULLDUMMY compliant base transactions should be accepted to mempool and mined before activation [430]\")\n         test1txs = [create_transaction(self.nodes[0], coinbase_txid[0], self.ms_address, amount=49)]\n-        txid1 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[0].serialize_with_witness()), True)\n+        txid1 = self.nodes[0].sendrawtransaction(test1txs[0].serialize_with_witness().hex(), True)\n         test1txs.append(create_transaction(self.nodes[0], txid1, self.ms_address, amount=48))\n-        txid2 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[1].serialize_with_witness()), True)\n+        txid2 = self.nodes[0].sendrawtransaction(test1txs[1].serialize_with_witness().hex(), True)\n         test1txs.append(create_transaction(self.nodes[0], coinbase_txid[1], self.wit_ms_address, amount=49))\n-        txid3 = self.nodes[0].sendrawtransaction(bytes_to_hex_str(test1txs[2].serialize_with_witness()), True)\n+        txid3 = self.nodes[0].sendrawtransaction(test1txs[2].serialize_with_witness().hex(), True)\n         self.block_submit(self.nodes[0], test1txs, False, True)\n \n         self.log.info(\"Test 2: Non-NULLDUMMY base multisig transaction should not be accepted to mempool before activation\")\n         test2tx = create_transaction(self.nodes[0], txid2, self.ms_address, amount=47)\n         trueDummy(test2tx)\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test2tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test2tx.serialize_with_witness().hex(), True)\n \n         self.log.info(\"Test 3: Non-NULLDUMMY base transactions should be accepted in a block before activation [431]\")\n         self.block_submit(self.nodes[0], [test2tx], False, True)\n@@ -83,19 +83,19 @@ def run_test(self):\n         test4tx = create_transaction(self.nodes[0], test2tx.hash, self.address, amount=46)\n         test6txs = [CTransaction(test4tx)]\n         trueDummy(test4tx)\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test4tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test4tx.serialize_with_witness().hex(), True)\n         self.block_submit(self.nodes[0], [test4tx])\n \n         self.log.info(\"Test 5: Non-NULLDUMMY P2WSH multisig transaction invalid after activation\")\n         test5tx = create_transaction(self.nodes[0], txid3, self.wit_address, amount=48)\n         test6txs.append(CTransaction(test5tx))\n         test5tx.wit.vtxinwit[0].scriptWitness.stack[0] = b'\\x01'\n-        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, bytes_to_hex_str(test5tx.serialize_with_witness()), True)\n+        assert_raises_rpc_error(-26, NULLDUMMY_ERROR, self.nodes[0].sendrawtransaction, test5tx.serialize_with_witness().hex(), True)\n         self.block_submit(self.nodes[0], [test5tx], True)\n \n         self.log.info(\"Test 6: NULLDUMMY compliant base/witness transactions should be accepted to mempool and in block after activation [432]\")\n         for i in test6txs:\n-            self.nodes[0].sendrawtransaction(bytes_to_hex_str(i.serialize_with_witness()), True)\n+            self.nodes[0].sendrawtransaction(i.serialize_with_witness().hex(), True)\n         self.block_submit(self.nodes[0], test6txs, True, True)\n \n     def block_submit(self, node, txs, witness=False, accept=False):\n@@ -108,7 +108,7 @@ def block_submit(self, node, txs, witness=False, accept=False):\n         witness and add_witness_commitment(block)\n         block.rehash()\n         block.solve()\n-        node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+        node.submitblock(block.serialize(True).hex())\n         if (accept):\n             assert_equal(node.getbestblockhash(), block.hash)\n             self.tip = block.sha256"
      },
      {
        "sha": "274c4922dc635db0b08cb8a3969a4b4492b560fc",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -9,12 +9,12 @@\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, satoshi_round\n+from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n \n MAX_REPLACEMENT_LIMIT = 100\n \n def txToHex(tx):\n-    return bytes_to_hex_str(tx.serialize())\n+    return tx.serialize().hex()\n \n def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n     \"\"\"Create a txout with a given amount and scriptPubKey"
      },
      {
        "sha": "c8505f34abe8948b65a7bad8e2cd15e4910d1b0e",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -18,7 +18,7 @@\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, FromHex, sha256, ToHex\n from test_framework.script import CScript, OP_HASH160, OP_CHECKSIG, OP_0, hash160, OP_EQUAL, OP_DUP, OP_EQUALVERIFY, OP_1, OP_2, OP_CHECKMULTISIG, OP_TRUE, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes, hex_str_to_bytes, sync_blocks, try_rpc\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes, hex_str_to_bytes, sync_blocks, try_rpc\n \n NODE_0 = 0\n NODE_2 = 2\n@@ -181,7 +181,7 @@ def run_test(self):\n             assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash))\n             assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"])\n             assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == bytes_to_hex_str(tx.serialize_without_witness()))\n+            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == tx.serialize_without_witness().hex())\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -392,22 +392,22 @@ def run_test(self):\n             v = self.nodes[0].getaddressinfo(i)\n             if (v['isscript']):\n                 bare = hex_str_to_bytes(v['hex'])\n-                importlist.append(bytes_to_hex_str(bare))\n-                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(bare)])))\n+                importlist.append(bare.hex())\n+                importlist.append(CScript([OP_0, sha256(bare)]).hex())\n             else:\n                 pubkey = hex_str_to_bytes(v['pubkey'])\n                 p2pk = CScript([pubkey, OP_CHECKSIG])\n                 p2pkh = CScript([OP_DUP, OP_HASH160, hash160(pubkey), OP_EQUALVERIFY, OP_CHECKSIG])\n-                importlist.append(bytes_to_hex_str(p2pk))\n-                importlist.append(bytes_to_hex_str(p2pkh))\n-                importlist.append(bytes_to_hex_str(CScript([OP_0, hash160(pubkey)])))\n-                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pk)])))\n-                importlist.append(bytes_to_hex_str(CScript([OP_0, sha256(p2pkh)])))\n+                importlist.append(p2pk.hex())\n+                importlist.append(p2pkh.hex())\n+                importlist.append(CScript([OP_0, hash160(pubkey)]).hex())\n+                importlist.append(CScript([OP_0, sha256(p2pk)]).hex())\n+                importlist.append(CScript([OP_0, sha256(p2pkh)]).hex())\n \n-        importlist.append(bytes_to_hex_str(unsolvablep2pkh))\n-        importlist.append(bytes_to_hex_str(unsolvablep2wshp2pkh))\n-        importlist.append(bytes_to_hex_str(op1))\n-        importlist.append(bytes_to_hex_str(p2wshop1))\n+        importlist.append(unsolvablep2pkh.hex())\n+        importlist.append(unsolvablep2wshp2pkh.hex())\n+        importlist.append(op1.hex())\n+        importlist.append(p2wshop1.hex())\n \n         for i in importlist:\n             # import all generated addresses. The wallet already has the private keys for some of these, so catch JSON RPC\n@@ -535,7 +535,7 @@ def mine_and_test_listunspent(self, script_list, ismine):\n         for i in script_list:\n             tx.vout.append(CTxOut(10000000, i))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         txid = self.nodes[0].sendrawtransaction(signresults, True)\n         txs_mined[txid] = self.nodes[0].generate(1)[0]\n         sync_blocks(self.nodes)\n@@ -587,7 +587,7 @@ def create_and_mine_tx_from_txids(self, txids, success=True):\n                 tx.vin.append(CTxIn(COutPoint(int('0x' + i, 0), j)))\n         tx.vout.append(CTxOut(0, CScript()))\n         tx.rehash()\n-        signresults = self.nodes[0].signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize_without_witness()))['hex']\n+        signresults = self.nodes[0].signrawtransactionwithwallet(tx.serialize_without_witness().hex())['hex']\n         self.nodes[0].sendrawtransaction(signresults, True)\n         self.nodes[0].generate(1)\n         sync_blocks(self.nodes)"
      },
      {
        "sha": "2844e42f6295d6a20792fa7d969424a993e8aa4c",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -152,7 +152,7 @@ def run_test(self):\n         bin_response = self.test_rest_request(\"/getutxos\", http_method='POST', req_type=ReqType.BIN, body=bin_request, ret_type=RetType.BYTES)\n         output = BytesIO(bin_response)\n         chain_height, = unpack(\"i\", output.read(4))\n-        response_hash = binascii.hexlify(output.read(32)[::-1]).decode('ascii')\n+        response_hash = output.read(32)[::-1].hex()\n \n         assert_equal(bb_hash, response_hash)  # check if getutxo's chaintip during calculation was fine\n         assert_equal(chain_height, 102)  # chain height must be 102\n@@ -252,7 +252,7 @@ def run_test(self):\n         resp_hex = self.test_rest_request(\"/blockhashbyheight/{}\".format(block_json_obj['height']), req_type=ReqType.HEX, ret_type=RetType.OBJ)\n         assert_equal(resp_hex.read().decode('utf-8').rstrip(), bb_hash)\n         resp_bytes = self.test_rest_request(\"/blockhashbyheight/{}\".format(block_json_obj['height']), req_type=ReqType.BIN, ret_type=RetType.BYTES)\n-        blockhash = binascii.hexlify(resp_bytes[::-1]).decode('utf-8')\n+        blockhash = resp_bytes[::-1].hex()\n         assert_equal(blockhash, bb_hash)\n \n         # Check invalid blockhashbyheight requests"
      },
      {
        "sha": "e59c0f32b3dc04db95ac0b8684b4da2e3b421946",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 6,
        "deletions": 7,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -10,7 +10,6 @@\n from test_framework.messages import CTransaction\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str,\n     hash256,\n )\n from io import BytesIO\n@@ -94,17 +93,17 @@ def _zmq_test(self):\n             tx = CTransaction()\n             tx.deserialize(BytesIO(hex))\n             tx.calc_sha256()\n-            assert_equal(tx.hash, bytes_to_hex_str(txid))\n+            assert_equal(tx.hash, txid.hex())\n \n             # Should receive the generated block hash.\n-            hash = bytes_to_hex_str(self.hashblock.receive())\n+            hash = self.hashblock.receive().hex()\n             assert_equal(genhashes[x], hash)\n             # The block should only have the coinbase txid.\n-            assert_equal([bytes_to_hex_str(txid)], self.nodes[1].getblock(hash)[\"tx\"])\n+            assert_equal([txid.hex()], self.nodes[1].getblock(hash)[\"tx\"])\n \n             # Should receive the generated raw block.\n             block = self.rawblock.receive()\n-            assert_equal(genhashes[x], bytes_to_hex_str(hash256(block[:80])))\n+            assert_equal(genhashes[x], hash256(block[:80]).hex())\n \n         if self.is_wallet_compiled():\n             self.log.info(\"Wait for tx from second node\")\n@@ -113,11 +112,11 @@ def _zmq_test(self):\n \n             # Should receive the broadcasted txid.\n             txid = self.hashtx.receive()\n-            assert_equal(payment_txid, bytes_to_hex_str(txid))\n+            assert_equal(payment_txid, txid.hex())\n \n             # Should receive the broadcasted raw transaction.\n             hex = self.rawtx.receive()\n-            assert_equal(payment_txid, bytes_to_hex_str(hash256(hex)))\n+            assert_equal(payment_txid, hash256(hex).hex())\n \n \n         self.log.info(\"Test the getzmqnotifications RPC\")"
      },
      {
        "sha": "f6a17eaf402708970345d9a2c552901aee057dcf",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -27,7 +27,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    bytes_to_hex_str,\n     hex_str_to_bytes,\n )\n \n@@ -101,7 +100,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_final)))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n             allowhighfees=True,\n         )\n         node.sendrawtransaction(hexstring=raw_tx_final, allowhighfees=True)\n@@ -119,7 +118,7 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         tx.vout[0].nValue -= int(fee * COIN)  # Double the fee\n         tx.vin[0].nSequence = BIP125_SEQUENCE_NUMBER + 1  # Now, opt out of RBF\n-        raw_tx_0 = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex']\n+        raw_tx_0 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         txid_0 = tx.rehash()\n         self.check_mempool_result(\n@@ -129,14 +128,14 @@ def run_test(self):\n \n         self.log.info('A transaction that conflicts with an unconfirmed tx')\n         # Send the transaction that replaces the mempool transaction and opts out of replaceability\n-        node.sendrawtransaction(hexstring=bytes_to_hex_str(tx.serialize()), allowhighfees=True)\n+        node.sendrawtransaction(hexstring=tx.serialize().hex(), allowhighfees=True)\n         # take original raw_tx_0\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         tx.vout[0].nValue -= int(4 * fee * COIN)  # Set more fee\n         # skip re-signing the tx\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '18: txn-mempool-conflict'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n             allowhighfees=True,\n         )\n \n@@ -146,13 +145,13 @@ def run_test(self):\n         # skip re-signing the tx\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': 'missing-inputs'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with missing inputs, that existed once in the past')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_0)))\n         tx.vin[0].prevout.n = 1  # Set vout to 1, to spend the other outpoint (49 coins) of the in-chain-tx we want to double spend\n-        raw_tx_1 = node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex']\n+        raw_tx_1 = node.signrawtransactionwithwallet(tx.serialize().hex())['hex']\n         txid_1 = node.sendrawtransaction(hexstring=raw_tx_1, allowhighfees=True)\n         # Now spend both to \"clearly hide\" the outputs, ie. remove the coins from the utxo set by spending them\n         raw_tx_spend_both = node.signrawtransactionwithwallet(node.createrawtransaction(\n@@ -184,41 +183,41 @@ def run_test(self):\n         # Reference tx should be valid on itself\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': True}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with no outputs')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout = []\n         # Skip re-signing the transaction for context independent checks from now on\n-        # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(bytes_to_hex_str(tx.serialize()))['hex'])))\n+        # tx.deserialize(BytesIO(hex_str_to_bytes(node.signrawtransactionwithwallet(tx.serialize().hex())['hex'])))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-empty'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A really large transaction')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin = [tx.vin[0]] * math.ceil(MAX_BLOCK_BASE_SIZE / len(tx.vin[0].serialize()))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-oversize'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with negative output value')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].nValue *= -1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-negative'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with too large output value')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].nValue = 21000000 * COIN + 1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-vout-toolarge'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with too large sum of output values')\n@@ -227,15 +226,15 @@ def run_test(self):\n         tx.vout[0].nValue = 21000000 * COIN\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-txouttotal-toolarge'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction with duplicate inputs')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin = [tx.vin[0]] * 2\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: bad-txns-inputs-duplicate'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A coinbase transaction')\n@@ -244,49 +243,49 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_coinbase_spent)))\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '16: coinbase'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('Some nonstandard transactions')\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.nVersion = 3  # A version currently non-standard\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: version'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].scriptPubKey = CScript([OP_0])  # Some non-standard script\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptpubkey'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vin[0].scriptSig = CScript([OP_HASH160])  # Some not-pushonly scriptSig\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: scriptsig-not-pushonly'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         output_p2sh_burn = CTxOut(nValue=540, scriptPubKey=CScript([OP_HASH160, hash160(b'burn'), OP_EQUAL]))\n         num_scripts = 100000 // len(output_p2sh_burn.serialize())  # Use enough outputs to make the tx too large for our policy\n         tx.vout = [output_p2sh_burn] * num_scripts\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: tx-size'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0] = output_p2sh_burn\n         tx.vout[0].nValue -= 1  # Make output smaller, such that it is dust for our policy\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: dust'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n         tx.deserialize(BytesIO(hex_str_to_bytes(raw_tx_reference)))\n         tx.vout[0].scriptPubKey = CScript([OP_RETURN, b'\\xff'])\n         tx.vout = [tx.vout[0]] * 2\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: multi-op-return'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A timelocked transaction')\n@@ -295,7 +294,7 @@ def run_test(self):\n         tx.nLockTime = node.getblockcount() + 1\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-final'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n         )\n \n         self.log.info('A transaction that is locked by BIP68 sequence logic')\n@@ -304,7 +303,7 @@ def run_test(self):\n         # Can skip re-signing the tx because of early rejection\n         self.check_mempool_result(\n             result_expected=[{'txid': tx.rehash(), 'allowed': False, 'reject-reason': '64: non-BIP68-final'}],\n-            rawtxs=[bytes_to_hex_str(tx.serialize())],\n+            rawtxs=[tx.serialize().hex()],\n             allowhighfees=True,\n         )\n "
      },
      {
        "sha": "788aabc192c0e336b378fa8642c3749da24d4f7c",
        "filename": "test/functional/mining_basic.py",
        "status": "modified",
        "additions": 23,
        "deletions": 24,
        "changes": 47,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/mining_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/mining_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_basic.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -27,7 +27,6 @@\n from test_framework.util import (\n     assert_equal,\n     assert_raises_rpc_error,\n-    bytes_to_hex_str as b2x,\n     connect_nodes_bi,\n )\n from test_framework.script import CScriptNum\n@@ -36,7 +35,7 @@\n def assert_template(node, block, expect, rehash=True):\n     if rehash:\n         block.hashMerkleRoot = block.calc_merkle_root()\n-    rsp = node.getblocktemplate(template_request={'data': b2x(block.serialize()), 'mode': 'proposal', 'rules': ['segwit']})\n+    rsp = node.getblocktemplate(template_request={'data': block.serialize().hex(), 'mode': 'proposal', 'rules': ['segwit']})\n     assert_equal(rsp, expect)\n \n \n@@ -64,8 +63,8 @@ def run_test(self):\n         def assert_submitblock(block, result_str_1, result_str_2=None):\n             block.solve()\n             result_str_2 = result_str_2 or 'duplicate-invalid'\n-            assert_equal(result_str_1, node.submitblock(hexdata=b2x(block.serialize())))\n-            assert_equal(result_str_2, node.submitblock(hexdata=b2x(block.serialize())))\n+            assert_equal(result_str_1, node.submitblock(hexdata=block.serialize().hex()))\n+            assert_equal(result_str_2, node.submitblock(hexdata=block.serialize().hex()))\n \n         self.log.info('getmininginfo')\n         mining_info = node.getmininginfo()\n@@ -112,7 +111,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_template(node, block, None)\n \n         self.log.info(\"submitblock: Test block decode failure\")\n-        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, b2x(block.serialize()[:-15]))\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.submitblock, block.serialize()[:-15].hex())\n \n         self.log.info(\"getblocktemplate: Test bad input hash for coinbase transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -121,10 +120,10 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         assert_template(node, bad_block, 'bad-cb-missing')\n \n         self.log.info(\"submitblock: Test invalid coinbase transaction\")\n-        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, b2x(bad_block.serialize()))\n+        assert_raises_rpc_error(-22, \"Block does not start with a coinbase\", node.submitblock, bad_block.serialize().hex())\n \n         self.log.info(\"getblocktemplate: Test truncated final transaction\")\n-        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(block.serialize()[:-1]), 'mode': 'proposal', 'rules': ['segwit']})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': block.serialize()[:-1].hex(), 'mode': 'proposal', 'rules': ['segwit']})\n \n         self.log.info(\"getblocktemplate: Test duplicate transaction\")\n         bad_block = copy.deepcopy(block)\n@@ -153,7 +152,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         bad_block_sn = bytearray(block.serialize())\n         assert_equal(bad_block_sn[BLOCK_HEADER_SIZE], 1)\n         bad_block_sn[BLOCK_HEADER_SIZE] += 1\n-        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': b2x(bad_block_sn), 'mode': 'proposal', 'rules': ['segwit']})\n+        assert_raises_rpc_error(-22, \"Block decode failed\", node.getblocktemplate, {'data': bad_block_sn.hex(), 'mode': 'proposal', 'rules': ['segwit']})\n \n         self.log.info(\"getblocktemplate: Test bad bits\")\n         bad_block = copy.deepcopy(block)\n@@ -184,7 +183,7 @@ def assert_submitblock(block, result_str_1, result_str_2=None):\n         self.log.info('submitheader tests')\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='xx' * BLOCK_HEADER_SIZE))\n         assert_raises_rpc_error(-22, 'Block header decode failed', lambda: node.submitheader(hexdata='ff' * (BLOCK_HEADER_SIZE-2)))\n-        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=b2x(super(CBlock, bad_block).serialize())))\n+        assert_raises_rpc_error(-25, 'Must submit previous header', lambda: node.submitheader(hexdata=super(CBlock, bad_block).serialize().hex()))\n \n         block.nTime += 1\n         block.solve()\n@@ -193,43 +192,43 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n             return {'hash': b_hash, 'height': 202, 'branchlen': branchlen, 'status': status}\n \n         assert chain_tip(block.hash) not in node.getchaintips()\n-        node.submitheader(hexdata=b2x(block.serialize()))\n+        node.submitheader(hexdata=block.serialize().hex())\n         assert chain_tip(block.hash) in node.getchaintips()\n-        node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))  # Noop\n+        node.submitheader(hexdata=CBlockHeader(block).serialize().hex())  # Noop\n         assert chain_tip(block.hash) in node.getchaintips()\n \n         bad_block_root = copy.deepcopy(block)\n         bad_block_root.hashMerkleRoot += 2\n         bad_block_root.solve()\n         assert chain_tip(bad_block_root.hash) not in node.getchaintips()\n-        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+        node.submitheader(hexdata=CBlockHeader(bad_block_root).serialize().hex())\n         assert chain_tip(bad_block_root.hash) in node.getchaintips()\n         # Should still reject invalid blocks, even if we have the header:\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'bad-txnmrklroot')\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_root.serialize())), 'bad-txnmrklroot')\n+        assert_equal(node.submitblock(hexdata=bad_block_root.serialize().hex()), 'bad-txnmrklroot')\n+        assert_equal(node.submitblock(hexdata=bad_block_root.serialize().hex()), 'bad-txnmrklroot')\n         assert chain_tip(bad_block_root.hash) in node.getchaintips()\n         # We know the header for this invalid block, so should just return early without error:\n-        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n+        node.submitheader(hexdata=CBlockHeader(bad_block_root).serialize().hex())\n         assert chain_tip(bad_block_root.hash) in node.getchaintips()\n \n         bad_block_lock = copy.deepcopy(block)\n         bad_block_lock.vtx[0].nLockTime = 2**32 - 1\n         bad_block_lock.vtx[0].rehash()\n         bad_block_lock.hashMerkleRoot = bad_block_lock.calc_merkle_root()\n         bad_block_lock.solve()\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'bad-txns-nonfinal')\n-        assert_equal(node.submitblock(hexdata=b2x(bad_block_lock.serialize())), 'duplicate-invalid')\n+        assert_equal(node.submitblock(hexdata=bad_block_lock.serialize().hex()), 'bad-txns-nonfinal')\n+        assert_equal(node.submitblock(hexdata=bad_block_lock.serialize().hex()), 'duplicate-invalid')\n         # Build a \"good\" block on top of the submitted bad block\n         bad_block2 = copy.deepcopy(block)\n         bad_block2.hashPrevBlock = bad_block_lock.sha256\n         bad_block2.solve()\n-        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n+        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=CBlockHeader(bad_block2).serialize().hex()))\n \n         # Should reject invalid header right away\n         bad_block_time = copy.deepcopy(block)\n         bad_block_time.nTime = 1\n         bad_block_time.solve()\n-        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n+        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=CBlockHeader(bad_block_time).serialize().hex()))\n \n         # Should ask for the block from a p2p node, if they announce the header as well:\n         node.add_p2p_connection(P2PDataStore())\n@@ -240,11 +239,11 @@ def chain_tip(b_hash, *, status='headers-only', branchlen=1):\n \n         # Building a few blocks should give the same results\n         node.generatetoaddress(10, node.get_deterministic_priv_key().address)\n-        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block_time).serialize())))\n-        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=b2x(CBlockHeader(bad_block2).serialize())))\n-        node.submitheader(hexdata=b2x(CBlockHeader(block).serialize()))\n-        node.submitheader(hexdata=b2x(CBlockHeader(bad_block_root).serialize()))\n-        assert_equal(node.submitblock(hexdata=b2x(block.serialize())), 'duplicate')  # valid\n+        assert_raises_rpc_error(-25, 'time-too-old', lambda: node.submitheader(hexdata=CBlockHeader(bad_block_time).serialize().hex()))\n+        assert_raises_rpc_error(-25, 'bad-prevblk', lambda: node.submitheader(hexdata=CBlockHeader(bad_block2).serialize().hex()))\n+        node.submitheader(hexdata=CBlockHeader(block).serialize().hex())\n+        node.submitheader(hexdata=CBlockHeader(bad_block_root).serialize().hex())\n+        assert_equal(node.submitblock(hexdata=block.serialize().hex()), 'duplicate')  # valid\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "14ebd297fc79068dee59980449946a91a7360300",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 9,
        "deletions": 11,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -3,7 +3,6 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\"\n-from binascii import hexlify\n import math\n import random\n import struct\n@@ -74,7 +73,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str,\n     connect_nodes,\n     disconnect_nodes,\n     get_bip9_status,\n@@ -566,7 +564,7 @@ def test_getblocktemplate_before_lockin(self):\n                 witness_root = CBlock.get_merkle_root([ser_uint256(0),\n                                                        ser_uint256(txid)])\n                 script = get_witness_script(witness_root, 0)\n-                assert_equal(witness_commitment, bytes_to_hex_str(script))\n+                assert_equal(witness_commitment, script.hex())\n \n     @subtest\n     def advance_to_segwit_lockin(self):\n@@ -686,13 +684,13 @@ def test_standardness_v0(self):\n         if self.segwit_status != 'active':\n             # Just check mempool acceptance, but don't add the transaction to the mempool, since witness is disallowed\n             # in blocks and the tx is impossible to mine right now.\n-            assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n             # Create the same output as tx3, but by replacing tx\n             tx3_out = tx3.vout[0]\n             tx3 = tx\n             tx3.vout = [tx3_out]\n             tx3.rehash()\n-            assert_equal(self.nodes[0].testmempoolaccept([bytes_to_hex_str(tx3.serialize_with_witness())]), [{'txid': tx3.hash, 'allowed': True}])\n+            assert_equal(self.nodes[0].testmempoolaccept([tx3.serialize_with_witness().hex()]), [{'txid': tx3.hash, 'allowed': True}])\n         test_transaction_acceptance(self.nodes[0], self.test_node, tx3, with_witness=True, accepted=True)\n \n         self.nodes[0].generate(1)\n@@ -885,13 +883,13 @@ def test_block_malleability(self):\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n-        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        self.nodes[0].submitblock(block.serialize(True).hex())\n \n         assert(self.nodes[0].getbestblockhash() != block.hash)\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n         assert(get_virtual_size(block) < MAX_BLOCK_BASE_SIZE)\n-        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        self.nodes[0].submitblock(block.serialize(True).hex())\n \n         assert(self.nodes[0].getbestblockhash() == block.hash)\n \n@@ -998,14 +996,14 @@ def test_submit_block(self):\n         add_witness_commitment(block, nonce=1)\n         block.vtx[0].wit = CTxWitness()  # drop the nonce\n         block.solve()\n-        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        self.nodes[0].submitblock(block.serialize(True).hex())\n         assert(self.nodes[0].getbestblockhash() != block.hash)\n \n         # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n         add_witness_commitment(block, nonce=0)\n         block.vtx[0].wit = CTxWitness()\n         block.solve()\n-        self.nodes[0].submitblock(bytes_to_hex_str(block.serialize(True)))\n+        self.nodes[0].submitblock(block.serialize(True).hex())\n         assert_equal(self.nodes[0].getbestblockhash(), block.hash)\n \n         # This time, add a tx with non-empty witness, but don't supply\n@@ -1020,7 +1018,7 @@ def test_submit_block(self):\n         block_2.vtx[0].vout.pop()\n         block_2.vtx[0].wit = CTxWitness()\n \n-        self.nodes[0].submitblock(bytes_to_hex_str(block_2.serialize(True)))\n+        self.nodes[0].submitblock(block_2.serialize(True).hex())\n         # Tip should not advance!\n         assert(self.nodes[0].getbestblockhash() != block_2.hash)\n \n@@ -1347,7 +1345,7 @@ def test_tx_relay_after_segwit_activation(self):\n         assert_equal(raw_tx[\"vsize\"], vsize)\n         assert_equal(raw_tx[\"weight\"], weight)\n         assert_equal(len(raw_tx[\"vin\"][0][\"txinwitness\"]), 1)\n-        assert_equal(raw_tx[\"vin\"][0][\"txinwitness\"][0], hexlify(witness_program).decode('ascii'))\n+        assert_equal(raw_tx[\"vin\"][0][\"txinwitness\"][0], witness_program.hex())\n         assert(vsize != raw_tx[\"size\"])\n \n         # Cleanup: mine the transactions and update utxo for next test"
      },
      {
        "sha": "fbd273ab008ea0641be6a3cff29ba96b8657a9c1",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -6,7 +6,7 @@\n \n from test_framework.messages import CTransaction, sha256\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, bytes_to_hex_str, hex_str_to_bytes\n+from test_framework.util import assert_equal, hex_str_to_bytes\n \n from io import BytesIO\n \n@@ -81,7 +81,7 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript(multisig_script)\n         assert_equal('2 ' + public_key + ' ' + public_key + ' ' + public_key +  ' 3 OP_CHECKMULTISIG', rpc_result['asm'])\n         # multisig in P2WSH\n-        multisig_script_hash = bytes_to_hex_str(sha256(hex_str_to_bytes(multisig_script)))\n+        multisig_script_hash = sha256(hex_str_to_bytes(multisig_script)).hex()\n         assert_equal('0 ' + multisig_script_hash, rpc_result['segwit']['asm'])\n \n         # 4) P2SH scriptPubKey\n@@ -119,7 +119,7 @@ def decodescript_script_pub_key(self):\n         rpc_result = self.nodes[0].decodescript(cltv_script)\n         assert_equal('OP_IF ' + public_key + ' OP_CHECKSIGVERIFY OP_ELSE 500000 OP_CHECKLOCKTIMEVERIFY OP_DROP OP_ENDIF ' + public_key + ' OP_CHECKSIG', rpc_result['asm'])\n         # CLTV script in P2WSH\n-        cltv_script_hash = bytes_to_hex_str(sha256(hex_str_to_bytes(cltv_script)))\n+        cltv_script_hash = sha256(hex_str_to_bytes(cltv_script)).hex()\n         assert_equal('0 ' + cltv_script_hash, rpc_result['segwit']['asm'])\n \n         # 7) P2PK scriptPubKey\n@@ -196,7 +196,7 @@ def decoderawtransaction_asm_sighashtype(self):\n         # some more full transaction tests of varying specific scriptSigs. used instead of\n         # tests in decodescript_script_sig because the decodescript RPC is specifically\n         # for working on scriptPubKeys (argh!).\n-        push_signature = bytes_to_hex_str(txSave.vin[0].scriptSig)[2:(0x48*2+4)]\n+        push_signature = txSave.vin[0].scriptSig.hex()[2:(0x48*2+4)]\n         signature = push_signature[2:]\n         der_signature = signature[:-2]\n         signature_sighash_decoded = der_signature + '[ALL]'\n@@ -206,23 +206,23 @@ def decoderawtransaction_asm_sighashtype(self):\n \n         # 1) P2PK scriptSig\n         txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature)\n-        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n+        rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # make sure that the sighash decodes come out correctly for a more complex / lesser used case.\n         txSave.vin[0].scriptSig = hex_str_to_bytes(push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n+        rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal(signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 2) multisig scriptSig\n         txSave.vin[0].scriptSig = hex_str_to_bytes('00' + push_signature + push_signature_2)\n-        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n+        rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('0 ' + signature_sighash_decoded + ' ' + signature_2_sighash_decoded, rpc_result['vin'][0]['scriptSig']['asm'])\n \n         # 3) test a scriptSig that contains more than push operations.\n         # in fact, it contains an OP_RETURN with data specially crafted to cause improper decode if the code does not catch it.\n         txSave.vin[0].scriptSig = hex_str_to_bytes('6a143011020701010101010101020601010101010101')\n-        rpc_result = self.nodes[0].decoderawtransaction(bytes_to_hex_str(txSave.serialize()))\n+        rpc_result = self.nodes[0].decoderawtransaction(txSave.serialize().hex())\n         assert_equal('OP_RETURN 3011020701010101010101020601010101010101', rpc_result['vin'][0]['scriptSig']['asm'])\n \n     def run_test(self):"
      },
      {
        "sha": "5f9bdb47039504abb385080ea616fd42b9031479",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -17,7 +17,7 @@\n from io import BytesIO\n from test_framework.messages import CTransaction, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes_bi, hex_str_to_bytes\n+from test_framework.util import assert_equal, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes\n \n class multidict(dict):\n     \"\"\"Dictionary that allows duplicate keys.\n@@ -119,21 +119,21 @@ def run_test(self):\n         tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs={address: 99}))))\n         assert_equal(len(tx.vout), 1)\n         assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n+            tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}]),\n         )\n         # Two outputs\n         tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=OrderedDict([(address, 99), (address2, 99)])))))\n         assert_equal(len(tx.vout), 2)\n         assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n+            tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}]),\n         )\n         # Multiple mixed outputs\n         tx.deserialize(BytesIO(hex_str_to_bytes(self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=multidict([(address, 99), (address2, 99), ('data', '99')])))))\n         assert_equal(len(tx.vout), 3)\n         assert_equal(\n-            bytes_to_hex_str(tx.serialize()),\n+            tx.serialize().hex(),\n             self.nodes[2].createrawtransaction(inputs=[{'txid': txid, 'vout': 9}], outputs=[{address: 99}, {address2: 99}, {'data': '99'}]),\n         )\n "
      },
      {
        "sha": "e603b5cb4f0feee8875e41e42602d02871795185",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_raises_rpc_error, bytes_to_hex_str, hex_str_to_bytes\n+from test_framework.util import assert_equal, assert_raises_rpc_error, hex_str_to_bytes\n from test_framework.messages import sha256\n from test_framework.script import CScript, OP_0\n \n@@ -161,7 +161,7 @@ def witness_script_test(self):\n         unspent_output = self.nodes[1].listunspent(0, 999999, [p2sh_p2wsh_address[\"address\"]])[0]\n         assert_equal(unspent_output[\"witnessScript\"], p2sh_p2wsh_address[\"redeemScript\"])\n         p2sh_redeemScript = CScript([OP_0, sha256(hex_str_to_bytes(p2sh_p2wsh_address[\"redeemScript\"]))])\n-        assert_equal(unspent_output[\"redeemScript\"], bytes_to_hex_str(p2sh_redeemScript))\n+        assert_equal(unspent_output[\"redeemScript\"], p2sh_redeemScript.hex())\n         # Now create and sign a transaction spending that output on node[0], which doesn't know the scripts or keys\n         spending_tx = self.nodes[0].createrawtransaction([unspent_output], {self.nodes[1].getnewaddress(): Decimal(\"49.998\")})\n         spending_tx_signed = self.nodes[0].signrawtransactionwithkey(spending_tx, [embedded_privkey], [unspent_output])"
      },
      {
        "sha": "0ebc5efb7e99258466d3f3092f5baed256aac485",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\"\n \n from .script import hash256, hash160, sha256, CScript, OP_0\n-from .util import bytes_to_hex_str, hex_str_to_bytes\n+from .util import hex_str_to_bytes\n \n from . import segwit_addr\n \n@@ -16,9 +16,9 @@\n \n def byte_to_base58(b, version):\n     result = ''\n-    str = bytes_to_hex_str(b)\n-    str = bytes_to_hex_str(chr(version).encode('latin-1')) + str\n-    checksum = bytes_to_hex_str(hash256(hex_str_to_bytes(str)))\n+    str = b.hex()\n+    str = chr(version).encode('latin-1').hex() + str\n+    checksum = hash256(hex_str_to_bytes(str)).hex()\n     str += checksum[:8]\n     value = int('0x'+str,0)\n     while value > 0:"
      },
      {
        "sha": "9d7b4b2702d70444180a2351d02a34d7233a7166",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -20,7 +20,6 @@\n     CTxOut,\n     FromHex,\n     ToHex,\n-    bytes_to_hex_str,\n     hash256,\n     hex_str_to_bytes,\n     ser_string,\n@@ -190,7 +189,7 @@ def witness_script(use_p2wsh, pubkey):\n         witness_program = CScript([OP_1, hex_str_to_bytes(pubkey), OP_1, OP_CHECKMULTISIG])\n         scripthash = sha256(witness_program)\n         pkscript = CScript([OP_0, scripthash])\n-    return bytes_to_hex_str(pkscript)\n+    return pkscript.hex()\n \n def create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount):\n     \"\"\"Return a transaction (in hex) that spends the given utxo to a segwit output."
      },
      {
        "sha": "3413a94f7e9aa8a6d0b90e1d2219dbafdce57f47",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -28,7 +28,7 @@\n import time\n \n from test_framework.siphash import siphash256\n-from test_framework.util import hex_str_to_bytes, bytes_to_hex_str, assert_equal\n+from test_framework.util import hex_str_to_bytes, assert_equal\n \n MIN_VERSION_SUPPORTED = 60001\n MY_VERSION = 70014  # past bip-31 for ping/pong\n@@ -181,7 +181,7 @@ def FromHex(obj, hex_string):\n \n # Convert a binary-serializable object to hex (eg for submission via RPC)\n def ToHex(obj):\n-    return bytes_to_hex_str(obj.serialize())\n+    return obj.serialize().hex()\n \n # Objects that map to bitcoind objects, which can be serialized/deserialized\n \n@@ -319,7 +319,7 @@ def serialize(self):\n \n     def __repr__(self):\n         return \"CTxIn(prevout=%s scriptSig=%s nSequence=%i)\" \\\n-            % (repr(self.prevout), bytes_to_hex_str(self.scriptSig),\n+            % (repr(self.prevout), self.scriptSig.hex(),\n                self.nSequence)\n \n \n@@ -343,7 +343,7 @@ def serialize(self):\n     def __repr__(self):\n         return \"CTxOut(nValue=%i.%08i scriptPubKey=%s)\" \\\n             % (self.nValue // COIN, self.nValue % COIN,\n-               bytes_to_hex_str(self.scriptPubKey))\n+               self.scriptPubKey.hex())\n \n \n class CScriptWitness:\n@@ -355,7 +355,7 @@ def __init__(self):\n \n     def __repr__(self):\n         return \"CScriptWitness(%s)\" % \\\n-               (\",\".join([bytes_to_hex_str(x) for x in self.stack]))\n+               (\",\".join([x.hex() for x in self.stack]))\n \n     def is_null(self):\n         if self.stack:"
      },
      {
        "sha": "1a3efcd1ac23b96d095568d86170c2155f5b7ae6",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -12,7 +12,7 @@\n import struct\n import array\n import os\n-from binascii import unhexlify, hexlify\n+from binascii import unhexlify\n \n # STATE_ESTABLISHED = '01'\n # STATE_SYN_SENT  = '02'\n@@ -139,7 +139,7 @@ def addr_to_hex(addr):\n         addr = sub[0] + ([0] * nullbytes) + sub[1]\n     else:\n         raise ValueError('Could not parse address %s' % addr)\n-    return hexlify(bytearray(addr)).decode('ascii')\n+    return bytearray(addr).hex()\n \n def test_ipv6_local():\n     '''"
      },
      {
        "sha": "f7df7d23f53fb6e54acbe8bf98cc4a7ea18346ce",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -9,7 +9,6 @@\n \n from .messages import CTransaction, CTxOut, sha256, hash256, uint256_from_str, ser_uint256, ser_string\n \n-from binascii import hexlify\n import hashlib\n import struct\n \n@@ -452,7 +451,7 @@ def join(self, iterable):\n \n     # Python 3.4 compatibility\n     def hex(self):\n-        return hexlify(self).decode('ascii')\n+        return self.hex()\n \n     def __new__(cls, value=b''):\n         if isinstance(value, bytes) or isinstance(value, bytearray):\n@@ -545,7 +544,7 @@ def __iter__(self):\n     def __repr__(self):\n         def _repr(o):\n             if isinstance(o, bytes):\n-                return \"x('%s')\" % hexlify(o).decode('ascii')\n+                return \"x('%s')\" % o.hex()\n             else:\n                 return repr(o)\n "
      },
      {
        "sha": "fb2ee8e90cccecdcf5c3f42c370b0bc48ccef195",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -5,7 +5,7 @@\n \"\"\"Helpful routines for regression testing.\"\"\"\n \n from base64 import b64encode\n-from binascii import hexlify, unhexlify\n+from binascii import unhexlify\n from decimal import Decimal, ROUND_DOWN\n import hashlib\n import inspect\n@@ -182,8 +182,8 @@ def check_json_precision():\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n-def bytes_to_hex_str(byte_str):\n-    return hexlify(byte_str).decode('ascii')\n+def b_2_x(byte_str):\n+    return byte_str.hex()\n \n def hash256(byte_str):\n     sha256 = hashlib.sha256()"
      },
      {
        "sha": "67af4950238c77fb226daf859bb8dddc365c857a",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -19,7 +19,7 @@\n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, bytes_to_hex_str, connect_nodes_bi, hex_str_to_bytes, sync_mempools\n+from test_framework.util import assert_equal, assert_greater_than, assert_raises_rpc_error, connect_nodes_bi, hex_str_to_bytes, sync_mempools\n \n WALLET_PASSPHRASE = \"test\"\n WALLET_PASSPHRASE_TIMEOUT = 3600\n@@ -298,7 +298,7 @@ def submit_block_with_tx(node, tx):\n     block.hashMerkleRoot = block.calc_merkle_root()\n     add_witness_commitment(block)\n     block.solve()\n-    node.submitblock(bytes_to_hex_str(block.serialize(True)))\n+    node.submitblock(block.serialize(True).hex())\n     return block\n \n "
      },
      {
        "sha": "e6c01e99e9c6f1d45f7e986826d77a1d9d09be19",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -25,7 +25,6 @@\n     assert_equal,\n     assert_greater_than,\n     assert_raises_rpc_error,\n-    bytes_to_hex_str,\n )\n from test_framework.wallet_util import (\n     get_key,\n@@ -127,7 +126,7 @@ def run_test(self):\n \n         # Nonstandard scriptPubKey + !internal\n         self.log.info(\"Should not import a nonstandard scriptPubKey without internal flag\")\n-        nonstandardScriptPubKey = key.p2pkh_script + bytes_to_hex_str(CScript([OP_NOP]))\n+        nonstandardScriptPubKey = key.p2pkh_script + CScript([OP_NOP]).hex()\n         key = get_key(self.nodes[0])\n         self.test_importmulti({\"scriptPubKey\": nonstandardScriptPubKey,\n                                \"timestamp\": \"now\"},"
      },
      {
        "sha": "ce76d06d2b153caea0a0c25f68989a9f7d3a14fd",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -11,7 +11,6 @@\n from test_framework.util import (\n     assert_array_result,\n     assert_equal,\n-    bytes_to_hex_str,\n     hex_str_to_bytes,\n     sync_mempools,\n )\n@@ -158,7 +157,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3 = self.nodes[0].createrawtransaction(inputs, outputs)\n         tx3_modified = tx_from_hex(tx3)\n         tx3_modified.vin[0].nSequence = 0\n-        tx3 = bytes_to_hex_str(tx3_modified.serialize())\n+        tx3 = tx3_modified.serialize().hex()\n         tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n@@ -184,7 +183,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         # Replace tx3, and check that tx4 becomes unknown\n         tx3_b = tx3_modified\n         tx3_b.vout[0].nValue -= int(Decimal(\"0.004\") * COIN)  # bump the fee\n-        tx3_b = bytes_to_hex_str(tx3_b.serialize())\n+        tx3_b = tx3_b.serialize().hex()\n         tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n         assert(is_opt_in(self.nodes[0], txid_3b))"
      },
      {
        "sha": "2f927502ff7859dcd1514961c64b9d7e5c12ac06",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -8,7 +8,6 @@\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n-    bytes_to_hex_str as b2x,\n     connect_nodes,\n     disconnect_nodes,\n     sync_blocks,\n@@ -82,7 +81,7 @@ def run_test(self):\n \n         # Use a different signature hash type to sign.  This creates an equivalent but malleated clone.\n         # Don't send the clone anywhere yet\n-        tx1_clone = self.nodes[0].signrawtransactionwithwallet(b2x(clone_tx.serialize()), None, \"ALL|ANYONECANPAY\")\n+        tx1_clone = self.nodes[0].signrawtransactionwithwallet(clone_tx.serialize().hex(), None, \"ALL|ANYONECANPAY\")\n         assert_equal(tx1_clone[\"complete\"], True)\n \n         # Have node0 mine a block, if requested:"
      },
      {
        "sha": "2ec7574718139e0aaeca9c8f48e1caa0190958c4",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n+    --ignore-names \"b_2_x,argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n     $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  },
  {
    "sha": "fab5a1e0f492f920270c661954802749dfac5fa1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWI1YTFlMGY0OTJmOTIwMjcwYzY2MTk1NDgwMjc0OWRmYWM1ZmEx",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-20T23:13:43Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T15:40:23Z"
      },
      "message": "build: Require python 3.5",
      "tree": {
        "sha": "41178ec05f2952b36a42cac3525a8bd7e541c061",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/41178ec05f2952b36a42cac3525a8bd7e541c061"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fab5a1e0f492f920270c661954802749dfac5fa1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJceqPnAAoJEM4rdWl+aaVIQMgL/Ao4B1wUaDe7Tym7CWsx7jer\nw+pHUJ7mQO3i/UVYVLfJNvMVMi0v4yrRy/ADmpPICgvi7vJH74sVir5Rt+jHPINe\nFHbKH0dkJ3x7N4SADwDqMvblzMbKWXwsbQfexWImbEYht86mQHF4tD+iexolwqc3\nb4QdIHBQOeE+1AFrvGb8TJn9+lTQHndngR10EeCojmdwOpcf8L5AKOhi1TTWo/Ze\n2Xvw46mIvcKTHqvDvZqs5L5QwzHZZAx5aIie23AEokW5Xl+dZKcFjofPtsJ1xrxT\nThtD4Thcf6VISZWCNBXG30gSUA/rUO+y571vIKxe8POCo27khXsAM0KTiZbEAV4Z\nC+L+cYYK+IrMLf0bqYApegu8HXGGoePnUxwVT415+7nTAd8MthRd6M24IAAqLNN4\nSnzLZHI4tHbfJsbptvvhDy4ABIXgviyiFiMEN7RM4G+yOvSrbG6Q14UqtT+H/4Ir\ntCmV2k85rcsjwv3ld5oSnpUyTa6U/EYKlRPBrUJp5g==\n=/7jN\n-----END PGP SIGNATURE-----",
        "payload": "tree 41178ec05f2952b36a42cac3525a8bd7e541c061\nparent fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5\nauthor MarcoFalke <falke.marco@gmail.com> 1550704423 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551541223 -0500\n\nbuild: Require python 3.5\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5a1e0f492f920270c661954802749dfac5fa1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fab5a1e0f492f920270c661954802749dfac5fa1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5a1e0f492f920270c661954802749dfac5fa1/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5"
      }
    ],
    "stats": {
      "total": 140,
      "additions": 18,
      "deletions": 122
    },
    "files": [
      {
        "sha": "5a958026daa3208cb329c403433beb56abd5c036",
        "filename": ".python-version",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -1 +1 @@\n-3.4.9\n+3.5"
      },
      {
        "sha": "fea6b6d7bf4341e20071360c4d5f7325eb42dd59",
        "filename": ".travis.yml",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/.travis.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/.travis.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.travis.yml?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -46,7 +46,7 @@ jobs:\n       env:\n       cache: false\n       language: python\n-      python: '3.4' # Oldest supported version according to doc/dependencies.md\n+      python: '3.5' # Oldest supported version according to doc/dependencies.md\n       install:\n         - set -o errexit; source .travis/lint_04_install.sh\n       before_script:\n@@ -158,7 +158,7 @@ jobs:\n       name: 'macOS 10.10  [GOAL: deploy] [no functional tests]'\n       env: >-\n         HOST=x86_64-apple-darwin14\n-        PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python-dev python3-setuptools-git\"\n+        PACKAGES=\"cmake imagemagick libcap-dev librsvg2-bin libz-dev libbz2-dev libtiff-tools python3-dev python3-setuptools-git\"\n         OSX_SDK=10.11\n         RUN_UNIT_TESTS=false\n         RUN_FUNCTIONAL_TESTS=false"
      },
      {
        "sha": "a3ba8ce8085485f19f82a233b6f91aac056cd07a",
        "filename": "configure.ac",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/configure.ac",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/configure.ac",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/configure.ac?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -85,8 +85,8 @@ AC_PATH_TOOL(RANLIB, ranlib)\n AC_PATH_TOOL(STRIP, strip)\n AC_PATH_TOOL(GCOV, gcov)\n AC_PATH_PROG(LCOV, lcov)\n-dnl Python 3.4 is specified in .python-version and should be used if available, see doc/dependencies.md\n-AC_PATH_PROGS([PYTHON], [python3.4 python3.5 python3.6 python3.7 python3 python])\n+dnl Python 3.5 is specified in .python-version and should be used if available, see doc/dependencies.md\n+AC_PATH_PROGS([PYTHON], [python3.5 python3.6 python3.7 python3.8 python3 python])\n AC_PATH_PROG(GENHTML, genhtml)\n AC_PATH_PROG([GIT], [git])\n AC_PATH_PROG(CCACHE,ccache)"
      },
      {
        "sha": "d66eff66bec4a6f04016161dcbaddc9d58149325",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -167,7 +167,7 @@ still compatible with the minimum supported Linux distribution versions.\n \n Example usage after a gitian build:\n \n-    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py \n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n \n If only supported symbols are used the return value will be 0 and the output will be empty.\n "
      },
      {
        "sha": "7729dd7257dda0dd7d1e56f05c6acb2843a6bf87",
        "filename": "contrib/devtools/symbol-check.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/devtools/symbol-check.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/devtools/symbol-check.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/symbol-check.py?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -9,7 +9,7 @@\n \n Example usage:\n \n-    find ../gitian-builder/build -type f -executable | xargs python contrib/devtools/symbol-check.py\n+    find ../gitian-builder/build -type f -executable | xargs python3 contrib/devtools/symbol-check.py\n '''\n import subprocess\n import re"
      },
      {
        "sha": "1fc1ce98a980e5895965019c843cdc172791a5f8",
        "filename": "contrib/gitian-descriptors/gitian-linux.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-linux.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-linux.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-linux.yml?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -30,7 +30,7 @@ packages:\n - \"faketime\"\n - \"bsdmainutils\"\n - \"ca-certificates\"\n-- \"python\"\n+- \"python3\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\"\n   \"dir\": \"bitcoin\""
      },
      {
        "sha": "1d9c31f9e7e62a5c743f6213a8044bb325367be8",
        "filename": "contrib/gitian-descriptors/gitian-osx.yml",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-osx.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-osx.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-osx.yml?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -23,9 +23,9 @@ packages:\n - \"libcap-dev\"\n - \"libz-dev\"\n - \"libbz2-dev\"\n-- \"python\"\n-- \"python-dev\"\n-- \"python-setuptools\"\n+- \"python3\"\n+- \"python3-dev\"\n+- \"python3-setuptools\"\n - \"fonts-tuffy\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\""
      },
      {
        "sha": "2f1fb14c10c278b691b8d021c7245fc9fe3345ed",
        "filename": "contrib/gitian-descriptors/gitian-win.yml",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-win.yml",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/gitian-descriptors/gitian-win.yml",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/gitian-descriptors/gitian-win.yml?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -20,7 +20,7 @@ packages:\n - \"nsis\"\n - \"zip\"\n - \"ca-certificates\"\n-- \"python\"\n+- \"python3\"\n - \"rename\"\n remotes:\n - \"url\": \"https://github.com/bitcoin/bitcoin.git\""
      },
      {
        "sha": "25a1c7351a297c751d630acd3f97fff6091710c8",
        "filename": "contrib/linearize/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/linearize/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/contrib/linearize/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/linearize/README.md?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -1,6 +1,5 @@\n # Linearize\n-Construct a linear, no-fork, best version of the Bitcoin blockchain. The scripts\n-run using Python 3 but are compatible with Python 2.\n+Construct a linear, no-fork, best version of the Bitcoin blockchain.\n \n ## Step 1: Download hash list\n "
      },
      {
        "sha": "66fdf7887fe97d829270513e83ac2de67f08c0a1",
        "filename": "contrib/zmq/zmq_sub3.4.py",
        "status": "removed",
        "additions": 0,
        "deletions": 90,
        "changes": 90,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/contrib/zmq/zmq_sub3.4.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5/contrib/zmq/zmq_sub3.4.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/zmq/zmq_sub3.4.py?ref=fa6bf21f5ef8b27e8525cabba9738f8e1f246bf5",
        "patch": "@@ -1,90 +0,0 @@\n-#!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-\"\"\"\n-    ZMQ example using python3's asyncio\n-\n-    Bitcoin should be started with the command line arguments:\n-        bitcoind -testnet -daemon \\\n-                -zmqpubrawtx=tcp://127.0.0.1:28332 \\\n-                -zmqpubrawblock=tcp://127.0.0.1:28332 \\\n-                -zmqpubhashtx=tcp://127.0.0.1:28332 \\\n-                -zmqpubhashblock=tcp://127.0.0.1:28332\n-\n-    We use the asyncio library here.  `self.handle()` installs itself as a\n-    future at the end of the function.  Since it never returns with the event\n-    loop having an empty stack of futures, this creates an infinite loop.  An\n-    alternative is to wrap the contents of `handle` inside `while True`.\n-\n-    The `@asyncio.coroutine` decorator and the `yield from` syntax found here\n-    was introduced in python 3.4 and has been deprecated in favor of the `async`\n-    and `await` keywords respectively.\n-\n-    A blocking example using python 2.7 can be obtained from the git history:\n-    https://github.com/bitcoin/bitcoin/blob/37a7fe9e440b83e2364d5498931253937abe9294/contrib/zmq/zmq_sub.py\n-\"\"\"\n-\n-import binascii\n-import asyncio\n-import zmq\n-import zmq.asyncio\n-import signal\n-import struct\n-import sys\n-\n-if (sys.version_info.major, sys.version_info.minor) < (3, 4):\n-    print(\"This example only works with Python 3.4 and greater\")\n-    sys.exit(1)\n-\n-port = 28332\n-\n-class ZMQHandler():\n-    def __init__(self):\n-        self.loop = asyncio.get_event_loop()\n-        self.zmqContext = zmq.asyncio.Context()\n-\n-        self.zmqSubSocket = self.zmqContext.socket(zmq.SUB)\n-        self.zmqSubSocket.setsockopt(zmq.RCVHWM, 0)\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashblock\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"hashtx\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawblock\")\n-        self.zmqSubSocket.setsockopt_string(zmq.SUBSCRIBE, \"rawtx\")\n-        self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % port)\n-\n-    @asyncio.coroutine\n-    def handle(self) :\n-        msg = yield from self.zmqSubSocket.recv_multipart()\n-        topic = msg[0]\n-        body = msg[1]\n-        sequence = \"Unknown\"\n-        if len(msg[-1]) == 4:\n-          msgSequence = struct.unpack('<I', msg[-1])[-1]\n-          sequence = str(msgSequence)\n-        if topic == b\"hashblock\":\n-            print('- HASH BLOCK ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"hashtx\":\n-            print('- HASH TX  ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        elif topic == b\"rawblock\":\n-            print('- RAW BLOCK HEADER ('+sequence+') -')\n-            print(binascii.hexlify(body[:80]))\n-        elif topic == b\"rawtx\":\n-            print('- RAW TX ('+sequence+') -')\n-            print(binascii.hexlify(body))\n-        # schedule ourselves to receive the next message\n-        asyncio.ensure_future(self.handle())\n-\n-    def start(self):\n-        self.loop.add_signal_handler(signal.SIGINT, self.stop)\n-        self.loop.create_task(self.handle())\n-        self.loop.run_forever()\n-\n-    def stop(self):\n-        self.loop.stop()\n-        self.zmqContext.destroy()\n-\n-daemon = ZMQHandler()\n-daemon.start()"
      },
      {
        "sha": "b69584193a6d5745d11f8a5f8d8b0564f90e62ee",
        "filename": "depends/README.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/depends/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/depends/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/depends/README.md?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -34,7 +34,7 @@ No other options are needed, the paths are automatically configured.\n \n #### For macOS cross compilation\n \n-    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python-setuptools\n+    sudo apt-get install curl librsvg2-bin libtiff-tools bsdmainutils cmake imagemagick libcap-dev libz-dev libbz2-dev python3-setuptools\n \n #### For Win32/Win64 cross compilation\n "
      },
      {
        "sha": "0fb36184c240f5477fbb62bbdbfcdcbef1ddef39",
        "filename": "doc/dependencies.md",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/doc/dependencies.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/doc/dependencies.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/dependencies.md?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -22,7 +22,7 @@ These are the dependencies currently used by Bitcoin Core. You can find instruct\n | OpenSSL | [1.0.1k](https://www.openssl.org/source) |  | Yes |  |  |\n | PCRE |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L66) |\n | protobuf | [2.6.1](https://github.com/google/protobuf/releases) |  | No |  |  |\n-| Python (tests) |  | [3.4](https://www.python.org/downloads) |  |  |  |\n+| Python (tests) |  | [3.5](https://www.python.org/downloads) |  |  |  |\n | qrencode | [3.4.4](https://fukuchi.org/works/qrencode) |  | No |  |  |\n | Qt | [5.9.7](https://download.qt.io/official_releases/qt/) | [5.5.1](https://github.com/bitcoin/bitcoin/issues/13478) | No |  |  |\n | XCB |  |  |  |  | [Yes](https://github.com/bitcoin/bitcoin/blob/master/depends/packages/qt.mk#L87) (Linux only) |"
      },
      {
        "sha": "ee070981ed473106939fe4df50f3d8f17f7d9dc8",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -218,10 +218,7 @@ def send_raw_message(self, raw_message_bytes):\n         def maybe_write():\n             if not self._transport:\n                 return\n-            # Python <3.4.4 does not have is_closing, so we have to check for\n-            # its existence explicitly as long as Bitcoin Core supports all\n-            # Python 3.4 versions.\n-            if hasattr(self._transport, 'is_closing') and self._transport.is_closing():\n+            if self._transport.is_closing():\n                 return\n             self._transport.write(raw_message_bytes)\n         NetworkThread.network_event_loop.call_soon_threadsafe(maybe_write)"
      },
      {
        "sha": "0661367a451d2cf94184c7a4e6ca21f647a389bd",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -449,10 +449,6 @@ def join(self, iterable):\n         # join makes no sense for a CScript()\n         raise NotImplementedError\n \n-    # Python 3.4 compatibility\n-    def hex(self):\n-        return self.hex()\n-\n     def __new__(cls, value=b''):\n         if isinstance(value, bytes) or isinstance(value, bytearray):\n             return super(CScript, cls).__new__(cls, value)"
      },
      {
        "sha": "9d8560c4d84ab93cb306bef300a5c616d52853cb",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -31,9 +31,6 @@\n     p2p_port,\n )\n \n-# For Python 3.4 compatibility\n-JSONDecodeError = getattr(json, \"JSONDecodeError\", ValueError)\n-\n BITCOIND_PROC_WAIT_TIMEOUT = 60\n \n \n@@ -565,5 +562,5 @@ def send_cli(self, command=None, *args, **kwargs):\n             raise subprocess.CalledProcessError(returncode, self.binary, output=cli_stderr)\n         try:\n             return json.loads(cli_stdout, parse_float=decimal.Decimal)\n-        except JSONDecodeError:\n+        except json.JSONDecodeError:\n             return cli_stdout.rstrip(\"\\n\")"
      },
      {
        "sha": "f7f1b277e4a9d136380104c8d2587fe1e27b5e0b",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -182,9 +182,6 @@ def check_json_precision():\n def count_bytes(hex_string):\n     return len(bytearray.fromhex(hex_string))\n \n-def b_2_x(byte_str):\n-    return byte_str.hex()\n-\n def hash256(byte_str):\n     sha256 = hashlib.sha256()\n     sha256.update(byte_str)"
      },
      {
        "sha": "863caa9d5c48f20177d962c58e08877256a46c17",
        "filename": "test/lint/lint-python-dead-code.sh",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fab5a1e0f492f920270c661954802749dfac5fa1/test/lint/lint-python-dead-code.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fab5a1e0f492f920270c661954802749dfac5fa1/test/lint/lint-python-dead-code.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-python-dead-code.sh?ref=fab5a1e0f492f920270c661954802749dfac5fa1",
        "patch": "@@ -15,5 +15,5 @@ fi\n \n vulture \\\n     --min-confidence 60 \\\n-    --ignore-names \"b_2_x,argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n+    --ignore-names \"argtypes,connection_lost,connection_made,converter,data_received,daemon,errcheck,get_ecdh_key,get_privkey,is_compressed,is_fullyvalid,msg_generic,on_*,optionxform,restype,set_privkey,profile_with_perf\" \\\n     $(git ls-files -- \"*.py\" \":(exclude)contrib/\" \":(exclude)test/functional/data/invalid_txs.py\")"
      }
    ]
  },
  {
    "sha": "fa0e65b77264476c61832542ab1a9dbedcc738ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTBlNjViNzcyNjQ0NzZjNjE4MzI1NDJhYjFhOWRiZWRjYzczOGVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-19T22:43:44Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T15:51:35Z"
      },
      "message": "scripted-diff: test: Remove brackets after assert\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/assert ?\\((.+)\\)(( )*)?(#.*)?$/assert \\1\\3\\3\\4/g' $(git grep -l --extended-regexp 'assert ?\\(' test)\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "68267ce32f8700ec01234eca1faa21cb1a5ccd8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/68267ce32f8700ec01234eca1faa21cb1a5ccd8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa0e65b77264476c61832542ab1a9dbedcc738ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJceqaHAAoJEM4rdWl+aaVIpwcMAMjT69SR7BJoHtC1HfWLZOLj\nsvcU6kEh426S7YRr53vW2ABpebObrGFOa3ypY0tHmxwVIWTES+jHEE+y4EUBFYmV\n8a5vayS5gR+yIEAC7OP7bbBV0xujyiXBpbzBGdpS7onHbjI/YBhD7qUMt3DOFBub\n83Gm/lY+L7AqXVy5wwAI6iO55LEJ/SJOAk4PHpm4tx85g2qicbTxHfpJC8ymjTNs\nGpPmoxXw3sqO8AY4EM6HjubX3paGhattG0c+3dVNn2lf5e59VWXuZ7txJBiOpkn4\ny1nhYp1BJdgPDw4Dvug49isrHXccoI2yKlK3iRGiLRgeacvfnKAHkHXyk7nW6NHN\nSQ76d8GiDLo7sCJMCOC+uPIMbEgaXntqXQjM7NrhQkGdHy+n23ZEAyvdMdVOCed0\n8/4U2czDY1AaktNarDm1ZUoiY4hen1OGMOMeIZM35T/8QSHFqtog90tW79g4SDZy\ngMe2hZ+SYwTSKm4LwCC9eSahibV0D1KxrRuK05wjyA==\n=skEK\n-----END PGP SIGNATURE-----",
        "payload": "tree 68267ce32f8700ec01234eca1faa21cb1a5ccd8e\nparent fab5a1e0f492f920270c661954802749dfac5fa1\nauthor MarcoFalke <falke.marco@gmail.com> 1550616224 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551541895 -0500\n\nscripted-diff: test: Remove brackets after assert\n\n-BEGIN VERIFY SCRIPT-\nsed -i --regexp-extended -e 's/assert ?\\((.+)\\)(( )*)?(#.*)?$/assert \\1\\3\\3\\4/g' $(git grep -l --extended-regexp 'assert ?\\(' test)\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0e65b77264476c61832542ab1a9dbedcc738ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0e65b77264476c61832542ab1a9dbedcc738ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0e65b77264476c61832542ab1a9dbedcc738ea/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fab5a1e0f492f920270c661954802749dfac5fa1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fab5a1e0f492f920270c661954802749dfac5fa1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fab5a1e0f492f920270c661954802749dfac5fa1"
      }
    ],
    "stats": {
      "total": 546,
      "additions": 273,
      "deletions": 273
    },
    "files": [
      {
        "sha": "206c8a88ada0c79d0e35ea1c92417a0dc2deb632",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -63,7 +63,7 @@ def test_disable_flag(self):\n         self.nodes[0].sendtoaddress(new_addr, 2) # send 2 BTC\n \n         utxos = self.nodes[0].listunspent(0, 0)\n-        assert(len(utxos) > 0)\n+        assert len(utxos) > 0\n \n         utxo = utxos[0]\n \n@@ -253,7 +253,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             self.nodes[0].generate(1)\n             cur_time += 600\n \n-        assert(tx2.hash in self.nodes[0].getrawmempool())\n+        assert tx2.hash in self.nodes[0].getrawmempool()\n \n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=True)\n         test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n@@ -264,23 +264,23 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # Advance the time on the node so that we can test timelocks\n         self.nodes[0].setmocktime(cur_time+600)\n         self.nodes[0].generate(1)\n-        assert(tx2.hash not in self.nodes[0].getrawmempool())\n+        assert tx2.hash not in self.nodes[0].getrawmempool()\n \n         # Now that tx2 is not in the mempool, a sequence locked spend should\n         # succeed\n         tx3 = test_nonzero_locks(tx2, self.nodes[0], self.relayfee, use_height_lock=False)\n-        assert(tx3.hash in self.nodes[0].getrawmempool())\n+        assert tx3.hash in self.nodes[0].getrawmempool()\n \n         self.nodes[0].generate(1)\n-        assert(tx3.hash not in self.nodes[0].getrawmempool())\n+        assert tx3.hash not in self.nodes[0].getrawmempool()\n \n         # One more test, this time using height locks\n         tx4 = test_nonzero_locks(tx3, self.nodes[0], self.relayfee, use_height_lock=True)\n-        assert(tx4.hash in self.nodes[0].getrawmempool())\n+        assert tx4.hash in self.nodes[0].getrawmempool()\n \n         # Now try combining confirmed and unconfirmed inputs\n         tx5 = test_nonzero_locks(tx4, self.nodes[0], self.relayfee, use_height_lock=True)\n-        assert(tx5.hash not in self.nodes[0].getrawmempool())\n+        assert tx5.hash not in self.nodes[0].getrawmempool()\n \n         utxos = self.nodes[0].listunspent()\n         tx5.vin.append(CTxIn(COutPoint(int(utxos[0][\"txid\"], 16), utxos[0][\"vout\"]), nSequence=1))\n@@ -299,8 +299,8 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n         # If we invalidate the tip, tx3 should get added to the mempool, causing\n         # tx4 to be removed (fails sequence-lock).\n         self.nodes[0].invalidateblock(self.nodes[0].getbestblockhash())\n-        assert(tx4.hash not in self.nodes[0].getrawmempool())\n-        assert(tx3.hash in self.nodes[0].getrawmempool())\n+        assert tx4.hash not in self.nodes[0].getrawmempool()\n+        assert tx3.hash in self.nodes[0].getrawmempool()\n \n         # Now mine 2 empty blocks to reorg out the current tip (labeled tip-1 in\n         # diagram above).\n@@ -319,8 +319,8 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n             cur_time += 1\n \n         mempool = self.nodes[0].getrawmempool()\n-        assert(tx3.hash not in mempool)\n-        assert(tx2.hash in mempool)\n+        assert tx3.hash not in mempool\n+        assert tx2.hash in mempool\n \n         # Reset the chain and get rid of the mocktimed-blocks\n         self.nodes[0].setmocktime(0)\n@@ -332,7 +332,7 @@ def test_nonzero_locks(orig_tx, node, relayfee, use_height_lock):\n     # being run, then it's possible the test has activated the soft fork, and\n     # this test should be moved to run earlier, or deleted.\n     def test_bip68_not_consensus(self):\n-        assert(get_bip9_status(self.nodes[0], 'csv')['status'] != 'active')\n+        assert get_bip9_status(self.nodes[0], 'csv')['status'] != 'active'\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 2)\n \n         tx1 = FromHex(CTransaction(), self.nodes[0].getrawtransaction(txid))"
      },
      {
        "sha": "faf7f2025764114cea377e08a716852819567172",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -773,7 +773,7 @@ def run_test(self):\n         self.move_tip(57)\n         b58 = self.next_block(58, spend=out[17])\n         tx = CTransaction()\n-        assert(len(out[17].vout) < 42)\n+        assert len(out[17].vout) < 42\n         tx.vin.append(CTxIn(COutPoint(out[17].sha256, 42), CScript([OP_TRUE]), 0xffffffff))\n         tx.vout.append(CTxOut(0, b\"\"))\n         tx.calc_sha256()\n@@ -824,7 +824,7 @@ def run_test(self):\n         tx.nLockTime = 0xffffffff  # this locktime is non-final\n         tx.vin.append(CTxIn(COutPoint(out[18].sha256, 0)))  # don't set nSequence\n         tx.vout.append(CTxOut(0, CScript([OP_TRUE])))\n-        assert(tx.vin[0].nSequence < 0xffffffff)\n+        assert tx.vin[0].nSequence < 0xffffffff\n         tx.calc_sha256()\n         b62 = self.update_block(62, [tx])\n         self.sync_blocks([b62], success=False, reject_reason='bad-txns-nonfinal')\n@@ -1143,8 +1143,8 @@ def run_test(self):\n         # now check that tx78 and tx79 have been put back into the peer's mempool\n         mempool = self.nodes[0].getrawmempool()\n         assert_equal(len(mempool), 2)\n-        assert(tx78.hash in mempool)\n-        assert(tx79.hash in mempool)\n+        assert tx78.hash in mempool\n+        assert tx79.hash in mempool\n \n         # Test invalid opcodes in dead execution paths.\n         #"
      },
      {
        "sha": "d98d2aa9928a5e34811267047dd154ab34810283",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -106,7 +106,7 @@ def send_generic_input_tx(node, coinbases, address):\n def create_bip68txs(node, bip68inputs, txversion, address, locktime_delta=0):\n     \"\"\"Returns a list of bip68 transactions with different bits set.\"\"\"\n     txs = []\n-    assert(len(bip68inputs) >= 16)\n+    assert len(bip68inputs) >= 16\n     for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n         locktime = relative_locktime(sdf, srhb, stf, srlb)\n         tx = create_transaction(node, bip68inputs[i], address, amount=Decimal(\"49.98\"))\n@@ -121,7 +121,7 @@ def create_bip68txs(node, bip68inputs, txversion, address, locktime_delta=0):\n def create_bip112txs(node, bip112inputs, varyOP_CSV, txversion, address, locktime_delta=0):\n     \"\"\"Returns a list of bip68 transactions with different bits set.\"\"\"\n     txs = []\n-    assert(len(bip112inputs) >= 16)\n+    assert len(bip112inputs) >= 16\n     for i, (sdf, srhb, stf, srlb) in enumerate(product(*[[True, False]] * 4)):\n         locktime = relative_locktime(sdf, srhb, stf, srlb)\n         tx = create_transaction(node, bip112inputs[i], address, amount=Decimal(\"49.98\"))"
      },
      {
        "sha": "c564c7fe2b7db664d3bf7bd0ef99d6b29af8b3dc",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -27,7 +27,7 @@ def trueDummy(tx):\n     newscript = []\n     for i in scriptSig:\n         if (len(newscript) == 0):\n-            assert(len(i) == 0)\n+            assert len(i) == 0\n             newscript.append(b'\\x51')\n         else:\n             newscript.append(i)"
      },
      {
        "sha": "2ff773bf6e229241d1cf5a8d738141eaa82ad10c",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -95,7 +95,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         # Test: outgoing IPv4 connection through node\n         node.addnode(\"15.61.23.23:1234\", \"onetry\")\n         cmd = proxies[0].queue.get()\n-        assert(isinstance(cmd, Socks5Command))\n+        assert isinstance(cmd, Socks5Command)\n         # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n         assert_equal(cmd.addr, b\"15.61.23.23\")\n@@ -109,7 +109,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             # Test: outgoing IPv6 connection through node\n             node.addnode(\"[1233:3432:2434:2343:3234:2345:6546:4534]:5443\", \"onetry\")\n             cmd = proxies[1].queue.get()\n-            assert(isinstance(cmd, Socks5Command))\n+            assert isinstance(cmd, Socks5Command)\n             # Note: bitcoind's SOCKS5 implementation only sends atyp DOMAINNAME, even if connecting directly to IPv4/IPv6\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n             assert_equal(cmd.addr, b\"1233:3432:2434:2343:3234:2345:6546:4534\")\n@@ -123,7 +123,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n             # Test: outgoing onion connection through node\n             node.addnode(\"bitcoinostk4e4re.onion:8333\", \"onetry\")\n             cmd = proxies[2].queue.get()\n-            assert(isinstance(cmd, Socks5Command))\n+            assert isinstance(cmd, Socks5Command)\n             assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n             assert_equal(cmd.addr, b\"bitcoinostk4e4re.onion\")\n             assert_equal(cmd.port, 8333)\n@@ -135,7 +135,7 @@ def node_test(self, node, proxies, auth, test_onion=True):\n         # Test: outgoing DNS name connection through node\n         node.addnode(\"node.noumenon:8333\", \"onetry\")\n         cmd = proxies[3].queue.get()\n-        assert(isinstance(cmd, Socks5Command))\n+        assert isinstance(cmd, Socks5Command)\n         assert_equal(cmd.atyp, AddressType.DOMAINNAME)\n         assert_equal(cmd.addr, b\"node.noumenon\")\n         assert_equal(cmd.port, 8333)"
      },
      {
        "sha": "fe8e1cde2f8f7ecf642ac6b3ae20983c70c04c97",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -151,7 +151,7 @@ def reorg_test(self):\n             self.nodes[1].invalidateblock(curhash)\n             curhash = self.nodes[1].getblockhash(invalidheight - 1)\n \n-        assert(self.nodes[1].getblockcount() == invalidheight - 1)\n+        assert self.nodes[1].getblockcount() == invalidheight - 1\n         self.log.info(\"New best height: %d\" % self.nodes[1].getblockcount())\n \n         # Reboot node1 to clear those giant tx's from mempool\n@@ -219,17 +219,17 @@ def reorg_back(self):\n             blocks_to_mine = first_reorg_height + 1 - self.mainchainheight\n             self.log.info(\"Rewind node 0 to prev main chain to mine longer chain to trigger redownload. Blocks needed: %d\" % blocks_to_mine)\n             self.nodes[0].invalidateblock(curchainhash)\n-            assert(self.nodes[0].getblockcount() == self.mainchainheight)\n-            assert(self.nodes[0].getbestblockhash() == self.mainchainhash2)\n+            assert self.nodes[0].getblockcount() == self.mainchainheight\n+            assert self.nodes[0].getbestblockhash() == self.mainchainhash2\n             goalbesthash = self.nodes[0].generate(blocks_to_mine)[-1]\n             goalbestheight = first_reorg_height + 1\n \n         self.log.info(\"Verify node 2 reorged back to the main chain, some blocks of which it had to redownload\")\n         # Wait for Node 2 to reorg to proper height\n         wait_until(lambda: self.nodes[2].getblockcount() >= goalbestheight, timeout=900)\n-        assert(self.nodes[2].getbestblockhash() == goalbesthash)\n+        assert self.nodes[2].getbestblockhash() == goalbesthash\n         # Verify we can now have the data for a block previously pruned\n-        assert(self.nodes[2].getblock(self.forkhash)[\"height\"] == self.forkheight)\n+        assert self.nodes[2].getblock(self.forkhash)[\"height\"] == self.forkheight\n \n     def manual_test(self, node_number, use_timestamp):\n         # at this point, node has 995 blocks and has not yet run in prune mode"
      },
      {
        "sha": "1c8fc438d1698da0e7d79c2d05108115828f78e5",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -56,7 +56,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=CScript([1])):\n             new_size = len(node.getrawmempool())\n             # Error out if we have something stuck in the mempool, as this\n             # would likely be a bug.\n-            assert(new_size < mempool_size)\n+            assert new_size < mempool_size\n             mempool_size = new_size\n \n     return COutPoint(int(txid, 16), 0)\n@@ -163,8 +163,8 @@ def test_simple_doublespend(self):\n \n         mempool = self.nodes[0].getrawmempool()\n \n-        assert (tx1a_txid not in mempool)\n-        assert (tx1b_txid in mempool)\n+        assert tx1a_txid not in mempool\n+        assert tx1b_txid in mempool\n \n         assert_equal(tx1b_hex, self.nodes[0].getrawtransaction(tx1b_txid))\n \n@@ -211,7 +211,7 @@ def test_doublespend_chain(self):\n \n         mempool = self.nodes[0].getrawmempool()\n         for doublespent_txid in chain_txids:\n-            assert(doublespent_txid not in mempool)\n+            assert doublespent_txid not in mempool\n \n     def test_doublespend_tree(self):\n         \"\"\"Doublespend of a big tree of transactions\"\"\"\n@@ -236,7 +236,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n             tx.vout = vout\n             tx_hex = txToHex(tx)\n \n-            assert(len(tx.serialize()) < 100000)\n+            assert len(tx.serialize()) < 100000\n             txid = self.nodes[0].sendrawtransaction(tx_hex, True)\n             yield tx\n             _total_txs[0] += 1\n@@ -274,7 +274,7 @@ def branch(prevout, initial_value, max_txs, tree_width=5, fee=0.0001*COIN, _tota\n \n         for tx in tree_txs:\n             tx.rehash()\n-            assert (tx.hash not in mempool)\n+            assert tx.hash not in mempool\n \n         # Try again, but with more total transactions than the \"max txs\n         # double-spent at once\" anti-DoS limit.\n@@ -529,7 +529,7 @@ def test_prioritised_transactions(self):\n         # Now tx1b should be able to replace tx1a\n         tx1b_txid = self.nodes[0].sendrawtransaction(tx1b_hex, True)\n \n-        assert(tx1b_txid in self.nodes[0].getrawmempool())\n+        assert tx1b_txid in self.nodes[0].getrawmempool()\n \n         # 2. Check that absolute fee checks use modified fee.\n         tx1_outpoint = make_utxo(self.nodes[0], int(1.1*COIN))\n@@ -556,7 +556,7 @@ def test_prioritised_transactions(self):\n         # tx2b should now be accepted\n         tx2b_txid = self.nodes[0].sendrawtransaction(tx2b_hex, True)\n \n-        assert(tx2b_txid in self.nodes[0].getrawmempool())\n+        assert tx2b_txid in self.nodes[0].getrawmempool()\n \n     def test_rpc(self):\n         us0 = self.nodes[0].listunspent()[0]"
      },
      {
        "sha": "8157ef69feeaf01f3d3cb659768a2c3854ec7802",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 30,
        "deletions": 30,
        "changes": 60,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -93,17 +93,17 @@ def run_test(self):\n         self.log.info(\"Verify sigops are counted in GBT with pre-BIP141 rules before the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert(tmpl['sizelimit'] == 1000000)\n-        assert('weightlimit' not in tmpl)\n-        assert(tmpl['sigoplimit'] == 20000)\n-        assert(tmpl['transactions'][0]['hash'] == txid)\n-        assert(tmpl['transactions'][0]['sigops'] == 2)\n+        assert tmpl['sizelimit'] == 1000000\n+        assert 'weightlimit' not in tmpl\n+        assert tmpl['sigoplimit'] == 20000\n+        assert tmpl['transactions'][0]['hash'] == txid\n+        assert tmpl['transactions'][0]['sigops'] == 2\n         tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert(tmpl['sizelimit'] == 1000000)\n-        assert('weightlimit' not in tmpl)\n-        assert(tmpl['sigoplimit'] == 20000)\n-        assert(tmpl['transactions'][0]['hash'] == txid)\n-        assert(tmpl['transactions'][0]['sigops'] == 2)\n+        assert tmpl['sizelimit'] == 1000000\n+        assert 'weightlimit' not in tmpl\n+        assert tmpl['sigoplimit'] == 20000\n+        assert tmpl['transactions'][0]['hash'] == txid\n+        assert tmpl['transactions'][0]['sigops'] == 2\n         self.nodes[0].generate(1)  # block 162\n \n         balance_presetup = self.nodes[0].getbalance()\n@@ -172,16 +172,16 @@ def run_test(self):\n         self.fail_accept(self.nodes[0], \"mandatory-script-verify-flag\", p2sh_ids[NODE_0][WIT_V1][0], False, witness_script(True, self.pubkey[0]))\n \n         self.log.info(\"Verify block and transaction serialization rpcs return differing serializations depending on rpc serialization flag\")\n-        assert(self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False))\n-        assert(self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False))\n+        assert self.nodes[2].getblock(blockhash, False) != self.nodes[0].getblock(blockhash, False)\n+        assert self.nodes[1].getblock(blockhash, False) == self.nodes[2].getblock(blockhash, False)\n \n         for tx_id in segwit_tx_list:\n             tx = FromHex(CTransaction(), self.nodes[2].gettransaction(tx_id)[\"hex\"])\n-            assert(self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash))\n-            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash))\n-            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"])\n-            assert(self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"])\n-            assert(self.nodes[0].getrawtransaction(tx_id, False, blockhash) == tx.serialize_without_witness().hex())\n+            assert self.nodes[2].getrawtransaction(tx_id, False, blockhash) != self.nodes[0].getrawtransaction(tx_id, False, blockhash)\n+            assert self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].getrawtransaction(tx_id, False, blockhash)\n+            assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) != self.nodes[2].gettransaction(tx_id)[\"hex\"]\n+            assert self.nodes[1].getrawtransaction(tx_id, False, blockhash) == self.nodes[2].gettransaction(tx_id)[\"hex\"]\n+            assert self.nodes[0].getrawtransaction(tx_id, False, blockhash) == tx.serialize_without_witness().hex()\n \n         self.log.info(\"Verify witness txs without witness data are invalid after the fork\")\n         self.fail_accept(self.nodes[2], 'non-mandatory-script-verify-flag (Witness program hash mismatch) (code 64)', wit_ids[NODE_2][WIT_V0][2], sign=False)\n@@ -198,11 +198,11 @@ def run_test(self):\n         self.log.info(\"Verify sigops are counted in GBT with BIP141 rules after the fork\")\n         txid = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n         tmpl = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert(tmpl['sizelimit'] >= 3999577)  # actual maximum size is lower due to minimum mandatory non-witness data\n-        assert(tmpl['weightlimit'] == 4000000)\n-        assert(tmpl['sigoplimit'] == 80000)\n-        assert(tmpl['transactions'][0]['txid'] == txid)\n-        assert(tmpl['transactions'][0]['sigops'] == 8)\n+        assert tmpl['sizelimit'] >= 3999577  # actual maximum size is lower due to minimum mandatory non-witness data\n+        assert tmpl['weightlimit'] == 4000000\n+        assert tmpl['sigoplimit'] == 80000\n+        assert tmpl['transactions'][0]['txid'] == txid\n+        assert tmpl['transactions'][0]['sigops'] == 8\n \n         self.nodes[0].generate(1)  # Mine a block to clear the gbt cache\n \n@@ -214,8 +214,8 @@ def run_test(self):\n         txid1 = send_to_witness(1, self.nodes[0], find_spendable_utxo(self.nodes[0], 50), self.pubkey[0], False, Decimal(\"49.996\"))\n         hex_tx = self.nodes[0].gettransaction(txid)['hex']\n         tx = FromHex(CTransaction(), hex_tx)\n-        assert(tx.wit.is_null())  # This should not be a segwit input\n-        assert(txid1 in self.nodes[0].getrawmempool())\n+        assert tx.wit.is_null()  # This should not be a segwit input\n+        assert txid1 in self.nodes[0].getrawmempool()\n \n         # Now create tx2, which will spend from txid1.\n         tx = CTransaction()\n@@ -224,23 +224,23 @@ def run_test(self):\n         tx2_hex = self.nodes[0].signrawtransactionwithwallet(ToHex(tx))['hex']\n         txid2 = self.nodes[0].sendrawtransaction(tx2_hex)\n         tx = FromHex(CTransaction(), tx2_hex)\n-        assert(not tx.wit.is_null())\n+        assert not tx.wit.is_null()\n \n         # Now create tx3, which will spend from txid2\n         tx = CTransaction()\n         tx.vin.append(CTxIn(COutPoint(int(txid2, 16), 0), b\"\"))\n         tx.vout.append(CTxOut(int(49.95 * COIN), CScript([OP_TRUE, OP_DROP] * 15 + [OP_TRUE])))  # Huge fee\n         tx.calc_sha256()\n         txid3 = self.nodes[0].sendrawtransaction(ToHex(tx))\n-        assert(tx.wit.is_null())\n-        assert(txid3 in self.nodes[0].getrawmempool())\n+        assert tx.wit.is_null()\n+        assert txid3 in self.nodes[0].getrawmempool()\n \n         # Check that getblocktemplate includes all transactions.\n         template = self.nodes[0].getblocktemplate({\"rules\": [\"segwit\"]})\n         template_txids = [t['txid'] for t in template['transactions']]\n-        assert(txid1 in template_txids)\n-        assert(txid2 in template_txids)\n-        assert(txid3 in template_txids)\n+        assert txid1 in template_txids\n+        assert txid2 in template_txids\n+        assert txid3 in template_txids\n \n         # Check that wtxid is properly reported in mempool entry\n         assert_equal(int(self.nodes[0].getmempoolentry(txid3)[\"wtxid\"], 16), tx.calc_sha256(True))"
      },
      {
        "sha": "753287ac7ad148550a5e7c76aa7d348f01933fba",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -74,8 +74,8 @@ def run_test(self):\n         node.generatetoaddress(VB_PERIOD - VB_THRESHOLD + 1, node_deterministic_address)\n \n         # Check that we're not getting any versionbit-related errors in get*info()\n-        assert(not VB_PATTERN.match(node.getmininginfo()[\"warnings\"]))\n-        assert(not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"]))\n+        assert not VB_PATTERN.match(node.getmininginfo()[\"warnings\"])\n+        assert not VB_PATTERN.match(node.getnetworkinfo()[\"warnings\"])\n \n         # Build one period of blocks with VB_THRESHOLD blocks signaling some unknown bit\n         self.send_blocks_with_version(node.p2p, VB_THRESHOLD, VB_UNKNOWN_VERSION)\n@@ -95,8 +95,8 @@ def run_test(self):\n         # Generating one more block will be enough to generate an error.\n         node.generatetoaddress(1, node_deterministic_address)\n         # Check that get*info() shows the versionbits unknown rules warning\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"])\n-        assert(WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"])\n+        assert WARN_UNKNOWN_RULES_ACTIVE in node.getmininginfo()[\"warnings\"]\n+        assert WARN_UNKNOWN_RULES_ACTIVE in node.getnetworkinfo()[\"warnings\"]\n         # Check that the alert file shows the versionbits unknown rules warning\n         wait_until(lambda: self.versionbits_in_alert_file(), timeout=60)\n "
      },
      {
        "sha": "75583cb56c7137270ecf4c2b3153ec3e89826953",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -16,7 +16,7 @@ def run_test(self):\n         \"\"\"Main test logic\"\"\"\n \n         cli_response = self.nodes[0].cli(\"-version\").send_cli()\n-        assert(\"Bitcoin Core RPC client version\" in cli_response)\n+        assert \"Bitcoin Core RPC client version\" in cli_response\n \n         self.log.info(\"Compare responses from getwalletinfo RPC and `bitcoin-cli getwalletinfo`\")\n         if self.is_wallet_compiled():"
      },
      {
        "sha": "f18ccb4aca0a21591b132b196ad77729afd33d7c",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 13,
        "deletions": 13,
        "changes": 26,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -30,14 +30,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1)\n-        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n+        assert b'\"error\":null' in out1\n+        assert conn.sock is not None  #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n+        assert b'\"error\":null' in out1  #must also response with a correct json-rpc message\n+        assert conn.sock is not None  #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #same should be if we add keep-alive because this should be the std. behaviour\n@@ -47,14 +47,14 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1)\n-        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n+        assert b'\"error\":null' in out1\n+        assert conn.sock is not None  #according to http/1.1 connection must still be open!\n \n         #send 2nd request without closing connection\n         conn.request('POST', '/', '{\"method\": \"getchaintips\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1) #must also response with a correct json-rpc message\n-        assert(conn.sock is not None) #according to http/1.1 connection must still be open!\n+        assert b'\"error\":null' in out1  #must also response with a correct json-rpc message\n+        assert conn.sock is not None  #according to http/1.1 connection must still be open!\n         conn.close()\n \n         #now do the same with \"Connection: close\"\n@@ -64,8 +64,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1)\n-        assert(conn.sock is None) #now the connection must be closed after the response\n+        assert b'\"error\":null' in out1\n+        assert conn.sock is None  #now the connection must be closed after the response\n \n         #node1 (2nd node) is running with disabled keep-alive option\n         urlNode1 = urllib.parse.urlparse(self.nodes[1].url)\n@@ -76,7 +76,7 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1)\n+        assert b'\"error\":null' in out1\n \n         #node2 (third node) is running with standard keep-alive parameters which means keep-alive is on\n         urlNode2 = urllib.parse.urlparse(self.nodes[2].url)\n@@ -87,8 +87,8 @@ def run_test(self):\n         conn.connect()\n         conn.request('POST', '/', '{\"method\": \"getbestblockhash\"}', headers)\n         out1 = conn.getresponse().read()\n-        assert(b'\"error\":null' in out1)\n-        assert(conn.sock is not None) #connection must be closed because bitcoind should use keep-alive by default\n+        assert b'\"error\":null' in out1\n+        assert conn.sock is not None  #connection must be closed because bitcoind should use keep-alive by default\n \n         # Check excessive request size\n         conn = http.client.HTTPConnection(urlNode2.hostname, urlNode2.port)"
      },
      {
        "sha": "976f39c32bc3aa02ee60e75e621c571ca63f1811",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -47,9 +47,9 @@ def run_test(self):\n             txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n \n         self.log.info('The tx should be evicted by now')\n-        assert(txid not in self.nodes[0].getrawmempool())\n+        assert txid not in self.nodes[0].getrawmempool()\n         txdata = self.nodes[0].gettransaction(txid)\n-        assert(txdata['confirmations'] ==  0) #confirmation should still be 0\n+        assert txdata['confirmations'] ==  0  #confirmation should still be 0\n \n         self.log.info('Check that mempoolminfee is larger than minrelytxfee')\n         assert_equal(self.nodes[0].getmempoolinfo()['minrelaytxfee'], Decimal('0.00001000'))"
      },
      {
        "sha": "b98bb7ec28afd38e23e0271586783c95c1c71b5a",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -33,7 +33,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n         signedtx = node.signrawtransactionwithwallet(rawtx)\n         txid = node.sendrawtransaction(signedtx['hex'])\n         fulltx = node.getrawtransaction(txid, 1)\n-        assert(len(fulltx['vout']) == num_outputs) # make sure we didn't generate a change output\n+        assert len(fulltx['vout']) == num_outputs  # make sure we didn't generate a change output\n         return (txid, send_value)\n \n     def run_test(self):\n@@ -125,13 +125,13 @@ def run_test(self):\n         assert_equal(len(v_ancestors), len(chain)-1)\n         for x in v_ancestors.keys():\n             assert_equal(mempool[x], v_ancestors[x])\n-        assert(chain[-1] not in v_ancestors.keys())\n+        assert chain[-1] not in v_ancestors.keys()\n \n         v_descendants = self.nodes[0].getmempooldescendants(chain[0], True)\n         assert_equal(len(v_descendants), len(chain)-1)\n         for x in v_descendants.keys():\n             assert_equal(mempool[x], v_descendants[x])\n-        assert(chain[0] not in v_descendants.keys())\n+        assert chain[0] not in v_descendants.keys()\n \n         # Check that ancestor modified fees includes fee deltas from\n         # prioritisetransaction"
      },
      {
        "sha": "b606fccec9f228cdf158dfe0ea8033cc6bc5b02e",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -45,7 +45,7 @@ def run_test(self):\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n         for txid in spends1_id+spends2_id:\n             tx = self.nodes[0].gettransaction(txid)\n-            assert(tx[\"confirmations\"] > 0)\n+            assert tx[\"confirmations\"] > 0\n \n         # Use invalidateblock to re-org back\n         for node in self.nodes:\n@@ -55,15 +55,15 @@ def run_test(self):\n         assert_equal(set(self.nodes[0].getrawmempool()), set(spends1_id+spends2_id))\n         for txid in spends1_id+spends2_id:\n             tx = self.nodes[0].gettransaction(txid)\n-            assert(tx[\"confirmations\"] == 0)\n+            assert tx[\"confirmations\"] == 0\n \n         # Generate another block, they should all get mined\n         self.nodes[0].generate(1)\n         # mempool should be empty, all txns confirmed\n         assert_equal(set(self.nodes[0].getrawmempool()), set())\n         for txid in spends1_id+spends2_id:\n             tx = self.nodes[0].gettransaction(txid)\n-            assert(tx[\"confirmations\"] > 0)\n+            assert tx[\"confirmations\"] > 0\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "0c4e29561d32abde0550f454112bf156fa024d85",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -38,27 +38,27 @@ def run_test(self):\n         longpollid = template['longpollid']\n         # longpollid should not change between successive invocations if nothing else happens\n         template2 = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n-        assert(template2['longpollid'] == longpollid)\n+        assert template2['longpollid'] == longpollid\n \n         # Test 1: test that the longpolling wait if we do nothing\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         # check that thread still lives\n         thr.join(5)  # wait 5 seconds or until thread exits\n-        assert(thr.is_alive())\n+        assert thr.is_alive()\n \n         # Test 2: test that longpoll will terminate if another node generates a block\n         self.nodes[1].generate(1)  # generate a block on another node\n         # check that thread will exit now that new transaction entered mempool\n         thr.join(5)  # wait 5 seconds or until thread exits\n-        assert(not thr.is_alive())\n+        assert not thr.is_alive()\n \n         # Test 3: test that longpoll will terminate if we generate a block ourselves\n         thr = LongpollThread(self.nodes[0])\n         thr.start()\n         self.nodes[0].generate(1)  # generate a block on another node\n         thr.join(5)  # wait 5 seconds or until thread exits\n-        assert(not thr.is_alive())\n+        assert not thr.is_alive()\n \n         # Test 4: test that introducing a new transaction into the mempool will terminate the longpoll\n         thr = LongpollThread(self.nodes[0])\n@@ -69,7 +69,7 @@ def run_test(self):\n         (txid, txhex, fee) = random_transaction(self.nodes, Decimal(\"1.1\"), min_relay_fee, Decimal(\"0.001\"), 20)\n         # after one minute, every 10 seconds the mempool is probed, so in 80 seconds it should have returned\n         thr.join(60 + 20)\n-        assert(not thr.is_alive())\n+        assert not thr.is_alive()\n \n if __name__ == '__main__':\n     GetBlockTemplateLPTest().main()"
      },
      {
        "sha": "975d1e6a6b95450db19e06dd480750ac833eb876",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -63,9 +63,9 @@ def run_test(self):\n         sizes = [0, 0, 0]\n         for i in range(3):\n             for j in txids[i]:\n-                assert(j in mempool)\n+                assert j in mempool\n                 sizes[i] += mempool[j]['size']\n-            assert(sizes[i] > MAX_BLOCK_BASE_SIZE) # Fail => raise utxo_count\n+            assert sizes[i] > MAX_BLOCK_BASE_SIZE  # Fail => raise utxo_count\n \n         # add a fee delta to something in the cheapest bucket and make sure it gets mined\n         # also check that a different entry in the cheapest bucket is NOT mined\n@@ -75,16 +75,16 @@ def run_test(self):\n \n         mempool = self.nodes[0].getrawmempool()\n         self.log.info(\"Assert that prioritised transaction was mined\")\n-        assert(txids[0][0] not in mempool)\n-        assert(txids[0][1] in mempool)\n+        assert txids[0][0] not in mempool\n+        assert txids[0][1] in mempool\n \n         high_fee_tx = None\n         for x in txids[2]:\n             if x not in mempool:\n                 high_fee_tx = x\n \n         # Something high-fee should have been mined!\n-        assert(high_fee_tx is not None)\n+        assert high_fee_tx is not None\n \n         # Add a prioritisation before a tx is in the mempool (de-prioritising a\n         # high-fee transaction so that it's now low fee).\n@@ -95,7 +95,7 @@ def run_test(self):\n \n         # Check to make sure our high fee rate tx is back in the mempool\n         mempool = self.nodes[0].getrawmempool()\n-        assert(high_fee_tx in mempool)\n+        assert high_fee_tx in mempool\n \n         # Now verify the modified-high feerate transaction isn't mined before\n         # the other high fee transactions. Keep mining until our mempool has\n@@ -107,14 +107,14 @@ def run_test(self):\n         # transactions should have been.\n         mempool = self.nodes[0].getrawmempool()\n         self.log.info(\"Assert that de-prioritised transaction is still in mempool\")\n-        assert(high_fee_tx in mempool)\n+        assert high_fee_tx in mempool\n         for x in txids[2]:\n             if (x != high_fee_tx):\n-                assert(x not in mempool)\n+                assert x not in mempool\n \n         # Create a free transaction.  Should be rejected.\n         utxo_list = self.nodes[0].listunspent()\n-        assert(len(utxo_list) > 0)\n+        assert len(utxo_list) > 0\n         utxo = utxo_list[0]\n \n         inputs = []\n@@ -127,7 +127,7 @@ def run_test(self):\n \n         # This will raise an exception due to min relay fee not being met\n         assert_raises_rpc_error(-26, \"min relay fee not met\", self.nodes[0].sendrawtransaction, tx_hex)\n-        assert(tx_id not in self.nodes[0].getrawmempool())\n+        assert tx_id not in self.nodes[0].getrawmempool()\n \n         # This is a less than 1000-byte transaction, so just set the fee\n         # to be the minimum for a 1000-byte transaction and check that it is\n@@ -136,7 +136,7 @@ def run_test(self):\n \n         self.log.info(\"Assert that prioritised free transaction is accepted to mempool\")\n         assert_equal(self.nodes[0].sendrawtransaction(tx_hex), tx_id)\n-        assert(tx_id in self.nodes[0].getrawmempool())\n+        assert tx_id in self.nodes[0].getrawmempool()\n \n         # Test that calling prioritisetransaction is sufficient to trigger\n         # getblocktemplate to (eventually) return a new block.\n@@ -147,7 +147,7 @@ def run_test(self):\n         self.nodes[0].setmocktime(mock_time+10)\n         new_template = self.nodes[0].getblocktemplate({'rules': ['segwit']})\n \n-        assert(template != new_template)\n+        assert template != new_template\n \n if __name__ == '__main__':\n     PrioritiseTransactionTest().main()"
      },
      {
        "sha": "47c05e2a6af0f6ee2ddca09e5b155d73e06fbd9c",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 22,
        "deletions": 22,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -120,7 +120,7 @@ def make_utxos(self):\n         # Doesn't matter which node we use, just use node0.\n         block = self.build_block_on_tip(self.nodes[0])\n         self.test_node.send_and_ping(msg_block(block))\n-        assert(int(self.nodes[0].getbestblockhash(), 16) == block.sha256)\n+        assert int(self.nodes[0].getbestblockhash(), 16) == block.sha256\n         self.nodes[0].generate(100)\n \n         total_value = block.vtx[0].vout[0].nValue\n@@ -167,7 +167,7 @@ def check_announcement_of_new_block(node, peer, predicate):\n             peer.clear_block_announcement()\n             block_hash = int(node.generate(1)[0], 16)\n             peer.wait_for_block_announcement(block_hash, timeout=30)\n-            assert(peer.block_announced)\n+            assert peer.block_announced\n \n             with mininode_lock:\n                 assert predicate(peer), (\n@@ -303,7 +303,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         # Now fetch and check the compact block\n         header_and_shortids = None\n         with mininode_lock:\n-            assert(\"cmpctblock\" in test_node.last_message)\n+            assert \"cmpctblock\" in test_node.last_message\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -319,7 +319,7 @@ def test_compactblock_construction(self, node, test_node, version, use_witness_a\n         # Now fetch and check the compact block\n         header_and_shortids = None\n         with mininode_lock:\n-            assert(\"cmpctblock\" in test_node.last_message)\n+            assert \"cmpctblock\" in test_node.last_message\n             # Convert the on-the-wire representation to absolute indexes\n             header_and_shortids = HeaderAndShortIDs(test_node.last_message[\"cmpctblock\"].header_and_shortids)\n         self.check_compactblock_construction_from_block(version, header_and_shortids, block_hash, block)\n@@ -330,7 +330,7 @@ def check_compactblock_construction_from_block(self, version, header_and_shortid\n         assert_equal(header_and_shortids.header.sha256, block_hash)\n \n         # Make sure the prefilled_txn appears to have included the coinbase\n-        assert(len(header_and_shortids.prefilled_txn) >= 1)\n+        assert len(header_and_shortids.prefilled_txn) >= 1\n         assert_equal(header_and_shortids.prefilled_txn[0].index, 0)\n \n         # Check that all prefilled_txn entries match what's in the block.\n@@ -345,7 +345,7 @@ def check_compactblock_construction_from_block(self, version, header_and_shortid\n                 assert_equal(wtxid, block.vtx[entry.index].calc_sha256(True))\n             else:\n                 # Shouldn't have received a witness\n-                assert(entry.tx.wit.is_null())\n+                assert entry.tx.wit.is_null()\n \n         # Check that the cmpctblock message announced all the transactions.\n         assert_equal(len(header_and_shortids.prefilled_txn) + len(header_and_shortids.shortids), len(block.vtx))\n@@ -407,7 +407,7 @@ def test_compactblock_requests(self, node, test_node, version, segwit):\n             assert_equal(int(node.getbestblockhash(), 16), block.hashPrevBlock)\n             # Expect a getblocktxn message.\n             with mininode_lock:\n-                assert(\"getblocktxn\" in test_node.last_message)\n+                assert \"getblocktxn\" in test_node.last_message\n                 absolute_indexes = test_node.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, [0])  # should be a coinbase request\n \n@@ -447,7 +447,7 @@ def test_getblocktxn_response(compact_block, peer, expected_result):\n             msg = msg_cmpctblock(compact_block.to_p2p())\n             peer.send_and_ping(msg)\n             with mininode_lock:\n-                assert(\"getblocktxn\" in peer.last_message)\n+                assert \"getblocktxn\" in peer.last_message\n                 absolute_indexes = peer.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n             assert_equal(absolute_indexes, expected_result)\n \n@@ -487,7 +487,7 @@ def test_tip_after_message(node, peer, msg, tip):\n         block = self.build_block_with_transactions(node, utxo, 5)\n         self.utxos.append([block.vtx[-1].sha256, 0, block.vtx[-1].vout[0].nValue])\n         test_node.send_and_ping(msg_tx(block.vtx[1]))\n-        assert(block.vtx[1].hash in node.getrawmempool())\n+        assert block.vtx[1].hash in node.getrawmempool()\n \n         # Prefill 4 out of the 6 transactions, and verify that only the one\n         # that was not in the mempool is requested.\n@@ -508,7 +508,7 @@ def test_tip_after_message(node, peer, msg, tip):\n         # Make sure all transactions were accepted.\n         mempool = node.getrawmempool()\n         for tx in block.vtx[1:]:\n-            assert(tx.hash in mempool)\n+            assert tx.hash in mempool\n \n         # Clear out last request.\n         with mininode_lock:\n@@ -519,7 +519,7 @@ def test_tip_after_message(node, peer, msg, tip):\n         test_tip_after_message(node, test_node, msg_cmpctblock(comp_block.to_p2p()), block.sha256)\n         with mininode_lock:\n             # Shouldn't have gotten a request for any transaction\n-            assert(\"getblocktxn\" not in test_node.last_message)\n+            assert \"getblocktxn\" not in test_node.last_message\n \n     # Incorrectly responding to a getblocktxn shouldn't cause the block to be\n     # permanently failed.\n@@ -537,15 +537,15 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         # Make sure all transactions were accepted.\n         mempool = node.getrawmempool()\n         for tx in block.vtx[1:6]:\n-            assert(tx.hash in mempool)\n+            assert tx.hash in mempool\n \n         # Send compact block\n         comp_block = HeaderAndShortIDs()\n         comp_block.initialize_from_block(block, prefill_list=[0], use_witness=(version == 2))\n         test_node.send_and_ping(msg_cmpctblock(comp_block.to_p2p()))\n         absolute_indexes = []\n         with mininode_lock:\n-            assert(\"getblocktxn\" in test_node.last_message)\n+            assert \"getblocktxn\" in test_node.last_message\n             absolute_indexes = test_node.last_message[\"getblocktxn\"].block_txn_request.to_absolute()\n         assert_equal(absolute_indexes, [6, 7, 8, 9, 10])\n \n@@ -569,7 +569,7 @@ def test_incorrect_blocktxn_response(self, node, test_node, version):\n         # We should receive a getdata request\n         wait_until(lambda: \"getdata\" in test_node.last_message, timeout=10, lock=mininode_lock)\n         assert_equal(len(test_node.last_message[\"getdata\"].inv), 1)\n-        assert(test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2 | MSG_WITNESS_FLAG)\n+        assert test_node.last_message[\"getdata\"].inv[0].type == 2 or test_node.last_message[\"getdata\"].inv[0].type == 2 | MSG_WITNESS_FLAG\n         assert_equal(test_node.last_message[\"getdata\"].inv[0].hash, block.sha256)\n \n         # Deliver the block\n@@ -606,7 +606,7 @@ def test_getblocktxn_handler(self, node, test_node, version):\n                     assert_equal(tx.sha256, block.vtx[index].sha256)\n                     if version == 1:\n                         # Witnesses should have been stripped\n-                        assert(tx.wit.is_null())\n+                        assert tx.wit.is_null()\n                     else:\n                         # Check that the witness matches\n                         assert_equal(tx.calc_sha256(True), block.vtx[index].calc_sha256(True))\n@@ -669,7 +669,7 @@ def test_compactblocks_not_at_tip(self, node, test_node):\n                 assert_equal(x[\"status\"], \"headers-only\")\n                 found = True\n                 break\n-        assert(found)\n+        assert found\n \n         # Requesting this block via getblocktxn should silently fail\n         # (to avoid fingerprinting attacks).\n@@ -707,7 +707,7 @@ def test_end_to_end_block_relay(self, node, listeners):\n     # Test that we don't get disconnected if we relay a compact block with valid header,\n     # but invalid transactions.\n     def test_invalid_tx_in_compactblock(self, node, test_node, use_segwit):\n-        assert(len(self.utxos))\n+        assert len(self.utxos)\n         utxo = self.utxos[0]\n \n         block = self.build_block_with_transactions(node, utxo, 5)\n@@ -728,7 +728,7 @@ def test_invalid_tx_in_compactblock(self, node, test_node, use_segwit):\n         test_node.send_and_ping(msg)\n \n         # Check that the tip didn't advance\n-        assert(int(node.getbestblockhash(), 16) is not block.sha256)\n+        assert int(node.getbestblockhash(), 16) is not block.sha256\n         test_node.sync_with_ping()\n \n     # Helper for enabling cb announcements\n@@ -743,7 +743,7 @@ def request_cb_announcements(self, peer, node, version):\n         peer.send_and_ping(msg)\n \n     def test_compactblock_reconstruction_multiple_peers(self, node, stalling_peer, delivery_peer):\n-        assert(len(self.utxos))\n+        assert len(self.utxos)\n \n         def announce_cmpct_block(node, peer):\n             utxo = self.utxos.pop(0)\n@@ -764,7 +764,7 @@ def announce_cmpct_block(node, peer):\n         delivery_peer.sync_with_ping()\n         mempool = node.getrawmempool()\n         for tx in block.vtx[1:]:\n-            assert(tx.hash in mempool)\n+            assert tx.hash in mempool\n \n         delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n         assert_equal(int(node.getbestblockhash(), 16), block.sha256)\n@@ -783,7 +783,7 @@ def announce_cmpct_block(node, peer):\n \n         cmpct_block.use_witness = True\n         delivery_peer.send_and_ping(msg_cmpctblock(cmpct_block.to_p2p()))\n-        assert(int(node.getbestblockhash(), 16) != block.sha256)\n+        assert int(node.getbestblockhash(), 16) != block.sha256\n \n         msg = msg_blocktxn()\n         msg.block_transactions.blockhash = block.sha256\n@@ -882,7 +882,7 @@ def run_test(self):\n         # Need to manually sync node0 and node1, because post-segwit activation,\n         # node1 will not download blocks from node0.\n         self.log.info(\"Syncing nodes...\")\n-        assert(self.nodes[0].getbestblockhash() != self.nodes[1].getbestblockhash())\n+        assert self.nodes[0].getbestblockhash() != self.nodes[1].getbestblockhash()\n         while (self.nodes[0].getblockcount() > self.nodes[1].getblockcount()):\n             block_hash = self.nodes[0].getblockhash(self.nodes[1].getblockcount() + 1)\n             self.nodes[1].submitblock(self.nodes[0].getblock(block_hash, False))"
      },
      {
        "sha": "e907cc600fef9f5b212bb2cfc4b4d7199fe7229e",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -57,15 +57,15 @@ def run_test(self):\n         # Test that invs are received for all txs at feerate of 20 sat/byte\n         node1.settxfee(Decimal(\"0.00020000\"))\n         txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n-        assert(allInvsMatch(txids, self.nodes[0].p2p))\n+        assert allInvsMatch(txids, self.nodes[0].p2p)\n         self.nodes[0].p2p.clear_invs()\n \n         # Set a filter of 15 sat/byte\n         self.nodes[0].p2p.send_and_ping(msg_feefilter(15000))\n \n         # Test that txs are still being received (paying 20 sat/byte)\n         txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n-        assert(allInvsMatch(txids, self.nodes[0].p2p))\n+        assert allInvsMatch(txids, self.nodes[0].p2p)\n         self.nodes[0].p2p.clear_invs()\n \n         # Change tx fee rate to 10 sat/byte and test they are no longer received\n@@ -82,13 +82,13 @@ def run_test(self):\n         # as well.\n         node0.settxfee(Decimal(\"0.00020000\"))\n         txids = [node0.sendtoaddress(node0.getnewaddress(), 1)]\n-        assert(allInvsMatch(txids, self.nodes[0].p2p))\n+        assert allInvsMatch(txids, self.nodes[0].p2p)\n         self.nodes[0].p2p.clear_invs()\n \n         # Remove fee filter and check that txs are received again\n         self.nodes[0].p2p.send_and_ping(msg_feefilter(0))\n         txids = [node1.sendtoaddress(node1.getnewaddress(), 1) for x in range(3)]\n-        assert(allInvsMatch(txids, self.nodes[0].p2p))\n+        assert allInvsMatch(txids, self.nodes[0].p2p)\n         self.nodes[0].p2p.clear_invs()\n \n if __name__ == '__main__':"
      },
      {
        "sha": "fdc51f25c377de265c0bde6a603b940b5bd7473e",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -117,9 +117,9 @@ def run_test(self):\n         wait_until(lambda: len(self.nodes[0].getpeerinfo()) == 0)\n \n         # Make sure no unexpected messages came in\n-        assert(no_version_bannode.unexpected_msg == False)\n-        assert(no_version_idlenode.unexpected_msg == False)\n-        assert(no_verack_idlenode.unexpected_msg == False)\n+        assert no_version_bannode.unexpected_msg == False\n+        assert no_version_idlenode.unexpected_msg == False\n+        assert no_verack_idlenode.unexpected_msg == False\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "7d38fbb00d18246882cf08c5890a7244fc8bdfb8",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 35,
        "deletions": 35,
        "changes": 70,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -315,7 +315,7 @@ def test_non_witness_transaction(self):\n \n         self.test_node.send_message(msg_witness_tx(tx))\n         self.test_node.sync_with_ping()  # make sure the tx was processed\n-        assert(tx.hash in self.nodes[0].getrawmempool())\n+        assert tx.hash in self.nodes[0].getrawmempool()\n         # Save this transaction for later\n         self.utxo.append(UTXO(tx.sha256, 0, 49 * 100000000))\n         self.nodes[0].generate(1)\n@@ -333,7 +333,7 @@ def test_unnecessary_witness_before_segwit_activation(self):\n         # Verify the hash with witness differs from the txid\n         # (otherwise our testing framework must be broken!)\n         tx.rehash()\n-        assert(tx.sha256 != tx.calc_sha256(with_witness=True))\n+        assert tx.sha256 != tx.calc_sha256(with_witness=True)\n \n         # Construct a segwit-signaling block that includes the transaction.\n         block = self.build_next_block(version=(VB_TOP_BITS | (1 << VB_WITNESS_BIT)))\n@@ -369,20 +369,20 @@ def test_block_relay(self):\n         block1.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block1, use_header=False)\n-        assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n+        assert self.test_node.last_message[\"getdata\"].inv[0].type == blocktype\n         test_witness_block(self.nodes[0], self.test_node, block1, True)\n \n         block2 = self.build_next_block(version=4)\n         block2.solve()\n \n         self.test_node.announce_block_and_wait_for_getdata(block2, use_header=True)\n-        assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n+        assert self.test_node.last_message[\"getdata\"].inv[0].type == blocktype\n         test_witness_block(self.nodes[0], self.test_node, block2, True)\n \n         block3 = self.build_next_block(version=(VB_TOP_BITS | (1 << 15)))\n         block3.solve()\n         self.test_node.announce_block_and_wait_for_getdata(block3, use_header=True)\n-        assert(self.test_node.last_message[\"getdata\"].inv[0].type == blocktype)\n+        assert self.test_node.last_message[\"getdata\"].inv[0].type == blocktype\n         test_witness_block(self.nodes[0], self.test_node, block3, True)\n \n         # Check that we can getdata for witness blocks or regular blocks,\n@@ -411,8 +411,8 @@ def test_block_relay(self):\n             block = self.build_next_block()\n             self.update_witness_block_with_transactions(block, [])\n             # This gives us a witness commitment.\n-            assert(len(block.vtx[0].wit.vtxinwit) == 1)\n-            assert(len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1)\n+            assert len(block.vtx[0].wit.vtxinwit) == 1\n+            assert len(block.vtx[0].wit.vtxinwit[0].scriptWitness.stack) == 1\n             test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n             # Now try to retrieve it...\n             rpc_block = self.nodes[0].getblock(block.hash, False)\n@@ -446,7 +446,7 @@ def test_block_relay(self):\n             msg.headers = [CBlockHeader(block4)]\n             self.old_node.send_message(msg)\n             self.old_node.announce_tx_and_wait_for_getdata(block4.vtx[0])\n-            assert(block4.sha256 not in self.old_node.getdataset)\n+            assert block4.sha256 not in self.old_node.getdataset\n \n     @subtest\n     def test_v0_outputs_arent_spendable(self):\n@@ -535,7 +535,7 @@ def advance_to_segwit_started(self):\n         \"\"\"Mine enough blocks for segwit's vb state to be 'started'.\"\"\"\n         height = self.nodes[0].getblockcount()\n         # Will need to rewrite the tests here if we are past the first period\n-        assert(height < VB_PERIOD - 1)\n+        assert height < VB_PERIOD - 1\n         # Advance to end of period, status should now be 'started'\n         self.nodes[0].generate(VB_PERIOD - height - 1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n@@ -552,12 +552,12 @@ def test_getblocktemplate_before_lockin(self):\n                 # If this is a non-segwit node, we should not get a witness\n                 # commitment, nor a version bit signalling segwit.\n                 assert_equal(block_version & (1 << VB_WITNESS_BIT), 0)\n-                assert('default_witness_commitment' not in gbt_results)\n+                assert 'default_witness_commitment' not in gbt_results\n             else:\n                 # For segwit-aware nodes, check the version bit and the witness\n                 # commitment are correct.\n-                assert(block_version & (1 << VB_WITNESS_BIT) != 0)\n-                assert('default_witness_commitment' in gbt_results)\n+                assert block_version & (1 << VB_WITNESS_BIT) != 0\n+                assert 'default_witness_commitment' in gbt_results\n                 witness_commitment = gbt_results['default_witness_commitment']\n \n                 # Check that default_witness_commitment is present.\n@@ -573,7 +573,7 @@ def advance_to_segwit_lockin(self):\n         # Advance to end of period, and verify lock-in happens at the end\n         self.nodes[0].generate(VB_PERIOD - 1)\n         height = self.nodes[0].getblockcount()\n-        assert((height % VB_PERIOD) == VB_PERIOD - 2)\n+        assert (height % VB_PERIOD) == VB_PERIOD - 2\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'started')\n         self.nodes[0].generate(1)\n         assert_equal(get_bip9_status(self.nodes[0], 'segwit')['status'], 'locked_in')\n@@ -598,7 +598,7 @@ def test_witness_tx_relay_before_segwit_activation(self):\n         # Verify that if a peer doesn't set nServices to include NODE_WITNESS,\n         # the getdata is just for the non-witness portion.\n         self.old_node.announce_tx_and_wait_for_getdata(tx)\n-        assert(self.old_node.last_message[\"getdata\"].inv[0].type == 1)\n+        assert self.old_node.last_message[\"getdata\"].inv[0].type == 1\n \n         # Since we haven't delivered the tx yet, inv'ing the same tx from\n         # a witness transaction ought not result in a getdata.\n@@ -790,7 +790,7 @@ def test_witness_commitments(self):\n         block.solve()\n \n         # Test the test -- witness serialization should be different\n-        assert(msg_witness_block(block).serialize() != msg_block(block).serialize())\n+        assert msg_witness_block(block).serialize() != msg_block(block).serialize()\n \n         # This empty block should be valid.\n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n@@ -801,7 +801,7 @@ def test_witness_commitments(self):\n         block_2.solve()\n \n         # The commitment should have changed!\n-        assert(block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1])\n+        assert block_2.vtx[0].vout[-1] != block.vtx[0].vout[-1]\n \n         # This should also be valid.\n         test_witness_block(self.nodes[0], self.test_node, block_2, accepted=True)\n@@ -848,7 +848,7 @@ def test_witness_commitments(self):\n         block_3.vtx[0].rehash()\n         block_3.hashMerkleRoot = block_3.calc_merkle_root()\n         block_3.rehash()\n-        assert(len(block_3.vtx[0].vout) == 4)  # 3 OP_returns\n+        assert len(block_3.vtx[0].vout) == 4  # 3 OP_returns\n         block_3.solve()\n         test_witness_block(self.nodes[0], self.test_node, block_3, accepted=True)\n \n@@ -879,19 +879,19 @@ def test_block_malleability(self):\n         block.solve()\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.append(b'a' * 5000000)\n-        assert(get_virtual_size(block) > MAX_BLOCK_BASE_SIZE)\n+        assert get_virtual_size(block) > MAX_BLOCK_BASE_SIZE\n \n         # We can't send over the p2p network, because this is too big to relay\n         # TODO: repeat this test with a block that can be relayed\n         self.nodes[0].submitblock(block.serialize(True).hex())\n \n-        assert(self.nodes[0].getbestblockhash() != block.hash)\n+        assert self.nodes[0].getbestblockhash() != block.hash\n \n         block.vtx[0].wit.vtxinwit[0].scriptWitness.stack.pop()\n-        assert(get_virtual_size(block) < MAX_BLOCK_BASE_SIZE)\n+        assert get_virtual_size(block) < MAX_BLOCK_BASE_SIZE\n         self.nodes[0].submitblock(block.serialize(True).hex())\n \n-        assert(self.nodes[0].getbestblockhash() == block.hash)\n+        assert self.nodes[0].getbestblockhash() == block.hash\n \n         # Now make sure that malleating the witness reserved value doesn't\n         # result in a block permanently marked bad.\n@@ -916,7 +916,7 @@ def test_witness_block_size(self):\n         # Test that witness-bearing blocks are limited at ceil(base + wit/4) <= 1MB.\n         block = self.build_next_block()\n \n-        assert(len(self.utxo) > 0)\n+        assert len(self.utxo) > 0\n \n         # Create a P2WSH transaction.\n         # The witness program will be a bunch of OP_2DROP's, followed by OP_TRUE.\n@@ -938,7 +938,7 @@ def test_witness_block_size(self):\n         for i in range(NUM_OUTPUTS):\n             parent_tx.vout.append(CTxOut(child_value, script_pubkey))\n         parent_tx.vout[0].nValue -= 50000\n-        assert(parent_tx.vout[0].nValue > 0)\n+        assert parent_tx.vout[0].nValue > 0\n         parent_tx.rehash()\n \n         child_tx = CTransaction()\n@@ -968,7 +968,7 @@ def test_witness_block_size(self):\n         assert_equal(vsize, MAX_BLOCK_BASE_SIZE + 1)\n         # Make sure that our test case would exceed the old max-network-message\n         # limit\n-        assert(len(block.serialize(True)) > 2 * 1024 * 1024)\n+        assert len(block.serialize(True)) > 2 * 1024 * 1024\n \n         test_witness_block(self.nodes[0], self.test_node, block, accepted=False)\n \n@@ -978,7 +978,7 @@ def test_witness_block_size(self):\n         block.vtx[0].vout.pop()\n         add_witness_commitment(block)\n         block.solve()\n-        assert(get_virtual_size(block) == MAX_BLOCK_BASE_SIZE)\n+        assert get_virtual_size(block) == MAX_BLOCK_BASE_SIZE\n \n         test_witness_block(self.nodes[0], self.test_node, block, accepted=True)\n \n@@ -997,7 +997,7 @@ def test_submit_block(self):\n         block.vtx[0].wit = CTxWitness()  # drop the nonce\n         block.solve()\n         self.nodes[0].submitblock(block.serialize(True).hex())\n-        assert(self.nodes[0].getbestblockhash() != block.hash)\n+        assert self.nodes[0].getbestblockhash() != block.hash\n \n         # Now redo commitment with the standard nonce, but let bitcoind fill it in.\n         add_witness_commitment(block, nonce=0)\n@@ -1020,7 +1020,7 @@ def test_submit_block(self):\n \n         self.nodes[0].submitblock(block_2.serialize(True).hex())\n         # Tip should not advance!\n-        assert(self.nodes[0].getbestblockhash() != block_2.hash)\n+        assert self.nodes[0].getbestblockhash() != block_2.hash\n \n     @subtest\n     def test_extra_witness_data(self):\n@@ -1140,7 +1140,7 @@ def test_max_witness_program_length(self):\n \n         # This program is 19 max pushes (9937 bytes), then 64 more opcode-bytes.\n         long_witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 63 + [OP_TRUE])\n-        assert(len(long_witness_program) == MAX_PROGRAM_LENGTH + 1)\n+        assert len(long_witness_program) == MAX_PROGRAM_LENGTH + 1\n         long_witness_hash = sha256(long_witness_program)\n         long_script_pubkey = CScript([OP_0, long_witness_hash])\n \n@@ -1164,7 +1164,7 @@ def test_max_witness_program_length(self):\n \n         # Try again with one less byte in the witness program\n         witness_program = CScript([b'a' * 520] * 19 + [OP_DROP] * 62 + [OP_TRUE])\n-        assert(len(witness_program) == MAX_PROGRAM_LENGTH)\n+        assert len(witness_program) == MAX_PROGRAM_LENGTH\n         witness_hash = sha256(witness_program)\n         script_pubkey = CScript([OP_0, witness_hash])\n \n@@ -1195,7 +1195,7 @@ def test_witness_input_length(self):\n         for i in range(10):\n             tx.vout.append(CTxOut(int(value / 10), script_pubkey))\n         tx.vout[0].nValue -= 1000\n-        assert(tx.vout[0].nValue >= 0)\n+        assert tx.vout[0].nValue >= 0\n \n         block = self.build_next_block()\n         self.update_witness_block_with_transactions(block, [tx])\n@@ -1346,7 +1346,7 @@ def test_tx_relay_after_segwit_activation(self):\n         assert_equal(raw_tx[\"weight\"], weight)\n         assert_equal(len(raw_tx[\"vin\"][0][\"txinwitness\"]), 1)\n         assert_equal(raw_tx[\"vin\"][0][\"txinwitness\"][0], witness_program.hex())\n-        assert(vsize != raw_tx[\"size\"])\n+        assert vsize != raw_tx[\"size\"]\n \n         # Cleanup: mine the transactions and update utxo for next test\n         self.nodes[0].generate(1)\n@@ -1396,7 +1396,7 @@ def test_segwit_versions(self):\n \n         self.nodes[0].generate(1)  # Mine all the transactions\n         sync_blocks(self.nodes)\n-        assert(len(self.nodes[0].getrawmempool()) == 0)\n+        assert len(self.nodes[0].getrawmempool()) == 0\n \n         # Finally, verify that version 0 -> version 1 transactions\n         # are non-standard\n@@ -1665,7 +1665,7 @@ def test_signature_version_1(self):\n             # Create a slight bias for producing more utxos\n             num_outputs = random.randint(1, 11)\n             random.shuffle(temp_utxos)\n-            assert(len(temp_utxos) > num_inputs)\n+            assert len(temp_utxos) > num_inputs\n             tx = CTransaction()\n             total_value = 0\n             for i in range(num_inputs):\n@@ -1926,7 +1926,7 @@ def test_upgrade_after_activation(self):\n         sync_blocks(self.nodes)\n \n         # Make sure that this peer thinks segwit has activated.\n-        assert(get_bip9_status(self.nodes[2], 'segwit')['status'] == \"active\")\n+        assert get_bip9_status(self.nodes[2], 'segwit')['status'] == \"active\"\n \n         # Make sure this peer's blocks match those of node0.\n         height = self.nodes[2].getblockcount()\n@@ -1953,7 +1953,7 @@ def test_witness_sigops(self):\n         extra_sigops_available = MAX_SIGOP_COST % sigops_per_script\n \n         # We chose the number of checkmultisigs/checksigs to make this work:\n-        assert(extra_sigops_available < 100)  # steer clear of MAX_OPS_PER_SCRIPT\n+        assert extra_sigops_available < 100  # steer clear of MAX_OPS_PER_SCRIPT\n \n         # This script, when spent with the first\n         # N(=MAX_SIGOP_COST//sigops_per_script) outputs of our transaction,"
      },
      {
        "sha": "a118b891e5069267ff888e248d3aeaf64fe26bf7",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -114,7 +114,7 @@ def run_test(self):\n             if x['hash'] == block_h1f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n                 tip_entry_found = True\n-        assert(tip_entry_found)\n+        assert tip_entry_found\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_h1f.hash)\n \n         # 4. Send another two block that build on the fork.\n@@ -131,7 +131,7 @@ def run_test(self):\n             if x['hash'] == block_h2f.hash:\n                 assert_equal(x['status'], \"headers-only\")\n                 tip_entry_found = True\n-        assert(tip_entry_found)\n+        assert tip_entry_found\n \n         # But this block should be accepted by node since it has equal work.\n         self.nodes[0].getblock(block_h2f.hash)\n@@ -150,7 +150,7 @@ def run_test(self):\n             if x['hash'] == block_h3.hash:\n                 assert_equal(x['status'], \"headers-only\")\n                 tip_entry_found = True\n-        assert(tip_entry_found)\n+        assert tip_entry_found\n         self.nodes[0].getblock(block_h3.hash)\n \n         # But this block should be accepted by node since it has more work.\n@@ -263,7 +263,7 @@ def run_test(self):\n             if x['hash'] == block_292.hash:\n                 assert_equal(x['status'], \"headers-only\")\n                 tip_entry_found = True\n-        assert(tip_entry_found)\n+        assert tip_entry_found\n         assert_raises_rpc_error(-1, \"Block not found on disk\", self.nodes[0].getblock, block_292.hash)\n \n         test_node.send_message(msg_block(block_289f))"
      },
      {
        "sha": "6693042f84ab120be0cc86349325078e5d337794",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -172,9 +172,9 @@ def _test_getchaintxstats(self):\n         assert_equal(chaintxstats['txcount'], 2)\n         assert_equal(chaintxstats['window_final_block_hash'], b1_hash)\n         assert_equal(chaintxstats['window_block_count'], 0)\n-        assert('window_tx_count' not in chaintxstats)\n-        assert('window_interval' not in chaintxstats)\n-        assert('txrate' not in chaintxstats)\n+        assert 'window_tx_count' not in chaintxstats\n+        assert 'window_interval' not in chaintxstats\n+        assert 'txrate' not in chaintxstats\n \n     def _test_gettxoutsetinfo(self):\n         node = self.nodes[0]"
      },
      {
        "sha": "4d3c452f335adfb80bf282626b27ef19653ed7b2",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 15,
        "deletions": 15,
        "changes": 30,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -94,7 +94,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert(len(dec_tx['vin']) > 0) #test that we have enough inputs\n+        assert len(dec_tx['vin']) > 0  #test that we have enough inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -107,7 +107,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert(len(dec_tx['vin']) > 0) #test if we have enough inputs\n+        assert len(dec_tx['vin']) > 0  #test if we have enough inputs\n \n         ##############################\n         # simple test with two coins #\n@@ -120,7 +120,7 @@ def run_test(self):\n         rawtxfund = self.nodes[2].fundrawtransaction(rawtx)\n         fee = rawtxfund['fee']\n         dec_tx  = self.nodes[2].decoderawtransaction(rawtxfund['hex'])\n-        assert(len(dec_tx['vin']) > 0)\n+        assert len(dec_tx['vin']) > 0\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -139,7 +139,7 @@ def run_test(self):\n         for out in dec_tx['vout']:\n             totalOut += out['value']\n \n-        assert(len(dec_tx['vin']) > 0)\n+        assert len(dec_tx['vin']) > 0\n         assert_equal(dec_tx['vin'][0]['scriptSig']['hex'], '')\n \n \n@@ -363,7 +363,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        assert feeDelta >= 0 and feeDelta <= feeTolerance\n         ############################################################\n \n         ############################################################\n@@ -378,7 +378,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        assert feeDelta >= 0 and feeDelta <= feeTolerance\n         ############################################################\n \n \n@@ -405,7 +405,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        assert feeDelta >= 0 and feeDelta <= feeTolerance\n         ############################################################\n \n \n@@ -438,7 +438,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance)\n+        assert feeDelta >= 0 and feeDelta <= feeTolerance\n         ############################################################\n \n \n@@ -558,7 +558,7 @@ def run_test(self):\n \n         #compare fee\n         feeDelta = Decimal(fundedTx['fee']) - Decimal(signedFee)\n-        assert(feeDelta >= 0 and feeDelta <= feeTolerance*19) #~19 inputs\n+        assert feeDelta >= 0 and feeDelta <= feeTolerance*19  #~19 inputs\n \n \n         #############################################\n@@ -620,7 +620,7 @@ def run_test(self):\n         assert_equal(len(res_dec[\"vin\"]), 1)\n         assert_equal(res_dec[\"vin\"][0][\"txid\"], watchonly_txid)\n \n-        assert(\"fee\" in result.keys())\n+        assert \"fee\" in result.keys()\n         assert_greater_than(result[\"changepos\"], -1)\n \n         ###############################################################\n@@ -635,16 +635,16 @@ def run_test(self):\n         result = self.nodes[3].fundrawtransaction(rawtx, True)\n         res_dec = self.nodes[0].decoderawtransaction(result[\"hex\"])\n         assert_equal(len(res_dec[\"vin\"]), 2)\n-        assert(res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid)\n+        assert res_dec[\"vin\"][0][\"txid\"] == watchonly_txid or res_dec[\"vin\"][1][\"txid\"] == watchonly_txid\n \n         assert_greater_than(result[\"fee\"], 0)\n         assert_greater_than(result[\"changepos\"], -1)\n         assert_equal(result[\"fee\"] + res_dec[\"vout\"][result[\"changepos\"]][\"value\"], watchonly_amount / 10)\n \n         signedtx = self.nodes[3].signrawtransactionwithwallet(result[\"hex\"])\n-        assert(not signedtx[\"complete\"])\n+        assert not signedtx[\"complete\"]\n         signedtx = self.nodes[0].signrawtransactionwithwallet(signedtx[\"hex\"])\n-        assert(signedtx[\"complete\"])\n+        assert signedtx[\"complete\"]\n         self.nodes[0].sendrawtransaction(signedtx[\"hex\"])\n         self.nodes[0].generate(1)\n         self.sync_all()\n@@ -676,10 +676,10 @@ def run_test(self):\n         for out in res_dec['vout']:\n             if out['value'] > 1.0:\n                 changeaddress += out['scriptPubKey']['addresses'][0]\n-        assert(changeaddress != \"\")\n+        assert changeaddress != \"\"\n         nextaddr = self.nodes[3].getnewaddress()\n         # Now the change address key should be removed from the keypool\n-        assert(changeaddress != nextaddr)\n+        assert changeaddress != nextaddr\n \n         ######################################\n         # Test subtractFeeFromOutputs option #"
      },
      {
        "sha": "734c5a7779284646d5cbb9666b9f5a482a2ef8cd",
        "filename": "test/functional/rpc_named_arguments.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_named_arguments.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_named_arguments.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_named_arguments.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -17,7 +17,7 @@ def set_test_params(self):\n     def run_test(self):\n         node = self.nodes[0]\n         h = node.help(command='getblockchaininfo')\n-        assert(h.startswith('getblockchaininfo\\n'))\n+        assert h.startswith('getblockchaininfo\\n')\n \n         assert_raises_rpc_error(-8, 'Unknown named parameter', node.help, random='getblockchaininfo')\n "
      },
      {
        "sha": "bfa15f69f2ba51438308f1840c471151ede693b6",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -16,15 +16,15 @@ def unidirectional_node_sync_via_rpc(node_src, node_dest):\n     blockhash = node_src.getbestblockhash()\n     while True:\n         try:\n-            assert(len(node_dest.getblock(blockhash, False)) > 0)\n+            assert len(node_dest.getblock(blockhash, False)) > 0\n             break\n         except:\n             blocks_to_copy.append(blockhash)\n             blockhash = node_src.getblockheader(blockhash, True)['previousblockhash']\n     blocks_to_copy.reverse()\n     for blockhash in blocks_to_copy:\n         blockdata = node_src.getblock(blockhash, False)\n-        assert(node_dest.submitblock(blockdata) in (None, 'inconclusive'))\n+        assert node_dest.submitblock(blockdata) in (None, 'inconclusive')\n \n def node_sync_via_rpc(nodes):\n     for node_src in nodes:\n@@ -57,7 +57,7 @@ def run_test(self):\n         self.log.info(\"Mine competing blocks E-F-G on Node 1\")\n         hashG = self.nodes[1].generatetoaddress(3, gen_address(1))[-1]\n         assert_equal(self.nodes[1].getblockcount(), 5)\n-        assert(hashC != hashG)\n+        assert hashC != hashG\n         self.log.info(\"Connect nodes and check no reorg occurs\")\n         # Submit competing blocks via RPC so any reorg should occur before we proceed (no way to wait on inaction for p2p sync)\n         node_sync_via_rpc(self.nodes[0:2])"
      },
      {
        "sha": "165746f1f8d2b99f30fa5a55e6542eeccb353f27",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -47,11 +47,11 @@ def test_utxo_conversion(self):\n         utxos = online_node.listunspent(addresses=[offline_addr])\n         raw = online_node.createrawtransaction([{\"txid\":utxos[0][\"txid\"], \"vout\":utxos[0][\"vout\"]}],[{online_addr:0.9999}])\n         psbt = online_node.walletprocesspsbt(online_node.converttopsbt(raw))[\"psbt\"]\n-        assert(\"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0])\n+        assert \"non_witness_utxo\" in mining_node.decodepsbt(psbt)[\"inputs\"][0]\n \n         # Have the offline node sign the PSBT (which will update the UTXO to segwit)\n         signed_psbt = offline_node.walletprocesspsbt(psbt)[\"psbt\"]\n-        assert(\"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0])\n+        assert \"witness_utxo\" in mining_node.decodepsbt(signed_psbt)[\"inputs\"][0]\n \n         # Make sure we can mine the resulting transaction\n         txid = mining_node.sendrawtransaction(mining_node.finalizepsbt(signed_psbt)[\"hex\"])"
      },
      {
        "sha": "2e39774a92f19062c218f9c36f20382f6e0c9f98",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -25,18 +25,18 @@ def run_test(self):\n         expected_signature = 'INbVnW4e6PeRmsv2Qgu8NuopvrVjkcxob+sX8OcZG0SALhWybUjzMLPdAsXI46YZGb0KQTRii+wWIQzRpG/U+S0='\n         signature = self.nodes[0].signmessagewithprivkey(priv_key, message)\n         assert_equal(expected_signature, signature)\n-        assert(self.nodes[0].verifymessage(address, signature, message))\n+        assert self.nodes[0].verifymessage(address, signature, message)\n \n         self.log.info('test signing with an address with wallet')\n         address = self.nodes[0].getnewaddress()\n         signature = self.nodes[0].signmessage(address, message)\n-        assert(self.nodes[0].verifymessage(address, signature, message))\n+        assert self.nodes[0].verifymessage(address, signature, message)\n \n         self.log.info('test verifying with another address should not work')\n         other_address = self.nodes[0].getnewaddress()\n         other_signature = self.nodes[0].signmessage(other_address, message)\n-        assert(not self.nodes[0].verifymessage(other_address, signature, message))\n-        assert(not self.nodes[0].verifymessage(address, other_signature, message))\n+        assert not self.nodes[0].verifymessage(other_address, signature, message)\n+        assert not self.nodes[0].verifymessage(address, other_signature, message)\n \n if __name__ == '__main__':\n     SignMessagesTest().main()"
      },
      {
        "sha": "d03775f04eb113369440463fb310931f9ca8ca8a",
        "filename": "test/functional/rpc_uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/rpc_uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_uptime.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -23,7 +23,7 @@ def run_test(self):\n     def _test_uptime(self):\n         wait_time = 10\n         self.nodes[0].setmocktime(int(time.time() + wait_time))\n-        assert(self.nodes[0].uptime() >= wait_time)\n+        assert self.nodes[0].uptime() >= wait_time\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "6a17d8480ec9ba2751c62afc7a45900308cb6cb1",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -32,12 +32,12 @@ def byte_to_base58(b, version):\n # TODO: def base58_decode\n \n def keyhash_to_p2pkh(hash, main = False):\n-    assert (len(hash) == 20)\n+    assert len(hash) == 20\n     version = 0 if main else 111\n     return byte_to_base58(hash, version)\n \n def scripthash_to_p2sh(hash, main = False):\n-    assert (len(hash) == 20)\n+    assert len(hash) == 20\n     version = 5 if main else 196\n     return byte_to_base58(hash, version)\n \n@@ -80,11 +80,11 @@ def check_key(key):\n         key = hex_str_to_bytes(key) # Assuming this is hex string\n     if (type(key) is bytes and (len(key) == 33 or len(key) == 65)):\n         return key\n-    assert(False)\n+    assert False\n \n def check_script(script):\n     if (type(script) is str):\n         script = hex_str_to_bytes(script) # Assuming this is hex string\n     if (type(script) is bytes or type(script) is CScript):\n         return script\n-    assert(False)\n+    assert False"
      },
      {
        "sha": "7ac044d0d01eb169501bd250409d5b78f5eb71e9",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -131,7 +131,7 @@ def create_tx_with_script(prevtx, n, script_sig=b\"\", *, amount, script_pub_key=C\n        Can optionally pass scriptPubKey and scriptSig, default is anyone-can-spend output.\n     \"\"\"\n     tx = CTransaction()\n-    assert(n < len(prevtx.vout))\n+    assert n < len(prevtx.vout)\n     tx.vin.append(CTxIn(COutPoint(prevtx.sha256, n), script_sig, 0xffffffff))\n     tx.vout.append(CTxOut(amount, script_pub_key))\n     tx.calc_sha256()\n@@ -214,7 +214,7 @@ def send_to_witness(use_p2wsh, node, utxo, pubkey, encode_p2sh, amount, sign=Tru\n     tx_to_witness = create_witness_tx(node, use_p2wsh, utxo, pubkey, encode_p2sh, amount)\n     if (sign):\n         signed = node.signrawtransactionwithwallet(tx_to_witness)\n-        assert(\"errors\" not in signed or len([\"errors\"]) == 0)\n+        assert \"errors\" not in signed or len([\"errors\"]) == 0\n         return node.sendrawtransaction(signed[\"hex\"])\n     else:\n         if (insert_redeem_script):"
      },
      {
        "sha": "bf80d632cbeb5469c187b2368d44943ee66f7f68",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -129,13 +129,13 @@ def addr_to_hex(addr):\n                 if i == 0 or i == (len(addr)-1): # skip empty component at beginning or end\n                     continue\n                 x += 1 # :: skips to suffix\n-                assert(x < 2)\n+                assert x < 2\n             else: # two bytes per component\n                 val = int(comp, 16)\n                 sub[x].append(val >> 8)\n                 sub[x].append(val & 0xff)\n         nullbytes = 16 - len(sub[0]) - len(sub[1])\n-        assert((x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0))\n+        assert (x == 0 and nullbytes == 0) or (x == 1 and nullbytes > 0)\n         addr = sub[0] + ([0] * nullbytes) + sub[1]\n     else:\n         raise ValueError('Could not parse address %s' % addr)"
      },
      {
        "sha": "959f0023b1db4519fb3249b4b4f78eb055b3e84b",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -144,7 +144,7 @@ def run(self):\n                 thread.start()\n \n     def start(self):\n-        assert(not self.running)\n+        assert not self.running\n         self.running = True\n         self.thread = threading.Thread(None, self.run)\n         self.thread.daemon = True"
      },
      {
        "sha": "b51239ae0f71cf2c8b6b6ba02300be65379f8931",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -264,7 +264,7 @@ def get_rpc_proxy(url, node_number, timeout=None, coveragedir=None):\n     return coverage.AuthServiceProxyWrapper(proxy, coverage_logfile)\n \n def p2p_port(n):\n-    assert(n <= MAX_NODES)\n+    assert n <= MAX_NODES\n     return PORT_MIN + n + (MAX_NODES * PortSeed.n) % (PORT_RANGE - 1 - MAX_NODES)\n \n def rpc_port(n):\n@@ -422,7 +422,7 @@ def gather_inputs(from_node, amount_needed, confirmations_required=1):\n     \"\"\"\n     Return a random set of unspent txouts that are enough to pay amount_needed\n     \"\"\"\n-    assert(confirmations_required >= 0)\n+    assert confirmations_required >= 0\n     utxo = from_node.listunspent(confirmations_required)\n     random.shuffle(utxo)\n     inputs = []\n@@ -500,7 +500,7 @@ def create_confirmed_utxos(fee, node, count):\n         node.generate(1)\n \n     utxos = node.listunspent()\n-    assert(len(utxos) >= count)\n+    assert len(utxos) >= count\n     return utxos\n \n # Create large OP_RETURN txouts that can be appended to a transaction"
      },
      {
        "sha": "f213de1bb05fa0a167c59546556a22546c2666d9",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 28,
        "deletions": 28,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -102,62 +102,62 @@ def get_balances(self, confirmed=True):\n     def test_address(self, node, address, multisig, typ):\n         \"\"\"Run sanity checks on an address.\"\"\"\n         info = self.nodes[node].getaddressinfo(address)\n-        assert(self.nodes[node].validateaddress(address)['isvalid'])\n+        assert self.nodes[node].validateaddress(address)['isvalid']\n         assert_equal(info.get('solvable'), True)\n \n         if not multisig and typ == 'legacy':\n             # P2PKH\n-            assert(not info['isscript'])\n-            assert(not info['iswitness'])\n-            assert('pubkey' in info)\n+            assert not info['isscript']\n+            assert not info['iswitness']\n+            assert 'pubkey' in info\n         elif not multisig and typ == 'p2sh-segwit':\n             # P2SH-P2WPKH\n-            assert(info['isscript'])\n-            assert(not info['iswitness'])\n+            assert info['isscript']\n+            assert not info['iswitness']\n             assert_equal(info['script'], 'witness_v0_keyhash')\n-            assert('pubkey' in info)\n+            assert 'pubkey' in info\n         elif not multisig and typ == 'bech32':\n             # P2WPKH\n-            assert(not info['isscript'])\n-            assert(info['iswitness'])\n+            assert not info['isscript']\n+            assert info['iswitness']\n             assert_equal(info['witness_version'], 0)\n             assert_equal(len(info['witness_program']), 40)\n-            assert('pubkey' in info)\n+            assert 'pubkey' in info\n         elif typ == 'legacy':\n             # P2SH-multisig\n-            assert(info['isscript'])\n+            assert info['isscript']\n             assert_equal(info['script'], 'multisig')\n-            assert(not info['iswitness'])\n-            assert('pubkeys' in info)\n+            assert not info['iswitness']\n+            assert 'pubkeys' in info\n         elif typ == 'p2sh-segwit':\n             # P2SH-P2WSH-multisig\n-            assert(info['isscript'])\n+            assert info['isscript']\n             assert_equal(info['script'], 'witness_v0_scripthash')\n-            assert(not info['iswitness'])\n-            assert(info['embedded']['isscript'])\n+            assert not info['iswitness']\n+            assert info['embedded']['isscript']\n             assert_equal(info['embedded']['script'], 'multisig')\n-            assert(info['embedded']['iswitness'])\n+            assert info['embedded']['iswitness']\n             assert_equal(info['embedded']['witness_version'], 0)\n             assert_equal(len(info['embedded']['witness_program']), 64)\n-            assert('pubkeys' in info['embedded'])\n+            assert 'pubkeys' in info['embedded']\n         elif typ == 'bech32':\n             # P2WSH-multisig\n-            assert(info['isscript'])\n+            assert info['isscript']\n             assert_equal(info['script'], 'multisig')\n-            assert(info['iswitness'])\n+            assert info['iswitness']\n             assert_equal(info['witness_version'], 0)\n             assert_equal(len(info['witness_program']), 64)\n-            assert('pubkeys' in info)\n+            assert 'pubkeys' in info\n         else:\n             # Unknown type\n-            assert(False)\n+            assert False\n \n     def test_desc(self, node, address, multisig, typ, utxo):\n         \"\"\"Run sanity checks on a descriptor reported by getaddressinfo.\"\"\"\n         info = self.nodes[node].getaddressinfo(address)\n-        assert('desc' in info)\n+        assert 'desc' in info\n         assert_equal(info['desc'], utxo['desc'])\n-        assert(self.nodes[node].validateaddress(address)['isvalid'])\n+        assert self.nodes[node].validateaddress(address)['isvalid']\n \n         # Use a ridiculously roundabout way to find the key origin info through\n         # the PSBT logic. However, this does test consistency between the PSBT reported\n@@ -172,11 +172,11 @@ def test_desc(self, node, address, multisig, typ, utxo):\n             key_descs[deriv['pubkey']] = '[' + deriv['master_fingerprint'] + deriv['path'][1:] + ']' + deriv['pubkey']\n \n         # Verify the descriptor checksum against the Python implementation\n-        assert(descsum_check(info['desc']))\n+        assert descsum_check(info['desc'])\n         # Verify that stripping the checksum and recreating it using Python roundtrips\n-        assert(info['desc'] == descsum_create(info['desc'][:-9]))\n+        assert info['desc'] == descsum_create(info['desc'][:-9])\n         # Verify that stripping the checksum and feeding it to getdescriptorinfo roundtrips\n-        assert(info['desc'] == self.nodes[0].getdescriptorinfo(info['desc'][:-9])['descriptor'])\n+        assert info['desc'] == self.nodes[0].getdescriptorinfo(info['desc'][:-9])['descriptor']\n \n         if not multisig and typ == 'legacy':\n             # P2PKH\n@@ -198,7 +198,7 @@ def test_desc(self, node, address, multisig, typ, utxo):\n             assert_equal(info['desc'], descsum_create(\"wsh(multi(2,%s,%s))\" % (key_descs[info['pubkeys'][0]], key_descs[info['pubkeys'][1]])))\n         else:\n             # Unknown type\n-            assert(False)\n+            assert False\n \n     def test_change_output_type(self, node_sender, destinations, expected_type):\n         txid = self.nodes[node_sender].sendmany(dummy=\"\", amounts=dict.fromkeys(destinations, 0.001))"
      },
      {
        "sha": "fb964c718cc12b10030beedf129abbc0a710e074",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -40,8 +40,8 @@ def run_test(self):\n         privkey = w0.dumpprivkey(addr)\n         assert_raises_rpc_error(-4, 'Cannot import private keys to a wallet with private keys disabled', w1.importprivkey, privkey)\n         result = w1.importmulti([{'scriptPubKey': {'address': addr}, 'timestamp': 'now', 'keys': [privkey]}])\n-        assert(not result[0]['success'])\n-        assert('warning' not in result[0])\n+        assert not result[0]['success']\n+        assert 'warning' not in result[0]\n         assert_equal(result[0]['error']['code'], -4)\n         assert_equal(result[0]['error']['message'], 'Cannot import private keys to a wallet with private keys disabled')\n "
      },
      {
        "sha": "22efaed18e671b8d86f99fb46a42a25106391e03",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -21,9 +21,9 @@ def run_test (self):\n         # Make sure wallet is really disabled\n         assert_raises_rpc_error(-32601, 'Method not found', self.nodes[0].getwalletinfo)\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')\n-        assert(x['isvalid'] == False)\n+        assert x['isvalid'] == False\n         x = self.nodes[0].validateaddress('mneYUmWYsuk7kySiURxCi3AGxrAqZxLgPZ')\n-        assert(x['isvalid'] == True)\n+        assert x['isvalid'] == True\n \n         # Checking mining to an address without a wallet. Generating to a valid address should succeed\n         # but generating to an invalid address will fail."
      },
      {
        "sha": "5cf0e613d820e2aa77d28a2661518bdeac6592a2",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -46,10 +46,10 @@ def read_dump(file_name, addrs, script_addrs, hd_master_addr_old):\n                 keypath = None\n                 if keytype == \"inactivehdseed=1\":\n                     # ensure the old master is still available\n-                    assert (hd_master_addr_old == addr)\n+                    assert hd_master_addr_old == addr\n                 elif keytype == \"hdseed=1\":\n                     # ensure we have generated a new hd master key\n-                    assert (hd_master_addr_old != addr)\n+                    assert hd_master_addr_old != addr\n                     hd_master_addr_ret = addr\n                 elif keytype == \"script=1\":\n                     # scripts don't have keypaths"
      },
      {
        "sha": "2b34cff8a6e0caaa57db4034e42f64a4b6509386",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -21,16 +21,16 @@ def run_test(self):\n         addr_before_encrypting = nodes[0].getnewaddress()\n         addr_before_encrypting_data = nodes[0].getaddressinfo(addr_before_encrypting)\n         wallet_info_old = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid'])\n+        assert addr_before_encrypting_data['hdseedid'] == wallet_info_old['hdseedid']\n \n         # Encrypt wallet and wait to terminate\n         nodes[0].encryptwallet('test')\n         # Keep creating keys\n         addr = nodes[0].getnewaddress()\n         addr_data = nodes[0].getaddressinfo(addr)\n         wallet_info = nodes[0].getwalletinfo()\n-        assert(addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid'])\n-        assert(addr_data['hdseedid'] == wallet_info['hdseedid'])\n+        assert addr_before_encrypting_data['hdseedid'] != wallet_info['hdseedid']\n+        assert addr_data['hdseedid'] == wallet_info['hdseedid']\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n \n         # put six (plus 2) new keys in the keypool (100% external-, +100% internal-keys, 1 in min)\n@@ -59,7 +59,7 @@ def run_test(self):\n         addr.add(nodes[0].getnewaddress())\n         addr.add(nodes[0].getnewaddress())\n         addr.add(nodes[0].getnewaddress())\n-        assert(len(addr) == 6)\n+        assert len(addr) == 6\n         # the next one should fail\n         assert_raises_rpc_error(-12, \"Error: Keypool ran out, please call keypoolrefill first\", nodes[0].getnewaddress)\n "
      },
      {
        "sha": "8300d127528348a444ca1a828cc2f888b7fb96ef",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -55,11 +55,11 @@ def run_test(self):\n             # Make sure we're creating the outputs we expect\n             address_details = self.nodes[idx].validateaddress(addr_extpool)\n             if i == 0:\n-                assert(not address_details[\"isscript\"] and not address_details[\"iswitness\"])\n+                assert not address_details[\"isscript\"] and not address_details[\"iswitness\"]\n             elif i == 1:\n-                assert(address_details[\"isscript\"] and not address_details[\"iswitness\"])\n+                assert address_details[\"isscript\"] and not address_details[\"iswitness\"]\n             else:\n-                assert(not address_details[\"isscript\"] and address_details[\"iswitness\"])\n+                assert not address_details[\"isscript\"] and address_details[\"iswitness\"]\n \n \n             self.log.info(\"Send funds to wallet\")"
      },
      {
        "sha": "459dbc6612cd12467f40dda661bc86bcd82c1fbb",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -125,7 +125,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # 1. Chain a few transactions that don't opt-in.\n         txid_1 = self.nodes[0].sendtoaddress(self.nodes[1].getnewaddress(), 1)\n-        assert(not is_opt_in(self.nodes[0], txid_1))\n+        assert not is_opt_in(self.nodes[0], txid_1)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n         sync_mempools(self.nodes)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_1}, {\"bip125-replaceable\": \"no\"})\n@@ -145,7 +145,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         txid_2 = self.nodes[1].sendrawtransaction(tx2_signed)\n \n         # ...and check the result\n-        assert(not is_opt_in(self.nodes[1], txid_2))\n+        assert not is_opt_in(self.nodes[1], txid_2)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n         sync_mempools(self.nodes)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_2}, {\"bip125-replaceable\": \"no\"})\n@@ -161,7 +161,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_signed = self.nodes[0].signrawtransactionwithwallet(tx3)['hex']\n         txid_3 = self.nodes[0].sendrawtransaction(tx3_signed)\n \n-        assert(is_opt_in(self.nodes[0], txid_3))\n+        assert is_opt_in(self.nodes[0], txid_3)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n         sync_mempools(self.nodes)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_3}, {\"bip125-replaceable\": \"yes\"})\n@@ -175,7 +175,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx4_signed = self.nodes[1].signrawtransactionwithwallet(tx4)[\"hex\"]\n         txid_4 = self.nodes[1].sendrawtransaction(tx4_signed)\n \n-        assert(not is_opt_in(self.nodes[1], txid_4))\n+        assert not is_opt_in(self.nodes[1], txid_4)\n         assert_array_result(self.nodes[1].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n         sync_mempools(self.nodes)\n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"yes\"})\n@@ -186,7 +186,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n         tx3_b = tx3_b.serialize().hex()\n         tx3_b_signed = self.nodes[0].signrawtransactionwithwallet(tx3_b)['hex']\n         txid_3b = self.nodes[0].sendrawtransaction(tx3_b_signed, True)\n-        assert(is_opt_in(self.nodes[0], txid_3b))\n+        assert is_opt_in(self.nodes[0], txid_3b)\n \n         assert_array_result(self.nodes[0].listtransactions(), {\"txid\": txid_4}, {\"bip125-replaceable\": \"unknown\"})\n         sync_mempools(self.nodes)\n@@ -202,7 +202,7 @@ def get_unconfirmed_utxo_entry(node, txid_to_match):\n \n         # After mining a transaction, it's no longer BIP125-replaceable\n         self.nodes[0].generate(1)\n-        assert(txid_3b not in self.nodes[0].getrawmempool())\n+        assert txid_3b not in self.nodes[0].getrawmempool()\n         assert_equal(self.nodes[0].gettransaction(txid_3b)[\"bip125-replaceable\"], \"no\")\n         assert_equal(self.nodes[0].gettransaction(txid_4)[\"bip125-replaceable\"], \"unknown\")\n "
      },
      {
        "sha": "459b7fc4131750051cb6e42155b8eea2fad06a72",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 8,
        "deletions": 8,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa0e65b77264476c61832542ab1a9dbedcc738ea/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "patch": "@@ -39,7 +39,7 @@ def parse_function_calls(function_name, source_code):\n     >>> len(parse_function_calls(\"foo\", \"#define FOO foo();\"))\n     0\n     \"\"\"\n-    assert(type(function_name) is str and type(source_code) is str and function_name)\n+    assert type(function_name) is str and type(source_code) is str and function_name\n     lines = [re.sub(\"// .*\", \" \", line).strip()\n              for line in source_code.split(\"\\n\")\n              if not line.strip().startswith(\"#\")]\n@@ -53,7 +53,7 @@ def normalize(s):\n     >>> normalize(\"  /* nothing */   foo\\tfoo  /* bar */  foo     \")\n     'foo foo foo'\n     \"\"\"\n-    assert(type(s) is str)\n+    assert type(s) is str\n     s = s.replace(\"\\n\", \" \")\n     s = s.replace(\"\\t\", \" \")\n     s = re.sub(\"/\\*.*?\\*/\", \" \", s)\n@@ -77,7 +77,7 @@ def escape(s):\n     >>> escape(r'foo \\\\t foo \\\\n foo \\\\\\\\ foo \\\\ foo \\\\\"bar\\\\\"')\n     'foo [escaped-tab] foo [escaped-newline] foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo [escaped-quote]bar[escaped-quote]'\n     \"\"\"\n-    assert(type(s) is str)\n+    assert type(s) is str\n     for raw_value, escaped_value in ESCAPE_MAP.items():\n         s = s.replace(raw_value, escaped_value)\n     return s\n@@ -92,7 +92,7 @@ def unescape(s):\n     >>> unescape(\"foo [escaped-tab] foo [escaped-newline] foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo [escaped-quote]bar[escaped-quote]\")\n     'foo \\\\\\\\t foo \\\\\\\\n foo \\\\\\\\\\\\\\\\ foo \\\\\\\\ foo \\\\\\\\\"bar\\\\\\\\\"'\n     \"\"\"\n-    assert(type(s) is str)\n+    assert type(s) is str\n     for raw_value, escaped_value in ESCAPE_MAP.items():\n         s = s.replace(escaped_value, raw_value)\n     return s\n@@ -151,10 +151,10 @@ def parse_function_call_and_arguments(function_name, function_call):\n     >>> parse_function_call_and_arguments(\"strprintf\", 'strprintf(\"%s (%d)\", foo>foo<1,2>(1,2),err)');\n     ['strprintf(', '\"%s (%d)\",', ' foo>foo<1,2>(1,2),', 'err', ')']\n     \"\"\"\n-    assert(type(function_name) is str and type(function_call) is str and function_name)\n+    assert type(function_name) is str and type(function_call) is str and function_name\n     remaining = normalize(escape(function_call))\n     expected_function_call = \"{}(\".format(function_name)\n-    assert(remaining.startswith(expected_function_call))\n+    assert remaining.startswith(expected_function_call)\n     parts = [expected_function_call]\n     remaining = remaining[len(expected_function_call):]\n     open_parentheses = 1\n@@ -213,7 +213,7 @@ def parse_string_content(argument):\n     >>> parse_string_content('1 2 3')\n     ''\n     \"\"\"\n-    assert(type(argument) is str)\n+    assert type(argument) is str\n     string_content = \"\"\n     in_string = False\n     for char in normalize(escape(argument)):\n@@ -240,7 +240,7 @@ def count_format_specifiers(format_string):\n     >>> count_format_specifiers(\"foo %d bar %i foo %% foo %*d foo\")\n     4\n     \"\"\"\n-    assert(type(format_string) is str)\n+    assert type(format_string) is str\n     format_string = format_string.replace('%%', 'X')\n     n = 0\n     in_specifier = False"
      }
    ]
  },
  {
    "sha": "faa7cdf764a651975fa3c780df7df206a08254c2",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWE3Y2RmNzY0YTY1MTk3NWZhM2M3ODBkZjdkZjIwNmEwODI1NGMy",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-02-21T01:03:13Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T15:58:35Z"
      },
      "message": "scripted-diff: Update copyright in ./test\n\n-BEGIN VERIFY SCRIPT-\n./contrib/devtools/copyright_header.py update ./test/\n-END VERIFY SCRIPT-",
      "tree": {
        "sha": "0c728cfbfd4ecf60d7a800e5ff2a9b298f81cfb8",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0c728cfbfd4ecf60d7a800e5ff2a9b298f81cfb8"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/faa7cdf764a651975fa3c780df7df206a08254c2",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJceqgrAAoJEM4rdWl+aaVIFXQMAJX+3fRPcYSUf2lcTvgc0BRA\nVg+Xnn+CV7Q9NFB8Kw0wMgUEafx+2ANuJCy/A7t0ySSw4hzHk8WzNUckeNO0+HF0\nWOKX+yN6APSHE1wbLbdOyoQHSNsuhXHFmRXbBkGGBYSkLFjjpXNz+UmirtY7tIZ0\nJzQlSuFMvP/zc+sj4kNPMtJqlTgPdo9TxZrWpvo63KA87Rd7sMB+k57U38W0a/gU\n7190mq0Pdm8/K34VTPwdkViPqcvmuQy1gCAnubu/oFiXatlzS9tmefMGkxR0lnUv\n1GNBbu5qXqwvA2AFsO0j9DOylPlWlXdxqlhwROcXP/cG/vM/zupJ3PZ/7FjPHCxE\nylL76o6GoKPynROTKQtdsXp1I3YWpc0dRMpeCobv3cwdy4zzVPw/PWUHGv+fhs1B\nIpkoSWjMUtVIQSnlNTTjQuXSGrDUSuxPuo1cEVfhyu5XnOi00OpMkZfpoy0YBmwt\nlfk+HeVnolhXa+guos7rRHWgKVHL56Zlwlh2BOTTnQ==\n=vmPw\n-----END PGP SIGNATURE-----",
        "payload": "tree 0c728cfbfd4ecf60d7a800e5ff2a9b298f81cfb8\nparent fa0e65b77264476c61832542ab1a9dbedcc738ea\nauthor MarcoFalke <falke.marco@gmail.com> 1550710993 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551542315 -0500\n\nscripted-diff: Update copyright in ./test\n\n-BEGIN VERIFY SCRIPT-\n./contrib/devtools/copyright_header.py update ./test/\n-END VERIFY SCRIPT-\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa7cdf764a651975fa3c780df7df206a08254c2",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/faa7cdf764a651975fa3c780df7df206a08254c2",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa7cdf764a651975fa3c780df7df206a08254c2/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa0e65b77264476c61832542ab1a9dbedcc738ea",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa0e65b77264476c61832542ab1a9dbedcc738ea"
      }
    ],
    "stats": {
      "total": 142,
      "additions": 71,
      "deletions": 71
    },
    "files": [
      {
        "sha": "0e70ebba6dcb24d4b3f9189a284cf48c3e60f0b5",
        "filename": "test/functional/example_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/example_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/example_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/example_test.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"An example functional test"
      },
      {
        "sha": "e7e4f84ad997d5234a74f6f905db710212a8a569",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test logic for skipping signature validation on old blocks."
      },
      {
        "sha": "21c832c1a928acfb0e1317da9ea260495002bb09",
        "filename": "test/functional/feature_bip68_sequence.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_bip68_sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_bip68_sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_bip68_sequence.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP68 implementation.\"\"\""
      },
      {
        "sha": "070242c1df2181fb56bbd2d1139024d71152ae91",
        "filename": "test/functional/feature_cltv.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_cltv.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP65 (CHECKLOCKTIMEVERIFY)."
      },
      {
        "sha": "5fe3e3a849fc01cdd916ce336010bb4e10374463",
        "filename": "test/functional/feature_config_args.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_config_args.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_config_args.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_config_args.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test various command line arguments and configuration file parameters.\"\"\""
      },
      {
        "sha": "ecc68217bb904cf61f92ef0a326083fc7ab95829",
        "filename": "test/functional/feature_csv_activation.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_csv_activation.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_csv_activation.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_csv_activation.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test activation of the first version bits soft fork."
      },
      {
        "sha": "4ddfd80b079711f25b48f92fd9c85f0c95b7256a",
        "filename": "test/functional/feature_dersig.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_dersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_dersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dersig.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test BIP66 (DER SIG)."
      },
      {
        "sha": "13cf95155028b940dfbc1327da1535a8c7291f99",
        "filename": "test/functional/feature_notifications.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_notifications.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_notifications.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_notifications.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the -alertnotify, -blocknotify and -walletnotify options.\"\"\""
      },
      {
        "sha": "e5d2f8dc46ae32c504d4942a1d6dfe01fcf96f0e",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test NULLDUMMY softfork."
      },
      {
        "sha": "be323d355e6f1a18c9aaa15fe87f21725eed4ea8",
        "filename": "test/functional/feature_proxy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_proxy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_proxy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_proxy.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoind with different proxy configuration."
      },
      {
        "sha": "12da2655eed60b124da6c7973d5fa6bc4c29d554",
        "filename": "test/functional/feature_pruning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_pruning.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the pruning code."
      },
      {
        "sha": "a9c7226e46209675d9f84489102ae002e5c79ab2",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RBF code.\"\"\""
      },
      {
        "sha": "0128af8b65fc8ab09add59c5db4a6c8c8af6df83",
        "filename": "test/functional/feature_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_segwit.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the SegWit changeover logic.\"\"\""
      },
      {
        "sha": "071392514116706834e77c1d460356f1b0356846",
        "filename": "test/functional/feature_versionbits_warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_versionbits_warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/feature_versionbits_warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_versionbits_warning.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test version bits warning system."
      },
      {
        "sha": "f44fc768dc9f0c04657aafc59fd41de398a2832d",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-cli\"\"\""
      },
      {
        "sha": "bb868d7115e0ef4ceb64de01acc36db4e83b38dd",
        "filename": "test/functional/interface_http.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_http.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_http.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_http.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RPC HTTP basics.\"\"\""
      },
      {
        "sha": "a036dfc790abb5bf64b7b58db94be1f1d962fd34",
        "filename": "test/functional/interface_rest.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rest.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the REST API.\"\"\""
      },
      {
        "sha": "67ab1f0130a90338d9ce0ea82e3201aa8b9984af",
        "filename": "test/functional/interface_rpc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_rpc.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Tests some generic aspects of the RPC interface.\"\"\""
      },
      {
        "sha": "8e58c85c153831f4b0d3432df1f10b6f42c14f84",
        "filename": "test/functional/interface_zmq.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_zmq.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/interface_zmq.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_zmq.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the ZMQ notification interface.\"\"\""
      },
      {
        "sha": "fc811190505256e3049ba6ae1a47ef784585109d",
        "filename": "test/functional/mempool_accept.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_accept.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_accept.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_accept.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool acceptance of raw transactions.\"\"\""
      },
      {
        "sha": "351b27e94a0a2d999cc833624dfbfc6788e15cc4",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test mempool limiting together/eviction with the wallet.\"\"\""
      },
      {
        "sha": "7cee215d54eb09afe039660783d1dbb5c68fdfbc",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descendant package tracking code.\"\"\""
      },
      {
        "sha": "187c9026f6dcf0924801fcbe423dc41207b730f4",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\""
      },
      {
        "sha": "445ec124ce2b450cf0baf181a1a1fd59c315b32b",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test longpolling with getblocktemplate.\"\"\""
      },
      {
        "sha": "687a5b527bfc3ac55506bc6950219a7f64241098",
        "filename": "test/functional/mining_prioritisetransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mining_prioritisetransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/mining_prioritisetransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_prioritisetransaction.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the prioritisetransaction mining RPC.\"\"\""
      },
      {
        "sha": "82a14af9da8c78445331f76e58d1671806b0b836",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test compact blocks (BIP 152)."
      },
      {
        "sha": "b9863cf215561a56616fa8a874228b9ad8ceaf08",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of feefilter messages.\"\"\""
      },
      {
        "sha": "06049db54cc69c74cc5f1c5cfec2bde0fe8e4445",
        "filename": "test/functional/p2p_leak.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_leak.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_leak.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test message sending before handshake completion."
      },
      {
        "sha": "73bfdc868cd49de0bede99e88b2d5e2dd3ccfa0b",
        "filename": "test/functional/p2p_segwit.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_segwit.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test segwit transactions and blocks on P2P network.\"\"\""
      },
      {
        "sha": "027852809b43982866ae001a9b7436188f2585a1",
        "filename": "test/functional/p2p_unrequested_blocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_unrequested_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/p2p_unrequested_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_unrequested_blocks.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test processing of unrequested blocks."
      },
      {
        "sha": "acc7cd811c549340e61e49bb5bd71fecbe941489",
        "filename": "test/functional/rpc_bind.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_bind.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_bind.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_bind.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test running bitcoind with the -rpcbind and -rpcallowip options.\"\"\""
      },
      {
        "sha": "facb05b54ce387f3272c6692a130916e9acb9cba",
        "filename": "test/functional/rpc_blockchain.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_blockchain.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPCs related to blockchainstate."
      },
      {
        "sha": "01b8cb1854d9e799ce7394d31573730d7d19ab23",
        "filename": "test/functional/rpc_decodescript.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_decodescript.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test decoding scripts via decodescript RPC command.\"\"\""
      },
      {
        "sha": "9a21998d113fb277ececa01d9727bb7501f4cd93",
        "filename": "test/functional/rpc_deprecated.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_deprecated.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_deprecated.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deprecated.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test deprecation of RPC calls.\"\"\""
      },
      {
        "sha": "19846946921abb6cfec70bbb1437f514d85458cb",
        "filename": "test/functional/rpc_deriveaddresses.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_deriveaddresses.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_deriveaddresses.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_deriveaddresses.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the deriveaddresses rpc call.\"\"\""
      },
      {
        "sha": "d89fd6461fa5f3f9909c3781ef3a77093932f4f6",
        "filename": "test/functional/rpc_fundrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_fundrawtransaction.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the fundrawtransaction RPC.\"\"\""
      },
      {
        "sha": "e17a8f6421182b5e42107224d18c2db312c7fb07",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "ecac9c2f82d5839df28ff56ec7280289bd12f3eb",
        "filename": "test/functional/rpc_named_arguments.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_named_arguments.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_named_arguments.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_named_arguments.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test using named arguments for RPCs.\"\"\""
      },
      {
        "sha": "da228df9c3003f76b4c6d12ba701f2640a281e42",
        "filename": "test/functional/rpc_preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_preciousblock.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the preciousblock RPC.\"\"\""
      },
      {
        "sha": "885e07c4dd4c0660bacec1d2a3c74b4f69a069e1",
        "filename": "test/functional/rpc_psbt.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_psbt.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_psbt.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_psbt.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the Partially Signed Transaction RPCs."
      },
      {
        "sha": "fba9e75268b3097bd39ac8bfc1ab98c6faf526cb",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the rawtransaction RPCs."
      },
      {
        "sha": "63464779227bf3b91ba313c972c4bc20d1f00d38",
        "filename": "test/functional/rpc_scantxoutset.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_scantxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_scantxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_scantxoutset.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the scantxoutset rpc call.\"\"\""
      },
      {
        "sha": "0cb3ce42151d2dc83c0d03b968c6950e1b1ba8f1",
        "filename": "test/functional/rpc_signmessage.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_signmessage.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_signmessage.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signmessage.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test RPC commands for signing and verifying messages.\"\"\""
      },
      {
        "sha": "dcafc828573f08efe3bf94056990f23b5998ddf0",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\""
      },
      {
        "sha": "e86f91b1d0a112cc4951e79e05ebe82da9bcfbe7",
        "filename": "test/functional/rpc_uptime.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_uptime.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/rpc_uptime.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_uptime.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the RPC call related to the uptime command."
      },
      {
        "sha": "f36cffe957d7f7078f915f1e35298beb45cb497f",
        "filename": "test/functional/test_framework/address.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/address.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/address.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/address.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Encode and decode BASE58, P2PKH and P2SH addresses.\"\"\""
      },
      {
        "sha": "7cf51d9223ac9b7caf0e8b5605a03e0042670d9a",
        "filename": "test/functional/test_framework/messages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/messages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/messages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/messages.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\n # Copyright (c) 2010 ArtForz -- public domain half-a-node\n # Copyright (c) 2012 Jeff Garzik\n-# Copyright (c) 2010-2018 The Bitcoin Core developers\n+# Copyright (c) 2010-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin test framework primitive and message structures"
      },
      {
        "sha": "52a840941b8be8839cfb895749f939a7e0ef6dd1",
        "filename": "test/functional/test_framework/mininode.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/mininode.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/mininode.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/mininode.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,7 +1,7 @@\n #!/usr/bin/env python3\n # Copyright (c) 2010 ArtForz -- public domain half-a-node\n # Copyright (c) 2012 Jeff Garzik\n-# Copyright (c) 2010-2018 The Bitcoin Core developers\n+# Copyright (c) 2010-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Bitcoin P2P network half-a-node."
      },
      {
        "sha": "c98424e8e278026bdea2729b4c26f604fe66f5a0",
        "filename": "test/functional/test_framework/netutil.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/netutil.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/netutil.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/netutil.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Linux network utilities."
      },
      {
        "sha": "384062b8084fe78d395d670326d9744384014376",
        "filename": "test/functional/test_framework/script.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/script.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/script.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/script.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Functionality to build scripts, as well as SignatureHash()."
      },
      {
        "sha": "799b1c74b8b622f7bfaf6cf184357046b91dfb9c",
        "filename": "test/functional/test_framework/socks5.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/socks5.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/socks5.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/socks5.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Dummy Socks5 server for testing.\"\"\""
      },
      {
        "sha": "15d2e08c93ce5564a3b14aebac75a2af1afdea7a",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Base class for RPC testing.\"\"\""
      },
      {
        "sha": "ec5d3b267e35e833fca362ecfe3f7805ebb0bf69",
        "filename": "test/functional/test_framework/test_node.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/test_node.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/test_node.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_node.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Class for bitcoind node under test\"\"\""
      },
      {
        "sha": "034ed893f4d87be17995645ab393803dd614c3a1",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Helpful routines for regression testing.\"\"\""
      },
      {
        "sha": "a0d9f820e69b85713902cc66dae85c042d6a7988",
        "filename": "test/functional/test_runner.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_runner.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/test_runner.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_runner.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Run regression test suite."
      },
      {
        "sha": "a44aa5a18e3e00dc0c32577ea224538222da011d",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that the wallet can send and receive using all combinations of address types."
      },
      {
        "sha": "fc752e5ac0da7087d1f1908fd4911c5306a1caca",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the bumpfee RPC."
      },
      {
        "sha": "0b584a0bb2933f01d36f7c141f33217b05f8f1ae",
        "filename": "test/functional/wallet_create_tx.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_create_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_create_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_create_tx.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "8ec4b98b6e7e13248aa6c1b73597a65af3e812e5",
        "filename": "test/functional/wallet_createwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_createwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_createwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_createwallet.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test createwallet arguments."
      },
      {
        "sha": "7c2ec56b5aaba57622633df010a7d24a856a0feb",
        "filename": "test/functional/wallet_disable.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_disable.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_disable.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_disable.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test a node with the -disablewallet option."
      },
      {
        "sha": "53edf710b9a2ff88107062c033541163233a7480",
        "filename": "test/functional/wallet_dump.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_dump.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the dumpwallet RPC.\"\"\""
      },
      {
        "sha": "97172d8b82d1d9529941906e01d7117f33f6ca5a",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2016-2018 The Bitcoin Core developers\n+# Copyright (c) 2016-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test Hierarchical Deterministic wallet function.\"\"\""
      },
      {
        "sha": "5bfbaa2f0b602457a05c35ef0256bda41a49ec5c",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the importmulti RPC."
      },
      {
        "sha": "e3aeb61197be5e642835b5d3ffd73014611e0788",
        "filename": "test/functional/wallet_keypool.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet keypool and interaction with wallet encryption/locking.\"\"\""
      },
      {
        "sha": "e099bab6a3d7315d7fab7903d46f8c9f575f2fb3",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test HD Wallet keypool restore function."
      },
      {
        "sha": "f8268fab352acee5e0cd179623f4c8fd10da14b3",
        "filename": "test/functional/wallet_listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listtransactions.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the listtransactions API.\"\"\""
      },
      {
        "sha": "984ffab5a437f99b167810f238b78e46ce1c34f1",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test multiwallet."
      },
      {
        "sha": "af1b321a07b29ed9cc76241e0f7f992d79363d1a",
        "filename": "test/functional/wallet_txn_clone.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_clone.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there are cloned transactions with malleated scriptsigs.\"\"\""
      },
      {
        "sha": "8dcfd74f56098447aa6c42194335fbc88264420d",
        "filename": "test/functional/wallet_txn_doublespend.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/functional/wallet_txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_txn_doublespend.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2014-2018 The Bitcoin Core developers\n+# Copyright (c) 2014-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the wallet accounts properly when there is a double-spend conflict.\"\"\""
      },
      {
        "sha": "3b05d5055cf1da072017458e0a698a487da1dafe",
        "filename": "test/lint/check-doc.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/lint/check-doc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/lint/check-doc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/check-doc.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2015-2018 The Bitcoin Core developers\n+# Copyright (c) 2015-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n "
      },
      {
        "sha": "263962f580778dc66608c72b85694d72b24c33cc",
        "filename": "test/lint/lint-format-strings.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/faa7cdf764a651975fa3c780df7df206a08254c2/test/lint/lint-format-strings.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/faa7cdf764a651975fa3c780df7df206a08254c2/test/lint/lint-format-strings.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/lint/lint-format-strings.py?ref=faa7cdf764a651975fa3c780df7df206a08254c2",
        "patch": "@@ -1,6 +1,6 @@\n #!/usr/bin/env python3\n #\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n #"
      }
    ]
  },
  {
    "sha": "dddd1d05d3df06865f5e0b1442d7425c0955de4e",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkZGRkMWQwNWQzZGYwNjg2NWY1ZTBiMTQ0MmQ3NDI1YzA5NTVkZTRl",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T17:08:41Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-02T17:06:26Z"
      },
      "message": ".python-version: Specify full version 3.5.6",
      "tree": {
        "sha": "3d0d4f2289313d962b7944246cc66729bd45713a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3d0d4f2289313d962b7944246cc66729bd45713a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/dddd1d05d3df06865f5e0b1442d7425c0955de4e",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcergSAAoJEM4rdWl+aaVIGDsMAL145EQPM0OK5MOUHit0sXGk\naopkvsfO3o+grP/3JsXLNzLw1Szm2ZlBICYDqmYmDwXtd1BFsFVYORH84BGIHou+\nz4czUz22zy1UZtvnTjMS+NnkwvPve62KZ4Lg+/8NzveYf++iQPHG1Q/SqK2AMRzQ\n418P39UUaAO+82zQsofoBgZi88bSFypL9NGAC8FF3T40q6TIhDJ2kF5ovZCJBt0m\nL5And6LCnj4pAuexJAkSJjB5XK9cfJ9/RAMmW9gOMw9S1VCzyxAxsCyTQv4vDM/f\nzzSKQoD6rssR8eQsT0yJL8eCH4whhxgDVi8kcUk0V130tNVjjgCEc4UNQXf6pesA\nly2mJCJpGgtwdbtoFpBGU8dYHxnrpKsOdVzdHOlTr/gYfvAaMsh5254TypvlbI+p\nSARvYt7pkH7KgOdV5P0GmUAwx5ehRnM1q4hsjTCXL3+9n28osxR3/q1ETVJbd8i8\nliDb8ZZZt7IZFHiZXCl67BBFKP2XuA+P4P9xogdqZA==\n=0okv\n-----END PGP SIGNATURE-----",
        "payload": "tree 3d0d4f2289313d962b7944246cc66729bd45713a\nparent faa7cdf764a651975fa3c780df7df206a08254c2\nauthor MarcoFalke <falke.marco@gmail.com> 1551546521 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551546386 -0500\n\n.python-version: Specify full version 3.5.6\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd1d05d3df06865f5e0b1442d7425c0955de4e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd1d05d3df06865f5e0b1442d7425c0955de4e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd1d05d3df06865f5e0b1442d7425c0955de4e/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "faa7cdf764a651975fa3c780df7df206a08254c2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/faa7cdf764a651975fa3c780df7df206a08254c2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/faa7cdf764a651975fa3c780df7df206a08254c2"
      }
    ],
    "stats": {
      "total": 2,
      "additions": 1,
      "deletions": 1
    },
    "files": [
      {
        "sha": "c49282585a030b902316d2b71a73b15b5840aaa2",
        "filename": ".python-version",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/dddd1d05d3df06865f5e0b1442d7425c0955de4e/.python-version",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/dddd1d05d3df06865f5e0b1442d7425c0955de4e/.python-version",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/.python-version?ref=dddd1d05d3df06865f5e0b1442d7425c0955de4e",
        "patch": "@@ -1 +1 @@\n-3.5\n+3.5.6"
      }
    ]
  },
  {
    "sha": "fa2797808ea0f055d1df7977deee80cc63e7b323",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTI3OTc4MDhlYTBmMDU1ZDFkZjc5NzdkZWVlODBjYzYzZTdiMzIz",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T23:21:51Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-03-04T23:17:29Z"
      },
      "message": "test: Remove python3.4 workaround in feature_dbcrash",
      "tree": {
        "sha": "fcd814e3867891d39e3173e2c4300cca1b76695c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/fcd814e3867891d39e3173e2c4300cca1b76695c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2797808ea0f055d1df7977deee80cc63e7b323",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJcfbIJAAoJEM4rdWl+aaVIYSwMAIZWEybq6BHcuH8FJ9Ye/27h\nQ6FOwOEsENTdNuWSaLYcDmSQrpOgSMMjrrc7sZRtGfrzxXge5Dw1ILOjS49DUagU\n7wwAbIQw5lZU0mg3T2GS0LSBTOi25r4O+3+cCXSuuk2SXFt7oGEyXqVKEa3wLgOn\nSkWWQ8JLLaSSCUAAfNGiJCw4DBSiXpj5lApmzYwFaeIwI6eGuBdoCBojCxjXaRWs\nJKuc2NBwu9a02L3aqpXwHkKnYYxoR6iF6cWtQ5RGBl3SzwOngI0lLrhywKIt6ZlM\nxHH/hjBqJBHZi4uc3m4L/UeLU0d4romyCSHa5FDI+VaFM0BxQRPrEJnq3KlAuHQu\nWvGViDMPqbPujswMbGeLpAAMQgbQXKz3dEZqOL44XV/VBSIKrrhOQJiIyULzjwpX\ncLc+cY2TuNBfMbKY67aHOAid2d9e6G6MbK0BfR7yGjA6ov0bVAFxbbFILePMybvF\n5hB6tePmeiELiJje/B29u5aQ9eph6USh07uZKv5uNg==\n=k1jC\n-----END PGP SIGNATURE-----",
        "payload": "tree fcd814e3867891d39e3173e2c4300cca1b76695c\nparent dddd1d05d3df06865f5e0b1442d7425c0955de4e\nauthor MarcoFalke <falke.marco@gmail.com> 1551741711 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1551741449 -0500\n\ntest: Remove python3.4 workaround in feature_dbcrash\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2797808ea0f055d1df7977deee80cc63e7b323",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2797808ea0f055d1df7977deee80cc63e7b323",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2797808ea0f055d1df7977deee80cc63e7b323/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "dddd1d05d3df06865f5e0b1442d7425c0955de4e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/dddd1d05d3df06865f5e0b1442d7425c0955de4e",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/dddd1d05d3df06865f5e0b1442d7425c0955de4e"
      }
    ],
    "stats": {
      "total": 17,
      "additions": 2,
      "deletions": 15
    },
    "files": [
      {
        "sha": "62062926a6e7690e7c6a18f4b99f362c9070f4d4",
        "filename": "test/functional/feature_dbcrash.py",
        "status": "modified",
        "additions": 2,
        "deletions": 15,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2797808ea0f055d1df7977deee80cc63e7b323/test/functional/feature_dbcrash.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2797808ea0f055d1df7977deee80cc63e7b323/test/functional/feature_dbcrash.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_dbcrash.py?ref=fa2797808ea0f055d1df7977deee80cc63e7b323",
        "patch": "@@ -1,5 +1,5 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2017-2018 The Bitcoin Core developers\n+# Copyright (c) 2017-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test recovery from a crash during chainstate writing.\n@@ -28,18 +28,12 @@\n import errno\n import http.client\n import random\n-import sys\n import time\n \n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, create_confirmed_utxos, hex_str_to_bytes\n \n-HTTP_DISCONNECT_ERRORS = [http.client.CannotSendRequest]\n-try:\n-    HTTP_DISCONNECT_ERRORS.append(http.client.RemoteDisconnected)\n-except AttributeError:\n-    pass\n \n class ChainstateWriteCrashTest(BitcoinTestFramework):\n     def set_test_params(self):\n@@ -110,14 +104,7 @@ def submit_block_catch_error(self, node_index, block):\n         try:\n             self.nodes[node_index].submitblock(block)\n             return True\n-        except http.client.BadStatusLine as e:\n-            # Prior to 3.5 BadStatusLine('') was raised for a remote disconnect error.\n-            if sys.version_info[0] == 3 and sys.version_info[1] < 5 and e.line == \"''\":\n-                self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n-                return False\n-            else:\n-                raise\n-        except tuple(HTTP_DISCONNECT_ERRORS) as e:\n+        except (http.client.CannotSendRequest, http.client.RemoteDisconnected) as e:\n             self.log.debug(\"node %d submitblock raised exception: %s\", node_index, e)\n             return False\n         except OSError as e:"
      }
    ]
  }
]