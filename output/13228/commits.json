[
  {
    "sha": "a7b295e91e4917495efe59948bae0ea554b7674c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphN2IyOTVlOTFlNDkxNzQ5NWVmZTU5OTQ4YmFlMGVhNTU0Yjc2NzRj",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-02T18:12:37Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-05-16T23:55:47Z"
      },
      "message": "Add circular dependencies script",
      "tree": {
        "sha": "98a1cd4b61d53ed5d613a2f5d81ce72bce629d36",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/98a1cd4b61d53ed5d613a2f5d81ce72bce629d36"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a7b295e91e4917495efe59948bae0ea554b7674c",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b295e91e4917495efe59948bae0ea554b7674c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a7b295e91e4917495efe59948bae0ea554b7674c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a7b295e91e4917495efe59948bae0ea554b7674c/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ffa86af45363d6fb09c67e6b9a20b3e895791d6a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ffa86af45363d6fb09c67e6b9a20b3e895791d6a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ffa86af45363d6fb09c67e6b9a20b3e895791d6a"
      }
    ],
    "stats": {
      "total": 90,
      "additions": 90,
      "deletions": 0
    },
    "files": [
      {
        "sha": "7ac8aa39d3ce0093e4c3d38989bc589952f7f4e1",
        "filename": "contrib/devtools/README.md",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b295e91e4917495efe59948bae0ea554b7674c/contrib/devtools/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b295e91e4917495efe59948bae0ea554b7674c/contrib/devtools/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/README.md?ref=a7b295e91e4917495efe59948bae0ea554b7674c",
        "patch": "@@ -194,3 +194,14 @@ It will do the following automatically:\n - add missing translations to the build system (TODO)\n \n See doc/translation-process.md for more information.\n+\n+circular-dependencies.py\n+========================\n+\n+Run this script from the root of the source tree (`src/`) to find circular dependencies in the source code.\n+This looks only at which files include other files, treating the `.cpp` and `.h` file as one unit.\n+\n+Example usage:\n+\n+    cd .../src\n+    ../contrib/devtools/circular-dependencies.py {*,*/*,*/*/*}.{h,cpp}"
      },
      {
        "sha": "d544d5c371342a4972a13b3f95e764f957d6754d",
        "filename": "contrib/devtools/circular-dependencies.py",
        "status": "added",
        "additions": 79,
        "deletions": 0,
        "changes": 79,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a7b295e91e4917495efe59948bae0ea554b7674c/contrib/devtools/circular-dependencies.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a7b295e91e4917495efe59948bae0ea554b7674c/contrib/devtools/circular-dependencies.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/contrib/devtools/circular-dependencies.py?ref=a7b295e91e4917495efe59948bae0ea554b7674c",
        "patch": "@@ -0,0 +1,79 @@\n+#!/usr/bin/env python3\n+\n+import sys\n+import re\n+\n+MAPPING = {\n+    'core_read.cpp': 'core_io.cpp',\n+    'core_write.cpp': 'core_io.cpp',\n+}\n+\n+def module_name(path):\n+    if path in MAPPING:\n+        path = MAPPING[path]\n+    if path.endswith(\".h\"):\n+        return path[:-2]\n+    if path.endswith(\".c\"):\n+        return path[:-2]\n+    if path.endswith(\".cpp\"):\n+        return path[:-4]\n+    return None\n+\n+files = dict()\n+deps = dict()\n+\n+RE = re.compile(\"^#include <(.*)>\")\n+\n+# Iterate over files, and create list of modules\n+for arg in sys.argv[1:]:\n+    module = module_name(arg)\n+    if module is None:\n+        print(\"Ignoring file %s (does not constitute module)\\n\" % arg)\n+    else:\n+        files[arg] = module\n+        deps[module] = set()\n+\n+# Iterate again, and build list of direct dependencies for each module\n+# TODO: implement support for multiple include directories\n+for arg in sorted(files.keys()):\n+    module = files[arg]\n+    with open(arg, 'r') as f:\n+        for line in f:\n+            match = RE.match(line)\n+            if match:\n+                include = match.group(1)\n+                included_module = module_name(include)\n+                if included_module is not None and included_module in deps and included_module != module:\n+                    deps[module].add(included_module)\n+\n+# Loop to find the shortest (remaining) circular dependency\n+have_cycle = False\n+while True:\n+    shortest_cycle = None\n+    for module in sorted(deps.keys()):\n+        # Build the transitive closure of dependencies of module\n+        closure = dict()\n+        for dep in deps[module]:\n+            closure[dep] = []\n+        while True:\n+            old_size = len(closure)\n+            old_closure_keys = sorted(closure.keys())\n+            for src in old_closure_keys:\n+                for dep in deps[src]:\n+                    if dep not in closure:\n+                        closure[dep] = closure[src] + [src]\n+            if len(closure) == old_size:\n+                break\n+        # If module is in its own transitive closure, it's a circular dependency; check if it is the shortest\n+        if module in closure and (shortest_cycle is None or len(closure[module]) + 1 < len(shortest_cycle)):\n+            shortest_cycle = [module] + closure[module]\n+    if shortest_cycle is None:\n+        break\n+    # We have the shortest circular dependency; report it\n+    module = shortest_cycle[0]\n+    print(\"Circular dependency: %s\" % (\" -> \".join(shortest_cycle + [module])))\n+    # And then break the dependency to avoid repeating in other cycles\n+    deps[shortest_cycle[-1]] = deps[shortest_cycle[-1]] - set([module])\n+    have_cycle = True\n+\n+sys.exit(1 if have_cycle else 0)"
      }
    ]
  }
]