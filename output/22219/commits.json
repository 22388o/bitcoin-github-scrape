[
  {
    "sha": "e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplNDcwOWM3YjU2NjEyNTUzZmI3Y2JmMTZlZjJkNTA5OWM1YjczMmQw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-12-05T20:57:12Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2021-08-17T08:05:15Z"
      },
      "message": "Start using init makeNode, makeChain, etc methods\n\nUse interfaces::Init::make* methods instead of interfaces::Make*\nfunctions, so interfaces can be constructed differently in different\nexecutables without having to change any code. (So for example\nbitcoin-gui can make an interfaces::Node pointer that communicates with\na bitcoin-node subprocess, while bitcoin-qt can make an interfaces::Node\npointer that starts node code in the same process.)",
      "tree": {
        "sha": "3184f2fcce535f256d986e94b8d5b359223db150",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3184f2fcce535f256d986e94b8d5b359223db150"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fdd80b0a53b4af0b29cb6e03118e2456d053a757",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fdd80b0a53b4af0b29cb6e03118e2456d053a757"
      }
    ],
    "stats": {
      "total": 85,
      "additions": 63,
      "deletions": 22
    },
    "files": [
      {
        "sha": "724dae19698c525e39faec226ae4fa487e04077c",
        "filename": "build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/bitcoin-qt/bitcoin-qt.vcxproj?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -9,6 +9,7 @@\n   </PropertyGroup>\n   <ItemGroup>\n     <ClCompile Include=\"..\\..\\src\\qt\\main.cpp\" />\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\" />\n     <ResourceCompile Include=\"..\\..\\src\\qt\\res\\bitcoin-qt-res.rc\" />\n   </ItemGroup>\n   <ItemGroup>"
      },
      {
        "sha": "08b12bdd852c90b2f00d9bcda148c91d9bd9dbe2",
        "filename": "build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build_msvc/test_bitcoin-qt/test_bitcoin-qt.vcxproj?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -8,6 +8,7 @@\n     <OutDir>$(SolutionDir)$(Platform)\\$(Configuration)\\</OutDir>\n   </PropertyGroup>\n   <ItemGroup>\n+    <ClCompile Include=\"..\\..\\src\\init\\bitcoind.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\test\\util\\setup_common.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\addressbooktests.cpp\" />\n     <ClCompile Include=\"..\\..\\src\\qt\\test\\apptests.cpp\" />"
      },
      {
        "sha": "f4b0b3adbe0ce5519aed406c9490d96b995ebb0e",
        "filename": "src/Makefile.qt.include",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/Makefile.qt.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/Makefile.qt.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qt.include?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -338,14 +338,14 @@ bitcoin_qt_libtoolflags = $(AM_LIBTOOLFLAGS) --tag CXX\n \n qt_bitcoin_qt_CPPFLAGS = $(bitcoin_qt_cppflags)\n qt_bitcoin_qt_CXXFLAGS = $(bitcoin_qt_cxxflags)\n-qt_bitcoin_qt_SOURCES = $(bitcoin_qt_sources)\n+qt_bitcoin_qt_SOURCES = $(bitcoin_qt_sources) init/bitcoind.cpp\n qt_bitcoin_qt_LDADD = $(bitcoin_qt_ldadd)\n qt_bitcoin_qt_LDFLAGS = $(bitcoin_qt_ldflags)\n qt_bitcoin_qt_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)\n \n bitcoin_gui_CPPFLAGS = $(bitcoin_qt_cppflags)\n bitcoin_gui_CXXFLAGS = $(bitcoin_qt_cxxflags)\n-bitcoin_gui_SOURCES = $(bitcoin_qt_sources)\n+bitcoin_gui_SOURCES = $(bitcoin_qt_sources) init/bitcoind.cpp\n bitcoin_gui_LDADD = $(bitcoin_qt_ldadd)\n bitcoin_gui_LDFLAGS = $(bitcoin_qt_ldflags)\n bitcoin_gui_LIBTOOLFLAGS = $(bitcoin_qt_libtoolflags)"
      },
      {
        "sha": "8a5521eeb546f2822633bde7d6caf1bb95a9f4d4",
        "filename": "src/Makefile.qttest.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/Makefile.qttest.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/Makefile.qttest.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.qttest.include?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -28,6 +28,7 @@ qt_test_test_bitcoin_qt_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(BITCOIN_\n   $(QT_INCLUDES) $(QT_TEST_INCLUDES)\n \n qt_test_test_bitcoin_qt_SOURCES = \\\n+  init/bitcoind.cpp \\\n   qt/test/apptests.cpp \\\n   qt/test/rpcnestedtests.cpp \\\n   qt/test/test_main.cpp \\"
      },
      {
        "sha": "ebbcaf68e03a25ef18cbac3557af49b7b6a99c64",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 0,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -5,12 +5,14 @@\n #include <util/system.h>\n #include <walletinitinterface.h>\n \n+class ArgsManager;\n class CWallet;\n \n namespace interfaces {\n class Chain;\n class Handler;\n class Wallet;\n+class WalletClient;\n }\n \n class DummyWalletInit : public WalletInitInterface {\n@@ -63,4 +65,9 @@ std::unique_ptr<Wallet> MakeWallet(const std::shared_ptr<CWallet>& wallet)\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n+std::unique_ptr<WalletClient> MakeWalletClient(Chain& chain, ArgsManager& args)\n+{\n+    throw std::logic_error(\"Wallet function called in non-wallet build.\");\n+}\n+\n } // namespace interfaces"
      },
      {
        "sha": "e90d5ee916a7b13fb3b71acf60640a5de0cd07f0",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -26,6 +26,7 @@\n #include <index/txindex.h>\n #include <init/common.h>\n #include <interfaces/chain.h>\n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <mapport.h>\n #include <miner.h>\n@@ -1056,7 +1057,7 @@ bool AppInitLockDataDirectory()\n \n bool AppInitInterfaces(NodeContext& node)\n {\n-    node.chain = interfaces::MakeChain(node);\n+    node.chain = node.init->makeChain();\n     // Create client interfaces for wallets that are supposed to be loaded\n     // according to -wallet and -disablewallet options. This only constructs\n     // the interfaces, it doesn't load wallet data. Wallets actually get loaded"
      },
      {
        "sha": "fa56153745d8b5570a1ad11787185e8870920245",
        "filename": "src/init/bitcoin-node.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init/bitcoin-node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init/bitcoin-node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoin-node.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -2,9 +2,12 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interfaces/chain.h>\n #include <interfaces/echo.h>\n #include <interfaces/init.h>\n #include <interfaces/ipc.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n #include <node/context.h>\n #include <util/system.h>\n \n@@ -24,6 +27,12 @@ class BitcoinNodeInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n     std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     interfaces::Ipc* ipc() override { return m_ipc.get(); }\n     NodeContext& m_node;"
      },
      {
        "sha": "9c8d5bd9bbe1c573725287a35940ab9d2409ef89",
        "filename": "src/init/bitcoind.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 0,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init/bitcoind.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/init/bitcoind.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init/bitcoind.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -2,7 +2,11 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <interfaces/chain.h>\n+#include <interfaces/echo.h>\n #include <interfaces/init.h>\n+#include <interfaces/node.h>\n+#include <interfaces/wallet.h>\n #include <node/context.h>\n #include <util/system.h>\n \n@@ -18,6 +22,13 @@ class BitcoindInit : public interfaces::Init\n         m_node.args = &gArgs;\n         m_node.init = this;\n     }\n+    std::unique_ptr<interfaces::Node> makeNode() override { return interfaces::MakeNode(m_node); }\n+    std::unique_ptr<interfaces::Chain> makeChain() override { return interfaces::MakeChain(m_node); }\n+    std::unique_ptr<interfaces::WalletClient> makeWalletClient(interfaces::Chain& chain) override\n+    {\n+        return MakeWalletClient(chain, *Assert(m_node.args));\n+    }\n+    std::unique_ptr<interfaces::Echo> makeEcho() override { return interfaces::MakeEcho(); }\n     NodeContext& m_node;\n };\n } // namespace"
      },
      {
        "sha": "770b1b875325a5e375370638213593ad46647dfc",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -230,7 +230,7 @@ class Node\n };\n \n //! Return implementation of Node interface.\n-std::unique_ptr<Node> MakeNode(NodeContext* context = nullptr);\n+std::unique_ptr<Node> MakeNode(NodeContext& context);\n \n //! Block tip (could be a header or not, depends on the subscribed signal).\n struct BlockTip {"
      },
      {
        "sha": "1f6f50247333152315de8dd8f319e92024ed8e48",
        "filename": "src/node/interfaces.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/node/interfaces.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/node/interfaces.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/node/interfaces.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -72,7 +72,7 @@ class NodeImpl : public Node\n private:\n     ChainstateManager& chainman() { return *Assert(m_context->chainman); }\n public:\n-    explicit NodeImpl(NodeContext* context) { setContext(context); }\n+    explicit NodeImpl(NodeContext& context) { setContext(&context); }\n     void initLogging() override { InitLogging(*Assert(m_context->args)); }\n     void initParameterInteraction() override { InitParameterInteraction(*Assert(m_context->args)); }\n     bilingual_str getWarnings() override { return GetWarnings(true); }\n@@ -701,6 +701,6 @@ class ChainImpl : public Chain\n } // namespace node\n \n namespace interfaces {\n-std::unique_ptr<Node> MakeNode(NodeContext* context) { return std::make_unique<node::NodeImpl>(context); }\n+std::unique_ptr<Node> MakeNode(NodeContext& context) { return std::make_unique<node::NodeImpl>(context); }\n std::unique_ptr<Chain> MakeChain(NodeContext& context) { return std::make_unique<node::ChainImpl>(context); }\n } // namespace interfaces"
      },
      {
        "sha": "d4895ea6ff3925a26a89d9c2494f395d4583c4b2",
        "filename": "src/qt/bitcoin.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 7,
        "changes": 16,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -11,6 +11,7 @@\n #include <chainparams.h>\n #include <init.h>\n #include <interfaces/handler.h>\n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <node/context.h>\n #include <node/ui_interface.h>\n@@ -275,10 +276,10 @@ void BitcoinApplication::createSplashScreen(const NetworkStyle *networkStyle)\n     connect(this, &BitcoinApplication::requestedShutdown, m_splash, &QWidget::close);\n }\n \n-void BitcoinApplication::setNode(interfaces::Node& node)\n+void BitcoinApplication::createNode(interfaces::Init& init)\n {\n     assert(!m_node);\n-    m_node = &node;\n+    m_node = init.makeNode();\n     if (optionsModel) optionsModel->setNode(*m_node);\n     if (m_splash) m_splash->setNode(*m_node);\n }\n@@ -460,11 +461,13 @@ int GuiMain(int argc, char* argv[])\n     util::WinCmdLineArgs winArgs;\n     std::tie(argc, argv) = winArgs.get();\n #endif\n-    SetupEnvironment();\n-    util::ThreadSetInternalName(\"main\");\n \n     NodeContext node_context;\n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n+    int unused_exit_status;\n+    std::unique_ptr<interfaces::Init> init = interfaces::MakeNodeInit(node_context, argc, argv, unused_exit_status);\n+\n+    SetupEnvironment();\n+    util::ThreadSetInternalName(\"main\");\n \n     // Subscribe to global signals from core\n     boost::signals2::scoped_connection handler_message_box = ::uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n@@ -492,7 +495,6 @@ int GuiMain(int argc, char* argv[])\n \n     /// 2. Parse command-line options. We do this after qt in order to show an error if there are problems parsing these\n     // Command-line options take precedence:\n-    node_context.args = &gArgs;\n     SetupServerArgs(gArgs);\n     SetupUIArgs(gArgs);\n     std::string error;\n@@ -623,7 +625,7 @@ int GuiMain(int argc, char* argv[])\n     if (gArgs.GetBoolArg(\"-splash\", DEFAULT_SPLASHSCREEN) && !gArgs.GetBoolArg(\"-min\", false))\n         app.createSplashScreen(networkStyle.data());\n \n-    app.setNode(*node);\n+    app.createNode(*init);\n \n     int rv = EXIT_SUCCESS;\n     try"
      },
      {
        "sha": "602b76052cbd06e54fcee1ba62f90c3866a60f8e",
        "filename": "src/qt/bitcoin.h",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/bitcoin.h?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -27,6 +27,9 @@ class PlatformStyle;\n class SplashScreen;\n class WalletController;\n class WalletModel;\n+namespace interfaces {\n+class Init;\n+} // namespace interfaces\n \n \n /** Main Bitcoin application object */\n@@ -51,6 +54,8 @@ class BitcoinApplication: public QApplication\n     void createWindow(const NetworkStyle *networkStyle);\n     /// Create splash screen\n     void createSplashScreen(const NetworkStyle *networkStyle);\n+    /// Create or spawn node\n+    void createNode(interfaces::Init& init);\n     /// Basic initialization, before starting initialization/shutdown thread. Return true on success.\n     bool baseInitialize();\n \n@@ -69,7 +74,6 @@ class BitcoinApplication: public QApplication\n     void setupPlatformStyle();\n \n     interfaces::Node& node() const { assert(m_node); return *m_node; }\n-    void setNode(interfaces::Node& node);\n \n public Q_SLOTS:\n     void initializeResult(bool success, interfaces::BlockAndHeaderTipInfo tip_info);\n@@ -103,7 +107,7 @@ public Q_SLOTS:\n     const PlatformStyle *platformStyle;\n     std::unique_ptr<QWidget> shutdownWindow;\n     SplashScreen* m_splash = nullptr;\n-    interfaces::Node* m_node = nullptr;\n+    std::unique_ptr<interfaces::Node> m_node;\n \n     void startThread();\n };"
      },
      {
        "sha": "884ed256371e9f881bffb46d303bba132c3a405a",
        "filename": "src/qt/test/test_main.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/test/test_main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/test/test_main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/test_main.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -6,6 +6,7 @@\n #include <config/bitcoin-config.h>\n #endif\n \n+#include <interfaces/init.h>\n #include <interfaces/node.h>\n #include <qt/bitcoin.h>\n #include <qt/initexecutor.h>\n@@ -53,7 +54,8 @@ int main(int argc, char* argv[])\n     }\n \n     NodeContext node_context;\n-    std::unique_ptr<interfaces::Node> node = interfaces::MakeNode(&node_context);\n+    int unused_exit_status;\n+    std::unique_ptr<interfaces::Init> init = interfaces::MakeNodeInit(node_context, argc, argv, unused_exit_status);\n     gArgs.ForceSetArg(\"-listen\", \"0\");\n     gArgs.ForceSetArg(\"-listenonion\", \"0\");\n     gArgs.ForceSetArg(\"-discover\", \"0\");\n@@ -76,10 +78,9 @@ int main(int argc, char* argv[])\n     // Don't remove this, it's needed to access\n     // QApplication:: and QCoreApplication:: in the tests\n     BitcoinApplication app;\n-    app.setNode(*node);\n     app.setApplicationName(\"Bitcoin-Qt-test\");\n+    app.createNode(*init);\n \n-    app.node().context()->args = &gArgs;     // Make gArgs available in the NodeContext\n     AppTests app_tests(app);\n     if (QTest::qExec(&app_tests) != 0) {\n         fInvalid = true;"
      },
      {
        "sha": "1b80193d4f7557ad2570ab57e8d9fa4d1299befe",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -138,6 +138,8 @@ void TestGUI(interfaces::Node& node)\n     for (int i = 0; i < 5; ++i) {\n         test.CreateAndProcessBlock({}, GetScriptForRawPubKey(test.coinbaseKey.GetPubKey()));\n     }\n+    auto wallet_client = interfaces::MakeWalletClient(*test.m_node.chain, *Assert(test.m_node.args));\n+    test.m_node.wallet_client = wallet_client.get();\n     node.setContext(&test.m_node);\n     std::shared_ptr<CWallet> wallet = std::make_shared<CWallet>(node.context()->chain.get(), \"\", CreateMockWalletDatabase());\n     wallet->LoadWallet();"
      },
      {
        "sha": "f62a65ab5d93d52dce0fef367950258e4560b6dc",
        "filename": "src/rpc/misc.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/rpc/misc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/rpc/misc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/misc.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -664,8 +664,9 @@ static RPCHelpMan echoipc()\n         RPCExamples{HelpExampleCli(\"echo\", \"\\\"Hello world\\\"\") +\n                     HelpExampleRpc(\"echo\", \"\\\"Hello world\\\"\")},\n         [&](const RPCHelpMan& self, const JSONRPCRequest& request) -> UniValue {\n+            interfaces::Init& local_init = *EnsureAnyNodeContext(request.context).init;\n             std::unique_ptr<interfaces::Echo> echo;\n-            if (interfaces::Ipc* ipc = Assert(EnsureAnyNodeContext(request.context).init)->ipc()) {\n+            if (interfaces::Ipc* ipc = local_init.ipc()) {\n                 // Spawn a new bitcoin-node process and call makeEcho to get a\n                 // client pointer to a interfaces::Echo instance running in\n                 // that process. This is just for testing. A slightly more\n@@ -683,7 +684,7 @@ static RPCHelpMan echoipc()\n                 // interfaces::Echo object and return it so the `echoipc` RPC\n                 // method will work, and the python test calling `echoipc`\n                 // can expect the same result.\n-                echo = interfaces::MakeEcho();\n+                echo = local_init.makeEcho();\n             }\n             return echo->echo(request.params[0].get_str());\n         },"
      },
      {
        "sha": "6b23bde0fb174760744c24f784ee258746d1de4b",
        "filename": "src/test/util/setup_common.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/test/util/setup_common.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/test/util/setup_common.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/util/setup_common.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -114,7 +114,6 @@ BasicTestingSetup::BasicTestingSetup(const std::string& chainName, const std::ve\n     InitSignatureCache();\n     InitScriptExecutionCache();\n     m_node.chain = interfaces::MakeChain(m_node);\n-    g_wallet_init_interface.Construct(m_node);\n     fCheckBlockIndex = true;\n     static bool noui_connected = false;\n     if (!noui_connected) {"
      },
      {
        "sha": "1d444e5399c4a837f89261f7a97c7a04bfe14b05",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e4709c7b56612553fb7cbf16ef2d5099c5b732d0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=e4709c7b56612553fb7cbf16ef2d5099c5b732d0",
        "patch": "@@ -5,6 +5,7 @@\n \n #include <init.h>\n #include <interfaces/chain.h>\n+#include <interfaces/init.h>\n #include <interfaces/wallet.h>\n #include <net.h>\n #include <node/context.h>\n@@ -129,7 +130,7 @@ void WalletInit::Construct(NodeContext& node) const\n         LogPrintf(\"Wallet disabled!\\n\");\n         return;\n     }\n-    auto wallet_client = interfaces::MakeWalletClient(*node.chain, args);\n+    auto wallet_client = node.init->makeWalletClient(*node.chain);\n     node.wallet_client = wallet_client.get();\n     node.chain_clients.emplace_back(std::move(wallet_client));\n }"
      }
    ]
  }
]