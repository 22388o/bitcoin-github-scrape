[
  {
    "sha": "4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTRmOGY3M2JkZjFmZjhhZWJhMjMzMzBmODEzYzU4ODRhYzVjMDg3",
    "commit": {
      "author": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2019-09-25T18:38:32Z"
      },
      "committer": {
        "name": "Martin Ankerl",
        "email": "martin.ankerl@gmail.com",
        "date": "2019-09-26T17:23:37Z"
      },
      "message": "more tightly pack Coin\n\nThis change reduces CCoinMap's value_type from 96 bytes to 80 bytes by\nmore tightly packing it's data. This is achieved by these changes:\n\n* Refactored prevector so it uses a single byte to determine its size\n  when in direct mode\n* Reduce CScriptBase from 28 to 27 indirect bytes\n* align CTxOut to 4 bytes to prevent padding when used as a member in\n  Coin\n\nThis tighter packing means more data can be stored in the coinsCache\nbefore it is full and has to be flushed to disk. In my benchmark,\n-reindex-chainstate was 6% faster and used 6% less memory. The cache\ncould fit 14% more txo's before it had to resize.",
      "tree": {
        "sha": "cf51042208dcfd81918cd028847a2a86293e8795",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/cf51042208dcfd81918cd028847a2a86293e8795"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/comments",
    "author": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "martinus",
      "id": 14386,
      "node_id": "MDQ6VXNlcjE0Mzg2",
      "avatar_url": "https://avatars.githubusercontent.com/u/14386?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/martinus",
      "html_url": "https://github.com/martinus",
      "followers_url": "https://api.github.com/users/martinus/followers",
      "following_url": "https://api.github.com/users/martinus/following{/other_user}",
      "gists_url": "https://api.github.com/users/martinus/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/martinus/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/martinus/subscriptions",
      "organizations_url": "https://api.github.com/users/martinus/orgs",
      "repos_url": "https://api.github.com/users/martinus/repos",
      "events_url": "https://api.github.com/users/martinus/events{/privacy}",
      "received_events_url": "https://api.github.com/users/martinus/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ab765c2ec7db042142298cdd6ca9c2f04cca8598",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ab765c2ec7db042142298cdd6ca9c2f04cca8598",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ab765c2ec7db042142298cdd6ca9c2f04cca8598"
      }
    ],
    "stats": {
      "total": 76,
      "additions": 49,
      "deletions": 27
    },
    "files": [
      {
        "sha": "0da6610c84346479d26856f23e8550cad478e7bc",
        "filename": "src/prevector.h",
        "status": "modified",
        "additions": 39,
        "deletions": 26,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/prevector.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/prevector.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/prevector.h?ref=4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
        "patch": "@@ -22,20 +22,23 @@\n  *\n  *  Storage layout is either:\n  *  - Direct allocation:\n- *    - Size _size: the number of used elements (between 0 and N)\n  *    - T direct[N]: an array of N elements of type T\n- *      (only the first _size are initialized).\n+ *    - unsigned char _size_direct: the number of used elements\n+ *      between 0 and N. 0xFF means indirect allocation.\n+ *      (only the first _size_direct are initialized).\n  *  - Indirect allocation:\n- *    - Size _size: the number of used elements plus N + 1\n- *    - Size capacity: the number of allocated elements\n- *    - T* indirect: a pointer to an array of capacity elements of type T\n+ *    - size_type _size: the number of used elements\n+ *    - size_type capacity: the number of allocated elements\n+ *    - char* indirect: a pointer to an array of capacity elements of type T\n  *      (only the first _size are initialized).\n  *\n  *  The data type T must be movable by memmove/realloc(). Once we switch to C++,\n  *  move constructors can be used instead.\n  */\n template<unsigned int N, typename T, typename Size = uint32_t, typename Diff = int32_t>\n class prevector {\n+    static_assert(N < 0xff, \"can't directly allocate more than 254 elements\");\n+\n public:\n     typedef Size size_type;\n     typedef Diff difference_type;\n@@ -147,30 +150,31 @@ class prevector {\n     };\n \n private:\n-    size_type _size = 0;\n     union direct_or_indirect {\n         char direct[sizeof(T) * N];\n         struct {\n+            size_type size;\n             size_type capacity;\n             char* indirect;\n         };\n     } _union = {};\n+    unsigned char _size_direct = 0;\n \n     T* direct_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.direct) + pos; }\n     const T* direct_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.direct) + pos; }\n     T* indirect_ptr(difference_type pos) { return reinterpret_cast<T*>(_union.indirect) + pos; }\n     const T* indirect_ptr(difference_type pos) const { return reinterpret_cast<const T*>(_union.indirect) + pos; }\n-    bool is_direct() const { return _size <= N; }\n+    bool is_direct() const { return _size_direct != 0xFF; }\n \n     void change_capacity(size_type new_capacity) {\n         if (new_capacity <= N) {\n             if (!is_direct()) {\n+                _size_direct = static_cast<unsigned char>(_union.size);\n                 T* indirect = indirect_ptr(0);\n                 T* src = indirect;\n                 T* dst = direct_ptr(0);\n-                memcpy(dst, src, size() * sizeof(T));\n+                memcpy(dst, src, _size_direct * sizeof(T));\n                 free(indirect);\n-                _size -= N + 1;\n             }\n         } else {\n             if (!is_direct()) {\n@@ -188,7 +192,8 @@ class prevector {\n                 memcpy(dst, src, size() * sizeof(T));\n                 _union.indirect = new_indirect;\n                 _union.capacity = new_capacity;\n-                _size += N + 1;\n+                _union.size = _size_direct;\n+                _size_direct = 0xff;\n             }\n         }\n     }\n@@ -209,13 +214,21 @@ class prevector {\n         }\n     }\n \n+    void change_size_by(Diff diff) {\n+        if (is_direct()) {\n+            _size_direct += diff;\n+        } else {\n+            _union.size += diff;\n+        }\n+    }\n+\n public:\n     void assign(size_type n, const T& val) {\n         clear();\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        _size += n;\n+        change_size_by(n);\n         fill(item_ptr(0), n, val);\n     }\n \n@@ -226,7 +239,7 @@ class prevector {\n         if (capacity() < n) {\n             change_capacity(n);\n         }\n-        _size += n;\n+        change_size_by(n);\n         fill(item_ptr(0), first, last);\n     }\n \n@@ -238,22 +251,22 @@ class prevector {\n \n     explicit prevector(size_type n, const T& val) {\n         change_capacity(n);\n-        _size += n;\n+        change_size_by(n);\n         fill(item_ptr(0), n, val);\n     }\n \n     template<typename InputIterator>\n     prevector(InputIterator first, InputIterator last) {\n         size_type n = last - first;\n         change_capacity(n);\n-        _size += n;\n+        change_size_by(n);\n         fill(item_ptr(0), first, last);\n     }\n \n     prevector(const prevector<N, T, Size, Diff>& other) {\n         size_type n = other.size();\n         change_capacity(n);\n-        _size += n;\n+        change_size_by(n);\n         fill(item_ptr(0), other.begin(),  other.end());\n     }\n \n@@ -275,7 +288,7 @@ class prevector {\n     }\n \n     size_type size() const {\n-        return is_direct() ? _size : _size - N - 1;\n+        return is_direct() ? _size_direct : _union.size;\n     }\n \n     bool empty() const {\n@@ -322,7 +335,7 @@ class prevector {\n         }\n         ptrdiff_t increase = new_size - cur_size;\n         fill(item_ptr(cur_size), increase);\n-        _size += increase;\n+        change_size_by(increase);\n     }\n \n     void reserve(size_type new_capacity) {\n@@ -347,7 +360,7 @@ class prevector {\n         }\n         T* ptr = item_ptr(p);\n         memmove(ptr + 1, ptr, (size() - p) * sizeof(T));\n-        _size++;\n+        change_size_by(1);\n         new(static_cast<void*>(ptr)) T(value);\n         return iterator(ptr);\n     }\n@@ -360,7 +373,7 @@ class prevector {\n         }\n         T* ptr = item_ptr(p);\n         memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n-        _size += count;\n+        change_size_by(count);\n         fill(item_ptr(p), count, value);\n     }\n \n@@ -374,7 +387,7 @@ class prevector {\n         }\n         T* ptr = item_ptr(p);\n         memmove(ptr + count, ptr, (size() - p) * sizeof(T));\n-        _size += count;\n+        change_size_by(count);\n         fill(ptr, first, last);\n     }\n \n@@ -383,13 +396,13 @@ class prevector {\n         // If size < new_size, the added elements must be initialized explicitly.\n         if (capacity() < new_size) {\n             change_capacity(new_size);\n-            _size += new_size - size();\n+            change_size_by(new_size - size());\n             return;\n         }\n         if (new_size < size()) {\n             erase(item_ptr(new_size), end());\n         } else {\n-            _size += new_size - size();\n+            change_size_by(new_size - size());\n         }\n     }\n \n@@ -409,11 +422,11 @@ class prevector {\n         if (!std::is_trivially_destructible<T>::value) {\n             while (p != last) {\n                 (*p).~T();\n-                _size--;\n+                change_size_by(-1);\n                 ++p;\n             }\n         } else {\n-            _size -= last - p;\n+            change_size_by(-(last - p));\n         }\n         memmove(&(*first), &(*last), endp - ((char*)(&(*last))));\n         return first;\n@@ -425,7 +438,7 @@ class prevector {\n             change_capacity(new_size + (new_size >> 1));\n         }\n         new(item_ptr(size())) T(value);\n-        _size++;\n+        change_size_by(1);\n     }\n \n     void pop_back() {\n@@ -450,7 +463,7 @@ class prevector {\n \n     void swap(prevector<N, T, Size, Diff>& other) {\n         std::swap(_union, other._union);\n-        std::swap(_size, other._size);\n+        std::swap(_size_direct, other._size_direct);\n     }\n \n     ~prevector() {"
      },
      {
        "sha": "6032eb6894a5ab8466b4a021e983c9cfc2a2f7a3",
        "filename": "src/primitives/transaction.h",
        "status": "modified",
        "additions": 6,
        "deletions": 0,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/primitives/transaction.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/primitives/transaction.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/primitives/transaction.h?ref=4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
        "patch": "@@ -129,7 +129,12 @@ class CTxIn\n \n /** An output of a transaction.  It contains the public key that the next input\n  * must be able to sign with to claim it.\n+ *\n+ * We align the struct to 4 bytes: that way, CTxOut will have 36 bytes: 8 for\n+ * CAmount, and 28 for CScript. As a member of Coin, this leaves 4 bytes for\n+ * Coin's nHeight without the need for any padding.\n  */\n+#pragma pack(push, 4)\n class CTxOut\n {\n public:\n@@ -175,6 +180,7 @@ class CTxOut\n \n     std::string ToString() const;\n };\n+#pragma pack(pop)\n \n struct CMutableTransaction;\n "
      },
      {
        "sha": "429e284e317b5d20e166524bd5b21cc9c2ba9c85",
        "filename": "src/script/script.h",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/script/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e4f8f73bdf1ff8aeba23330f813c5884ac5c087/src/script/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/script.h?ref=4e4f8f73bdf1ff8aeba23330f813c5884ac5c087",
        "patch": "@@ -381,8 +381,11 @@ class CScriptNum\n  *  of vectors in cases where they normally contain a small number of small elements.\n  * Tests in October 2015 showed use of this reduced dbcache memory usage by 23%\n  *  and made an initial sync 13% faster.\n+ *\n+ * Most scripts seem to have <= 25 bytes. So with 27 entries + 1 byte for size(),\n+ * the prevector will have a size of 28 bytes.\n  */\n-typedef prevector<28, unsigned char> CScriptBase;\n+typedef prevector<27, unsigned char> CScriptBase;\n \n bool GetScriptOp(CScriptBase::const_iterator& pc, CScriptBase::const_iterator end, opcodetype& opcodeRet, std::vector<unsigned char>* pvchRet);\n "
      }
    ]
  }
]