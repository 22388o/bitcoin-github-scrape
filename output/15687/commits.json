[
  {
    "sha": "1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxZWIxM2YwOWE5ZDhjMmM3ZGM2OWY0Y2RmMWIxY2NmNjMyNTQzYWEw",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-03-27T15:34:39Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-07-08T10:33:41Z"
      },
      "message": "test: Add log messages to test/functional/tool_wallet.py\n\nand update code comments as per Python PEP 8 style guide.",
      "tree": {
        "sha": "099aed1a43721a7cc4b428ee6ea19b45f92e7edd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/099aed1a43721a7cc4b428ee6ea19b45f92e7edd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl0jHAkACgkQT1chs9Dj\nkh2AyA//QEsD3o1Fx98CWBYzDnhLZBf6X7tgVAGL4wDFyk40WfppX4TiyO69bKkK\nOTF/hAKeU49k81BcPwFxiQC+CWiRisJRBRm5eAGekP7GFQEn6kZYbsr0imMS6N18\n+V4lTzsAJfNvT1HB9gTY/RsFcHWpsL88bBqU0FtALBTgqp1EMjw4vgQJU2zNx23V\n1Jvo8c3dVcIJEkG1PhMSE5FQF5l4frELsaLVzJ7Y6jYePvryAmqgQJVvjjxRFwIX\nuL9KXwlrlqByWMnueHDvcfK17pZ8RQ4VTbJ1UxG7iPa/49MA7eqjwxzPzHpQgj/4\nFs4jt6bkjxOY/xtiV3MlgyWlbXAYw4dLVByZe/mlKWusEbuqr1tunFMJYlabDJ01\nmaLuP62dmpvi8aadlUG/quKQz0gHRNBH9Wbtu1hy4618UI09n6QOBXfkuGarANq0\nfqJKLPgfJFZ7PyeRdwH856Ycp1x3dT2uCXSSbCGyRUdNSirlRXNuCvCbwMwQY5iG\naexNhAX2z4tPkhanlSGuQkI79V4BicD1OrU9X1BMjDwakJu+jgFEOd8/VgNf/Amk\nKq9lVyhLXONRgFuAhZsYYRratE0d9BewtjwjJBeIAii5smY+REWAEFpc/k4sdag1\nqDtJWdhMXdjzCeKc7x9hyIvu2/1+KSMUxeUtegmau3F2t9Z1FiU=\n=JxSM\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIBSL9D0Zk59raV5wLR0KpEg9CH34G9KIaaWQBAifbGc6CP/wEAJ1ETwsyZtN\naKW5V01NDQ0I8QRdIxwK8AieiK0IzkdxnQCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEHNPv0Y7TGrZxTyT1oTg\ncZEI8QRdIxwK8AiYjwjn4U5fuwCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQlFMpbPxWN9JsOy7fTNFOqQjx\nBF0jHArwCE31kac9bLfmAIPf4w0u+QyOKShodHRwczovL2Zpbm5leS5jYWxlbmRh\nci5ldGVybml0eXdhbGwuY29t8BCzVg72ECWBBYng03DJ3hoDCPEEXSMcCvAIU8vv\n7GHSXYUAg9/jDS75DI4jImh0dHBzOi8vYnRjLmNhbGVuZGFyLmNhdGFsbGF4eS5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 099aed1a43721a7cc4b428ee6ea19b45f92e7edd\nparent 04710b6d8c9e286485f4241671df72216b0f4698\nauthor Jon Atack <jon@atack.com> 1553700879 +0100\ncommitter Jon Atack <jon@atack.com> 1562582021 +0200\n\ntest: Add log messages to test/functional/tool_wallet.py\n\nand update code comments as per Python PEP 8 style guide.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "04710b6d8c9e286485f4241671df72216b0f4698",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/04710b6d8c9e286485f4241671df72216b0f4698",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/04710b6d8c9e286485f4241671df72216b0f4698"
      }
    ],
    "stats": {
      "total": 19,
      "additions": 13,
      "deletions": 6
    },
    "files": [
      {
        "sha": "66d893f57fed45c64204b76426b61286715a91f4",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 13,
        "deletions": 6,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
        "patch": "@@ -1,8 +1,9 @@\n #!/usr/bin/env python3\n-# Copyright (c) 2018 The Bitcoin Core developers\n+# Copyright (c) 2018-2019 The Bitcoin Core developers\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-wallet.\"\"\"\n+\n import subprocess\n import textwrap\n \n@@ -37,18 +38,18 @@ def assert_tool_output(self, output, *args):\n         assert_equal(stdout, output)\n \n     def run_test(self):\n-\n+        self.log.info('Testing that various invalid commands raise with specific error messages')\n         self.assert_raises_tool_error('Invalid command: foo', 'foo')\n-        # `bitcoin-wallet help` is an error. Use `bitcoin-wallet -help`\n+        # `bitcoin-wallet help` raises an error. Use `bitcoin-wallet -help`.\n         self.assert_raises_tool_error('Invalid command: help', 'help')\n         self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n         self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by other process?', '-wallet=wallet.dat', 'info')\n         self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n \n-        # stop the node to close the wallet to call info command\n+        # Stop the node to close the wallet to call the info command.\n         self.stop_node(0)\n-\n+        self.log.info('Calling wallet tool info, testing output')\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -60,11 +61,13 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n \n-        # mutate the wallet to check the info command output changes accordingly\n+        # Mutate wallet to verify info command output changes accordingly.\n         self.start_node(0)\n+        self.log.info('Generating transaction to mutate wallet')\n         self.nodes[0].generate(1)\n         self.stop_node(0)\n \n+        self.log.info('Calling wallet tool info after generating a transaction, testing output')\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -76,6 +79,7 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n \n+        self.log.info('Calling wallet tool create on an existing wallet, testing output')\n         out = textwrap.dedent('''\\\n             Topping up keypool...\n             Wallet info\n@@ -88,7 +92,10 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=foo', 'create')\n \n+        self.log.info('Starting node with arg -wallet=foo')\n         self.start_node(0, ['-wallet=foo'])\n+\n+        self.log.info('Calling getwalletinfo on a different wallet (\"foo\"), testing output')\n         out = self.nodes[0].getwalletinfo()\n         self.stop_node(0)\n "
      }
    ]
  },
  {
    "sha": "3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzozYmYyYjNhMzdiYmQ1NTA0OTFkMTI0Yjc3ZmQ3YzFiMmE3OTY5ZjY2",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-06-27T13:22:17Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-07-08T11:02:23Z"
      },
      "message": "test: Split tool_wallet.py test into subtests\n\nas per Marco Falke review suggestion.",
      "tree": {
        "sha": "2c81d8fe89a68292872c2fc8a6e57788bd1be5c7",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2c81d8fe89a68292872c2fc8a6e57788bd1be5c7"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl0jIsAACgkQT1chs9Dj\nkh2DAg/9HjtqNTlflqegTYgpihixlaq1Eag+TNMUHMu+0NPbQi1kkT4gEP99mEez\n2wqJprMQX1bEyBQrWxb622EP27TJAB5YFhl7iSOsCuGrybCSQYZZEnUVAZNSc8z1\noexKrgA9c0VZWCaMmijxvntSZvjHAfSAaCk+0Funta5vx7MOtalhaiAIw0pizN5a\nKNPQKyeiBxRMn6h1y7ljcn1uMS+QzWLfSHa0I23RH5LpoiIp/pRly64YPn8mFho+\nldNU/z/H8iXcAFs29TQG/P/03WSrIadRLDVx3eI9Ip6gU86su/C0TaTvAixcPkiM\nLw1gWdywTddeqLbaZocbHnCBDN5v02EualQbJBXEsZ8jY4sxK6wjfZBAI0WwXKmt\ngup0ySOgw96nxaZsdJpFG4wcFnhJNUSeiOm+NxTQyiYL97E0qqcF13jZtSoYYtm4\nCtfPqXgyxf8JPmHNhPqAU8NbBbeb40AqHNBaSBHvCmUmxOsUCmUB0BWIeOTDhd1s\naKUvXOfqU/yOkv1pfcjeQsha+SSCb2MI8GuWBoLqy5Id0rCQ5CliQxiwA2T+fLFc\n/jWGK+E4IeNRJy9gnwDOOEKfGOZhwxLdVZJ62t9zp4H44x+C+6upx1vsWSZwV+8P\n8AZTA8vr6fkIjx1m2vsZ9szUfJOoaejuJfMVXV2xzzqwFfxCWQw=\n=gR6f\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIEyBAJdfELbqH8CkdldVKplczOwKu3imD0xpTD0o1MCaCP/wEBrtp379jfSE\nSQbbI36auwoI8QRdIyLB8AiPBYcMUelExwCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wECBhAMNrIEFBoo0d8BSQ\nAY8I8QRdIyLC8AgkNW0pXm5ESgCD3+MNLvkMji4taHR0cHM6Ly9hbGljZS5idGMu\nY2FsZW5kYXIub3BlbnRpbWVzdGFtcHMub3Jn//AQw89rkBxSK2r7EHeLXcRDJAjx\nBF0jIsHwCPxrFwxzsOb8AIPf4w0u+QyOIyJodHRwczovL2J0Yy5jYWxlbmRhci5j\nYXRhbGxheHkuY29t8BD1KeY8SjJKh4GU8UyQ/4ZSCPEEXSMiwfAIrcQmoKpkDkwA\ng9/jDS75DI4pKGh0dHBzOi8vZmlubmV5LmNhbGVuZGFyLmV0ZXJuaXR5d2FsbC5j\nb20=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree 2c81d8fe89a68292872c2fc8a6e57788bd1be5c7\nparent 1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0\nauthor Jon Atack <jon@atack.com> 1561641737 +0200\ncommitter Jon Atack <jon@atack.com> 1562583743 +0200\n\ntest: Split tool_wallet.py test into subtests\n\nas per Marco Falke review suggestion.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1eb13f09a9d8c2c7dc69f4cdf1b1ccf632543aa0"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 18,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e622c75236965fa6df243f262bd3d9445e04325b",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 18,
        "deletions": 2,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
        "patch": "@@ -37,7 +37,7 @@ def assert_tool_output(self, output, *args):\n         assert_equal(stderr, '')\n         assert_equal(stdout, output)\n \n-    def run_test(self):\n+    def test_invalid_tool_commands_and_args(self):\n         self.log.info('Testing that various invalid commands raise with specific error messages')\n         self.assert_raises_tool_error('Invalid command: foo', 'foo')\n         # `bitcoin-wallet help` raises an error. Use `bitcoin-wallet -help`.\n@@ -47,6 +47,7 @@ def run_test(self):\n         self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by other process?', '-wallet=wallet.dat', 'info')\n         self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n \n+    def test_tool_wallet_info(self):\n         # Stop the node to close the wallet to call the info command.\n         self.stop_node(0)\n         self.log.info('Calling wallet tool info, testing output')\n@@ -61,7 +62,11 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n \n-        # Mutate wallet to verify info command output changes accordingly.\n+    def test_tool_wallet_info_after_transaction(self):\n+        \"\"\"\n+        Mutate the wallet with a transaction to verify that the info command\n+        output changes accordingly.\n+        \"\"\"\n         self.start_node(0)\n         self.log.info('Generating transaction to mutate wallet')\n         self.nodes[0].generate(1)\n@@ -79,6 +84,7 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n \n+    def test_tool_wallet_create_on_existing_wallet(self):\n         self.log.info('Calling wallet tool create on an existing wallet, testing output')\n         out = textwrap.dedent('''\\\n             Topping up keypool...\n@@ -92,6 +98,7 @@ def run_test(self):\n         ''')\n         self.assert_tool_output(out, '-wallet=foo', 'create')\n \n+    def test_getwalletinfo_on_different_wallet(self):\n         self.log.info('Starting node with arg -wallet=foo')\n         self.start_node(0, ['-wallet=foo'])\n \n@@ -104,5 +111,14 @@ def run_test(self):\n         assert_equal(1000, out['keypoolsize_hd_internal'])\n         assert_equal(True, 'hdseedid' in out)\n \n+    def run_test(self):\n+        self.test_invalid_tool_commands_and_args()\n+        # Warning: The following tests are order-dependent.\n+        self.test_tool_wallet_info()\n+        self.test_tool_wallet_info_after_transaction()\n+        self.test_tool_wallet_create_on_existing_wallet()\n+        self.test_getwalletinfo_on_different_wallet()\n+\n+\n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "7195fa792fcc19e9c064c4e38814c3b46a210b34",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MTk1ZmE3OTJmY2MxOWU5YzA2NGM0ZTM4ODE0YzNiNDZhMjEwYjM0",
    "commit": {
      "author": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-04-03T15:54:49Z"
      },
      "committer": {
        "name": "Jon Atack",
        "email": "jon@atack.com",
        "date": "2019-07-08T11:02:28Z"
      },
      "message": "test: Tool wallet test coverage for unexpected writes to wallet\n\nThis commit adds test coverage in `test/functional/tool_wallet.py` to reproduce unexpected writes to the wallet as described in https://github.com/bitcoin/bitcoin/issues/15608:\n\n    - wallet tool `info` unexpectedly writes to the wallet file if the wallet file permissions are read/write.\n\n    - wallet tool `info` raises with \"Error loading . Is wallet being used by another process?\" if the wallet file permissions are read-only.\n\n1. Reproduce the reported issue, define the current unexpected behavior, and add test coverage to guide a future fix in the form of commented-out assertions to be uncommented when testing/fixing.\n\n2. Provisionally extend the same coverage to the wallet tool create test and the getwalletinfo test as regression tests while fixing the issue.\n\n3. Add some logging for sanity checking.\n\n------\n\nChanges after rebase:\n\n5. Make wallet_path an instance method instead of a function in tool_wallet.py as per Marco Falke review suggestion.\n\n6. Assert wallet permissions instead of logging them in tool_wallet.py. This ran into an issue with Appveyor keeping permissions at 666 so allowed for 666 as a workaround.\n\n7. Change the added logging from info to debug level.\n\n8. More helpful assertions order in tool_wallet.py#assert_tool_output. This change makes #assert_tool_output raise \"Error loading wallet.dat. Is wallet being used by another process?\" rather than a less-helpful message when debugging the read-only wallet permissions issue.",
      "tree": {
        "sha": "e96a6d598cd405f4983d1f02c42588d75a7cd887",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e96a6d598cd405f4983d1f02c42588d75a7cd887"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7195fa792fcc19e9c064c4e38814c3b46a210b34",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEd6u7+MhX7zEv6RP5T1chs9Djkh0FAl0jIsUACgkQT1chs9Dj\nkh1pxRAAxs/fDSZpazPXscxmgW0a/LmQGMfvuS2gwkuCS29bdSYwEpZAlbgQGXRl\nXroQ5lqW9LBTCxe9uiJVdybo5bPcYhhXL3r8PGbJCZvwqlcmoBx5pAOkVcm30aDR\n/LEIB8OLsMUeT5yHbALTIvoMZjsv10Ob84qoOkqgRdEqY9+So42Vuw7uPxN3afLS\nhEz/wRS5i2DH1/im/3yN+6Bdvn7QkTO9BDvR9d0dSex+LKExuZfCn0DMMbZ55D8V\nw4bMlJp0nDB061r120VHNV7onmQbu/Qep33pW0XHKBPYXX6Er35O+dhQAfRAf5vd\nM3my+tk3FXHo2S4tfNujPYrXthi0kFF75DnSUfQu4dwgGX+OW8CpzL0/H0juZS0c\nJkSPC15w7FYyxn9ImtflxL2WFoBK/icxDSTUULyTnwLHJspesRZ8jCJMl6ygdMfP\nlGM5bjbSVp3U/1bZEovzrbba4alN73A20o8cs8Pv+QNYLqiuxO4hfOZg00YK8A0K\n9i9qGPUplAFrTidWlnzYLvcFguhTQAjFV+bds7MjrcoI9y17XMxogA+xspUQaij3\nqdt3Ip/gg6Is72DCvvPGsCYuzIj0hBqiC85rKR6GRgUSzP6mYX3cHtwodNI9Ujck\nPyoETAm0jRxyTdHDqA7U5YwBptlIhQ8yxPAR2rkA50w2odR99iA=\n=Aros\n-----END PGP SIGNATURE-----\n-----BEGIN OPENTIMESTAMPS GIT TIMESTAMP-----\n\nAQHwIMpxTHsuN4ze9o7SYr3pEMnD5Ly79rCmfj6TDO018nKwCP/wEAC/OKgiPxhI\npoXJJ2BvwxoI8QRdIyLG8AipRU6KEFRK4gCD3+MNLvkMjiwraHR0cHM6Ly9ib2Iu\nYnRjLmNhbGVuZGFyLm9wZW50aW1lc3RhbXBzLm9yZ//wEFoNmJ+zpZfb2hzXvo78\nWuoI8QRdIyLF8AgjUPVpDUya1gCD3+MNLvkMjikoaHR0cHM6Ly9maW5uZXkuY2Fs\nZW5kYXIuZXRlcm5pdHl3YWxsLmNvbf/wELCHuvkYpqVEuquA2qHEjXII8QRdIyLG\n8Ag4yVpaQRL8cACD3+MNLvkMjiMiaHR0cHM6Ly9idGMuY2FsZW5kYXIuY2F0YWxs\nYXh5LmNvbfAQ+WXFmJQsaEmzUkRDzkI1QAjxBF0jIsbwCJAFsJL3tLndAIPf4w0u\n+QyOLi1odHRwczovL2FsaWNlLmJ0Yy5jYWxlbmRhci5vcGVudGltZXN0YW1wcy5v\ncmc=\n-----END OPENTIMESTAMPS GIT TIMESTAMP-----",
        "payload": "tree e96a6d598cd405f4983d1f02c42588d75a7cd887\nparent 3bf2b3a37bbd550491d124b77fd7c1b2a7969f66\nauthor Jon Atack <jon@atack.com> 1554306889 +0200\ncommitter Jon Atack <jon@atack.com> 1562583748 +0200\n\ntest: Tool wallet test coverage for unexpected writes to wallet\n\nThis commit adds test coverage in `test/functional/tool_wallet.py` to reproduce unexpected writes to the wallet as described in https://github.com/bitcoin/bitcoin/issues/15608:\n\n    - wallet tool `info` unexpectedly writes to the wallet file if the wallet file permissions are read/write.\n\n    - wallet tool `info` raises with \"Error loading . Is wallet being used by another process?\" if the wallet file permissions are read-only.\n\n1. Reproduce the reported issue, define the current unexpected behavior, and add test coverage to guide a future fix in the form of commented-out assertions to be uncommented when testing/fixing.\n\n2. Provisionally extend the same coverage to the wallet tool create test and the getwalletinfo test as regression tests while fixing the issue.\n\n3. Add some logging for sanity checking.\n\n------\n\nChanges after rebase:\n\n5. Make wallet_path an instance method instead of a function in tool_wallet.py as per Marco Falke review suggestion.\n\n6. Assert wallet permissions instead of logging them in tool_wallet.py. This ran into an issue with Appveyor keeping permissions at 666 so allowed for 666 as a workaround.\n\n7. Change the added logging from info to debug level.\n\n8. More helpful assertions order in tool_wallet.py#assert_tool_output. This change makes #assert_tool_output raise \"Error loading wallet.dat. Is wallet being used by another process?\" rather than a less-helpful message when debugging the read-only wallet permissions issue.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7195fa792fcc19e9c064c4e38814c3b46a210b34",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7195fa792fcc19e9c064c4e38814c3b46a210b34",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7195fa792fcc19e9c064c4e38814c3b46a210b34/comments",
    "author": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonatack",
      "id": 2415484,
      "node_id": "MDQ6VXNlcjI0MTU0ODQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/2415484?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonatack",
      "html_url": "https://github.com/jonatack",
      "followers_url": "https://api.github.com/users/jonatack/followers",
      "following_url": "https://api.github.com/users/jonatack/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonatack/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonatack/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonatack/subscriptions",
      "organizations_url": "https://api.github.com/users/jonatack/orgs",
      "repos_url": "https://api.github.com/users/jonatack/repos",
      "events_url": "https://api.github.com/users/jonatack/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonatack/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/3bf2b3a37bbd550491d124b77fd7c1b2a7969f66"
      }
    ],
    "stats": {
      "total": 87,
      "additions": 86,
      "deletions": 1
    },
    "files": [
      {
        "sha": "28a65f7823894fe561b208db5ca65e06fa1b47a4",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 86,
        "deletions": 1,
        "changes": 87,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7195fa792fcc19e9c064c4e38814c3b46a210b34/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7195fa792fcc19e9c064c4e38814c3b46a210b34/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=7195fa792fcc19e9c064c4e38814c3b46a210b34",
        "patch": "@@ -4,12 +4,17 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test bitcoin-wallet.\"\"\"\n \n+import hashlib\n+import os\n+import stat\n import subprocess\n import textwrap\n \n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n+BUFFER_SIZE = 16 * 1024\n+\n class ToolWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -33,9 +38,27 @@ def assert_raises_tool_error(self, error, *args):\n     def assert_tool_output(self, output, *args):\n         p = self.bitcoin_wallet_process(*args)\n         stdout, stderr = p.communicate()\n-        assert_equal(p.poll(), 0)\n         assert_equal(stderr, '')\n         assert_equal(stdout, output)\n+        assert_equal(p.poll(), 0)\n+\n+    def wallet_shasum(self):\n+        h = hashlib.sha1()\n+        mv = memoryview(bytearray(BUFFER_SIZE))\n+        with open(self.wallet_path, 'rb', buffering=0) as f:\n+            for n in iter(lambda : f.readinto(mv), 0):\n+                h.update(mv[:n])\n+        return h.hexdigest()\n+\n+    def wallet_timestamp(self):\n+        return os.path.getmtime(self.wallet_path)\n+\n+    def wallet_permissions(self):\n+        return oct(os.lstat(self.wallet_path).st_mode)[-3:]\n+\n+    def log_wallet_timestamp_comparison(self, old, new):\n+        result = 'unchanged' if new == old else 'increased!'\n+        self.log.debug('Wallet file timestamp {}'.format(result))\n \n     def test_invalid_tool_commands_and_args(self):\n         self.log.info('Testing that various invalid commands raise with specific error messages')\n@@ -51,6 +74,18 @@ def test_tool_wallet_info(self):\n         # Stop the node to close the wallet to call the info command.\n         self.stop_node(0)\n         self.log.info('Calling wallet tool info, testing output')\n+        #\n+        # TODO: Wallet tool info should work with wallet file permissions set to\n+        # read-only without raising:\n+        # \"Error loading wallet.dat. Is wallet being used by another process?\"\n+        # The following lines should be uncommented and the tests still succeed:\n+        #\n+        # self.log.debug('Setting wallet file permissions to 400 (read-only)')\n+        # os.chmod(self.wallet_path, stat.S_IRUSR)\n+        # assert(self.wallet_permissions() in ['400', '666']) # Sanity check. 666 because Appveyor.\n+        # shasum_before = self.wallet_shasum()\n+        timestamp_before = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -61,6 +96,20 @@ def test_tool_wallet_info(self):\n             Address Book: 3\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+        timestamp_after = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n+        self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n+        self.log.debug('Setting wallet file permissions back to 600 (read/write)')\n+        os.chmod(self.wallet_path, stat.S_IRUSR | stat.S_IWUSR)\n+        assert(self.wallet_permissions() in ['600', '666']) # Sanity check. 666 because Appveyor.\n+        #\n+        # TODO: Wallet tool info should not write to the wallet file.\n+        # The following lines should be uncommented and the tests still succeed:\n+        #\n+        # assert_equal(timestamp_before, timestamp_after)\n+        # shasum_after = self.wallet_shasum()\n+        # assert_equal(shasum_before, shasum_after)\n+        # self.log.debug('Wallet file shasum unchanged\\n')\n \n     def test_tool_wallet_info_after_transaction(self):\n         \"\"\"\n@@ -73,6 +122,9 @@ def test_tool_wallet_info_after_transaction(self):\n         self.stop_node(0)\n \n         self.log.info('Calling wallet tool info after generating a transaction, testing output')\n+        shasum_before = self.wallet_shasum()\n+        timestamp_before = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n         out = textwrap.dedent('''\\\n             Wallet info\n             ===========\n@@ -83,9 +135,22 @@ def test_tool_wallet_info_after_transaction(self):\n             Address Book: 3\n         ''')\n         self.assert_tool_output(out, '-wallet=wallet.dat', 'info')\n+        shasum_after = self.wallet_shasum()\n+        timestamp_after = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp after calling info: {}'.format(timestamp_after))\n+        self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n+        #\n+        # TODO: Wallet tool info should not write to the wallet file.\n+        # This assertion should be uncommented and succeed:\n+        # assert_equal(timestamp_before, timestamp_after)\n+        assert_equal(shasum_before, shasum_after)\n+        self.log.debug('Wallet file shasum unchanged\\n')\n \n     def test_tool_wallet_create_on_existing_wallet(self):\n         self.log.info('Calling wallet tool create on an existing wallet, testing output')\n+        shasum_before = self.wallet_shasum()\n+        timestamp_before = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp before calling create: {}'.format(timestamp_before))\n         out = textwrap.dedent('''\\\n             Topping up keypool...\n             Wallet info\n@@ -97,21 +162,41 @@ def test_tool_wallet_create_on_existing_wallet(self):\n             Address Book: 0\n         ''')\n         self.assert_tool_output(out, '-wallet=foo', 'create')\n+        shasum_after = self.wallet_shasum()\n+        timestamp_after = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp after calling create: {}'.format(timestamp_after))\n+        self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n+        assert_equal(timestamp_before, timestamp_after)\n+        assert_equal(shasum_before, shasum_after)\n+        self.log.debug('Wallet file shasum unchanged\\n')\n \n     def test_getwalletinfo_on_different_wallet(self):\n         self.log.info('Starting node with arg -wallet=foo')\n         self.start_node(0, ['-wallet=foo'])\n \n         self.log.info('Calling getwalletinfo on a different wallet (\"foo\"), testing output')\n+        shasum_before = self.wallet_shasum()\n+        timestamp_before = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp before calling getwalletinfo: {}'.format(timestamp_before))\n         out = self.nodes[0].getwalletinfo()\n         self.stop_node(0)\n \n+        shasum_after = self.wallet_shasum()\n+        timestamp_after = self.wallet_timestamp()\n+        self.log.debug('Wallet file timestamp after calling getwalletinfo: {}'.format(timestamp_after))\n+\n         assert_equal(0, out['txcount'])\n         assert_equal(1000, out['keypoolsize'])\n         assert_equal(1000, out['keypoolsize_hd_internal'])\n         assert_equal(True, 'hdseedid' in out)\n \n+        self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n+        assert_equal(timestamp_before, timestamp_after)\n+        assert_equal(shasum_after, shasum_before)\n+        self.log.debug('Wallet file shasum unchanged\\n')\n+\n     def run_test(self):\n+        self.wallet_path = os.path.join(self.nodes[0].datadir, 'regtest', 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n         # Warning: The following tests are order-dependent.\n         self.test_tool_wallet_info()"
      }
    ]
  }
]