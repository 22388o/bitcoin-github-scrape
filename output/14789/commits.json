[
  {
    "sha": "fae620ac7d91438c417e2ca3a91975add63df65a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU2MjBhYzdkOTE0MzhjNDE3ZTJjYTNhOTE5NzVhZGQ2M2RmNjVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-22T21:12:59Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-11-22T21:18:02Z"
      },
      "message": "qa: Run feature_block tests on p2p and rpc interface",
      "tree": {
        "sha": "6d657e66bcd7e646871cfbc3f815976850677ffd",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6d657e66bcd7e646871cfbc3f815976850677ffd"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae620ac7d91438c417e2ca3a91975add63df65a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJb9x0LAAoJEM4rdWl+aaVIfJUL/jYOM0Zd92KDXx5qUf1xJxUB\nBzxlE55+0jgQiGy1y3Q3sKD2hYI2crIrrYFnh2JFwnZ+1pHWj3IV8w+EtUZycJhM\nnfAQ2PfiFDXRMMH+tSftS15jcU48x+cv/5hoUUmsZjDm3Cyp536oYzrVeELaw8E4\ndVlTLM0obGxwhUhEjwSh2JmQyPU8CE2UEzb8WeGCLFDjGSiVQ9u4V/GLGJDRDDfK\njKg0x0e7qXVonBTVPabn668TSE/ZIiEv4gHp0BbN9dCHK2aL1UM+t7eUmQF9A2CZ\n3R/W4fv5Gg6iBRn5DLJpJtKRdh56g7NiEvww6g6/Joc+4dhViMT5eY0KmDjdZEmo\nmMs9gm/4ad44wjdwceexRS7y91Y5zXOYG9yxn6Ip0gdcxkbgBEZcLCJSH2HTM/j9\n7BWDM+ETEUueVdZf/oULiR8tN0xuOmNXPa3vsnBFV27dIlJnvv98GJKQRLGStjvv\nZF1YHQH4F4Wm4IUgplATB2/PmzG+lPBXbMec5QhQHg==\n=ozS/\n-----END PGP SIGNATURE-----",
        "payload": "tree 6d657e66bcd7e646871cfbc3f815976850677ffd\nparent 2a97f192ea92e7accb21288c3c5822f480808566\nauthor MarcoFalke <falke.marco@gmail.com> 1542921179 -0500\ncommitter MarcoFalke <falke.marco@gmail.com> 1542921482 -0500\n\nqa: Run feature_block tests on p2p and rpc interface\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae620ac7d91438c417e2ca3a91975add63df65a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae620ac7d91438c417e2ca3a91975add63df65a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae620ac7d91438c417e2ca3a91975add63df65a/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2a97f192ea92e7accb21288c3c5822f480808566",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2a97f192ea92e7accb21288c3c5822f480808566",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2a97f192ea92e7accb21288c3c5822f480808566"
      }
    ],
    "stats": {
      "total": 59,
      "additions": 44,
      "deletions": 15
    },
    "files": [
      {
        "sha": "77ed8ee93f0ce2da1b2c92d864c144b7665005c7",
        "filename": "test/functional/feature_block.py",
        "status": "modified",
        "additions": 44,
        "deletions": 15,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae620ac7d91438c417e2ca3a91975add63df65a/test/functional/feature_block.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae620ac7d91438c417e2ca3a91975add63df65a/test/functional/feature_block.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_block.py?ref=fae620ac7d91438c417e2ca3a91975add63df65a",
        "patch": "@@ -44,7 +44,11 @@\n     hash160,\n )\n from test_framework.test_framework import BitcoinTestFramework\n-from test_framework.util import assert_equal\n+from test_framework.util import (\n+    assert_equal,\n+    assert_raises_rpc_error,\n+    bytes_to_hex_str,\n+)\n \n MAX_BLOCK_SIGOPS = 20000\n \n@@ -69,16 +73,19 @@ def serialize(self, with_witness=False):\n     def normal_serialize(self):\n         return super().serialize()\n \n+\n class FullBlockTest(BitcoinTestFramework):\n     def set_test_params(self):\n-        self.num_nodes = 1\n+        self.num_nodes = 2\n         self.setup_clean_chain = True\n-        self.extra_args = [[]]\n \n-    def run_test(self):\n-        node = self.nodes[0]  # convenience reference to the node\n+    def setup_network(self):\n+        # The two nodes are not connected\n+        # One is tested on the p2p interface, the other on the rpc interface\n+        self.setup_nodes()\n \n-        self.bootstrap_p2p()  # Add one p2p connection to the node\n+    def run_test(self):\n+        self.bootstrap_p2p()  # Add one p2p connection to the node 0\n \n         self.block_heights = {}\n         self.coinbase_key = CECKey()\n@@ -197,7 +204,8 @@ def run_test(self):\n         self.sync_blocks([b12, b13, b14], success=False, reject_reason='bad-cb-amount', reconnect=True)\n \n         # New tip should be b13.\n-        assert_equal(node.getbestblockhash(), b13.hash)\n+        assert_equal(self.nodes[0].getbestblockhash(), b13.hash)\n+        assert_equal(self.nodes[1].getbestblockhash(), b13.hash)\n \n         # Add a block with MAX_BLOCK_SIGOPS and one with one more sigop\n         #     genesis -> b1 (0) -> b2 (1) -> b5 (2) -> b6  (3)\n@@ -555,7 +563,7 @@ def run_test(self):\n         self.block_heights[b45.sha256] = self.block_heights[self.tip.sha256] + 1\n         self.tip = b45\n         self.blocks[45] = b45\n-        self.sync_blocks([b45], success=False, reject_reason='bad-cb-missing', reconnect=True)\n+        self.sync_blocks([b45], success=False, reject_reason='bad-cb-missing', reconnect=True, rpc_reject='Block does not start with a coinbase')\n \n         self.log.info(\"Reject a block with no transactions\")\n         self.move_tip(44)\n@@ -570,7 +578,7 @@ def run_test(self):\n         self.tip = b46\n         assert 46 not in self.blocks\n         self.blocks[46] = b46\n-        self.sync_blocks([b46], success=False, reject_reason='bad-blk-length', reconnect=True)\n+        self.sync_blocks([b46], success=False, reject_reason='bad-blk-length', reconnect=True, rpc_reject='Block does not start with a coinbase')\n \n         self.log.info(\"Reject a block with invalid work\")\n         self.move_tip(44)\n@@ -824,13 +832,13 @@ def run_test(self):\n         tx.vin.append(CTxIn(COutPoint(b64a.vtx[1].sha256, 0)))\n         b64a = self.update_block(\"64a\", [tx])\n         assert_equal(len(b64a.serialize()), MAX_BLOCK_BASE_SIZE + 8)\n-        self.sync_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize()')\n+        self.sync_blocks([b64a], success=False, reject_reason='non-canonical ReadCompactSize()', rpc_reject='Block decode failed')\n \n         # bitcoind doesn't disconnect us for sending a bloated block, but if we subsequently\n         # resend the header message, it won't send us the getdata message again. Just\n         # disconnect and reconnect and then call sync_blocks.\n         # TODO: improve this test to be less dependent on P2P DOS behaviour.\n-        node.disconnect_p2ps()\n+        self.nodes[0].disconnect_p2ps()\n         self.reconnect_p2p()\n \n         self.move_tip(60)\n@@ -1289,7 +1297,7 @@ def update_block(self, block_number, new_transactions):\n         return block\n \n     def bootstrap_p2p(self):\n-        \"\"\"Add a P2P connection to the node.\n+        \"\"\"Add a P2P connection to node 0.\n \n         Helper to connect and wait for version handshake.\"\"\"\n         self.nodes[0].add_p2p_connection(P2PDataStore())\n@@ -1302,22 +1310,43 @@ def bootstrap_p2p(self):\n         self.nodes[0].p2p.wait_for_getheaders(timeout=5)\n \n     def reconnect_p2p(self):\n-        \"\"\"Tear down and bootstrap the P2P connection to the node.\n+        \"\"\"Tear down and bootstrap the P2P connection to node 0.\n \n         The node gets disconnected several times in this test. This helper\n         method reconnects the p2p and restarts the network thread.\"\"\"\n         self.nodes[0].disconnect_p2ps()\n         self.bootstrap_p2p()\n \n-    def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, timeout=60):\n-        \"\"\"Sends blocks to test node. Syncs and verifies that tip has advanced to most recent block.\n+    def sync_blocks(self, blocks, success=True, reject_reason=None, force_send=False, reconnect=False, rpc_reject=None, timeout=60):\n+        \"\"\"Sends blocks to all test nodes. Syncs and verifies that tip has advanced to most recent block.\n \n         Call with success = False if the tip shouldn't advance to the most recent block.\"\"\"\n         self.nodes[0].p2p.send_blocks_and_test(blocks, self.nodes[0], success=success, reject_reason=reject_reason, force_send=force_send, timeout=timeout, expect_disconnect=reconnect)\n \n+        rpc_send_blocks_and_test(node=self.nodes[1], blocks=blocks, success=success, reject_reason=reject_reason, rpc_reject=rpc_reject)\n+\n         if reconnect:\n             self.reconnect_p2p()\n \n \n+def rpc_send_blocks_and_test(*, node, blocks, success, reject_reason, rpc_reject):\n+    def submit():\n+        for b in blocks:\n+            node.submitblock(hexdata=bytes_to_hex_str(b.serialize()))\n+\n+    if rpc_reject:\n+        # reject_reason is ignored\n+        assert_raises_rpc_error(code=-22, message=rpc_reject, fun=submit)\n+    else:\n+        reject_reason = [reject_reason] if reject_reason else []\n+        with node.assert_debug_log(expected_msgs=reject_reason):\n+            submit()\n+\n+    if success:\n+        assert_equal(node.getbestblockhash(), blocks[-1].hash)\n+    else:\n+        assert node.getbestblockhash() != blocks[-1].hash\n+\n+\n if __name__ == '__main__':\n     FullBlockTest().main()"
      }
    ]
  }
]