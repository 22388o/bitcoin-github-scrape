[
  {
    "sha": "bf2e010973e94c8ca2800c434cceb8bdb767f71c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZjJlMDEwOTczZTk0YzhjYTI4MDBjNDM0Y2NlYjhiZGI3NjdmNzFj",
    "commit": {
      "author": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-05-17T05:50:15Z"
      },
      "committer": {
        "name": "Karl-Johan Alm",
        "email": "karljohan-alm@garage.co.jp",
        "date": "2018-09-18T05:27:05Z"
      },
      "message": "uint256: Remove unnecessary crypto/common.h use",
      "tree": {
        "sha": "ec3824a1def9d498e7226a7ed393ba240ccabaf0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ec3824a1def9d498e7226a7ed393ba240ccabaf0"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bf2e010973e94c8ca2800c434cceb8bdb767f71c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEExCr/fGGz5EoUVM01V692LbM1MyIFAlugjKkACgkQV692LbM1\nMyL1/w/8C0WkoHxY6+8JKtSKrJNSin96E6/IzfL3ANB1ZUSj22CZdIfB/2yxJbhD\nPbLwYyvsv8VN4KcpTNbmAnlGBmawgAbDtPNnc7yrf02vB5vxaQ8BH4HU94VVC2pd\ngq2WIScJ3VeQYIAJrdzCVzu92EmDRFW53Xnlk9ValQpTbhVIB8m2Qp2hDblaEr0P\nJQvDoyvA2ngv5gBTfnXM6zDQ4kBr26P3Gyn91XvoBdewG8hL/Ejncoieg7cbCVFl\nGne3bl0wBEqrH49sqOviFY3gMvT9WtV4Cwu/oQMW6mst4oLnf2t0fJDid1JQT9iu\n8cnfx7/P2TZSFgTBwbXO0XK8Ky+6B29SbB/tD1X+PW+RJTEADivXb4Y+s7Ae5PuG\nVYAVjtUF6dayJGga3yrVkXRC1O9VRsRj4l2t8OBFYi312pKbAVQHipJ4cVUWu6s8\nJzg7+2JFBeUcWuxkERvB50mMM2pMPxhlmC7FxRXiNEsdWH4ynKXzUtiUvq2OINtG\nAtTyFfvnKnKt1rkDoSLHyKidHX27In5qTxYjSwgYM68WaMHIXhCnUG12L4I+lFXI\nvsvB3EEU011PmgKZmFKw+x2BPTmogf+whhCB5kLROUSD9tOpxn08RpCFKPRFKEmG\ngGe2PDJCcl2WNBoJmOG5JTrrNZOuGumjkZEc7KjD/2+fLRoNNCo=\n=+OEQ\n-----END PGP SIGNATURE-----",
        "payload": "tree ec3824a1def9d498e7226a7ed393ba240ccabaf0\nparent cb25cd6aa18c69918176d68e36e26f7e373aa48c\nauthor Karl-Johan Alm <karljohan-alm@garage.co.jp> 1526536215 +0900\ncommitter Karl-Johan Alm <karljohan-alm@garage.co.jp> 1537248425 +0900\n\nuint256: Remove unnecessary crypto/common.h use\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf2e010973e94c8ca2800c434cceb8bdb767f71c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bf2e010973e94c8ca2800c434cceb8bdb767f71c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bf2e010973e94c8ca2800c434cceb8bdb767f71c/comments",
    "author": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kallewoof",
      "id": 250224,
      "node_id": "MDQ6VXNlcjI1MDIyNA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/250224?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kallewoof",
      "html_url": "https://github.com/kallewoof",
      "followers_url": "https://api.github.com/users/kallewoof/followers",
      "following_url": "https://api.github.com/users/kallewoof/following{/other_user}",
      "gists_url": "https://api.github.com/users/kallewoof/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kallewoof/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kallewoof/subscriptions",
      "organizations_url": "https://api.github.com/users/kallewoof/orgs",
      "repos_url": "https://api.github.com/users/kallewoof/repos",
      "events_url": "https://api.github.com/users/kallewoof/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kallewoof/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cb25cd6aa18c69918176d68e36e26f7e373aa48c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cb25cd6aa18c69918176d68e36e26f7e373aa48c"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 21,
      "deletions": 18
    },
    "files": [
      {
        "sha": "44328c3056c30d5fdcc668e3142f5285043ea54c",
        "filename": "src/addrman.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/addrman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/addrman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/addrman.cpp?ref=bf2e010973e94c8ca2800c434cceb8bdb767f71c",
        "patch": "@@ -11,22 +11,22 @@\n \n int CAddrInfo::GetTriedBucket(const uint256& nKey) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetHash().GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetKey()).GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << (hash1 % ADDRMAN_TRIED_BUCKETS_PER_GROUP)).GetCheapHash();\n     return hash2 % ADDRMAN_TRIED_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetNewBucket(const uint256& nKey, const CNetAddr& src) const\n {\n     std::vector<unsigned char> vchSourceGroupKey = src.GetGroup();\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetHash().GetCheapHash();\n-    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << GetGroup() << vchSourceGroupKey).GetCheapHash();\n+    uint64_t hash2 = (CHashWriter(SER_GETHASH, 0) << nKey << vchSourceGroupKey << (hash1 % ADDRMAN_NEW_BUCKETS_PER_SOURCE_GROUP)).GetCheapHash();\n     return hash2 % ADDRMAN_NEW_BUCKET_COUNT;\n }\n \n int CAddrInfo::GetBucketPosition(const uint256 &nKey, bool fNew, int nBucket) const\n {\n-    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetHash().GetCheapHash();\n+    uint64_t hash1 = (CHashWriter(SER_GETHASH, 0) << nKey << (fNew ? 'N' : 'K') << nBucket << GetKey()).GetCheapHash();\n     return hash1 % ADDRMAN_BUCKET_SIZE;\n }\n "
      },
      {
        "sha": "1645eceb03113144d4364cd8a96d7d7c6ac40348",
        "filename": "src/hash.h",
        "status": "modified",
        "additions": 10,
        "deletions": 0,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/hash.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/hash.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/hash.h?ref=bf2e010973e94c8ca2800c434cceb8bdb767f71c",
        "patch": "@@ -6,6 +6,7 @@\n #ifndef BITCOIN_HASH_H\n #define BITCOIN_HASH_H\n \n+#include <crypto/common.h>\n #include <crypto/ripemd160.h>\n #include <crypto/sha256.h>\n #include <prevector.h>\n@@ -138,6 +139,15 @@ class CHashWriter\n         return result;\n     }\n \n+    /**\n+     * Returns the first 64 bits from the resulting hash.\n+     */\n+    inline uint64_t GetCheapHash() {\n+        unsigned char result[CHash256::OUTPUT_SIZE];\n+        ctx.Finalize(result);\n+        return ReadLE64(result);\n+    }\n+\n     template<typename T>\n     CHashWriter& operator<<(const T& obj) {\n         // Serialize to this stream"
      },
      {
        "sha": "42ac345b4a6bd72f8d3ca8b68e40c02f3a72bc9d",
        "filename": "src/test/addrman_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/test/addrman_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/test/addrman_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/addrman_tests.cpp?ref=bf2e010973e94c8ca2800c434cceb8bdb767f71c",
        "patch": "@@ -34,7 +34,7 @@ class CAddrManTest : public CAddrMan\n \n     int RandomInt(int nMax) override\n     {\n-        state = (CHashWriter(SER_GETHASH, 0) << state).GetHash().GetCheapHash();\n+        state = (CHashWriter(SER_GETHASH, 0) << state).GetCheapHash();\n         return (unsigned int)(state % nMax);\n     }\n "
      },
      {
        "sha": "97e0cfa015fc2249bde549d0d5bba238233268e3",
        "filename": "src/uint256.h",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/uint256.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/uint256.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/uint256.h?ref=bf2e010973e94c8ca2800c434cceb8bdb767f71c",
        "patch": "@@ -12,7 +12,6 @@\n #include <stdint.h>\n #include <string>\n #include <vector>\n-#include <crypto/common.h>\n \n /** Template base class for fixed-sized opaque blobs. */\n template<unsigned int BITS>\n@@ -123,16 +122,6 @@ class uint256 : public base_blob<256> {\n public:\n     uint256() {}\n     explicit uint256(const std::vector<unsigned char>& vch) : base_blob<256>(vch) {}\n-\n-    /** A cheap hash function that just returns 64 bits from the result, it can be\n-     * used when the contents are considered uniformly random. It is not appropriate\n-     * when the value can easily be influenced from outside as e.g. a network adversary could\n-     * provide values to trigger worst-case behavior.\n-     */\n-    uint64_t GetCheapHash() const\n-    {\n-        return ReadLE64(data);\n-    }\n };\n \n /* uint256 from const char *."
      },
      {
        "sha": "7cfbc814735a397a4d1cacc17985809a20b89e22",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bf2e010973e94c8ca2800c434cceb8bdb767f71c/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=bf2e010973e94c8ca2800c434cceb8bdb767f71c",
        "patch": "@@ -12,6 +12,7 @@\n \n #include <amount.h>\n #include <coins.h>\n+#include <crypto/common.h> // for ReadLE64\n #include <fs.h>\n #include <protocol.h> // For CMessageHeader::MessageStartChars\n #include <policy/feerate.h>\n@@ -138,7 +139,10 @@ static const int DEFAULT_STOPATHEIGHT = 0;\n \n struct BlockHasher\n {\n-    size_t operator()(const uint256& hash) const { return hash.GetCheapHash(); }\n+    // this used to call `GetCheapHash()` in uint256, which was later moved; the\n+    // cheap hash function simply calls ReadLE64() however, so the end result is\n+    // identical\n+    size_t operator()(const uint256& hash) const { return ReadLE64(hash.begin()); }\n };\n \n extern CScript COINBASE_FLAGS;"
      }
    ]
  }
]