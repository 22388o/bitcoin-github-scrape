MarcoFalke,2020-04-22 14:33:43,ACK 9014c59d55f912e7d161d49cd3c21c00b2f15a55,https://github.com/bitcoin/bitcoin/pull/18736#issuecomment-617816650,617816650,
practicalswift,2020-04-22 14:43:19,@MarcoFalke Thanks a lot for the super quick review. I added another commit which adds fuzzing coverage for two functions (`JSONRPCTransactionError` and `RPCErrorFromTransactionError`) by re-using the same `TransactionError` object used for fuzzing `TransactionErrorString`. Please re-review :),https://github.com/bitcoin/bitcoin/pull/18736#issuecomment-617822574,617822574,
DrahtBot,2020-04-24 12:47:18,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18775 (tests: Add fuzzing harnesses for various classes/functions in policy/ (CBlockPolicyEstimator, IsRBFOptIn(â€¦), etc.)",https://github.com/bitcoin/bitcoin/pull/18736#issuecomment-618987584,618987584,
practicalswift,2020-04-26 20:18:16,Rebased! :),https://github.com/bitcoin/bitcoin/pull/18736#issuecomment-619618880,619618880,
MarcoFalke,2020-04-22 14:29:35,lol,https://github.com/bitcoin/bitcoin/pull/18736#discussion_r413033133,413033133,src/test/fuzz/kitchen_sink.cpp
MarcoFalke,2020-04-22 14:33:30,Is this not `string.cpp` related?,https://github.com/bitcoin/bitcoin/pull/18736#discussion_r413036476,413036476,src/test/fuzz/kitchen_sink.cpp
practicalswift,2020-04-22 14:36:35,"`src/test/fuzz/string.cpp` is used for fuzzing functions taking `std::string` or `std::vector<std::string>` as inputs whereas this one takes a `TransactionError` as input (the only method doing so).\n\nI think this one deserves to be in the new ""anything goes"" `kitchen_sink.cpp` due to lack of a more appropriate home :)",https://github.com/bitcoin/bitcoin/pull/18736#discussion_r413039082,413039082,src/test/fuzz/kitchen_sink.cpp
