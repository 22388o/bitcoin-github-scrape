DrahtBot,2019-07-09 22:34:20,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#22736](https://github.com/bitcoin/bitcoin/pull/22736) (log, sync: change lock contention from preprocessor directive to ",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-509834814,509834814,
promag,2019-07-10 21:48:30,How about private keys?,https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-510241739,510241739,
promag,2019-07-12 00:56:02,"IMO the blacklist doesn't look a great option.\n\nHow about disallow `-debug=rpcparams` in mainnet and drop the blacklist?\n",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-510704397,510704397,
instagibbs,2019-07-12 18:16:06,"concept NACK, someone is going to forget when adding a new RPC and start logging secrets in production.\n\nI think @promag suggestion is better.\n\n",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-510983178,510983178,
promag,2019-08-05 14:04:14,Another approach is to add a sensitive options/flag (false by default) to ~~`RPCHelpMan`~~ `RPCArg`.,https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-518247800,518247800,
LarryRuane,2019-08-06 06:19:00,"@promag, interesting idea, I like that it would allow specific arguments to be designated as sensitive, rather than the entire method. Also, it would be nice not to have to touch so many lines of code (as my latest commit does). But @instagibbs's concern, https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-510983178, which I was attempted to overcome with my latest commit, becomes live agai",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-518520963,518520963,
LarryRuane,2019-08-22 18:28:43,"Rebased, replaced functional (python) test with a proper unit test.",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-524023180,524023180,
LarryRuane,2019-09-02 20:35:57,"I had an idea for what may be an improvement. It's in a separate commit, ""replace sensitive bool with more general flags"".  Please let me know what you think; this commit is optional.\n\nModifying all of the lines of the `static const CRPCCommand commands[]` tables is disruptive, and all that's being done is to add a boolean value (to indicate whether to log the RPC's params or not). As long as ",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-527239194,527239194,
LarryRuane,2019-11-07 21:08:53,Rebased to resolve conflicts.,https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-551264892,551264892,
LarryRuane,2019-11-22 16:46:43,I don't know the cause of the Travis CI failure; `feature_pruning.py` succeeds on my machine. I would not think this PR has any particular connection to that test. Maybe it's a transient failure?,https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-557606403,557606403,
LarryRuane,2020-01-10 15:33:53,"Sorry, I accidentally closed this PR, reopening now...",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-573083095,573083095,
LarryRuane,2020-03-16 04:58:11,"> Couldn't we use this approach for now?\n\nJust so I'm sure I understand, you're suggesting not adding the `flags` member to `CRPCCommand` ([here](https://github.com/bitcoin/bitcoin/pull/16365/files#diff-a0fb7350bf105d107147e0d10f727f47R121), which causes many lines to be touched, and that's clearly undesirable), and instead just don't censor anything (no black or white list), but restrict this",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-599345302,599345302,
sipa,2020-03-17 17:46:03,"So it seems everything depends on whether this is considered useful for mainnet. I can imagine that for production logging it is. If not, @promag's approach is fine. If it is, the safest approach seems something like the current approach.\n\nThere is perhaps a less disruptive approach:\n* Make it possible to have an optional argument to the CRPCCommand constructors, which defaults to DONT_LOG, ",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-600208919,600208919,
LarryRuane,2020-09-29 06:05:12,"Force-pushed ([diff](https://github.com/bitcoin/bitcoin/compare/ae1ffd9530e046b13a3ee5f383560809f751c530..45fb5d040e0aadc22718d35a569dd841c2830d5f)) a different approach that does _not_ require changing each of the 149 per-rpc `CRPCCommand` initializers. This new way is _much_ less invasive and more manageable. I finally decided it's best to go with an ""allow"" list (hard to beat simplicity). If so",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-700469861,700469861,
LarryRuane,2021-08-20 15:37:19,"> Maintenance of this list seems like a drawback\n\nI agree, I'm going to convert this PR to draft because I think there's a better way to do this that doesn't require a separate list. I'll also pick up your other suggestions. Thanks for taking the time to look it over!",https://github.com/bitcoin/bitcoin/pull/16365#issuecomment-902780650,902780650,
MarcoFalke,2019-07-09 21:03:14,Looks like this list is incomplete. Would be nice if it can be deduplicated with the existing `QStringList historyFilter`,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r301793038,301793038,src/rpc/server.cpp
fqlx,2019-07-10 00:02:28,This blacklist should be pulled out of a config rather than buried in the code.,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r301840263,301840263,src/rpc/server.cpp
LarryRuane,2019-07-10 17:52:32,"What do you mean by ""config""? Are you referring to `~/.bitcoin/bitcoin.conf`?",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r302195082,302195082,src/rpc/server.cpp
MarcoFalke,2019-07-10 18:03:34,"I mean that it should go into a common module, probably `./src/util/` or similar.",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r302200131,302200131,src/rpc/server.cpp
LarryRuane,2019-07-11 05:04:04,"I'm undecided if a new category is needed, or just enable this additional logging with `rpc`. We don't have many of the 32 category bits remaining (although we could easily change to use a `uint64_t`).",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r302364549,302364549,src/logging.h
LarryRuane,2019-07-11 05:05:57,Could print each param on a separate line.,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r302364868,302364868,src/rpc/request.cpp
LarryRuane,2020-03-18 01:56:10,"This is to show how to enable logging, an example.",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r394065414,394065414,src/rpc/server.cpp
LarryRuane,2020-03-18 01:56:34,This has changed to also print the method string.,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r394065508,394065508,src/rpc/server.cpp
LarryRuane,2020-03-18 01:58:25,"I could remove this, but this change allows `test/lint/check-rpc-mappings.py` to check this file also (was missing).",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r394065951,394065951,src/zmq/zmqrpc.cpp
LarryRuane,2020-03-18 01:58:48,Added two missing files (besides my test).,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r394066053,394066053,test/lint/check-rpc-mappings.py
LarryRuane,2020-03-18 01:59:42,"If testnet, always show the arguments.",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r394066286,394066286,src/rpc/server.cpp
LarryRuane,2020-09-29 14:58:36,"This allow list came from listing all the RPCs and then removing the following:\n```\nsignmessagewithprivkey\nsignrawtransactionwithkey\nsignrawtransactionwithwallet\nsignmessage\ncreatewallet\nencryptwallet\nimportmulti\nimportprivkey\nsethdseed\nwalletpassphrase\nwalletpassphrasechange\n```\nAs far as I can tell, these are the RPCs whose arguments shouldn't be logged.",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r496788930,496788930,src/rpc/server.cpp
jonatack,2021-08-19 11:02:57,`test/functional/rpc_misc.py::L60` needs to be updated: `AssertionError: not(25 == 24)`,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692008618,692008618,src/logging.h
jonatack,2021-08-19 11:04:18,"This list seems to need an update for new RPCS (`restorewallet` comes to mind, not sure if there are others)",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692009374,692009374,src/rpc/server.cpp
jonatack,2021-08-19 11:10:46,"Maintainence of this list seems like a drawback. It would be nice if a test fails somewhere when an RPC is added or removed without the allow list being updated, e.g. with a list of structs of all the RPCs with an associated safe/unsafe bool value, or something like `CRPCConvertParam`. Feel to ignore if unrealistic.",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692013254,692013254,src/rpc/server.cpp
jonatack,2021-08-19 11:11:15,Maybe replace this loop with a call to `util/string.h::Join()`,https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692013587,692013587,src/rpc/server.cpp
jonatack,2021-08-19 11:37:51,"Some (tested) ideas, feel free to pick/choose/ignore\n```diff\n-    FILE* file = fsbridge::fopen(LogInstance().m_file_path, ""rb"");\n+    FILE* file{fsbridge::fopen(LogInstance().m_file_path, ""rb"")};\n     fseek(file, 0, SEEK_END);\n     std::vector<char> vch(ftell(file), 0);\n     fseek(file, 0, SEEK_SET);\n-    size_t nbytes = fread(vch.data(), 1, vch.size(), file);\n+    const size_t nby",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692030348,692030348,src/test/rpc_tests.cpp
jonatack,2021-08-19 11:49:04,"Not sure here, perhaps separate the params with `"", ""` (comma + space)\n\nnow\n```\n2021-08-19T11:45:46Z rpc=getmempoolancestors(b6a5ed05bc71c8ccc5316,true)\n```\ncomma+space\n```\n2021-08-19T11:45:46Z rpc=getmempoolancestors(b6a5ed05bc71c8ccc5316, true)\n```\n",https://github.com/bitcoin/bitcoin/pull/16365#discussion_r692037204,692037204,src/rpc/server.cpp
