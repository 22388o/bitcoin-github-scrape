[
  {
    "sha": "7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3ZDIyYTZmYWQ5ZDg1NWU5ZGJiMGJjYTcwODU3YzlhYWRjNTVmMTg4",
    "commit": {
      "author": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2020-09-29T05:47:03Z"
      },
      "committer": {
        "name": "Larry Ruane",
        "email": "larryruane@gmail.com",
        "date": "2021-04-29T20:01:54Z"
      },
      "message": "Log RPC parameters if -debug=rpcparams",
      "tree": {
        "sha": "50a204611ee6076b17c8c6eee3d376ca4d5670dc",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/50a204611ee6076b17c8c6eee3d376ca4d5670dc"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/comments",
    "author": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "LarryRuane",
      "id": 8321330,
      "node_id": "MDQ6VXNlcjgzMjEzMzA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/8321330?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/LarryRuane",
      "html_url": "https://github.com/LarryRuane",
      "followers_url": "https://api.github.com/users/LarryRuane/followers",
      "following_url": "https://api.github.com/users/LarryRuane/following{/other_user}",
      "gists_url": "https://api.github.com/users/LarryRuane/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/LarryRuane/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/LarryRuane/subscriptions",
      "organizations_url": "https://api.github.com/users/LarryRuane/orgs",
      "repos_url": "https://api.github.com/users/LarryRuane/repos",
      "events_url": "https://api.github.com/users/LarryRuane/events{/privacy}",
      "received_events_url": "https://api.github.com/users/LarryRuane/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "40310f5e8cd783a8114dc07224b435497bae6817",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/40310f5e8cd783a8114dc07224b435497bae6817",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/40310f5e8cd783a8114dc07224b435497bae6817"
      }
    ],
    "stats": {
      "total": 199,
      "additions": 199,
      "deletions": 0
    },
    "files": [
      {
        "sha": "abb5d5aed3796730f210856651fb3b5f26601ec0",
        "filename": "src/logging.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/logging.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/logging.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.cpp?ref=7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
        "patch": "@@ -158,6 +158,7 @@ const CLogCategoryDesc LogCategories[] =\n     {BCLog::VALIDATION, \"validation\"},\n     {BCLog::I2P, \"i2p\"},\n     {BCLog::IPC, \"ipc\"},\n+    {BCLog::RPCPARAMS, \"rpcparams\"},\n     {BCLog::ALL, \"1\"},\n     {BCLog::ALL, \"all\"},\n };"
      },
      {
        "sha": "4f564b1175cf7fc97bd8f64593ab6e8ee4c4217b",
        "filename": "src/logging.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/logging.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/logging.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/logging.h?ref=7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
        "patch": "@@ -59,6 +59,7 @@ namespace BCLog {\n         VALIDATION  = (1 << 21),\n         I2P         = (1 << 22),\n         IPC         = (1 << 23),\n+        RPCPARAMS   = (1 << 24),\n         ALL         = ~(uint32_t)0,\n     };\n "
      },
      {
        "sha": "68b5e46efe1283b83febb0ac9010d36a643a9f70",
        "filename": "src/rpc/server.cpp",
        "status": "modified",
        "additions": 157,
        "deletions": 0,
        "changes": 157,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/rpc/server.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/rpc/server.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpc/server.cpp?ref=7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
        "patch": "@@ -470,6 +470,163 @@ UniValue CRPCTable::execute(const JSONRPCRequest &request) const\n \n static bool ExecuteCommand(const CRPCCommand& command, const JSONRPCRequest& request, UniValue& result, bool last_handler)\n {\n+    // Log RPC arguments if requested, unless sensitive.\n+    if (LogAcceptCategory(BCLog::RPCPARAMS)) {\n+        // These RPCs don't log any private or secret information.\n+        static const std::unordered_set<std::string> logging_allow_list{\n+            \"abandontransaction\",\n+            \"abortrescan\",\n+            \"addmultisigaddress\",\n+            \"addnode\",\n+            \"addpeeraddress\",\n+            \"analyzepsbt\",\n+            \"backupwallet\",\n+            \"bumpfee\",\n+            \"clearbanned\",\n+            \"combinepsbt\",\n+            \"combinerawtransaction\",\n+            \"converttopsbt\",\n+            \"createmultisig\",\n+            \"createpsbt\",\n+            \"createrawtransaction\",\n+            \"decodepsbt\",\n+            \"decoderawtransaction\",\n+            \"decodescript\",\n+            \"deriveaddresses\",\n+            \"disconnectnode\",\n+            \"dumpprivkey\",\n+            \"dumptxoutset\",\n+            \"dumpwallet\",\n+            \"echo\",\n+            \"echojson\",\n+            \"estimaterawfee\",\n+            \"estimatesmartfee\",\n+            \"finalizepsbt\",\n+            \"fundrawtransaction\",\n+            \"generate\",\n+            \"generateblock\",\n+            \"generatetoaddress\",\n+            \"generatetodescriptor\",\n+            \"getaddednodeinfo\",\n+            \"getaddressesbylabel\",\n+            \"getaddressinfo\",\n+            \"getbalance\",\n+            \"getbalances\",\n+            \"getbestblockhash\",\n+            \"getblock\",\n+            \"getblockchaininfo\",\n+            \"getblockcount\",\n+            \"getblockfilter\",\n+            \"getblockhash\",\n+            \"getblockheader\",\n+            \"getblockstats\",\n+            \"getblocktemplate\",\n+            \"getchaintips\",\n+            \"getchaintxstats\",\n+            \"getconnectioncount\",\n+            \"getdescriptorinfo\",\n+            \"getdifficulty\",\n+            \"getindexinfo\",\n+            \"getmemoryinfo\",\n+            \"getmempoolancestors\",\n+            \"getmempooldescendants\",\n+            \"getmempoolentry\",\n+            \"getmempoolinfo\",\n+            \"getmininginfo\",\n+            \"getnettotals\",\n+            \"getnetworkhashps\",\n+            \"getnetworkinfo\",\n+            \"getnewaddress\",\n+            \"getnodeaddresses\",\n+            \"getpeerinfo\",\n+            \"getrawchangeaddress\",\n+            \"getrawmempool\",\n+            \"getrawtransaction\",\n+            \"getreceivedbyaddress\",\n+            \"getreceivedbylabel\",\n+            \"getrpcinfo\",\n+            \"gettransaction\",\n+            \"gettxout\",\n+            \"gettxoutproof\",\n+            \"gettxoutsetinfo\",\n+            \"getunconfirmedbalance\",\n+            \"getwalletinfo\",\n+            \"getzmqnotifications\",\n+            \"help\",\n+            \"importaddress\",\n+            \"importdescriptors\",\n+            \"importprunedfunds\",\n+            \"importpubkey\",\n+            \"importwallet\",\n+            \"invalidateblock\",\n+            \"joinpsbts\",\n+            \"keypoolrefill\",\n+            \"listaddressgroupings\",\n+            \"listbanned\",\n+            \"listlabels\",\n+            \"listlockunspent\",\n+            \"listreceivedbyaddress\",\n+            \"listreceivedbylabel\",\n+            \"listsinceblock\",\n+            \"listtransactions\",\n+            \"listunspent\",\n+            \"listwalletdir\",\n+            \"listwallets\",\n+            \"loadwallet\",\n+            \"lockunspent\",\n+            \"logging\",\n+            \"mockscheduler\",\n+            \"ping\",\n+            \"preciousblock\",\n+            \"prioritisetransaction\",\n+            \"pruneblockchain\",\n+            \"psbtbumpfee\",\n+            \"reconsiderblock\",\n+            \"removeprunedfunds\",\n+            \"rescanblockchain\",\n+            \"savemempool\",\n+            \"scantxoutset\",\n+            \"sendmany\",\n+            \"sendrawtransaction\",\n+            \"sendtoaddress\",\n+            \"setban\",\n+            \"setlabel\",\n+            \"setmocktime\",\n+            \"setnetworkactive\",\n+            \"settxfee\",\n+            \"setwalletflag\",\n+            \"stop\",\n+            \"submitblock\",\n+            \"submitheader\",\n+            \"testmempoolaccept\",\n+            \"unloadwallet\",\n+            \"upgradewallet\",\n+            \"uptime\",\n+            \"utxoupdatepsbt\",\n+            \"validateaddress\",\n+            \"verifychain\",\n+            \"verifymessage\",\n+            \"verifytxoutproof\",\n+            \"waitforblock\",\n+            \"waitforblockheight\",\n+            \"waitfornewblock\",\n+            \"walletcreatefundedpsbt\",\n+            \"walletlock\",\n+            \"walletprocesspsbt\",\n+        };\n+        std::string params;\n+        if (logging_allow_list.find(request.strMethod) == logging_allow_list.end()) {\n+            params = \"****\";\n+        } else {\n+            for (size_t i = 0; i < request.params.size(); ++i) {\n+                if (i > 0) {\n+                    params += \",\";\n+                }\n+                params += request.params[i].write();\n+            }\n+        }\n+        LogPrintf(\"rpc=%s(%s)\\n\", request.strMethod, SanitizeString(params, SAFE_CHARS_URI));\n+    }\n     try\n     {\n         RPCCommandExecution execution(request.strMethod);"
      },
      {
        "sha": "047f3a23592b725c5ac76f9e346b310cbf000c56",
        "filename": "src/test/rpc_tests.cpp",
        "status": "modified",
        "additions": 40,
        "deletions": 0,
        "changes": 40,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/test/rpc_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/7d22a6fad9d855e9dbb0bca70857c9aadc55f188/src/test/rpc_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/rpc_tests.cpp?ref=7d22a6fad9d855e9dbb0bca70857c9aadc55f188",
        "patch": "@@ -20,6 +20,7 @@\n #include <univalue.h>\n \n #include <rpc/blockchain.h>\n+#include <logging.h>\n \n class RPCTestingSetup : public TestingSetup\n {\n@@ -473,4 +474,43 @@ BOOST_AUTO_TEST_CASE(help_example)\n     BOOST_CHECK_NE(HelpExampleRpcNamed(\"foo\", {{\"arg\", true}}), HelpExampleRpcNamed(\"foo\", {{\"arg\", \"true\"}}));\n }\n \n+BOOST_AUTO_TEST_CASE(rpc_logparams)\n+{\n+    LogInstance().EnableCategory(BCLog::RPCPARAMS);\n+    // Test zero, 1, and 2 arguments, and array arguments.\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"getnetworkinfo\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"verifychain 2\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"verifychain 1 0\")));\n+    BOOST_CHECK_NO_THROW(CallRPC(std::string(\"logging [\\\"rpcparams\\\",\\\"rpc\\\"] [\\\"mempool\\\"]\")));\n+\n+    // Even though it fails, this RPC should be logged -- but not its arguments.\n+    BOOST_CHECK_THROW(CallRPC(std::string(\"signmessagewithprivkey some-key some-message\")), std::runtime_error);\n+\n+    // Open and read debug.log.\n+    FILE* file = fsbridge::fopen(LogInstance().m_file_path, \"rb\");\n+    fseek(file, 0, SEEK_END);\n+    std::vector<char> vch(ftell(file), 0);\n+    fseek(file, 0, SEEK_SET);\n+    size_t nbytes = fread(vch.data(), 1, vch.size(), file);\n+    fclose(file);\n+\n+    // This checks the test (not the code being tested).\n+    BOOST_CHECK_EQUAL(nbytes, vch.size());\n+\n+    // Check that what should appear does, and what shouldn't doesn't.\n+    std::string str(vch.begin(), vch.end());\n+\n+    // These should be found in debug.log.\n+    BOOST_CHECK(str.find(\"rpc=getnetworkinfo()\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"rpc=verifychain(2)\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"rpc=verifychain(1,0)\") != std::string::npos);\n+    BOOST_CHECK(str.find(\"rpc=logging([rpcparams,rpc],[mempool])\") != std::string::npos);\n+\n+    // All arguments replaced by **** (secret information)\n+    BOOST_CHECK(str.find(\"rpc=signmessagewithprivkey(****)\") != std::string::npos);\n+    // Make sure these don't somehow appear\n+    BOOST_CHECK(str.find(\"some-key\") == std::string::npos);\n+    BOOST_CHECK(str.find(\"some-message\") == std::string::npos);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]