[
  {
    "sha": "9be75f223577108bc573c2b04f2f8c67eefe88ef",
    "node_id": "C_kwDOABII59oAKDliZTc1ZjIyMzU3NzEwOGJjNTczYzJiMDRmMmY4YzY3ZWVmZTg4ZWY",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T19:15:10Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-29T16:21:00Z"
      },
      "message": "validation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...",
      "tree": {
        "sha": "ff09b6fe059d0050866803fdb0bf675790ee370d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ff09b6fe059d0050866803fdb0bf675790ee370d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9be75f223577108bc573c2b04f2f8c67eefe88ef",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGk/e4ACgkQepNdrbLE\nTwUS0g//dLoumWuBsLBRLY+lAdYhVuzL1hwMwCnMG8brTJekpAyTmV+umKzQQ4L8\n/2nmdctFrgwQxMJ7psCNIjHdP+oPwyKsE9JIPVGhs6cn5Pb2gAAtco7tdGnB2uf0\nVrAzVigpYqZPBiy1gqLyua4AXzB0h/x+iL6Nu+soIHTC2pID28OPvCAkTE+aiSiR\n7MyKnXXHG289816q9mopZKibnlHHib4o1NSvI/N0EgmNUtBNo2grst4JJ6ajWKdX\nOMHUrXVVYFFVlszC4Fa3EtmSozpi/JUqwTEPj8l/uO0URdwOy/MPT4HvzAq6mbPM\nSkTmeSSK8lFb9S1OA6hL9xTj+UYSeA99c8nOoxXvSExrhFhDXgOmHOCLLBpVSpoD\ndiU62Ta/jGQg7o96/XziH1MgvgjbGAp8qa/LxcvWlpS91DW+U52qAEFzrfk1Hmxw\n+naq4RfHw8D+OUCJqWbpYyPb7qvMzmAIbGj/D6i/0yiu0uP4cHdMJJB6ryO9226w\nfKqsD0s5KMP431et4IeKu/RINBWJUYnZJ6wsW/lYjNR5SOipx8U8NInuuAluqUXq\nQ8qnQ6vk2U06rh5jEQpMmkUd37XoH+5A1dDwFfb3lCDHhZpTofsCbmYBv+nWnRwG\nrHpERe7KmYnI4IqahpJlTf6M5i63zcU/VaQh6tXHfMkfve6E8aQ=\n=CqrZ\n-----END PGP SIGNATURE-----",
        "payload": "tree ff09b6fe059d0050866803fdb0bf675790ee370d\nparent af4275e8dbde0fd85b590175f1e932164762d741\nauthor James O'Beirne <james.obeirne@pm.me> 1635448510 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1638202860 -0500\n\nvalidation: don't modify genesis during snapshot load\n\nAvoid modifying the genesis block index entry during snapshot load. This\nis because, in a future change that fixes LoadBlockIndex for UTXO\nsnapshots, we detect block index entries that are reliant on\nassumed-valid ancestors and treat them specially.\n\nSince the genesis block doesn't have BLOCK_VALID_SCRIPTS, it would be\nerroneously marked BLOCK_ASSUMED_VALID during snapshot load if we didn't\nskip it here. This would cause a \"setBlockIndexCandidates() empty\"\nassertion to be tripped since all block index entries would be marked\nassume-valid due to genesis, which is never re-validated.\n\nThere's probably no good reason to modify the genesis block index entry\nduring snapshot load anyway...\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9be75f223577108bc573c2b04f2f8c67eefe88ef",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9be75f223577108bc573c2b04f2f8c67eefe88ef",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9be75f223577108bc573c2b04f2f8c67eefe88ef/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af4275e8dbde0fd85b590175f1e932164762d741",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af4275e8dbde0fd85b590175f1e932164762d741",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af4275e8dbde0fd85b590175f1e932164762d741"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 11,
      "deletions": 1
    },
    "files": [
      {
        "sha": "ca38f9d5faeddc997810da336b1911d24aa45c5f",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9be75f223577108bc573c2b04f2f8c67eefe88ef/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9be75f223577108bc573c2b04f2f8c67eefe88ef/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=9be75f223577108bc573c2b04f2f8c67eefe88ef",
        "patch": "@@ -232,6 +232,9 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         *chainman.ActiveChainstate().m_from_snapshot_blockhash,\n         *chainman.SnapshotBlockhash());\n \n+    // Ensure that the genesis block was not marked assumed-valid.\n+    BOOST_CHECK(!chainman.ActiveChain().Genesis()->IsAssumedValid());\n+\n     const AssumeutxoData& au_data = *ExpectedAssumeutxo(snapshot_height, ::Params());\n     const CBlockIndex* tip = chainman.ActiveTip();\n "
      },
      {
        "sha": "d05f66143fd00048c8675596ba196f539aa1353e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 1,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9be75f223577108bc573c2b04f2f8c67eefe88ef/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9be75f223577108bc573c2b04f2f8c67eefe88ef/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=9be75f223577108bc573c2b04f2f8c67eefe88ef",
        "patch": "@@ -4909,7 +4909,14 @@ bool ChainstateManager::PopulateAndValidateSnapshot(\n \n     // Fake various pieces of CBlockIndex state:\n     CBlockIndex* index = nullptr;\n-    for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+\n+    // Don't make any modifications to the genesis block.\n+    // This is especially important because we don't want to erroneously\n+    // apply BLOCK_ASSUMED_VALID to genesis, which would happen if we didn't skip\n+    // it here (since it apparently isn't BLOCK_VALID_SCRIPTS).\n+    constexpr int AFTER_GENESIS_START{1};\n+\n+    for (int i = AFTER_GENESIS_START; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n         index = snapshot_chainstate.m_chain[i];\n \n         // Fake nTx so that LoadBlockIndex() loads assumed-valid CBlockIndex"
      }
    ]
  },
  {
    "sha": "36e2bc4275fdb0d72390215fcea4d499f8049701",
    "node_id": "C_kwDOABII59oAKDM2ZTJiYzQyNzVmZGIwZDcyMzkwMjE1ZmNlYTRkNDk5ZjgwNDk3MDE",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-10-28T20:07:46Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-29T16:21:08Z"
      },
      "message": "validation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.\n\nCo-authored-by: Russ Yanofsky <russ@yanofsky.org>",
      "tree": {
        "sha": "688679ffab44296d967276615be74ea398b47802",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/688679ffab44296d967276615be74ea398b47802"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/36e2bc4275fdb0d72390215fcea4d499f8049701",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGk/fQACgkQepNdrbLE\nTwW6Sg//X8ICXQOMTy4+4p8riAjzekxkjnQ7CY4jmoJ7BbgHfTsp1/3xF+WgkfTe\nerSnU8vB9YKZVaENZc7U2cQ5vKjw3TTiuENcySfXt3ar2Pjh+jg0/kdidbwkrQ7P\nTphZ3XcydJNmZDW35lAi1WpDXAdZO6SCqi0o2wDeTZNE0qIm6hOvRixT8EUYVtxz\n3iiHmPOwyuPR9z7q/G8skAE51n+oug7Mdtl9oM00sIAMQXII4OFYUILSnZ+2WCD7\njbIjlfCFV5NQVpHhCyPSZ34d+rnR74lo7vhHzSsEKZuCU1LdyA1QZCecLokJlf3j\nfI73iwVYbdxc9Hfqx7dX/tq08bSXlA2ztaWRwmJfIC2ovcVqVm/uHUvlKSdwCdq9\nbgRGqlKPuDHi/UA7bPQWTkaF0Ip6oW0n6W5hebcKxR+LdJuLTrI7EwbGGfC7uVNl\nn5wl7MQu4EM9Ao2YPpg7jrTvY+eo3IjA5Ey5mkDds8pJq+y9Cbi0v7slC2Oi7Mhm\nM2WpTqYqDD3Q8vW6T/E0k+62g2PTDndNkWNXHguLNIb9FoyX1Zo32mzYMeswwCfP\nSVn83RNOQJOY9aiekBtJpiRjGVXiNQdXJaHlabn5f4phTmmc/ubn22u3L1/UFKpj\n/vtk7XbVYQ3t7ejdpvbZb2pF72NkkHQ1t6Oluv2QhdOOu4J1S78=\n=ejmc\n-----END PGP SIGNATURE-----",
        "payload": "tree 688679ffab44296d967276615be74ea398b47802\nparent 9be75f223577108bc573c2b04f2f8c67eefe88ef\nauthor James O'Beirne <james.obeirne@pm.me> 1635451666 -0400\ncommitter James O'Beirne <james.obeirne@pm.me> 1638202868 -0500\n\nvalidation: have LoadBlockIndex account for snapshot use\n\nEnsure that blocks past the snapshot base block (i.e. the end of the\nassumed-valid region of the chain) are not included in\nsetBlockIndexCandidates for the background validation chainstate. These\nblocks, while fully validated and lacking the BLOCK_ASSUMED_VALID flag,\n*rely* on blocks which are assumed-valid, and so shouldn't be added to\nthe IBD chainstate.\n\nCo-authored-by: Russ Yanofsky <russ@yanofsky.org>\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e2bc4275fdb0d72390215fcea4d499f8049701",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/36e2bc4275fdb0d72390215fcea4d499f8049701",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e2bc4275fdb0d72390215fcea4d499f8049701/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9be75f223577108bc573c2b04f2f8c67eefe88ef",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9be75f223577108bc573c2b04f2f8c67eefe88ef",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9be75f223577108bc573c2b04f2f8c67eefe88ef"
      }
    ],
    "stats": {
      "total": 73,
      "additions": 58,
      "deletions": 15
    },
    "files": [
      {
        "sha": "1f75a6baf7f1f413cd8626a2162fd56386c5682e",
        "filename": "src/validation.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 9,
        "changes": 61,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36e2bc4275fdb0d72390215fcea4d499f8049701/src/validation.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36e2bc4275fdb0d72390215fcea4d499f8049701/src/validation.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.cpp?ref=36e2bc4275fdb0d72390215fcea4d499f8049701",
        "patch": "@@ -3607,7 +3607,7 @@ CBlockIndex * BlockManager::InsertBlockIndex(const uint256& hash)\n \n bool BlockManager::LoadBlockIndex(\n     const Consensus::Params& consensus_params,\n-    std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n+    ChainstateManager& chainman)\n {\n     if (!m_block_tree_db->LoadBlockIndexGuts(consensus_params, [this](const uint256& hash) EXCLUSIVE_LOCKS_REQUIRED(cs_main) { return this->InsertBlockIndex(hash); })) {\n         return false;\n@@ -3622,17 +3622,41 @@ bool BlockManager::LoadBlockIndex(\n         vSortedByHeight.push_back(std::make_pair(pindex->nHeight, pindex));\n     }\n     sort(vSortedByHeight.begin(), vSortedByHeight.end());\n+\n+    // Find start of assumed-valid region.\n+    int first_assumed_valid_height = std::numeric_limits<int>::max();\n+\n+    for (const auto& [height, block] : vSortedByHeight) {\n+        if (block->IsAssumedValid()) {\n+            auto chainstates = chainman.GetAll();\n+\n+            // assert that the assumed valid blocks come from some assumed-valid chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return chainstate->reliesOnAssumedValid(); }));\n+            // assert that the assumed valid blocks will be validated by some not assumed-valid\n+            // chainstate.\n+            assert(any_of(chainstates.cbegin(), chainstates.cend(),\n+                [](auto chainstate) { return !chainstate->reliesOnAssumedValid(); }));\n+\n+            first_assumed_valid_height = height;\n+            break;\n+        }\n+    }\n+\n     for (const std::pair<int, CBlockIndex*>& item : vSortedByHeight)\n     {\n         if (ShutdownRequested()) return false;\n         CBlockIndex* pindex = item.second;\n         pindex->nChainWork = (pindex->pprev ? pindex->pprev->nChainWork : 0) + GetBlockProof(*pindex);\n         pindex->nTimeMax = (pindex->pprev ? std::max(pindex->pprev->nTimeMax, pindex->nTime) : pindex->nTime);\n-        // We can link the chain of blocks for which we've received transactions at some point.\n+\n+        // We can link the chain of blocks for which we've received transactions at some point, or\n+        // blocks that are assumed-valid on the basis of snapshot load (see\n+        // PopulateAndValidateSnapshot()).\n         // Pruned nodes may have deleted the block.\n         if (pindex->nTx > 0) {\n             if (pindex->pprev) {\n-                if (pindex->pprev->HaveTxsDownloaded()) {\n+                if (pindex->pprev->nChainTx > 0) {\n                     pindex->nChainTx = pindex->pprev->nChainTx + pindex->nTx;\n                 } else {\n                     pindex->nChainTx = 0;\n@@ -3649,7 +3673,28 @@ bool BlockManager::LoadBlockIndex(\n         if (pindex->IsAssumedValid() ||\n                 (pindex->IsValid(BLOCK_VALID_TRANSACTIONS) &&\n                  (pindex->HaveTxsDownloaded() || pindex->pprev == nullptr))) {\n-            block_index_candidates.insert(pindex);\n+\n+            // Fill each chainstate's block candidate set. Add all blocks as\n+            // candidates if the chainstate is allowed to rely on assumed-valid\n+            // blocks. Otherwise avoid adding assumed-valid blocks so that\n+            // non-assumed-valid chainstates will download and validate all earlier,\n+            // unvalidated blocks.\n+            //\n+            // Note: This is considering all blocks whose height is greater or\n+            // equal to the first assumed-valid block to be assumed-valid\n+            // blocks, and excluding them from the background chainstate's\n+            // setBlockIndexCandidates set. This does mean that some blocks\n+            // which are not technically assumed-valid (later blocks on a fork\n+            // beginning before the first assumed-valid block) might not get\n+            // added to the the background chainstate, but this is ok, because\n+            // they will still be attached to the active chainstate if they\n+            // actually contain more work.\n+            for (CChainState* chainstate : chainman.GetAll()) {\n+                if (chainstate->reliesOnAssumedValid() ||\n+                        pindex->nHeight < first_assumed_valid_height) {\n+                    chainstate->setBlockIndexCandidates.insert(pindex);\n+                }\n+            }\n         }\n         if (pindex->nStatus & BLOCK_FAILED_MASK && (!pindexBestInvalid || pindex->nChainWork > pindexBestInvalid->nChainWork))\n             pindexBestInvalid = pindex;\n@@ -3673,11 +3718,9 @@ void BlockManager::Unload() {\n     m_block_index.clear();\n }\n \n-bool BlockManager::LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates)\n+bool BlockManager::LoadBlockIndexDB(ChainstateManager& chainman)\n {\n-    if (!LoadBlockIndex(\n-            ::Params().GetConsensus(),\n-            setBlockIndexCandidates)) {\n+    if (!LoadBlockIndex(::Params().GetConsensus(), chainman)) {\n         return false;\n     }\n \n@@ -4023,7 +4066,7 @@ bool ChainstateManager::LoadBlockIndex()\n     // Load block index from databases\n     bool needs_init = fReindex;\n     if (!fReindex) {\n-        bool ret = m_blockman.LoadBlockIndexDB(ActiveChainstate().setBlockIndexCandidates);\n+        bool ret = m_blockman.LoadBlockIndexDB(*this);\n         if (!ret) return false;\n         needs_init = m_blockman.m_block_index.empty();\n     }"
      },
      {
        "sha": "7c7ad4bbc63d3aeaef10c8a8517f446e29b69c6a",
        "filename": "src/validation.h",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/36e2bc4275fdb0d72390215fcea4d499f8049701/src/validation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/36e2bc4275fdb0d72390215fcea4d499f8049701/src/validation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/validation.h?ref=36e2bc4275fdb0d72390215fcea4d499f8049701",
        "patch": "@@ -427,20 +427,16 @@ class BlockManager\n \n     std::unique_ptr<CBlockTreeDB> m_block_tree_db GUARDED_BY(::cs_main);\n \n-    bool LoadBlockIndexDB(std::set<CBlockIndex*, CBlockIndexWorkComparator>& setBlockIndexCandidates) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n+    bool LoadBlockIndexDB(ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(::cs_main);\n \n     /**\n      * Load the blocktree off disk and into memory. Populate certain metadata\n      * per index entry (nStatus, nChainWork, nTimeMax, etc.) as well as peripheral\n      * collections like setDirtyBlockIndex.\n-     *\n-     * @param[out] block_index_candidates  Fill this set with any valid blocks for\n-     *                                     which we've downloaded all transactions.\n      */\n     bool LoadBlockIndex(\n         const Consensus::Params& consensus_params,\n-        std::set<CBlockIndex*, CBlockIndexWorkComparator>& block_index_candidates)\n-        EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n+        ChainstateManager& chainman) EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n \n     /** Clear all data members. */\n     void Unload() EXCLUSIVE_LOCKS_REQUIRED(cs_main);\n@@ -626,6 +622,10 @@ class CChainState\n      */\n     const std::optional<uint256> m_from_snapshot_blockhash;\n \n+    //! Return true if this chainstate relies on blocks that are assumed-valid. In\n+    //! practice this means it was created based on a UTXO snapshot.\n+    bool reliesOnAssumedValid() { return m_from_snapshot_blockhash.has_value(); }\n+\n     /**\n      * The set of all CBlockIndex entries with either BLOCK_VALID_TRANSACTIONS (for\n      * itself and all ancestors) *or* BLOCK_ASSUMED_VALID (if using background"
      }
    ]
  },
  {
    "sha": "709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
    "node_id": "C_kwDOABII59oAKDcwOWEwOWM5YjZhOTAyZDVlZDBlNWFkNmFjNDIxYjE3Yzg5MjFlNmU",
    "commit": {
      "author": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-10T21:35:12Z"
      },
      "committer": {
        "name": "James O'Beirne",
        "email": "james.obeirne@pm.me",
        "date": "2021-11-29T16:21:09Z"
      },
      "message": "test: add tests for LoadBlockIndex when using multiple chainstates\n\nIncorporates feedback from Russ Yanofsky.",
      "tree": {
        "sha": "5cc2b8dcd6572eda8c6d1b59acb910de42d4c838",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5cc2b8dcd6572eda8c6d1b59acb910de42d4c838"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEGNRVI1NPYuZCSIrGepNdrbLETwUFAmGk/fUACgkQepNdrbLE\nTwXjLg/9Fxv6183iXiVo15ei88CYulLt9xsfxK04Hh/1puwIdyEfWJzBfwB/eT/l\nepjDJ0VlCUmDy3xyQYWONmMZy/nmoAmFkNshaie/PyViWdcjuIwFUxj4eJQXLueL\nHGowJIQftyCkFMZ8JBEEC7+kLIzcOIQSfQpLZMfZTfpmWhFWqVkno3clvV73+UnU\nxDt0120bVuxMPz1dabBWzz4v8F1E5oi5FSl4cG6i6N1ilasa7zWmr428H63lnP7t\nGziA6UOZKzxXcQKkyeAFRivX0twX/whdpZBiJnN3j5xP6wuHgD4eQ6K35TGRLqnb\nGrxEs1zeD+y53HTI/FDQlA8v7Zcj+ckfskCgfSbISkNEYdZvN9nKOdUWEs6wPXp+\nBmZq1z46ZwUItZ7C24ytcvhFP507IoB7RW6wk+ME34ActX9yePysBc4g5+bKiD7w\nYwp23fPPcs7HzoQR9RdlSsIPgmrVdXFRjEWzStHPbLPfAUN54jDhQc6MXaK7xWi/\nSr930Efbx0ll9PVhT+yAdB5FGgJAMFtRTGYSPRKENcYltHkUZGTRpslpQazdwjBB\nlyOaU5mbu8BHAI2YTB7+73AE6pDjUAOn8BZDYVfKghGVM4/J+7oOEYqF95tnAX+q\nWIL6SLN/pKv4H8UK8pJLcvsK9Q8ZUet7eHIBbSyVE+YefmELYOg=\n=qY/5\n-----END PGP SIGNATURE-----",
        "payload": "tree 5cc2b8dcd6572eda8c6d1b59acb910de42d4c838\nparent 36e2bc4275fdb0d72390215fcea4d499f8049701\nauthor James O'Beirne <james.obeirne@pm.me> 1636580112 -0500\ncommitter James O'Beirne <james.obeirne@pm.me> 1638202869 -0500\n\ntest: add tests for LoadBlockIndex when using multiple chainstates\n\nIncorporates feedback from Russ Yanofsky.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e/comments",
    "author": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jamesob",
      "id": 73197,
      "node_id": "MDQ6VXNlcjczMTk3",
      "avatar_url": "https://avatars.githubusercontent.com/u/73197?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jamesob",
      "html_url": "https://github.com/jamesob",
      "followers_url": "https://api.github.com/users/jamesob/followers",
      "following_url": "https://api.github.com/users/jamesob/following{/other_user}",
      "gists_url": "https://api.github.com/users/jamesob/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jamesob/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jamesob/subscriptions",
      "organizations_url": "https://api.github.com/users/jamesob/orgs",
      "repos_url": "https://api.github.com/users/jamesob/repos",
      "events_url": "https://api.github.com/users/jamesob/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jamesob/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "36e2bc4275fdb0d72390215fcea4d499f8049701",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/36e2bc4275fdb0d72390215fcea4d499f8049701",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/36e2bc4275fdb0d72390215fcea4d499f8049701"
      }
    ],
    "stats": {
      "total": 77,
      "additions": 77,
      "deletions": 0
    },
    "files": [
      {
        "sha": "46aac7b2a3ddb346d0134a5a95e7f65f8770e2ea",
        "filename": "src/test/validation_chainstatemanager_tests.cpp",
        "status": "modified",
        "additions": 77,
        "deletions": 0,
        "changes": 77,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e/src/test/validation_chainstatemanager_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e/src/test/validation_chainstatemanager_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/validation_chainstatemanager_tests.cpp?ref=709a09c9b6a902d5ed0e5ad6ac421b17c8921e6e",
        "patch": "@@ -312,4 +312,81 @@ BOOST_FIXTURE_TEST_CASE(chainstatemanager_activate_snapshot, TestChain100Setup)\n         loaded_snapshot_blockhash);\n }\n \n+//! Test LoadBlockIndex behavior when multiple chainstates are in use.\n+//!\n+//! - First, verfiy that setBlockIndexCandidates is as expected when using a single,\n+//!   fully-validating chainstate.\n+//!\n+//! - Then mark a region of the chain BLOCK_ASSUMED_VALID and introduce a second chainstate\n+//!   that will tolerate assumed-valid blocks. Run LoadBlockIndex() and ensure that the first\n+//!   chainstate only contains fully validated blocks and the other chainstate contains all blocks,\n+//!   even those assumed-valid.\n+//!\n+BOOST_FIXTURE_TEST_CASE(chainstatemanager_loadblockindex, TestChain100Setup)\n+{\n+    ChainstateManager& chainman = *Assert(m_node.chainman);\n+    CTxMemPool& mempool = *m_node.mempool;\n+    CChainState& cs1 = chainman.ActiveChainstate();\n+\n+    int num_indexes{0};\n+    int num_assumed_valid{0};\n+    const int expected_assumed_valid{20};\n+    const int last_assumed_valid_idx{40};\n+    const int assumed_valid_start_idx = last_assumed_valid_idx - expected_assumed_valid;\n+\n+    CBlockIndex* validated_tip{nullptr};\n+    CBlockIndex* assumed_tip{chainman.ActiveChain().Tip()};\n+\n+    auto reload_all_block_indexes = [&]() {\n+        for (CChainState* cs : chainman.GetAll()) {\n+            LOCK(::cs_main);\n+            cs->UnloadBlockIndex();\n+            BOOST_CHECK(cs->setBlockIndexCandidates.empty());\n+        }\n+\n+        WITH_LOCK(::cs_main, chainman.LoadBlockIndex());\n+    };\n+\n+    // Ensure that without any assumed-valid BlockIndex entries, all entries are considered\n+    // tip candidates.\n+    reload_all_block_indexes();\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), cs1.m_chain.Height() + 1);\n+\n+    // Mark some region of the chain assumed-valid.\n+    for (int i = 0; i <= cs1.m_chain.Height(); ++i) {\n+        auto index = cs1.m_chain[i];\n+\n+        if (i < last_assumed_valid_idx && i >= assumed_valid_start_idx) {\n+            index->nStatus = BlockStatus::BLOCK_VALID_TREE | BlockStatus::BLOCK_ASSUMED_VALID;\n+        }\n+\n+        ++num_indexes;\n+        if (index->IsAssumedValid()) ++num_assumed_valid;\n+\n+        // Note the last fully-validated block as the expected validated tip.\n+        if (i == (assumed_valid_start_idx - 1)) {\n+            validated_tip = index;\n+            BOOST_CHECK(!index->IsAssumedValid());\n+        }\n+    }\n+\n+    BOOST_CHECK_EQUAL(expected_assumed_valid, num_assumed_valid);\n+\n+    CChainState& cs2 = WITH_LOCK(::cs_main,\n+        return chainman.InitializeChainstate(&mempool, GetRandHash()));\n+\n+    reload_all_block_indexes();\n+\n+    // The fully validated chain only has candidates up to the start of the assumed-valid\n+    // blocks.\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(assumed_tip), 0);\n+    BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.size(), assumed_valid_start_idx);\n+\n+    // The assumed-valid tolerant chain has all blocks as candidates.\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(validated_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.count(assumed_tip), 1);\n+    BOOST_CHECK_EQUAL(cs2.setBlockIndexCandidates.size(), num_indexes);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]