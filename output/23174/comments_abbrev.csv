DrahtBot,2021-10-05 11:40:15,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* [#23581](https://github.com/bitcoin/bitcoin/pull/23581) (Move BlockManager to node/blockstorage by MarcoFalke)\n\nIf you c",https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-934329907,934329907,
Sjors,2021-10-07 08:42:00,(this PR is missing in the Assume UTXO project),https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-937580719,937580719,
jonatack,2021-10-07 19:43:24,Concept ACK,https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-938101140,938101140,
ryanofsky,2021-10-19 20:20:54,"Forgot to post this earlier. I wrote up a description of this PR when I started reviewing it that may be useful to others (or helpful to me if I got something wrong):\n\nCurrently, `BlockManager::LoadBlockIndex` adds all blocks that have downloaded transactions to the _active_ chain state's `setBlockIndexCandidates` set, ignoring the _background_ chain state.\n\nThis PR changes `ChainstateMana",https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-947075033,947075033,
jamesob,2021-10-28 21:37:44,"Hey, review works! Thanks to commentary from @ryanofsky @ariard, I've found that a lot of the original patch was unnecessary .I've pushed a much-simplified changeset that addresses the quandary I posted yesterday (https://github.com/bitcoin/bitcoin/pull/23174#discussion_r737666011). \n\nIt turns out that the earlier version of this patch contained some unnecessary code that was a vestige from be",https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-954242458,954242458,
jamesob,2021-11-09 21:24:41,"Man this changeset keeps getting smaller and smaller. Thanks @ryanofsky!\n\nI've reverted back to doing a stateful approach for assumed-valid detection in LoadBlockIndex since the more holistic approach of scanning ancestors ended up being prohibitively slow when loading the main chain. This has allowed me to drop a few more changes from the original patch.\n\nThe only remaining item left is t",https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-964561176,964561176,
jamesob,2021-11-10 21:37:22,@ryanofsky nice timing. I just pushed a unittest for `LoadBlockIndex()`/`setBlockIndexCandidates`.,https://github.com/bitcoin/bitcoin/pull/23174#issuecomment-965766954,965766954,
jonatack,2021-10-08 15:02:56,"For `std::tie`\n```diff\n+++ b/src/validation.cpp\n@@ -58,6 +58,7 @@\n #include <numeric>\n #include <optional>\n #include <string>\n+#include <tuple>\n```\n",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725089856,725089856,src/validation.cpp
jonatack,2021-10-08 15:07:35,"- s/an block/a block/\n- s/passed the end/past the end/?\n\nmy editor auto-proposes this\n```diff\n-                // If we're on an block index entry that is passed the end of the\n-                // assumed-valid region of the chain, avoid\n-                // adding this as a candidate tip to the background validation\n-                // chain, since that would prevent background IBD",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725093367,725093367,src/validation.cpp
jonatack,2021-10-08 15:08:04,"```suggestion\n                const bool is_assumedvalid_end =\n```",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725093792,725093792,src/validation.cpp
jonatack,2021-10-08 15:18:03,"style nit, PascalCase unless there is some reason I'm not aware of here (same for the other `get...` functions introduced here) \n ```suggestion\n     std::pair<std::optional<uint256>, unsigned int> GetAssumedValidEnd()\n```",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r725101183,725101183,src/validation.h
ryanofsky,2021-10-13 15:49:04,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d):\n\nWould suggest changing `GetAssumedValidEnd` to `GetLastAssumedValid` because ""end"" does not seem right here. In c++ ""end"" usually refers to the first element after the range, not the last element in the range. \n\nAlso, it seems like whole return value should be optional, not jus",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r728209676,728209676,src/validation.h
ryanofsky,2021-10-14 09:40:43,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nThis comment seems a little out of place since it's not describing these variables, but describing how they are used in code below. Would maybe suggest breaking this up and moving it to relevant places below.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r728812760,728812760,src/validation.cpp
ryanofsky,2021-10-19 16:52:47,"> style nit, PascalCase unless there is some reason I'm not aware of here (same for the other `get...` functions introduced here)\n\nI always liked the lower/upper method/function convention so you know if some random function call is going to implicitly have access to `*this` as a hidden parameter. Making members or private members lowercase is less verbose than prefixing method calls with `thi",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732065458,732065458,src/validation.h
ryanofsky,2021-10-19 17:16:13,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nAnother naming nitpick. Feel free to ignore this naming suggestion and all the other ones, but might suggest inverting this function and calling it something like ""OnlyContainsAssumedValidBlocks"". This seems less handwavy than ""ReliesOnAssumeValid"" because it's not clear what ""relie",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732083694,732083694,src/validation.h
ryanofsky,2021-10-19 17:23:19,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nAlso suggested this in another comment, but maybe consider `s/assumedvalid_end/last_assumed_valid/` throughout this function, because ""end"" in c++ usually refers to first element after the range, not the last element in the range",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732089256,732089256,src/validation.cpp
ryanofsky,2021-10-19 17:25:18,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nCould use structured bindings to save space and avoid potentially dangerous type mismatches:\n\n```diff\n--- a/src/validation.cpp\n+++ b/src/validation.cpp\n@@ -3638,10 +3638,7 @@ bool BlockManager::LoadBlockIndex(\n     // setBlockIndexCandidates of the background chainstate.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732090717,732090717,src/validation.cpp
ryanofsky,2021-10-19 18:07:48,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nIt's not so clear why adding blocks to `setBlockIndexCandidates` would prevent IBD from happening. The negative ""avoid doing X so Y doesn't happen"" logic here is a bit twisty, so I would try to describe more positively what this is doing. Something like:\n\n```c++\n// If a chain ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732122417,732122417,src/validation.cpp
ryanofsky,2021-10-19 18:19:21,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nIs there a bug here? Comment is saying do not expect assumed valid blocks to have nTx, then the next line immediately skips assume valid logic if `nTx` is `0`",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732130569,732130569,src/validation.cpp
ryanofsky,2021-10-19 18:21:38,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nIt would be good to have a unit test that ensures the function is actually setting this.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732132238,732132238,src/validation.cpp
ryanofsky,2021-10-19 18:23:38,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nIt would be good to have a unit test that ensure the function is adding the right blocks as candidates in both chains.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732133664,732133664,src/validation.cpp
ryanofsky,2021-10-19 18:51:40,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nMight write to assert when values are inconsistent:\n\n```c++\nif (nchaintx) {\n  assert(snapshotblockhash);\n  return {snapshotblockhash, *nchaintx};\n}\nreturn {nullopt, 0};\n```",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732153494,732153494,src/validation.cpp
ryanofsky,2021-10-19 19:32:46,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (51e614fdbc6a23ade324e9bd01228bf97df9bc5d)\n\nThere can be multiple blocks at the same height in vSortedByHeight, right? If so, this behavior seems nondeterministic, because it's sorted by (height, pointer address), so blocks at the assume valid height with pointer addresses _less_ than the assume valid height will be added to ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r732182831,732182831,src/validation.cpp
ariard,2021-10-25 22:50:51,Can be `auto blockhash_op` ?,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736021606,736021606,src/validation.cpp
ariard,2021-10-25 23:30:06,"Agree, I think if the new logic seeks to detect the last block of the assumed-valid range but assumed-valid blocks are expected to not have `nTx`, detection success cannot be reached if it's conditional on `nTx` > 0.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736036940,736036940,src/validation.cpp
ariard,2021-10-25 23:43:56,"Shouldn't the logical operator be an `&&` ?\n\nOtherwise I think if the end of the assumed-valid block region has been reached (`saw_end_of_assumevalid`=true) logic still enters this control flow.  And as such block index entries past the assumed-valid region of the chain are added to `setBlockIndexCandidates` (AFAIU from the comment just above).",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736041983,736041983,src/validation.cpp
ariard,2021-10-25 23:46:51,I don't see the causality between populating the `nChainTx` and adequately adding assumed-valid and assumed-valid _only_ blocks to `setBlockIndexCandidates` for snapshot chainstates ? I think conditional L3691 isn't pending on `nChainTx`.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r736042920,736042920,src/validation.cpp
jamesob,2021-10-27 16:51:49,"Good points - this is a little confusing; my fault for not being clearer in commentary. `nTx = 1` is set for all block headers during snapshot activation (https://github.com/jamesob/bitcoin/blob/2021-10-au-loadblockindex/src/validation.cpp#L4966-L4970) so this code will be executed for all assumed-valid blocks.\n\nNow that you've raised the point, I'm wondering if this code is even necessary. Th",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r737666011,737666011,src/validation.cpp
jamesob,2021-10-28 21:24:39,Good point! Addressed in new changeset.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738785918,738785918,src/validation.cpp
jamesob,2021-10-28 21:41:04,"Thanks for this comment; this raises a really good point. The LoadBlockIndex() modifications are now no longer stateful, and instead we walk backwards for each pindex to see if any of its ancestors are assumed-valid (which is O(n**2) with chain size, but since LoadBlockIndex() happens once on startup that doesn't really matter).",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738794750,738794750,src/validation.cpp
jamesob,2021-10-28 21:43:30,"Note that this change is tautological, but done for clarity. `HaveTxsDownloaded()` should probably be removed since its name conflicts with assumed-valid blocks that have had their nChainTx value set during snapshot activation.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r738795942,738795942,src/validation.cpp
jamesob,2021-11-01 13:56:21,Fixed,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r740230078,740230078,src/validation.cpp
ryanofsky,2021-11-02 21:36:50,"In commit ""validation: don't modify genesis during snapshot load"" (cb1d4244806980d31ceaa2307431dd70e6c39fe9)\n\nThe new comment here seems good, but I think it would be more direct and straightforward to write\n\n```diff\n-for (int i = 0; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n+for (int i = 1; i <= snapshot_chainstate.m_chain.Height(); ++i) {\n```\n\nabove than add this extra ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741479471,741479471,src/validation.cpp
ryanofsky,2021-11-02 21:41:52,"In commit ""validation: don't modify genesis during snapshot load"" (cb1d4244806980d31ceaa2307431dd70e6c39fe9)\n\nWould be good to have a unit test for this, if changing this could break things.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741482214,741482214,src/validation.cpp
ryanofsky,2021-11-02 21:50:28,"In commit ""validation: add CBlockIndex reliesOnAssumeValid"" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\n\nWould suggest calling method `HasAssumedValidAncestors()` instead of `reliesOnAssumedValid()` to avoid vague ""relies"", to be more consistent with other `IsAssumedValid()` and `GetAncestor()` method names, and to be less confusing in the place where `CBlockIndex::reliesOnAssumedValid` and `CC",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741486651,741486651,src/chain.h
ryanofsky,2021-11-02 21:57:52,"In commit ""validation: add CBlockIndex reliesOnAssumeValid"" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\n\nI was confused what `nHeight` might be referring to, or if it might be a typo for `height`. Maybe say ""If current block height is passed"" or ""If this->nHeight is passed"" instead of ""If nHeight is passed""",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741490463,741490463,src/chain.h
ryanofsky,2021-11-02 22:37:00,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (dbca47ece6b9a3a5e02969270bfab340fce286c0)\n\nI think I would suggest a few changes here:\n\n- Consolidate the insert calls, and just focus on one case where blocks shouldn't be added instead of branching for other cases.\n- Try to be less vague in comments (""fitting chainstates"")\n- Be a little more efficient avoiding the ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741509474,741509474,src/validation.cpp
ryanofsky,2021-11-02 22:47:00,"In commit ""validation: add CBlockIndex reliesOnAssumeValid"" (619ada31fdc90f079cb1a6c44df6b76f6a162c1e)\n\nWould be good and should be pretty easy add a simple unit test for this. If you want a template, `findearliestatleast_edge_test` is a simple existing test making a chain of blocks and checking some properties.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r741513665,741513665,src/chain.cpp
jamesob,2021-11-08 21:33:41,"Yep, will test this.\n\nAlso, this change is not mergeable as-is: it turns out invoking this for each CBlockIndex in the chain takes a really. long. time. making startup on mainnet appear as though it is hung. :cry: ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r745109360,745109360,src/chain.cpp
jamesob,2021-11-09 21:21:30,Done.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056082,746056082,src/validation.cpp
jamesob,2021-11-09 21:21:37,Done.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056172,746056172,src/validation.cpp
jamesob,2021-11-09 21:21:52,"Removed this method altogether, so done.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056309,746056309,src/chain.h
jamesob,2021-11-09 21:22:15,"Addressed everything here aside from the unittest, which I will follow up with. ",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056515,746056515,src/validation.cpp
jamesob,2021-11-09 21:22:37,Fixed - nothing to test anymore.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746056741,746056741,src/chain.cpp
ryanofsky,2021-11-10 20:36:54,"In commit ""validation: don't modify genesis during snapshot load"" (86d48535198724c723370a447f73e134029331c2)\n\nI still don't think it is good that if there are two blocks at the same height and one is assumed valid, then how the other one is treated depends on whether its _pointer address_ is higher or lower than the assumed valid block pointer address. (Previous comment about this was https://",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746966753,746966753,src/validation.cpp
ryanofsky,2021-11-10 20:50:47,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\n\nI think this note is helpful but a little confusing:\n\n- It's vague where it refers to ""the way seen_assumed_valid works"" and what "" considering a block""  means\n- It's unclear where the claim that this has to be a very deep fork comes from. IIUC, the fork just has to happen bef",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746975622,746975622,src/validation.cpp
ryanofsky,2021-11-10 20:53:41,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\n\nI'd maybe swap these conditions and write this as `if (chainstate->reliesOnAssumedValid() || !seen_assumed_valid)` to match the description above ""Add all blocks as candidates if the chainstate is allowed to rely on assumed-valid blocks. Otherwise avoid adding assumed-valid blocks""",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746977365,746977365,src/validation.cpp
ryanofsky,2021-11-10 21:29:07,"In commit ""validation: have LoadBlockIndex account for snapshot use"" (2833bd0277ac87cd07e98b0a23b73eed97a2e513)\n\nI still think it would be really nice to call this function from a unit test and make sure this set is filled correctly. The logic here is fragile, and testing this part of `LoadBlockIndex` could make it easier to test other parts as well.\n\nEDIT: Sorry, I see you mentioned worki",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r746999259,746999259,src/validation.cpp
jamesob,2021-11-10 21:50:11,"Great suggestions, all integrated. Thank you!",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r747012968,747012968,src/validation.cpp
ryanofsky,2021-11-12 16:52:41,"In commit ""test: add tests for LoadBlockIndex when using multiple chainstates"" (e35d167682bc527fa9d8734f1cc7558f18d95b09)\n\nDeclaring these const could make the test a little easier to grok",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748440394,748440394,src/test/validation_chainstatemanager_tests.cpp
ryanofsky,2021-11-12 16:53:49,"In commit ""test: add tests for LoadBlockIndex when using multiple chainstates"" (e35d167682bc527fa9d8734f1cc7558f18d95b09)\n\nCould simplify `last_assumed_valid_idx - expected_assumed_valid` as `assumed_valid_start_idx`",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748441135,748441135,src/test/validation_chainstatemanager_tests.cpp
ariard,2021-11-15 01:15:48,"IIUC any fully validated block beyond the assumed-valid range of blocks shouldn't not be tolerated by the ""fully-validated"" chain, as they're relying on assumed-valid blocks ?\n\nIf so can you add a `BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(m_chain.Height()), 0)` to verify this expected behavior holds ?",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949388,748949388,src/test/validation_chainstatemanager_tests.cpp
ariard,2021-11-15 01:17:19,nit: Maybe add a `assert(IsSnapshotActive()` as we shouldn't have assumed-valid blocks in the absence of a snapshot loaded ?,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949660,748949660,src/validation.cpp
ariard,2021-11-15 01:19:43,"I think the comment can be slightly modified to mention the descendants of assumed-valid blocks, like in the commit description.\n\n""Otherwise avoid adding assumed-valid blocks and their fully-validated descendants therefore inducing the chainstate to download and validate all blocks earlier than the first assumed-valid block"".",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748950124,748950124,src/validation.cpp
jamesob,2021-11-16 19:25:24,"Did you mean `cs1.setBlockIndexCandidates.count(m_chain.Height())`? Because the set doesn't contain heights, it contains CBlockIndex*. Also which `m_chain` are you referring to? Because there's one for `c1` and `c2`. \n\nI think the check you want is already included in `BOOST_CHECK_EQUAL(cs1.setBlockIndexCandidates.count(assumed_tip), 0);`.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750592969,750592969,src/test/validation_chainstatemanager_tests.cpp
jamesob,2021-11-16 19:27:24,"Part of @ryanofsky's overarching (and good) feedback a few months earlier was to avoid leaking knowledge of the idea of ""UTXO snapshots"" in places where it doesn't need to be. Instead we should rely on more fundamental state (like the presence of assumed-valid block index entries). I think referencing snapshots here would be going the other direction.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750594454,750594454,src/validation.cpp
jamesob,2021-11-16 20:23:51,"Not sure I follow your suggested comment, since fully-validated blocks should be added to both chainstates, but I've updated the comment to be try and be clearer.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750633848,750633848,src/validation.cpp
ryanofsky,2021-11-17 04:03:02,"re: https://github.com/bitcoin/bitcoin/pull/23174#discussion_r748949660\n\n> nit: Maybe add a `assert(IsSnapshotActive()` as we shouldn't have assumed-valid blocks in the absence of a snapshot loaded ?\n\nI guess like James said I'd be a little disinclined to add an assert checking for assumeutxo snapshots in validation code that's dealing more abstractly with chainstates. But I could also see",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r750865419,750865419,src/validation.cpp
jamesob,2021-11-18 22:26:17,"Fixed, thanks",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r752672520,752672520,src/test/validation_chainstatemanager_tests.cpp
jamesob,2021-11-19 18:34:30,Good idea! Added.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r753429531,753429531,src/validation.cpp
fjahr,2021-11-28 15:49:23,"Hm, this feels a bit backwards to me. Couldn't we skip the whole loop if we first check that one of the chainstates relies on assume-valid?",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r757915350,757915350,src/validation.cpp
fjahr,2021-11-28 16:47:06,Is this in the right place here? When I set `AFTER_GENESIS_START` to 0 this still doesn't fail for me.,https://github.com/bitcoin/bitcoin/pull/23174#discussion_r757922484,757922484,src/test/validation_chainstatemanager_tests.cpp
MarcoFalke,2021-11-29 09:12:16,"I don't understand this comment. If genesis isn't `BLOCK_VALID_SCRIPTS`, then `BLOCK_ASSUMED_VALID` wouldn't be applied, so the workaround isn't needed??",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758160127,758160127,src/validation.cpp
jamesob,2021-11-29 16:01:54,"Oh yep, you're very right - we haven't actually yet activated the snapshot at this point in the test. Good find, thanks.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758505693,758505693,src/test/validation_chainstatemanager_tests.cpp
jamesob,2021-11-29 16:02:52,"No, *because* genesis isn't `BLOCK_VALID_SCRIPTS` we would apply `BLOCK_ASSUMED_VALID` unless we specifically skip it. The workaround is still desirable and necessary, I just bungled the unittest (see above).",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758506598,758506598,src/validation.cpp
MarcoFalke,2021-11-29 16:13:46,"Yes, and the code below is:\n\n```cpp\n        if (!index->IsValid(BLOCK_VALID_SCRIPTS)) {\n            // This flag will be removed once the block is fully validated by a\n            // background chainstate.\n            index->nStatus |= BLOCK_ASSUMED_VALID;\n        }\n```\n\nSo how could it be executed if `BLOCK_VALID_SCRIPTS` isn't set?",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758517157,758517157,src/validation.cpp
jamesob,2021-11-29 16:24:21,"I don't understand your comment: these two asserts are only performed once if there is an assumed-valid block detected, and then the loop is broken out of (line 3642). We don't want to do the asserts if there is no assumed-valid block, so I don't see how or why we'd do them outside of the loop.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758527196,758527196,src/validation.cpp
jamesob,2021-11-29 16:55:30,"It is only executed when `BLOCK_VALID_SCRIPTS` *isn't* set - are you by chance missing the `!` in the conditional?\nEdit: changed an ""is"" to ""isn't"" - the double negative got me!",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r758556179,758556179,src/validation.cpp
MarcoFalke,2021-11-30 12:24:13,"Nvm, apparently I don't understand how negation works.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759226449,759226449,src/validation.cpp
jamesob,2021-11-30 14:59:51,This is an argument for including Python's `not` operator in C++21. ;),https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759363877,759363877,src/validation.cpp
ryanofsky,2021-11-30 16:45:25,"> This is an argument for including Python's `not` operator in C++21. ;)\n\nIt's actually already there, no need to wait https://en.cppreference.com/w/cpp/language/operator_alternative",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759468928,759468928,src/validation.cpp
MarcoFalke,2021-11-30 16:53:58,"Pretty sure that `not` may fail on some compilers (on windows?).\n\nIn general I think if there is a way to avoid a negation, it might be preferable. In this case saying ""(since it apparently is lacking BLOCK_VALID_SCRIPTS)"" might work?",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759476770,759476770,src/validation.cpp
MarcoFalke,2021-11-30 17:03:29,"in the first commit (9be75f223577108bc573c2b04f2f8c67eefe88ef):\n\nAs the genesis block is the only block which doesn't have a previous block, it might be good to remove the dead code in this body now.\n\n`index->pprev` is always true now and can/should be removed. If you are worried about future logic bugs, you may use `Assert(index->pprev)->nChainTx` instead of `index->pprev->nChainTx`.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759485558,759485558,src/validation.cpp
MarcoFalke,2021-11-30 17:24:29,"in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\n\nCan you explain why this compiles? I always assumed that standard library helpers are only accessible in the `std::` namespace.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759503280,759503280,src/validation.cpp
MarcoFalke,2021-11-30 17:30:00,"in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\n\nCan you explain the asserts a bit better? Currently it looks like they are asserting that two chainstates exist. This condition should be independent of the loop and could be moved outside?\n\n",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759507823,759507823,src/validation.cpp
MarcoFalke,2021-11-30 18:02:47,"in commit 36e2bc4275fdb0d72390215fcea4d499f8049701:\n\nI don't understand why it is safe to not attach them. If the assumed valid block is sufficiently old, it may cost little POW to create an alternative fork up to that height, and confusing the background chainstate that it can't connect to the active chainstate?\n\nWhat is the reason for the if-condition in the first place? What would happe",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759533358,759533358,src/validation.cpp
fjahr,2021-11-30 23:24:30,"Unless I have a misunderstanding here, what I meant: We only have blocks that are assumed valid if we have a chainstate that relies on assume valid, those two will always go together. We will probably have very few chain states and we have a lot of blocks. So it seems to me that it would be more efficient to first loop the chainstates and then the blocks.",https://github.com/bitcoin/bitcoin/pull/23174#discussion_r759737914,759737914,src/validation.cpp
