sipa,2020-01-07 13:31:05,So this code has been wrong for 7 years? Why do we only notice the effect now?,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571586468,571586468,
fanquake,2020-01-07 13:32:53,"> So this code has been wrong for 7 years? Why do we only notice the effect now?\n\nIt’s likely this issue only started occurring with the introduction of APFS, which is quite recent.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571587229,571587229,
kallewoof,2020-01-07 13:33:28,"~~@sipa I suspect the OS eventually reclaims pre-allocated space, but it seems block files are not suffering from this kind of issue, so I'm honestly not sure. The docs clearly indicate we were using it wrong, though.~~ (Edit: the issue is a bit more convoluted; see https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573504904)\n\nOld edit:\n> It’s likely this issue only started occurrin",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571587438,571587438,
kallewoof,2020-01-07 13:43:17,"On my machine (APFS encrypted volume), I was seeing rev00002.dat hitting 20 MB around block 135k. After this patch (running up to block 191106, then shutting down) I see\n```Bash\n$ du -ch *.dat\n128M	blk00000.dat\n128M	blk00001.dat\n128M	blk00002.dat\n128M	blk00003.dat\n128M	blk00004.dat\n128M	blk00005.dat\n128M	blk00006.dat\n128M	blk00007.dat\n128M	blk00008.dat\n128M	blk00009.dat\n1",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571591432,571591432,
DrahtBot,2020-01-07 13:54:10,<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nNo conflicts as of last run.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571595731,571595731,
kallewoof,2020-01-07 16:11:19,Enlightening read: https://www.mail-archive.com/filesystem-dev@lists.apple.com/msg00226.html,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571654678,571654678,
IPGlider,2020-01-07 19:03:58,Tested on MacOS 10.15.2 on an APFS volume and the problem disappears. Also tested on a mounted HFS+ disk volume and the problem disappears.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571725182,571725182,
fanquake,2020-01-08 02:45:32,Concept ACK,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571867237,571867237,
eriknylund,2020-01-09 20:18:38,"I ran this on machine 2 in the issue report and can confirm that there is no blowup.\n\n- MacBook Pro (15-inch, 2018)\n- 2,6 GHz 6-Core Intel Core i7\n- 32 GB 2400 MHz DDR4\n- macOS Catalina 10.15.2 (upgraded from Mojave)\n\nTested on an APFS unencrypted disk image with 3 GB in size and let it run until the image was full:\n```\n$ ./bitcoind -datadir=/Volumes/APFS\n2020-01-09T19:43:17Z U",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-572737177,572737177,
eriknylund,2020-01-09 20:44:27,"I also built a Bitcoin-Qt.dmg and started a fresh download on machine 1 in the issue report, to verify that I can successfully complete the initial block download on the Mac mini with 480 GB of free disk space at the start. ETA 3 days.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-572746538,572746538,
fanquake,2020-01-10 05:06:14,"I've just finished a from scratch sync using this PR + 17892, on an macOS (APFS) machine. Data directory is the expected size. No longer seeing very large rev*.dat files, most are between 16 and 21mb.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-572875388,572875388,
eriknylund,2020-01-12 17:24:26,"> I also built a Bitcoin-Qt.dmg and started a fresh download on machine 1 in the issue report, to verify that I can successfully complete the initial block download on the Mac mini with 480 GB of free disk space at the start. ETA 3 days.\n\n> I've just finished a from scratch sync using this PR + 17892, on an macOS (APFS) machine. Data directory is the expected size. No longer seeing very large ",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573437436,573437436,
eriknylund,2020-01-12 19:57:46,"Looking a bit more into the rev files I see what is most likely the truncation issue @kallewoof discovered in https://github.com/bitcoin/bitcoin/issues/17890\n```\nBitcoin % du -h blocks/rev00337.dat blocks/rev01037.dat blocks/rev01036.dat\n 23M	blocks/rev00337.dat\n 24M	blocks/rev01037.dat\n 27M	blocks/rev01036.dat\nBitcoin % ls -lh blocks/rev00337.dat blocks/rev01037.dat blocks/rev01036.da",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573451085,573451085,
kallewoof,2020-01-13 04:28:16,"Thanks! Yeah, we will have to do a one time run-through of all the rev files to clean up the excess use, or we will end up with wasted space for everyone.. I'm honestly not sure why this isn't affecting other systems though. The finalize issue is not mac specific (only the over-preallocating issue is).",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573503652,573503652,
kallewoof,2020-01-13 04:36:07,"This made me realize that this actually is a bug in the operating system. I couldn't explain why this didn't happen to earlier versions, but I believe I can now.\n\nThe bug is that ftruncate does not return pre-allocated disk space.\n\nBefore, we would over-preallocate and then immediately truncate back down to the expected size. This worked in pre-APFS land, but APFS has a bug which leaves th",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573504904,573504904,
Empact,2020-01-13 20:35:52,Code review ACK https://github.com/bitcoin/bitcoin/pull/17887/commits/5de93dced1a2d10b21ce0afa3bfb293cf58071e9 also checked `man fcntl` locally,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573858010,573858010,
fanquake,2020-01-14 12:27:50,"@arvidn Any chance you could comment here, given you patched an [APFS related issue in libtorrent](https://github.com/arvidn/libtorrent/pull/2450) some time ago?",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574151224,574151224,
arvidn,2020-01-14 13:17:02,"This patch changes the behavior of `AllocateFileRange()`, which is documented to:\n\n> this function tries to make a particular range of a file allocated (corresponding to disk space) it is advisory, and the range specified in the arguments will never contain live data\n\nIt doesn't seem like this patch correctly implements the documented behavior. It might fix an issue in how `AllocateFileRan",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574168424,574168424,
kallewoof,2020-01-14 13:50:20,"Edit: nevermind, I see what you're saying, but I believe offset is already (supposed to be) equal to st_size, so I don't think it matters.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574183171,574183171,
arvidn,2020-01-14 13:57:15,"> but I believe offset is already (supposed to be) equal to st_size\n\nRight, this patch makes that assumption. The windows implementation does not make this assumption, nor does the documentation state it will make this assumption.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574185968,574185968,
kallewoof,2020-01-14 14:13:47,"I see what you mean. I don't think it matters in this case either way, but it's worth pointing out.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574192908,574192908,
kallewoof,2020-01-14 14:14:42,"Either way, that's unrelated to the question which is how to properly pre-allocate (and more importantly, how to return unused space at the end) on APFS.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574193394,574193394,
kallewoof,2020-01-14 23:58:07,Pushed a comment regarding the assumption `<file size> == offset` in the OSX version.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-574430849,574430849,
kallewoof,2020-01-17 01:12:34,"```\n=== BLOCK FILE INFO STATS (blocks 0 .. 50000) ===\nBLOCKS: 49877 additions, 12276387 total space, 246.1 bytes/addition\nREVS:   49437 additions, 2365864 total space, 47.9 bytes/addition\n\n=== BLOCK FILE INFO STATS (blocks 50000 .. 100000) ===\nBLOCKS: 49996 additions, 48138897 total space, 962.9 bytes/addition\n     3 allocations; 30243 over, 0 under => 10081.0 over/alloc, 0.0 under/a",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-575420390,575420390,
kallewoof,2020-01-17 01:14:07,"Strictly increasing, but looks like rev files will over-allocate by about 70 kb on average, and block files by .5 MB.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-575420715,575420715,
eriknylund,2020-01-20 19:22:01,"> ```\n> === BLOCK FILE INFO STATS (blocks 0 .. 50000) ===\n> BLOCKS: 49877 additions, 12276387 total space, 246.1 bytes/addition\n> REVS:   49437 additions, 2365864 total space, 47.9 bytes/addition\n> \n> === BLOCK FILE INFO STATS (blocks 50000 .. 100000) ===\n> BLOCKS: 49996 additions, 48138897 total space, 962.9 bytes/addition\n>      3 allocations; 30243 over, 0 under => 10081.0 over/al",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576401959,576401959,
eriknylund,2020-01-20 19:43:56,"ACK 75163f4729c10c40d2843da28a8c79ab89193f6a built locally. All tests passing. Manual test as per my previous comment above on an older commit, using an APFS unencrypted disk image with 3 GB.\n\nAre there any new tests that would make sense to add for this change?",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576408371,576408371,
kallewoof,2020-01-21 00:19:29,"@eriknylund \n\n> I'm curious to know, how did you go about collecting these stats?\n\nI simply patched Bitcoin Core directly and re-ran IBD. I did some polishing on the final output, though. The branch is called 'macos-f_preallocate_fix-benchmarked' if you wanna see: https://github.com/kallewoof/bitcoin/tree/macos-f_preallocate_fix-benchmarked",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576468293,576468293,
Sjors,2020-01-21 14:22:07,"@kallewoof wrote:\n> I suspect the OS eventually reclaims pre-allocated space, but it seems block files are not suffering from this kind of issue, so I'm honestly not sure. The docs clearly indicate we were using it wrong, though.\n\nMaybe. I have the blockchain on my macOS Catalina machine (APFS with encryption). Most historical rev files are ~17 MB but starting from `rev01835.dat` (October 22",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576703457,576703457,
kallewoof,2020-01-21 14:31:57,"@Sjors Thanks for testing! Yeah, that comment is outdated. I will update it. I described it in detail here: https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-573504904\n",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576707795,576707795,
dongcarl,2020-01-21 16:38:18,"Concept ACK, great find!",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576767853,576767853,
fjahr,2020-01-21 17:05:47,"Hm, I could not reproduce the issue with the current master (631df3ee87ec93e1fc748715671cdb5cff7308e6) in a way indicated here: https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-571591432\n\nI started a new IBD and let it run up to ~220k blocks. Checked the blocks folder every couple of minutes and never saw a `rev` file larger than 20M, not even the most recent one as described by @Sjo",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576780731,576780731,
Sjors,2020-01-21 19:08:09,I ran with `--enable-debug` though.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576832365,576832365,
bg002h,2020-01-21 19:10:01,"My sizes using this pull request, running Catalina and an unencrypted APFS disk:\n\nhttps://pastebin.com/W53SX4xg\n\nRunning master:\n\nhttps://pastebin.com/0Sj2XXny\n\nAll file sizes for both this PR and master don't seem any different while running or after shutdown.",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576833123,576833123,
Sjors,2020-01-21 19:14:52,@bg002h `ls -alFh` won't see the issue. Try `du -ch` instead.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576835181,576835181,
bg002h,2020-01-21 19:33:44,"@Sjors Thx for the tip!\n\nI reformatted my NVME raid to APFS, encrypted, case sensitive since the above.\n\nFor master, I see: \nhttps://pastebin.com/GeqsZhmh (rev 50 was 45M)\n\nrunning this PR (pastern is down):\nbcg@Brians-MacBook-Pro blocks % du -ch *\n128M	blk00000.dat\n.\n.\n.\n128M	blk00052.dat\n 16M	blk00053.dat\n8.0K	index\n 19M	rev00000.dat\n 16M	rev00001.dat\n 16M	rev",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576843316,576843316,
bg002h,2020-01-21 19:42:09,"using master, and checking du repeatedly during blk1, rev1 gets pretty big before being trimmed back:\n\ncg@Brians-MacBook-Pro blocks % du -ch *\n576M	blk00000.dat\n8.0K	index\n190M	rev00000.dat\n766M	total\n\nThe behavior is not observed using this PR:\n\nbcg@Brians-MacBook-Pro blocks % du -ch *\n128M	blk00000.dat\n8.0K	index\n 17M	rev00000.dat\n145M	total\nbcg@Brians-MacBook-Pro b",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576847315,576847315,
fjahr,2020-01-21 20:30:46,"> I ran with `--enable-debug` though.\n\nStrange, I double checked and still not seeing any large rev files with `--enable-debug`...",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576867136,576867136,
kallewoof,2020-01-22 01:15:13,`--enable-debug` should not matter in this case. ,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576962596,576962596,
maaku,2020-01-22 02:00:51,FWIW I'm able to reproduce this on gitian-built clients as far back as 0.12.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-576973222,576973222,
laanwj,2020-01-22 15:46:28,"code review ACK 75163f4729c10c40d2843da28a8c79ab89193f6a\nI have checked  [the documentation](https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/fcntl.2.html) that the new use of `F_PREALLOCATE` is correct (and the old one is wrong).\n\nThanks everyone for testing!",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-577249108,577249108,
fanquake,2020-01-23 00:42:03,Being backported to 0.19 in #17988.,https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-577453618,577453618,
kallewoof,2020-09-02 04:01:24,"Apple responded to my bug report regarding this, in case people are curious: https://openradar.appspot.com/radar?id=4930713610616832",https://github.com/bitcoin/bitcoin/pull/17887#issuecomment-685278688,685278688,
Empact,2020-01-13 20:33:40,nit: could `static_cast`,https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366013822,366013822,src/util/system.cpp
kallewoof,2020-01-14 02:08:42,Done,https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366122599,366122599,src/util/system.cpp
laanwj,2020-01-15 11:41:44,Wouldn't it make sense to add an assertion here? Implementing a function differently than documented on a OS (silently assuming it is always used in a specific way) could turn into a troubleshooting nightmare at some point.,https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366831506,366831506,src/util/system.cpp
kallewoof,2020-01-15 12:00:16,"You would have to check file size, in which case you might as well do what @arvidn suggested. It depends on the impact of checking the file size (once per MB of data for rev files). I initially wrote code to do just that, but it felt wasteful. If people think it's fine, I can switch to this (or if there's a more optimized variant).\n\n```diff\ndiff --git a/src/util/system.cpp b/src/util/system.",https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366838661,366838661,src/util/system.cpp
laanwj,2020-01-15 15:14:53,"Yes, that seems wasteful.\n\nAnother solution would be to remove the `offset` parameter and define the function to always work relative to the end of the file, for all platforms. This also avoids using the function in the wrong away.",https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366930914,366930914,src/util/system.cpp
kallewoof,2020-01-15 16:01:08,"I think the main reason why it is there in the first place is to avoid the seek part when possible. It basically functions as a cache approximating the file size. It will overshoot by a small amount (depending on the size of whatever is being written that doesn't currently fit), but it's mostly accurate, and I think for performance reasons this is done that way. After all, only the *preallocate* p",https://github.com/bitcoin/bitcoin/pull/17887#discussion_r366959618,366959618,src/util/system.cpp
laanwj,2020-01-22 15:39:44,"I think that's correct.\nThough I would expect the seek to be of negligible performance compared to the allocation of disk space itself.\n\nBut it's always possible to do that later; if people tested that this fixes the issue let's not make further changes here.",https://github.com/bitcoin/bitcoin/pull/17887#discussion_r369635091,369635091,src/util/system.cpp
