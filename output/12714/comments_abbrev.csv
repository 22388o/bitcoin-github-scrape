jonasschnelli,2018-03-18T05:01:02Z,"Makes sense.\nutACK b6cb981e9e62a9886891b200fcf6b144f1e2e2f5",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-373973221,373973221,
meshcollider,2018-03-18T10:07:44Z,Concept ACK,https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-373986182,373986182,
jimpo,2018-03-18T23:31:45Z,utACK b6cb981e9e62a9886891b200fcf6b144f1e2e2f5.,https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-374066693,374066693,
l2a5b1,2018-03-19T11:12:27Z,"Strong concept ACK. \n\nI very much appreciate this PR as it promotes the separation of concerns and the use of loosely coupled components.\n\nSome thoughts:\n\n- `CKeyStore` can become a pure interface by itself by moving its `cs_KeyStore` member and the AddKey implementation to `CBasicKeyStore` (I am happy to follow up on this if this is desired, but out of scope);\n- Declare `SigningProv",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-374177443,374177443,
sipa,2018-03-19T18:50:38Z,"> CKeyStore can become a pure interface by itself by moving its cs_KeyStore member and the AddKey implementation to CBasicKeyStore (I am happy to follow up on this if this is desired, but out of scope);\n\nIndeed, this is possible (and has been possible for a while). I have some bigger changes planned, though (see below).\n\n> Declare `SigningProvider` in its own header file;\n\nI disagree. ",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-374324809,374324809,
l2a5b1,2018-03-21T18:16:38Z,"Thanks for the feedback @sipa, appreciate it!\n\nJust to elaborate on the suggestion to decouple the pure interface `SigningProvider`:\n\nAs far as I can tell with b6cb981 there is a compilation dependency between implementations of the `SigningProvider` and the signing module, meaning that each time when the signing module needs to be compiled, implementations of the `SigningProvider` - which",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-375045485,375045485,
sipa,2018-03-21T18:36:51Z,"@251Labs Sorry if I came across as claiming you're wrong, I'm just voicing my opinion about design. This is a useful discussion in any case.\n\nYou're certainly right that keeping `SigningProvider` part of the signing module means a possibly unnecessary compilation dependency of provider implementations on `script/sign.h`, but I don't think this is a big issue.\n\nThe point I was trying to mak",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-375051963,375051963,
instagibbs,2018-03-22T20:55:21Z,"concept ACK, will review",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-375454445,375454445,
instagibbs,2018-03-23T12:37:06Z,"utACK https://github.com/bitcoin/bitcoin/pull/12714/commits/b6cb981e9e62a9886891b200fcf6b144f1e2e2f5\n\nfollow-on renamings always nice in subsequent PRs",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-375651887,375651887,
sipa,2018-03-25T20:28:36Z,Updated to include a few non-invasive renames.,https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-376000833,376000833,
instagibbs,2018-03-26T18:32:59Z,"reACK https://github.com/bitcoin/bitcoin/pull/12714/commits/d40f06a3da5e6b1fd065885b08513263fa930cb8\n\n(m_)provider renaming",https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-376266922,376266922,
laanwj,2018-03-27T18:16:25Z,utACK d40f06a3da5e6b1fd065885b08513263fa930cb8,https://github.com/bitcoin/bitcoin/pull/12714#issuecomment-376623933,376623933,
promag,2018-03-23T00:30:58Z,"nit, `key stores`:\nhttps://github.com/bitcoin/bitcoin/blob/cead84b72d27517338ac3c49eaaed4db07352f41/src/keystore.h#L17-L18",https://github.com/bitcoin/bitcoin/pull/12714#discussion_r176611666,176611666,src/script/sign.h
