[
  {
    "sha": "d40f06a3da5e6b1fd065885b08513263fa930cb8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkNDBmMDZhM2RhNWU2YjFmZDA2NTg4NWIwODUxMzI2M2ZhOTMwY2I4",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-18T02:19:09Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2018-03-25T20:26:57Z"
      },
      "message": "Introduce interface for signing providers\n\nCKeyStore is a rich interface that provides many features, including knowledge\nof scripts and pubkeys for solving, private keys for signing, in addition to\nwatch-only keys and scripts, and distinguishing lack of keys from them just\nbeing encrypted.\n\nThe signing logic in script/sign does not actually need most of these features.\nHere we introduce a simpler interface (SigningProvider) which *only* provides\nkeys and scripts. This is actually sufficient for signing.\n\nIn addtion, we swap the dependency between keystore and script/sign\n(keystore now depends on script/script with CKeyStore deriving from\nSigningProvider, rather than CKeyStore being the interface that signing\nrelies on).",
      "tree": {
        "sha": "80e3a485e4d9ecdc7a891ae3fd88f5fbd7011326",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/80e3a485e4d9ecdc7a891ae3fd88f5fbd7011326"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d40f06a3da5e6b1fd065885b08513263fa930cb8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40f06a3da5e6b1fd065885b08513263fa930cb8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d40f06a3da5e6b1fd065885b08513263fa930cb8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d40f06a3da5e6b1fd065885b08513263fa930cb8/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "af20f9b1d485582b8c8aa8294bac4f2c540246d2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/af20f9b1d485582b8c8aa8294bac4f2c540246d2",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/af20f9b1d485582b8c8aa8294bac4f2c540246d2"
      }
    ],
    "stats": {
      "total": 64,
      "additions": 35,
      "deletions": 29
    },
    "files": [
      {
        "sha": "ff5613f617b18fb358ad343ba861545d170d21a5",
        "filename": "src/keystore.h",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/keystore.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/keystore.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/keystore.h?ref=d40f06a3da5e6b1fd065885b08513263fa930cb8",
        "patch": "@@ -9,35 +9,31 @@\n #include <key.h>\n #include <pubkey.h>\n #include <script/script.h>\n+#include <script/sign.h>\n #include <script/standard.h>\n #include <sync.h>\n \n #include <boost/signals2/signal.hpp>\n \n /** A virtual base class for key stores */\n-class CKeyStore\n+class CKeyStore : public SigningProvider\n {\n protected:\n     mutable CCriticalSection cs_KeyStore;\n \n public:\n-    virtual ~CKeyStore() {}\n-\n     //! Add a key to the store.\n     virtual bool AddKeyPubKey(const CKey &key, const CPubKey &pubkey) =0;\n     virtual bool AddKey(const CKey &key);\n \n     //! Check whether a key corresponding to a given address is present in the store.\n     virtual bool HaveKey(const CKeyID &address) const =0;\n-    virtual bool GetKey(const CKeyID &address, CKey& keyOut) const =0;\n     virtual std::set<CKeyID> GetKeys() const =0;\n-    virtual bool GetPubKey(const CKeyID &address, CPubKey& vchPubKeyOut) const =0;\n \n     //! Support for BIP 0013 : see https://github.com/bitcoin/bips/blob/master/bip-0013.mediawiki\n     virtual bool AddCScript(const CScript& redeemScript) =0;\n     virtual bool HaveCScript(const CScriptID &hash) const =0;\n     virtual std::set<CScriptID> GetCScripts() const =0;\n-    virtual bool GetCScript(const CScriptID &hash, CScript& redeemScriptOut) const =0;\n \n     //! Support for Watch-only addresses\n     virtual bool AddWatchOnly(const CScript &dest) =0;"
      },
      {
        "sha": "d22d4e161b1c44f314eb494c6108d2b346a880db",
        "filename": "src/script/sign.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 12,
        "changes": 23,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/script/sign.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/script/sign.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.cpp?ref=d40f06a3da5e6b1fd065885b08513263fa930cb8",
        "patch": "@@ -6,7 +6,6 @@\n #include <script/sign.h>\n \n #include <key.h>\n-#include <keystore.h>\n #include <policy/policy.h>\n #include <primitives/transaction.h>\n #include <script/standard.h>\n@@ -15,12 +14,12 @@\n \n typedef std::vector<unsigned char> valtype;\n \n-TransactionSignatureCreator::TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(keystoreIn), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n+TransactionSignatureCreator::TransactionSignatureCreator(const SigningProvider* provider, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : BaseSignatureCreator(provider), txTo(txToIn), nIn(nInIn), nHashType(nHashTypeIn), amount(amountIn), checker(txTo, nIn, amountIn) {}\n \n bool TransactionSignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& address, const CScript& scriptCode, SigVersion sigversion) const\n {\n     CKey key;\n-    if (!keystore->GetKey(address, key))\n+    if (!m_provider->GetKey(address, key))\n         return false;\n \n     // Signing with uncompressed keys is disabled in witness scripts\n@@ -91,12 +90,12 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n         else\n         {\n             CPubKey vch;\n-            creator.KeyStore().GetPubKey(keyID, vch);\n+            creator.Provider().GetPubKey(keyID, vch);\n             ret.push_back(ToByteVector(vch));\n         }\n         return true;\n     case TX_SCRIPTHASH:\n-        if (creator.KeyStore().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n+        if (creator.Provider().GetCScript(uint160(vSolutions[0]), scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n@@ -112,7 +111,7 @@ static bool SignStep(const BaseSignatureCreator& creator, const CScript& scriptP\n \n     case TX_WITNESS_V0_SCRIPTHASH:\n         CRIPEMD160().Write(&vSolutions[0][0], vSolutions[0].size()).Finalize(h160.begin());\n-        if (creator.KeyStore().GetCScript(h160, scriptRet)) {\n+        if (creator.Provider().GetCScript(h160, scriptRet)) {\n             ret.push_back(std::vector<unsigned char>(scriptRet.begin(), scriptRet.end()));\n             return true;\n         }\n@@ -206,27 +205,27 @@ void UpdateTransaction(CMutableTransaction& tx, unsigned int nIn, const Signatur\n     UpdateInput(tx.vin[nIn], data);\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n \n     CTransaction txToConst(txTo);\n-    TransactionSignatureCreator creator(&keystore, &txToConst, nIn, amount, nHashType);\n+    TransactionSignatureCreator creator(&provider, &txToConst, nIn, amount, nHashType);\n \n     SignatureData sigdata;\n     bool ret = ProduceSignature(creator, fromPubKey, sigdata);\n     UpdateTransaction(txTo, nIn, sigdata);\n     return ret;\n }\n \n-bool SignSignature(const CKeyStore &keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n+bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType)\n {\n     assert(nIn < txTo.vin.size());\n     CTxIn& txin = txTo.vin[nIn];\n     assert(txin.prevout.n < txFrom.vout.size());\n     const CTxOut& txout = txFrom.vout[txin.prevout.n];\n \n-    return SignSignature(keystore, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n+    return SignSignature(provider, txout.scriptPubKey, txTo, nIn, txout.nValue, nHashType);\n }\n \n static std::vector<valtype> CombineMultisig(const CScript& scriptPubKey, const BaseSignatureChecker& checker,\n@@ -427,13 +426,13 @@ bool DummySignatureCreator::CreateSig(std::vector<unsigned char>& vchSig, const\n     return true;\n }\n \n-bool IsSolvable(const CKeyStore& store, const CScript& script)\n+bool IsSolvable(const SigningProvider& provider, const CScript& script)\n {\n     // This check is to make sure that the script we created can actually be solved for and signed by us\n     // if we were to have the private keys. This is just to make sure that the script is valid and that,\n     // if found in a transaction, we would still accept and relay that transaction. In particular,\n     // it will reject witness outputs that require signing with an uncompressed public key.\n-    DummySignatureCreator creator(&store);\n+    DummySignatureCreator creator(&provider);\n     SignatureData sigs;\n     // Make sure that STANDARD_SCRIPT_VERIFY_FLAGS includes SCRIPT_VERIFY_WITNESS_PUBKEYTYPE, the most\n     // important property this function is designed to test for."
      },
      {
        "sha": "c301f0544f7b4ad0c22ba8ad8ebc12a082639b09",
        "filename": "src/script/sign.h",
        "status": "modified",
        "additions": 22,
        "deletions": 11,
        "changes": 33,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/script/sign.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d40f06a3da5e6b1fd065885b08513263fa930cb8/src/script/sign.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script/sign.h?ref=d40f06a3da5e6b1fd065885b08513263fa930cb8",
        "patch": "@@ -8,21 +8,32 @@\n \n #include <script/interpreter.h>\n \n+class CKey;\n class CKeyID;\n-class CKeyStore;\n class CScript;\n+class CScriptID;\n class CTransaction;\n \n struct CMutableTransaction;\n \n+/** An interface to be implemented by keystores that support signing. */\n+class SigningProvider\n+{\n+public:\n+    virtual ~SigningProvider() {}\n+    virtual bool GetCScript(const CScriptID &scriptid, CScript& script) const =0;\n+    virtual bool GetPubKey(const CKeyID &address, CPubKey& pubkey) const =0;\n+    virtual bool GetKey(const CKeyID &address, CKey& key) const =0;\n+};\n+\n /** Virtual base class for signature creators. */\n class BaseSignatureCreator {\n protected:\n-    const CKeyStore* keystore;\n+    const SigningProvider* m_provider;\n \n public:\n-    explicit BaseSignatureCreator(const CKeyStore* keystoreIn) : keystore(keystoreIn) {}\n-    const CKeyStore& KeyStore() const { return *keystore; };\n+    explicit BaseSignatureCreator(const SigningProvider* provider) : m_provider(provider) {}\n+    const SigningProvider& Provider() const { return *m_provider; }\n     virtual ~BaseSignatureCreator() {}\n     virtual const BaseSignatureChecker& Checker() const =0;\n \n@@ -39,7 +50,7 @@ class TransactionSignatureCreator : public BaseSignatureCreator {\n     const TransactionSignatureChecker checker;\n \n public:\n-    TransactionSignatureCreator(const CKeyStore* keystoreIn, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n+    TransactionSignatureCreator(const SigningProvider* provider, const CTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn=SIGHASH_ALL);\n     const BaseSignatureChecker& Checker() const override { return checker; }\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n@@ -48,13 +59,13 @@ class MutableTransactionSignatureCreator : public TransactionSignatureCreator {\n     CTransaction tx;\n \n public:\n-    MutableTransactionSignatureCreator(const CKeyStore* keystoreIn, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(keystoreIn, &tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n+    MutableTransactionSignatureCreator(const SigningProvider* provider, const CMutableTransaction* txToIn, unsigned int nInIn, const CAmount& amountIn, int nHashTypeIn) : TransactionSignatureCreator(provider, &tx, nInIn, amountIn, nHashTypeIn), tx(*txToIn) {}\n };\n \n /** A signature creator that just produces 72-byte empty signatures. */\n class DummySignatureCreator : public BaseSignatureCreator {\n public:\n-    explicit DummySignatureCreator(const CKeyStore* keystoreIn) : BaseSignatureCreator(keystoreIn) {}\n+    explicit DummySignatureCreator(const SigningProvider* provider) : BaseSignatureCreator(provider) {}\n     const BaseSignatureChecker& Checker() const override;\n     bool CreateSig(std::vector<unsigned char>& vchSig, const CKeyID& keyid, const CScript& scriptCode, SigVersion sigversion) const override;\n };\n@@ -71,8 +82,8 @@ struct SignatureData {\n bool ProduceSignature(const BaseSignatureCreator& creator, const CScript& scriptPubKey, SignatureData& sigdata);\n \n /** Produce a script signature for a transaction. */\n-bool SignSignature(const CKeyStore &keystore, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n-bool SignSignature(const CKeyStore& keystore, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n+bool SignSignature(const SigningProvider &provider, const CScript& fromPubKey, CMutableTransaction& txTo, unsigned int nIn, const CAmount& amount, int nHashType);\n+bool SignSignature(const SigningProvider &provider, const CTransaction& txFrom, CMutableTransaction& txTo, unsigned int nIn, int nHashType);\n \n /** Combine two script signatures using a generic signature checker, intelligently, possibly with OP_0 placeholders. */\n SignatureData CombineSignatures(const CScript& scriptPubKey, const BaseSignatureChecker& checker, const SignatureData& scriptSig1, const SignatureData& scriptSig2);\n@@ -84,8 +95,8 @@ void UpdateInput(CTxIn& input, const SignatureData& data);\n \n /* Check whether we know how to sign for an output like this, assuming we\n  * have all private keys. While this function does not need private keys, the passed\n- * keystore is used to look up public keys and redeemscripts by hash.\n+ * provider is used to look up public keys and redeemscripts by hash.\n  * Solvability is unrelated to whether we consider this output to be ours. */\n-bool IsSolvable(const CKeyStore& store, const CScript& script);\n+bool IsSolvable(const SigningProvider& provider, const CScript& script);\n \n #endif // BITCOIN_SCRIPT_SIGN_H"
      }
    ]
  }
]