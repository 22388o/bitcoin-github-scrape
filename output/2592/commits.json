[
  {
    "sha": "acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphY2M3NzVjNTU0N2E5NGZhNWFkMTJlY2IwYmRhZWVmZGMyODVkODUz",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:02Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-22T14:49:30Z"
      },
      "message": "Add ExtractAffectedKeys to script\n\nThis function finds all keys affected by a particular output script,\nsupporting everything ExtractDestinations supports (pay-to-pubkey,\npay-to-pubkeyhash, multisig) and recurses into subscripts (P2SH).",
      "tree": {
        "sha": "bfca097e15d42febc5b18cd9009b3c054afbf2cf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bfca097e15d42febc5b18cd9009b3c054afbf2cf"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc775c5547a94fa5ad12ecb0bdaeefdc285d853/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "01b45731b75a19ac194b4206b20716bfedcb2357",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/01b45731b75a19ac194b4206b20716bfedcb2357",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/01b45731b75a19ac194b4206b20716bfedcb2357"
      }
    ],
    "stats": {
      "total": 37,
      "additions": 37,
      "deletions": 0
    },
    "files": [
      {
        "sha": "14fe80e2073df217c934d10062e2904fb1127c3e",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 36,
        "deletions": 0,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acc775c5547a94fa5ad12ecb0bdaeefdc285d853/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acc775c5547a94fa5ad12ecb0bdaeefdc285d853/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
        "patch": "@@ -1474,6 +1474,42 @@ bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, vecto\n     return true;\n }\n \n+class CAffectedKeysVisitor : public boost::static_visitor<void> {\n+private:\n+    const CKeyStore &keystore;\n+    std::vector<CKeyID> &vKeys;\n+\n+public:\n+    CAffectedKeysVisitor(const CKeyStore &keystoreIn, std::vector<CKeyID> &vKeysIn) : keystore(keystoreIn), vKeys(vKeysIn) {}\n+\n+    void Process(const CScript &script) {\n+        txnouttype type;\n+        std::vector<CTxDestination> vDest;\n+        int nRequired;\n+        if (ExtractDestinations(script, type, vDest, nRequired)) {\n+            BOOST_FOREACH(const CTxDestination &dest, vDest)\n+                boost::apply_visitor(*this, dest);\n+        }\n+    }\n+\n+    void operator()(const CKeyID &keyId) {\n+        if (keystore.HaveKey(keyId))\n+            vKeys.push_back(keyId);\n+    }\n+\n+    void operator()(const CScriptID &scriptId) {\n+        CScript script;\n+        if (keystore.GetCScript(scriptId, script))\n+            Process(script);\n+    }\n+\n+    void operator()(const CNoDestination &none) {}\n+};\n+\n+void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys) {\n+    CAffectedKeysVisitor(keystore, vKeys).Process(scriptPubKey);\n+}\n+\n bool VerifyScript(const CScript& scriptSig, const CScript& scriptPubKey, const CTransaction& txTo, unsigned int nIn,\n                   unsigned int flags, int nHashType)\n {"
      },
      {
        "sha": "03afe8b652f413aa723907fd830aafe54dd897cf",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/acc775c5547a94fa5ad12ecb0bdaeefdc285d853/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/acc775c5547a94fa5ad12ecb0bdaeefdc285d853/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
        "patch": "@@ -674,6 +674,7 @@ int ScriptSigArgsExpected(txnouttype t, const std::vector<std::vector<unsigned c\n bool IsStandard(const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CScript& scriptPubKey);\n bool IsMine(const CKeyStore& keystore, const CTxDestination &dest);\n+void ExtractAffectedKeys(const CKeyStore &keystore, const CScript& scriptPubKey, std::vector<CKeyID> &vKeys);\n bool ExtractDestination(const CScript& scriptPubKey, CTxDestination& addressRet);\n bool ExtractDestinations(const CScript& scriptPubKey, txnouttype& typeRet, std::vector<CTxDestination>& addressRet, int& nRequiredRet);\n bool SignSignature(const CKeyStore& keystore, const CScript& fromPubKey, CTransaction& txTo, unsigned int nIn, int nHashType=SIGHASH_ALL);"
      }
    ]
  },
  {
    "sha": "434e4273b96cb9204fea346c3fbc65583b01c55b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0MzRlNDI3M2I5NmNiOTIwNGZlYTM0NmMzZmJjNjU1ODNiMDFjNTVi",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:40Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-22T15:30:56Z"
      },
      "message": "Add GetKeyBirthTimes to wallet\n\nCompute safe lower bounds on the birth times of all wallet keys. For\npool keys or keys with metadata, the actually stored birth time is\nused. For all others, the birth times are inferred from the wallet\ntransactions.",
      "tree": {
        "sha": "d9be012ebad51d9adcc439d4d77e73fdf0f43b0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9be012ebad51d9adcc439d4d77e73fdf0f43b0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/434e4273b96cb9204fea346c3fbc65583b01c55b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434e4273b96cb9204fea346c3fbc65583b01c55b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/434e4273b96cb9204fea346c3fbc65583b01c55b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434e4273b96cb9204fea346c3fbc65583b01c55b/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/acc775c5547a94fa5ad12ecb0bdaeefdc285d853",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/acc775c5547a94fa5ad12ecb0bdaeefdc285d853"
      }
    ],
    "stats": {
      "total": 65,
      "additions": 63,
      "deletions": 2
    },
    "files": [
      {
        "sha": "dcedf86f9a84daac66e66a54f6d949c944d29355",
        "filename": "src/wallet.cpp",
        "status": "modified",
        "additions": 51,
        "deletions": 1,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434e4273b96cb9204fea346c3fbc65583b01c55b/src/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434e4273b96cb9204fea346c3fbc65583b01c55b/src/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.cpp?ref=434e4273b96cb9204fea346c3fbc65583b01c55b",
        "patch": "@@ -1846,7 +1846,7 @@ void CReserveKey::ReturnKey()\n     vchPubKey = CPubKey();\n }\n \n-void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress)\n+void CWallet::GetAllReserveKeys(set<CKeyID>& setAddress) const\n {\n     setAddress.clear();\n \n@@ -1908,3 +1908,53 @@ void CWallet::ListLockedCoins(std::vector<COutPoint>& vOutpts)\n     }\n }\n \n+void CWallet::GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const {\n+    mapKeyBirth.clear();\n+\n+    // get birth times for keys with metadata\n+    for (std::map<CKeyID, CKeyMetadata>::const_iterator it = mapKeyMetadata.begin(); it != mapKeyMetadata.end(); it++)\n+        if (it->second.nCreateTime)\n+            mapKeyBirth[it->first] = it->second.nCreateTime;\n+\n+    // map in which we'll infer heights of other keys\n+    CBlockIndex *pindexMax = FindBlockByHeight(std::max(0, nBestHeight - 144)); // the tip can be reorganised; use a 144-block safety margin\n+    std::map<CKeyID, CBlockIndex*> mapKeyFirstBlock;\n+    std::set<CKeyID> setKeys;\n+    GetKeys(setKeys);\n+    BOOST_FOREACH(const CKeyID &keyid, setKeys) {\n+        if (mapKeyBirth.count(keyid) == 0)\n+            mapKeyFirstBlock[keyid] = pindexMax;\n+    }\n+    setKeys.clear();\n+\n+    // if there are no such keys, we're done\n+    if (mapKeyFirstBlock.empty())\n+        return;\n+\n+    // find first block that affects those keys, if there are any left\n+    std::vector<CKeyID> vAffected;\n+    for (std::map<uint256, CWalletTx>::const_iterator it = mapWallet.begin(); it != mapWallet.end(); it++) {\n+        // iterate over all wallet transactions...\n+        const CWalletTx &wtx = (*it).second;\n+        std::map<uint256, CBlockIndex*>::const_iterator blit = mapBlockIndex.find(wtx.hashBlock);\n+        if (blit != mapBlockIndex.end() && blit->second->IsInMainChain()) {\n+            // ... which are already in a block\n+            int nHeight = blit->second->nHeight;\n+            BOOST_FOREACH(const CTxOut &txout, wtx.vout) {\n+                // iterate over all their outputs\n+                ::ExtractAffectedKeys(*this, txout.scriptPubKey, vAffected);\n+                BOOST_FOREACH(const CKeyID &keyid, vAffected) {\n+                    // ... and all their affected keys\n+                    std::map<CKeyID, CBlockIndex*>::iterator rit = mapKeyFirstBlock.find(keyid);\n+                    if (rit != mapKeyFirstBlock.end() && nHeight < rit->second->nHeight)\n+                        rit->second = blit->second;\n+                }\n+                vAffected.clear();\n+            }\n+        }\n+    }\n+\n+    // Extract block timestamps for those keys\n+    for (std::map<CKeyID, CBlockIndex*>::const_iterator it = mapKeyFirstBlock.begin(); it != mapKeyFirstBlock.end(); it++)\n+        mapKeyBirth[it->first] = it->second->nTime - 7200; // block times can be 2h off\n+}"
      },
      {
        "sha": "36b3608fb03ca8ba4252ec9bdfba77f893433c8f",
        "filename": "src/wallet.h",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434e4273b96cb9204fea346c3fbc65583b01c55b/src/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434e4273b96cb9204fea346c3fbc65583b01c55b/src/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet.h?ref=434e4273b96cb9204fea346c3fbc65583b01c55b",
        "patch": "@@ -159,6 +159,8 @@ class CWallet : public CCryptoKeyStore\n     bool ChangeWalletPassphrase(const SecureString& strOldWalletPassphrase, const SecureString& strNewWalletPassphrase);\n     bool EncryptWallet(const SecureString& strWalletPassphrase);\n \n+    void GetKeyBirthTimes(std::map<CKeyID, int64> &mapKeyBirth) const;\n+\n     /** Increment the next transaction order id\n         @return next transaction order id\n      */\n@@ -200,7 +202,7 @@ class CWallet : public CCryptoKeyStore\n     void ReturnKey(int64 nIndex);\n     bool GetKeyFromPool(CPubKey &key, bool fAllowReuse=true);\n     int64 GetOldestKeyPoolTime();\n-    void GetAllReserveKeys(std::set<CKeyID>& setAddress);\n+    void GetAllReserveKeys(std::set<CKeyID>& setAddress) const;\n \n     std::set< std::set<CTxDestination> > GetAddressGroupings();\n     std::map<CTxDestination, int64> GetAddressBalances();"
      },
      {
        "sha": "702e219a5bcdf2078bcd97aa8772ddef221ec173",
        "filename": "src/walletdb.cpp",
        "status": "modified",
        "additions": 9,
        "deletions": 0,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/434e4273b96cb9204fea346c3fbc65583b01c55b/src/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/434e4273b96cb9204fea346c3fbc65583b01c55b/src/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/walletdb.cpp?ref=434e4273b96cb9204fea346c3fbc65583b01c55b",
        "patch": "@@ -365,7 +365,16 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n         {\n             int64 nIndex;\n             ssKey >> nIndex;\n+            CKeyPool keypool;\n+            ssValue >> keypool;\n             pwallet->setKeyPool.insert(nIndex);\n+\n+            // If no metadata exists yet, create a default with the pool key's\n+            // creation time. Note that this may be overwritten by actually\n+            // stored metadata for that key later, which is fine.\n+            CKeyID keyid = keypool.vchPubKey.GetID();\n+            if (pwallet->mapKeyMetadata.count(keyid) == 0)\n+                pwallet->mapKeyMetadata[keyid] = CKeyMetadata(keypool.nTime);\n         }\n         else if (strType == \"version\")\n         {"
      }
    ]
  },
  {
    "sha": "4e534aa9d892dd6db64afda979ba1f8d44371389",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZTUzNGFhOWQ4OTJkZDZkYjY0YWZkYTk3OWJhMWY4ZDQ0MzcxMzg5",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-04-29T17:50:56Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2013-06-22T15:30:56Z"
      },
      "message": "Add dumpwallet and importwallet RPCs\n\ndumpwallet: produce a dump of all keys in a wallet, in a format\ncompatible with Bitcoin Wallet for Android and Multibit.\n\nimportwallet: import such a dump",
      "tree": {
        "sha": "5dfdf5fe6c98aa66e2cac40f3bad8e784f542eab",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5dfdf5fe6c98aa66e2cac40f3bad8e784f542eab"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4e534aa9d892dd6db64afda979ba1f8d44371389",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e534aa9d892dd6db64afda979ba1f8d44371389",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4e534aa9d892dd6db64afda979ba1f8d44371389",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4e534aa9d892dd6db64afda979ba1f8d44371389/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "434e4273b96cb9204fea346c3fbc65583b01c55b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/434e4273b96cb9204fea346c3fbc65583b01c55b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/434e4273b96cb9204fea346c3fbc65583b01c55b"
      }
    ],
    "stats": {
      "total": 211,
      "additions": 195,
      "deletions": 16
    },
    "files": [
      {
        "sha": "9b7917ffe96697ececdaaf25cf9d32f5af8880c2",
        "filename": "src/bitcoinrpc.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e534aa9d892dd6db64afda979ba1f8d44371389/src/bitcoinrpc.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e534aa9d892dd6db64afda979ba1f8d44371389/src/bitcoinrpc.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.cpp?ref=4e534aa9d892dd6db64afda979ba1f8d44371389",
        "patch": "@@ -243,7 +243,9 @@ static const CRPCCommand vRPCCommands[] =\n     { \"submitblock\",            &submitblock,            false,     false },\n     { \"listsinceblock\",         &listsinceblock,         false,     false },\n     { \"dumpprivkey\",            &dumpprivkey,            true,      false },\n+    { \"dumpwallet\",             &dumpwallet,             true,      false },\n     { \"importprivkey\",          &importprivkey,          false,     false },\n+    { \"importwallet\",           &importwallet,           false,     false },\n     { \"listunspent\",            &listunspent,            false,     false },\n     { \"getrawtransaction\",      &getrawtransaction,      false,     false },\n     { \"createrawtransaction\",   &createrawtransaction,   false,     false },"
      },
      {
        "sha": "8201dffe9cb9a78a4a4b992623c1b637c2932c6c",
        "filename": "src/bitcoinrpc.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e534aa9d892dd6db64afda979ba1f8d44371389/src/bitcoinrpc.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e534aa9d892dd6db64afda979ba1f8d44371389/src/bitcoinrpc.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoinrpc.h?ref=4e534aa9d892dd6db64afda979ba1f8d44371389",
        "patch": "@@ -145,8 +145,11 @@ extern json_spirit::Value getconnectioncount(const json_spirit::Array& params, b\n extern json_spirit::Value getpeerinfo(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value addnode(const json_spirit::Array& params, bool fHelp);\n extern json_spirit::Value getaddednodeinfo(const json_spirit::Array& params, bool fHelp);\n+\n extern json_spirit::Value dumpprivkey(const json_spirit::Array& params, bool fHelp); // in rpcdump.cpp\n extern json_spirit::Value importprivkey(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value dumpwallet(const json_spirit::Array& params, bool fHelp);\n+extern json_spirit::Value importwallet(const json_spirit::Array& params, bool fHelp);\n \n extern json_spirit::Value getgenerate(const json_spirit::Array& params, bool fHelp); // in rpcmining.cpp\n extern json_spirit::Value setgenerate(const json_spirit::Array& params, bool fHelp);"
      },
      {
        "sha": "dcfb023f3568d0b8f989b48ca4eac44d446773b3",
        "filename": "src/rpcdump.cpp",
        "status": "modified",
        "additions": 190,
        "deletions": 16,
        "changes": 206,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4e534aa9d892dd6db64afda979ba1f8d44371389/src/rpcdump.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4e534aa9d892dd6db64afda979ba1f8d44371389/src/rpcdump.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcdump.cpp?ref=4e534aa9d892dd6db64afda979ba1f8d44371389",
        "patch": "@@ -2,35 +2,68 @@\n // Distributed under the MIT/X11 software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include <iostream>\n+#include <fstream>\n+\n #include \"init.h\" // for pwalletMain\n #include \"bitcoinrpc.h\"\n #include \"ui_interface.h\"\n #include \"base58.h\"\n \n+#include <boost/date_time/posix_time/posix_time.hpp>\n #include <boost/lexical_cast.hpp>\n+#include <boost/variant/get.hpp>\n+#include <boost/algorithm/string.hpp>\n \n #define printf OutputDebugStringF\n \n using namespace json_spirit;\n using namespace std;\n \n-class CTxDump\n-{\n-public:\n-    CBlockIndex *pindex;\n-    int64 nValue;\n-    bool fSpent;\n-    CWalletTx* ptx;\n-    int nOut;\n-    CTxDump(CWalletTx* ptx = NULL, int nOut = -1)\n-    {\n-        pindex = NULL;\n-        nValue = 0;\n-        fSpent = false;\n-        this->ptx = ptx;\n-        this->nOut = nOut;\n+void EnsureWalletIsUnlocked();\n+\n+std::string static EncodeDumpTime(int64 nTime) {\n+    return DateTimeStrFormat(\"%Y-%m-%dT%H:%M:%SZ\", nTime);\n+}\n+\n+int64 static DecodeDumpTime(const std::string &str) {\n+    static const boost::posix_time::time_input_facet facet(\"%Y-%m-%dT%H:%M:%SZ\");\n+    static const boost::posix_time::ptime epoch = boost::posix_time::from_time_t(0);\n+    const std::locale loc(std::locale::classic(), &facet);\n+    std::istringstream iss(str);\n+    iss.imbue(loc);\n+    boost::posix_time::ptime ptime(boost::date_time::not_a_date_time);\n+    iss >> ptime;\n+    if (ptime.is_not_a_date_time())\n+        return 0;\n+    return (ptime - epoch).total_seconds();\n+}\n+\n+std::string static EncodeDumpString(const std::string &str) {\n+    std::stringstream ret;\n+    BOOST_FOREACH(unsigned char c, str) {\n+        if (c <= 32 || c >= 128 || c == '%') {\n+            ret << '%' << HexStr(&c, &c + 1);\n+        } else {\n+            ret << c;\n+        }\n+    }\n+    return ret.str();\n+}\n+\n+std::string DecodeDumpString(const std::string &str) {\n+    std::stringstream ret;\n+    for (unsigned int pos = 0; pos < str.length(); pos++) {\n+        unsigned char c = str[pos];\n+        if (c == '%' && pos+2 < str.length()) {\n+            c = (((str[pos+1]>>6)*9+((str[pos+1]-'0')&15)) << 4) | \n+                ((str[pos+2]>>6)*9+((str[pos+2]-'0')&15));\n+            pos += 2;\n+        }\n+        ret << c;\n     }\n-};\n+    return ret.str();\n+}\n \n Value importprivkey(const Array& params, bool fHelp)\n {\n@@ -63,6 +96,10 @@ Value importprivkey(const Array& params, bool fHelp)\n         pwalletMain->MarkDirty();\n         pwalletMain->SetAddressBookName(vchAddress, strLabel);\n \n+        // Don't throw error in case a key is already there\n+        if (pwalletMain->HaveKey(vchAddress))\n+            return Value::null;\n+\n         if (!pwalletMain->AddKeyPubKey(key, pubkey))\n             throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding key to wallet\");\n \n@@ -75,13 +112,95 @@ Value importprivkey(const Array& params, bool fHelp)\n     return Value::null;\n }\n \n+Value importwallet(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"importwallet <filename>\\n\"\n+            \"Imports keys from a wallet dump file (see dumpwallet).\");\n+\n+    EnsureWalletIsUnlocked();\n+\n+    ifstream file;\n+    file.open(params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+    int64 nTimeBegin = pindexBest->nTime;\n+\n+    bool fGood = true;\n+\n+    while (file.good()) {\n+        std::string line;\n+        std::getline(file, line);\n+        if (line.empty() || line[0] == '#')\n+            continue;\n+\n+        std::vector<std::string> vstr;\n+        boost::split(vstr, line, boost::is_any_of(\" \"));\n+        if (vstr.size() < 2)\n+            continue;\n+        CBitcoinSecret vchSecret;\n+        if (!vchSecret.SetString(vstr[0]))\n+            continue;\n+        CKey key = vchSecret.GetKey();\n+        CPubKey pubkey = key.GetPubKey();\n+        CKeyID keyid = pubkey.GetID();\n+        if (pwalletMain->HaveKey(keyid)) {\n+            printf(\"Skipping import of %s (key already present)\\n\", CBitcoinAddress(keyid).ToString().c_str());\n+            continue;\n+        }\n+        int64 nTime = DecodeDumpTime(vstr[1]);\n+        std::string strLabel;\n+        bool fLabel = true;\n+        for (unsigned int nStr = 2; nStr < vstr.size(); nStr++) {\n+            if (boost::algorithm::starts_with(vstr[nStr], \"#\"))\n+                break;\n+            if (vstr[nStr] == \"change=1\")\n+                fLabel = false;\n+            if (vstr[nStr] == \"reserve=1\")\n+                fLabel = false;\n+            if (boost::algorithm::starts_with(vstr[nStr], \"label=\")) {\n+                strLabel = DecodeDumpString(vstr[nStr].substr(6));\n+                fLabel = true;\n+            }\n+        }\n+        printf(\"Importing %s...\\n\", CBitcoinAddress(keyid).ToString().c_str());\n+        if (!pwalletMain->AddKeyPubKey(key, pubkey)) {\n+            fGood = false;\n+            continue;\n+        }\n+        pwalletMain->mapKeyMetadata[keyid].nCreateTime = nTime;\n+        if (fLabel)\n+            pwalletMain->SetAddressBookName(keyid, strLabel);\n+        nTimeBegin = std::min(nTimeBegin, nTime);\n+    }\n+    file.close();\n+\n+    CBlockIndex *pindex = pindexBest;\n+    while (pindex && pindex->pprev && pindex->nTime > nTimeBegin - 7200)\n+        pindex = pindex->pprev;\n+\n+    printf(\"Rescanning last %i blocks\\n\", pindexBest->nHeight - pindex->nHeight + 1);\n+    pwalletMain->ScanForWalletTransactions(pindex);\n+    pwalletMain->ReacceptWalletTransactions();\n+    pwalletMain->MarkDirty();\n+\n+    if (!fGood)\n+        throw JSONRPCError(RPC_WALLET_ERROR, \"Error adding some keys to wallet\");\n+\n+    return Value::null;\n+}\n+\n Value dumpprivkey(const Array& params, bool fHelp)\n {\n     if (fHelp || params.size() != 1)\n         throw runtime_error(\n             \"dumpprivkey <bitcoinaddress>\\n\"\n             \"Reveals the private key corresponding to <bitcoinaddress>.\");\n \n+    EnsureWalletIsUnlocked();\n+\n     string strAddress = params[0].get_str();\n     CBitcoinAddress address;\n     if (!address.SetString(strAddress))\n@@ -94,3 +213,58 @@ Value dumpprivkey(const Array& params, bool fHelp)\n         throw JSONRPCError(RPC_WALLET_ERROR, \"Private key for address \" + strAddress + \" is not known\");\n     return CBitcoinSecret(vchSecret).ToString();\n }\n+\n+\n+Value dumpwallet(const Array& params, bool fHelp)\n+{\n+    if (fHelp || params.size() != 1)\n+        throw runtime_error(\n+            \"dumpwallet <filename>\\n\"\n+            \"Dumps all wallet keys in a human-readable format.\");\n+\n+    EnsureWalletIsUnlocked();\n+\n+    ofstream file;\n+    file.open(params[0].get_str().c_str());\n+    if (!file.is_open())\n+        throw JSONRPCError(RPC_INVALID_PARAMETER, \"Cannot open wallet dump file\");\n+\n+    std::map<CKeyID, int64> mapKeyBirth;\n+    std::set<CKeyID> setKeyPool;\n+    pwalletMain->GetKeyBirthTimes(mapKeyBirth);\n+    pwalletMain->GetAllReserveKeys(setKeyPool);\n+\n+    // sort time/key pairs\n+    std::vector<std::pair<int64, CKeyID> > vKeyBirth;\n+    for (std::map<CKeyID, int64>::const_iterator it = mapKeyBirth.begin(); it != mapKeyBirth.end(); it++) {\n+        vKeyBirth.push_back(std::make_pair(it->second, it->first));\n+    }\n+    mapKeyBirth.clear();\n+    std::sort(vKeyBirth.begin(), vKeyBirth.end());\n+\n+    // produce output\n+    file << strprintf(\"# Wallet dump created by Bitcoin %s (%s)\\n\", CLIENT_BUILD.c_str(), CLIENT_DATE.c_str());\n+    file << strprintf(\"# * Created on %s\\n\", EncodeDumpTime(GetTime()).c_str());\n+    file << strprintf(\"# * Best block at time of backup was %i (%s),\\n\", nBestHeight, hashBestChain.ToString().c_str());\n+    file << strprintf(\"#   mined on %s\\n\", EncodeDumpTime(pindexBest->nTime).c_str());\n+    file << \"\\n\";\n+    for (std::vector<std::pair<int64, CKeyID> >::const_iterator it = vKeyBirth.begin(); it != vKeyBirth.end(); it++) {\n+        const CKeyID &keyid = it->second;\n+        std::string strTime = EncodeDumpTime(it->first);\n+        std::string strAddr = CBitcoinAddress(keyid).ToString();\n+        CKey key;\n+        if (pwalletMain->GetKey(keyid, key)) {\n+            if (pwalletMain->mapAddressBook.count(keyid)) {\n+                file << strprintf(\"%s %s label=%s # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), EncodeDumpString(pwalletMain->mapAddressBook[keyid]).c_str(), strAddr.c_str());\n+            } else if (setKeyPool.count(keyid)) {\n+                file << strprintf(\"%s %s reserve=1 # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), strAddr.c_str());\n+            } else {\n+                file << strprintf(\"%s %s change=1 # addr=%s\\n\", CBitcoinSecret(key).ToString().c_str(), strTime.c_str(), strAddr.c_str());\n+            }\n+        }\n+    }\n+    file << \"\\n\";\n+    file << \"# End of dump\\n\";\n+    file.close();\n+    return Value::null;\n+}"
      }
    ]
  }
]