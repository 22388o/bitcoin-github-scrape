[
  {
    "sha": "c87770915b88d195d264b58111c64142b1965cfa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjODc3NzA5MTViODhkMTk1ZDI2NGI1ODExMWM2NDE0MmIxOTY1Y2Zh",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T21:06:16Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:36:48Z"
      },
      "message": "wallettool: Add a salvage command",
      "tree": {
        "sha": "a150e2e78a68ff57912d7baa57d65eea6f947749",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/a150e2e78a68ff57912d7baa57d65eea6f947749"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c87770915b88d195d264b58111c64142b1965cfa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c87770915b88d195d264b58111c64142b1965cfa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "448bdff26307981b7e32ba5610dad6674c1fe46d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/448bdff26307981b7e32ba5610dad6674c1fe46d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/448bdff26307981b7e32ba5610dad6674c1fe46d"
      }
    ],
    "stats": {
      "total": 39,
      "additions": 34,
      "deletions": 5
    },
    "files": [
      {
        "sha": "b420463c00700efa82c7728e56add42bb0e9712e",
        "filename": "src/bitcoin-wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c87770915b88d195d264b58111c64142b1965cfa/src/bitcoin-wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c87770915b88d195d264b58111c64142b1965cfa/src/bitcoin-wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/bitcoin-wallet.cpp?ref=c87770915b88d195d264b58111c64142b1965cfa",
        "patch": "@@ -31,6 +31,7 @@ static void SetupWalletToolArgs()\n \n     gArgs.AddArg(\"info\", \"Get wallet info\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n     gArgs.AddArg(\"create\", \"Create new wallet file\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n+    gArgs.AddArg(\"salvage\", \"Attempt to recover private keys from a corrupt wallet\", ArgsManager::ALLOW_ANY, OptionsCategory::COMMANDS);\n }\n \n static bool WalletAppInit(int argc, char* argv[])"
      },
      {
        "sha": "89645fb5cd78afb7400e0c4d11dc993c418d8838",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 33,
        "deletions": 5,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c87770915b88d195d264b58111c64142b1965cfa/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c87770915b88d195d264b58111c64142b1965cfa/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=c87770915b88d195d264b58111c64142b1965cfa",
        "patch": "@@ -103,6 +103,29 @@ static void WalletShowInfo(CWallet* wallet_instance)\n     tfm::format(std::cout, \"Address Book: %zu\\n\", wallet_instance->m_address_book.size());\n }\n \n+static bool SalvageWallet(const fs::path& path)\n+{\n+    // Create a Database handle to allow for the db to be initialized before recovery\n+    std::unique_ptr<WalletDatabase> database = WalletDatabase::Create(path);\n+\n+    // Initialize the environment before recovery\n+    bilingual_str error_string;\n+    try {\n+        WalletBatch::VerifyEnvironment(path, error_string);\n+    } catch (const fs::filesystem_error& e) {\n+        error_string = Untranslated(strprintf(\"Error loading wallet. %s\", fsbridge::get_filesystem_error_message(e)));\n+    }\n+    if (!error_string.original.empty()) {\n+        tfm::format(std::cerr, \"Failed to open wallet for salvage :%s\\n\", error_string.original);\n+        return false;\n+    }\n+\n+    // Perform the recovery\n+    CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n+    std::string backup_filename;\n+    return WalletBatch::Recover(path, (void*)&dummy_wallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename);\n+}\n+\n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n {\n     fs::path path = fs::absolute(name, GetWalletDir());\n@@ -113,7 +136,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             WalletShowInfo(wallet_instance.get());\n             wallet_instance->Flush(true);\n         }\n-    } else if (command == \"info\") {\n+    } else if (command == \"info\" || command == \"salvage\") {\n         if (!fs::exists(path)) {\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n@@ -123,10 +146,15 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             tfm::format(std::cerr, \"%s\\nError loading %s. Is wallet being used by other process?\\n\", error.original, name);\n             return false;\n         }\n-        std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n-        if (!wallet_instance) return false;\n-        WalletShowInfo(wallet_instance.get());\n-        wallet_instance->Flush(true);\n+\n+        if (command == \"info\") {\n+            std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);\n+            if (!wallet_instance) return false;\n+            WalletShowInfo(wallet_instance.get());\n+            wallet_instance->Flush(true);\n+        } else if (command == \"salvage\") {\n+            return SalvageWallet(path);\n+        }\n     } else {\n         tfm::format(std::cerr, \"Invalid command: %s\\n\", command);\n         return false;"
      }
    ]
  },
  {
    "sha": "cdd955e580dff99f3fa440494ed2b348f7f094af",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZGQ5NTVlNTgwZGZmOTlmM2ZhNDQwNDk0ZWQyYjM0OGY3ZjA5NGFm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:23:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:37:53Z"
      },
      "message": "Add basic test for bitcoin-wallet salvage",
      "tree": {
        "sha": "5b2ab923046218c63dc1ddeb7cfa52d77fd1cd1f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/5b2ab923046218c63dc1ddeb7cfa52d77fd1cd1f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd955e580dff99f3fa440494ed2b348f7f094af",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c87770915b88d195d264b58111c64142b1965cfa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c87770915b88d195d264b58111c64142b1965cfa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c87770915b88d195d264b58111c64142b1965cfa"
      }
    ],
    "stats": {
      "total": 10,
      "additions": 9,
      "deletions": 1
    },
    "files": [
      {
        "sha": "524e1593bae5cd4457fa18317d5a1d372be1885f",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 9,
        "deletions": 1,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/cdd955e580dff99f3fa440494ed2b348f7f094af/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/cdd955e580dff99f3fa440494ed2b348f7f094af/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=cdd955e580dff99f3fa440494ed2b348f7f094af",
        "patch": "@@ -203,6 +203,14 @@ def test_getwalletinfo_on_different_wallet(self):\n         assert_equal(shasum_after, shasum_before)\n         self.log.debug('Wallet file shasum unchanged\\n')\n \n+    def test_salvage(self):\n+        # TODO: Check salvage actually salvages and doesn't break things. https://github.com/bitcoin/bitcoin/issues/7463\n+        self.log.info('Check salvage')\n+        self.start_node(0, ['-wallet=salvage'])\n+        self.stop_node(0)\n+\n+        self.assert_tool_output('', '-wallet=salvage', 'salvage')\n+\n     def run_test(self):\n         self.wallet_path = os.path.join(self.nodes[0].datadir, self.chain, 'wallets', 'wallet.dat')\n         self.test_invalid_tool_commands_and_args()\n@@ -211,7 +219,7 @@ def run_test(self):\n         self.test_tool_wallet_info_after_transaction()\n         self.test_tool_wallet_create_on_existing_wallet()\n         self.test_getwalletinfo_on_different_wallet()\n-\n+        self.test_salvage()\n \n if __name__ == '__main__':\n     ToolWalletTest().main()"
      }
    ]
  },
  {
    "sha": "d321046f4bb4887742699c586755a21f3a2edbe1",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzIxMDQ2ZjRiYjQ4ODc3NDI2OTljNTg2NzU1YTIxZjNhMmVkYmUx",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T21:10:59Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:39:40Z"
      },
      "message": "wallet: remove -salvagewallet",
      "tree": {
        "sha": "983706f8795aa6e503103d11bc73e0cf11271e8d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/983706f8795aa6e503103d11bc73e0cf11271e8d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d321046f4bb4887742699c586755a21f3a2edbe1",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "cdd955e580dff99f3fa440494ed2b348f7f094af",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/cdd955e580dff99f3fa440494ed2b348f7f094af",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/cdd955e580dff99f3fa440494ed2b348f7f094af"
      }
    ],
    "stats": {
      "total": 43,
      "additions": 5,
      "deletions": 38
    },
    "files": [
      {
        "sha": "3885eb6185437e5a8f4719cab0217642180cf4fe",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 11,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -54,7 +54,6 @@ void WalletInit::AddWalletOptions() const\n     gArgs.AddArg(\"-paytxfee=<amt>\", strprintf(\"Fee (in %s/kB) to add to transactions you send (default: %s)\",\n                                                             CURRENCY_UNIT, FormatMoney(CFeeRate{DEFAULT_PAY_TX_FEE}.GetFeePerK())), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-rescan\", \"Rescan the block chain for missing wallet transactions on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n-    gArgs.AddArg(\"-salvagewallet\", \"Attempt to recover private keys from a corrupt wallet on startup\", ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-spendzeroconfchange\", strprintf(\"Spend unconfirmed change when sending transactions (default: %u)\", DEFAULT_SPEND_ZEROCONF_CHANGE), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-txconfirmtarget=<n>\", strprintf(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\", DEFAULT_TX_CONFIRM_TARGET), ArgsManager::ALLOW_ANY, OptionsCategory::WALLET);\n     gArgs.AddArg(\"-wallet=<path>\", \"Specify wallet database path. Can be specified multiple times to load multiple wallets. Path is interpreted relative to <walletdir> if it is not absolute, and will be created if it does not exist (as a directory containing a wallet.dat file and log files). For backwards compatibility this will also accept names of existing data files in <walletdir>.)\", ArgsManager::ALLOW_ANY | ArgsManager::NETWORK_ONLY, OptionsCategory::WALLET);\n@@ -89,16 +88,6 @@ bool WalletInit::ParameterInteraction() const\n         LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n     }\n \n-    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(Untranslated(\"%s is only allowed with a single wallet file\"), \"-salvagewallet\"));\n-        }\n-        // Rewrite just private keys: rescan to find transactions\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-        }\n-    }\n-\n     bool zapwallettxes = gArgs.GetBoolArg(\"-zapwallettxes\", false);\n     // -zapwallettxes implies dropping the mempool on startup\n     if (zapwallettxes && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {"
      },
      {
        "sha": "8df3e78215cdeb74d15ee0e40d60f1f3fd40f4f3",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -37,11 +37,6 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n     chain.initMessage(_(\"Verifying wallet(s)...\").translated);\n \n-    // Parameter interaction code should have thrown an error if -salvagewallet\n-    // was enabled with more than wallet file, so the wallet_files size check\n-    // here should have no effect.\n-    bool salvage_wallet = gArgs.GetBoolArg(\"-salvagewallet\", false) && wallet_files.size() <= 1;\n-\n     // Keep track of each wallet absolute path to detect duplicates.\n     std::set<fs::path> wallet_paths;\n \n@@ -55,7 +50,7 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n \n         bilingual_str error_string;\n         std::vector<bilingual_str> warnings;\n-        bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n+        bool verify_success = CWallet::Verify(chain, location, error_string, warnings);\n         if (!warnings.empty()) chain.initWarning(Join(warnings, Untranslated(\"\\n\")));\n         if (!verify_success) {\n             chain.initError(error_string);"
      },
      {
        "sha": "e24b1f2e6924127163cd90c077c66f5bfabed857",
        "filename": "src/wallet/load.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/load.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.h?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -16,8 +16,6 @@ class Chain;\n } // namespace interfaces\n \n //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-//! This function will perform salvage on the wallet if requested, as long as only one wallet is\n-//! being loaded (WalletInit::ParameterInteraction() forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wallet_files);\n \n //! Load wallet databases."
      },
      {
        "sha": "3c968abea073cfaec594cdae08f0d309a23f44db",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 12,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -153,7 +153,7 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n-        if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+        if (!CWallet::Verify(chain, location, error, warnings)) {\n             error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n@@ -195,7 +195,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n-    if (!CWallet::Verify(chain, location, false, error, warnings)) {\n+    if (!CWallet::Verify(chain, location, error, warnings)) {\n         error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n@@ -3654,7 +3654,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3694,15 +3694,6 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n-    if (salvage_wallet) {\n-        // Recover readable keypairs:\n-        CWallet dummyWallet(&chain, WalletLocation(), WalletDatabase::CreateDummy());\n-        std::string backup_filename;\n-        if (!WalletBatch::Recover(wallet_path, (void *)&dummyWallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename)) {\n-            return false;\n-        }\n-    }\n-\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n }\n "
      },
      {
        "sha": "fc4cc9495caf5d9c825c769be290b1d946136913",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -1137,7 +1137,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);"
      },
      {
        "sha": "797c903dd34af6e8ef218e901281a1754b77d832",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -404,8 +404,6 @@ def run_test(self):\n             '-reindex',\n             '-zapwallettxes=1',\n             '-zapwallettxes=2',\n-            # disabled until issue is fixed: https://github.com/bitcoin/bitcoin/issues/7463\n-            # '-salvagewallet',\n         ]\n         chainlimit = 6\n         for m in maintenance:"
      },
      {
        "sha": "ff9ff341853928a6447d9d0e19ba2af1af447a9a",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d321046f4bb4887742699c586755a21f3a2edbe1/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=d321046f4bb4887742699c586755a21f3a2edbe1",
        "patch": "@@ -122,10 +122,6 @@ def wallet_file(name):\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=1', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n         self.nodes[0].assert_start_raises_init_error(['-zapwallettxes=2', '-wallet=w1', '-wallet=w2'], \"Error: -zapwallettxes is only allowed with a single wallet file\")\n \n-        self.log.info(\"Do not allow -salvagewallet with multiwallet\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-        self.nodes[0].assert_start_raises_init_error(['-salvagewallet=1', '-wallet=w1', '-wallet=w2'], \"Error: -salvagewallet is only allowed with a single wallet file\")\n-\n         # if wallets/ doesn't exist, datadir should be the default wallet dir\n         wallet_dir2 = data_dir('walletdir')\n         os.rename(wallet_dir(), wallet_dir2)"
      }
    ]
  },
  {
    "sha": "8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4ZWJjYmM4NWM2NTI2NjViNzhkY2ZkMmFkNTVmYTY3Y2FmZDQyYzcz",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-08T22:44:21Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:22Z"
      },
      "message": "walletdb: don't automatically salvage when corruption is detected",
      "tree": {
        "sha": "413e5c364282fdc3316554ca6046463ffa784f8e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/413e5c364282fdc3316554ca6046463ffa784f8e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d321046f4bb4887742699c586755a21f3a2edbe1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d321046f4bb4887742699c586755a21f3a2edbe1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d321046f4bb4887742699c586755a21f3a2edbe1"
      }
    ],
    "stats": {
      "total": 50,
      "additions": 11,
      "deletions": 39
    },
    "files": [
      {
        "sha": "34babd268176bca07eb8415516d87a0b863800a6",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 23,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -268,21 +268,14 @@ BerkeleyEnvironment::BerkeleyEnvironment()\n     fMockDb = true;\n }\n \n-BerkeleyEnvironment::VerifyResult BerkeleyEnvironment::Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename)\n+bool BerkeleyEnvironment::Verify(const std::string& strFile)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n     Db db(dbenv.get(), 0);\n     int result = db.verify(strFile.c_str(), nullptr, nullptr, 0);\n-    if (result == 0)\n-        return VerifyResult::VERIFY_OK;\n-    else if (recoverFunc == nullptr)\n-        return VerifyResult::RECOVER_FAIL;\n-\n-    // Try to recover:\n-    bool fRecovered = (*recoverFunc)(fs::path(strPath) / strFile, out_backup_filename);\n-    return (fRecovered ? VerifyResult::RECOVER_OK : VerifyResult::RECOVER_FAIL);\n+    return result == 0;\n }\n \n BerkeleyBatch::SafeDbt::SafeDbt()\n@@ -410,27 +403,16 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n     fs::path walletDir = env->Directory();\n \n     if (fs::exists(walletDir / walletFile))\n     {\n-        std::string backup_filename;\n-        BerkeleyEnvironment::VerifyResult r = env->Verify(walletFile, recoverFunc, backup_filename);\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_OK)\n-        {\n-            warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n-                                     \" Original %s saved as %s in %s; if\"\n-                                     \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\"),\n-                walletFile, backup_filename, walletDir));\n-        }\n-        if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n-        {\n-            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n+        if (!env->Verify(walletFile)) {\n+            errorStr = strprintf(_(\"%s corrupt. Try using the wallet tool bitcoin-wallet to salvage or restoring a backup.\"), walletFile);\n             return false;\n         }\n     }"
      },
      {
        "sha": "1151124da3e321a1408429268bc2b0a3a2223844",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 12,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -66,17 +66,7 @@ class BerkeleyEnvironment\n     bool IsDatabaseLoaded(const std::string& db_filename) const { return m_databases.find(db_filename) != m_databases.end(); }\n     fs::path Directory() const { return strPath; }\n \n-    /**\n-     * Verify that database file strFile is OK. If it is not,\n-     * call the callback to try to recover.\n-     * This must be called BEFORE strFile is opened.\n-     * Returns true if strFile is OK.\n-     */\n-    enum class VerifyResult { VERIFY_OK,\n-                        RECOVER_OK,\n-                        RECOVER_FAIL };\n-    typedef bool (*recoverFunc_type)(const fs::path& file_path, std::string& out_backup_filename);\n-    VerifyResult Verify(const std::string& strFile, recoverFunc_type recoverFunc, std::string& out_backup_filename);\n+    bool Verify(const std::string& strFile);\n     /**\n      * Salvage data from a file that Verify says is bad.\n      * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n@@ -253,7 +243,7 @@ class BerkeleyBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, bilingual_str& errorStr);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "6826782073bb35ec040d5190d831c5aef96367ba",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -3694,7 +3694,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n         return false;\n     }\n \n-    return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n+    return WalletBatch::VerifyDatabaseFile(wallet_path, error_string);\n }\n \n std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)"
      },
      {
        "sha": "c0c408e2ecbc4ae9f4f76fc5abaa8b7805d0993d",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -922,9 +922,9 @@ bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str&\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n-    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n+    return BerkeleyBatch::VerifyDatabaseFile(wallet_path, errorStr);\n }\n \n bool WalletBatch::WriteDestData(const std::string &address, const std::string &key, const std::string &value)"
      },
      {
        "sha": "26c7ae4360f97e753812b2728d1f476bd385c405",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "patch": "@@ -274,7 +274,7 @@ class WalletBatch\n     /* verifies the database environment */\n     static bool VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, bilingual_str& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      }
    ]
  },
  {
    "sha": "07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNzI1MGI4ZGNlYmUyYjk3ZWQwZmQ5MDBhZDM1Y2JhNDA5MWI4ZWNm",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:48:33Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "walletdb: remove fAggressive from Salvage\n\nThe only call to Salvage set fAggressive = true so remove that parameter\nand always use DB_AGGRESSIVE",
      "tree": {
        "sha": "29ce903b15ace19b83fd55bfd3d8d8b9d33cc75c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/29ce903b15ace19b83fd55bfd3d8d8b9d33cc75c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8ebcbc85c652665b78dcfd2ad55fa67cafd42c73"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 4,
      "deletions": 12
    },
    "files": [
      {
        "sha": "c51401c1029affb2ae00381c70468f4a01e65f33",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 11,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "patch": "@@ -343,7 +343,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     }\n \n     std::vector<BerkeleyEnvironment::KeyValPair> salvagedData;\n-    bool fSuccess = env->Salvage(newFilename, true, salvagedData);\n+    bool fSuccess = env->Salvage(newFilename, salvagedData);\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n@@ -425,25 +425,17 @@ static const char *HEADER_END = \"HEADER=END\";\n /* End of key/value data */\n static const char *DATA_END = \"DATA=END\";\n \n-bool BerkeleyEnvironment::Salvage(const std::string& strFile, bool fAggressive, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n+bool BerkeleyEnvironment::Salvage(const std::string& strFile, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n {\n     LOCK(cs_db);\n     assert(mapFileUseCount.count(strFile) == 0);\n \n-    u_int32_t flags = DB_SALVAGE;\n-    if (fAggressive)\n-        flags |= DB_AGGRESSIVE;\n-\n     std::stringstream strDump;\n \n     Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, flags);\n+    int result = db.verify(strFile.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n     if (result == DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-        if (!fAggressive) {\n-            LogPrintf(\"BerkeleyEnvironment::Salvage: Rerun with aggressive mode to ignore errors and continue.\\n\");\n-            return false;\n-        }\n     }\n     if (result != 0 && result != DB_VERIFY_BAD) {\n         LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);"
      },
      {
        "sha": "4543c8c7e0a7750fd7b255d096a9f5bc141d182c",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "patch": "@@ -75,7 +75,7 @@ class BerkeleyEnvironment\n      * for huge databases.\n      */\n     typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(const std::string& strFile, bool fAggressive, std::vector<KeyValPair>& vResult);\n+    bool Salvage(const std::string& strFile, std::vector<KeyValPair>& vResult);\n \n     bool Open(bool retry);\n     void Close();"
      }
    ]
  },
  {
    "sha": "ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjZWQ5NWQwZTQzMzg5ZmU2MmI1ZDMwZmNjN2M0MmRiY2EwZTg4MjQy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T22:54:18Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move BerkeleyEnvironment::Salvage into BerkeleyBatch::Recover",
      "tree": {
        "sha": "9fe3918c67177101656bfbaee8f0d45f86a6844e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9fe3918c67177101656bfbaee8f0d45f86a6844e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/07250b8dcebe2b97ed0fd900ad35cba4091b8ecf"
      }
    ],
    "stats": {
      "total": 132,
      "additions": 62,
      "deletions": 70
    },
    "files": [
      {
        "sha": "c115786b7f42e4e7144320c63c5362a2d87bd324",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 62,
        "deletions": 61,
        "changes": 123,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "patch": "@@ -317,6 +317,12 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n+/* End of headers, beginning of key/value data */\n+static const char *HEADER_END = \"HEADER=END\";\n+/* End of key/value data */\n+static const char *DATA_END = \"DATA=END\";\n+typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+\n bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n@@ -342,8 +348,61 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n         return false;\n     }\n \n-    std::vector<BerkeleyEnvironment::KeyValPair> salvagedData;\n-    bool fSuccess = env->Salvage(newFilename, salvagedData);\n+    /**\n+     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n+     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n+     * NOTE: reads the entire database into memory, so cannot be used\n+     * for huge databases.\n+     */\n+    std::vector<KeyValPair> salvagedData;\n+\n+    std::stringstream strDump;\n+\n+    Db db(env->dbenv.get(), 0);\n+    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n+    if (result == DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+    }\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n+        return false;\n+    }\n+\n+    // Format of bdb dump is ascii lines:\n+    // header lines...\n+    // HEADER=END\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n+    // DATA=END\n+\n+    std::string strLine;\n+    while (!strDump.eof() && strLine != HEADER_END)\n+        getline(strDump, strLine); // Skip past header\n+\n+    std::string keyHex, valueHex;\n+    while (!strDump.eof() && keyHex != DATA_END) {\n+        getline(strDump, keyHex);\n+        if (keyHex != DATA_END) {\n+            if (strDump.eof())\n+                break;\n+            getline(strDump, valueHex);\n+            if (valueHex == DATA_END) {\n+                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                break;\n+            }\n+            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+        }\n+    }\n+\n+    bool fSuccess;\n+    if (keyHex != DATA_END) {\n+        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        fSuccess = false;\n+    } else {\n+        fSuccess = (result == 0);\n+    }\n+\n     if (salvagedData.empty())\n     {\n         LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n@@ -365,7 +424,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n-    for (BerkeleyEnvironment::KeyValPair& row : salvagedData)\n+    for (KeyValPair& row : salvagedData)\n     {\n         if (recoverKVcallback)\n         {\n@@ -420,64 +479,6 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, bilingual_str&\n     return true;\n }\n \n-/* End of headers, beginning of key/value data */\n-static const char *HEADER_END = \"HEADER=END\";\n-/* End of key/value data */\n-static const char *DATA_END = \"DATA=END\";\n-\n-bool BerkeleyEnvironment::Salvage(const std::string& strFile, std::vector<BerkeleyEnvironment::KeyValPair>& vResult)\n-{\n-    LOCK(cs_db);\n-    assert(mapFileUseCount.count(strFile) == 0);\n-\n-    std::stringstream strDump;\n-\n-    Db db(dbenv.get(), 0);\n-    int result = db.verify(strFile.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n-    if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-    }\n-    if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: Database salvage failed with result %d.\\n\", result);\n-        return false;\n-    }\n-\n-    // Format of bdb dump is ascii lines:\n-    // header lines...\n-    // HEADER=END\n-    //  hexadecimal key\n-    //  hexadecimal value\n-    //  ... repeated\n-    // DATA=END\n-\n-    std::string strLine;\n-    while (!strDump.eof() && strLine != HEADER_END)\n-        getline(strDump, strLine); // Skip past header\n-\n-    std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != DATA_END) {\n-        getline(strDump, keyHex);\n-        if (keyHex != DATA_END) {\n-            if (strDump.eof())\n-                break;\n-            getline(strDump, valueHex);\n-            if (valueHex == DATA_END) {\n-                LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n-                break;\n-            }\n-            vResult.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n-        }\n-    }\n-\n-    if (keyHex != DATA_END) {\n-        LogPrintf(\"BerkeleyEnvironment::Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n-        return false;\n-    }\n-\n-    return (result == 0);\n-}\n-\n-\n void BerkeleyEnvironment::CheckpointLSN(const std::string& strFile)\n {\n     dbenv->txn_checkpoint(0, 0, 0);"
      },
      {
        "sha": "4acb414a5b5070baa5672998d203b500403e220a",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 9,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ced95d0e43389fe62b5d30fcc7c42dbca0e88242/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "patch": "@@ -67,15 +67,6 @@ class BerkeleyEnvironment\n     fs::path Directory() const { return strPath; }\n \n     bool Verify(const std::string& strFile);\n-    /**\n-     * Salvage data from a file that Verify says is bad.\n-     * fAggressive sets the DB_AGGRESSIVE flag (see berkeley DB->verify() method documentation).\n-     * Appends binary key/value pairs to vResult, returns true if successful.\n-     * NOTE: reads the entire database into memory, so cannot be used\n-     * for huge databases.\n-     */\n-    typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-    bool Salvage(const std::string& strFile, std::vector<KeyValPair>& vResult);\n \n     bool Open(bool retry);\n     void Close();"
      }
    ]
  },
  {
    "sha": "2741774214168eb287c7066d6823afe5e570381d",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyNzQxNzc0MjE0MTY4ZWIyODdjNzA2NmQ2ODIzYWZlNWU1NzAzODFk",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:15:50Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Expose a version of ReadKeyValue and use it in RecoverKeysOnlyFilter\n\nWe need this exposed for BerkeleyBatch::Recover to be moved out.",
      "tree": {
        "sha": "237e7fd9da491764d1d4ea2cc84dff370324337e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/237e7fd9da491764d1d4ea2cc84dff370324337e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2741774214168eb287c7066d6823afe5e570381d",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2741774214168eb287c7066d6823afe5e570381d",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ced95d0e43389fe62b5d30fcc7c42dbca0e88242",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ced95d0e43389fe62b5d30fcc7c42dbca0e88242"
      }
    ],
    "stats": {
      "total": 14,
      "additions": 11,
      "deletions": 3
    },
    "files": [
      {
        "sha": "c04637934ddc8df7e5d8d134b3ae90696663f5d4",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 8,
        "deletions": 3,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=2741774214168eb287c7066d6823afe5e570381d",
        "patch": "@@ -588,6 +588,13 @@ ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue,\n     return true;\n }\n \n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr)\n+{\n+    CWalletScanState dummy_wss;\n+    LOCK(pwallet->cs_wallet);\n+    return ReadKeyValue(pwallet, ssKey, ssValue, dummy_wss, strType, strErr);\n+}\n+\n bool WalletBatch::IsKeyType(const std::string& strType)\n {\n     return (strType == DBKeys::KEY ||\n@@ -896,14 +903,12 @@ bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_f\n bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n {\n     CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    CWalletScanState dummyWss;\n     std::string strType, strErr;\n     bool fReadOK;\n     {\n         // Required in LoadKeyMetadata():\n         LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue,\n-                               dummyWss, strType, strErr);\n+        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n     }\n     if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n         return false;"
      },
      {
        "sha": "155046dfba1de91e33cda4648bd32e2b861fc384",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2741774214168eb287c7066d6823afe5e570381d/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=2741774214168eb287c7066d6823afe5e570381d",
        "patch": "@@ -294,4 +294,7 @@ class WalletBatch\n //! Compacts BDB state so that wallet.dat is self-contained (if there are changes)\n void MaybeCompactWalletDB();\n \n+//! Unserialize a given Key-Value pair and load it into the wallet\n+bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      }
    ]
  },
  {
    "sha": "b426c7764d26e280e1f814cf36e050743c45cd12",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiNDI2Yzc3NjRkMjZlMjgwZTFmODE0Y2YzNmUwNTA3NDNjNDVjZDEy",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:24:26Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Make BerkeleyBatch::Recover and WalletBatch::RecoverKeysOnlyFilter standalone\n\nInstead of having these be class static functions, just make them be\nstandalone. Also removes WalletBatch::Recover which just passed through\nto BerkeleyBatch::Recover.",
      "tree": {
        "sha": "0291aa49cb78fefc8f5428e3f3fd4d662795d79c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0291aa49cb78fefc8f5428e3f3fd4d662795d79c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b426c7764d26e280e1f814cf36e050743c45cd12",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "2741774214168eb287c7066d6823afe5e570381d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2741774214168eb287c7066d6823afe5e570381d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/2741774214168eb287c7066d6823afe5e570381d"
      }
    ],
    "stats": {
      "total": 35,
      "additions": 9,
      "deletions": 26
    },
    "files": [
      {
        "sha": "cff83e3d0113db877f5b1954cc19e925b08afb17",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -323,7 +323,7 @@ static const char *HEADER_END = \"HEADER=END\";\n static const char *DATA_END = \"DATA=END\";\n typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n \n-bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n {\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);"
      },
      {
        "sha": "c8024700456a981acf2257f57742fcc4271bac4e",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -226,7 +226,6 @@ class BerkeleyBatch\n \n     void Flush();\n     void Close();\n-    static bool Recover(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n \n     /* flush the wallet passively (TRY_LOCK)\n        ideal to be called periodically */\n@@ -390,6 +389,8 @@ class BerkeleyBatch\n     bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+\n std::string BerkeleyDatabaseVersion();\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "2a3daf59b4f999a83c82f7882f7119d148d7ed08",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 17,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -885,22 +885,7 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-//\n-// Try to (very carefully!) recover wallet file if there is a problem.\n-//\n-bool WalletBatch::Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename)\n-{\n-    return BerkeleyBatch::Recover(wallet_path, callbackDataIn, recoverKVcallback, out_backup_filename);\n-}\n-\n-bool WalletBatch::Recover(const fs::path& wallet_path, std::string& out_backup_filename)\n-{\n-    // recover without a key filter callback\n-    // results in recovering all record types\n-    return WalletBatch::Recover(wallet_path, nullptr, nullptr, out_backup_filename);\n-}\n-\n-bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n {\n     CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n     std::string strType, strErr;\n@@ -910,7 +895,7 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n         LOCK(dummyWallet->cs_wallet);\n         fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n     }\n-    if (!IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n         return false;\n     }\n     if (!fReadOK)"
      },
      {
        "sha": "389b96189fb0ccd526fab69b7b65c973b2d52c7c",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 3,
        "deletions": 6,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -263,12 +263,6 @@ class WalletBatch\n     DBErrors FindWalletTx(std::vector<uint256>& vTxHash, std::list<CWalletTx>& vWtx);\n     DBErrors ZapWalletTx(std::list<CWalletTx>& vWtx);\n     DBErrors ZapSelectTx(std::vector<uint256>& vHashIn, std::vector<uint256>& vHashOut);\n-    /* Try to (very carefully!) recover wallet database (with a possible key type filter) */\n-    static bool Recover(const fs::path& wallet_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-    /* Recover convenience-function to bypass the key filter callback, called when verify fails, recovers everything */\n-    static bool Recover(const fs::path& wallet_path, std::string& out_backup_filename);\n-    /* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-    static bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n@@ -297,4 +291,7 @@ void MaybeCompactWalletDB();\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n \n+/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+\n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "2b46eef0e001ad385ed5aae66959bcdaf21b0f1e",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b426c7764d26e280e1f814cf36e050743c45cd12/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=b426c7764d26e280e1f814cf36e050743c45cd12",
        "patch": "@@ -123,7 +123,7 @@ static bool SalvageWallet(const fs::path& path)\n     // Perform the recovery\n     CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n     std::string backup_filename;\n-    return WalletBatch::Recover(path, (void*)&dummy_wallet, WalletBatch::RecoverKeysOnlyFilter, backup_filename);\n+    return RecoverDatabaseFile(path, (void*)&dummy_wallet, RecoverKeysOnlyFilter, backup_filename);\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)"
      }
    ]
  },
  {
    "sha": "9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5ZWEyZDI1OGI0NmU4YTk3NzYxMDA2MzM1ODVlZDBmZWVkZTVjMmE0",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:37:55Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move RecoverDatabaseFile and RecoverKeysOnlyFilter into salvage.{cpp/h}",
      "tree": {
        "sha": "9a43aee82423a3629108f1c5a237d221dd820292",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/9a43aee82423a3629108f1c5a237d221dd820292"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea2d258b46e8a9776100633585ed0feede5c2a4",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b426c7764d26e280e1f814cf36e050743c45cd12",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b426c7764d26e280e1f814cf36e050743c45cd12",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b426c7764d26e280e1f814cf36e050743c45cd12"
      }
    ],
    "stats": {
      "total": 335,
      "additions": 180,
      "deletions": 155
    },
    "files": [
      {
        "sha": "0f562433ded65e0a50c740ce1322bf5e92b5f9ee",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -243,6 +243,7 @@ BITCOIN_CORE_H = \\\n   wallet/ismine.h \\\n   wallet/load.h \\\n   wallet/rpcwallet.h \\\n+  wallet/salvage.h \\\n   wallet/scriptpubkeyman.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -351,6 +352,7 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/load.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n+  wallet/salvage.cpp \\\n   wallet/scriptpubkeyman.cpp \\\n   wallet/wallet.cpp \\\n   wallet/walletdb.cpp \\"
      },
      {
        "sha": "4ed28b06230d2b7b04c96d8e114b308a9f16332e",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 128,
        "changes": 128,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -317,134 +317,6 @@ BerkeleyBatch::SafeDbt::operator Dbt*()\n     return &m_dbt;\n }\n \n-/* End of headers, beginning of key/value data */\n-static const char *HEADER_END = \"HEADER=END\";\n-/* End of key/value data */\n-static const char *DATA_END = \"DATA=END\";\n-typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n-\n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n-{\n-    std::string filename;\n-    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n-\n-    // Recovery procedure:\n-    // move wallet file to walletfilename.timestamp.bak\n-    // Call Salvage with fAggressive=true to\n-    // get as much data as possible.\n-    // Rewrite salvaged data to fresh wallet file\n-    // Set -rescan so any missing transactions will be\n-    // found.\n-    int64_t now = GetTime();\n-    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n-\n-    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n-                                       newFilename.c_str(), DB_AUTO_COMMIT);\n-    if (result == 0)\n-        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n-    else\n-    {\n-        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n-        return false;\n-    }\n-\n-    /**\n-     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n-     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n-     * NOTE: reads the entire database into memory, so cannot be used\n-     * for huge databases.\n-     */\n-    std::vector<KeyValPair> salvagedData;\n-\n-    std::stringstream strDump;\n-\n-    Db db(env->dbenv.get(), 0);\n-    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n-    if (result == DB_VERIFY_BAD) {\n-        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n-    }\n-    if (result != 0 && result != DB_VERIFY_BAD) {\n-        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n-        return false;\n-    }\n-\n-    // Format of bdb dump is ascii lines:\n-    // header lines...\n-    // HEADER=END\n-    //  hexadecimal key\n-    //  hexadecimal value\n-    //  ... repeated\n-    // DATA=END\n-\n-    std::string strLine;\n-    while (!strDump.eof() && strLine != HEADER_END)\n-        getline(strDump, strLine); // Skip past header\n-\n-    std::string keyHex, valueHex;\n-    while (!strDump.eof() && keyHex != DATA_END) {\n-        getline(strDump, keyHex);\n-        if (keyHex != DATA_END) {\n-            if (strDump.eof())\n-                break;\n-            getline(strDump, valueHex);\n-            if (valueHex == DATA_END) {\n-                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n-                break;\n-            }\n-            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n-        }\n-    }\n-\n-    bool fSuccess;\n-    if (keyHex != DATA_END) {\n-        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n-        fSuccess = false;\n-    } else {\n-        fSuccess = (result == 0);\n-    }\n-\n-    if (salvagedData.empty())\n-    {\n-        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n-        return false;\n-    }\n-    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n-\n-    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n-    int ret = pdbCopy->open(nullptr,               // Txn pointer\n-                            filename.c_str(),   // Filename\n-                            \"main\",             // Logical db name\n-                            DB_BTREE,           // Database type\n-                            DB_CREATE,          // Flags\n-                            0);\n-    if (ret > 0) {\n-        LogPrintf(\"Cannot create database file %s\\n\", filename);\n-        pdbCopy->close(0);\n-        return false;\n-    }\n-\n-    DbTxn* ptxn = env->TxnBegin();\n-    for (KeyValPair& row : salvagedData)\n-    {\n-        if (recoverKVcallback)\n-        {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n-                continue;\n-        }\n-        Dbt datKey(&row.first[0], row.first.size());\n-        Dbt datValue(&row.second[0], row.second.size());\n-        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n-        if (ret2 > 0)\n-            fSuccess = false;\n-    }\n-    ptxn->commit(0);\n-    pdbCopy->close(0);\n-\n-    return fSuccess;\n-}\n-\n bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;"
      },
      {
        "sha": "54ce144ffc4b062143a6ae9383f953b433713edb",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 0,
        "deletions": 2,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -389,8 +389,6 @@ class BerkeleyBatch\n     bool static Rewrite(BerkeleyDatabase& database, const char* pszSkip = nullptr);\n };\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-\n std::string BerkeleyDatabaseVersion();\n \n #endif // BITCOIN_WALLET_DB_H"
      },
      {
        "sha": "99d62384903a2359f2eb0dcd20967c4eaab57df6",
        "filename": "src/wallet/salvage.cpp",
        "status": "added",
        "additions": 160,
        "deletions": 0,
        "changes": 160,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -0,0 +1,160 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include <fs.h>\n+#include <streams.h>\n+#include <wallet/salvage.h>\n+#include <wallet/wallet.h>\n+#include <wallet/walletdb.h>\n+\n+/* End of headers, beginning of key/value data */\n+static const char *HEADER_END = \"HEADER=END\";\n+/* End of key/value data */\n+static const char *DATA_END = \"DATA=END\";\n+typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n+\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+{\n+    std::string filename;\n+    std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n+\n+    // Recovery procedure:\n+    // move wallet file to walletfilename.timestamp.bak\n+    // Call Salvage with fAggressive=true to\n+    // get as much data as possible.\n+    // Rewrite salvaged data to fresh wallet file\n+    // Set -rescan so any missing transactions will be\n+    // found.\n+    int64_t now = GetTime();\n+    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n+\n+    int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n+                                       newFilename.c_str(), DB_AUTO_COMMIT);\n+    if (result == 0)\n+        LogPrintf(\"Renamed %s to %s\\n\", filename, newFilename);\n+    else\n+    {\n+        LogPrintf(\"Failed to rename %s to %s\\n\", filename, newFilename);\n+        return false;\n+    }\n+\n+    /**\n+     * Salvage data from a file. The DB_AGGRESSIVE flag is being used (see berkeley DB->verify() method documentation).\n+     * key/value pairs are appended to salvagedData which are then written out to a new wallet file.\n+     * NOTE: reads the entire database into memory, so cannot be used\n+     * for huge databases.\n+     */\n+    std::vector<KeyValPair> salvagedData;\n+\n+    std::stringstream strDump;\n+\n+    Db db(env->dbenv.get(), 0);\n+    result = db.verify(newFilename.c_str(), nullptr, &strDump, DB_SALVAGE | DB_AGGRESSIVE);\n+    if (result == DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage found errors, all data may not be recoverable.\\n\");\n+    }\n+    if (result != 0 && result != DB_VERIFY_BAD) {\n+        LogPrintf(\"Salvage: Database salvage failed with result %d.\\n\", result);\n+        return false;\n+    }\n+\n+    // Format of bdb dump is ascii lines:\n+    // header lines...\n+    // HEADER=END\n+    //  hexadecimal key\n+    //  hexadecimal value\n+    //  ... repeated\n+    // DATA=END\n+\n+    std::string strLine;\n+    while (!strDump.eof() && strLine != HEADER_END)\n+        getline(strDump, strLine); // Skip past header\n+\n+    std::string keyHex, valueHex;\n+    while (!strDump.eof() && keyHex != DATA_END) {\n+        getline(strDump, keyHex);\n+        if (keyHex != DATA_END) {\n+            if (strDump.eof())\n+                break;\n+            getline(strDump, valueHex);\n+            if (valueHex == DATA_END) {\n+                LogPrintf(\"Salvage: WARNING: Number of keys in data does not match number of values.\\n\");\n+                break;\n+            }\n+            salvagedData.push_back(make_pair(ParseHex(keyHex), ParseHex(valueHex)));\n+        }\n+    }\n+\n+    bool fSuccess;\n+    if (keyHex != DATA_END) {\n+        LogPrintf(\"Salvage: WARNING: Unexpected end of file while reading salvage output.\\n\");\n+        fSuccess = false;\n+    } else {\n+        fSuccess = (result == 0);\n+    }\n+\n+    if (salvagedData.empty())\n+    {\n+        LogPrintf(\"Salvage(aggressive) found no records in %s.\\n\", newFilename);\n+        return false;\n+    }\n+    LogPrintf(\"Salvage(aggressive) found %u records\\n\", salvagedData.size());\n+\n+    std::unique_ptr<Db> pdbCopy = MakeUnique<Db>(env->dbenv.get(), 0);\n+    int ret = pdbCopy->open(nullptr,               // Txn pointer\n+                            filename.c_str(),   // Filename\n+                            \"main\",             // Logical db name\n+                            DB_BTREE,           // Database type\n+                            DB_CREATE,          // Flags\n+                            0);\n+    if (ret > 0) {\n+        LogPrintf(\"Cannot create database file %s\\n\", filename);\n+        pdbCopy->close(0);\n+        return false;\n+    }\n+\n+    DbTxn* ptxn = env->TxnBegin();\n+    for (KeyValPair& row : salvagedData)\n+    {\n+        if (recoverKVcallback)\n+        {\n+            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n+                continue;\n+        }\n+        Dbt datKey(&row.first[0], row.first.size());\n+        Dbt datValue(&row.second[0], row.second.size());\n+        int ret2 = pdbCopy->put(ptxn, &datKey, &datValue, DB_NOOVERWRITE);\n+        if (ret2 > 0)\n+            fSuccess = false;\n+    }\n+    ptxn->commit(0);\n+    pdbCopy->close(0);\n+\n+    return fSuccess;\n+}\n+\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n+{\n+    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n+    std::string strType, strErr;\n+    bool fReadOK;\n+    {\n+        // Required in LoadKeyMetadata():\n+        LOCK(dummyWallet->cs_wallet);\n+        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n+    }\n+    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+        return false;\n+    }\n+    if (!fReadOK)\n+    {\n+        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n+        return false;\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "e501c54456e0c6294f94e8830492c52b34979468",
        "filename": "src/wallet/salvage.h",
        "status": "added",
        "additions": 17,
        "deletions": 0,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -0,0 +1,17 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2020 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_SALVAGE_H\n+#define BITCOIN_WALLET_SALVAGE_H\n+\n+#include <fs.h>\n+#include <streams.h>\n+\n+bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n+\n+/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n+bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+\n+#endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "32fc00266011ff84aedf46d877b9616e01ddd90f",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -885,28 +885,6 @@ void MaybeCompactWalletDB()\n     fOneThread = false;\n }\n \n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n-{\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    std::string strType, strErr;\n-    bool fReadOK;\n-    {\n-        // Required in LoadKeyMetadata():\n-        LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n-    }\n-    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n-        return false;\n-    }\n-    if (!fReadOK)\n-    {\n-        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n-        return false;\n-    }\n-\n-    return true;\n-}\n-\n bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);"
      },
      {
        "sha": "bcd1f9303d79314c4a78d84d3212800df4209f0b",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -291,7 +291,4 @@ void MaybeCompactWalletDB();\n //! Unserialize a given Key-Value pair and load it into the wallet\n bool ReadKeyValue(CWallet* pwallet, CDataStream& ssKey, CDataStream& ssValue, std::string& strType, std::string& strErr);\n \n-/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n-\n #endif // BITCOIN_WALLET_WALLETDB_H"
      },
      {
        "sha": "ab5cf0061c6943c26292ff98073c8200e637e617",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/9ea2d258b46e8a9776100633585ed0feede5c2a4/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "patch": "@@ -5,6 +5,7 @@\n #include <fs.h>\n #include <util/system.h>\n #include <util/translation.h>\n+#include <wallet/salvage.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n "
      }
    ]
  },
  {
    "sha": "ea337f2d0318a860f695698cfb3aa91c03ded858",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplYTMzN2YyZDAzMThhODYwZjY5NTY5OGNmYjNhYTkxYzAzZGVkODU4",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-15T23:45:19Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Move RecoverKeysOnlyFilter into RecoverDataBaseFile",
      "tree": {
        "sha": "3aef1e31c2018054257081bc2e09a729b68bf301",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/3aef1e31c2018054257081bc2e09a729b68bf301"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/ea337f2d0318a860f695698cfb3aa91c03ded858",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/9ea2d258b46e8a9776100633585ed0feede5c2a4",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/9ea2d258b46e8a9776100633585ed0feede5c2a4"
      }
    ],
    "stats": {
      "total": 57,
      "additions": 21,
      "deletions": 36
    },
    "files": [
      {
        "sha": "70067ebef0462d8afd184481be1e41499de01efc",
        "filename": "src/wallet/salvage.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 29,
        "changes": 48,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.cpp?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -15,7 +15,7 @@ static const char *HEADER_END = \"HEADER=END\";\n static const char *DATA_END = \"DATA=END\";\n typedef std::pair<std::vector<unsigned char>, std::vector<unsigned char> > KeyValPair;\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& newFilename)\n+bool RecoverDatabaseFile(const fs::path& file_path)\n {\n     std::string filename;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, filename);\n@@ -28,7 +28,7 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n     // Set -rescan so any missing transactions will be\n     // found.\n     int64_t now = GetTime();\n-    newFilename = strprintf(\"%s.%d.bak\", filename, now);\n+    std::string newFilename = strprintf(\"%s.%d.bak\", filename, now);\n \n     int result = env->dbenv->dbrename(nullptr, filename.c_str(), nullptr,\n                                        newFilename.c_str(), DB_AUTO_COMMIT);\n@@ -116,14 +116,26 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n     }\n \n     DbTxn* ptxn = env->TxnBegin();\n+    CWallet dummyWallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n     for (KeyValPair& row : salvagedData)\n     {\n-        if (recoverKVcallback)\n+        /* Filter for only private key type KV pairs to be added to the salvaged wallet */\n+        CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n+        CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n+        std::string strType, strErr;\n+        bool fReadOK;\n         {\n-            CDataStream ssKey(row.first, SER_DISK, CLIENT_VERSION);\n-            CDataStream ssValue(row.second, SER_DISK, CLIENT_VERSION);\n-            if (!(*recoverKVcallback)(callbackDataIn, ssKey, ssValue))\n-                continue;\n+            // Required in LoadKeyMetadata():\n+            LOCK(dummyWallet.cs_wallet);\n+            fReadOK = ReadKeyValue(&dummyWallet, ssKey, ssValue, strType, strErr);\n+        }\n+        if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n+            continue;\n+        }\n+        if (!fReadOK)\n+        {\n+            LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n+            continue;\n         }\n         Dbt datKey(&row.first[0], row.first.size());\n         Dbt datValue(&row.second[0], row.second.size());\n@@ -136,25 +148,3 @@ bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (\n \n     return fSuccess;\n }\n-\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue)\n-{\n-    CWallet *dummyWallet = reinterpret_cast<CWallet*>(callbackData);\n-    std::string strType, strErr;\n-    bool fReadOK;\n-    {\n-        // Required in LoadKeyMetadata():\n-        LOCK(dummyWallet->cs_wallet);\n-        fReadOK = ReadKeyValue(dummyWallet, ssKey, ssValue, strType, strErr);\n-    }\n-    if (!WalletBatch::IsKeyType(strType) && strType != DBKeys::HDCHAIN) {\n-        return false;\n-    }\n-    if (!fReadOK)\n-    {\n-        LogPrintf(\"WARNING: WalletBatch::Recover skipping %s: %s\\n\", strType, strErr);\n-        return false;\n-    }\n-\n-    return true;\n-}"
      },
      {
        "sha": "e361930f5ed90186a509de3e6c21a01731682095",
        "filename": "src/wallet/salvage.h",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/salvage.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/salvage.h?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -9,9 +9,6 @@\n #include <fs.h>\n #include <streams.h>\n \n-bool RecoverDatabaseFile(const fs::path& file_path, void *callbackDataIn, bool (*recoverKVcallback)(void* callbackData, CDataStream ssKey, CDataStream ssValue), std::string& out_backup_filename);\n-\n-/* Recover filter (used as callback), will only let keys (cryptographical keys) as KV/key-type pass through */\n-bool RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, CDataStream ssValue);\n+bool RecoverDatabaseFile(const fs::path& file_path);\n \n #endif // BITCOIN_WALLET_SALVAGE_H"
      },
      {
        "sha": "be07c285030243ad4b7538b6336c018487ebab22",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/ea337f2d0318a860f695698cfb3aa91c03ded858/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=ea337f2d0318a860f695698cfb3aa91c03ded858",
        "patch": "@@ -122,9 +122,7 @@ static bool SalvageWallet(const fs::path& path)\n     }\n \n     // Perform the recovery\n-    CWallet dummy_wallet(nullptr, WalletLocation(), WalletDatabase::CreateDummy());\n-    std::string backup_filename;\n-    return RecoverDatabaseFile(path, (void*)&dummy_wallet, RecoverKeysOnlyFilter, backup_filename);\n+    return RecoverDatabaseFile(path);\n }\n \n bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)"
      }
    ]
  },
  {
    "sha": "84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NGFlMDU3OGI2YzY4ZGRhMTQ1Y2E2NWZlZjUxMGNlMGZkYWMwZDdi",
    "commit": {
      "author": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-21T18:33:54Z"
      },
      "committer": {
        "name": "Andrew Chow",
        "email": "achow101-github@achow101.com",
        "date": "2020-05-25T16:59:29Z"
      },
      "message": "Add release notes about salvage changes",
      "tree": {
        "sha": "39806b180094ad967cf64e0285d787681323af2f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/39806b180094ad967cf64e0285d787681323af2f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/comments",
    "author": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "achow101",
      "id": 3782274,
      "node_id": "MDQ6VXNlcjM3ODIyNzQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/3782274?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/achow101",
      "html_url": "https://github.com/achow101",
      "followers_url": "https://api.github.com/users/achow101/followers",
      "following_url": "https://api.github.com/users/achow101/following{/other_user}",
      "gists_url": "https://api.github.com/users/achow101/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/achow101/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/achow101/subscriptions",
      "organizations_url": "https://api.github.com/users/achow101/orgs",
      "repos_url": "https://api.github.com/users/achow101/repos",
      "events_url": "https://api.github.com/users/achow101/events{/privacy}",
      "received_events_url": "https://api.github.com/users/achow101/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "ea337f2d0318a860f695698cfb3aa91c03ded858",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/ea337f2d0318a860f695698cfb3aa91c03ded858",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/ea337f2d0318a860f695698cfb3aa91c03ded858"
      }
    ],
    "stats": {
      "total": 3,
      "additions": 3,
      "deletions": 0
    },
    "files": [
      {
        "sha": "f57a62eeb7d48370697992edec0d2cc0e72916d8",
        "filename": "doc/release-notes-18918.md",
        "status": "added",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/doc/release-notes-18918.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/84ae0578b6c68dda145ca65fef510ce0fdac0d7b/doc/release-notes-18918.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/release-notes-18918.md?ref=84ae0578b6c68dda145ca65fef510ce0fdac0d7b",
        "patch": "@@ -0,0 +1,3 @@\n+# Wallet\n+\n+The `-salvagewallet` startup option has been removed. A new `salvage` command has been added to the `bitcoin-wallet` tool which performs the salvage operations that `-salvagewallet` did."
      }
    ]
  }
]