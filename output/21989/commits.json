[
  {
    "sha": "525448df9dc2ab6b7e960ff138956ae3e2efdf60",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjU0NDhkZjlkYzJhYjZiN2U5NjBmZjEzODk1NmFlM2UyZWZkZjYw",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-17T14:38:02Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-21T12:33:40Z"
      },
      "message": "Move COINBASE_MATURITY from `feature_nulldummy` test to `blocktools`.",
      "tree": {
        "sha": "562d16a81bfdb229a10d8daf0dd5527ade965a1d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/562d16a81bfdb229a10d8daf0dd5527ade965a1d"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/525448df9dc2ab6b7e960ff138956ae3e2efdf60",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525448df9dc2ab6b7e960ff138956ae3e2efdf60",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/525448df9dc2ab6b7e960ff138956ae3e2efdf60",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525448df9dc2ab6b7e960ff138956ae3e2efdf60/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1ed859e90e18384376e3a1ff0cb76f3e9ab11c2d"
      }
    ],
    "stats": {
      "total": 12,
      "additions": 10,
      "deletions": 2
    },
    "files": [
      {
        "sha": "02e387c7eedc6e906b2ce0840db8c034464cb53a",
        "filename": "test/functional/feature_nulldummy.py",
        "status": "modified",
        "additions": 7,
        "deletions": 2,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525448df9dc2ab6b7e960ff138956ae3e2efdf60/test/functional/feature_nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525448df9dc2ab6b7e960ff138956ae3e2efdf60/test/functional/feature_nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_nulldummy.py?ref=525448df9dc2ab6b7e960ff138956ae3e2efdf60",
        "patch": "@@ -14,13 +14,18 @@\n \"\"\"\n import time\n \n-from test_framework.blocktools import NORMAL_GBT_REQUEST_PARAMS, create_block, create_transaction, add_witness_commitment\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+    add_witness_commitment,\n+    create_block,\n+    create_transaction,\n+)\n from test_framework.messages import CTransaction\n from test_framework.script import CScript\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n-COINBASE_MATURITY = 100\n NULLDUMMY_ERROR = \"non-mandatory-script-verify-flag (Dummy CHECKMULTISIG argument must be zero)\"\n \n def trueDummy(tx):"
      },
      {
        "sha": "e91b44e7762b1385bba0ca2ffbf40cbceddd0329",
        "filename": "test/functional/test_framework/blocktools.py",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/525448df9dc2ab6b7e960ff138956ae3e2efdf60/test/functional/test_framework/blocktools.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/525448df9dc2ab6b7e960ff138956ae3e2efdf60/test/functional/test_framework/blocktools.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/blocktools.py?ref=525448df9dc2ab6b7e960ff138956ae3e2efdf60",
        "patch": "@@ -52,6 +52,9 @@\n # Genesis block time (regtest)\n TIME_GENESIS_BLOCK = 1296688602\n \n+# Coinbase transaction outputs can only be spent after this number of new blocks (network rule)\n+COINBASE_MATURITY = 100\n+\n # From BIP141\n WITNESS_COMMITMENT_HEADER = b\"\\xaa\\x21\\xa9\\xed\"\n "
      }
    ]
  },
  {
    "sha": "bfa9309ad606102f24c9bd3c33dfe78949f09418",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiZmE5MzA5YWQ2MDYxMDJmMjRjOWJkM2MzM2RmZTc4OTQ5ZjA5NDE4",
    "commit": {
      "author": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-17T14:38:19Z"
      },
      "committer": {
        "name": "Kiminuo",
        "email": "kiminuo@protonmail.com",
        "date": "2021-05-31T05:32:28Z"
      },
      "message": "Use COINBASE_MATURITY constant in functional tests.",
      "tree": {
        "sha": "6c21faf3163fe922a6e7724f7837414fcadefc3e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6c21faf3163fe922a6e7724f7837414fcadefc3e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/bfa9309ad606102f24c9bd3c33dfe78949f09418",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9309ad606102f24c9bd3c33dfe78949f09418",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/bfa9309ad606102f24c9bd3c33dfe78949f09418",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/bfa9309ad606102f24c9bd3c33dfe78949f09418/comments",
    "author": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "kiminuo",
      "id": 58662979,
      "node_id": "MDQ6VXNlcjU4NjYyOTc5",
      "avatar_url": "https://avatars.githubusercontent.com/u/58662979?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kiminuo",
      "html_url": "https://github.com/kiminuo",
      "followers_url": "https://api.github.com/users/kiminuo/followers",
      "following_url": "https://api.github.com/users/kiminuo/following{/other_user}",
      "gists_url": "https://api.github.com/users/kiminuo/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kiminuo/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kiminuo/subscriptions",
      "organizations_url": "https://api.github.com/users/kiminuo/orgs",
      "repos_url": "https://api.github.com/users/kiminuo/repos",
      "events_url": "https://api.github.com/users/kiminuo/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kiminuo/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "525448df9dc2ab6b7e960ff138956ae3e2efdf60",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/525448df9dc2ab6b7e960ff138956ae3e2efdf60",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/525448df9dc2ab6b7e960ff138956ae3e2efdf60"
      }
    ],
    "stats": {
      "total": 191,
      "additions": 125,
      "deletions": 66
    },
    "files": [
      {
        "sha": "a4480307a7066bae6d842d9ef42709fe0cc674ad",
        "filename": "test/functional/feature_assumevalid.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_assumevalid.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_assumevalid.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_assumevalid.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -31,6 +31,7 @@\n \"\"\"\n \n from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n     create_block,\n     create_coinbase,\n )\n@@ -161,8 +162,8 @@ def run_test(self):\n \n         # Send blocks to node0. Block 102 will be rejected.\n         self.send_blocks_until_disconnected(p2p0)\n-        self.wait_until(lambda: self.nodes[0].getblockcount() >= 101)\n-        assert_equal(self.nodes[0].getblockcount(), 101)\n+        self.wait_until(lambda: self.nodes[0].getblockcount() >= COINBASE_MATURITY + 1)\n+        assert_equal(self.nodes[0].getblockcount(), COINBASE_MATURITY + 1)\n \n         # Send all blocks to node1. All blocks will be accepted.\n         for i in range(2202):\n@@ -173,8 +174,8 @@ def run_test(self):\n \n         # Send blocks to node2. Block 102 will be rejected.\n         self.send_blocks_until_disconnected(p2p2)\n-        self.wait_until(lambda: self.nodes[2].getblockcount() >= 101)\n-        assert_equal(self.nodes[2].getblockcount(), 101)\n+        self.wait_until(lambda: self.nodes[2].getblockcount() >= COINBASE_MATURITY + 1)\n+        assert_equal(self.nodes[2].getblockcount(), COINBASE_MATURITY + 1)\n \n \n if __name__ == '__main__':"
      },
      {
        "sha": "c712f7141c4bfb1bad355ffce2351d5619ab784b",
        "filename": "test/functional/feature_backwards_compatibility.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_backwards_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_backwards_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_backwards_compatibility.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -22,6 +22,7 @@\n import os\n import shutil\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.descriptors import descsum_create\n \n@@ -64,13 +65,13 @@ def setup_nodes(self):\n         self.import_deterministic_coinbase_privkeys()\n \n     def run_test(self):\n-        self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n+        self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n \n         self.sync_blocks()\n \n         # Sanity check the test framework:\n         res = self.nodes[self.num_nodes - 1].getblockchaininfo()\n-        assert_equal(res['blocks'], 101)\n+        assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n \n         node_master = self.nodes[self.num_nodes - 5]\n         node_v19 = self.nodes[self.num_nodes - 4]"
      },
      {
        "sha": "cf270b25eefcbb85e775afd0f9c3adccbdb43409",
        "filename": "test/functional/feature_coinstatsindex.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_coinstatsindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_coinstatsindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_coinstatsindex.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -12,6 +12,7 @@\n from decimal import Decimal\n \n from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n     create_block,\n     create_coinbase,\n )\n@@ -68,7 +69,7 @@ def _test_coin_stats_index(self):\n         index_hash_options = ['none', 'muhash']\n \n         # Generate a normal transaction and mine it\n-        node.generate(101)\n+        node.generate(COINBASE_MATURITY + 1)\n         address = self.nodes[0].get_deterministic_priv_key().address\n         node.sendtoaddress(address=address, amount=10, subtractfeefromamount=True)\n         node.generate(1)"
      },
      {
        "sha": "14f64d63a210bacb57161f6dd1ead77d6aa83663",
        "filename": "test/functional/feature_loadblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_loadblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_loadblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_loadblock.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -16,6 +16,7 @@\n import tempfile\n import urllib\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n \n@@ -28,7 +29,7 @@ def set_test_params(self):\n \n     def run_test(self):\n         self.nodes[1].setnetworkactive(state=False)\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generate(COINBASE_MATURITY)\n \n         # Parsing the url of our node to get settings for config file\n         data_dir = self.nodes[0].datadir"
      },
      {
        "sha": "344db5f65216224351f3ea8eb619f60836521d75",
        "filename": "test/functional/feature_rbf.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_rbf.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_rbf.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_rbf.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,7 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import COIN, COutPoint, CTransaction, CTxIn, CTxOut\n from test_framework.script import CScript, OP_DROP\n from test_framework.test_framework import BitcoinTestFramework\n@@ -27,7 +28,7 @@ def make_utxo(node, amount, confirmed=True, scriptPubKey=DUMMY_P2WPKH_SCRIPT):\n     \"\"\"\n     fee = 1*COIN\n     while node.getbalance() < satoshi_round((amount + fee)/COIN):\n-        node.generate(100)\n+        node.generate(COINBASE_MATURITY)\n \n     new_addr = node.getnewaddress()\n     txid = node.sendtoaddress(new_addr, satoshi_round((amount+fee)/COIN))"
      },
      {
        "sha": "fc04853199ca03ae6ee824e51c550aa8cf4dc50e",
        "filename": "test/functional/feature_taproot.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_taproot.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/feature_taproot.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/feature_taproot.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -5,6 +5,7 @@\n # Test Taproot softfork (BIPs 340-342)\n \n from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n     create_coinbase,\n     create_block,\n     add_witness_commitment,\n@@ -1440,7 +1441,7 @@ def test_spenders(self, node, spenders, input_counts):\n     def run_test(self):\n         # Post-taproot activation tests go first (pre-taproot tests' blocks are invalid post-taproot).\n         self.log.info(\"Post-activation tests...\")\n-        self.nodes[1].generate(101)\n+        self.nodes[1].generate(COINBASE_MATURITY + 1)\n         self.test_spenders(self.nodes[1], spenders_taproot_active(), input_counts=[1, 2, 2, 2, 2, 3])\n \n         # Re-connect nodes in case they have been disconnected"
      },
      {
        "sha": "30cd499b3f4f32d8540fce31dc68aa685e628274",
        "filename": "test/functional/interface_bitcoin_cli.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/interface_bitcoin_cli.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/interface_bitcoin_cli.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/interface_bitcoin_cli.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -5,6 +5,8 @@\n \"\"\"Test bitcoin-cli\"\"\"\n \n from decimal import Decimal\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -16,7 +18,7 @@\n # The block reward of coinbaseoutput.nValue (50) BTC/block matures after\n # COINBASE_MATURITY (100) blocks. Therefore, after mining 101 blocks we expect\n # node 0 to have a balance of (BLOCKS - COINBASE_MATURITY) * 50 BTC/block.\n-BLOCKS = 101\n+BLOCKS = COINBASE_MATURITY + 1\n BALANCE = (BLOCKS - 100) * 50\n \n JSON_PARSING_ERROR = 'error: Error parsing JSON: foo'"
      },
      {
        "sha": "6de6778909f153941775c90c1395218267735374",
        "filename": "test/functional/mempool_compatibility.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_compatibility.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_compatibility.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_compatibility.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -15,6 +15,7 @@\n \n import os\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.wallet import MiniWallet\n \n@@ -41,7 +42,7 @@ def run_test(self):\n         old_node, new_node = self.nodes\n         new_wallet = MiniWallet(new_node)\n         new_wallet.generate(1)\n-        new_node.generate(100)\n+        new_node.generate(COINBASE_MATURITY)\n         # Sync the nodes to ensure old_node has the block that contains the coinbase that new_wallet will spend.\n         # Otherwise, because coinbases are only valid in a block and not as loose txns, if the nodes aren't synced\n         # unbroadcasted_tx won't pass old_node's `MemPoolAccept::PreChecks`."
      },
      {
        "sha": "7d1bfef3337713f792ebf75c5c7be7fcae9a0f30",
        "filename": "test/functional/mempool_expiry.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_expiry.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_expiry.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_expiry.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -12,6 +12,7 @@\n \n from datetime import timedelta\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -36,7 +37,7 @@ def test_transaction_expiry(self, timeout):\n \n         # Add enough mature utxos to the wallet so that all txs spend confirmed coins.\n         self.wallet.generate(4)\n-        node.generate(100)\n+        node.generate(COINBASE_MATURITY)\n \n         # Send a parent transaction that will expire.\n         parent_txid = self.wallet.send_self_transfer(from_node=node)['txid']"
      },
      {
        "sha": "1e9895e621f80ed079d9837600430bd28d3d2baa",
        "filename": "test/functional/mempool_package_onemore.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_package_onemore.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_package_onemore.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_package_onemore.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -9,6 +9,7 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error, satoshi_round\n \n@@ -42,7 +43,7 @@ def chain_transaction(self, node, parent_txids, vouts, value, fee, num_outputs):\n \n     def run_test(self):\n         # Mine some blocks and have them mature.\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']\n         vout = utxo[0]['vout']"
      },
      {
        "sha": "606717d89099f2d5907a38c06dabcc2f73e51fc6",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,7 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import COIN\n from test_framework.p2p import P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n@@ -59,7 +60,7 @@ def chain_transaction(self, node, parent_txid, vout, value, fee, num_outputs):\n     def run_test(self):\n         # Mine some blocks and have them mature.\n         peer_inv_store = self.nodes[0].add_p2p_connection(P2PTxInvStore()) # keep track of invs\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         utxo = self.nodes[0].listunspent(10)\n         txid = utxo[0]['txid']\n         vout = utxo[0]['vout']"
      },
      {
        "sha": "a815146eae4b61e02bd17bdb24016aca11e920cb",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 5,
        "deletions": 2,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -8,7 +8,10 @@\n that spend (directly or indirectly) coinbase transactions.\n \"\"\"\n \n-from test_framework.blocktools import create_raw_transaction\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_raw_transaction,\n+)\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n@@ -44,7 +47,7 @@ def run_test(self):\n         # 3. Indirect (coinbase and child both in chain) : spend_103 and spend_103_1\n         # Use invalidatblock to make all of the above coinbase spends invalid (immature coinbase),\n         # and make sure the mempool code behaves correctly.\n-        b = [self.nodes[0].getblockhash(n) for n in range(101, 105)]\n+        b = [self.nodes[0].getblockhash(n) for n in range(COINBASE_MATURITY + 1, COINBASE_MATURITY + 5)]\n         coinbase_txids = [self.nodes[0].getblock(h)['tx'][0] for h in b]\n         spend_101_raw = create_raw_transaction(self.nodes[0], coinbase_txids[1], node1_address, amount=49.99)\n         spend_102_raw = create_raw_transaction(self.nodes[0], coinbase_txids[2], node0_address, amount=49.99)"
      },
      {
        "sha": "1b5ca7e15adbd0365a6d94b01965c1f9b88b2783",
        "filename": "test/functional/mempool_resurrect.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_resurrect.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mempool_resurrect.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test resurrection of mined transactions when the blockchain is re-organized.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal\n from test_framework.wallet import MiniWallet\n@@ -20,7 +21,7 @@ def run_test(self):\n \n         # Add enough mature utxos to the wallet so that all txs spend confirmed coins\n         wallet.generate(3)\n-        node.generate(100)\n+        node.generate(COINBASE_MATURITY)\n \n         # Spend block 1/2/3's coinbase transactions\n         # Mine a block"
      },
      {
        "sha": "715b68e04cc35a4472ddf74de178b13b431ed386",
        "filename": "test/functional/mining_getblocktemplate_longpoll.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mining_getblocktemplate_longpoll.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/mining_getblocktemplate_longpoll.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mining_getblocktemplate_longpoll.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -8,6 +8,7 @@\n import random\n import threading\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import get_rpc_proxy\n from test_framework.wallet import MiniWallet\n@@ -62,7 +63,7 @@ def run_test(self):\n         assert not thr.is_alive()\n \n         # Add enough mature utxos to the wallets, so that all txs spend confirmed coins\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generate(COINBASE_MATURITY)\n         self.sync_blocks()\n \n         self.log.info(\"Test that introducing a new transaction into the mempool will terminate the longpoll\")"
      },
      {
        "sha": "6409d4ea82d6d21922556ca54677103d66327e70",
        "filename": "test/functional/p2p_blocksonly.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_blocksonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_blocksonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_blocksonly.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,7 @@\n \n import time\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import msg_tx\n from test_framework.p2p import P2PInterface, P2PTxInvStore\n from test_framework.test_framework import BitcoinTestFramework\n@@ -23,7 +24,7 @@ def run_test(self):\n         self.miniwallet = MiniWallet(self.nodes[0])\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         self.miniwallet.generate(2)\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generate(COINBASE_MATURITY)\n \n         self.blocksonly_mode_tests()\n         self.blocks_relay_conn_tests()"
      },
      {
        "sha": "3e4f2f974d1ca92c7183df4ba6838311ab0ef83a",
        "filename": "test/functional/p2p_compactblocks.py",
        "status": "modified",
        "additions": 9,
        "deletions": 4,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_compactblocks.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -9,7 +9,12 @@\n \"\"\"\n import random\n \n-from test_framework.blocktools import create_block, NORMAL_GBT_REQUEST_PARAMS, add_witness_commitment\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    NORMAL_GBT_REQUEST_PARAMS,\n+    add_witness_commitment,\n+    create_block,\n+)\n from test_framework.messages import BlockTransactions, BlockTransactionsRequest, calculate_shortid, CBlock, CBlockHeader, CInv, COutPoint, CTransaction, CTxIn, CTxInWitness, CTxOut, FromHex, HeaderAndShortIDs, msg_no_witness_block, msg_no_witness_blocktxn, msg_cmpctblock, msg_getblocktxn, msg_getdata, msg_getheaders, msg_headers, msg_inv, msg_sendcmpct, msg_sendheaders, msg_tx, msg_block, msg_blocktxn, MSG_BLOCK, MSG_CMPCT_BLOCK, MSG_WITNESS_FLAG, NODE_NETWORK, P2PHeaderAndShortIDs, PrefilledTransaction, ser_uint256, ToHex\n from test_framework.p2p import p2p_lock, P2PInterface\n from test_framework.script import CScript, OP_TRUE, OP_DROP\n@@ -115,7 +120,7 @@ def make_utxos(self):\n         block = self.build_block_on_tip(self.nodes[0])\n         self.segwit_node.send_and_ping(msg_no_witness_block(block))\n         assert int(self.nodes[0].getbestblockhash(), 16) == block.sha256\n-        self.nodes[0].generatetoaddress(100, self.nodes[0].getnewaddress(address_type=\"bech32\"))\n+        self.nodes[0].generatetoaddress(COINBASE_MATURITY, self.nodes[0].getnewaddress(address_type=\"bech32\"))\n \n         total_value = block.vtx[0].vout[0].nValue\n         out_value = total_value // 10\n@@ -226,7 +231,7 @@ def check_announcement_of_new_block(node, peer, predicate):\n \n     # This test actually causes bitcoind to (reasonably!) disconnect us, so do this last.\n     def test_invalid_cmpctblock_message(self):\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         block = self.build_block_on_tip(self.nodes[0])\n \n         cmpct_block = P2PHeaderAndShortIDs()\n@@ -244,7 +249,7 @@ def test_compactblock_construction(self, test_node, use_witness_address=True):\n         version = test_node.cmpct_version\n         node = self.nodes[0]\n         # Generate a bunch of transactions.\n-        node.generate(101)\n+        node.generate(COINBASE_MATURITY + 1)\n         num_transactions = 25\n         address = node.getnewaddress()\n "
      },
      {
        "sha": "a525996493d305ea06bf3424e4dd9c6be6b97340",
        "filename": "test/functional/p2p_eviction.py",
        "status": "modified",
        "additions": 6,
        "deletions": 2,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_eviction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_eviction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_eviction.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -15,7 +15,11 @@\n \n import time\n \n-from test_framework.blocktools import create_block, create_coinbase\n+from test_framework.blocktools import (\n+    COINBASE_MATURITY,\n+    create_block,\n+    create_coinbase,\n+)\n from test_framework.messages import CTransaction, FromHex, msg_pong, msg_tx\n from test_framework.p2p import P2PDataStore, P2PInterface\n from test_framework.test_framework import BitcoinTestFramework\n@@ -45,7 +49,7 @@ def run_test(self):\n         protected_peers = set()  # peers that we expect to be protected from eviction\n         current_peer = -1\n         node = self.nodes[0]\n-        node.generatetoaddress(101, node.get_deterministic_priv_key().address)\n+        node.generatetoaddress(COINBASE_MATURITY + 1, node.get_deterministic_priv_key().address)\n \n         self.log.info(\"Create 4 peers and protect them from eviction by sending us a block\")\n         for _ in range(4):"
      },
      {
        "sha": "0175b9f6c06da619d2c3bae27c37f478b15bb8a2",
        "filename": "test/functional/p2p_feefilter.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_feefilter.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,7 @@\n \n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import MSG_TX, MSG_WTX, msg_feefilter\n from test_framework.p2p import P2PInterface, p2p_lock\n from test_framework.test_framework import BitcoinTestFramework\n@@ -81,7 +82,7 @@ def test_feefilter(self):\n         miniwallet = MiniWallet(node1)\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         miniwallet.generate(5)\n-        node1.generate(100)\n+        node1.generate(COINBASE_MATURITY)\n \n         conn = self.nodes[0].add_p2p_connection(TestP2PConn())\n "
      },
      {
        "sha": "9a4ceb86ae1d7e5750d538571d42ac76a417aca7",
        "filename": "test/functional/p2p_leak_tx.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_leak_tx.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/p2p_leak_tx.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p_leak_tx.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test that we don't leak txs to inbound peers that we haven't yet announced to\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import msg_getdata, CInv, MSG_TX\n from test_framework.p2p import p2p_lock, P2PDataStore\n from test_framework.test_framework import BitcoinTestFramework\n@@ -27,7 +28,7 @@ def run_test(self):\n         miniwallet = MiniWallet(gen_node)\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         miniwallet.generate(1)\n-        gen_node.generate(100)\n+        gen_node.generate(COINBASE_MATURITY)\n \n         inbound_peer = self.nodes[0].add_p2p_connection(P2PNode())  # An \"attacking\" inbound peer\n "
      },
      {
        "sha": "af515f3a27edf02064232ca5985d376312a02be4",
        "filename": "test/functional/rpc_createmultisig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_createmultisig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_createmultisig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_createmultisig.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -9,6 +9,7 @@\n import json\n import os\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.authproxy import JSONRPCException\n from test_framework.descriptors import descsum_create, drop_origins\n from test_framework.key import ECPubKey, ECKey\n@@ -109,7 +110,7 @@ def check_addmultisigaddress_errors(self):\n \n     def checkbalances(self):\n         node0, node1, node2 = self.nodes\n-        node0.generate(100)\n+        node0.generate(COINBASE_MATURITY)\n         self.sync_all()\n \n         bal0 = node0.getbalance()"
      },
      {
        "sha": "3efbdab013328be2bc79782d2ca7804a3b6447bd",
        "filename": "test/functional/rpc_dumptxoutset.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_dumptxoutset.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_dumptxoutset.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_dumptxoutset.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,8 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test the generation of UTXO snapshots using `dumptxoutset`.\n \"\"\"\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n \n@@ -21,7 +23,7 @@ def run_test(self):\n         node = self.nodes[0]\n         mocktime = node.getblockheader(node.getblockhash(0))['time'] + 1\n         node.setmocktime(mocktime)\n-        node.generate(100)\n+        node.generate(COINBASE_MATURITY)\n \n         FILENAME = 'txoutset.dat'\n         out = node.dumptxoutset(FILENAME)"
      },
      {
        "sha": "4af518c8703f8f9f1fb02487f3edadd9ed952eed",
        "filename": "test/functional/rpc_getblockstats.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_getblockstats.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_getblockstats.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_getblockstats.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,8 @@\n #\n # Test getblockstats rpc call\n #\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -41,7 +43,7 @@ def get_stats(self):\n     def generate_test_data(self, filename):\n         mocktime = 1525107225\n         self.nodes[0].setmocktime(mocktime)\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         address = self.nodes[0].get_deterministic_priv_key().address\n         self.nodes[0].sendtoaddress(address=address, amount=10, subtractfeefromamount=True)"
      },
      {
        "sha": "a39f4bc55c4c9565c753323f27e4337e6c39be25",
        "filename": "test/functional/rpc_net.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_net.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -11,6 +11,7 @@\n from itertools import product\n import time\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.p2p import P2PInterface\n import test_framework.messages\n from test_framework.messages import (\n@@ -53,7 +54,7 @@ def run_test(self):\n         self.wallet = MiniWallet(self.nodes[0])\n         self.wallet.generate(1)\n         # Get out of IBD for the minfeefilter and getpeerinfo tests.\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         # By default, the test framework sets up an addnode connection from\n         # node 1 --> node0. By connecting node0 --> node 1, we're left with"
      },
      {
        "sha": "53ddf24e47ad147fe33d6f3bfb956ebc3102a813",
        "filename": "test/functional/rpc_rawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_rawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_rawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_rawtransaction.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -15,6 +15,8 @@\n from collections import OrderedDict\n from decimal import Decimal\n from io import BytesIO\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import CTransaction, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n@@ -66,7 +68,7 @@ def run_test(self):\n         self.log.info('prepare some coins for multiple *rawtransaction commands')\n         self.nodes[2].generate(1)\n         self.sync_all()\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.5)\n         self.nodes[0].sendtoaddress(self.nodes[2].getnewaddress(),1.0)"
      },
      {
        "sha": "16b0019866562720965bedf5db8890405ea2c920",
        "filename": "test/functional/rpc_signrawtransaction.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_signrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_signrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_signrawtransaction.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test transaction signing using the signrawtransaction* RPCs.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import check_script, script_to_p2sh, script_to_p2wsh\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n@@ -155,7 +156,7 @@ def script_verification_error_test(self):\n     def test_fully_signed_tx(self):\n         self.log.info(\"Test signing a fully signed transaction does nothing\")\n         self.nodes[0].walletpassphrase(\"password\", 9999)\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         rawtx = self.nodes[0].createrawtransaction([], [{self.nodes[0].getnewaddress(): 10}])\n         fundedtx = self.nodes[0].fundrawtransaction(rawtx)\n         signedtx = self.nodes[0].signrawtransactionwithwallet(fundedtx[\"hex\"])\n@@ -174,7 +175,7 @@ def witness_script_test(self):\n         embedded_pubkey = eckey.get_pubkey().get_bytes().hex()\n         p2sh_p2wsh_address = self.nodes[1].createmultisig(1, [embedded_pubkey], \"p2sh-segwit\")\n         # send transaction to P2SH-P2WSH 1-of-1 multisig address\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         self.nodes[0].sendtoaddress(p2sh_p2wsh_address[\"address\"], 49.999)\n         self.nodes[0].generate(1)\n         self.sync_all()"
      },
      {
        "sha": "bf96b6353ca04c7294769d130ad96996e81d6c35",
        "filename": "test/functional/rpc_txoutproof.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_txoutproof.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/rpc_txoutproof.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpc_txoutproof.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test gettxoutproof and verifytxoutproof RPCs.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.messages import CMerkleBlock, FromHex, ToHex\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n@@ -23,7 +24,7 @@ def run_test(self):\n         miniwallet = MiniWallet(self.nodes[0])\n         # Add enough mature utxos to the wallet, so that all txs spend confirmed coins\n         miniwallet.generate(5)\n-        self.nodes[0].generate(100)\n+        self.nodes[0].generate(COINBASE_MATURITY)\n         self.sync_all()\n \n         chain_height = self.nodes[1].getblockcount()"
      },
      {
        "sha": "d24cc802a468258bc06c96208771e862fe4ffd45",
        "filename": "test/functional/wallet_abandonconflict.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_abandonconflict.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -12,6 +12,7 @@\n \"\"\"\n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -28,7 +29,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.sync_blocks()\n         balance = self.nodes[0].getbalance()\n         txA = self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), Decimal(\"10\"))"
      },
      {
        "sha": "6d93cf412fe902bac533e641fa1d4b4b22901634",
        "filename": "test/functional/wallet_address_types.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_address_types.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_address_types.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_address_types.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -53,6 +53,7 @@\n from decimal import Decimal\n import itertools\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.descriptors import (\n     descsum_create,\n@@ -220,7 +221,7 @@ def test_change_output_type(self, node_sender, destinations, expected_type):\n     def run_test(self):\n         # Mine 101 blocks on node5 to bring nodes out of IBD and make sure that\n         # no coinbases are maturing for the nodes-under-test during the test\n-        self.nodes[5].generate(101)\n+        self.nodes[5].generate(COINBASE_MATURITY + 1)\n         self.sync_blocks()\n \n         uncompressed_1 = \"0496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858ee\"\n@@ -258,7 +259,7 @@ def run_test(self):\n             self.log.info(\"Sending from node {} ({}) with{} multisig using {}\".format(from_node, self.extra_args[from_node], \"\" if multisig else \"out\", \"default\" if address_type is None else address_type))\n             old_balances = self.get_balances()\n             self.log.debug(\"Old balances are {}\".format(old_balances))\n-            to_send = (old_balances[from_node] / 101).quantize(Decimal(\"0.00000001\"))\n+            to_send = (old_balances[from_node] / (COINBASE_MATURITY + 1)).quantize(Decimal(\"0.00000001\"))\n             sends = {}\n             addresses = {}\n "
      },
      {
        "sha": "05a0ef0ea11ff840e32b1cd9d29fc643f52d9737",
        "filename": "test/functional/wallet_backup.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_backup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_backup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_backup.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -35,6 +35,7 @@\n from random import randint\n import shutil\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -123,7 +124,7 @@ def run_test(self):\n         self.sync_blocks()\n         self.nodes[2].generate(1)\n         self.sync_blocks()\n-        self.nodes[3].generate(100)\n+        self.nodes[3].generate(COINBASE_MATURITY)\n         self.sync_blocks()\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n@@ -152,7 +153,7 @@ def run_test(self):\n             self.do_one_round()\n \n         # Generate 101 more blocks, so any fees paid mature\n-        self.nodes[3].generate(101)\n+        self.nodes[3].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n \n         balance0 = self.nodes[0].getbalance()"
      },
      {
        "sha": "204a866c559947d2336d739e24518eb59d13a93a",
        "filename": "test/functional/wallet_balance.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_balance.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_balance.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_balance.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -7,6 +7,7 @@\n import struct\n \n from test_framework.address import ADDRESS_BCRT1_UNSPENDABLE as ADDRESS_WATCHONLY\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -72,7 +73,7 @@ def run_test(self):\n         self.nodes[0].generate(1)\n         self.sync_all()\n         self.nodes[1].generate(1)\n-        self.nodes[1].generatetoaddress(101, ADDRESS_WATCHONLY)\n+        self.nodes[1].generatetoaddress(COINBASE_MATURITY + 1, ADDRESS_WATCHONLY)\n         self.sync_all()\n \n         if not self.options.descriptors:"
      },
      {
        "sha": "a052ec74771ec8c76ce46c757e9a89a4f959053a",
        "filename": "test/functional/wallet_basic.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_basic.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_basic.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_basic.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -6,6 +6,7 @@\n from decimal import Decimal\n from itertools import product\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_array_result,\n@@ -65,7 +66,7 @@ def run_test(self):\n         assert_equal(walletinfo['balance'], 0)\n \n         self.sync_all(self.nodes[0:3])\n-        self.nodes[1].generate(101)\n+        self.nodes[1].generate(COINBASE_MATURITY + 1)\n         self.sync_all(self.nodes[0:3])\n \n         assert_equal(self.nodes[0].getbalance(), 50)\n@@ -158,7 +159,7 @@ def run_test(self):\n         assert_equal(len(self.nodes[1].listlockunspent()), 0)\n \n         # Have node1 generate 100 blocks (so node0 can recover the fee)\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.sync_all(self.nodes[0:3])\n \n         # node0 should end up with 100 btc in block rewards plus fees, but"
      },
      {
        "sha": "b21461ee7ba63e65bff1ffe5a43a0d8b5bf275b6",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -16,6 +16,7 @@\n from decimal import Decimal\n import io\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.blocktools import add_witness_commitment, create_block, create_coinbase, send_to_witness\n from test_framework.messages import BIP125_SEQUENCE_NUMBER, CTransaction\n from test_framework.test_framework import BitcoinTestFramework\n@@ -265,7 +266,7 @@ def test_small_output_with_feerate_succeeds(self, rbf_node, dest_address):\n     self.log.info('Testing small output with feerate bump succeeds')\n \n     # Make sure additional inputs exist\n-    rbf_node.generatetoaddress(101, rbf_node.getnewaddress())\n+    rbf_node.generatetoaddress(COINBASE_MATURITY + 1, rbf_node.getnewaddress())\n     rbfid = spend_one_input(rbf_node, dest_address)\n     input_list = rbf_node.getrawtransaction(rbfid, 1)[\"vin\"]\n     assert_equal(len(input_list), 1)"
      },
      {
        "sha": "c6f5d334f8e1f1e09655d304072a2564c5681d45",
        "filename": "test/functional/wallet_descriptor.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_descriptor.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_descriptor.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_descriptor.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test descriptor wallet function.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -83,7 +84,7 @@ def run_test(self):\n         send_wrpc = self.nodes[0].get_wallet_rpc(\"desc1\")\n \n         # Generate some coins\n-        send_wrpc.generatetoaddress(101, send_wrpc.getnewaddress())\n+        send_wrpc.generatetoaddress(COINBASE_MATURITY + 1, send_wrpc.getnewaddress())\n \n         # Make transactions\n         self.log.info(\"Test sending and receiving\")"
      },
      {
        "sha": "b28f3ecebc4dc9b1e617cf2d686addaf69f2c4a0",
        "filename": "test/functional/wallet_fallbackfee.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_fallbackfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_fallbackfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_fallbackfee.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -3,6 +3,8 @@\n # Distributed under the MIT software license, see the accompanying\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet replace-by-fee capabilities in conjunction with the fallbackfee.\"\"\"\n+\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_raises_rpc_error\n \n@@ -15,7 +17,7 @@ def skip_test_if_missing_module(self):\n         self.skip_if_no_wallet()\n \n     def run_test(self):\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         # sending a transaction without fee estimations must be possible by default on regtest\n         self.nodes[0].sendtoaddress(self.nodes[0].getnewaddress(), 1)"
      },
      {
        "sha": "f32acb8e1513e8b87f9c685ab43c5a8f99e9ab58",
        "filename": "test/functional/wallet_groups.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_groups.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_groups.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_groups.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -4,6 +4,7 @@\n # file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \"\"\"Test wallet group functionality.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import CTransaction, FromHex, ToHex\n from test_framework.util import (\n@@ -31,7 +32,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         self.log.info(\"Setting up\")\n         # Mine some coins\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         # Get some addresses from the two nodes\n         addr1 = [self.nodes[1].getnewaddress() for _ in range(3)]"
      },
      {
        "sha": "d41a3891977253b652e41129dcd12ce802b7de60",
        "filename": "test/functional/wallet_hd.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_hd.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -7,6 +7,7 @@\n import os\n import shutil\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -48,7 +49,7 @@ def run_test(self):\n \n         # Derive some HD addresses and remember the last\n         # Also send funds to each add\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n         hd_add = None\n         NUM_HD_ADDS = 10\n         for i in range(1, NUM_HD_ADDS + 1):"
      },
      {
        "sha": "a2da16e5a3297e6e4e422fa1d82b4f9a03d650ba",
        "filename": "test/functional/wallet_importdescriptors.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importdescriptors.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importdescriptors.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importdescriptors.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -16,6 +16,7 @@\n   and test the values returned.\"\"\"\n \n from test_framework.address import key_to_p2pkh\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.descriptors import descsum_create\n from test_framework.util import (\n@@ -73,7 +74,7 @@ def run_test(self):\n         assert_equal(wpriv.getwalletinfo()['keypoolsize'], 0)\n \n         self.log.info('Mining coins')\n-        w0.generatetoaddress(101, w0.getnewaddress())\n+        w0.generatetoaddress(COINBASE_MATURITY + 1, w0.getnewaddress())\n \n         # RPC importdescriptors -----------------------------------------------\n "
      },
      {
        "sha": "0a00c5eed93703c2266eddf48e03e65180d2d203",
        "filename": "test/functional/wallet_importmulti.py",
        "status": "modified",
        "additions": 5,
        "deletions": 4,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importmulti.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -15,6 +15,7 @@\n - `test_address()` is called to call getaddressinfo for an address on node1\n   and test the values returned.\"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.script import (\n     CScript,\n     OP_NOP,\n@@ -255,7 +256,7 @@ def run_test(self):\n \n         # P2SH address\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n@@ -276,7 +277,7 @@ def run_test(self):\n \n         # P2SH + Redeem script\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n@@ -297,7 +298,7 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + !Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']\n@@ -323,7 +324,7 @@ def run_test(self):\n \n         # P2SH + Redeem script + Private Keys + Watchonly\n         multisig = get_multisig(self.nodes[0])\n-        self.nodes[1].generate(100)\n+        self.nodes[1].generate(COINBASE_MATURITY)\n         self.nodes[1].sendtoaddress(multisig.p2sh_addr, 10.00)\n         self.nodes[1].generate(1)\n         timestamp = self.nodes[1].getblock(self.nodes[1].getbestblockhash())['mediantime']"
      },
      {
        "sha": "ded0e64b1d96149da89bbea82a92b61bac83c842",
        "filename": "test/functional/wallet_importprunedfunds.py",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_importprunedfunds.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the importprunedfunds and removeprunedfunds RPCs.\"\"\"\n from decimal import Decimal\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.address import key_to_p2wpkh\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n@@ -24,7 +25,7 @@ def skip_test_if_missing_module(self):\n \n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         self.sync_all()\n \n@@ -46,7 +47,7 @@ def run_test(self):\n         self.sync_all()\n \n         # Node 1 sync test\n-        assert_equal(self.nodes[1].getblockcount(), 101)\n+        assert_equal(self.nodes[1].getblockcount(), COINBASE_MATURITY + 1)\n \n         # Address Test - before import\n         address_info = self.nodes[1].getaddressinfo(address1)"
      },
      {
        "sha": "1ecf08b9ac49ab9993847759b994c6a19b620cab",
        "filename": "test/functional/wallet_keypool_topup.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_keypool_topup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_keypool_topup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_keypool_topup.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -13,6 +13,7 @@\n import os\n import shutil\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -31,7 +32,7 @@ def skip_test_if_missing_module(self):\n     def run_test(self):\n         wallet_path = os.path.join(self.nodes[1].datadir, self.chain, \"wallets\", self.default_wallet_name, self.wallet_data_filename)\n         wallet_backup_path = os.path.join(self.nodes[1].datadir, \"wallet.bak\")\n-        self.nodes[0].generate(101)\n+        self.nodes[0].generate(COINBASE_MATURITY + 1)\n \n         self.log.info(\"Make backup of wallet\")\n         self.stop_node(1)"
      },
      {
        "sha": "2d792bac526076c829ab78f7df707711a3486f44",
        "filename": "test/functional/wallet_labels.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_labels.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_labels.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_labels.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -11,6 +11,7 @@\n \"\"\"\n from collections import defaultdict\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import assert_equal, assert_raises_rpc_error\n from test_framework.wallet_util import test_address\n@@ -32,7 +33,7 @@ def run_test(self):\n         # Note each time we call generate, all generated coins go into\n         # the same address, so we call twice to get two addresses w/50 each\n         node.generatetoaddress(nblocks=1, address=node.getnewaddress(label='coinbase'))\n-        node.generatetoaddress(nblocks=101, address=node.getnewaddress(label='coinbase'))\n+        node.generatetoaddress(nblocks=COINBASE_MATURITY + 1, address=node.getnewaddress(label='coinbase'))\n         assert_equal(node.getbalance(), 100)\n \n         # there should be 2 address groups\n@@ -104,7 +105,7 @@ def run_test(self):\n             label.verify(node)\n             assert_equal(node.getreceivedbylabel(label.name), 2)\n             label.verify(node)\n-        node.generate(101)\n+        node.generate(COINBASE_MATURITY + 1)\n \n         # Check that setlabel can assign a label to a new unused address.\n         for label in labels:\n@@ -124,7 +125,7 @@ def run_test(self):\n                 label.add_address(multisig_address)\n                 label.purpose[multisig_address] = \"send\"\n                 label.verify(node)\n-            node.generate(101)\n+            node.generate(COINBASE_MATURITY + 1)\n \n         # Check that setlabel can change the label of an address from a\n         # different label."
      },
      {
        "sha": "3899971bd71383e1aee2eb24508bf5dab6fe32e6",
        "filename": "test/functional/wallet_listsinceblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_listsinceblock.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test the listsinceblock RPC.\"\"\"\n \n from test_framework.address import key_to_p2wpkh\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.key import ECKey\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.messages import BIP125_SEQUENCE_NUMBER\n@@ -29,7 +30,7 @@ def run_test(self):\n         # All nodes are in IBD from genesis, so they'll need the miner (node2) to be an outbound connection, or have\n         # only one connection. (See fPreferredDownload in net_processing)\n         self.connect_nodes(1, 2)\n-        self.nodes[2].generate(101)\n+        self.nodes[2].generate(COINBASE_MATURITY + 1)\n         self.sync_all()\n \n         self.test_no_blockhash()"
      },
      {
        "sha": "00d2c9ffe4d068682c6149877ddc92fba7241a54",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -14,6 +14,7 @@\n import time\n \n from test_framework.authproxy import JSONRPCException\n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.test_node import ErrorMatch\n from test_framework.util import (\n@@ -229,7 +230,7 @@ def wallet_file(name):\n         assert_raises_rpc_error(-19, \"Wallet file not specified\", node.getwalletinfo)\n \n         w1, w2, w3, w4, *_ = wallets\n-        node.generatetoaddress(nblocks=101, address=w1.getnewaddress())\n+        node.generatetoaddress(nblocks=COINBASE_MATURITY + 1, address=w1.getnewaddress())\n         assert_equal(w1.getbalance(), 100)\n         assert_equal(w2.getbalance(), 0)\n         assert_equal(w3.getbalance(), 0)"
      },
      {
        "sha": "e7dd7592b6d720ac6ad4b9be5c40422513e6e222",
        "filename": "test/functional/wallet_upgradewallet.py",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_upgradewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_upgradewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_upgradewallet.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -17,6 +17,7 @@\n \n from io import BytesIO\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.bdb import dump_bdb_kv\n from test_framework.messages import deser_compact_size, deser_string\n from test_framework.test_framework import BitcoinTestFramework\n@@ -118,19 +119,19 @@ def test_upgradewallet_error(self, wallet, previous_version, requested_version,\n         assert_equal(wallet.getwalletinfo()[\"walletversion\"], previous_version)\n \n     def run_test(self):\n-        self.nodes[0].generatetoaddress(101, self.nodes[0].getnewaddress())\n+        self.nodes[0].generatetoaddress(COINBASE_MATURITY + 1, self.nodes[0].getnewaddress())\n         self.dumb_sync_blocks()\n         # # Sanity check the test framework:\n         res = self.nodes[0].getblockchaininfo()\n-        assert_equal(res['blocks'], 101)\n+        assert_equal(res['blocks'], COINBASE_MATURITY + 1)\n         node_master = self.nodes[0]\n         v16_3_node  = self.nodes[1]\n         v15_2_node  = self.nodes[2]\n \n         # Send coins to old wallets for later conversion checks.\n         v16_3_wallet  = v16_3_node.get_wallet_rpc('wallet.dat')\n         v16_3_address = v16_3_wallet.getnewaddress()\n-        node_master.generatetoaddress(101, v16_3_address)\n+        node_master.generatetoaddress(COINBASE_MATURITY + 1, v16_3_address)\n         self.dumb_sync_blocks()\n         v16_3_balance = v16_3_wallet.getbalance()\n "
      },
      {
        "sha": "6743c4a49baf1c6d8c9605b99d5cdfb2ef37cfe9",
        "filename": "test/functional/wallet_watchonly.py",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_watchonly.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/bfa9309ad606102f24c9bd3c33dfe78949f09418/test/functional/wallet_watchonly.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_watchonly.py?ref=bfa9309ad606102f24c9bd3c33dfe78949f09418",
        "patch": "@@ -5,6 +5,7 @@\n \"\"\"Test createwallet watchonly arguments.\n \"\"\"\n \n+from test_framework.blocktools import COINBASE_MATURITY\n from test_framework.test_framework import BitcoinTestFramework\n from test_framework.util import (\n     assert_equal,\n@@ -36,7 +37,7 @@ def run_test(self):\n         wo_wallet.importpubkey(pubkey=def_wallet.getaddressinfo(wo_change)['pubkey'])\n \n         # generate some btc for testing\n-        node.generatetoaddress(101, a1)\n+        node.generatetoaddress(COINBASE_MATURITY + 1, a1)\n \n         # send 1 btc to our watch-only address\n         txid = def_wallet.sendtoaddress(wo_addr, 1)"
      }
    ]
  }
]