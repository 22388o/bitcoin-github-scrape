[
  {
    "sha": "fae51a5c6f4270a1088e6295b10a8cc45988ae46",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU1MWE1YzZmNDI3MGExMDg4ZTYyOTViMTBhOGNjNDU5ODhhZTQ2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2019-08-19T22:12:35Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-01T11:39:00Z"
      },
      "message": "wallet: Avoid translating RPC errors when loading wallets\n\nCommon errors and warnings should be translated when displayed in the\nGUI, but not translated when displayed elsewhere. The wallet method\nCreateWalletFromFile does not know its caller, so this commit changes it\nto return a bilingual_str to the caller.",
      "tree": {
        "sha": "1367e0780ab7e2fda2cb1cd46174029515d098f2",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1367e0780ab7e2fda2cb1cd46174029515d098f2"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae51a5c6f4270a1088e6295b10a8cc45988ae46",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUhSrwv+MkSOuws5+spCrAbSaQU2dVye9AQstBkTUF9qbSJZ572SGgYelnOkVWax\nmgQuPNEFgPNFeuvJbYPAgScnT93PcIPSEmdqpJYvKpZbhuKjDDvu7r7pzraF/P4n\niJbQV92+eV35Tnh10Kzc18eJ1m53+jmGfBSirTgOr3O1AmXKg8lnrNoohw/64c1o\nhPHYwhxUaYfrVzLlHy1yYjT9Gpb3tnyAzveqnSj2s02o2VVjsvMkt1b8nzrUKh8z\ndY7mKLwY0Cf9XNlTvvpsLh9D7cQ2xLngowWKKgxG011lEmWUMoje7EVAlwZNeq1J\nYQaEIMcAbeI689tyPkOlVk6zscB80DQIbwCJWbGr8SHKUv+a3kfmmnlO5HBfx0JB\nMiM3yWbUBZnmxtiEZ7V8APkG9Ay9wP1yoi72ApZ2lSFRqV0NudnuiN32tT8l+gSP\nmXX1phh3OaGxTTW09xkGxOb8StyH3+qouudJl7vgjo5FlkbI+ZI8cUjPCoKVAFCq\nW7qj9gKy\n=fyjo\n-----END PGP SIGNATURE-----",
        "payload": "tree 1367e0780ab7e2fda2cb1cd46174029515d098f2\nparent 608359b071dac82a9cf33a6c9e01f87abfcb90eb\nauthor MarcoFalke <falke.marco@gmail.com> 1566252755 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588333140 -0400\n\nwallet: Avoid translating RPC errors when loading wallets\n\nCommon errors and warnings should be translated when displayed in the\nGUI, but not translated when displayed elsewhere. The wallet method\nCreateWalletFromFile does not know its caller, so this commit changes it\nto return a bilingual_str to the caller.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae51a5c6f4270a1088e6295b10a8cc45988ae46",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae51a5c6f4270a1088e6295b10a8cc45988ae46",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae51a5c6f4270a1088e6295b10a8cc45988ae46/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/608359b071dac82a9cf33a6c9e01f87abfcb90eb",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/608359b071dac82a9cf33a6c9e01f87abfcb90eb"
      }
    ],
    "stats": {
      "total": 270,
      "additions": 149,
      "deletions": 121
    },
    "files": [
      {
        "sha": "0f7848bae1825fba758821a6b797b8cafdc229c9",
        "filename": "src/dummywallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/dummywallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/dummywallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/dummywallet.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -8,6 +8,7 @@\n \n class CWallet;\n enum class WalletCreationStatus;\n+struct bilingual_str;\n \n namespace interfaces {\n class Chain;\n@@ -72,12 +73,12 @@ std::vector<std::shared_ptr<CWallet>> GetWallets()\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n {\n     throw std::logic_error(\"Wallet function called in non-wallet build.\");\n }"
      },
      {
        "sha": "8564819e6ab5a9ae82c3d09bd78afbe8d47c251a",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 4,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -43,8 +43,8 @@ class CWallet;\n fs::path GetWalletDir();\n std::vector<fs::path> ListWalletDir();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings);\n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(interfaces::Node::LoadWalletFn load_wallet);\n \n namespace interfaces {\n@@ -259,11 +259,11 @@ class NodeImpl : public Node\n         }\n         return wallets;\n     }\n-    std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) override\n+    std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) override\n     {\n         return MakeWallet(LoadWallet(*m_context.chain, name, error, warnings));\n     }\n-    std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, WalletCreationStatus& status) override\n+    std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) override\n     {\n         std::shared_ptr<CWallet> wallet;\n         status = CreateWallet(*m_context.chain, passphrase, wallet_creation_flags, name, error, warnings, wallet);"
      },
      {
        "sha": "db9b42b2934de86b31833974279d9d81364daa39",
        "filename": "src/interfaces/node.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/interfaces/node.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/interfaces/node.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -27,9 +27,10 @@ class Coin;\n class RPCTimerInterface;\n class UniValue;\n class proxyType;\n+enum class WalletCreationStatus;\n struct CNodeStateStats;\n struct NodeContext;\n-enum class WalletCreationStatus;\n+struct bilingual_str;\n \n namespace interfaces {\n class Handler;\n@@ -201,10 +202,10 @@ class Node\n     //! Attempts to load a wallet from file or directory.\n     //! The loaded wallet is also notified to handlers previously registered\n     //! with handleLoadWallet.\n-    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, std::string& error, std::vector<std::string>& warnings) = 0;\n+    virtual std::unique_ptr<Wallet> loadWallet(const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings) = 0;\n \n     //! Create a wallet from file\n-    virtual std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, WalletCreationStatus& status) = 0;\n+    virtual std::unique_ptr<Wallet> createWallet(const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, WalletCreationStatus& status) = 0;\n \n     //! Register handler for init messages.\n     using InitMessageFn = std::function<void(const std::string& message)>;"
      },
      {
        "sha": "7cde3ca30b32cf3bdd68ab067d1ef61c8c91cfca",
        "filename": "src/qt/walletcontroller.cpp",
        "status": "modified",
        "additions": 7,
        "deletions": 6,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/qt/walletcontroller.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/qt/walletcontroller.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -14,6 +14,7 @@\n #include <interfaces/handler.h>\n #include <interfaces/node.h>\n #include <util/string.h>\n+#include <util/translation.h>\n #include <wallet/wallet.h>\n \n #include <algorithm>\n@@ -244,10 +245,10 @@ void CreateWalletActivity::finish()\n {\n     destroyProgressDialog();\n \n-    if (!m_error_message.empty()) {\n-        QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message));\n+    if (!m_error_message.original.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Create wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n+        QMessageBox::warning(m_parent_widget, tr(\"Create wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\", OpTranslated)));\n     }\n \n     if (m_wallet_model) Q_EMIT created(m_wallet_model);\n@@ -285,10 +286,10 @@ void OpenWalletActivity::finish()\n {\n     destroyProgressDialog();\n \n-    if (!m_error_message.empty()) {\n-        QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message));\n+    if (!m_error_message.original.empty()) {\n+        QMessageBox::critical(m_parent_widget, tr(\"Open wallet failed\"), QString::fromStdString(m_error_message.translated));\n     } else if (!m_warning_message.empty()) {\n-        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\")));\n+        QMessageBox::warning(m_parent_widget, tr(\"Open wallet warning\"), QString::fromStdString(Join(m_warning_message, \"\\n\", OpTranslated)));\n     }\n \n     if (m_wallet_model) Q_EMIT opened(m_wallet_model);"
      },
      {
        "sha": "24dd83adf74e29a5f549d29ae8712b41926b3971",
        "filename": "src/qt/walletcontroller.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/qt/walletcontroller.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/qt/walletcontroller.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletcontroller.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -8,6 +8,7 @@\n #include <qt/sendcoinsrecipient.h>\n #include <support/allocators/secure.h>\n #include <sync.h>\n+#include <util/translation.h>\n \n #include <map>\n #include <memory>\n@@ -104,8 +105,8 @@ class WalletControllerActivity : public QObject\n     QWidget* const m_parent_widget;\n     QProgressDialog* m_progress_dialog{nullptr};\n     WalletModel* m_wallet_model{nullptr};\n-    std::string m_error_message;\n-    std::vector<std::string> m_warning_message;\n+    bilingual_str m_error_message;\n+    std::vector<bilingual_str> m_warning_message;\n };\n \n "
      },
      {
        "sha": "b2d964c977c54fd9dd6fda841a7eecf887fa1ce4",
        "filename": "src/util/translation.h",
        "status": "modified",
        "additions": 14,
        "deletions": 0,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/util/translation.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/util/translation.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/util/translation.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -18,6 +18,20 @@ struct bilingual_str {\n     std::string translated;\n };\n \n+inline bilingual_str operator+(const bilingual_str& lhs, const bilingual_str& rhs)\n+{\n+    return bilingual_str{\n+        lhs.original + rhs.original,\n+        lhs.translated + rhs.translated};\n+}\n+\n+/** Mark a bilingual_str as untranslated */\n+inline static bilingual_str Untranslated(std::string original) { return {original, original}; }\n+/** Unary operator to return the original */\n+inline static std::string OpOriginal(const bilingual_str& b) { return b.original; }\n+/** Unary operator to return the translation */\n+inline static std::string OpTranslated(const bilingual_str& b) { return b.translated; }\n+\n namespace tinyformat {\n template <typename... Args>\n bilingual_str format(const bilingual_str& fmt, const Args&... args)"
      },
      {
        "sha": "3f7c2d09cc1cc8f0ffebd0e9ea905449a20b150f",
        "filename": "src/wallet/db.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/db.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/db.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -393,7 +393,7 @@ bool BerkeleyBatch::Recover(const fs::path& file_path, void *callbackDataIn, boo\n     return fSuccess;\n }\n \n-bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& errorStr)\n+bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n@@ -403,14 +403,14 @@ bool BerkeleyBatch::VerifyEnvironment(const fs::path& file_path, std::string& er\n     LogPrintf(\"Using wallet %s\\n\", file_path.string());\n \n     if (!env->Open(true /* retry */)) {\n-        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\").translated, walletDir);\n+        errorStr = strprintf(_(\"Error initializing wallet database environment %s!\"), walletDir);\n         return false;\n     }\n \n     return true;\n }\n \n-bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n+bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc)\n {\n     std::string walletFile;\n     std::shared_ptr<BerkeleyEnvironment> env = GetWalletEnv(file_path, walletFile);\n@@ -425,12 +425,12 @@ bool BerkeleyBatch::VerifyDatabaseFile(const fs::path& file_path, std::vector<st\n             warnings.push_back(strprintf(_(\"Warning: Wallet file corrupt, data salvaged!\"\n                                      \" Original %s saved as %s in %s; if\"\n                                      \" your balance or transactions are incorrect you should\"\n-                                     \" restore from a backup.\").translated,\n+                                     \" restore from a backup.\"),\n                 walletFile, backup_filename, walletDir));\n         }\n         if (r == BerkeleyEnvironment::VerifyResult::RECOVER_FAIL)\n         {\n-            errorStr = strprintf(_(\"%s corrupt, salvage failed\").translated, walletFile);\n+            errorStr = strprintf(_(\"%s corrupt, salvage failed\"), walletFile);\n             return false;\n         }\n     }"
      },
      {
        "sha": "1bf3375475b0fe7e598e030a7a27f45add99b737",
        "filename": "src/wallet/db.h",
        "status": "modified",
        "additions": 4,
        "deletions": 2,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/db.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/db.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/db.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -21,6 +21,8 @@\n \n #include <db_cxx.h>\n \n+struct bilingual_str;\n+\n static const unsigned int DEFAULT_WALLET_DBLOGSIZE = 100;\n static const bool DEFAULT_WALLET_PRIVDB = true;\n \n@@ -242,9 +244,9 @@ class BerkeleyBatch\n        ideal to be called periodically */\n     static bool PeriodicFlush(BerkeleyDatabase& database);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const fs::path& file_path, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& file_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<std::string>& warnings, std::string& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n+    static bool VerifyDatabaseFile(const fs::path& file_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr, BerkeleyEnvironment::recoverFunc_type recoverFunc);\n \n     template <typename K, typename T>\n     bool Read(const K& key, T& value)"
      },
      {
        "sha": "217a9504574fcd5a40bb1d729bf665470c2c8b58",
        "filename": "src/wallet/load.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 9,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/load.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/load.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/load.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -53,12 +53,14 @@ bool VerifyWallets(interfaces::Chain& chain, const std::vector<std::string>& wal\n             return false;\n         }\n \n-        std::string error_string;\n-        std::vector<std::string> warnings;\n+        bilingual_str error_string;\n+        std::vector<bilingual_str> warnings;\n         bool verify_success = CWallet::Verify(chain, location, salvage_wallet, error_string, warnings);\n-        if (!error_string.empty()) chain.initError(error_string);\n-        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n-        if (!verify_success) return false;\n+        if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n+        if (!verify_success) {\n+            chain.initError(error_string.translated);\n+            return false;\n+        }\n     }\n \n     return true;\n@@ -68,12 +70,12 @@ bool LoadWallets(interfaces::Chain& chain, const std::vector<std::string>& walle\n {\n     try {\n         for (const std::string& walletFile : wallet_files) {\n-            std::string error;\n-            std::vector<std::string> warnings;\n+            bilingual_str error;\n+            std::vector<bilingual_str> warnings;\n             std::shared_ptr<CWallet> pwallet = CWallet::CreateWalletFromFile(chain, WalletLocation(walletFile), error, warnings);\n-            if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\"));\n+            if (!warnings.empty()) chain.initWarning(Join(warnings, \"\\n\", OpTranslated));\n             if (!pwallet) {\n-                chain.initError(error);\n+                chain.initError(error.translated);\n                 return false;\n             }\n             AddWallet(pwallet);"
      },
      {
        "sha": "8343ae3360c7a90663f91897da4e9a652bf9e518",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 16,
        "deletions": 15,
        "changes": 31,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -23,6 +23,7 @@\n #include <util/moneystr.h>\n #include <util/string.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <util/url.h>\n #include <util/vector.h>\n #include <wallet/coincontrol.h>\n@@ -2589,14 +2590,14 @@ static UniValue loadwallet(const JSONRPCRequest& request)\n         }\n     }\n \n-    std::string error;\n-    std::vector<std::string> warning;\n-    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_chain, location, error, warning);\n-    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error);\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n+    std::shared_ptr<CWallet> const wallet = LoadWallet(*g_rpc_chain, location, error, warnings);\n+    if (!wallet) throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", Join(warning, \"\\n\"));\n+    obj.pushKV(\"warning\", Join(warnings, \"\\n\", OpOriginal));\n \n     return obj;\n }\n@@ -2705,12 +2706,12 @@ static UniValue createwallet(const JSONRPCRequest& request)\n     }\n     SecureString passphrase;\n     passphrase.reserve(100);\n-    std::vector<std::string> warnings;\n+    std::vector<bilingual_str> warnings;\n     if (!request.params[3].isNull()) {\n         passphrase = request.params[3].get_str().c_str();\n         if (passphrase.empty()) {\n             // Empty string means unencrypted\n-            warnings.emplace_back(\"Empty string given as passphrase, wallet will not be encrypted.\");\n+            warnings.emplace_back(Untranslated(\"Empty string given as passphrase, wallet will not be encrypted.\"));\n         }\n     }\n \n@@ -2721,22 +2722,22 @@ static UniValue createwallet(const JSONRPCRequest& request)\n         flags |= WALLET_FLAG_DESCRIPTORS;\n     }\n \n-    std::string error;\n+    bilingual_str error;\n     std::shared_ptr<CWallet> wallet;\n     WalletCreationStatus status = CreateWallet(*g_rpc_chain, passphrase, flags, request.params[0].get_str(), error, warnings, wallet);\n     switch (status) {\n         case WalletCreationStatus::CREATION_FAILED:\n-            throw JSONRPCError(RPC_WALLET_ERROR, error);\n+            throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n         case WalletCreationStatus::ENCRYPTION_FAILED:\n-            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, error);\n+            throw JSONRPCError(RPC_WALLET_ENCRYPTION_FAILED, error.original);\n         case WalletCreationStatus::SUCCESS:\n             break;\n         // no default case, so the compiler can warn about missing cases\n     }\n \n     UniValue obj(UniValue::VOBJ);\n     obj.pushKV(\"name\", wallet->GetName());\n-    obj.pushKV(\"warning\", Join(warnings, \"\\n\"));\n+    obj.pushKV(\"warning\", Join(warnings, \"\\n\", OpOriginal));\n \n     return obj;\n }\n@@ -4239,12 +4240,12 @@ static UniValue upgradewallet(const JSONRPCRequest& request)\n         version = request.params[0].get_int();\n     }\n \n-    std::string error;\n-    std::vector<std::string> warnings;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n     if (!pwallet->UpgradeWallet(version, error, warnings)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, error);\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n-    return error;\n+    return error.original;\n }\n \n UniValue abortrescan(const JSONRPCRequest& request); // in rpcdump.cpp"
      },
      {
        "sha": "e4be5045e119f68c58ce3b678e8956e18d8ba53b",
        "filename": "src/wallet/scriptpubkeyman.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/scriptpubkeyman.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/scriptpubkeyman.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -377,10 +377,9 @@ bool LegacyScriptPubKeyMan::CanGetAddresses(bool internal) const\n     return keypool_has_keys;\n }\n \n-bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n+bool LegacyScriptPubKeyMan::Upgrade(int prev_version, bilingual_str& error)\n {\n     LOCK(cs_KeyStore);\n-    error = \"\";\n     bool hd_upgrade = false;\n     bool split_upgrade = false;\n     if (m_storage.CanSupportFeature(FEATURE_HD) && !IsHDEnabled()) {\n@@ -405,7 +404,7 @@ bool LegacyScriptPubKeyMan::Upgrade(int prev_version, std::string& error)\n     // Regenerate the keypool if upgraded to HD\n     if (hd_upgrade) {\n         if (!TopUp()) {\n-            error = _(\"Unable to generate keys\").translated;\n+            error = _(\"Unable to generate keys\");\n             return false;\n         }\n     }"
      },
      {
        "sha": "5414fc592365089e0520d4b6b1bfea80930df71f",
        "filename": "src/wallet/scriptpubkeyman.h",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/scriptpubkeyman.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/scriptpubkeyman.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/scriptpubkeyman.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -19,6 +19,7 @@\n #include <boost/signals2/signal.hpp>\n \n enum class OutputType;\n+struct bilingual_str;\n \n // Wallet storage things that ScriptPubKeyMans need in order to be able to store things to the wallet database.\n // It provides access to things that are part of the entire wallet and not specific to a ScriptPubKeyMan such as\n@@ -191,7 +192,7 @@ class ScriptPubKeyMan\n     virtual bool CanGetAddresses(bool internal = false) const { return false; }\n \n     /** Upgrades the wallet to the specified version */\n-    virtual bool Upgrade(int prev_version, std::string& error) { return false; }\n+    virtual bool Upgrade(int prev_version, bilingual_str& error) { return false; }\n \n     virtual bool HavePrivateKeys() const { return false; }\n \n@@ -343,7 +344,7 @@ class LegacyScriptPubKeyMan : public ScriptPubKeyMan, public FillableSigningProv\n \n     bool SetupGeneration(bool force = false) override;\n \n-    bool Upgrade(int prev_version, std::string& error) override;\n+    bool Upgrade(int prev_version, bilingual_str& error) override;\n \n     bool HavePrivateKeys() const override;\n "
      },
      {
        "sha": "66e2ae9b62b469204c0402c5d264f1291f5c5e72",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -15,6 +15,7 @@\n #include <rpc/server.h>\n #include <test/util/logging.h>\n #include <test/util/setup_common.h>\n+#include <util/translation.h>\n #include <validation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/test/wallet_test_fixture.h>\n@@ -30,8 +31,8 @@ BOOST_FIXTURE_TEST_SUITE(wallet_tests, WalletTestingSetup)\n \n static std::shared_ptr<CWallet> TestLoadWallet(interfaces::Chain& chain)\n {\n-    std::string error;\n-    std::vector<std::string> warnings;\n+    bilingual_str error;\n+    std::vector<bilingual_str> warnings;\n     auto wallet = CWallet::CreateWalletFromFile(chain, WalletLocation(\"\"), error, warnings);\n     wallet->postInitProcess();\n     return wallet;"
      },
      {
        "sha": "e8f9864e7cb7eca2bbd3620c6429a3e201504520",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 57,
        "deletions": 56,
        "changes": 113,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -27,6 +27,7 @@\n #include <util/fees.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n+#include <util/string.h>\n #include <util/translation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/fees.h>\n@@ -149,34 +150,34 @@ void UnloadWallet(std::shared_ptr<CWallet>&& wallet)\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     try {\n         if (!CWallet::Verify(chain, location, false, error, warnings)) {\n-            error = \"Wallet file verification failed: \" + error;\n+            error = Untranslated(\"Wallet file verification failed: \") + error;\n             return nullptr;\n         }\n \n         std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings);\n         if (!wallet) {\n-            error = \"Wallet loading failed: \" + error;\n+            error = Untranslated(\"Wallet loading failed: \") + error;\n             return nullptr;\n         }\n         AddWallet(wallet);\n         wallet->postInitProcess();\n         return wallet;\n     } catch (const std::runtime_error& e) {\n-        error = e.what();\n+        error = Untranslated(e.what());\n         return nullptr;\n     }\n }\n \n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, std::string& error, std::vector<std::string>& warnings)\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     return LoadWallet(chain, WalletLocation(name), error, warnings);\n }\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result)\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result)\n {\n     // Indicate that the wallet is actually supposed to be blank and not just blank to make it encrypted\n     bool create_blank = (wallet_creation_flags & WALLET_FLAG_BLANK_WALLET);\n@@ -189,39 +190,39 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n     // Check the wallet file location\n     WalletLocation location(name);\n     if (location.Exists()) {\n-        error = \"Wallet \" + location.GetName() + \" already exists.\";\n+        error = strprintf(Untranslated(\"Wallet %s already exists.\"), location.GetName());\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n     // Wallet::Verify will check if we're trying to create a wallet with a duplicate name.\n     if (!CWallet::Verify(chain, location, false, error, warnings)) {\n-        error = \"Wallet file verification failed: \" + error;\n+        error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n     // Do not allow a passphrase when private keys are disabled\n     if (!passphrase.empty() && (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n-        error = \"Passphrase provided but private keys are disabled. A passphrase is only used to encrypt private keys, so cannot be used for wallets with private keys disabled.\";\n+        error = Untranslated(\"Passphrase provided but private keys are disabled. A passphrase is only used to encrypt private keys, so cannot be used for wallets with private keys disabled.\");\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n     // Make the wallet\n     std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings, wallet_creation_flags);\n     if (!wallet) {\n-        error = \"Wallet creation failed: \" + error;\n+        error = Untranslated(\"Wallet creation failed.\") + Untranslated(\" \") + error;\n         return WalletCreationStatus::CREATION_FAILED;\n     }\n \n     // Encrypt the wallet\n     if (!passphrase.empty() && !(wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         if (!wallet->EncryptWallet(passphrase)) {\n-            error = \"Error: Wallet created but failed to encrypt.\";\n+            error = Untranslated(\"Error: Wallet created but failed to encrypt.\");\n             return WalletCreationStatus::ENCRYPTION_FAILED;\n         }\n         if (!create_blank) {\n             // Unlock the wallet\n             if (!wallet->Unlock(passphrase)) {\n-                error = \"Error: Wallet was encrypted but could not be unlocked\";\n+                error = Untranslated(\"Error: Wallet was encrypted but could not be unlocked\");\n                 return WalletCreationStatus::ENCRYPTION_FAILED;\n             }\n \n@@ -233,7 +234,7 @@ WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString&\n                 } else {\n                     for (auto spk_man : wallet->GetActiveScriptPubKeyMans()) {\n                         if (!spk_man->SetupGeneration()) {\n-                            error = \"Unable to generate initial keys\";\n+                            error = Untranslated(\"Unable to generate initial keys\");\n                             return WalletCreationStatus::CREATION_FAILED;\n                         }\n                     }\n@@ -3656,7 +3657,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings)\n+bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings)\n {\n     // Do some checking on wallet path. It should be either a:\n     //\n@@ -3670,17 +3671,17 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     if (!(path_type == fs::file_not_found || path_type == fs::directory_file ||\n           (path_type == fs::symlink_file && fs::is_directory(wallet_path)) ||\n           (path_type == fs::regular_file && fs::path(location.GetName()).filename() == location.GetName()))) {\n-        error_string = strprintf(\n+        error_string = Untranslated(strprintf(\n               \"Invalid -wallet path '%s'. -wallet path should point to a directory where wallet.dat and \"\n               \"database/log.?????????? files can be stored, a location where such a directory could be created, \"\n               \"or (for backwards compatibility) the name of an existing data file in -walletdir (%s)\",\n-              location.GetName(), GetWalletDir());\n+              location.GetName(), GetWalletDir()));\n         return false;\n     }\n \n     // Make sure that the wallet path doesn't clash with an existing wallet path\n     if (IsWalletLoaded(wallet_path)) {\n-        error_string = strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName());\n+        error_string = Untranslated(strprintf(\"Error loading wallet %s. Duplicate -wallet filename specified.\", location.GetName()));\n         return false;\n     }\n \n@@ -3692,7 +3693,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n             return false;\n         }\n     } catch (const fs::filesystem_error& e) {\n-        error_string = strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e));\n+        error_string = Untranslated(strprintf(\"Error loading wallet %s. %s\", location.GetName(), fsbridge::get_filesystem_error_message(e)));\n         return false;\n     }\n \n@@ -3708,7 +3709,7 @@ bool CWallet::Verify(interfaces::Chain& chain, const WalletLocation& location, b\n     return WalletBatch::VerifyDatabaseFile(wallet_path, warnings, error_string);\n }\n \n-std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags)\n+std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags)\n {\n     const std::string walletFile = WalletDataFilePath(location.GetPath()).string();\n \n@@ -3721,7 +3722,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         std::unique_ptr<CWallet> tempWallet = MakeUnique<CWallet>(&chain, location, WalletDatabase::Create(location.GetPath()));\n         DBErrors nZapWalletRet = tempWallet->ZapWalletTx(vWtx);\n         if (nZapWalletRet != DBErrors::LOAD_OK) {\n-            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n             return nullptr;\n         }\n     }\n@@ -3736,26 +3737,26 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     DBErrors nLoadWalletRet = walletInstance->LoadWallet(fFirstRun);\n     if (nLoadWalletRet != DBErrors::LOAD_OK) {\n         if (nLoadWalletRet == DBErrors::CORRUPT) {\n-            error = strprintf(_(\"Error loading %s: Wallet corrupted\").translated, walletFile);\n+            error = strprintf(_(\"Error loading %s: Wallet corrupted\"), walletFile);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NONCRITICAL_ERROR)\n         {\n             warnings.push_back(strprintf(_(\"Error reading %s! All keys read correctly, but transaction data\"\n-                                          \" or address book entries might be missing or incorrect.\").translated,\n+                                           \" or address book entries might be missing or incorrect.\"),\n                 walletFile));\n         }\n         else if (nLoadWalletRet == DBErrors::TOO_NEW) {\n-            error = strprintf(_(\"Error loading %s: Wallet requires newer version of %s\").translated, walletFile, PACKAGE_NAME);\n+            error = strprintf(_(\"Error loading %s: Wallet requires newer version of %s\"), walletFile, PACKAGE_NAME);\n             return nullptr;\n         }\n         else if (nLoadWalletRet == DBErrors::NEED_REWRITE)\n         {\n-            error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\").translated, PACKAGE_NAME);\n+            error = strprintf(_(\"Wallet needed to be rewritten: restart %s to complete\"), PACKAGE_NAME);\n             return nullptr;\n         }\n         else {\n-            error = strprintf(_(\"Error loading %s\").translated, walletFile);\n+            error = strprintf(_(\"Error loading %s\"), walletFile);\n             return nullptr;\n         }\n     }\n@@ -3781,7 +3782,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n                 // Legacy wallets need SetupGeneration here.\n                 for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n                     if (!spk_man->SetupGeneration()) {\n-                        error = _(\"Unable to generate initial keys\").translated;\n+                        error = _(\"Unable to generate initial keys\");\n                         return nullptr;\n                     }\n                 }\n@@ -3791,49 +3792,49 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         walletInstance->chainStateFlushed(chain.getTipLocator());\n     } else if (wallet_creation_flags & WALLET_FLAG_DISABLE_PRIVATE_KEYS) {\n         // Make it impossible to disable private keys after creation\n-        error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\").translated, walletFile);\n+        error = strprintf(_(\"Error loading %s: Private keys can only be disabled during creation\"), walletFile);\n         return NULL;\n     } else if (walletInstance->IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS)) {\n         for (auto spk_man : walletInstance->GetActiveScriptPubKeyMans()) {\n             if (spk_man->HavePrivateKeys()) {\n-                warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\").translated, walletFile));\n+                warnings.push_back(strprintf(_(\"Warning: Private keys detected in wallet {%s} with disabled private keys\"), walletFile));\n                 break;\n             }\n         }\n     }\n \n     if (!gArgs.GetArg(\"-addresstype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-addresstype\", \"\"), walletInstance->m_default_address_type)) {\n-        error = strprintf(_(\"Unknown address type '%s'\").translated, gArgs.GetArg(\"-addresstype\", \"\"));\n+        error = strprintf(_(\"Unknown address type '%s'\"), gArgs.GetArg(\"-addresstype\", \"\"));\n         return nullptr;\n     }\n \n     if (!gArgs.GetArg(\"-changetype\", \"\").empty() && !ParseOutputType(gArgs.GetArg(\"-changetype\", \"\"), walletInstance->m_default_change_type)) {\n-        error = strprintf(_(\"Unknown change type '%s'\").translated, gArgs.GetArg(\"-changetype\", \"\"));\n+        error = strprintf(_(\"Unknown change type '%s'\"), gArgs.GetArg(\"-changetype\", \"\"));\n         return nullptr;\n     }\n \n     if (gArgs.IsArgSet(\"-mintxfee\")) {\n         CAmount n = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n) {\n-            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")).translated;\n+            error = AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\"));\n             return nullptr;\n         }\n         if (n > HIGH_TX_FEE_PER_KB) {\n-            warnings.push_back(AmountHighWarn(\"-mintxfee\").translated + \" \" +\n-                              _(\"This is the minimum transaction fee you pay on every transaction.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-mintxfee\") + Untranslated(\" \") +\n+                               _(\"This is the minimum transaction fee you pay on every transaction.\"));\n         }\n         walletInstance->m_min_fee = CFeeRate(n);\n     }\n \n     if (gArgs.IsArgSet(\"-fallbackfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK)) {\n-            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-fallbackfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            warnings.push_back(AmountHighWarn(\"-fallbackfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you may pay when fee estimates are not available.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-fallbackfee\") + Untranslated(\" \") +\n+                               _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n         }\n         walletInstance->m_fallback_fee = CFeeRate(nFeePerK);\n     }\n@@ -3843,28 +3844,28 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-discardfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK)) {\n-            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\").translated, gArgs.GetArg(\"-discardfee\", \"\"));\n+            error = strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            warnings.push_back(AmountHighWarn(\"-discardfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you may discard if change is smaller than dust at this level\").translated);\n+            warnings.push_back(AmountHighWarn(\"-discardfee\") + Untranslated(\" \") +\n+                               _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n         }\n         walletInstance->m_discard_rate = CFeeRate(nFeePerK);\n     }\n     if (gArgs.IsArgSet(\"-paytxfee\")) {\n         CAmount nFeePerK = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK)) {\n-            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")).translated;\n+            error = AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\"));\n             return nullptr;\n         }\n         if (nFeePerK > HIGH_TX_FEE_PER_KB) {\n-            warnings.push_back(AmountHighWarn(\"-paytxfee\").translated + \" \" +\n-                              _(\"This is the transaction fee you will pay if you send a transaction.\").translated);\n+            warnings.push_back(AmountHighWarn(\"-paytxfee\") + Untranslated(\" \") +\n+                               _(\"This is the transaction fee you will pay if you send a transaction.\"));\n         }\n         walletInstance->m_pay_tx_fee = CFeeRate(nFeePerK, 1000);\n         if (walletInstance->m_pay_tx_fee < chain.relayMinFee()) {\n-            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\").translated,\n+            error = strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n                 gArgs.GetArg(\"-paytxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n@@ -3873,23 +3874,23 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n     if (gArgs.IsArgSet(\"-maxtxfee\")) {\n         CAmount nMaxFee = 0;\n         if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee)) {\n-            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")).translated;\n+            error = AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\"));\n             return nullptr;\n         }\n         if (nMaxFee > HIGH_MAX_TX_FEE) {\n-            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\").translated);\n+            warnings.push_back(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n         }\n         if (CFeeRate(nMaxFee, 1000) < chain.relayMinFee()) {\n-            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\").translated,\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n+            error = strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                gArgs.GetArg(\"-maxtxfee\", \"\"), chain.relayMinFee().ToString());\n             return nullptr;\n         }\n         walletInstance->m_default_max_tx_fee = nMaxFee;\n     }\n \n     if (chain.relayMinFee().GetFeePerK() > HIGH_TX_FEE_PER_KB) {\n-        warnings.push_back(AmountHighWarn(\"-minrelaytxfee\").translated + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\").translated);\n+        warnings.push_back(AmountHighWarn(\"-minrelaytxfee\") + Untranslated(\" \") +\n+                           _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n     }\n \n     walletInstance->m_confirm_target = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n@@ -3949,7 +3950,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n             }\n \n             if (rescan_height != block_height) {\n-                error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\").translated;\n+                error = _(\"Prune: last wallet synchronisation goes beyond pruned data. You need to -reindex (download the whole blockchain again in case of pruned node)\");\n                 return nullptr;\n             }\n         }\n@@ -3974,7 +3975,7 @@ std::shared_ptr<CWallet> CWallet::CreateWalletFromFile(interfaces::Chain& chain,\n         {\n             WalletRescanReserver reserver(*walletInstance);\n             if (!reserver.reserve() || (ScanResult::SUCCESS != walletInstance->ScanForWalletTransactions(chain.getBlockHash(rescan_height), rescan_height, {} /* max height */, reserver, true /* update */).status)) {\n-                error = _(\"Failed to rescan the wallet during initialization\").translated;\n+                error = _(\"Failed to rescan the wallet during initialization\");\n                 return nullptr;\n             }\n         }\n@@ -4034,7 +4035,7 @@ const CAddressBookData* CWallet::FindAddressBookEntry(const CTxDestination& dest\n     return &address_book_it->second;\n }\n \n-bool CWallet::UpgradeWallet(int version, std::string& error, std::vector<std::string>& warnings)\n+bool CWallet::UpgradeWallet(int version, bilingual_str& error, std::vector<bilingual_str>& warnings)\n {\n     int prev_version = GetVersion();\n     int nMaxVersion = version;\n@@ -4043,12 +4044,12 @@ bool CWallet::UpgradeWallet(int version, std::string& error, std::vector<std::st\n         WalletLogPrintf(\"Performing wallet upgrade to %i\\n\", FEATURE_LATEST);\n         nMaxVersion = FEATURE_LATEST;\n         SetMinVersion(FEATURE_LATEST); // permanently upgrade the wallet immediately\n-    }\n-    else\n+    } else {\n         WalletLogPrintf(\"Allowing wallet upgrade up to %i\\n\", nMaxVersion);\n+    }\n     if (nMaxVersion < GetVersion())\n     {\n-        error = _(\"Cannot downgrade wallet\").translated;\n+        error = _(\"Cannot downgrade wallet\");\n         return false;\n     }\n     SetMaxVersion(nMaxVersion);\n@@ -4058,7 +4059,7 @@ bool CWallet::UpgradeWallet(int version, std::string& error, std::vector<std::st\n     // Do not upgrade versions to any version between HD_SPLIT and FEATURE_PRE_SPLIT_KEYPOOL unless already supporting HD_SPLIT\n     int max_version = GetVersion();\n     if (!CanSupportFeature(FEATURE_HD_SPLIT) && max_version >= FEATURE_HD_SPLIT && max_version < FEATURE_PRE_SPLIT_KEYPOOL) {\n-        error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use version 169900 or no version specified.\").translated;\n+        error = _(\"Cannot upgrade a non HD split wallet without upgrading to support pre split keypool. Please use version 169900 or no version specified.\");\n         return false;\n     }\n "
      },
      {
        "sha": "bd3ba562abc5428e375299302a8b55e7fb34bdfe",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 7,
        "deletions": 5,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -40,6 +40,8 @@\n \n using LoadWalletFn = std::function<void(std::unique_ptr<interfaces::Wallet> wallet)>;\n \n+struct bilingual_str;\n+\n //! Explicitly unload and delete the wallet.\n //! Blocks the current thread after signaling the unload intent so that all\n //! wallet clients release the wallet.\n@@ -52,7 +54,7 @@ bool RemoveWallet(const std::shared_ptr<CWallet>& wallet);\n bool HasWallets();\n std::vector<std::shared_ptr<CWallet>> GetWallets();\n std::shared_ptr<CWallet> GetWallet(const std::string& name);\n-std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings);\n+std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings);\n std::unique_ptr<interfaces::Handler> HandleLoadWallet(LoadWalletFn load_wallet);\n \n enum class WalletCreationStatus {\n@@ -61,7 +63,7 @@ enum class WalletCreationStatus {\n     ENCRYPTION_FAILED\n };\n \n-WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, std::string& error, std::vector<std::string>& warnings, std::shared_ptr<CWallet>& result);\n+WalletCreationStatus CreateWallet(interfaces::Chain& chain, const SecureString& passphrase, uint64_t wallet_creation_flags, const std::string& name, bilingual_str& error, std::vector<bilingual_str>& warnings, std::shared_ptr<CWallet>& result);\n \n //! -paytxfee default\n constexpr CAmount DEFAULT_PAY_TX_FEE = 0;\n@@ -1124,10 +1126,10 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n     //! Verify wallet naming and perform salvage on the wallet if required\n-    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, std::string& error_string, std::vector<std::string>& warnings);\n+    static bool Verify(interfaces::Chain& chain, const WalletLocation& location, bool salvage_wallet, bilingual_str& error_string, std::vector<bilingual_str>& warnings);\n \n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n-    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, std::string& error, std::vector<std::string>& warnings, uint64_t wallet_creation_flags = 0);\n+    static std::shared_ptr<CWallet> CreateWalletFromFile(interfaces::Chain& chain, const WalletLocation& location, bilingual_str& error, std::vector<bilingual_str>& warnings, uint64_t wallet_creation_flags = 0);\n \n     /**\n      * Wallet post-init setup\n@@ -1180,7 +1182,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     };\n \n     /** Upgrade the wallet */\n-    bool UpgradeWallet(int version, std::string& error, std::vector<std::string>& warnings);\n+    bool UpgradeWallet(int version, bilingual_str& error, std::vector<bilingual_str>& warnings);\n \n     //! Returns all unique ScriptPubKeyMans in m_internal_spk_managers and m_external_spk_managers\n     std::set<ScriptPubKeyMan*> GetActiveScriptPubKeyMans() const;"
      },
      {
        "sha": "45033f9bacf0883600ff3be49d8eef21e813c706",
        "filename": "src/wallet/walletdb.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/walletdb.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/walletdb.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -913,12 +913,12 @@ bool WalletBatch::RecoverKeysOnlyFilter(void *callbackData, CDataStream ssKey, C\n     return true;\n }\n \n-bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr)\n+bool WalletBatch::VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr)\n {\n     return BerkeleyBatch::VerifyEnvironment(wallet_path, errorStr);\n }\n \n-bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr)\n+bool WalletBatch::VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr)\n {\n     return BerkeleyBatch::VerifyDatabaseFile(wallet_path, warnings, errorStr, WalletBatch::Recover);\n }"
      },
      {
        "sha": "ae72a5b2653aedfc326bac9e567dc8632bd862a9",
        "filename": "src/wallet/walletdb.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/walletdb.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/walletdb.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/walletdb.h?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -272,9 +272,9 @@ class WalletBatch\n     /* Function to determine if a certain KV/key-type is a key (cryptographical key) type */\n     static bool IsKeyType(const std::string& strType);\n     /* verifies the database environment */\n-    static bool VerifyEnvironment(const fs::path& wallet_path, std::string& errorStr);\n+    static bool VerifyEnvironment(const fs::path& wallet_path, bilingual_str& errorStr);\n     /* verifies the database file */\n-    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<std::string>& warnings, std::string& errorStr);\n+    static bool VerifyDatabaseFile(const fs::path& wallet_path, std::vector<bilingual_str>& warnings, bilingual_str& errorStr);\n \n     //! write the hdchain model (external chain child index counter)\n     bool WriteHDChain(const CHDChain& chain);"
      },
      {
        "sha": "2193edcfa5f128150c7f3337d8b20367f9d698c4",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae51a5c6f4270a1088e6295b10a8cc45988ae46/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "patch": "@@ -4,6 +4,7 @@\n \n #include <fs.h>\n #include <util/system.h>\n+#include <util/translation.h>\n #include <wallet/wallet.h>\n #include <wallet/walletutil.h>\n \n@@ -117,7 +118,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n             tfm::format(std::cerr, \"Error: no wallet file at %s\\n\", name);\n             return false;\n         }\n-        std::string error;\n+        bilingual_str error;\n         if (!WalletBatch::VerifyEnvironment(path, error)) {\n             tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name);\n             return false;"
      }
    ]
  },
  {
    "sha": "fae7776690c37104d2d4949429c5f84e6a33c576",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYWU3Nzc2NjkwYzM3MTA0ZDJkNDk0OTQyOWM1Zjg0ZTZhMzNjNTc2",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T19:18:17Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-01T11:39:06Z"
      },
      "message": "wallet: Avoid translating RPC errors when creating txs\n\nAlso, mark feebumper bilingual_str as Untranslated\n\nThey are technical and have previously not been translated either.\nIt is questionable whether they can even appear in the GUI.",
      "tree": {
        "sha": "d9c999386cc2c85970a2b32f7af6efbb39d114eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/d9c999386cc2c85970a2b32f7af6efbb39d114eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fae7776690c37104d2d4949429c5f84e6a33c576",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUig6gv/ScbutV+aEdTEdEo+cACyWdeUZzhcpz2k59svLPK5Ig1j70+yNdDbp9mR\nX4IeVw0ut5oPtvhnDOU1YVLM/15TPCScj9jWqzbG4KTkF6416cE01g1zDZ1SIhmW\nrjdc6R5QO1gR0clEQl6T0cjvkbnZfI7twzRHm8ojYwOHqYDvWwdNPtG9yQkP0DOB\nGemMA1xRvi+1JzBp2Y14pTOpS38f/yNSld+PGFeumpFKO+w5c1uEPdff0QbuXIg9\nzlksSthXuUqhBhxJ5nVqBhpSoTq1DHXDEhmF/4FtcTbqm6rfjtZBEJa9fB2b+7Q1\n87LTrmp52vtxQ47p2ZWKv6kfpaAjEwQ8oXp0SNn7/l2+xEF0mXu0mvBwiunYokD3\n7p4GGtztqkAz97jeKCxu1y+AOeDKX6ZgFSsEjDl2nKopAYHuMLnmT+Lxrqhox6yL\nZbytuFpxyYT6x7DZCnhzB/thW6ndkJyxEb//nTkkk7Heq/MiOP/hC+614ZKLVLdU\nQq7tuE2t\n=j9cl\n-----END PGP SIGNATURE-----",
        "payload": "tree d9c999386cc2c85970a2b32f7af6efbb39d114eb\nparent fae51a5c6f4270a1088e6295b10a8cc45988ae46\nauthor MarcoFalke <falke.marco@gmail.com> 1587237497 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588333146 -0400\n\nwallet: Avoid translating RPC errors when creating txs\n\nAlso, mark feebumper bilingual_str as Untranslated\n\nThey are technical and have previously not been translated either.\nIt is questionable whether they can even appear in the GUI.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae7776690c37104d2d4949429c5f84e6a33c576",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fae7776690c37104d2d4949429c5f84e6a33c576",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae7776690c37104d2d4949429c5f84e6a33c576/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae51a5c6f4270a1088e6295b10a8cc45988ae46",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae51a5c6f4270a1088e6295b10a8cc45988ae46"
      }
    ],
    "stats": {
      "total": 185,
      "additions": 95,
      "deletions": 90
    },
    "files": [
      {
        "sha": "13b034936bf9b495868421c80236d106db8c77cb",
        "filename": "src/interfaces/wallet.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/interfaces/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/interfaces/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -219,7 +219,7 @@ class WalletImpl : public Wallet\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n-        std::string& fail_reason) override\n+        bilingual_str& fail_reason) override\n     {\n         LOCK(m_wallet->cs_wallet);\n         CTransactionRef tx;\n@@ -248,7 +248,7 @@ class WalletImpl : public Wallet\n     }\n     bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) override\n@@ -258,7 +258,7 @@ class WalletImpl : public Wallet\n     bool signBumpTransaction(CMutableTransaction& mtx) override { return feebumper::SignTransaction(*m_wallet.get(), mtx); }\n     bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         uint256& bumped_txid) override\n     {\n         return feebumper::CommitTransaction(*m_wallet.get(), txid, std::move(mtx), errors, bumped_txid) =="
      },
      {
        "sha": "f35335c69fb186c13ef6f5aeab77fd966b0963b2",
        "filename": "src/interfaces/wallet.h",
        "status": "modified",
        "additions": 4,
        "deletions": 3,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/interfaces/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/interfaces/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/wallet.h?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -31,6 +31,7 @@ enum class TransactionError;\n enum isminetype : unsigned int;\n struct CRecipient;\n struct PartiallySignedTransaction;\n+struct bilingual_str;\n typedef uint8_t isminefilter;\n \n namespace interfaces {\n@@ -136,7 +137,7 @@ class Wallet\n         bool sign,\n         int& change_pos,\n         CAmount& fee,\n-        std::string& fail_reason) = 0;\n+        bilingual_str& fail_reason) = 0;\n \n     //! Commit transaction.\n     virtual void commitTransaction(CTransactionRef tx,\n@@ -155,7 +156,7 @@ class Wallet\n     //! Create bump transaction.\n     virtual bool createBumpTransaction(const uint256& txid,\n         const CCoinControl& coin_control,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         CAmount& old_fee,\n         CAmount& new_fee,\n         CMutableTransaction& mtx) = 0;\n@@ -166,7 +167,7 @@ class Wallet\n     //! Commit bump transaction.\n     virtual bool commitBumpTransaction(const uint256& txid,\n         CMutableTransaction&& mtx,\n-        std::vector<std::string>& errors,\n+        std::vector<bilingual_str>& errors,\n         uint256& bumped_txid) = 0;\n \n     //! Get a transaction."
      },
      {
        "sha": "70ee7f4917824e43def5d715ed23dcb3fa4caca5",
        "filename": "src/qt/walletmodel.cpp",
        "status": "modified",
        "additions": 10,
        "deletions": 9,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/qt/walletmodel.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/qt/walletmodel.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/walletmodel.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -24,6 +24,7 @@\n #include <psbt.h>\n #include <ui_interface.h>\n #include <util/system.h> // for GetBoolArg\n+#include <util/translation.h>\n #include <wallet/coincontrol.h>\n #include <wallet/wallet.h> // for CRecipient\n \n@@ -185,10 +186,10 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n     {\n         CAmount nFeeRequired = 0;\n         int nChangePosRet = -1;\n-        std::string strFailReason;\n+        bilingual_str error;\n \n         auto& newTx = transaction.getWtx();\n-        newTx = m_wallet->createTransaction(vecSend, coinControl, !wallet().privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, strFailReason);\n+        newTx = m_wallet->createTransaction(vecSend, coinControl, !wallet().privateKeysDisabled() /* sign */, nChangePosRet, nFeeRequired, error);\n         transaction.setTransactionFee(nFeeRequired);\n         if (fSubtractFeeFromAmount && newTx)\n             transaction.reassignAmounts(nChangePosRet);\n@@ -199,8 +200,8 @@ WalletModel::SendCoinsReturn WalletModel::prepareTransaction(WalletModelTransact\n             {\n                 return SendCoinsReturn(AmountWithFeeExceedsBalance);\n             }\n-            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(strFailReason),\n-                         CClientUIInterface::MSG_ERROR);\n+            Q_EMIT message(tr(\"Send Coins\"), QString::fromStdString(error.translated),\n+                CClientUIInterface::MSG_ERROR);\n             return TransactionCreationFailed;\n         }\n \n@@ -482,14 +483,14 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n {\n     CCoinControl coin_control;\n     coin_control.m_signal_bip125_rbf = true;\n-    std::vector<std::string> errors;\n+    std::vector<bilingual_str> errors;\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n     if (!m_wallet->createBumpTransaction(hash, coin_control, errors, old_fee, new_fee, mtx)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Increasing transaction fee failed\") + \"<br />(\" +\n-            (errors.size() ? QString::fromStdString(errors[0]) : \"\") +\")\");\n-         return false;\n+            (errors.size() ? QString::fromStdString(errors[0].translated) : \"\") +\")\");\n+        return false;\n     }\n \n     const bool create_psbt = m_wallet->privateKeysDisabled();\n@@ -551,8 +552,8 @@ bool WalletModel::bumpFee(uint256 hash, uint256& new_hash)\n     // commit the bumped transaction\n     if(!m_wallet->commitBumpTransaction(hash, std::move(mtx), errors, new_hash)) {\n         QMessageBox::critical(nullptr, tr(\"Fee bump error\"), tr(\"Could not commit transaction\") + \"<br />(\" +\n-            QString::fromStdString(errors[0])+\")\");\n-         return false;\n+            QString::fromStdString(errors[0].translated)+\")\");\n+        return false;\n     }\n     return true;\n }"
      },
      {
        "sha": "ab34a41c7f1706e165d11b943d46fccaecfb6ddc",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 27,
        "deletions": 25,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -3,52 +3,53 @@\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n #include <interfaces/chain.h>\n-#include <wallet/coincontrol.h>\n-#include <wallet/feebumper.h>\n-#include <wallet/fees.h>\n-#include <wallet/wallet.h>\n #include <policy/fees.h>\n #include <policy/policy.h>\n #include <util/moneystr.h>\n #include <util/rbf.h>\n #include <util/system.h>\n+#include <util/translation.h>\n+#include <wallet/coincontrol.h>\n+#include <wallet/feebumper.h>\n+#include <wallet/fees.h>\n+#include <wallet/wallet.h>\n \n //! Check whether transaction has descendant in wallet or mempool, or has been\n //! mined, or conflicts with a mined transaction. Return a feebumper::Result.\n-static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<std::string>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n+static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWalletTx& wtx, std::vector<bilingual_str>& errors) EXCLUSIVE_LOCKS_REQUIRED(wallet.cs_wallet)\n {\n     if (wallet.HasWalletSpend(wtx.GetHash())) {\n-        errors.push_back(\"Transaction has descendants in the wallet\");\n+        errors.push_back(Untranslated(\"Transaction has descendants in the wallet\"));\n         return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     {\n         if (wallet.chain().hasDescendantsInMempool(wtx.GetHash())) {\n-            errors.push_back(\"Transaction has descendants in the mempool\");\n+            errors.push_back(Untranslated(\"Transaction has descendants in the mempool\"));\n             return feebumper::Result::INVALID_PARAMETER;\n         }\n     }\n \n     if (wtx.GetDepthInMainChain() != 0) {\n-        errors.push_back(\"Transaction has been mined, or is conflicted with a mined transaction\");\n+        errors.push_back(Untranslated(\"Transaction has been mined, or is conflicted with a mined transaction\"));\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n     if (!SignalsOptInRBF(*wtx.tx)) {\n-        errors.push_back(\"Transaction is not BIP 125 replaceable\");\n+        errors.push_back(Untranslated(\"Transaction is not BIP 125 replaceable\"));\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n     if (wtx.mapValue.count(\"replaced_by_txid\")) {\n-        errors.push_back(strprintf(\"Cannot bump transaction %s which was already bumped by transaction %s\", wtx.GetHash().ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n+        errors.push_back(strprintf(Untranslated(\"Cannot bump transaction %s which was already bumped by transaction %s\"), wtx.GetHash().ToString(), wtx.mapValue.at(\"replaced_by_txid\")));\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n     // check that original tx consists entirely of our inputs\n     // if not, we can't bump the fee, because the wallet has no way of knowing the value of the other inputs (thus the fee)\n     isminefilter filter = wallet.GetLegacyScriptPubKeyMan() && wallet.IsWalletFlagSet(WALLET_FLAG_DISABLE_PRIVATE_KEYS) ? ISMINE_WATCH_ONLY : ISMINE_SPENDABLE;\n     if (!wallet.IsAllFromMe(*wtx.tx, filter)) {\n-        errors.push_back(\"Transaction contains inputs that don't belong to this wallet\");\n+        errors.push_back(Untranslated(\"Transaction contains inputs that don't belong to this wallet\"));\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n@@ -57,7 +58,8 @@ static feebumper::Result PreconditionChecks(const CWallet& wallet, const CWallet\n }\n \n //! Check if the user provided a valid feeRate\n-static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CFeeRate& newFeerate, const int64_t maxTxSize, std::vector<std::string>& errors) {\n+static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wtx, const CFeeRate& newFeerate, const int64_t maxTxSize, std::vector<bilingual_str>& errors)\n+{\n     // check that fee rate is higher than mempool's minimum fee\n     // (no point in bumping fee if we know that the new tx won't be accepted to the mempool)\n     // This may occur if the user set fee_rate or paytxfee too low, if fallbackfee is too low, or, perhaps,\n@@ -67,7 +69,7 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n \n     if (newFeerate.GetFeePerK() < minMempoolFeeRate.GetFeePerK()) {\n         errors.push_back(strprintf(\n-            \"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \",\n+            Untranslated(\"New fee rate (%s) is lower than the minimum fee rate (%s) to get into the mempool -- \"),\n             FormatMoney(newFeerate.GetFeePerK()),\n             FormatMoney(minMempoolFeeRate.GetFeePerK())));\n         return feebumper::Result::WALLET_ERROR;\n@@ -86,23 +88,23 @@ static feebumper::Result CheckFeeRate(const CWallet& wallet, const CWalletTx& wt\n     CAmount minTotalFee = nOldFeeRate.GetFee(maxTxSize) + incrementalRelayFee.GetFee(maxTxSize);\n \n     if (new_total_fee < minTotalFee) {\n-        errors.push_back(strprintf(\"Insufficient total fee %s, must be at least %s (oldFee %s + incrementalFee %s)\",\n+        errors.push_back(strprintf(Untranslated(\"Insufficient total fee %s, must be at least %s (oldFee %s + incrementalFee %s)\"),\n             FormatMoney(new_total_fee), FormatMoney(minTotalFee), FormatMoney(nOldFeeRate.GetFee(maxTxSize)), FormatMoney(incrementalRelayFee.GetFee(maxTxSize))));\n         return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     CAmount requiredFee = GetRequiredFee(wallet, maxTxSize);\n     if (new_total_fee < requiredFee) {\n-        errors.push_back(strprintf(\"Insufficient total fee (cannot be less than required fee %s)\",\n+        errors.push_back(strprintf(Untranslated(\"Insufficient total fee (cannot be less than required fee %s)\"),\n             FormatMoney(requiredFee)));\n         return feebumper::Result::INVALID_PARAMETER;\n     }\n \n     // Check that in all cases the new fee doesn't violate maxTxFee\n     const CAmount max_tx_fee = wallet.m_default_max_tx_fee;\n     if (new_total_fee > max_tx_fee) {\n-        errors.push_back(strprintf(\"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)\",\n-                            FormatMoney(new_total_fee), FormatMoney(max_tx_fee)));\n+        errors.push_back(strprintf(Untranslated(\"Specified or calculated fee %s is too high (cannot be higher than -maxtxfee %s)\"),\n+            FormatMoney(new_total_fee), FormatMoney(max_tx_fee)));\n         return feebumper::Result::WALLET_ERROR;\n     }\n \n@@ -144,12 +146,12 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid)\n     const CWalletTx* wtx = wallet.GetWalletTx(txid);\n     if (wtx == nullptr) return false;\n \n-    std::vector<std::string> errors_dummy;\n+    std::vector<bilingual_str> errors_dummy;\n     feebumper::Result res = PreconditionChecks(wallet, *wtx, errors_dummy);\n     return res == feebumper::Result::OK;\n }\n \n-Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<std::string>& errors,\n+Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCoinControl& coin_control, std::vector<bilingual_str>& errors,\n                                  CAmount& old_fee, CAmount& new_fee, CMutableTransaction& mtx)\n {\n     // We are going to modify coin control later, copy to re-use\n@@ -159,7 +161,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     errors.clear();\n     auto it = wallet.mapWallet.find(txid);\n     if (it == wallet.mapWallet.end()) {\n-        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        errors.push_back(Untranslated(\"Invalid or non-wallet transaction id\"));\n         return Result::INVALID_ADDRESS_OR_KEY;\n     }\n     const CWalletTx& wtx = it->second;\n@@ -216,9 +218,9 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     CTransactionRef tx_new = MakeTransactionRef();\n     CAmount fee_ret;\n     int change_pos_in_out = -1; // No requested location for change\n-    std::string fail_reason;\n+    bilingual_str fail_reason;\n     if (!wallet.CreateTransaction(recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n-        errors.push_back(\"Unable to create transaction: \" + fail_reason);\n+        errors.push_back(Untranslated(\"Unable to create transaction: \") + Untranslated(\" \") + fail_reason);\n         return Result::WALLET_ERROR;\n     }\n \n@@ -242,15 +244,15 @@ bool SignTransaction(CWallet& wallet, CMutableTransaction& mtx) {\n     return wallet.SignTransaction(mtx);\n }\n \n-Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<std::string>& errors, uint256& bumped_txid)\n+Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransaction&& mtx, std::vector<bilingual_str>& errors, uint256& bumped_txid)\n {\n     LOCK(wallet.cs_wallet);\n     if (!errors.empty()) {\n         return Result::MISC_ERROR;\n     }\n     auto it = txid.IsNull() ? wallet.mapWallet.end() : wallet.mapWallet.find(txid);\n     if (it == wallet.mapWallet.end()) {\n-        errors.push_back(\"Invalid or non-wallet transaction id\");\n+        errors.push_back(Untranslated(\"Invalid or non-wallet transaction id\"));\n         return Result::MISC_ERROR;\n     }\n     CWalletTx& oldWtx = it->second;\n@@ -275,7 +277,7 @@ Result CommitTransaction(CWallet& wallet, const uint256& txid, CMutableTransacti\n         // along with an exception. It would be good to return information about\n         // wtxBumped to the caller even if marking the original transaction\n         // replaced does not succeed for some reason.\n-        errors.push_back(\"Created new bumpfee transaction but could not mark the original transaction as replaced\");\n+        errors.push_back(Untranslated(\"Created new bumpfee transaction but could not mark the original transaction as replaced\"));\n     }\n     return Result::OK;\n }"
      },
      {
        "sha": "50577c9d3e52a923e5fab5bdd31da2e201a4f4cd",
        "filename": "src/wallet/feebumper.h",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/feebumper.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/feebumper.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.h?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -12,6 +12,7 @@ class CWalletTx;\n class uint256;\n class CCoinControl;\n enum class FeeEstimateMode;\n+struct bilingual_str;\n \n namespace feebumper {\n \n@@ -30,12 +31,12 @@ bool TransactionCanBeBumped(const CWallet& wallet, const uint256& txid);\n \n //! Create bumpfee transaction based on feerate estimates.\n Result CreateRateBumpTransaction(CWallet& wallet,\n-                         const uint256& txid,\n-                         const CCoinControl& coin_control,\n-                         std::vector<std::string>& errors,\n-                         CAmount& old_fee,\n-                         CAmount& new_fee,\n-                         CMutableTransaction& mtx);\n+    const uint256& txid,\n+    const CCoinControl& coin_control,\n+    std::vector<bilingual_str>& errors,\n+    CAmount& old_fee,\n+    CAmount& new_fee,\n+    CMutableTransaction& mtx);\n \n //! Sign the new transaction,\n //! @return false if the tx couldn't be found or if it was\n@@ -47,10 +48,10 @@ bool SignTransaction(CWallet& wallet, CMutableTransaction& mtx);\n //! but sets errors if the tx could not be added to the mempool (will try later)\n //! or if the old transaction could not be marked as replaced.\n Result CommitTransaction(CWallet& wallet,\n-                         const uint256& txid,\n-                         CMutableTransaction&& mtx,\n-                         std::vector<std::string>& errors,\n-                         uint256& bumped_txid);\n+    const uint256& txid,\n+    CMutableTransaction&& mtx,\n+    std::vector<bilingual_str>& errors,\n+    uint256& bumped_txid);\n \n } // namespace feebumper\n "
      },
      {
        "sha": "e666d55e116ce118a902c405d1c205077b7aa4c7",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 19,
        "deletions": 19,
        "changes": 38,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -339,16 +339,16 @@ static CTransactionRef SendMoney(CWallet* const pwallet, const CTxDestination& a\n \n     // Create and send the transaction\n     CAmount nFeeRequired = 0;\n-    std::string strError;\n+    bilingual_str error;\n     std::vector<CRecipient> vecSend;\n     int nChangePosRet = -1;\n     CRecipient recipient = {scriptPubKey, nValue, fSubtractFeeFromAmount};\n     vecSend.push_back(recipient);\n     CTransactionRef tx;\n-    if (!pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, strError, coin_control)) {\n+    if (!pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control)) {\n         if (!fSubtractFeeFromAmount && nValue + nFeeRequired > curBalance)\n-            strError = strprintf(\"Error: This transaction requires a transaction fee of at least %s\", FormatMoney(nFeeRequired));\n-        throw JSONRPCError(RPC_WALLET_ERROR, strError);\n+            error = strprintf(Untranslated(\"Error: This transaction requires a transaction fee of at least %s\"), FormatMoney(nFeeRequired));\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n     pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n     return tx;\n@@ -904,11 +904,11 @@ static UniValue sendmany(const JSONRPCRequest& request)\n     // Send\n     CAmount nFeeRequired = 0;\n     int nChangePosRet = -1;\n-    std::string strFailReason;\n+    bilingual_str error;\n     CTransactionRef tx;\n-    bool fCreated = pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, strFailReason, coin_control);\n+    bool fCreated = pwallet->CreateTransaction(vecSend, tx, nFeeRequired, nChangePosRet, error, coin_control);\n     if (!fCreated)\n-        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, strFailReason);\n+        throw JSONRPCError(RPC_WALLET_INSUFFICIENT_FUNDS, error.original);\n     pwallet->CommitTransaction(tx, std::move(mapValue), {} /* orderForm */);\n     return tx->GetHash().GetHex();\n }\n@@ -3109,10 +3109,10 @@ void FundTransaction(CWallet* const pwallet, CMutableTransaction& tx, CAmount& f\n         setSubtractFeeFromOutputs.insert(pos);\n     }\n \n-    std::string strFailReason;\n+    bilingual_str error;\n \n-    if (!pwallet->FundTransaction(tx, fee_out, change_position, strFailReason, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n-        throw JSONRPCError(RPC_WALLET_ERROR, strFailReason);\n+    if (!pwallet->FundTransaction(tx, fee_out, change_position, error, lockUnspents, setSubtractFeeFromOutputs, coinControl)) {\n+        throw JSONRPCError(RPC_WALLET_ERROR, error.original);\n     }\n }\n \n@@ -3418,7 +3418,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     EnsureWalletIsUnlocked(pwallet);\n \n \n-    std::vector<std::string> errors;\n+    std::vector<bilingual_str> errors;\n     CAmount old_fee;\n     CAmount new_fee;\n     CMutableTransaction mtx;\n@@ -3428,19 +3428,19 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     if (res != feebumper::Result::OK) {\n         switch(res) {\n             case feebumper::Result::INVALID_ADDRESS_OR_KEY:\n-                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0]);\n+                throw JSONRPCError(RPC_INVALID_ADDRESS_OR_KEY, errors[0].original);\n                 break;\n             case feebumper::Result::INVALID_REQUEST:\n-                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0]);\n+                throw JSONRPCError(RPC_INVALID_REQUEST, errors[0].original);\n                 break;\n             case feebumper::Result::INVALID_PARAMETER:\n-                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0]);\n+                throw JSONRPCError(RPC_INVALID_PARAMETER, errors[0].original);\n                 break;\n             case feebumper::Result::WALLET_ERROR:\n-                throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+                throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n                 break;\n             default:\n-                throw JSONRPCError(RPC_MISC_ERROR, errors[0]);\n+                throw JSONRPCError(RPC_MISC_ERROR, errors[0].original);\n                 break;\n         }\n     }\n@@ -3456,7 +3456,7 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n \n         uint256 txid;\n         if (feebumper::CommitTransaction(*pwallet, hash, std::move(mtx), errors, txid) != feebumper::Result::OK) {\n-            throw JSONRPCError(RPC_WALLET_ERROR, errors[0]);\n+            throw JSONRPCError(RPC_WALLET_ERROR, errors[0].original);\n         }\n \n         result.pushKV(\"txid\", txid.GetHex());\n@@ -3474,8 +3474,8 @@ static UniValue bumpfee(const JSONRPCRequest& request)\n     result.pushKV(\"origfee\", ValueFromAmount(old_fee));\n     result.pushKV(\"fee\", ValueFromAmount(new_fee));\n     UniValue result_errors(UniValue::VARR);\n-    for (const std::string& error : errors) {\n-        result_errors.push_back(error);\n+    for (const bilingual_str& error : errors) {\n+        result_errors.push_back(error.original);\n     }\n     result.pushKV(\"errors\", result_errors);\n "
      },
      {
        "sha": "0826b88f0a0064ca19ad6fb0e9731a8b8c4a3223",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -516,7 +516,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         CTransactionRef tx;\n         CAmount fee;\n         int changePos = -1;\n-        std::string error;\n+        bilingual_str error;\n         CCoinControl dummy;\n         {\n             BOOST_CHECK(wallet->CreateTransaction({recipient}, tx, fee, changePos, error, dummy));"
      },
      {
        "sha": "c1abba7878ef1ba8ec4f2d25f65d225da33acb60",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 18,
        "deletions": 18,
        "changes": 36,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -2521,7 +2521,7 @@ SigningResult CWallet::SignMessage(const std::string& message, const PKHash& pkh\n     return SigningResult::PRIVATE_KEY_NOT_AVAILABLE;\n }\n \n-bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n+bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl coinControl)\n {\n     std::vector<CRecipient> vecSend;\n \n@@ -2543,7 +2543,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     LOCK(cs_wallet);\n \n     CTransactionRef tx_new;\n-    if (!CreateTransaction(vecSend, tx_new, nFeeRet, nChangePosInOut, strFailReason, coinControl, false)) {\n+    if (!CreateTransaction(vecSend, tx_new, nFeeRet, nChangePosInOut, error, coinControl, false)) {\n         return false;\n     }\n \n@@ -2659,7 +2659,7 @@ OutputType CWallet::TransactionChangeType(OutputType change_type, const std::vec\n     return m_default_address_type;\n }\n \n-bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n+bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign)\n {\n     CAmount nValue = 0;\n     const OutputType change_type = TransactionChangeType(coin_control.m_change_type ? *coin_control.m_change_type : m_default_change_type, vecSend);\n@@ -2670,7 +2670,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     {\n         if (nValue < 0 || recipient.nAmount < 0)\n         {\n-            strFailReason = _(\"Transaction amounts must not be negative\").translated;\n+            error = _(\"Transaction amounts must not be negative\");\n             return false;\n         }\n         nValue += recipient.nAmount;\n@@ -2680,7 +2680,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n     }\n     if (vecSend.empty())\n     {\n-        strFailReason = _(\"Transaction must have at least one recipient\").translated;\n+        error = _(\"Transaction must have at least one recipient\");\n         return false;\n     }\n \n@@ -2717,7 +2717,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                 // destination in case we don't need change.\n                 CTxDestination dest;\n                 if (!reservedest.GetReservedDestination(dest, true)) {\n-                    strFailReason = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\").translated;\n+                    error = _(\"Transaction needs a change address, but we can't generate it. Please call keypoolrefill first.\");\n                 }\n                 scriptChange = GetScriptForDestination(dest);\n                 assert(!dest.empty() || scriptChange.empty());\n@@ -2779,12 +2779,12 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                         if (recipient.fSubtractFeeFromAmount && nFeeRet > 0)\n                         {\n                             if (txout.nValue < 0)\n-                                strFailReason = _(\"The transaction amount is too small to pay the fee\").translated;\n+                                error = _(\"The transaction amount is too small to pay the fee\");\n                             else\n-                                strFailReason = _(\"The transaction amount is too small to send after the fee has been deducted\").translated;\n+                                error = _(\"The transaction amount is too small to send after the fee has been deducted\");\n                         }\n                         else\n-                            strFailReason = _(\"Transaction amount too small\").translated;\n+                            error = _(\"Transaction amount too small\");\n                         return false;\n                     }\n                     txNew.vout.push_back(txout);\n@@ -2812,7 +2812,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                             continue;\n                         }\n                         else {\n-                            strFailReason = _(\"Insufficient funds\").translated;\n+                            error = _(\"Insufficient funds\");\n                             return false;\n                         }\n                     }\n@@ -2843,7 +2843,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                         }\n                         else if ((unsigned int)nChangePosInOut > txNew.vout.size())\n                         {\n-                            strFailReason = _(\"Change index out of range\").translated;\n+                            error = _(\"Change index out of range\");\n                             return false;\n                         }\n \n@@ -2862,14 +2862,14 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n \n                 nBytes = CalculateMaximumSignedTxSize(CTransaction(txNew), this, coin_control.fAllowWatchOnly);\n                 if (nBytes < 0) {\n-                    strFailReason = _(\"Signing transaction failed\").translated;\n+                    error = _(\"Signing transaction failed\");\n                     return false;\n                 }\n \n                 nFeeNeeded = GetMinimumFee(*this, nBytes, coin_control, &feeCalc);\n                 if (feeCalc.reason == FeeReason::FALLBACK && !m_allow_fallback_fee) {\n                     // eventually allow a fallback fee\n-                    strFailReason = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\").translated;\n+                    error = _(\"Fee estimation failed. Fallbackfee is disabled. Wait a few blocks or enable -fallbackfee.\");\n                     return false;\n                 }\n \n@@ -2909,7 +2909,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n                     // fee to pay for the new output and still meet nFeeNeeded\n                     // Or we should have just subtracted fee from recipients and\n                     // nFeeNeeded should not have changed\n-                    strFailReason = _(\"Transaction fee and change calculation failed\").translated;\n+                    error = _(\"Transaction fee and change calculation failed\");\n                     return false;\n                 }\n \n@@ -2962,7 +2962,7 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         }\n \n         if (sign && !SignTransaction(txNew)) {\n-            strFailReason = _(\"Signing transaction failed\").translated;\n+            error = _(\"Signing transaction failed\");\n             return false;\n         }\n \n@@ -2972,20 +2972,20 @@ bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CTransac\n         // Limit size\n         if (GetTransactionWeight(*tx) > MAX_STANDARD_TX_WEIGHT)\n         {\n-            strFailReason = _(\"Transaction too large\").translated;\n+            error = _(\"Transaction too large\");\n             return false;\n         }\n     }\n \n     if (nFeeRet > m_default_max_tx_fee) {\n-        strFailReason = TransactionErrorString(TransactionError::MAX_FEE_EXCEEDED);\n+        error = Untranslated(TransactionErrorString(TransactionError::MAX_FEE_EXCEEDED));\n         return false;\n     }\n \n     if (gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS)) {\n         // Lastly, ensure this tx will pass the mempool's chain limits\n         if (!chain().checkChainLimits(tx)) {\n-            strFailReason = _(\"Transaction has too long of a mempool chain\").translated;\n+            error = _(\"Transaction has too long of a mempool chain\");\n             return false;\n         }\n     }"
      },
      {
        "sha": "3be343559634e91dee2a0677005c351175478b7a",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fae7776690c37104d2d4949429c5f84e6a33c576/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=fae7776690c37104d2d4949429c5f84e6a33c576",
        "patch": "@@ -932,7 +932,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * Insert additional inputs into the transaction by\n      * calling CreateTransaction();\n      */\n-    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n+    bool FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, bool lockUnspents, const std::set<int>& setSubtractFeeFromOutputs, CCoinControl);\n     // Fetch the inputs and sign with SIGHASH_ALL.\n     bool SignTransaction(CMutableTransaction& tx) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     // Sign the tx given the input coins and sighash.\n@@ -963,7 +963,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n      * selected by SelectCoins(); Also create the change output, when needed\n      * @note passing nChangePosInOut as -1 will result in setting a random position\n      */\n-    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign = true);\n+    bool CreateTransaction(const std::vector<CRecipient>& vecSend, CTransactionRef& tx, CAmount& nFeeRet, int& nChangePosInOut, bilingual_str& error, const CCoinControl& coin_control, bool sign = true);\n     /**\n      * Submit the transaction to the node's mempool and then relay to peers.\n      * Should be called after CreateTransaction unless you want to abort"
      }
    ]
  },
  {
    "sha": "fa59cc1c977cce8f1f28374ac2169970ca78a35f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTU5Y2MxYzk3N2NjZThmMWYyODM3NGFjMjE2OTk3MGNhNzhhMzVm",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-18T22:31:01Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-01T11:39:35Z"
      },
      "message": "wallet: Report full error message in wallettool",
      "tree": {
        "sha": "1d506d7a494328d28ae41083d78b547abf162664",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1d506d7a494328d28ae41083d78b547abf162664"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa59cc1c977cce8f1f28374ac2169970ca78a35f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjiUQv9Egt4BupbwK/1/rxfgfQ9F4ZtBqv1Fwz8PI2dGFVBKYUy+tOs6FYKQPth\nV6F7gqm0p9CWEBFW0Cim0IcclNjVxZ2PGWQu14RQrF8TIA7RENx7dbIuEQHbmqnt\njrm+SnI/5UI/6OfiCQNLoUUlQhM1Zbyp7XprEqwvqjLydv4rdLDjFY9nYX/psnh/\nTa4ZKUWdptjNPo0IWCFQkZiwT+NLEljALIYPp9GghogYmCjHgPik6bQlxFBa68xo\n9tSVoDoi45icHfMfM9v5JSnRLrpcl6+c8uwohYoy6NO91FPWZGcll4q0EzBBz/C7\nTGbRgH+6Gqwnr1e6EDtOS9a1MsgsRM2FW/OLRu2FKWLCQ+jHrykxiaP1a7w3NZCC\nQizM8UDSvsSF+WLfnKkToXhqzebu6IRfOC341YsyWd9lIDP6f9Fgq1ty/lhdHXsC\nR2SDgNfan6JmroDjTYGfv5a0rgpDX6R8QR/lutkWv6/200RE2SXO6316sHfGxHXA\ntbqe0WoP\n=fRY3\n-----END PGP SIGNATURE-----",
        "payload": "tree 1d506d7a494328d28ae41083d78b547abf162664\nparent fae7776690c37104d2d4949429c5f84e6a33c576\nauthor MarcoFalke <falke.marco@gmail.com> 1587249061 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588333175 -0400\n\nwallet: Report full error message in wallettool\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa59cc1c977cce8f1f28374ac2169970ca78a35f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa59cc1c977cce8f1f28374ac2169970ca78a35f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa59cc1c977cce8f1f28374ac2169970ca78a35f/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fae7776690c37104d2d4949429c5f84e6a33c576",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fae7776690c37104d2d4949429c5f84e6a33c576",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fae7776690c37104d2d4949429c5f84e6a33c576"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 11,
      "deletions": 5
    },
    "files": [
      {
        "sha": "522efaa8844fd8781e0f5dc2fd7e0479568168d9",
        "filename": "src/wallet/wallettool.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa59cc1c977cce8f1f28374ac2169970ca78a35f/src/wallet/wallettool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa59cc1c977cce8f1f28374ac2169970ca78a35f/src/wallet/wallettool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallettool.cpp?ref=fa59cc1c977cce8f1f28374ac2169970ca78a35f",
        "patch": "@@ -120,7 +120,7 @@ bool ExecuteWalletToolFunc(const std::string& command, const std::string& name)\n         }\n         bilingual_str error;\n         if (!WalletBatch::VerifyEnvironment(path, error)) {\n-            tfm::format(std::cerr, \"Error loading %s. Is wallet being used by other process?\\n\", name);\n+            tfm::format(std::cerr, \"%s\\nError loading %s. Is wallet being used by other process?\\n\", error.original, name);\n             return false;\n         }\n         std::shared_ptr<CWallet> wallet_instance = LoadWallet(name, path);"
      },
      {
        "sha": "039ce7daee2b53bc3c90996b28a7d229f66c450e",
        "filename": "test/functional/tool_wallet.py",
        "status": "modified",
        "additions": 10,
        "deletions": 4,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa59cc1c977cce8f1f28374ac2169970ca78a35f/test/functional/tool_wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa59cc1c977cce8f1f28374ac2169970ca78a35f/test/functional/tool_wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/tool_wallet.py?ref=fa59cc1c977cce8f1f28374ac2169970ca78a35f",
        "patch": "@@ -15,6 +15,7 @@\n \n BUFFER_SIZE = 16 * 1024\n \n+\n class ToolWalletTest(BitcoinTestFramework):\n     def set_test_params(self):\n         self.num_nodes = 1\n@@ -48,7 +49,7 @@ def wallet_shasum(self):\n         h = hashlib.sha1()\n         mv = memoryview(bytearray(BUFFER_SIZE))\n         with open(self.wallet_path, 'rb', buffering=0) as f:\n-            for n in iter(lambda : f.readinto(mv), 0):\n+            for n in iter(lambda: f.readinto(mv), 0):\n                 h.update(mv[:n])\n         return h.hexdigest()\n \n@@ -69,7 +70,12 @@ def test_invalid_tool_commands_and_args(self):\n         self.assert_raises_tool_error('Invalid command: help', 'help')\n         self.assert_raises_tool_error('Error: two methods provided (info and create). Only one method should be provided.', 'info', 'create')\n         self.assert_raises_tool_error('Error parsing command line arguments: Invalid parameter -foo', '-foo')\n-        self.assert_raises_tool_error('Error loading wallet.dat. Is wallet being used by other process?', '-wallet=wallet.dat', 'info')\n+        self.assert_raises_tool_error(\n+            'Error initializing wallet database environment \"{}\"!\\nError loading wallet.dat. Is wallet being used by other process?'\n+            .format(os.path.join(self.nodes[0].datadir, self.chain, 'wallets')),\n+            '-wallet=wallet.dat',\n+            'info',\n+        )\n         self.assert_raises_tool_error('Error: no wallet file at nonexistent.dat', '-wallet=nonexistent.dat', 'info')\n \n     def test_tool_wallet_info(self):\n@@ -84,7 +90,7 @@ def test_tool_wallet_info(self):\n         #\n         # self.log.debug('Setting wallet file permissions to 400 (read-only)')\n         # os.chmod(self.wallet_path, stat.S_IRUSR)\n-        # assert(self.wallet_permissions() in ['400', '666']) # Sanity check. 666 because Appveyor.\n+        # assert self.wallet_permissions() in ['400', '666'] # Sanity check. 666 because Appveyor.\n         # shasum_before = self.wallet_shasum()\n         timestamp_before = self.wallet_timestamp()\n         self.log.debug('Wallet file timestamp before calling info: {}'.format(timestamp_before))\n@@ -103,7 +109,7 @@ def test_tool_wallet_info(self):\n         self.log_wallet_timestamp_comparison(timestamp_before, timestamp_after)\n         self.log.debug('Setting wallet file permissions back to 600 (read/write)')\n         os.chmod(self.wallet_path, stat.S_IRUSR | stat.S_IWUSR)\n-        assert(self.wallet_permissions() in ['600', '666']) # Sanity check. 666 because Appveyor.\n+        assert self.wallet_permissions() in ['600', '666']  # Sanity check. 666 because Appveyor.\n         #\n         # TODO: Wallet tool info should not write to the wallet file.\n         # The following lines should be uncommented and the tests still succeed:"
      }
    ]
  },
  {
    "sha": "fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTJjY2U0MzkxYjBiMWJkYTMyNWY2OTViYjQ1ZjdiNTY1YzhlOGVh",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-04-21T11:53:24Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2020-05-01T11:41:32Z"
      },
      "message": "wallet: Remove trailing whitespace from potential translation strings\n\nIf the potential translation strings are translated in the future,\ntrailing whitespace is going to make translation effort harder.",
      "tree": {
        "sha": "93abceb99d15fec7d1cf7f5c730b83cedcb30759",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/93abceb99d15fec7d1cf7f5c730b83cedcb30759"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEE+rVPoUahrI9sLGYTzit1aX5ppUgFAlwqrYAACgkQzit1aX5p\npUjugwwAqHY+nPitP6RmrvJuN1hM8G3cCKneTqljh6ZKTRZOm1mGSi8Z4M1EUP/1\nVOK8Boi5pBr/mtwD2+E33TdYa8K6V8sTD/BPWs0tHgdUkes5X6U3x/+21MWw9fcw\ntSNcOp4uw3421dQfPLsr6suJQPfQEqXf5d2YqCzSNJj6RIg3iLiZ3p2NUx6mOUi2\nulBilw43hoITI38Ud1CQ0g2spEK1LJSs05upDegFH0yA9PGKTsU53hNkN218UZBc\ns15HKd/cT0NwW64UviMsexgd9qSdJQQB9z9aOi8CmtCTdAUlzgmZutvsFmcW2/J9\nG12eEsjUem9oAuore+WYR37cR3QoeuRAG7Aqx27tm1P2bo+7gTJWUOTPdDTr6Oa5\n7n3T6pHT5gMyeqI+CSzgVrMnfKwnpE0/bm18NdOQhTg0Gnw2mMsa/4jfqDpSXO2F\nesAYQfmBUVL2QqSJmgRhd2fBCDYFIAi3Cy96btvwz6PmTd2ncPKAM68mCGYwFsaI\no7VO9SwZ\n=nNNO\n-----END PGP SIGNATURE-----",
        "payload": "tree 93abceb99d15fec7d1cf7f5c730b83cedcb30759\nparent fa59cc1c977cce8f1f28374ac2169970ca78a35f\nauthor MarcoFalke <falke.marco@gmail.com> 1587470004 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1588333292 -0400\n\nwallet: Remove trailing whitespace from potential translation strings\n\nIf the potential translation strings are translated in the future,\ntrailing whitespace is going to make translation effort harder.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fa59cc1c977cce8f1f28374ac2169970ca78a35f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa59cc1c977cce8f1f28374ac2169970ca78a35f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fa59cc1c977cce8f1f28374ac2169970ca78a35f"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 8,
      "deletions": 8
    },
    "files": [
      {
        "sha": "cacf3068911f3c4be7e10b7245ee463fcd72880f",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
        "patch": "@@ -220,7 +220,7 @@ Result CreateRateBumpTransaction(CWallet& wallet, const uint256& txid, const CCo\n     int change_pos_in_out = -1; // No requested location for change\n     bilingual_str fail_reason;\n     if (!wallet.CreateTransaction(recipients, tx_new, fee_ret, change_pos_in_out, fail_reason, new_coin_control, false)) {\n-        errors.push_back(Untranslated(\"Unable to create transaction: \") + Untranslated(\" \") + fail_reason);\n+        errors.push_back(Untranslated(\"Unable to create transaction.\") + Untranslated(\" \") + fail_reason);\n         return Result::WALLET_ERROR;\n     }\n "
      },
      {
        "sha": "a893548971ddca9a16eb84e8f248b6754d01e576",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
        "patch": "@@ -154,13 +154,13 @@ std::shared_ptr<CWallet> LoadWallet(interfaces::Chain& chain, const WalletLocati\n {\n     try {\n         if (!CWallet::Verify(chain, location, false, error, warnings)) {\n-            error = Untranslated(\"Wallet file verification failed: \") + error;\n+            error = Untranslated(\"Wallet file verification failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n \n         std::shared_ptr<CWallet> wallet = CWallet::CreateWalletFromFile(chain, location, error, warnings);\n         if (!wallet) {\n-            error = Untranslated(\"Wallet loading failed: \") + error;\n+            error = Untranslated(\"Wallet loading failed.\") + Untranslated(\" \") + error;\n             return nullptr;\n         }\n         AddWallet(wallet);"
      },
      {
        "sha": "27197e3b6d0d4067ec17b052eeadf87eadfb0add",
        "filename": "test/functional/wallet_bumpfee.py",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/test/functional/wallet_bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/test/functional/wallet_bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_bumpfee.py?ref=fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
        "patch": "@@ -300,7 +300,7 @@ def test_maxtxfee_fails(self, rbf_node, dest_address):\n     self.restart_node(1, ['-maxtxfee=0.000025'] + self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n     rbfid = spend_one_input(rbf_node, dest_address)\n-    assert_raises_rpc_error(-4, \"Unable to create transaction: Fee exceeds maximum configured by -maxtxfee\", rbf_node.bumpfee, rbfid)\n+    assert_raises_rpc_error(-4, \"Unable to create transaction. Fee exceeds maximum configured by -maxtxfee\", rbf_node.bumpfee, rbfid)\n     self.restart_node(1, self.extra_args[1])\n     rbf_node.walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n@@ -517,7 +517,7 @@ def test_no_more_inputs_fails(self, rbf_node, dest_address):\n     rbf_node.generatetoaddress(1, dest_address)\n     # spend all funds, no change output\n     rbfid = rbf_node.sendtoaddress(rbf_node.getnewaddress(), rbf_node.getbalance(), \"\", \"\", True)\n-    assert_raises_rpc_error(-4, \"Unable to create transaction: Insufficient funds\", rbf_node.bumpfee, rbfid)\n+    assert_raises_rpc_error(-4, \"Unable to create transaction. Insufficient funds\", rbf_node.bumpfee, rbfid)\n \n \n if __name__ == \"__main__\":"
      },
      {
        "sha": "580a61f9f3adf9d4d2e90d78b4f017797e449614",
        "filename": "test/functional/wallet_multiwallet.py",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/test/functional/wallet_multiwallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa2cce4391b0b1bda325f695bb45f7b565c8e8ea/test/functional/wallet_multiwallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_multiwallet.py?ref=fa2cce4391b0b1bda325f695bb45f7b565c8e8ea",
        "patch": "@@ -227,10 +227,10 @@ def wallet_file(name):\n         assert_raises_rpc_error(-18, 'Wallet wallets not found.', self.nodes[0].loadwallet, 'wallets')\n \n         # Fail to load duplicate wallets\n-        assert_raises_rpc_error(-4, 'Wallet file verification failed: Error loading wallet w1. Duplicate -wallet filename specified.', self.nodes[0].loadwallet, wallet_names[0])\n+        assert_raises_rpc_error(-4, 'Wallet file verification failed. Error loading wallet w1. Duplicate -wallet filename specified.', self.nodes[0].loadwallet, wallet_names[0])\n \n         # Fail to load duplicate wallets by different ways (directory and filepath)\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed: Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed. Error loading wallet wallet.dat. Duplicate -wallet filename specified.\", self.nodes[0].loadwallet, 'wallet.dat')\n \n         # Fail to load if one wallet is a copy of another\n         assert_raises_rpc_error(-4, \"BerkeleyBatch: Can't open database w8_copy (duplicates fileid\", self.nodes[0].loadwallet, 'w8_copy')\n@@ -240,7 +240,7 @@ def wallet_file(name):\n \n \n         # Fail to load if wallet file is a symlink\n-        assert_raises_rpc_error(-4, \"Wallet file verification failed: Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n+        assert_raises_rpc_error(-4, \"Wallet file verification failed. Invalid -wallet path 'w8_symlink'\", self.nodes[0].loadwallet, 'w8_symlink')\n \n         # Fail to load if a directory is specified that doesn't contain a wallet\n         os.mkdir(wallet_dir('empty_wallet_dir'))"
      }
    ]
  }
]