[
  {
    "sha": "d97fe2016cc7739929aac5c44de5037163b17ad0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkOTdmZTIwMTZjYzc3Mzk5MjlhYWM1YzQ0ZGU1MDM3MTYzYjE3YWQw",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-02T11:19:28Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T15:19:38Z"
      },
      "message": "Move some static functions out of wallet.h/cpp\n\nThis commit just moves a few function declarations and updates callers.\nFunction bodies are moved in two followup MOVEONLY commits.\n\nThis change is desirable because wallet.h/cpp are monolithic and hard to\nnavigate, so pulling things out and grouping together pieces of related\nfunctionality should improve the organization.\n\nAnother proximate motivation is the wallet process separation work in\nhttps://github.com/bitcoin/bitcoin/pull/10973, where (at least initially)\nparameter parsing and fee estimation are still done in the main process rather\nthan the wallet process, and having functions that run in different processes\nscrambled up throughout wallet.cpp is unnecessarily confusing.",
      "tree": {
        "sha": "c982d313f3fffdcad406ce75f5c5bfe49169f605",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c982d313f3fffdcad406ce75f5c5bfe49169f605"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d97fe2016cc7739929aac5c44de5037163b17ad0",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97fe2016cc7739929aac5c44de5037163b17ad0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d97fe2016cc7739929aac5c44de5037163b17ad0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97fe2016cc7739929aac5c44de5037163b17ad0/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/c2704ec98a1b7b35b6a7c1b6b26a3f16d44e8880"
      }
    ],
    "stats": {
      "total": 167,
      "additions": 117,
      "deletions": 50
    },
    "files": [
      {
        "sha": "dea656869d32323d370c8633c3524573239f725b",
        "filename": "src/Makefile.am",
        "status": "modified",
        "additions": 4,
        "deletions": 0,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.am?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -162,6 +162,8 @@ BITCOIN_CORE_H = \\\n   wallet/crypter.h \\\n   wallet/db.h \\\n   wallet/feebumper.h \\\n+  wallet/fees.h \\\n+  wallet/init.h \\\n   wallet/rpcwallet.h \\\n   wallet/wallet.h \\\n   wallet/walletdb.h \\\n@@ -239,6 +241,8 @@ libbitcoin_wallet_a_SOURCES = \\\n   wallet/crypter.cpp \\\n   wallet/db.cpp \\\n   wallet/feebumper.cpp \\\n+  wallet/fees.cpp \\\n+  wallet/init.cpp \\\n   wallet/rpcdump.cpp \\\n   wallet/rpcwallet.cpp \\\n   wallet/wallet.cpp \\"
      },
      {
        "sha": "c6ddefbfc9158ab249dbd060436ee0daca439266",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 5,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -43,6 +43,7 @@\n #include \"utilmoneystr.h\"\n #include \"validationinterface.h\"\n #ifdef ENABLE_WALLET\n+#include \"wallet/init.h\"\n #include \"wallet/wallet.h\"\n #endif\n #include \"warnings.h\"\n@@ -420,7 +421,7 @@ std::string HelpMessage(HelpMessageMode mode)\n     strUsage += HelpMessageOpt(\"-maxuploadtarget=<n>\", strprintf(_(\"Tries to keep outbound traffic under the given target (in MiB per 24h), 0 = no limit (default: %d)\"), DEFAULT_MAX_UPLOAD_TARGET));\n \n #ifdef ENABLE_WALLET\n-    strUsage += CWallet::GetWalletHelpString(showDebug);\n+    strUsage += GetWalletHelpString(showDebug);\n #endif\n \n #if ENABLE_ZMQ\n@@ -1035,7 +1036,7 @@ bool AppInitParameterInteraction()\n         if (!ParseMoney(gArgs.GetArg(\"-minrelaytxfee\", \"\"), n)) {\n             return InitError(AmountErrMsg(\"minrelaytxfee\", gArgs.GetArg(\"-minrelaytxfee\", \"\")));\n         }\n-        // High fee check is done afterward in CWallet::ParameterInteraction()\n+        // High fee check is done afterward in WalletParameterInteraction()\n         ::minRelayTxFee = CFeeRate(n);\n     } else if (incrementalRelayFee > ::minRelayTxFee) {\n         // Allow only setting incrementalRelayFee to control both\n@@ -1068,7 +1069,7 @@ bool AppInitParameterInteraction()\n     nBytesPerSigOp = gArgs.GetArg(\"-bytespersigop\", nBytesPerSigOp);\n \n #ifdef ENABLE_WALLET\n-    if (!CWallet::ParameterInteraction())\n+    if (!WalletParameterInteraction())\n         return false;\n #endif\n \n@@ -1245,7 +1246,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 5: verify wallet database integrity\n #ifdef ENABLE_WALLET\n-    if (!CWallet::Verify())\n+    if (!WalletVerify())\n         return false;\n #endif\n     // ********************************************************* Step 6: network initialization\n@@ -1566,7 +1567,7 @@ bool AppInitMain(boost::thread_group& threadGroup, CScheduler& scheduler)\n \n     // ********************************************************* Step 8: load wallet\n #ifdef ENABLE_WALLET\n-    if (!CWallet::InitLoadWallet())\n+    if (!InitLoadWallet())\n         return false;\n #else\n     LogPrintf(\"No wallet support compiled in!\\n\");"
      },
      {
        "sha": "562c361799db197f9f9840a428e5845a9abef011",
        "filename": "src/qt/coincontroldialog.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/coincontroldialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/coincontroldialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/coincontroldialog.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -18,6 +18,7 @@\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n #include \"validation.h\" // For mempool\n+#include \"wallet/fees.h\"\n #include \"wallet/wallet.h\"\n \n #include <QApplication>\n@@ -510,7 +511,7 @@ void CoinControlDialog::updateLabels(WalletModel *model, QDialog* dialog)\n                 nBytes -= 34;\n \n         // Fee\n-        nPayFee = CWallet::GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nPayFee = GetMinimumFee(nBytes, *coinControl, ::mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n \n         if (nPayAmount > 0)\n         {"
      },
      {
        "sha": "6f2f2f37c66d527102c9fcd5356971ed0b363fc2",
        "filename": "src/qt/optionsdialog.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/optionsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/optionsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/optionsdialog.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -17,10 +17,6 @@\n #include \"netbase.h\"\n #include \"txdb.h\" // for -dbcache defaults\n \n-#ifdef ENABLE_WALLET\n-#include \"wallet/wallet.h\" // for CWallet::GetRequiredFee()\n-#endif\n-\n #include <QDataWidgetMapper>\n #include <QDir>\n #include <QIntValidator>"
      },
      {
        "sha": "625e4357425111211f2c761f41e94d22284cb9a3",
        "filename": "src/qt/sendcoinsdialog.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/sendcoinsdialog.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/qt/sendcoinsdialog.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/sendcoinsdialog.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -22,7 +22,7 @@\n #include \"ui_interface.h\"\n #include \"txmempool.h\"\n #include \"policy/fees.h\"\n-#include \"wallet/wallet.h\"\n+#include \"wallet/fees.h\"\n \n #include <QFontMetrics>\n #include <QMessageBox>\n@@ -185,7 +185,7 @@ void SendCoinsDialog::setModel(WalletModel *_model)\n         connect(ui->checkBoxMinimumFee, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(updateSmartFeeLabel()));\n         connect(ui->optInRBF, SIGNAL(stateChanged(int)), this, SLOT(coinControlUpdateLabels()));\n-        ui->customFee->setSingleStep(CWallet::GetRequiredFee(1000));\n+        ui->customFee->setSingleStep(GetRequiredFee(1000));\n         updateFeeSectionControls();\n         updateMinFeeLabel();\n         updateSmartFeeLabel();\n@@ -610,7 +610,7 @@ void SendCoinsDialog::on_buttonMinimizeFee_clicked()\n void SendCoinsDialog::setMinimumFee()\n {\n     ui->radioCustomPerKilobyte->setChecked(true);\n-    ui->customFee->setValue(CWallet::GetRequiredFee(1000));\n+    ui->customFee->setValue(GetRequiredFee(1000));\n }\n \n void SendCoinsDialog::updateFeeSectionControls()\n@@ -643,7 +643,7 @@ void SendCoinsDialog::updateMinFeeLabel()\n {\n     if (model && model->getOptionsModel())\n         ui->checkBoxMinimumFee->setText(tr(\"Pay only the required fee of %1\").arg(\n-            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), CWallet::GetRequiredFee(1000)) + \"/kB\")\n+            BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), GetRequiredFee(1000)) + \"/kB\")\n         );\n }\n \n@@ -668,7 +668,7 @@ void SendCoinsDialog::updateSmartFeeLabel()\n     updateCoinControlState(coin_control);\n     coin_control.m_feerate.reset(); // Explicitly use only fee estimation rate for smart fee labels\n     FeeCalculation feeCalc;\n-    CFeeRate feeRate = CFeeRate(CWallet::GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n+    CFeeRate feeRate = CFeeRate(GetMinimumFee(1000, coin_control, ::mempool, ::feeEstimator, &feeCalc));\n \n     ui->labelSmartFee->setText(BitcoinUnits::formatWithUnit(model->getOptionsModel()->getDisplayUnit(), feeRate.GetFeePerK()) + \"/kB\");\n "
      },
      {
        "sha": "285b0099c2ad0fa58c4bdfed64aab23d01b28e77",
        "filename": "src/wallet/feebumper.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 2,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/feebumper.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/feebumper.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/feebumper.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -5,6 +5,7 @@\n #include \"consensus/validation.h\"\n #include \"wallet/coincontrol.h\"\n #include \"wallet/feebumper.h\"\n+#include \"wallet/fees.h\"\n #include \"wallet/wallet.h\"\n #include \"policy/fees.h\"\n #include \"policy/policy.h\"\n@@ -156,7 +157,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n             currentResult = BumpFeeResult::INVALID_PARAMETER;\n             return;\n         }\n-        CAmount requiredFee = CWallet::GetRequiredFee(maxNewTxSize);\n+        CAmount requiredFee = GetRequiredFee(maxNewTxSize);\n         if (totalFee < requiredFee) {\n             vErrors.push_back(strprintf(\"Insufficient totalFee (cannot be less than required fee %s)\",\n                                                                 FormatMoney(requiredFee)));\n@@ -166,7 +167,7 @@ CFeeBumper::CFeeBumper(const CWallet *pWallet, const uint256 txidIn, const CCoin\n         nNewFee = totalFee;\n         nNewFeeRate = CFeeRate(totalFee, maxNewTxSize);\n     } else {\n-        nNewFee = CWallet::GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n+        nNewFee = GetMinimumFee(maxNewTxSize, coin_control, mempool, ::feeEstimator, nullptr /* FeeCalculation */);\n         nNewFeeRate = CFeeRate(nNewFee, maxNewTxSize);\n \n         // New fee rate must be at least old rate + minimum incremental relay rate"
      },
      {
        "sha": "3a9e68354d5f4b315f4ff876b6166ffbb9f34724",
        "filename": "src/wallet/fees.cpp",
        "status": "added",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -0,0 +1,13 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/fees.h\"\n+\n+#include \"policy/policy.h\"\n+#include \"txmempool.h\"\n+#include \"util.h\"\n+#include \"validation.h\"\n+#include \"wallet/coincontrol.h\"\n+#include \"wallet/wallet.h\""
      },
      {
        "sha": "7b8a7dc868e6d928944fd896697911fa9c40fb9d",
        "filename": "src/wallet/fees.h",
        "status": "added",
        "additions": 34,
        "deletions": 0,
        "changes": 34,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/fees.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/fees.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.h?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -0,0 +1,34 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_FEES_H\n+#define BITCOIN_WALLET_FEES_H\n+\n+#include \"amount.h\"\n+\n+class CBlockPolicyEstimator;\n+class CCoinControl;\n+class CFeeRate;\n+class CTxMemPool;\n+struct FeeCalculation;\n+\n+/**\n+ * Return the minimum required fee taking into account the\n+ * floating relay fee and user set minimum transaction fee\n+ */\n+CAmount GetRequiredFee(unsigned int nTxBytes);\n+\n+/**\n+ * Estimate the minimum fee considering user set parameters\n+ * and the required fee\n+ */\n+CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n+\n+/**\n+ * Return the maximum feerate for discarding change.\n+ */\n+CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator);\n+\n+#endif // BITCOIN_WALLET_FEES_H"
      },
      {
        "sha": "0946678926d3054b64125fd3d51b2f9ad068b1c0",
        "filename": "src/wallet/init.cpp",
        "status": "added",
        "additions": 12,
        "deletions": 0,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -0,0 +1,12 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"wallet/init.h\"\n+\n+#include \"net.h\"\n+#include \"util.h\"\n+#include \"utilmoneystr.h\"\n+#include \"validation.h\"\n+#include \"wallet/wallet.h\""
      },
      {
        "sha": "fa2251506dee7804c9878a61f8f19ae66d3d2e36",
        "filename": "src/wallet/init.h",
        "status": "added",
        "additions": 25,
        "deletions": 0,
        "changes": 25,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/init.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/init.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.h?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -0,0 +1,25 @@\n+// Copyright (c) 2009-2010 Satoshi Nakamoto\n+// Copyright (c) 2009-2017 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#ifndef BITCOIN_WALLET_INIT_H\n+#define BITCOIN_WALLET_INIT_H\n+\n+#include <string>\n+\n+//! Return the wallets help message.\n+std::string GetWalletHelpString(bool showDebug);\n+\n+//! Wallets parameter interaction\n+bool WalletParameterInteraction();\n+\n+//! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n+//  This function will perform salvage on the wallet if requested, as long as only one wallet is\n+//  being loaded (CWallet::ParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n+bool WalletVerify();\n+\n+//! Load wallet databases.\n+bool InitLoadWallet();\n+\n+#endif // BITCOIN_WALLET_INIT_H"
      },
      {
        "sha": "30b8c8260ae649687ba5c4d212c09c74cbdaa135",
        "filename": "src/wallet/rpcwallet.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 1,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/rpcwallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/rpcwallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/rpcwallet.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -8,7 +8,6 @@\n #include \"chain.h\"\n #include \"consensus/validation.h\"\n #include \"core_io.h\"\n-#include \"init.h\"\n #include \"httpserver.h\"\n #include \"validation.h\"\n #include \"net.h\"\n@@ -27,6 +26,8 @@\n #include \"wallet/wallet.h\"\n #include \"wallet/walletdb.h\"\n \n+#include <init.h>  // For StartShutdown\n+\n #include <stdint.h>\n \n #include <univalue.h>"
      },
      {
        "sha": "a9b615275157d79d25ace40791eaf48ad88bb4e5",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 10,
        "changes": 21,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -30,6 +30,7 @@\n #include \"util.h\"\n #include \"ui_interface.h\"\n #include \"utilmoneystr.h\"\n+#include \"wallet/fees.h\"\n \n #include <assert.h>\n \n@@ -494,7 +495,7 @@ void CWallet::Flush(bool shutdown)\n     dbw->Flush(shutdown);\n }\n \n-bool CWallet::Verify()\n+bool WalletVerify()\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n         return true;\n@@ -2599,7 +2600,7 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n-static CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)\n+CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)\n {\n     unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n     CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n@@ -3031,12 +3032,12 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n     return true;\n }\n \n-CAmount CWallet::GetRequiredFee(unsigned int nTxBytes)\n+CAmount GetRequiredFee(unsigned int nTxBytes)\n {\n-    return std::max(minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+    return std::max(CWallet::minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n }\n \n-CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n {\n     /* User control of how to calculate fee uses the following parameter precedence:\n        1. coin_control.m_feerate\n@@ -3068,7 +3069,7 @@ CAmount CWallet::GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_c\n         fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n         if (fee_needed == 0) {\n             // if we don't have enough data for estimateSmartFee, then use fallbackFee\n-            fee_needed = fallbackFee.GetFee(nTxBytes);\n+            fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n             if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n         }\n         // Obey mempool min fee when using smart fee estimation\n@@ -3888,7 +3889,7 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-std::string CWallet::GetWalletHelpString(bool showDebug)\n+std::string GetWalletHelpString(bool showDebug)\n {\n     std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n     strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n@@ -4121,15 +4122,15 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     return walletInstance;\n }\n \n-bool CWallet::InitLoadWallet()\n+bool InitLoadWallet()\n {\n     if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n         LogPrintf(\"Wallet disabled!\\n\");\n         return true;\n     }\n \n     for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CreateWalletFromFile(walletFile);\n+        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n         if (!pwallet) {\n             return false;\n         }\n@@ -4153,7 +4154,7 @@ void CWallet::postInitProcess(CScheduler& scheduler)\n     }\n }\n \n-bool CWallet::ParameterInteraction()\n+bool WalletParameterInteraction()\n {\n     gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n     const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;"
      },
      {
        "sha": "bceeb12fbb2560ac8efa4c9b5fa1aca47947c1ef",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 0,
        "deletions": 22,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d97fe2016cc7739929aac5c44de5037163b17ad0/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=d97fe2016cc7739929aac5c44de5037163b17ad0",
        "patch": "@@ -960,16 +960,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     static CFeeRate minTxFee;\n     static CFeeRate fallbackFee;\n     static CFeeRate m_discard_rate;\n-    /**\n-     * Estimate the minimum fee considering user set parameters\n-     * and the required fee\n-     */\n-    static CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc);\n-    /**\n-     * Return the minimum required fee taking into account the\n-     * floating relay fee and user set minimum transaction fee\n-     */\n-    static CAmount GetRequiredFee(unsigned int nTxBytes);\n \n     bool NewKeyPool();\n     size_t KeypoolCountExternalKeys();\n@@ -1060,11 +1050,6 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     //! Flush wallet (bitdb flush)\n     void Flush(bool shutdown=false);\n \n-    //! Responsible for reading and validating the -wallet arguments and verifying the wallet database.\n-    //  This function will perform salvage on the wallet if requested, as long as only one wallet is\n-    //  being loaded (CWallet::ParameterInteraction forbids -salvagewallet, -zapwallettxes or -upgradewallet with multiwallet).\n-    static bool Verify();\n-    \n     /** \n      * Address book entry changed.\n      * @note called with lock cs_wallet held.\n@@ -1101,22 +1086,15 @@ class CWallet : public CCryptoKeyStore, public CValidationInterface\n     /** Mark a transaction as replaced by another transaction (e.g., BIP 125). */\n     bool MarkReplaced(const uint256& originalHash, const uint256& newHash);\n \n-    /* Returns the wallets help message */\n-    static std::string GetWalletHelpString(bool showDebug);\n-\n     /* Initializes the wallet, returns a new CWallet instance or a null pointer in case of an error */\n     static CWallet* CreateWalletFromFile(const std::string walletFile);\n-    static bool InitLoadWallet();\n \n     /**\n      * Wallet post-init setup\n      * Gives the wallet a chance to register repetitive tasks and complete post-init tasks\n      */\n     void postInitProcess(CScheduler& scheduler);\n \n-    /* Wallets parameter interaction */\n-    static bool ParameterInteraction();\n-\n     bool BackupWallet(const std::string& strDest);\n \n     /* Set the HD chain model (chain child index counters) */"
      }
    ]
  },
  {
    "sha": "e7fe3208a83c170e50407d703525f1b4cbf337a3",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzplN2ZlMzIwOGE4M2MxNzBlNTA0MDdkNzAzNTI1ZjFiNGNiZjMzN2Ez",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-02T11:44:05Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T15:19:38Z"
      },
      "message": "MOVEONLY: Fee functions wallet/wallet.cpp -> wallet/fees.cpp",
      "tree": {
        "sha": "2128902cbcbb830153d71219af70ce97bf8a6aaa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/2128902cbcbb830153d71219af70ce97bf8a6aaa"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/e7fe3208a83c170e50407d703525f1b4cbf337a3",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fe3208a83c170e50407d703525f1b4cbf337a3",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/e7fe3208a83c170e50407d703525f1b4cbf337a3",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fe3208a83c170e50407d703525f1b4cbf337a3/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d97fe2016cc7739929aac5c44de5037163b17ad0",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d97fe2016cc7739929aac5c44de5037163b17ad0",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d97fe2016cc7739929aac5c44de5037163b17ad0"
      }
    ],
    "stats": {
      "total": 152,
      "additions": 76,
      "deletions": 76
    },
    "files": [
      {
        "sha": "76eeeeda051777d440da4e6f365f2972a4ea7d70",
        "filename": "src/wallet/fees.cpp",
        "status": "modified",
        "additions": 76,
        "deletions": 0,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7fe3208a83c170e50407d703525f1b4cbf337a3/src/wallet/fees.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7fe3208a83c170e50407d703525f1b4cbf337a3/src/wallet/fees.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/fees.cpp?ref=e7fe3208a83c170e50407d703525f1b4cbf337a3",
        "patch": "@@ -11,3 +11,79 @@\n #include \"validation.h\"\n #include \"wallet/coincontrol.h\"\n #include \"wallet/wallet.h\"\n+\n+\n+CAmount GetRequiredFee(unsigned int nTxBytes)\n+{\n+    return std::max(CWallet::minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n+}\n+\n+\n+CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n+{\n+    /* User control of how to calculate fee uses the following parameter precedence:\n+       1. coin_control.m_feerate\n+       2. coin_control.m_confirm_target\n+       3. payTxFee (user-set global variable)\n+       4. nTxConfirmTarget (user-set global variable)\n+       The first parameter that is set is used.\n+    */\n+    CAmount fee_needed;\n+    if (coin_control.m_feerate) { // 1.\n+        fee_needed = coin_control.m_feerate->GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+        // Allow to override automatic min/max check over coin control instance\n+        if (coin_control.fOverrideFeeRate) return fee_needed;\n+    }\n+    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n+        fee_needed = ::payTxFee.GetFee(nTxBytes);\n+        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n+    }\n+    else { // 2. or 4.\n+        // We will use smart fee estimation\n+        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n+        // By default estimates are economical iff we are signaling opt-in-RBF\n+        bool conservative_estimate = !coin_control.signalRbf;\n+        // Allow to override the default fee estimate mode over the CoinControl instance\n+        if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n+        else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n+\n+        fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n+        if (fee_needed == 0) {\n+            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n+            fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n+            if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n+        }\n+        // Obey mempool min fee when using smart fee estimation\n+        CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n+        if (fee_needed < min_mempool_fee) {\n+            fee_needed = min_mempool_fee;\n+            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n+        }\n+    }\n+\n+    // prevent user from paying a fee below minRelayTxFee or minTxFee\n+    CAmount required_fee = GetRequiredFee(nTxBytes);\n+    if (required_fee > fee_needed) {\n+        fee_needed = required_fee;\n+        if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n+    }\n+    // But always obey the maximum\n+    if (fee_needed > maxTxFee) {\n+        fee_needed = maxTxFee;\n+        if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n+    }\n+    return fee_needed;\n+}\n+\n+\n+CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)\n+{\n+    unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n+    CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n+    // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n+    discard_rate = (discard_rate == CFeeRate(0)) ? CWallet::m_discard_rate : std::min(discard_rate, CWallet::m_discard_rate);\n+    // Discard rate must be at least dustRelayFee\n+    discard_rate = std::max(discard_rate, ::dustRelayFee);\n+    return discard_rate;\n+}"
      },
      {
        "sha": "1f12d03b576ce1afa64d19657b8ccaa1424aa903",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 76,
        "changes": 76,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/e7fe3208a83c170e50407d703525f1b4cbf337a3/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/e7fe3208a83c170e50407d703525f1b4cbf337a3/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=e7fe3208a83c170e50407d703525f1b4cbf337a3",
        "patch": "@@ -2600,17 +2600,6 @@ bool CWallet::FundTransaction(CMutableTransaction& tx, CAmount& nFeeRet, int& nC\n     return true;\n }\n \n-CFeeRate GetDiscardRate(const CBlockPolicyEstimator& estimator)\n-{\n-    unsigned int highest_target = estimator.HighestTargetTracked(FeeEstimateHorizon::LONG_HALFLIFE);\n-    CFeeRate discard_rate = estimator.estimateSmartFee(highest_target, nullptr /* FeeCalculation */, false /* conservative */);\n-    // Don't let discard_rate be greater than longest possible fee estimate if we get a valid fee estimate\n-    discard_rate = (discard_rate == CFeeRate(0)) ? CWallet::m_discard_rate : std::min(discard_rate, CWallet::m_discard_rate);\n-    // Discard rate must be at least dustRelayFee\n-    discard_rate = std::max(discard_rate, ::dustRelayFee);\n-    return discard_rate;\n-}\n-\n bool CWallet::CreateTransaction(const std::vector<CRecipient>& vecSend, CWalletTx& wtxNew, CReserveKey& reservekey, CAmount& nFeeRet,\n                                 int& nChangePosInOut, std::string& strFailReason, const CCoinControl& coin_control, bool sign)\n {\n@@ -3032,71 +3021,6 @@ bool CWallet::AddAccountingEntry(const CAccountingEntry& acentry, CWalletDB *pwa\n     return true;\n }\n \n-CAmount GetRequiredFee(unsigned int nTxBytes)\n-{\n-    return std::max(CWallet::minTxFee.GetFee(nTxBytes), ::minRelayTxFee.GetFee(nTxBytes));\n-}\n-\n-CAmount GetMinimumFee(unsigned int nTxBytes, const CCoinControl& coin_control, const CTxMemPool& pool, const CBlockPolicyEstimator& estimator, FeeCalculation *feeCalc)\n-{\n-    /* User control of how to calculate fee uses the following parameter precedence:\n-       1. coin_control.m_feerate\n-       2. coin_control.m_confirm_target\n-       3. payTxFee (user-set global variable)\n-       4. nTxConfirmTarget (user-set global variable)\n-       The first parameter that is set is used.\n-    */\n-    CAmount fee_needed;\n-    if (coin_control.m_feerate) { // 1.\n-        fee_needed = coin_control.m_feerate->GetFee(nTxBytes);\n-        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n-        // Allow to override automatic min/max check over coin control instance\n-        if (coin_control.fOverrideFeeRate) return fee_needed;\n-    }\n-    else if (!coin_control.m_confirm_target && ::payTxFee != CFeeRate(0)) { // 3. TODO: remove magic value of 0 for global payTxFee\n-        fee_needed = ::payTxFee.GetFee(nTxBytes);\n-        if (feeCalc) feeCalc->reason = FeeReason::PAYTXFEE;\n-    }\n-    else { // 2. or 4.\n-        // We will use smart fee estimation\n-        unsigned int target = coin_control.m_confirm_target ? *coin_control.m_confirm_target : ::nTxConfirmTarget;\n-        // By default estimates are economical iff we are signaling opt-in-RBF\n-        bool conservative_estimate = !coin_control.signalRbf;\n-        // Allow to override the default fee estimate mode over the CoinControl instance\n-        if (coin_control.m_fee_mode == FeeEstimateMode::CONSERVATIVE) conservative_estimate = true;\n-        else if (coin_control.m_fee_mode == FeeEstimateMode::ECONOMICAL) conservative_estimate = false;\n-\n-        fee_needed = estimator.estimateSmartFee(target, feeCalc, conservative_estimate).GetFee(nTxBytes);\n-        if (fee_needed == 0) {\n-            // if we don't have enough data for estimateSmartFee, then use fallbackFee\n-            fee_needed = CWallet::fallbackFee.GetFee(nTxBytes);\n-            if (feeCalc) feeCalc->reason = FeeReason::FALLBACK;\n-        }\n-        // Obey mempool min fee when using smart fee estimation\n-        CAmount min_mempool_fee = pool.GetMinFee(gArgs.GetArg(\"-maxmempool\", DEFAULT_MAX_MEMPOOL_SIZE) * 1000000).GetFee(nTxBytes);\n-        if (fee_needed < min_mempool_fee) {\n-            fee_needed = min_mempool_fee;\n-            if (feeCalc) feeCalc->reason = FeeReason::MEMPOOL_MIN;\n-        }\n-    }\n-\n-    // prevent user from paying a fee below minRelayTxFee or minTxFee\n-    CAmount required_fee = GetRequiredFee(nTxBytes);\n-    if (required_fee > fee_needed) {\n-        fee_needed = required_fee;\n-        if (feeCalc) feeCalc->reason = FeeReason::REQUIRED;\n-    }\n-    // But always obey the maximum\n-    if (fee_needed > maxTxFee) {\n-        fee_needed = maxTxFee;\n-        if (feeCalc) feeCalc->reason = FeeReason::MAXTXFEE;\n-    }\n-    return fee_needed;\n-}\n-\n-\n-\n-\n DBErrors CWallet::LoadWallet(bool& fFirstRunRet)\n {\n     fFirstRunRet = false;"
      }
    ]
  },
  {
    "sha": "f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmMDExMDNjMWUwYTIwNGZjN2Y0MGEwNjc1NWY2YzNhZGI1NDgwY2Y4",
    "commit": {
      "author": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-02T11:48:52Z"
      },
      "committer": {
        "name": "Russell Yanofsky",
        "email": "russ@yanofsky.org",
        "date": "2017-08-14T15:19:38Z"
      },
      "message": "MOVEONLY: Init functions wallet/wallet.cpp -> wallet/init.cpp",
      "tree": {
        "sha": "6931a96d2bb2b80ddfe75254586cbd8ab4ca8998",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6931a96d2bb2b80ddfe75254586cbd8ab4ca8998"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/f01103c1e0a204fc7f40a06755f6c3adb5480cf8/comments",
    "author": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "ryanofsky",
      "id": 7133040,
      "node_id": "MDQ6VXNlcjcxMzMwNDA=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7133040?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/ryanofsky",
      "html_url": "https://github.com/ryanofsky",
      "followers_url": "https://api.github.com/users/ryanofsky/followers",
      "following_url": "https://api.github.com/users/ryanofsky/following{/other_user}",
      "gists_url": "https://api.github.com/users/ryanofsky/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/ryanofsky/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/ryanofsky/subscriptions",
      "organizations_url": "https://api.github.com/users/ryanofsky/orgs",
      "repos_url": "https://api.github.com/users/ryanofsky/repos",
      "events_url": "https://api.github.com/users/ryanofsky/events{/privacy}",
      "received_events_url": "https://api.github.com/users/ryanofsky/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "e7fe3208a83c170e50407d703525f1b4cbf337a3",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/e7fe3208a83c170e50407d703525f1b4cbf337a3",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/e7fe3208a83c170e50407d703525f1b4cbf337a3"
      }
    ],
    "stats": {
      "total": 470,
      "additions": 235,
      "deletions": 235
    },
    "files": [
      {
        "sha": "18365b1b72a01e824e547b51a6358f85d7303c14",
        "filename": "src/wallet/init.cpp",
        "status": "modified",
        "additions": 235,
        "deletions": 0,
        "changes": 235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f01103c1e0a204fc7f40a06755f6c3adb5480cf8/src/wallet/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f01103c1e0a204fc7f40a06755f6c3adb5480cf8/src/wallet/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/init.cpp?ref=f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
        "patch": "@@ -10,3 +10,238 @@\n #include \"utilmoneystr.h\"\n #include \"validation.h\"\n #include \"wallet/wallet.h\"\n+\n+std::string GetWalletHelpString(bool showDebug)\n+{\n+    std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n+    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n+    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n+    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n+                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n+    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n+                                                                \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n+                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n+    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n+                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n+    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n+                                                            CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n+    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n+    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n+    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n+    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n+    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n+    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (default: %u)\"), DEFAULT_WALLET_RBF));\n+    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n+    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n+    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n+    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n+    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n+                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n+\n+    if (showDebug)\n+    {\n+        strUsage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n+\n+        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n+        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n+        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n+        strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n+    }\n+\n+    return strUsage;\n+}\n+\n+bool WalletParameterInteraction()\n+{\n+    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n+    const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n+\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+        return true;\n+\n+    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n+    }\n+\n+    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n+        if (is_multiwallet) {\n+            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n+        }\n+        // Rewrite just private keys: rescan to find transactions\n+        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n+        }\n+    }\n+\n+    int zapwallettxes = gArgs.GetArg(\"-zapwallettxes\", 0);\n+    // -zapwallettxes implies dropping the mempool on startup\n+    if (zapwallettxes != 0 && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n+        LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n+    }\n+\n+    // -zapwallettxes implies a rescan\n+    if (zapwallettxes != 0) {\n+        if (is_multiwallet) {\n+            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n+        }\n+        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n+            LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n+        }\n+    }\n+\n+    if (is_multiwallet) {\n+        if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n+            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n+        }\n+    }\n+\n+    if (gArgs.GetBoolArg(\"-sysperms\", false))\n+        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n+    if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n+        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n+\n+    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n+        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n+                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n+\n+    if (gArgs.IsArgSet(\"-mintxfee\"))\n+    {\n+        CAmount n = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n+            return InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n+        if (n > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n+                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n+        CWallet::minTxFee = CFeeRate(n);\n+    }\n+    if (gArgs.IsArgSet(\"-fallbackfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n+                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n+        CWallet::fallbackFee = CFeeRate(nFeePerK);\n+    }\n+    if (gArgs.IsArgSet(\"-discardfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK))\n+            return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n+                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n+        CWallet::m_discard_rate = CFeeRate(nFeePerK);\n+    }\n+    if (gArgs.IsArgSet(\"-paytxfee\"))\n+    {\n+        CAmount nFeePerK = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK))\n+            return InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n+        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n+            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n+                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n+\n+        payTxFee = CFeeRate(nFeePerK, 1000);\n+        if (payTxFee < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n+                                       gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    if (gArgs.IsArgSet(\"-maxtxfee\"))\n+    {\n+        CAmount nMaxFee = 0;\n+        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n+            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n+        if (nMaxFee > HIGH_MAX_TX_FEE)\n+            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n+        maxTxFee = nMaxFee;\n+        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n+        {\n+            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n+                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n+        }\n+    }\n+    nTxConfirmTarget = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n+    bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n+    fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n+\n+    return true;\n+}\n+\n+bool WalletVerify()\n+{\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n+        return true;\n+\n+    uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n+\n+    // Keep track of each wallet absolute path to detect duplicates.\n+    std::set<fs::path> wallet_paths;\n+\n+    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n+        if (boost::filesystem::path(walletFile).filename() != walletFile) {\n+            return InitError(strprintf(_(\"Error loading wallet %s. -wallet parameter must only specify a filename (not a path).\"), walletFile));\n+        }\n+\n+        if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n+            return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n+        }\n+\n+        fs::path wallet_path = fs::absolute(walletFile, GetDataDir());\n+\n+        if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n+            return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n+        }\n+\n+        if (!wallet_paths.insert(wallet_path).second) {\n+            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), walletFile));\n+        }\n+\n+        std::string strError;\n+        if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError)) {\n+            return InitError(strError);\n+        }\n+\n+        if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n+            // Recover readable keypairs:\n+            CWallet dummyWallet;\n+            std::string backup_filename;\n+            if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n+                return false;\n+            }\n+        }\n+\n+        std::string strWarning;\n+        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n+        if (!strWarning.empty()) {\n+            InitWarning(strWarning);\n+        }\n+        if (!dbV) {\n+            InitError(strError);\n+            return false;\n+        }\n+    }\n+\n+    return true;\n+}\n+\n+bool InitLoadWallet()\n+{\n+    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n+        LogPrintf(\"Wallet disabled!\\n\");\n+        return true;\n+    }\n+\n+    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n+        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n+        if (!pwallet) {\n+            return false;\n+        }\n+        vpwallets.push_back(pwallet);\n+    }\n+\n+    return true;\n+}"
      },
      {
        "sha": "e2f12fa0243d0bd6039ed0b5c7f74e0ec57fac30",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 235,
        "changes": 235,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/f01103c1e0a204fc7f40a06755f6c3adb5480cf8/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/f01103c1e0a204fc7f40a06755f6c3adb5480cf8/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=f01103c1e0a204fc7f40a06755f6c3adb5480cf8",
        "patch": "@@ -495,63 +495,6 @@ void CWallet::Flush(bool shutdown)\n     dbw->Flush(shutdown);\n }\n \n-bool WalletVerify()\n-{\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n-        return true;\n-\n-    uiInterface.InitMessage(_(\"Verifying wallet(s)...\"));\n-\n-    // Keep track of each wallet absolute path to detect duplicates.\n-    std::set<fs::path> wallet_paths;\n-\n-    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        if (boost::filesystem::path(walletFile).filename() != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet parameter must only specify a filename (not a path).\"), walletFile));\n-        }\n-\n-        if (SanitizeString(walletFile, SAFE_CHARS_FILENAME) != walletFile) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Invalid characters in -wallet filename.\"), walletFile));\n-        }\n-\n-        fs::path wallet_path = fs::absolute(walletFile, GetDataDir());\n-\n-        if (fs::exists(wallet_path) && (!fs::is_regular_file(wallet_path) || fs::is_symlink(wallet_path))) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. -wallet filename must be a regular file.\"), walletFile));\n-        }\n-\n-        if (!wallet_paths.insert(wallet_path).second) {\n-            return InitError(strprintf(_(\"Error loading wallet %s. Duplicate -wallet filename specified.\"), walletFile));\n-        }\n-\n-        std::string strError;\n-        if (!CWalletDB::VerifyEnvironment(walletFile, GetDataDir().string(), strError)) {\n-            return InitError(strError);\n-        }\n-\n-        if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-            // Recover readable keypairs:\n-            CWallet dummyWallet;\n-            std::string backup_filename;\n-            if (!CWalletDB::Recover(walletFile, (void *)&dummyWallet, CWalletDB::RecoverKeysOnlyFilter, backup_filename)) {\n-                return false;\n-            }\n-        }\n-\n-        std::string strWarning;\n-        bool dbV = CWalletDB::VerifyDatabaseFile(walletFile, GetDataDir().string(), strWarning, strError);\n-        if (!strWarning.empty()) {\n-            InitWarning(strWarning);\n-        }\n-        if (!dbV) {\n-            InitError(strError);\n-            return false;\n-        }\n-    }\n-\n-    return true;\n-}\n-\n void CWallet::SyncMetaData(std::pair<TxSpends::iterator, TxSpends::iterator> range)\n {\n     // We want all the wallet transactions in range to have the same metadata as\n@@ -3813,46 +3756,6 @@ std::vector<std::string> CWallet::GetDestValues(const std::string& prefix) const\n     return values;\n }\n \n-std::string GetWalletHelpString(bool showDebug)\n-{\n-    std::string strUsage = HelpMessageGroup(_(\"Wallet options:\"));\n-    strUsage += HelpMessageOpt(\"-disablewallet\", _(\"Do not load the wallet and disable wallet RPC calls\"));\n-    strUsage += HelpMessageOpt(\"-keypool=<n>\", strprintf(_(\"Set key pool size to <n> (default: %u)\"), DEFAULT_KEYPOOL_SIZE));\n-    strUsage += HelpMessageOpt(\"-fallbackfee=<amt>\", strprintf(_(\"A fee rate (in %s/kB) that will be used when fee estimation has insufficient data (default: %s)\"),\n-                                                               CURRENCY_UNIT, FormatMoney(DEFAULT_FALLBACK_FEE)));\n-    strUsage += HelpMessageOpt(\"-discardfee=<amt>\", strprintf(_(\"The fee rate (in %s/kB) that indicates your tolerance for discarding change by adding it to the fee (default: %s). \"\n-                                                                \"Note: An output is discarded if it is dust at this rate, but we will always discard up to the dust relay fee and a discard fee above that is limited by the fee estimate for the longest target\"),\n-                                                              CURRENCY_UNIT, FormatMoney(DEFAULT_DISCARD_FEE)));\n-    strUsage += HelpMessageOpt(\"-mintxfee=<amt>\", strprintf(_(\"Fees (in %s/kB) smaller than this are considered zero fee for transaction creation (default: %s)\"),\n-                                                            CURRENCY_UNIT, FormatMoney(DEFAULT_TRANSACTION_MINFEE)));\n-    strUsage += HelpMessageOpt(\"-paytxfee=<amt>\", strprintf(_(\"Fee (in %s/kB) to add to transactions you send (default: %s)\"),\n-                                                            CURRENCY_UNIT, FormatMoney(payTxFee.GetFeePerK())));\n-    strUsage += HelpMessageOpt(\"-rescan\", _(\"Rescan the block chain for missing wallet transactions on startup\"));\n-    strUsage += HelpMessageOpt(\"-salvagewallet\", _(\"Attempt to recover private keys from a corrupt wallet on startup\"));\n-    strUsage += HelpMessageOpt(\"-spendzeroconfchange\", strprintf(_(\"Spend unconfirmed change when sending transactions (default: %u)\"), DEFAULT_SPEND_ZEROCONF_CHANGE));\n-    strUsage += HelpMessageOpt(\"-txconfirmtarget=<n>\", strprintf(_(\"If paytxfee is not set, include enough fee so transactions begin confirmation on average within n blocks (default: %u)\"), DEFAULT_TX_CONFIRM_TARGET));\n-    strUsage += HelpMessageOpt(\"-usehd\", _(\"Use hierarchical deterministic key generation (HD) after BIP32. Only has effect during wallet creation/first start\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_USE_HD_WALLET));\n-    strUsage += HelpMessageOpt(\"-walletrbf\", strprintf(_(\"Send transactions with full-RBF opt-in enabled (default: %u)\"), DEFAULT_WALLET_RBF));\n-    strUsage += HelpMessageOpt(\"-upgradewallet\", _(\"Upgrade wallet to latest format on startup\"));\n-    strUsage += HelpMessageOpt(\"-wallet=<file>\", _(\"Specify wallet file (within data directory)\") + \" \" + strprintf(_(\"(default: %s)\"), DEFAULT_WALLET_DAT));\n-    strUsage += HelpMessageOpt(\"-walletbroadcast\", _(\"Make the wallet broadcast transactions\") + \" \" + strprintf(_(\"(default: %u)\"), DEFAULT_WALLETBROADCAST));\n-    strUsage += HelpMessageOpt(\"-walletnotify=<cmd>\", _(\"Execute command when a wallet transaction changes (%s in cmd is replaced by TxID)\"));\n-    strUsage += HelpMessageOpt(\"-zapwallettxes=<mode>\", _(\"Delete all wallet transactions and only recover those parts of the blockchain through -rescan on startup\") +\n-                               \" \" + _(\"(1 = keep tx meta data e.g. account owner and payment request information, 2 = drop tx meta data)\"));\n-\n-    if (showDebug)\n-    {\n-        strUsage += HelpMessageGroup(_(\"Wallet debugging/testing options:\"));\n-\n-        strUsage += HelpMessageOpt(\"-dblogsize=<n>\", strprintf(\"Flush wallet database activity from memory to disk log every <n> megabytes (default: %u)\", DEFAULT_WALLET_DBLOGSIZE));\n-        strUsage += HelpMessageOpt(\"-flushwallet\", strprintf(\"Run a thread to flush wallet periodically (default: %u)\", DEFAULT_FLUSHWALLET));\n-        strUsage += HelpMessageOpt(\"-privdb\", strprintf(\"Sets the DB_PRIVATE flag in the wallet db environment (default: %u)\", DEFAULT_WALLET_PRIVDB));\n-        strUsage += HelpMessageOpt(\"-walletrejectlongchains\", strprintf(_(\"Wallet will not create transactions that violate mempool chain limits (default: %u)\"), DEFAULT_WALLET_REJECT_LONG_CHAINS));\n-    }\n-\n-    return strUsage;\n-}\n-\n CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n {\n     // needed to restore wallet transaction meta data after -zapwallettxes\n@@ -4046,24 +3949,6 @@ CWallet* CWallet::CreateWalletFromFile(const std::string walletFile)\n     return walletInstance;\n }\n \n-bool InitLoadWallet()\n-{\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET)) {\n-        LogPrintf(\"Wallet disabled!\\n\");\n-        return true;\n-    }\n-\n-    for (const std::string& walletFile : gArgs.GetArgs(\"-wallet\")) {\n-        CWallet * const pwallet = CWallet::CreateWalletFromFile(walletFile);\n-        if (!pwallet) {\n-            return false;\n-        }\n-        vpwallets.push_back(pwallet);\n-    }\n-\n-    return true;\n-}\n-\n std::atomic<bool> CWallet::fFlushScheduled(false);\n \n void CWallet::postInitProcess(CScheduler& scheduler)\n@@ -4078,126 +3963,6 @@ void CWallet::postInitProcess(CScheduler& scheduler)\n     }\n }\n \n-bool WalletParameterInteraction()\n-{\n-    gArgs.SoftSetArg(\"-wallet\", DEFAULT_WALLET_DAT);\n-    const bool is_multiwallet = gArgs.GetArgs(\"-wallet\").size() > 1;\n-\n-    if (gArgs.GetBoolArg(\"-disablewallet\", DEFAULT_DISABLE_WALLET))\n-        return true;\n-\n-    if (gArgs.GetBoolArg(\"-blocksonly\", DEFAULT_BLOCKSONLY) && gArgs.SoftSetBoolArg(\"-walletbroadcast\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -blocksonly=1 -> setting -walletbroadcast=0\\n\", __func__);\n-    }\n-\n-    if (gArgs.GetBoolArg(\"-salvagewallet\", false)) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-salvagewallet\"));\n-        }\n-        // Rewrite just private keys: rescan to find transactions\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -salvagewallet=1 -> setting -rescan=1\\n\", __func__);\n-        }\n-    }\n-\n-    int zapwallettxes = gArgs.GetArg(\"-zapwallettxes\", 0);\n-    // -zapwallettxes implies dropping the mempool on startup\n-    if (zapwallettxes != 0 && gArgs.SoftSetBoolArg(\"-persistmempool\", false)) {\n-        LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -persistmempool=0\\n\", __func__, zapwallettxes);\n-    }\n-\n-    // -zapwallettxes implies a rescan\n-    if (zapwallettxes != 0) {\n-        if (is_multiwallet) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-zapwallettxes\"));\n-        }\n-        if (gArgs.SoftSetBoolArg(\"-rescan\", true)) {\n-            LogPrintf(\"%s: parameter interaction: -zapwallettxes=%s -> setting -rescan=1\\n\", __func__, zapwallettxes);\n-        }\n-    }\n-\n-    if (is_multiwallet) {\n-        if (gArgs.GetBoolArg(\"-upgradewallet\", false)) {\n-            return InitError(strprintf(\"%s is only allowed with a single wallet file\", \"-upgradewallet\"));\n-        }\n-    }\n-\n-    if (gArgs.GetBoolArg(\"-sysperms\", false))\n-        return InitError(\"-sysperms is not allowed in combination with enabled wallet functionality\");\n-    if (gArgs.GetArg(\"-prune\", 0) && gArgs.GetBoolArg(\"-rescan\", false))\n-        return InitError(_(\"Rescans are not possible in pruned mode. You will need to use -reindex which will download the whole blockchain again.\"));\n-\n-    if (::minRelayTxFee.GetFeePerK() > HIGH_TX_FEE_PER_KB)\n-        InitWarning(AmountHighWarn(\"-minrelaytxfee\") + \" \" +\n-                    _(\"The wallet will avoid paying less than the minimum relay fee.\"));\n-\n-    if (gArgs.IsArgSet(\"-mintxfee\"))\n-    {\n-        CAmount n = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-mintxfee\", \"\"), n) || 0 == n)\n-            return InitError(AmountErrMsg(\"mintxfee\", gArgs.GetArg(\"-mintxfee\", \"\")));\n-        if (n > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-mintxfee\") + \" \" +\n-                        _(\"This is the minimum transaction fee you pay on every transaction.\"));\n-        CWallet::minTxFee = CFeeRate(n);\n-    }\n-    if (gArgs.IsArgSet(\"-fallbackfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-fallbackfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -fallbackfee=<amount>: '%s'\"), gArgs.GetArg(\"-fallbackfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-fallbackfee\") + \" \" +\n-                        _(\"This is the transaction fee you may pay when fee estimates are not available.\"));\n-        CWallet::fallbackFee = CFeeRate(nFeePerK);\n-    }\n-    if (gArgs.IsArgSet(\"-discardfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-discardfee\", \"\"), nFeePerK))\n-            return InitError(strprintf(_(\"Invalid amount for -discardfee=<amount>: '%s'\"), gArgs.GetArg(\"-discardfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-discardfee\") + \" \" +\n-                        _(\"This is the transaction fee you may discard if change is smaller than dust at this level\"));\n-        CWallet::m_discard_rate = CFeeRate(nFeePerK);\n-    }\n-    if (gArgs.IsArgSet(\"-paytxfee\"))\n-    {\n-        CAmount nFeePerK = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-paytxfee\", \"\"), nFeePerK))\n-            return InitError(AmountErrMsg(\"paytxfee\", gArgs.GetArg(\"-paytxfee\", \"\")));\n-        if (nFeePerK > HIGH_TX_FEE_PER_KB)\n-            InitWarning(AmountHighWarn(\"-paytxfee\") + \" \" +\n-                        _(\"This is the transaction fee you will pay if you send a transaction.\"));\n-\n-        payTxFee = CFeeRate(nFeePerK, 1000);\n-        if (payTxFee < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -paytxfee=<amount>: '%s' (must be at least %s)\"),\n-                                       gArgs.GetArg(\"-paytxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    if (gArgs.IsArgSet(\"-maxtxfee\"))\n-    {\n-        CAmount nMaxFee = 0;\n-        if (!ParseMoney(gArgs.GetArg(\"-maxtxfee\", \"\"), nMaxFee))\n-            return InitError(AmountErrMsg(\"maxtxfee\", gArgs.GetArg(\"-maxtxfee\", \"\")));\n-        if (nMaxFee > HIGH_MAX_TX_FEE)\n-            InitWarning(_(\"-maxtxfee is set very high! Fees this large could be paid on a single transaction.\"));\n-        maxTxFee = nMaxFee;\n-        if (CFeeRate(maxTxFee, 1000) < ::minRelayTxFee)\n-        {\n-            return InitError(strprintf(_(\"Invalid amount for -maxtxfee=<amount>: '%s' (must be at least the minrelay fee of %s to prevent stuck transactions)\"),\n-                                       gArgs.GetArg(\"-maxtxfee\", \"\"), ::minRelayTxFee.ToString()));\n-        }\n-    }\n-    nTxConfirmTarget = gArgs.GetArg(\"-txconfirmtarget\", DEFAULT_TX_CONFIRM_TARGET);\n-    bSpendZeroConfChange = gArgs.GetBoolArg(\"-spendzeroconfchange\", DEFAULT_SPEND_ZEROCONF_CHANGE);\n-    fWalletRbf = gArgs.GetBoolArg(\"-walletrbf\", DEFAULT_WALLET_RBF);\n-\n-    return true;\n-}\n-\n bool CWallet::BackupWallet(const std::string& strDest)\n {\n     return dbw->Backup(strDest);"
      }
    ]
  }
]