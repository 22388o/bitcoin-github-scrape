BitcoinPullTester,2013-10-07T05:20:13Z,"Automatic sanity-testing: PASSED, see http://jenkins.bluematt.me/pull-tester/f38e39df7f009d9d229b14447a2644db65c3d183 for binaries and test log.\nThis test script verifies pulls every time they are updated. It, however, dies sometimes and fails to test properly.  If you are waiting on a test, please check timestamps to verify that the test.log is moving at http://jenkins.bluematt.me/pull-tester/cu",https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25785533,25785533,
laanwj,2013-10-07T08:30:51Z,My main gripe here is that you're making the code longer instead of shorter. Have you benchmarked the improvement in any way?\n,https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25792037,25792037,
Diapolo,2013-10-07T08:41:53Z,"That is really the sort of code I don't like to read, before AND after ^^.\n",https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25792589,25792589,
lano1106,2013-10-08T03:45:22Z,"laanwj,\n\nwhat metric are you using to make the statement that the code is longer?\n\nLine code count may be misleading. Out of the 26 new lines, 9 are empty lines or lines only having brackets. Also consider that previous statement:\n\nint64 n_abs = (n > 0 ? n : -n); \n\nis in fact a packed if else block.\n\nfair enough. I'll produce a small benchmark program and report back the result here.\n",https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25863055,25863055,
gavinandresen,2013-10-08T04:01:29Z,"I find the old code easier to read, and ease of reading is more important than performance. Especially for a routine like this, which I strongly doubt is on any critical code paths.\n",https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25863484,25863484,
lano1106,2013-10-08T04:42:05Z,Ok. it is not a good pull request. Hell is paved with good intentions.\n\nI have benchmarked my modifs and the results are almost identical between old code and proposal.\n\nAny memcpy avoided by new code is offseted possibly by the fact it has now 2 string object. local str and strprintf return value whereas the old code benefit from RVO (Return Value Optimization).\n\nThanks for your time guys. ,https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25864581,25864581,
laanwj,2013-10-08T10:51:51Z,@lano1106 thanks for trying to help anyway!\n,https://github.com/bitcoin/bitcoin/pull/3061#issuecomment-25880294,25880294,
laanwj,2013-10-07T08:30:07Z,Is this special case needed? Or can it simply be handled by the if (n>=0) case?\n,https://github.com/bitcoin/bitcoin/pull/3061#discussion_r6791867,6791867,src/util.cpp
lano1106,2013-10-08T03:33:37Z,"not needed. It could be removed if desired and and this case be treated generically by the rest of the code.\nThat being said, it must be discriminated anyway when handling the sign. Cannot prefix '+' or '-' to it. So why not leverage this to skip the whole processing.\n",https://github.com/bitcoin/bitcoin/pull/3061#discussion_r6816400,6816400,src/util.cpp
laanwj,2013-10-08T10:51:23Z,"Yes, the sign must be discriminated anyway, but for readability and flexibility it's best to have as little special cases as possible.\n",https://github.com/bitcoin/bitcoin/pull/3061#discussion_r6822232,6822232,src/util.cpp
