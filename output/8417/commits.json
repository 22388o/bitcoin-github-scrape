[
  {
    "sha": "54af51d98d0b38f08c58dd589bff81883aee2854",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1NGFmNTFkOThkMGIzOGYwOGM1OGRkNTg5YmZmODE4ODNhZWUyODU0",
    "commit": {
      "author": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-28T12:59:13Z"
      },
      "committer": {
        "name": "Jonas Schnelli",
        "email": "dev@jonasschnelli.ch",
        "date": "2016-07-28T13:05:35Z"
      },
      "message": "[QA] Add walletdump RPC test (including HD- & encryption-tests)",
      "tree": {
        "sha": "7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/54af51d98d0b38f08c58dd589bff81883aee2854",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "expired_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXmgMgAAoJECnUvLZBb1PsLyUQALjmv59XHlF4vzjgTnpNg0tw\ncmatbAizV5KrVikeQ+Z71oiNijrNPcloBNj5bQlSl8Y4Pn/JEb7/uHSaAuXnvcg7\nt0XF1u2SOAa8FUeupD11/4rfd2c8PbspmHe4Rf0n2WwroIOFlKx9XPX5+SD9ZtW6\nnHv0h5I2clm+VJ14/WL1lpC0hnnsgpphRsczkS0EWjwdDMFW5D+osLrxQrnAk5MF\ne7Ykhk/8y2qyzrovW2Axb93u8vltH3oFMDgBANnm70hR/m4G19XF6KCsohiB5FyR\nd095Imbel2PYP4GgdgJo4OYj4ZkC2wkzK8GCegmUJHYkdRz3Kzi7DtgJmNEtPIn/\nnMMQqfuQ0qPkaHUQKZmy2UMtFk/MPhLJjcG8PARYrxaAcbQK6wU7/nvfjNcTueQB\ntifbRdoR8MjnMvTXnS87yAFzQNbaV3fanNWCjVprVYkxCGxlmqbqciZFAT+RXRww\n5JCeopUmEybuE2OLYkhyZG6Lf8ELDywzRiQwl4tBHYT36RMrT4KR8b5j+gINrRqk\nsUK7Z3w7uK5Y85CstCvwJB8zkz4zmunZ9mzOh/cP6K+FOP3N9kr3VCi9lgh1oZto\nPOLw+XZhphLTVUe2O3VMPEdsMloxb1tbnkijABOAg/jFkD30iRO7OJpYv2fwNbmD\n+gaUcDvV9fee932RWqfX\n=0AU+\n-----END PGP SIGNATURE-----",
        "payload": "tree 7afdeb33f1dc77ede4b298ba6ebfeb77ce83b80e\nparent 133c727cc4f7036b79b72d93ac5f5de4f86d71e1\nauthor Jonas Schnelli <dev@jonasschnelli.ch> 1469710753 +0200\ncommitter Jonas Schnelli <dev@jonasschnelli.ch> 1469711135 +0200\n\n[QA] Add walletdump RPC test (including HD- & encryption-tests)\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54af51d98d0b38f08c58dd589bff81883aee2854",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/54af51d98d0b38f08c58dd589bff81883aee2854",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/54af51d98d0b38f08c58dd589bff81883aee2854/comments",
    "author": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jonasschnelli",
      "id": 178464,
      "node_id": "MDQ6VXNlcjE3ODQ2NA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/178464?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jonasschnelli",
      "html_url": "https://github.com/jonasschnelli",
      "followers_url": "https://api.github.com/users/jonasschnelli/followers",
      "following_url": "https://api.github.com/users/jonasschnelli/following{/other_user}",
      "gists_url": "https://api.github.com/users/jonasschnelli/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jonasschnelli/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jonasschnelli/subscriptions",
      "organizations_url": "https://api.github.com/users/jonasschnelli/orgs",
      "repos_url": "https://api.github.com/users/jonasschnelli/repos",
      "events_url": "https://api.github.com/users/jonasschnelli/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jonasschnelli/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/133c727cc4f7036b79b72d93ac5f5de4f86d71e1",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/133c727cc4f7036b79b72d93ac5f5de4f86d71e1"
      }
    ],
    "stats": {
      "total": 121,
      "additions": 121,
      "deletions": 0
    },
    "files": [
      {
        "sha": "5900fa51e34b4d5a75dce8d3211fcd03496b7680",
        "filename": "qa/pull-tester/rpc-tests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54af51d98d0b38f08c58dd589bff81883aee2854/qa/pull-tester/rpc-tests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54af51d98d0b38f08c58dd589bff81883aee2854/qa/pull-tester/rpc-tests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.py?ref=54af51d98d0b38f08c58dd589bff81883aee2854",
        "patch": "@@ -107,6 +107,7 @@\n     'bip68-112-113-p2p.py',\n     'wallet.py',\n     'wallet-hd.py',\n+    'wallet-dump.py',\n     'listtransactions.py',\n     'receivedby.py',\n     'mempool_resurrect_test.py',"
      },
      {
        "sha": "dd675f57fc46a21620911b4ae84e3e9507c0e9d9",
        "filename": "qa/rpc-tests/wallet-dump.py",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/54af51d98d0b38f08c58dd589bff81883aee2854/qa/rpc-tests/wallet-dump.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/54af51d98d0b38f08c58dd589bff81883aee2854/qa/rpc-tests/wallet-dump.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/wallet-dump.py?ref=54af51d98d0b38f08c58dd589bff81883aee2854",
        "patch": "@@ -0,0 +1,120 @@\n+#!/usr/bin/env python3\n+# Copyright (c) 2016 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+from test_framework.test_framework import BitcoinTestFramework\n+from test_framework.util import *\n+import os\n+import shutil\n+\n+\n+class WalletDumpTest(BitcoinTestFramework):\n+\n+    def __init__(self):\n+        super().__init__()\n+        self.setup_clean_chain = False\n+        self.num_nodes = 1\n+\n+    def setup_network(self, split=False):\n+        extra_args = [[\"-keypool=100\"]]\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+\n+    def run_test (self):\n+        tmpdir = self.options.tmpdir\n+\n+        #generate 20 addresses to compare against the dump\n+        test_addr_count = 20\n+        addrs = []\n+        for i in range(0,test_addr_count):\n+            addr = self.nodes[0].getnewaddress()\n+            vaddr= self.nodes[0].validateaddress(addr) #required to get hd keypath\n+            addrs.append(vaddr)\n+\n+        # dump unencrypted wallet\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+\n+        #open file\n+        inputfile = open(tmpdir + \"/node0/wallet.unencrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        hdmasteraddr = \"\"\n+        for line in inputfile:\n+            #only read non comment lines\n+            if line[0] != \"#\" and len(line) > 10:\n+                #split out some data\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #keep hd master for later comp.\n+                        hdmasteraddr = addr\n+\n+                    #count key types\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+        assert(found_addr == test_addr_count) #all keys must be in the dump\n+        assert(found_addr_chg == 50) #50 blocks where mined\n+        assert(found_addr_rsv == 100) #100 reserve keys (keypool)\n+\n+        #encrypt wallet, restart, unlock and dump\n+        self.nodes[0].encryptwallet('test')\n+        bitcoind_processes[0].wait()\n+        self.nodes[0] = start_node(0, self.options.tmpdir)\n+        self.nodes[0].walletpassphrase('test', 10)\n+        self.nodes[0].dumpwallet(tmpdir + \"/node0/wallet.encrypted.dump\")\n+\n+        #open dump done with an encrypted wallet\n+        inputfile = open(tmpdir + \"/node0/wallet.encrypted.dump\")\n+        found_addr = 0\n+        found_addr_chg = 0\n+        found_addr_rsv = 0\n+        for line in inputfile:\n+            if line[0] != \"#\" and len(line) > 10:\n+                keyLabel, comment = line.split(\"#\")\n+                key = keyLabel.split(\" \")[0]\n+                keytype = keyLabel.split(\" \")[2]\n+                if len(comment) > 1:\n+                    addrKeypath = comment.split(\" addr=\")[1]\n+                    addr = addrKeypath.split(\" \")[0]\n+                    keypath = \"\"\n+                    if keytype != \"hdmaster=1\":\n+                        keypath = addrKeypath.rstrip().split(\"hdkeypath=\")[1]\n+                    else:\n+                        #ensure we have generated a new hd master key\n+                        assert(hdmasteraddr != addr)\n+                    if keytype == \"inactivehdmaster=1\":\n+                        #ensure the old master is still available\n+                        assert(hdmasteraddr == addr)\n+                    for addrObj in addrs:\n+                        if (addrObj['address'] == addr and addrObj['hdkeypath'] == keypath and keytype == \"label=\"):\n+                            found_addr+=1\n+                            break\n+                        elif (keytype == \"change=1\"):\n+                            found_addr_chg+=1\n+                            break\n+                        elif (keytype == \"reserve=1\"):\n+                            found_addr_rsv+=1\n+                            break\n+\n+        assert(found_addr == test_addr_count)\n+        assert(found_addr_chg == 150) #old reserve keys are marked as change now\n+        assert(found_addr_rsv == 100) #keypool size\n+\n+if __name__ == '__main__':\n+    WalletDumpTest().main ()"
      }
    ]
  }
]