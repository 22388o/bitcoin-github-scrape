[
  {
    "sha": "160b028b88626bacca3ec7a763c4ee93d6a35540",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxNjBiMDI4Yjg4NjI2YmFjY2EzZWM3YTc2M2M0ZWU5M2Q2YTM1NTQw",
    "commit": {
      "author": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-04T12:18:04Z"
      },
      "committer": {
        "name": "Pieter Wuille",
        "email": "pieter.wuille@gmail.com",
        "date": "2012-11-10T21:40:21Z"
      },
      "message": "One-line comments for public main functions",
      "tree": {
        "sha": "c12612e32c575076e23c3ee86d8e505b3d199aa4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/c12612e32c575076e23c3ee86d8e505b3d199aa4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/160b028b88626bacca3ec7a763c4ee93d6a35540",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160b028b88626bacca3ec7a763c4ee93d6a35540",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/160b028b88626bacca3ec7a763c4ee93d6a35540",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/160b028b88626bacca3ec7a763c4ee93d6a35540/comments",
    "author": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "sipa",
      "id": 548488,
      "node_id": "MDQ6VXNlcjU0ODQ4OA==",
      "avatar_url": "https://avatars.githubusercontent.com/u/548488?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/sipa",
      "html_url": "https://github.com/sipa",
      "followers_url": "https://api.github.com/users/sipa/followers",
      "following_url": "https://api.github.com/users/sipa/following{/other_user}",
      "gists_url": "https://api.github.com/users/sipa/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/sipa/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/sipa/subscriptions",
      "organizations_url": "https://api.github.com/users/sipa/orgs",
      "repos_url": "https://api.github.com/users/sipa/repos",
      "events_url": "https://api.github.com/users/sipa/events{/privacy}",
      "received_events_url": "https://api.github.com/users/sipa/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "91cee34638ae4d5cacb5fadf0adf16428ecf1332",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/91cee34638ae4d5cacb5fadf0adf16428ecf1332",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/91cee34638ae4d5cacb5fadf0adf16428ecf1332"
      }
    ],
    "stats": {
      "total": 28,
      "additions": 28,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e3467260456c54d27d2ac47c6395b147aeabbcab",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 28,
        "deletions": 0,
        "changes": 28,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/160b028b88626bacca3ec7a763c4ee93d6a35540/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/160b028b88626bacca3ec7a763c4ee93d6a35540/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=160b028b88626bacca3ec7a763c4ee93d6a35540",
        "patch": "@@ -107,33 +107,61 @@ class CTxUndo;\n class CCoinsView;\n class CCoinsViewCache;\n \n+/** Register a wallet to receive updates from core */\n void RegisterWallet(CWallet* pwalletIn);\n+/** Unregister a wallet from core */\n void UnregisterWallet(CWallet* pwalletIn);\n+/** Push an updated transaction to all registered wallets */\n void SyncWithWallets(const uint256 &hash, const CTransaction& tx, const CBlock* pblock = NULL, bool fUpdate = false);\n+/** Process an incoming block */\n bool ProcessBlock(CNode* pfrom, CBlock* pblock, CDiskBlockPos *dbp = NULL);\n+/** Check whether enough disk space is available for an incoming block */\n bool CheckDiskSpace(uint64 nAdditionalBytes=0);\n+/** Open a block file (blk?????.dat) */\n FILE* OpenBlockFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+/** Open an undo file (rev?????.dat) */\n FILE* OpenUndoFile(const CDiskBlockPos &pos, bool fReadOnly = false);\n+/** Import blocks from an external file */\n bool LoadExternalBlockFile(FILE* fileIn, CDiskBlockPos *dbp = NULL);\n+/** Load the block tree and coins database from disk */\n bool LoadBlockIndex();\n+/** Print the loaded block tree */\n void PrintBlockTree();\n+/** Find a block by height in the currently-connected chain */\n CBlockIndex* FindBlockByHeight(int nHeight);\n+/** Process protocol messages received from a given node */\n bool ProcessMessages(CNode* pfrom);\n+/** Send queued protocol messages to be sent to a give node */\n bool SendMessages(CNode* pto, bool fSendTrickle);\n+/** Run the importer thread, which deals with reindexing, loading bootstrap.dat, and whatever is passed to -loadblock */\n void ThreadImport(void *parg);\n+/** Run the miner threads */\n void GenerateBitcoins(bool fGenerate, CWallet* pwallet);\n+/** Generate a new block, without valid proof-of-work */\n CBlock* CreateNewBlock(CReserveKey& reservekey);\n+/** Modify the extranonce in a block */\n void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int& nExtraNonce);\n+/** Do mining precalculation */\n void FormatHashBuffers(CBlock* pblock, char* pmidstate, char* pdata, char* phash1);\n+/** Check mined block */\n bool CheckWork(CBlock* pblock, CWallet& wallet, CReserveKey& reservekey);\n+/** Check whether a block hash satisfies the proof-of-work requirement specified by nBits */\n bool CheckProofOfWork(uint256 hash, unsigned int nBits);\n+/** Calculate the minimum amount of work a received block needs, without knowing its direct parent */\n unsigned int ComputeMinWork(unsigned int nBase, int64 nTime);\n+/** Get the number of active peers */\n int GetNumBlocksOfPeers();\n+/** Check whether we are doin an inital block download (synchronizing from disk or network) */\n bool IsInitialBlockDownload();\n+/** Format a string that describes several potential problems detected by the core */\n std::string GetWarnings(std::string strFor);\n+/** Retrieve a transaction (from memory pool, or from disk, if possible) */\n bool GetTransaction(const uint256 &hash, CTransaction &tx, uint256 &hashBlock, bool fAllowSlow = false);\n+/** Connect/disconnect blocks until pindexNew is the new tip of the active block chain */\n bool SetBestChain(CBlockIndex* pindexNew);\n+/** Find the best known block, and make it the tip of the block chain */\n bool ConnectBestBlock();\n+/** Create a new block index entry for a given block hash */\n CBlockIndex * InsertBlockIndex(uint256 hash);\n \n "
      }
    ]
  }
]