[
  {
    "sha": "109a85899571aa499572e211bb08f05715e8743b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxMDlhODU4OTk1NzFhYTQ5OTU3MmUyMTFiYjA4ZjA1NzE1ZTg3NDNi",
    "commit": {
      "author": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-06T22:08:55Z"
      },
      "committer": {
        "name": "practicalswift",
        "email": "practicalswift@users.noreply.github.com",
        "date": "2017-11-10T16:16:07Z"
      },
      "message": "tests: Add missing locks to tests\n\nAdd missing locks to tests to satisfy lock requirements (such as\nEXCLUSIVE_LOCKS_REQUIRED(...) (Clang Thread Safety Analysis),\nAssertLockHeld(...) and implicit lock assumptions).",
      "tree": {
        "sha": "0a5db134a775920a176e27e76bcf0f69a07dd214",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0a5db134a775920a176e27e76bcf0f69a07dd214"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/109a85899571aa499572e211bb08f05715e8743b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109a85899571aa499572e211bb08f05715e8743b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/109a85899571aa499572e211bb08f05715e8743b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/109a85899571aa499572e211bb08f05715e8743b/comments",
    "author": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "practicalswift",
      "id": 7826565,
      "node_id": "MDQ6VXNlcjc4MjY1NjU=",
      "avatar_url": "https://avatars.githubusercontent.com/u/7826565?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/practicalswift",
      "html_url": "https://github.com/practicalswift",
      "followers_url": "https://api.github.com/users/practicalswift/followers",
      "following_url": "https://api.github.com/users/practicalswift/following{/other_user}",
      "gists_url": "https://api.github.com/users/practicalswift/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/practicalswift/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/practicalswift/subscriptions",
      "organizations_url": "https://api.github.com/users/practicalswift/orgs",
      "repos_url": "https://api.github.com/users/practicalswift/repos",
      "events_url": "https://api.github.com/users/practicalswift/events{/privacy}",
      "received_events_url": "https://api.github.com/users/practicalswift/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fe503e118f08a9a781d8cc1a6cdde5a615178433",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fe503e118f08a9a781d8cc1a6cdde5a615178433"
      }
    ],
    "stats": {
      "total": 70,
      "additions": 60,
      "deletions": 10
    },
    "files": [
      {
        "sha": "4289bf5d87b73461c1e50a60502ddb6d89709488",
        "filename": "src/qt/test/wallettests.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/qt/test/wallettests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/qt/test/wallettests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/qt/test/wallettests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -164,7 +164,10 @@ void TestGUI()\n         wallet.SetAddressBook(test.coinbaseKey.GetPubKey().GetID(), \"\", \"receive\");\n         wallet.AddKeyPubKey(test.coinbaseKey, test.coinbaseKey.GetPubKey());\n     }\n-    wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    {\n+        LOCK(cs_main);\n+        wallet.ScanForWalletTransactions(chainActive.Genesis(), nullptr, true);\n+    }\n     wallet.SetBroadcastTransactions(true);\n \n     // Create widgets for sending coins and listing transactions."
      },
      {
        "sha": "bf6f2533df15d3725fd47d7d4c08b0eb1bd27f1f",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 37,
        "deletions": 7,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -66,11 +66,14 @@ BOOST_AUTO_TEST_CASE(outbound_slow_chain_eviction)\n     dummyNode1.fSuccessfullyConnected = true;\n \n     // This test requires that we have a chain with non-zero work.\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip() != nullptr);\n     BOOST_CHECK(chainActive.Tip()->nChainWork > 0);\n \n     // Test starts here\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy); // should result in getheaders\n+    LOCK(dummyNode1.cs_vSend);\n     BOOST_CHECK(dummyNode1.vSendMsg.size() > 0);\n     dummyNode1.vSendMsg.clear();\n \n@@ -183,7 +186,11 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100); // Should get banned\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     BOOST_CHECK(!connman->IsBanned(ip(0xa0b0c001|0x0000ff00))); // Different IP, not banned\n@@ -194,11 +201,18 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     peerLogic->InitializeNode(&dummyNode2);\n     dummyNode2.nVersion = 1;\n     dummyNode2.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n+    LOCK(dummyNode2.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr2)); // 2 not banned yet...\n     BOOST_CHECK(connman->IsBanned(addr1));  // ... but 1 still should be\n-    Misbehaving(dummyNode2.GetId(), 50);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode2.GetId(), 50);\n+    }\n     peerLogic->SendMessages(&dummyNode2, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr2));\n \n@@ -219,13 +233,23 @@ BOOST_AUTO_TEST_CASE(DoS_banscore)\n     peerLogic->InitializeNode(&dummyNode1);\n     dummyNode1.nVersion = 1;\n     dummyNode1.fSuccessfullyConnected = true;\n-    Misbehaving(dummyNode1.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 100);\n+    }\n+    LOCK(dummyNode1.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 10);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 10);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(!connman->IsBanned(addr1));\n-    Misbehaving(dummyNode1.GetId(), 1);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode1.GetId(), 1);\n+    }\n     peerLogic->SendMessages(&dummyNode1, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr1));\n     gArgs.ForceSetArg(\"-banscore\", std::to_string(DEFAULT_BANSCORE_THRESHOLD));\n@@ -249,7 +273,11 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n     dummyNode.nVersion = 1;\n     dummyNode.fSuccessfullyConnected = true;\n \n-    Misbehaving(dummyNode.GetId(), 100);\n+    {\n+        LOCK(cs_main);\n+        Misbehaving(dummyNode.GetId(), 100);\n+    }\n+    LOCK(dummyNode.cs_sendProcessing);\n     peerLogic->SendMessages(&dummyNode, interruptDummy);\n     BOOST_CHECK(connman->IsBanned(addr));\n \n@@ -266,6 +294,7 @@ BOOST_AUTO_TEST_CASE(DoS_bantime)\n CTransactionRef RandomOrphan()\n {\n     std::map<uint256, COrphanTx>::iterator it;\n+    LOCK(cs_main);\n     it = mapOrphanTransactions.lower_bound(InsecureRand256());\n     if (it == mapOrphanTransactions.end())\n         it = mapOrphanTransactions.begin();\n@@ -335,6 +364,7 @@ BOOST_AUTO_TEST_CASE(DoS_mapOrphans)\n         BOOST_CHECK(!AddOrphanTx(MakeTransactionRef(tx), i));\n     }\n \n+    LOCK(cs_main);\n     // Test EraseOrphansFor:\n     for (NodeId i = 0; i < 3; i++)\n     {"
      },
      {
        "sha": "71baf286e9c4bf35f28bd46e30ab22fc9bc723e7",
        "filename": "src/test/blockencodings_tests.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/blockencodings_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/blockencodings_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/blockencodings_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -62,6 +62,7 @@ BOOST_AUTO_TEST_CASE(SimpleRoundTripTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     // Do a simple ShortTxIDs RT\n@@ -161,6 +162,7 @@ BOOST_AUTO_TEST_CASE(NonCoinbasePreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[2]->GetHash(), entry.FromTx(*block.vtx[2]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[2]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;\n@@ -227,6 +229,7 @@ BOOST_AUTO_TEST_CASE(SufficientPreforwardRTTest)\n     CBlock block(BuildBlockTestCase());\n \n     pool.addUnchecked(block.vtx[1]->GetHash(), entry.FromTx(*block.vtx[1]));\n+    LOCK(pool.cs);\n     BOOST_CHECK_EQUAL(pool.mapTx.find(block.vtx[1]->GetHash())->GetSharedTx().use_count(), SHARED_TX_OFFSET + 0);\n \n     uint256 txhash;"
      },
      {
        "sha": "c7abad8026e761f094bc9d1407ec5120620fb5ce",
        "filename": "src/test/mempool_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/mempool_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/mempool_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/mempool_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -165,6 +165,7 @@ BOOST_AUTO_TEST_CASE(MempoolIndexingTest)\n     sortedOrder[2] = tx1.GetHash().ToString(); // 10000\n     sortedOrder[3] = tx4.GetHash().ToString(); // 15000\n     sortedOrder[4] = tx2.GetHash().ToString(); // 20000\n+    LOCK(pool.cs);\n     CheckSort<descendant_score>(pool, sortedOrder);\n \n     /* low fee but with high fee child */\n@@ -375,6 +376,7 @@ BOOST_AUTO_TEST_CASE(MempoolAncestorIndexingTest)\n     }\n     sortedOrder[4] = tx3.GetHash().ToString(); // 0\n \n+    LOCK(pool.cs);\n     CheckSort<ancestor_score>(pool, sortedOrder);\n \n     /* low fee parent with high fee child */"
      },
      {
        "sha": "fbe9e217ec11602ca6bf6974b7ee296f68e0bb64",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 4,
        "deletions": 1,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -149,7 +149,10 @@ TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>&\n         block.vtx.push_back(MakeTransactionRef(tx));\n     // IncrementExtraNonce creates a valid coinbase and merkleRoot\n     unsigned int extraNonce = 0;\n-    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    {\n+        LOCK(cs_main);\n+        IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+    }\n \n     while (!CheckProofOfWork(block.GetHash(), block.nBits, chainparams.GetConsensus())) ++block.nNonce;\n "
      },
      {
        "sha": "ce3060a5f31f4cbb2ddd127123b4e78af3d6e91a",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 1,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -66,6 +66,7 @@ BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n \n     // Test 1: block with both of those transactions should be rejected.\n     block = CreateAndProcessBlock(spends, scriptPubKey);\n+    LOCK(cs_main);\n     BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n \n     // Test 2: ... and should be rejected if spend1 is in the memory pool\n@@ -151,7 +152,10 @@ BOOST_FIXTURE_TEST_CASE(checkinputs_test, TestChain100Setup)\n {\n     // Test that passing CheckInputs with one set of script flags doesn't imply\n     // that we would pass again with a different set of flags.\n-    InitScriptExecutionCache();\n+    {\n+        LOCK(cs_main);\n+        InitScriptExecutionCache();\n+    }\n \n     CScript p2pk_scriptPubKey = CScript() << ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n     CScript p2sh_scriptPubKey = GetScriptForDestination(CScriptID(p2pk_scriptPubKey));"
      },
      {
        "sha": "503dedb5b312a9d1bb1f163fe821bbf690275278",
        "filename": "src/wallet/test/wallet_tests.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 0,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/109a85899571aa499572e211bb08f05715e8743b/src/wallet/test/wallet_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/109a85899571aa499572e211bb08f05715e8743b/src/wallet/test/wallet_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/test/wallet_tests.cpp?ref=109a85899571aa499572e211bb08f05715e8743b",
        "patch": "@@ -489,6 +489,7 @@ BOOST_FIXTURE_TEST_CASE(importwallet_rescan, TestChain100Setup)\n         vpwallets[0] = &wallet;\n         ::importwallet(request);\n \n+        LOCK(wallet.cs_wallet);\n         BOOST_CHECK_EQUAL(wallet.mapWallet.size(), 3);\n         BOOST_CHECK_EQUAL(coinbaseTxns.size(), 103);\n         for (size_t i = 0; i < coinbaseTxns.size(); ++i) {\n@@ -534,6 +535,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n     SetMockTime(mockTime);\n     CBlockIndex* block = nullptr;\n     if (blockTime > 0) {\n+        LOCK(cs_main);\n         auto inserted = mapBlockIndex.emplace(GetRandHash(), new CBlockIndex);\n         assert(inserted.second);\n         const uint256& hash = inserted.first->first;\n@@ -547,6 +549,7 @@ static int64_t AddTx(CWallet& wallet, uint32_t lockTime, int64_t mockTime, int64\n         wtx.SetMerkleBranch(block, 0);\n     }\n     wallet.AddToWallet(wtx);\n+    LOCK(wallet.cs_wallet);\n     return wallet.mapWallet.at(wtx.GetHash()).nTimeSmart;\n }\n \n@@ -583,6 +586,7 @@ BOOST_AUTO_TEST_CASE(ComputeTimeSmart)\n BOOST_AUTO_TEST_CASE(LoadReceiveRequests)\n {\n     CTxDestination dest = CKeyID();\n+    LOCK(pwalletMain->cs_wallet);\n     pwalletMain->AddDestData(dest, \"misc\", \"val_misc\");\n     pwalletMain->AddDestData(dest, \"rr0\", \"val_rr0\");\n     pwalletMain->AddDestData(dest, \"rr1\", \"val_rr1\");\n@@ -625,6 +629,7 @@ class ListCoinsTestingSetup : public TestChain100Setup\n         BOOST_CHECK(wallet->CreateTransaction({recipient}, wtx, reservekey, fee, changePos, error, dummy));\n         CValidationState state;\n         BOOST_CHECK(wallet->CommitTransaction(wtx, reservekey, nullptr, state));\n+        LOCK(wallet->cs_wallet);\n         auto it = wallet->mapWallet.find(wtx.GetHash());\n         BOOST_CHECK(it != wallet->mapWallet.end());\n         CreateAndProcessBlock({CMutableTransaction(*it->second.tx)}, GetScriptForRawPubKey(coinbaseKey.GetPubKey()));"
      }
    ]
  }
]