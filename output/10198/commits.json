[
  {
    "sha": "c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpjOWNjNzZkY2FhZDg1YWE5NDQxZjE4ZDM4Mjk4ZjI3YTBmZmQ4NTJh",
    "commit": {
      "author": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-04-03T13:34:04Z"
      },
      "committer": {
        "name": "John Newbery",
        "email": "john@johnnewbery.com",
        "date": "2017-05-02T17:31:54Z"
      },
      "message": "[tests] Remove is_network_split from funtional test cases",
      "tree": {
        "sha": "7f3a0bbb5ed9d64f4fe62a7e47abd2a8595a17eb",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/7f3a0bbb5ed9d64f4fe62a7e47abd2a8595a17eb"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/comments",
    "author": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jnewbery",
      "id": 1063656,
      "node_id": "MDQ6VXNlcjEwNjM2NTY=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1063656?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jnewbery",
      "html_url": "https://github.com/jnewbery",
      "followers_url": "https://api.github.com/users/jnewbery/followers",
      "following_url": "https://api.github.com/users/jnewbery/following{/other_user}",
      "gists_url": "https://api.github.com/users/jnewbery/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jnewbery/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jnewbery/subscriptions",
      "organizations_url": "https://api.github.com/users/jnewbery/orgs",
      "repos_url": "https://api.github.com/users/jnewbery/repos",
      "events_url": "https://api.github.com/users/jnewbery/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jnewbery/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "8f3e38477e30abd9dd0e24a4d612126117f7793c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8f3e38477e30abd9dd0e24a4d612126117f7793c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/8f3e38477e30abd9dd0e24a4d612126117f7793c"
      }
    ],
    "stats": {
      "total": 512,
      "additions": 140,
      "deletions": 372
    },
    "files": [
      {
        "sha": "0439d168dead9101825711e553c7b72c88f4824e",
        "filename": "test/functional/abandonconflict.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/abandonconflict.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/abandonconflict.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/abandonconflict.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -20,12 +20,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-minrelaytxfee=0.00001\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        connect_nodes(self.nodes[0], 1)\n+        self.extra_args = [[\"-minrelaytxfee=0.00001\"], []]\n \n     def run_test(self):\n         self.nodes[1].generate(100)"
      },
      {
        "sha": "bb83042f35002ea1167caaad11e60a2abe385aa9",
        "filename": "test/functional/bip65-cltv-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip65-cltv-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip65-cltv-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv-p2p.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -39,12 +39,7 @@ class BIP65Test(ComparisonTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n-\n-    def setup_network(self):\n-        # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=3']],\n-                                 binary=[self.options.testbinary])\n+        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=3']]\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "ddf932c74606b4cb1c1f2942d1b41863cd416b58",
        "filename": "test/functional/bip65-cltv.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip65-cltv.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip65-cltv.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip65-cltv.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -12,15 +12,12 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 3\n         self.setup_clean_chain = False\n+        self.extra_args = [[], [\"-blockversion=3\"], [\"-blockversion=4\"]]\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=3\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=4\"]))\n+        self.setup_nodes()\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n-        self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "5a322e8c0e43d387cc2f062620846ae8f10c6680",
        "filename": "test/functional/bip68-112-113-p2p.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip68-112-113-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip68-112-113-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-112-113-p2p.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -95,12 +95,7 @@ class BIP68_112_113Test(ComparisonTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n-\n-    def setup_network(self):\n-        # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=4']],\n-                                 binary=[self.options.testbinary])\n+        self.extra_args = [['-whitelist=127.0.0.1', '-blockversion=4']]\n \n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "db66b7719cf862fb3294c731a56538bbbf068ba8",
        "filename": "test/functional/bip68-sequence.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip68-sequence.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip68-sequence.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip68-sequence.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -21,16 +21,11 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n+        self.extra_args = [[], [\"-acceptnonstdtxn=0\"]]\n \n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-acceptnonstdtxn=0\"]))\n-        self.is_network_split = False\n+    def run_test(self):\n         self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n-        connect_nodes(self.nodes[0], 1)\n \n-    def run_test(self):\n         # Generate some coins\n         self.nodes[0].generate(110)\n "
      },
      {
        "sha": "782eab3cc4fcd4b47a032e64b1e9acf15f6b6a02",
        "filename": "test/functional/bip9-softforks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip9-softforks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bip9-softforks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bip9-softforks.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -32,11 +32,7 @@ class BIP9SoftForksTest(ComparisonTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n-\n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1']],\n-                                 binary=[self.options.testbinary])\n+        self.extra_args = [['-whitelist=127.0.0.1']]\n \n     def run_test(self):\n         self.test = TestManager(self, self.options.tmpdir)"
      },
      {
        "sha": "31c7ebba90c820b6dd910c9bac9b1a986774d40a",
        "filename": "test/functional/bipdersig-p2p.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bipdersig-p2p.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bipdersig-p2p.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig-p2p.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -47,12 +47,6 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n \n-    def setup_network(self):\n-        # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-blockversion=2']],\n-                                 binary=[self.options.testbinary])\n-\n     def run_test(self):\n         test = TestManager(self, self.options.tmpdir)\n         test.add_all_connections(self.nodes)"
      },
      {
        "sha": "41f88fb664b2318f447be09c4063a7e694f8c6a5",
        "filename": "test/functional/bipdersig.py",
        "status": "modified",
        "additions": 2,
        "deletions": 5,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bipdersig.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bipdersig.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bipdersig.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -12,15 +12,12 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 3\n         self.setup_clean_chain = False\n+        self.extra_args = [[], [\"-blockversion=2\"], [\"-blockversion=3\"]]\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, []))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=2\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=3\"]))\n+        self.setup_nodes()\n         connect_nodes(self.nodes[1], 0)\n         connect_nodes(self.nodes[2], 0)\n-        self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "00ae3d75723dfa0cb13d29991b32796adbd8bbb5",
        "filename": "test/functional/blockchain.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/blockchain.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/blockchain.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/blockchain.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -35,12 +35,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 2\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        self.is_network_split = False\n-        self.sync_all()\n-\n     def run_test(self):\n         self._test_gettxoutsetinfo()\n         self._test_getblockheader()"
      },
      {
        "sha": "54fd7740c1f442baf8ec959562778b8592cfd38b",
        "filename": "test/functional/bumpfee.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bumpfee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/bumpfee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/bumpfee.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -47,7 +47,6 @@ def setup_network(self, split=False):\n         self.nodes[1].walletpassphrase(WALLET_PASSPHRASE, WALLET_PASSPHRASE_TIMEOUT)\n \n         connect_nodes_bi(self.nodes, 0, 1)\n-        self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "21a9f1223fd37abee2209c698b4eaa50ec1637b1",
        "filename": "test/functional/decodescript.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/decodescript.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/decodescript.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/decodescript.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -16,10 +16,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        self.is_network_split = False\n-\n     def decodescript_script_sig(self):\n         signature = '304502207fa7a6d1e0ee81132a269ad84e68d695483745cde8b541e3bf630749894e342a022100c1f7ab20e13e22fb95281a870f3dcf38d782e53023ee313d741ad0cfbc0c509001'\n         push_signature = '48' + signature"
      },
      {
        "sha": "3f77a1828d978c329fc33ff01a51f5d0656ba2a5",
        "filename": "test/functional/disablewallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/disablewallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/disablewallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disablewallet.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -18,11 +18,7 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-\n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, [['-disablewallet']])\n-        self.is_network_split = False\n-        self.sync_all()\n+        self.extra_args = [[\"-disablewallet\"]]\n \n     def run_test (self):\n         x = self.nodes[0].validateaddress('3J98t1WpEZ73CNmQviecrnyiWrnqRhWNLy')"
      },
      {
        "sha": "50d79db90302e5f0523262018b92cf3cf83b9e1f",
        "filename": "test/functional/disconnect_ban.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/disconnect_ban.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/disconnect_ban.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/disconnect_ban.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -20,10 +20,6 @@ def __init__(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def setup_network(self):\n-        self.nodes = self.setup_nodes()\n-        connect_nodes_bi(self.nodes, 0, 1)\n-\n     def run_test(self):\n         self.log.info(\"Test setban and listbanned RPCs\")\n "
      },
      {
        "sha": "9db61c8350f948d681832ab035af2a7ac0182a9b",
        "filename": "test/functional/forknotify.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/forknotify.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/forknotify.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/forknotify.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -16,8 +16,6 @@ def __init__(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    alert_filename = None  # Set by setup_network\n-\n     def setup_network(self):\n         self.nodes = []\n         self.alert_filename = os.path.join(self.options.tmpdir, \"alert.txt\")\n@@ -30,7 +28,6 @@ def setup_network(self):\n                                 [\"-blockversion=211\"]))\n         connect_nodes(self.nodes[1], 0)\n \n-        self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "9ddafeb611cc45683d11c3536c99c1756ea318d8",
        "filename": "test/functional/fundrawtransaction.py",
        "status": "modified",
        "additions": 5,
        "deletions": 9,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/fundrawtransaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/fundrawtransaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/fundrawtransaction.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -23,15 +23,12 @@ def __init__(self):\n         self.num_nodes = 4\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.setup_nodes()\n \n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-        connect_nodes_bi(self.nodes,0,3)\n-\n-        self.is_network_split=False\n-        self.sync_all()\n+        connect_nodes_bi(self.nodes, 0, 1)\n+        connect_nodes_bi(self.nodes, 1, 2)\n+        connect_nodes_bi(self.nodes, 0, 2)\n+        connect_nodes_bi(self.nodes, 0, 3)\n \n     def run_test(self):\n         min_relay_tx_fee = self.nodes[0].getnetworkinfo()['relayfee']\n@@ -467,7 +464,6 @@ def run_test(self):\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n         connect_nodes_bi(self.nodes,0,3)\n-        self.is_network_split=False\n         self.sync_all()\n \n         # drain the keypool"
      },
      {
        "sha": "fca99c7df5715a767e30a31e7946d8ba993b79f5",
        "filename": "test/functional/getblocktemplate_proposals.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/getblocktemplate_proposals.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/getblocktemplate_proposals.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getblocktemplate_proposals.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -73,10 +73,6 @@ def __init__(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def setup_network(self):\n-        self.nodes = self.setup_nodes()\n-        connect_nodes_bi(self.nodes, 0, 1)\n-\n     def run_test(self):\n         node = self.nodes[0]\n         node.generate(1) # Mine a block to leave initial block download"
      },
      {
        "sha": "15f96c565fe60353c4a20ff105953f5b21e8a922",
        "filename": "test/functional/getchaintips.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/getchaintips.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/getchaintips.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/getchaintips.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -31,7 +31,7 @@ def run_test (self):\n         self.split_network ()\n         self.nodes[0].generate(10)\n         self.nodes[2].generate(20)\n-        self.sync_all ()\n+        self.sync_all([self.nodes[:2], self.nodes[2:]])\n \n         tips = self.nodes[1].getchaintips ()\n         assert_equal (len (tips), 1)"
      },
      {
        "sha": "4b32e8d9ca338373d3fbf7e332fa06c082afcb5d",
        "filename": "test/functional/httpbasics.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/httpbasics.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/httpbasics.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/httpbasics.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -17,7 +17,7 @@ def __init__(self):\n         self.setup_clean_chain = False\n \n     def setup_network(self):\n-        self.nodes = self.setup_nodes()\n+        self.setup_nodes()\n \n     def run_test(self):\n "
      },
      {
        "sha": "9e3491c428f55fffe14e17c5d36144097114cf03",
        "filename": "test/functional/importmulti.py",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/importmulti.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/importmulti.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importmulti.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -12,9 +12,8 @@ def __init__(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = True\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(2, self.options.tmpdir)\n-        self.is_network_split=False\n+    def setup_network(self):\n+        self.setup_nodes()\n \n     def run_test (self):\n         self.log.info(\"Mining blocks...\")"
      },
      {
        "sha": "94753fe43114c31eb75092249b17c8a05d20b233",
        "filename": "test/functional/importprunedfunds.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/importprunedfunds.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/importprunedfunds.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/importprunedfunds.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -14,12 +14,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes_bi(self.nodes,0,1)\n-        self.is_network_split=False\n-        self.sync_all()\n-\n     def run_test(self):\n         self.log.info(\"Mining blocks...\")\n         self.nodes[0].generate(101)"
      },
      {
        "sha": "c499d57b90379746f66ee1def2cc3544de0b9d87",
        "filename": "test/functional/invalidateblock.py",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/invalidateblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/invalidateblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/invalidateblock.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -8,20 +8,15 @@\n from test_framework.util import *\n \n class InvalidateTest(BitcoinTestFramework):\n-    \n-        \n+\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False \n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n-        \n+        self.setup_nodes()\n+\n     def run_test(self):\n         self.log.info(\"Make sure we repopulate setBlockIndexCandidates after InvalidateBlock:\")\n         self.log.info(\"Mine 4 blocks on Node 0\")"
      },
      {
        "sha": "c276e64c7c710dda5f238e7a8e2102e0cfb9af8c",
        "filename": "test/functional/keypool.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/keypool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/keypool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/keypool.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -84,8 +84,5 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n \n-    def setup_network(self):\n-        self.nodes = self.setup_nodes()\n-\n if __name__ == '__main__':\n     KeyPoolTest().main()"
      },
      {
        "sha": "f3d41e573eda75ebc24b5fe9b815b1a06c404fbb",
        "filename": "test/functional/listsinceblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/listsinceblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/listsinceblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listsinceblock.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -43,7 +43,6 @@ def run_test (self):\n         This test only checks that [tx0] is present.\n         '''\n \n-        assert_equal(self.is_network_split, False)\n         self.nodes[2].generate(101)\n         self.sync_all()\n \n@@ -54,7 +53,6 @@ def run_test (self):\n \n         # Split network into two\n         self.split_network()\n-        assert_equal(self.is_network_split, True)\n \n         # send to nodes[0] from nodes[2]\n         senttx = self.nodes[2].sendtoaddress(self.nodes[0].getnewaddress(), 1)\n@@ -64,7 +62,7 @@ def run_test (self):\n         self.nodes[2].generate(7)\n         self.log.info('lastblockhash=%s' % (lastblockhash))\n \n-        self.sync_all()\n+        self.sync_all([self.nodes[:2], self.nodes[2:]])\n \n         self.join_network()\n "
      },
      {
        "sha": "cba370d8b06b8cd952e2acddc8320bbe27939829",
        "filename": "test/functional/listtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/listtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/listtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/listtransactions.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -24,7 +24,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         # Simple send, 0 to 1:"
      },
      {
        "sha": "bff1b532347f98a41fb6164248d439b843177a60",
        "filename": "test/functional/maxuploadtarget.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/maxuploadtarget.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/maxuploadtarget.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/maxuploadtarget.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -35,15 +35,11 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]]\n \n         # Cache for utxos, as the listunspent may take a long time later in the test\n         self.utxo_cache = []\n \n-    def setup_network(self):\n-        # Start a node with maxuploadtarget of 200 MB (/24h)\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxuploadtarget=800\", \"-blockmaxsize=999000\"]))\n-\n     def run_test(self):\n         # Before we connect anything, we first set the time on the node\n         # to be in the past, otherwise things break because the CNode"
      },
      {
        "sha": "2777291dd0effec0044c37e642c62ee2bb8a7913",
        "filename": "test/functional/mempool_limit.py",
        "status": "modified",
        "additions": 7,
        "deletions": 12,
        "changes": 19,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_limit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_limit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_limit.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -9,30 +9,25 @@\n \n class MempoolLimitTest(BitcoinTestFramework):\n \n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxmempool=5\", \"-spendzeroconfchange=0\"]))\n-        self.is_network_split = False\n-        self.sync_all()\n-        self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n-\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-\n-        self.txouts = gen_return_txouts()\n+        self.extra_args = [[\"-maxmempool=5\", \"-spendzeroconfchange=0\"]]\n \n     def run_test(self):\n+        txouts = gen_return_txouts()\n+        relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n+\n         txids = []\n-        utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], 91)\n+        utxos = create_confirmed_utxos(relayfee, self.nodes[0], 91)\n \n         #create a mempool tx that will be evicted\n         us0 = utxos.pop()\n         inputs = [{ \"txid\" : us0[\"txid\"], \"vout\" : us0[\"vout\"]}]\n         outputs = {self.nodes[0].getnewaddress() : 0.0001}\n         tx = self.nodes[0].createrawtransaction(inputs, outputs)\n-        self.nodes[0].settxfee(self.relayfee) # specifically fund this tx with low fee\n+        self.nodes[0].settxfee(relayfee) # specifically fund this tx with low fee\n         txF = self.nodes[0].fundrawtransaction(tx)\n         self.nodes[0].settxfee(0) # return to automatic fee selection\n         txFS = self.nodes[0].signrawtransaction(txF['hex'])\n@@ -42,7 +37,7 @@ def run_test(self):\n         base_fee = relayfee*100\n         for i in range (3):\n             txids.append([])\n-            txids[i] = create_lots_of_big_transactions(self.nodes[0], self.txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n+            txids[i] = create_lots_of_big_transactions(self.nodes[0], txouts, utxos[30*i:30*i+30], 30, (i+1)*base_fee)\n \n         # by now, the tx should be evicted, check confirmation state\n         assert(txid not in self.nodes[0].getrawmempool())"
      },
      {
        "sha": "72f04095f47d10d9f88de596e2a4d257b61edac3",
        "filename": "test/functional/mempool_packages.py",
        "status": "modified",
        "additions": 1,
        "deletions": 8,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_packages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_packages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_packages.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -16,14 +16,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]))\n-        connect_nodes(self.nodes[0], 1)\n-        self.is_network_split = False\n-        self.sync_all()\n+        self.extra_args = [[\"-maxorphantx=1000\"], [\"-maxorphantx=1000\", \"-limitancestorcount=5\"]]\n \n     # Build a transaction that spends parent_txid:vout\n     # Return amount sent"
      },
      {
        "sha": "937bf4bab5781624eaca85936723a9882ffba0b5",
        "filename": "test/functional/mempool_reorg.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_reorg.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_reorg.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_reorg.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -17,18 +17,10 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n+        self.extra_args = [[\"-checkmempool\"]] * 2\n \n     alert_filename = None  # Set by setup_network\n \n-    def setup_network(self):\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n-        self.nodes.append(start_node(1, self.options.tmpdir, args))\n-        connect_nodes(self.nodes[1], 0)\n-        self.is_network_split = False\n-        self.sync_all()\n-\n     def run_test(self):\n         # Start with a 200 block chain\n         assert_equal(self.nodes[0].getblockcount(), 200)"
      },
      {
        "sha": "a2f6228df91c26238f57f79b7b9ac5e6afd44b54",
        "filename": "test/functional/mempool_resurrect_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 6,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_resurrect_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_resurrect_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_resurrect_test.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -14,13 +14,8 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n         # Just need one node for this test\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n-        self.is_network_split = False\n+        self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):\n         node0_address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "277ea45ad5bee4c1baa57a9bba8aa82509702586",
        "filename": "test/functional/mempool_spendcoinbase.py",
        "status": "modified",
        "additions": 1,
        "deletions": 7,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_spendcoinbase.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/mempool_spendcoinbase.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/mempool_spendcoinbase.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -22,13 +22,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n-        # Just need one node for this test\n-        args = [\"-checkmempool\"]\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, args))\n-        self.is_network_split = False\n+        self.extra_args = [[\"-checkmempool\"]]\n \n     def run_test(self):\n         chain_height = self.nodes[0].getblockcount()"
      },
      {
        "sha": "06af72ef1013c9d9386286e94279e56d78a1e64c",
        "filename": "test/functional/merkle_blocks.py",
        "status": "modified",
        "additions": 3,
        "deletions": 8,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/merkle_blocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/merkle_blocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/merkle_blocks.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -13,20 +13,15 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 4\n+        # Nodes 0/1 are \"wallet\" nodes, Nodes 2/3 are used for testing\n+        self.extra_args = [[], [], [], [\"-txindex\"]]\n \n     def setup_network(self):\n-        self.nodes = []\n-        # Nodes 0/1 are \"wallet\" nodes\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        # Nodes 2/3 are used for testing\n-        self.nodes.append(start_node(2, self.options.tmpdir))\n-        self.nodes.append(start_node(3, self.options.tmpdir, [\"-txindex\"]))\n+        self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[0], 3)\n \n-        self.is_network_split = False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "6ff91a960b627c90377a98669fc592ec8071b74f",
        "filename": "test/functional/multi_rpc.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/multi_rpc.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/multi_rpc.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/multi_rpc.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -27,9 +27,6 @@ def setup_chain(self):\n             f.write(rpcauth+\"\\n\")\n             f.write(rpcauth2+\"\\n\")\n \n-    def setup_network(self):\n-        self.nodes = self.setup_nodes()\n-\n     def run_test(self):\n \n         ##################################################"
      },
      {
        "sha": "16476f7d341c7c9381df2666fff018fe69ed937e",
        "filename": "test/functional/net.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/net.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/net.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/net.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -25,12 +25,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        self.is_network_split = False\n-        self.sync_all()\n-\n     def run_test(self):\n         self._test_connection_count()\n         self._test_getnettotals()"
      },
      {
        "sha": "9717add272e999f006118f2695915c0c2529d400",
        "filename": "test/functional/nulldummy.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/nulldummy.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/nulldummy.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/nulldummy.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -41,11 +41,7 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n         self.setup_clean_chain = True\n-\n-    def setup_network(self):\n-        # Must set the blockversion for this test\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir,\n-                                 extra_args=[['-whitelist=127.0.0.1', '-walletprematurewitness']])\n+        self.extra_args = [['-whitelist=127.0.0.1', '-walletprematurewitness']]\n \n     def run_test(self):\n         self.address = self.nodes[0].getnewaddress()"
      },
      {
        "sha": "322cb767db3137fc1c757711f5b1543943d9a906",
        "filename": "test/functional/p2p-acceptblock.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-acceptblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-acceptblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-acceptblock.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -64,17 +64,13 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n+        self.extra_args = [[], [\"-whitelist=127.0.0.1\"]]\n \n     def setup_network(self):\n         # Node0 will be used to test behavior of processing unrequested blocks\n         # from peers which are not whitelisted, while Node1 will be used for\n         # the whitelisted case.\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir,\n-                                     binary=self.options.testbinary))\n-        self.nodes.append(start_node(1, self.options.tmpdir,\n-                                     [\"-whitelist=127.0.0.1\"],\n-                                     binary=self.options.testbinary))\n+        self.setup_nodes()\n \n     def run_test(self):\n         # Setup the p2p connections and start up the network thread."
      },
      {
        "sha": "9b302120ac68fabf503779a4c1214f812893b92d",
        "filename": "test/functional/p2p-compactblocks.py",
        "status": "modified",
        "additions": 1,
        "deletions": 9,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-compactblocks.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-compactblocks.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-compactblocks.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -98,17 +98,9 @@ def __init__(self):\n         self.setup_clean_chain = True\n         # Node0 = pre-segwit, node1 = segwit-aware\n         self.num_nodes = 2\n+        self.extra_args = [[\"-bip9params=segwit:0:0\"], [\"-txindex\"]]\n         self.utxos = []\n \n-    def setup_network(self):\n-        self.nodes = []\n-\n-        # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, \n-                [[\"-bip9params=segwit:0:0\"], \n-                 [\"-txindex\"]])\n-        connect_nodes(self.nodes[0], 1)\n-\n     def build_block_on_tip(self, node, segwit=False):\n         height = node.getblockcount()\n         tip = node.getbestblockhash()"
      },
      {
        "sha": "dbccb633a5b88abe7196a50a17ceb5aa350ebcaf",
        "filename": "test/functional/p2p-feefilter.py",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-feefilter.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-feefilter.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-feefilter.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -43,14 +43,6 @@ def __init__(self):\n         self.num_nodes = 2\n         self.setup_clean_chain = False\n \n-    def setup_network(self):\n-        # Node1 will be used to generate txs which should be relayed from Node0\n-        # to our test node\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir))\n-        self.nodes.append(start_node(1, self.options.tmpdir))\n-        connect_nodes(self.nodes[0], 1)\n-\n     def run_test(self):\n         node1 = self.nodes[1]\n         node0 = self.nodes[0]"
      },
      {
        "sha": "33b57ef33d8d021b9ebb9b99af214fb76d1484d2",
        "filename": "test/functional/p2p-leaktests.py",
        "status": "modified",
        "additions": 1,
        "deletions": 4,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-leaktests.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-leaktests.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-leaktests.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -92,10 +92,7 @@ class P2PLeakTest(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n-    def setup_network(self):\n-        extra_args = [['-banscore='+str(banscore)]\n-                      for i in range(self.num_nodes)]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n+        self.extra_args = [['-banscore='+str(banscore)]]\n \n     def run_test(self):\n         no_version_bannode = CNodeNoVersionBan()"
      },
      {
        "sha": "34ef249eeaa08857a980ffdb075701ff496df846",
        "filename": "test/functional/p2p-mempool.py",
        "status": "modified",
        "additions": 2,
        "deletions": 4,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-mempool.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-mempool.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-mempool.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -17,10 +17,8 @@ class P2PMempoolTests(BitcoinTestFramework):\n     def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n-        self.num_nodes = 2\n-\n-    def setup_network(self):\n-        self.nodes = [start_node(0, self.options.tmpdir, [\"-peerbloomfilters=0\"])]\n+        self.num_nodes = 1\n+        self.extra_args = [[\"-peerbloomfilters=0\"]]\n \n     def run_test(self):\n         #connect a mininode"
      },
      {
        "sha": "335777b2abd048d688ecae9c90da40b28cbdbc48",
        "filename": "test/functional/p2p-segwit.py",
        "status": "modified",
        "additions": 3,
        "deletions": 7,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-segwit.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -124,17 +124,13 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-whitelist=127.0.0.1\"], [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"], [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]]\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-whitelist=127.0.0.1\"]))\n-        # Start a node for testing IsStandard rules.\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-acceptnonstdtxn=0\"]))\n+        self.setup_nodes()\n         connect_nodes(self.nodes[0], 1)\n-\n-        # Disable segwit's bip9 parameter to simulate upgrading after activation.\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-whitelist=127.0.0.1\", \"-bip9params=segwit:0:0\"]))\n         connect_nodes(self.nodes[0], 2)\n+        self.sync_all()\n \n     ''' Helpers '''\n     # Build a block on top of node0's tip."
      },
      {
        "sha": "c3b29c215b7d37b46c5546c482b24c7748800820",
        "filename": "test/functional/p2p-timeouts.py",
        "status": "modified",
        "additions": 0,
        "deletions": 6,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-timeouts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-timeouts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-timeouts.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -38,12 +38,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def setup_network(self):\n-        self.nodes = []\n-\n-        # Start up node0 to be a version 1, pre-segwit node.\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-\n     def run_test(self):\n         # Setup the p2p connections and start up the network thread.\n         self.no_verack_node = TestNode() # never send verack"
      },
      {
        "sha": "7254017e60f8c73bf52dd0e58daa77ce6b04f168",
        "filename": "test/functional/p2p-versionbits-warning.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-versionbits-warning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/p2p-versionbits-warning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/p2p-versionbits-warning.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -40,7 +40,7 @@ def setup_network(self):\n         with open(self.alert_filename, 'w', encoding='utf8') as _:\n             pass\n         self.extra_args = [[\"-alertnotify=echo %s >> \\\"\" + self.alert_filename + \"\\\"\"]]\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.setup_nodes()\n \n     # Send numblocks blocks via peer with nVersionToUse set.\n     def send_blocks_with_version(self, peer, numblocks, nVersionToUse):"
      },
      {
        "sha": "04b41e76baefeaf2dca2bd9f4808406009de708d",
        "filename": "test/functional/preciousblock.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/preciousblock.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/preciousblock.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/preciousblock.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -41,7 +41,7 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self):\n-        self.nodes = self.setup_nodes()\n+        self.setup_nodes()\n \n     def run_test(self):\n         self.log.info(\"Ensure submitblock can in principle reorg to a competing chain\")"
      },
      {
        "sha": "a07923edba8c9d0cc5bcb4221e2a68aa4dc072f5",
        "filename": "test/functional/prioritise_transaction.py",
        "status": "modified",
        "additions": 2,
        "deletions": 7,
        "changes": 9,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/prioritise_transaction.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/prioritise_transaction.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/prioritise_transaction.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -14,17 +14,12 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n+        self.extra_args = [[\"-printpriority=1\"]]\n \n+    def run_test(self):\n         self.txouts = gen_return_txouts()\n-\n-    def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False\n-\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-printpriority=1\"]))\n         self.relayfee = self.nodes[0].getnetworkinfo()['relayfee']\n \n-    def run_test(self):\n         utxo_count = 90\n         utxos = create_confirmed_utxos(self.relayfee, self.nodes[0], utxo_count)\n         base_fee = self.relayfee*100 # our transactions are smaller than 100kb"
      },
      {
        "sha": "69384d9d85af71872e9eb3bf4375876161e118f0",
        "filename": "test/functional/proxy_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/proxy_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/proxy_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/proxy_test.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -90,7 +90,7 @@ def setup_nodes(self):\n             ]\n         if self.have_ipv6:\n             args[3] = ['-listen', '-proxy=[%s]:%i' % (self.conf3.addr),'-proxyrandomize=0', '-noonion']\n-        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args=args)\n \n     def node_test(self, node, proxies, auth, test_onion=True):\n         rv = []"
      },
      {
        "sha": "17019c658bfd9e91fac30522348cfbd56c77a927",
        "filename": "test/functional/pruning.py",
        "status": "modified",
        "additions": 20,
        "deletions": 22,
        "changes": 42,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/pruning.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/pruning.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/pruning.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -32,31 +32,21 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 6\n \n-        # Cache for utxos, as the listunspent may take a long time later in the test\n-        self.utxo_cache_0 = []\n-        self.utxo_cache_1 = []\n-\n-    def setup_network(self):\n-        self.nodes = []\n-        self.is_network_split = False\n-\n-        # Create nodes 0 and 1 to mine\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\", \"-checkblocks=5\"], timewait=900))\n-\n-        # Create node 2 to test pruning\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-prune=550\"], timewait=900))\n-        self.prunedir = self.options.tmpdir+\"/node2/regtest/blocks/\"\n-\n+        # Create nodes 0 and 1 to mine.\n+        # Create node 2 to test pruning.\n         # Create nodes 3 and 4 to test manual pruning (they will be re-started with manual pruning later)\n-        self.nodes.append(start_node(3, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n-        self.nodes.append(start_node(4, self.options.tmpdir, [\"-maxreceivebuffer=20000\",\"-blockmaxsize=999000\"], timewait=900))\n-\n         # Create nodes 5 to test wallet in prune mode, but do not connect\n-        self.nodes.append(start_node(5, self.options.tmpdir, [\"-prune=550\"]))\n+        self.extra_args = [[\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\", \"-checkblocks=5\"],\n+                           [\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\", \"-checkblocks=5\"],\n+                           [\"-maxreceivebuffer=20000\", \"-prune=550\"],\n+                           [\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\"],\n+                           [\"-maxreceivebuffer=20000\", \"-blockmaxsize=999000\"],\n+                           [\"-prune=550\"]]\n \n-        # Determine default relay fee\n-        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+    def setup_network(self):\n+        self.setup_nodes()\n+\n+        self.prunedir = self.options.tmpdir + \"/node2/regtest/blocks/\"\n \n         connect_nodes(self.nodes[0], 1)\n         connect_nodes(self.nodes[1], 2)\n@@ -332,6 +322,14 @@ def wallet_test(self):\n     def run_test(self):\n         self.log.info(\"Warning! This test requires 4GB of disk space and takes over 30 mins (up to 2 hours)\")\n         self.log.info(\"Mining a big blockchain of 995 blocks\")\n+\n+        # Determine default relay fee\n+        self.relayfee = self.nodes[0].getnetworkinfo()[\"relayfee\"]\n+\n+        # Cache for utxos, as the listunspent may take a long time later in the test\n+        self.utxo_cache_0 = []\n+        self.utxo_cache_1 = []\n+\n         self.create_big_chain()\n         # Chain diagram key:\n         # *   blocks on main chain"
      },
      {
        "sha": "35debf9cab52a74375bed5d86074fa7a13453313",
        "filename": "test/functional/rawtransactions.py",
        "status": "modified",
        "additions": 1,
        "deletions": 13,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rawtransactions.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -24,21 +24,9 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-\n-        #connect to a local machine for debugging\n-        #url = \"http://bitcoinrpc:DP6DvqZtqXarpeNWyN3LZTFchCCyCUuHwNF7E8pX99x1@%s:%d\" % ('127.0.0.1', 18332)\n-        #proxy = AuthServiceProxy(url)\n-        #proxy.url = url # store URL on proxy for info\n-        #self.nodes.append(proxy)\n-\n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n+        super().setup_network()\n         connect_nodes_bi(self.nodes,0,2)\n \n-        self.is_network_split=False\n-        self.sync_all()\n-\n     def run_test(self):\n \n         #prepare some coins for multiple *rawtransaction commands"
      },
      {
        "sha": "a1cae301c598ae7fec888f81b220fb42fade15f3",
        "filename": "test/functional/receivedby.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/receivedby.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/receivedby.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/receivedby.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -32,7 +32,7 @@ def __init__(self):\n     def setup_nodes(self):\n         #This test requires mocktime\n         enable_mocktime()\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n \n     def run_test(self):\n         '''"
      },
      {
        "sha": "8b8c5f3e710a314c8684d53b6cd6f09178246466",
        "filename": "test/functional/reindex.py",
        "status": "modified",
        "additions": 0,
        "deletions": 3,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/reindex.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/reindex.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/reindex.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -24,9 +24,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-\n     def reindex(self, justchainstate=False):\n         self.nodes[0].generate(3)\n         blockcount = self.nodes[0].getblockcount()"
      },
      {
        "sha": "e940ce535c2b1f74112604a10f8a29afed6943cb",
        "filename": "test/functional/replace-by-fee.py",
        "status": "modified",
        "additions": 6,
        "deletions": 11,
        "changes": 17,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/replace-by-fee.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/replace-by-fee.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/replace-by-fee.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -65,17 +65,12 @@ def __init__(self):\n         super().__init__()\n         self.num_nodes = 1\n         self.setup_clean_chain = False\n-\n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-maxorphantx=1000\",\n-                                                              \"-whitelist=127.0.0.1\",\n-                                                              \"-limitancestorcount=50\",\n-                                                              \"-limitancestorsize=101\",\n-                                                              \"-limitdescendantcount=200\",\n-                                                              \"-limitdescendantsize=101\"\n-                                                              ]))\n-        self.is_network_split = False\n+        self.extra_args= [[\"-maxorphantx=1000\",\n+                           \"-whitelist=127.0.0.1\",\n+                           \"-limitancestorcount=50\",\n+                           \"-limitancestorsize=101\",\n+                           \"-limitdescendantcount=200\",\n+                           \"-limitdescendantsize=101\"]]\n \n     def run_test(self):\n         make_utxo(self.nodes[0], 1*COIN)"
      },
      {
        "sha": "fbcceba0fafb626115333b921df169d3164c29ee",
        "filename": "test/functional/rest.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rest.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rest.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rest.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -49,12 +49,8 @@ def __init__(self):\n         self.num_nodes = 3\n \n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n-        connect_nodes_bi(self.nodes,0,2)\n-        self.is_network_split=False\n-        self.sync_all()\n+        super().setup_network()\n+        connect_nodes_bi(self.nodes, 0, 2)\n \n     def run_test(self):\n         url = urllib.parse.urlparse(self.nodes[0].url)"
      },
      {
        "sha": "fd81b02ead17efddffb63acdd577900c28016ee9",
        "filename": "test/functional/rpcnamedargs.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rpcnamedargs.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/rpcnamedargs.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/rpcnamedargs.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -22,11 +22,6 @@ def __init__(self):\n         self.setup_clean_chain = False\n         self.num_nodes = 1\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        self.is_network_split = False\n-        self.sync_all()\n-\n     def run_test(self):\n         node = self.nodes[0]\n         h = node.help(command='getinfo')"
      },
      {
        "sha": "ac95d664665400a1b45aabd840b6d252f4f01e1a",
        "filename": "test/functional/segwit.py",
        "status": "modified",
        "additions": 4,
        "deletions": 7,
        "changes": 11,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/segwit.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/segwit.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/segwit.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -80,16 +80,13 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n+        self.extra_args = [[\"-walletprematurewitness\", \"-rpcserialversion=0\"],\n+                           [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"],\n+                           [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]]\n \n     def setup_network(self):\n-        self.nodes = []\n-        self.nodes.append(start_node(0, self.options.tmpdir, [\"-walletprematurewitness\", \"-rpcserialversion=0\"]))\n-        self.nodes.append(start_node(1, self.options.tmpdir, [\"-blockversion=4\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\", \"-rpcserialversion=1\"]))\n-        self.nodes.append(start_node(2, self.options.tmpdir, [\"-blockversion=536870915\", \"-promiscuousmempoolflags=517\", \"-prematurewitness\", \"-walletprematurewitness\"]))\n-        connect_nodes(self.nodes[1], 0)\n-        connect_nodes(self.nodes[2], 1)\n+        super().setup_network()\n         connect_nodes(self.nodes[0], 2)\n-        self.is_network_split = False\n         self.sync_all()\n \n     def success_mine(self, node, txid, sign, redeem_script=\"\"):"
      },
      {
        "sha": "97d64c0d985e1e2e1ef336da0a530dd46f272234",
        "filename": "test/functional/sendheaders.py",
        "status": "modified",
        "additions": 0,
        "deletions": 5,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/sendheaders.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/sendheaders.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/sendheaders.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -182,11 +182,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n \n-    def setup_network(self):\n-        self.nodes = []\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes(self.nodes[0], 1)\n-\n     # mine count blocks and return the new tip\n     def mine_blocks(self, count):\n         # Clear out last block announcement from each p2p listener"
      },
      {
        "sha": "bfde8e40ec955033fed7def306b27ba91a6f4c4c",
        "filename": "test/functional/signmessages.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/signmessages.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/signmessages.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signmessages.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -14,10 +14,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        self.is_network_split = False\n-\n     def run_test(self):\n         message = 'This is just a test message'\n "
      },
      {
        "sha": "fc49c23b9fdeba43fe132ff4c18914d849408824",
        "filename": "test/functional/signrawtransactions.py",
        "status": "modified",
        "additions": 0,
        "deletions": 4,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/signrawtransactions.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/signrawtransactions.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/signrawtransactions.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -14,10 +14,6 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        self.is_network_split = False\n-\n     def successful_signing_test(self):\n         \"\"\"Create and sign a valid raw transaction with one input.\n "
      },
      {
        "sha": "19ffe9e8518127fac3a13f0621d28f63c94476d8",
        "filename": "test/functional/smartfees.py",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/smartfees.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/smartfees.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/smartfees.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -203,7 +203,6 @@ def setup_network(self):\n         connect_nodes(self.nodes[0], 2)\n         connect_nodes(self.nodes[2], 1)\n \n-        self.is_network_split = False\n         self.sync_all()\n \n     def transact_and_mine(self, numblocks, mining_node):"
      },
      {
        "sha": "e912dcbaffb9f40a6df9997e93b9d0e71bde32c2",
        "filename": "test/functional/test_framework/test_framework.py",
        "status": "modified",
        "additions": 21,
        "deletions": 30,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/test_framework/test_framework.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/test_framework/test_framework.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/test_framework.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -17,6 +17,7 @@\n     initialize_chain,\n     start_nodes,\n     connect_nodes_bi,\n+    disconnect_nodes,\n     sync_blocks,\n     sync_mempools,\n     stop_nodes,\n@@ -56,52 +57,42 @@ def stop_node(self, num_node):\n         stop_node(self.nodes[num_node], num_node)\n \n     def setup_nodes(self):\n-        return start_nodes(self.num_nodes, self.options.tmpdir)\n+        extra_args = None\n+        if hasattr(self, \"extra_args\"):\n+            extra_args = self.extra_args\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args)\n \n-    def setup_network(self, split = False):\n-        self.nodes = self.setup_nodes()\n+    def setup_network(self):\n+        self.setup_nodes()\n \n         # Connect the nodes as a \"chain\".  This allows us\n         # to split the network between nodes 1 and 2 to get\n         # two halves that can work on competing chains.\n-\n-        # If we joined network halves, connect the nodes from the joint\n-        # on outward.  This ensures that chains are properly reorganised.\n-        if not split:\n-            connect_nodes_bi(self.nodes, 1, 2)\n-            sync_blocks(self.nodes[1:3])\n-            sync_mempools(self.nodes[1:3])\n-\n-        connect_nodes_bi(self.nodes, 0, 1)\n-        connect_nodes_bi(self.nodes, 2, 3)\n-        self.is_network_split = split\n+        for i in range(self.num_nodes - 1):\n+            connect_nodes_bi(self.nodes, i, i + 1)\n         self.sync_all()\n \n     def split_network(self):\n         \"\"\"\n         Split the network of four nodes into nodes 0/1 and 2/3.\n         \"\"\"\n-        assert not self.is_network_split\n-        stop_nodes(self.nodes)\n-        self.setup_network(True)\n-\n-    def sync_all(self):\n-        if self.is_network_split:\n-            sync_blocks(self.nodes[:2])\n-            sync_blocks(self.nodes[2:])\n-            sync_mempools(self.nodes[:2])\n-            sync_mempools(self.nodes[2:])\n-        else:\n-            sync_blocks(self.nodes)\n-            sync_mempools(self.nodes)\n+        disconnect_nodes(self.nodes[1], 2)\n+        disconnect_nodes(self.nodes[2], 1)\n+        self.sync_all([self.nodes[:2], self.nodes[2:]])\n+\n+    def sync_all(self, node_groups=None):\n+        if not node_groups:\n+            node_groups = [self.nodes]\n+\n+        [sync_blocks(group) for group in node_groups]\n+        [sync_mempools(group) for group in node_groups]\n \n     def join_network(self):\n         \"\"\"\n         Join the (previously split) network halves together.\n         \"\"\"\n-        assert self.is_network_split\n-        stop_nodes(self.nodes)\n-        self.setup_network(False)\n+        connect_nodes_bi(self.nodes, 1, 2)\n+        self.sync_all()\n \n     def main(self):\n "
      },
      {
        "sha": "9186c3cbe93970c77bb69cb8106e1a1344c81cd8",
        "filename": "test/functional/test_framework/util.py",
        "status": "modified",
        "additions": 14,
        "deletions": 1,
        "changes": 15,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/test_framework/util.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/test_framework/util.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/test_framework/util.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -315,7 +315,7 @@ def start_node(i, dirname, extra_args=None, rpchost=None, timewait=None, binary=\n     datadir = os.path.join(dirname, \"node\"+str(i))\n     if binary is None:\n         binary = os.getenv(\"BITCOIND\", \"bitcoind\")\n-    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime())]\n+    args = [binary, \"-datadir=\" + datadir, \"-server\", \"-keypool=1\", \"-discover=0\", \"-rest\", \"-logtimemicros\", \"-debug\", \"-debugexclude=libevent\", \"-debugexclude=leveldb\", \"-mocktime=\" + str(get_mocktime()), \"-uacomment=testnode%d\" % i]\n     if extra_args is not None: args.extend(extra_args)\n     bitcoind_processes[i] = subprocess.Popen(args, stderr=stderr)\n     logger.debug(\"initialize_chain: bitcoind started, waiting for RPC to come up\")\n@@ -354,6 +354,8 @@ def start_nodes(num_nodes, dirname, extra_args=None, rpchost=None, timewait=None\n     \"\"\"\n     if extra_args is None: extra_args = [ None for _ in range(num_nodes) ]\n     if binary is None: binary = [ None for _ in range(num_nodes) ]\n+    assert_equal(len(extra_args), num_nodes)\n+    assert_equal(len(binary), num_nodes)\n     rpcs = []\n     try:\n         for i in range(num_nodes):\n@@ -385,6 +387,17 @@ def set_node_times(nodes, t):\n     for node in nodes:\n         node.setmocktime(t)\n \n+def disconnect_nodes(from_connection, node_num):\n+    for peer_id in [peer['id'] for peer in from_connection.getpeerinfo() if \"testnode%d\" % node_num in peer['subver']]:\n+        from_connection.disconnectnode(nodeid=peer_id)\n+\n+    for _ in range(50):\n+        if [peer['id'] for peer in from_connection.getpeerinfo() if \"testnode%d\" % node_num in peer['subver']] == []:\n+            break\n+        time.sleep(0.1)\n+    else:\n+        raise AssertionError(\"timed out waiting for disconnect\")\n+\n def connect_nodes(from_connection, node_num):\n     ip_port = \"127.0.0.1:\"+str(p2p_port(node_num))\n     from_connection.addnode(ip_port, \"onetry\")"
      },
      {
        "sha": "9b81af96cf0b6c41b17630627ff23391c73f9de7",
        "filename": "test/functional/txn_clone.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/txn_clone.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/txn_clone.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_clone.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -20,7 +20,9 @@ def add_options(self, parser):\n \n     def setup_network(self):\n         # Start with split network:\n-        return super(TxnMallTest, self).setup_network(True)\n+        super(TxnMallTest, self).setup_network()\n+        disconnect_nodes(self.nodes[1], 2)\n+        disconnect_nodes(self.nodes[2], 1)\n \n     def run_test(self):\n         # All nodes should start with 1,250 BTC:"
      },
      {
        "sha": "1bd3b3271c5198ecb7494bad27bf900df0b140cc",
        "filename": "test/functional/txn_doublespend.py",
        "status": "modified",
        "additions": 3,
        "deletions": 1,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/txn_doublespend.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -20,7 +20,9 @@ def add_options(self, parser):\n \n     def setup_network(self):\n         # Start with split network:\n-        return super(TxnMallTest, self).setup_network(True)\n+        super().setup_network()\n+        disconnect_nodes(self.nodes[1], 2)\n+        disconnect_nodes(self.nodes[2], 1)\n \n     def run_test(self):\n         # All nodes should start with 1,250 BTC:"
      },
      {
        "sha": "700f06b2cfafb35c23dfbf0088f5a9efbfa6525c",
        "filename": "test/functional/wallet-accounts.py",
        "status": "modified",
        "additions": 1,
        "deletions": 5,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet-accounts.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet-accounts.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-accounts.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -24,11 +24,7 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 1\n-        self.node_args = [[]]\n-\n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n-        self.is_network_split = False\n+        self.extra_args = [[]]\n \n     def run_test (self):\n         node = self.nodes[0]"
      },
      {
        "sha": "4ad458f3efd8a44f53a5f33225798e5bf53ca658",
        "filename": "test/functional/wallet-hd.py",
        "status": "modified",
        "additions": 4,
        "deletions": 9,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet-hd.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet-hd.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet-hd.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -22,20 +22,15 @@ def __init__(self):\n         super().__init__()\n         self.setup_clean_chain = True\n         self.num_nodes = 2\n-        self.node_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n-\n-    def setup_network(self):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.node_args)\n-        self.is_network_split = False\n-        connect_nodes_bi(self.nodes, 0, 1)\n+        self.extra_args = [['-usehd=0'], ['-usehd=1', '-keypool=0']]\n \n     def run_test (self):\n         tmpdir = self.options.tmpdir\n \n         # Make sure can't switch off usehd after wallet creation\n         self.stop_node(1)\n         assert_start_raises_init_error(1, self.options.tmpdir, ['-usehd=0'], 'already existing HD wallet')\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1])\n         connect_nodes_bi(self.nodes, 0, 1)\n \n         # Make sure we use hd, keep masterkeyid\n@@ -82,7 +77,7 @@ def run_test (self):\n         self.stop_node(1)\n         os.remove(self.options.tmpdir + \"/node1/regtest/wallet.dat\")\n         shutil.copyfile(tmpdir + \"/hd.bak\", tmpdir + \"/node1/regtest/wallet.dat\")\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1])\n         #connect_nodes_bi(self.nodes, 0, 1)\n \n         # Assert that derivation is deterministic\n@@ -96,7 +91,7 @@ def run_test (self):\n \n         # Needs rescan\n         self.stop_node(1)\n-        self.nodes[1] = start_node(1, self.options.tmpdir, self.node_args[1] + ['-rescan'])\n+        self.nodes[1] = start_node(1, self.options.tmpdir, self.extra_args[1] + ['-rescan'])\n         #connect_nodes_bi(self.nodes, 0, 1)\n         assert_equal(self.nodes[1].getbalance(), num_hd_adds + 1)\n "
      },
      {
        "sha": "57f6dfdaa92a916f671ab71131dc208b72444b2e",
        "filename": "test/functional/wallet.py",
        "status": "modified",
        "additions": 1,
        "deletions": 2,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/wallet.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -20,12 +20,11 @@ def __init__(self):\n         self.num_nodes = 4\n         self.extra_args = [['-usehd={:d}'.format(i%2==0)] for i in range(4)]\n \n-    def setup_network(self, split=False):\n+    def setup_network(self):\n         self.nodes = start_nodes(3, self.options.tmpdir, self.extra_args[:3])\n         connect_nodes_bi(self.nodes,0,1)\n         connect_nodes_bi(self.nodes,1,2)\n         connect_nodes_bi(self.nodes,0,2)\n-        self.is_network_split=False\n         self.sync_all()\n \n     def run_test(self):"
      },
      {
        "sha": "0492132af6898e4d753b5e37ba28e627af9f746e",
        "filename": "test/functional/walletbackup.py",
        "status": "modified",
        "additions": 1,
        "deletions": 3,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/walletbackup.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/walletbackup.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/walletbackup.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -44,14 +44,12 @@ def __init__(self):\n         # nodes 1, 2,3 are spenders, let's give them a keypool=100\n         self.extra_args = [[\"-keypool=100\"], [\"-keypool=100\"], [\"-keypool=100\"], []]\n \n-    # This mirrors how the network was setup in the bash test\n     def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, self.extra_args)\n+        self.setup_nodes()\n         connect_nodes(self.nodes[0], 3)\n         connect_nodes(self.nodes[1], 3)\n         connect_nodes(self.nodes[2], 3)\n         connect_nodes(self.nodes[2], 0)\n-        self.is_network_split=False\n         self.sync_all()\n \n     def one_send(self, from_node, to_address):"
      },
      {
        "sha": "7987edeb544091ec93e498522a19114693b86591",
        "filename": "test/functional/zapwallettxes.py",
        "status": "modified",
        "additions": 2,
        "deletions": 6,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/zapwallettxes.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/zapwallettxes.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zapwallettxes.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -23,13 +23,9 @@ def __init__(self):\n         self.setup_clean_chain = True\n         self.num_nodes = 3\n \n-    def setup_network(self, split=False):\n-        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir)\n-        connect_nodes_bi(self.nodes,0,1)\n-        connect_nodes_bi(self.nodes,1,2)\n+    def setup_network(self):\n+        super().setup_network()\n         connect_nodes_bi(self.nodes,0,2)\n-        self.is_network_split=False\n-        self.sync_all()\n \n     def run_test (self):\n         self.log.info(\"Mining blocks...\")"
      },
      {
        "sha": "a72630406e2536819d4a12da09fbebfd85258d5b",
        "filename": "test/functional/zmq_test.py",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/zmq_test.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/c9cc76dcaad85aa9441f18d38298f27a0ffd852a/test/functional/zmq_test.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/zmq_test.py?ref=c9cc76dcaad85aa9441f18d38298f27a0ffd852a",
        "patch": "@@ -40,7 +40,7 @@ def setup_nodes(self):\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashblock\")\n         self.zmqSubSocket.setsockopt(zmq.SUBSCRIBE, b\"hashtx\")\n         self.zmqSubSocket.connect(\"tcp://127.0.0.1:%i\" % self.port)\n-        return start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n+        self.nodes = start_nodes(self.num_nodes, self.options.tmpdir, extra_args=[\n             ['-zmqpubhashtx=tcp://127.0.0.1:'+str(self.port), '-zmqpubhashblock=tcp://127.0.0.1:'+str(self.port)],\n             [],\n             [],"
      }
    ]
  }
]