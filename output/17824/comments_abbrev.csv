DrahtBot,2019-12-29 04:48:56,"<!--e57a25ab6845829454e8d69fc972939a-->\n\nThe following sections might be updated with supplementary metadata relevant to reviewers and maintainers.\n\n<!--174a7506f384e20aa4161008e828411d-->\n### Conflicts\nReviewers, this pull request conflicts with the following ones:\n\n* #18418 (wallet: Increase OUTPUT_GROUP_MAX_ENTRIES to 100 by fjahr)\n* #17355 (gui: grey out used address in address book b",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-569474624,569474624,
kallewoof,2019-12-31 03:55:36,"The reported issue seems like things are not working as they should for sure, but I don't see how this code fixes it. Ultimately, if I want to send 10.5 bitcoin to you, and I have 500 UTXO:s of  1 BTC each all sending to A, the grouping part should result in 50 groups of 10 random UTXO:s each (each group worth 10 BTC), and two of these should be selected when sending, and ALL of the outputs should",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-569858933,569858933,
kallewoof,2019-12-31 05:34:41,I investigated this further. See https://github.com/bitcoin/bitcoin/issues/17603#issuecomment-569867141,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-569867447,569867447,
fjahr,2019-12-31 13:23:05,"> I investigated this further. See [#17603 (comment)](https://github.com/bitcoin/bitcoin/issues/17603#issuecomment-569867141)\n\nThanks, that's what I found as well, I should have described it in greater detail.\n\n> The reported issue seems like things are not working as they should for sure, but I don't see how this code fixes it. Ultimately, if I want to send 10.5 bitcoin to you, and I have",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-569928051,569928051,
kallewoof,2020-01-03 11:21:17,"I'm not sure this is the right approach here. It seems like marking the output groups as 'partial' when there are >10 outputs would address this. A simple approach would be to explicitly think of <max groups for multi-group destinations as ""0-conf"". The current code would then actively try to avoid using it except as a last resort.\n\nEdit: I didn't test, but I assume your example with ""not work",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-570545787,570545787,
kallewoof,2020-01-03 11:31:56,"I would do something like this\n```diff\ndiff --git a/src/wallet/wallet.cpp b/src/wallet/wallet.cpp\nindex 3954f6626..3c88ff9c0 100644\n--- a/src/wallet/wallet.cpp\n+++ b/src/wallet/wallet.cpp\n@@ -3976,6 +3976,7 @@ bool CWalletTx::IsImmatureCoinBase() const\n std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {\n     std::vector<Out",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-570548151,570548151,
kallewoof,2020-01-08 06:33:31,"You're probably right that it would not end up using the final group even if it could. I think that's okay, in this case. As for the `-walletrejectlongchains` issue, you would replace `9999` with `max_ancestors-1` where `max_ancestors` is defined as in the coin selection code.",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-571911050,571911050,
fjahr,2020-01-08 21:54:17,Rebased and implemented using `max_ancestors - 1` base on feedback.,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-572275147,572275147,
fjahr,2020-01-16 20:03:11,Rebased and gave test a less generic name.,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-575321924,575321924,
jonatack,2020-03-12 17:48:10,"Concept ACK. Can this PR have a `review club` tag to help people know there is a resource?\n\nReviewers, review club notes and meeting logs of both sessions are here: https://bitcoincore.reviews/17824\n\nSome of the suggestions from the sessions:\n- the PR title could use an improvement\n- the commit message could be a bit more elaborate\n- the changes could be better documented\n \n(Also",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-598332375,598332375,
fjahr,2020-03-24 11:25:35,Thanks for all the feedback! I should have addressed all the points here and also what was discussed in the review club. Also I tried to improve the naming of this PR/commit and expanded the commit message.,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-603183830,603183830,
fjahr,2020-04-02 13:51:28,"@jonatack Thanks for your comments! For now, I am saving the ACKs and included these cleanups in my followup PR #18418 ",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-607859726,607859726,
fjahr,2020-04-14 13:04:31,"Rebased, no code changes.",https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-613430117,613430117,
jonatack,2020-04-16 10:04:25,Re-ACK a2324e4,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-614549189,614549189,
achow101,2020-04-16 20:35:38,ACK a2324e4d3f47f084b07a364c9a360a0bf31e86a0,https://github.com/bitcoin/bitcoin/pull/17824#issuecomment-614880934,614880934,
instagibbs,2019-12-30 15:18:40,"what assumptions does this test have?\n\nSeems like it assumes the wallet has no more than 10*21 BTC? In other words, those sends completely drain the wallet of other UTXO addresses. This should be asserted and/or programmatically done.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r362013208,362013208,test/functional/wallet_avoidreuse.py
achow101,2019-12-30 18:43:26,"ISTM a cleaner approach would be to move `groups` down before the return and just keep everything in the map. When there are more than 10 outputs in a group, just stop adding to the group. This would also handle the case of 20 outputs.\n\nUnless our goal is to have multiple groups when more than 10 outputs for a destination?\n\ncc @kallewoof ",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r362064719,362064719,src/wallet/wallet.cpp
kallewoof,2019-12-31 03:49:54,"The intention was that if there were a ton of spends to the same address, these would be chunked into randomized 10 UTXO chunks, to avoid creating too large transactions. So yeah, the intention was to have multiple groups for the same destination in cases where there were 11+ UTXOs for it.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r362143748,362143748,src/wallet/wallet.cpp
kallewoof,2020-01-03 11:47:35,"It took me awhile to realize what is being stated here.\n\nIf a destination has more than 10 outputs, the 10-output groups should always be picked before the <10-output group, if any such exists.\n\nI.e. if a destination has 19 outputs, it will result in one 10-output group and one 9-output group. The second should never ever be used unless the former has already been used (in the same or a pr",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r362783629,362783629,test/functional/wallet_avoidreuse.py
fjahr,2020-01-06 01:04:59,I have expanded the test and the comments and hope it's more clear now.,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r363131187,363131187,test/functional/wallet_avoidreuse.py
jonatack,2020-03-11 17:36:39,Where does the value of `10000` come from? Could it be documented and maybe hoisted to a static constant?,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391146536,391146536,src/wallet/wallet.h
jonatack,2020-03-11 17:39:52,"Suggestion for line 202 if you have to retouch this commit (it's unrelated but wouldn't hurt to sneak it in, as this test is called several times):\n```diff\n-  self.log.info(""Test fund send fund send"")\n+  self.log.info(""Test fund send fund send {}"".format(second_addr_type))\n```",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391148769,391148769,test/functional/wallet_avoidreuse.py
kallewoof,2020-03-12 04:12:04,I think having a test where the code DOES use the discouraged <10 leftover group would be helpful to ensure that this is correctly chosen when necessary.,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391392340,391392340,test/functional/wallet_avoidreuse.py
kallewoof,2020-03-12 04:13:49,"I think this should be based on the wallet-determined max ancestor count, and should not have a default value here. (i.e. I suggest removing ` = 10000`)",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391392685,391392685,src/wallet/wallet.h
jonatack,2020-03-12 04:19:45,"Wallet-determined max ancestor count, as in getPackageLimits `gArgs.GetArg(""-limitancestorcount"", DEFAULT_ANCESTOR_LIMIT)`, which defaults to 25?",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391393820,391393820,src/wallet/wallet.h
kallewoof,2020-03-12 05:44:40,Yep!,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r391411942,391411942,src/wallet/wallet.h
promag,2020-03-15 01:35:16,"I'm aware this is moved code, but I think these should be initialized.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r392633254,392633254,src/wallet/wallet.cpp
promag,2020-03-15 01:35:47,"I'm aware this is moved code, but any idea why `max<int64_t>`?",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r392633286,392633286,src/wallet/wallet.cpp
promag,2020-03-15 01:49:54,"nit, could fix comment in L4038, s/10/OUTPUT_GROUP_MAX_ENTRIES.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r392633912,392633912,src/wallet/wallet.cpp
promag,2020-03-15 01:59:11,"nit, there are 3 `dst` lookups in `gmap`, one `find` would be better.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r392634313,392634313,src/wallet/wallet.cpp
promag,2020-03-15 02:06:43,IMO this should be in the loop.,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r392634618,392634618,src/wallet/wallet.cpp
fjahr,2020-03-24 10:50:57,done,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397060971,397060971,src/wallet/wallet.cpp
fjahr,2020-03-24 10:51:05,done,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397061050,397061050,src/wallet/wallet.cpp
fjahr,2020-03-24 10:51:12,done,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397061110,397061110,src/wallet/wallet.cpp
fjahr,2020-03-24 10:51:25,done,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397061241,397061241,src/wallet/wallet.cpp
fjahr,2020-03-24 10:51:53,"Added it, thanks.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397061516,397061516,test/functional/wallet_avoidreuse.py
fjahr,2020-03-24 10:52:23,Improved the naming overall in a separate commit. Thanks!,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397061813,397061813,test/functional/wallet_avoidreuse.py
fjahr,2020-03-24 11:17:43,"I removed the default value (10000), thanks!",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397075970,397075970,src/wallet/wallet.h
fjahr,2020-03-24 11:23:16,I don't know. I did some digging and the type was introduced [here](https://github.com/bitcoin/bitcoin/pull/12634/files#diff-b2bb174788c7409b671c46ccc86034bdR2588) and prior to that a `uint64` was first introduced [here](https://github.com/bitcoin/bitcoin/pull/9262/files#diff-b2bb174788c7409b671c46ccc86034bdR2020) in this context. I can only speculate that since this is a value from user input it ,https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397079127,397079127,src/wallet/wallet.cpp
kallewoof,2020-03-25 06:43:35,"This may have been a way to safeguard against a user defined value that was negative, but the switch to `getPackageLimits` removed that safeguard. Not sure if that was wise or not, but that's a separate question.",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r397636737,397636737,src/wallet/wallet.cpp
jonatack,2020-03-30 16:59:26,"suggest: s/a very high amount of fees./high fees./\n\nnote this feedback by @Xekyo mitigating the high fee motivation here: https://bitcoincore.reviews/17824.html#l-329",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r400348545,400348545,src/wallet/wallet.cpp
jonatack,2020-03-30 17:10:12,"Could perhaps expand on this documentation, like in your commit message, along the lines of:\n```diff\n-                // Make this unattractive as we want coin selection to avoid it if possible\n+                // By assigning it one less than the maximum number of ancestors\n+                // allowed for this wallet, we move this smaller subgroup to the\n+                // bottom of th",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r400355185,400355185,src/wallet/wallet.cpp
jonatack,2020-03-30 22:22:28,"Do you think it might be better to construct rather than copy?\n```diff\n-                        groups.push_back(it->second);\n+                        groups.emplace_back(it->second);\n                         it->second = OutputGroup{};\n-                        full_groups.insert(dst);\n+                        full_groups.emplace(dst);\n@@ -4208,7 +4208,7 @@ std::vector<OutputGroup> C",https://github.com/bitcoin/bitcoin/pull/17824#discussion_r400530011,400530011,src/wallet/wallet.cpp
