[
  {
    "sha": "1abbdac6777bc5396d17a6772c8176a354730997",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoxYWJiZGFjNjc3N2JjNTM5NmQxN2E2NzcyYzgxNzZhMzU0NzMwOTk3",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2019-12-29T00:58:46Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-04-14T13:02:06Z"
      },
      "message": "wallet: Prefer full destination groups in coin selection\n\nWhen a wallet uses avoid_reuse and has a large number of outputs in\na single destination, it groups these outputs in OutputGroups that\nare no larger than OUTPUT_GROUP_MAX_ENTRIES. The goal is to spend\nas many outputs as possible from the destination while not breaking\nconsensus due to a huge number of inputs and also not surprise the\nuse with high fees. If there are n outputs in a destination and\nn > OUTPUT_GROUP_MAX_ENTRIES then this results in one or many groups\nof size OUTPUT_GROUP_MAX_ENTRIES and possibly one group of size\n< OUTPUT_GROUP_MAX_ENTRIES.\n\nPrior to this commit the coin selection in the case where\nn > OUTPUT_GROUP_MAX_ENTRIES was skewed towards the one group of\nsize < OUTPUT_GROUP_MAX_ENTRIES if it exists and the amount to be\nspent by the transaction is smaller than the aggregate of those\nof the group size < OUTPUT_GROUP_MAX_ENTRIES. The reason is that\nthe coin selection decides between the different groups based on\nfees and mostly the smaller group will cause smaller fees.\n\nThe behavior that users of the avoid_reuse flag seek is that the\nfull groups of size OUTPUT_GROUP_MAX_ENTRIES get used first. This\ncommit implements this by pretending that the small group has\na large number of ancestors (one smallet than the maximum allowed\nfor this wallet). This dumps the small group to the bottom of the\nlist of priorities in the coin selection algorithm.",
      "tree": {
        "sha": "aae8ecde49b1053a7633f0a5f85d5f023d854f5b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/aae8ecde49b1053a7633f0a5f85d5f023d854f5b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/1abbdac6777bc5396d17a6772c8176a354730997",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6VtE8VHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNBEoP/AjwpXO8+0KwFXgPS1GwPqmcRQ+R\nItIunixhLTeoXhfv6vc5QezWYKQEjEnqhThxiLhA1KpAuKKBxIkLjiaLZqyljCJE\nW+sH0Pv1WDqVOycuyfFlwLhx8095MkCOnb9pjJe83Jql1sYgZ0xIMoIDmPmWCTFY\neOIhgzbKcQjmqERJNo3u3wNcbMTW+v2NQ3hw898P8cynAsRGzIRUpQFF0eYZDVpI\nmJ4x87aXRiUK9jaVIQ+f2C0H2/PKwT+eChsQ/08ezEF+C20h3+sfXiGJhirC+qgH\nHveS7tPzGr4Lp6xhGBV37JtR5aThWBiasIypIRzXQ1tTx8e/cCNTseZqWedbQ1G6\nrrW06oyiaIEP9NXjlBB0KrOXeLMpFCV9H/Kkwi3OqGNxxM2oimYkG+D/GAV2oAQL\n7W6GinsFEimoPs4gSSYaAdMBYY2C3P7JgvXx0nqcRnrhXgjwuWOoN3HtFXoK3ey/\nUw1EoW5SQKUMD3g5qSh3zXDXqd5I4CUJbVbyv0Zz2cOyyAde6LPG2M1EEshYCcvY\njCmA+jx6le33liDD/LS+Syxj+BjCdnNq3VOlS2NB/RRNt3Nj4faQTyZPvkzwsSJN\n4488FQdV6J5Bqpfw/e+P1JwxoFGq1TTn/8BXBCYnYmQXeUuy8YrJpvp/2sAtNM7A\nyCnEc1I6sQLGhsVr\n=ga8O\n-----END PGP SIGNATURE-----",
        "payload": "tree aae8ecde49b1053a7633f0a5f85d5f023d854f5b\nparent 4702cadca94520a36bfe979c85750563c30f7c85\nauthor Fabian Jahr <fjahr@protonmail.com> 1577581126 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1586869326 +0200\n\nwallet: Prefer full destination groups in coin selection\n\nWhen a wallet uses avoid_reuse and has a large number of outputs in\na single destination, it groups these outputs in OutputGroups that\nare no larger than OUTPUT_GROUP_MAX_ENTRIES. The goal is to spend\nas many outputs as possible from the destination while not breaking\nconsensus due to a huge number of inputs and also not surprise the\nuse with high fees. If there are n outputs in a destination and\nn > OUTPUT_GROUP_MAX_ENTRIES then this results in one or many groups\nof size OUTPUT_GROUP_MAX_ENTRIES and possibly one group of size\n< OUTPUT_GROUP_MAX_ENTRIES.\n\nPrior to this commit the coin selection in the case where\nn > OUTPUT_GROUP_MAX_ENTRIES was skewed towards the one group of\nsize < OUTPUT_GROUP_MAX_ENTRIES if it exists and the amount to be\nspent by the transaction is smaller than the aggregate of those\nof the group size < OUTPUT_GROUP_MAX_ENTRIES. The reason is that\nthe coin selection decides between the different groups based on\nfees and mostly the smaller group will cause smaller fees.\n\nThe behavior that users of the avoid_reuse flag seek is that the\nfull groups of size OUTPUT_GROUP_MAX_ENTRIES get used first. This\ncommit implements this by pretending that the small group has\na large number of ancestors (one smallet than the maximum allowed\nfor this wallet). This dumps the small group to the bottom of the\nlist of priorities in the coin selection algorithm.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1abbdac6777bc5396d17a6772c8176a354730997",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/1abbdac6777bc5396d17a6772c8176a354730997",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1abbdac6777bc5396d17a6772c8176a354730997/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4702cadca94520a36bfe979c85750563c30f7c85",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4702cadca94520a36bfe979c85750563c30f7c85",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4702cadca94520a36bfe979c85750563c30f7c85"
      }
    ],
    "stats": {
      "total": 120,
      "additions": 101,
      "deletions": 19
    },
    "files": [
      {
        "sha": "feb0563409e96cbafcb8b381c5ab41cef4c8ae5d",
        "filename": "src/wallet/wallet.cpp",
        "status": "modified",
        "additions": 35,
        "deletions": 18,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abbdac6777bc5396d17a6772c8176a354730997/src/wallet/wallet.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abbdac6777bc5396d17a6772c8176a354730997/src/wallet/wallet.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.cpp?ref=1abbdac6777bc5396d17a6772c8176a354730997",
        "patch": "@@ -2372,6 +2372,13 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n             ++it;\n     }\n \n+    unsigned int limit_ancestor_count = 0;\n+    unsigned int limit_descendant_count = 0;\n+    chain().getPackageLimits(limit_ancestor_count, limit_descendant_count);\n+    size_t max_ancestors = (size_t)std::max<int64_t>(1, limit_ancestor_count);\n+    size_t max_descendants = (size_t)std::max<int64_t>(1, limit_descendant_count);\n+    bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+\n     // form groups from remaining coins; note that preset coins will not\n     // automatically have their associated (same address) coins included\n     if (coin_control.m_avoid_partial_spends && vCoins.size() > OUTPUT_GROUP_MAX_ENTRIES) {\n@@ -2380,14 +2387,7 @@ bool CWallet::SelectCoins(const std::vector<COutput>& vAvailableCoins, const CAm\n         // explicitly shuffling the outputs before processing\n         Shuffle(vCoins.begin(), vCoins.end(), FastRandomContext());\n     }\n-    std::vector<OutputGroup> groups = GroupOutputs(vCoins, !coin_control.m_avoid_partial_spends);\n-\n-    unsigned int limit_ancestor_count;\n-    unsigned int limit_descendant_count;\n-    chain().getPackageLimits(limit_ancestor_count, limit_descendant_count);\n-    size_t max_ancestors = (size_t)std::max<int64_t>(1, limit_ancestor_count);\n-    size_t max_descendants = (size_t)std::max<int64_t>(1, limit_descendant_count);\n-    bool fRejectLongChains = gArgs.GetBoolArg(\"-walletrejectlongchains\", DEFAULT_WALLET_REJECT_LONG_CHAINS);\n+    std::vector<OutputGroup> groups = GroupOutputs(vCoins, !coin_control.m_avoid_partial_spends, max_ancestors);\n \n     bool res = value_to_select <= 0 ||\n         SelectCoinsMinConf(value_to_select, CoinEligibilityFilter(1, 6, 0), groups, setCoinsRet, nValueRet, coin_selection_params, bnb_used) ||\n@@ -4184,32 +4184,49 @@ bool CWalletTx::IsImmatureCoinBase() const\n     return GetBlocksToMaturity() > 0;\n }\n \n-std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const {\n+std::vector<OutputGroup> CWallet::GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors) const {\n     std::vector<OutputGroup> groups;\n     std::map<CTxDestination, OutputGroup> gmap;\n-    CTxDestination dst;\n+    std::set<CTxDestination> full_groups;\n+\n     for (const auto& output : outputs) {\n         if (output.fSpendable) {\n+            CTxDestination dst;\n             CInputCoin input_coin = output.GetInputCoin();\n \n             size_t ancestors, descendants;\n             chain().getTransactionAncestry(output.tx->GetHash(), ancestors, descendants);\n             if (!single_coin && ExtractDestination(output.tx->tx->vout[output.i].scriptPubKey, dst)) {\n-                // Limit output groups to no more than 10 entries, to protect\n-                // against inadvertently creating a too-large transaction\n-                // when using -avoidpartialspends\n-                if (gmap[dst].m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n-                    groups.push_back(gmap[dst]);\n-                    gmap.erase(dst);\n+                auto it = gmap.find(dst);\n+                if (it != gmap.end()) {\n+                    // Limit output groups to no more than OUTPUT_GROUP_MAX_ENTRIES\n+                    // number of entries, to protect against inadvertently creating\n+                    // a too-large transaction when using -avoidpartialspends to\n+                    // prevent breaking consensus or surprising users with a very\n+                    // high amount of fees.\n+                    if (it->second.m_outputs.size() >= OUTPUT_GROUP_MAX_ENTRIES) {\n+                        groups.push_back(it->second);\n+                        it->second = OutputGroup{};\n+                        full_groups.insert(dst);\n+                    }\n+                    it->second.Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n+                } else {\n+                    gmap[dst].Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n                 }\n-                gmap[dst].Insert(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n             } else {\n                 groups.emplace_back(input_coin, output.nDepth, output.tx->IsFromMe(ISMINE_ALL), ancestors, descendants);\n             }\n         }\n     }\n     if (!single_coin) {\n-        for (const auto& it : gmap) groups.push_back(it.second);\n+        for (auto& it : gmap) {\n+            auto& group = it.second;\n+            if (full_groups.count(it.first) > 0) {\n+                // Make this unattractive as we want coin selection to avoid it if possible\n+                group.m_ancestors = max_ancestors - 1;\n+            }\n+            groups.push_back(group);\n+        }\n     }\n     return groups;\n }"
      },
      {
        "sha": "638c8562c9a047bd83d2f5aac150fb47b739c870",
        "filename": "src/wallet/wallet.h",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abbdac6777bc5396d17a6772c8176a354730997/src/wallet/wallet.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abbdac6777bc5396d17a6772c8176a354730997/src/wallet/wallet.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/wallet/wallet.h?ref=1abbdac6777bc5396d17a6772c8176a354730997",
        "patch": "@@ -830,7 +830,7 @@ class CWallet final : public WalletStorage, public interfaces::Chain::Notificati\n     bool IsSpentKey(const uint256& hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void SetSpentKeyState(WalletBatch& batch, const uint256& hash, unsigned int n, bool used, std::set<CTxDestination>& tx_destinations) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n \n-    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin) const;\n+    std::vector<OutputGroup> GroupOutputs(const std::vector<COutput>& outputs, bool single_coin, const size_t max_ancestors) const;\n \n     bool IsLockedCoin(uint256 hash, unsigned int n) const EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);\n     void LockCoin(const COutPoint& output) EXCLUSIVE_LOCKS_REQUIRED(cs_wallet);"
      },
      {
        "sha": "42a8c923ef0a3ad684f78dd0074d53ee6869241f",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 65,
        "deletions": 0,
        "changes": 65,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/1abbdac6777bc5396d17a6772c8176a354730997/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/1abbdac6777bc5396d17a6772c8176a354730997/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=1abbdac6777bc5396d17a6772c8176a354730997",
        "patch": "@@ -94,6 +94,10 @@ def run_test(self):\n         self.test_fund_send_fund_send(\"bech32\")\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_getbalances_used()\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_full_destination_group_is_preferred()\n+        reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n+        self.test_all_destination_groups_are_used()\n \n     def test_persistence(self):\n         '''Test that wallet files persist the avoid_reuse flag.'''\n@@ -313,5 +317,66 @@ def test_getbalances_used(self):\n         assert_unspent(self.nodes[1], total_count=2, total_sum=6, reused_count=1, reused_sum=1)\n         assert_balances(self.nodes[1], mine={\"used\": 1, \"trusted\": 5})\n \n+    def test_full_destination_group_is_preferred(self):\n+        '''\n+        Test the case where [1] only has 11 outputs of 1 BTC in the same reused\n+        address and tries to send a small payment of 0.5 BTC. The wallet\n+        should use 10 outputs from the reused address as inputs and not a\n+        single 1 BTC input, in order to join several outputs from the reused\n+        address.\n+        '''\n+        self.log.info(\"Test that full destination groups are preferred in coin selection\")\n+\n+        # Node under test should be empty\n+        assert_equal(self.nodes[1].getbalance(avoid_reuse=False), 0)\n+\n+        new_addr = self.nodes[1].getnewaddress()\n+        ret_addr = self.nodes[0].getnewaddress()\n+\n+        # Send 11 outputs of 1 BTC to the same, reused address in the wallet\n+        for _ in range(11):\n+            self.nodes[0].sendtoaddress(new_addr, 1)\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Sending a transaction that is smaller than each one of the\n+        # available outputs\n+        txid = self.nodes[1].sendtoaddress(address=ret_addr, amount=0.5)\n+        inputs = self.nodes[1].getrawtransaction(txid, 1)[\"vin\"]\n+\n+        # The transaction should use 10 inputs exactly\n+        assert_equal(len(inputs), 10)\n+\n+    def test_all_destination_groups_are_used(self):\n+        '''\n+        Test the case where [1] only has 22 outputs of 1 BTC in the same reused\n+        address and tries to send a payment of 20.5 BTC. The wallet\n+        should use all 22 outputs from the reused address as inputs.\n+        '''\n+        self.log.info(\"Test that all destination groups are used\")\n+\n+        # Node under test should be empty\n+        assert_equal(self.nodes[1].getbalance(avoid_reuse=False), 0)\n+\n+        new_addr = self.nodes[1].getnewaddress()\n+        ret_addr = self.nodes[0].getnewaddress()\n+\n+        # Send 22 outputs of 1 BTC to the same, reused address in the wallet\n+        for _ in range(22):\n+            self.nodes[0].sendtoaddress(new_addr, 1)\n+\n+        self.nodes[0].generate(1)\n+        self.sync_all()\n+\n+        # Sending a transaction that needs to use the full groups\n+        # of 10 inputs but also the incomplete group of 2 inputs.\n+        txid = self.nodes[1].sendtoaddress(address=ret_addr, amount=20.5)\n+        inputs = self.nodes[1].getrawtransaction(txid, 1)[\"vin\"]\n+\n+        # The transaction should use 22 inputs exactly\n+        assert_equal(len(inputs), 22)\n+\n+\n if __name__ == '__main__':\n     AvoidReuseTest().main()"
      }
    ]
  },
  {
    "sha": "a2324e4d3f47f084b07a364c9a360a0bf31e86a0",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzphMjMyNGU0ZDNmNDdmMDg0YjA3YTM2NGM5YTM2MGEwYmYzMWU4NmEw",
    "commit": {
      "author": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-03-23T22:10:01Z"
      },
      "committer": {
        "name": "Fabian Jahr",
        "email": "fjahr@protonmail.com",
        "date": "2020-04-14T13:03:14Z"
      },
      "message": "test: Improve naming and logging of avoid_reuse tests",
      "tree": {
        "sha": "edbc59a142c875e845c031652bb8ad52fa8d495b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/edbc59a142c875e845c031652bb8ad52fa8d495b"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/a2324e4d3f47f084b07a364c9a360a0bf31e86a0",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQJJBAABCgAzFiEEtFq20ghhrCHSdrgm8T0enYkHmM0FAl6VtJIVHGZqYWhyQHBy\nb3Rvbm1haWwuY29tAAoJEPE9Hp2JB5jNH7UQAI7zp7SzxyIDHnlmDmXo2We6bjiG\nRG3OsYKya4dDEbmnJuqWwVcEvRyV2h/rdFVvIam1FywhJ1XFnMec9Ex4sRW2/JB0\nMB8TeYLtmzJGfSpioQ8LChr42YuJoAfVArB1/IlBdAHrdGdZL/BhKlyBwRuvjWIx\nSpnRCcyAKHbGMS6X85E59Y04vIiBQ1E6HJusg9ngbpJiKs33zTnfj5Tc0zEZ3bmk\nPyHGw8kfXvSbH5PZzO5euBLHyCLie4HGBQWmnZpfgW7z1/DQT0dApj5Bh0kETuAp\n/QvVOic7v1Vb0jueh6s1DZxC+eUEbNId/drOU8eNxiL+AuevORsXJ5mV4vQnuya/\nbIU0358IUr3sJLZWrkCJHuqHRKYL4+oN0PulQxSNBlAjlZFiXdhLRowWlBLtv90t\nsNN8FboC1iEtsE7hc+XavdxIdp7tmahi9OvKZyFtpbnBRbGATahMNdUalV3TQwtG\nyxQMsTBk2Hqg7EF2FE7fGbOQsLFrUKiH7wBCdgq5EmiwySNDT9HgzzarwnVSUMgG\numncam6tjmaPa5MGtNMPPh9K1jopX6KRgSspsLURLHFVDS9jYkokKmyt1esirY/y\n6o46BSsQaJFRYKJij3pG47LN+sLeS9eMMsAThDI12poRqV2cQenKOY0QhNlZofQ3\nn37woRdChGZe3IFX\n=MACJ\n-----END PGP SIGNATURE-----",
        "payload": "tree edbc59a142c875e845c031652bb8ad52fa8d495b\nparent 1abbdac6777bc5396d17a6772c8176a354730997\nauthor Fabian Jahr <fjahr@protonmail.com> 1585001401 +0100\ncommitter Fabian Jahr <fjahr@protonmail.com> 1586869394 +0200\n\ntest: Improve naming and logging of avoid_reuse tests\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2324e4d3f47f084b07a364c9a360a0bf31e86a0",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/a2324e4d3f47f084b07a364c9a360a0bf31e86a0",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a2324e4d3f47f084b07a364c9a360a0bf31e86a0/comments",
    "author": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "fjahr",
      "id": 1322187,
      "node_id": "MDQ6VXNlcjEzMjIxODc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/1322187?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/fjahr",
      "html_url": "https://github.com/fjahr",
      "followers_url": "https://api.github.com/users/fjahr/followers",
      "following_url": "https://api.github.com/users/fjahr/following{/other_user}",
      "gists_url": "https://api.github.com/users/fjahr/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/fjahr/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/fjahr/subscriptions",
      "organizations_url": "https://api.github.com/users/fjahr/orgs",
      "repos_url": "https://api.github.com/users/fjahr/repos",
      "events_url": "https://api.github.com/users/fjahr/events{/privacy}",
      "received_events_url": "https://api.github.com/users/fjahr/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "1abbdac6777bc5396d17a6772c8176a354730997",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/1abbdac6777bc5396d17a6772c8176a354730997",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/1abbdac6777bc5396d17a6772c8176a354730997"
      }
    ],
    "stats": {
      "total": 20,
      "additions": 10,
      "deletions": 10
    },
    "files": [
      {
        "sha": "78a51a1d5ff156e74cf700bfaa6d948d7a04a7ec",
        "filename": "test/functional/wallet_avoidreuse.py",
        "status": "modified",
        "additions": 10,
        "deletions": 10,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/a2324e4d3f47f084b07a364c9a360a0bf31e86a0/test/functional/wallet_avoidreuse.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/a2324e4d3f47f084b07a364c9a360a0bf31e86a0/test/functional/wallet_avoidreuse.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/test/functional/wallet_avoidreuse.py?ref=a2324e4d3f47f084b07a364c9a360a0bf31e86a0",
        "patch": "@@ -85,13 +85,13 @@ def run_test(self):\n         self.sync_all()\n         self.test_change_remains_change(self.nodes[1])\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_senddirty()\n+        self.test_sending_from_reused_address_without_avoid_reuse()\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_send(\"legacy\")\n+        self.test_sending_from_reused_address_fails(\"legacy\")\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_send(\"p2sh-segwit\")\n+        self.test_sending_from_reused_address_fails(\"p2sh-segwit\")\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n-        self.test_fund_send_fund_send(\"bech32\")\n+        self.test_sending_from_reused_address_fails(\"bech32\")\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n         self.test_getbalances_used()\n         reset_balance(self.nodes[1], self.nodes[0].getnewaddress())\n@@ -166,13 +166,13 @@ def test_change_remains_change(self, node):\n         for logical_tx in node.listtransactions():\n             assert logical_tx.get('address') != changeaddr\n \n-    def test_fund_send_fund_senddirty(self):\n+    def test_sending_from_reused_address_without_avoid_reuse(self):\n         '''\n-        Test the same as test_fund_send_fund_send, except send the 10 BTC with\n+        Test the same as test_sending_from_reused_address_fails, except send the 10 BTC with\n         the avoid_reuse flag set to false. This means the 10 BTC send should succeed,\n-        where it fails in test_fund_send_fund_send.\n+        where it fails in test_sending_from_reused_address_fails.\n         '''\n-        self.log.info(\"Test fund send fund send dirty\")\n+        self.log.info(\"Test sending from reused address with avoid_reuse=false\")\n \n         fundaddr = self.nodes[1].getnewaddress()\n         retaddr = self.nodes[0].getnewaddress()\n@@ -217,7 +217,7 @@ def test_fund_send_fund_senddirty(self):\n         assert_approx(self.nodes[1].getbalance(), 5, 0.001)\n         assert_approx(self.nodes[1].getbalance(avoid_reuse=False), 5, 0.001)\n \n-    def test_fund_send_fund_send(self, second_addr_type):\n+    def test_sending_from_reused_address_fails(self, second_addr_type):\n         '''\n         Test the simple case where [1] generates a new address A, then\n         [0] sends 10 BTC to A.\n@@ -226,7 +226,7 @@ def test_fund_send_fund_send(self, second_addr_type):\n         [1] tries to spend 10 BTC (fails; dirty).\n         [1] tries to spend 4 BTC (succeeds; change address sufficient)\n         '''\n-        self.log.info(\"Test fund send fund send\")\n+        self.log.info(\"Test sending from reused {} address fails\".format(second_addr_type))\n \n         fundaddr = self.nodes[1].getnewaddress(label=\"\", address_type=\"legacy\")\n         retaddr = self.nodes[0].getnewaddress()"
      }
    ]
  }
]