[
  {
    "sha": "48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0OGQ4ZWIxODQ3ZDQyMThlZTI0ZWMxYzI3YzczYjkwZTAzYjFmMDA3",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-03-26T19:50:29Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:32:30Z"
      },
      "message": "script: add CScriptNum class\n\nThis class holds an int64_t and replaces the use of CBigInt for script\nintegrals.",
      "tree": {
        "sha": "ccc9c573909e8593d42fa904b7d78271121128c6",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ccc9c573909e8593d42fa904b7d78271121128c6"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d8eb1847d4218ee24ec1c27c73b90e03b1f007/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4a102fa9d94309965e98a707cb0c653cfa31ca71",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4a102fa9d94309965e98a707cb0c653cfa31ca71",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4a102fa9d94309965e98a707cb0c653cfa31ca71"
      }
    ],
    "stats": {
      "total": 149,
      "additions": 149,
      "deletions": 0
    },
    "files": [
      {
        "sha": "9bc06b2e0751b1e8d28b4f77ec6f9e54b8129814",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 149,
        "deletions": 0,
        "changes": 149,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/48d8eb1847d4218ee24ec1c27c73b90e03b1f007/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/48d8eb1847d4218ee24ec1c27c73b90e03b1f007/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
        "patch": "@@ -25,6 +25,155 @@ class CTransaction;\n static const unsigned int MAX_SCRIPT_ELEMENT_SIZE = 520; // bytes\n static const unsigned int MAX_OP_RETURN_RELAY = 40;      // bytes\n \n+class scriptnum_error : public std::runtime_error\n+{\n+public:\n+    explicit scriptnum_error(const std::string& str) : std::runtime_error(str) {}\n+};\n+\n+class CScriptNum\n+{\n+// Numeric opcodes (OP_1ADD, etc) are restricted to operating on 4-byte integers.\n+// The semantics are subtle, though: operands must be in the range [-2^31 +1...2^31 -1],\n+// but results may overflow (and are valid as long as they are not used in a subsequent\n+// numeric operation). CScriptNum enforces those semantics by storing results as\n+// an int64 and allowing out-of-range values to be returned as a vector of bytes but\n+// throwing an exception if arithmetic is done or the result is interpreted as an integer.\n+public:\n+\n+    explicit CScriptNum(const int64_t& n)\n+    {\n+        m_value = n;\n+    }\n+\n+    explicit CScriptNum(const std::vector<unsigned char>& vch)\n+    {\n+        if (vch.size() > nMaxNumSize)\n+            throw scriptnum_error(\"CScriptNum(const std::vector<unsigned char>&) : overflow\");\n+        m_value = set_vch(vch);\n+    }\n+\n+    inline bool operator==(const int64_t& rhs) const    { return m_value == rhs; }\n+    inline bool operator!=(const int64_t& rhs) const    { return m_value != rhs; }\n+    inline bool operator<=(const int64_t& rhs) const    { return m_value <= rhs; }\n+    inline bool operator< (const int64_t& rhs) const    { return m_value <  rhs; }\n+    inline bool operator>=(const int64_t& rhs) const    { return m_value >= rhs; }\n+    inline bool operator> (const int64_t& rhs) const    { return m_value >  rhs; }\n+\n+    inline bool operator==(const CScriptNum& rhs) const { return operator==(rhs.m_value); }\n+    inline bool operator!=(const CScriptNum& rhs) const { return operator!=(rhs.m_value); }\n+    inline bool operator<=(const CScriptNum& rhs) const { return operator<=(rhs.m_value); }\n+    inline bool operator< (const CScriptNum& rhs) const { return operator< (rhs.m_value); }\n+    inline bool operator>=(const CScriptNum& rhs) const { return operator>=(rhs.m_value); }\n+    inline bool operator> (const CScriptNum& rhs) const { return operator> (rhs.m_value); }\n+\n+    inline CScriptNum operator+(   const int64_t& rhs)    const { return CScriptNum(m_value + rhs);}\n+    inline CScriptNum operator-(   const int64_t& rhs)    const { return CScriptNum(m_value - rhs);}\n+    inline CScriptNum operator+(   const CScriptNum& rhs) const { return operator+(rhs.m_value);   }\n+    inline CScriptNum operator-(   const CScriptNum& rhs) const { return operator-(rhs.m_value);   }\n+\n+    inline CScriptNum& operator+=( const CScriptNum& rhs)       { return operator+=(rhs.m_value);  }\n+    inline CScriptNum& operator-=( const CScriptNum& rhs)       { return operator-=(rhs.m_value);  }\n+\n+    inline CScriptNum operator-()                         const\n+    {\n+        assert(m_value != std::numeric_limits<int64_t>::min());\n+        return CScriptNum(-m_value);\n+    }\n+\n+    inline CScriptNum& operator=( const int64_t& rhs)\n+    {\n+        m_value = rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum& operator+=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value <= std::numeric_limits<int64_t>::max() - rhs) ||\n+                           (rhs < 0 && m_value >= std::numeric_limits<int64_t>::min() - rhs));\n+        m_value += rhs;\n+        return *this;\n+    }\n+\n+    inline CScriptNum& operator-=( const int64_t& rhs)\n+    {\n+        assert(rhs == 0 || (rhs > 0 && m_value >= std::numeric_limits<int64_t>::min() + rhs) ||\n+                           (rhs < 0 && m_value <= std::numeric_limits<int64_t>::max() + rhs));\n+        m_value -= rhs;\n+        return *this;\n+    }\n+\n+    int getint() const\n+    {\n+        if (m_value > std::numeric_limits<int>::max())\n+            return std::numeric_limits<int>::max();\n+        else if (m_value < std::numeric_limits<int>::min())\n+            return std::numeric_limits<int>::min();\n+        return m_value;\n+    }\n+\n+    std::vector<unsigned char> getvch() const\n+    {\n+        return serialize(m_value);\n+    }\n+\n+    static std::vector<unsigned char> serialize(const int64_t& value)\n+    {\n+        if(value == 0)\n+            return std::vector<unsigned char>();\n+\n+        std::vector<unsigned char> result;\n+        const bool neg = value < 0;\n+        uint64_t absvalue = neg ? -value : value;\n+\n+        while(absvalue)\n+        {\n+            result.push_back(absvalue & 0xff);\n+            absvalue >>= 8;\n+        }\n+\n+\n+//    - If the most significant byte is >= 0x80 and the value is positive, push a\n+//    new zero-byte to make the significant byte < 0x80 again.\n+\n+//    - If the most significant byte is >= 0x80 and the value is negative, push a\n+//    new 0x80 byte that will be popped off when converting to an integral.\n+\n+//    - If the most significant byte is < 0x80 and the value is negative, add\n+//    0x80 to it, since it will be subtracted and interpreted as a negative when\n+//    converting to an integral.\n+\n+        if (result.back() & 0x80)\n+            result.push_back(neg ? 0x80 : 0);\n+        else if (neg)\n+            result.back() |= 0x80;\n+\n+        return result;\n+    }\n+\n+    static const size_t nMaxNumSize = 4;\n+\n+private:\n+    static int64_t set_vch(const std::vector<unsigned char>& vch)\n+    {\n+      if (vch.empty())\n+          return 0;\n+\n+      int64_t result = 0;\n+      for (size_t i = 0; i != vch.size(); ++i)\n+          result |= static_cast<int64_t>(vch[i]) << 8*i;\n+\n+      // If the input vector's most significant byte is 0x80, remove it from\n+      // the result's msb and return a negative.\n+      if (vch.back() & 0x80)\n+          return -(result & ~(0x80 << (8 * (vch.size() - 1))));\n+\n+      return result;\n+    }\n+\n+    int64_t m_value;\n+};\n+\n /** Signature hash types/flags */\n enum\n {"
      }
    ]
  },
  {
    "sha": "27bff74e39c4c2951a709114e0d565568a0554fa",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyN2JmZjc0ZTM5YzRjMjk1MWE3MDkxMTRlMGQ1NjU1NjhhMDU1NGZh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-03-26T19:55:35Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:32:30Z"
      },
      "message": "script: switch to CScriptNum usage for scripts",
      "tree": {
        "sha": "6fb72eb4147931cffe1478ce539c68dc85454c40",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/6fb72eb4147931cffe1478ce539c68dc85454c40"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/27bff74e39c4c2951a709114e0d565568a0554fa",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27bff74e39c4c2951a709114e0d565568a0554fa",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/27bff74e39c4c2951a709114e0d565568a0554fa",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27bff74e39c4c2951a709114e0d565568a0554fa/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/48d8eb1847d4218ee24ec1c27c73b90e03b1f007",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/48d8eb1847d4218ee24ec1c27c73b90e03b1f007"
      }
    ],
    "stats": {
      "total": 95,
      "additions": 28,
      "deletions": 67
    },
    "files": [
      {
        "sha": "25180e0bbb9e539c1380b82217fae22bad99f8b6",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 17,
        "deletions": 27,
        "changes": 44,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27bff74e39c4c2951a709114e0d565568a0554fa/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27bff74e39c4c2951a709114e0d565568a0554fa/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=27bff74e39c4c2951a709114e0d565568a0554fa",
        "patch": "@@ -25,22 +25,13 @@ typedef vector<unsigned char> valtype;\n static const valtype vchFalse(0);\n static const valtype vchZero(0);\n static const valtype vchTrue(1, 1);\n-static const CBigNum bnZero(0);\n-static const CBigNum bnOne(1);\n-static const CBigNum bnFalse(0);\n-static const CBigNum bnTrue(1);\n-static const size_t nMaxNumSize = 4;\n+static const CScriptNum bnZero(0);\n+static const CScriptNum bnOne(1);\n+static const CScriptNum bnFalse(0);\n+static const CScriptNum bnTrue(1);\n \n bool CheckSig(vector<unsigned char> vchSig, const vector<unsigned char> &vchPubKey, const CScript &scriptCode, const CTransaction& txTo, unsigned int nIn, int nHashType, int flags);\n \n-CBigNum CastToBigNum(const valtype& vch)\n-{\n-    if (vch.size() > nMaxNumSize)\n-        throw runtime_error(\"CastToBigNum() : overflow\");\n-    // Get rid of extra leading zeros\n-    return CBigNum(CBigNum(vch).getvch());\n-}\n-\n bool CastToBool(const valtype& vch)\n {\n     for (unsigned int i = 0; i < vch.size(); i++)\n@@ -306,7 +297,6 @@ bool IsCanonicalSignature(const valtype &vchSig, unsigned int flags) {\n \n bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, const CTransaction& txTo, unsigned int nIn, unsigned int flags, int nHashType)\n {\n-    CAutoBN_CTX pctx;\n     CScript::const_iterator pc = script.begin();\n     CScript::const_iterator pend = script.end();\n     CScript::const_iterator pbegincodehash = script.begin();\n@@ -380,7 +370,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 case OP_16:\n                 {\n                     // ( -- value)\n-                    CBigNum bn((int)opcode - (int)(OP_1 - 1));\n+                    CScriptNum bn((int)opcode - (int)(OP_1 - 1));\n                     stack.push_back(bn.getvch());\n                 }\n                 break;\n@@ -556,7 +546,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                 case OP_DEPTH:\n                 {\n                     // -- stacksize\n-                    CBigNum bn(stack.size());\n+                    CScriptNum bn(stack.size());\n                     stack.push_back(bn.getvch());\n                 }\n                 break;\n@@ -606,7 +596,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // (xn ... x2 x1 x0 n - ... x2 x1 x0 xn)\n                     if (stack.size() < 2)\n                         return false;\n-                    int n = CastToBigNum(stacktop(-1)).getint();\n+                    int n = CScriptNum(stacktop(-1)).getint();\n                     popstack(stack);\n                     if (n < 0 || n >= (int)stack.size())\n                         return false;\n@@ -654,7 +644,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // (in -- in size)\n                     if (stack.size() < 1)\n                         return false;\n-                    CBigNum bn(stacktop(-1).size());\n+                    CScriptNum bn(stacktop(-1).size());\n                     stack.push_back(bn.getvch());\n                 }\n                 break;\n@@ -705,7 +695,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // (in -- out)\n                     if (stack.size() < 1)\n                         return false;\n-                    CBigNum bn = CastToBigNum(stacktop(-1));\n+                    CScriptNum bn(stacktop(-1));\n                     switch (opcode)\n                     {\n                     case OP_1ADD:       bn += bnOne; break;\n@@ -738,9 +728,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // (x1 x2 -- out)\n                     if (stack.size() < 2)\n                         return false;\n-                    CBigNum bn1 = CastToBigNum(stacktop(-2));\n-                    CBigNum bn2 = CastToBigNum(stacktop(-1));\n-                    CBigNum bn;\n+                    CScriptNum bn1(stacktop(-2));\n+                    CScriptNum bn2(stacktop(-1));\n+                    CScriptNum bn(0);\n                     switch (opcode)\n                     {\n                     case OP_ADD:\n@@ -783,9 +773,9 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     // (x min max -- out)\n                     if (stack.size() < 3)\n                         return false;\n-                    CBigNum bn1 = CastToBigNum(stacktop(-3));\n-                    CBigNum bn2 = CastToBigNum(stacktop(-2));\n-                    CBigNum bn3 = CastToBigNum(stacktop(-1));\n+                    CScriptNum bn1(stacktop(-3));\n+                    CScriptNum bn2(stacktop(-2));\n+                    CScriptNum bn3(stacktop(-1));\n                     bool fValue = (bn2 <= bn1 && bn1 < bn3);\n                     popstack(stack);\n                     popstack(stack);\n@@ -882,7 +872,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     if ((int)stack.size() < i)\n                         return false;\n \n-                    int nKeysCount = CastToBigNum(stacktop(-i)).getint();\n+                    int nKeysCount = CScriptNum(stacktop(-i)).getint();\n                     if (nKeysCount < 0 || nKeysCount > 20)\n                         return false;\n                     nOpCount += nKeysCount;\n@@ -893,7 +883,7 @@ bool EvalScript(vector<vector<unsigned char> >& stack, const CScript& script, co\n                     if ((int)stack.size() < i)\n                         return false;\n \n-                    int nSigsCount = CastToBigNum(stacktop(-i)).getint();\n+                    int nSigsCount = CScriptNum(stacktop(-i)).getint();\n                     if (nSigsCount < 0 || nSigsCount > nKeysCount)\n                         return false;\n                     int isig = ++i;"
      },
      {
        "sha": "7781ea61c792690df03cb03fd35de1a6da1f01cd",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 11,
        "deletions": 40,
        "changes": 51,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/27bff74e39c4c2951a709114e0d565568a0554fa/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/27bff74e39c4c2951a709114e0d565568a0554fa/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=27bff74e39c4c2951a709114e0d565568a0554fa",
        "patch": "@@ -374,7 +374,7 @@ const char* GetOpName(opcodetype opcode);\n inline std::string ValueString(const std::vector<unsigned char>& vch)\n {\n     if (vch.size() <= 4)\n-        return strprintf(\"%d\", CBigNum(vch).getint());\n+        return strprintf(\"%d\", CScriptNum(vch).getint());\n     else\n         return HexStr(vch);\n }\n@@ -410,26 +410,10 @@ class CScript : public std::vector<unsigned char>\n         }\n         else\n         {\n-            CBigNum bn(n);\n-            *this << bn.getvch();\n+            *this << CScriptNum::serialize(n);\n         }\n         return *this;\n     }\n-\n-    CScript& push_uint64(uint64_t n)\n-    {\n-        if (n >= 1 && n <= 16)\n-        {\n-            push_back(n + (OP_1 - 1));\n-        }\n-        else\n-        {\n-            CBigNum bn(n);\n-            *this << bn.getvch();\n-        }\n-        return *this;\n-    }\n-\n public:\n     CScript() { }\n     CScript(const CScript& b) : std::vector<unsigned char>(b.begin(), b.end()) { }\n@@ -452,35 +436,16 @@ class CScript : public std::vector<unsigned char>\n     }\n \n \n-    //explicit CScript(char b) is not portable.  Use 'signed char' or 'unsigned char'.\n-    explicit CScript(signed char b)        { operator<<(b); }\n-    explicit CScript(short b)              { operator<<(b); }\n-    explicit CScript(int b)                { operator<<(b); }\n-    explicit CScript(long b)               { operator<<(b); }\n-    explicit CScript(long long b)          { operator<<(b); }\n-    explicit CScript(unsigned char b)      { operator<<(b); }\n-    explicit CScript(unsigned int b)       { operator<<(b); }\n-    explicit CScript(unsigned short b)     { operator<<(b); }\n-    explicit CScript(unsigned long b)      { operator<<(b); }\n-    explicit CScript(unsigned long long b) { operator<<(b); }\n+    CScript(int64_t b)        { operator<<(b); }\n \n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const uint256& b) { operator<<(b); }\n+    explicit CScript(const CScriptNum& b) { operator<<(b); }\n     explicit CScript(const CBigNum& b) { operator<<(b); }\n     explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n \n \n-    //CScript& operator<<(char b) is not portable.  Use 'signed char' or 'unsigned char'.\n-    CScript& operator<<(signed char b)        { return push_int64(b); }\n-    CScript& operator<<(short b)              { return push_int64(b); }\n-    CScript& operator<<(int b)                { return push_int64(b); }\n-    CScript& operator<<(long b)               { return push_int64(b); }\n-    CScript& operator<<(long long b)          { return push_int64(b); }\n-    CScript& operator<<(unsigned char b)      { return push_uint64(b); }\n-    CScript& operator<<(unsigned int b)       { return push_uint64(b); }\n-    CScript& operator<<(unsigned short b)     { return push_uint64(b); }\n-    CScript& operator<<(unsigned long b)      { return push_uint64(b); }\n-    CScript& operator<<(unsigned long long b) { return push_uint64(b); }\n+    CScript& operator<<(int64_t b) { return push_int64(b); }\n \n     CScript& operator<<(opcodetype opcode)\n     {\n@@ -518,6 +483,12 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n+    CScript& operator<<(const CScriptNum& b)\n+    {\n+        *this << b.getvch();\n+        return *this;\n+    }\n+\n     CScript& operator<<(const std::vector<unsigned char>& b)\n     {\n         if (b.size() < OP_PUSHDATA1)"
      }
    ]
  },
  {
    "sha": "4f497cd97da4f9c88790a5f4e97926804669dfca",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo0ZjQ5N2NkOTdkYTRmOWM4ODc5MGE1ZjRlOTc5MjY4MDQ2NjlkZmNh",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-03-26T19:56:45Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:32:30Z"
      },
      "message": "script: switch outside users to CScriptNum",
      "tree": {
        "sha": "512e8c5a53fe638319c74cef2f69b3259917d14c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/512e8c5a53fe638319c74cef2f69b3259917d14c"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/4f497cd97da4f9c88790a5f4e97926804669dfca",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f497cd97da4f9c88790a5f4e97926804669dfca",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/4f497cd97da4f9c88790a5f4e97926804669dfca",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f497cd97da4f9c88790a5f4e97926804669dfca/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "27bff74e39c4c2951a709114e0d565568a0554fa",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/27bff74e39c4c2951a709114e0d565568a0554fa",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/27bff74e39c4c2951a709114e0d565568a0554fa"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "eb56800b92fb95b9a4374cb3519bc08d0aaf82a1",
        "filename": "src/chainparams.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f497cd97da4f9c88790a5f4e97926804669dfca/src/chainparams.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f497cd97da4f9c88790a5f4e97926804669dfca/src/chainparams.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/chainparams.cpp?ref=4f497cd97da4f9c88790a5f4e97926804669dfca",
        "patch": "@@ -125,7 +125,7 @@ class CMainParams : public CChainParams {\n         CTransaction txNew;\n         txNew.vin.resize(1);\n         txNew.vout.resize(1);\n-        txNew.vin[0].scriptSig = CScript() << 486604799 << CBigNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n+        txNew.vin[0].scriptSig = CScript() << 486604799 << CScriptNum(4) << vector<unsigned char>((const unsigned char*)pszTimestamp, (const unsigned char*)pszTimestamp + strlen(pszTimestamp));\n         txNew.vout[0].nValue = 50 * COIN;\n         txNew.vout[0].scriptPubKey = CScript() << ParseHex(\"04678afdb0fe5548271967f1a67130b7105cd6a828e03909a67962e0ea1f61deb649f6bc3f4cef38c4f35504e51ec112de5c384df7ba0b8d578a4c702b6bf11d5f\") << OP_CHECKSIG;\n         genesis.vtx.push_back(txNew);"
      },
      {
        "sha": "f21ee0c3a897527b06fcf5c457ada0e9d626a03b",
        "filename": "src/miner.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/4f497cd97da4f9c88790a5f4e97926804669dfca/src/miner.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/4f497cd97da4f9c88790a5f4e97926804669dfca/src/miner.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/miner.cpp?ref=4f497cd97da4f9c88790a5f4e97926804669dfca",
        "patch": "@@ -355,7 +355,7 @@ void IncrementExtraNonce(CBlock* pblock, CBlockIndex* pindexPrev, unsigned int&\n     }\n     ++nExtraNonce;\n     unsigned int nHeight = pindexPrev->nHeight+1; // Height first in coinbase required for block.version=2\n-    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CBigNum(nExtraNonce)) + COINBASE_FLAGS;\n+    pblock->vtx[0].vin[0].scriptSig = (CScript() << nHeight << CScriptNum(nExtraNonce)) + COINBASE_FLAGS;\n     assert(pblock->vtx[0].vin[0].scriptSig.size() <= 100);\n \n     pblock->hashMerkleRoot = pblock->BuildMerkleTree();"
      }
    ]
  },
  {
    "sha": "05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzowNWUzZWNmZmE0OTVjMDkwNWI4OGNmYzkyYjIzYmI1MTliN2ZlNzBi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-03-26T19:57:21Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:32:30Z"
      },
      "message": "script: remove bignum dependency",
      "tree": {
        "sha": "62345888988f8c397834c49c6b4fafa084955d46",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/62345888988f8c397834c49c6b4fafa084955d46"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e3ecffa495c0905b88cfc92b23bb519b7fe70b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "4f497cd97da4f9c88790a5f4e97926804669dfca",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/4f497cd97da4f9c88790a5f4e97926804669dfca",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/4f497cd97da4f9c88790a5f4e97926804669dfca"
      }
    ],
    "stats": {
      "total": 9,
      "additions": 0,
      "deletions": 9
    },
    "files": [
      {
        "sha": "81d275445375f31620165f05e866e9f88876eae8",
        "filename": "src/script.cpp",
        "status": "modified",
        "additions": 0,
        "deletions": 1,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e3ecffa495c0905b88cfc92b23bb519b7fe70b/src/script.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e3ecffa495c0905b88cfc92b23bb519b7fe70b/src/script.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.cpp?ref=05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
        "patch": "@@ -5,7 +5,6 @@\n \n #include \"script.h\"\n \n-#include \"bignum.h\"\n #include \"core.h\"\n #include \"hash.h\"\n #include \"key.h\""
      },
      {
        "sha": "1742ce81f810eb78809ecd501e7139f18967833b",
        "filename": "src/script.h",
        "status": "modified",
        "additions": 0,
        "deletions": 8,
        "changes": 8,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/05e3ecffa495c0905b88cfc92b23bb519b7fe70b/src/script.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/05e3ecffa495c0905b88cfc92b23bb519b7fe70b/src/script.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/script.h?ref=05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
        "patch": "@@ -6,7 +6,6 @@\n #ifndef H_BITCOIN_SCRIPT\n #define H_BITCOIN_SCRIPT\n \n-#include \"bignum.h\"\n #include \"key.h\"\n #include \"util.h\"\n \n@@ -441,7 +440,6 @@ class CScript : public std::vector<unsigned char>\n     explicit CScript(opcodetype b)     { operator<<(b); }\n     explicit CScript(const uint256& b) { operator<<(b); }\n     explicit CScript(const CScriptNum& b) { operator<<(b); }\n-    explicit CScript(const CBigNum& b) { operator<<(b); }\n     explicit CScript(const std::vector<unsigned char>& b) { operator<<(b); }\n \n \n@@ -477,12 +475,6 @@ class CScript : public std::vector<unsigned char>\n         return *this;\n     }\n \n-    CScript& operator<<(const CBigNum& b)\n-    {\n-        *this << b.getvch();\n-        return *this;\n-    }\n-\n     CScript& operator<<(const CScriptNum& b)\n     {\n         *this << b.getvch();"
      }
    ]
  },
  {
    "sha": "90320d67779be5c97061380c035d3fe51b7ce74b",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5MDMyMGQ2Nzc3OWJlNWM5NzA2MTM4MGMwMzVkM2ZlNTFiN2NlNzRi",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:10:33Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:32:30Z"
      },
      "message": "script: add additional script tests",
      "tree": {
        "sha": "bd7ffb4a97b0427fbaeb8521d707ee7ead62fa0f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bd7ffb4a97b0427fbaeb8521d707ee7ead62fa0f"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/90320d67779be5c97061380c035d3fe51b7ce74b",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90320d67779be5c97061380c035d3fe51b7ce74b",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/90320d67779be5c97061380c035d3fe51b7ce74b",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90320d67779be5c97061380c035d3fe51b7ce74b/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/05e3ecffa495c0905b88cfc92b23bb519b7fe70b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/05e3ecffa495c0905b88cfc92b23bb519b7fe70b"
      }
    ],
    "stats": {
      "total": 16,
      "additions": 16,
      "deletions": 0
    },
    "files": [
      {
        "sha": "fdceb1ffa92027a4a24cc2c67df3a2991ea7ce09",
        "filename": "src/test/data/script_invalid.json",
        "status": "modified",
        "additions": 3,
        "deletions": 0,
        "changes": 3,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90320d67779be5c97061380c035d3fe51b7ce74b/src/test/data/script_invalid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90320d67779be5c97061380c035d3fe51b7ce74b/src/test/data/script_invalid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_invalid.json?ref=90320d67779be5c97061380c035d3fe51b7ce74b",
        "patch": "@@ -257,7 +257,10 @@\n [\"1\",\"0xba\", \"0xba == OP_NOP10 + 1\"],\n \n [\"2147483648\", \"1ADD 1\", \"We cannot do math on 5-byte integers\"],\n+[\"2147483648\", \"NEGATE 1\", \"We cannot do math on 5-byte integers\"],\n [\"-2147483648\", \"1ADD 1\", \"Because we use a sign bit, -2147483648 is also 5 bytes\"],\n+[\"2147483647\", \"1ADD 1SUB 1\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n+[\"2147483648\", \"1SUB 1\", \"We cannot do math on 5-byte integers, even if the result is 4-bytes\"],\n \n [\"1\", \"1 ENDIF\", \"ENDIF without IF\"],\n [\"1\", \"IF 1\", \"IF without ENDIF\"],"
      },
      {
        "sha": "67b985e355a8417a67b3bda0e5cbf74c0256d81b",
        "filename": "src/test/data/script_valid.json",
        "status": "modified",
        "additions": 13,
        "deletions": 0,
        "changes": 13,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/90320d67779be5c97061380c035d3fe51b7ce74b/src/test/data/script_valid.json",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/90320d67779be5c97061380c035d3fe51b7ce74b/src/test/data/script_valid.json",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/data/script_valid.json?ref=90320d67779be5c97061380c035d3fe51b7ce74b",
        "patch": "@@ -97,6 +97,9 @@\n [\"8388608\", \"SIZE 4 EQUAL\"],\n [\"2147483647\", \"SIZE 4 EQUAL\"],\n [\"2147483648\", \"SIZE 5 EQUAL\"],\n+[\"549755813887\", \"SIZE 5 EQUAL\"],\n+[\"549755813888\", \"SIZE 6 EQUAL\"],\n+[\"9223372036854775807\", \"SIZE 8 EQUAL\"],\n [\"-1\", \"SIZE 1 EQUAL\"],\n [\"-127\", \"SIZE 1 EQUAL\"],\n [\"-128\", \"SIZE 2 EQUAL\"],\n@@ -106,6 +109,9 @@\n [\"-8388608\", \"SIZE 4 EQUAL\"],\n [\"-2147483647\", \"SIZE 4 EQUAL\"],\n [\"-2147483648\", \"SIZE 5 EQUAL\"],\n+[\"-549755813887\", \"SIZE 5 EQUAL\"],\n+[\"-549755813888\", \"SIZE 6 EQUAL\"],\n+[\"-9223372036854775807\", \"SIZE 8 EQUAL\"],\n [\"'abcdefghijklmnopqrstuvwxyz'\", \"SIZE 26 EQUAL\"],\n \n \n@@ -306,6 +312,9 @@\n [\"8388608\", \"0x04 0x00008000 EQUAL\"],\n [\"2147483647\", \"0x04 0xFFFFFF7F EQUAL\"],\n [\"2147483648\", \"0x05 0x0000008000 EQUAL\"],\n+[\"549755813887\", \"0x05 0xFFFFFFFF7F EQUAL\"],\n+[\"549755813888\", \"0x06 0xFFFFFFFF7F EQUAL\"],\n+[\"9223372036854775807\", \"0x08 0xFFFFFFFFFFFFFF7F EQUAL\"],\n [\"-1\", \"0x01 0x81 EQUAL\", \"Numbers are little-endian with the MSB being a sign bit\"],\n [\"-127\", \"0x01 0xFF EQUAL\"],\n [\"-128\", \"0x02 0x8080 EQUAL\"],\n@@ -315,6 +324,10 @@\n [\"-8388608\", \"0x04 0x00008080 EQUAL\"],\n [\"-2147483647\", \"0x04 0xFFFFFFFF EQUAL\"],\n [\"-2147483648\", \"0x05 0x0000008080 EQUAL\"],\n+[\"-4294967295\", \"0x05 0xFFFFFFFF80 EQUAL\"],\n+[\"-549755813887\", \"0x05 0xFFFFFFFFFF EQUAL\"],\n+[\"-549755813888\", \"0x06 0x000000008080 EQUAL\"],\n+[\"-9223372036854775807\", \"0x08 0xFFFFFFFFFFFFFFFF EQUAL\"],\n \n [\"2147483647\", \"1ADD 2147483648 EQUAL\", \"We can do math on 4-byte integers, and compare 5-byte ones\"],\n [\"2147483647\", \"1ADD 1\"],"
      }
    ]
  },
  {
    "sha": "b1fdd5475d9040445d7655730f262f214ea87c5f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpiMWZkZDU0NzVkOTA0MDQ0NWQ3NjU1NzMwZjI2MmYyMTRlYTg3YzVm",
    "commit": {
      "author": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:11:39Z"
      },
      "committer": {
        "name": "Cory Fields",
        "email": "cory-nospam-@coryfields.com",
        "date": "2014-04-22T04:43:31Z"
      },
      "message": "script: Add test for CScriptNum\n\nBecause this class replaces some usages of CBigNum, tests have been added to\nverify that they function the same way. The only difference in their usage is\nthe handling of out-of-range numbers.\n\nWhile operands are constrained to [-0x7FFFFFFF,0x7FFFFFFF], the results may\noverflow. The overflowing result is technically unbounded, but in practice\nit can be no bigger than the result of an operation on two operands. This\nimplementation limits them to the size of an int64.\n\nCBigNum was unaware of this constraint, so it allowed for unbounded results,\nwhich were then checked before use. CScriptNum asserts if an arithmetic\noperation will overflow an int64_t, since scripts are not able to reach those\nnumbers anyway. Additionally, CScriptNum will throw an exception when\nconstructed from a vector containing more than 4 bytes This mimics the previous\nCastToBigNum behavior.",
      "tree": {
        "sha": "e9d1993ca41fa52617656ffa42b9a0cbd5a1c0de",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/e9d1993ca41fa52617656ffa42b9a0cbd5a1c0de"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/b1fdd5475d9040445d7655730f262f214ea87c5f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fdd5475d9040445d7655730f262f214ea87c5f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/b1fdd5475d9040445d7655730f262f214ea87c5f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b1fdd5475d9040445d7655730f262f214ea87c5f/comments",
    "author": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "theuni",
      "id": 417043,
      "node_id": "MDQ6VXNlcjQxNzA0Mw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/417043?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/theuni",
      "html_url": "https://github.com/theuni",
      "followers_url": "https://api.github.com/users/theuni/followers",
      "following_url": "https://api.github.com/users/theuni/following{/other_user}",
      "gists_url": "https://api.github.com/users/theuni/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/theuni/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/theuni/subscriptions",
      "organizations_url": "https://api.github.com/users/theuni/orgs",
      "repos_url": "https://api.github.com/users/theuni/repos",
      "events_url": "https://api.github.com/users/theuni/events{/privacy}",
      "received_events_url": "https://api.github.com/users/theuni/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "90320d67779be5c97061380c035d3fe51b7ce74b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/90320d67779be5c97061380c035d3fe51b7ce74b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/90320d67779be5c97061380c035d3fe51b7ce74b"
      }
    ],
    "stats": {
      "total": 197,
      "additions": 197,
      "deletions": 0
    },
    "files": [
      {
        "sha": "e12f4904f14ccd947c52f413e5d3a6ef430772bb",
        "filename": "src/test/Makefile.am",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1fdd5475d9040445d7655730f262f214ea87c5f/src/test/Makefile.am",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1fdd5475d9040445d7655730f262f214ea87c5f/src/test/Makefile.am",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/Makefile.am?ref=b1fdd5475d9040445d7655730f262f214ea87c5f",
        "patch": "@@ -61,6 +61,7 @@ test_bitcoin_SOURCES = \\\n   transaction_tests.cpp \\\n   uint256_tests.cpp \\\n   util_tests.cpp \\\n+  scriptnum_tests.cpp \\\n   sighash_tests.cpp \\\n   $(JSON_TEST_FILES) $(RAW_TEST_FILES)\n "
      },
      {
        "sha": "cd194cc4d9833612d68f0ac20bb24c13897d0692",
        "filename": "src/test/scriptnum_tests.cpp",
        "status": "added",
        "additions": 196,
        "deletions": 0,
        "changes": 196,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b1fdd5475d9040445d7655730f262f214ea87c5f/src/test/scriptnum_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b1fdd5475d9040445d7655730f262f214ea87c5f/src/test/scriptnum_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/scriptnum_tests.cpp?ref=b1fdd5475d9040445d7655730f262f214ea87c5f",
        "patch": "@@ -0,0 +1,196 @@\n+// Copyright (c) 2012-2014 The Bitcoin Core developers\n+// Distributed under the MIT/X11 software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"bignum.h\"\n+#include \"script.h\"\n+#include <boost/test/unit_test.hpp>\n+#include <limits.h>\n+#include <stdint.h>\n+BOOST_AUTO_TEST_SUITE(scriptnum_tests)\n+\n+static const int64_t values[] = \\\n+{ 0, 1, CHAR_MIN, CHAR_MAX, UCHAR_MAX, SHRT_MIN, USHRT_MAX, INT_MIN, INT_MAX, UINT_MAX, LONG_MIN, LONG_MAX };\n+static const int64_t offsets[] = { 1, 0x79, 0x80, 0x81, 0xFF, 0x7FFF, 0x8000, 0xFFFF, 0x10000};\n+\n+static bool verify(const CBigNum& bignum, const CScriptNum& scriptnum)\n+{\n+    return bignum.getvch() == scriptnum.getvch() && bignum.getint() == scriptnum.getint();\n+}\n+\n+static void CheckCreateVch(const int64_t& num)\n+{\n+    CBigNum bignum(num);\n+    CScriptNum scriptnum(num);\n+    BOOST_CHECK(verify(bignum, scriptnum));\n+\n+    CBigNum bignum2(bignum.getvch());\n+    CScriptNum scriptnum2(scriptnum.getvch());\n+    BOOST_CHECK(verify(bignum2, scriptnum2));\n+\n+    CBigNum bignum3(scriptnum2.getvch());\n+    CScriptNum scriptnum3(bignum2.getvch());\n+    BOOST_CHECK(verify(bignum3, scriptnum3));\n+}\n+\n+static void CheckCreateInt(const int64_t& num)\n+{\n+    CBigNum bignum(num);\n+    CScriptNum scriptnum(num);\n+    BOOST_CHECK(verify(bignum, scriptnum));\n+    BOOST_CHECK(verify(bignum.getint(), CScriptNum(scriptnum.getint())));\n+    BOOST_CHECK(verify(scriptnum.getint(), CScriptNum(bignum.getint())));\n+    BOOST_CHECK(verify(CBigNum(scriptnum.getint()).getint(), CScriptNum(CScriptNum(bignum.getint()).getint())));\n+}\n+\n+\n+static void CheckAdd(const int64_t& num1, const int64_t& num2)\n+{\n+    const CBigNum bignum1(num1);\n+    const CBigNum bignum2(num2);\n+    const CScriptNum scriptnum1(num1);\n+    const CScriptNum scriptnum2(num2);\n+    CBigNum bignum3(num1);\n+    CBigNum bignum4(num1);\n+    CScriptNum scriptnum3(num1);\n+    CScriptNum scriptnum4(num1);\n+\n+    // int64_t overflow is undefined.\n+    bool invalid = (((num2 > 0) && (num1 > (std::numeric_limits<int64_t>::max() - num2))) ||\n+                    ((num2 < 0) && (num1 < (std::numeric_limits<int64_t>::min() - num2))));\n+    if (!invalid)\n+    {\n+        BOOST_CHECK(verify(bignum1 + bignum2, scriptnum1 + scriptnum2));\n+        BOOST_CHECK(verify(bignum1 + bignum2, scriptnum1 + num2));\n+        BOOST_CHECK(verify(bignum1 + bignum2, scriptnum2 + num1));\n+    }\n+}\n+\n+static void CheckNegate(const int64_t& num)\n+{\n+    const CBigNum bignum(num);\n+    const CScriptNum scriptnum(num);\n+\n+    // -INT64_MIN is undefined\n+    if (num != std::numeric_limits<int64_t>::min())\n+        BOOST_CHECK(verify(-bignum, -scriptnum));\n+}\n+\n+static void CheckSubtract(const int64_t& num1, const int64_t& num2)\n+{\n+    const CBigNum bignum1(num1);\n+    const CBigNum bignum2(num2);\n+    const CScriptNum scriptnum1(num1);\n+    const CScriptNum scriptnum2(num2);\n+    bool invalid = false;\n+\n+    // int64_t overflow is undefined.\n+    invalid = ((num2 > 0 && num1 < std::numeric_limits<int64_t>::min() + num2) ||\n+               (num2 < 0 && num1 > std::numeric_limits<int64_t>::max() + num2));\n+    if (!invalid)\n+    {\n+        BOOST_CHECK(verify(bignum1 - bignum2, scriptnum1 - scriptnum2));\n+        BOOST_CHECK(verify(bignum1 - bignum2, scriptnum1 - num2));\n+    }\n+\n+    invalid = ((num1 > 0 && num2 < std::numeric_limits<int64_t>::min() + num1) ||\n+               (num1 < 0 && num2 > std::numeric_limits<int64_t>::max() + num1));\n+    if (!invalid)\n+    {\n+        BOOST_CHECK(verify(bignum2 - bignum1, scriptnum2 - scriptnum1));\n+        BOOST_CHECK(verify(bignum2 - bignum1, scriptnum2 - num1));\n+    }\n+}\n+\n+static void CheckCompare(const int64_t& num1, const int64_t& num2)\n+{\n+    const CBigNum bignum1(num1);\n+    const CBigNum bignum2(num2);\n+    const CScriptNum scriptnum1(num1);\n+    const CScriptNum scriptnum2(num2);\n+\n+    BOOST_CHECK((bignum1 == bignum1) == (scriptnum1 == scriptnum1));\n+    BOOST_CHECK((bignum1 != bignum1) ==  (scriptnum1 != scriptnum1));\n+    BOOST_CHECK((bignum1 < bignum1) ==  (scriptnum1 < scriptnum1));\n+    BOOST_CHECK((bignum1 > bignum1) ==  (scriptnum1 > scriptnum1));\n+    BOOST_CHECK((bignum1 >= bignum1) ==  (scriptnum1 >= scriptnum1));\n+    BOOST_CHECK((bignum1 <= bignum1) ==  (scriptnum1 <= scriptnum1));\n+\n+    BOOST_CHECK((bignum1 == bignum1) == (scriptnum1 == num1));\n+    BOOST_CHECK((bignum1 != bignum1) ==  (scriptnum1 != num1));\n+    BOOST_CHECK((bignum1 < bignum1) ==  (scriptnum1 < num1));\n+    BOOST_CHECK((bignum1 > bignum1) ==  (scriptnum1 > num1));\n+    BOOST_CHECK((bignum1 >= bignum1) ==  (scriptnum1 >= num1));\n+    BOOST_CHECK((bignum1 <= bignum1) ==  (scriptnum1 <= num1));\n+\n+    BOOST_CHECK((bignum1 == bignum2) ==  (scriptnum1 == scriptnum2));\n+    BOOST_CHECK((bignum1 != bignum2) ==  (scriptnum1 != scriptnum2));\n+    BOOST_CHECK((bignum1 < bignum2) ==  (scriptnum1 < scriptnum2));\n+    BOOST_CHECK((bignum1 > bignum2) ==  (scriptnum1 > scriptnum2));\n+    BOOST_CHECK((bignum1 >= bignum2) ==  (scriptnum1 >= scriptnum2));\n+    BOOST_CHECK((bignum1 <= bignum2) ==  (scriptnum1 <= scriptnum2));\n+\n+    BOOST_CHECK((bignum1 == bignum2) ==  (scriptnum1 == num2));\n+    BOOST_CHECK((bignum1 != bignum2) ==  (scriptnum1 != num2));\n+    BOOST_CHECK((bignum1 < bignum2) ==  (scriptnum1 < num2));\n+    BOOST_CHECK((bignum1 > bignum2) ==  (scriptnum1 > num2));\n+    BOOST_CHECK((bignum1 >= bignum2) ==  (scriptnum1 >= num2));\n+    BOOST_CHECK((bignum1 <= bignum2) ==  (scriptnum1 <= num2));\n+}\n+\n+static void RunCreate(const int64_t& num)\n+{\n+    CheckCreateInt(num);\n+    CScriptNum scriptnum(num);\n+    if (scriptnum.getvch().size() <= CScriptNum::nMaxNumSize)\n+        CheckCreateVch(num);\n+    else\n+    {\n+        BOOST_CHECK_THROW (CheckCreateVch(num), scriptnum_error);\n+    }\n+}\n+\n+static void RunOperators(const int64_t& num1, const int64_t& num2)\n+{\n+    CheckAdd(num1, num2);\n+    CheckSubtract(num1, num2);\n+    CheckNegate(num1);\n+    CheckCompare(num1, num2);\n+}\n+\n+BOOST_AUTO_TEST_CASE(creation)\n+{\n+    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    {\n+        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        {\n+            RunCreate(values[i]);\n+            RunCreate(values[i] + offsets[j]);\n+            RunCreate(values[i] - offsets[j]);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_CASE(operators)\n+{\n+    for(size_t i = 0; i < sizeof(values) / sizeof(values[0]); ++i)\n+    {\n+        for(size_t j = 0; j < sizeof(offsets) / sizeof(offsets[0]); ++j)\n+        {\n+            RunOperators(values[i], values[i]);\n+            RunOperators(values[i], -values[i]);\n+            RunOperators(values[i], values[j]);\n+            RunOperators(values[i], -values[j]);\n+            RunOperators(values[i] + values[j], values[j]);\n+            RunOperators(values[i] + values[j], -values[j]);\n+            RunOperators(values[i] - values[j], values[j]);\n+            RunOperators(values[i] - values[j], -values[j]);\n+            RunOperators(values[i] + values[j], values[i] + values[j]);\n+            RunOperators(values[i] + values[j], values[i] - values[j]);\n+            RunOperators(values[i] - values[j], values[i] + values[j]);\n+            RunOperators(values[i] - values[j], values[i] - values[j]);\n+        }\n+    }\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]