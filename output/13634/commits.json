[
  {
    "sha": "fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpmYTVjZTI3Mzg1YmM2MGNkZjZkOWE0ZWViMmQzMmM5MTZjOWUwN2Vi",
    "commit": {
      "author": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-07-11T12:00:15Z"
      },
      "committer": {
        "name": "MarcoFalke",
        "email": "falke.marco@gmail.com",
        "date": "2018-08-07T14:49:10Z"
      },
      "message": "ui: Compile boost:signals2 only once",
      "tree": {
        "sha": "ffcc6d127003f6bb7dc431f56e0d9a13870fd963",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/ffcc6d127003f6bb7dc431f56e0d9a13870fd963"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unknown_key",
        "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGcBAABCgAGBQJbabFmAAoJEM4rdWl+aaVIBosL/jIxA7ckPf0cp40RT25dwU7G\n12WKKMMNA44OZ0ZLeyjD9Cjb0KbNBdajzGqi5LWTSNec8eOmacwikxti7D6qWydD\nKum3urvbfPHMRQBYLUcorCw3a2gsk2yvACk1l1oqdaACLGE0Qbl6BcFzawXuI8Qo\nnqSMkhK7sk6i1J9mJTZbYYgtSsp7l3iJWYZxxJmd7VXtphlnuAvknS8bQ2St33Pg\nVMISZOzL2ZlFZKG5djf6e2gvUKMkRn8rO/dStNTHIzZ6nvEnjrCvvSIFYiXPtxE9\nlFGZAJt6S9raTuAG8Nt+d6XbxzXj+7qUb5CjfM06N+QbrCJcEVnHk+at+M4mIzqR\nQPkUoXP9/tjHwAlHqwSSTPlVDSOKdKohhRbcybh2dROZIm81g3vOKoIgoExtySi/\nRXlNUEus0d/gGaKbYH12wjH9wA7rKcPEqM7BD5gosC5f3rEkt3c2HBwvvKrd+A2Y\nmvJhjEhwi8ss4g1xns7uL7NXBmFy32tloGc08xZ4sw==\n=Jy+s\n-----END PGP SIGNATURE-----",
        "payload": "tree ffcc6d127003f6bb7dc431f56e0d9a13870fd963\nparent fad42e8c4a9d625146f82bab9a038d945d40ac4f\nauthor MarcoFalke <falke.marco@gmail.com> 1531310415 -0400\ncommitter MarcoFalke <falke.marco@gmail.com> 1533653350 -0400\n\nui: Compile boost:signals2 only once\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/comments",
    "author": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "MarcoFalke",
      "id": 6399679,
      "node_id": "MDQ6VXNlcjYzOTk2Nzk=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6399679?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/MarcoFalke",
      "html_url": "https://github.com/MarcoFalke",
      "followers_url": "https://api.github.com/users/MarcoFalke/followers",
      "following_url": "https://api.github.com/users/MarcoFalke/following{/other_user}",
      "gists_url": "https://api.github.com/users/MarcoFalke/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/MarcoFalke/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/MarcoFalke/subscriptions",
      "organizations_url": "https://api.github.com/users/MarcoFalke/orgs",
      "repos_url": "https://api.github.com/users/MarcoFalke/repos",
      "events_url": "https://api.github.com/users/MarcoFalke/events{/privacy}",
      "received_events_url": "https://api.github.com/users/MarcoFalke/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "fad42e8c4a9d625146f82bab9a038d945d40ac4f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/fad42e8c4a9d625146f82bab9a038d945d40ac4f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/fad42e8c4a9d625146f82bab9a038d945d40ac4f"
      }
    ],
    "stats": {
      "total": 129,
      "additions": 95,
      "deletions": 34
    },
    "files": [
      {
        "sha": "be5d0de6bed14bbe7e2ead427ccdf30ed05196a9",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 6,
        "deletions": 6,
        "changes": 12,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
        "patch": "@@ -326,12 +326,12 @@ static void registerSignalHandler(int signal, void(*handler)(int))\n \n static void OnRPCStarted()\n {\n-    uiInterface.NotifyBlockTip.connect(&RPCNotifyBlockChange);\n+    uiInterface.NotifyBlockTip_connect(&RPCNotifyBlockChange);\n }\n \n static void OnRPCStopped()\n {\n-    uiInterface.NotifyBlockTip.disconnect(&RPCNotifyBlockChange);\n+    uiInterface.NotifyBlockTip_disconnect(&RPCNotifyBlockChange);\n     RPCNotifyBlockChange(false, nullptr);\n     g_best_block_cv.notify_all();\n     LogPrint(BCLog::RPC, \"RPC stopped.\\n\");\n@@ -1290,7 +1290,7 @@ bool AppInitMain()\n      */\n     if (gArgs.GetBoolArg(\"-server\", false))\n     {\n-        uiInterface.InitMessage.connect(SetRPCWarmupStatus);\n+        uiInterface.InitMessage_connect(SetRPCWarmupStatus);\n         if (!AppInitServers())\n             return InitError(_(\"Unable to start HTTP server. See debug log for details.\"));\n     }\n@@ -1647,13 +1647,13 @@ bool AppInitMain()\n     // Either install a handler to notify us when genesis activates, or set fHaveGenesis directly.\n     // No locking, as this happens before any background thread is started.\n     if (chainActive.Tip() == nullptr) {\n-        uiInterface.NotifyBlockTip.connect(BlockNotifyGenesisWait);\n+        uiInterface.NotifyBlockTip_connect(BlockNotifyGenesisWait);\n     } else {\n         fHaveGenesis = true;\n     }\n \n     if (gArgs.IsArgSet(\"-blocknotify\"))\n-        uiInterface.NotifyBlockTip.connect(BlockNotifyCallback);\n+        uiInterface.NotifyBlockTip_connect(BlockNotifyCallback);\n \n     std::vector<fs::path> vImportFiles;\n     for (const std::string& strFile : gArgs.GetArgs(\"-loadblock\")) {\n@@ -1671,7 +1671,7 @@ bool AppInitMain()\n         while (!fHaveGenesis && !ShutdownRequested()) {\n             condvar_GenesisWait.wait_for(lock, std::chrono::milliseconds(500));\n         }\n-        uiInterface.NotifyBlockTip.disconnect(BlockNotifyGenesisWait);\n+        uiInterface.NotifyBlockTip_disconnect(BlockNotifyGenesisWait);\n     }\n \n     if (ShutdownRequested()) {"
      },
      {
        "sha": "399e991995dbc03b39bb88ed9079632498d3b9c0",
        "filename": "src/interfaces/node.cpp",
        "status": "modified",
        "additions": 11,
        "deletions": 11,
        "changes": 22,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/interfaces/node.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/interfaces/node.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/interfaces/node.cpp?ref=fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
        "patch": "@@ -233,52 +233,52 @@ class NodeImpl : public Node\n     }\n     std::unique_ptr<Handler> handleInitMessage(InitMessageFn fn) override\n     {\n-        return MakeHandler(::uiInterface.InitMessage.connect(fn));\n+        return MakeHandler(::uiInterface.InitMessage_connect(fn));\n     }\n     std::unique_ptr<Handler> handleMessageBox(MessageBoxFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ThreadSafeMessageBox.connect(fn));\n+        return MakeHandler(::uiInterface.ThreadSafeMessageBox_connect(fn));\n     }\n     std::unique_ptr<Handler> handleQuestion(QuestionFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ThreadSafeQuestion.connect(fn));\n+        return MakeHandler(::uiInterface.ThreadSafeQuestion_connect(fn));\n     }\n     std::unique_ptr<Handler> handleShowProgress(ShowProgressFn fn) override\n     {\n-        return MakeHandler(::uiInterface.ShowProgress.connect(fn));\n+        return MakeHandler(::uiInterface.ShowProgress_connect(fn));\n     }\n     std::unique_ptr<Handler> handleLoadWallet(LoadWalletFn fn) override\n     {\n         CHECK_WALLET(\n-            return MakeHandler(::uiInterface.LoadWallet.connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); })));\n+            return MakeHandler(::uiInterface.LoadWallet_connect([fn](std::shared_ptr<CWallet> wallet) { fn(MakeWallet(wallet)); })));\n     }\n     std::unique_ptr<Handler> handleNotifyNumConnectionsChanged(NotifyNumConnectionsChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyNumConnectionsChanged.connect(fn));\n+        return MakeHandler(::uiInterface.NotifyNumConnectionsChanged_connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyNetworkActiveChanged(NotifyNetworkActiveChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyNetworkActiveChanged.connect(fn));\n+        return MakeHandler(::uiInterface.NotifyNetworkActiveChanged_connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyAlertChanged(NotifyAlertChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyAlertChanged.connect(fn));\n+        return MakeHandler(::uiInterface.NotifyAlertChanged_connect(fn));\n     }\n     std::unique_ptr<Handler> handleBannedListChanged(BannedListChangedFn fn) override\n     {\n-        return MakeHandler(::uiInterface.BannedListChanged.connect(fn));\n+        return MakeHandler(::uiInterface.BannedListChanged_connect(fn));\n     }\n     std::unique_ptr<Handler> handleNotifyBlockTip(NotifyBlockTipFn fn) override\n     {\n-        return MakeHandler(::uiInterface.NotifyBlockTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n+        return MakeHandler(::uiInterface.NotifyBlockTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n             fn(initial_download, block->nHeight, block->GetBlockTime(),\n                 GuessVerificationProgress(Params().TxData(), block));\n         }));\n     }\n     std::unique_ptr<Handler> handleNotifyHeaderTip(NotifyHeaderTipFn fn) override\n     {\n         return MakeHandler(\n-            ::uiInterface.NotifyHeaderTip.connect([fn](bool initial_download, const CBlockIndex* block) {\n+            ::uiInterface.NotifyHeaderTip_connect([fn](bool initial_download, const CBlockIndex* block) {\n                 fn(initial_download, block->nHeight, block->GetBlockTime(),\n                     GuessVerificationProgress(Params().TxData(), block));\n             }));"
      },
      {
        "sha": "905ebb4fed2d733df0fc546802d925425da47d15",
        "filename": "src/noui.cpp",
        "status": "modified",
        "additions": 3,
        "deletions": 3,
        "changes": 6,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/noui.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/noui.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/noui.cpp?ref=fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
        "patch": "@@ -52,7 +52,7 @@ static void noui_InitMessage(const std::string& message)\n void noui_connect()\n {\n     // Connect bitcoind signal handlers\n-    uiInterface.ThreadSafeMessageBox.connect(noui_ThreadSafeMessageBox);\n-    uiInterface.ThreadSafeQuestion.connect(noui_ThreadSafeQuestion);\n-    uiInterface.InitMessage.connect(noui_InitMessage);\n+    uiInterface.ThreadSafeMessageBox_connect(noui_ThreadSafeMessageBox);\n+    uiInterface.ThreadSafeQuestion_connect(noui_ThreadSafeQuestion);\n+    uiInterface.InitMessage_connect(noui_InitMessage);\n }"
      },
      {
        "sha": "e1fb13592cfdf9db9aab56f20642f62b5fcea9c8",
        "filename": "src/ui_interface.cpp",
        "status": "modified",
        "additions": 52,
        "deletions": 0,
        "changes": 52,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/ui_interface.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/ui_interface.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.cpp?ref=fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
        "patch": "@@ -5,8 +5,60 @@\n #include <ui_interface.h>\n #include <util.h>\n \n+#include <boost/signals2/last_value.hpp>\n+#include <boost/signals2/signal.hpp>\n+\n CClientUIInterface uiInterface;\n \n+struct UISignals {\n+    boost::signals2::signal<CClientUIInterface::ThreadSafeMessageBoxSig, boost::signals2::last_value<bool>> ThreadSafeMessageBox;\n+    boost::signals2::signal<CClientUIInterface::ThreadSafeQuestionSig, boost::signals2::last_value<bool>> ThreadSafeQuestion;\n+    boost::signals2::signal<CClientUIInterface::InitMessageSig> InitMessage;\n+    boost::signals2::signal<CClientUIInterface::NotifyNumConnectionsChangedSig> NotifyNumConnectionsChanged;\n+    boost::signals2::signal<CClientUIInterface::NotifyNetworkActiveChangedSig> NotifyNetworkActiveChanged;\n+    boost::signals2::signal<CClientUIInterface::NotifyAlertChangedSig> NotifyAlertChanged;\n+    boost::signals2::signal<CClientUIInterface::LoadWalletSig> LoadWallet;\n+    boost::signals2::signal<CClientUIInterface::ShowProgressSig> ShowProgress;\n+    boost::signals2::signal<CClientUIInterface::NotifyBlockTipSig> NotifyBlockTip;\n+    boost::signals2::signal<CClientUIInterface::NotifyHeaderTipSig> NotifyHeaderTip;\n+    boost::signals2::signal<CClientUIInterface::BannedListChangedSig> BannedListChanged;\n+} g_ui_signals;\n+\n+#define ADD_SIGNALS_IMPL_WRAPPER(signal_name)                                                                 \\\n+    boost::signals2::connection CClientUIInterface::signal_name##_connect(std::function<signal_name##Sig> fn) \\\n+    {                                                                                                         \\\n+        return g_ui_signals.signal_name.connect(fn);                                                          \\\n+    }                                                                                                         \\\n+    void CClientUIInterface::signal_name##_disconnect(std::function<signal_name##Sig> fn)                     \\\n+    {                                                                                                         \\\n+        return g_ui_signals.signal_name.disconnect(&fn);                                                      \\\n+    }\n+\n+ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeMessageBox);\n+ADD_SIGNALS_IMPL_WRAPPER(ThreadSafeQuestion);\n+ADD_SIGNALS_IMPL_WRAPPER(InitMessage);\n+ADD_SIGNALS_IMPL_WRAPPER(NotifyNumConnectionsChanged);\n+ADD_SIGNALS_IMPL_WRAPPER(NotifyNetworkActiveChanged);\n+ADD_SIGNALS_IMPL_WRAPPER(NotifyAlertChanged);\n+ADD_SIGNALS_IMPL_WRAPPER(LoadWallet);\n+ADD_SIGNALS_IMPL_WRAPPER(ShowProgress);\n+ADD_SIGNALS_IMPL_WRAPPER(NotifyBlockTip);\n+ADD_SIGNALS_IMPL_WRAPPER(NotifyHeaderTip);\n+ADD_SIGNALS_IMPL_WRAPPER(BannedListChanged);\n+\n+bool CClientUIInterface::ThreadSafeMessageBox(const std::string& message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeMessageBox(message, caption, style); }\n+bool CClientUIInterface::ThreadSafeQuestion(const std::string& message, const std::string& non_interactive_message, const std::string& caption, unsigned int style) { return g_ui_signals.ThreadSafeQuestion(message, non_interactive_message, caption, style); }\n+void CClientUIInterface::InitMessage(const std::string& message) { return g_ui_signals.InitMessage(message); }\n+void CClientUIInterface::NotifyNumConnectionsChanged(int newNumConnections) { return g_ui_signals.NotifyNumConnectionsChanged(newNumConnections); }\n+void CClientUIInterface::NotifyNetworkActiveChanged(bool networkActive) { return g_ui_signals.NotifyNetworkActiveChanged(networkActive); }\n+void CClientUIInterface::NotifyAlertChanged() { return g_ui_signals.NotifyAlertChanged(); }\n+void CClientUIInterface::LoadWallet(std::shared_ptr<CWallet> wallet) { return g_ui_signals.LoadWallet(wallet); }\n+void CClientUIInterface::ShowProgress(const std::string& title, int nProgress, bool resume_possible) { return g_ui_signals.ShowProgress(title, nProgress, resume_possible); }\n+void CClientUIInterface::NotifyBlockTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyBlockTip(b, i); }\n+void CClientUIInterface::NotifyHeaderTip(bool b, const CBlockIndex* i) { return g_ui_signals.NotifyHeaderTip(b, i); }\n+void CClientUIInterface::BannedListChanged() { return g_ui_signals.BannedListChanged(); }\n+\n+\n bool InitError(const std::string& str)\n {\n     uiInterface.ThreadSafeMessageBox(str, \"\", CClientUIInterface::MSG_ERROR);"
      },
      {
        "sha": "1afb27e3c8995fffebca868886e05302b14bd5ea",
        "filename": "src/ui_interface.h",
        "status": "modified",
        "additions": 23,
        "deletions": 14,
        "changes": 37,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/ui_interface.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb/src/ui_interface.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/ui_interface.h?ref=fa5ce27385bc60cdf6d9a4eeb2d32c916c9e07eb",
        "patch": "@@ -6,15 +6,18 @@\n #ifndef BITCOIN_UI_INTERFACE_H\n #define BITCOIN_UI_INTERFACE_H\n \n+#include <functional>\n #include <memory>\n #include <stdint.h>\n #include <string>\n \n-#include <boost/signals2/last_value.hpp>\n-#include <boost/signals2/signal.hpp>\n-\n class CWallet;\n class CBlockIndex;\n+namespace boost {\n+namespace signals2 {\n+class connection;\n+}\n+} // namespace boost\n \n /** General change type (added, updated, removed). */\n enum ChangeType\n@@ -72,43 +75,49 @@ class CClientUIInterface\n         MSG_ERROR = (ICON_ERROR | BTN_OK | MODAL)\n     };\n \n+#define ADD_SIGNALS_DECL_WRAPPER(signal_name, rtype, args...)                              \\\n+    rtype signal_name(args);                                                               \\\n+    using signal_name##Sig = rtype(args);                                                  \\\n+    boost::signals2::connection signal_name##_connect(std::function<signal_name##Sig> fn); \\\n+    void signal_name##_disconnect(std::function<signal_name##Sig> fn);\n+\n     /** Show message box. */\n-    boost::signals2::signal<bool (const std::string& message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeMessageBox;\n+    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeMessageBox, bool, const std::string& message, const std::string& caption, unsigned int style);\n \n     /** If possible, ask the user a question. If not, falls back to ThreadSafeMessageBox(noninteractive_message, caption, style) and returns false. */\n-    boost::signals2::signal<bool (const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style), boost::signals2::last_value<bool> > ThreadSafeQuestion;\n+    ADD_SIGNALS_DECL_WRAPPER(ThreadSafeQuestion, bool, const std::string& message, const std::string& noninteractive_message, const std::string& caption, unsigned int style);\n \n     /** Progress message during initialization. */\n-    boost::signals2::signal<void (const std::string &message)> InitMessage;\n+    ADD_SIGNALS_DECL_WRAPPER(InitMessage, void, const std::string& message);\n \n     /** Number of network connections changed. */\n-    boost::signals2::signal<void (int newNumConnections)> NotifyNumConnectionsChanged;\n+    ADD_SIGNALS_DECL_WRAPPER(NotifyNumConnectionsChanged, void, int newNumConnections);\n \n     /** Network activity state changed. */\n-    boost::signals2::signal<void (bool networkActive)> NotifyNetworkActiveChanged;\n+    ADD_SIGNALS_DECL_WRAPPER(NotifyNetworkActiveChanged, void, bool networkActive);\n \n     /**\n      * Status bar alerts changed.\n      */\n-    boost::signals2::signal<void ()> NotifyAlertChanged;\n+    ADD_SIGNALS_DECL_WRAPPER(NotifyAlertChanged, void, );\n \n     /** A wallet has been loaded. */\n-    boost::signals2::signal<void (std::shared_ptr<CWallet> wallet)> LoadWallet;\n+    ADD_SIGNALS_DECL_WRAPPER(LoadWallet, void, std::shared_ptr<CWallet> wallet);\n \n     /**\n      * Show progress e.g. for verifychain.\n      * resume_possible indicates shutting down now will result in the current progress action resuming upon restart.\n      */\n-    boost::signals2::signal<void (const std::string &title, int nProgress, bool resume_possible)> ShowProgress;\n+    ADD_SIGNALS_DECL_WRAPPER(ShowProgress, void, const std::string& title, int nProgress, bool resume_possible);\n \n     /** New block has been accepted */\n-    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyBlockTip;\n+    ADD_SIGNALS_DECL_WRAPPER(NotifyBlockTip, void, bool, const CBlockIndex*);\n \n     /** Best header has changed */\n-    boost::signals2::signal<void (bool, const CBlockIndex *)> NotifyHeaderTip;\n+    ADD_SIGNALS_DECL_WRAPPER(NotifyHeaderTip, void, bool, const CBlockIndex*);\n \n     /** Banlist did change. */\n-    boost::signals2::signal<void (void)> BannedListChanged;\n+    ADD_SIGNALS_DECL_WRAPPER(BannedListChanged, void, void);\n };\n \n /** Show warning message **/"
      }
    ]
  }
]