[
  {
    "sha": "2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZDdhNzU0YWQzYmJiZmNlNTgxZjRjNGJkYmJmMTI2MmZkOTIwY2Jh",
    "commit": {
      "author": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2020-12-10T07:43:13Z"
      },
      "committer": {
        "name": "Jarol Rodriguez",
        "email": "jarolrod@tutanota.com",
        "date": "2021-07-20T04:09:46Z"
      },
      "message": "doc: update for NetBSD 9.1, add GUI Build Instructions\n\nNetBSD doc has not seen any meaningful contribution since 2018. This PR intends\nto update the docs so that one can successfully build on the latest NetBSD release. It also adds\ndependency information and instructions to build the GUI.",
      "tree": {
        "sha": "19ec2a166a751fe1120a87edd28d30db5b2fb5e4",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/19ec2a166a751fe1120a87edd28d30db5b2fb5e4"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba/comments",
    "author": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "jarolrod",
      "id": 23396902,
      "node_id": "MDQ6VXNlcjIzMzk2OTAy",
      "avatar_url": "https://avatars.githubusercontent.com/u/23396902?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/jarolrod",
      "html_url": "https://github.com/jarolrod",
      "followers_url": "https://api.github.com/users/jarolrod/followers",
      "following_url": "https://api.github.com/users/jarolrod/following{/other_user}",
      "gists_url": "https://api.github.com/users/jarolrod/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/jarolrod/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/jarolrod/subscriptions",
      "organizations_url": "https://api.github.com/users/jarolrod/orgs",
      "repos_url": "https://api.github.com/users/jarolrod/repos",
      "events_url": "https://api.github.com/users/jarolrod/events{/privacy}",
      "received_events_url": "https://api.github.com/users/jarolrod/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5c041cb348e667672c8b5ed504dba05adf60783b",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5c041cb348e667672c8b5ed504dba05adf60783b",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5c041cb348e667672c8b5ed504dba05adf60783b"
      }
    ],
    "stats": {
      "total": 158,
      "additions": 119,
      "deletions": 39
    },
    "files": [
      {
        "sha": "607f1f525af9320d0c4761a03373fa3b90ecf540",
        "filename": "doc/build-netbsd.md",
        "status": "modified",
        "additions": 119,
        "deletions": 39,
        "changes": 158,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba/doc/build-netbsd.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba/doc/build-netbsd.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/doc/build-netbsd.md?ref=2d7a754ad3bbbfce581f4c4bdbbf1262fd920cba",
        "patch": "@@ -1,81 +1,161 @@\n-NetBSD build guide\n-======================\n-(updated for NetBSD 8.0)\n+# NetBSD Build Guide\n \n-This guide describes how to build bitcoind and command-line utilities on NetBSD.\n+Updated for NetBSD [9.1](https://netbsd.org/releases/formal-9/NetBSD-9.1.html)\n \n-This guide does not contain instructions for building the GUI.\n+This guide describes how to build bitcoind, command-line utilities, and GUI on NetBSD.\n \n-Preparation\n--------------\n+## Dependencies\n \n-You will need the following modules, which can be installed via pkgsrc or pkgin:\n+The following dependencies are required:\n+\n+ Library                                          | Purpose    | Description\n+ -------------------------------------------------|------------|----------------------\n+ [autoconf](https://pkgsrc.se/devel/autoconf)     | Build      | Automatically configure software source code\n+ [automake](https://pkgsrc.se/devel/automake)     | Build      | Generate makefile (requires autoconf)\n+ [libtool](https://pkgsrc.se/devel/libtool)       | Build      | Shared library support\n+ [pkg-config](https://pkgsrc.se/devel/pkg-config) | Build      | Configure compiler and linker flags\n+ [git](https://pkgsrc.se/devel/git)               | Clone      | Version control system\n+ [gmake](https://pkgsrc.se/devel/gmake)           | Compile    | Generate executables\n+ [boost](https://pkgsrc.se/meta-pkgs/boost)       | Utility    | Library for threading, data structures, etc\n+ [libevent](https://pkgsrc.se/devel/libevent)     | Networking | OS-independent asynchronous networking\n+\n+\n+The following dependencies are optional:\n+\n+  Library                                            | Purpose          | Description\n+  ---------------------------------------------------|------------------|----------------------\n+  [db4](https://pkgsrc.se/databases/db4)             | Berkeley DB      | Wallet storage (only needed when wallet enabled)\n+  [qt5](https://pkgsrc.se/x11/qt5)                   | GUI              | GUI toolkit (only needed when GUI enabled)\n+  [qrencode](https://pkgsrc.se/converters/qrencode)  | QR codes in GUI  | Generating QR codes (only needed when GUI enabled)\n+  [zeromq](https://pkgsrc.se/net/zeromq)             | ZMQ notification | Allows generating ZMQ notifications (requires ZMQ version >= 4.0.0)\n+  [sqlite3](https://pkgsrc.se/databases/sqlite3)     | SQLite DB        | Wallet storage (only needed when wallet enabled)\n+  [python37](https://pkgsrc.se/lang/python37)        | Testing          | Python Interpreter (only needed when running the test suite)\n+\n+  See [dependencies.md](dependencies.md) for a complete overview.\n+\n+\n+## Preparation\n+\n+### 1. Install Required Dependencies\n+\n+Install the required dependencies the usual way you [install software on NetBSD](https://www.netbsd.org/docs/guide/en/chap-boot.html#chap-boot-pkgsrc) -- either with `pkg_add` or `pkgin`. The example commands below use `pkgin` which is the [recommended](https://www.netbsd.org/docs/guide/en/chap-boot.html#chap-boot-pkgsrc) way to install binary packages.\n+\n+Note: `pkgin` is usually run as `root` or with `sudo`.\n+\n+```bash\n+pkgin install autoconf automake libtool pkg-config git gmake boost libevent\n \n ```\n-autoconf\n-automake\n-boost\n-git\n-gmake\n-libevent\n-libtool\n-pkg-config\n-python37\n \n+### 2. Clone Bitcoin Repo\n+\n+Now that `git` and the required dependencies are installed, let's clone the Bitcoin Core repository to a directory. All build scripts and commands will run from this directory.\n+\n+```bash\n git clone https://github.com/bitcoin/bitcoin.git\n ```\n \n-See [dependencies.md](dependencies.md) for a complete overview.\n+### 3. Install Optional Dependencies\n+\n+#### Wallet Dependencies\n+\n+It is not necessary to build wallet functionality to run bitcoind or the GUI. To enable legacy wallets, you must install Berkeley DB, aka BDB or `db4`. To enable [descriptor wallets](https://github.com/bitcoin/bitcoin/blob/master/doc/descriptors.md), SQLite (`sqlite3`) is required. Skip `db4` if you intend to *exclusively* use descriptor wallets.\n+\n+###### Legacy Wallet Support\n+\n+BDB (`db4`) is required to enable support for legacy wallets. Skip if you don't intend to use legacy wallets.\n \n-### Building BerkeleyDB\n+```bash\n+pkgin install db4\n+```\n \n-BerkeleyDB is only necessary for the wallet functionality. To skip this, pass\n-`--disable-wallet` to `./configure` and skip to the next section.\n+###### Descriptor Wallet Support\n \n-It is recommended to use Berkeley DB 4.8. You cannot use the BerkeleyDB library\n-from ports, for the same reason as boost above (g++/libstd++ incompatibility).\n-If you have to build it yourself, you can use [the installation script included\n-in contrib/](/contrib/install_db4.sh) like so:\n+SQLite (`sqlite3`) is required to enable support for descriptor wallets. Skip if you don't intend to use descriptor wallets.\n \n ```bash\n-./contrib/install_db4.sh `pwd`\n+pkgin install sqlite3\n ```\n+---\n+\n+#### GUI Dependencies\n+###### Qt5\n \n-from the root of the repository. Then set `BDB_PREFIX` for the next section:\n+Bitcoin Core includes a GUI built with the cross-platform Qt Framework. To compile the GUI, we need to install `qt5`. Skip if you don't intend to use the GUI.\n \n ```bash\n-export BDB_PREFIX=\"$PWD/db4\"\n+pkgin install qt5\n ```\n+###### qrencode\n+\n+The GUI can encode addresses in a QR Code. To build in QR support for the GUI, install `qrencode`. Skip if not using the GUI or don't need QR code functionality.\n+\n+```bash\n+pkgin install qrencode\n+```\n+---\n+\n+#### Test Suite Dependencies\n+\n+There is an included test suite that is useful for testing code changes when developing.\n+To run the test suite (recommended), you will need to have Python 3 installed:\n+\n+```bash\n+pkgin install python37\n+```\n+---\n \n ### Building Bitcoin Core\n \n **Important**: Use `gmake` (the non-GNU `make` will exit with an error).\n \n-With wallet:\n+\n+### 1. Configuration\n+\n+There are many ways to configure Bitcoin Core. Here are a few common examples:\n+##### Wallet (BDB + SQlite) Support, No GUI:\n+\n+This explicitly enables legacy wallet support and disables the GUI. An error will be thrown if `db4` is not installed. If `sqlite3` is installed, then descriptor wallet support will also be built.\n+\n+```bash\n+./autogen.sh\n+./configure --with-gui=no \\\n+    CPPFLAGS=\"-I/usr/pkg/include\" \\\n+    LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    --with-boost-libdir=/usr/pkg/lib \\\n+    MAKE=gmake\n+```\n+\n+##### Wallet (only SQlite) and GUI Support:\n+\n+This explicitly enables the GUI and disables legacy wallet support. If `qt5` is not installed, this will throw an error. If `sqlite3` is installed then descriptor wallet functionality will be built. If `sqlite3` is not installed, then wallet functionality will be disabled.\n+\n ```bash\n ./autogen.sh\n-./configure --with-gui=no CPPFLAGS=\"-I/usr/pkg/include\" \\\n+./configure --without-bdb --with-gui=yes \\\n+    CPPFLAGS=\"-I/usr/pkg/include\" \\\n     LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BDB_LIBS=\"-L${BDB_PREFIX}/lib -ldb_cxx-4.8\" \\\n-    BDB_CFLAGS=\"-I${BDB_PREFIX}/include\" \\\n+    --with-boost-libdir=/usr/pkg/lib \\\n     MAKE=gmake\n ```\n \n-Without wallet:\n+##### No Wallet or GUI\n+\n ```bash\n ./autogen.sh\n-./configure --with-gui=no --disable-wallet \\\n+./configure --without-wallet --with-gui=no \\\n     CPPFLAGS=\"-I/usr/pkg/include\" \\\n     LDFLAGS=\"-L/usr/pkg/lib\" \\\n-    BOOST_CPPFLAGS=\"-I/usr/pkg/include\" \\\n-    BOOST_LDFLAGS=\"-L/usr/pkg/lib\" \\\n+    --with-boost-libdir=/usr/pkg/lib \\\n     MAKE=gmake\n ```\n \n+\n+### 2. Compile\n+\n Build and run the tests:\n+\n ```bash\n gmake # use \"-j N\" here for N parallel jobs\n-gmake check\n+gmake check # Run tests if Python 3 is available\n ```"
      }
    ]
  }
]