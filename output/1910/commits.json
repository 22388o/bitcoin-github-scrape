[
  {
    "sha": "729b18068689c1a6805d04117ef05f97502f5062",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo3MjliMTgwNjg2ODljMWE2ODA1ZDA0MTE3ZWYwNWY5NzUwMmY1MDYy",
    "commit": {
      "author": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-10-05T17:22:21Z"
      },
      "committer": {
        "name": "Philip Kaufmann",
        "email": "phil.kaufmann@t-online.de",
        "date": "2012-10-21T19:32:25Z"
      },
      "message": "change blockchain -> block chain (spelling)\n\n- Wiki says \"block chain\" is correct ;)\n- remove some unneeded spaces I found in the source, while fixing the spelling",
      "tree": {
        "sha": "0e1e735343dcac684129e7026fc3c6e80e2ab40a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/0e1e735343dcac684129e7026fc3c6e80e2ab40a"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/729b18068689c1a6805d04117ef05f97502f5062",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729b18068689c1a6805d04117ef05f97502f5062",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/729b18068689c1a6805d04117ef05f97502f5062",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/729b18068689c1a6805d04117ef05f97502f5062/comments",
    "author": null,
    "committer": null,
    "parents": [
      {
        "sha": "d44f1ea394d3f0f324f7d61e97fec2b7ba2e865f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d44f1ea394d3f0f324f7d61e97fec2b7ba2e865f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d44f1ea394d3f0f324f7d61e97fec2b7ba2e865f"
      }
    ],
    "stats": {
      "total": 27,
      "additions": 13,
      "deletions": 14
    },
    "files": [
      {
        "sha": "45658e49d04ce3928843eb3e9f45bc6e88764ca5",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -639,7 +639,7 @@ bool AppInit2()\n     BOOST_FOREACH(string strDest, mapMultiArgs[\"-seednode\"])\n         AddOneShot(strDest);\n \n-    // ********************************************************* Step 7: load blockchain\n+    // ********************************************************* Step 7: load block chain\n \n     if (!bitdb.Open(GetDataDir()))\n     {"
      },
      {
        "sha": "ad5a7b0f195bb97cdaebe0f3fb8c23bd31785fad",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 5,
        "deletions": 5,
        "changes": 10,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -1291,7 +1291,7 @@ bool CTransaction::UpdateCoins(CCoinsViewCache &inputs, CTxUndo &txundo, int nHe\n \n bool CTransaction::HaveInputs(CCoinsViewCache &inputs) const\n {\n-    if (!IsCoinBase()) { \n+    if (!IsCoinBase()) {\n         // first check whether information about the prevout hash is available\n         for (unsigned int i = 0; i < vin.size(); i++) {\n             const COutPoint &prevout = vin[i].prevout;\n@@ -1356,9 +1356,9 @@ bool CTransaction::CheckInputs(CCoinsViewCache &inputs, enum CheckSig_mode csmod\n         // Helps prevent CPU exhaustion attacks.\n \n         // Skip ECDSA signature verification when connecting blocks\n-        // before the last blockchain checkpoint. This is safe because block merkle hashes are\n+        // before the last block chain checkpoint. This is safe because block merkle hashes are\n         // still computed and checked, and any change will be caught at the next checkpoint.\n-        if (csmode == CS_ALWAYS || \n+        if (csmode == CS_ALWAYS ||\n             (csmode == CS_AFTER_CHECKPOINT && inputs.GetBestBlock()->nHeight >= Checkpoints::GetTotalBlocksEstimate())) {\n             for (unsigned int i = 0; i < vin.size(); i++) {\n                 const COutPoint &prevout = vin[i].prevout;\n@@ -1620,7 +1620,7 @@ bool CBlock::ConnectBlock(CBlockIndex* pindex, CCoinsViewCache &view, bool fJust\n             return error(\"ConnectBlock() : WriteBlockIndex failed\");\n     }\n \n-    // add this block to the view's blockchain\n+    // add this block to the view's block chain\n     if (!view.SetBestBlock(pindex))\n         return false;\n \n@@ -2258,7 +2258,7 @@ bool static LoadBlockIndexDB()\n     printf(\"LoadBlockIndex(): last block file = %i\\n\", nLastBlockFile);\n     if (pblocktree->ReadBlockFileInfo(nLastBlockFile, infoLastBlockFile))\n         printf(\"LoadBlockIndex(): last block file: %s\\n\", infoLastBlockFile.ToString().c_str());\n- \n+\n     // Load hashBestChain pointer to end of best chain\n     pindexBest = pcoinsTip->GetBestBlock();\n     if (pindexBest == NULL)"
      },
      {
        "sha": "75950109daaf52f5625a0ee45336c67aa1379e28",
        "filename": "src/main.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/main.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/main.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.h?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -777,7 +777,7 @@ class CCoins\n     // unspent transaction outputs; spent outputs are .IsNull(); spent outputs at the end of the array are dropped\n     std::vector<CTxOut> vout;\n \n-    // at which height this transaction was included in the active blockchain\n+    // at which height this transaction was included in the active block chain\n     int nHeight;\n \n     // version of the CTransaction; accesses to this value should probably check for nHeight as well,\n@@ -798,7 +798,7 @@ class CCoins\n \n     // equality test\n     friend bool operator==(const CCoins &a, const CCoins &b) {\n-         return a.fCoinBase == b.fCoinBase && \n+         return a.fCoinBase == b.fCoinBase &&\n                 a.nHeight == b.nHeight &&\n                 a.nVersion == b.nVersion &&\n                 a.vout == b.vout;"
      },
      {
        "sha": "4714bfdd20b69342ec85f5ac014c41a0c4f96724",
        "filename": "src/rpcrawtransaction.cpp",
        "status": "modified",
        "additions": 1,
        "deletions": 1,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/rpcrawtransaction.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/rpcrawtransaction.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/rpcrawtransaction.cpp?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -299,7 +299,7 @@ Value signrawtransaction(const Array& params, bool fHelp)\n             \"signrawtransaction <hex string> [{\\\"txid\\\":txid,\\\"vout\\\":n,\\\"scriptPubKey\\\":hex},...] [<privatekey1>,...] [sighashtype=\\\"ALL\\\"]\\n\"\n             \"Sign inputs for raw transaction (serialized, hex-encoded).\\n\"\n             \"Second optional argument (may be null) is an array of previous transaction outputs that\\n\"\n-            \"this transaction depends on but may not yet be in the blockchain.\\n\"\n+            \"this transaction depends on but may not yet be in the block chain.\\n\"\n             \"Third optional argument (may be null) is an array of base58-encoded private\\n\"\n             \"keys that, if given, will be the only keys used to sign the transaction.\\n\"\n             \"Fourth optional argument is a string that is one of six values; ALL, NONE, SINGLE or\\n\""
      },
      {
        "sha": "0db33dcd0585cf62dea364870443006cbaa0c4f7",
        "filename": "src/test/DoS_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 3,
        "changes": 5,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/test/DoS_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/test/DoS_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/DoS_tests.cpp?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -46,7 +46,7 @@ BOOST_AUTO_TEST_CASE(DoS_banning)\n     BOOST_CHECK(CNode::IsBanned(addr1));  // ... but 1 still should be\n     dummyNode2.Misbehaving(50);\n     BOOST_CHECK(CNode::IsBanned(addr2));\n-}    \n+}\n \n BOOST_AUTO_TEST_CASE(DoS_banscore)\n {\n@@ -99,7 +99,7 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n {\n     using namespace boost::assign; // for 'map_list_of()'\n \n-    // Timestamps,nBits from the bitcoin blockchain.\n+    // Timestamps,nBits from the bitcoin block chain.\n     // These are the block-chain checkpoint blocks\n     typedef std::map<int64, unsigned int> BlockData;\n     BlockData chainData =\n@@ -129,7 +129,6 @@ BOOST_AUTO_TEST_CASE(DoS_checknbits)\n \n     // ... but OK if enough time passed for difficulty to adjust downward:\n     BOOST_CHECK(CheckNBits(firstcheck.second, lastcheck.first+60*60*24*365*4, lastcheck.second, lastcheck.first));\n-    \n }\n \n CTransaction RandomOrphan()"
      },
      {
        "sha": "3f280ba947936cea2f0a6cbb63e4ba880043df18",
        "filename": "src/test/script_tests.cpp",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/729b18068689c1a6805d04117ef05f97502f5062/src/test/script_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/729b18068689c1a6805d04117ef05f97502f5062/src/test/script_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/script_tests.cpp?ref=729b18068689c1a6805d04117ef05f97502f5062",
        "patch": "@@ -79,7 +79,7 @@ ParseScript(string s)\n         {\n             BOOST_ERROR(\"Parse error: \" << s);\n             return CScript();\n-        }                        \n+        }\n     }\n \n     return result;\n@@ -206,7 +206,7 @@ sign_multisig(CScript scriptPubKey, std::vector<CKey> keys, CTransaction transac\n     // NOTE: CHECKMULTISIG has an unfortunate bug; it requires\n     // one extra item on the stack, before the signatures.\n     // Putting OP_0 on the stack is the workaround;\n-    // fixing the bug would mean splitting the blockchain (old\n+    // fixing the bug would mean splitting the block chain (old\n     // clients would not accept new CHECKMULTISIG transactions,\n     // and vice-versa)\n     //"
      }
    ]
  }
]