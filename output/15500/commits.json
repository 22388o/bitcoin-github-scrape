[
  {
    "sha": "94fd16b0e7b8bc26e7533507e258eeb698358327",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo5NGZkMTZiMGU3YjhiYzI2ZTc1MzM1MDdlMjU4ZWViNjk4MzU4MzI3",
    "commit": {
      "author": {
        "name": "Murray Nesbitt",
        "email": "github@nesbitt.ca",
        "date": "2019-02-28T06:15:16Z"
      },
      "committer": {
        "name": "Murray Nesbitt",
        "email": "github@nesbitt.ca",
        "date": "2019-03-04T10:11:30Z"
      },
      "message": "Support for a bitcoind 'ready' file (default: '.ready')",
      "tree": {
        "sha": "644533ad417d712a5ebf377da908c834cca04b66",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/644533ad417d712a5ebf377da908c834cca04b66"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/94fd16b0e7b8bc26e7533507e258eeb698358327",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fd16b0e7b8bc26e7533507e258eeb698358327",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/94fd16b0e7b8bc26e7533507e258eeb698358327",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/94fd16b0e7b8bc26e7533507e258eeb698358327/comments",
    "author": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "murrayn",
      "id": 5404807,
      "node_id": "MDQ6VXNlcjU0MDQ4MDc=",
      "avatar_url": "https://avatars.githubusercontent.com/u/5404807?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/murrayn",
      "html_url": "https://github.com/murrayn",
      "followers_url": "https://api.github.com/users/murrayn/followers",
      "following_url": "https://api.github.com/users/murrayn/following{/other_user}",
      "gists_url": "https://api.github.com/users/murrayn/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/murrayn/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/murrayn/subscriptions",
      "organizations_url": "https://api.github.com/users/murrayn/orgs",
      "repos_url": "https://api.github.com/users/murrayn/repos",
      "events_url": "https://api.github.com/users/murrayn/events{/privacy}",
      "received_events_url": "https://api.github.com/users/murrayn/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "a0d4e79b4dbbfda027054c991705313fcf04135c",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/a0d4e79b4dbbfda027054c991705313fcf04135c",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/a0d4e79b4dbbfda027054c991705313fcf04135c"
      }
    ],
    "stats": {
      "total": 53,
      "additions": 46,
      "deletions": 7
    },
    "files": [
      {
        "sha": "8c135cb31a86f920d807c54a3d73952eea1573c1",
        "filename": "src/init.cpp",
        "status": "modified",
        "additions": 46,
        "deletions": 7,
        "changes": 53,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/94fd16b0e7b8bc26e7533507e258eeb698358327/src/init.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/94fd16b0e7b8bc26e7533507e258eeb698358327/src/init.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/init.cpp?ref=94fd16b0e7b8bc26e7533507e258eeb698358327",
        "patch": "@@ -120,6 +120,42 @@ NODISCARD static bool CreatePidFile()\n     }\n }\n \n+/**\n+ * The ready file facilities.\n+ */\n+static const char* BITCOIN_READY_FILENAME = \".ready\";\n+\n+static fs::path GetReadyFileName()\n+{\n+    return AbsPathForConfigVal(fs::path(gArgs.GetArg(\"-ready\", BITCOIN_READY_FILENAME)));\n+}\n+\n+NODISCARD static bool CreateReadyFile()\n+{\n+    FILE* file = fsbridge::fopen(GetReadyFileName(), \"w\");\n+    if (file) {\n+        fclose(file);\n+        return true;\n+    } else {\n+        return InitError(strprintf(_(\"Unable to create the ready status file '%s': %s\"),\n+                   GetReadyFileName().string(), std::strerror(errno)));\n+    }\n+}\n+\n+static bool RemoveFile(const fs::path& file)\n+{\n+    try {\n+        if (!fs::remove(file)) {\n+            LogPrintf(\"%s: Unable to remove '%s': File does not exist\\n\", __func__, file);\n+            return false;\n+        }\n+    } catch (const fs::filesystem_error& e) {\n+        LogPrintf(\"%s: Unable to remove '%s': %s\\n\", __func__, file, fsbridge::get_filesystem_error_message(e));\n+        return false;\n+    }\n+    return true;\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n //\n // Shutdown\n@@ -194,6 +230,7 @@ void Interrupt()\n void Shutdown(InitInterfaces& interfaces)\n {\n     LogPrintf(\"%s: In progress...\\n\", __func__);\n+    RemoveFile(GetReadyFileName());\n     static CCriticalSection cs_Shutdown;\n     TRY_LOCK(cs_Shutdown, lockShutdown);\n     if (!lockShutdown)\n@@ -288,13 +325,7 @@ void Shutdown(InitInterfaces& interfaces)\n     }\n #endif\n \n-    try {\n-        if (!fs::remove(GetPidFile())) {\n-            LogPrintf(\"%s: Unable to remove PID file: File does not exist\\n\", __func__);\n-        }\n-    } catch (const fs::filesystem_error& e) {\n-        LogPrintf(\"%s: Unable to remove PID file: %s\\n\", __func__, fsbridge::get_filesystem_error_message(e));\n-    }\n+    RemoveFile(GetPidFile());\n     interfaces.chain_clients.clear();\n     UnregisterAllValidationInterfaces();\n     GetMainSignals().UnregisterBackgroundSignalScheduler();\n@@ -396,6 +427,7 @@ void SetupServerArgs()\n     gArgs.AddArg(\"-prune=<n>\", strprintf(\"Reduce storage requirements by enabling pruning (deleting) of old blocks. This allows the pruneblockchain RPC to be called to delete specific blocks, and enables automatic pruning of old blocks if a target size in MiB is provided. This mode is incompatible with -txindex and -rescan. \"\n             \"Warning: Reverting this setting requires re-downloading the entire blockchain. \"\n             \"(default: 0 = disable pruning blocks, 1 = allow manual pruning via RPC, >=%u = automatically prune block files to stay under the specified target size in MiB)\", MIN_DISK_SPACE_FOR_BLOCK_FILES / 1024 / 1024), false, OptionsCategory::OPTIONS);\n+    gArgs.AddArg(\"-ready=<file>\", strprintf(\"Specify ready status file. Relative paths will be prefixed by a net-specific datadir location. (default: %s)\", BITCOIN_READY_FILENAME), false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex\", \"Rebuild chain state and block index from the blk*.dat files on disk\", false, OptionsCategory::OPTIONS);\n     gArgs.AddArg(\"-reindex-chainstate\", \"Rebuild chain state from the currently indexed blocks. When in pruning mode or if blocks on disk might be corrupted, use full -reindex instead.\", false, OptionsCategory::OPTIONS);\n #ifndef WIN32\n@@ -1224,6 +1256,9 @@ bool AppInitMain(InitInterfaces& interfaces)\n {\n     const CChainParams& chainparams = Params();\n     // ********************************************************* Step 4a: application initialization\n+    if (fs::exists(GetReadyFileName())) {\n+        RemoveFile(GetReadyFileName());\n+    }\n     if (!CreatePidFile()) {\n         // Detailed error printed inside CreatePidFile().\n         return false;\n@@ -1805,5 +1840,9 @@ bool AppInitMain(InitInterfaces& interfaces)\n         g_banman->DumpBanlist();\n     }, DUMP_BANS_INTERVAL * 1000);\n \n+    if (!CreateReadyFile()) {\n+        // Detailed error printed inside CreateReadyFile().\n+        return false;\n+    }\n     return true;\n }"
      }
    ]
  }
]