[
  {
    "sha": "8656dbb095bc392d8d348bb68124696a033997f8",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo4NjU2ZGJiMDk1YmMzOTJkOGQzNDhiYjY4MTI0Njk2YTAzMzk5N2Y4",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-11-19T20:36:10Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2014-11-19T20:36:10Z"
      },
      "message": "Port/fix txnmall.sh regression test\n\nPorted txnmall.sh to Python, and updated to match\nrecent transaction malleability changes.\n\nI also modified it so it tests both double-spending\nconfirmed and unconfirmed (only-in-mempool) transactions.\n\nRenamed to txn_doublespend, since that is really what is\nbeing tested. And told the pull-tester to run both\nvariations on this test.",
      "tree": {
        "sha": "22a908a48c518c9f827668b35eb1e31718aab918",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/22a908a48c518c9f827668b35eb1e31718aab918"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/8656dbb095bc392d8d348bb68124696a033997f8",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlRs/9kACgkQdYgkL74406iH+ACfWr/5GxNOikPpXmjNrUA+ITb0\n4owAoKTlQNxBKHB2Tc64rJBxv5PKAW4+\n=Jrbx\n-----END PGP SIGNATURE-----",
        "payload": "tree 22a908a48c518c9f827668b35eb1e31718aab918\nparent b5d1b1092998bc95313856d535c632ea5a8f9104\nauthor Gavin Andresen <gavinandresen@gmail.com> 1416429370 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1416429370 -0500\n\nPort/fix txnmall.sh regression test\n\nPorted txnmall.sh to Python, and updated to match\nrecent transaction malleability changes.\n\nI also modified it so it tests both double-spending\nconfirmed and unconfirmed (only-in-mempool) transactions.\n\nRenamed to txn_doublespend, since that is really what is\nbeing tested. And told the pull-tester to run both\nvariations on this test.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8656dbb095bc392d8d348bb68124696a033997f8",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/8656dbb095bc392d8d348bb68124696a033997f8",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/8656dbb095bc392d8d348bb68124696a033997f8/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b5d1b1092998bc95313856d535c632ea5a8f9104",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b5d1b1092998bc95313856d535c632ea5a8f9104",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b5d1b1092998bc95313856d535c632ea5a8f9104"
      }
    ],
    "stats": {
      "total": 274,
      "additions": 122,
      "deletions": 152
    },
    "files": [
      {
        "sha": "cc24a67c08527ea3348c8db8f8a1a0ae4bf47221",
        "filename": "qa/pull-tester/rpc-tests.sh",
        "status": "modified",
        "additions": 2,
        "deletions": 0,
        "changes": 2,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8656dbb095bc392d8d348bb68124696a033997f8/qa/pull-tester/rpc-tests.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8656dbb095bc392d8d348bb68124696a033997f8/qa/pull-tester/rpc-tests.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/pull-tester/rpc-tests.sh?ref=8656dbb095bc392d8d348bb68124696a033997f8",
        "patch": "@@ -18,6 +18,8 @@ fi\n if [ \"x${ENABLE_BITCOIND}${ENABLE_UTILS}${ENABLE_WALLET}\" = \"x111\" ]; then\n   ${BUILDDIR}/qa/rpc-tests/wallet.sh \"${BUILDDIR}/src\"\n   ${BUILDDIR}/qa/rpc-tests/listtransactions.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --srcdir \"${BUILDDIR}/src\"\n+  ${BUILDDIR}/qa/rpc-tests/txn_doublespend.py --mineblock --srcdir \"${BUILDDIR}/src\"\n   #${BUILDDIR}/qa/rpc-tests/forknotify.py --srcdir \"${BUILDDIR}/src\"\n else\n   echo \"No rpc tests to run. Wallet, utils, and bitcoind must all be enabled\""
      },
      {
        "sha": "6125147ebcc1d437ee158b0d6efb66574859499f",
        "filename": "qa/rpc-tests/txn_doublespend.py",
        "status": "added",
        "additions": 120,
        "deletions": 0,
        "changes": 120,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/8656dbb095bc392d8d348bb68124696a033997f8/qa/rpc-tests/txn_doublespend.py",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/8656dbb095bc392d8d348bb68124696a033997f8/qa/rpc-tests/txn_doublespend.py",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txn_doublespend.py?ref=8656dbb095bc392d8d348bb68124696a033997f8",
        "patch": "@@ -0,0 +1,120 @@\n+#!/usr/bin/env python\n+# Copyright (c) 2014 The Bitcoin Core developers\n+# Distributed under the MIT software license, see the accompanying\n+# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#\n+# Test proper accounting with malleable transactions\n+#\n+\n+from test_framework import BitcoinTestFramework\n+from bitcoinrpc.authproxy import AuthServiceProxy, JSONRPCException\n+from decimal import Decimal\n+from util import *\n+import os\n+import shutil\n+\n+class TxnMallTest(BitcoinTestFramework):\n+\n+    def add_options(self, parser):\n+        parser.add_option(\"--mineblock\", dest=\"mine_block\", default=False, action=\"store_true\",\n+                          help=\"Test double-spend of 1-confirmed transaction\")\n+\n+    def setup_network(self):\n+        # Start with split network:\n+        return super(TxnMallTest, self).setup_network(True)\n+\n+    def run_test(self):\n+        # All nodes should start with 1,250 BTC:\n+        starting_balance = 1250\n+        for i in range(4):\n+            assert_equal(self.nodes[i].getbalance(), starting_balance)\n+            self.nodes[i].getnewaddress(\"\")  # bug workaround, coins generated assigned to first getnewaddress!\n+        \n+        # Assign coins to foo and bar accounts:\n+        self.nodes[0].move(\"\", \"foo\", 1220)\n+        self.nodes[0].move(\"\", \"bar\", 30)\n+        assert_equal(self.nodes[0].getbalance(\"\"), 0)\n+\n+        # Coins are sent to node1_address\n+        node1_address = self.nodes[1].getnewaddress(\"from0\")\n+\n+        # First: use raw transaction API to send 1210 BTC to node1_address,\n+        # but don't broadcast:\n+        (total_in, inputs) = gather_inputs(self.nodes[0], 1210)\n+        change_address = self.nodes[0].getnewaddress(\"foo\")\n+        outputs = {}\n+        outputs[change_address] = 40\n+        outputs[node1_address] = 1210\n+        rawtx = self.nodes[0].createrawtransaction(inputs, outputs)\n+        doublespend = self.nodes[0].signrawtransaction(rawtx)\n+        assert_equal(doublespend[\"complete\"], True)\n+\n+        # Create two transaction from node[0] to node[1]; the\n+        # second must spend change from the first because the first\n+        # spends all mature inputs:\n+        txid1 = self.nodes[0].sendfrom(\"foo\", node1_address, 1210, 0)\n+        txid2 = self.nodes[0].sendfrom(\"bar\", node1_address, 20, 0)\n+        \n+        # Have node0 mine a block:\n+        if (self.options.mine_block):\n+            self.nodes[0].setgenerate(True, 1)\n+            sync_blocks(self.nodes[0:2])\n+\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+\n+        # Node0's balance should be starting balance, plus 50BTC for another\n+        # matured block, minus 1210, minus 20, and minus transaction fees:\n+        expected = starting_balance\n+        if self.options.mine_block: expected += 50\n+        expected += tx1[\"amount\"] + tx1[\"fee\"]\n+        expected += tx2[\"amount\"] + tx2[\"fee\"]\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+\n+        # foo and bar accounts should be debited:\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220+tx1[\"amount\"]+tx1[\"fee\"])\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 30+tx2[\"amount\"]+tx2[\"fee\"])\n+\n+        if self.options.mine_block:\n+            assert_equal(tx1[\"confirmations\"], 1)\n+            assert_equal(tx2[\"confirmations\"], 1)\n+            # Node1's \"from0\" balance should be both transaction amounts:\n+            assert_equal(self.nodes[1].getbalance(\"from0\"), -(tx1[\"amount\"]+tx2[\"amount\"]))\n+        else:\n+            assert_equal(tx1[\"confirmations\"], 0)\n+            assert_equal(tx2[\"confirmations\"], 0)\n+        \n+        # Now give doublespend to miner:\n+        mutated_txid = self.nodes[2].sendrawtransaction(doublespend[\"hex\"])\n+        # ... mine a block...\n+        self.nodes[2].setgenerate(True, 1)\n+\n+        # Reconnect the split network, and sync chain:\n+        connect_nodes(self.nodes[1], 2)\n+        self.nodes[2].setgenerate(True, 1)  # Mine another block to make sure we sync\n+        sync_blocks(self.nodes)\n+\n+        # Re-fetch transaction info:\n+        tx1 = self.nodes[0].gettransaction(txid1)\n+        tx2 = self.nodes[0].gettransaction(txid2)\n+        \n+        # Both transactions should be conflicted\n+        assert_equal(tx1[\"confirmations\"], -1)\n+        assert_equal(tx2[\"confirmations\"], -1)\n+\n+        # Node0's total balance should be starting balance, plus 100BTC for \n+        # two more matured blocks, minus 1210 for the double-spend:\n+        expected = starting_balance + 100 - 1210\n+        assert_equal(self.nodes[0].getbalance(), expected)\n+        assert_equal(self.nodes[0].getbalance(\"*\"), expected)\n+\n+        # foo account should be debited, but bar account should not:\n+        assert_equal(self.nodes[0].getbalance(\"foo\"), 1220-1210)\n+        assert_equal(self.nodes[0].getbalance(\"bar\"), 30)\n+\n+        # Node1's \"from\" account balance should be just the mutated send:\n+        assert_equal(self.nodes[1].getbalance(\"from0\"), 1210)\n+\n+if __name__ == '__main__':\n+    TxnMallTest().main()"
      },
      {
        "sha": "1296d54d92d7c6f0bd61aabe285aab9b4d43132b",
        "filename": "qa/rpc-tests/txnmall.sh",
        "status": "removed",
        "additions": 0,
        "deletions": 152,
        "changes": 152,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/b5d1b1092998bc95313856d535c632ea5a8f9104/qa/rpc-tests/txnmall.sh",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/b5d1b1092998bc95313856d535c632ea5a8f9104/qa/rpc-tests/txnmall.sh",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/qa/rpc-tests/txnmall.sh?ref=b5d1b1092998bc95313856d535c632ea5a8f9104",
        "patch": "@@ -1,152 +0,0 @@\n-#!/usr/bin/env bash\n-# Copyright (c) 2014 The Bitcoin Core developers\n-# Distributed under the MIT software license, see the accompanying\n-# file COPYING or http://www.opensource.org/licenses/mit-license.php.\n-\n-# Test proper accounting with malleable transactions\n-\n-if [ $# -lt 1 ]; then\n-        echo \"Usage: $0 path_to_binaries\"\n-        echo \"e.g. $0 ../../src\"\n-        echo \"Env vars BITCOIND and BITCOINCLI may be used to specify the exact binaries used\"\n-        exit 1\n-fi\n-\n-set -f\n-\n-BITCOIND=${BITCOIND:-${1}/bitcoind}\n-CLI=${BITCOINCLI:-${1}/bitcoin-cli}\n-\n-DIR=\"${BASH_SOURCE%/*}\"\n-SENDANDWAIT=\"${DIR}/send.sh\"\n-if [[ ! -d \"$DIR\" ]]; then DIR=\"$PWD\"; fi\n-. \"$DIR/util.sh\"\n-\n-D=$(mktemp -d test.XXXXX)\n-\n-# Two nodes; one will play the part of merchant, the\n-# other an evil transaction-mutating miner.\n-\n-D1=${D}/node1\n-CreateDataDir $D1 port=11000 rpcport=11001\n-B1ARGS=\"-datadir=$D1\"\n-$BITCOIND $B1ARGS &\n-B1PID=$!\n-\n-D2=${D}/node2\n-CreateDataDir $D2 port=11010 rpcport=11011\n-B2ARGS=\"-datadir=$D2\"\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-# Wait until both nodes are at the same block number\n-function WaitBlocks {\n-    while :\n-    do\n-        sleep 1\n-        declare -i BLOCKS1=$( GetBlocks $B1ARGS )\n-        declare -i BLOCKS2=$( GetBlocks $B2ARGS )\n-        if (( BLOCKS1 == BLOCKS2 ))\n-        then\n-            break\n-        fi\n-    done\n-}\n-\n-# Wait until node has $N peers\n-function WaitPeers {\n-    while :\n-    do\n-        declare -i PEERS=$( $CLI $1 getconnectioncount )\n-        if (( PEERS == \"$2\" ))\n-        then\n-            break\n-        fi\n-        sleep 1\n-    done\n-}\n-\n-echo \"Generating test blockchain...\"\n-\n-# Start with B2 connected to B1:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-WaitPeers \"$B1ARGS\" 1\n-\n-# 1 block, 50 XBT each == 50 XBT\n-$CLI $B1ARGS setgenerate true 1\n-\n-WaitBlocks\n-# 100 blocks, 0 mature == 0 XBT\n-$CLI $B2ARGS setgenerate true 100\n-WaitBlocks\n-\n-CheckBalance \"$B1ARGS\" 50\n-CheckBalance \"$B2ARGS\" 0\n-\n-# restart B2 with no connection\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$BITCOIND $B2ARGS &\n-B2PID=$!\n-\n-B2ADDRESS=$( $CLI $B2ARGS getaccountaddress \"from1\" )\n-\n-# Have B1 create two transactions; second will\n-# spend change from first, since B1 starts with only a single\n-# 50 bitcoin output:\n-$CLI $B1ARGS move \"\" \"foo\" 10.0 > /dev/null\n-$CLI $B1ARGS move \"\" \"bar\" 10.0 > /dev/null\n-TXID1=$( $CLI $B1ARGS sendfrom foo $B2ADDRESS 1.0 0)\n-TXID2=$( $CLI $B1ARGS sendfrom bar $B2ADDRESS 2.0 0)\n-\n-# Mutate TXID1 and add it to B2's memory pool:\n-RAWTX1=$( $CLI $B1ARGS getrawtransaction $TXID1 )\n-# RAWTX1 is hex-encoded, serialized transaction. So each\n-# byte is two characters; we'll prepend the first\n-# \"push\" in the scriptsig with OP_PUSHDATA1 (0x4c),\n-# and add one to the length of the signature.\n-# Fields are fixed; from the beginning:\n-# 4-byte version\n-# 1-byte varint number-of inputs (one in this case)\n-# 32-byte previous txid\n-# 4-byte previous output\n-# 1-byte varint length-of-scriptsig\n-# 1-byte PUSH this many bytes onto stack\n-#  ... etc\n-# So: to mutate, we want to get byte 41 (hex characters 82-83),\n-# increment it, and insert 0x4c after it.\n-L=${RAWTX1:82:2}\n-NEWLEN=$( printf \"%x\" $(( 16#$L + 1 )) )\n-MUTATEDTX1=${RAWTX1:0:82}${NEWLEN}4c${RAWTX1:84}\n-# ... give mutated tx1 to B2:\n-MUTATEDTXID=$( $CLI $B2ARGS sendrawtransaction $MUTATEDTX1 )\n-\n-echo \"TXID1: \" $TXID1\n-echo \"Mutated: \" $MUTATEDTXID\n-\n-# Re-connect nodes, and have B2 mine a block\n-# containing the mutant:\n-$CLI $B2ARGS addnode 127.0.0.1:11000 onetry\n-$CLI $B2ARGS setgenerate true 1\n-WaitBlocks\n-\n-# B1 should have 49 BTC; the 2 BTC send is\n-# conflicted, and should not count in\n-# balances.\n-CheckBalance \"$B1ARGS\" 49\n-CheckBalance \"$B1ARGS\" 49 \"*\"\n-CheckBalance \"$B1ARGS\" 9 \"foo\"\n-CheckBalance \"$B1ARGS\" 10 \"bar\"\n-\n-# B2 should have 51 BTC\n-CheckBalance \"$B2ARGS\" 51\n-CheckBalance \"$B2ARGS\" 1 \"from1\"\n-\n-$CLI $B2ARGS stop > /dev/null 2>&1\n-wait $B2PID\n-$CLI $B1ARGS stop > /dev/null 2>&1\n-wait $B1PID\n-\n-echo \"Tests successful, cleaning up\"\n-rm -rf $D\n-exit 0"
      }
    ]
  }
]