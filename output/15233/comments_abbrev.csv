kallewoof,2019-01-23T03:56:09Z,"Tested ACK\n\nMaster branch `make check` results in failures (see below); with this PR, `make check` exits successfully.\n```\nMaking check in src\n/Applications/Xcode.app/Contents/Developer/usr/bin/make  check-TESTS check-local\n../build-aux/test-driver: line 107: 29548 Abort trap: 6           ""$@"" > $log_file 2>&1\n```",https://github.com/bitcoin/bitcoin/pull/15233#issuecomment-456660901,456660901,
Sjors,2019-01-24T16:21:54Z,"Tested 6a5e3c2 on macOS without GUI, as follows:\n\nToggling `--enable-debug` produced some compiler headaches for me, so I cleaned up in between.\n\nTesting with `--enable-debug`:\n\n```sh\n# on master\nmake distclean\n./autogen.sh\n./configure --disable-bench --with-miniupnpc=no --with-incompatible-bdb --with-zmq --without-gui --enable-debug\nmake && make check\n# test fails\n\n# s",https://github.com/bitcoin/bitcoin/pull/15233#issuecomment-457259159,457259159,
sipa,2019-01-25T03:48:27Z,utACK 416bf1b74aecfda51fa9d41b57e39fd0d488e742. Squash?,https://github.com/bitcoin/bitcoin/pull/15233#issuecomment-457446147,457446147,
AkioNak,2019-01-25T04:28:27Z,"@promag Thanks for the suggestion. \nFixed and squashed.",https://github.com/bitcoin/bitcoin/pull/15233#issuecomment-457451925,457451925,
kallewoof,2019-01-25T04:43:31Z,"tACK b09dab0\n\n(It somehow escaped me that you could just do a static instance like that without making it a pointer. Mind blown. :)",https://github.com/bitcoin/bitcoin/pull/15233#issuecomment-457453966,457453966,
sipa,2019-01-23T03:15:44Z,Nit: function naming style (`GetLockData` ?).,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250043526,250043526,src/sync.cpp
sipa,2019-01-23T03:16:46Z,Can you use a `std::unique_ptr<LockData>` here instead? This code will technically cause a memory leak (as the `LockData` won't get cleaned up at shutdown).,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250043671,250043671,src/sync.cpp
kallewoof,2019-01-23T03:44:05Z,Hm? Why would it cause a leak? All memory used by a process is always released upon ~shutdown~ termination.,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250047227,250047227,src/sync.cpp
sipa,2019-01-23T04:07:05Z,"@kallewoof Yes, that's why I say technically. We generally ain to follow that rule though, as it means leak detection systems like valgrind don't report spurious leaks.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250049944,250049944,src/sync.cpp
kallewoof,2019-01-23T04:10:06Z,"I thought valgrind was intelligent about static vars inside functions, and always considered this type of expression to be acceptable. I guess a unique pointer is less dirty though, so concept ACK on the change.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250050373,250050373,src/sync.cpp
sipa,2019-01-23T04:15:36Z,"@kallewoof Good point, I hadn't considered that actually. Some googling indicates that in cases like this, the memory would indeed be counted as still reachable rather than lost.\n\nStill, using a unique_ptr here comes at no cost, and is more obviously correct.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250050983,250050983,src/sync.cpp
AkioNak,2019-01-23T05:25:48Z,"@sipa @kallewoof Thank you for the discussion.\nI will address it.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250059222,250059222,src/sync.cpp
practicalswift,2019-01-23T07:56:15Z,"The consensus must be that we should aim for zero bytes ""still reachable"" when exiting, right? :-)",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250085070,250085070,src/sync.cpp
promag,2019-01-24T16:12:13Z,Is this thread safe?,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250672823,250672823,src/sync.cpp
sipa,2019-01-24T16:17:13Z,"Yes, since C++11 the language guarantees that the static initializer is only run once. If it is invoked from multiple threads simultaneously, only the first will complete, and the others will wait for the first to run and use the same result.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250675162,250675162,src/sync.cpp
promag,2019-01-24T16:42:54Z,Could just be `static LockData lockdata;` right?,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250686088,250686088,src/sync.cpp
sipa,2019-01-24T17:30:08Z,"@promag Oh, even better!",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250705352,250705352,src/sync.cpp
promag,2019-01-25T08:23:15Z,Err could also be static..,https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250898800,250898800,src/sync.cpp
AkioNak,2019-01-25T10:54:10Z,"@promag Thanks for your reviewing.\nDoes this mean that the scope of ```GetLockData()``` should be compile-unit local same as original ```lockdata``` to prevent external calling?",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250943666,250943666,src/sync.cpp
promag,2019-01-25T11:01:39Z,"Yes linkage changed, but I don't think it warrants a PR.",https://github.com/bitcoin/bitcoin/pull/15233#discussion_r250946054,250946054,src/sync.cpp
