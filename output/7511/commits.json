[
  {
    "sha": "5207ff1c0d1bf153cfd2514997fd26cea293a47f",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1MjA3ZmYxYzBkMWJmMTUzY2ZkMjUxNDk5N2ZkMjZjZWEyOTNhNDdm",
    "commit": {
      "author": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-02-11T07:14:42Z"
      },
      "committer": {
        "name": "Pavel Jan\u00edk",
        "email": "Pavel@Janik.cz",
        "date": "2016-02-11T07:14:42Z"
      },
      "message": "New ax_pthread.m4 from upstream - draft 3 (not final), for testing on all platforms.",
      "tree": {
        "sha": "1af35b98bb974431dcae770d9e7761ba436d2d05",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/1af35b98bb974431dcae770d9e7761ba436d2d05"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5207ff1c0d1bf153cfd2514997fd26cea293a47f",
      "comment_count": 0,
      "verification": {
        "verified": false,
        "reason": "unsigned",
        "signature": null,
        "payload": null
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5207ff1c0d1bf153cfd2514997fd26cea293a47f",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5207ff1c0d1bf153cfd2514997fd26cea293a47f",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5207ff1c0d1bf153cfd2514997fd26cea293a47f/comments",
    "author": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "paveljanik",
      "id": 6848764,
      "node_id": "MDQ6VXNlcjY4NDg3NjQ=",
      "avatar_url": "https://avatars.githubusercontent.com/u/6848764?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/paveljanik",
      "html_url": "https://github.com/paveljanik",
      "followers_url": "https://api.github.com/users/paveljanik/followers",
      "following_url": "https://api.github.com/users/paveljanik/following{/other_user}",
      "gists_url": "https://api.github.com/users/paveljanik/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/paveljanik/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/paveljanik/subscriptions",
      "organizations_url": "https://api.github.com/users/paveljanik/orgs",
      "repos_url": "https://api.github.com/users/paveljanik/repos",
      "events_url": "https://api.github.com/users/paveljanik/events{/privacy}",
      "received_events_url": "https://api.github.com/users/paveljanik/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "b93f078496486c6b781d528a1061525f4fabd98f",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/b93f078496486c6b781d528a1061525f4fabd98f",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/b93f078496486c6b781d528a1061525f4fabd98f"
      }
    ],
    "stats": {
      "total": 539,
      "additions": 346,
      "deletions": 193
    },
    "files": [
      {
        "sha": "f5277708602ed31b85115faf846e8b9aebb0a1e2",
        "filename": "build-aux/m4/ax_pthread.m4",
        "status": "modified",
        "additions": 346,
        "deletions": 193,
        "changes": 539,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5207ff1c0d1bf153cfd2514997fd26cea293a47f/build-aux/m4/ax_pthread.m4",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5207ff1c0d1bf153cfd2514997fd26cea293a47f/build-aux/m4/ax_pthread.m4",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/build-aux/m4/ax_pthread.m4?ref=5207ff1c0d1bf153cfd2514997fd26cea293a47f",
        "patch": "@@ -1,5 +1,5 @@\n # ===========================================================================\n-#        http://www.gnu.org/software/autoconf-archive/ax_pthread.html\n+#\thttp://www.gnu.org/software/autoconf-archive/ax_pthread.html\n # ===========================================================================\n #\n # SYNOPSIS\n@@ -19,19 +19,19 @@\n #   is necessary on AIX to use the special cc_r compiler alias.)\n #\n #   NOTE: You are assumed to not only compile your program with these flags,\n-#   but also link it with them as well. e.g. you should link with\n+#   but also to link with them as well. For example, you might link with\n #   $PTHREAD_CC $CFLAGS $PTHREAD_CFLAGS $LDFLAGS ... $PTHREAD_LIBS $LIBS\n #\n-#   If you are only building threads programs, you may wish to use these\n+#   If you are only building threaded programs, you may wish to use these\n #   variables in your default LIBS, CFLAGS, and CC:\n #\n #     LIBS=\"$PTHREAD_LIBS $LIBS\"\n #     CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n #     CC=\"$PTHREAD_CC\"\n #\n #   In addition, if the PTHREAD_CREATE_JOINABLE thread-attribute constant\n-#   has a nonstandard name, defines PTHREAD_CREATE_JOINABLE to that name\n-#   (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n+#   has a nonstandard name, this macro defines PTHREAD_CREATE_JOINABLE to\n+#   that name (e.g. PTHREAD_CREATE_UNDETACHED on AIX).\n #\n #   Also HAVE_PTHREAD_PRIO_INHERIT is defined if pthread is found and the\n #   PTHREAD_PRIO_INHERIT symbol is defined when compiling with\n@@ -82,35 +82,40 @@\n #   modified version of the Autoconf Macro, you may extend this special\n #   exception to the GPL to apply to your modified version as well.\n \n-#serial 21\n+#serial 22\n \n AU_ALIAS([ACX_PTHREAD], [AX_PTHREAD])\n AC_DEFUN([AX_PTHREAD], [\n AC_REQUIRE([AC_CANONICAL_HOST])\n+AC_REQUIRE([AC_PROG_CC])\n+AC_REQUIRE([AC_PROG_SED])\n AC_LANG_PUSH([C])\n ax_pthread_ok=no\n \n # We used to check for pthread.h first, but this fails if pthread.h\n-# requires special compiler flags (e.g. on True64 or Sequent).\n+# requires special compiler flags (e.g. on Tru64 or Sequent).\n # It gets checked for in the link test anyway.\n \n # First of all, check if the user has set any of the PTHREAD_LIBS,\n # etcetera environment variables, and if threads linking works using\n # them:\n-if test x\"$PTHREAD_LIBS$PTHREAD_CFLAGS\" != x; then\n-        save_CFLAGS=\"$CFLAGS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-        save_LIBS=\"$LIBS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        AC_MSG_CHECKING([for pthread_join in LIBS=$PTHREAD_LIBS with CFLAGS=$PTHREAD_CFLAGS])\n-        AC_TRY_LINK_FUNC([pthread_join], [ax_pthread_ok=yes])\n-        AC_MSG_RESULT([$ax_pthread_ok])\n-        if test x\"$ax_pthread_ok\" = xno; then\n-                PTHREAD_LIBS=\"\"\n-                PTHREAD_CFLAGS=\"\"\n-        fi\n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n+if test \"x$PTHREAD_CFLAGS$PTHREAD_LIBS\" != \"x\"; then\n+\tax_pthread_save_CC=\"$CC\"\n+\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n+\tax_pthread_save_LIBS=\"$LIBS\"\n+\tAS_IF([test \"x$PTHREAD_CC\" != \"x\"], [CC=\"$PTHREAD_CC\"])\n+\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n+\tAC_MSG_CHECKING([for pthread_join using $CC $PTHREAD_CFLAGS $PTHREAD_LIBS])\n+\tAC_LINK_IFELSE([AC_LANG_CALL([], [pthread_join])], [ax_pthread_ok=yes])\n+\tAC_MSG_RESULT([$ax_pthread_ok])\n+\tif test \"x$ax_pthread_ok\" = \"xno\"; then\n+\t\tPTHREAD_LIBS=\"\"\n+\t\tPTHREAD_CFLAGS=\"\"\n+\tfi\n+\tCC=\"$ax_pthread_save_CC\"\n+\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n+\tLIBS=\"$ax_pthread_save_LIBS\"\n fi\n \n # We must check for the threads library under a number of different\n@@ -123,7 +128,7 @@ fi\n # which indicates that we try without any flags at all, and \"pthread-config\"\n # which is a program returning the flags for the Pth emulation library.\n \n-ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n+ax_pthread_flags=\"pthreads none -Kthread -pthread -pthreads -mthreads pthread --thread-safe -mt pthread-config\"\n \n # The ordering *is* (sometimes) important.  Some notes on the\n # individual items follow:\n@@ -132,186 +137,334 @@ ax_pthread_flags=\"pthreads none -Kthread -kthread lthread -pthread -pthreads -mt\n # none: in case threads are in libc; should be tried before -Kthread and\n #       other compiler flags to prevent continual compiler warnings\n # -Kthread: Sequent (threads in libc, but -Kthread needed for pthread.h)\n-# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n-# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n-# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads)\n-# -pthreads: Solaris/gcc\n-# -mthreads: Mingw32/gcc, Lynx/gcc\n+# -pthread: Linux/gcc (kernel threads), BSD/gcc (userland threads), Tru64\n+#           (Note: HP C rejects this with \"bad form for `-t' option\")\n+# -pthreads: Solaris/gcc (Note: HP C also rejects)\n # -mt: Sun Workshop C (may only link SunOS threads [-lthread], but it\n-#      doesn't hurt to check since this sometimes defines pthreads too;\n-#      also defines -D_REENTRANT)\n-#      ... -mt is also the pthreads flag for HP/aCC\n+#      doesn't hurt to check since this sometimes defines pthreads and\n+#      -D_REENTRANT too), HP C (must be checked before -lpthread, which\n+#      is present but should not be used directly; and before -mthreads,\n+#      because the compiler interprets this as \"-mt\" + \"-hreads\")\n+# -mthreads: Mingw32/gcc, Lynx/gcc\n # pthread: Linux, etcetera\n # --thread-safe: KAI C++\n # pthread-config: use pthread-config program (for GNU Pth library)\n \n-case ${host_os} in\n-        solaris*)\n+case $host_os in\n+\n+\tfreebsd*)\n+\n+\t# -kthread: FreeBSD kernel threads (preferred to -pthread since SMP-able)\n+\t# lthread: LinuxThreads port on FreeBSD (also preferred to -pthread)\n+\n+\tax_pthread_flags=\"-kthread lthread $ax_pthread_flags\"\n+\t;;\n+\n+\thpux*)\n+\n+\t# From the cc(1) man page: \"[-mt] Sets various -D flags to enable\n+\t# multi-threading and also sets -lpthread.\"\n+\n+\tax_pthread_flags=\"-mt -pthread pthread $ax_pthread_flags\"\n+\t;;\n+\n+\topenedition*)\n \n-        # On Solaris (at least, for some versions), libc contains stubbed\n-        # (non-functional) versions of the pthreads routines, so link-based\n-        # tests will erroneously succeed.  (We need to link with -pthreads/-mt/\n-        # -lpthread.)  (The stubs are missing pthread_cleanup_push, or rather\n-        # a function called by this macro, so we could check for that, but\n-        # who knows whether they'll stub that too in a future libc.)  So,\n-        # we'll just look for -pthreads and -lpthread first:\n+\t# IBM z/OS requires a feature-test macro to be defined in order to\n+\t# enable POSIX threads at all, so give the user a hint if this is\n+\t# not set. (We don't define these ourselves, as they can affect\n+\t# other portions of the system API in unpredictable ways.)\n \n-        ax_pthread_flags=\"-pthreads pthread -mt -pthread $ax_pthread_flags\"\n-        ;;\n+\tAC_EGREP_CPP([AX_PTHREAD_ZOS_MISSING],\n+\t    [\n+#\t     if !defined(_OPEN_THREADS) && !defined(_UNIX03_THREADS)\n+\t     AX_PTHREAD_ZOS_MISSING\n+#\t     endif\n+\t    ],\n+\t    [AC_MSG_WARN([IBM z/OS requires -D_OPEN_THREADS or -D_UNIX03_THREADS to enable pthreads support.])])\n+\t;;\n \n-        darwin*)\n-        ax_pthread_flags=\"-pthread $ax_pthread_flags\"\n-        ;;\n+\tsolaris*)\n+\n+\t# On Solaris (at least, for some versions), libc contains stubbed\n+\t# (non-functional) versions of the pthreads routines, so link-based\n+\t# tests will erroneously succeed. (N.B.: The stubs are missing\n+\t# pthread_cleanup_push, or rather a function called by this macro,\n+\t# so we could check for that, but who knows whether they'll stub\n+\t# that too in a future libc.)  So we'll check first for the\n+\t# standard Solaris way of linking pthreads (-mt -lpthread).\n+\n+\tax_pthread_flags=\"-mt,pthread pthread $ax_pthread_flags\"\n+\t;;\n esac\n \n-# Clang doesn't consider unrecognized options an error unless we specify\n-# -Werror. We throw in some extra Clang-specific options to ensure that\n-# this doesn't happen for GCC, which also accepts -Werror.\n-\n-AC_MSG_CHECKING([if compiler needs -Werror to reject unknown flags])\n-save_CFLAGS=\"$CFLAGS\"\n-ax_pthread_extra_flags=\"-Werror\"\n-CFLAGS=\"$CFLAGS $ax_pthread_extra_flags -Wunknown-warning-option -Wsizeof-array-argument\"\n-AC_COMPILE_IFELSE([AC_LANG_PROGRAM([int foo(void);],[foo()])],\n-                  [AC_MSG_RESULT([yes])],\n-                  [ax_pthread_extra_flags=\n-                   AC_MSG_RESULT([no])])\n-CFLAGS=\"$save_CFLAGS\"\n-\n-if test x\"$ax_pthread_ok\" = xno; then\n-for flag in $ax_pthread_flags; do\n-\n-        case $flag in\n-                none)\n-                AC_MSG_CHECKING([whether pthreads work without any flags])\n-                ;;\n-\n-                -*)\n-                AC_MSG_CHECKING([whether pthreads work with $flag])\n-                PTHREAD_CFLAGS=\"$flag\"\n-                ;;\n-\n-                pthread-config)\n-                AC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n-                if test x\"$ax_pthread_config\" = xno; then continue; fi\n-                PTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n-                PTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n-                ;;\n-\n-                *)\n-                AC_MSG_CHECKING([for the pthreads library -l$flag])\n-                PTHREAD_LIBS=\"-l$flag\"\n-                ;;\n-        esac\n-\n-        save_LIBS=\"$LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS $ax_pthread_extra_flags\"\n-\n-        # Check for various functions.  We must include pthread.h,\n-        # since some functions may be macros.  (On the Sequent, we\n-        # need a special flag -Kthread to make this header compile.)\n-        # We check for pthread_join because it is in -lpthread on IRIX\n-        # while pthread_create is in libc.  We check for pthread_attr_init\n-        # due to DEC craziness with -lpthreads.  We check for\n-        # pthread_cleanup_push because it is one of the few pthread\n-        # functions on Solaris that doesn't have a non-functional libc stub.\n-        # We try pthread_create on general principles.\n-        AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n-                        static void routine(void *a) { a = 0; }\n-                        static void *start_routine(void *a) { return a; }],\n-                       [pthread_t th; pthread_attr_t attr;\n-                        pthread_create(&th, 0, start_routine, 0);\n-                        pthread_join(th, 0);\n-                        pthread_attr_init(&attr);\n-                        pthread_cleanup_push(routine, 0);\n-                        pthread_cleanup_pop(0) /* ; */])],\n-                [ax_pthread_ok=yes],\n-                [])\n-\n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n-\n-        AC_MSG_RESULT([$ax_pthread_ok])\n-        if test \"x$ax_pthread_ok\" = xyes; then\n-                break;\n-        fi\n-\n-        PTHREAD_LIBS=\"\"\n-        PTHREAD_CFLAGS=\"\"\n+# GCC generally uses -pthread, or -pthreads on some platforms (e.g. SPARC)\n+\n+AS_IF([test \"x$GCC\" = \"xyes\"],\n+      [ax_pthread_flags=\"-pthread -pthreads $ax_pthread_flags\"])\n+\n+# The presence of a feature test macro requesting re-entrant function\n+# definitions is, on some systems, a strong hint that pthreads support is\n+# correctly enabled\n+\n+case $host_os in\n+\tdarwin* | hpux* | linux* | osf* | solaris*)\n+\tax_pthread_check_macro=\"_REENTRANT\"\n+\t;;\n+\n+\taix* | freebsd*)\n+\tax_pthread_check_macro=\"_THREAD_SAFE\"\n+\t;;\n+\n+\t*)\n+\tax_pthread_check_macro=\"--\"\n+\t;;\n+esac\n+AS_IF([test \"x$ax_pthread_check_macro\" = \"x--\"],\n+      [ax_pthread_check_cond=0],\n+      [ax_pthread_check_cond=\"!defined($ax_pthread_check_macro)\"])\n+\n+# Are we compiling with Clang?\n+\n+AC_CACHE_CHECK([whether $CC is Clang],\n+    [ax_cv_PTHREAD_CLANG],\n+    [ax_cv_PTHREAD_CLANG=no\n+     # Note that Autoconf sets GCC=yes for Clang as well as GCC\n+     if test \"x$GCC\" = \"xyes\"; then\n+\tAC_EGREP_CPP([AX_PTHREAD_CC_IS_CLANG],\n+\t    [/* Note: Clang 2.7 lacks __clang_[a-z]+__ */\n+#\t     if defined(__clang__) && defined(__llvm__)\n+\t     AX_PTHREAD_CC_IS_CLANG\n+#\t     endif\n+\t    ],\n+\t    [ax_cv_PTHREAD_CLANG=yes])\n+     fi\n+    ])\n+ax_pthread_clang=\"$ax_cv_PTHREAD_CLANG\"\n+\n+ax_pthread_clang_warning=no\n+\n+# Clang needs special handling, because older versions handle the -pthread\n+# option in a rather... idiosyncratic way\n+\n+if test \"x$ax_pthread_clang\" = \"xyes\"; then\n+\n+\t# Clang takes -pthread; it has never supported any other flag\n+\n+\t# (Note 1: This will need to be revisited if a system that Clang\n+\t# supports has POSIX threads in a separate library.  This tends not\n+\t# to be the way of modern systems, but it's conceivable.)\n+\n+\t# (Note 2: On some systems, notably Darwin, -pthread is not needed\n+\t# to get POSIX threads support; the API is always present and\n+\t# active.  We could reasonably leave PTHREAD_CFLAGS empty.  But\n+\t# -pthread does define _REENTRANT, and while the Darwin headers\n+\t# ignore this macro, third-party headers might not.)\n+\n+\tPTHREAD_CFLAGS=\"-pthread\"\n+\tPTHREAD_LIBS=\n+\n+\tax_pthread_ok=yes\n+\n+\t# However, older versions of Clang make a point of warning the user\n+\t# that, in an invocation where only linking and no compilation is\n+\t# taking place, the -pthread option has no effect (\"argument unused\n+\t# during compilation\").  They expect -pthread to be passed in only\n+\t# when source code is being compiled.\n+\t#\n+\t# Problem is, this is at odds with the way Automake and most other\n+\t# C build frameworks function, which is that the same flags used in\n+\t# compilation (CFLAGS) are also used in linking.  Many systems\n+\t# supported by AX_PTHREAD require exactly this for POSIX threads\n+\t# support, and in fact it is often not straightforward to specify a\n+\t# flag that is used only in the compilation phase and not in\n+\t# linking.  Such a scenario is extremely rare in practice.\n+\t#\n+\t# Even though use of the -pthread flag in linking would only print\n+\t# a warning, this can be a nuisance for well-run software projects\n+\t# that build with -Werror.  So if the active version of Clang has\n+\t# this misfeature, we search for an option to squash it.\n+\n+\tAC_CACHE_CHECK([whether Clang needs flag to prevent \"argument unused\" warning when linking with -pthread],\n+\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG],\n+\t    [ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=unknown\n+\t     # Create an alternate version of $ac_link that compiles and\n+\t     # links in two steps (.c -> .o, .o -> exe) instead of one\n+\t     # (.c -> exe), because the warning occurs only in the second\n+\t     # step\n+\t     ax_pthread_save_ac_link=\"$ac_link\"\n+\t     ax_pthread_sed='s/conftest\\.\\$ac_ext/conftest.$ac_objext/g'\n+\t     ax_pthread_link_step=`$as_echo \"$ac_link\" | sed \"$ax_pthread_sed\"`\n+\t     ax_pthread_2step_ac_link=\"($ac_compile) && (echo ==== >&5) && ($ax_pthread_link_step)\"\n+\t     ax_pthread_save_CFLAGS=\"$CFLAGS\"\n+\t     for ax_pthread_try in '' -Qunused-arguments -Wno-unused-command-line-argument unknown; do\n+\t\tAS_IF([test \"x$ax_pthread_try\" = \"xunknown\"], [break])\n+\t\tCFLAGS=\"-Werror -Wunknown-warning-option $ax_pthread_try -pthread $ax_pthread_save_CFLAGS\"\n+\t\tac_link=\"$ax_pthread_save_ac_link\"\n+\t\tAC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+\t\t    [ac_link=\"$ax_pthread_2step_ac_link\"\n+\t\t     AC_LINK_IFELSE([AC_LANG_SOURCE([[int main(void){return 0;}]])],\n+\t\t\t [break])\n+\t\t    ])\n+\t     done\n+\t     ac_link=\"$ax_pthread_save_ac_link\"\n+\t     CFLAGS=\"$ax_pthread_save_CFLAGS\"\n+\t     AS_IF([test \"x$ax_pthread_try\" = \"x\"], [ax_pthread_try=no])\n+\t     ax_cv_PTHREAD_CLANG_NO_WARN_FLAG=\"$ax_pthread_try\"\n+\t    ])\n+\n+\tcase \"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG\" in\n+\t\tno | unknown) ;;\n+\t\t*) PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_CLANG_NO_WARN_FLAG $PTHREAD_CFLAGS\" ;;\n+\tesac\n+\n+fi # $ax_pthread_clang = yes\n+\n+if test \"x$ax_pthread_ok\" = \"xno\"; then\n+for ax_pthread_try_flag in $ax_pthread_flags; do\n+\n+\tcase $ax_pthread_try_flag in\n+\t\tnone)\n+\t\tAC_MSG_CHECKING([whether pthreads work without any flags])\n+\t\t;;\n+\n+\t\t-mt,pthread)\n+\t\tAC_MSG_CHECKING([whether pthreads work with -mt -lpthread])\n+\t\tPTHREAD_CFLAGS=\"-mt\"\n+\t\tPTHREAD_LIBS=\"-lpthread\"\n+\t\t;;\n+\n+\t\t-*)\n+\t\tAC_MSG_CHECKING([whether pthreads work with $ax_pthread_try_flag])\n+\t\tPTHREAD_CFLAGS=\"$ax_pthread_try_flag\"\n+\t\t;;\n+\n+\t\tpthread-config)\n+\t\tAC_CHECK_PROG([ax_pthread_config], [pthread-config], [yes], [no])\n+\t\tAS_IF([test \"x$ax_pthread_config\" = \"xno\"], [continue])\n+\t\tPTHREAD_CFLAGS=\"`pthread-config --cflags`\"\n+\t\tPTHREAD_LIBS=\"`pthread-config --ldflags` `pthread-config --libs`\"\n+\t\t;;\n+\n+\t\t*)\n+\t\tAC_MSG_CHECKING([for the pthreads library -l$ax_pthread_try_flag])\n+\t\tPTHREAD_LIBS=\"-l$ax_pthread_try_flag\"\n+\t\t;;\n+\tesac\n+\n+\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n+\tax_pthread_save_LIBS=\"$LIBS\"\n+\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+\t# Check for various functions.  We must include pthread.h,\n+\t# since some functions may be macros.  (On the Sequent, we\n+\t# need a special flag -Kthread to make this header compile.)\n+\t# We check for pthread_join because it is in -lpthread on IRIX\n+\t# while pthread_create is in libc.  We check for pthread_attr_init\n+\t# due to DEC craziness with -lpthreads.  We check for\n+\t# pthread_cleanup_push because it is one of the few pthread\n+\t# functions on Solaris that doesn't have a non-functional libc stub.\n+\t# We try pthread_create on general principles.\n+\n+\tAC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>\n+#\t\t\tif $ax_pthread_check_cond\n+#\t\t\t error \"$ax_pthread_check_macro must be defined\"\n+#\t\t\tendif\n+\t\t\tstatic void routine(void *a) { a = 0; }\n+\t\t\tstatic void *start_routine(void *a) { return a; }],\n+\t\t       [pthread_t th; pthread_attr_t attr;\n+\t\t\tpthread_create(&th, 0, start_routine, 0);\n+\t\t\tpthread_join(th, 0);\n+\t\t\tpthread_attr_init(&attr);\n+\t\t\tpthread_cleanup_push(routine, 0);\n+\t\t\tpthread_cleanup_pop(0) /* ; */])],\n+\t    [ax_pthread_ok=yes],\n+\t    [])\n+\n+\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n+\tLIBS=\"$ax_pthread_save_LIBS\"\n+\n+\tAC_MSG_RESULT([$ax_pthread_ok])\n+\tAS_IF([test \"x$ax_pthread_ok\" = \"xyes\"], [break])\n+\n+\tPTHREAD_LIBS=\"\"\n+\tPTHREAD_CFLAGS=\"\"\n done\n fi\n \n # Various other checks:\n-if test \"x$ax_pthread_ok\" = xyes; then\n-        save_LIBS=\"$LIBS\"\n-        LIBS=\"$PTHREAD_LIBS $LIBS\"\n-        save_CFLAGS=\"$CFLAGS\"\n-        CFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n-\n-        # Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n-        AC_MSG_CHECKING([for joinable pthread attribute])\n-        attr_name=unknown\n-        for attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n-            AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n-                           [int attr = $attr; return attr /* ; */])],\n-                [attr_name=$attr; break],\n-                [])\n-        done\n-        AC_MSG_RESULT([$attr_name])\n-        if test \"$attr_name\" != PTHREAD_CREATE_JOINABLE; then\n-            AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE], [$attr_name],\n-                               [Define to necessary symbol if this constant\n-                                uses a non-standard name on your system.])\n-        fi\n-\n-        AC_MSG_CHECKING([if more special flags are required for pthreads])\n-        flag=no\n-        case ${host_os} in\n-            aix* | freebsd* | darwin*) flag=\"-D_THREAD_SAFE\";;\n-            osf* | hpux*) flag=\"-D_REENTRANT\";;\n-            solaris*)\n-            if test \"$GCC\" = \"yes\"; then\n-                flag=\"-D_REENTRANT\"\n-            else\n-                # TODO: What about Clang on Solaris?\n-                flag=\"-mt -D_REENTRANT\"\n-            fi\n-            ;;\n-        esac\n-        AC_MSG_RESULT([$flag])\n-        if test \"x$flag\" != xno; then\n-            PTHREAD_CFLAGS=\"$flag $PTHREAD_CFLAGS\"\n-        fi\n-\n-        AC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n-            [ax_cv_PTHREAD_PRIO_INHERIT], [\n-                AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n-                                                [[int i = PTHREAD_PRIO_INHERIT;]])],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n-                    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n-            ])\n-        AS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\"],\n-            [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])])\n-\n-        LIBS=\"$save_LIBS\"\n-        CFLAGS=\"$save_CFLAGS\"\n-\n-        # More AIX lossage: compile with *_r variant\n-        if test \"x$GCC\" != xyes; then\n-            case $host_os in\n-                aix*)\n-                AS_CASE([\"x/$CC\"],\n-                  [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n-                  [#handle absolute path differently from PATH based program lookup\n-                   AS_CASE([\"x$CC\"],\n-                     [x/*],\n-                     [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n-                     [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n-                ;;\n-            esac\n-        fi\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+\tax_pthread_save_CFLAGS=\"$CFLAGS\"\n+\tax_pthread_save_LIBS=\"$LIBS\"\n+\tCFLAGS=\"$CFLAGS $PTHREAD_CFLAGS\"\n+\tLIBS=\"$PTHREAD_LIBS $LIBS\"\n+\n+\t# Detect AIX lossage: JOINABLE attribute is called UNDETACHED.\n+\tAC_CACHE_CHECK([for joinable pthread attribute],\n+\t    [ax_cv_PTHREAD_JOINABLE_ATTR],\n+\t    [ax_cv_PTHREAD_JOINABLE_ATTR=unknown\n+\t     for ax_pthread_attr in PTHREAD_CREATE_JOINABLE PTHREAD_CREATE_UNDETACHED; do\n+\t\t AC_LINK_IFELSE([AC_LANG_PROGRAM([#include <pthread.h>],\n+\t\t\t\t\t\t [int attr = $ax_pthread_attr; return attr /* ; */])],\n+\t\t\t\t[ax_cv_PTHREAD_JOINABLE_ATTR=$ax_pthread_attr; break],\n+\t\t\t\t[])\n+\t     done\n+\t    ])\n+\tAS_IF([test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xunknown\" && \\\n+\t       test \"x$ax_cv_PTHREAD_JOINABLE_ATTR\" != \"xPTHREAD_CREATE_JOINABLE\" && \\\n+\t       test \"x$ax_pthread_joinable_attr_defined\" != \"xyes\"],\n+\t      [AC_DEFINE_UNQUOTED([PTHREAD_CREATE_JOINABLE],\n+\t\t\t\t  [$ax_cv_PTHREAD_JOINABLE_ATTR],\n+\t\t\t\t  [Define to necessary symbol if this constant\n+\t\t\t\t   uses a non-standard name on your system.])\n+\t       ax_pthread_joinable_attr_defined=yes\n+\t      ])\n+\n+\tAC_CACHE_CHECK([whether more special flags are required for pthreads],\n+\t    [ax_cv_PTHREAD_SPECIAL_FLAGS],\n+\t    [ax_cv_PTHREAD_SPECIAL_FLAGS=no\n+\t     case $host_os in\n+\t     solaris*)\n+\t     ax_cv_PTHREAD_SPECIAL_FLAGS=\"-D_POSIX_PTHREAD_SEMANTICS\"\n+\t     ;;\n+\t     esac\n+\t    ])\n+\tAS_IF([test \"x$ax_cv_PTHREAD_SPECIAL_FLAGS\" != \"xno\" && \\\n+\t       test \"x$ax_pthread_special_flags_added\" != \"xyes\"],\n+\t      [PTHREAD_CFLAGS=\"$ax_cv_PTHREAD_SPECIAL_FLAGS $PTHREAD_CFLAGS\"\n+\t       ax_pthread_special_flags_added=yes])\n+\n+\tAC_CACHE_CHECK([for PTHREAD_PRIO_INHERIT],\n+\t    [ax_cv_PTHREAD_PRIO_INHERIT],\n+\t    [AC_LINK_IFELSE([AC_LANG_PROGRAM([[#include <pthread.h>]],\n+\t\t\t\t\t     [[int i = PTHREAD_PRIO_INHERIT;]])],\n+\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=yes],\n+\t\t\t    [ax_cv_PTHREAD_PRIO_INHERIT=no])\n+\t    ])\n+\tAS_IF([test \"x$ax_cv_PTHREAD_PRIO_INHERIT\" = \"xyes\" && \\\n+\t       test \"x$ax_pthread_prio_inherit_defined\" != \"xyes\"],\n+\t      [AC_DEFINE([HAVE_PTHREAD_PRIO_INHERIT], [1], [Have PTHREAD_PRIO_INHERIT.])\n+\t       ax_pthread_prio_inherit_defined=yes\n+\t      ])\n+\n+\tCFLAGS=\"$ax_pthread_save_CFLAGS\"\n+\tLIBS=\"$ax_pthread_save_LIBS\"\n+\n+\t# More AIX lossage: compile with *_r variant\n+\tif test \"x$GCC\" != \"xyes\"; then\n+\t    case $host_os in\n+\t\taix*)\n+\t\tAS_CASE([\"x/$CC\"],\n+\t\t    [x*/c89|x*/c89_128|x*/c99|x*/c99_128|x*/cc|x*/cc128|x*/xlc|x*/xlc_v6|x*/xlc128|x*/xlc128_v6],\n+\t\t    [#handle absolute path differently from PATH based program lookup\n+\t\t     AS_CASE([\"x$CC\"],\n+\t\t\t [x/*],\n+\t\t\t [AS_IF([AS_EXECUTABLE_P([${CC}_r])],[PTHREAD_CC=\"${CC}_r\"])],\n+\t\t\t [AC_CHECK_PROGS([PTHREAD_CC],[${CC}_r],[$CC])])])\n+\t\t;;\n+\t    esac\n+\tfi\n fi\n \n test -n \"$PTHREAD_CC\" || PTHREAD_CC=\"$CC\"\n@@ -321,12 +474,12 @@ AC_SUBST([PTHREAD_CFLAGS])\n AC_SUBST([PTHREAD_CC])\n \n # Finally, execute ACTION-IF-FOUND/ACTION-IF-NOT-FOUND:\n-if test x\"$ax_pthread_ok\" = xyes; then\n-        ifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n-        :\n+if test \"x$ax_pthread_ok\" = \"xyes\"; then\n+\tifelse([$1],,[AC_DEFINE([HAVE_PTHREAD],[1],[Define if you have POSIX threads libraries and header files.])],[$1])\n+\t:\n else\n-        ax_pthread_ok=no\n-        $2\n+\tax_pthread_ok=no\n+\t$2\n fi\n AC_LANG_POP\n ])dnl AX_PTHREAD"
      }
    ]
  }
]