[
  {
    "sha": "d37a83590a3d018f900ed1f85d45fc1ec1a36754",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzpkMzdhODM1OTBhM2QwMThmOTAwZWQxZjg1ZDQ1ZmMxZWMxYTM2NzU0",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-02-26T16:48:36Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-04T20:14:01Z"
      },
      "message": "Two bug fixes for limitedmap size-limiting code\n\nThe code for limitedmap::insert would leave an entry in\nrmap with no corresponding entry in the forward map\nif the map was full and the entry being inserted had the\nlowest value (so was immediately erased).\n\nIt also had an off-by-one error; setting max_size to 11 results\nin a map with room for only 10 entries.\n\nNeither of these bugs matter for current use of limitedmap;\nI found them writing a unit test for new transaction validation\ncaching code.",
      "tree": {
        "sha": "bc87cdd8911499a9afde06a2a80491882fa9dca5",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/bc87cdd8911499a9afde06a2a80491882fa9dca5"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/d37a83590a3d018f900ed1f85d45fc1ec1a36754",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT3Z4kACgkQdYgkL74406g7GgCgtr5HaTQnOAiErqw40M68ZjQw\nsaEAn2GrjVULWdc5CX3eV0kBTpiweKN/\n=tZlz\n-----END PGP SIGNATURE-----",
        "payload": "tree bc87cdd8911499a9afde06a2a80491882fa9dca5\nparent 51598b26319bf1ee98b399dee8152b902c62891a\nauthor Gavin Andresen <gavinandresen@gmail.com> 1424969316 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425500041 -0500\n\nTwo bug fixes for limitedmap size-limiting code\n\nThe code for limitedmap::insert would leave an entry in\nrmap with no corresponding entry in the forward map\nif the map was full and the entry being inserted had the\nlowest value (so was immediately erased).\n\nIt also had an off-by-one error; setting max_size to 11 results\nin a map with room for only 10 entries.\n\nNeither of these bugs matter for current use of limitedmap;\nI found them writing a unit test for new transaction validation\ncaching code.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37a83590a3d018f900ed1f85d45fc1ec1a36754",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/d37a83590a3d018f900ed1f85d45fc1ec1a36754",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37a83590a3d018f900ed1f85d45fc1ec1a36754/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "51598b26319bf1ee98b399dee8152b902c62891a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/51598b26319bf1ee98b399dee8152b902c62891a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/51598b26319bf1ee98b399dee8152b902c62891a"
      }
    ],
    "stats": {
      "total": 4,
      "additions": 2,
      "deletions": 2
    },
    "files": [
      {
        "sha": "e3bad0bc6d5fa197511d5648672c6661c44c536e",
        "filename": "src/limitedmap.h",
        "status": "modified",
        "additions": 2,
        "deletions": 2,
        "changes": 4,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/d37a83590a3d018f900ed1f85d45fc1ec1a36754/src/limitedmap.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/d37a83590a3d018f900ed1f85d45fc1ec1a36754/src/limitedmap.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/limitedmap.h?ref=d37a83590a3d018f900ed1f85d45fc1ec1a36754",
        "patch": "@@ -38,11 +38,11 @@ class limitedmap\n     {\n         std::pair<iterator, bool> ret = map.insert(x);\n         if (ret.second) {\n-            if (nMaxSize && map.size() == nMaxSize) {\n+            rmap.insert(make_pair(x.second, ret.first));\n+            if (nMaxSize && map.size() > nMaxSize) {\n                 map.erase(rmap.begin()->second);\n                 rmap.erase(rmap.begin());\n             }\n-            rmap.insert(make_pair(x.second, ret.first));\n         }\n         return;\n     }"
      }
    ]
  },
  {
    "sha": "5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzo1ZGE0MWMxYTQxZDU2ZDliY2RhYTNiM2Y0ZGYwY2RmY2FmZTAxMDNh",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-02-26T20:27:11Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-04T20:14:02Z"
      },
      "message": "Optimize block validation by caching validation results in mempool\n\nStore validation flags along with transactions in the memory pool, and\nwhen validating a block, skip full validation if the transaction is\nin the pool and was validated with appropriate SCRIPT_VERIFY_ flags.\n\nThis significantly speeds up block verification, and, therefore,\nblock propagation.",
      "tree": {
        "sha": "f9efc6b196a7cde3c374825095c51d1c4379ad03",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/f9efc6b196a7cde3c374825095c51d1c4379ad03"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT3Z4oACgkQdYgkL74406iBGwCaAnEGvqMao5e2dxYudnCik0z+\nFmAAoLFdIRtdtkCwO3mlEQsPIRd/7gT+\n=gCFK\n-----END PGP SIGNATURE-----",
        "payload": "tree f9efc6b196a7cde3c374825095c51d1c4379ad03\nparent d37a83590a3d018f900ed1f85d45fc1ec1a36754\nauthor Gavin Andresen <gavinandresen@gmail.com> 1424982431 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425500042 -0500\n\nOptimize block validation by caching validation results in mempool\n\nStore validation flags along with transactions in the memory pool, and\nwhen validating a block, skip full validation if the transaction is\nin the pool and was validated with appropriate SCRIPT_VERIFY_ flags.\n\nThis significantly speeds up block verification, and, therefore,\nblock propagation.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "d37a83590a3d018f900ed1f85d45fc1ec1a36754",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/d37a83590a3d018f900ed1f85d45fc1ec1a36754",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/d37a83590a3d018f900ed1f85d45fc1ec1a36754"
      }
    ],
    "stats": {
      "total": 122,
      "additions": 102,
      "deletions": 20
    },
    "files": [
      {
        "sha": "bd415e3382d3c510066649ffd12f26a4c47af27e",
        "filename": "src/Makefile.test.include",
        "status": "modified",
        "additions": 1,
        "deletions": 0,
        "changes": 1,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/Makefile.test.include",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/Makefile.test.include",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/Makefile.test.include?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -68,6 +68,7 @@ BITCOIN_TESTS =\\\n   test/test_bitcoin.h \\\n   test/timedata_tests.cpp \\\n   test/transaction_tests.cpp \\\n+  test/txvalidationcache_tests.cpp \\\n   test/uint256_tests.cpp \\\n   test/univalue_tests.cpp \\\n   test/util_tests.cpp"
      },
      {
        "sha": "e19ef5ffcd42053ce69b757dfc045308974cc2cb",
        "filename": "src/main.cpp",
        "status": "modified",
        "additions": 15,
        "deletions": 5,
        "changes": 20,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/main.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/main.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/main.cpp?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -1023,7 +1023,7 @@ bool AcceptToMemoryPool(CTxMemPool& pool, CValidationState &state, const CTransa\n         CAmount nFees = nValueIn-nValueOut;\n         double dPriority = view.GetPriority(tx, chainActive.Height());\n \n-        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height());\n+        CTxMemPoolEntry entry(tx, nFees, GetTime(), dPriority, chainActive.Height(), STANDARD_SCRIPT_VERIFY_FLAGS);\n         unsigned int nSize = entry.GetTxSize();\n \n         // Don't accept it if it can't get into a block\n@@ -1795,6 +1795,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     std::vector<std::pair<uint256, CDiskTxPos> > vPos;\n     vPos.reserve(block.vtx.size());\n     blockundo.vtxundo.reserve(block.vtx.size() - 1);\n+    unsigned int nTxCacheHits = 0;\n     for (unsigned int i = 0; i < block.vtx.size(); i++)\n     {\n         const CTransaction &tx = block.vtx[i];\n@@ -1824,10 +1825,18 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n \n             nFees += view.GetValueIn(tx)-tx.GetValueOut();\n \n-            std::vector<CScriptCheck> vChecks;\n-            if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n-                return false;\n-            control.Add(vChecks);\n+            // Skip full validation if it was already validated to get into the mempool:\n+            if (mempool.validated(tx.GetHash(), flags))\n+            {\n+                ++nTxCacheHits;\n+            }\n+            else\n+            {\n+                std::vector<CScriptCheck> vChecks;\n+                if (!CheckInputs(tx, state, view, fScriptChecks, flags, false, nScriptCheckThreads ? &vChecks : NULL))\n+                    return false;\n+                control.Add(vChecks);\n+            }\n         }\n \n         CTxUndo undoDummy;\n@@ -1841,6 +1850,7 @@ bool ConnectBlock(const CBlock& block, CValidationState& state, CBlockIndex* pin\n     }\n     int64_t nTime1 = GetTimeMicros(); nTimeConnect += nTime1 - nTimeStart;\n     LogPrint(\"bench\", \"      - Connect %u transactions: %.2fms (%.3fms/tx, %.3fms/txin) [%.2fs]\\n\", (unsigned)block.vtx.size(), 0.001 * (nTime1 - nTimeStart), 0.001 * (nTime1 - nTimeStart) / block.vtx.size(), nInputs <= 1 ? 0 : 0.001 * (nTime1 - nTimeStart) / (nInputs-1), nTimeConnect * 0.000001);\n+    LogPrint(\"bench\", \"      - %u transaction validations cached\\n\", nTxCacheHits);\n \n     if (block.vtx[0].GetValueOut() > GetBlockValue(pindex->nHeight, nFees))\n         return state.DoS(100,"
      },
      {
        "sha": "9d7187058c45f2a9803e547bbef9237640b84124",
        "filename": "src/test/miner_tests.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 12,
        "changes": 24,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/test/miner_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/test/miner_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/miner_tests.cpp?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -105,7 +105,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 1000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -125,7 +125,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     {\n         tx.vout[0].nValue -= 10000000;\n         hash = tx.GetHash();\n-        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+        mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n         tx.vin[0].prevout.hash = hash;\n     }\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n@@ -134,7 +134,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n \n     // orphan in mempool\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -144,15 +144,15 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].prevout.hash = txFirst[1]->GetHash();\n     tx.vout[0].nValue = 4900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin.resize(2);\n     tx.vin[1].scriptSig = CScript() << OP_1;\n     tx.vin[1].prevout.hash = txFirst[0]->GetHash();\n     tx.vin[1].prevout.n = 0;\n     tx.vout[0].nValue = 5900000000LL;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -163,7 +163,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vin[0].scriptSig = CScript() << OP_0 << OP_1;\n     tx.vout[0].nValue = 0;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -176,12 +176,12 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     script = CScript() << OP_0;\n     tx.vout[0].scriptPubKey = GetScriptForDestination(CScriptID(script));\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     tx.vin[0].prevout.hash = hash;\n     tx.vin[0].scriptSig = CScript() << (std::vector<unsigned char>)script;\n     tx.vout[0].nValue -= 1000000;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -192,10 +192,10 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].nValue = 4900000000LL;\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     tx.vout[0].scriptPubKey = CScript() << OP_2;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));\n     delete pblocktemplate;\n     mempool.clear();\n@@ -221,7 +221,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx.vout[0].scriptPubKey = CScript() << OP_1;\n     tx.nLockTime = chainActive.Tip()->nHeight+1;\n     hash = tx.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(!IsFinalTx(tx, chainActive.Tip()->nHeight + 1));\n \n     // time locked\n@@ -235,7 +235,7 @@ BOOST_AUTO_TEST_CASE(CreateNewBlock_validity)\n     tx2.vout[0].scriptPubKey = CScript() << OP_1;\n     tx2.nLockTime = chainActive.Tip()->GetMedianTimePast()+1;\n     hash = tx2.GetHash();\n-    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11));\n+    mempool.addUnchecked(hash, CTxMemPoolEntry(tx2, 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n     BOOST_CHECK(!IsFinalTx(tx2));\n \n     BOOST_CHECK(pblocktemplate = CreateNewBlock(scriptPubKey));"
      },
      {
        "sha": "c26da1f8aac3c9251afc14feb19a75ab49d0d048",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "added",
        "additions": 56,
        "deletions": 0,
        "changes": 56,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -0,0 +1,56 @@\n+// Copyright (c) 2011-2014 The Bitcoin Core developers\n+// Distributed under the MIT software license, see the accompanying\n+// file COPYING or http://www.opensource.org/licenses/mit-license.php.\n+\n+#include \"txmempool.h\"\n+#include \"random.h\"\n+#include \"script/standard.h\"\n+#include \"utiltime.h\"\n+\n+#include <boost/test/unit_test.hpp>\n+\n+BOOST_AUTO_TEST_SUITE(tx_validationcache_tests)\n+\n+BOOST_AUTO_TEST_CASE(tx_validationcache)\n+{\n+    // Start with an empty memory pool\n+    CTxMemPool pool(CFeeRate(0));\n+\n+    // Create eleven transactions, add five of them to the pool:\n+    CMutableTransaction txs[11];\n+    for (int i = 0; i < 11; i++)\n+    {\n+        txs[i].vin.resize(1);\n+        txs[i].vin[0].scriptSig = CScript() << OP_11;\n+        txs[i].vin[0].prevout.hash = GetRandHash();\n+        txs[i].vin[0].prevout.n = 0;\n+        txs[i].vout.resize(1);\n+        txs[i].vout[0].nValue = 5000000000LL;\n+        txs[i].vout[0].scriptPubKey = CScript() << OP_EQUAL;\n+        if (i < 5)\n+            pool.addUnchecked(txs[i].GetHash(),\n+                                 CTxMemPoolEntry(txs[i], 11, GetTime(), 111.0, 11, STANDARD_SCRIPT_VERIFY_FLAGS));\n+    }\n+\n+    unsigned int nHits[3] = { 0, 0, 0 }; // Test three different sets of flags\n+    for (int i = 0; i < 11; i++)\n+    {\n+        uint256 txid = txs[i].GetHash();\n+        if (pool.validated(txid, STANDARD_SCRIPT_VERIFY_FLAGS)) ++nHits[0];\n+        if (pool.validated(txid, SCRIPT_VERIFY_NONE)) ++nHits[1];\n+        if (pool.validated(txid, SCRIPT_VERIFY_P2SH)) ++nHits[2];\n+    }\n+    BOOST_CHECK_EQUAL(nHits[0], 5);\n+    BOOST_CHECK_EQUAL(nHits[1], 5);\n+    BOOST_CHECK_EQUAL(nHits[2], 5);\n+\n+    // Add txs[5] with less-strict validation flag, and\n+    // make sure validation caching code Does The Right Thing:\n+    pool.addUnchecked(txs[5].GetHash(),\n+                         CTxMemPoolEntry(txs[5], 11, GetTime(), 111.0, 11, SCRIPT_VERIFY_P2SH));\n+\n+    BOOST_CHECK(!pool.validated(txs[5].GetHash(), STANDARD_SCRIPT_VERIFY_FLAGS));\n+    BOOST_CHECK(pool.validated(txs[5].GetHash(), SCRIPT_VERIFY_NONE));\n+}\n+\n+BOOST_AUTO_TEST_SUITE_END()"
      },
      {
        "sha": "0de402d1d35baf57d519c05e9262cefd723507ce",
        "filename": "src/txmempool.cpp",
        "status": "modified",
        "additions": 12,
        "deletions": 2,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/txmempool.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/txmempool.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.cpp?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -24,8 +24,9 @@ CTxMemPoolEntry::CTxMemPoolEntry():\n \n CTxMemPoolEntry::CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n                                  int64_t _nTime, double _dPriority,\n-                                 unsigned int _nHeight):\n-    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight)\n+                                 unsigned int _nHeight, unsigned int _flags):\n+    tx(_tx), nFee(_nFee), nTime(_nTime), dPriority(_dPriority), nHeight(_nHeight),\n+    validationFlags(_flags)\n {\n     nTxSize = ::GetSerializeSize(tx, SER_NETWORK, PROTOCOL_VERSION);\n \n@@ -637,6 +638,15 @@ bool CTxMemPool::lookup(uint256 hash, CTransaction& result) const\n     return true;\n }\n \n+bool CTxMemPool::validated(const uint256& hash, unsigned int validationFlags) const\n+{\n+    LOCK(cs);\n+    map<uint256, CTxMemPoolEntry>::const_iterator i = mapTx.find(hash);\n+    if (i == mapTx.end()) return false;\n+    unsigned int prevFlags = i->second.GetValidationFlags();\n+    return (prevFlags & validationFlags) == validationFlags;\n+}\n+\n CFeeRate CTxMemPool::estimateFee(int nBlocks) const\n {\n     LOCK(cs);"
      },
      {
        "sha": "6874590f619da965de4118fca7b835834411495b",
        "filename": "src/txmempool.h",
        "status": "modified",
        "additions": 6,
        "deletions": 1,
        "changes": 7,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/txmempool.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a/src/txmempool.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/txmempool.h?ref=5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "patch": "@@ -43,10 +43,12 @@ class CTxMemPoolEntry\n     int64_t nTime; //! Local time when entering the mempool\n     double dPriority; //! Priority when entering the mempool\n     unsigned int nHeight; //! Chain height when entering the mempool\n+    unsigned int validationFlags; //! SCRIPT_VERIFY flags tx was validated against\n \n public:\n     CTxMemPoolEntry(const CTransaction& _tx, const CAmount& _nFee,\n-                    int64_t _nTime, double _dPriority, unsigned int _nHeight);\n+                    int64_t _nTime, double _dPriority,\n+                    unsigned int _nHeight, unsigned int _flags);\n     CTxMemPoolEntry();\n     CTxMemPoolEntry(const CTxMemPoolEntry& other);\n \n@@ -56,6 +58,7 @@ class CTxMemPoolEntry\n     size_t GetTxSize() const { return nTxSize; }\n     int64_t GetTime() const { return nTime; }\n     unsigned int GetHeight() const { return nHeight; }\n+    unsigned int GetValidationFlags() const { return validationFlags; }\n };\n \n class CMinerPolicyEstimator;\n@@ -146,6 +149,8 @@ class CTxMemPool\n     }\n \n     bool lookup(uint256 hash, CTransaction& result) const;\n+    /** returns true if transaction is in mempool and is valid with respect to validationFlags */\n+    bool validated(const uint256& hash, unsigned int validationFlags) const;\n \n     /** Estimate fee rate needed to get into the next nBlocks */\n     CFeeRate estimateFee(int nBlocks) const;"
      }
    ]
  },
  {
    "sha": "2fba2c5d4afdc80dd1a0eb56340faf957015318c",
    "node_id": "MDY6Q29tbWl0MTE4MTkyNzoyZmJhMmM1ZDRhZmRjODBkZDFhMGViNTYzNDBmYWY5NTcwMTUzMThj",
    "commit": {
      "author": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-03T14:59:32Z"
      },
      "committer": {
        "name": "Gavin Andresen",
        "email": "gavinandresen@gmail.com",
        "date": "2015-03-05T15:44:24Z"
      },
      "message": "Unit test doublespends in new blocks\n\nAs suggested by Greg Maxwell-- unit test to make sure a block\nwith a double-spend in it doesn't pass validation if half of\nthe double-spend is already in the memory pool (so full-blown\ntransaction validation is skipped) when the block is received.",
      "tree": {
        "sha": "b5e99e6595f1d98274ffaa9c7db6be9cf50ccb76",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/git/trees/b5e99e6595f1d98274ffaa9c7db6be9cf50ccb76"
      },
      "url": "https://api.github.com/repos/bitcoin/bitcoin/git/commits/2fba2c5d4afdc80dd1a0eb56340faf957015318c",
      "comment_count": 0,
      "verification": {
        "verified": true,
        "reason": "valid",
        "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niEYEABECAAYFAlT4edoACgkQdYgkL74406gDYwCgzuaHvm2yrKIe4HZJrLAJ4wET\nOBYAnj+6RuV3lL7o+MCxdvKM7ESaT3Q6\n=L0cc\n-----END PGP SIGNATURE-----",
        "payload": "tree b5e99e6595f1d98274ffaa9c7db6be9cf50ccb76\nparent 5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a\nauthor Gavin Andresen <gavinandresen@gmail.com> 1425394772 -0500\ncommitter Gavin Andresen <gavinandresen@gmail.com> 1425570264 -0500\n\nUnit test doublespends in new blocks\n\nAs suggested by Greg Maxwell-- unit test to make sure a block\nwith a double-spend in it doesn't pass validation if half of\nthe double-spend is already in the memory pool (so full-blown\ntransaction validation is skipped) when the block is received.\n"
      }
    },
    "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fba2c5d4afdc80dd1a0eb56340faf957015318c",
    "html_url": "https://github.com/bitcoin/bitcoin/commit/2fba2c5d4afdc80dd1a0eb56340faf957015318c",
    "comments_url": "https://api.github.com/repos/bitcoin/bitcoin/commits/2fba2c5d4afdc80dd1a0eb56340faf957015318c/comments",
    "author": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "committer": {
      "login": "gavinandresen",
      "id": 331997,
      "node_id": "MDQ6VXNlcjMzMTk5Nw==",
      "avatar_url": "https://avatars.githubusercontent.com/u/331997?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/gavinandresen",
      "html_url": "https://github.com/gavinandresen",
      "followers_url": "https://api.github.com/users/gavinandresen/followers",
      "following_url": "https://api.github.com/users/gavinandresen/following{/other_user}",
      "gists_url": "https://api.github.com/users/gavinandresen/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/gavinandresen/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/gavinandresen/subscriptions",
      "organizations_url": "https://api.github.com/users/gavinandresen/orgs",
      "repos_url": "https://api.github.com/users/gavinandresen/repos",
      "events_url": "https://api.github.com/users/gavinandresen/events{/privacy}",
      "received_events_url": "https://api.github.com/users/gavinandresen/received_events",
      "type": "User",
      "site_admin": false
    },
    "parents": [
      {
        "sha": "5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "url": "https://api.github.com/repos/bitcoin/bitcoin/commits/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a",
        "html_url": "https://github.com/bitcoin/bitcoin/commit/5da41c1a41d56d9bcdaa3b3f4df0cdfcafe0103a"
      }
    ],
    "stats": {
      "total": 184,
      "additions": 180,
      "deletions": 4
    },
    "files": [
      {
        "sha": "e36112bd4fd12211236ee03a86617d1182cff682",
        "filename": "src/test/README.md",
        "status": "modified",
        "additions": 13,
        "deletions": 1,
        "changes": 14,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/README.md",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/README.md",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/README.md?ref=2fba2c5d4afdc80dd1a0eb56340faf957015318c",
        "patch": "@@ -18,4 +18,16 @@ uint256_tests.cpp.\n \n For further reading, I found the following website to be helpful in\n explaining how the boost unit test framework works:\n-[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n\\ No newline at end of file\n+[http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/](http://www.alittlemadness.com/2009/03/31/c-unit-testing-with-boosttest/).\n+\n+test_bitcoin has some built-in command-line arguments; for\n+example, to run just the getarg_tests verbosely:\n+\n+    test_bitcoin --log_level=all --run_test=getarg_tests\n+\n+... or to run just the doubledash test:\n+\n+    test_bitcoin --run_test=getarg_tests/doubledash\n+\n+Run  test_bitcoin --help   for the full list.\n+"
      },
      {
        "sha": "8c75e00343a16a7f411cf0615bf0c7374038c6ed",
        "filename": "src/test/test_bitcoin.cpp",
        "status": "modified",
        "additions": 58,
        "deletions": 1,
        "changes": 59,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/test_bitcoin.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/test_bitcoin.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.cpp?ref=2fba2c5d4afdc80dd1a0eb56340faf957015318c",
        "patch": "@@ -7,6 +7,8 @@\n #include \"test_bitcoin.h\"\n \n #include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"random.h\"\n #include \"txdb.h\"\n #include \"ui_interface.h\"\n@@ -27,9 +29,19 @@ extern bool fPrintToConsole;\n extern void noui_connect();\n \n TestingSetup::TestingSetup()\n+{\n+    Init(CBaseChainParams::UNITTEST);\n+}\n+TestingSetup::TestingSetup(CBaseChainParams::Network n)\n+{\n+    Init(n);\n+}\n+\n+void\n+TestingSetup::Init(CBaseChainParams::Network network)\n {\n         fPrintToDebugLog = false; // don't want to write to debug.log file\n-        SelectParams(CBaseChainParams::UNITTEST);\n+        SelectParams(network);\n         noui_connect();\n #ifdef ENABLE_WALLET\n         bitdb.MakeMock();\n@@ -75,6 +87,51 @@ TestingSetup::~TestingSetup()\n         boost::filesystem::remove_all(pathTemp);\n }\n \n+TestChain100Setup::TestChain100Setup() : TestingSetup(CBaseChainParams::REGTEST)\n+{\n+    // Generate a 100-block chain:\n+    coinbaseKey.MakeNewKey(true);\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+    for (int i = 0; i < COINBASE_MATURITY; i++)\n+    {\n+        std::vector<CMutableTransaction> noTxns;\n+        CBlock b = CreateAndProcessBlock(noTxns, scriptPubKey);\n+        coinbaseTxns.push_back(b.vtx[0]);\n+    }\n+}\n+\n+//\n+// Create a new block with just given transactions, coinbase paying to\n+// scriptPubKey, and try to add it to the current chain.\n+//\n+CBlock\n+TestChain100Setup::CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns, const CScript& scriptPubKey)\n+{\n+    CBlockTemplate *pblocktemplate = CreateNewBlock(scriptPubKey);\n+    CBlock& block = pblocktemplate->block;\n+\n+    // Replace mempool-selected txns with just coinbase plus passed-in txns:\n+    block.vtx.resize(1);\n+    BOOST_FOREACH(const CMutableTransaction& tx, txns)\n+        block.vtx.push_back(tx);\n+    // IncrementExtraNonce creates a valid coinbase and merkleRoot\n+    unsigned int extraNonce = 0;\n+    IncrementExtraNonce(&block, chainActive.Tip(), extraNonce);\n+\n+    while (!CheckProofOfWork(block.GetHash(), block.nBits)) ++block.nNonce;\n+\n+    CValidationState state;\n+    ProcessNewBlock(state, NULL, &block);\n+\n+    CBlock result = block;\n+    delete pblocktemplate;\n+    return result;\n+}\n+\n+TestChain100Setup::~TestChain100Setup()\n+{\n+}\n+\n void Shutdown(void* parg)\n {\n   exit(0);"
      },
      {
        "sha": "92f42102247664cd34965d9595acee4eb75aa98e",
        "filename": "src/test/test_bitcoin.h",
        "status": "modified",
        "additions": 37,
        "deletions": 2,
        "changes": 39,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/test_bitcoin.h",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/test_bitcoin.h",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/test_bitcoin.h?ref=2fba2c5d4afdc80dd1a0eb56340faf957015318c",
        "patch": "@@ -1,18 +1,53 @@\n #ifndef BITCOIN_TEST_TEST_BITCOIN_H\n #define BITCOIN_TEST_TEST_BITCOIN_H\n \n+#include \"key.h\"\n #include \"txdb.h\"\n \n #include <boost/filesystem.hpp>\n #include <boost/thread.hpp>\n \n+#include <vector>\n+\n+//\n+// Testing fixture for unit tests that need\n+// a UNITTEST block chain.\n+//\n struct TestingSetup {\n+public:\n+    TestingSetup();\n+    TestingSetup(CBaseChainParams::Network network);\n+    ~TestingSetup();\n+\n+protected:\n+    void Init(CBaseChainParams::Network network);\n+\n+private:\n     CCoinsViewDB *pcoinsdbview;\n     boost::filesystem::path pathTemp;\n     boost::thread_group threadGroup;\n+};\n \n-    TestingSetup();\n-    ~TestingSetup();\n+class CBlock;\n+struct CMutableTransaction;\n+class CScript;\n+\n+//\n+// Testing fixture that pre-creates a\n+// 100-block REGTEST-mode block chain\n+//\n+struct TestChain100Setup : public TestingSetup {\n+    TestChain100Setup();\n+\n+    // Create a new block with just given transactions, coinbase paying to\n+    // scriptPubKey, and try to add it to the current chain.\n+    CBlock CreateAndProcessBlock(const std::vector<CMutableTransaction>& txns,\n+                                 const CScript& scriptPubKey);\n+\n+    ~TestChain100Setup();\n+\n+    std::vector<CTransaction> coinbaseTxns; // For convenience, coinbase transactions\n+    CKey coinbaseKey; // private/public key needed to spend coinbase transactions\n };\n \n #endif"
      },
      {
        "sha": "1a0d90dbc629946dd72f8e236985037f68ccc719",
        "filename": "src/test/txvalidationcache_tests.cpp",
        "status": "modified",
        "additions": 72,
        "deletions": 0,
        "changes": 72,
        "blob_url": "https://github.com/bitcoin/bitcoin/blob/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/txvalidationcache_tests.cpp",
        "raw_url": "https://github.com/bitcoin/bitcoin/raw/2fba2c5d4afdc80dd1a0eb56340faf957015318c/src/test/txvalidationcache_tests.cpp",
        "contents_url": "https://api.github.com/repos/bitcoin/bitcoin/contents/src/test/txvalidationcache_tests.cpp?ref=2fba2c5d4afdc80dd1a0eb56340faf957015318c",
        "patch": "@@ -2,9 +2,14 @@\n // Distributed under the MIT software license, see the accompanying\n // file COPYING or http://www.opensource.org/licenses/mit-license.php.\n \n+#include \"key.h\"\n+#include \"main.h\"\n+#include \"miner.h\"\n+#include \"pubkey.h\"\n #include \"txmempool.h\"\n #include \"random.h\"\n #include \"script/standard.h\"\n+#include \"test/test_bitcoin.h\"\n #include \"utiltime.h\"\n \n #include <boost/test/unit_test.hpp>\n@@ -53,4 +58,71 @@ BOOST_AUTO_TEST_CASE(tx_validationcache)\n     BOOST_CHECK(pool.validated(txs[5].GetHash(), SCRIPT_VERIFY_NONE));\n }\n \n+static bool\n+ToMemPool(CMutableTransaction& tx)\n+{\n+    LOCK(cs_main);\n+\n+    CValidationState state;\n+    return AcceptToMemoryPool(mempool, state, tx, false, NULL, false);\n+}\n+\n+BOOST_FIXTURE_TEST_CASE(tx_mempool_block_doublespend, TestChain100Setup)\n+{\n+    // Make sure skipping validation of transctions that were\n+    // validated going into the memory pool does not allow\n+    // double-spends in blocks to pass validation when they should not.\n+    unsigned int startingHeight = chainActive.Height();\n+\n+    CScript scriptPubKey = CScript() <<  ToByteVector(coinbaseKey.GetPubKey()) << OP_CHECKSIG;\n+\n+    // Create a double-spend of mature coinbase txn:\n+    std::vector<CMutableTransaction> spends;\n+    spends.resize(2);\n+    for (int i = 0; i < 2; i++)\n+    {\n+        spends[i].vin.resize(1);\n+        spends[i].vin[0].prevout.hash = coinbaseTxns[0].GetHash();\n+        spends[i].vin[0].prevout.n = 0;\n+        spends[i].vout.resize(1);\n+        spends[i].vout[0].nValue = 11*CENT;\n+        spends[i].vout[0].scriptPubKey = scriptPubKey;\n+\n+        // Sign:\n+        std::vector<unsigned char> vchSig;\n+        uint256 hash = SignatureHash(scriptPubKey, spends[i], 0, SIGHASH_ALL);\n+        BOOST_CHECK(coinbaseKey.Sign(hash, vchSig));\n+        vchSig.push_back((unsigned char)SIGHASH_ALL);\n+        spends[i].vin[0].scriptSig << vchSig;\n+    }\n+\n+    CBlock block;\n+\n+    // Test 1: block with both of those transactions should be rejected.\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+\n+    // Test 2: ... and should be rejected if spend1 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[0]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Test 3: ... and should be rejected if spend2 is in the memory pool\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(spends, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() != block.GetHash());\n+    mempool.clear();\n+\n+    // Final sanity test: first spend in mempool, second in block, that's OK:\n+    std::vector<CMutableTransaction> oneSpend;\n+    oneSpend.push_back(spends[0]);\n+    BOOST_CHECK(ToMemPool(spends[1]));\n+    block = CreateAndProcessBlock(oneSpend, scriptPubKey);\n+    BOOST_CHECK(chainActive.Tip()->GetBlockHash() == block.GetHash());\n+    // spends[1] should have been removed from the mempool when the\n+    // block with spends[0] is accepted:\n+    BOOST_CHECK_EQUAL(mempool.size(), 0);\n+}\n+\n BOOST_AUTO_TEST_SUITE_END()"
      }
    ]
  }
]