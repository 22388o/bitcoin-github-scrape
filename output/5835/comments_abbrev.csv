gmaxwell,2015-02-27T02:14:42Z,"My recollection was that the prior code was at the level it was at to avoid a DOS attack where you have a transaction with 1000 valid signatures, and one invalid one that you repeat over and over again?\n\nIs the thinking that the DoS stuff is now adequate to protect against that?\n\nAny idea from profiling where all that time is going, absent the cache?\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76318668,76318668,
gavinandresen,2015-02-27T02:17:13Z,@gmaxwell : From an email I sent to Sergio earlier today to see if he can think of an attack from getting rid of the low-level signature cache:\n\nIt is easy for an attacker to force a CHECKSIG cache miss; they can just use CODESEPARATOR (at the cost of an extra byte in whatever Script they're using to try to CPU DoS).\n\nFree-floating p2sh transactions are limited to 15 sigops by AreInputsStandar,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76318896,76318896,
gmaxwell,2015-02-27T02:25:01Z,"WRT POW, I was worrying about the lose transaction case, not attacks in blocks.   The attack is the attacker has 1000 valid signatures, 1 invalid signature; the time is wasted on the valid signatures; the invalid is just there to avoid paying fees.  I don't see a way to cheaply invalidate the cache on the valid signatures.\n\nThe P2SH limit is per signature, I'm pretty sure you can get1000 checksi",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76319604,76319604,
gavinandresen,2015-02-27T02:43:24Z,"The 1,000-valid-plus-one-invalid attack will get the attacker DoS-banned for sending an invalid transaction.\n\nThey would have to Sybil and reconnect to get around that with either the old or new code; with the old code, they would have to pre-generate more valid signatures than the size of the signature cache AND Sybil to succeed in wasting CPU time. You're right, the new code makes the attack s",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76321205,76321205,
gmaxwell,2015-02-27T03:48:06Z,"Hm. So the caching isn't parametrized by the state of CCoinsview cache and validity can be conditional on it, but it's not clear to me that it matters.\n\nWhat happens with this sequence of events?\n\nMempool contains transaction B that spends input X.\nBlock contains transactions A, B.   Both A and B spend X.   A wasn't in the mempool and will be a cache miss.  B is in the mempool, cached with in",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76326232,76326232,
gmaxwell,2015-02-27T09:08:57Z,"It appears that most of the performance comes from avoiding the /seemingly/ redundant interrogation of the CCoinsViewCache in CheckInputs:\n\n```\ndiff --git a/src/main.cpp b/src/main.cpp\nindex b6a61f7..6590b98 100644\n--- a/src/main.cpp\n+++ b/src/main.cpp\n@@ -1436,11 +1436,6 @@ bool CheckInputs(const CTransaction& tx, CValidationState &state, const CCoinsVi\n         if (pvChecks)\n           ",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76359741,76359741,
gavinandresen,2015-02-27T13:10:47Z,"@gmaxwell: I agree, a unit and/or regression test for one-double-spend-in-mempool, two-in-a-block is a very good idea.\n\nRE: removing possibly redundant HaveInputs() :  should be a separate pull request. Thanks for reviewing and looking deeper!\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76391876,76391876,
gavinandresen,2015-02-27T13:14:16Z,"I realized this morning memory savings is even better than I thought: it is an extra 4 bytes per transaction in the mempool (not 32 bytes, I was either thinking of sizeof(txid) or confusing 32-bit-integer with 32-bytes).\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76392310,76392310,
gmaxwell,2015-02-27T13:24:11Z,hah. I read it as bits to begin with (and was very confused by your most recent comment.\n,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76393523,76393523,
SergioDemianLerner,2015-02-27T14:32:07Z,"I responded to Gavin, but now that I see this thread, I copy parts here:\n\nThe sigcache was added for security reasons and, as a by-product, it increases performance.\n\nWith a TxId cache you can achieve the performance part, but not the security protection.\n\nThe problem is described here https://bitcointalk.org/index.php?topic=136422.0 and only affects transactions during free forwarding (not ",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76402802,76402802,
sdaftuar,2015-02-27T14:47:27Z,"Gavin, were you able to test the effect of this change on overall runtime?  Sergio's observation that signatures are checked twice on entry to the mempool seems like it could plausibly make things slower to take out the signature cache, and I've noticed in my initial testing that when I play back historical data through a node running this pull's code, I am seeing a substantial (nearly 2x) slowdow",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76405239,76405239,
gavinandresen,2015-02-27T15:29:57Z,"@sdaftuar: thanks for testing!  I'll revert the low-level signature cache removal; it will, indeed, speed up initial download and accept-to-mempool.\n\nIf this pull is accepted there should be a separate follow-up pull request to make the default signature cache much smaller to save memory; it should only need to be as large as one transaction's worth of signatures, if we're not relying on it to o",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76412185,76412185,
gavinandresen,2015-02-27T16:19:35Z,"I ran this overnight with -debug=bench to get a sense of how good the assumption of ""blocks contain mostly transactions that are already in our memory pool"" is, and it turns out that is a very good assumption.\n\nThe last 11 blocks had ALL transactions except the coinbase already in the mempool. The twelfth had 161 of 170 in the memory pool, and I have to go back another 11 blocks to find one that",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76421414,76421414,
gavinandresen,2015-02-27T16:37:32Z,"Rebased to keep the old signature cache code.\n\n@SergioDemianLerner : RE locktime transactions: The memory pool does do the right thing with lockTime transactions (a bugfix went into 0.10.0 for that, if I remember correctly).  But even if it didn't, AcceptBlock calls ContextualCheckBlock which makes sure all transactions in the block are final, and  those checks are always done for new blocks.\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76424908,76424908,
ghost,2015-02-28T00:03:19Z,"Related #5163: Upon cursory review, still an outstanding optimization.\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76495878,76495878,
sdaftuar,2015-02-28T11:33:46Z,"@gavinandresen I've been running a version of this code overnight, and I'm curious if your results are similar to mine -- I'm typically seeing Verify times above 15 microseconds per txin, eg:\n\n```\n2015-02-28 02:41:57     - Verify 2671 txins: 39.67ms (0.015ms/txin) [443.41s]\n```\n\nwhich is an improvement, but still an order of magnitude slower than what you originally posted (1 microsecond/txi",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76522448,76522448,
gavinandresen,2015-03-01T12:56:57Z,"@sdaftuar : you are seeing verification times of 0.015 milliseconds per txin (0.015ms really does mean 15-thousandths-of-a-millisecond).  Note: I found the -bench numbers in brackets confusing; they are cumulative times (total time spent verifying or connecting or whatever, since startup).\n\nI should have time to add a double-spend-in-block, one-tx-in-mempool unit test for this tomorrow.\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76595609,76595609,
sdaftuar,2015-03-02T17:49:00Z,"@gavinandresen: Agreed, 0.015 milliseconds/txin.  To clarify, I was trying to make the point that the 0.001ms/txin that you reported at the beginning of this conversation is not consistent with what I was seeing, even when I restrict my samples to the very fastest blocks.\n\nI've done some more testing and I think the 60x speedup is way off for the performance benefit of this change, even in the c",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76761301,76761301,
gavinandresen,2015-03-03T16:26:03Z,"Updated with new unit test as suggested by @gmaxwell -- with the new unit test, Travis passing, and keeping the old sigcache I think I've addressed all concerns.\n\n@sdaftuar : can you email me a longer snippet of your debug.log, showing all the -debug=bench times? And the head of config.log?  (you're not benchmarking with -g or -DDEBUG_LOCKORDER, are you?)\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-76978961,76978961,
gavinandresen,2015-03-03T21:48:59Z,"@sdaftuar : never mind, I'm seeing similar results outside my benchmarking code. From a profile, it looks like adding a transaction to the memory pool isn't making UTXOs ""stick"" in the CCoinsViewCache for some reason, so the on-disk database is being hit during ProcessNewBlock.\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-77043603,77043603,
jonasschnelli,2015-03-05T09:21:53Z,F.I.Y: i'm getting some new warnings while compiling this:\nhttps://gist.github.com/jonasschnelli/3047fb27ebce6e15ab8a\n\nWill test and try to time-profile/compare with current master.\n,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-77331402,77331402,
gavinandresen,2015-03-05T15:46:27Z,"@jonasschnelli : thanks for testing. I fixed the new warning (and switched back to compiling my tree with clang++, so I'll catch them myself next time).\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-77387539,77387539,
jonasschnelli,2015-03-06T07:52:16Z,Did run a mainnet node over night with this PR on top.\n\nLast 10 blocks:\n\n```\n    - Verify 771 txins: 19.68ms (0.026ms/txin) [11767.47s]\nUpdateTip: new best=000000000000000002e13ee715262f37180c4633d378bab17567da89990e7196  height=346377  log2_work=82.371513  tx=61554777 \n\n    - Verify 452 txins: 5.09ms (0.011ms/txin) [11767.47s]\nUpdateTip: new best=000000000000000013ff0184ca697936fd67b5d70,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-77519885,77519885,
jonasschnelli,2015-03-06T12:02:12Z,current master bench (8 recent blocks):\n\n```\n    - Verify 5443 txins: 421.00ms (0.077ms/txin) [0.85s]\nUpdateTip: new best=0000000000000000097f38b3a09f92b0f4d2a647548774f46baa4b822cb3e71b  height=346390  log2_work=82.372114  tx=61562832\n\n    - Verify 4619 txins: 273.11ms (0.059ms/txin) [1.12s]\nUpdateTip: new best=000000000000000012a453ebe873ba9731b9d7b8bbbddbb2275406d1de4460cf  height=346391,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-77548933,77548933,
sipa,2015-04-27T14:39:40Z,"Concept ACK, though I would prefer keeping the cache (which becomes consensus-critical) outside of the mempool code.\n\n@SergioDemianLerner would the security concern not also be addressed by a simple per-txin-verification cache (which wouldn't need synchronization across validation threads, etc).\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-96679312,96679312,
SergioDemianLerner,2015-04-28T17:06:04Z,"@sipa No, but I don't know if I understood you correctly. The attack uses multiple txs, so the cache at the txin level wouldn't help. \n\nLet's try to tackle the contention problem...\n\nOne solution could be a cache data structure where reads use only a lightweight mutex (such as a per-thread incremental variable), and writes must be delayed until all reads have been performed (using a spin-lock ",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-97139030,97139030,
sipa,2015-04-28T17:12:30Z,@SergioDemianLerner Or a per-verification-thread cache?\n,https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-97140784,97140784,
gavinandresen,2015-07-27T18:18:43Z,"Closing, @sipa 's version is better (and just got merged).\n",https://github.com/bitcoin/bitcoin/pull/5835#issuecomment-125294215,125294215,
